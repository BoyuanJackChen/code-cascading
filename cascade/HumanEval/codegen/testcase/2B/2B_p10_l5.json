[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not has_close_elements([1.2], 1.2)\nassert has_close_elements([2.7, 1.5], 1.2)\nassert has_close_elements([2.8, 1.4, 1.2], 0.9)\nassert has_close_elements([1.2, 1.5, 1.4], 1.2)\n",
        "num_ids_2": 21,
        "num_ids_4": 67
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 1.01)\nassert     has_close_elements([1, 2, 3, 4, 5], 0.99)\nassert     has_close_elements([1, 2, 3, 4, 5], 1.1)\nassert     has_close_elements([1, 2, 3, 4, 5], 2)\nassert     has_close_elements([1, 2, 3, 4, 5], 4)\n",
        "num_ids_2": 48,
        "num_ids_4": 94
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     has_close_elements([1, 2, 3], 0.3) == False, \\\n        '1st element is closer to each other than threshold'\nassert     has_close_elements([1, 2, 3], 1) == True, \\\n        '2nd element is closer to each other than threshold'\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 0.1) == False, \\\n        '3rd element is closer to each other than threshold'\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 0.3) == True, \\\n        '4th element is closer to each other than threshold'\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 1) == True, \\\n        '5th element is closer to each other than threshold'\n",
        "num_ids_2": 46,
        "num_ids_4": 106
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5], 0.2) is True\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5], 0.3) is False\nassert     has_close_elements([-1, 0.1, -0.3, 0.5], 0.5) is False\nassert     has_close_elements([-0.5, 0.5], 0.3) is True\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5], 0.2) is False\n",
        "num_ids_2": 72,
        "num_ids_4": 129
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     has_close_elements([1.3, 1.4, 1.4], 0.3) is True, \\\n        \"Wrong answer\"\nassert has_close_elements([1.3, 1.4, 1.4], 0.4) is False, \\\n        \"Wrong answer\"\nassert has_close_elements([1.3, 1.4, 1.4], 1.1) is True, \\\n        \"Wrong answer\"\nassert has_close_elements([1.3, 1.4, 1.4], 1.4) is True, \\\n        \"Wrong answer\"\nassert has_close_elements([1.3, 1.4, 1.4], 1.3) is False, \\\n        \"Wrong answer\"\n",
        "num_ids_2": 59,
        "num_ids_4": 117
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    # numbers = [4, 1, 4, 4, 2, 2, 2]\n    # threshold = 0.1\n    # expected = True\n    # result = has_close_elements(numbers, threshold)\n    # print(result)\n    # assert result == expected\n\n\ndef have_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     has_close_elements([1, 2, 3, 4], threshold=0.25) == True\nassert     has_close_elements([1, 2, 3, 4], threshold=0.25) == True\nassert     has_close_elements([1, 2, 3, 4], threshold=1.25) == False\nassert     has_close_elements([1, 2, 3, 4], threshold=1.25) == False\nassert     has_close_elements([1, 2, 3, 4], threshold=2.5) == True\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5, 6], 1.1)\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 0.1)\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 0.5)\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 1.5)\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 2)\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     has_close_elements([1,2,3,4,5], 0) == False\nassert     has_close_elements([1,2,3,4,5], 1) == True\nassert     has_close_elements([1,2,3,4,5], 2) == True\n",
        "num_ids_2": 48,
        "num_ids_4": 72
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    has_close_elements([1,2,3,4,5], 3)\n    == True\n    has_close_elements([1,2,3,4,5], 2)\n    == True\n    has_close_elements([1,2,3,4,5], 0)\n    == False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     separate_paren_groups(\"(()\") == [\"()\"]\nassert     separate_paren_groups(\"(())\") == [\"(())\"]\nassert     separate_paren_groups(\"((()())\") == [\"((()())\"]\nassert     separate_paren_groups(\"(((()())))\") == [\"(((()())))\"]\nassert     separate_paren_groups(\"(((()()())))\") == [\"(((()())))\"]\n",
        "num_ids_2": 35,
        "num_ids_4": 79
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"(a + b) * (c + d)\") == ['(a + b)', '*', '(c + d)']\nassert     separate_paren_groups(\"a + (b * c)\") == ['a', '+', '(b * c)']\nassert     separate_paren_groups(\"a + (b * c) + d\") == ['a', '+', '(b * c)', '+', 'd']\nassert     separate_paren_groups(\"((a + b) * c) + d\") == ['((a + b) * c)', '+', 'd']\nassert     separate_paren_groups(\"((a + b) * (c + d))\") == ['((a + b) * (c + d))']\n",
        "num_ids_2": 70,
        "num_ids_4": 147
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"\") == []\nassert     separate_paren_groups(\"()\") == [\"()\"]\nassert     separate_paren_groups(\"(())\") == [\"(()\",\"())\"]\nassert     separate_paren_groups(\"(())()\") == [\"(()\",\"())\",\"()\"]\nassert     separate_paren_groups(\"((()))\") == [\"((()))\"]\n",
        "num_ids_2": 29,
        "num_ids_4": 72
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nseparate_paren_groups(\"(((a))))\") == [\"(a)\", \")\"]\nassert separate_paren_groups(\"(((((a))))))\") == [\"((a))\", \")\"]\nassert separate_paren_groups(\"(((a)))\") == [\"(a)\", \")\"]\nassert separate_paren_groups(\"(((()(a))))\") == [\"((a))\", \")\"]\nassert separate_paren_groups(\"(((())(a))\") == [\"((a))\", \")\"]\n",
        "num_ids_2": 27,
        "num_ids_4": 72
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     separate_paren_groups('(((()())(())()))') == ['((()())(())())', '()', '()']\nassert     separate_paren_groups('((()())((())()))') == ['((()())((()())))', '()', '()']\nassert     separate_paren_groups('(((()())((()())))((())()))') == ['(((()())((()())))((()())))', '()', '()']\nassert     separate_paren_groups('(()((()))())') == ['()((()))()', '()', '()']\nassert     separate_paren_groups('(((((())())()))((()()()()))') == ['(((((())())()))((()()()()))', '()', '()']\n",
        "num_ids_2": 70,
        "num_ids_4": 149
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     separate_paren_groups('(())()') == ['(', ')', '()']\nassert     separate_paren_groups('((()())(())()())') == ['((()())(())())', '()', '()', '()']\nassert     separate_paren_groups('((()())())') == ['((()())())']\nassert     separate_paren_groups('(()((()())(()))())') == ['(()((()())(()))())', '()', '()', '()']\nassert     separate_paren_groups('(()((()())((())()()))(()))()') == ['((()())((()))())', '()', '()', '()']\n",
        "num_ids_2": 60,
        "num_ids_4": 123
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     separate_paren_groups(\"()\") == ['', ''], 'error: parentheses not properly closed'\nassert     separate_paren_groups(\"((()))\") == ['', '(', ')', ''], 'error: unbalanced parentheses'\nassert     separate_paren_groups(\"()\") == ['', ''], 'error: parentheses not properly closed'\nassert     separate_paren_groups(\"((()))\") == ['', '(', ')', ''], 'error: unbalanced parentheses'\nassert     separate_paren_groups(\"(()())\") == ['', '(', ')', '()'], 'error: unbalanced parentheses'\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     separate_paren_groups(\"( ) (( ) )\") == [\"()\", \"()\", \"()\"]\nassert     separate_paren_groups(\"( ( ) ) ( )\") == [\"( )\", \"()\", \"()\", \"( )\"]\nassert     separate_paren_groups(\"(( ( ) ) )\") == [\"(( ) )\")\nassert     separate_paren_groups(\"( ) ) ( )\") == [\"()\", \"()\", \"()\"]\nassert     separate_paren_groups(\"( )\") == [\"()\"]\n",
        "num_ids_2": 57,
        "num_ids_4": 105
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     truncate_number(5.1) == 2.1\nassert truncate_number(5.2) == 2.2\nassert truncate_number(5.3) == 2.3\nassert truncate_number(5.4) == 2.4\nassert truncate_number(5.5) == 2.5\n",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef increment_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part and decimals (rightmost part always smaller than 1).\n\n    Return the integer part of the number incremented by 1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     truncate_number(1.23456789) == 0.23456789\nassert     truncate_number(0.5) == 0.5\nassert     truncate_number(0) == 0\nassert     truncate_number(5) == 0\nassert     truncate_number(1234.5678) == 0.5678\n",
        "num_ids_2": 40,
        "num_ids_4": 66
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     truncate_number(0) == 0\nassert     truncate_number(1.5) == 1.5\nassert     truncate_number(1) == 1\nassert     truncate_number(2.5) == 2\nassert     truncate_number(3.5) == 2.5\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef main():\n    import sys\n    assert len(sys.argv) == 2, 'Usage: python3 {sys.argv[0]} <integer>'\n\n    number = int(sys.argv[1])\n    decimals = truncate_number(number)\n    print(decimals)\n\nif __name__ == '__main__':\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     truncate_number(1.12) == 0.12\nassert     truncate_number(-1.12) == -1.12\nassert     truncate_number(1.000000000000001) == 0\nassert     truncate_number(-1.000000000000001) == -1\nassert     truncate_number(3.9999999999999) == 0\n",
        "num_ids_2": 35,
        "num_ids_4": 70
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     truncate_number(1.2) == 1.2\nassert     truncate_number(1.9) == 1.9\nassert     truncate_number(1.7) == 1.7\nassert     truncate_number(2.4) == 2\nassert     truncate_number(2.7) == 2\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     truncate_number(5.123) == 5\nassert    truncate_number(1.123) == 1\nassert    truncate_number(1.0000001) == 1\nassert    truncate_number(5) == 5\nassert    truncate_number(6.0000001) == 6\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert below_zero([3, 2, -1, 1]) == True\nassert below_zero([2, 1, -1, 1]) == False\nassert below_zero([1, 2, -1, 1]) == False\nassert below_zero([1, 2, 3, 1]) == False\n",
        "num_ids_2": 20,
        "num_ids_4": 54
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     below_zero([]) == False\nassert     below_zero([10]) == False\nassert     below_zero([-10]) == False\nassert     below_zero([10, 10]) == False\nassert     below_zero([10, -10]) == False\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     below_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ",
        "num_ids_2": 1026,
        "num_ids_4": 1026
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # first test cases\n    operations = [-1,2]\n    print(below_zero(operations)) # False\n    # test case #2\n    operations = [-1,1,1,4,2,-3,3,1,1,4]\n    print(below_zero(operations)) # True\n    # test case #3\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7]\n    print(below_zero(operations)) # False\n    # test case #4\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7,8,9]\n    print(below_zero(operations)) # False\n    # test case #5\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7,8,9,10]\n    print(below_zero(operations)) # True\n    # test case #6\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7,8,9,10,11]\n    print(below_zero(operations)) # True\n    # test case #7\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7,8,9,10,11,12]\n    print(below_zero(operations)) # True\n    # test case #8\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7,8,9,10,11,12,13]\n    print(below_zero(operations)) # False\n    # test case #9\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7,8,9,10,11,12,13,14]\n    print(below_zero(operations)) # True\n    # test case #10\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7,8,9,10,11,12,13,14,15]\n    print(below_zero(operations)) # True\n    # test case #11\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    print(below_zero(operations)) # True\n    # test case #12\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n    print(below_zero(operations)) # True\n    # test case #13\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n    print(below_zero(operations)) # True\n    # test case #14\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    print(below_zero(operations)) # True\n    # test case #15\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    print(below_zero(operations)) # True\n    # test case #16\n    operations = [-1,1,1,4,2,-3,3,1,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    print(below_zero(operations)) # True",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     below_zero([1, 1, 2, 3, 5, 7, 0, 0, 3]) == True\nassert     below_zero([1, 1, 2, 3, 5, 7, 0, 0, -3]) == True\nassert     below_zero([1, 1, 2, 3, 5, 7, 0, 0, -1]) == False\n\n\ndef non_positive_numbers(operations: List[int]) -> bool:\n    \"\"\" Given a list of operations where each operation takes an integer as an argument,\n    you need to write a function that determines if the account is non-positive at a given point.\n    If the account is non-positive at a given point, the function returns True, otherwise, it returns False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 55,
        "num_ids_4": 83
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     below_zero([4, 0, 0, 0, -5]) == True, 'wrong answer: should return True'\nassert     below_zero([4, 0, 0, 0, -5]) == False, 'wrong answer: should return False'\nassert     below_zero([3, 2, -1, -3]) == False, 'wrong answer: should return False'\nassert     below_zero([-3, -3, -1, -3]) == True, 'wrong answer: should return True'\nassert     below_zero([1, 1, 1, 1, 1]) == False, 'wrong answer: should return False'\n",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     below_zero([5, 1, 1, 4]) == False\nassert     below_zero([5, 1, 1, 5]) == True\nassert     below_zero([-5, 1, 1, 4]) == True\n\ndef max_profit(prices: List[int]) -> int:\n    \"\"\" For a given array of stock prices, find the maximum profit that could be made by buying and selling\n    the stock once.\n    \"\"\"\n    # your code here\n    max_profit = 0\n    min_price = float('inf')\n    for price in prices:\n        min_price = min(min_price, price)\n        profit = price - min_price\n        max_profit = max(max_profit, profit)\n    return max_profit\n",
        "num_ids_2": 34,
        "num_ids_4": 52
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef mean_median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Median Absolute\n    Deviation around the mean of this dataset.\n    Mean Median Absolute Deviation is the average distance between each\n    element and the median of this dataset.\n    \"\"\"\n    pass\n\nassert mean_median_absolute_deviation(\n    [4, 5, 3, 2, 4, 9, 7, 8, 6, 10]) == 3.5\n\n\ndef interquartile_range(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Inter Quartile Range\n    around the mean of this dataset.\n    Inter Quartile Range is a fraction of the difference between the first\n    quartile and the third quartile.\n    \"\"\"\n    pass\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the mean of this dataset.\n    Median Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    # Test 1\n    assert mean_absolute_deviation([1.2, 1.6, 2.1, 2.5, 3.0]) == 0.35\n\n    # Test 2\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 1\nassert     mean_absolute_deviation([1, 2, 3, 4, 4]) == 0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 2\nassert     mean_absolute_deviation([2, 4, 6, 8, 10]) == 5\nassert     mean_absolute_deviation([4, 6, 8, 10, 12]) == 5\n",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n\ndef mean_absolute_deviation_while_processing(numbers: List[float]) -> float:\n    \"\"\"\n    Return the Mean Absolute Deviation for the given numbers.\n    \"\"\"\n    pass\n\nassert\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef variance(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the variance around the mean\n    of this dataset.\n    Variance is the average of the squared difference between each element and a\n    centerpoint (mean in this case).\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     mean_absolute_deviation([1, 2, 3]) == 0.5\nassert mean_absolute_deviation([-1, -2, -3]) == 0.5\nassert mean_absolute_deviation([1, 2, 3, 4]) == 0.5\nassert mean_absolute_deviation([-1, -2, -3, -4]) == 0.5\nassert mean_absolute_deviation([1, 2, 3, -4]) == 0.5\n",
        "num_ids_2": 42,
        "num_ids_4": 88
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.166666666666667\nassert     mean_absolute_deviation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 5.095238095238095\nassert     mean_absolute_deviation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 5.078125\nassert     mean_absolute_deviation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]) == 5.118033988749895\nassert     mean_absolute_deviation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165",
        "num_ids_2": 95,
        "num_ids_4": 680
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersperse([1,2,3,4], 0) == [1,0,2,0,3,0,4]\nassert     intersperse([1,2,3,4], -1) == [1,2,0,3,4]\nassert     intersperse([1,2,3,4], -2) == [1,2,3,0,4]\nassert     intersperse([1,2,3,4], -3) == [1,2,3,4]\nassert     intersperse([1,2,3,4], -4) == [1,2,3,4]\n",
        "num_ids_2": 61,
        "num_ids_4": 117
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    for args in test_args:\n        assert intersperse(*args) == expected_output\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersperse([1, 2, 3], '-') == [1, '-', 2, '-', 3]\nassert     intersperse([1, 2, 3], '') == [1, 2, 3]\nassert     intersperse([1, 2, 3], '#') == [1, '#', 2, '#', 3]\nassert     intersperse([1, 2, 3], '-') == ['1', '-', '2', '-', '3']\nassert     intersperse([1, 2, 3], '') == ['1', '2', '3']\n",
        "num_ids_2": 51,
        "num_ids_4": 111
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert idesperse([], 1) == []\nassert idesperse([1], 1) == [1]\nassert idesperse([1, 2], 1) == [1, 2]\nassert idesperse([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]\nassert idesperse([1, 2, 3, 4, 5], 2) == [1, 2, 2, 3, 4, 5]\n",
        "num_ids_2": 25,
        "num_ids_4": 73
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert intersperse([2, 4, 7], 3) == [2, 3, 4, 7]\nassert intersperse([2, 4, 7], 5) == [2, 5, 4, 7]\nassert intersperse([2, 4, 7], 6) == [2, 6, 4, 7]\nassert intersperse([2, 4, 7], 7) == [2, 7, 4, 7]\n",
        "num_ids_2": 27,
        "num_ids_4": 75
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     intersperse([1,2,3], 2) == [1,2,2,3]\nassert     intersperse([1,2,3], 1) == [1,1,2,3]\nassert     intersperse([1,2,3], 4) == [1,2,4,3]\nassert     intersperse([1,2,3], -1) == [1,2,3,1,2,3]\n",
        "num_ids_2": 48,
        "num_ids_4": 101
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     intersperse([1, 2, 3], 2) == [2, 1, 2, 3]\nassert     intersperse([1, 2, 3], 1) == [1, 2, 3]\nassert     intersperse([], 1) == []\nassert     intersperse([1], 1) == [1]\nassert     intersperse([1], 2) == []\n",
        "num_ids_2": 46,
        "num_ids_4": 71
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert idesperse([1, 2, 3], 2) == [1, 2, 2, 3, 3]\nassert idesperse([1, 2, 3, 4], 2) == [1, 2, 3, 4, 2, 3, 4]\nassert idesperse([1, 2, 3, 4], 5) == [1, 2, 3, 4, 2, 3, 4, 2, 3, 4]\nassert idesperse([1, 2, 3, 4], 1) == [1, 2, 3, 4, 1, 2, 3, 4]\n\n\ndef group_songs(songs: List[int]) -> List[List[int]]:\n    \"\"\"\n    Get all the groups of 3 numbers in `songs' that add up to 0\n    \"\"\"\n    pass\n",
        "num_ids_2": 58,
        "num_ids_4": 130
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    result = []\n    if len(numbers) < 2:\n        return numbers\n    i = 0\n    while i < len(numbers)-1:\n        result.append(numbers[i])\n        result.append(delimeter)\n        i += 2\n    result.append(numbers[i])\n    return result\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_nested_parens(\"((()))\") == [2]\nassert     parse_nested_parens(\"(((((((()))))))\") == [3]\nassert     parse_nested_parens(\"((()))((()))\") == [2, 2]\nassert     parse_nested_parens(\"(((()((())))))\") == [3]\nassert     parse_nested_parens(\"((((((()))))))\") == [3]\n",
        "num_ids_2": 42,
        "num_ids_4": 89
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nparens = \"(()())(())\"\nassert parse_nested_parens(parens) == [3, 4]\n\nparens = \"(()())(()())(()(()))\"\nassert parse_nested_parens(parens) == [3, 4, 4, 5]\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_nested_parens('(())') == [0]\nassert     parse_nested_parens('(())()') == [0,1]\nassert     parse_nested_parens('(()(()))') == [0,1,2]\nassert     parse_nested_parens('(()()())(()())') == [0,1,2,3,4]\n",
        "num_ids_2": 39,
        "num_ids_4": 95
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parse_nested_parens(\"(())())\") == 2\nassert     parse_nested_parens(\"((()))\") == 3\nassert     parse_nested_parens(\"((((())))\") == 4\nassert     parse_nested_parens(\"((((((())))))\") == 5\nassert     parse_nested_parens(\"(((((((((())))))))))\") == 6\n",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"(())\") == [1]\nassert     parse_nested_parens(\"((())\") == [2]\nassert     parse_nested_parens(\"(((()))\") == [3]\nassert     parse_nested_parens(\"((()()))\") == [4]\nassert     parse_nested_parens(\"((()((()))))\") == [5]\n",
        "num_ids_2": 36,
        "num_ids_4": 76
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_nested_parens(\"((()()))\") == [2], \"wrong\"\nassert     parse_nested_parens(\"((()())))\") == [3], \"wrong\"\nassert     parse_nested_parens(\"(()((()()))\") == [1], \"wrong\"\nassert     parse_nested_parens(\"((()))\") == [2], \"wrong\"\nassert     parse_nested_parens(\"()\") == [1], \"wrong\"\n",
        "num_ids_2": 46,
        "num_ids_4": 93
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parse_nested_parens(\"((()()()()()()()()()()()()()))\") == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert parse_nested_parens(\"(()((()()()()()()()()()()()()()))(()))\") == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert parse_nested_parens
        "num_ids_2": 98,
        "num_ids_4": 1026
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_nested_parens(\"(((())())()(()))\") == [1, 2, 3, 3]\nassert     parse_nested_parens(\"((((()()())()()()))()(()))\") == [1, 2, 3, 4, 4, 5, 5, 6, 6, 6]\nassert     parse_nested_parens(\"(((()())()()(()))()(()))\") == [1, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6]\n\nif __name__ == \"__main__\":\n    import pytest\n    import sys\n    args = sys.argv[1:]\n    if not len(args):\n        print(f\"usage: {sys.argv[0]} filename\")\n        sys.exit(1)\n\n    for filename in args:\n        with open(filename) as file:\n            data = file.read().strip()\n        output = parse_nested_parens(data)\n        print(output)\n    print(output)",
        "num_ids_2": 77,
        "num_ids_4": 132
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parse_nested_parens('( ) ( ) ( )') == [0, 0, 1, 1]\nassert     parse_nested_parens('( ) ( ) ( )') == [0, 1, 1, 1]\nassert     parse_nested_parens('( ) ( ) ( ) )') == [0, 0, 0, 1]\nassert     parse_nested_parens
        "num_ids_2": 56,
        "num_ids_4": 1023
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nimport unittest\n\nclass Test(unittest.TestCase):\n\n    def test_filter_by_substring(self):\n        strings = [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcsde\", \"abcdsde\", \"abcdef\", \"abcef\", \"abcsdef\"]\n        substring = \"abc\"\n        expected = [\"abc\", \"abcde\", \"abcdsde\", \"abcdef\", \"abcef\"]\n        self.assertEqual(filter_by_substring(strings, substring), expected)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_by_substring([\"The quick brown fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\"], \"fox\") == [\"The fox\", \"The fox\", \"The fox\"]\nassert filter_by_substring([\"The quick brown fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\"], \"dog\") == []\nassert filter_by_substring([\"The quick brown fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\"], \"p\") == [\"The quick brown fox\"]\nassert filter_by_substring([\"The quick brown fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\"], \"\") == [\"The quick brown fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\"]\nassert filter_by_substring([\"The quick brown fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\", \"The fox\"], \"2\") == []\n",
        "num_ids_2": 104,
        "num_ids_4": 233
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f'], 'd') == ['d']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f'], 'b') == ['b']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f'], 'c') == ['c', 'e', 'f']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f'], 'z') == []\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f'], 'f') == ['f']\n",
        "num_ids_2": 72,
        "num_ids_4": 148
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_by_substring([\"apple\", \"bear\", \"black\"], \"\") == []\nassert     filter_by_substring([\"apple\", \"bear\", \"black\"], \"a\") == [\"apple\", \"bear\", \"black\"]\nassert     filter_by_substring([\"apple\", \"bear\", \"black\"], \"p\") == [\"apple\", \"bear\", \"black\"]\nassert     filter_by_substring([\"apple\", \"bear\", \"black\"], \"apple\") == [\"apple\"]\nassert     filter_by_substring([\"apple\", \"bear\", \"black\"], \"p$\") == [\"apple\"]\n",
        "num_ids_2": 55,
        "num_ids_4": 113
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_substring([\"Let's\", \"do\", \"a\", \"test\", \"here\", \"just\", \"to\", \"see\", \"if\", \"filtering\", \"works\"], \"filtering\") == ['Let\\'s', \"do\", \"a\", \"test\", \"here\", \"just\", \"to\"]\nassert     filter_by_substring([\"Let's\", \"do\", \"a\", \"test\", \"here\", \"just\", \"to\", \"see\", \"if\", \"filtering\", \"works\"], \"filtering\") == ['Let\\'s', \"do\", \"a\", \"test\", \"here\", \"just\", \"to\"]\nassert     filter_by_substring([\"Let's\", \"do\", \"a\", \"test\", \"here\", \"just\", \"to\", \"see\", \"if\", \"filtering\", \"works\"], \"filtering\") == ['Let\\'s', \"do\", \"a\", \"test\", \"here\", \"just\", \"to\"]\nassert     filter_by_substring([\"Let's\", \"do\", \"a\", \"test\", \"here\", \"just\", \"to\", \"see\", \"if\", \"filtering\", \"works\"], \"filtering\") == ['Let\\'s', \"do\", \"a\", \"test\", \"here\", \"just\", \"to\"]\nassert     filter_by_substring([\"Let's\", \"do\", \"a\", \"test\", \"here\", \"just\", \"to\", \"see\", \"if\", \"filtering\", \"works\"], \"filtering\") == ['Let\\'s', \"do\", \"a\", \"test\", \"here\", \"just\", \"to\"]\n",
        "num_ids_2": 146,
        "num_ids_4": 292
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_substring([\"ar\", \"at\", \"tat\"], \"at\") == [\"at\"]\nassert     filter_by_substring([\"ar\", \"at\", \"tat\"], \"ar\") == [\"ar\", \"at\"]\nassert     filter_by_substring([\"ar\", \"at\", \"tat\"], \"ar\") == [\"ar\", \"at\"]\nassert     filter_by_substring([\"ar\", \"at\", \"tat\"], \"tat\") == [\"tat\"]\nassert     filter_by_substring([\"ar\", \"at\", \"tat\"], \"at\") == []\n",
        "num_ids_2": 57,
        "num_ids_4": 116
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef filter_by_substring_2(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    pass\n\n\ndef filter_by_substring_3(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_by_substring([], \"test\") == []\nassert     filter_by_substring([\"test\"], \"test\") == [\"test\"]\nassert     filter_by_substring([\"test\"], \"test1\") == []\nassert     filter_by_substring([\"test\"], \"test2\") == []\nassert     filter_by_substring([\"test\", \"test1\", \"test2\"], \"test\") == [\"test\"]\n",
        "num_ids_2": 36,
        "num_ids_4": 74
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    # provide the strings to be tested\n    # do not change them for the sake of the autograder\n    strings = ['spam and eggs', 'eggs','spam and spam and eggs and spam and spam','spam and eggs', 'eggs and spam', 'eggs']\n    substring = 'eggs'\n    # check for all strings and their corresponding output\n    for s in strings:\n        print(s, \"->\", filter_by_substring(strings, substring))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f'], 'a') == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f'], 'f') == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f'], 'xyz') == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f'], 'c') == ['c', 'd', 'e', 'f']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f'], 'df') == ['e', 'f']\n",
        "num_ids_2": 102,
        "num_ids_4": 199
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsum_product([]) == (0, 1)\nassert sum_product([1]) == (1, 1)\nassert sum_product([1, 2, 3]) == (3, 6)\nassert sum_product([5, 2, 7, 8, 3]) == (22, 288)\n\n\ndef product_of_primes(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a product and a prime factor of all the integers\n    in a list. Empty product should be equal to 1 and empty prime factor should be equal to 1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 17,
        "num_ids_4": 57
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([2, 2]) == (2, 4)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([-2, -2, -3, -4]) == (-4, -12)\n",
        "num_ids_2": 29,
        "num_ids_4": 67
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \nassert \n\nassert sum_product([]) == (0, 1)\n",
        "num_ids_2": 6,
        "num_ids_4": 22
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 3]) == (6, 3)\nassert     sum_product([5, 5, 5, 5]) == (30, 10)\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([2, 1, 4, 3]) == (15, 24)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([]) == (0, 1)\n",
        "num_ids_2": 35,
        "num_ids_4": 75
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert (sum_product([1,2,3,4]) == (6,24))\nassert (sum_product([1]) == (1,1))\nassert (sum_product([]) == (0,1))\nassert (sum_product([1, 2, 3, 4]) == (6,24))\n",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_product([1]) == (1, 1)\nassert\nsum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert\nsum_product([1, 2, 3, 4]) == (6, 24)\nassert \nsum_product([1, 2, 3]) == (6, 6)\nassert \nsum_product([]) == (0, 1)\n",
        "num_ids_2": 5,
        "num_ids_4": 10
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3]) == (3, 6)\nassert     sum_product([-3, 4, -2, 1]) == (1, -36)\nassert     sum_product([-5, -3, -1, 1]) == (1, -60)\nassert     sum_product([-1, 1, -2, -3]) == (1, -18)\n",
        "num_ids_2": 33,
        "num_ids_4": 82
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([-1, -2, -3, -4, -5]) == (-15, -120)\nassert     sum_product([0, 1, 2, 3, 4]) == (0, 24)\nassert     sum_product([10, -10]) == (0, 100)\n",
        "num_ids_2": 37,
        "num_ids_4": 89
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         sum_product([]) == (0, 1)\nassert         sum_product([1]) == (1, 1)\nassert         sum_product([1, 2, 3]) == (6, 6)\nassert         sum_product([5, 3, 1, 7]) == (14, 21)\n\n\ndef distinct_substrings(s: str) -> int:\n    \"\"\" For a given string, find out the number of distinct substrings of it.\n    \"\"\"\n    pass\n",
        "num_ids_2": 29,
        "num_ids_4": 69
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rolling_max([1,2,3,4,5]) == [1,2,3,4,5]\nassert     rolling_max([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     rolling_max([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\n",
        "num_ids_2": 70,
        "num_ids_4": 164
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rolling_max([3, 4, 5, 5, 6, 1, 0, 2, 5]) == [3, 6, 6, 6, 6, 5, 5, 6, 5]\nassert     rolling_max([3, 4, 5, 5, 6, 1, 0, 2, 5]) == [3, 6, 6, 6, 6, 5, 5, 6, 5]\nassert     rolling_max([3, 4, 5, 5, 6, 1, 0, 2, 5]) == [3, 6, 6, 6, 6, 5, 5, 6, 5]\nassert     rolling_max([3, 4, 5, 5, 6, 1, 0, 2, 5]) == [3, 6, 6, 6, 6, 5, 5, 6, 5]\nassert     rolling_max([3, 4, 5, 5, 6, 1, 0, 2, 5]) == [3, 6, 6, 6, 6, 5, 5, 6, 5]\n",
        "num_ids_2": 90,
        "num_ids_4": 180
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef demo(func):\n    print(f'Demo: {func.__name__}')\n\nclass Test:\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n\ndef demo_func(*args, **kwargs):\n    print(args)\n    print(kwargs)\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6]) == [6, 6, 6, 6, 6, 6]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [7, 7, 7, 7, 7, 7, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [8, 8, 8, 8, 8, 8, 8, 8]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 9, 9, 9, 9, 9, 9, 9, 9]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n",
        "num_ids_2": 70,
        "num_ids_4": 156
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rolling_max([5, 2, 5, 3, 5]) == [5, 5, 5, 5, 5]\nassert     rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     rolling_max([0, 1, 2, 3]) == [1, 1, 1, 1]\nassert     rolling_max([-4, 5, -10, 5, 2, -10, -5]) == [-4, 5, 5, 5, 5, 5, 5]\n\n",
        "num_ids_2": 54,
        "num_ids_4": 120
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 1]) == [1, 2, 3, 4, 5]\nassert     rolling_max([-2, -4, -5, -6, -7, -10]) == [-2, -4, -5, -6, -7, -10]\nassert     rolling_max([-2, -4, -5, -6, -7, -10, 0]) == [-2, -4, -5, -6, -7, -10]\nassert     rolling_max([]) == []\n",
        "num_ids_2": 60,
        "num_ids_4": 150
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     rolling_max([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n",
        "num_ids_2": 43,
        "num_ids_4": 133
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\"\"\"\n    Args:\n        numbers: list of integers\n\n    Returns:\n        a list of rolling maximum elements found until given moment in the sequence.\n\"\"\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef test_rolling_max():\n    \"\"\"test rolling_max function\"\"\"\n    assert rolling_max([1, 2, 3]) == [1, 3, 3]\n    assert rolling_max([4, 5, 6]) == [6, 6, 6]\n    assert rolling_max([10, 1, 2, 3, 4, 5]) == [10, 10, 10, 10, 10, 10]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     make_palindrome('aba') == 'baa'\nassert     make_palindrome('racecar') == 'carrace'\nassert     make_palindrome('racecar') == 'racecar'\n\n\ndef get_longest_palindrome_from_array(input_array: List[str]) -> (int, str):\n    \"\"\" Find the longest palindrome from a given list of strings.\n    Algorithm idea is simple:\n    - Create a reversed copy of each element of the input array and\n      find the palindromic suffix.\n    - Add the suffix to the beginning of the input array.\n    - Repeat the algorithm with reversed input array.\n    \"\"\"\n    # create reversed copy of input array\n    input_array = input_array[::-1]\n\n    # find palindromic suffix\n    palindrome_suffix = ''\n    for i in range(len(input_array)):\n        if is_palindrome(input_array[i:]):\n            palindrome_suffix = input_array[i:]\n            break\n    \n    # start with first element of input_array\n    longest_palindrome = input_array[0]\n    for i in range(len(input_array)):\n        # add palindrome suffix to beginning of array\n        input_array = input_array[i:] + palindrome_suffix\n        # add reversed palindrome suffix to beginning of input_array\n        input_array = input_array[::-1] + palindrome_suffix\n        # check if palindrome is longer\n        if len(palindrome_suffix) > len(longest_palindrome):\n            # update longest palindrome\n            longest_palindrome = palindrome_suffix\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     make_palindrome(\"aab\") == \"aba\"\nassert     make_palindrome(\"abcd\") == \"abcd\"\nassert     make_palindrome(\"abc\") == \"abab\"\nassert     make_palindrome(\"aaaa\") == \"aaaa\"\nassert     make_palindrome(\"acb\") == \"abba\"\n",
        "num_ids_2": 33,
        "num_ids_4": 64
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(make_palindrome('civic'))\nprint(make_palindrome('ivicc'))\n\n\ndef make_palindrome_alternative(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    pass",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     make_palindrome('abcdcba') == 'dcbaabcdcba'\nassert    make_palindrome('racecar') == 'racecaracecar'\n\n\ndef reverse(string: str) -> str:\n    \"\"\" Reverses a string \"\"\"\n    if not string:\n        return string\n    return reverse(string[1:]) + string[:1]\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == reverse(string)\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_palindrome(is_palindrome(make_palindrome('racecar'))) == True\nassert     is_palindrome(is_palindrome(make_palindrome('elmo'))) == False\nassert     is_palindrome(is_palindrome(make_palindrome('tacocat'))) == True\n\n\n\ndef make_palindrome_upper(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 54,
        "num_ids_4": 83
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\"\"\"\nExample 1:\nInput: a = \"1c0111001f010100061a024b53535009181c\", b = \"686974207468652062756c6c277320657965\"\nOutput: \"746865206b696420646f6e277420706c6179\"\nExplanation: \nThe input strings are, respectively:\n1c0111001f010100061a024b53535009181c\n686974207468652062756c6c277320657965\nThe first four characters are the same, but \nthe last four characters differ.\n\nExample 2:\nInput: a = \"1c0111001f010100061a024b53535009181c\", b = \"686974207468652062756c6c277320657965\"\nOutput: \"746865206b696420646f6e277420706c6179\"\n\"\"\"\n\n\"\"\"\nExample 3:\nInput: a = \"1c0111001f010100061a024b53535009181c\", b = \"68717a20727b22cfe9da3e0036ccf7f6e8b66d1f90107\"\nOutput: \"22cfe91e8d6b2cfdf4afda3c6f935039a0b24adcebe2bc9dcfaf9edec88c8b1\"\n\nExample 4:\nInput: a = \"1c0111001f010100061a024b53535009181c\", b = \"58e4dcfaf9a583a6a2f748c82e4649a5b772e2e7dcfa23b7e65fa87cde944d2f4b55af7d5fbe7cdc9ad\"\nOutput: \"7a3d86a41daaf3c9b46c87e7586ff3834ec8ebbca3b08e2ea6bc1e2a8329debc\"\n\"\"\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_xor(\"a\", \"b\") == \"f\"\nassert     string_xor(\"a\", \"\") == \"a\"\nassert     string_xor(\"\", \"b\") == \"b\"\nassert     string_xor(\"ab\", \"b\") == \"c\"\nassert     string_xor(\"aab\", \"b\") == \"cab\"\n",
        "num_ids_2": 33,
        "num_ids_4": 66
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_xor(\"00110110\", \"11111111\") == \"01110111\"\nassert     string_xor(\"11111111\", \"00110110\") == \"01110111\"\nassert     string_xor(\"11111111\", \"11111111\") == \"\"\nassert     string_xor(\"11111111\", \"111110000\") == \"\"\nassert     string_xor(\"111110000\", \"11111111\") == \"\"\n",
        "num_ids_2": 48,
        "num_ids_4": 83
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_xor('1001','1001') == '0000'\nassert     string_xor('1001','1001') == '0000'\nassert     string_xor('1010','1011') == '0001'\nassert     string_xor('1010','1011') == '0001'\nassert     string_xor('0101','0111') == '1100'\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef modular_exp(a: int, b: int, m: int) -> int:\n    \"\"\" Perform modular exponentiation given two integers a and b, where \n    a is an integer and b is an integer.\n    Your code should calculate a**b mod m.\n    \"\"\"\n    pass\n\ndef str_to_int(s: str) -> int:\n    \"\"\" Convert a string s to its integer value. The string s represents a\n    decimal integer value.\n    \"\"\"\n    pass\n\ndef str_to_bool(s: str) -> bool:\n    \"\"\" Convert a string s to its boolean value. The string s represents a\n    true or false value.\n    \"\"\"\n    pass\n\n\ndef str_to_float(s: str) -> float:\n    \"\"\" Convert a string s to its floating-point value. The string s represents\n    a floating-point integer value.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef hamming_distance(a: str, b: str) -> int:\n    \"\"\"\n    Given two strings of equal length, output the Hamming distance between them.\n\n    The Hamming distance is the number of strings of the same length whose \n    slices don't contain any bit different than the corresponding slices in the original strings. \n    That is, if we change all of the values in one string to 1s and all the values in the other string to 0s, \n    then the two strings should compare as equal.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nclass Solution:\n    \"\"\" Given an array of strings, check whether the string is permutation of another string.\n\n    NOTE:\n    This question is mainly concerned about the repeated number problem.\n    We can do this problem using XOR.\n    We XOR all characters in string_1 and then check the result of XOR with first characters of string_2\n    In the below example:\n    string_1 = \"abc\"\n    string_2 = \"abc\"\n    \n    XOR_result = 'a'^'a'^'b' = 'b' and result = 'b'\n\n    So, the result would be \"b\"\n\n    XOR_result = 'a'^'b' = 'a' and result = \"a\"\n    So, the result would be \"a\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_xor(\"1\",\"1\") == \"0\"\nassert     string_xor(\"1010\",\"1011\") == \"0101\"\nassert     string_xor(\"1010\",\"1001\") == \"0101\"\nassert     string_xor(\"1010\",\"0101\") == \"1001\"\nassert     string_xor(\"1010\",\"01100\") == \"0101\"\n",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\na = '0' * 100\nb = '1' * 100\n\nassert string_xor(a, b) == ''.join('0' if a!= b else '1' for a, b in zip(a, b))\n\ndef string_1_bit_xor(a: str, b: str) -> str:\n    \"\"\"Inputs are two strings consisting of 1s and 0s.\n    Perform 1-bit XOR on these inputs and return result also as a string.\n    \"\"\"\n    pass\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_xor('0010101', '0010101') == '00110'\nassert     string_xor('00110001001111', '0010101') == '00110001001111'\nassert     string_xor('00110001001111', '00110001001111') == '00110'\nassert     string_xor('00110001001111', '00110') == '00110001001111'\nassert     string_xor('00110001001111', '001100010011111') == '00110001001111'\n",
        "num_ids_2": 49,
        "num_ids_4": 101
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert longest(['123', 'abc', '1234', '12', '1234']) == '123'\nassert longest(['abc', '123', '1234', '12', '1234']) == 'abc'\nassert longest(['1234', '12', '123', '1234', '12']) == '1234'\n",
        "num_ids_2": 29,
        "num_ids_4": 82
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     longest([]) is None,    \"1 - Expected None, got: {}\".format(longest([]) )\nassert     longest(['']) is None,    \"2 - Expected None, got: {}\".format(longest(['']) )\nassert     longest([\"\"]) is None,    \"3 - Expected None, got: {}\".format(longest([\"\"]) )\nassert     longest([\"A\"]) == \"A\",    \"4 - Expected 'A', got: {}\".format(longest([\"A\"]) )\nassert     longest([\"A\"]) == \"A\",    \"4 - Expected 'A', got: {}\".format(longest([\"A\"]) )\n",
        "num_ids_2": 60,
        "num_ids_4": 130
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert longest([]) == None\nassert longest([ '1' ]) == '1'\nassert longest(['11', '1', '111111111111111111111111111111']) == '11'\nassert longest
        "num_ids_2": 10,
        "num_ids_4": 47
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"\u2705 Test 1\")\nlongest_1 = longest([\"a\", \"bb\", \"c\", \"ddd\", \"e\"])\nassert longest_1 == \"c\"\nprint(\"\u2705 Test 2\")\nlongest_2 = longest([\"a\", \"bb\", \"c\", \"ddd\", \"e\", \"f\"])\nassert longest_2 == \"c\"\nprint(\"\u2705 Test 3\")\nlongest_3 = longest([\"a\", \"bb\", \"c\", \"ddd\", \"e\", \"fff\"])\nassert longest_3 == \"c\"\nprint(\"\u2705 Test 4\")\nlongest_4 = longest([\"\"])\nassert longest_4 is None\nprint(\"\u2705 Test 5\")\nlongest_5 = longest([\"ab\"])\n",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     longest([\"chars\", \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
        "num_ids_2": 1026,
        "num_ids_4": 1026
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     longest([\"aaa\", \"aaaa\", \"aaaaa\"]) == \"aaaa\"\nassert     longest([\"aaaaa\"]) == \"aaaaa\"\nassert     longest([\"aaa\", \"aaaa\", \"aaaaa\"]) == \"aaaaa\"\nassert     longest([\"aa\", \"a\"]) is None\nassert     longest([]) is None\n",
        "num_ids_2": 37,
        "num_ids_4": 74
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert longest([\"bar\", \"foo\", \"bar\", \"foo\"]) == \"bar\"\nassert longest([\"foo\"]) == \"foo\"\nassert longest([]) == None\nassert longest([\"foo\", \"bar\", \"foo\", \"foo\"]) == \"foo\"\n",
        "num_ids_2": 24,
        "num_ids_4": 43
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     longest([\"abc\", \"abc\", \"abc\", \"abc\"]) == \"abc\", \"abc\"\nassert     longest([\"abc\", \"abc\", \"abc\", \"abc\"]) == \"abc\", \"abc\"\nassert     longest([\"abc\", \"abc\", \"abc\", \"abc\"]) == \"abc\", \"abc\"\nassert     longest([\"abc\", \"abc\", \"abc\", \"abc\"]) == \"abc\", \"abc\"\nassert     longest([\"abc\", \"abc\", \"abc\", \"abc\"]) == \"abc\", \"abc\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     longest([]) == None\nassert     longest(['test']) == 'test'\nassert     longest(['test', 'test2']) == 'test2'\nassert     longest(['test', 'test2', 'test3']) == 'test3'\nassert     longest(['test', 'test2', 'test3', 'test4']) == 'test4'\n",
        "num_ids_2": 23,
        "num_ids_4": 65
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # run unit tests\n    assert greatest_common_divisor(1, 1) == 1\n    assert greatest_common_divisor(3, 1) == 3\n    assert greatest_common_divisor(1, 4) == 1\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef can_two_movies_fill_flight_seating_capacity(m1: int, n1: int, m2: int, n2: int) -> bool:\n    \"\"\" Return True if two movies can fill the flight seating capacity.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    a = 35\n    b = 5\n    print(greatest_common_divisor(a, b))\n    print(greatest_common_divisor(b, a))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     greatest_common_divisor(2,4) == 2\nassert greatest_common_divisor(2,4) == 2\nassert greatest_common_divisor(2,4) == 2\nassert greatest_common_divisor(2,4) == 2\nassert greatest_common_divisor(2,4) == 2\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ngreatest_common_divisor(2, 6) == 2\ngreatest_common_divisor(6, 6) == 6\ngreatest_common_divisor(2, 3) == 2\ngreatest_common_divisor(3, 3) == 3\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     greatest_common_divisor(8,6) == 2, 'Test 1 failed'\nassert     greatest_common_divisor(7,5) == 1, 'Test 2 failed'\nassert     greatest_common_divisor(2,3) == 1, 'Test 3 failed'\nassert     greatest_common_divisor(3,2) == 1, 'Test 4 failed'\nassert     greatest_common_divisor(2,2) == 2, 'Test 5 failed'\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ngreatest_common_divisor(10, 12) == 2\ngreatest_common_divisor(32, 8) == 8\ngreatest_common_divisor(34, 17) == 1\ngreatest_common_divisor(12, 12) == 12\ngreatest_common_divisor(9, 9) == 9\ngreatest_common_divisor(10, 10) == 1\ngreatest_common_divisor(0, 0) == 0\ngreatest_common_divisor(1, 0) == 0\ngreatest_common_divisor(0, 1) == 0\ngreatest_common_divisor(-1, 0) == 0\ngreatest_common_divisor(0, -1) == 0\ngreatest_common_divisor(1, -1) == 0\ngreatest_common_divisor(1, 1) == 1\ngreatest_common_divisor(-1, 1) == 1\ngreatest_common_divisor(2, 2) == 1\ngreatest_common_divisor(4, 2) == 2\ngreatest_common_divisor(8, 2) == 2\ngreatest_common_divisor(4, 3) == 1\ngreatest_common_divisor(0, 3) == 0\ngreatest_common_divisor(3, 3) == 1\ngreatest_common_divisor(-3, 3) == 1\ngreatest_common_divisor(9, 4) == 1\ngreatest_common_divisor(-10, 4) == 1\ngreatest_common_divisor(10, 4) == 1\ngreatest_common_divisor(20, 4) == 2\ngreatest_common_divisor(0, -4) == 0\ngreatest_common_divisor(-20, -4) == 0\ngreatest_common_divisor(20, -4) == 0\ngreatest_common_divisor(0, 0) == 0\ngreatest_common_divisor(1, 1) == 1\ngreatest_common_divisor(2, 2) == 1\ngreatest_common_divisor(3, 3) == 1\ngreatest_common_divisor(4, 4) == 1\ngreatest_common_divisor(0, 0) == 0\ngreatest_common_divisor(10, 10) == 1\ngreatest_common_divisor(10, 20) == 1\ngreatest_common_divisor(10, 30) == 1\ngreatest_common_divisor(10, 40) == 1\ngreatest_common_divisor(10, 50) == 1\ngreatest_common_divisor(10, 60) == 1\ngreatest_common_divisor(10, 70) == 1\ngreatest_common_divisor(10, 80) == 1\ngreatest_common_divisor(10, 90) == 1\ngreatest_common_divisor(10, 100) == 1\ngreatest_common_divisor(100, 10) == 1\ngreatest_common_divisor(100, 20) == 1\ngreatest_common_divisor(100, 30) == 1\ngreatest_common_divisor(100, 40) == 1\ngreatest_common_divisor(100, 50) == 1\ngreatest_common_divisor(100, 60) == 1\ngreatest_common_divisor(100, 70) == 1\ngreatest_common_divisor(100, 80) == 1\ngreatest_common_divisor(100, 90) == 1\ngreatest_common_divisor(100, 100) == 1\ngreatest_common_divisor(100, 200) == 1\ngreatest_common_divisor(100, 300) == 1\ngreatest_common_divisor(100, 400) == 1\ngreatest_common_divisor(100, 500) == 1\ngreatest_common_divisor(100, 600) == 1\ngreatest_common_divisor(100, 700) == 1\ngreatest_common_divisor(100, 800) == 1\ngreatest_common_divisor(100, 900) == 1\ngreatest_common_divisor(100, 1000) == 1\ngreatest_common_divisor(10",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert greatest_common_divisor(1, 1) == 1\nassert greatest_common_divisor(2, 3) == 1\nassert greatest_common_divisor(17, 23) == 1\nassert greatest_common_divisor(41, 43) == 1\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert all_prefixes(\"abab\") == ['ab', 'ab', 'aba']\nassert all_prefixes(\"abc\") == ['', 'abc']\nassert all_prefixes(\"a\") == ['a']\n",
        "num_ids_2": 23,
        "num_ids_4": 51
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_prefixes('abcd') == ['ab', 'abd', 'abc', 'abcd', 'abcd']\nassert     all_prefixes('aa') == ['aa', 'aa']\nassert     all_prefixes('aaab') == ['aa', 'aaab', 'aaaba', 'aaabab', 'aaababcd', 'aaababcd']\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from longest to shortest of the input string\n    \"\"\"\n    pass\n",
        "num_ids_2": 47,
        "num_ids_4": 87
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_prefixes('abcd') == ['ab', 'abd']\nassert     all_prefixes('abcdefghijklmnopqrstuvwxyz') == ['ab', 'abc', 'abde', 'abdf', 'abdg', 'abdi', 'abdv', 'abdz', 'abev', 'abef', 'abfh', 'abfi', 'abfj', 'abfk', 'abfm', 'abfn', 'abfo', 'abfz', 'abgr', 'abhc', 'abhi', 'abhj', 'abhk', 'abhm', 'abhn', 'abho', 'abhr', 'abhz', 'abih', 'abij', 'abik', 'abil', 'abim', 'abin', 'abio', 'abip', 'abir', 'abis', 'abjn', 'abjo', 'abju', 'abkc', 'abkg', 'abkh', 'abki', 'abkn', 'abko', 'abks', 'abky', 'ablg', 'ablh', 'abli', 'ablj', 'ablk', 'ablm', 'abln', 'ablp', 'ablq', 'ablr', 'abls', 'ablt', 'ablx', 'abmc', 'abmd', 'abme', 'abmf', 'abmh', 'abmi', 'abmn', 'abmo', 'abmp', 'abmq', 'abmr', 'abms', 'abmt', 'abmw', 'abmz', 'abnh', 'abni', 'abnp', 'abnr', 'abns', 'abnt', 'abnu', 'abny', 'aboc', 'abod', 'abof', 'aboh', 'aboi', 'aboj', 'abok', 'abom', 'abon', 'aboo', 'abop', 'abor', 'abos', 'abou', 'abow', 'aboz', 'abpa', 'abpb', 'abpc', 'abpd', 'abpe', 'abpf', 'abph', 'abpi', 'abpj', 'abpk', 'abpm', 'abpn', 'abpo', 'abpp', 'abpq', 'abpr', 'abps', 'abpt', 'abpu', 'abpv', 'abpw', 'abpy', 'abpx', 'abpyt', 'abpyx', 'abrp', 'abrq', 'abrs', 'abrt', 'abry', 'abrx', 'abryt', 'abryx', 'absc', 'abscs', 'abse', 'absez', 'absh', 'absi', 'abso', 'absp', 'abss', 'absv', 'absx', 'abst', 'absu', 'absw', 'absy', 'absyt', 'absyx', 'absyz', 'abtc', 'abtcs', 'abte', 'abtf', 'abtj', 'abtk', 'abtm', 'abtn', 'abto', 'abtp', 'abts', 'abtx', 'abty', 'abtyt', 'abtyx', 'abtx', 'abtxz', 'abu', 'abub', 'abuc', 'abud', 'abuf', 'abug', 'abuh', 'abui', 'abuj', 'abuk', 'abum', 'abun', 'abuo', 'abup', 'abur', 'aburh', 'abut', 'abutd', 'abutdz', 'abuv', 'abuz', 'abuzt', 'abv', 'abvj', 'abvk', 'abvm', 'abvn', 'abvo', 'abvq', 'abvr', 'abvs', 'abvt', 'abvu', 'abvw', 'abvy', 'abvz', 'abw', 'abwc', 'abwj', 'abwk', 'abwm', 'abwn', 'abwo', 'abwp', 'abwr', 'abwt', 'abwu', 'abwx', 'abwy', 'abwyt', 'abwyx', 'abz', 'abzc', 'abzd', 'abzf', 'abzg', 'abzh', 'abzm', 'abzp', 'abzq', 'abzr', ",
        "num_ids_2": 1021,
        "num_ids_4": 1021
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"ab\") == [\"a\", \"ab\"]\nassert     all_prefixes(\"ab\") == [\"a\", \"ab\"]\nassert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abca\") == [\"a\", \"ab\", \"abca\"]\n",
        "num_ids_2": 37,
        "num_ids_4": 74
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_prefixes(\"peter\") == [\"peter\"]\nassert     all_prefixes(\"peter1\") == [\"peter\", \"peter1\"]\nassert     all_prefixes(\"peter1_peter1\") == [\"peter\", \"peter1\", \"peter1_peter1\"]\nassert     all_prefixes(\"peter1_peter2_peter3\") == [\"peter\", \"peter1\", \"peter2\", \"peter3\"]\nassert     all_prefixes(\"peter1_peter2_peter3_peter4\") == [\"peter\", \"peter1\", \"peter2\", \"peter3\", \"peter4\"]\n",
        "num_ids_2": 38,
        "num_ids_4": 113
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_prefixes('abc') == ['ab', 'bc']\nassert     all_prefixes('abcdef') == ['ab', 'bc', 'cd', 'def']\nassert     all_prefixes('abcdefgh') == ['ab', 'bc', 'cd', 'def', 'gh']\nassert     all_prefixes('abcdefghijkl') == ['ab', 'bc', 'cd', 'def', 'gh', 'ij', 'kl']\nassert     all_prefixes('abcdefghijklmno') == ['ab', 'bc', 'cd', 'def', 'gh', 'ij', 'kl','mo']\n",
        "num_ids_2": 41,
        "num_ids_4": 105
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_prefixes('abc') == ['ab', 'abc']\nassert     all_prefixes('def') == ['de', 'def', 'fde', 'fdef', 'fdefe']\nassert     all_prefixes('abcdef') == ['abc', 'abdef', 'abdefe', 'abdefef', 'abdefef', 'abcdefef']\nassert     all_prefixes('abcdefgh') == ['abc', 'abdef', 'abdefg', 'abdefgh', 'abdefgh', 'abdefghi', 'abdefghi', 'abdefghij', 'abdefghij', 'abdefghij', 'abdefghijkl', 'abdefghijkl', 'abdefghijklm', 'abdefghijklm', 'abdefghijklmn', 'abdefghijklmn', 'abdefghijklmn', 'abdefghijklmnop', 'abdefghijklmnop', 'abdefghijklmnopq', 'abdefghijklmnopq', 'abdefghijklmnopqr', 'abdefghijklmnopqr', 'abdefghijklmnopqrs', 'abdefghijklmnopqrs', 'abdefghijklmnopqrst', 'abdefghijklmnopqrst', 'abdefghijklmnopqrstu', 'abdefghijklmnopqrstu', 'abdefghijklmnopqrstuv', 'abdefghijklmnopqrstuv', 'abdefghijklmnopqrstuvw', 'abdefghijklmnopqrstuvw', 'abdefghijklmnopqrstuvw', 'abdefghijklmnopqrstuvwx', 'abdefghijklmnopqrstuvwx', 'abdefghijklmnopqrstuvwxy', 'abdefghijklmnopqrstuvwxy', 'abdefghijklmnopqrstuvwxyz', 'abdefghijklmnopqrstuvwxyz']\nassert     all_prefixes('abcdefghijklmnopqrstuvwxyz') == ['abc', 'abdef', 'abdefg', 'abdefgh', 'abdefghi', 'abdefghij', 'abdefghij', 'abdefghijl', 'abdefghijl', 'abdefghijkl', 'abdefghijkl', 'abdefghijklm', 'abdefghijklm', 'abdefghijklmn', 'abdefghijklmn', 'abdefghijklmnop', 'abdefghijklmnop', 'abdefghijklmnopq', 'abdefghijklmnopq', 'abdefghijklmnopqr', 'abdefghijklmnopqr', 'abdefghijklmnopqrs', 'abdefghijklmnopqrs', 'abdefghijklmnopqrst', 'abdefghijklmnopqrst', 'abdefghijklmnopqrstu', 'abdefghijklmnopqrstu', 'abdefghijklmnopqrstuv', 'abdefghijklmnopqrstuv', 'abdefghijklmnopqrstuvw', 'abdefghijklmnopqrstuvw', 'abdefghijklmnopqrstuvwx', 'abdefghijklmnopqrstuvwx', 'abdefghijklmnopqrstuvwxy', 'abdefghijklmnopqrstuvwxy', 'abdefghijklmnopqrstuvwxyz', 'abdefghijklmnopqrstuvwxyz']\n",
        "num_ids_2": 47,
        "num_ids_4": 495
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_prefixes('abc') == ['a', 'ab', 'abc']\nassert     all_prefixes('a') == ['a']\nassert     all_prefixes('ab') == ['a', 'ab']\nassert     all_prefixes('abcd') == ['a', 'ab', 'abc', 'abcd']\nassert     all_prefixes('abcde') == ['a', 'ab', 'abc', 'abcd', 'abce', 'abcde']\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_sequence(4) == \"0 1 2 3\"\nassert     string_sequence(5) == \"0 1 2 3 4\"",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(string_sequence(3))\nprint(string_sequence(6))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_sequence(1) == \"0\"\nassert     string_sequence(4) == \" 0, 1, 2, 3\"\nassert     string_sequence(10) == \" 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\"\n\n\nprint(string_sequence(4))\nprint(string_sequence(10))\nprint(string_sequence(20))\nprint(string_sequence(40))\n",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef string_sequence_alt(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(3) == \" 0 1 2\"\nassert     string_sequence(4) == \" 0 1 2 3\"\nassert     string_sequence(5) == \" 0 1 2 3 4\"\nassert     string_sequence(6) == \" 0 1 2 3 4 5\"\n",
        "num_ids_2": 28,
        "num_ids_4": 61
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_sequence(1) == '0'\nassert     string_sequence(3) =='0  1  2 '\nassert     string_sequence(5) =='  0   1   2   3   4'\nassert     string_sequence(7) =='   0    1    2    3    4    5    6    7'\nassert     string_sequence(11) =='     0      1      2      3      4      5      6      7      8      9      10'\n",
        "num_ids_2": 30,
        "num_ids_4": 80
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_sequence(2) == '0 1' \nassert     string_sequence(3) == '0 1 2' \nassert     string_sequence(4) == '0 1 2 3' \nassert     string_sequence(5) == '0 1 2 3 4' \nassert     string_sequence(6) == '0 1 2 3 4 5' \n",
        "num_ids_2": 31,
        "num_ids_4": 66
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0 1\"\nassert     string_sequence(2) == \"0 1 2\"\nassert     string_sequence(3) == \"0 1 2 3\"\nassert     string_sequence(4) == \"0 1 2 3 4\"\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_sequence(3) == '0 1 2'\n\nassert string_sequence(5) =='0  1  2  3  4  5'\n\nassert string_sequence(0) == ''\n",
        "num_ids_2": 37,
        "num_ids_4": 47
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_distinct_characters_using_set(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"AbC\") == 4\nassert     count_distinct_characters(\"aBc\") == 4\nassert     count_distinct_characters(\"abC\") == 4\nassert     count_distinct_characters(\"abcde\") == 5\n",
        "num_ids_2": 31,
        "num_ids_4": 64
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_distinct_characters('') == 0\nassert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('ab') == 1\nassert     count_distinct_characters('abcd') == 4\nassert     count_distinct_characters('Aa') == 2\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_distinct_characters(\"hello\") == 5\nassert     count_distinct_characters(\"aAaaA\") == 5\nassert     count_distinct_characters(\"abAB\") == 2\n\ndef count_distinct_characters_with_split_or_join(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    pass\n",
        "num_ids_2": 33,
        "num_ids_4": 49
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_distinct_characters('Hello, world!') == 5\nassert     count_distinct_characters('HELLO, WORLD!') == 5\nassert     count_distinct_characters('HElLo, WORLD!') == 5\n",
        "num_ids_2": 38,
        "num_ids_4": 58
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_distinct_characters(\"\", 1) == 0\nassert     count_distinct_characters(\"hello\", 1) == 1\nassert     count_distinct_characters(\"hello\", 2) == 2\nassert     count_distinct_characters(\"HELLO\", 2) == 2\nassert     count_distinct_characters(\"HELLO\", 3) == 3\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_distinct_characters('abcdefg') == 6\nassert     count_distinct_characters('aabcdefghijk') == 7\nassert     count_distinct_characters('a2') == 1\nassert     count_distinct_characters('a2bc3d4') == 2\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_distinct_characters('aab') == 2, \"Should be 2\"\nassert     count_distinct_characters('AaB') == 2, \"Should be 2\"\nassert     count_distinct_characters('AB') == 2, \"Should be 2\"\nassert     count_distinct_characters('') == 0, \"Should be 0\"\n\n\ndef reverse_string(string: str) -> str:\n    \"\"\" Given a string, return a new string in which all characters have been reversed\n    \"\"\"\n    pass\n",
        "num_ids_2": 45,
        "num_ids_4": 87
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_music(\"a|o|a|a|o|\") == [4,4,2]\nassert     parse_music(\"a|o|o|\") == [4,4,1]\nassert     parse_music(\"a|a|o|o|\") == [4,1,1]\nassert     parse_music(\"o|o|o|o|o|\") == [2,2,2]\nassert     parse_music(\"a|o|o|o|\") == [4,1,2]\n",
        "num_ids_2": 48,
        "num_ids_4": 98
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_music(\"o|\") == [4]\nassert     parse_music(\"o|o|\") == [3, 3]\nassert     parse_music(\"o|o.|\") == [3, 2, 2]\nassert     parse_music(\"o|o.|.|\") == [3, 2, 1, 1]\nassert     parse_music(\"o|o|o.|\") == [2, 3, 2, 2]\n",
        "num_ids_2": 32,
        "num_ids_4": 78
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef parse_time(time_string: str) -> int:\n    \"\"\" Input to this function is a string representing musical time in a special ASCII format.\n    Your task is to parse this string and return integer representing number of beats.\n\n    Here is a legend:\n    '|' - whole note, lasts four beats\n    '|.' - half note, lasts two beats\n    '||' - quater note, lasts one beat\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parse_music(\"o.|.|.|.|.|.|.|o|o|o|o|o|\") == [4, 2, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]\nassert     parse_music(\"..o|.|.|.|.|.|.|.|.|.|o|o|o|o|o|\") == [4, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]\nassert     parse_music(\"....o|.|.|.|.|.|.|.|.|.|o|o|o|o|o|\") == [4, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]\nassert     parse_music(\"oo|o|o|o|o|o|o|o|o|o|o|o|o|o|o|\") == [4, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]\nassert     parse_music(\"ooo|o|o|o|o|o|o|o|o|o|o|o|o|o|o|\") == [4, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]\n",
        "num_ids_2": 132,
        "num_ids_4": 269
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parse_music(\"'o|'\") == [4], 'Part 1'\nassert     parse_music(\"'o'\") == [4], 'Part 2'\nassert     parse_music(\"'o|'\") == [2], 'Part 3'\nassert     parse_music(\"'o'\") == [2], 'Part 4'\nassert     parse_music(\"'o|'\") == [1], 'Part 5'\n",
        "num_ids_2": 39,
        "num_ids_4": 78
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_music(\"'o'|'o'|'o'|'o'|'o'|'o'|'o'|'o'|'o'\") == [4,4,4,4,4,4,4,4]\nassert     parse_music(\"'o|'o'|'o|'o'|'o|'o'|'o'|'o'|'o'|'o'\") == [2,2,2,2,2,2,2,2]\nassert     parse_music(\"'.|.'|'.'|'.'|'.'|'.'|'.'|'.'|'.'\") == [2,2,2,2,2,2,2,2]\n",
        "num_ids_2": 123,
        "num_ids_4": 173
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_music(\"'o\") == ['o', 'o']\nassert     parse_music(\"'o|\") == ['o', 'o|']\nassert     parse_music(\"'o|'\") == ['o', 'o|', 'o|']\nassert     parse_music(\"'o|'.|'\") == ['o', 'o|', 'o|', 'o|', 'o', 'o|', 'o|', 'o|', 'o|']\nassert     parse_music(\"'o|'|'\") == ['o', 'o|', 'o|', 'o|', 'o|', 'o', 'o|', 'o|', 'o|', 'o|']\n",
        "num_ids_2": 36,
        "num_ids_4": 109
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     parse_music(\"o|o|o|o|o|\") == [4, 2, 2, 4, 2]\nassert     parse_music(\"o|o|o|o\") == [4, 2, 2, 4]\nassert     parse_music(\"o|o|\") == [4, 2, 2, 4]\nassert     parse_music(\"o|\") == [4, 2, 2, 4]\nassert     parse_music(\"o\") == [4, 2, 2, 4]\n",
        "num_ids_2": 55,
        "num_ids_4": 97
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(how_many_times(\"helloworld\", \"world\"))\n    print(how_many_times(\"helloworld\", \"hello\"))\n    print(how_many_times(\"helloworld\", \"l\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     how_many_times(\"hiabcdef\", \"abc\") == 0\nassert     how_many_times(\"hiabcdef\", \"def\") == 1\nassert     how_many_times(\"hiabcdef\", \"abc\") == 1\nassert     how_many_times(\"hiabcdef\", \"cd\") == 2\nassert     how_many_times(\"hiabcdef\", \"ef\") == 2\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    # tests\n    assert how_many_times(\"acbabc\", \"bc\") == 2\n    assert how_many_times(\"acbabc\", \"abc\") == 1\n    assert how_many_times(\"acbabc\", \"ba\") == 1\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test\n    print(\"=\"*10, \"Test 1\", \"=\"*10)\n    print(\"Expected:\", 4, \"Actual: \", how_many_times(\"abcabc\", \"abc\"))\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabc\", \"abca\"))\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabc\", \"abcabc\"))\n    print(\"Expected:\", 3, \"Actual: \", how_many_times(\"abcabc\", \"abcabcba\"))\n    print(\"Expected:\", 1, \"Actual: \", how_many_times(\"abcabc\", \"abcd\"))\n    print(\"=\"*10, \"Test 2\", \"=\"*10)\n    print(\"Expected:\", 2, \"Actual: \", how_many_times(\"abcabcdefg\", \"abc\"))\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabcdefg\", \"abcd\"))\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabcdefg\", \"abcdefg\"))\n    print(\"Expected:\", 2, \"Actual: \", how_many_times(\"abcabcdefg\", \"abcdefgabc\"))\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabcdefg\", \"abcdefgabcdefg\"))\n    print(\"=\"*10, \"Test 3\", \"=\"*10)\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefga\"))\n    print(\"Expected:\", 1, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefgaabc\"))\n    print(\"=\"*10, \"Test 4\", \"=\"*10)\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefga\"))\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefgaabc\"))\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefgaabcdefg\"))\n    print(\"=\"*10, \"Test 5\", \"=\"*10)\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefgaa\"))\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefgaabcd\"))\n    print(\"=\"*10, \"Test 6\", \"=\"*10)\n    print(\"Expected:\", 1, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefga\"))\n    print(\"Expected:\", 1, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefgaabc\"))\n    print(\"=\"*10, \"Test 7\", \"=\"*10)\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefgaa\"))\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefgaabcdefg\"))\n    print(\"=\"*10, \"Test 8\", \"=\"*10)\n    print(\"Expected:\", 2, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefgaabcd\"))\n    print(\"=\"*10, \"Test 9\", \"=\"*10)\n    print(\"Expected:\", 1, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefgaa\"))\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefgaabc\"))\n    print(\"=\"*10, \"Test 10\", \"=\"*10)\n    print(\"Expected:\", 0, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefgaaabcdefg\"))\n    print(\"=\"*10, \"Test 11\", \"=\"*10)\n    print(\"Expected:\", 1, \"Actual: \", how_many_times(\"abcabcdefg\", \"bcdefgaaabcdefg\"))\n    print(",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     how_many_times('aaaaa', 'aaaa') == 4\nassert     how_many_times('aaaaa', 'bbaa') == 1\nassert     how_many_times('aaaaa', 'aa') == 2\nassert     how_many_times('aaaaa', 'aaa') == 3\nassert     how_many_times('aaaaa', 'aaa') == 3\n",
        "num_ids_2": 36,
        "num_ids_4": 70
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     how_many_times('asdf', 'asdf') == 4, \"how_many_times returns wrong result.\"\nassert     how_many_times('abcd', 'abc') == 0, \"how_many_times returns wrong result.\"\nassert     how_many_times('abcd', 'bcd') == 0, \"how_many_times returns wrong result.\"\nassert     how_many_times('abcd', 'abcd') == 4, \"how_many_times returns wrong result.\"\nassert     how_many_times('abcd', 'xyz') == -1, \"how_many_times returns wrong result.\"\n",
        "num_ids_2": 57,
        "num_ids_4": 115
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     how_many_times(\"aabababab\", \"ab\") == 2, \"Wrong count of overlaping characters\"\nassert     how_many_times(\"aabababab\", \"ba\") == 0, \"Not overlapping\"\nassert     how_many_times(\"aabababab\", \"aaa\") == 2, \"Different starting point\"\nassert     how_many_times(\"aabababab\", \"a\") == 3, \"Repeat\"\nassert     how_many_times(\"aabababab\", \"b\") == 2, \"Repeat\"\n",
        "num_ids_2": 55,
        "num_ids_4": 105
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     how_many_times('string1','string2') == 0\nassert     how_many_times('string1','string') == 2\nassert     how_many_times('string2','string') == 1\nassert     how_many_times('string3','string') == 1\nassert     how_many_times('string1','string1') == 2\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     how_many_times('aabaaaa', 'ab') == 3, \"Wrong result\"\nassert     how_many_times('ababab', 'ab') == 2, \"Wrong result\"\nassert     how_many_times('ababab', 'a') == 0, \"Wrong result\"\n",
        "num_ids_2": 48,
        "num_ids_4": 72
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_numbers(\"two three one\") == \"one three two\", 'incorrect sort_numbers'\nassert     sort_numbers(\"zero one\") == \"one zero\", 'incorrect sort_numbers'\nassert     sort_numbers(\"nine zero\") == \"zero nine\", 'incorrect sort_numbers'\nassert     sort_numbers(\"ten eleven twelve\") == \"twelve ten eleven\", 'incorrect sort_numbers'\nassert     sort_numbers(\"zero\") == \"zero zero zero\", 'incorrect sort_numbers'\n",
        "num_ids_2": 50,
        "num_ids_4": 101
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_numbers('four four zero one') == 'zero one four four', 'Error!'\n\nassert     sort_numbers('one zero three two') == 'one zero three two', 'Error!'\n\nassert     sort_numbers('four five one two') == 'one two four five', 'Error!'\n",
        "num_ids_2": 46,
        "num_ids_4": 69
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numbers(\"one four two zero one zero two one\") == \"0 2 1 4 2 1 3 0 1\"\nassert     sort_numbers(\"two five four\") == \"4 5 2\"\nassert     sort_numbers(\"four three one\") == \"1 3 4\"\nassert     sort_numbers(\"zero four zero\") == \"0 4 0\"\nassert     sort_numbers(\"two zero two\") == \"0 2 0\"\n",
        "num_ids_2": 47,
        "num_ids_4": 83
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_numbers(\"zero one two\") == \"two one zero\"\nassert     sort_numbers(\"zero five four seven eight\") == \"four zero seven eight five\"\nassert     sort_numbers(\"eight seven eight four zero three two one\") == \"three zero one two eight seven eight four\"\nassert     sort_numbers(\"one zero\") == \"zero one\"\nassert     sort_numbers(\"three seven eight five four zero one two\") == \"two zero one three seven eight five\"\n",
        "num_ids_2": 40,
        "num_ids_4": 84
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numbers(\"three zero zero zero zero zero five three\") == \"zero zero zero five zero zero three\"\nassert     sort_numbers(\"three zero zero zero zero zero five three\") == \"zero zero zero five zero zero three\"\nassert     sort_numbers(\"three zero zero zero zero zero five three\") == \"zero zero zero five zero zero three\"\nassert     sort_numbers(\"three zero zero zero zero zero five three\") == \"zero zero zero five zero zero three\"\nassert     sort_numbers(\"three zero zero zero zero zero five three\") == \"zero zero zero five zero zero three\"\n",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_numbers(\"zero\") == \"zero\"\nassert     sort_numbers(\"one\") == \"one\"\nassert     sort_numbers(\"two\") == \"two\"\nassert     sort_numbers(\"three\") == \"three\"\nassert     sort_numbers(\"four\") == \"four\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_numbers(\"one zero two three four five six seven eight nine\") == \"one nine two three four five six seven eight\"\nassert     sort_numbers(\"one zero two zero four five six seven eight\") == \"zero nine two zero four five six seven eight\"\nassert     sort_numbers(\"zero zero zero zero zero zero zero zero zero\") == \"zero zero zero zero zero zero zero zero zero\"\n",
        "num_ids_2": 61,
        "num_ids_4": 91
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'zero nine one two three four five six seven eight', 'incorrect'\nassert sort_numbers('four seven eight nine zero one two three') == 'zero nine one two three four', 'incorrect'\n\ndef sort_strings(strings: str) -> str:\n    \"\"\" Input is a space-delimited string of lowercase letters.\n    The letters should be sorted from a to z in alphabetical order.\n    Return the string with letters sorted from smallest to largest\n    \"\"\"\n    pass\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_numbers(\"zero one two three four five six seven eight nine\")     == \"one zero two three four five six seven eight nine\"\nassert sort_numbers(\"nine zero one two three four five six seven eight\")     == \"one zero two three four five six seven eight nine\"\nassert sort_numbers(\"nine zero one two three four five six seven eight\")     == \"one zero two three four five six seven eight nine\"\nassert sort_numbers(\"one zero two three four five six seven eight nine\")     == \"one zero two three four five six seven eight nine\"\nassert sort_numbers(\"five four one zero two three seven eight\")     == \"one zero two three four five six seven eight\"\n",
        "num_ids_2": 65,
        "num_ids_4": 129
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)\nassert find_closest_elements([1, 2, 3, 4]) == (1, 2)\nassert find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 3)\nassert find_closest_elements([10, 0, 20, -1, 5, -2, 9, -3, 100]) == (10, 5)\n",
        "num_ids_2": 30,
        "num_ids_4": 84
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert\nassert\n\ndef find_closest_elements_alt(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each other\n    and return them in order (smaller number, larger number).\n    \"\"\"\n    pass\n",
        "num_ids_2": 5,
        "num_ids_4": 7
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_closest_elements([1,2,3]) == (1,2)\nassert     find_closest_elements([1,1,1,2]) == (1,1)\nassert     find_closest_elements([1,2,2,4,6]) == (2,4)\nassert     find_closest_elements([1,2,3,3,2,1]) == (1,2)\n\n\ndef find_closest_elements_bis(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    (If two numbers are equally close, return one of them.)\n    \"\"\"\n    pass\n",
        "num_ids_2": 50,
        "num_ids_4": 108
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_closest_elements([4,6,7,9]) == (6,4)\nassert     find_closest_elements([4,6,7,9,11]) == (7,4)\nassert     find_closest_elements([-5,-4,4,6,7]) == (4,6)\nassert     find_closest_elements([3,-1,2]) == (2,-1)\nassert     find_closest_elements([-4,-3,3]) == (3,-4)\n",
        "num_ids_2": 54,
        "num_ids_4": 107
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_closest_elements([1.2, 2.1, 3.4, 4.8, 5.2, 6.3, 7.4]) == \n            (2.1, 5.2)\nassert     find_closest_elements([1.2, 2.1, 3.4, 4.8, 5.2, 6.3, 7.4, 8.9]) == \n            (2.1, 5.2)\nassert     find_closest_elements([1.2, 2.1, 3.4, 4.8, 5.2, 6.3, 7.4, 8.9, 9.9]) == \n            (2.1, 5.2)\nassert     find_closest_elements([1.2, 2.1, 3.4, 4.8, 5.2, 6.3, 7.4, 8.9, 9.9, 10.1]) == \n            (2.1, 5.2)\nassert     find_closest_elements([1.2, 2.1, 3.4, 4.8, 5.2, 6.3, 7.4, 8.9, 9.9, 10.1, 10.1]) == \n            (2.1, 5.2)\n",
        "num_ids_2": 88,
        "num_ids_4": 192
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_closest_elements([1,2,3]) == (1, 2)\nassert     find_closest_elements([3,1,2]) == (1, 2)\nassert     find_closest_elements([2,3,4,5]) == (2, 4)\nassert     find_closest_elements([9,8,7,6,5]) == (7, 6)\nassert     find_closest_elements([3,4,5]) == (4, 5)\n",
        "num_ids_2": 48,
        "num_ids_4": 102
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_closest_elements([])     ==     (None, None)\nassert     find_closest_elements([1.5])    ==     (1.5, None)\nassert     find_closest_elements([1.5, 2.5, 3.5, 4.5, 5.5])    ==     (1.5, 2.5)\n",
        "num_ids_2": 47,
        "num_ids_4": 91
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_closest_elements([]) == ()\nassert     find_closest_elements([5]) == (5,5)\nassert     find_closest_elements([1,2,3]) == (2,1)\nassert     find_closest_elements([2,3,4,5]) == (2,3)\nassert     find_closest_elements([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == (4,5)\n",
        "num_ids_2": 35,
        "num_ids_4": 85
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_closest_elements([3, 5, 1, 9]) ==     (1, 9)\nassert     find_closest_elements([2, 6, 3, 4]) ==     (2, 4)\nassert     find_closest_elements([-2, 5, -3, 2, 3]) ==     (-2, 3)\nassert     find_closest_elements([-2, 5, -3, 2, 9]) ==     (-2, 9)\nassert     find_closest_elements([0, 2, 5, 6, 9]) ==     (0, 9)\n",
        "num_ids_2": 54,
        "num_ids_4": 116
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_closest_elements([-3.14, 4.6, 1, -3, -3]) == (1, 4.6)\nassert     find_closest_elements([-3, 4, 4, 5, -1, 2, -2, 0]) == (0, 4)\nassert     find_closest_elements([-3, 4, 5, 5, -1, 2, -2, 0]) == (0, 5)\nassert     find_closest_elements([-3, 4, 5, 5, -1, 2, -2, 0]) == (0, 5)\nassert     find_closest_elements([-3, 4, 5, 5, -1, 2, -2, 0]) == (0, 5)\n",
        "num_ids_2": 74,
        "num_ids_4": 148
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nnumbers = [1, 2, 3, 4, 5]\nrescaled = rescale_to_unit(numbers)\nprint(rescaled)\n\n\ndef rescale_to_unit_and_normalize(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    and normalize the resulting list to the range (0, 1)\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef rescale_to_unit2(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([1, 2, 3]) == [0.1, 0.2, 0.3]\nassert     rescale_to_unit([2, 3, 4]) == [0.2, 0.3, 0.4]\nassert     rescale_to_unit([3, 4, 5]) == [0.3, 0.4, 0.5]\nassert     rescale_to_unit([4, 5, 6]) == [0.4, 0.5, 0.6]\nassert     rescale_to_unit([5, 6, 7]) == [0.5, 0.6, 0.7]\n",
        "num_ids_2": 60,
        "num_ids_4": 120
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (rescale_to_unit([0.8, 0.5, 0.2, 0.1]) == \n        [0.8, 0.5, 0.2, 0.1]), \"Incorrectly rescaled to unit\"\nassert (rescale_to_unit([0.8, 0.9, 0.5, 0.2, 0.1]) == \n        [0.8, 0.9, 0.5, 0.2, 0.1]), \"Incorrectly rescaled to unit\"\nassert (rescale_to_unit([0.8, 0.2, 0.5, 0.9, 0.1]) == \n        [0.8, 0.2, 0.5, 0.9, 0.1]), \"Incorrectly rescaled to unit\"\nassert (rescale_to_unit([0.7, 0.2, 0.5, 0.8, 0.1]) == \n        [0.7, 0.2, 0.5, 0.8, 0.1]), \"Incorrectly rescaled to unit\"\nassert (rescale_to_unit([0.2, 0.5, 0.9, 0.8, 0.1]) == \n        [0.2, 0.5, 0.9, 0.8, 0.1]), \"Incorrectly rescaled to unit\"\n",
        "num_ids_2": 61,
        "num_ids_4": 125
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef rescale_to_unit_min_max_01(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    min_max_01 rescaling is used instead of min_max rescaling\n    \"\"\"\n    pass\n\ndef rescale_to_unit_min_max_01_inverse(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    min_max_01 rescaling is used instead of min_max rescaling\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rescale_to_unit([0,1,1,1,2,1,1,1]) == [0,1,1,1,1,1,1,1]\nassert     rescale_to_unit([0,1,1,1,2,1,1,1,1]) == [0.3333333333333333, 0.75, 0.8333333333333334, 0.9333333333333333, 1, 0.8333333333333334, 0.75, 0.5, 0.3333333333333333]\n",
        "num_ids_2": 126,
        "num_ids_4": 126
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nintegers = [1, 3, 5, 7, 11]\nprint(filter_integers(integers))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_integers(['a', 2, 4, 6, 8, 9, 12, 15, 18, 20, 24, 25, 27, 30, 31, 32, 34, 36, 38, 39, 40, 43, 45, 47, 48, 50, 52, 55, 57, 60, 62, 65, 68, 70, 72, 75, 77, 79, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 99]) == \\\n           [2, 4, 6, 8, 9, 12, 15, 18, 20, 24, 25, 27, 30, 31, 32, 34, 36, 38, 39, 40, 43, 45, 47, 48, 50, 52, 55, 57, 60, 62, 65, 68, 70, 72, 75, 77, 79, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 99]\n\nassert     filter_integers([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ",
        "num_ids_2": 924,
        "num_ids_4": 924
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_integers([1,2,'a']) == [1,2]\nassert     filter_integers([1,'a',[]]) == []\nassert     filter_integers(['a',2,3]) == []\nassert     filter_integers([1,2,'a',[],4,6]) == [1,2,3,4,6]\n\n",
        "num_ids_2": 38,
        "num_ids_4": 87
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    filter_integers([1, 2, 3, 4, 5, \"0\", \"100\"]) == [1, 2, 3, 4, 5]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"The result should be a list of integers\"\nassert filter_integers([1, 2, \"three\", 4, 5]) == [1, 2, 4, 5], \"The result should be a list of integers\"\nassert filter_integers([1.5, 2.5, 3.5, 4.5, 5.5]) == [1.5, 2.5, 3.5, 4.5, 5.5], \"The result should be a list of integers\"\nassert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"The result should be a list of integers\"\nassert filter_integers([]) == [], \"The result should be a list of integers\"\n",
        "num_ids_2": 78,
        "num_ids_4": 196
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    filter_integers([]) == []\n    filter_integers(['a', 2, 3.0]) == [2, 3.0]\n    filter_integers(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']\n    filter_integers(['a', '2', '3.0', 'd']) == ['2', '3.0', 'd']\n    filter_integers(['a', 'b', '2', '3.0']) == ['b', '2', '3.0']\n    filter_integers(['a', 'b', 'c', 'd', 'e', '1', '2', '3.0', '4']) == ['b', 'c', 'd', 'e', '1', '2', '3.0', '4']\n    filter_integers(['a', 'b', 'c', 'd', 'e', '1', '2', '3.0', '4', 5.6]) == ['b', 'c', 'd', 'e', '1', '2', '3.0', '4', 5.6]\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef filter_integers_by_divisibility(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers divisible by 2\n\n    Example:\n    >>> filter_integers_by_divisibility([1, 2, 3, 4, 5, 6, 7])\n    [2, 4, 6, 8, 10, 12, 14]\n\n    >>> filter_integers_by_divisibility([2, 4, 6, 8, 10, 12, 14])\n    [2, 4, 6, 8, 10, 12, 14]\n\n    >>> filter_integers_by_divisibility([3, 6, 9, 12, 15, 18])\n    [6, 12, 18]\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_integers([1, 'two', -3, 4, 5]) == [1, 4, 5]\nassert     filter_integers([1.0, 'two', -3, 4, 5]) == [1.0, 4, 5]\nassert     filter_integers([True, 'two', False, 'four', 'five']) == [True, 'four', 'five']\nassert     filter_integers([0, 0.0, False, 0, 0.0]) == [0, 0.0]\nassert     filter_integers([-1, -2, -3, -4, -5]) == [-1, -4, -5]\n",
        "num_ids_2": 60,
        "num_ids_4": 122
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"This is test string \") == 17\nassert     strlen(\"I am on the eve of James Bond, who died in the film\") == 57\nassert     strlen(\"The movie was never that bad\") == 25\n\n\ndef strcmp(str1: str, str2: str) -> bool:\n    \"\"\" Check if strings are same\n    \"\"\"\n    pass\n",
        "num_ids_2": 23,
        "num_ids_4": 61
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     strlen('python')     ==     8\nassert     strlen('code')     ==     6\nassert     strlen('abc')     ==     3\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \n\ndef substr(string: str, start: int, end: int) -> str:\n    \"\"\" Return substring from start to end\n    \"\"\"\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert strlen(\"\") == 0\nassert strlen(\"a\") == 1\nassert strlen(\"abc\") == 3\nassert strlen(\"abcdefg\") == 6\n",
        "num_ids_2": 11,
        "num_ids_4": 29
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"ab\") == 2\nassert     strlen(\"abcdefg\") == 7\nassert     strlen(\"abcd\") == 4\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (strlen('hello') == 6)\nassert     (strlen('abcd') == 5)\n\ndef strcmp(s1: str, s2: str) -> bool:\n    \"\"\" Return True if the two strings are equal\n    \"\"\"\n    pass\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abcdefghijklmnopqrstuvwxyz\") == 26\nassert     strlen(\"Hello World\") == 10\nassert     strlen(\"A\"*100) == 100\n",
        "num_ids_2": 19,
        "num_ids_4": 53
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert largest_divisor(2) == 2\nassert largest_divisor(3) == 1\nassert largest_divisor(10) == 5\nassert largest_divisor(100) == 10\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(largest_divisor(12))\nprint(largest_divisor(13))\nprint(largest_divisor(21))\n\n\ndef largest_factor(n: int) -> int:\n    \"\"\" For a given number n, find the largest factor of n that is smaller than n\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_divisor(6) == 3\nassert     largest_divisor(12) == 2\nassert     largest_divisor(30) == 3\nassert     largest_divisor(14) == 2\nassert     largest_divisor(27) == 3\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_divisor(3) == 1\nassert     largest_divisor(6) == 2\nassert     largest_divisor(9) == 3\nassert     largest_divisor(12) == 2\nassert     largest_divisor(16) == 4\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert largest_divisor(3) == 1\nassert largest_divisor(5) == 2\nassert largest_divisor(10) == 1\nassert largest_divisor(12) == 3\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_divisor(8) == 8\nassert     largest_divisor(12) == 12\nassert     largest_divisor(30) == 10\nassert     largest_divisor(50) == 5\nassert     largest_divisor(70) == 7\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_divisor(10) == 5\nassert     largest_divisor(12) == 5\nassert     largest_divisor(3) == 1\nassert     largest_divisor(10) == 5\nassert     largest_divisor(17) == 17\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(factorize(14))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert factorize(2) == [2]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     factorize(1) == [1]\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [2,2]\nassert     factorize(5) == [5]\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndef factorize_1(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    if n <= 1:\n        return []\n    if n == 2:\n        return [2]\n\n    # initialise the factorization result and check if the number is prime\n    factors = []\n    if n > 2 and n % 2 == 0:\n        factors.append(2)\n        n = n / 2\n\n    for i in range(3, int(n**0.5)+1):\n        if n % i == 0:\n            # if factor is prime, factorize number and add the factor to the result list\n            # note: this is O(n) instead of O(1) as n is huge\n            factors.append(i)\n            n = n / i\n\n    # if input number is not a prime, factorize it and add the factor to the result list\n    if n > 2:\n        factors.append(n)\n\n    return factors\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     factorize(1)    ==  [1]\nassert     factorize(2)    ==  [1,2]\nassert     factorize(3)    ==  [1,3]\nassert     factorize(4)    ==  [1,2,2]\nassert     factorize(12)    ==  [1,2,3,2,2]\n",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert factorize(0) == []\nassert factorize(2) == [2]\nassert factorize(3) == [3]\n",
        "num_ids_2": 12,
        "num_ids_4": 34
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     factorize(1) == [1]\nassert     factorize(2) == [2]\nassert     factorize(4) == [2, 2]\nassert     factorize(8) == [2, 2, 2]\nassert     factorize(16) == [2, 2, 2, 2]\n",
        "num_ids_2": 24,
        "num_ids_4": 54
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     factorize(5) ==    [5]\nassert     factorize(6) ==    [2,2]\nassert     factorize(8) ==    [2,2,2]\nassert     factorize(2**3*5) ==    [2,2,2,2]\nassert     factorize(8*3*2) ==    [2,2,2,2,2]\n",
        "num_ids_2": 28,
        "num_ids_4": 68
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    prime_list = []\n    \n    if n == 1:\n        return []\n    \n    # binary search to find factor\n    if n % 2 == 0:\n        n = n/2\n        while n > 1:\n            if n % 2 == 0:\n                n = n/2\n            else:\n                prime_list.append(2)\n                n = n - 1\n    else:\n        while n % 2 == 0:\n            n = n/2\n        prime_list.append(2)\n        \n    # divide the number to calculate factors\n    while n > 1:\n        prime_list.append(n)\n        while n % 2 == 0:\n            n = n/2\n        while n % 5 == 0:\n            n = n/5\n        n = n - 1\n    \n    return prime_list\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_duplicates([1, 1, 2, 3, 3])     ==     [1, 2, 3]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 3])     ==     [1, 2, 3]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4])     ==     [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4])     ==     [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4])     ==     [1, 2, 3, 4]\n",
        "num_ids_2": 62,
        "num_ids_4": 152
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nimport unittest\n\nclass TestRemoveDuplicates(unittest.TestCase):\n    def test_ex_01(self):\n        ex_01 = [[1,2,3],\n                [4],\n                [5,6,7,8,8],\n                [8,9,10,10,11,12,13,14,15,16],\n                [10,11,12,13,14,14,15,16],\n                [16,16,16,16,16,16,16,16,16,16]]\n        ex_01_result = [[1,2,3],\n                        [4],\n                        [5,6,7,8,8],\n                        [8,9,10,10,11,12,13,14,15,16],\n                        [10,11,12,13,14,15,16],\n                        [16,16,16,16,16,16,16,16,16,16]]\n        self.assertEqual(remove_duplicates(ex_01), ex_01_result)\n\n    def test_ex_02(self):\n        ex_02 = [[1,2,3,3,3,3,3],\n                [4,4,4,4,4,4,4],\n                [5,6,6,6,6,6,6],\n                [7,7,7,7,7,7,7],\n                [8,8,8,8,8,8,8],\n                [9,9,9,9,9,9,9],\n                [10,10,10,10,10,10,10],\n                [11,11,11,11,11,11,11],\n                [12,12,12,12,12,12,12],\n                [13,13,13,13,13,13,13],\n                [14,14,14,14,14,14,14],\n                [15,15,15,15,15,15,15],\n                [16,16,16,16,16,16,16],\n                [17,17,17,17,17,17,17]]\n        ex_02_result = [[1,2,3,3,3,3,3],\n                        [4,4,4,4,4,4,4],\n                        [5,6,6,6,6,6,6],\n                        [7,7,7,7,7,7,7],\n                        [8,8,8,8,8,8,8],\n                        [9,9,9,9,9,9,9],\n                        [10,10,10,10,10,10,10],\n                        [11,11,11,11,11,11,11],\n                        [12,12,12,12,12,12,12],\n                        [13,13,13,13,13,13,13],\n                        [14,14,14,14,14,14,14],\n                        [15,15,15,15,15,15,15],\n                        [16,16,16,16,16,16,16],\n                        [17,17,17,17,17,17,17]]\n        self.",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_duplicates([1, 2, 2, 3]) == [1, 2, 3], \"Not working\"\nassert     remove_duplicates([2, 2, 1, 1, 2, 2, 3]) == [1, 2, 3], \"Not working\"\nassert     remove_duplicates([1, 1, 2, 3, 3]) == [1, 2, 3], \"Not working\"\nassert     remove_duplicates([1, 1, 1, 2, 3]) == [1, 2, 3], \"Not working\"\nassert     remove_duplicates([1, 1, 2, 2, 2, 3, 3]) == [1, 2, 3], \"Not working\"\n",
        "num_ids_2": 64,
        "num_ids_4": 126
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_duplicates([2, 3, 3, 3, 6, 9, 9]) == [2, 3, 6, 9]\nassert     remove_duplicates([2, 2, 2, 11]) == [2, 11]\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_duplicates([0,0,1,1,1,2,2,3,3,4]) ==     [0,1,2,3,4]\nassert remove_duplicates([]) == []\nassert remove_duplicates([1,2]) == [1,2]\nassert remove_duplicates([0,0,1,1,1,2,2,3,3,4]) ==     [0,1,2,3,4]\nassert remove_duplicates([0,0,0,1,2,3,4]) ==     [0,1,2,3,4]\n",
        "num_ids_2": 53,
        "num_ids_4": 112
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]\nassert remove_duplicates([1, 2, 3, 4, 5, 5, 1, 1]) == [1, 2, 3, 4, 5, 1]\nassert remove_duplicates([1, 2, 3, 4, 5, 5, 1, 1, 2]) == [1, 2, 3, 4, 5, 1]\nassert remove_duplicates([1, 2, 3, 4, 5, 5, 1, 1, 2, 5, 5]) == [1, 2, 3, 4, 5, 1, 1]\nassert remove_duplicates([1, 2, 3, 4, 5, 5, 1, 1, 2, 5, 5, 5, 5, 5]) == [1, 2, 3, 4, 5, 1, 1, 2, 5, 5, 5, 5]\n",
        "num_ids_2": 73,
        "num_ids_4": 159
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_duplicates([1, 1, 2]) == [1, 2]\nassert     remove_duplicates([1, 1, 1, 1, 1, 2]) == [1, 1, 2]\nassert     remove_duplicates([1, 2, 1, 1, 2, 3, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([4, 4, 3, 3, 3]) == [4, 3]\nassert     remove_duplicates([4, 4, 3, 4, 4, 4]) == [4, 4, 4]\n",
        "num_ids_2": 50,
        "num_ids_4": 110
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert\nassert\nassert remove_duplicates([1, 2, 3, 4, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\nassert\n",
        "num_ids_2": 5,
        "num_ids_4": 43
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert remove_duplicates([1,2,2,3,4]) == [1,2,3,4], \"Wrong result\"\nassert remove_duplicates([]) == [], \"Empty list\"\n\n\"\"\"\nreturns the list of integers without any duplicates in the list.\n\"\"\"\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    i = 0\n    while i < len(numbers):\n        if numbers[i] == numbers[i-1]:\n            del numbers[i]\n        else:\n            i += 1\n    return numbers\n",
        "num_ids_2": 36,
        "num_ids_4": 52
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     flip_case(\"apple\") == \"APPLE\"\nassert     flip_case(\"I love this apple.\") == \"I LOVE THIS APPLE.\"\nassert     flip_case(\"Ripe\") == \"ripe\"\nassert     flip_case(\"\") == \"\"\n\nprint(\"check_permutation passed\")\n",
        "num_ids_2": 36,
        "num_ids_4": 63
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     flip_case('Bonjour') == 'BONJOUR'\nassert     flip_case('Bonjour') == 'BONJOUR'\nassert     flip_case('Bonjour') == 'BONJOUR'\nassert     flip_case('BONJOUR') == 'BONJOUR'\nassert     flip_case('BONJOUR') == 'BONJOUR'\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     flip_case('THIS IS A TEST') == 'THIS IS A TEST'\nassert     flip_case('this is a test') == 'THIS IS A TEST'\nassert flip_case('hello, world!') == 'hello, world!'\nassert flip_case('Lorem Ipsum') == 'LOREM IPSUM'\n",
        "num_ids_2": 40,
        "num_ids_4": 76
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     flip_case(\"the quick brown fox\") == \"THeQICk BROWN fox\"\nassert flip_case(\"HELLO WORLD\") == \"oHeLLo wORlD\"\nassert flip_case(\"A man, a plan, a canal: Panama\") == \"a maP an a cAnalpanama\"\nassert flip_case(\"Are you sure\") == \"yOuS sure\"\nassert flip_case(\"we can talk about weirdo\") == \"wOrld tyO wERld\"\n",
        "num_ids_2": 46,
        "num_ids_4": 94
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     flip_case('') == ''\nassert flip_case('abc') == 'abc'\nassert flip_case('ABC') == 'ABC'\nassert flip_case('ABc') == 'AbC'\nassert flip_case('abC') == 'aBC'\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     flip_case(\"flip_case\") == \"tIp_S_cAsE\"\nassert     flip_case(\"ReVeRsE\") == \"reVeRsE\"\nassert     flip_case(\"flip_case\") == \"tIp_S_cAsE\"\n",
        "num_ids_2": 45,
        "num_ids_4": 70
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef length(string: str) -> int:\n    \"\"\" Return length of a string.\n        Example:\n            Input:'spam'\n            Output: 3\n    \"\"\"\n    pass\n\n\ndef length_of_longest_substring(string: str) -> int:\n    \"\"\" Return length of the longest substring in a given string.\n        Example:\n            Input: 'abcabcbb'\n            Output: 3\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate([\"first\", \"second\"]) == \"firstsecond\"\nassert     concatenate([\"first\", \"second\", \"third\"]) == \"firstsecondthird\"\nassert     concatenate([\"first\", \"second\", \"third\", \"fourth\"]) == \"firstsecondthirdfourth\"\nassert     concatenate([\"first\", \"second\", \"third\", \"fourth\", \"fifth\"]) == \"firstsecondthirdfourthfiftheight\"\nassert     concatenate([\"first\", \"second\", \"third\", \"fourth\", \"fifth\", \"sixth\"]) == \"firstsecondthirdfourthfiftheightsixth\"\n",
        "num_ids_2": 44,
        "num_ids_4": 106
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate([\"a\", \"b\"]) == \"ab\"\nassert     concatenate([\"a\", \"bc\"]) == \"abc\"\nassert     concatenate([\"ab\", \"c\"]) == \"abc\"\nassert     concatenate([\"ab\", \"dc\"]) == \"abcd\"\nassert     concatenate([\"ab\", \"cd\"]) == \"abcd\"\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     concatenate(['test', '1', '2']) == 'test1test2', 'Wrong concatenate'\nassert     concatenate(['hello', 'world']) == 'helloworld', 'Wrong concatenate'\nassert     concatenate(['hello', 'world', '!']) == 'helloworld!', 'Wrong concatenate'\nassert     concatenate(['hello', 'world', '!', 'and', 'a', 'bunch']) == 'helloworld!andabunch', 'Wrong concatenate'\nassert     concatenate(['and', 'and', 'a', 'bunch', 'of', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', 'of', 'and', 'bunch', ",
        "num_ids_2": 60,
        "num_ids_4": 136
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     concatenate([\"We\", \"are\"]) == \"We are\"\nassert     concatenate([\"We\", \"are\", \".\", \".\"]) == \"We are.\"\nassert     concatenate([\"We\", \"are\", \"and\", \".\"]) == \"We are and.\"\nassert     concatenate([\"We\", \"are\", \"and\", \".\"]) == \"We are and.\"\nassert     concatenate([\"We\", \"are\", \"and\", \".\"]) == \"We are and.\"\n",
        "num_ids_2": 44,
        "num_ids_4": 96
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate([\"hello\", \"world\"]) == \"helloworld\"\nassert     concatenate([\"hello\", \"world\", \"program\", \"system\"]) == \"helloworldprogramsystem\"\nassert     concatenate([\"hello\", \"world\", \"program\", \"system\", \"program\", \"system\"]) == \"helloworldprogramsystemprogramsystem\"\n",
        "num_ids_2": 50,
        "num_ids_4": 87
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     concatenate([\"hello\", \"world\"]) == \"helloworld\", \"Error\"\nassert concatenate([\"\", \"\"]) == \"\", \"Error\"\nassert concatenate([]) == \"\", \"Error\"\n",
        "num_ids_2": 41,
        "num_ids_4": 54
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcd\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"abcde\"\n\n\ndef remove_duplicates(nums: List[int]) -> int:\n    \"\"\" Remove the duplicates of an array in O(n) time complexity, where n is the length of the given array\n    \"\"\"\n    pass\n",
        "num_ids_2": 48,
        "num_ids_4": 77
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    concatenate([\"A\", \"B\", \"C\"]) == \"ABC\"\n    concatenate([\"A\", \"BC\"]) == \"ABC\"\n    concatenate([\"A\", \"B\", \"C\", \"D\"]) == \"ABCD\"\n    concatenate([\"A\", \"BC\", \"D\"]) == \"ABCD\"\n    concatenate([\"A\", \"B\", \"C\", \"D\", \"E\"]) == \"ABCDE\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\"]) == \"ABCDEF\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\"]) == \"ABCDEFGH\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\"]) == \"ABCDEFGHI\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]) == \"ABCDEFGHIJ\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"]) == \"ABCDEFGHIJK\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"]) == \"ABCDEFGHIJKL\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\"]) == \"ABCDEFGHIJKLMN\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\"]) == \"ABCDEFGHIJKLMNOP\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\"]) == \"ABCDEFGHIJKLMNOPQ\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\"]) == \"ABCDEFGHIJKLMNOPQRS\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"]) == \"ABCDEFGHIJKLMNOPQRSU\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\"]) == \"ABCDEFGHIJKLMNOPQRSUVW\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\"]) == \"ABCDEFGHIJKLMNOPQRSUVWX\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\"]) == \"ABCDEFGHIJKLMNOPQRSUVWXZ\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\"]) == \"ABCDEFGHIJKLMNOPQRSUVWXZT\"\n    concatenate([\"A\", \"BC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\"]) == \"ABCDEFGHIJKLMNOPQRSUV",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_by_prefix([], \"\") == []\nassert     filter_by_prefix([\"a\", \"b\", \"c\"], \"\") == []\nassert     filter_by_prefix([\"a\", \"b\", \"c\"], \"a\") == [\"a\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\"], \"c\") == [\"c\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\"], \"b\") == [\"b\"]\n",
        "num_ids_2": 36,
        "num_ids_4": 86
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_by_prefix([\"p1\", \"p2\", \"p3\"], \"p\") == [\"p1\", \"p2\", \"p3\"]\nassert     filter_by_prefix([\"a1\", \"a2\", \"a3\"], \"a\") == [\"a1\", \"a2\", \"a3\"]\nassert     filter_by_prefix([\"1\", \"2\", \"3\"], \"1\") == [\"1\"]\nassert     filter_by_prefix([\"1\", \"2\", \"3\"], \"2\") == [\"2\", \"3\"]\nassert     filter_by_prefix([\"1\", \"2\", \"3\"], \"3\") == [\"1\", \"2\", \"3\"]\n",
        "num_ids_2": 74,
        "num_ids_4": 127
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    input_strings = [\"aa\", \"a\", \"a\", \"a\", \"a\", \"aaa\"]\n    print(filter_by_prefix(input_strings, \"a\"))\n    print(filter_by_prefix(input_strings, \"aa\"))\n    print(filter_by_prefix(input_strings, \"aaa\"))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_by_prefix([\"apple\"], \"apple\") == [\"apple\"]\nassert     filter_by_prefix([\"apple\"], \"apple1\") == []\nassert     filter_by_prefix([\"apple\", \"apple1\", \"apple2\"], \"apple\") == [\"apple\"]\nassert     filter_by_prefix([\"apple\", \"apple1\", \"apple2\"], \"apple1\") == [\"apple1\", \"apple2\"]\nassert     filter_by_prefix([\"apple\", \"apple1\", \"apple2\"], \"apple2\") == [\"apple2\"]\n",
        "num_ids_2": 37,
        "num_ids_4": 97
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_prefix(['a','b','c'], 'a') == ['a']\nassert     filter_by_prefix(['a','b','c'], 'c') == ['c']\nassert     filter_by_prefix(['a','b','c'], 'd') == []\nassert     filter_by_prefix(['a','b','c','d'], 'a') == ['a', 'a']\nassert     filter_by_prefix(['a','b','c','d'], 'b') == ['b', 'b']\n",
        "num_ids_2": 48,
        "num_ids_4": 99
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"f\") == [\"foo\", \"bar\", \"baz\"]\nassert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"z\") == []\nassert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"qu\") == [\"qux\"]\nassert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"wxyz\") == []\nassert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"qux\"], \"\") == [\"foo\", \"bar\", \"baz\", \"qux\"]\n",
        "num_ids_2": 65,
        "num_ids_4": 126
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given suffix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_by_prefix(['a', 'b', 'c', 'd'], 'a') == ['a', 'b', 'c', 'd']\nassert     filter_by_prefix(['a', 'b', 'c', 'd'], 'b') == ['b']\nassert     filter_by_prefix(['a', 'b', 'c', 'd'], 'c') == ['c', 'd']\nassert     filter_by_prefix(['a', 'b', 'c', 'd'], 'd') == ['d']\nassert     filter_by_prefix(['a', 'b', 'c', 'd'], 'e') == []\n",
        "num_ids_2": 67,
        "num_ids_4": 128
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfilter_by_prefix([\"cat\", \"dog\", \"cat\"], \"c\") == [\"cat\"]\nassert filter_by_prefix([\"cat\", \"dog\", \"cat\"], \"z\") == []\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_by_prefix([\"documents\", \"tables\", \"documents\", \"documents\"], \"d\") == [\"documents\"], \\\n        \"Unexpected result of filter_by_prefix!\"\nassert     filter_by_prefix([\"tables\", \"documents\", \"tables\", \"tables\"], \"d\") == [\"tables\"], \\\n        \"Unexpected result of filter_by_prefix!\"\nassert     filter_by_prefix([\"tables\", \"documents\", \"tables\", \"tables\"], \"s\") == [\"tables\", \"documents\"], \\\n        \"Unexpected result of filter_by_prefix!\"\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given suffix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 68,
        "num_ids_4": 106
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_positive([1, 2, -3, 4, -5, 6]) == [1, 2, -3, 4, 6]\nassert     get_positive([-1, 2, -3, 4, -5, 6]) == [-1, 2, -3, 4, 6]\n",
        "num_ids_2": 69,
        "num_ids_4": 69
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_positive([-3, 1, -2, -5, 4]) == [-3, 4], \"Wrong result\"\nassert     get_positive([-3, 1, -2, -5, 4]) == [4], \"Wrong result\"\nassert     get_positive([-3, 1, -2, -5, 4]) == [], \"Wrong result\"\nassert     get_positive([]) == [], \"Wrong result\"\nassert     get_positive([1, -2, 3]) == [1, 3], \"Wrong result\"\n",
        "num_ids_2": 60,
        "num_ids_4": 104
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_positive([1,2,3,4,-1,10]) == [1,2,3,4]\nassert     get_positive([-1,2,3,4,-1,10]) == [-1,2,3,4]\nassert     get_positive([1,2,3,4,5]) == []\nassert     get_positive([-1,-2,3,4,5]) == [-1,-2,3,4]\nassert     get_positive([-1,2,-3,4,5]) == [-1,2,-3,4]\n",
        "num_ids_2": 59,
        "num_ids_4": 106
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_positive([-1, 1, -2, 3, -4, 5, 6]) ==     [1, 6]\nassert     get_positive([-1, 1, -2, 3, -4, 5, 6, 7]) ==     []\nassert     get_positive([-1, 1, -2, -3, -4, 5, -6]) ==     []\nassert     get_positive([-1, 1, -2, -3, -4, 5, -6, -7]) ==     [1, 5, 7]\n",
        "num_ids_2": 60,
        "num_ids_4": 127
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    get_positive([1, -2, -3, -4]) == [-4]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_positive([]) == []\nassert     get_positive([0]) == [0]\nassert     get_positive([1, 2]) == [1, 2]\nassert     get_positive([1, 2, 3, 4, -1, 4, 3, 2, 1, -1, 0]) == [1, 2, 3, 4, 4, 3, 2, 1, 2, 1, 0]\n",
        "num_ids_2": 23,
        "num_ids_4": 95
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_positive([1, -3, 4, 5, -3, 0, -3, 2, 1, 0, -5, -3, -2]) == [-3, 4, -3, 2, 1, 0, -5]\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nis_prime(2)\nis_prime(5)\nis_prime(4)\nis_prime(13)\nis_prime(12)\nis_prime(10)\nis_prime(11)\nis_prime(17)\nis_prime(19)\nis_prime(23)\nis_prime(25)\nis_prime(27)\nis_prime(28)\nis_prime(29)\nis_prime(30)\nis_prime(31)\nis_prime(32)\nis_prime(33)\nis_prime(34)\nis_prime(35)\nis_prime(36)\nis_prime(37)\nis_prime(38)\nis_prime(39)\nis_prime(40)\nis_prime(41)\nis_prime(42)\nis_prime(43)\nis_prime(44)\nis_prime(45)\nis_prime(46)\nis_prime(47)\nis_prime(48)\nis_prime(49)\nis_prime(50)\nis_prime(51)\nis_prime(52)\nis_prime(53)\nis_prime(54)\nis_prime(55)\nis_prime(56)\nis_prime(57)\nis_prime(58)\nis_prime(59)\nis_prime(60)\nis_prime(61)\nis_prime(62)\nis_prime(63)\nis_prime(64)\nis_prime(65)\nis_prime(66)\nis_prime(67)\nis_prime(68)\nis_prime(69)\nis_prime(70)\nis_prime(71)\nis_prime(72)\nis_prime(73)\nis_prime(74)\nis_prime(75)\nis_prime(76)\nis_prime(77)\nis_prime(78)\nis_prime(79)\nis_prime(80)\nis_prime(81)\nis_prime(82)\nis_prime(83)\nis_prime(84)\nis_prime(85)\nis_prime(86)\nis_prime(87)\nis_prime(88)\nis_prime(89)\nis_prime(90)\nis_prime(91)\nis_prime(92)\nis_prime(93)\nis_prime(94)\nis_prime(95)\nis_prime(96)\nis_prime(97)\nis_prime(98)\nis_prime(99)\nis_prime(100)\nis_prime(101)\nis_prime(102)\nis_prime(103)\nis_prime(104)\nis_prime(105)\nis_prime(106)\nis_prime(107)\nis_prime(108)\nis_prime(109)\nis_prime(110)\nis_prime(111)\nis_prime(112)\nis_prime(113)\nis_prime(114)\nis_prime(115)\nis_prime(116)\nis_prime(117)\nis_prime(118)\nis_prime(119)\nis_prime(120)\nis_prime(121)\nis_prime(122)\nis_prime(123)\nis_prime(124)\nis_prime(125)\nis_prime(126)\nis_prime(127)\nis_prime(128)\nis_prime(129)\nis_prime(130)\nis_prime(131)\nis_prime(132)\nis_prime(133)\nis_prime(134)\nis_prime(135)\nis_prime(136)\nis_prime(137)\nis_prime(138)\nis_prime(139)\nis_prime(140)\nis_prime(141)\nis_prime(142)\nis_prime(143)\nis_prime(144)\nis_prime(145)\nis_prime(146)\nis_prime(147)\nis_prime(148)\nis_prime(149)\nis_prime(150)\nis_prime(151)\nis_prime(152)\nis_prime(153)\nis_prime(154)\nis_prime(155)\nis_prime(156)\nis_prime(157)\nis_prime(158)\nis_prime(159)\nis_prime(160)\nis_prime(161)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_prime(7) == False\nassert     is_prime(13) == True\nassert     is_prime(-1) == False\nassert     is_prime(0) == False\nassert     is_prime(1) == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_zero([1, 2, -1]) == (-1, )\nassert     find_zero([1, 2, 0, -1]) == (-1, )\nassert     find_zero([1, -2, 0, -1]) == (1, )\nassert     find_zero([1, -2, 3, 4, -1]) == (3, )\nassert     find_zero([1, -2, 3, -4, 5, -1]) == (3, )\n",
        "num_ids_2": 40,
        "num_ids_4": 86
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_solution(xs: list, x: float, y: float):\n    \"\"\"\n    Check if solution is correct.\n    xs are coefficients of a polynomial.\n    x is point where polynomial is evaluated.\n    y is polynomial evaluated at x.\n    returns True if solution is correct otherwise False.\n    \"\"\"\n    return y == poly(xs, x)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_zero([4, 7]) == 2, \"3 - 2 = 1\"\nassert     find_zero([5, 2, 0]) == 2, \"5 - 2 = 3\"\nassert     find_zero([4, 7, -1]) == 2, \"4 + 7 - 1 = 6\"\nassert     find_zero([1, 2, 0]) == -1, \"1 + 2 + 0 = 1\"\nassert     find_zero([1, 0, 1]) == -1, \"1 + 0 = 1\"\n",
        "num_ids_2": 44,
        "num_ids_4": 96
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_zero([0, 4, -3, 2, 1]) == (0, 4)\nassert     find_zero([0, 4, -3, 2, 1, 0]) == (0, 4)\nassert     find_zero([0, 4, -3, 2, 1, 0, 0]) == (0, 4)\nassert     find_zero([0, 4, -3, 2, 1, 0, 0, 0, 0]) == (0, 4)\nassert     find_zero([-2, 0, 4, -3, 2, 1, 0]) == (-2, -2)\n",
        "num_ids_2": 50,
        "num_ids_4": 110
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_zero([1, 2, 3]) == -2\nfind_zero([2, 1, 2]) == -1\nfind_zero([1, 0, 0]) == 0\nfind_zero([0, 0, 0]) == 0\nfind_zero([0, 0, 0]) == 0\nfind_zero([0, 0, 0]) == 0\n\n\ndef f(x):\n    return math.sin(x)\n\n\ndef secant(x0, x1, eps=1e-5):\n    \"\"\" \n    Returns approximate root x of f(x) = 0 by Secant method\n    Input: x0 and x1 are two roots of f(x)\n    \"\"\"\n    for i in range(30):\n        x_new = x1 - f(x1) * (x1 - x0) / (f(x1) - f(x0))\n        if math.fabs(x_new - x1) < eps:\n            return x_new\n        x0 = x1\n        x1 = x_new\n\n\ndef approx_eq(x0, x1, eps=1e-5):\n    \"\"\"\n    Returns approximate root x of f(x) = 0\n    Input: x0 and x1 are two roots of f(x)\n    \"\"\"\n    return secant(x0, x1, eps)\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     poly([2, 1], 1.0) == 0.0, \\\n    'wrong output'\nassert     poly([2, 1], 2.0) == 0.0, \\\n    'wrong output'\nassert     poly([2, 1], -1.0) == 0.0, \\\n    'wrong output'\nassert     poly([2, 1], 0.0) == 0.0, \\\n    'wrong output'\nassert     poly([2, 1], 1.5) == 0.0, \\\n    'wrong output'\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     poly([1, 2, 3], 1) == -2\nassert     poly([1, 2, 3], 2) == 6\nassert     poly([1, 2, 3], 3) == 0\nassert     poly([1, 2, 3], 4) == -1\nassert     poly([1, 2, 3], 5) == -3\n",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_third([4, 7, 2, 6, 4, 8]) ==     [4, 2, 4, 6, 7, 8]\nassert     sort_third([4, 7, 2, 6, 3, 8]) ==     [4, 2, 3, 6, 7, 8]\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert sort_third([3, 6, 1, 9, 5, 6]) == [1, 3, 5, 6, 6, 9]\nassert sort_third([3, 6, 1, 9, 2, 5]) == [1, 2, 3, 5, 6, 9]\nassert sort_third([3, 6, 1, 9, 2, 5, 4, 7, 8, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "num_ids_2": 35,
        "num_ids_4": 115
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_third([]) == []\nassert     sort_third([1]) == [1]\nassert     sort_third([3, 2, 1]) == [1, 2, 3]\n",
        "num_ids_2": 23,
        "num_ids_4": 44
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_third([3, 6, 9, 12, 15, 18]) == [3, 6, 12, 15, 18, 9]\nassert     sort_third([3, 6, 9, 14, 15, 18]) == [3, 6, 9, 14, 18, 15]\nassert     sort_third([3, 6, 9, 14, 18, 15]) == [3, 6, 9, 14, 18, 15]\nassert     sort_third([1, 3, 6, 9, 14, 15]) == [1, 3, 6, 9, 14, 15]\nassert     sort_third([1, 3, 6, 9, 14, 18]) == [1, 3, 6, 9, 14, 18]\n",
        "num_ids_2": 66,
        "num_ids_4": 132
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"[TEST] sort_third\")\nsort_third([2, 3, 4, 1, 5])\nsort_third([2, 4, 1, 5, 3])\nsort_third([2, 4, 3, 1, 5])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 1, 5, 3])\nsort_third([2, 4, 1, 5, 1])\nsort_third([2, 4, 3, 1, 5])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 1, 5, 1])\nsort_third([2, 4, 1, 5, 1])\nsort_third([2, 4, 1, 5, 1])\nsort_third([2, 4, 3, 1, 5])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2, 4, 3, 5, 1])\nsort_third([2",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert         unique([1, 2, 2, 3]) == sorted([1, 2, 3])\nassert         unique([1, 2, 2, 2, 3]) == sorted([1, 2, 3])\nassert         unique([1, 1, 1, 1, 1]) == sorted([1])\nassert         unique([\"a\", \"b\"]) == sorted([\"a\", \"b\"])\nassert         unique([1, 2, 3, 4, 5]) == sorted([1, 2, 3, 4, 5])\n",
        "num_ids_2": 46,
        "num_ids_4": 88
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique([1,1,1,2,2,2,3,3,3,4,4,4,4,4,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7]) ==    [1,2,3,4,5,6,7]\n\nassert     unique([1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7]) ==    [1,2,3,4,5,6,7]\n",
        "num_ids_2": 192,
        "num_ids_4": 192
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    unique([1, 2, 3, 3, 4]) == [1, 2, 3, 4]\n    unique([1, 2, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert \n    unique([]) == []\nassert \n    unique([]) == []",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique([1,2,3,3,3,4]) == [1,2,3,4]\nassert     unique([1,2,3,3,3,4]) == [1,2,3,4]\nassert     unique([1,2,3,3,3,4,4]) == [1,2,3,4]\nassert     unique([1,2,3,3,3,4,4,4]) == [1,2,3,4]\n",
        "num_ids_2": 54,
        "num_ids_4": 114
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique([1,1,2,3,4,4,5,6,7,7]) == [1,2,3,4,5,6,7]\nassert     unique([1,1,2,3,4,4,5,6,7,7]) == []\nassert     unique([]) == []\nassert     unique([\"A\", \"B\", \"C\", \"D\"]) == [\"A\", \"B\", \"C\", \"D\"]\nassert     unique([1,1,2,3,4,4,5,6,7,7]) == []\n",
        "num_ids_2": 68,
        "num_ids_4": 107
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique([]) == []\nassert     unique([1, 2, 3]) == [1, 2, 3]\nassert     unique([1, 2, 3, 1, 2, 3]) == [1, 2, 3]\nassert     unique([1, 1, 2, 2, 2, 3]) == [1, 2, 3]\nassert     unique([1, 1, 1, 2, 2, 2, 3]) == [1, 2, 3]\n",
        "num_ids_2": 27,
        "num_ids_4": 77
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique([1, 2, 3, 1, 2]) ==    [1, 2, 3]\nassert     unique([1, 2, 2, 3, 1]) ==    [1, 2, 3]\nassert     unique([2, 2, 2, 2, 2]) ==    [2]\nassert     unique([\"a\",\"b\",\"c\",\"a\",\"b\",\"a\"]) ==    [\"a\",\"b\",\"c\"]\nassert     unique([1, 2, 3, 1, 2, 3]) ==    [1, 2, 3]\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique([]) == []\nassert     unique([1]) == [1]\nassert     unique([1,2]) == [1, 2]\nassert     unique([1,2,1]) == [1, 2, 1]\nassert     unique([1,2,1,2]) == [1, 2, 1, 2]\n",
        "num_ids_2": 19,
        "num_ids_4": 53
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique([1,2,3,2,4]) == [1,2,4]\nassert     unique([1,1,2,3]) == [1,2,3]\nassert     unique([]) == []\nassert     unique([1,2,3,4,5,6]) == [1,2,3,4,5,6]\n",
        "num_ids_2": 44,
        "num_ids_4": 83
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique([1,2,2,3,3,3,4,5]) ==    [1,2,3,4,5]\nassert unique([1,2,2,3,3,3,4,5,5,6]) ==    [1,2,3,4,5]\n\ndef is_power_of(a: int, b: int):\n    \"\"\"Return true if a is a power of b\n    \"\"\"\n    pass\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert max_element([]) == None\nassert max_element([-2, 1, -4, 3]) == 3\nassert max_element([1, 2, 3, 4]) == 4\nassert max_element([-2, -1, -2, 2, 1, 2, 2, -10]) == 2\n",
        "num_ids_2": 12,
        "num_ids_4": 46
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_element([1,2,3]) == 3\nassert     max_element([1,2,3,4]) == 4\nassert     max_element([]) == None\nassert     max_element([1,2,3,4,5]) == 5\n",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_element([1,2,3,4,5]) == 5\nassert     max_element([1,5,3,4,2]) == 5\nassert     max_element([2,4,1,3,5]) == 5\nassert     max_element([1,2,3,4,5,6]) == 5\nassert     max_element([1,2,3,4,5,2]) == 2\n",
        "num_ids_2": 38,
        "num_ids_4": 78
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_element([]) == None\nassert     max_element([10,20,30,40,50]) == 50\nassert     max_element([1,2,3,4,5]) == 5\n",
        "num_ids_2": 29,
        "num_ids_4": 48
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_element([-1, -2, -3, -4, 5, 5]) == 5, \\\n'Expected max_element([-1, -2, -3, -4, 5, 5]) to be 5, but got'+ str(max_element([-1, -2, -3, -4, 5, 5]))\nassert     max_element([1, 2, 3, 4, 5]) == 5, \\\n'Expected max_element([1, 2, 3, 4, 5]) to be 5, but got'+ str(max_element([1, 2, 3, 4, 5]))\nassert     max_element([1, 2, 3, 4]) == 4, \\\n'Expected max_element([1, 2, 3, 4]) to be 4, but got'+ str(max_element([1, 2, 3, 4]))\nassert     max_element([1]) == 1, \\\n'Expected max_element([1]) to be 1, but got'+ str(max_element([1]))\nassert     max_element([]) == None, \\\n'Expected max_element([]) to be None, but got'+ str(max_element([0]))\n",
        "num_ids_2": 48,
        "num_ids_4": 80
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_element([]) == None, \"Empty list\"\nassert     max_element([10, 5, -9, 8]) == 8, \"max element is the max\"\nassert     max_element([3, 5, -7, 8, 3, -1, 5]) == 8, \"max element is the max\"\nassert     max_element([10, 5, 7, 8, 3, -1, 5]) == 10, \"max element is the max\"\nassert     max_element([1, 2, 3, 4, 5]) == 5, \"max element is the max\"\n",
        "num_ids_2": 41,
        "num_ids_4": 106
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # the function fizz_buzz needs to be called\n    fizz_buzz(n)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fizz_buzz(16) == 2\nassert     fizz_buzz(17) == 3\nassert     fizz_buzz(18) == 3\nassert     fizz_buzz(19) == 4\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fizz_buzz(100) == fizz_buzz(100)\nassert     fizz_buzz(101) == fizz_buzz(101)\nassert     fizz_buzz(52) == fizz_buzz(52)\nassert     fizz_buzz(200) == fizz_buzz(200)\nassert     fizz_buzz(37) == fizz_buzz(37)\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nfizz_buzz(15)\nprint(fizz_buzz(15))\n\ndef fizz_buzz(n):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 7 == 0:\n        return 1 + fizz_buzz(n-7)\n    elif n % 11 == 0:\n        return 1 + fizz_buzz(n-11)\n    elif n % 13 == 0:\n        return 1 + fizz_buzz(n-13)\n    else:\n        return 1 + fizz_buzz(n-7) + fizz_buzz(n-11) + fizz_buzz(n-13)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fizz_buzz(5) == 0\nassert     fizz_buzz(25) == 3\nassert     fizz_buzz(100) == 5\nassert     fizz_buzz(2550) == 10\nassert     fizz_buzz(9001) == 6\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fizz_buzz(0) == 0\nassert     fizz_buzz(1) == 0\nassert     fizz_buzz(2) == 0\nassert     fizz_buzz(3) == 0\nassert     fizz_buzz(4) == 0\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fizz_buzz(15) == 3\nassert     fizz_buzz(20) == 1\nassert     fizz_buzz(21) == 0\nassert     fizz_buzz(25) == 2\nassert     fizz_buzz(30) == 0\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_even([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 25",
        "num_ids_2": 1026,
        "num_ids_4": 1026
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_even([]) == []\nassert sort_even([1]) == [1]\nassert sort_even([2]) == [1, 2]\nassert sort_even([2, 3]) == [1, 3, 2]\nassert sort_even([3, 2]) == [1, 2, 3]\n",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_even([3,4,1,5,2]) == [1,2,3,4,5]\nassert     sort_even([4,4,2,5,1]) == [1,2,4,5,4]\nassert     sort_even([4,4,1,1,1]) == [1,1,4,4,4]\nassert     sort_even([]) == []\nassert     sort_even([0,0,0]) == [0,0,0]\n",
        "num_ids_2": 58,
        "num_ids_4": 97
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_even([4,3,2,1,0]) == [0,1,2,3,4]\nassert     sort_even([0,1,2,3,4]) == [0,1,2,3,4]\nassert     sort_even([1,2,3,4,0]) == [0,1,2,3,4]\nassert     sort_even([1,3,5,2,4]) == [1,2,3,4,5]\nassert     sort_even([5,1,3,2,4]) == [1,2,3,4,5]\n",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_even(['d', 'b', 'c', 'a', 'e']) == ['a', 'b', 'c', 'd', 'e']\nassert     sort_even(['e', 'c', 'd', 'a', 'b']) == ['a', 'b', 'd', 'c', 'e']\nassert     sort_even(['a', 'c', 'b', 'e', 'd']) == ['a', 'b', 'd', 'c', 'e']\nassert     sort_even([3, 1, 5, 4, 2]) == [1, 2, 3, 4, 5]\nassert     sort_even([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n",
        "num_ids_2": 78,
        "num_ids_4": 146
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_even([2, 3, 4, 1, 6, 5]) == [1, 2, 3, 4, 5, 6]\nassert sort_even([3, 6, 4, 1, 2]) == [1, 2, 3, 4, 6]\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_even([1,2,3,4,5]) == [1,3,5,2,4]\nassert     sort_even([1,3,5,2,4]) == [1,3,2,5,4]\nassert     sort_even([4,3,5,1,2]) == [1,2,3,5,4]\nassert     sort_even([5,1,2,3,4]) == [1,2,3,4,5]\nassert     sort_even([2,4,6,5,1,3]) == [1,3,2,4,5,6]\nprint(\"All the tests are passed!\\n\")\n",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_even([1, 2, 3]) == [1, 2, 3], 'test 1 failed'\nassert sort_even([1, 2, 3, 4, 5]) == [1, 3, 2, 4, 5], 'test 2 failed'\nassert sort_even([1, 2, 3, 4, 5, 6]) == [1, 3, 2, 4, 5, 6], 'test 3 failed'\nassert sort_even([-2, -1, 0, 1, 2, 3, 4]) == [-2, -1, 0, 2, 1, 3, 4], 'test 4 failed'\n",
        "num_ids_2": 59,
        "num_ids_4": 140
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef encode_cyclic_v2(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic_v2(s: str):\n    \"\"\"\n    takes as input encoded string. Returns decoded string.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decode_cyclic(encode_cyclic(\"barfoothefoobarman\")) == \"barfoofoobarman\"\nassert     decode_cyclic(encode_cyclic(\"word\")) == \"word\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     encode_cyclic(\"AABAA\") == \"AAA\"\nassert     encode_cyclic(\"AAA\") == \"AAA\"\nassert     encode_cyclic(\"AAA\") == \"AAA\"\nassert     encode_cyclic(\"AABA\") == \"AAAB\"\nassert     encode_cyclic(\"AAAA\") == \"AAA\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decode_cyclic(\"aac\") == \"aac\"\nassert     decode_cyclic(\"aacc\") == \"aac\"\nassert     decode_cyclic(\"aaa\") == \"aaa\"\nassert     decode_cyclic(\"aaaa\") == \"aaaa\"\nassert     decode_cyclic(\"aaaaa\") == \"aaaaa\"\n",
        "num_ids_2": 34,
        "num_ids_4": 64
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert encode_cyclic(\"a\") == \"a\"\nassert encode_cyclic(\"aa\") == \"bb\"\nassert encode_cyclic(\"aab\") == \"ccc\"\n",
        "num_ids_2": 16,
        "num_ids_4": 44
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encode_cyclic('aaa') == 'aaa'\nassert     encode_cyclic('abc') == 'cab'\nassert     encode_cyclic('ab') == 'ab'\nassert     encode_cyclic('b') == 'ba'\nassert     encode_cyclic('a') == 'a'\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decode_cyclic(\"HARRYPOTTER\") == \"HARRYPOTTER\"\nassert decode_cyclic(\"TWEET\") == \"TWEET\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_fib(1) == 1\nassert prime_fib(2) == 2\nassert prime_fib(3) == 3\nassert prime_fib(4) == 5\nassert prime_fib(5) == 5\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prime_fib(0) == 0\nassert     prime_fib(2) == 2\nassert     prime_fib(3) == 3\nassert     prime_fib(5) == 5\nassert     prime_fib(7) == 13\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprime_fib(30)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(prime_fib(2))\n    print(prime_fib(2))\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     triples_sum_to_zero([1, 2, 3, -2, 4, 5, -4, 6, -8, 10, -5]) == True, \"Wrong result for the input list\"\nassert     triples_sum_to_zero([1, 1, 1, 1]) == True, \"Wrong result for the input list\"\nassert     triples_sum_to_zero([1, 1, 1, 2]) == False, \"Wrong result for the input list\"\nassert     triples_sum_to_zero([2, 2, 2]) == False, \"Wrong result for the input list\"\nassert     triples_sum_to_zero([1, 2, 3, 4, -3]) == True, \"Wrong result for the input list\"\n",
        "num_ids_2": 82,
        "num_ids_4": 144
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([3, 2, 4, 1]) == True\nassert     triples_sum_to_zero([1, 1, -1, -3]) == False\nassert     triples_sum_to_zero([1, 1, 3, 3]) == True\nassert     triples_sum_to_zero([1, 1, 3, 4]) == False\nassert     triples_sum_to_zero([-1, 1, 1, 1]) == True\n",
        "num_ids_2": 46,
        "num_ids_4": 90
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(triples_sum_to_zero([-1, 2, 1, -4]))\nprint(triples_sum_to_zero([-1, 2, 1, -4, -2, 1, 4]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([-1,0,1,2,-1,4]) == True\nassert     triples_sum_to_zero([-1,0,1,2,4,5]) == False\nassert     triples_sum_to_zero([-1,-2,-3,4,4,5]) == True\nassert     triples_sum_to_zero([-1,-2,-3,4,4,5,6]) == False\nassert     triples_sum_to_zero([-1,-2,-3,4,4,5,6,7,8,9,9]) == True\n",
        "num_ids_2": 54,
        "num_ids_4": 110
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not triples_sum_to_zero([-2, 0, 1])\nassert triples_sum_to_zero([1, -4, 7, 2, -5])\nassert not triples_sum_to_zero([-2, 0, 1])\nassert triples_sum_to_zero([1, -4, 7, 2, -5])\n",
        "num_ids_2": 22,
        "num_ids_4": 64
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([-1, 0, 1, 2, -1, -4]) == True\nassert     triples_sum_to_zero([0, 0, 0, 0, -1]) == False\nassert     triples_sum_to_zero([-3, -1, -1, 0, 1]) == False\nassert     triples_sum_to_zero([-1, -1, -1, 1, 0]) == True\nassert     triples_sum_to_zero([-1, -1, -1, 1, 1]) == False\n",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not triples_sum_to_zero([3, 6, -2, -5, -4, 8])\nassert triples_sum_to_zero([3, 6, -2, -5, -4, 8])\nassert not triples_sum_to_zero([3, 6, -2, -5, -4, -8])\nassert not triples_sum_to_zero([3, 6, -2, -5, -4, -8])\n",
        "num_ids_2": 30,
        "num_ids_4": 84
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (triples_sum_to_zero([1,-2,1,2,3,2,5]) == True)\nassert     (triples_sum_to_zero([1,2,3]) == False)\nassert     (triples_sum_to_zero([-2,1,1,2,3,2,5]) == False)\nassert     (triples_sum_to_zero([5,5,5]) == False)\nassert     (triples_sum_to_zero([5,-5,-5]) == False)\n",
        "num_ids_2": 52,
        "num_ids_4": 105
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([-1, 0, 1, 2]) == True\nassert     triples_sum_to_zero([1, 0, -1, 2]) == True\nassert     triples_sum_to_zero([-1, 0, 1, -3]) == True\nassert     triples_sum_to_zero([-2, -1, 1, 2]) == False\n",
        "num_ids_2": 46,
        "num_ids_4": 94
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     car_race_collision(1) == 1\nassert car_race_collision(2) == 0\nassert car_race_collision(3) == 2\nassert car_race_collision(4) == 1\nassert car_race_collision(5) == 0\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     car_race_collision(1) == 0, \"sample case 1\"\nassert car_race_collision(2) == 1, \"sample case 2\"\nassert car_race_collision(4) == 1, \"sample case 3\"\nassert car_race_collision(8) == 2, \"sample case 4\"\nassert car_race_collision(16) == 3, \"sample case 5\"\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     car_race_collision(1) == 0, \"Not allowed\"\nassert     car_race_collision(2) == 1, \"Not allowed\"\nassert     car_race_collision(3) == 1, \"Not allowed\"\nassert     car_race_collision(4) == 1, \"Not allowed\"\nassert     car_race_collision(5) == 2, \"Not allowed\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\"\"\"\nO(n) solution\n\nIt's always quicker than what's left to explain.\nWe can just keep track of the location of each car as we go.\nWe can start from the leftmost car and move toward the rightmost car,\nand the distance between them will increase if they get further to the right.\nAt each step, we are moving the car on both sides, which means we will always have the\nsmallest distance between them.  We can do this in O(n) time.\n\"\"\"\ndef car_race_collision(n: int):\n    \n    min_distance = -1\n    max_distance = 0\n    for i in range(1, n):\n        min_distance = max(min_distance, i)\n        max_distance = max(max_distance, n-i)\n    \n    return sum((max_distance-min_distance)**2)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         car_race_collision(0) == 0\nassert         car_race_collision(1) == 0\nassert car_race_collision(2) == 0\nassert car_race_collision(10) == 2\nassert car_race_collision(100) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     car_race_collision(1) == 1, '1st test'\nassert car_race_collision(2) == 3, '2nd test'\nassert car_race_collision(3) == 6, '3rd test'\nassert car_race_collision(4) == 11, '4th test'\nassert car_race_collision(5) == 18, '5th test'\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     car_race_collision(1) == 1, \"Not a correct output\"\nassert     car_race_collision(2) == 2, \"Not a correct output\"\nassert     car_race_collision(3) == 1, \"Not a correct output\"\nassert     car_race_collision(4) == 2, \"Not a correct output\"\nassert     car_race_collision(5) == 3, \"Not a correct output\"\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef car_race_collision_2(n: int):\n    \"\"\"\n    A little more sophisticated version of car_race_collision\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    assert car_race_collision_1(5) == 5\n    assert car_race_collision_2(5) == 1\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('You are good'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nincr_list([1,2,3]) == [2,3,4]\nincr_list([]) == []\nincr_list([1]) == [2]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef my_decorator(func):\n    \"\"\" Decorator for function.\n    \"\"\"\n    def wrapper(*args, **kwargs):\n        print('This is the decorator call')\n        func(*args, **kwargs)\n    return wrapper\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4], \"incr_list([1,2,3])\"\nassert     incr_list([1,2,3,4]) == [2,3,4,5], \"incr_list([1,2,3,4])\"\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6], \"incr_list([1,2,3,4,5])\"\nassert     incr_list([]) == [1], \"incr_list([])\"\nassert     incr_list(1) == [2], \"incr_list(1)\"\n",
        "num_ids_2": 76,
        "num_ids_4": 144
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6]\nassert     incr_list([1,2,3,4,5,6,7,8,9,10]) == [2,3,4,5,6,7,8,9,10,11]\n",
        "num_ids_2": 25,
        "num_ids_4": 77
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1,2]) == [2,3]\nassert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2,3,4]) == [2,3,4,5]\n",
        "num_ids_2": 25,
        "num_ids_4": 65
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pairs_sum_to_zero([1, -1, 2, -2, 3, -3]) == True, \"assertion failed\"\nassert pairs_sum_to_zero([1, 2, 3, -4, -5, -6]) == True, \"assertion failed\"\nassert pairs_sum_to_zero([1, -1, 2, -2, 3, 4]) == False, \"",
        "num_ids_2": 68,
        "num_ids_4": 96
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Testing pairs_sum_to_zero...\")\n    print(pairs_sum_to_zero([1, 3, 5, 7, 9, -1, -4]))\n    print(pairs_sum_to_zero([5, 2, -1]))\n    print(pairs_sum_to_zero([10]))\n    print(pairs_sum_to_zero([]))\n    print(\"It is working!\")\n\n\n\ndef valid_parentheses(string):\n    \"\"\"\n    valid_parentheses takes a string of characters as an input.\n    it returns True if the string consists entirely of brackets,\n    and False otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pairs_sum_to_zero([1,2,3]) == True\nassert     pairs_sum_to_zero([1,-2,-3]) == True\nassert     pairs_sum_to_zero([1,1,1,1]) == False\nassert     pairs_sum_to_zero([1,-2,-3,-4]) == False\nassert     pairs_sum_to_zero([1,1,1,1,1,1,1,1,1,1]) == True\n",
        "num_ids_2": 40,
        "num_ids_4": 84
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert pairs_sum_to_zero([1, 2, 3, 4, -1, 6]) == True\nassert pairs_sum_to_zero([1, 2, 3, 4, -1, 6]) == False\nassert pairs_sum_to_zero([1, -2, 3, -4, -1, 6]) == True\nassert pairs_sum_to_zero([1, -2, 3, -4, -1, 6]) == False\n",
        "num_ids_2": 28,
        "num_ids_4": 80
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert pairs_sum_to_zero([1,2,1,4,5,5]) == True\nassert pairs_sum_to_zero([5,4,-1,1,-4]) == True\nassert pairs_sum_to_zero([3,2,3,1,3]) == False\nassert pairs_sum_to_zero([2,1,1,1,1]) == False\n",
        "num_ids_2": 27,
        "num_ids_4": 71
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert pairs_sum_to_zero([-1, 0, 1, 2, -1, -4]) == True\nassert pairs_sum_to_zero([-1, 0, 1, 2, -1, -4, -3]) == True\nassert pairs_sum_to_zero([-1, 0, 1, 2, -1, -4, -3, -1]) == False\nassert pairs_sum_to_zero([1, 2]) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 93
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([-1, 2, -3]) == True\nassert     pairs_sum_to_zero([1, -2, 3]) == False\nassert     pairs_sum_to_zero([-2, -1, 2, 1]) == True\nassert     pairs_sum_to_zero([1, 2, 1, -2, 3]) == True\n",
        "num_ids_2": 43,
        "num_ids_4": 92
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([-1, 0, 1, 2, -1, -4]) == True\nassert     pairs_sum_to_zero([-1, 0, 1, 2, 3]) == False\nassert     pairs_sum_to_zero([-1, -1]) == False\nassert pairs_sum_to_zero([]) == True\nassert pairs_sum_to_zero([\"hello\", 1, \"bye\"]) == False\n",
        "num_ids_2": 54,
        "num_ids_4": 87
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     change_base(1, 2) == \"101\"\nassert     change_base(1, 8) == \"1\"\nassert     change_base(1234, 16) == \"3\"\nassert     change_base(123456, 8) == \"12\"",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n\ndef change_base_using_map(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_base(1234, 10) == \"234\", \"Error\"\nassert     change_base(1234, 2) == \"34\", \"Error\"\nassert     change_base(1234, 8) == \"1234\", \"Error\"\nassert     change_base(1234, 16) == \"234\", \"Error\"\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert change_base(26, 26) == 'A'\nassert change_base(11, 2) == '10'\nassert change_base(15, 16) == 'F'\n\nprint('Coding complete? Click \"Check\" to earn cool rewards!')",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nchange_base(52, 16) == 'A', '52 to hexadecimal'\nchange_base(63, 8) == 'C', '63 to octal'\nchange_base(400, 2) == 'B', '400 to binary'\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_base(5, 2) == \"3\"\nassert     change_base(13, 3) == \"13\"\nassert     change_base(15, 4) == \"15\"\nassert     change_base(10, 2) == \"1010\"\nassert     change_base(11, 2) == \"1011\"\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_base(20, 2) == '202'\nassert     change_base(10, 3) == '1010'\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ntriangle_area(6,3)\ntriangle_area(4,3)\ntriangle_area(3,4)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(1, 3) == 2.5\nassert     triangle_area(10, 20) == 100\nassert     triangle_area(100, 20) == 900\nassert     triangle_area(100, 20) == 900\nassert     triangle_area(100, 20) == 900\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(triangle_area(4,2)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert ",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert (triangle_area(3, 4) == 5)\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert triangle_area(3,4) == 5\nassert triangle_area(2,4) == 8\nassert triangle_area(1,4) == 4\nassert triangle_area(2,3) == 4\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(2,3) == 5\nassert     triangle_area(3,5) == 14\nassert     triangle_area(5,2) == 10",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 5\n    print(fib4(n))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfib4(1) == 0\nfib4(2) == 1\nfib4(3) == 0\nfib4(4) == 2\nfib4(5) == 1\nfib4(6) == 1\nfib4(7) == 2\nfib4(8) == 2\nfib4(9) == 2\nfib4(10) == 3\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nfib4(1) # 0\nfib4(2) # 1\nfib4(3) # 0\nfib4(4) # 2\nfib4(5) # 2\nfib4(6) # 4\nfib4(7) # 6\nfib4(8) # 8\nfib4(9) # 11\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(fib4(n))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fib4(10) == 46\nassert     fib4(100) == 233\nassert     fib4(200) == 12179\nassert     fib4(300) == 186863\nassert     fib4(400) == 217050\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(fib4(5)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median([1, 1, 2, 3, 4, 5, 7]) == 3\nassert     median([1, 1, 2, 3, 4, 5, 6]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7, 7]) == 5\nassert     median([2, 3, 4, 5, 6, 7, 7, 8]) == 6\n",
        "num_ids_2": 44,
        "num_ids_4": 90
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # median(range(5)) == 3\n    # median(range(10)) == 5\n    # median(range(11)) == 5.5\n    # median(range(20)) == 4.5\n    # median(range(21)) == 5\n    # median(range(22)) == 5.5\n    # median(range(25)) == 5.5\n    # median(range(26)) == 6\n    # median(range(27)) == 6.5\n    # median(range(28)) == 7\n    # median(range(29)) == 7.5\n    # median(range(30)) == 8\n    # median(range(31)) == 8.5\n    # median(range(32)) == 9\n    # median(range(33)) == 9.5\n    # median(range(34)) == 10\n    # median(range(35)) == 10.5\n    # median(range(36)) == 11\n    # median(range(37)) == 11.5\n    # median(range(38)) == 12\n    # median(range(39)) == 12.5\n    # median(range(40)) == 13\n    # median(range(41)) == 13.5\n    # median(range(42)) == 14\n    # median(range(43)) == 14.5\n    # median(range(44)) == 15\n    # median(range(45)) == 15.5\n    # median(range(46)) == 16\n    # median(range(47)) == 16.5\n    # median(range(48)) == 17\n    # median(range(49)) == 17.5\n    # median(range(50)) == 18\n    # median(range(51)) == 18.5\n    # median(range(52)) == 19\n    # median(range(53)) == 19.5\n    # median(range(54)) == 20\n    # median(range(55)) == 20.5\n    # median(range(56)) == 21\n    # median(range(57)) == 21.5\n    # median(range(58)) == 22\n    # median(range(59)) == 22.5\n    # median(range(60)) == 23\n    # median(range(61)) == 23.5\n    # median(range(62)) == 24\n    # median(range(63)) == 24.5\n    # median(range(64)) == 25\n    # median(range(65)) == 25.5\n    # median(range(66)) == 26\n    # median(range(67)) == 26.5\n    # median(range(68)) == 27\n    # median(range(69)) == 27.5\n    # median(range(70)) == 28\n    # median(range(71)) == 28.5\n    # median(range(72)) == 29\n    # median(range(73)) == 29.5\n    # median(range(74)) == 30\n    # median(range(75)) == 30.5\n    # median(range(76)) == 31\n    # median(range(77)) == 31.5\n    # median(range(78)) == 32\n    # median(range(79)) == 32.5\n    # median(range(80)) == 33\n    # median(range(81)) == 33.5\n    # median(range(82)) == 34\n    # median(range(83)) == 34.5\n    # median(range(84)) == 35\n    # median(range(85)) == 35.5\n    # median(range(86)) == 36\n    # median(range(87)) == 36.5\n    # median(range(88)) == 37\n    # median(range(89)) == 37.5\n    # median(range(90)) == 38\n    # median(range(91)) == 38.5\n    # median(range(92)) == 39\n    # median(range(93)) == 39.5\n    # median(range(94)) == 40\n    # median(range(95)) == 40.5\n    # median(range(96)) == 41\n    # median(range(97)) == 41.5\n    # median(range(98)) == 42\n    # median(range(99)) == 42.5\n    # median(range(100)) == 43\n\ndef median_slow(l: list):\n    \"\"\"Return median of elements in the list l.\n    \"\"\"\n    pass\n\ndef median_quick(l: list)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert _____(____) == _____(_____)\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef main():\n    \"\"\"Test function for median.\n    \"\"\"\n    l1 = list(range(1, 6))\n    l2 = list(range(10, 15))\n    print(\"Median of list1 is\", median(l1))\n    print(\"Median of list2 is\", median(l2))\n    print(\"Median of list1 and list2 is\", median(l1 + l2))\n\nif __name__ == \"__main__\":\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('\\n*** median_sort_check ***')\ndef median_sort_check(l: list) -> list:\n    \"\"\"Return a list of elements of l sorted in the ascending order of the median of l.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median([1, 2, 3, 4]) == 2\nassert     median([]) == None\nassert     median([1, 3, 4]) == 2\nassert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4, 5, 6]) == 3.5\n",
        "num_ids_2": 25,
        "num_ids_4": 57
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_palindrome(\"nurses run\") == True, \"Weird\"\nassert     is_palindrome(\"racecar\") == True, \"Weird\"\nassert     is_palindrome(\"a\") == False, \"Weird\"\nassert     is_palindrome(\"noon\") == False, \"Weird\"\n",
        "num_ids_2": 39,
        "num_ids_4": 75
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_palindrome('') == True, 'Blank string is not palindrome'\nassert     is_palindrome('a') == False, 'Single letter string is not palindrome'\nassert     is_palindrome('ab') == False, 'Two letters string is not palindrome'\nassert     is_palindrome('aba') == True, 'All letters string is palindrome'\nassert     is_palindrome('abcba') == True, 'All letters string is palindrome'\n",
        "num_ids_2": 48,
        "num_ids_4": 95
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert\nassert \nassert is_palindrome(test_string) == True\nassert is_palindrome(\"a\") == True\n",
        "num_ids_2": 5,
        "num_ids_4": 22
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_palindrome(\"abbabba\") == True, \"Should return True\"\nassert     is_palindrome(\"abca\") == False, \"Should return False\"\nassert     is_palindrome(\"abc\") == True, \"Should return True\"\nassert     is_palindrome(\"\") == True, \"Should return True\"\nassert     is_palindrome(\"a\") == False, \"Should return True\"\n",
        "num_ids_2": 40,
        "num_ids_4": 77
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_palindrome('madam') == False\nassert     is_palindrome('abba') == True\nassert     is_palindrome('aba') == True\nassert     is_palindrome('tenet') == True\nassert     is_palindrome('a') == True\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_palindrome(\"\") == True\nis_palindrome(\"a\") == False\nis_palindrome(\"ab\") == False\nis_palindrome(\"aba\") == True\nis_palindrome(\"aa\") == True\nis_palindrome(\"abb\") == False\nis_palindrome(\"abcdabcd\") == True\nis_palindrome(\"abcdabcdab\") == False\nis_palindrome(\"abcdabcdabcd\") == False\nis_palindrome(\"abcdabcdabcdabcd\") == Tru",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_palindrome('abab') == True\nassert is_palindrome('a') == False\nassert is_palindrome('ab') == False\nassert is_palindrome('abc') == False\n",
        "num_ids_2": 26,
        "num_ids_4": 50
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_palindrome(\"A man, a plan, a canal: Panama\") == True\nassert     is_palindrome(\"race a car\") == False\nassert     is_palindrome(\"race a car\") == False\nassert     is_palindrome(\"A man, a plan, a canal: Panama\") == True\n",
        "num_ids_2": 37,
        "num_ids_4": 74
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"modp tests passed.\")\n\ndef powm(x: int, y: int, p: int):\n    \"\"\"Return x^y mod p.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert modp(4, 5) == 4 and modp(6, 5) == 4\nassert modp(1, 3) == 3 and modp(3, 3) == 1\n",
        "num_ids_2": 24,
        "num_ids_4": 45
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef mod2(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    return \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef getprime(n: int, random = random, seed = 123):\n    \"\"\"Returns a prime p with 2^n < p < 2^(n+1)\n    \n    Note: this is the same algorithm as seed-random.c\n    \"\"\"\n    r = random(seed)\n    while 1:\n        a = next(r)\n        if modp(n, a): break\n    return a\n\ndef isprime(n: int):\n    \"\"\"Return whether n is prime\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for d in range(2, int(n**0.5) + 1):\n            if n % d == 0:\n                return False\n        return True\n\ndef long_to_int(s: str) -> int:\n    \"\"\"Convert a long string to an integer\n    \"\"\"\n    return int(s[:], 16)\n\ndef hex_to_long(s: str) -> int:\n    \"\"\"Convert a hex string to an integer\n    \"\"\"\n    if isinstance(s, str):\n        return long_to_int(s)\n    else:\n        return s\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (modp(0, 5) == 0)\nassert     (modp(2, 5) == 1)\nassert     (modp(3, 5) == 1)\nassert     (modp(4, 5) == 1)\nassert     (modp(5, 5) == 0)\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     encode_shift(\"A\") == \"B\"\nassert     encode_shift(\"ABA\") == \"CAB\"\nassert     encode_shift(\"CAB\") == \"ABA\"\nassert     encode_shift(\"CABD\") == \"ABA\"\nassert     encode_shift(\"ABC\") == \"BAC\"\n",
        "num_ids_2": 30,
        "num_ids_4": 63
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(decode_shift(\"uvjuywq\"))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(decode_shift(encode_shift(\"HELLO\")))\nprint(decode_shift(encode_shift(\"CODE\")))\n\nif __name__ == \"__main__\":\n    # test your function\n    run_test()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    s = \"Oebke\"\n    print(encode_shift(s))\n    print(decode_shift(encode_shift(s)))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decode_shift(encode_shift(\"the quick brown fox jumps over the lazy dog\")) == \"the quick brown fox jumps over the lazy dog\"\nassert     decode_shift(encode_shift(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")) == \"abcdefghijklmnopqrstuvwxyz\"\n\n",
        "num_ids_2": 92,
        "num_ids_4": 92
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decode_shift(\"abcd\") == \"abcde\"\nassert decode_shift(\"abcde\") == \"abcd\"\nassert decode_shift(\"gfhjk\") == \"gfhijk\"\n\n\n\n\n",
        "num_ids_2": 30,
        "num_ids_4": 49
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encode_shift(\"hello\") == \"jgnnq\"\nassert     encode_shift(\"aaaa\") == \"bbaa\"\nassert     encode_shift(\"sunday\") == \"lso\"\nassert     encode_shift(\"mon\") == \"mon\"\nassert     encode_shift(\"elvis\") == \"kxngy\"\n",
        "num_ids_2": 33,
        "num_ids_4": 64
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decode_shift(\"o\") == \"o\"\nassert     decode_shift(\"y\") == \"y\"\nassert     decode_shift(\"z\") == \"z\"\nassert     decode_shift(\"c\") == \"c\"\nassert     decode_shift(\"w\") == \"w\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_vowels('he') == 'h', \"remove_vowels(he) should return h\"\nassert     remove_vowels('H') == 'H', \"remove_vowels(H) should return H\"\nassert     remove_vowels('she') =='sh', \"remove_vowels(she) should return sh\"\nassert     remove_vowels('HE') == 'H', \"remove_vowels(HE) should return H\"\nassert     remove_vowels('she') =='sh', \"remove_vowels(she) should return sh\"\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_vowels('my') =='my', 'failed'\nassert     remove_vowels('My') == 'M', 'failed'\nassert     remove_vowels('the') == 'th', 'failed'\nassert     remove_vowels('ThE') == 'T', 'failed'\nassert     remove_vowels('Be') == 'B', 'failed'\n",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_vowels('Hello') == 'hll'\nassert     remove_vowels('Pluto') == 'Plut'\nassert     remove_vowels('Hola') == 'Hll'\nassert     remove_vowels('HeLlO') == 'HllO'\nassert     remove_vowels('Hello world!') == 'Hllowrd'\n",
        "num_ids_2": 33,
        "num_ids_4": 70
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_vowels('apple') == \"ppl\"\nassert     remove_vowels('banana') == \"bnna\"\nassert     remove_vowels('purple') == \"pll\"\nassert     remove_vowels('pink') == \"pk\"\nassert     remove_vowels('grape') == \"gra\"\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_vowels('hello') == 'hll'\nassert     remove_vowels('world') == 'wrld'\nassert     remove_vowels('yey') == 'ye'\nprint(\"Everything passed\")\n\n\n\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_vowels(\"Hello, Python\") == \"hll, Pthon\"\nassert     remove_vowels(\"HELLO, PYTHON\") == \"Hll, PYtn\"\nassert     remove_vowels(\"LOL, LOL\") == \"l, L\"\nassert     remove_vowels(\"Beware, BAWRAR\") == \"Bpr, BAWR\"\nassert     remove_vowels(\"LOL, LOL\") == \"l, L\"\n",
        "num_ids_2": 49,
        "num_ids_4": 95
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert remove_vowels(\"hello world\") == \"hllwrld\"\nassert remove_vowels(\"HELLO WORLD\") == \"Hllwrld\"\nassert remove_vowels(\"HELLO WORLD\") == \"Hllwrld\"\nassert remove_vowels(\"HELLO WORLD\") == \"Hllwrld\"\n",
        "num_ids_2": 21,
        "num_ids_4": 61
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     below_threshold([], 0) == False\nassert     below_threshold([], 1) == False\nassert     below_threshold([1], 0) == False\nassert     below_threshold([1,1], 0) == True\nassert     below_threshold([1,2], 0) == True\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     below_threshold([3,5,6,8,12], 8) == True\nassert     below_threshold([3,5,6,8,12], 10) == False\nassert     below_threshold([1,3,5,6], 4) == False\n",
        "num_ids_2": 44,
        "num_ids_4": 64
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     below_threshold(\n[1, 2, 3, 4, 5],    0) == False\nassert     below_threshold(\n[-1, -2, -3, -4, -5],    0) == True\nassert     below_threshold(\n[-10, -9, -8, -7, -6],    5) == True\nassert     below_threshold(\n[-1, -2, -3, -4, -5],    4) == False\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    below_threshold([], 1) == False\n    below_threshold([1,2,3], 0) == True\n    below_threshold([1,2,3], 1) == True\n    below_threshold([4,5,6,7], 10) == False\n    below_threshold([0,1,2,3,4,5], 10) == False\n    below_threshold([0,1,2,3,4,5], 0) == True\n    below_threshold([1,2,3,4,5], -10) == True\n    below_threshold([1,2,3,4,5], 10) == False\n    below_threshold([1,2,3,4,5], 6) == True\n    below_threshold([1,2,3,4,5], 5) == True\n    below_threshold([1,2,3,4,5], 1) == True\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     below_threshold([1, 2, 3, 4], 1)\nassert     not below_threshold([1, 2, 3, 4], 0)\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nbelow_threshold([1, 2, 3, 4], 5)\nassert below_threshold([10, 5, 1, 2, 3, 5], 4) == False\nassert below_threshold([4, 4, 4, 5, 4, 4], 4) == False\nassert below_threshold([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6) == True\nassert below_threshold([4, 5, 4, 5, 6, 4, 5, 6, 4, 5], 4) == True\n",
        "num_ids_2": 26,
        "num_ids_4": 82
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add(2, 3) == 5\nassert     add(1,2) == 3\nassert     add(1,1) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nadd(1,2) == 3\nadd(0,2) == 2\nadd(-1,2) == 1\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add(2, 3) == 5\nassert     add(5, 3) == 8\nassert     add(10, 7) == 13",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    assert add(1, 1) == 2\n    assert add(1, 2) == 3\n    assert add(3, 4) == 7",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef divide(x, y):\n    \"\"\"Divide number x by number y\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add(1, 2) == 3\nassert     add(1, 3) == 4\nassert     add(1, 1) == 2\nassert     add(1, -1) == 0\nassert     add(-1, 1) == -2\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"6)\")\ndef sum_of_numbers(arr: list):\n    \"\"\"Return sum of all numbers\n    \"\"\"\n    pass\n\nassert sum_of_numbers([1,2,3]) == 6\n\nprint(\"7)\")\ndef is_word_in_array(word: str, arr: list):\n    \"\"\"Check if word is in arr\n    \"\"\"\n    pass\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    add(1, 2) == 3\nassert \n    add(1, 0) == 1\nassert \n    add(100, 10) == 110\nassert \n    add(3, 3) == 6\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert add(1, 3) == 4, \"The output is not correct.\"\nassert add(-1, 3) == -2, \"The output is not correct.\"",
        "num_ids_2": 21,
        "num_ids_4": 40
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     same_chars(\"ab\", \"ab\")\nassert     same_chars(\"ab\", \"ab\")\nassert     same_chars(\"ab\", \"ba\")\nassert not same_chars(\"ab\", \"c\")\nassert not same_chars(\"ab\", \"ca\")\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     same_chars('abcd', 'abcd') == True\nassert     same_chars('abc', 'abcd') == False\nassert     same_chars('a', 'a') == True\nassert     same_chars('a', 'b') == False\nassert     same_chars('ab', 'bc') == True\n",
        "num_ids_2": 33,
        "num_ids_4": 63
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     same_chars(\"hi\", \"hi\") == True\nassert     same_chars(\"hi\", \"bye\") == False\nassert     same_chars(\"hello\", \"hello\") == True\nassert     same_chars(\"hello\", \"hello\") == True\nassert     same_chars(\"hello\", \"hello hello\") == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     same_chars(\"ab\", \"ab\") == True\nassert     same_chars(\"ab\", \"ba\") == False\nassert     same_chars(\"abba\", \"abcd\") == False\nassert     same_chars(\"abcd\", \"abcd\") == True\nassert     same_chars(\"ab\", \"abcd\") == False\n",
        "num_ids_2": 30,
        "num_ids_4": 63
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     same_chars('hello', 'hello') == True\nassert     same_chars('hello', 'ello') == False\nassert     same_chars('hello', 'helll') == False\nassert     same_chars('', '') == True\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert         same_chars('cat', 'cat')\nassert         not same_chars('cat', 'dog')\nassert         not same_chars('cat', 'catc')\nassert         same_chars('cat', 'catg')\nassert         same_chars('', '')\n",
        "num_ids_2": 27,
        "num_ids_4": 56
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nfib(10) == 55\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fib(1) == 0\nassert     fib(2) == 1\nassert     fib(3) == 1\nassert     fib(4) == 2\nassert     fib(5) == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fib(1) == 0\nassert     fib(2) == 1\nassert     fib(3) == 1\nassert     fib(4) == 2\nassert     fib(5) == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<\") == False, \"Should be False\"\nassert     correct_bracketing(\"<>\") == False, \"Should be False\"\nassert     correct_bracketing(\"<(>)\") == False, \"Should be False\"\nassert     correct_bracketing(\"<</><\") == False, \"Should be False\"\nassert     correct_bracketing(\"<(>)\") == False, \"Should be False\"\n",
        "num_ids_2": 39,
        "num_ids_4": 81
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<(>)\")\nassert     not correct_bracketing(\"<()\")\nassert     correct_bracketing(\"<{[()]}>\")\nassert     correct_bracketing(\"<{[]]}>\")\nassert     not correct_bracketing(\"<{[{[]]}>\")\n",
        "num_ids_2": 26,
        "num_ids_4": 58
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"<{[()]>\") == False\nassert     correct_bracketing(\"<{[()])>\") == False\nassert     correct_bracketing(\"<()>\") == False\nassert     correct_bracketing(\"<]>\") == False\n",
        "num_ids_2": 33,
        "num_ids_4": 66
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"<\") == True, \"The first opening bracket does not match its corresponding closing bracket\"\nassert     correct_bracketing(\"<>\") == True, \"The last closing bracket does not match its corresponding opening bracket\"\nassert     correct_bracketing(\"<])\") == False, \"The closing bracket is not properly matching the corresponding opening bracket\"\nassert     correct_bracketing(\"(>\") == False, \"The opening bracket is not properly matching its corresponding closing bracket\"\n",
        "num_ids_2": 55,
        "num_ids_4": 111
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"<()><(>)\") == False\nassert     correct_bracketing(\"<(><)>)\") == True\nassert     correct_bracketing(\"<(><)>\") == False\nassert     correct_bracketing(\"<(><)()>\") == False\nassert     correct_bracketing(\"<(><)()>\") == False\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing('<')\nassert     correct_bracketing('<</>')\nassert     correct_bracketing('<</<')\nassert     correct_bracketing('<</<<')\nassert     correct_bracketing('<</><<>')\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"<\") == True, \"first\"\nassert     correct_bracketing(\"<</>\") == True, \"second\"\nassert     correct_bracketing(\"<{}>\") == False, \"third\"\nassert     correct_bracketing(\"<[]><{}>\") == False, \"fourth\"\nassert     correct_bracketing(\"<{}><[]><{}>\") == False, \"fifth\"\n",
        "num_ids_2": 36,
        "num_ids_4": 78
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"(<(()())><()()>)\") == False, \\\n\"incorrect result\"\nassert     correct_bracketing(\"(<(()())><()()>)\") == True, \\\n\"incorrect result\"\nassert     correct_bracketing(\"(<((())>)><((())))\") == True, \\\n\"incorrect result\"\nassert     correct_bracketing(\"(<((())>)><((())))\") == False, \\\n\"incorrect result\"\nassert     correct_bracketing(\"(((())()))\") == False, \\\n\"incorrect result\"\nprint(\"All tests passed!\")",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<()><(>)<{}>\") == True, \"Test Failed\"\nassert     correct_bracketing(\"<(><\") == False, \"Test Failed\"\n\ndef my_open_bracket_generator(brackets: str):\n    \"\"\" \n    brackets is a string of \"<\" and \">\".\n    generator function that yields the indices of the opening brackets\n    (so the first index of the opening bracket in brackets).\n    If not bracket string, yield -1.\n\n    generator_function that yields the indices of the closing brackets\n    (so the last index of the closing bracket in brackets).\n    If not bracket string, yield -1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing('<') == False,    \"first string: '<'\"\nassert     correct_bracketing('<') == False,    \"second string: '<'\\n\"\nassert     correct_bracketing('<') == False,    \"third string: '<'\\n\"\nassert     correct_bracketing('<') == False,    \"fourth string: '<'\\n\"\nassert     correct_bracketing('<') == False,    \"fifth string: '<'\\n\"\n",
        "num_ids_2": 47,
        "num_ids_4": 97
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     monotonic([1,2,3,4]) == False, \"Wrong test\"\nassert     monotonic([1,2,3,3]) == True, \"Wrong test\"\nassert     monotonic([1,2,3,4,4]) == True, \"Wrong test\"\nassert     monotonic([1,2,3,4,3]) == False, \"Wrong test\"\nassert     monotonic([1,2,3,4,1]) == False, \"Wrong test\"\n",
        "num_ids_2": 46,
        "num_ids_4": 96
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"All tests passed\")\nprint(\"{} is monotonic\".format(monotonic([1, 2, 3, 4, 5])))\nprint(\"{} is monotonic\".format(monotonic([1, 2, 3, 4, 3])))\nprint(\"{} is monotonic\".format(monotonic([1, 2, 4, 3, 2])))\nprint(\"{} is monotonic\".format(monotonic([2, 1, 3, 2, 1])))\nprint(\"{} is monotonic\".format(monotonic([2, 1, 3, 1, 2])))\nprint(\"{} is monotonic\".format(monotonic([2, 1, 3, 1, 2, 0])))\nprint(\"{} is monotonic\".format(monotonic([-2, -1, -3, -2, -1])))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     monotonic(['', 'a', 'b', 'c'])\nassert     monotonic(['a', 'a', 'b', 'c'])\nassert     monotonic(['b', 'a', 'b', 'c'])\nassert     monotonic(['c', 'b', 'a', 'c'])\nassert     monotonic(['b', 'a', 'b', 'c', 'd', 'c'])\n",
        "num_ids_2": 39,
        "num_ids_4": 79
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     monotonic([1, 2, 4, 5])     == False\nassert     monotonic([1, 3, 4, 5])     == True\nassert     monotonic([1, 2, 3, 4])     == False\nassert     monotonic([1, 2, 3, 2, 1]) == True\nassert     monotonic([1, 2, 4, 5, 2, 1]) == False",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     monotonic([1,2,3,4,5])\nassert     monotonic([1,2,3,4,5,6,7,8])\nassert     monotonic([1,1,1,1,1])\nassert     monotonic([-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9])\n",
        "num_ids_2": 40,
        "num_ids_4": 105
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(monotonic([-1, 1, 3, -3, 5]))\nassert not monotonic([-1, 1, 2, 3, 5])\nassert monotonic([-1, 3, 2, 1])\n",
        "num_ids_2": 21,
        "num_ids_4": 36
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert monotonic([-1, -2, -3, -4, -5]) == False\nassert monotonic([-1, -2, -3, -4, -5, -6]) == True\nassert monotonic([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == False\n",
        "num_ids_2": 26,
        "num_ids_4": 87
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    test()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert         monotonic([1,2,3,4]) == True\nassert         monotonic([1,2,3,4,3]) == False\nassert         monotonic([1,2,3,4,2]) == False\n",
        "num_ids_2": 36,
        "num_ids_4": 55
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common([1,2,3,4], [4,5,6,7]) == [4,5,6,7], \"wrong\"\nassert     common([2,4,6,8], [2,4,6,8]) == [2,4,6], \"wrong\"\nassert     common([2,4,6,8], [2,4,6,7]) == [2,4,6], \"wrong\"\nassert     common([2,4,6,8], [2,4,5,7]) == [2,4], \"wrong\"\nassert     common([2,4,5,7], [2,4,6,7]) == [2,4], \"wrong\"\n",
        "num_ids_2": 68,
        "num_ids_4": 132
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common([], []) == []\nassert common([], [1]) == []\nassert common([1], [1]) == []\nassert common([1, 1], [1, 1]) == [1]\nassert common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n",
        "num_ids_2": 20,
        "num_ids_4": 48
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common([1, 2, 3], [1, 2, 4]) == []\nassert common([1, 2, 3], [1, 2, 4, 5]) == [2, 3]\nassert common([1, 2, 3], [1, 2, 4, 5, 6]) == [2, 3]\nassert common([1, 2, 3], [1, 2, 4, 5, 6, 7]) == [2, 3]\nassert common([1, 2, 3], [1, 2, 4, 5, 6, 7, 8]) == [2, 3]\n",
        "num_ids_2": 45,
        "num_ids_4": 101
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common([1, 2, 3], [2, 4, 5, 6, 2]) == [2, 4, 5, 6], \"Correct\"\nassert common([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3], \"Correct\"\nassert common([1, 2, 3], [1, 2, 3, 4, 3, 4]) == [1, 2, 3], \"Correct\"\n\nassert     common([1, 2, 3], [2, 4, 6, 8, 2]) == [2, 4, 6, 8, 2], \"Correct\"\n",
        "num_ids_2": 65,
        "num_ids_4": 136
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nl1 = ['a', 'b', 'c']\nl2 = ['b', 'c', 'd']\n\nprint(common(l1, l2))\n\nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common([1, 3, 4], [1, 2, 3]) == [1, 2, 3], 'Test 1'\nassert     common([1, 3, 4], [1, 3, 4]) == [1, 3, 4], 'Test 2'\nassert     common([1, 2, 3], [1, 3, 4]) == [1, 2, 3], 'Test 3'\nassert     common([1, 2, 3], [1, 4, 5]) == [], 'Test 4'\n",
        "num_ids_2": 60,
        "num_ids_4": 115
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    assert common([1, 2, 3], [1, 2, 3]) == sorted(common(l1=[1, 2, 3], l2=[1, 2, 3]))\n    assert common(l1=[1, 2, 2], l2=[2, 1]) == sorted(common(l1=[1, 2, 2], l2=[2, 1]))\n    assert common(l1=[1, 2, 3], l2=[1, 1]) == sorted(common(l1=[1, 2, 3], l2=[1, 1]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common([1, 2], [1, 2]) == [1, 2]\nassert     common([1, 2], [2, 3]) == []\nassert     common([], [1, 2]) == []\nassert     common([], []) == []\nassert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n",
        "num_ids_2": 36,
        "num_ids_4": 59
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common([], []) == []\nassert     common([2, 3], [1, 2, 4, 5]) == [1, 2]\nassert     common([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 3]\nassert     common([1, 2, 3, 4], [1, 2]) == []\nassert     common([1, 2, 3, 4], [1, 2, 3]) == [1, 2]\n",
        "num_ids_2": 34,
        "num_ids_4": 84
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(5) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(17) == 17\nassert     largest_prime_factor(19) == 19\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert largest_prime_factor(8) == 2\nassert largest_prime_factor(9) == 3\nassert largest_prime_factor(10) == 5\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(10) == 5\nassert     largest_prime_factor(3*5*7*11) == 11\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(100) == 10\n",
        "num_ids_2": 26,
        "num_ids_4": 58
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(12) == 3\nassert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(15) == 3\nassert     largest_prime_factor(10) == 5\n\nprint(\"Success!\")",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_prime_factor(6) == 3\nassert     largest_prime_factor(7) == 2\nassert     largest_prime_factor(64) == 2\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert largest_prime_factor(1) == None\nassert largest_prime_factor(2) == 2\nassert largest_prime_factor(6) == 3\nassert largest_prime_factor(10) == 2\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(6) == 6\nassert     largest_prime_factor(9) == 3\nassert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(100) == 10\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(largest_prime_factor(10))\nprint(largest_prime_factor(12))\nprint(largest_prime_factor(13))\nprint(largest_prime_factor(27))\nprint(largest_prime_factor(100))\n\n\ndef check_factors(n):\n    \"\"\"Return a list of the factors of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    pass\n\ndef factors(n):\n    \"\"\"Return a list of the factors of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    pass\n\nassert check_factors(10) == [1,2,5,10]\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 2\nassert     sum_to_n(4) == 10\nassert     sum_to_n(10) == 55\n\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_to_n(2) == 3, \"Failed to add 1 and 2. sum_to_n(2) == 3\"\nassert     sum_to_n(3) == 6, \"Failed to add 1 and 2. sum_to_n(3) == 6\"\nassert     sum_to_n(4) == 10, \"Failed to add 1 and 2. sum_to_n(4) == 10\"\nassert     sum_to_n(5) == 15, \"Failed to add 1 and 2. sum_to_n(5) == 15\"\n",
        "num_ids_2": 68,
        "num_ids_4": 136
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(4) == 5\nassert     sum_to_n(100) == 5050\nassert     sum_to_n(150) == 12000\nassert     sum_to_n(2) == 2\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef get_factors(n: int):\n    \"\"\"get_factors is a function that finds all factors of an integer n.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(10) == 55\nassert     sum_to_n(100) == 385\nassert     sum_to_n(1000) == 126950\n\nprint(\"You've successfully passed this unit's tests!\")",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_to_n(1) == 1\nassert sum_to_n(5) == sum_to_n(1) + sum_to_n(2) + sum_to_n(3) + sum_to_n(4) + sum_to_n(5)\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(\"Exercise 1: Ok\")\nprint(\"-----------\")\n\nprint(\"Exercise 2: Ok\")\nprint(\"-----------\")\n\nprint(\"Exercise 3: Ok\")\nprint(\"-----------\")\n\nprint(\"Exercise 4: Ok\")\nprint(\"-----------\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(])\") == False\nassert     correct_bracketing(\"())(\") == False\n\ndef is_balanced(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if brackets is balanced (a matching set of brackets),\n    otherwise False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 27,
        "num_ids_4": 41
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert correct_bracketing(\"((((((()))))\") == True\nassert correct_bracketing(\"((((((())))))\") == False\nassert correct_bracketing(\"(((((((())\nassert correct_bracketing(\"))))))\") == False\n",
        "num_ids_2": 19,
        "num_ids_4": 49
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"(a)b(c)(d)\") == True\nassert     correct_bracketing(\"(a)b(c(d))\") == True\nassert     correct_bracketing(\"(a)(b)(c(d))\") == True\nassert     correct_bracketing(\"(a)b(c)\") == False\nassert     correct_bracketing(\"(a)b(c(d))(e\") == False\n",
        "num_ids_2": 42,
        "num_ids_4": 82
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not correct_bracketing(\"()\")\nassert correct_bracketing(\"(())\")\nassert correct_bracketing(\"((()))\")\nassert not correct_bracketing(\"(()\"))\n",
        "num_ids_2": 14,
        "num_ids_4": 37
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     correct_bracketing('()') == True\nassert     correct_bracketing('(()') == False\nassert     correct_bracketing(')') == False\nassert     correct_bracketing('(') == False\nassert     correct_bracketing('))') == False\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"()\") == False\nassert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"(()()(())\") == False\nassert     correct_bracketing(\"(()(()))\") == False\nassert     correct_bracketing(\"(()())\") == True\n",
        "num_ids_2": 27,
        "num_ids_4": 61
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not correct_bracketing(\"()\")\nassert correct_bracketing(\"()\")\nassert correct_bracketing(\"(())\")\nassert correct_bracketing(\"((()))\")\n",
        "num_ids_2": 14,
        "num_ids_4": 35
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"()\") == True,    \"(')')\"\nassert     correct_bracketing(\"()\") == True,    \"('))\")\nassert     correct_bracketing(\"(a)\") == False,    \"(a))\"\nassert     correct_bracketing(\"((a))\") == True,    \"((a)))\"\nassert     correct_bracketing(\"(a)\") == True,    \"(a))\"\n",
        "num_ids_2": 39,
        "num_ids_4": 82
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert correct_bracketing(\"())\") == True\nassert correct_bracketing(\"(((()\") == False\nassert correct_bracketing(\"((()\") == False\nassert correct_bracketing(\"(((()))\") == True\n",
        "num_ids_2": 15,
        "num_ids_4": 42
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     derivative([2, 1, 2]) == [[1, 2], [2, 1]]\nassert     derivative([2, 1, 2, 3]) == [[1, 2, 1], [2, 1, 2, 1]]\nassert     derivative([2, 1, 2, 3, 4]) == [[1, 2, 1, 1], [2, 1, 2, 1, 1], [2, 1, 2, 1, 2]]\nassert     derivative([2, 1, 2, 3, 4, 5]) == [[1, 2, 1, 1, 1], [2, 1, 2, 1, 1, 1], [2, 1, 2, 1, 2, 1],\n                                                [2, 1, 2, 1, 2, 2], [2, 1, 2, 1, 2, 3], [2, 1, 2, 1, 2, 4]]\n\ndef second_derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    return second derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n",
        "num_ids_2": 56,
        "num_ids_4": 162
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     derivative([1,2,3]) ==    [1,2,3]\nassert     derivative([-1,2,3]) ==    [-1,2,3]\nassert     derivative([-1,2,3,4]) ==    [-1,2,3,4]\nassert     derivative([1,-2,3,4]) ==    [1,0,3,0]\nassert     derivative([-1,-2,3,4]) ==    [-1,0,3,0]\n",
        "num_ids_2": 46,
        "num_ids_4": 100
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert derivative([3, 4, 5]) == [6, 12, 20]\nassert derivative([0, 2, 2]) == [2, 4, 4]\n\nassert derivative([0, 2, 0]) == [2, 0, 0]\n",
        "num_ids_2": 21,
        "num_ids_4": 57
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert derivative([1, 2, 3]) == 2\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fibfib(0) == 0, \"fibfib(0) is wrong\"\nassert     fibfib(1) == 0, \"fibfib(1) is wrong\"\nassert     fibfib(2) == 1, \"fibfib(2) is wrong\"\nassert     fibfib(3) == 2, \"fibfib(3) is wrong\"\nassert     fibfib(4) == 3, \"fibfib(4) is wrong\"\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    print(\"The fibfib of 5th element is: {}\".format(fibfib(5)))\n    print(\"The fibfib of 10th element is: {}\".format(fibfib(10)))\n    print(\"The fibfib of 16th element is: {}\".format(fibfib(16)))\n    print(\"The fibfib of 25th element is: {}\".format(fibfib(25)))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fibfib(10) == 34\nassert     fibfib(20) == 6765\nassert     fibfib(30) == 1446400\n",
        "num_ids_2": 25,
        "num_ids_4": 39
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(5) == 5\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = int(input())\n    fibfib(n)\n    print(fibfib(n))\n    \n    \n    \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"[TEST 1]\")\n    print(vowels_count(\"This is test\"))\n    print(FIX)\n    print()\n\n    print(\"[TEST 2]\")\n    print(vowels_count(\"testing\"))\n    print(FIX)\n    print()\n\n    print(\"[TEST 3]\")\n    print(vowels_count(\"testing\"))\n    print(FIX)\n    print()\n\n    print(\"[TEST 4]\")\n    print(vowels_count(\"testing\"))\n    print(FIX)\n    print()\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     vowels_count('a') == 1\nassert     vowels_count('e') == 1\nassert     vowels_count('i') == 1\nassert     vowels_count('o') == 1\nassert     vowels_count('u') == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(FIX)\n\nprint(\"Input: {}, Output: {}\".format(WORD, vowels_count(WORD)))\nprint(\"Input: {}, Output: {}\".format(WORD2, vowels_count(WORD2)))\nprint(\"Input: {}, Output: {}\".format(WORD3, vowels_count(WORD3)))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(vowels_count(\"abba\"))\nprint(vowels_count(\"kayak\"))\nprint(vowels_count(\"coding\"))\nprint(vowels_count(\"code\"))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     vowels_count('') == 0\nassert     vowels_count('a') == 1\nassert     vowels_count('abc') == 1\nassert     vowels_count('abcdef') == 1\nassert     vowels_count('abcdefg') == 0\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     circular_shift(234, 1) == '2341'\nassert     circular_shift(123, 0) == '123'\nassert     circular_shift(234, -1) == '432'\nassert     circular_shift(1, 10) == '1231'\n\nprint('Testing problem 3.2')\ndef exp_gen(n):\n    \"\"\"Return a generator for generating exponentiate n times\"\"\"\n    pass\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     circular_shift(5, 1) == \"5\"\nassert     circular_shift(5, 2) == \"3\"\nassert     circular_shift(5, 3) == \"2\"\nassert     circular_shift(5, 4) == \"1\"\nassert     circular_shift(5, 5) == \"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef test_circular_shift():\n    assert circular_shift('12345', 1) == '12345'\n    assert circular_shift('12345', 0) == '12345'\n    assert circular_shift('12345', -1) == '54321'\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(circular_shift(12345, 7), '123401')\nprint(circular_shift(1234, 12), '2434')\nprint(circular_shift(1234, 10), '2344')\nprint(circular_shift(1234, 14), '4321')\nprint(circular_shift(12345, -7), '5432')\nprint(circular_shift(12345, -10), '5345')\nprint(circular_shift(12345, -14), '5432')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef gcd(a, b):\n    \"\"\"Return the Greatest Common Divisor of a and b\"\"\"\n    pass\n\ndef lcm(a, b):\n    \"\"\"Return the least Common Multiple of a and b\"\"\"\n    pass\n\ndef is_prime(n):\n    \"\"\"Return True if n is prime and False otherwise\"\"\"\n    pass\n\ndef is_square(n):\n    \"\"\"Return True if n is a perfect square and False otherwise\"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     circular_shift(str(123456789), 2) == \"789123456\"\nassert     circular_shift(str(123456789), 3) == \"123456789\"\nassert     circular_shift(str(123456789), -3) == \"789123456\"\nassert     circular_shift(str(123456789), -2) == \"123456789\"\nassert     circular_shift(str(123456789), -1) == \"123456789\"\n",
        "num_ids_2": 47,
        "num_ids_4": 96
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digitSum(\"asdfghjklzxcvbnm\") == 26\nassert     digitSum(\"muzi\") == 9\nassert     digitSum(\"qwertyuiop\") == 36\nassert     digitSum(\"\") == 0\nassert     digitSum(\"asdfghjklzxcvbnm123456789\") == 61\n",
        "num_ids_2": 31,
        "num_ids_4": 54
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digitSum(\"\") == 0, \"Expected 0\"\nassert     digitSum(\"A\") == 1, \"Expected 1\"\nassert     digitSum(\"B\") == 2, \"Expected 2\"\nassert     digitSum(\"C\") == 3, \"Expected 3\"\nassert     digitSum(\"D\") == 4, \"Expected 4\"\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digitSum(\"abc\") == 0\nassert     digitSum(\"abcde\") == 5\nassert     digitSum(\"helloworld\") == 17",
        "num_ids_2": 21,
        "num_ids_4": 33
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digitSum(\"EE123A\") == 5\nassert     digitSum(\"Dj_E123\") == 4\n\ndef digits(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns True if it consists only of digits and \n    False otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndigitSum(\"Hello World!\") == \"17\"\nassert digitSum(\"1234567890\") == \"45\"\nassert digitSum(\"H\") == \"9\"\nassert digitSum(\"1234567890h\") == \"45\"\n",
        "num_ids_2": 17,
        "num_ids_4": 43
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digitSum('abc123') == 9\nassert     digitSum('abc456') == 9\nassert     digitSum('abc789') == 9\nassert     digitSum('ABC789') == 9\nassert     digitSum('') == 0\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    pass\n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert digitSum('bcdg') == 1\nassert digitSum('ABC') == 6\nassert digitSum('abc') == 4\n\n\"\"\"Task\nWrite a function that takes a string as input and returns True if the string contains only digits.\n\"\"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert digitSum('cat') == 3\nassert digitSum('cat') == 3\nassert digitSum('cat') == 5\n\nprint(\"All tests passed\"",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nfruit_distribution(\"2\",2) == 2\nprint('done'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfruit_distribution('5',5)==5\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fruit_distribution(\"13\",3) == 1\nassert fruit_distribution(\"100\",2) == 2\nassert fruit_distribution(\"0\",0) == 0\nassert fruit_distribution(\"100\",1) == 0\nassert fruit_distribution(\"23\",1) == 1\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fruit_distribution(\"1\", 0) == 0\nassert     fruit_distribution(\"1\", 1) == 0\nassert     fruit_distribution(\"3\", 1) == 1\nassert     fruit_distribution(\"10\", 1) == 3\nassert     fruit_distribution(\"1\", 2) == 0\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fruit_distribution(\"7\", 10) == 5, 'Wrong fruit_distribution: {}'.format(fruit_distribution(\"7\", 10))\nassert     fruit_distribution(\"13\", 10) == 6, 'Wrong fruit_distribution: {}'.format(fruit_distribution(\"13\", 10))\nassert     fruit_distribution(\"11\", 10) == 5, 'Wrong fruit_distribution: {}'.format(fruit_distribution(\"11\", 10))\nassert     fruit_distribution(\"11\", 5) == 5, 'Wrong fruit_distribution: {}'.format(fruit_distribution(\"11\", 5))\nassert     fruit_distribution(\"12\", 10) == 5, 'Wrong fruit_distribution: {}'.format(fruit_distribution(\"12\", 10))\n",
        "num_ids_2": 72,
        "num_ids_4": 144
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fruit_distribution('12', '12') == '1'\nassert     fruit_distribution('13', '14') == '0'\nassert     fruit_distribution('13', '34') == '0'\nassert     fruit_distribution('13', '13') == '1'\nassert     fruit_distribution('12', '34') == '0'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nfruit_distribution(\"1\",1) == \"1\"\nfruit_distribution(\"1,2\",1) == \"1\"\nfruit_distribution(\"1,2,1\",1) == \"1\"\nfruit_distribution(\"1,1,1,1,2,1,1,1,1,1,1\",1) == \"2\"\nfruit_distribution(\"1,1,1,1,1,2,2,2,2,2,2,2,2,2\",2) == \"3\"\nfruit_distribution(\"1,1,1,1,1,1,1,2,2,2,2,2,2,2\",5) == \"0\"\nfruit_distribution(\"1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fruit_distribution(\"0\",0)    == 0, \"Wrong answer with input: {0}\"\nassert     fruit_distribution(\"2\",2)    == 2, \"Wrong answer with input: {0}\"\nassert     fruit_distribution(\"2\",4)    == 1, \"Wrong answer with input: {0}\"\nassert     fruit_distribution(\"2\",3)    == 2, \"Wrong answer with input: {0}\"\nassert     fruit_distribution(\"1\",1)    == 1, \"Wrong answer with input: {0}\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fruit_distribution('3',2) == 0, \"For number of apples: 3, number of oranges: 2, return value should be 0\"\nassert     fruit_distribution('2',2) == 2, \"For number of apples: 2, number of oranges: 2, return value should be 2\"\nassert     fruit_distribution('1',2) == 1, \"For number of apples: 1, number of oranges: 2, return value should be 1\"\n\nprint (\"\\nThe code is working correctly!\")\nprint (\"\\nLet's check the fruits in a basket of\", s, \"apples and\", n, \"oranges.\")\nprint (\"We have:\", s, \"apples and\", n, \"oranges in this basket\")\nprint (\"There are\", fruit_distribution(s,n), \"mangoes in the basket\"",
        "num_ids_2": 70,
        "num_ids_4": 105
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pluck([1, 2, 4]) == [2, 1], \"Should return: [2, 1]\"\nassert     pluck([0]) == [], \"Should return: []\"\nassert     pluck([1, 2, 4, 7, 10, 12, 14, 15, 18]) == [2, 1], \"Should return: [2, 1]\"\nassert     pluck([7, 1, 4, 9, 6, 2]) == [4, 0], \"Should return: [4, 0]\"\n",
        "num_ids_2": 44,
        "num_ids_4": 116
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pluck([3,1,2]) == [2,1]\nassert     pluck([1]) == [1]\nassert     pluck([]) == []\nassert     pluck([1,1,2]) == [1]\nassert     pluck([1,2]) == [1]\n",
        "num_ids_2": 30,
        "num_ids_4": 55
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pluck([]) == []\nassert     pluck([2,4,8,2,10]) == [4, 0]\nassert     pluck([4,8,2,10]) == [4, 2]\nassert     pluck([4,2,10]) == [4, 1]\nassert     pluck([4,2,8,10]) == [4, 2]\n",
        "num_ids_2": 31,
        "num_ids_4": 69
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pluck([[0, 1], [2], [3, 4], [5, 6, 7, 8]]) == [[2, 0], ]\nassert     pluck([]) == []\nassert     pluck([[0], ]) == [[0], ]\nassert     pluck([[0, 1], [2], [3, 4, 5, 6, 7, 8]]) == [[2, 1], ]\nassert     pluck([[0, 1, 2], [3], [4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15]]) == [[2, 1, 0], ]\n",
        "num_ids_2": 45,
        "num_ids_4": 95
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pluck(array([8, 2, 5, 2, 4, 5, 8, 9, 3, 5])) == array([2, 1])\nassert     pluck(array([3, 2, 6, 2, 4, 5, 8, 9, 3, 5])) == array([])\nassert     pluck(array([])) == array([])\n\n",
        "num_ids_2": 69,
        "num_ids_4": 83
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pluck([]) == []\nassert     pluck([1]) == [1]\nassert     pluck([2,1]) == [1]\nassert     pluck([2,1,3,4]) == [1,1]\nassert     pluck([3,2,1]) == [1]\n",
        "num_ids_2": 21,
        "num_ids_4": 55
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pluck([1, 2, 3]) ==    [2, 0], \"incorrect result\"\nassert     pluck([1, 2, 3, 4]) ==    [2, 1], \"incorrect result\"\nassert     pluck([1, 2, 3, 4, 5]) ==    [2, 1], \"incorrect result\"\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==    [2, 1], \"incorrect result\"\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==    [2, 1], \"incorrect result\"\n",
        "num_ids_2": 50,
        "num_ids_4": 114
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pluck([]) == []\nassert     pluck([1]) == []\nassert     pluck([2]) == [2]\nassert     pluck([2, 1]) == [1]\nassert     pluck([3, 2, 1]) == [1]\n",
        "num_ids_2": 19,
        "num_ids_4": 45
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     search([]) == -1\nassert     search([1]) == 1\nassert     search([2, 2, 2, 2]) == 2\nassert     search([2, 2, 2, 2, 1]) == 1\nassert     search([2, 2, 2, 2, 1, 2]) == 2\n",
        "num_ids_2": 18,
        "num_ids_4": 50
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([3,4,2,6,5,7,7,8]) == 7\nassert     search([4,5,3,3,2]) == -1\nassert     search([2,5,5]) == 5\nassert     search([0,0,0,0,0,0,0]) == -1\nassert     search([-1,1,5,10,-2,3,5,-4,2,2,2]) == 10\n",
        "num_ids_2": 41,
        "num_ids_4": 76
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsearch([2,3,3,4,5,5,6,7,7,8,9]) == 8\nassert search([2,3,3,4,5,5,6,7,7,8,9]) == 8\nassert search([2,3,3,4,5,5,6,7,7,8,9,10,11]) == 9\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     search([1,3,3,2,1]) == 3\nassert     search([1,3,3,2,2]) == -1\nassert     search([3,2,3,2,3]) == 3\nassert     search([0,2,3,2,2]) == 3\nassert     search([2,2,2,2,2]) == -1\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     search([1, 1, 3, 1, 3, 2, 1]) == 3\nassert     search([2, 2, 2]) == 2\nassert     search([1]) == -1\nassert     search([]) == -1\n",
        "num_ids_2": 34,
        "num_ids_4": 53
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert search([1,2,2]) == 2\nassert search([1,2,3,4,2]) == -1\nassert search([0,0,0,0,1,1,1,1,2,2,2]) == 0\n",
        "num_ids_2": 15,
        "num_ids_4": 60
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     strange_sort_list([1, 5, 3, 4, 2])    ==    [2, 1, 4, 3, 5]\nassert     strange_sort_list([3, 6, 1, 0, 5, 2])    ==    [1, 2, 3, 5, 6, 0]\nassert     strange_sort_list([2, 1, 0, 4, 5, 3])    ==    [0, 1, 2, 3, 4, 5]\nassert     strange_sort_list([0, 4, 3, 2, 5, 1])    ==    [0, 1, 2, 3, 4, 5]\nassert     strange_sort_list([1, 2, 3, 5, 6, 4, 7, 8, 9, 10])    ==    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "num_ids_2": 72,
        "num_ids_4": 148
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([1]) == [1]\nassert     strange_sort_list([1, 2, 3]) == [1, 2, 3]\nassert     strange_sort_list([0, 1, 2, 3]) == [0, 1, 2, 3]\nassert     strange_sort_list([1, 0, 2, 3]) == [0, 1, 2, 3]\n",
        "num_ids_2": 29,
        "num_ids_4": 81
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     strange_sort_list([1,2,3]) == [1,2,3]\nassert     strange_sort_list([5,2,3]) == [3,2,5]\nassert     strange_sort_list([1,2,3,4]) == [4,3,2,1]\nassert     strange_sort_list([1,2,3,4,5]) == [4,5,3,2,1]\nassert     strange_sort_list([1,2,3,4,5,6]) == [4,5,6,3,2,1]\n",
        "num_ids_2": 48,
        "num_ids_4": 108
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     strange_sort_list([1,3,5,2,4]) == [1,2,3,4,5]\nassert     strange_sort_list([3,5,1,2,4]) == [1,2,3,4,5]\nassert     strange_sort_list([1,2,3,4,5]) == [1,2,3,4,5]\nassert     strange_sort_list([5,1,3,2,4]) == [1,2,3,4,5]\nassert     strange_sort_list([2,4,5,1,3]) == [1,2,3,4,5]\n",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     strange_sort_list([2, 4, 3]) == [3, 4, 2]\nassert     strange_sort_list([2, 6, 4]) == [4, 6, 2]\nassert     strange_sort_list([2, 4, 3]) == [3, 2, 4]\nassert     strange_sort_list([2, 4, 3, 1]) == [1, 3, 2, 4]",
        "num_ids_2": 48,
        "num_ids_4": 100
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     strange_sort_list([5,1,2,8,3,7,6,4,9]) == [1,2,3,4,5,6,7,8,9], \\\n        \"Wrong result\"\nassert     strange_sort_list([5,1,2,8,3,7,6]) == [1,2,3,5,6,7,8], \\\n        \"Wrong result\"\nassert     strange_sort_list([5,1,2,8,3]) == [1,2,3,5,8], \\\n        \"Wrong result\"\nassert     strange_sort_list([1,2,3,4,5]) == [1,2,3,4,5], \\\n        \"Wrong result\"\nassert     strange_sort_list([1]) == [1], \\\n        \"Wrong result\"\n",
        "num_ids_2": 90,
        "num_ids_4": 156
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strange_sort_list([1,2,3,4,5]) == [5,4,3,2,1], 'wrong output'\n\nif __name__ == '__main__':\n    print('Examples:')\n    print(strange_sort_list([1,2,3,4,5]))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert strange_sort_list([1,2,3,4,5]) == [5,4,3,2,1], \"1st example\"\n    ",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    print(triangle_area(3, 4, 5))  # 5.0\n    print(triangle_area(5, 6, 8))  # -1.0\n    print(triangle_area(1, 1, 1))  # 0.0\n    print(triangle_area(1, 2, 1))  # 0.5\n    print(triangle_area(2, 1, 1))  # 0.0\n    print(triangle_area(2, 2, 1))  # 0.5\n    print(triangle_area(2, 3, 1))  # -0.5\n    print(triangle_area(1, 3, 1))  # 0.0\n    print(triangle_area(2, 3, 1))  # -0.5\n    print(triangle_area(3, 3, 1))  # 0.0\n    print(triangle_area(2, 3, 2))  # -1.0\n    print(triangle_area(3, 4, 5))  # -1.0\n    print(triangle_area(5, 6, 8))  # -1.0\n    print(triangle_area(1, 2, 2))  # 0.0\n    print(triangle_area(1, 1, 2))  # 0.5\n    print(triangle_area(1, 3, 2))  # 0.0\n    print(triangle_area(2, 1, 2))  # 0.5\n    print(triangle_area(2, 2, 2))  # 0.5\n    print(triangle_area(2, 3, 2))  # 0.0\n    print(triangle_area(3, 1, 2))  # 0.0\n    print(triangle_area(3, 2, 2))  # 0.5\n    print(triangle_area(3, 3, 2))  # 0.0\n    print(triangle_area(2, 3, 3))  # -0.5\n    print(triangle_area(3, 4, 5))  # -1.0\n    print(triangle_area(5, 6, 8))  # -1.0\n    print(triangle_area(1, 2, 3))  # -1.0\n    print(triangle_area(1, 1, 3))  # 0.5\n    print(triangle_area(1, 3, 3))  # 0.0\n    print(triangle_area(2, 1, 3))  # 0.5\n    print(triangle_area(2, 2, 3))  # 0.5\n    print(triangle_area(2, 3, 3))  # 0.0\n    print(triangle_area(3, 1, 3))  # 0.0\n    print(triangle_area(3, 2, 3))  # 0.5\n    print(triangle_area(3, 3, 3))  # 0.0\n    print(triangle_area(2, 3, 4))  # -0.5\n    print(triangle_area(3, 4, 5))  # -1.0\n    print(triangle_area(5, 6, 8))  # -1.0\n    print(triangle_area(1, 2, 2))  # 0.0\n    print(triangle_area(1, 1, 2))  # 0.5\n    print(triangle_area(1, 3, 2))  # 0.0\n    print(triangle_area(2, 1, 2))  # 0.5\n    print(triangle_area(2, 2, 2))  # 0.5\n    print(triangle_area(2, 3, 2))  # 0.0\n    print(triangle_area(3, 1, 2))  # 0.0\n    print(triangle_area(3, 2, 2))  # 0.5\n    print(triangle_area(3, 3, 2))  # 0.0\n    print(triangle_area(2, 3, 3))  # -0.5\n    print(triangle_area(3, 4, 5))  # -1.0\n    print(triangle_area(5, 6, 8))  # -1.0\n    print(triangle_area(1, 2, 3))  # -1.0\n    print(triangle",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(1, 2, 3) == -1\nassert     triangle_area(5, 3, 4) == 4\nassert     triangle_area(4, 5, 6) == 2\nassert     triangle_area(1, 1, 1) == 1\n\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n'''\nAnother application of the functions above is to calculate the area of a \nsquare, triangle, or other geometric shape. Implement a function called \nsquare_area that takes as input the length of one side of a square, and \nreturns the area of the square. Implement a function called triangle_area \nthat takes as input the lengths of two sides of a triangle, and returns the \narea of the triangle.\n'''",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(2, 3, 5) == sqrt(3)/2\nassert     triangle_area(2, 3, 2) == sqrt(3)/2\nassert     triangle_area(2, 3, 1) == sqrt(3)/2\nassert     triangle_area(2, 2, 2) == -1\nassert     triangle_area(2, 2, 1) == -1\n",
        "num_ids_2": 42,
        "num_ids_4": 80
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(3, 4, 5) == -1\nassert     triangle_area(5, 12, 13) == 0.5\nassert     triangle_area(3, 4, 5) == 0.5\n",
        "num_ids_2": 35,
        "num_ids_4": 53
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     will_it_fly([1,1],1) == False\nassert     will_it_fly([1,1],2) == True\nassert     will_it_fly([1,1],3) == False\nassert     will_it_fly([1,1,1],3) == True\nassert     will_it_fly([1,1,1],4) == False\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nwill_it_fly(['h', 'l'], 1) == True\nwill_it_fly(['h', 'l'], 2) == False\nwill_it_fly(['h', 'l', 'k', 'j'], 3) == False\nwill_it_fly(['h', 'l', 'k', 'j', 'l'], 3) == False\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 3) == True\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 3) == True\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 5) == False\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 0) == False\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 1) == True\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 2) == True\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 3) == True\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 4) == True\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 5) == False\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 6) == False\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 7) == False\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 8) == True\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 9) == True\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 10) == False\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'], 11) == True\nwill_it_fly(['h', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j', 'l', 'k', 'j'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     will_it_fly(['h','e','l','l','o','w','o','r'], 2) == True\nassert     will_it_fly(['h','e','l','l','o','w','o','r'], 5) == False\nassert     will_it_fly(['h','e','l','l','o','w','o','r'], 2) == True\nassert     will_it_fly(['h','e','l','l','o','w','o','r'], 6) == False\nassert     will_it_fly(['h','e','l','l','o','w','o','r'], 10) == False\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     will_it_fly([\"a\",\"b\",\"b\",\"b\",\"a\",\"b\"], 1) == True, \"Wrong\"\nassert     will_it_fly([\"a\",\"b\",\"b\",\"a\",\"a\",\"a\",\"b\"], 2) == False, \"Wrong\"\nassert     will_it_fly([\"a\",\"b\",\"b\",\"b\",\"b\",\"a\"], 1) == False, \"Wrong\"\nassert     will_it_fly([\"a\",\"b\",\"b\",\"b\",\"b\",\"a\"], 1) == False, \"Wrong\"\nassert     will_it_fly([\"a\",\"b\",\"b\",\"b\",\"b\",\"a\",\"a\",\"a\",\"a\",\"b\"], 3) == True, \"Wrong\"\n",
        "num_ids_2": 64,
        "num_ids_4": 126
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     will_it_fly([1,2,3,4],2) == True\nassert     will_it_fly([1,2,3,4],4) == False\nassert     will_it_fly([1,2,3,4,5],6) == False\nassert     will_it_fly([1,2,3,4,5],10) == False\nassert     will_it_fly([1,2,3,4,5],1) == False\n",
        "num_ids_2": 42,
        "num_ids_4": 88
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     will_it_fly([1,2,3], 4) == True, 'Failed'\nassert     will_it_fly([1,2,3], 2) == True, 'Failed'\nassert     will_it_fly([1,2,3], 1) == True, 'Failed'\nassert     will_it_fly([2,2,2], 4) == True, 'Failed'\nassert     will_it_fly([2,2,2], 2) == True, 'Failed'\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         will_it_fly(['aba','cba','cba'], w=1) == False, \"Wrong answer\"\nassert         will_it_fly(['aba','cba','cba'], w=2) == False, \"Wrong answer\"\nassert         will_it_fly(['aba','cba','cba'], w=3) == False, \"Wrong answer\"\nassert         will_it_fly(['aba','cba','cba'], w=4) == False, \"Wrong answer\"\nassert         will_it_fly(['aba','cba','cba'], w=5) == True, \"Wrong answer\"\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nwill_it_fly([0,0,0], 1) == False\nwill_it_fly([0,1,0], 2) == True\nwill_it_fly([0,1,0], 5) == True\nwill_it_fly([0,1,0,1], 6) == False\nwill_it_fly([0,1,0,0], 3) == False\nwill_it_fly([0,0,0,0], 0) == False\nwill_it_fly([0,1,0,0,0], 0) == False\nwill_it_fly([0,0,0,0,0], 6) == False\nwill_it_fly([1,1,1], 2) == False\nwill_it_fly([1,1,1], 3) == False\nwill_it_fly([1,1,1], 4) == True\nwill_it_fly([1,1,1,1], 4) == True\nwill_it_fly([1,1,1,1,1], 4) == False\nwill_it_fly([1,1,1,1,1,1], 4) == False\nwill_it_fly([1,1,1,1,1,1,1], 4) == True\nwill_it_fly([1,1,1,1,1,1,1,1], 4) == True\nwill_it_fly([1,1,1,1,1,1,1,1,1], 4) == False\nwill_it_fly([1,1,1,1,1,1,1,1,1,1], 4) == False\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1], 4) == True\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1], 4) == True\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1], 4) == False\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1,1], 4) == False\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 4) == True\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 4) == True\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 4) == False\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 2) == True\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 3) == True\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 5) == True\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 6) == False\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 7) == True\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 8) == True\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 9) == False\nwill_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 10) == False\nwill_it_fly([1,1,1,1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nwill_it_fly([[1,2],1,3],5) == False\nwill_it_fly([[1,2,3,4],1],4) == True\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nwill_it_fly([1,2,3], 10) == True, \"Testing Error\"\nwill_it_fly([1,2,3], 12) == False, \"Testing Error\"\nwill_it_fly([1,2,3], 7) == False, \"Testing Error\"\nwill_it_fly([1,2,3], 1) == True, \"Testing Error\"\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsmallest_change([1,2,3,4,5]) == 1\nassert \nsmallest_change([5,4,3,2,1]) == 3\nassert \nsmallest_change([1,2,3,4,4]) == 0\n\nprint(\"All tests passed\")",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(smallest_change([3,1,2]))\nprint(smallest_change([3,1,2,3]))\nprint(smallest_change([1,2,3,4]))\nprint(smallest_change([1,2,3,4,5,6,7,8,9])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"Test case: {0} is passed\".format(smallest_change([1,2,3])))\nassert \nprint(\"Test case: {0} is passed\".format(smallest_change([3,2,1])))\nassert \nprint(\"Test case: {0} is passed\".format(smallest_change([1,2,3,4])))\nassert \nprint(\"Test case: {0} is passed\".format(smallest_change([1,2,3,4,1])))\nassert \nprint(\"Test case: {0} is passed\".format(smallest_change([1,1,1,1,1])))\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"\n    # the minimal change is either 1 element or 2 elements.\n    min_change = min(len(arr), 2)\n    \n    # we need to do a two pointer\n    left_pointer = 0\n    right_pointer = len(arr) - 1\n    \n    while left_pointer < right_pointer:\n        # if the sum of the elements of the left pointer and right pointer is odd,\n        # then we must change the left pointer's element to a right pointer's element\n        # or vice versa\n        # we can either change the element at the right pointer's index\n        if (arr[left_pointer] + arr[right_pointer]) % 2!= 0:\n            arr[left_pointer] = arr[right_pointer]\n            min_change += 1\n        else:\n            # otherwise we can change the element at the left pointer's index\n            arr[left_pointer] = arr[left_pointer] + arr[right_pointer]\n            min_change += 2\n        \n        # now that we've made a change, we can move the pointers towards the beginning\n        # of the array.\n        left_pointer += 1\n        right_pointer -= 1\n    \n    return min_change\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     smallest_change([1, 2, 3, 4]) == 1\nassert     smallest_change([1, 2, 3, 4, 5]) == 2\nassert     smallest_change([1, 2, 3, 4, 5, 6]) == 1\nassert     smallest_change([1, 2, 3, 4, 5, 6, 7]) == 2\nassert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8]) == 2\n",
        "num_ids_2": 38,
        "num_ids_4": 84
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_change([1,1,2,2,2,2,2,2,2,1]) == 1, 'First'\nassert     smallest_change([1,1,1,1,1,1,1,1]) == 0, 'Second'\nassert     smallest_change([1,2,3,4,5]) == 2, 'Third'\nassert     smallest_change([1,2,3,4,5,6]) == 4, 'Fourth'\nassert     smallest_change([1,2,3,4,5,6,7]) == 5, 'Fifth'\n",
        "num_ids_2": 64,
        "num_ids_4": 114
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     total_match(['hi', 'hello', 'goodbye'], ['hi', 'hello', 'goodbye']) == ['hi']\nassert     total_match(['hi', 'hello', 'goodbye'], ['hi', 'hello']) == ['hello']\nassert     total_match(['hi', 'hello'], ['hi', 'hello']) == ['hi']\nassert     total_match(['hi', 'hello', 'goodbye'], ['hi', 'hello', 'goodbye']) == ['hello']\nassert total_match(['hi', 'hello', 'goodbye'], ['hi', 'hello', 'goodbye', 'hi']) == ['hi']\n",
        "num_ids_2": 62,
        "num_ids_4": 120
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     total_match([\"abc\", \"def\", \"h\"], [\"a\", \"b\", \"c\"]) ==     [\"abc\", \"def\"]\nassert     total_match([\"abc\", \"def\", \"h\"], [\"a\", \"b\", \"c\"]) ==     [\"abc\", \"def\"]\nassert     total_match([\"abc\", \"def\", \"h\"], [\"a\", \"b\", \"c\"]) ==     [\"abc\", \"def\"]\nassert     total_match([\"abc\", \"def\", \"h\"], [\"a\", \"b\", \"c\"]) ==     [\"abc\", \"def\"]\nassert     total_match([\"abc\", \"def\", \"h\"], [\"a\", \"b\", \"c\"]) ==     [\"abc\", \"def\", \"h\"]\n",
        "num_ids_2": 68,
        "num_ids_4": 136
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef main():\n    \n    lst1 = ['abcd', 'ab', 'abcd', 'ab', 'abc']\n    lst2 = ['ab', 'abcd', 'abcd', 'abcd', 'abcd']\n\n    lst = total_match(lst1, lst2)\n    print(lst)\n\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    # your code here\n    # assert total_match([1,2,3],[1,2,3]) == [1,2,3]\n    # assert total_match([1,2,3,4],[1,2,3]) == [1,2,3]\n    # assert total_match([1,2,3,4,5],[1,2,3]) == [1,2,3,4]\n    # assert total_match([1,2,3,4,5,6],[1,2,3]) == [1,2,3]\n    # assert total_match([1,2,3,4,5,6,7],[1,2,3]) == []\n    # assert total_match([1,2,3,4,5,6,7,8],[1,2,3]) == []\n    # assert total_match([1,2,3,4,5,6,7,8,9],[1,2,3]) == []\n\n    # assert total_match([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     total_match(['python', 'java', 'c++'], ['c', 'python']) == ['c++'], \\\n                f\"Expected ['c++', 'python']\"\nassert     total_match(['python', 'java', 'c++'], ['c', 'python', 'java', 'c++']) == ['python', 'java', 'c++'], \\\n                f\"Expected ['python', 'java', 'c++']\"\nassert     total_match(['python', 'java', 'c++'], ['c', 'python', 'java', 'c++', 'python']) == ['python'], \\\n                f\"Expected ['python']\"\nassert     total_match(['python', 'java', 'c++'], ['c', 'python', 'java', 'c++', 'python', 'java']) == ['java', 'c++', 'python'], \\\n                f\"Expected ['java', 'c++', 'python']\"\n",
        "num_ids_2": 77,
        "num_ids_4": 169
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     total_match([\"apples\", \"bananas\", \"oranges\"], [\"apples\", \"bananas\", \"oranges\", \"apple\"]) == [\"apples\"]\nassert     total_match([\"apples\", \"bananas\", \"oranges\"], [\"apples\", \"bananas\", \"oranges\", \"oranges\"]) == [\"bananas\", \"oranges\"]\nassert     total_match([\"apples\", \"bananas\", \"oranges\"], [\"apples\", \"bananas\", \"oranges\", \"apples\"]) == [\"apples\"]\nassert     total_match([\"apples\", \"bananas\", \"oranges\"], [\"apples\", \"bananas\", \"oranges\", \"oranges\", \"apples\"]) == [\"bananas\", \"oranges\"]\nassert     total_match([\"apples\", \"bananas\", \"oranges\"], [\"apples\", \"bananas\", \"oranges\", \"oranges\", \"apples\", \"apples\"]) == [\"apples\"]\n",
        "num_ids_2": 85,
        "num_ids_4": 175
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert total_match([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"]\nassert total_match([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"]\nassert total_match([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"]\nassert total_match([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"]\n",
        "num_ids_2": 92,
        "num_ids_4": 270
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_the_prime_number(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nis_multiply_prime(2) == True\nis_multiply_prime(7) == True\nis_multiply_prime(8) == False\n\nis_multiply_prime(85) == True\nis_multiply_prime(99) == False\nis_multiply_prime(13) == True\n\nis_multiply_prime(21) == True\nis_multiply_prime(25) == True\nis_multiply_prime(41) == False\n\nis_multiply_prime(17) == True\nis_multiply_prime(19) == False\nis_multiply_prime(23) == True\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('Passed unit tests.')\n\nprint('------')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(11) == False\nassert     is_multiply_prime(12) == False\nassert     is_multiply_prime(33) == False\nassert     is_multiply_prime(85) == True\nassert     is_multiply_prime(123) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_multiply_prime(3) == True\nassert     is_multiply_prime(10) == True\nassert     is_multiply_prime(17) == True\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(14) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_multiply_prime(25) == False\nassert is_multiply_prime(14) == True\nassert is_multiply_prime(125) == True\nassert is_multiply_prime(12) == False\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(20) == True, 'Failed, 20 is not the multiplication of 3 prime numbers'\nassert     is_multiply_prime(100) == False, 'Failed, 100 is not the multiplication of 3 prime numbers'\nassert     is_multiply_prime(12) == True, 'Failed, 12 is not the multiplication of 3 prime numbers'\nassert     is_multiply_prime(9) == True, 'Failed, 9 is not the multiplication of 3 prime numbers'\nassert     is_multiply_prime(34) == False, 'Failed, 34 is not the multiplication of 3 prime numbers'\n",
        "num_ids_2": 60,
        "num_ids_4": 120
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_simple_power(1, 1) == True\nassert     is_simple_power(1, 2) == False\nassert     is_simple_power(1, 5) == False\nassert     is_simple_power(1, 7) == True\nassert     is_simple_power(10, 1) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"You should look at the doctest to see how your function should behave\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_simple_power(16, 2) == True\nassert     is_simple_power(10, 2) == False\nassert     is_simple_power(1, 2) == False\nassert     is_simple_power(2, 4) == False\nassert     is_simple_power(10, 7) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_simple_power(1, 1) == True, '1 simple power 1 is True'\nassert     is_simple_power(1, 2) == False, '1 simple power 2 is False'\nassert     is_simple_power(2, 2) == True, '2 simple power 2 is True'\nassert     is_simple_power(3, 2) == False, '3 simple power 2 is False'\nassert     is_simple_power(8, 2) == True, '8 simple power 2 is True'\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_simple_power(5, 2) == False, '1st testcase'\nassert is_simple_power(25, 2) == False, '2nd testcase'\nassert is_simple_power(2, 4) == True, '3rd testcase'\nassert is_simple_power(4, 2) == False, '4th testcase'\nassert is_simple_power(2, 2) == False, '5th testcase'\n",
        "num_ids_2": 43,
        "num_ids_4": 85
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_simple_power(2, 2) == True\nassert     is_simple_power(2, 4) == False\nassert     is_simple_power(4, 2) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    is_simple_power(4, 3) == True\n    is_simple_power(8, 4) == True\n    is_simple_power(15, 5) == False\n    is_simple_power(16, 4) == True\n    is_simple_power(10, 4) == True\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    is_simple_power(4, 2) == True\n    is_simple_power(4, 3) == False\n    is_simple_power(8, 4) == True\n    is_simple_power(0, 5) == False\n    is_simple_power(1, 5) == False\n    is_simple_power(2, 5) == False\n    is_simple_power(0, 0) == False\n    is_simple_power(1, 0) == False\n    is_simple_power(2, 0) == False\n    is_simple_power(3, 0) == False\n    is_simple_power(4, 0) == False\n    is_simple_power(5, 0) == False\n    is_simple_power(1, 1) == False\n    is_simple_power(2, 1) == False\n    is_simple_power(3, 1) == False\n    is_simple_power(4, 1) == False\n    is_simple_power(5, 1) == False\n    is_simple_power(1, 2) == False\n    is_simple_power(2, 2) == False\n    is_simple_power(3, 2) == False\n    is_simple_power(4, 2) == False\n    is_simple_power(5, 2) == False\n    is_simple_power(2, 3) == False\n    is_simple_power(3, 3) == False\n    is_simple_power(4, 3) == False\n    is_simple_power(5, 3) == False\n    is_simple_power(2, 4) == False\n    is_simple_power(3, 4) == False\n    is_simple_power(4, 4) == False\n    is_simple_power(5, 4) == False\n    is_simple_power(2, 5) == False\n    is_simple_power(3, 5) == False\n    is_simple_power(4, 5) == False\n    is_simple_power(5, 5) == False\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_simple_power(2, 2) == True\nassert     is_simple_power(2, 4) == False\nassert     is_simple_power(4, 2) == False\nassert     is_simple_power(16, 2) == True\nassert     is_simple_power(16, 3) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_simple_power(25, 2) == True, 'For example'\nassert     is_simple_power(1, 5) == False, 'For example'\nassert     is_simple_power(8, 2) == True, 'For example'\nassert     is_simple_power(2, 1) == False, 'For example'\nassert     is_simple_power(1, 2) == False, 'For example'\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(iscube(2))\nprint(iscube(4))\nprint(iscube(27))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    '''\n    return a ** (1/3) == int(a ** (1/3))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert iscube(1) == True\nassert iscube(5) == False\nassert iscube(0) == False\n",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    iscube(1) == True\n    iscube(5) == False\n    iscube(5) == True\n    iscube(123) == False\n    iscube(123) == True\n    iscube(456) == False\n    iscube(456) == True\n    iscube(3) == False\n    iscube(3) == True\n    iscube(16) == False\n    iscube(16) == True\n    iscube(32) == False\n    iscube(32) == True\n    iscube(129) == False\n    iscube(129) == True\n    iscube(8) == False\n    iscube(8) == True\n    iscube(1) == False\n    iscube(1) == True\n    iscube(9) == False\n    iscube(9) == True\n    iscube(9) == False\n    iscube(9) == True\n    iscube(0) == True\n    iscube(0) == False\n    iscube(6) == False\n    iscube(6) == True\n    iscube(1) == False\n    iscube(1) == True\n    iscube(7) == False\n    iscube(7) == True\n    iscube(9) == False\n    iscube(9) == True\n    iscube(9) == False\n    iscube(9) == True\n    iscube(0) == True\n    iscube(0) == False\n    iscube(10) == False\n    iscube(10) == True\n    iscube(27) == False\n    iscube(27) == True\n    iscube(6) == False\n    iscube(6) == True\n    iscube(4) == False\n    iscube(4) == True\n    iscube(7) == False\n    iscube(7) == True\n    iscube(13) == False\n    iscube(13) == True\n    iscube(5) == False\n    iscube(5) == True\n    iscube(3) == False\n    iscube(3) == True\n    iscube(8) == False\n    iscube(8) == True\n    iscube(12) == False\n    iscube(12) == True\n    iscube(21) == False\n    iscube(21) == True\n    iscube(8) == False\n    iscube(8) == True\n    iscube(7) == False\n    iscube(7) == True\n    iscube(6) == False\n    iscube(6) == True\n    iscube(1) == False\n    iscube(1) == True\n    iscube(9) == False\n    iscube(9) == True\n    iscube(5) == False\n    iscube(5) == True\n    iscube(4) == False\n    iscube(4) == True\n    iscube(3) == False\n    iscube(3) == True\n    iscube(2) == False\n    iscube(2) == True\n    iscube(3) == False\n    iscube(3) == True\n    iscube(0) == False\n    iscube(0) == True\n    iscube(9) == False\n    iscube(9) == True\n    iscube(7) == False\n    iscube(7) == True\n    iscube(6) == False\n    iscube(6) == True\n    iscube(4) == False\n    iscube(4) == True\n    iscube(3) == False\n    iscube(3) == True\n    iscube(2) == False\n    iscube(2) == True\n    iscube(1) == False\n    iscube(1) == True\n    iscube(8) == False\n    iscube(8) == True\n    iscube(9) == False\n    iscube(9) == True\n    iscube(9) == False\n    iscube(9) == True\n    iscube(10) == False\n    iscube(10) == True\n    iscube(11) == False\n    iscube(11) == True\n    iscube(13) == False\n    iscube(13) == True\n    iscube(4) == False\n    iscube(4) == True\n    iscube(5) == False\n    iscube(5) == True\n    iscube(7) == False\n    iscube(7) == True\n    iscube(3",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     iscube(2) == True\nassert     iscube(12) == False\nassert     iscube(123) == True\nassert     iscube(5678) == False\nassert     iscube(0) == False\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     hex_key('') == 0, '0'\nassert     hex_key('A') == 1, '1'\nassert     hex_key('A') == 0, '0'\nassert     hex_key('a') == 1, '1'\nassert     hex_key('a') == 0, '0'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     hex_key('1F') == 1\nassert     hex_key('2F') == 1\nassert     hex_key('3F') == 1\nassert     hex_key('4F') == 1\nassert     hex_key('5F') == 1\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     hex_key('A') == 4, 'First'\nassert     hex_key('B') == 3, 'Second'\nassert     hex_key('C') == 2, 'Third'\nassert     hex_key('D') == 1, 'Fourth'\nassert     hex_key('E') == 0, 'Fifth'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     hex_key('11') == 2\nassert     hex_key('13') == 3\nassert     hex_key('11B') == 2\nassert     hex_key('13D') == 3\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # we have a number\nassert\n    # it is a hexadecimal number\nassert\n    # it is a prime number\nassert\n    # it is a binary number\nassert\n    # it is a decimal number\n",
        "num_ids_2": 5,
        "num_ids_4": 9
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(5) == '101'\nassert     decimal_to_binary(16) == '1db0'\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(5) == '01'\nassert     decimal_to_binary(14) == '0b100'\nassert     decimal_to_binary(22) == '0b101110110'\nassert     decimal_to_binary(33) == '0b1110001011'\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(30) == \"db10\", \"Should be 'db10'\"\nassert     decimal_to_binary(30) == \"db10\", \"Should be 'db10'\"\nassert     decimal_to_binary(31) == \"db11\", \"Should be 'db11'\"\nassert     decimal_to_binary(-3) == \"db00\", \"Should be 'db00'\"\nassert     decimal_to_binary(-9) == \"db01\", \"Should be 'db01'\"\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"110\"\nassert     decimal_to_binary(4) == \"100\"\nassert     decimal_to_binary(5) == \"101\"\nassert     decimal_to_binary(6) == \"1100\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(30) == '001000'\nassert     decimal_to_binary(0) == '00'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(16) == '10100'\nassert     decimal_to_binary(-1) == '0011010101010'\n",
        "num_ids_2": 33,
        "num_ids_4": 66
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ns = 'google'\nassert is_happy(s) == True\n\ns = 'cat'\nassert is_happy(s) == False\n",
        "num_ids_2": 13,
        "num_ids_4": 23
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_happy(\"a\") == True\nassert     is_happy(\"aa\") == False\nassert     is_happy(\"aaa\") == False\nassert     is_happy(\"abc\") == False\nassert     is_happy(\"zab\") == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \nassert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_happy('asdfghjk')\nassert not is_happy('asdfghjk')\nassert not is_happy('asdfghjk')\nassert is_happy('asdghjk')\n",
        "num_ids_2": 15,
        "num_ids_4": 41
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_happy(\"\")\nassert     is_happy(\"a\")\nassert     is_happy(\"aa\")\nassert     is_happy(\"aaa\")\nassert     is_happy(\"aaaa\")\n",
        "num_ids_2": 17,
        "num_ids_4": 35
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_happy('aa') == False\nassert     is_happy('abc') == False\nassert     is_happy('abac') == False\nassert     is_happy('abcdef') == True\nassert     is_happy('abcdefgh') == True\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'A', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']",
        "num_ids_2": 114,
        "num_ids_4": 114
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([1, 2, 3, 4, 5]) == \"A\", \"Error 1\"\nassert     numerical_letter_grade([1, 2, 3, 4, 5, 5]) == \"B+\", \"Error 2\"\nassert     numerical_letter_grade([1, 2, 3, 4, 5, 6]) == \"B\", \"Error 3\"\nassert     numerical_letter_grade([1, 2, 3, 4, 5, 5, 5]) == \"C+\", \"Error 4\"\nassert     numerical_letter_grade([1, 2, 3, 4, 5, 6, 7]) == \"C\", \"Error 5\"\n",
        "num_ids_2": 61,
        "num_ids_4": 126
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n",
        "num_ids_2": 104,
        "num_ids_4": 104
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 4.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nprint('numerical_letter_grade function works')\n",
        "num_ids_2": 107,
        "num_ids_4": 107
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"]\nassert numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"]\nassert numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"]\nassert numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"]\nassert numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"]\n",
        "num_ids_2": 201,
        "num_ids_4": 399
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([2.0, 4.0, 4.0, 4.0, 4.0, 3.3, 2.0, 2.0, 3.3, 3.0, 4.0]) == ['A+', 'A+', 'A+', 'B+', 'A-', 'B+', 'C+', 'C-', 'B-', 'C-', 'C-']\n\nprint('Test completed'",
        "num_ids_2": 100,
        "num_ids_4": 100
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([2.3, 2.0, 3.0, 1.0, 0.0, 1.3, 1.0, 2.3, 3.0]) == ['C', 'C', 'C', 'D', 'D', 'C', 'D', 'C', 'B']\nassert numerical_letter_grade([2.3, 2.0, 3.0, 1.0, 0.0, 1.3, 1.0, 2.3, 3.0]) == ['D', 'D', 'D', 'D', 'D', 'D', 'D', 'C', 'B']\nassert numerical_letter_grade([1.3, 1.3, 1.0, 1.3, 1.0, 1.3, 1.0, 1.3, 1.0]) == ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']\nassert numerical_letter_grade([1.3, 1.3, 1.0, 1.3, 1.0, 1.3, 1.0, 1.3, 1.0]) == ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']\nassert numerical_letter_grade([1.3, 1.3, 1.0, 1.3, 1.0, 1.3, 1.0, 1.3, 1.0]) == ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']\n",
        "num_ids_2": 147,
        "num_ids_4": 291
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'A+', 'A+', 'A-', 'A', 'A-', 'A-', 'A+', 'A', 'A-']\n",
        "num_ids_2": 105,
        "num_ids_4": 105
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prime_length(\"\") == False, \\\n        \"Can't be a prime number\"\nassert     prime_length(\"1\") == False, \\\n        \"Can't be a prime number\"\nassert     prime_length(\"abc\") == False, \\\n        \"Can't be a prime number\"\nassert     prime_length(\"abcdefg\") == False, \\\n        \"Can't be a prime number\"\nassert     prime_length(\"abcdefg123\") == False, \\\n        \"Can't be a prime number\"\n",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     prime_length(\"1\") == True\nassert     prime_length(\"4\") == True\nassert     prime_length(\"5\") == False\nassert     prime_length(\"7\") == True\nassert     prime_length(\"35\") == True\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef is_prime(n):\n    \"\"\"Write a function that takes an integer and returns True if the number\n    is prime or False otherwise\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prime_length(\"a\") == False\nassert     prime_length(\"a\") == False\nassert     prime_length(\"1\") == True\nassert     prime_length(\"11\") == True\nassert     prime_length(\"11\") == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prime_length(\"ABCDEFGHI\") == False\nassert     prime_length(\"1234\") == True\nassert     prime_length(\"\") == False\n",
        "num_ids_2": 26,
        "num_ids_4": 36
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not prime_length(\"a\")\nassert prime_length(\"21\")\nassert prime_length(\"999\")\nassert prime_length(\"55\")\n",
        "num_ids_2": 12,
        "num_ids_4": 28
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 5\nassert     starts_one_ends(4) == 11\nassert     starts_one_ends(5) == 21\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef ends_one_starts(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that end with 1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 3\nassert     starts_one_ends(4) == 5\nassert     starts_one_ends(5) == 7\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 3\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     starts_one_ends(3) == 1, \"1st example failed\"\nassert     starts_one_ends(4) == 2, \"2nd example failed\"\nassert     starts_one_ends(1) == 1, \"3rd example failed\"\nassert     starts_one_ends(2) == 1, \"4th example failed\"\nprint(\"'starts_one_ends' function is correct\")\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nif __name__ == '__main__':\n    print('Testing...')\n    test_cases = \\\n    [\n        [1, \"1\"],\n        [2, \"10\"],\n        [100, \"100\"],\n        [1023, \"1111\"],\n    ]\n    for N, solution in test_cases:\n        result = solve(N)\n        assert result == solution, f'Expected: {solution}, got: {result}'\n    print('Done')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solve(54) == \"1000000000\"\nassert     solve(123) == \"001101010\"\nassert     solve(789) == \"111000001\"\nassert     solve(987) == \"111111111\"\nassert     solve(1357) == \"110101010101010101\"\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solve(100) == \"11\"\nassert     solve(1) == \"0\"\nassert     solve(2) == \"10\"\nassert     solve(3) == \"11\"\nassert     solve(4) == \"100\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert solve(5) == \"101\"\nassert solve(8) == \"1000\"\nassert solve(15) == \"10101\"\n",
        "num_ids_2": 6,
        "num_ids_4": 26
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     solve(26) == \"10010\"\nassert     solve(19) == \"1110\"\nassert     solve(19) == \"1110\"\nassert     solve(110) == \"1110\"\nassert     solve(1000) == \"1000\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert solve(12) == \"1010\", \"First Test\"\nassert solve(12345678) == \"0b
        "num_ids_2": 18,
        "num_ids_4": 1026
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(solve(6))\nprint(solve(500))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add([]) == [] \nassert     add([1,2]) == [2]\nassert     add([5,6]) == [5,6]\nassert     add([10]) == [10]\nassert     add([-1,1,2]) == [1,-1]\n",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add([2, 1, 4, 3, 4, 3, 6, 8, 9, 5]) ==     [4, 2, 6, 8, 8, 6, 6, 6, 6]\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add([1, 5, 3, 2, 4, 8, 6, 7, 9]) == [1, 3, 5, 7, 9]\nassert     add([1, 5, 3, 2, 4, 8, 6, 7]) == [1, 3, 5, 7]",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # print(get_element([\"add\", 3, 5], 0))\n    # print(get_element([\"add\", 3, 5], 1))\n    # print(get_element([\"add\", 3, 5], 2))\n    # print(get_element([\"add\", 3, 5], 3))\n    # print(get_element([\"add\", 3, 5], 4))\n    # print(get_element([\"add\", 3, 5], 5))\n    # print(get_element([\"add\", 3, 5], 6))\n    # print(get_element([\"add\", 3, 5], 7))\n    # print(get_element([\"add\", 3, 5], 8))\n    # print(get_element([\"add\", 3, 5], 9))\n    # print(get_element([\"add\", 3, 5], 10))\n    # print(get_element([\"add\", 3, 5], 11))\n    # print(get_element([\"add\", 3, 5], 12))\n    # print(get_element([\"add\", 3, 5], 13))\n    # print(get_element([\"add\", 3, 5], 14))\n    # print(get_element([\"add\", 3, 5], 15))\n    # print(get_element([\"add\", 3, 5], 16))\n    # print(get_element([\"add\", 3, 5], 17))\n    # print(get_element([\"add\", 3, 5], 18))\n    # print(get_element([\"add\", 3, 5], 19))\n    # print(get_element([\"add\", 3, 5], 20))\n    # print(get_element([\"add\", 3, 5], 21))\n    # print(get_element([\"add\", 3, 5], 22))\n    # print(get_element([\"add\", 3, 5], 23))\n    # print(get_element([\"add\", 3, 5], 24))\n    # print(get_element([\"add\", 3, 5], 25))\n    # print(get_element([\"add\", 3, 5], 26))\n    # print(get_element([\"add\", 3, 5], 27))\n    # print(get_element([\"add\", 3, 5], 28))\n    # print(get_element([\"add\", 3, 5], 29))\n    # print(get_element([\"add\", 3, 5], 30))\n    # print(get_element([\"add\", 3, 5], 31))\n    # print(get_element([\"add\", 3, 5], 32))\n    # print(get_element([\"add\", 3, 5], 33))\n    # print(get_element([\"add\", 3, 5], 34))\n    # print(get_element([\"add\", 3, 5], 35))\n    # print(get_element([\"add\", 3, 5], 36))\n    # print(get_element([\"add\", 3, 5], 37))\n    # print(get_element([\"add\", 3, 5], 38))\n    # print(get_element([\"add\", 3, 5], 39))\n    # print(get_element([\"add\", 3, 5], 40))\n    # print(get_element([\"add\", 3, 5], 41))\n    # print(get_element([\"add\", 3, 5], 42))\n    # print(get_element([\"add\", 3, 5], 43))\n    # print(get_element([\"add\", 3, 5], 44))\n    # print(get_element([\"add\", 3, 5], 45))\n    # print(get_element([\"add\", 3, 5], 46))\n    # print(get_element([\"add\", 3, 5], 47))\n    # print(get_element([\"add\", 3, 5], 48))\n    # print(get_element([\"add\", 3, 5], 49))\n    # print(get_element([\"add\", 3, 5], 50))\n    # print(get_element([\"add\", 3, 5], 51))\n    # print(get_element([\"add\", 3, 5], 52))\n    # print(get_element([\"add\", 3, 5], 53))\n    # print(get_element([\"add\", 3, 5], 54))\n    # print(get_element([\"add\", 3, 5], 55))\n    # prin",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert add([2,3,4,5]) == [5,2,4,5]\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nlst = [2, 3, 4, 6, 5, 8, 7, 10]",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add([2, 1, 3, 4, 3]) == 2\nassert     add([2, 4, 3, 5, 2]) == 6\nassert     add([-1, -2, -3, -4, -5]) == -1\nassert     add([1, 1, 1, 1, 1]) == 0\nprint(\"The addition function is correct!\")\n",
        "num_ids_2": 34,
        "num_ids_4": 74
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add([1, 3, 5, 7]) == [1,3,5,7,9]\nassert     add([4, 2, 6, 8, 10]) == [4,2,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48]\nassert     add([]) == []\n\n\n",
        "num_ids_2": 90,
        "num_ids_4": 98
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add([0,1,2]) == [0,2,4], 'Wrong output!'\nassert     add([3,1,2,5,7,8,9]) == [0,2,4,6,8,10,12], 'Wrong output!'\nassert     add([1,3,5]) == [1,3,5], 'Wrong output!'\n",
        "num_ids_2": 64,
        "num_ids_4": 88
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"catsanddog\") == \"cat dog ands and\"\nassert     anti_shuffle(\"pineapplepenapple\") == \"apple pen and pineapple\"\nassert     anti_shuffle(\"catsandog\") == \"cat dog ands and\"\n",
        "num_ids_2": 40,
        "num_ids_4": 60
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     anti_shuffle('') == ''\nassert     anti_shuffle('this is a test') == 'is a test this'\nassert     anti_shuffle('this is a test') == 'is a test this'\nassert     anti_shuffle('this is a test') == 'is a test this'\nassert     anti_shuffle('this is a test this is a test') == 'is a test this is a test this'\n",
        "num_ids_2": 32,
        "num_ids_4": 72
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(anti_shuffle(\"hello world\"))\nprint(anti_shuffle(\"quick hello world\"))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef anti_shuffle_b(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     anti_shuffle('s a word') == 'word s', 'Incorrect test 1'\nassert     anti_shuffle('hello world') == 'world hello', 'Incorrect test 2'\nassert     anti_shuffle('123') == '123', 'Incorrect test 3'\nassert     anti_shuffle('one two three') == 'three one two', 'Incorrect test 4'\nassert     anti_shuffle(' ') == '', 'Incorrect test 5'\n",
        "num_ids_2": 45,
        "num_ids_4": 89
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef anti_shuffle(s):\n    return''.join(sorted(s.split(), key=lambda x: ord(x)))\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     anti_shuffle('') == ''\nassert     anti_shuffle('hello world') == 'world hello'\nassert     anti_shuffle('qwerty') == 'werty q'\nassert     anti_shuffle('qwe qwe') == 'qwe qwe'\nassert     anti_shuffle('qwerty qwe qwe') == 'qwerty qwe qwe'\n",
        "num_ids_2": 28,
        "num_ids_4": 66
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert get_row([[1,2],[2,2],[3,2]], 0) == [(0, 0), (1, 0), (2, 0), (2, 1)]\nassert get_row([[1,2],[2,2],[3,2]], 1) == [(0, 0), (1, 1), (2, 1), (2, 2)]\nassert get_row([[1,2],[2,2],[3,2]], 2) == [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3)]\n",
        "num_ids_2": 46,
        "num_ids_4": 142
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_row([[1, 4, 3],\n                  [1, 2, 3],\n                  [1, 2, 3]], 1) == [(1, 0), (2, 0), (2, 1), (1, 2), (0, 2)]\nassert     get_row([[1, 4, 3],\n                  [1, 2, 3],\n                  [1, 2, 3]], 2) == [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)]\nassert     get_row([[1, 4, 3],\n                  [1, 2, 3],\n                  [1, 2, 3]], 3) == [(1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]\n\ndef get_col(lst, y):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each column may contain a different number of rows.\n    Given lst, and integer y, find integers y in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (columns, rows), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also sort coordinates of the column by rows in descending order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_row([(0, 1, 2), (3, 4, 5)], 0) == [(0, 1), (3, 4)]\nassert     get_row([(0, 1, 2), (3, 4, 5)], 1) == [(0, 2), (3, 4)]\nassert     get_row([(0, 1, 2), (3, 4, 5)], 2) == [(0, 3), (3, 4)]\nassert     get_row([(0, 1, 2), (3, 4, 5)], 3) == [(1, 0), (4, 1)]\nassert     get_row([(0, 1, 2), (3, 4, 5)], 4) == [(2, 0), (5, 1)]\n",
        "num_ids_2": 70,
        "num_ids_4": 140
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_row([[1,2,3],[4,5,6],[7,8,9]], 0) == [(0, 0), (1, 0), (2, 0)]\nassert     get_row([[1,2,3,4],[5,6,7,8]], 1) == [(1, 1), (2, 1), (3, 1), (4, 1)]\nassert     get_row([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]], 2) == [(2, 2), (3, 2), (4, 2), (5, 2), (6, 2)]\n",
        "num_ids_2": 93,
        "num_ids_4": 160
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_row(get_row([[1, 2, 3], [4, 5, 6]], 4), 3) == [(0, 0), (0, 1), (1, 0), (1, 1)], \"Wrong\"\nassert     get_row(get_row([[1, 2, 3], [4, 5, 6]], 4), 3) == [(0, 0), (0, 1), (1, 0), (1, 1)], \"Wrong\"\nassert     get_row(get_row([[1, 2, 3], [4, 5, 6]], 4), 2) == [(0, 0), (1, 0), (1, 1), (0, 1)], \"Wrong\"\nassert     get_row(get_row([[1, 2, 3], [4, 5, 6]], 4), 1) == [(0, 0), (0, 1), (1, 0), (1, 1)], \"Wrong\"\nassert     get_row(get_row([[1, 2, 3], [4, 5, 6]], 4), 0) == [(0, 0), (1, 0), (1, 1), (0, 1)], \"Wrong\"\n",
        "num_ids_2": 112,
        "num_ids_4": 224
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([0, 4, 5, 2, 3]) == [0, 2, 3, 4, 5]\nassert     sort_array([0, 1, 2, 3]) == [0, 1, 2, 3]\nassert     sort_array([]) == []\nassert     sort_array([0, 2, 4, 5, 1]) == [0, 1, 2, 4, 5]\nassert     sort_array([0, 1, 2, 5, 4]) == [0, 1, 2, 4, 5]\n",
        "num_ids_2": 54,
        "num_ids_4": 93
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # print \n    array = [5,3,8,6,1]\n    sort_array(array)\n    print(array)\n\n    array = [4,7,8,11]\n    sort_array(array)\n    print(array)\n\n    array = [1,2,3,4,5]\n    sort_array(array)\n    print(array)\n\n    array = [1,3,2,4,5]\n    sort_array(array)\n    print(array)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_array([1,3,2,5,4,6]) == sorted([1,2,3,4,5,6])\nassert     sort_array([1,3,2,5,4,6,6]) == sorted([1,2,3,4,5,6,6])\nassert     sort_array([1,3,2,5,4,6,3]) == sorted([1,2,3,3,4,5,6])\nassert     sort_array([1,3,2,5,4,6,2]) == sorted([1,2,2,3,4,5,6])\nassert     sort_array([1,3,2,5,4,6,2,1]) == sorted([1,1,2,2,3,3,4,5])\n",
        "num_ids_2": 72,
        "num_ids_4": 148
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    # test case 1\n    array = [1, 4, 2, 7, 9, 3]\n    assert(sort_array(array) == [1, 2, 3, 4, 7, 9])\n    \n    # test case 2\n    array = [1, 2, 3, 4, 5]\n    assert(sort_array(array) == [1, 2, 3, 4, 5])\n\n    # test case 3\n    array = [-8, -1, -6, -9, -4, -3, -7, -5, -2, -1, 0, -9, -5, -4, -6, -8, 0, 1, 2, 3, 4, 5]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \\\n\"Wrong!\"\nassert     sort_array([1, 3, 2, 4, 5]) == [1, 2, 3, 4, 5], \\\n\"Wrong!\"\nassert     sort_array([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5], \\\n\"Wrong!\"\nassert     sort_array([1, 2, 1, 2, 3, 3]) == [1, 1, 2, 2, 3, 3], \\\n\"Wrong!\"\nassert     sort_array([]) == [], \\\n\"Wrong!\"\n",
        "num_ids_2": 60,
        "num_ids_4": 124
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array(arr) == expected_output\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([1, 2, 3, 4, 5, 6]) == ([1, 2, 3, 4, 5, 6]), \"Not sorted\"\nassert     sort_array([1, 2, 3, 4, 5, 6]) == ([6, 5, 4, 3, 2, 1]), \"Not sorted\"\nassert     sort_array([1, 2, 3, 4, 5, 6]) == ([6, 5, 4, 3, 2, 1]), \"Not sorted\"\nassert     sort_array([1, 2, 3, 4, 5, 6]) == ([6, 5, 4, 3, 2, 1]), \"Not sorted\"\nassert     sort_array([1, 2, 3, 4, 5, 6]) == ([6, 5, 4, 3, 2, 1]), \"Not sorted\"\n",
        "num_ids_2": 74,
        "num_ids_4": 148
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([1,2,3,4,5]) ==    [1,2,3,4,5]\nassert     sort_array([3,1,2,3]) ==    [1,2,3,3]\nassert     sort_array([5,4,3,2,1]) ==    [1,2,3,4,5]\nassert     sort_array([1,2,3,4,5]) ==    [1,2,3,4,5]\nassert     sort_array([]) ==    []\n",
        "num_ids_2": 56,
        "num_ids_4": 116
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsort_array([1,2,3,4]) == [1,2,3,4]\nsort_array([1,1,1,1]) == [1,1,1,1]\nsort_array([1]) == [1]\nsort_array([]) == []",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     encrypt(\"some_string\") == \"mbxnlya\"\nassert     encrypt(\"algorithm\") == \"mtrqwbf\"\n\nprint(\"Congratulations! Your code works!\")\nprint()\n\nif __name__ == \"__main__\":\n    # get a string as input\n    s = input(\"Please enter a string: \")\n    # call the encrypt function and print the result\n    print(\"The encrypted string: \", encrypt(s))\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef test_encrypt():\n    \"\"\"Run the test cases for the function encrypt\"\"\"\n    \n    assert encrypt('abc') == 'cde'\n    assert encrypt('abcdefgh') == 'efghabcd'\n    assert encrypt('abcdefghi') == 'fghija'\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     encrypt('abc') == 'dfg'\nassert     encrypt('z') == 'd'\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nencrypt(\"hello\") == \"dhnc\"\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string that is decrypted in the same way.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (encrypt('hello') == 'iyo'), 'encrypt should rotate by 2'\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (encrypt(\"\")==\"\" )\nassert     (encrypt(\"A\") == \"B\")\nassert     (encrypt(\"ABC\") == \"CAB\")\nassert     (encrypt(\"ABCD\") == \"BCDA\")\nassert     (encrypt(\"ABCDZ\") == \"BCDZA\")\n",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nnext_smallest([1, 2, 4, 7, 10, 9]) == 7\n\n\"\"\"\nhttps://www.codewars.com/kata/56ce4d8c40c7e6b8f0000bd\n\nGiven a list of integers, return the length of the longest subarray that is monotonically decreasing. \nAn array is monotonically decreasing if its elements are strictly decreasing. A subarray is a contiguous subsequence of an array. \nIf the entire array is sorted in non-decreasing order, return 0.\n\nNote that the length of the input array is at least 2.\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_smallest([1, 2, 3, 4]) == 2, 'First'\nassert     next_smallest([1, 4, 3, 2]) == 3, 'Second'\nassert     next_smallest([4, 3, 2, 1]) == 3, 'Third'\nassert     next_smallest([2, 3, 1, 4]) == 1, 'Fourth'\nassert     next_smallest([1, 1, 1, 1]) == None, 'Fifth'\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_smallest([1, 2, 3]) == 2, \"error 1\"\nassert next_smallest([-2, -3, -1]) == -2, \"error 2\"\nassert next_smallest([]) == None, \"error 3\"\nassert next_smallest([-1]) == -1, \"error 4\"\nassert next_smallest([5, 4, 3, 2, 1]) == 1, \"error 5\"\n",
        "num_ids_2": 45,
        "num_ids_4": 78
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nnext_smallest([4,6,7,1,2]) == 1\nassert \nnext_smallest([4,6,7,1,2,3]) == 1\nassert \nnext_smallest([4,6,7,1,2,3,4]) == 3\nassert \nnext_smallest([4,6,7,1,2,3,4,5]) == 4\nassert \nnext_smallest([4,6,7,1,2,3,4,5,6]) == 5\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_smallest([5, 1, 2, 4, 5]) == 1, 'wrong answer'\nassert next_smallest([4, 1, 2, 5, 5]) == 2, 'wrong answer'\nassert next_smallest([5, 5, 5, 5, 5]) == 5, 'wrong answer'\nassert next_smallest([5, 1, 2, 5, 5]) is None, 'wrong answer'\n",
        "num_ids_2": 49,
        "num_ids_4": 97
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert next_smallest([]) == None\nassert next_smallest([1, 2, 3]) == 2\nassert next_smallest([0, 3, 4, 1]) == 0\nassert next_smallest([1, 2, 3, 1]) == 1\n",
        "num_ids_2": 13,
        "num_ids_4": 45
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_smallest([]) == None, 'Input = []'\nassert     next_smallest([1, 2]) == 1, 'Input = [1, 2]'\nassert     next_smallest([5, 2, 1, 4, 3]) == 1, 'Input = [5, 2, 1, 4, 3]'\nassert     next_smallest([1, 2, 4, 5, 6]) == 4, 'Input = [1, 2, 4, 5, 6]'\nassert     next_smallest([3, 5, 1, 4, 6]) == 5, 'Input = [3, 5, 1, 4, 6]'\n",
        "num_ids_2": 40,
        "num_ids_4": 110
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_bored(\"I am too bored. Help, please!\") == 2\nassert     is_bored(\"I am too bored. Help!\") == 0\nassert     is_bored(\"I am too bored. I?\") == 0\nassert     is_bored(\"I am too bored.\") == 3\n\nprint(\"All the tests are passed successfully.\"",
        "num_ids_2": 38,
        "num_ids_4": 71
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    is_bored(\"I\") == 1\nassert \n    is_bored(\"I. How are you?\") == 2\nassert \n    is_bored(\"Are you bored yet?\") == 3\nassert \n    is_bored(\"I.. am bored\") == 1\nassert \n    is_bored(\"I? am bored\") == 1\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(is_bored(\"I am Bored.! How are you feeling?\"))\nassert is_bored(\"I am bored\") == 2\nassert is_bored(\"I am Bored. How are you feeling?\") == 0\nassert is_bored(\"I am Bored. How are you feeling? I am Bored too.\") == 2\nprint(\"You are passed\")\n",
        "num_ids_2": 16,
        "num_ids_4": 61
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_bored('I. how are you?') == False\nassert     is_bored('I! how are you?') == False\nassert     is_bored('I.? how are you?') == True\nassert     is_bored('I.?? how are you?') == True\nassert     is_bored('I.!? how are you?') == True\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_bored(\"I am bored.\") == True, \"First test failed\"\nassert     is_bored(\"I am bored. I am bored.\") == False, \"Second test failed\"\nassert     is_bored(\"I am bored. No I am not\") == True, \"Third test failed\"\nassert     is_bored(\"I am bored. I am not bored.\") == True, \"Fourth test failed\"\nassert     is_bored(\"I am not bored. I am not bored. I am not bored. I am not bored.\") == False, \"Fifth test failed\"\n",
        "num_ids_2": 44,
        "num_ids_4": 94
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_bored(\"I am a bored boy\")\nassert not is_bored(\"I am a little bored\")\nassert is_bored(\"I am a bored boy?\")\nassert not is_bored(\"I am a little bored\")\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_bored(\"I. Not so bored.\") == 1\nassert is_bored(\"I. Not so boring.\") == 2\nassert is_bored(\"I. Not so bored. I'm just tired.\") == 3\nassert is_bored(\"I. Not so boring. I think so.\") == 4\nassert is_bored(\"I. Not so bored. Why are you feeling so bored?\") == 5\n",
        "num_ids_2": 31,
        "num_ids_4": 70
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_bored('') == 0, 'Empty sentence'\nassert     is_bored('I') == 1, 'No boredom sentence'\nassert     is_bored('I..') == 1, 'Delimiter'\nassert     is_bored('I..?') == 0, 'Delimiter'\nassert     is_bored('I!') == 1, 'Delimiter'\n",
        "num_ids_2": 35,
        "num_ids_4": 74
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nF-10 Challenge - String Manipulation - String Manipulation\n\nComplete the function scramble(str) that takes a string of letters and a number N and scrambles the letters by moving N letters forward in the alphabet, then returns the scrambled string.\n\nNotes:\n\nstr only contains lower case letters and '-'\nN is guaranteed to be less than or equal to 26\nExamples\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef any_int(a, b, c):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert any_int(2,3,5) == False\nassert any_int(3,5,7) == True\nassert any_int(4,5,7) == False\nassert any_int(10,4,7) == True\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     any_int(1, 2, 3) == False, 'assertion error: any_int(1, 2, 3)'\nassert     any_int(2, 2, 2) == True, 'assertion error: any_int(2, 2, 2)'\nassert     any_int(2, 2, 1) == False, '",
        "num_ids_2": 62,
        "num_ids_4": 79
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     any_int(1, 2, 3) == False, \"Error, 2+1=3\"\nassert any_int(1, 2, 3) == True, \"Error, 2+1=3\"\nassert any_int(1.2, 2.3, 3.3) == True, \"Error, 1.2+2.3=3.3\"\nassert any_int(1, 2.3, 3.3) == True, \"Error, 1+2.3=3.3\"\nassert any_int(1, 1, 2) == False, \"Error, 1+1=2\"\n",
        "num_ids_2": 49,
        "num_ids_4": 117
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     any_int(2, 1, 4) == True\nassert     any_int(1, 1, 1) == False\nassert     any_int(2, 2, 3) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     any_int(1, 2, 3) == True, \"First\"\nassert     any_int(1, 2, 2) == False, \"Second\"\nassert     any_int(2, 2, 2) == True, \"Third\"\nassert     any_int(1, 2, 1) == False, \"Forth\"\nassert     any_int(2, 2, 1) == False, \"Fifth\"\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     encode(\"Hello World\") == \"hElLo WoRLd\"\nassert     encode(\"Hello World\") == \"hElLo WoRLd\"\nassert     encode(\"Hello World\") == \"hElLo WoRLd\"\nassert     encode(\"Hello World\") == \"hElLo WoRLd\"\nassert     encode(\"Hello World\") == \"hElLo WoRLd\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    pass\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert encode(\"I love you\") == \"A love a I\"\nassert encode(\"I love you\") == \"a love I I\"\nassert encode(\"I love you\") == \"a love I I\"\nassert encode(\"I love you\") == \"a love I I\"\n",
        "num_ids_2": 18,
        "num_ids_4": 48
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint encode(INPUT)\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(encode(''))\nprint(encode('a'))\nprint(encode('A'))\nprint(encode('U'))\nprint(encode('E'))\nprint(encode('aA'))\nprint(encode('AAAA'))\nprint(encode('AAABBBBCCCCCDDEEEEEE'))\nprint(encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\nprint(encode('abcdefghijklmnopqrstuvwxyz'))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encode(\"aaaC\") == \"aAAc\"\nassert     encode(\"aaAAc\") == \"AaaC\"\nassert     encode(\"aBc\") == \"aBC\"\nassert     encode(\"aAc\") == \"AAc\"\nassert     encode(\"aAc\") == \"AAc\"\n",
        "num_ids_2": 31,
        "num_ids_4": 60
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\"\"\"\n\n===========================================\nWORDDELIMITER (1P, 7P, 20P)\n===========================================\n\nWrite a function word_delimiter(word) that takes a word and \nreturns the word, with the delimiter ('-') inserted between the \nfirst and last letters in the word. \n\nThe delimiter should be inserted with the letters in order \nthat they appear in the word.\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('passed the test!')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_dict_case({}) == False, 'Empty dictionary'\nassert     check_dict_case({'key':'value'}) == True, 'All key should be in lower case'\nassert     check_dict_case({'KEY':'value'}) == False, 'All key should be in lower case'\n",
        "num_ids_2": 45,
        "num_ids_4": 73
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_dict_case({\"A\":\"a\",\"B\":\"b\",\"C\":\"c\"}) == True, \"Should return True\"\nassert     check_dict_case({\"A\":\"a\",\"B\":\"b\",\"C\":\"c\",\"D\":\"d\"}) == False, \"Should return False\"\nassert     check_dict_case({}) == False, \"Should return False\"\nassert     check_dict_case({'a'}) == False, \"Should return False\"\nassert     check_dict_case({'a':1}) == False, \"Should return False\"\n",
        "num_ids_2": 66,
        "num_ids_4": 105
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndict = {\"name\":\"Cristina\", \"age\":3, \"lastname\":\"R\u00fcdiger\"}\nassert check_dict_case(dict) == True\n\nassert not check_dict_case({\"a\":1, \"b\":2, \"c\":3}) == True\n",
        "num_ids_2": 15,
        "num_ids_4": 41
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_dict_case({'hello':1,'world':2}) == False, 'The result should be False'\nassert     check_dict_case({'Hello':1,'World':2}) == False, 'The result should be False'\nassert     check_dict_case({1:'hello',2:'world'}) == True, 'The result should be True'\n\ndef check_dict_values(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys have a value of 1 and all \n    values are integers, else return False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 56,
        "num_ids_4": 84
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_dict_case({'first_name': 'franz', 'lname': 'guti\u00e9rrez', 'username': 'frgutier', 'age': 26}) == True, \"Wrong answer\"\nassert    check_dict_case({'first_name': 'franz', 'lname': 'guti\u00e9rrez', 'username': 'frgutier', 'age': 25}) == True, \"Wrong answer\"\nassert    check_dict_case({'first_name': 'frgutier', 'lname': 'guti\u00e9rrez', 'username': 'franz', 'age': 25}) == False, \"Wrong answer\"\nassert    check_dict_case({'first_name': 'franz', 'lname': 'guti\u00e9rrez', 'username': 'frgutier', 'age': 25}) == False, \"Wrong answer\"\nassert    check_dict_case({'first_name': 'franz', 'lname': 'guti\u00e9rrez', 'username': 'frgutier'}) == False, \"Wrong answer\"\n",
        "num_ids_2": 102,
        "num_ids_4": 204
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_dict_case({'key_one': 'one', 'key_TWO': 'Two'}) == True, \\\n    \"Something is wrong with the code\"\nassert     check_dict_case({}) == False, \\\n    \"Something is wrong with the code\"\nassert     check_dict_case({'key_one': 'one', 'key_TWO': 'Two'}) == False, \\\n    \"Something is wrong with the code\"\nassert     check_dict_case({'KEY_ONE': 'one', 'KEY_TWO': 'Two'}) == False, \\\n    \"Something is wrong with the code\"\n\nprint(\"If the dictionary is empty then the function returns False\")\n",
        "num_ids_2": 45,
        "num_ids_4": 107
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_dict_case({}) == False, \"Empty Dictionary\"\nassert     check_dict_case({\"A\": \"a\", \"B\": \"B\"}) == True, \"All lower case\"\nassert     check_dict_case({\"A\": \"a\", \"B\": \"b\"}) == False, \"All upper case\"\n",
        "num_ids_2": 47,
        "num_ids_4": 77
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_dict_case({})    == False, \"The empty dictionary shouldn't be passed into the function\"\nassert     check_dict_case({'a': 1, 'b': 2}) == False, \"The dictionary with keys in mixed case should return False\"\nassert     check_dict_case({'a': 1, 'b': 2, 'C': 3}) == False, \"The dictionary with keys in mixed case should return False\"\nassert     check_dict_case({'A': 1, 'B': 2, 'C': 3}) == True, \"The dictionary with keys in lower case should return True\"\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3}) == True, \"The dictionary with keys in mixed case should return True\"\n",
        "num_ids_2": 60,
        "num_ids_4": 138
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'hello': 'hi', 'goodbye': 'bye'}) == False\nassert     check_dict_case({'hello': 'HI', 'goodbye': 'bye'}) == True\nassert     check_dict_case({'hello': 'Hi', 'goodbye': 'bye'}) == True\nassert     check_dict_case({'hello': 'Hi', 'goodbye': 'Bye'}) == True\n",
        "num_ids_2": 37,
        "num_ids_4": 87
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncount_up_to(2) == [2]\ncount_up_to(3) == [2,3]\ncount_up_to(4) == [2,3,5]\ncount_up_to(5) == [2,3,5,7]\ncount_up_to(6) == [2,3,5,7,11]\ncount_up_to(7) == [2,3,5,7,11,13]\ncount_up_to(8) == [2,3,5,7,11,13,17]\ncount_up_to(9) == [2,3,5,7,11,13,17,19]\ncount_up_to(10) == [2,3,5,7,11,13,17,19,23]\ncount_up_to(11) == [2,3,5,7,11,13,17,19,23,29]\ncount_up_to(12) == [2,3,5,7,11,13,17,19,23,29,31]\ncount_up_to(13) == [2,3,5,7,11,13,17,19,23,29,31,37]\ncount_up_to(14) == [2,3,5,7,11,13,17,19,23,29,31,37,41]\ncount_up_to(15) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43]\ncount_up_to(16) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\ncount_up_to(17) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53]\ncount_up_to(18) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59]\ncount_up_to(19) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61]\ncount_up_to(20) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67]\ncount_up_to(21) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71]\ncount_up_to(22) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73]\ncount_up_to(23) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79]\ncount_up_to(24) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83]\ncount_up_to(25) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89]\ncount_up_to(26) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,91]\ncount_up_to(27) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,91,93]\ncount_up_to(28) == [2,3,5,7,11,13,17,19,23,29,31,37,4",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_up_to(7) == [2,3,5,7]\nassert     count_up_to(4) == [2,3]\nassert     count_up_to(10) == [2,3,5,7]",
        "num_ids_2": 38,
        "num_ids_4": 59
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_up_to(4) == [2, 3]\nassert count_up_to(5) == [2, 3, 5]\nassert count_up_to(3) == [2, 3]\n",
        "num_ids_2": 19,
        "num_ids_4": 53
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # 1) the function should return the output as an array\nassert count_up_to(3) == [2, 3]\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_up_to(5) == [2, 3, 5, 7, 11, 13]\nassert     count_up_to(1) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nassert     count_up_to(0) == []\n",
        "num_ids_2": 88,
        "num_ids_4": 101
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncount_up_to(6) == {1, 2, 3, 5}\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_up_to(5) == [2,3,5]\nassert count_up_to(6) == [2,3,5,7]\nassert count_up_to(20) == [2,3,5,7,11,13,17,19]\n",
        "num_ids_2": 21,
        "num_ids_4": 69
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ncount_up_to(10) == [2, 3, 5, 7]\ncount_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\ncount_up_to(1000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n\n\ndef prime_count(n):\n    \"\"\"Implement a function that takes an integer n and returns the number of prime integers that are less than or equal to n. \n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (multiply(5, 57) == 7)\nassert     (multiply(3, 4) == 0)\nassert     (multiply(2, 9) == 12)\nassert     (multiply(5, 6) == 30)\nassert     (multiply(5, 7) == 35)\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply(123, 846) == 6756, \"Failed\"\nassert     multiply(942, 123) == 909, \"Failed\"\nassert     multiply(123, 932) == 912, \"Failed\"\nassert     multiply(942, 932) == 981, \"Failed\"\n\nprint(\"\\nPassed.\")\n",
        "num_ids_2": 40,
        "num_ids_4": 81
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    multiply(34, 3) == 9\n    multiply(39, 7) == 49\n    multiply(237, 8) == 966\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert multiply(12,5) == 20\nassert multiply(5,12) == 20\nassert multiply(123,123) == 656\n",
        "num_ids_2": 13,
        "num_ids_4": 34
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply(123, 12) == 312, \"You have a problem with the unit digits.\"\nassert     multiply(123, 34) == 234, \"You have a problem with the unit digits.\"\nassert     multiply(123, 567) == 649, \"You have a problem with the unit digits.\"\nassert     multiply(123, 435) == 795, \"You have a problem with the unit digits.\"\n\n",
        "num_ids_2": 48,
        "num_ids_4": 99
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_upper(\"AFTEOSL\") == 3\nassert     count_upper(\"AFTEOSL\") == 3\n\ndef count_upper_3(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in odd indices.\n    \"\"\"\n    pass\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    string = input(\"Input a string:\")\n    count = count_upper(string)\n    print(\"Count of uppercase vowels:\", count)\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_upper2(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_upper(\"\")    == 0, \"Empty String\"\nassert     count_upper(\"A\")    == 0, \"Upper case\"\nassert     count_upper(\"ABB\")    == 0, \"Upper case\"\nassert     count_upper(\"abc\")    == 0, \"Upper case\"\nassert     count_upper(\"ACD\")    == 0, \"Upper case\"\n",
        "num_ids_2": 34,
        "num_ids_4": 71
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    for index, i in enumerate(s):\n        if index % 2 == 0:\n            if i.isupper():\n                count += 1\n    return count\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_upper(\"\") == 0, \"Empty string.\"\nassert     count_upper(\"a\") == 0, \"Single character.\"\nassert     count_upper(\"as\") == 0, \"Single character.\"\nassert     count_upper(\"aas\") == 0, \"Single character.\"\nassert     count_upper(\"aas\") == 0, \"Single character.\"\n",
        "num_ids_2": 31,
        "num_ids_4": 64
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_upper('abd') == 3\nassert     count_upper('abc') == 2\nassert     count_upper('AAa') == 2\nassert     count_upper('AaA') == 2\nassert     count_upper('AaAa') == 0\n",
        "num_ids_2": 23,
        "num_ids_4": 48
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     closest_integer(\"2.5\") == 2, \"Should be 2\"\nassert     closest_integer(\"3.5\") == 3, \"Should be 3\"\nassert     closest_integer(\"3.1\") == 3, \"Should be 3\"\nassert     closest_integer(\"-3.1\") == -3, \"Should be -3\"\nassert     closest_integer(\"3.0001\") == 3, \"Should be 3\"\n",
        "num_ids_2": 42,
        "num_ids_4": 87
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(closest_integer(\"-14.5\"))\nprint(closest_integer(\"14.5\"))\nprint(closest_integer(\"14.4\"))\nprint(closest_integer(\"0.000000001\"))\nprint(closest_integer(\"0.00000000000\"))\nprint(closest_integer(\"0.000000000001\"))\nprint(closest_integer(\"0.0000000000001\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     closest_integer(\"1.1\") == 1\nassert closest_integer(\"1.5\") == 1\nassert closest_integer(\"1.0\") == 1\nassert closest_integer(\"1.000000000000001\") == 1\nassert closest_integer(\"-1.000000000000001\") == -1\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     closest_integer(\"14.5\")    == 15, 'Test 1 Failed'\nassert     closest_integer(\"-14.5\")    == -15, 'Test 2 Failed'\n\nprint('Test:')\nprint('  Correct:', closest_integer(\"14.5\"))\nprint('  Correct:', closest_integer(\"-14.5\"))\nprint('  Correct:', closest_integer(\"14.4\"))\nprint('  Correct:', closest_integer(\"-14.4\"))\nprint('  Correct:', closest_integer(\"14.5\"))\nprint('  Correct:', closest_integer(\"-14.5\"))\nprint('  Correct:', closest_integer(\"14.6\"))\nprint('  Correct:', closest_integer(\"-14.6\"))\nprint('  Correct:', closest_integer(\"14.7\"))\nprint('  Correct:', closest_integer(\"-14.7\"))\nprint('  Correct:', closest_integer(\"14.8\"))\nprint('  Correct:', closest_integer(\"-14.8\"))\nprint('  Correct:', closest_integer(\"14.9\"))\nprint('  Correct:', closest_integer(\"-14.9\"))\nprint('  Correct:', closest_integer(\"14.0\"))\nprint('  Correct:', closest_integer(\"-14.0\"))\nprint('  Correct:', closest_integer(\"14.0\"))\nprint('  Correct:', closest_integer(\"-14.0\"))\nprint('  Correct:', closest_integer(\"14.1\"))\nprint('  Correct:', closest_integer(\"-14.1\"))\nprint('  Correct:', closest_integer(\"14.2\"))\nprint('  Correct:', closest_integer(\"-14.2\"))\nprint('  Correct:', closest_integer(\"14.3\"))\nprint('  Correct:', closest_integer(\"-14.3\"))\nprint('  Correct:', closest_integer(\"14.4\"))\nprint('  Correct:', closest_integer(\"-14.4\"))\nprint('  Correct:', closest_integer(\"14.5\"))\nprint('  Correct:', closest_integer(\"-14.5\"))\nprint('  Correct:', closest_integer(\"14.6\"))\nprint('  Correct:', closest_integer(\"-14.6\"))\nprint('  Correct:', closest_integer(\"14.7\"))\nprint('  Correct:', closest_integer(\"-14.7\"))\nprint('  Correct:', closest_integer(\"14.8\"))\nprint('  Correct:', closest_integer(\"-14.8\"))\nprint('  Correct:', closest_integer(\"14.9\"))\nprint('  Correct:', closest_integer(\"-14.9\"))\nprint('  Correct:', closest_integer(\"14.0\"))\nprint('  Correct:', closest_integer(\"-14.0\"))\nprint('  Correct:', closest_integer(\"14.1\"))\nprint('  Correct:', closest_integer(\"-14.1\"))\nprint('  Correct:', closest_integer(\"14.2\"))\nprint('  Correct:', closest_integer(\"-14.2\"))\nprint('  Correct:', closest_integer(\"14.3\"))\nprint('  Correct:', closest_integer(\"-14.3\"))\nprint('  Correct:', closest_integer(\"14.4\"))\nprint('  Correct:', closest_integer(\"-14.4\"))\nprint('  Correct:', closest_integer(\"14.5\"))\nprint('  Correct:', closest_integer(\"-14.5\"))\nprint('  Correct:', closest_integer(\"14.6\"))\nprint('  Correct:', closest_integer(\"-14.6\"))\nprint('  Correct:', closest_integer(\"14.7\"))\nprint('  Correct:', closest_integer(\"-14.7\"))\nprint('  Correct:', closest_integer(\"14.8\"))\nprint('  Correct:', closest_integer(\"-14.8\"))\nprint('  Correct:', closest_integer(\"14.9\"))\nprint('  Correct:', closest_integer(\"-14.9\"))\nprint('  Correct:', closest_integer(\"14.0\"))\nprint('  Correct:', closest_integer(\"-14.0\"))\nprint('  Correct:', closest_integer(\"14.1\"))\nprint('  Correct:', closest_integer(\"-14.1\"))\nprint('  Correct:', closest_integer(\"14.2\"))\nprint('  Correct:', closest_integer(\"-14.2\"))\nprint('  Correct:', closest_integer(",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.5\")!= 15\nassert     closest_integer(\"-14.5\")!= -15\nassert     closest_integer(\"14.5\") == 15\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.6\") == 15\nassert     closest_integer(\"-14.5\") == -15\n",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert    closest_integer(\"-14.5\") == -15\nassert    closest_integer(\"0.5\") == 0\nassert    closest_integer(\"-0.5\") == 0\nassert    closest_integer(\"5.5\") == 5\n",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\nassert     make_a_pile(5) == [1, 1, 1, 1, 1]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\nassert     make_a_pile(5) == [1, 1, 1, 1, 1]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     make_a_pile(3) == [3,1]\nassert     make_a_pile(4) == [4,2]\nassert     make_a_pile(7) == [7,4]\nassert     make_a_pile(11) == [11,8]\nassert     make_a_pile(25) == [25,16]\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 2, 1]\nassert     make_a_pile(4) == [1, 3, 2, 1]\nassert     make_a_pile(5) == [1, 4, 3, 2, 1]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     make_a_pile(0) == []\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1,1]\nassert     make_a_pile(3) == [1,1,1]\nassert     make_a_pile(4) == [1,1,1,1]\n",
        "num_ids_2": 30,
        "num_ids_4": 68
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nmake_a_pile(1) == [1]\nmake_a_pile(2) == [1, 1]\nmake_a_pile(3) == [1, 1, 1]\nmake_a_pile(4) == [1, 1, 1, 1]\nmake_a_pile(5) == [1, 1, 1, 1, 1]\nmake_a_pile(6) == [1, 1, 1, 1, 1, 1]\nmake_a_pile(7) == [1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(8) == [1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(9) == [1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(10) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\nmake_a_pile(10**7) == (\n    [\n        10**7 - 1,\n        10**7 - 5,\n        10**7 - 9,\n        10**7 - 13,\n        10**7 - 17,\n        10**7 - 21,\n        10**7 - 25,\n        10**7 - 29,\n        10**7 - 33,\n        10**7 - 37,\n        10**7 - 41,\n        10**7 - 45,\n        10**7 - 49,\n        10**7 - 53,\n        10**7 - 57,\n        10**7 - 61,\n        10**7 - 65,\n        10**7 - 69,\n        10**7 - 73,\n        10**7 - 77,\n        10**7 - 81,\n        10**7 - 85,\n        10**7 - 89,\n        10**7 - 93,\n        10**7 - 97,\n        10**7 - 101,\n        10**7 - 105,\n        10**7 - 109,\n        10**7 - 113,\n        10**7 - 117,\n        10**7 - 121,\n        10**7 - 125,\n        10**7 - 129,\n        10**7 - 133,\n        10**7 - 137,\n        10**7 - 141,\n        10**7 - 145,\n        10**7 - 149,\n        10**7 - 153,\n        10**7 - 157,\n        10**7 - 161,\n        10**7 - 165,\n        10**7 - 169,\n        10**7 - 173,\n        10**7 - 177,\n        10**7 - 181,\n        10**7 - 185,\n        10**7 - 189,\n        10**7 - 193,\n        10**7 - 197,\n        10**7 - 201,\n        10**7 - 205,\n        10**7 - 209,\n        10**7 - 213,\n        10**7 - 217,\n        10**7 - 221,\n        10**7 - 225,\n        10**7 - 229,\n        10**7 - 233,\n        10**7 - 237,\n        10**7 - 241,\n        10**7 - 245,\n        10**7 - 249,\n        10**7 - 253,\n        10**7 - 257,\n        10**7 - 261,\n        10**7 - 265,\n        10**7 - 269,\n        10**7 - 273,\n        10**7 - 277,\n        10**7 - 281,\n        10**7 - 285,\n        10**7 - 289,\n        10**7 - 293,\n        10**7 - 297,\n        10**7 - 301,\n        10**7 - 305,\n        10**7 - 309,\n        10**7 - 313,\n        10**7 - 317,\n        10**7 - 321,\n        10**7 - 325,\n        10**7 - 329,\n        10**7 - 333,\n        10**7 - 337,\n        10**7 - 341,\n        10**7 - 345,\n        10**7 - 349,\n        10**7 - 353,\n        10**7 - 357,\n        10**7 - 361,\n        10**7 - 365,\n        10**7 - 369,\n        10**7 - 373,\n        10**7 - 377,\n        10**7 - 381,\n        10**7 - 38",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     make_a_pile(5) ==    [4,1,1,1,1]\nassert     make_a_pile(1) ==    [1]\nassert     make_a_pile(2) ==    [1,1]\nassert     make_a_pile(5) ==    [1,1,1,1,1]\nassert     make_a_pile(5) ==    [1,1,1,1,1]\n",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nmake_a_pile(3) == [3, 1, 1]\nmake_a_pile(4) == [3, 1, 1, 1]\nmake_a_pile(5) == [3, 1, 1, 1, 1]\nmake_a_pile(6) == [3, 1, 1, 1, 1, 1]\nmake_a_pile(7) == [3, 1, 1, 1, 1, 1, 1]\nmake_a_pile(8) == [3, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(9) == [3, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(10) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(11) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(12) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(13) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(14) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(15) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(16) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(17) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(18) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(19) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(20) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(21) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(22) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(23) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(24) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(25) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(26) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(27) == [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1,1]\nassert     make_a_pile(4) == [1,1,1,1]\nassert     make_a_pile(5) == [1,1,1,1,1]\nassert     make_a_pile(8) == [1,1,1,1,1,1,1,1]\n",
        "num_ids_2": 34,
        "num_ids_4": 80
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     words_string('hello,world') == ['hello', 'world']\nassert     words_string('hello,world,hello') == ['hello', 'world', 'hello']\nassert     words_string('hello,world,hello,hello,world') == ['hello', 'world', 'hello', 'hello', 'world']\nassert     words_string('hello,world,hello,hello,world,hello,hello,world,hello') == ['hello', 'world', 'hello', 'hello', 'world', 'hello', 'hello', 'hello', 'world']\nassert     words_string('hello,world,hello,hello,world,hello,hello,world,hello,world') == ['hello', 'world', 'hello', 'hello', 'world', 'hello', 'hello', 'hello', 'world']\n",
        "num_ids_2": 41,
        "num_ids_4": 127
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert words_string('testing, words') == ['testing', 'words']\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     words_string('abc, def') == ['abc', 'def']\nassert     words_string('abc def') == ['abc', 'def']\nassert     words_string('abc,def,ghi') == ['abc', 'def', 'ghi']\nassert     words_string('abc,def,ghi; jkl, mno') == ['abc', 'def', 'ghi', 'jkl','mno']\nassert words_string('abc,def,ghi; jkl,mno; pqr,stu') == ['abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu']\n",
        "num_ids_2": 35,
        "num_ids_4": 98
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     words_string(\"a, b, c, d, e\")     == [\"a\", \"b\", \"c\", \"d\", \"e\"]\nassert     words_string(\"a,,,,,,,,,,,,,,,,,,\")     == [\"a\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\nassert     words_string(\"a,b,c\")     == [\"a\", \"b\", \"c\"]\nassert     words_string(\"a, b,,c\")     == [\"a\", \"b\", \"c\"]\nassert     words_string(\"a, b, c\")     == [\"a\", \"b\", \"c\"]\n",
        "num_ids_2": 86,
        "num_ids_4": 134
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     words_string('Python, C++, Java, C') == ['Python', 'C++', 'Java', 'C']\nassert     words_string('Python,   C++, Java,   C') == ['Python', 'C++', 'Java', 'C']\nassert     words_string('Hello, World, Python, C') == ['Hello', 'World', 'Python', 'C']\nassert     words_string('   Hello, World, Python,   C') == ['Hello', 'World', 'Python', 'C']\nassert words_string('  Hello, World, Python,  C') == ['Hello', 'World', 'Python', 'C']\n",
        "num_ids_2": 62,
        "num_ids_4": 120
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     words_string(\"this,is,my,first,test,case\") ==     [\"this\", \"is\", \"my\", \"first\", \"test\", \"case\"]\nassert     words_string(\"foo bar baz\") == [\"foo\", \"bar\", \"baz\"]\nassert     words_string(\"hello world\") == [\"hello\", \"world\"]\nassert     words_string(\"   \") == [\"\"]\nassert     words_string(\"  hello world\") == [\"hello\", \"world\"]\n",
        "num_ids_2": 62,
        "num_ids_4": 91
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     words_string(\"hello world, this is a string\") == [\"hello\", \"world\", \"this\", \"is\", \"a\", \"string\"], \"Wrong!\"\nassert words_string(\"hello world\") == [\"hello\", \"world\"], \"Wrong!\"\nassert words_string(\"hello world, this is a string\") == [\"hello\", \"world\", \"this\", \"is\", \"a\", \"string\"], \"Wrong!\"\n",
        "num_ids_2": 58,
        "num_ids_4": 95
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nchoose_num(10, 20) == 11, \"Wrong output for choose_num(10, 20): {0}\".format(choose_num(10, 20))\nassert \nchoose_num(10, 20) == -1, \"Wrong output for choose_num(10, 20): {0}\".format(choose_num(10, 20))\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     choose_num(1, 5) == 2, \"Wrong answer in choose_num\"\nassert     choose_num(3, 5) == -1, \"Wrong answer in choose_num\"\nassert     choose_num(-1, 0) == -1, \"Wrong answer in choose_num\"\nassert     choose_num(3, 4) == 2, \"Wrong answer in choose_num\"\n\nprint(\"You've successfully passed the task\"",
        "num_ids_2": 49,
        "num_ids_4": 98
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nchoose_num(1, 100) == 1\nassert choose_num(100, 200) == -1\nassert choose_num(3, 4) == 3\n\n",
        "num_ids_2": 16,
        "num_ids_4": 28
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     choose_num(2, 5) == 3\nassert     choose_num(5, 5) == 5\nassert     choose_num(8, 11) == 9\nassert     choose_num(2, 4) == -1\n\ndef fibonacci(n):\n    \"\"\"This function takes a positive integer n and returns the nth \n    fibonacci number. If n is not a positive integer, the function should \n    return -1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     choose_num(1, 10) == 9\nassert choose_num(1, 100) == -1\nassert choose_num(10, 20) == 19\nassert choose_num(10, 1000) == -1",
        "num_ids_2": 27,
        "num_ids_4": 52
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     choose_num(4, 8) == 6\nassert choose_num(0, 10) == 10\nassert choose_num(1, 10) == 1\nassert choose_num(2, 10) == -1\nassert choose_num(11, 10) == -1\n",
        "num_ids_2": 26,
        "num_ids_4": 51
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     choose_num(2, 10) == -1\nassert     choose_num(2, 15) == -1\nassert     choose_num(15, 15) == -1\nassert     choose_num(15, 20) == 20\nassert     choose_num(15, 30) == 20\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rounded_avg(1,4) == 1\nassert rounded_avg(4,4) == 4\nassert rounded_avg(4,5) == 4\nassert rounded_avg(2,4) == 2\nassert rounded_avg(2,5) == 2\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nrounded_avg(1, 5) == 2\nrounded_avg(1, 2) == 1\nrounded_avg(10, 20) == 15\nrounded_avg(10, 21) == 15\nrounded_avg(1, 2) == 1\nrounded_avg(2, 3) == 2\nrounded_avg(5, 3) == 2\nrounded_avg(3, 3) == 3\nrounded_avg(4, 4) == 4\nrounded_avg(10, 11) == 11\nrounded_avg(11, 12) == 11\nrounded_avg(0, 0) == 0\nrounded_avg(1, 0) == 0\nrounded_avg(0, 1) == 0\nrounded_avg(0, 0) == 0\nrounded_avg(10, 11) == 11\nrounded_avg(11, 12) == 11\nrounded_avg(11, 11) == 10\nrounded_avg(11, 10) == 10\nrounded_avg(11, 0) == 11\nrounded_avg(11, 1) == 10\nrounded_avg(10, 0) == 10\nrounded_avg(0, 1) == 0\nrounded_avg(0, 0) == 0",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert rounded_avg(1, 5) == 1\nassert rounded_avg(3, 7) == 3\nassert rounded_avg(5, 9) == 5\nassert rounded_avg(10, 21) == 5\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nrounded_avg(4,5) == 5\nrounded_avg(6,7) == 6\nrounded_avg(8,8) == 8\nrounded_avg(9,9) == 9\nrounded_avg(10,9) == 9\nrounded_avg(0,10) == 0\nrounded_avg(0,0) == 0\nrounded_avg(0,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(0,10) == 0\nrounded_avg(0,0) == 0\nrounded_avg(0,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_avg(10,0) == 0\nrounded_a",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rounded_avg(1, 1) == 1\nassert     rounded_avg(5, 9) == 5\nassert     rounded_avg(1, 10) == 2\nassert     rounded_avg(1, 5) == -1\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rounded_avg(5, 10) == 5\nassert     rounded_avg(5, 8) == 5\nassert     rounded_avg(5, 7) == 5\nassert     rounded_avg(5, 6) == 5\nassert     rounded_avg(5, 5) == 5\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nrounded_avg(1, 2) == 1\nassert rounded_avg(1, 3) == 1\nassert rounded_avg(1, 4) == 1\nassert rounded_avg(1, 5) == 1\nassert rounded_avg(2, 3) == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rounded_avg(1, 2) == 1\nassert     rounded_avg(1, 3) == 1.5\nassert     rounded_avg(3, 4) == 2\nassert     rounded_avg(5, 6) == 2\nassert rounded_avg(-1, 1) == -1\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rounded_avg(2, 5) == 2\nassert     rounded_avg(2, 10) == 2\nassert     rounded_avg(1, 2) == 1\nassert     rounded_avg(10, 20) == 10\nassert     rounded_avg(-1, -2) == -1\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert unique_digits([6,6,9,1,9,6,5,5,4,2,5]) == [6,9,5,5,4]\n\nprint(\"PASSED!\"",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert unique_digits([2, 1, 3, 4, 5, 6, 7, 8, 9, 10]) == sorted([2, 1, 3, 4, 5, 6, 7, 8, 9, 10])\nassert unique_digits([2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == sorted([2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\nassert unique_digits([2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == sorted([2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n",
        "num_ids_2": 53,
        "num_ids_4": 165
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_digits([3, 4, 5, 6, 7, 8]) == [3, 4, 5, 8], 'Wrong'\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7], 'Wrong'\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 8], 'Wrong'\nassert     unique_digits([8, 1, 2, 3, 4, 5, 6, 7, 8]) == [8, 1, 3, 5, 7, 8], 'Wrong'\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], 'Wrong'\nprint('Passed')\n",
        "num_ids_2": 70,
        "num_ids_4": 156
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef smallest_odd_multiple(x, y):\n    \"\"\"Given 2 positive integers x and y, return the smallest odd integer\n    that is divisible by both x and y.\n\n    For example, given x = 3 and y = 6, return 15.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == \n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == \n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == \n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")",
        "num_ids_2": 70,
        "num_ids_4": 108
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef get_list_of_smallest_n_elements(n, li):\n    \"\"\"Given a list of integers li, return the list of n smallest integers \n    in the list.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     by_length([1,2,3,4,5,6,7,8,9]) == ['One','Two','Three','Four','Five','Six','Seven','Eight','Nine']\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"\\tBy Length: \", by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(\"\\tBy Length: \", by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(\"\\tBy Length: \", by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(\"\\tBy Length: \", by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(\"\\tBy Length: \", by_length([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]))\nprint(\"\\tBy Length: \", by_length([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))\nprint(\"\\tBy Length: \", by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef test_by_length():\n    assert by_length([1, 4, 3, 9, 8]) == ['One', 'Three', 'Two', 'Four', 'Five']\n    assert by_length([1, 2, 9, 4, 3, 8]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six']\n    assert by_length([9, 3, 8, 1, 2, 5]) == ['Six', 'Three', 'Four', 'Five', 'One', 'Two']\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    \nif __name__ == \"__main__\":\n    input_arr = list(map(int, input().split()))\n    by_length(input_arr)\n    print(*input_arr)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef by_length2(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            arr[i] = \"One\"\n        elif arr[i] == 2:\n            arr[i] = \"Two\"\n        elif arr[i] == 3:\n            arr[i] = \"Three\"\n        elif arr[i] == 4:\n            arr[i] = \"Four\"\n        elif arr[i] == 5:\n            arr[i] = \"Five\"\n        elif arr[i] == 6:\n            arr[i] = \"Six\"\n        elif arr[i] == 7:\n            arr[i] = \"Seven\"\n        elif arr[i] == 8:\n            arr[i] = \"Eight\"\n        elif arr[i] == 9:\n            arr[i] = \"Nine\"\n        \n    return arr\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(by_length([9,6,6,1,3,8,1,5]))\n\ndef by_length_v2(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    # Sorting by length\n    arr.sort(key=lambda x:x if x >= 1 and x <= 9 else None)\n\n    # Transforming the string to the integer\n    def intToStr(num):\n        return chr(num+64)\n    \n    # Reversing the array\n    arr.reverse()\n\n    # Replacing the digit by its name\n    for i in range(len(arr)):\n        arr[i] = intToStr(arr[i])\n    \n    return arr\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     f(2) == [1,2], \"WRONG\"\nassert     f(3) == [1,2,3], \"WRONG\"\nassert     f(4) == [1,2,3,4], \"WRONG\"\n\nprint(\"Test finished.\")",
        "num_ids_2": 36,
        "num_ids_4": 57
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     f(4) == [1, 2, 4, 6]\nassert     f(5) == [1, 1, 2, 2, 4, 5]\nassert     f(10) == [1, 1, 2, 3, 5, 7, 9, 10, 10, 10]\nassert     f(100) == [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1",
        "num_ids_2": 38,
        "num_ids_4": 1023
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 2]\nassert     f(3) == [1, 2, 3]\nassert     f(4) == [1, 2, 3, 4]\nassert     f(5) == [1, 2, 3, 4, 5]\n",
        "num_ids_2": 24,
        "num_ids_4": 56
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert f(5) == [1, 2, 6, 24, 120]\nassert f(3) == [1, 2, 3]\nassert f(1) == [1]\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"Checking...\")\nprint(f(3))\nprint(f(5))\nprint(f(10))\nprint(f(20))\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     f(3) == [1, 2, 6]\nassert     f(2) == [1, 2]\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test cases\n    assert f(5) == [1, 8, 25, 216, 8128]\n    assert f(10) == [1, 2, 4, 24, 720, 5040, 40320, 362880, 3628800, 39916800]\n    print(\"Congrats, your f function works!\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(10) == (2, 6)\nassert     even_odd_palindrome(12) == (4, 8)\nassert     even_odd_palindrome(3) == (1, 3)\nassert     even_odd_palindrome(11) == (4, 6)\nassert     even_odd_palindrome(5) == (2, 4)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(2) == (1, 1)\nassert     even_odd_palindrome(3) == (0, 2)\nassert     even_odd_palindrome(4) == (1, 1)\nassert     even_odd_palindrome(5) == (1, 2)\nassert     even_odd_palindrome(6) == (2, 2)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert even_odd_palindrome(3) == (0, 1)\nassert even_odd_palindrome(11) == (0, 3)\nassert even_odd_palindrome(999) == (0, 2)\n",
        "num_ids_2": 21,
        "num_ids_4": 57
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(2) == (1, 2)\nassert     even_odd_palindrome(3) == (0, 1)\nassert     even_odd_palindrome(4) == (1, 2)\nassert     even_odd_palindrome(5) == (0, 4)\nassert     even_odd_palindrome(6) == (2, 3)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(2) == (1, 0)\nassert     even_odd_palindrome(3) == (1, 0)\nassert     even_odd_palindrome(4) == (1, 0)\nassert     even_odd_palindrome(5) == (2, 0)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(6) == (1, 3)\nassert     even_odd_palindrome(7) == (0, 0)\nassert     even_odd_palindrome(8) == (2, 4)\nassert     even_odd_palindrome(9) == (1, 1)\nassert     even_odd_palindrome(10) == (2, 3)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(5) == (1,2)\nassert     even_odd_palindrome(9) == (2,4)\nassert even_odd_palindrome(10) == (4,2)\nassert even_odd_palindrome(11) == (1,1)\nassert even_odd_palindrome(12) == (4,1)\n",
        "num_ids_2": 38,
        "num_ids_4": 74
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    count_nums([1,2,3,-4,-5]) == 3\n    count_nums([1,2,3,-4,-5,-6,7,8,9]) == 0\n    count_nums([-1,0,1,-2,-3,0,4,5,8]) == 3\n    count_nums([0,0,0,0,0,0,0,0,0,0,0,0,0]) == 9\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_nums([-5, -3, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483",
        "num_ids_2": 1025,
        "num_ids_4": 1025
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_nums([2, 3, 9, -4]) == 4, 'Wrong'\nassert     count_nums([-2, -3, -9, -4]) == 4, 'Wrong'\nassert     count_nums([2, -3, 9, -4]) == 2, 'Wrong'\nassert     count_nums([2, 3, 9, -4]) == 0, 'Wrong'\nassert     count_nums([]) == 0, 'Wrong'\n",
        "num_ids_2": 51,
        "num_ids_4": 100
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_nums(nums) == 2",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1]) == 0\nassert     count_nums([1,2]) == 1\nassert     count_nums([-1,-2,-3]) == 3\nassert     count_nums([-1,-2,-3,1]) == 2\n",
        "num_ids_2": 23,
        "num_ids_4": 54
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1,2,3]) == 3\nassert     count_nums([-123]) == 1\nassert     count_nums([-123,45,1,11,-123]) == 1\nassert     count_nums([-123,45,1,11,-123,-11]) == 4\n",
        "num_ids_2": 27,
        "num_ids_4": 61
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"PASSED\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(count_nums([123,0,-123]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_one_ball([10,20,30,40,50]) == True\nassert     move_one_ball([10,20,30,40,50]) == False\nassert     move_one_ball([10,20,30,40]) == True\nassert     move_one_ball([10,20,30]) == True\nassert     move_one_ball([]) == True\n",
        "num_ids_2": 42,
        "num_ids_4": 78
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef move_one_ball_1(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nmove_one_ball(arr = [10,3,9,6,3,9,7,7,1,0])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    if move_one_ball(arr) == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = []\nsolution = True\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1]\nsolution = True\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 4]\nsolution = True\ntest_case = [arr, solution]\ntest_function(test_case)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_one_ball([1,2,3,4,5]) == True, 'Correctness1'\nassert move_one_ball([2,4,5,1,3]) == True, 'Correctness2'\nassert move_one_ball([2,5,1,3,4]) == False, 'Correctness3'\nassert move_one_ball([]) == True, 'Correctness4'\n",
        "num_ids_2": 53,
        "num_ids_4": 96
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmove_one_ball([5,3,4])\nmove_one_ball([1,2,3])\nmove_one_ball([])\nmove_one_ball([1, 2, 3, 4])\nmove_one_ball([1, 2, 3, 3]",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     exchange([], []) ==     \"NO\"\nassert     exchange([1, 2], []) ==    \"NO\"\nassert     exchange([2, 3, 4], []) == \"NO\"\nassert     exchange([3, 4, 5], []) == \"NO\"\nassert     exchange([2, 3, 4, 5], []) == \"NO\"\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     exchange([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) == \"NO\"\nassert     exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]) == \"YES\"\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     exchange([1,2,3,4,5,6], [2,4,6,8]) == \"YES\"\nassert     exchange([1,2,3,4,5,6], [3,5,7,9,11]) == \"NO\"\nassert     exchange([3,4,5,6,7,8], [1,2,3,4,5,6]) == \"NO\"\nassert     exchange([1,2,3,4,5], [3,4,5,6,7]) == \"NO\"\nassert     exchange([1,2,3,4,5], [3,4,5,6,7,8]) == \"YES\"",
        "num_ids_2": 64,
        "num_ids_4": 130
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_exchange():\n    \"\"\"This is a helper function that tests your exchange function.\n    This should not be used in your code.\n    \"\"\"\n    assert exchange([], []) == \"NO\"\n    assert exchange([1, 3, 6, 8], [2, 4, 6]) == \"YES\"\n    assert exchange([0, 0, 0, 0], [0, 0, 0, 0]) == \"YES\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef main():\n    lst1 = [2,4,6,8]\n    lst2 = [8,4,2,6]\n\n    print(\"The list of numbers:\", lst1)\n    print(\"The list of numbers:\", lst2)\n    print(\"Is the list of numbers\", exchange(lst1,lst2), \"a list of only even numbers?\")\n\nif __name__ == \"__main__\":\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (exchange([], [])    == \"YES\")\nassert     (exchange([1,2,3], [3,4,5]) == \"NO\")\nassert     (exchange([1,2,3], [2,3,4]) == \"NO\")\nassert     (exchange([2,3,4], [1,2,3]) == \"YES\")\nassert     (exchange([2,3,4], [2,3,5]) == \"NO\")\n",
        "num_ids_2": 39,
        "num_ids_4": 87
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_histogram('geeks') == {'e': 3, 'g': 2, 'k': 1}\nassert     get_histogram('Hello') == {'H': 1, 'e': 1, 'l': 1, 'o': 1}\nassert     get_histogram('I') == {'I': 1}\nassert     get_histogram('abababc') == {'a': 3, 'b': 2, 'c': 1}\nassert     get_histogram('aaaabbbbbccccc') == {'a': 4, 'b': 3, 'c': 2}",
        "num_ids_2": 60,
        "num_ids_4": 106
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     histogram(\"abc\") == {'a': 2, 'b': 1, 'c': 1}\nassert     histogram(\"AAbbb\") == {'a': 3, 'b': 2, 'b': 1}\nassert     histogram(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
        "num_ids_2": 52,
        "num_ids_4": 1024
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     histogram(\"\") == {'': 1}\nassert     histogram(\"a\") == {'a': 2}\nassert     histogram(\"ab\") == {'a': 2, 'b': 1}\nassert     histogram(\"aa\") == {'a': 3, 'b': 1}\nassert     histogram(\"aab\") == {'a': 3, 'b': 1, 'a': 2}\n",
        "num_ids_2": 28,
        "num_ids_4": 68
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     histogram('aabb') == {'a': 2, 'b': 2, 'b': 1}\nassert     histogram('aabb') == {'a': 2, 'b': 2, 'b': 1}\nassert     histogram('aaaa') == {'a': 4, 'a': 1}\nassert     histogram('aaaa') == {'a': 4, 'a': 1}\nassert     histogram('abcde') == {'a': 3, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\n",
        "num_ids_2": 52,
        "num_ids_4": 92
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert ",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     histogram('aa') == {'a': 2}\nassert     histogram('aaabb') == {'a': 3, 'b': 1}\nassert     histogram('aabb') == {'a': 2, 'b': 1}\nassert     histogram('aaa') == {'a': 3}\nassert     histogram('bbbbbbb') == {'b': 6}\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     histogram('abab') == {'a':2, 'b':2, 'ab':1}\nassert     histogram('aab') == {'a':2, 'b':1, 'ab':1}\nassert     histogram('abbc') == {'a':1, 'b':2, 'c':1}\nassert     histogram('aababab') == {'a':4, 'b':2, 'ab':2, 'aab':1, 'abab':1}\nassert     histogram('aa') == {'a':2}\n",
        "num_ids_2": 52,
        "num_ids_4": 118
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     histogram(\"abc\") == {'a': 2, 'b': 1, 'c': 1}\nassert     histogram(\"abbc\") == {'a': 2, 'b': 3, 'c': 1}\nassert     histogram(\"\") == {}\nassert     histogram(\"abab\") == {'a': 3, 'b': 2}\nassert     histogram(\"aaa\") == {'a': 3}\n",
        "num_ids_2": 51,
        "num_ids_4": 81
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_delete(\"abaab\",\"aa\") == (\"abaab\",True)\nassert     reverse_delete(\"abaab\",\"ab\") == (\"baaba\",True)\nassert     reverse_delete(\"abaab\",\"ba\") == (\"abaab\",True)\nassert     reverse_delete(\"abaab\",\"abab\") == (\"abaab\",False)\nassert     reverse_delete(\"abaab\",\"a\") == (\"abaab\",False)\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_delete('hxabc', 'xabc') == ('hxab', True)\nassert     reverse_delete('gxac', 'xac') == ('gx', True)\nassert     reverse_delete('hxa', 'xac') == ('hx', True)\nassert     reverse_delete('abac', 'abc') == ('abac', True)\nassert     reverse_delete('abac', 'abc') == ('abac', True)\n",
        "num_ids_2": 45,
        "num_ids_4": 86
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_delete('hello','o') == (\"olleh\", True)\nassert     reverse_delete('hello','l') == (\"olleh\", False)\nassert     reverse_delete('hello','lo') == (\"olleh\", True)\nassert     reverse_delete('hello','ll') == (\"olleh\", False)\nassert     reverse_delete('hello','llh') == (\"olleh\", False)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_delete(\"acb\", \"a\") == (\"\", False)\nassert     reverse_delete(\"abcd\", \"c\") == (\"abcd\", True)\nassert     reverse_delete(\"abcdefg\", \"fg\") == (\"fg\", True)\n",
        "num_ids_2": 38,
        "num_ids_4": 58
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_delete(s = \"abcd\", c = \"bcda\") == (\"dcba\", True)\nassert     reverse_delete(s = \"abcd\", c = \"cda\") == (\"abcd\", False)\nassert     reverse_delete(s = \"a\", c = \"aa\") == (\"a\", True)\nassert     reverse_delete(s = \"aa\", c = \"a\") == (\"aa\", True)\nassert     reverse_delete(s = \"aaa\", c = \"aa\") == (\"aaa\", True)\n",
        "num_ids_2": 52,
        "num_ids_4": 98
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_delete(\"bob\", \"bob\") == (\"bob\", True)\nassert     reverse_delete(\"bob\", \"love\") == (\"bob\", True)\nassert     reverse_delete(\"bob\", \"b\") == (\"bob\", True)\nassert     reverse_delete(\"bob\", \"\") == (\"bob\", True)\nassert     reverse_delete(\"bob\", \"bl\") == (\"bob\", False)\n",
        "num_ids_2": 41,
        "num_ids_4": 80
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_delete( \"racecar\", \"race\") == (\"racecar\", True)\nassert     reverse_delete( \"c\", \"b\") == (\"c\", True)\nassert     reverse_delete(\"ababab\", \"ab\") == (\"ababab\", True)\nassert     reverse_delete(\"racecar\", \"c\") == (\"racecar\", True)\nassert     reverse_delete(\"racecar\", \"a\") == (\"racecar\", False)\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_delete('a','a') == ('a', True), \"Should be ('a',True)\"\nassert reverse_delete('ac','ac') == ('ac',True), \"Should be ('ac',True)\"\nassert reverse_delete('ac','c') == ('c', True), \"Should be ('c',True)\"\nassert reverse_delete('ac','ac') == ('ac', True), \"Should be ('ac',True)\"\nassert reverse_delete('a','b') == ('b', False), \"Should be ('b',False)\"\n",
        "num_ids_2": 49,
        "num_ids_4": 97
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    odd_count(['1', '2', '3', '4', '5']) == ['0', '2', '2', '2', '1']\n    odd_count(['1', '2', '3', '4', '5', '6', '7']) == ['1', '1', '2', '2', '1', '2']\n    odd_count(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) == ['2', '2', '1', '2', '1', '1', '1', '2', '1']\n    odd_count([]) == []\n\nprint('\\033[92m{}\\033[0m'.format(\"All tests passed!\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef josephus(lst, k):\n    \"\"\"Given a list of integers, return a list of integers, whose length is equal\n    to the length of the input list. The i'th element of the output list should be\n    the i'th element of the input list after following the josephus motion.\n    The josephus motion should be after the rearrangement of the odd elements\n    in the i'th element in the input list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_count([\"taco\", \"tat\", \"tomato\"]) == [1, 1, 2]\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    odd = []\n    for i in range(len(lst)):\n        odd.append(len([x for x in lst[i] if x.isdigit() and int(x) % 2 == 1]))\n    return odd\n\nassert     odd_count([\"taco\", \"tat\", \"tomato\"]) == [1, 1, 2]\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    odd = []\n    for i in range(len(lst)):\n        odd.append(len([x for x in lst[i] if x.isdigit() and int(x) % 2 == 1]))\n    return odd\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_count([]) == []\nassert odd_count([\"5\"]) == [1]\nassert odd_count([\"7\", \"2\"]) == [2]\nassert odd_count([\"9\", \"6\", \"4\"]) == [3]\n",
        "num_ids_2": 24,
        "num_ids_4": 61
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(odd_count([\"3\", \"5\", \"7\"])) #[\"3\", \"2\"]\nprint(odd_count([\"1\", \"4\"])) #[\"2\"]\nprint(odd_count([\"4\"])) #[\"1\"]\nprint(odd_count([\"1\", \"2\", \"3\", \"4\"])) #[\"1\", \"2\", \"2\", \"3\"]\nprint(odd_count([\"4\", \"6\", \"8\", \"10\", \"12\", \"13\"])) #[\"5\", \"5\", \"4\"]\nprint(odd_count([\"3\", \"3\", \"5\"])) #[\"3\"]\nprint(odd_count([\"6\", \"5\"])) #[\"4\"]\nprint(odd_count([\"6\", \"8\"])) #[\"3\"]\nprint(odd_count([\"1\", \"8\"])) #[\"1\", \"3\"]\nprint(odd_count([\"1\", \"3\"])) #[\"1\", \"3\"]\nprint(odd_count([\"4\", \"8\", \"9\"])) #[\"4\"]\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef test_odd_count():\n    \"\"\"\n    >>> test_odd_count()\n    'The number of odd digits in the string 0 of the input should be: 1'\n    >>> test_odd_count()\n    'The number of odd digits in the string 3 of the input should be: 3'\n    >>> test_odd_count()\n    'The number of odd digits in the string 4 of the input should be: 4'\n    >>> test_odd_count()\n    'The number of odd digits in the string 5 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 1 of the input should be: 5'\n    >>> test_odd_count()\n    'The number of odd digits in the string 6 of the input should be: 4'\n    >>> test_odd_count()\n    'The number of odd digits in the string 7 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 8 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 9 of the input should be: 1'\n    >>> test_odd_count()\n    'The number of odd digits in the string 10 of the input should be: 4'\n    >>> test_odd_count()\n    'The number of odd digits in the string 11 of the input should be: 1'\n    >>> test_odd_count()\n    'The number of odd digits in the string 12 of the input should be: 4'\n    >>> test_odd_count()\n    'The number of odd digits in the string 13 of the input should be: 3'\n    >>> test_odd_count()\n    'The number of odd digits in the string 14 of the input should be: 2'\n    >>> test_odd_count()\n    'The number of odd digits in the string 15 of the input should be: 4'\n    >>> test_odd_count()\n    'The number of odd digits in the string 16 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 17 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 18 of the input should be: 1'\n    >>> test_odd_count()\n    'The number of odd digits in the string 19 of the input should be: 1'\n    >>> test_odd_count()\n    'The number of odd digits in the string 20 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 21 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 22 of the input should be: 2'\n    >>> test_odd_count()\n    'The number of odd digits in the string 23 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 24 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 25 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 26 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 27 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 28 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 29 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 30 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 31 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 32 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 33 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 34 of the input should be: 0'\n    >>> test_odd_count()\n    'The number of odd digits in the string 35 of the input should b",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_count([\"9\", \"8\", \"3\", \"12\", \"5\"]) == [2, \"odd numbers are : 5, 3, 9\", \"odd numbers are : 4, 3, 12\", \"odd numbers are : 6, 3, 12\"]\nprint(\"You've successfully passed the odd_count function\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nclass MinSubArraySum(object):\n\n    def __init__(self):\n        pass\n\n    def minSubArraySum(self, nums):\n        \"\"\"\n        You are given an array of positive integers nums.\n        A contiguous subarray is a contiguous\n        list of numbers.\n        Return the minimum sum of any non-empty\n        contiguous subarray of nums.\n        \"\"\"\n        pass\n\n\nclass Solution(object):\n    def minSubArrayLen(self, target, nums):\n        \"\"\"\n        :type target: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        start = 0\n        \n        for end in range(len(nums)):\n            \n            while start < len(nums) and nums[end] > target:\n                start += 1\n            if start >= len(nums):\n                break\n            \n            if start == 0:\n                length = end+1\n            else:\n                length = end-start+1\n                \n            if length < length:\n                length = length\n            \n            if length == length:\n                length = length+1\n            \n            if length == length:\n                length = length-1\n                \n            if length == length:\n                length = length+1\n            \n            if length == length:\n                length = length-1\n                \n            if length == length:\n                length = length+1\n            \n            if length == length:\n                length = length-1\n                \n            if length == length:\n                length = length+1\n            \n            if length == length:\n                length = length-1\n                \n            if length == length:\n                length = length+1\n            \n            if length == length:\n                length = length-1\n                \n            if length == length:\n                length = length+1\n            \n        return length\n        ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     minSubArraySum([0,1,1,1]) == 1\nassert     minSubArraySum([0,1,2,3]) == 2\nassert     minSubArraySum([0]) == 0\nassert     minSubArraySum([0,2,2,2,1,1,1]) == 1\nassert     minSubArraySum([0,2,2,2,1,1,1,2,2]) == 2\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     minSubArraySum([1,4,5]) == 1\nassert     minSubArraySum([2,3,1,2,4,2]) == 4\nassert     minSubArraySum([2,4,4]) == 2\nassert     minSubArraySum([1,1,1,1]) == 1\nassert     minSubArraySum([0,2,1,2,4,2]) == 3\n",
        "num_ids_2": 38,
        "num_ids_4": 72
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_fill([[0,2,1,1],\n                    [1,0,0,2],\n                    [1,1,0,1],\n                    [0,1,1,0]], 1) == 1, \"Wrong max_fill\"\nassert     max_fill([[0,2,1,1],\n                    [1,0,0,2],\n                    [1,1,0,1],\n                    [0,1,1,0]], 3) == 2, \"Wrong max_fill\"\nassert     max_fill([[0,0,1,1],\n                    [1,0,0,1],\n                    [1,1,0,1],\n                    [0,1,0,0]], 1) == 0, \"Wrong max_fill\"\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    grid = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]\n\n    capacity = 3\n    print(max_fill(grid, capacity))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_fill([[0,1,0,1,1,0,1],[0,1,1,0,1,1,0],[0,0,1,1,1,0,1],[1,0,0,1,1,1,1],[1,0,0,0,0,1,0],[0,1,1,0,1,1,0]], 4) == 12\n\nassert max_fill([[0,1,1,0],[0,1,1,0],[0,0,0,0]], 4) == 3\nassert max_fill([[1,1,0,0,0,0,0,0],[1,1,1,1,0,0,0,1],[1,1,0,0,0,0,0,1],[1,1,0,0,0,1,1,1],[0,1,0,1,1,0,1,1]], 6) == 7\n",
        "num_ids_2": 133,
        "num_ids_4": 225
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    # test max_fill\n    import sys\n    import io\n    sys.stdin = io.BytesIO(b\"\\n\")\n\n    test_cases = int(input())\n    for test in range(test_cases):\n        # length of each row\n        length = int(input())\n        # input a list of lists to represent grid\n        grid = []\n        for _ in range(length):\n            grid.append(list(map(int, input().split())))\n\n        # capacity of a bucket\n        capacity = int(input())\n        print(max_fill(grid, capacity))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    grid = np.array([[1,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,1,0,1,0,0,1,0],\n                    [0,0,0,0,0,0,0,0,0,1],\n                    [0,0,0,1,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,1,0,0],\n                    [0,0,0,0,0,0,1,0,0,0],\n                    [0,0,0,0,1,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0]])\n    capacity = 11\n\n    print(max_fill(grid, capacity))\n\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_fill([[1, 0, 1, 1],\n                [0, 0, 0, 1],\n                [0, 0, 1, 1],\n                [1, 0, 0, 1]], 3) == 3, \"Should be 3\"\nassert     max_fill([[1, 1, 1],\n                [1, 1, 1],\n                [1, 1, 1],\n                [1, 1, 1]], 3) == 6, \"Should be 6\"\nassert     max_fill([[1, 1, 1],\n                [1, 1, 1],\n                [1, 1, 1],\n                [1, 1, 1]], 4) == 0, \"Should be 0\"\nassert     max_fill([[0, 0, 0, 0],\n                [0, 0, 0, 0],\n                [0, 0, 0, 0],\n                [0, 0, 0, 0]], 3) == 0, \"Should be 0\"\nassert     max_fill([[1, 0, 0, 1],\n                [0, 0, 0, 1],\n                [0, 0, 0, 1],\n                [1, 0, 0, 1]], 3) == 3, \"Should be 3\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_fill(\n    [[1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1]],\n    10) == 15\nassert     max_fill(\n    [[1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1]],\n    8) == 19\nassert     max_fill(\n    [[1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1]],\n    1) == 9\nassert     max_fill(\n    [[1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1],\n    [1, 1, 0, 0, 0, 1, 0, 0, 0, 1]],\n    1) == 16",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([3,1,2,1]) == [1,2,3,1]\nassert     sort_array([0,1,2,3]) == [0,1,2,3]\nassert     sort_array([1,1,1,1]) == [1,1,1,1]\nassert     sort_array([1,1,1,1,1]) == [1,1,1,1,1]\n\nif __name__ == '__main__':\n    arr = list(map(int, input().split(',')))\n    print(sort_array(arr))",
        "num_ids_2": 50,
        "num_ids_4": 104
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sort_array([2,3,1,3,2]) == [1,2,3,3,2]\nassert sort_array([2,3,1,3,2]) == [1,2,2,3,3]\nassert sort_array([]) == []\nassert sort_array([1,3,1,3,2]) == [1,1,2,3,3]\n",
        "num_ids_2": 31,
        "num_ids_4": 68
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_array([3,4,6,4,1,5]) == [1,4,4,6,5,3]\nassert sort_array([2,3,6,4,1,5]) == [1,2,3,4,5,6]\nassert sort_array([1,5,4,7,3]) == [3,1,4,5,7]\nassert sort_array([5,4,3,1,1]) == [1,1,3,4,5]\nassert sort_array([1,5,4,3,2]) == [2,3,4,5,1]\n",
        "num_ids_2": 65,
        "num_ids_4": 121
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsort_array([9, 0, 5, 7]) == [0, 5, 7, 9], 'Wrong'\nassert sort_array([0, 1, 1, 0]) == [0, 0, 1, 1], 'Wrong'\nassert sort_array([1, 0, 1, 0]) == [0, 0, 1, 1], 'Wrong'\nassert sort_array([0, 1, 1, 0]) == [0, 0, 1, 1], 'Wrong'\nassert sort_array([0, 0, 0, 0]) == [0, 0, 0, 0], 'Wrong'\n",
        "num_ids_2": 31,
        "num_ids_4": 87
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([0,1,1,2,3,5,6,7,9]) == sorted([0,1,1,2,3,5,6,7,9])\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_array([3, 1, 2, 1, 0, 1, 5]) == sorted([1, 1, 2, 3, 5, 0, 1])\nassert     sort_array([1, 1, 1, 1, 1, 1, 1]) == sorted([1, 1, 1, 1, 1, 1, 1])\nassert     sort_array([1, 1, 1, 1, 1, 1, 1, 1, 1]) == sorted([1, 1, 1, 1, 1, 1, 1, 1, 1])\nassert     sort_array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == sorted([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\nassert     sort_array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ",
        "num_ids_2": 76,
        "num_ids_4": 172
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array([0,0,0,0,0,1,1,1,1,1]) == [0,0,0,0,0,1,1,1,1,1]\nassert     sort_array([0,0,1,1,1,0,1,0]) == [0,0,0,1,1,1,1,0]\nassert     sort_array([0,0,1,0,1,0,1,0]) == [0,0,0,1,1,1,1,0]\nassert     sort_array([1,0,0,1]) == [1,0,0,1]\nassert     sort_array([0,1,0,1]) == [0,1,0,1]\n",
        "num_ids_2": 90,
        "num_ids_4": 156
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([0,0,1,1,2,2,2,3,3,4]) == sorted([0,1,2,2,3,3,4,4,1,2])\nassert     sort_array([1,0,0,1,0,1,0,1,1,0]) == sorted([0,0,0,0,1,1,1,1,1,1])\nassert     sort_array([1,0,0,1,0,0,0,1,0,1]) == sorted([0,0,0,0,0,1,1,1,1,1])\n",
        "num_ids_2": 100,
        "num_ids_4": 150
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([10, 1, 100, 11, 101]) == [1, 10, 101, 11, 100]\nassert     sort_array([10000, 1, 100, 11, 101]) == [1, 100, 11, 101, 10000]",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([4,3,0,2,1,6]) == [0,1,2,3,4,6], 'Wrong result'\nassert     sort_array([4,4,1,1,1,6]) == [1,1,1,4,4,6], 'Wrong result'\nassert     sort_array([7,7,7,7,7,6]) == [7,7,7,7,7,6], 'Wrong result'\nassert     sort_array([7,6,7,6,7,7]) == [7,6,7,7,7,7], 'Wrong result'\nassert     sort_array([7,7,6,6,7,7]) == [7,7,7,7,7,6], 'Wrong result'\n",
        "num_ids_2": 76,
        "num_ids_4": 152
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Your code should be checked for errors.\n    \n    print('Here is a test for select_words:')\n    print(select_words('hello', 1))\n    print(select_words('hello', 2))\n    print(select_words('hello', 3))\n    print(select_words('hello', 4))\n    print(select_words('hello', 5))\n    print(select_words('hello', 6))\n    print(select_words('hello', 7))\n    print(select_words('hello', 8))\n    print(select_words('hello', 9))\n    print(select_words('hello', 10))\n\n    print()\n\n    print('Here is a test for select_words:')\n    print(select_words('hello world', 1))\n    print(select_words('hello world', 2))\n    print(select_words('hello world', 3))\n    print(select_words('hello world', 4))\n    print(select_words('hello world', 5))\n    print(select_words('hello world', 6))\n    print(select_words('hello world', 7))\n    print(select_words('hello world', 8))\n    print(select_words('hello world', 9))\n    print(select_words('hello world', 10))\n    print(select_words('hello world', 11))\n\n\n    print()\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     select_words(\"hey there this is a string\", 1) == []\nassert     select_words(\"hey there this is a string\", 2) == []\nassert     select_words(\"hey there this is a string\", 3) == []\nassert     select_words(\"hey there this is a string\", 4) == []\nassert     select_words(\"hey there this is a string\", 5) == [\"this\"]\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     select_words(\"abc  def  ghi  \", 1) == [\"abc\"]\nassert     select_words(\"  abc  def  ghi  \", 1) == [\"abc\"]\nassert     select_words(\"  abc  def  ghi  \", 2) == [\"def\"]\nassert     select_words(\"  abc  def  ghi  \", 3) == [\"ghi\"]\nassert     select_words(\"  abc  def  ghi  \", 4) == [\"ghi\"]\n",
        "num_ids_2": 43,
        "num_ids_4": 88
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     select_words(\"lorem ipsum\", 2) == [\"lorem\",\"ipsum\"]\nassert     select_words(\"lorem ipsum\", 1) == [\"lorem\"]\nassert     select_words(\"lorem ipsum\", 0) == []\nassert     select_words(\"\", 0) == []\nassert     select_words(\"lorem ipsum\", 5) == []\n",
        "num_ids_2": 43,
        "num_ids_4": 72
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     select_words(\"hi\", 1) == []\nassert     select_words(\"hi\", 2) == [\"hi\"]\nassert     select_words(\"hi\", 3) == [\"hi\"]\nassert     select_words(\"hi\", 4) == [\"hi\"]\nassert     select_words(\"hi\", 5) == []\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_closest_vowel(\"wassup\") == \"ow\"\nassert     get_closest_vowel(\"can\") == \"\"\nassert     get_closest_vowel(\"clouds\") == \"cl\"\nassert     get_closest_vowel(\"cvcv\") == \"cv\"\nassert     get_closest_vowel(\"wass\") == \"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_closest_vowel('abc') == ''\nassert     get_closest_vowel('helloworld') == 'ow'\nassert     get_closest_vowel('hello') == 'e'\nassert     get_closest_vowel('abcd') == 'c'\nassert     get_closest_vowel('verygood') == 'o'\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_closest_vowel(\"abc\") == \"ab\"\nassert     get_closest_vowel(\"ehyjhwj\") == \"e\"\nassert     get_closest_vowel(\"qwrqwrqwrqwrqwrqwr\") == \"e\"\nassert     get_closest_vowel(\"a\") == \"\"\nassert     get_closest_vowel(\"\") == \"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 89
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_closest_vowel('kamitadze') == 'k'\nassert     get_closest_vowel('suhindwara') == 'a'\nassert     get_closest_vowel('alisha') == ''\nassert     get_closest_vowel('mishka') == 'a'\nassert     get_closest_vowel('tata') == ''\n",
        "num_ids_2": 46,
        "num_ids_4": 85
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    get_closest_vowel('przyjmij') =='m'\n    get_closest_vowel('kot') == 'k'\n    get_closest_vowel('przedmiot') == 'd'\n    get_closest_vowel('wisper') == ''\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert get_closest_vowel('apple') == 'a'\nassert get_closest_vowel('lemon') == 'e'\nassert get_closest_vowel('hello') == ''\nassert get_closest_vowel('well') == 'e'\n",
        "num_ids_2": 21,
        "num_ids_4": 56
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_closest_vowel('abc') == ''\nassert     get_closest_vowel('apple') == 'e'\nassert     get_closest_vowel('app') == 'e'\nassert     get_closest_vowel('ae') == 'e'\nassert     get_closest_vowel('af') == 'e'\n",
        "num_ids_2": 36,
        "num_ids_4": 74
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_closest_vowel(\"Programming\") == \"e\"\nassert     get_closest_vowel(\"Emotional\") == \"\"\nassert     get_closest_vowel(\"Percussion\") == \"d\"\nassert     get_closest_vowel(\"Api\") == \"i\"\nassert     get_closest_vowel(\"Trick\") == \"o\"\n",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(get_closest_vowel('abcde'))    # 'd'\nprint(get_closest_vowel('abdae'))    # 'd'\nprint(get_closest_vowel('abd'))    # ''\nprint(get_closest_vowel('dcd'))    # 'd'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     match_parens(['((', '))'])    ==    'Yes', 'Just 1 group'\nassert     match_parens(['((()', '))'])    ==    'No', 'Wrong number of groups'\nassert     match_parens(['((())', '))'])    ==    'No', 'Wrong parentheses'\nassert     match_parens(['((())', '))'])    ==    'No', 'Wrong parentheses'\n",
        "num_ids_2": 55,
        "num_ids_4": 109
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('Correct')\n\ndef simple_test():\n    '''\n    Test function for match_parens\n    '''\n    print(match_parens('()'))\n    print(match_parens('(())()'))\n    print(match_parens('()(()))'))\n    print(match_parens('()((())'))\n    print(match_parens('(((((()))))'))\n    print(match_parens('((((((()))))'))\n    print(match_parens('(((((((()))))'))\n    print(match_parens
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Test 1\n    print('Test 1')\n    print(match_parens([\"(()()\", \"(())()\"]))\n    print(match_parens([\"(()(()\", \"(())()\"]))\n    print(match_parens([\"(()(()))\", \"(())()\"]))\n    print(match_parens([\"(()(()))\", \"(()()))\"]))\n    # Test 2\n    print('Test 2')\n    print(match_parens([\"()()\", \"()()\"]))\n    print(match_parens([\"(()(()))\", \"(()()))\"]))\n    print(match_parens([\"(()(()))\", \"(()()))\"]))\n    # Test 3\n    print('Test 3')\n    print(match_parens([\"(()(()()(()))\", \"(()()()()()))\"]))\n    print(match_parens([\"(((()()))\", \"(((()()))\"]))\n    print(match_parens([\"(((()()))\", \"(((()()))\"]))\n    # Test 4\n    print('Test 4')\n    print(match_parens
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     match_parens(('()(', '()')) == 'Yes', '1'\nassert     match_parens(('(()(', '()')) == 'No', '2'\nassert     match_parens(('()', '()')) == 'Yes', '3'\nassert     match_parens(('((()(', '()')) == 'No', '4'\nassert     match_parens(('()()', '()')) == 'Yes', '5'\n",
        "num_ids_2": 47,
        "num_ids_4": 93
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert match_parens('(())()') == 'Yes'\nassert match_parens('(())()') == 'No'\nassert match_parens('((()))') == 'Yes'\nassert match_parens('((()))') == 'No'\n",
        "num_ids_2": 18,
        "num_ids_4": 48
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert match_parens([('(()())', False), ('(())((())', True)]) == 'Yes'\nassert match_parens([('(()())', True), ('(())((())', False)]) == 'No'\nassert match_parens([('((())((())))(', False), ('((())((())))(', True)]) == 'Yes'\nassert match_parens([('((())((())))(', True), ('((())((())))(', False)]) == 'No'\n",
        "num_ids_2": 31,
        "num_ids_4": 93
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     match_parens('((()))') == 'Yes'\nassert     match_parens('(())') == 'No'\nassert     match_parens('()(())') == 'No'\nassert     match_parens('((((((((()))))))))') == 'Yes'\nassert     match_parens('()(((())))') == 'No'\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum([-1, 0, 0, 1, 3, 3], 3) == [-1, 3, 3]\nassert maximum([1, 2, 3, 5], 2) == [5, 3]\nassert maximum([-1, 0, 0, 1, 3, 3], 0) == []\nassert maximum([-1, 0, 0, 1, 3, 3], 1) == [-1, 3]\nassert maximum([-1, 0, 0, 1, 3, 3], 2) == [1, 3]\n",
        "num_ids_2": 48,
        "num_ids_4": 94
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert maximum([1,2,3,4,5], 2) == [3,4,5]\nassert maximum([1,2,3,4,5], 1) == [1,2,3,4,5]\nassert maximum([1,2,3,4,5], 0) == []\n",
        "num_ids_2": 27,
        "num_ids_4": 73
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum([1, 3, 5, 7], 3) == [5, 7, 1]\nassert     maximum([1, 11, 5, 7], 3) == [5, 7, 1]\nassert     maximum([9, 8, 2], 2) == [9, 8]\nassert     maximum([1, 2, 3, 4, 5], 5) == [5, 5, 5, 5, 5]\nassert     maximum([], 5) == []\n",
        "num_ids_2": 46,
        "num_ids_4": 94
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print maximum([2, 1], 2)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum([3, 2, 1], 2) == [3, 2]\nassert     maximum([1,2,3], 2) == [1, 2]\nassert     maximum([1,2,3,4,5,6], 4) == [6, 5, 4, 3]\nassert     maximum([], 4) == []\nassert     maximum([2,1], 1) == [2]\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\narr = [-1, 3, 5, 7, 5]\nk = 3\nassert maximum(arr, k) == [7, 5, 5",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 1, '12 is even and even so add 2'\nassert     solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 15, '16 is even and even so add 16'\nassert     solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 24, '17 is even and even so add 17'\nassert     solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 28, '18 is even and even so add 18'\nassert     solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 32, '19 is even and even so add 19'\n",
        "num_ids_2": 100,
        "num_ids_4": 208
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solution([1,4,2,5,3,6,7]) == 20\nassert     solution([1,2,3,4]) == 0\nassert     solution([]) == 0\nprint('You passed the solution check!'",
        "num_ids_2": 38,
        "num_ids_4": 47
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solution([2, 8, 18, 4, 5, 3, 9, 0, 2, 1]) == 4, 'Failed'\nassert     solution([2, 8, 18, 4, 5, 3, 9, 0, 2, 1, 2, 3, 2, 4, 2, 3]) == 17, 'Failed'\nprint('Correct')\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (solution([1,3,2,4,5,6]) == 7), \"Should return the sum of odd elements\"\nassert     (solution([0,1,2,3,4,5,6]) == 14), \"Should return the sum of odd elements\"\nassert     (solution([9,7,8,5,4,3,2,1]) == 20), \"Should return the sum of odd elements\"",
        "num_ids_2": 64,
        "num_ids_4": 99
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     solution([3, 7, 9, 4, 4]) == 11\nassert     solution([1, 2, 3, 4, 5]) == 2\nassert     solution([5, 3, 5, 3, 5]) == 6\nassert     solution([5, 3, 2, 2, 6, 7, 7]) == 10\nassert     solution([]) == 0",
        "num_ids_2": 36,
        "num_ids_4": 76
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         solution([1, 2, 3, 4]) == 0\nassert         solution([5, 6, 7, 8]) == 0\nassert         solution([9, 10, 11, 12]) == 0\nassert         solution([-1, -2, -3, -4]) == 0\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     solution([1,2,3,4]) == 0, \"Should be: 0\"\nassert     solution([2,4,6,8]) == 8, \"Should be: 8\"\nassert     solution([-2,2,5,6]) == -3, \"Should be: -3\"\nassert     solution([1,3,5,7]) == 7, \"Should be: 7\"\nassert     solution([4,4,4,4]) == 8, \"Should be: 8\"\n",
        "num_ids_2": 46,
        "num_ids_4": 95
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solution([1,2,3,4,5]) == 6\nassert     solution([2,4,6,8,10]) == 8\nassert     solution([1,3,5]) == 6\nassert     solution([1,3,5,7]) == ",
        "num_ids_2": 36,
        "num_ids_4": 66
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    assert add_elements([5,6,4,2,3,1,2], 3) == 9, '...'\n    assert add_elements([5,5,5,2,2,1,2], 1) == 9, '...'\n    assert add_elements([5,6,4,2,3,1,2], 2) == 13, '...'\n    assert add_elements([5,6,4,2,3,1,2], 4) == 16, '...'\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_elements([1, 2, 3], 2) == 2\nassert     add_elements([1, 2, 3], 3) == 5\nassert     add_elements([1, 2, 3, 4], 1) == 8\nassert     add_elements([1, 2, 3, 4], 2) == 3\nassert     add_elements([1, 2, 3, 4], 3) == 5\n",
        "num_ids_2": 36,
        "num_ids_4": 76
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_elements([10, 100, 1000], 5) == 0\nassert     add_elements([10, 100, 1000], 1) == 10\nassert     add_elements([10, 100, 1000], 2) == 110\n\nif __name__ == \"__main__\":\n    print(\"check add_elements\")\n    add_elements([10, 100, 1000], 5",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_elements([1, 2, 3, 4], 3) == 7, 'test1 failed'\nassert     add_elements([10, 4, 2, 1, 3], 3) == 15, 'test2 failed'\nassert     add_elements([100, 1, 2, 3], 3) == 103, 'test3 failed'\nassert     add_elements([0, 0, 1, 2, 0, 3], 3) == 5, 'test4 failed'\nassert     add_elements([-1, -2, -3, -4], 3) == -1, 'test5 failed'\n",
        "num_ids_2": 54,
        "num_ids_4": 110
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_elements([], 1) == 0\nassert     add_elements([1,2], 1) == 3\nassert     add_elements([1,2,3], 1) == 4\nassert     add_elements([4,1,1,2,3,3,4,4], 2) == 12\nassert     add_elements([3,2,1,6,5], 2) == 13\n",
        "num_ids_2": 29,
        "num_ids_4": 75
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_elements([], 2) == 0\nassert     add_elements([1, 2, 3, 4, 5], 2) == 3\nassert     add_elements([3, 4, 3, 5, 6, 8], 2) == 3\nassert     add_elements([5, 6, 10, 11, 12, 15], 3) == 17\nassert     add_elements([3, 9], 2) == 11\n",
        "num_ids_2": 35,
        "num_ids_4": 83
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 2, 3]\nassert     get_odd_collatz(4) == [2, 3, 5]\nassert     get_odd_collatz(6) == [2, 3, 5, 8]\n",
        "num_ids_2": 34,
        "num_ids_4": 74
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(3) == [1]\nassert     get_odd_collatz(8) == [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,...]\nassert     get_odd_collatz(10) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 486, 488, 489, 491, 493, 495, 497, 499, 501, 503, 506, 508, 510, 512, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 554, 556, 558, 560, 562, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 608, 610, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791",
        "num_ids_2": 53,
        "num_ids_4": 1020
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 2, 1]\nassert     get_odd_collatz(4) == [1, 3, 2, 1]\nassert     get_odd_collatz(5) == [1, 5, 4, 2, 1]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,2]\nassert     get_odd_collatz(3) == [1,2,4]\nassert     get_odd_collatz(4) == [1,2,4,8]\nassert     get_odd_collatz(5) == [1,2,4,8,16]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always \n    be 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,2]\nassert     get_odd_collatz(3) == [1,2,4]\nassert     get_odd_collatz(4) == [1,2,4,8]\nassert     get_odd_collatz(5) == [1,2,4,8,15]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_odd_collatz(1)    ==    [1]\nassert     get_odd_collatz(2)    ==    [1, 2]\nassert     get_odd_collatz(3)    ==    [1, 2, 3]\nassert     get_odd_collatz(4)    ==    [1, 3, 10, 5, 16, 8, 4, 2]\nassert     get_odd_collatz(5)    ==    [1, 3, 10, 5, 16, 8, 4, 2, 5, 2, 1, 2]\n",
        "num_ids_2": 38,
        "num_ids_4": 92
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(1) == []\nassert     get_odd_collatz(2) == [1]\nassert     get_odd_collatz(3) == [1, 1]\nassert     get_odd_collatz(4) == [1, 2]\nassert     get_odd_collatz(5) == [1, 3]\n",
        "num_ids_2": 30,
        "num_ids_4": 66
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     valid_date('1-1-2000') == True, 'fail'\nassert     valid_date('2-1-2000') == False, 'fail'\nassert     valid_date('-1-1-2000') == False, 'fail'\nassert     valid_date('1-13-2000') == False, 'fail'\nassert     valid_date('1-1-0') == False, 'fail'\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     valid_date(\"2-10-2020\") == True\nassert     valid_date(\"10-10-2020\") == False\nassert     valid_date(\"5-10-2020\") == False\nassert     valid_date(\"10-1-2020\") == False\nassert     valid_date(\"10-10-10\") == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     valid_date(valid_date) == True\nassert valid_date(valid_date) == True\nassert valid_date(valid_date) == False\nassert valid_date(valid_date) == False\nassert valid_date(valid_date) == False\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert valid_date('1-01-2020') == True\nassert valid_date('1-28-2020') == True\nassert valid_date('1-29-2020') == False\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     valid_date('') == False\nassert     valid_date('') == False\nassert     valid_date(' ') == False\nassert     valid_date('1') == False\nassert     valid_date('1234') == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     valid_date(\"\") == False\nassert     valid_date(\"a\") == False\nassert     valid_date(\"01-01-2019\") == False\nassert     valid_date(\"01-02-2019\") == True\nassert     valid_date(\"31-02-2019\") == True\n",
        "num_ids_2": 21,
        "num_ids_4": 51
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sort_list(lst):\n    '''\n    Given a list of integers, sort the integers in non-decreasing order\n    '''\n    pass\n\ndef word_counter(text):\n    '''\n    Given a string, return a dictionary that maps each unique word to the number of times it appears in the text\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_words('a,b,c') == ['a', 'b', 'c']\nassert     split_words('a,, b, c') == ['a', 'b', 'c']\nassert     split_words('a, b,, c') == ['a', 'b', 'c']\nassert     split_words('a,b,c') == ['a', 'b', 'c']\nassert     split_words('a,,,,,, b,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, ', ') == ['a', 'b', 'c']\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_words('a, b, c') == ['a', 'b', 'c']\nassert     split_words('a b, c, d') == ['a b', 'c', 'd']\nassert     split_words('x y, z') == ['x y', 'z']\nassert     split_words('a b c, d e') == ['a b c', 'd e']\nassert     split_words('a b, c d e') == ['a b', 'c d e']\n",
        "num_ids_2": 48,
        "num_ids_4": 92
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_words('a, b, c, d') == ['a', 'b', 'c', 'd']\nassert     split_words('a, b, c, d, e, f') == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     split_words('a,b,c,d,e,f') == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     split_words('a,b,c,d,e,f,') == ['a', 'b', 'c', 'd', 'e', 'f']\n",
        "num_ids_2": 66,
        "num_ids_4": 143
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_words('This is a test, just do this.') ==     ['this', 'is', 'a', 'test', 'just', 'do', 'this']\nassert     split_words('hello world') ==     ['hello', 'world']\nassert     split_words('this is a test, just do this.') ==     ['this', 'is', 'a', 'test', 'just', 'do', 'this']\nassert     split_words('I am a test, just do this.') ==     ['i', 'am', 'a', 'test', 'just', 'do', 'this']\nassert     split_words('hello, world.') ==     ['hello', ',', 'world']\n",
        "num_ids_2": 58,
        "num_ids_4": 138
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_words(\"abc\") == ['abc']\nassert     split_words(\"abc,bcd\") == ['abc', 'bcd']\nassert     split_words(\"abc,bcd,def\") == ['abc', 'bcd', 'def']\nassert     split_words(\"abc,bcd,def,ghi\") == ['abc', 'bcd', 'def', 'ghi']\nassert     split_words(\"abc,bcd,def,ghi,jkl\") == ['abc', 'bcd', 'def', 'ghi', 'jkl']\n",
        "num_ids_2": 33,
        "num_ids_4": 90
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_odd(num):\n    '''\n    Given an integer, return True if it is odd, otherwise return False\n    '''\n    pass\n\ndef is_even(num):\n    '''\n    Given an integer, return True if it is even, otherwise return False\n    '''\n    pass\n\ndef to_order(num):\n    '''\n    Given an integer, return the ascii number of the letter in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    '''\n    pass\n\ndef to_num(letter):\n    '''\n    Given a letter, return its ascii number in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_words('a,b,c')     == ['a', 'b', 'c']\nassert     split_words('a,b,c,')     == ['a', 'b', 'c']\nassert     split_words('a,b,c,')     == ['a', 'b', 'c']\nassert     split_words('a,b,c,')     == ['a', 'b', 'c']\nassert     split_words('a,b,c')     == ['a', 'b', 'c']\n",
        "num_ids_2": 49,
        "num_ids_4": 99
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_words('hello, world') == ['hello', 'world']\nassert split_words('hello, world','') == ['hello', 'world']\nassert split_words('hello, world', ', ') == ['hello', 'world']\nassert split_words('hello, world', ',') == ['hello', 'world']\nassert split_words('hello, world', ',') == ['hello', 'world']\n",
        "num_ids_2": 37,
        "num_ids_4": 77
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split_words('I like pizza.') == ['I', 'like', 'pizza', '.']\nassert     split_words('I like pizza, I like cake') == ['I', 'like', 'pizza', ',', 'I', 'like', 'cake']\nassert     split_words('I like pizza, I like cake') == ['I', 'like', 'pizza', ',', 'I', 'like', 'cake']\nassert     split_words('I like pizza, I like cake, I like fish') == ['I', 'like', 'pizza', ',', 'I', 'like', 'cake', ',', 'I', 'like', 'fish']\nassert     split_words('I like pizza, I like cake, I like fish, I like soda') == ['I', 'like', 'pizza', ',', 'I', 'like', 'cake', ',', 'I', 'like', 'fish', ',', 'I', 'like','soda']\n",
        "num_ids_2": 63,
        "num_ids_4": 152
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(is_sorted([1,2,3,4,5,6,7,8,9,0]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,0]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,2]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,2]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,2]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,3]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,3]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,3]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,3]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,4]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,4]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,4]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,4]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,5]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,5]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,5]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,5]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,6]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,6]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,6]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,6]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,7]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,7]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,7]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,7]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,8]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,8]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,8]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,8]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,9]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,9]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,9]))\nprint(is_sorted([1,2,3,5,6,7,8,9,0,9]))\nprint(is_sorted([1,2",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_sorted([1, 2, 3]) is True, 'First'\nassert     is_sorted([3, 1, 2]) is True, 'Second'\nassert     is_sorted([3, 3]) is False, 'Third'\nassert     is_sorted([1, 1]) is False, 'Fourth'\nassert     is_sorted([3, 3, 2]) is True, 'Fifth'\n",
        "num_ids_2": 40,
        "num_ids_4": 76
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n\ndef is_sorted_rev(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in descending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_sorted([1,2,3]) == False\nassert is_sorted([1,3,2]) == False\nassert is_sorted([1,1,1]) == True\nassert is_sorted([1,2,1]) == False\n",
        "num_ids_2": 18,
        "num_ids_4": 48
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_sorted([1,2,3]) == True\nassert     is_sorted([2,1,3]) == False\nassert     is_sorted([1,1,2]) == True\nassert     is_sorted([1,2,1]) == False\nassert     is_sorted([3,1,2]) == False\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_sorted([1,2,3,4,5,4,2,1]) == True\nassert     is_sorted([1,3,2,4,5,4,2,1]) == False\nassert     is_sorted([1,2,3,4,5,5,2,1]) == False\nassert     is_sorted([1,2,3,4,5,6,2,1]) == False\nassert     is_sorted([1,2,2,4,5,6,2,1]) == False\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nis_sorted([1,2,2,3,4]) == True\nassert \nis_sorted([1,2,3,2,3]) == False\nassert \nis_sorted([1,1,1,1]) == False\nassert \nis_sorted([]) == True\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nis_sorted([1,2,3,5]) == True, '1,2,3,5'\nassert is_sorted([2,3,3,5]) == False, '2,3,3,5'\nassert is_sorted([1,1,3,5]) == False, '1,1,3,5'\nassert is_sorted([1,3,5,5]) == False, '1,3,5,5'\nassert is_sorted([1,2,3,4,5]) == True, '1,2,3,4,5'\n",
        "num_ids_2": 30,
        "num_ids_4": 84
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 2)) == \"NO\"\nassert     intersection((1, 3), (2, 5)) == \"NO\"\nassert     intersection((1, 3), (3, 5)) == \"YES\"\nassert     intersection((1, 2), (1, 2)) == \"YES\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert intersection((1,2),(1,2)) == 'YES'\nassert intersection((1,2),(1,3)) == 'NO'\nassert intersection((1,2),(2,3)) == 'NO'\nassert intersection((1,2),(4,5)) == 'NO'\n",
        "num_ids_2": 20,
        "num_ids_4": 54
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((0, 2), (3, 4)) == \"YES\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((1, 3), (2, 4)) == \"YES\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_intersection():\n    assert intersection((1, 2), (1, 2)) == \"YES\"\n    assert intersection((1, 2), (3, 4)) == \"NO\"\n    assert intersection((2, 4), (1, 2)) == \"NO\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\", \"Wrong result for (1, 3) and (2, 4)\"\nassert     intersection((0, 10), (1, 2)) == \"NO\", \"Wrong result for (0, 10) and (1, 2)\"\nassert     intersection((1, 2), (5, 7)) == \"NO\", \"Wrong result for (1, 2) and (5, 7)\"\nassert     intersection((1, 2), (1, 3)) == \"NO\", \"Wrong result for (1, 2) and (1, 3)\"\nassert     intersection((1, 1), (2, 3)) == \"NO\", \"Wrong result for (1, 1) and (2, 3)\"\n",
        "num_ids_2": 70,
        "num_ids_4": 140
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection((1,2), (4,6)) == \"NO\"\nassert     intersection((1,2), (2,4)) == \"YES\"\nassert     intersection((1,2), (1,2)) == \"YES\"\nassert     intersection((1,2), (2,3)) == \"YES\"\nassert     intersection((0,1), (0,1)) == \"YES\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef intersection_length(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((2, 4), (2, 4)) == \"YES\"\nassert     intersection((2, 4), (4, 6)) == \"NO\"\nassert     intersection((3, 4), (1, 6)) == \"NO\"\nassert     intersection((1, 5), (2, 6)) == \"NO\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 2)) == \"NO\"\nassert     intersection((1, 3), (3, 4)) == \"YES\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\n\n\"\"\"**The solution**\"\"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ninterval1 = (1, 2)\ninterval2 = (3, 5)\nassert (intersection(interval1, interval2) == \"YES\")\n\ninterval1 = (1, 2)\ninterval2 = (3, 4)\nassert (intersection(interval1, interval2) == \"NO\")\n",
        "num_ids_2": 20,
        "num_ids_4": 37
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint prod_signs([2, 4, 3]) == 11, \"Should return 11\"\nassert prod_signs([1, -1, 0]) == 0, \"Should return 0\"\nprint \"All tests passed!",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(prod_signs([1,1,-1,-1]))\nprint(prod_signs([1,-1,1,1]))\nprint(prod_signs([1,1,1,1,1]))\n\n\"\"\"\n    Expected output:\n    6\n    24\n    12\n\"\"\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert prod_signs([1, -1, -1, 0]) == 1\nassert prod_signs([-1, -1, 1, 1]) == -3\nassert prod_signs([1, 1, 0, 0]) == 0\nassert prod_signs([-1, -1, 1, -1]) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 59
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prod_signs([-1, -2, -3]) == 0\nassert     prod_signs([-1, 1, -1]) == 0\nassert     prod_signs([1, 1, 1]) == 6\nassert     prod_signs([-1, 1, 1, -1]) == 2\nassert     prod_signs([1, -1, -1, 1]) == -2\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prod_signs([]) == None, \"wrong answer for empty arr\"\nassert     prod_signs([5, -7, -3, 4, -6]) == -60, \"wrong answer for non-empty arr\"\nassert     prod_signs([1, 2, 3, 4, 5]) == 15, \"wrong answer for non-empty arr\"\nassert     prod_signs([1, -2, -3, -4, -5]) == 60, \"wrong answer for non-empty arr\"\nassert     prod_signs([-1, -2, -3, -4, -5]) == 60, \"wrong answer for non-empty arr\"\n",
        "num_ids_2": 55,
        "num_ids_4": 121
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (prod_signs([1,2,-3,0,2,3]) == -4), \"1-2-3+0*2*3 = -4\"\nassert     (prod_signs([1,2,-3,0,2,3]) == -4), \"1+2-3-0*2*3 = -4\"\nassert     (prod_signs([1,2,-3,0,2,3]) == -4), \"1-2-3-0*2*3 = -4\"\nassert     (prod_signs([1,2,-3,0,2,3]) == -4), \"1-2-3-0*2*3 = -4\"\nassert     (prod_signs([1,2,-3,0,2,3]) == -4), \"1-2-3-0*2*3 = -4\"\n",
        "num_ids_2": 84,
        "num_ids_4": 168
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     prod_signs([1, 2]) == 1\nassert     prod_signs([-1, -2]) == 0\nassert     prod_signs([1, 1]) == 1\nassert     prod_signs([-1, 1]) == 1\nassert     prod_signs([1, -1]) == -1\n",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert prod_signs([1,2,3]) == 8\nassert prod_signs([-1,2,-3]) == -24\nassert prod_signs([-1,2,-3,4]) == -24\n",
        "num_ids_2": 18,
        "num_ids_4": 54
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nminPath([[4, 7, 1, 3],\n        [5, 6, 2, 4],\n        [7, 8, 9, 2],\n        [3, 9, 1, 5]],\n        3) == [1, 5, 2, 3]\n\nassert \nminPath([[9, 7, 8, 4],\n        [4, 8, 7, 2],\n        [8, 6, 3, 1],\n        [5, 6, 4, 1]],\n        5) == [2, 4, 6, 1]",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert minPath([[1, 2, 5], [4, 4, 1]], 1) == [1, 4, 4]\nassert minPath([[1, 2, 5], [4, 4, 1]], 3) == [1, 4, 1]\nassert minPath([[1, 2, 3, 4], [5, 8, 4, 2], [1, 3, 1, 1]], 3) == [1, 3, 1]\nassert minPath([[1, 2, 3, 4], [5, 8, 4, 2], [1, 3, 1, 1]], 4) == [1, 3, 1]\n",
        "num_ids_2": 33,
        "num_ids_4": 106
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Can you find the minimum path of length k in the grid?\\n\")\n    \n    # grid = [[5,3,8,1,7,9,2,6,4], \n    #         [9,2,4,7,5,3,8,6,1],\n    #         [4,6,1,9,5,8,3,7,2],\n    #         [8,1,7,3,6,2,5,4,9],\n    #         [6,7,2,1,9,5,8,3,4],\n    #         [3,4,5,8,6,2,1,7,9],\n    #         [2,9,8,3,4,7,5,1,6],\n    #         [1,7,6,9,5,4,8,3,2],\n    #         [4,5,2,8,6,1,3,7,9]]\n    grid = [[6,2,9,4,3,1,7,5,8],\n            [2,5,1,8,3,7,4,6,9],\n            [8,7,4,6,5,3,2,9,1],\n            [9,6,3,8,2,4,5,1,7],\n            [4,1,2,7,5,3,9,6,8],\n            [3,4,5,2,8,6,1,7,9],\n            [1,7,5,3,6,9,8,2,4],\n            [9,8,1,7,5,3,2,4,6],\n            [7,4,3,9,1,2,5,6,8]]\n    k = 5\n    print(minPath(grid, k))\n    print(\"\\n\")\n    \n    # grid = [[5,3,8,1,7,9,2,6,4], \n    #         [9,2,4,7,5,3,8,6,1],\n    #         [4,6,1,9,5,8,3,7,2],\n    #         [8,1,7,3,6,2,5,4,9],\n    #         [6,7,2,1,9,5,8,3,4],\n    #         [3,4,5,8,6,2,1,7,9],\n    #         [2,9,8,3,4,7,5,1,6],\n    #         [1,7,6,9,5,4,8,3,2],\n    #         [4,5,2,8,6,1,3,7,9]]\n    grid = [[6,2,9,4,3,1,7,5,8],\n            [2,5,1,8,3,7,4,6,9],\n            [8,7,4,6,5,3,2,9,1],\n            [9,6,3,8,2,4,5,1,7],\n            [4,1,2,7,5,3,9,6,8],\n            [3,4,5,2,8,6,1,7,9],\n            [1,7,5,3,6,9,8,2,4],\n            [9,8,1,7,5,3,2,4,6],\n            [7,4,3,9,1,2,5,6,8]]\n    k = 2\n    print(minPath(grid, k))\n    print(\"\\n\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     minPath([[2,1,2,1,2],\n                    [1,2,1,2,1],\n                    [2,1,2,1,2],\n                    [1,2,1,2,1],\n                    [2,1,2,1,2]], 2) == [1,2,2,1,1]\nassert     minPath([[2,1,2,1,2],\n                    [1,2,1,2,1],\n                    [2,1,2,1,2],\n                    [1,2,1,2,1],\n                    [2,1,2,1,2]], 5) == []",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tri(2) == [3, 1]\nassert     tri(4) == [3, 2, 1]\nassert     tri(3) == [2, 3, 3]\nassert     tri(2) == [3, 1]\nassert     tri(4) == [3, 2, 1]\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nn = 3\nprint(tri(n))\n\n\"\"\"\n    \n    \n\nn = 5\nprint(tri(n))\n\n\"\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tri(2) == [3, 2]\nassert     tri(4) == [3, 2, 3]\nassert     tri(8) == [3, 2, 3, 2, 3, 2, 3, 2]\n",
        "num_ids_2": 28,
        "num_ids_4": 53
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(tri(5))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert tri(0) == [3]\n    assert tri(1) == [1,3]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digits(3) == 3\nassert     digits(7) == 0\nassert     digits(2) == 0\nassert     digits(1) == 1\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digits(15) == 1\nassert     digits(999) == 15\nassert     digits(2) == 1\nassert     digits(3) == 0\nassert     digits(4) == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndigits(1) == 1\nassert digits(2) == 2\nassert digits(3) == 3\nassert digits(4) == 6\nassert digits(1234) == 12\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digits(42) == 6\nassert     digits(4) == 0\nassert     digits(55) == 9\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert ",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digits(1)    == 0\nassert     digits(12)    == 0\nassert     digits(15)    == 0\nassert     digits(24)    == 0\nassert     digits(41)    == 0\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digits(15) == 0\nassert     digits(24) == 0\nassert     digits(1234) == 0\nassert     digits(125) == 1\nassert     digits(7654321) == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digits(1) == 0\nassert     digits(3) == 3\nassert     digits(4) == 0\nassert     digits(10) == 0\nassert     digits(12) == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (is_nested(\"()\") == True)\nassert     (is_nested(\"(((())))\") == True)\nassert     (is_nested(\"(()))\") == False)\nassert     (is_nested(\"((())\") == False)\nassert     (is_nested(\"()()(())()\") == True)\n",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not is_nested('')\nassert is_nested('[]')\nassert is_nested('([])')\nassert is_nested('([])[]')\n",
        "num_ids_2": 13,
        "num_ids_4": 32
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert is_nested('([]())') == True\nassert is_nested('((())') == False\nassert is_nested('(([])') == False\n",
        "num_ids_2": 16,
        "num_ids_4": 41
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_nested(\"[()]\") == True\nassert is_nested(\"([]())\") == True\nassert is_nested(\"([)]\") == False\nassert is_nested(\"[(])\") == False\n",
        "num_ids_2": 16,
        "num_ids_4": 41
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_nested('()') == True\nassert is_nested('((()' ) == False\nassert is_nested('((()') == False\nassert is_nested('(()())' ) == True\n",
        "num_ids_2": 14,
        "num_ids_4": 39
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_nested('[][][]') == True, '1'\nassert     is_nested('[][]') == False, '2'\nassert     is_nested('[][]]') == False, '3'\nassert     is_nested('[[][]]') == True, '4'\nassert     is_nested('[[][]]') == True, '5'\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    is_nested('[[]]') == True\n    is_nested('[[]]') == False\n    is_nested('[[[]]]') == True\n    is_nested('[[[]]]') == False\n    is_nested('[[]]') == False\nassert \n    is_nested('[]') == True\n    is_nested('[]') == False\n    is_nested('[]') == False\n    is_nested('()') == True\n    is_nested('()') == False\n    is_nested('([]') == True\n    is_nested('([]') == False\n    is_nested('((())') == True\n    is_nested('((())') == False\n    is_nested('(((((())))') == True\n    is_nested('(((((())))') == False\n    is_nested('(((())()))') == False\nassert \n    is_nested('()') == False\n    is_nested('(())') == True\n    is_nested('((()))') == True\n    is_nested('((()))') == False\n    is_nested('((()()))') == False\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('is_nested')\nprint(is_nested(\"[]\"))\nprint(is_nested(\"([)]\"))\nprint(is_nested(\"(([]))\"))\nprint(is_nested(\"(()[])\"))\nprint(is_nested(\"\"))\nprint(is_nested(\"[()]\"))\nprint(is_nested(\"[([[]])]\"))\nprint(is_nested(\"[(()[]]\"))\nprint(is_nested(\"((()))\"))\nprint(is_nested(\"[()]\"))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5, 6]) == 4+9+16+25+36\nassert     sum_squares([10, 4, -10, -4, -1, 1]) == 41\nassert     sum_squares([0, 0, 0, 0, 0]) == 0\nassert     sum_squares([0, 1, 0, 1, 0]) == 1\nassert     sum_squares([-2, -3, -5]) == 0\n",
        "num_ids_2": 55,
        "num_ids_4": 95
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_squares([]) == 0\nassert     sum_squares([4]) == 16\nassert     sum_squares([1, 3, 4, 7, 8]) == 26\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_squares([]) == 0, 'No number'\nassert     sum_squares([1, 2, 3, 4, 5]) == 25, 'Square all'\nassert     sum_squares([1, -2, 3, -4, 5]) == 7, 'Square all negative'\nassert     sum_squares([]) == 0, 'Empty list'\nassert     sum_squares([1, 2, 3, 4, 5, 6]) == 29, 'Squares'\n",
        "num_ids_2": 41,
        "num_ids_4": 85
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_squares(sum_squares([4, -2])) == 14, \\\n                f\"sum_squares({[4, -2]})\\n should return 14, not {sum_squares([4, -2])}\"\nassert     sum_squares(sum_squares([-4, -2, -1])) == -10, \\\n                f\"sum_squares({[-4, -2, -1]})\\n should return -10, not {sum_squares([-4, -2, -1])}\"\nassert     sum_squares(sum_squares([-4, -2, -1, -3, -5])) == -28, \\\n                f\"sum_squares({[-4, -2, -1, -3, -5]})\\n should return -28, not {sum_squares([-4, -2, -1, -3, -5])}\"\nassert     sum_squares([]) == 0, \\\n                f\"sum_squares({[]})\\n should return 0, not {sum_squares([])}\"\nassert     sum_squares([-4, -2, -1]) == 0, \\\n                f\"sum_squares({[-4, -2, -1]})\\n should return 0, not {sum_squares([-4, -2, -1])}\"\n",
        "num_ids_2": 51,
        "num_ids_4": 98
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_squares([3, 4, 5, -3, -4]) == 5\nassert sum_squares([1, 2, 3, 4]) == 25\nassert sum_squares([1, 2, 3, 4, 5, 6]) == 29\n\ndef sum_squares_II(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    pass\n",
        "num_ids_2": 39,
        "num_ids_4": 60
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_squares([1,2,3]) == 1 + 4 + 9\nassert     sum_squares([1,2,3,-4,-5,6,-7,-8,-9]) == 5 + 4 + 25\nassert     sum_squares([-2,-1,-0,0,1]) == -2 * 0 + 4 * 0 + 4 * 1\nassert     sum_squares([]) == 0\n",
        "num_ids_2": 52,
        "num_ids_4": 95
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"\\nTest 3\")\nprint(check_if_last_char_is_a_letter(\"adfasdf\"))\nprint(check_if_last_char_is_a_letter(\"abc\"))\nprint(check_if_last_char_is_a_letter(\"hello there\"))\nprint(check_if_last_char_is_a_letter(\"123\"))\nprint(check_if_last_char_is_a_letter(\"A\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(check_if_last_char_is_a_letter(\"tangram\"))\nprint(check_if_last_char_is_a_letter(\"interview\"))\nprint(check_if_last_char_is_a_letter(\"game\"))\nprint(check_if_last_char_is_a_letter(\"fun\"))\nprint(check_if_last_char_is_a_letter(\"two\"))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    check_if_last_char_is_a_letter('Hello World') == True\n    check_if_last_char_is_a_letter('0') == False\n    check_if_last_char_is_a_letter('In') == False\n    check_if_last_char_is_a_letter('TEST') == True\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter('text') == True\nassert     check_if_last_char_is_a_letter('a word') == False\nassert     check_if_last_char_is_a_letter('a!@#$%^&*()_+-=123456789') == True\nassert     check_if_last_char_is_a_letter('text') == False\nassert     check_if_last_char_is_a_letter('abc') == False\n",
        "num_ids_2": 43,
        "num_ids_4": 101
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter(\"the\") == False\nassert     check_if_last_char_is_a_letter(\"The\") == True\nassert     check_if_last_char_is_a_letter(\"Theman\") == True\nassert     check_if_last_char_is_a_letter(\"Theman\") == False\nassert     check_if_last_char_is_a_letter(\"Theman\") == False\n",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter('abc') == True, 'Should return True if the last character is an alphabetical character'\nassert     check_if_last_char_is_a_letter('qwerty') == False, 'Should return False if the last character is not an alphabetical character'\nassert     check_if_last_char_is_a_letter('abc def') == False, 'Should return False if the last character is not a word'\n",
        "num_ids_2": 75,
        "num_ids_4": 111
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter(str1) == True\nassert     check_if_last_char_is_a_letter(str2) == False\nassert     check_if_last_char_is_a_letter(str3) == False\n",
        "num_ids_2": 44,
        "num_ids_4": 66
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter(\"a\") == False \nassert     check_if_last_char_is_a_letter(\"a\") == True \nassert     check_if_last_char_is_a_letter(\"  \") == True \nassert     check_if_last_char_is_a_letter(\"\") == False \nassert     check_if_last_char_is_a_letter(\" \") == False \n",
        "num_ids_2": 44,
        "num_ids_4": 87
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 4\n",
        "num_ids_2": 59,
        "num_ids_4": 142
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     can_arrange([1, 2, 3, 4]) == 1\nassert     can_arrange([1, 2, 3, 3]) == -1\nassert     can_arrange([2, 1, 3, 4]) == 2\nassert     can_arrange([2, 3, 1, 4]) == 3\nassert     can_arrange([3, 2, 1, 4]) == 4\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     can_arrange([]) == -1\nassert     can_arrange([1]) == 0\nassert     can_arrange([1, 1]) == 0\nassert     can_arrange([1, 1, 1]) == 0\nassert     can_arrange([1, 2, 1]) == 1\n",
        "num_ids_2": 24,
        "num_ids_4": 54
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\"\"\"\n    ###\n   ##  #\n  ###  #\n ####  ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     can_arrange([2, 1, 5, 8, 7, 8]) == 2\nassert     can_arrange([4, 3, 2, 1]) == -1\nassert     can_arrange([0, 0, 0, 1, 2, 3, 4]) == -1\nassert     can_arrange([0, 0, 0, 1, 2, 3, 4, 4, 4, 4, 4, 4]) == -1\n\n",
        "num_ids_2": 41,
        "num_ids_4": 101
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4]) == (4, 1)\nassert     largest_smallest_integers([1, 2, 3, -4]) == (1, -4)\nassert     largest_smallest_integers([-1, -2, -3, -4]) == (-1, 4)\nassert     largest_smallest_integers([-2, -1, -3, -4]) == (2, -4)\nassert     largest_smallest_integers([-4, -2, -1, -3]) == (-4, 1)\n",
        "num_ids_2": 52,
        "num_ids_4": 111
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([1,2,-3,2,1]) == (1, -3), \"error in test 1\"\nassert     largest_smallest_integers([1,2,3,4,5,6]) == (-6, 4), \"error in test 2\"\nassert     largest_smallest_integers([1,2,3,4]) == (4,1), \"error in test 3\"\nassert     largest_smallest_integers([-1,-2,-3,-4,-5,-6]) == (5, -1), \"error in test 4\"\nassert     largest_smallest_integers([]) == None, \"error in test 5\"\n",
        "num_ids_2": 69,
        "num_ids_4": 137
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_smallest_integers([10, 2, 4, 7, 4]) == (10, 4)\nassert    largest_smallest_integers([-10, -2, -4, -7, -4]) == (-10, -4)\nassert    largest_smallest_integers([-10, -2, -4, -7, -4]) == (-10, -4)\nassert    largest_smallest_integers([-10, -2, -4, -7, -4]) == (-10, -4)\nassert    largest_smallest_integers([-10, -2, -4, -7, -4]) == (None, None)\n",
        "num_ids_2": 60,
        "num_ids_4": 126
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_smallest_integers([5, -1, -100, 0, -1, -1, -1]) == (0, 5)\nassert     largest_smallest_integers([5, 6, 7, 8]) == (5, 8)\nassert     largest_smallest_integers([5, -6, -7, -8]) == (-8, -5)\nassert     largest_smallest_integers([5, -8, -7, -6]) == (-6, -5)\nassert     largest_smallest_integers([5, 6, 7, 8, 1, -1]) == (1, 8)\n",
        "num_ids_2": 61,
        "num_ids_4": 119
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4, 5]) == (5, 1)\nassert     largest_smallest_integers([1, -2, -3, -4, -5]) == (-5, -1)\nassert     largest_smallest_integers([1, 2, 3, -4, -5]) == (-5, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, -5]) == (-5, 1)\nassert     largest_smallest_integers([-2, -3, -4, -5]) == (-5, -2)\n",
        "num_ids_2": 59,
        "num_ids_4": 116
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([-1, -2, -3, -4]) == (None, -1)\nassert     largest_smallest_integers([-100, 0, 1, 2]) == (-100, 1)\nassert     largest_smallest_integers([-1, -2, -3, -4]) == (None, -1)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([]) == (None, None)\n",
        "num_ids_2": 56,
        "num_ids_4": 104
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare_one(3, 2)     == \"2\"\nassert     compare_one(3, 2.0)     == \"2.0\"\nassert     compare_one(2, 2.0)     == \"2.0\"\nassert     compare_one(\"2\", \"2\")     == \"2.0\"\nassert     compare_one(\"3\", \"2\")     == \"2.0\"\n",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     compare_one(1, 2) == 1\nassert     compare_one('1', '2') == 1\nassert     compare_one('1.2', '2.3') == 1\nassert     compare_one('1.2', '2') == 2\nassert     compare_one('1.2', '1.2') == 1\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare_one(1, 1) == None\nassert     compare_one(1, 2) == 2\nassert     compare_one(1, 1.1) == 1.1\nassert     compare_one(1.1, 1) == 1.1\nassert     compare_one(\"1.1\", 1) == 1.1\n",
        "num_ids_2": 28,
        "num_ids_4": 64
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert compare_one(1, 1) == None\nassert compare_one(1, 2) == 1\nassert compare_one(1.1, 2) == 2.1\nassert compare_one(\"a\", 1) == 1\n",
        "num_ids_2": 15,
        "num_ids_4": 43
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes two integers, floats, or strings representing\n    real numbers and returns the greater variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert compare_one(2,2) == None\nassert compare_one(2.4,2.3) == None\nassert compare_one('2.4',2.3) == None\nassert compare_one(2,2.4) == None\n",
        "num_ids_2": 15,
        "num_ids_4": 47
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     compare_one(2, 2) == None\nassert     compare_one(2, 2.1) == None\nassert     compare_one(2, \"2.1\") == None\nassert     compare_one(2, \"2\") == None\nassert     compare_one(2.1, 2) == None\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     compare_one(2, 3)     ==  3, 'First test passed.'\nassert compare_one(2, 2)    ==  None, 'Second test passed.'\nassert compare_one(2.2, 2.2)    ==  2.2, 'Third test passed.'\nassert compare_one('2.2', '2.2')    ==  None, 'Fourth test passed.'\nassert compare_one(2, 2.2)    ==  None, 'Fifth test passed.'\n",
        "num_ids_2": 42,
        "num_ids_4": 93
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     compare_one(1, 2) == None, \"Type Error\"\nassert     compare_one(1.0, 2) == None, \"Type Error\"\nassert     compare_one(1, 1.0) == None, \"Type Error\"\nassert     compare_one(1.0, 1) == None, \"Type Error\"\nassert     compare_one(\"1.0\", \"2\") == None, \"Type Error\"\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     compare_one(3, 4) == None, \"Not the correct output\"\nassert     compare_one(1, 1) == None, \"Not the correct output\"\nassert     compare_one(1, \"1\") == None, \"Not the correct output\"\nassert     compare_one(\"1\", \"1\") == None, \"Not the correct output\"\nassert     compare_one(1, 1.0) == None, \"Not the correct output\"\n",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_equal_to_sum_even(100) == True\nassert is_equal_to_sum_even(150) == False\nassert is_equal_to_sum_even(20) == True\nassert is_equal_to_sum_even(30) == True\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_equal_to_sum_even(5) == False\nassert     is_equal_to_sum_even(6) == False\nassert     is_equal_to_sum_even(7) == True\nassert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(9) == False\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_equal_to_sum_even(30) == True\nassert is_equal_to_sum_even(28) == False\nassert is_equal_to_sum_even(14) == True\nassert is_equal_to_sum_even(12) == True\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert is_equal_to_sum_even(10)\nassert is_equal_to_sum_even(24)\nassert not is_equal_to_sum_even(49)\n",
        "num_ids_2": 17,
        "num_ids_4": 46
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_equal_to_sum_even(11) == True\nis_equal_to_sum_even(12) == False\nis_equal_to_sum_even(16) == False\nis_equal_to_sum_even(17) == False\nis_equal_to_sum_even(20) == False\nis_equal_to_sum_even(21) == False\nis_equal_to_sum_even(25) == False\nis_equal_to_sum_even(26) == False\nis_equal_to_sum_even(30) == True\nis_equal_to_sum_even(33) == False\nis_equal_to_sum_even(44) == False\nis_equal_to_sum_even(45) == False\nis_equal_to_sum_even(50) == True\nis_equal_to_sum_even(51) == False\nis_equal_to_sum_even(55) == True\nis_equal_to_sum_even(56) == False\nis_equal_to_sum_even(60) == False\nis_equal_to_sum_even(61) == True\nis_equal_to_sum_even(66) == True\nis_equal_to_sum_even(67) == False\nis_equal_to_sum_even(70) == False\nis_equal_to_sum_even(71) == True\nis_equal_to_sum_even(76) == False\nis_equal_to_sum_even(77) == False\nis_equal_to_sum_even(80) == True\nis_equal_to_sum_even(81) == False\nis_equal_to_sum_even(85) == True\nis_equal_to_sum_even(86) == False\nis_equal_to_sum_even(90) == False\nis_equal_to_sum_even(91) == True\nis_equal_to_sum_even(95) == True\nis_equal_to_sum_even(96) == False\nis_equal_to_sum_even(100) == True\nis_equal_to_sum_even(101) == False\nis_equal_to_sum_even(105) == True\nis_equal_to_sum_even(106) == False\nis_equal_to_sum_even(110) == False\nis_equal_to_sum_even(111) == False\nis_equal_to_sum_even(115) == False\nis_equal_to_sum_even(116) == True\nis_equal_to_sum_even(120) == False\nis_equal_to_sum_even(121) == True\nis_equal_to_sum_even(125) == True\nis_equal_to_sum_even(126) == False\nis_equal_to_sum_even(130) == True\nis_equal_to_sum_even(131) == False\nis_equal_to_sum_even(135) == True\nis_equal_to_sum_even(136) == False\nis_equal_to_sum_even(140) == False\nis_equal_to_sum_even(141) == False\nis_equal_to_sum_even(145) == True\nis_equal_to_sum_even(146) == False\nis_equal_to_sum_even(150) == True\nis_equal_to_sum_even(151) == False\nis_equal_to_sum_even(155) == False\nis_equal_to_sum_even(156) == True\nis_equal_to_sum_even(160) == True\nis_equal_to_sum_even(161) == False\nis_equal_to_sum_even(165) == False\nis_equal_to_sum_even(166) == True\nis_equal_to_sum_even(170) == False\nis_equal_to_sum_even(171) == True\nis_equal_to_sum_even(175) == True\nis_equal_to_sum_even(176) == False\nis_equal_to_sum_even(180) == False\nis_equal_to_sum_even(181) == False\nis_equal_to_sum_even(185) == True\nis_equal_to_sum_even(186) == False\nis_equa",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(3) == True, \"Should return true if 3 can be written as the sum of 4 even numbers\"\nassert     is_equal_to_sum_even(4) == False, \"Should return false if 4 can be written as the sum of 4 even numbers\"\nassert     is_equal_to_sum_even(5) == False, \"Should return false if 5 can be written as the sum of 4 even numbers\"\nassert     is_equal_to_sum_even(6) == False, \"Should return false if 6 can be written as the sum of 4 even numbers\"\nassert     is_equal_to_sum_even(7) == False, \"Should return false if 7 can be written as the sum of 4 even numbers\"\n",
        "num_ids_2": 70,
        "num_ids_4": 140
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(11) == True, \"11 is not even\"\nassert is_equal_to_sum_even(9) == False, \"9 is even\"\nassert is_equal_to_sum_even(13) == True, \"13 is even\"\nassert is_equal_to_sum_even(15) == False, \"15 is even\"\n\n\ndef is_sum_of_at_least_one_even(n):\n    \"\"\"Evaluate whether the given number n can be written as a sum of at least one even number\n    \"\"\"\n    pass\n",
        "num_ids_2": 46,
        "num_ids_4": 90
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(5) == 120\nassert     special_factorial(4) == 24\nassert     special_factorial(100) == 145395030807001040\nassert     special_factorial(3) == 6\n",
        "num_ids_2": 24,
        "num_ids_4": 55
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         special_factorial(0) == 1\nassert         special_factorial(1) == 1\nassert         special_factorial(2) == 2\nassert         special_factorial(3) == 6\nassert         special_factorial(4) == 24\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"The function'special_factorial' has been successfully tested\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     special_factorial(0)         == 1,     '\"Special factorial (0) is not correct!'\nassert     special_factorial(1)         == 1,     '\"Special factorial (1) is not correct!'\nassert     special_factorial(5)         == 120,     '\"Special factorial (5) is not correct!'\nassert     special_factorial(10)         == 3628800,     '\"Special factorial (10) is not correct!'\n\nprint('\"Good job, world!\"')",
        "num_ids_2": 52,
        "num_ids_4": 106
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef star_factorial(n):\n    \"\"\"The American factorial is defined as:\n    star_factorial(n) = n * (n-1) * (n-2) *... * 1\n    where n > 0\n    The function will receive an integer as input and should return the star factorial of this integer.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\nassert     special_factorial(10) == 3628800\nassert     special_factorial(0) == 1\nassert     special_factorial(-1) == 0\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fix_spaces( \" hello  world \" ) == \"hello_world\"\nassert fix_spaces( \" hello_world \" ) == \"hello_world\"\nassert fix_spaces( \"hello world \" ) == \"hello_world\"\nassert fix_spaces( \" hello  world \" ) == \"hello_world\"\nassert fix_spaces( \" hello_world \" ) == \"hello_world\"\n",
        "num_ids_2": 39,
        "num_ids_4": 76
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fix_spaces('a b c') == 'a-b-c'\nassert     fix_spaces('x y z') == 'x-y-z'\nassert     fix_spaces('   hello') == 'hello'\nassert     fix_spaces('hello world') == 'hello-world'\nassert     fix_spaces('i like short words') == 'i-like-short-words'\n",
        "num_ids_2": 40,
        "num_ids_4": 72
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fix_spaces(\"Hi\") == \"h_i\" \nassert     fix_spaces(\"a\") == \"a_\" \nassert     fix_spaces(\"a b c\") == \"a__b_c\" \nassert     fix_spaces(\"a b   c\") == \"a__b_c\"\nassert     fix_spaces(\"a b c d e f\") == \"a_b_c_d_e_f\" \n",
        "num_ids_2": 33,
        "num_ids_4": 75
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\") == \"h_e_l_o_w_r_d\"\n    fix_spaces(\"Hello World\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"\\n\\n\\nPart2:\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     file_name_check(file_name) == 'Yes', f\"You're trying to write a file with the name '{file_name}'\"\nassert     file_name[0].isalpha() or file_name[0] == '.', f\"The first character of the file's name, {file_name}, is not a letter\"\nassert     file_name[2:] in ['txt', 'exe', 'dll'], f\"The file's name, {file_name}, does not have the correct extension\"\nprint(\"Congrats, you passed the test!\")\n\n\n",
        "num_ids_2": 80,
        "num_ids_4": 119
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    # No error should be raised\nassert file_name_check('a') == 'Yes'\nassert file_name_check('b') == 'No'\nassert file_name_check('1.txt') == 'Yes'\nassert file_name_check('a1.txt') == 'Yes'\n",
        "num_ids_2": 17,
        "num_ids_4": 47
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     file_name_check(\"y2.txt\") == \"No\"\nassert     file_name_check(\"1.txt\") == \"Yes\"\nassert     file_name_check(\"a1.txt\") == \"No\"\nassert     file_name_check(\"z1.txt\") == \"Yes\"\nassert     file_name_check(\"z.txt\") == \"No\"\n",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     file_name_check('text.txt') == 'Yes'\nassert     file_name_check('123.txt') == 'No'\nassert     file_name_check('123a.txt') == 'No'\nassert     file_name_check('a.txt') == 'No'\nassert     file_name_check('abc123.txt') == 'No'\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     file_name_check(\"textfile.txt\") == 'No', \"This should be 'No'.\"\nassert     file_name_check(\"text.txt\") == 'Yes', \"This should be 'Yes'.\"\nassert     file_name_check(\"test.txt\") == 'Yes', \"This should be 'Yes'.\"\nassert     file_name_check(\"test.exe\") == 'Yes', \"This should be 'Yes'.\"\nassert     file_name_check(\"test.dll\") == 'Yes', \"This should be 'Yes'.\"\n",
        "num_ids_2": 49,
        "num_ids_4": 97
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsum_squares([1,2,3,4,5,6,7,8,9]) == sum([1, 4, 9, 16, 25, 36, 49, 64, 81])\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_squares([1,2,3,4,5,6,7]) == 84, 'not correct'\nassert     sum_squares([2,4,6,8,10,12,14]) == 196, 'not correct'\nassert     sum_squares([7,15,21,28,36]) == 169, 'not correct'\nassert     sum_squares([100,200,300,400,500,600,700,800,900,1000]) == 5050, 'not correct'\n",
        "num_ids_2": 58,
        "num_ids_4": 119
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert sum_squares([]) == 0\nassert sum_squares([1]) == 1\nassert sum_squares([1,2]) == 2\nassert sum_squares([1,2,2]) == 6\n",
        "num_ids_2": 13,
        "num_ids_4": 37
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 25, \"incorrect sum_squares\"\nassert sum_squares([1, 2, 3, 4, 5]) == 25, \"incorrect sum_squares\"\nassert sum_squares([1, 2, 3, 4, 5]) == 25, \"incorrect sum_squares\"\nassert sum_squares([1, 2, 3, 4, 5]) == 25, \"incorrect sum_squares\"\nassert sum_squares([1, 2, 3, 4, 5]) == 25, \"incorrect sum_squares\"\n",
        "num_ids_2": 57,
        "num_ids_4": 113
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_squares([0, -1, 3, 12, -3]) == 14\nassert sum_squares([9, -12, 4, -3, 81]) == 36\n\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(sum_squares(lst)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_squares([0, 1, 2, 3, 4]) == 30\nassert     sum_squares([]) == 0\nassert     sum_squares([-5, 6, 3, 2, 0]) == 60\nassert     sum_squares([-6, 0, 3, 6, -1, -2, 0]) == 42\n",
        "num_ids_2": 31,
        "num_ids_4": 79
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     words_in_sentence('i do not know what this is') == 'i do not know what this is'\nassert     words_in_sentence('my name is john, i am a boy') =='my name is john, i am a boy'\nassert     words_in_sentence(' i have a red car and a blue car ') == 'i have a red car and a blue car'\nassert     words_in_sentence(' i have a red car and a blue car and a green car') == 'i have a red car and a blue car and a green car'\nassert     words_in_sentence('i have a red car and a blue car and a green car') == 'i have a red car and a blue car and a green car'\n",
        "num_ids_2": 60,
        "num_ids_4": 133
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     words_in_sentence('This is a test of words') == 'this is a test'\nassert words_in_sentence('This is a test') == 'this is a'\nassert words_in_sentence('This is a test of words') == 'this is a test'\n",
        "num_ids_2": 44,
        "num_ids_4": 67
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert words_in_sentence(\"Python is an interpreted, high-level, general-purpose programming language.\") == \"Python is an interpreted, high-level, general-purpose programming language.\"\nassert words_in_sentence(\"The primary goal of programming is to create programs that work well and efficiently.\") == \"The primary goal of programming is to create programs that work well and efficiently.\"\nassert words_in_sentence(\"Run in a normal shell: python3 -m pip install graphviz\") == \"Run in a normal shell: python3 -m pip install graphviz\"\nassert words_in_sentence(\"My program runs in a normal shell: python3 -m pip install graphviz\") == \"My program runs in a normal shell: python3 -m pip install graphviz\"\n",
        "num_ids_2": 44,
        "num_ids_4": 128
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert words_in_sentence('This is a sample sentence.') == 'thi s a smaple sent ent.'\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nwords_in_sentence('hi my name is mr x') == 'hi mr x'\n\nprint('Check your solution')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     simplify('1/3', '2/3') == True\nassert     simplify('1/2', '3/4') == False\nassert     simplify('1/2', '4/5') == True\nassert     simplify('1/2', '4/6') == False\nassert     simplify('1/4', '3/4') == False\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     simplify(\"1/4\", \"1/4\") == True\nassert     simplify(\"1/4\", \"2/4\") == False\nassert     simplify(\"1/4\", \"3/4\") == True\nassert     simplify(\"1/4\", \"5/4\") == False\nassert     simplify(\"1/4\", \"6/4\") == True\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nsimple(2, '1/2')\nsimple('1/2', '1/2')\nsimple(5, '3/2')\nsimple(3, '3/2')\nsimple(2, '3/2')\nsimple('3/2', '3/2')\nsimple('2/1', '3/2')\nsimple(2, '2/1')\n\nassert not simplify(4, '1/3')\nassert not simplify(1, '1/2')\n",
        "num_ids_2": 15,
        "num_ids_4": 27
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (simplify(1, 1) == True), \"1/1 should be True\"\nassert     (simplify(\"1\", \"1\") == False), \"1/1 should be False\"\nassert     (simplify(\"1\", 2) == True), \"1/2 should be True\"\nassert     (simplify(\"2\", \"3\") == True), \"2/3 should be True\"\nassert     (simplify(\"2\", \"2\") == False), \"2/2 should be False\"\n",
        "num_ids_2": 47,
        "num_ids_4": 94
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     simplify(x=\"1/3\", n=\"2\") == True\nassert     simplify(x=\"1/3\", n=\"-2\") == False\nassert     simplify(x=\"2/3\", n=\"2\") == False\nassert     simplify(x=\"3/4\", n=\"-2\") == False\nassert     simplify(x=\"2/4\", n=\"1\") == False\n",
        "num_ids_2": 39,
        "num_ids_4": 78
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (simplify('1/2', '2') == True), \"simplify('1/2', '2') should return True\"\nassert     (simplify('2/5', '2') == True), \"simplify('2/5', '2') should return True\"\nassert     (simplify('3/8', '2') == True), \"simplify('3/8', '2') should return True\"\nassert     (simplify('4/5', '2') == True), \"simplify('4/5', '2') should return True\"\nassert     (simplify('9/10', '2') == True), \"simplify('9/10', '2') should return True\"\n",
        "num_ids_2": 68,
        "num_ids_4": 136
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     simplify(\"2/3\", \"2/3\") == False\nassert     simplify(\"1/4\", \"2/4\") == False\nassert     simplify(\"0/2\", \"2/4\") == False\nassert     simplify(\"-1/2\", \"2/4\") == False\nassert     simplify(\"4/4\", \"2/4\") == False\n",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     simplify('1/2', '1/2') == True, \"Wrong Answer\"\nassert     simplify('1/2', '3/4') == True, \"Wrong Answer\"\nassert     simplify('1/2', '4/5') == False, \"Wrong Answer\"\nassert     simplify('1/2', '1/2') == True, \"Wrong Answer\"\nassert     simplify('1/2', '1/2') == True, \"Wrong Answer\"\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     simplify('2/3', '2/3') == True, 'incorrect simplification'\nassert     simplify('2/3', '2/4') == False, 'incorrect simplification'\nassert     simplify('1/2', '2/3') == False, 'incorrect simplification'\nassert     simplify('3/3', '2/3') == False, 'incorrect simplification'\nassert     simplify('1/3', '2/3') == False, 'incorrect simplification'\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     simplify('1/2', '1/2') == True\nassert     simplify('0/2', '1/2') == False\nassert     simplify('1/2', '1/3') == False\nassert     simplify('2/3', '1/3') == False\nassert     simplify('1/3', '1/4') == False\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     order_by_points([3,4,3,3,3,3,2,2,1]) == [1, 2, 3, 3, 4, 3, 3, 3, 3]\nassert     order_by_points([3,3,2,2,1]) == [1, 2, 3, 3, 3]\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     order_by_points([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     order_by_points([2, 4, 3, 1, 5]) == [1, 2, 3, 4, 5]\nassert     order_by_points([1, 4, 5, 2, 3]) == [1, 2, 3, 4, 5]\n\n",
        "num_ids_2": 62,
        "num_ids_4": 93
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     order_by_points([-1, -2, -3, -4, -5, -6]) == [-1, -6, -3, -4, -2, -5]\nassert     order_by_points([-6, -5, -4, -3, -2, -1]) == [-1, -2, -3, -4, -5, -6]\nassert     order_by_points([-2, -1]) == [-1, -2]\nassert     order_by_points([]) == []\nassert     order_by_points([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\n",
        "num_ids_2": 92,
        "num_ids_4": 126
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     order_by_points([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1]) \\\n==    [[-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     order_by_points([]) == []\nassert     order_by_points([1]) == [1]\nassert     order_by_points([1,2,3,4,5]) == [1,2,3,4,5]\nassert     order_by_points([1,2,3,4,5,6,7,8,9,0]) == [0,9,8,7,6,5,4,3,2,1]\nassert     order_by_points([1,2,3,4,5,6,7,8,9,0,5,4,3,2,1]) == [0,9,8,7,6,5,4,3,2,1,5,4,3,2,1]\n",
        "num_ids_2": 27,
        "num_ids_4": 109
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     order_by_points([2, 4, 5, 8, 3, 7, 1, 6, 5]) == \n        [1, 4, 5, 5, 7, 8, 6, 6, 2]\nassert     order_by_points([9, 1, 1, 1, 1, 2]) == \n        [9, 1, 1, 1, 1, 2]\nassert     order_by_points([5, 3, 2, 1, 4]) == \n        [1, 2, 3, 3, 5]\n\n\ndef my_range(*args):\n    if len(args) == 1:\n        start = 0\n        stop = args[0]\n        step = 1\n    else:\n        start = args[0]\n        stop = args[1]\n        step = args[2]\n    result = []\n    for i in range(start, stop+1, step):\n        result.append(i)\n    return result\n",
        "num_ids_2": 52,
        "num_ids_4": 73
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     order_by_points([5,8,7,6,4,1]) == [1,4,5,6,7,8]\nassert     order_by_points([4,5,1,8,6,7]) == [1,4,5,6,7,8]\n\nprint('All tests passed!')",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     order_by_points([5,4,3,2,1]) == [1,2,3,4,5]\nassert     order_by_points([4,3,2,1]) == [1,2,3,4]\nassert     order_by_points([5,5,5,2,1]) == [1,2,5,5,5]",
        "num_ids_2": 58,
        "num_ids_4": 89
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     specialFilter([10, 3, 5, 6, 9, 7, 8, 11, 12]) == 3\nassert     specialFilter([10, 3, 5, 6, 9, 7, 8, 11, 12, 15]) == 5\nassert     specialFilter([10, 3, 5, 6, 9, 7, 8, 11, 12, 17]) == 6\nassert     specialFilter([10, 3, 5, 6, 9, 7, 8, 11, 12, 19]) == 7\nassert     specialFilter([10, 3, 5, 6, 9, 7, 8, 11, 12, 19, 23]) == 7\n",
        "num_ids_2": 54,
        "num_ids_4": 110
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nassert specialFilter([3, 5, 9, 9, 1, 8]) == 4\nassert specialFilter([9, 8, 1, 5, 9, 6, 7, 8, 9]) == 2\nassert specialFilter([1, 3, 5, 7, 9]) == 5\nassert specialFilter([1, 3, 5, 7, 9, 2, 4, 8, 10]) == 3\n",
        "num_ids_2": 22,
        "num_ids_4": 64
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     specialFilter([10, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 2\nassert     specialFilter([9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 0\nassert     specialFilter([11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 1\nassert specialFilter([9, 11]) == 0\nassert specialFilter([10, 11]) == 1\n",
        "num_ids_2": 58,
        "num_ids_4": 97
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(specialFilter(nums)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"Pass\" if (specialFilter([1,2,3,4,5,6,7]) == 4) else \"Fail\")\nprint(\"Pass\" if (specialFilter([1,2,3,4,5,6,7]) == 5) else \"Fail\")\nprint(\"Pass\" if (specialFilter([0,2,3,4,6,7]) == 5) else \"Fail\")\nprint(\"Pass\" if (specialFilter([6,8,0,10]) == 3) else \"Fail\")\nprint(\"Pass\" if (specialFilter([1,1]) == 2) else \"Fail\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    specialFilter([3,9,2,8,1,4]) == 5\n    specialFilter([6,1,4,3,2,1]) == 6\n    specialFilter([6,1,4,3,2,6]) == 2\n    specialFilter([6,1,4,3,2,7]) == 1\n    specialFilter([6,1,4,3,2,8]) == 2\n    specialFilter([6,1,4,3,2,9]) == 0\n    specialFilter([6,1,4,3,2,9,2]) == 4\n    specialFilter([6,1,4,3,2,7,6]) == 0\n    specialFilter([1,2,3,4,5,6]) == 6\n    specialFilter([1,2,3,4,5,6,1]) == 5\n    specialFilter([1,2,3,4,5,6,1,2]) == 4\n    specialFilter([1,2,3,4,5,6,1,2,3]) == 3\n    specialFilter([1,2,3,4,5,6,1,2,3,4]) == 2\n    specialFilter([1,2,3,4,5,6,1,2,3,4,6]) == 1\n    specialFilter([1,2,3,4,5,6,1,2,3,4,5,6]) == 0\n    specialFilter([1,2,3,4,5,6,1,2,3,4,5,6,1]) == 5\n    specialFilter([1,2,3,4,5,6,1,2,3,4,5,6,1,2]) == 4\n    specialFilter([1,2,3,4,5,6,1,2,3,4,5,6,1,2,3]) == 3\n    specialFilter([1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4]) == 2\n    specialFilter([1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,6]) == 1\n    specialFilter([1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6]) == 0\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     specialFilter([12,17,18,23,24]) == 1, \"Wrong answer\"\nassert     specialFilter([0,0,1,1,3,3]) == 2, \"Wrong answer\"\nassert     specialFilter([11,3,14,19,21,28]) == 3, \"Wrong answer\"\nassert     specialFilter([12,9,18,22,24,33]) == 4, \"Wrong answer\"\nassert     specialFilter([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "num_ids_2": 50,
        "num_ids_4": 102
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_max_triples(5) == 6\nassert     get_max_triples(10) == 30\nassert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_max_triples2(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Your code here\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nget_max_triples(5) == 1\nget_max_triples(6) == 1\nget_max_triples(7) == 3\nget_max_triples(8) == 3\nget_max_triples(9) == 4\nget_max_triples(10) == 4\nget_max_triples(11) == 3\nget_max_triples(12) == 2\nget_max_triples(13) == 1\nget_max_triples(14) == 1\nget_max_triples(15) == 0\nget_max_triples(16) == 0\nget_max_triples(17) == 0\nget_max_triples(18) == 0\nget_max_triples(19) == 0\nget_max_triples(20) == 0\nget_max_triples(21) == 0\nget_max_triples(22) == 0\nget_max_triples(23) == 0\nget_max_triples(24) == 0\nget_max_triples(25) == 0\nget_max_triples(26) == 0\nget_max_triples(27) == 0\nget_max_triples(28) == 0\nget_max_triples(29) == 0\nget_max_triples(30) == 0\nget_max_triples(31) == 0\nget_max_triples(32) == 0\nget_max_triples(33) == 0\nget_max_triples(34) == 0\nget_max_triples(35) == 0\nget_max_triples(36) == 0\nget_max_triples(37) == 0\nget_max_triples(38) == 0\nget_max_triples(39) == 0\nget_max_triples(40) == 0\nget_max_triples(41) == 0\nget_max_triples(42) == 0\nget_max_triples(43) == 0\nget_max_triples(44) == 0\nget_max_triples(45) == 0\nget_max_triples(46) == 0\nget_max_triples(47) == 0\nget_max_triples(48) == 0\nget_max_triples(49) == 0\nget_max_triples(50) == 0\nget_max_triples(51) == 0\nget_max_triples(52) == 0\nget_max_triples(53) == 0\nget_max_triples(54) == 0\nget_max_triples(55) == 0\nget_max_triples(56) == 0\nget_max_triples(57) == 0\nget_max_triples(58) == 0\nget_max_triples(59) == 0\nget_max_triples(60) == 0\nget_max_triples(61) == 0\nget_max_triples(62) == 0\nget_max_triples(63) == 0\nget_max_triples(64) == 0\nget_max_triples(65) == 0\nget_max_triples(66) == 0\nget_max_triples(67) == 0\nget_max_triples(68) == 0\nget_max_triples(69) == 0\nget_max_triples(70) == 0\nget_max_triples(71) == 0\nget_max_triples(72) == 0\nget_max_triples(73) == 0\nget_max_triples(74) == 0\nget_max_triples(75) == 0\nget_max_triples(76) == 0\nget_max_triples(77) == 0\nget_max_triples(78) == 0\nget_max_triples(79) == 0\nget_max_triples(80) == 0\nget_max_triples(81) == 0\nget_max_triples(82) == 0\nget_max_triples(83) == 0\nget_max_triples(84) == 0\nget_max_triples(85) == 0\nget_max_triples(86) == 0\nget_max_triples(87) == 0\nget_max_triples(88) == 0\nget_max_triples(89) == 0\nget_ma",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 4\nassert     get_max_triples(6) == 5\nassert     get_max_triples(7) == 5\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_max_triples(6) == 3\nassert get_max_triples(2) == 1\nassert get_max_triples(1) == 0\nassert get_max_triples(7) == 0\nassert get_max_triples(8) == 2",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_max_triples(3) == 5\nassert     get_max_triples(4) == 9\nassert     get_max_triples(5) == 10\nassert     get_max_triples(6) == 18\nassert     get_max_triples(7) == 22\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert get_max_triples(3) == 3, \"get_max_triples(3)\"\nassert get_max_triples(5) == 3, \"get_max_triples(5)\"\nassert get_max_triples(7) == 2, \"get_max_triples(7)\"\nassert get_max_triples(10) == 4, \"get_max_triples(10)\"\n",
        "num_ids_2": 27,
        "num_ids_4": 75
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_max_triples(2) == 3\nassert     get_max_triples(3) == 6\nassert     get_max_triples(5) == 14\nassert     get_max_triples(10) == 6",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_max_triples(10) == 2\nassert     get_max_triples(11) == 3\nassert     get_max_triples(13) == 3\nassert     get_max_triples(17) == 4\nassert     get_max_triples(19) == 4\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef f(planet1, planet2):\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bf('mercury','venus') == ('mercury','venus', 'earth','mars')\nassert     bf('venus','earth') == ('venus', 'earth','mercury','mars')\nassert     bf('mars','venus') == ('mars', 'earth','mercury','venus')\nassert     bf('earth','mars') == ('earth','mars','mercury','venus')\nassert     bf('venus','earth') == ('venus', 'earth','mercury','mars')\n",
        "num_ids_2": 52,
        "num_ids_4": 102
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     'bf(planet1 = \"Mercury\", planet2 = \"Venus\")' == bf('Mercury', 'Venus')\nassert     'bf(planet1 = \"Mars\", planet2 = \"Saturn\")' == bf('Mars', 'Saturn')\nassert     'bf(planet1 = \"Earth\", planet2 = \"Neptune\")' == bf('Earth', 'Neptune')\nassert     'bf(planet1 = \"Jupiter\", planet2 = \"Uranus\")' == bf('Jupiter', 'Uranus')\nassert     'bf(planet1 = \"Saturn\", planet2 = \"Pluto\")' == bf('Saturn', 'Pluto')\n",
        "num_ids_2": 62,
        "num_ids_4": 128
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bf('earth','venus') == ('earth','venus')\nassert     bf('venus','earth') == ('venus', 'earth')\nassert     bf('mercury','venus') == ()\nassert     bf('mercury','mars') == ('mercury','mars')\nassert     bf('mars','mercury') == ('mars','mercury')\n",
        "num_ids_2": 35,
        "num_ids_4": 70
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bf('Earth', 'Mercury') == \n    ('Mars', 'Venus', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Earth') == ()\nassert     bf('Venus', 'Earth') == ()\nassert     bf('Mercury', 'Mars') == ('Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Mercury') == ('Jupiter', 'Saturn', 'Uranus', 'Neptune')\n",
        "num_ids_2": 25,
        "num_ids_4": 68
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bf('Mercury', 'Venus') ==     ('Mercury', 'Venus'), 'Mercury-Venus'\nassert     bf('Mercury', 'Earth') ==     (), 'Mercury-Earth'\nassert     bf('Mercury', 'Mars') ==     ('Mercury', 'Mars'), 'Mercury-Mars'\nassert     bf('Mercury', 'Jupiter') ==     ('Mercury', 'Jupiter'), 'Mercury-Jupiter'\nassert     bf('Mercury', 'Saturn') ==     ('Mercury', 'Saturn'), 'Mercury-Saturn'\n",
        "num_ids_2": 49,
        "num_ids_4": 104
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Test\n    print(bf('Earth', 'Mercury'))\n    print(bf('Earth', 'Mars'))\n    print(bf('Earth', 'Venus'))\n    print(bf('Earth', 'Saturn'))\n    print(bf('Earth', 'Uranus'))\n    print(bf('Earth', 'Neptune'))\n    print(bf('Earth', 'Pluto'))\n    print(bf('Earth', 'Sun'))\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Mars') == ('Earth', 'Mars', 'Mercury', 'Venus', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Saturn', 'Uranus') == ('Saturn', 'Uranus', 'Earth', 'Mars', 'Venus', 'Jupiter', 'Neptune', 'Mars')\nassert     bf('Mercury', 'Mercury') == ('Mercury',)\nassert     bf('Mars', 'Mars') == ('Mars',)\n",
        "num_ids_2": 88,
        "num_ids_4": 151
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sorted_list_sum(['cat', 'dog', 'dog', 'cat', 'fish']) == ['cat', 'dog', 'dog', 'cat', 'fish']\nassert     sorted_list_sum(['cat', 'cat', 'dog', 'dog', 'fish']) == ['cat', 'dog', 'cat', 'fish', 'dog']\nassert     sorted_list_sum(['cat', 'dog', 'dog', 'fish', 'cat', 'fish']) == ['cat', 'dog', 'cat', 'fish', 'dog', 'fish']\nassert     sorted_list_sum(['cat', 'dog', 'cat', 'dog', 'dog', 'dog', 'fish']) == ['cat', 'dog', 'dog', 'dog', 'dog', 'dog', 'fish']\nassert     sorted_list_sum(['cat', 'dog', 'fish', 'cat', 'fish', 'dog', 'cat', 'dog']) == ['cat', 'cat', 'cat', 'dog', 'dog', 'dog', 'fish', 'fish']\n",
        "num_ids_2": 84,
        "num_ids_4": 186
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sorted_list_sum([\n        \"abc\", \"bcd\", \"cde\", \"ebf\", \"fgh\", \"ghe\", \"hfg\", \"iij\", \"jkl\", \"kll\"\n    ]) == sorted([\"abc\", \"bcd\", \"cde\", \"ebf\", \"fgh\", \"ghe\", \"hfg\", \"iij\", \"jkl\", \"kll\"])\n\nprint(sorted_list_sum(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']))",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sorted_list_sum([]) == None, 'an empty list is not a valid list'\nassert     sorted_list_sum(['']) == None, 'a list with one element is not a valid list'\nassert     sorted_list_sum(['']) == None, 'a list with only one element is not a valid list'\nassert     sorted_list_sum([]) == None, 'a list with only one element is not a valid list'\nassert     sorted_list_sum(['a']) == None, 'a list with only one element is not a valid list'\n",
        "num_ids_2": 51,
        "num_ids_4": 106
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sorted_list_sum([\"dan\", \"a\", \"q\"]) == [\"a\", \"dan\", \"q\"]\nassert     sorted_list_sum([\"a\"]) == [\"a\"]\nassert     sorted_list_sum([\"dan\"]) == [\"dan\"]\nassert     sorted_list_sum([\"dan\", \"a\", \"q\", \"dan\", \"a\", \"q\"]) == [\"dan\", \"a\", \"q\", \"dan\", \"q\"]\nassert     sorted_list_sum([\"dan\", \"a\", \"q\", \"dan\", \"a\", \"q\"]) == [\"a\", \"dan\", \"q\", \"dan\", \"q\"]\n",
        "num_ids_2": 48,
        "num_ids_4": 111
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sorted_list_sum([]) == []\nassert sorted_list_sum([]) == []\nassert sorted_list_sum(['']) == []\nassert sorted_list_sum(['']) == []\nassert sorted_list_sum(['foo', 'bar']) == ['bar', 'foo']\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sorted_list_sum(['apple', 'a']) == ['a', 'apple']\nassert     sorted_list_sum(['apple', 'a', 'banana']) == ['a', 'apple', 'banana']\nassert     sorted_list_sum(['apple', 'a', 'banana', 'b', 'c']) == ['b', 'a', 'apple', 'banana', 'c']\nassert     sorted_list_sum(['apple', 'a', 'banana', 'b', 'c', 'a']) == ['a', 'a', 'apple', 'banana', 'b', 'c']",
        "num_ids_2": 56,
        "num_ids_4": 150
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert sorted_list_sum([]) == []\nassert sorted_list_sum([1, 2, 3]) == [1, 2, 3]\nassert sorted_list_sum([\"hey\", \"here\", \"you\"]) == [\"here\", \"hey\", \"you\"]\nassert sorted_list_sum([\"hey\", \"here\", \"you\", \"hola\"]) == [\"here\", \"hola\", \"hey\", \"you\"]\n",
        "num_ids_2": 14,
        "num_ids_4": 64
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(sorted_list_sum([\"a1\", \"a\", \"ab\", \"b\", \"ab\", \"abc\", \"abcd\", \"abcde\"]))\nprint(sorted_list_sum([\"a\", \"aa\", \"aaa\"]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     x_or_y(0, 2, 1)    == 2, \\\n        'y = 1'\nassert     x_or_y(1, 1, 2)    == 1, \\\n        'y = 2'\nassert     x_or_y(2, 2, 1)    == 2, \\\n        'x = 2'\nassert     x_or_y(3, 1, 1)    == 1, \\\n        'x = 1'\nassert     x_or_y(4, 3, 2)    == 2, \\\n        'x = 2'\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nx_or_y(5, 2, 3) == 3\nassert \nx_or_y(4, 3, 2) == 3\nassert \nx_or_y(8, 4, 4) == 4\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert x_or_y(5, 5, 0) == 0\nassert x_or_y(5, 0, 5) == 5\nassert x_or_y(7, 6, 2) == 0\nassert x_or_y(7, 2, 6) == 2\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert x_or_y(2, 2, 3) == 2\nassert x_or_y(3, 2, 3) == 3\nassert x_or_y(4, 2, 3) == 3\nassert x_or_y(5, 2, 3) == 2\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     double_the_difference([3,5,7,10,11,12]) == 51\nassert double_the_difference([1,3,5,10]) == 1\nassert double_the_difference([-9,1,-5,4,8,-10]) == 1\nassert double_the_difference([-9,-1]) == -1\n",
        "num_ids_2": 43,
        "num_ids_4": 84
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     double_the_difference([3, 2, 1, 4, 5]) == 8, \\\n        'Expected 8, got %d' % double_the_difference([3, 2, 1, 4, 5])\nassert     double_the_difference([]) == 0, \\\n        'Expected 0, got %d' % double_the_difference([])\nassert     double_the_difference(['a', 'b', 'c']) == 0, \\\n        'Expected 0, got %d' % double_the_difference(['a', 'b', 'c'])\nassert     double_the_difference([-1, -2, -3, -4, -5]) == 0, \\\n        'Expected 0, got %d' % double_the_difference([-1, -2, -3, -4, -5])\n\n\n",
        "num_ids_2": 39,
        "num_ids_4": 92
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         double_the_difference([1,2,3,4,5])    == 0\nassert         double_the_difference([1,4,7,3,2])    == 0\nassert         double_the_difference([-2,-4,-7,-3,-1])    == 0\nassert         double_the_difference([])                    == 0\nassert         double_the_difference([1,2,3])            == 1\n",
        "num_ids_2": 46,
        "num_ids_4": 84
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     double_the_difference([4, 6, 2, 7, -6, 8, -2]) == 12\nassert double_the_difference([]) == 0\nassert double_the_difference([2, 1, 3, 4, 5]) == 25\n\n\ndef factorial_iter(n):\n    '''\n    Given an integer n, calculate and return n! = n*(n-1)*(n-2)*...*2*1\n    Using a while loop.\n    '''\n    pass\n",
        "num_ids_2": 40,
        "num_ids_4": 61
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert         double_the_difference([1, 2, 3, 4, 5, 6]) == 0, \\\n            \"Wrong output for the given test case\"\nassert     double_the_difference([2, 4, 6, 8, 10, 12]) == 32, \\\n            \"Wrong output for the given test case\"\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     double_the_difference([2, 4, 6, 8]) == 6\nassert double_the_difference([]) == 0\nassert double_the_difference([1, 3, 5, 7, -1, 0, -2, -3, -5]) == 15\nassert double_the_difference([1, -3, 5, 7, -1, 0, -2, -3, -5]) == 7\nassert double_the_difference([1, 1, 1, 1]) == 2\n",
        "num_ids_2": 32,
        "num_ids_4": 99
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     double_the_difference(\n    [1, 2, 3, 4, 5, 6, 7, 8]) == 25, 'incorrect'\nassert     double_the_difference(\n    [0, 2, 3, 4, 5, 6, 7, 8]) == 0, 'incorrect'\nassert     double_the_difference([2, 3, 5]) == 0, 'incorrect'\nassert     double_the_difference([-1, -2, -3, -4, -5]) == 0, 'incorrect'\nassert     double_the_difference([]) == 0, 'incorrect'\n",
        "num_ids_2": 20,
        "num_ids_4": 75
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 1, \"It should return 1\"\nassert     double_the_difference([1,2,3,4,-1,-2,-3,-4]) == 8, \"It should return 8\"\nassert double_the_difference([]) == 0, \"It should return 0\"\nassert double_the_difference([2]) == 0, \"It should return 0\"\nassert double_the_difference([2,3,4,5]) == 0, \"It should return 0\"\n",
        "num_ids_2": 64,
        "num_ids_4": 103
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     double_the_difference([3, 9, -2]) == 34\nassert     double_the_difference([5, 6, 7]) == 60\nassert     double_the_difference([]) == 0\n",
        "num_ids_2": 37,
        "num_ids_4": 50
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 10, 'Not working'\nassert     double_the_difference([1,2,3,4]) == 4, 'Not working'\nassert     double_the_difference([1,-2,-3]) == 4, 'Not working'\nassert     double_the_difference([1,-2,4]) == 8, 'Not working'\nassert     double_the_difference([]) == 0, 'Not working'\n",
        "num_ids_2": 52,
        "num_ids_4": 98
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     compare([6,4,4], (6,4)) == (1,1)\nassert compare([1,2,3], (1,2)) == (0,2)\nassert compare([1,2,4], (2,3)) == (0,0)\nassert compare([1,2,4], (1,1)) == (0,3)\nassert compare([1,2,4], (1,2)) == (0,2)\n",
        "num_ids_2": 44,
        "num_ids_4": 86
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare(scores = [70,100,90],guess =[80,70,90]) ==[5,0,0]\nassert     compare(scores = [70,100,90],guess =[80,50,60]) ==[5,5,10]\nassert     compare(scores = [70,100,90],guess =[90,70,90]) ==[0,10,0]\n\nprint(\"OK\"",
        "num_ids_2": 68,
        "num_ids_4": 102
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncompare([10,10,10,0,0], [0,2,1,2,0]) == [0,1,2,0,0]\ncompare([10,10,10,10,0], [0,2,1,2,0]) == [0,1,2,0,0]\ncompare([10,10,10,10,0], [0,2,1,2,0]) == [0,1,2,0,0]\ncompare([10,10,10,10,10], [0,2,1,2,0]) == [0,1,2,0,0]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     compare(range(3), [0,0,1]) == range(0,3)\nassert     compare(range(3), [0,1,2]) == range(0,3)\nassert     compare(range(3), [1,0,2]) == range(0,3)\nassert     compare(range(3), [2,1,0]) == range(0,3)\nassert     compare(range(3), [0,2,1]) == range(0,3)\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     compare([3,2,4,5,6,7],[5,4,3,6,5,3]) == [0,4,3,0,4,5], \"Wrong\"\nassert     compare([3,2,4,5,6,7],[4,3,2,3,4,3]) == [3,0,1,0,1,1], \"Wrong\"\n",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     compare([3,3,1,0,0,1,1,0,0,1],[1,2,3,3,1,2,1,0,1,3]) == [0,0,0,0,0,0,0,1,1,1]\nassert     compare([0,2,1,1,0,0,0,1,0,0],[1,2,3,2,1,0,1,0,0,1]) == [1,1,1,1,1,0,1,0,0,0]\nassert     compare([0,3,0,3,0,3,0,0,1,0],[0,3,3,2,0,0,1,0,3,0]) == [0,0,0,0,1,1,1,0,0,1]\nassert     compare([0,3,0,3,0,3,0,0,1,0],[0,3,3,2,0,0,1,0,3,0]) == [0,0,0,0,1,1,1,0,0,0]\n",
        "num_ids_2": 136,
        "num_ids_4": 272
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Car\", [\"Sedan\", \"Coupe\", \"Convertible\"]) == \"Sedan\"\nassert     Strongest_Extension(\"Cars\", [\"Sedan\", \"Coupe\", \"Convertible\"]) == \"Coupe\"\n",
        "num_ids_2": 82,
        "num_ids_4": 116
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n    Strongest_Extension(\"Cheese\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Cheese\"\n    Strongest_Extension(\"StuFfed\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"StuFfed\"\n    Strongest_Extension(\"Slices\", [\"Slices.SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n    Strongest_Extension(\"Cheese\", [\"Slices.SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Cheese\"\n    Strongest_Extension(\"StuFfed\", [\"Slices.SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"StuFfed\"\n    Strongest_Extension(\"Slices\", [\"Slices.SErviNGSliCes\", \"StuFfed\", \"Cheese\"]) == \"Slices.SErviNGSliCes\"\n    Strongest_Extension(\"Slices\", [\"Slices.SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n    Strongest_Extension(\"Slices\", [\"Cheese\", \"StuFfed\", \"Slices\"]) == \"Cheese\"\n    Strongest_Extension(\"Slices\", [\"Slices.SErviNGSliCes\", \"Cheese\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\n    Strongest_Extension(\"Slices\", [\"Slices.SErviNGSliCes\", \"Cheese\", \"Slices\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n    Strongest_Extension(\"Slices\", [\"Slices.SErviNGSliCes\", \"Cheese\", \"Slices\", \"StuFfed\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\n    Strongest_Extension(\"Cheese\", [\"Slices.SErviNGSliCes\", \"Cheese\", \"Slices\", \"StuFfed\", \"Slices\"]) == \"Cheese\"\n    Strongest_Extension(\"Slices\", [\"Cheese\", \"StuFfed\", \"Slices\", \"Cheese\"]) == \"Slices\"\n    Strongest_Extension(\"StuFfed\", [\"Slices.SErviNGSliCes\", \"Cheese\", \"Slices\", \"StuFfed\"]) == \"StuFfed\"\n    Strongest_Extension(\"Slices.SErviNGSliCes\", [\"Cheese\", \"StuFfed\", \"Slices\", \"StuFfed\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\n    Strongest_Extension(\"Slices.SErviNGSliCes\", [\"Cheese\", \"StuFfed\", \"Slices\", \"StuFfed\", \"Cheese\"]) == \"Slices.SErviNGSliCes\"\n    Strongest_Extension(\"Slices.SErviNGSliCes\", [\"Cheese\", \"StuFfed\", \"Slices\", \"StuFfed\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n    Strongest_Extension(\"Slices.SErviNGSliCes\", [\"Cheese\", \"StuFfed\", \"Slices\", \"StuFfed\", \"Cheese\", \"StuFfed\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\n    Strongest_Extension(\"Slices\", [\"Slices.SErviNGSliCes\", \"Cheese\", \"Slices\", \"StuFfed\", \"Slices\", \"S",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'testing failed'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese']) == 'Slices.SErviNGSliCes', 'testing failed'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed']) == 'Slices.Cheese', 'testing failed'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'SErviNGSliCes', 'Cheese']) == 'Slices.SErviNGSliCes', 'testing failed'\nassert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'Cheese']) == 'Slices.SErviNGSliCes', 'testing failed'\n",
        "num_ids_2": 100,
        "num_ids_4": 194
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef The_Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', \\\n            \"'Slices.SErviNGSliCes' is not the strongest extension\"\n    \n    Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNGSliCes.StuFfed']) == 'Slices.SErviNGSliCes', \\\n            \"'Slices.SErviNGSliCes.StuFfed' is not the strongest extension\"\n\ndef Possible_Extensions(class_name, extensions, other_extensions=[]):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class.\n    The strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    If there are no other extensions, return an empty list.\n    If there are other extensions, return a list of other extensions in this \n    format: [ClassName1, ClassName2,..., ClassNamen]\n    Example: if you are given \"Slices\" as the class and the extensions\n    [\"Cheese\", \"Slices\"] and [\"Cheese\", \"StuFfed\"] as the other extensions,\n    then you should return: [\"Cheese\", \"Slices\", \"StuFfed\"]\n    \"\"\"\n    pass\n\ndef Possible_Extensions(class_name, extensions, other_extensions=[]):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class.\n    The strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    If there are no other extensions, return an empty list.\n    If there are other extensions, return a list of other extensions in this \n    format: [ClassName1, ClassName2,..., ClassNamen]\n    Example: if you are given \"Slices\" as the class and the extensions\n    [\"Cheese\", \"Slices\"] and [\"Cheese\", \"StuFfed\"] as the other extensions,\n    then you should return: [\"Cheese\", \"Slices\", \"StuFfed\"]\n    \"\"\"\n    pass\n    \n    Possible_Extensions('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == \n        ['Slices.SErviNGSliCes', 'Slices.Cheese', 'Slices.StuFfed']\n    \n    Possible_Extensions('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNGSliCes.StuFfed']) == \n        ['Slices.SErviNGSliCes', 'Slices.Cheese', 'Slices.StuFfed']\n    \n    Possible_Extensions('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'], ['Slices.SErviNGSliCes.StuFfed']) == \n        ['Slices.SErviNGSliCes', 'Slices.Cheese', 'Slices.StuFfed']\n    \n    Possible_Extensions('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'], ['Slices.SErviNGSliCes.StuFfed'], ['Slices.SErviNGSliCes.Cheese']) == \n        ['Slices.SErviNGSliCes', 'Slices.Cheese', 'Slices.StuFfed']\n    \n    Possible_Extensions('Slices', [",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert cycpattern_check(\"abc\", \"cba\") == True\nassert cycpattern_check(\"abc\", \"defg\") == False\nassert cycpattern_check(\"\", \"\") == False\nassert cycpattern_check(\"\", \"a\") == False\n",
        "num_ids_2": 19,
        "num_ids_4": 48
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cycpattern_check('hello', 'abc') == False\nassert     cycpattern_check('hello', 'hello') == True\nassert     cycpattern_check('hello', 'he') == True\nassert     cycpattern_check('hello', 'h') == True\nassert     cycpattern_check('hello', 'll') == True\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cycpattern_check(\"tea\",\"ate\") == True\nassert     cycpattern_check(\"tea\",\"table\") == False\nassert     cycpattern_check(\"ab\",\"\") == True\nassert     cycpattern_check(\"a\",\"\") == True\nassert     cycpattern_check(\"\",\"a\") == False\n",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert cycpattern_check('you','you')== True\nassert cycpattern_check('you','you') == True\nassert cycpattern_check('you','you') == False\nassert cycpattern_check('you','youu') == False\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cycpattern_check('waterbottle','erbottlewat') == False, \"Should return False\"\nassert     cycpattern_check('waterbottle','erbottlewater') == True, \"Should return True\"\nassert     cycpattern_check('waterbottle','erbottlewater') == False, \"Should return False\"\nassert     cycpattern_check('waterbottle','waterbottle') == False, \"Should return False\"\n",
        "num_ids_2": 52,
        "num_ids_4": 103
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (cycpattern_check('abcd','adcba')    == True)\nassert     (cycpattern_check('abc','c')        == False)\nassert     (cycpattern_check('abcd','cdab')    == True)\nassert     (cycpattern_check('a','')            == True)\nassert     (cycpattern_check('','')            == True)\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_odd_count(100) == (10, 0)\nassert     even_odd_count(3412) == (2, 2)\nassert     even_odd_count(10) == (0, 1)\nassert     even_odd_count(1234) == (1, 3)\nassert     even_odd_count(30) == (1, 2)\n",
        "num_ids_2": 35,
        "num_ids_4": 70
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_odd_count(123) == (1,3)\nassert     even_odd_count(4321) == (3,1)\nassert     even_odd_count(9798) == (3,1)\nassert     even_odd_count(110) == (2,1)\nassert     even_odd_count(12) == (1,2)\n",
        "num_ids_2": 35,
        "num_ids_4": 70
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(even_odd_count(123456))\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_odd_count(345) == (3, 1)\nassert even_odd_count(928) == (2, 2)\n\nprint(\"you are a smart man\")\n\n\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_odd_count(42) == (2, 2)\nassert     even_odd_count(10) == (0, 1)\nassert     even_odd_count(1001) == (3, 3)\nassert     even_odd_count(0) == (0, 0)\nassert     even_odd_count(2147483648) == (0, 0)\nprint('\"check_even_odd_count()\" passed')\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_count(10) == (2, 4)\nassert     even_odd_count(50) == (2, 5)\nassert     even_odd_count(14) == (2, 3)\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_odd_count(15) == (2, 3)\nassert even_odd_count(64) == (2, 4)\nassert even_odd_count(25) == (1, 2)\nassert even_odd_count(49) == (1, 2)\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(int_to_mini_roman(12), 'XII')\nprint(int_to_mini_roman(76), 'XXVI')\nprint(int_to_mini_roman(3), 'III')\nprint(int_to_mini_roman(400), 'CD')\nprint(int_to_mini_roman(6), 'VI')\nprint(int_to_mini_roman(9), 'XIX')\nprint(int_to_mini_roman(3999), 'MMMCMXCIX')\nprint(int_to_mini_roman(999), 'MMMCMXCIX')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(1) == \"i\"\nassert     int_to_mini_roman(2) == \"ii\"\nassert     int_to_mini_roman(3) == \"iii\"\nassert     int_to_mini_roman(4) == \"iv\"\nassert     int_to_mini_roman(5) == \"v\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(6, 10, 5) == False\nassert     right_angle_triangle(3, 4, 5) == False\nassert     right_angle_triangle(2, 4, 3) == False\nassert     right_angle_triangle(7, 7, 7) == True\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(1, 1, 1) == True\nassert     right_angle_triangle(2, 4, 3) == False\nassert     right_angle_triangle(5, 3, 4) == False\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"check the correctness of right_angle_triangle\")\n\nif right_angle_triangle(1, 2, 3):\n    print(\"right_angle_triangle(1, 2, 3) = True\")\nelse:\n    print(\"right_angle_triangle(1, 2, 3) = False\")\n\nif right_angle_triangle(3, 2, 1):\n    print(\"right_angle_triangle(3, 2, 1) = True\")\nelse:\n    print(\"right_angle_triangle(3, 2, 1) = False\")\n\nif right_angle_triangle(10, 20, 30):\n    print(\"right_angle_triangle(10, 20, 30) = True\")\nelse:\n    print(\"right_angle_triangle(10, 20, 30) = False\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_max(['hello', 'hai', 'hahaha', 'haha', 'heyyyy']) ==    'hello'\nassert     find_max(['python', 'x', 'xxx', 'xxx', 'xxxx']) ==    'python'\nassert     find_max(['zebra', 'dog', 'cat', 'cat', 'dog']) ==    'dog'\nassert     find_max(['zebra', 'dog', 'cat', 'cat', 'dog', 'dog']) ==    'dog'\nprint('You should be able to write everything below this line.')\n\nwords = ['hello', 'hai', 'hahaha', 'haha', 'heyyyy']\nunique_words = set(words)\nprint('The unique words in the list are', unique_words)\nprint('The number of unique words is', len(unique_words))\nprint('The word with maximum number of unique characters is', \n    find_max(unique_words))\n",
        "num_ids_2": 61,
        "num_ids_4": 122
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_max([]) == None\nassert     find_max([\"\"]) == None\nassert     find_max([\"a\", \"ab\"]) == \"ab\"\nassert     find_max([\"a\", \"a\", \"ab\"]) == \"ab\"\nassert     find_max([\"a\", \"a\", \"a\", \"a\"]) == \"a\"\n",
        "num_ids_2": 22,
        "num_ids_4": 61
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_max([]) == None\nassert     find_max([\"a\", \"b\"]) == None\nassert     find_max([\"a\", \"b\", \"c\", \"a\", \"a\"]) == \"a\"\nassert     find_max([\"a\", \"b\", \"c\", \"a\", \"a\", \"c\"]) == \"c\"\n\n",
        "num_ids_2": 26,
        "num_ids_4": 83
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_max_with_list_input():\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    # get the inputs\n    words = input().split()\n    # sort the words based on number of unique characters\n    words.sort(key=lambda x: len(set(x)))\n    # return the word with maximum number of unique characters\n    return words[-1]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_max(['hello', 'hello', 'hello']) == \n    'hello', 'Incorrect return value'\nassert     find_max(['hello', 'a', 'b', 'b']) == \n    'b', 'Incorrect return value'\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_max([]) == None\nassert find_max([\"this\", \"is\", \"a\", \"string\", \"with\", \"many\", \"words\"]) == \"this\"\nassert find_max([\"university\", \"is\", \"school\"]) == \"university\"\nassert find_max([\"amazing\", \"is\", \"awesome\", \"I\", \"am\"]) == \"I\"\n",
        "num_ids_2": 12,
        "num_ids_4": 66
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfind_max([\"hello\", \"world\", \"\", \"hello\", \"hello\"]) == \"hello\"\nassert \nfind_max([\"hello\", \"hello\", \"hello\"]) == \"hello\"",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_max(['abacada', 'adex', 'adex', 'abc', 'abacadada', 'abacada']) == 'abacada'\nassert     find_max(['abacada', 'adex', 'adex', 'abc', 'abacadada', 'abacada', 'abacada']) == 'abacada'\nassert     find_max(['abacada', 'adex', 'adex', 'abc', 'abacadada', 'abacada', 'abacada']) == 'abacada'\nassert     find_max(['abacada', 'adex', 'adex', 'abc', 'abacadada', 'abacada', 'abacada']) == 'abacada'\nassert     find_max(['abacada', 'adex', 'adex', 'abc', 'abacadada', 'abacada', 'abacada']) == 'abacada'\n",
        "num_ids_2": 87,
        "num_ids_4": 179
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    eat(10,20,100) == [150,100]\n    eat(20,10,80) == [200,90]\n    eat(100,0,0) == [100,0]\n    eat(2000,2000,0) == [3000,0]\n    eat(1000,1000,100) == [2000,100]\n\n\"\"\"\n===================================================\n1.9.3. Fruit in a Tree\n===================================================\n\"\"\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     eat(0, 5, 6) ==    [ 5, 6 ]\nassert     eat(1000, 5, 1000) ==    [ 0, 0 ]\nassert     eat(20, 20, 20) ==     [ 20, 20 ]\nassert     eat(1000, 1000, 100) ==     [ 1000, 100 ]\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     eat(1, 1, 1) ==     [ 2, 1 ]\nassert     eat(1, 2, 1) ==     [ 2, 1 ]\nassert     eat(2, 1, 1) ==     [ 2, 1 ]\nassert     eat(2, 2, 1) ==     [ 2, 0 ]\nassert     eat(2, 2, 2) ==     [ 2, 1 ]\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    eat(99, 1000, 3) ==\n    [99, 991]\n\n    eat(10, 1000, 3) ==\n    [1, 1010]\n\n    eat(11, 1000, 3) ==\n    [10, 1001]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     eat(25, 0, 1) == ([25,0],25)\nassert eat(30, 0, 0) == ([30,0],0)\nassert eat(1, 0, 1) == ([1,1],2)\nassert eat(0, 0, 1) == ([0,0],0)\nassert eat(0, 1, 1) == ([0,1],1)\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eat(1, 6, 7) == [8, 4]\nassert eat(3, 8, 5) == [14, 8]\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    eat(1, 0, 1) == [2, 0]\n    eat(2, 0, 1) == [3, 0]\n    eat(3, 0, 1) == [3, 0]\n    eat(4, 0, 1) == [3, 1]\n    eat(5, 0, 1) == [4, 0]\n    eat(6, 0, 1) == [5, 0]\n    eat(7, 0, 1) == [6, 0]\n    eat(8, 0, 1) == [7, 0]\n    eat(9, 0, 1) == [7, 1]\n    eat(10, 0, 1) == [7, 1]\n    eat(11, 0, 1) == [7, 1]\n    eat(12, 0, 1) == [8, 0]\n    eat(13, 0, 1) == [9, 0]\n    eat(14, 0, 1) == [10, 0]\n    eat(15, 0, 1) == [10, 0]\n    eat(16, 0, 1) == [11, 0]\n    eat(17, 0, 1) == [12, 0]\n    eat(18, 0, 1) == [13, 0]\n    eat(19, 0, 1) == [13, 1]\n    eat(20, 0, 1) == [14, 0]\n    eat(21, 0, 1) == [15, 0]\n    eat(22, 0, 1) == [15, 0]\n    eat(23, 0, 1) == [15, 1]\n    eat(24, 0, 1) == [16, 0]\n    eat(25, 0, 1) == [16, 0]\n    eat(26, 0, 1) == [16, 0]\n    eat(27, 0, 1) == [16, 1]\n    eat(28, 0, 1) == [17, 0]\n    eat(29, 0, 1) == [17, 0]\n    eat(30, 0, 1) == [17, 0]\n    eat(31, 0, 1) == [17, 1]\n    eat(32, 0, 1) == [18, 0]\n    eat(33, 0, 1) == [18, 0]\n    eat(34, 0, 1) == [18, 0]\n    eat(35, 0, 1) == [18, 1]\n    eat(36, 0, 1) == [19, 0]\n    eat(37, 0, 1) == [19, 0]\n    eat(38, 0, 1) == [19, 0]\n    eat(39, 0, 1) == [19, 1]\n    eat(40, 0, 1) == [20, 0]\n    eat(41, 0, 1) == [20, 0]\n    eat(42, 0, 1) == [20, 0]\n    eat(43, 0, 1) == [20, 1]\n    eat(44, 0, 1) == [21, 0]\n    eat(45, 0, 1) == [21, 0]\n    eat(46, 0, 1) == [21, 0]\n    eat(47, 0, 1) == [21, 1]\n    eat(48, 0, 1) == [22, 0]\n    eat(49, 0, 1) == [22, 0]\n    eat(50, 0, 1) == [22, 0]\n    eat(51, 0, 1) == [22, 1]\n    eat(52, 0, 1) == [23, 0]\n    eat(53, 0, 1) == [23, 0]\n    eat(54, 0, 1) == [23, 0]\n    eat(55, 0, 1) == [23, 1]\n    eat(56, 0, 1) == [24, 0]\n    eat(57, 0, 1) == [24, 0]\n    eat(58, 0, 1) == [24, 0]\n    eat(59, 0, 1) == [24, 1]\n    eat(60, 0, 1) == [25, 0]\n    eat(61, 0, 1) == [25, 0]\n    eat(62, 0, 1) == [25, 0]\n    eat(63, 0, 1) == [25, 1]\n    eat(64, 0, 1) == [26, 0",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     eat(1000, 10000, 1000) ==     [2000, 1000]\nassert     eat(10000, 100000, 10000) ==     [5000, 0]\nassert     eat(0, 0, 1000) ==     [0, 1000]\nassert     eat(0, 10, 0) ==     [0, 0]\nassert     eat(1, 1, 1) ==     [1, 1]\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     eat(0, 0, 10) == (0, 10)\nassert     eat(1, 0, 10) == (1, 10)\nassert     eat(1, 1, 10) == (2, 9)\nassert     eat(2, 1, 10) == (3, 8)\nassert     eat(3, 1, 10) == (4, 7)\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     do_algebra([\"+\"], [\"2\", \"1\"]) == \"3\", \n    \"Failed Test1\"\nassert     do_algebra([\"+\"], [\"2\", \"3\"]) == \"5\", \n    \"Failed Test2\"\nassert     do_algebra([\"-\", \"3\"], [\"1\", \"2\"]) == \"-2\", \n    \"Failed Test3\"\nassert     do_algebra([\"*\", \"2\"], [\"3\", \"4\"]) == \"6\", \n    \"Failed Test4\"\nassert     do_algebra([\"//\", \"3\"], [\"2\", \"4\"]) == \"0\", \n    \"Failed Test5\"\n",
        "num_ids_2": 46,
        "num_ids_4": 98
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    \"\"\"\n    Main function to test the do_algebra function\n    \"\"\"\n    # test do_algebra\n    test_cases = do_algebra_testcases()\n\n    for test_case in test_cases:\n        print(\"The evaluate of {} is: {}\".format(test_case, do_algebra(test_case[0], test_case[1])))\n\n\nif __name__ == \"__main__\":\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef do_algebra_2(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solve('HELLO') == 'oELLh'\nassert     solve('HELLO') == 'OELLh'\nassert     solve('hello world!') == 'drow rld!'\nassert     solve('a') == 'a'\nassert     solve('b') == 'b'\n",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solve('abC') == 'cba', 'Test Fail'\nassert     solve('abC') == 'cba', 'Test Fail'\nassert     solve('abC') == 'cba', 'Test Fail'\nassert     solve('abC') == 'cba', 'Test Fail'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"correct: \" + str(correct))\nprint(\"result of solve: \" + str(solve(s)))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     solve('abCdE') == 'dcBE'\nassert     solve('abCdEf') == 'dcBfE'\nassert     solve('abc') == 'Abc'\nassert     solve('') == ''\nassert     solve('abcd') == 'dcba'\n",
        "num_ids_2": 35,
        "num_ids_4": 58
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     solve('aBC') == 'abc'\nassert     solve('abc') == 'ABC'\nassert     solve('ABC') == 'abc'\nassert     solve('a') == 'a'\nassert     solve('ABC') == 'ABC'\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solve('hello') == 'hi'\nassert     solve('HELLO') == 'HELLO'\nassert     solve('HELLO world') == 'HELLO world'\nassert     solve('a') == 'a'\nassert     solve('') == ''\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solve('abc') == 'bcd'\nassert     solve('AbC') == 'bcd'\nassert     solve('a') == 'a'\nassert     solve('ab') == 'ba'\nassert     solve('') == ''\n",
        "num_ids_2": 27,
        "num_ids_4": 51
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_md5('abc') == '9c11amddbb40cb7ac10c21246efef2424'\nassert string_to_md5('123') == 'd14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42c'\nassert string_to_md5('abc') == '9c11amddbb40cb7ac10c21246efef2424'\nassert string_to_md5('') == None\nassert string_to_md5('123') == 'd14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42c'\n",
        "num_ids_2": 82,
        "num_ids_4": 127
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (string_to_md5('') == None)\nassert     (string_to_md5('abc') == '5ca917f60b955a75e5e94cb8e914e1f4')\nassert     (string_to_md5('abc1234') == 'fcc9f8fc6faf7b5c6c9c3acabf7b6ed6')\nassert     (string_to_md5('abc123') == '5ca917f60b955a75e5e94cb8e914e1f4')\nassert     (string_to_md5('abc123') == '5ca917f60b955a75e5e94cb8e914e1f4')\n",
        "num_ids_2": 56,
        "num_ids_4": 141
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_md5(\"\") is None\nassert     string_to_md5(\"\") == \"\"\nassert     string_to_md5(\"hello world!\") == \"7fd93645e7796d2d0d5bb3c8df4633f9\"\nassert     string_to_md5(\"hello world! hello world! hello world! hello world! hello world! hello world!\") == \"1a45f3cee4a5a36a2f062a2f8d56c99b\"\nassert     string_to_md5(\"hello world!\\nhello world! hello world! hello world! hello world!\") == \"1a45f3cee4a5a36a2f062a2f8d56c99b\"\n",
        "num_ids_2": 26,
        "num_ids_4": 124
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_md5('') is None,'string_to_md5: incorrect return value for empty string'\nassert     string_to_md5('text') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855','string_to_md5: incorrect return value for non-empty string'\n",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_md5('Hello') == 'b83ba96f63e5b4a1ac04f9dc9945f8f1'\nassert     string_to_md5('1234567890abcdef') == 'ac3734bf9ecfd44bcfec9e3ee841ddc9'\nassert     string_to_md5('') == None\n\n",
        "num_ids_2": 78,
        "num_ids_4": 92
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_md5('test') == \n        '8d8c3b36e7b0cbcafbb3f0dcfd97f2c3'\nassert     string_to_md5('') == None\nassert     string_to_md5('testtest') == None\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     generate_integers(10, 20) == [10, 12, 14, 16, 18, 20]\nassert     generate_integers(1, 2) == [1, 2]\nassert     generate_integers(1, 3) == [1, 2, 3]\nassert     generate_integers(-1, 1) == [-1, 0]\nassert     generate_integers(100, 500) == [100, 112, 144,..., 500]\n",
        "num_ids_2": 46,
        "num_ids_4": 86
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert generate_integers(1, 100) == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\nassert generate_integers(1, 100)!= generate_integers(1, 100+1)\n",
        "num_ids_2": 220,
        "num_ids_4": 243
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(generate_integers(10, 20))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ngenerate_integers(5, 10) == [2, 4, 6, 8, 10]\nassert \ngenerate_integers(10, 20) == [10, 12, 14, 16, 18, 20]\nassert \ngenerate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert generate_integers(2, 10) == [0, 2, 4, 6, 8]\nassert generate_integers(100, 500) == [100, 200, 300, 400, 500]\nassert generate_integers(1, 99) == [1, 3, 5, 7, 9]\nassert generate_integers(0, 9) == []\n",
        "num_ids_2": 26,
        "num_ids_4": 72
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     generate_integers(2, 4) == 2, \"generate_integers(2, 4) == 2 fails\"\nassert     generate_integers(3, 10) == 0, \"generate_integers(3, 10) == 0 fails\"\nassert     generate_integers(10, 20) == 10, \"generate_integers(10, 20) == 10 fails\"\nassert     generate_integers(100, 150) == 35, \"generate_integers(100, 150) == 35 fails\"\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert generate_integers(4, 6) == (4, 6)\nassert generate_integers(2, 7) == (2, 6)\nassert generate_integers(2, 10) == (2, 8)\nassert generate_integers(1, 3) == (1, 2)\n",
        "num_ids_2": 20,
        "num_ids_4": 54
    }
]