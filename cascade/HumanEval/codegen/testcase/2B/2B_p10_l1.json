[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     has_close_elements([1, 2, 3], 0) == False\nassert     has_close_elements([1, 2, 3], 1) == True\nassert     has_close_elements([1, 2, 3], 1.1) == False\nassert     has_close_elements([1, 2, 3], 0.999) == False\nassert     has_close_elements([1, 2, 3], 1.001) == False\n",
        "num_ids_2": 40,
        "num_ids_4": 84
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 0.1)\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 0.2)\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 0.3)\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 0.4)\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 0.5)\n",
        "num_ids_2": 100,
        "num_ids_4": 200
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6], 1.1) is False\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6], 1.2) is True\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6], 1.4) is False\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6], 1.5) is True\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6], 1.6) is False\n",
        "num_ids_2": 88,
        "num_ids_4": 176
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     has_close_elements([1.1, 1.2, 1.3, 1.4], 0.2) == False\nassert     has_close_elements([1.1, 1.2, 1.3, 1.4], 0.3) == False\nassert     has_close_elements([1.1, 1.2, 1.3, 1.4], 0.1) == True\n",
        "num_ids_2": 64,
        "num_ids_4": 96
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nhas_close_elements([5, 6, 2, 1, 3, 1], 5)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     has_close_elements([1,2,3], 1) == False, \"Wrong\"\nassert     has_close_elements([1,2,3], 2) == True, \"Wrong\"\nassert     has_close_elements([1,2,3], 3) == False, \"Wrong\"\nassert     has_close_elements([1,2,3], 4) == False, \"Wrong\"\nassert     has_close_elements([1,2,3], 0) == False, \"Wrong\"\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    has_close_elements([], 1.5) == False\n    has_close_elements([1.0], 1.5) == False\n    has_close_elements([0.1, 0.3, 0.1], 0.2) == True\n    has_close_elements([0.1, 0.3, 0.1], 0.4) == False\n    has_close_elements([0.1, 0.3, 0.1], 0.6) == False\n    has_close_elements([0.1, 0.3, 0.1], 1.5) == False\n    has_close_elements([0.1, 0.3, 0.1], 2.5) == False\n\ndef get_n_largest_elements(numbers: List[float], n: int) -> List[float]:\n    \"\"\" Return n largest elements in given list of numbers.\n\n        >>> get_n_largest_elements([1, 2, 3, 4, 5], 3)\n        [5, 4, 3]\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     separate_paren_groups('()())()') == ['()', '(', ')', '()']\nassert     separate_paren_groups('(()())') == ['()', '(', ')', '']\nassert     separate_paren_groups('()(()())') == ['()', '(', '(', ')', ')', '']\nassert     separate_paren_groups('(())') == ['()', '']\nassert     separate_paren_groups('()())') == ['()', '()']\n",
        "num_ids_2": 51,
        "num_ids_4": 101
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     separate_paren_groups('( ( ( ( ) ) ) )') == ['(','(','', ')','', '(', ')', ')', ')', ')']\nassert     separate_paren_groups('( ( ( ) ) ) )') == ['(','(','', ')','', '(', ')', ')', ')', ')']\nassert     separate_paren_groups('( ( ( ) ) ) )()') == ['(','(','', ')','', '(', ')', ')', ')', ')', ')', ')', ')']\nassert     separate_paren_groups('( ( ( ) ) ) )()())') == ['(','(','', ')','', '(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']\nassert     separate_paren_groups('( ( ) ) ) )()())') == ['(','(','', ')','', '(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']\n",
        "num_ids_2": 87,
        "num_ids_4": 203
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     separate_paren_groups('()(((((()())(())())))))' == ['(()(((((()())(())))))', '(())()', '()()', '()()', '()()'], \\\n        'seperate_paren_groups is incorrect.'\nassert     separate_paren_groups('(()()()()((()()()' == ['(()()()()((()()()))', '(()()()()(()()()))', '(()()()()()((()()()'], \\\n        'seperate_paren_groups is incorrect.'\nassert     separate_paren_groups('(((()()())(())()))' == ['(((()()())(())()))', '()()()', '(())()', '()()'], \\\n        'seperate_paren_groups is incorrect.'\n",
        "num_ids_2": 111,
        "num_ids_4": 158
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     separate_paren_groups('') == []\nassert     separate_paren_groups(\"((((()))))\") == [\"(\", \")\", \"()\"]\nassert     separate_paren_groups(\"((((())()))(())\") == [\"((((()))))\", \"(())\"]\nassert     separate_paren_groups(\"((((())))(())()(()))((()))\") == [\"((((()))))\", \"(()(()))\", \"(()))\"]\nassert     separate_paren_groups(\"((((()()))))\") == [\"((((())))]\n",
        "num_ids_2": 38,
        "num_ids_4": 107
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"a(b)c(d)\") == ['abc', 'd'], \"Wrong output\"\nassert     separate_paren_groups(\"(a(b)c)d\") == ['abc', 'd'], \"Wrong output\"\nassert     separate_paren_groups(\"a(b(c)d)\") == ['abc', 'd'], \"Wrong output\"\nassert     separate_paren_groups(\"(a(b(c)d))\") == ['abc', 'd'], \"Wrong output\"\nassert     separate_paren_groups(\"(a)()\") == ['a', ''], \"Wrong output\"\n",
        "num_ids_2": 64,
        "num_ids_4": 129
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"()\") == [\"\"]\nassert     separate_paren_groups(\"((())\") == [\"((()))\"]\nassert     separate_paren_groups(\"(((()))\") == [\"(((()))\"]\nassert     separate_paren_groups(\"(((()())(()))(((())()))))\") == [\"(((()())(()))(()))(((())()))\"]\nassert     separate_paren_groups(\"(()())\") == [\"(()())\"]\n",
        "num_ids_2": 34,
        "num_ids_4": 97
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\"( ((())) )\") == ['((()))', ')', '()']\nassert     separate_paren_groups(\"( ( ((())) ) )\") == ['(', '(', '(', '(', ')', ')', ')', ')', ')', ')', ')', ')']\nassert     separate_paren_groups(\"( ((())))\") == ['((())))']\nassert     separate_paren_groups(\"()\") == ['()']\nassert     separate_paren_groups(\"()()()\") == ['()()', '()']\n",
        "num_ids_2": 80,
        "num_ids_4": 117
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (separate_paren_groups('{ ( ( () ) ) }') == \n        ['{','(','(', ')', ')', ')', '}']\n), 'incorrect output for test_separate_paren_groups'\n\nassert     (separate_paren_groups('{ ( ) }') == \n        ['{','(', ')', '}']\n), 'incorrect output for test_separate_paren_groups'\n\nassert     (separate_paren_groups('{ ( ( ) ) ( ) }') == \n        ['{','(', '(', ')', ')', ')', '}']\n), 'incorrect output for test_separate_paren_groups'\n",
        "num_ids_2": 39,
        "num_ids_4": 61
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     separate_paren_groups(\"{[{}])((}))\") == [\"{{[{}]}}\", \"()()\"]\nassert     separate_paren_groups(\"{[{}]}{{}}({{}})\") == [\"{{[{}]}}\", \"{{{}}}\", \"{}({{}})\"]\nassert     separate_paren_groups(\"{[{}]}{{}}({{}})\") == [\"{{[{}]}}\", \"{{{}}}\", \"{}({{}})\"]\nassert     separate_paren_groups(\"(()){}{{}}[]\") == [\"()()\", \"(){}\", \"{}[]\"]\nassert     separate_paren_groups(\"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\") == \\\n        [\"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\", \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n        \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\", \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n        \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\", \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n        \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\", \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n        \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\", \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n        \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\", \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n        \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\", \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n        \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\", \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n        \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\", \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n        \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n        \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n        \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n        \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n        \"{{{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}}}}\",\n    ",
        "num_ids_2": 77,
        "num_ids_4": 152
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     separate_paren_groups('()(())()') == ['', '()', '()', '']\nassert     separate_paren_groups('(()())(())') == ['', '()', '(())', '']\nassert     separate_paren_groups('(()(())())(())') == ['', '()', '(())', '(())', '']\nassert     separate_paren_groups('()((()))') == ['', '(())', '()', '']\nassert     separate_paren_groups('(())()((()))') == ['', '(())', '()', '(()))', '']\n",
        "num_ids_2": 53,
        "num_ids_4": 111
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     truncate_number(2.0) == 2.0\nassert     truncate_number(3.0) == 1.0\nassert     truncate_number(5.5) == 2.5\nassert     truncate_number(9.4) == 4\nassert     truncate_number(1.0) == 1.0\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef read_file(file_name: str, **kwargs) -> str:\n    \"\"\" Read a file.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     truncate_number(0.3) == 0.3\nassert     truncate_number(0.4) == 0.4\nassert     truncate_number(0.6) == 0.6\nassert     truncate_number(0.9) == 0.9\nassert     truncate_number(0.5) == 0.5\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     truncate_number(1.1) == 0\nassert     truncate_number(1.55) == 0.5\nassert     truncate_number(1.99) == 1.0\nassert     truncate_number(2.01) == 1.0\nassert     truncate_number(3.99) == 2.0\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     truncate_number(1.0)    ==    1.0\nassert     truncate_number(2.0)    ==    1.0\nassert     truncate_number(3.0)    ==    1.0\nassert     truncate_number(5.0)    ==    2.0\nassert     truncate_number(7.0)    ==    2.0\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     truncate_number(1.5) == 1.5\nassert    truncate_number(2.5) == 2.0\nassert    truncate_number(5.5) == 5.0\nassert    truncate_number(1.99) == 1.0\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     truncate_number(0.5) == 0.5\nassert truncate_number(1.5) == 1\nassert truncate_number(0.5) == 0.5\nassert truncate_number(0.50000001) == 0.5\nassert truncate_number(0.5999999) == 0.5\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     truncate_number(3.50)     ==    0.50\nassert     truncate_number(4.5)     ==    1.0\nassert     truncate_number(5)     ==    1.0\nassert     truncate_number(0.3)     ==    0.0\nassert     truncate_number(0.5)     ==    0.5\n",
        "num_ids_2": 38,
        "num_ids_4": 74
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert truncate_number(2.5) == 2\nassert truncate_number(0.5) == 0\nassert truncate_number(1.5) == 1\nassert truncate_number(2) == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     truncate_number(10.2) == 10\nassert     truncate_number(10.3) == 10\nassert     truncate_number(10.5) == 10\nassert     truncate_number(10.6) == 10\nassert     truncate_number(10.9) == 10\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(below_zero([1,2,3]))\n    print(below_zero([2,2,2]))\n    print(below_zero([2,-2,2]))\n    print(below_zero([-2,-3,4]))\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef change_minimum(operations: List[int]) -> int:\n    \"\"\" Given a list of deposits and withdrawals, the function should return\n    the minimum amount of change to be made at any point during the process,\n    assuming that change is always in denominations of 1 dollar.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     below_zero([-1, -2]) == True\nassert     below_zero([1, 2]) == False\nassert     below_zero
        "num_ids_2": 28,
        "num_ids_4": 1024
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not below_zero([-2, 2, -3, 4])\nassert not below_zero([-2, 2, 3, -4])\nassert below_zero([1, -2, 3, -4])\n",
        "num_ids_2": 20,
        "num_ids_4": 53
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     below_zero([100, 100, -100]) == True\nassert     below_zero([100, 100, 100, -100]) == False\nassert     below_zero([-100, 100, 100, -100]) == True\nassert     below_zero([-100, -100, -100, -100]) == False\nassert     below_zero([-100, -100, 100, -100]) == True\n",
        "num_ids_2": 34,
        "num_ids_4": 74
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(below_zero([100, 200, 300, -400, -1000]))\nassert \nprint(below_zero([100, 200, 300, 400]))\nassert \nprint(below_zero([-100, -200, -300, -400, -1000]))\nassert \nprint(below_zero([0, 0, 0]))\nassert \nprint(below_zero([-100, -200, -300, -400, -1000]))\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nbelow_zero([0,0,1,1,-1,1,-2,-2]) == False\nassert below_zero([1,2,3,4]) == True\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     below_zero([0,0,1,1,1,0,1,0,0,0,1,1]) is True\nassert     below_zero([0,0,1,1,1,0,0,1,1,1,1,0]) is False\nassert     below_zero([0,0,1,1,1,0,0,1,1,1,1,1,0]) is False\n\n\ndef create_account(init_balance: int) -> List[int]:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 66,
        "num_ids_4": 101
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nbelow_zero([]) == False\nbelow_zero([5]) == False\nbelow_zero([5, -1]) == False\nbelow_zero([-5, -1]) == True\nbelow_zero([-5, -1, -3, -2]) == True\nbelow_zero([5, 1, 5, -1, 5, -1, 5]) == False\nbelow_zero([5, 1, 5, -1, 5, -1, 5, -3, 5]) == True\nbelow_zero([5, 1, 5, -1, 5, -1, 5, -2, 5, -2, 5]) == True\n\ndef is_possible(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     below_zero([2,5,-3,1,3,-2]) == False\nassert     below_zero([2,-5,-3,1,3,-2]) == False\nassert     below_zero([2,5,3,1,3,-2]) == True\nassert     below_zero([-5,5,3,1,3,-2]) == True\nassert     below_zero([2,5,3,1,-3,-2]) == True\n",
        "num_ids_2": 42,
        "num_ids_4": 85
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     mean_absolute_deviation([-1, 2, 3, 4, 5]) == 1.0\nassert     mean_absolute_deviation([-1, 1, 1, 1]) == 0.0\nassert     mean_absolute_deviation([-1.1, 2.2, 3.3, 4.4, 5.5]) == 1.6\n\n\ndef median(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median\n    around the mean of this dataset.\n    Median is the middle number in the sorted list\n    \"\"\"\n    pass\n",
        "num_ids_2": 48,
        "num_ids_4": 83
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     mean_absolute_deviation([1.2, 2.3, 4.6]) == 0.2\nassert     mean_absolute_deviation([1.2, 2.3, 4.6, 4.3]) == 0.2\nassert     mean_absolute_deviation([1.2, 2.3, 4.6, 4.3, 1.1]) == 0.2\nassert     mean_absolute_deviation([1.2, 2.3, 4.6, 4.3, 5.1]) == 0.2\nassert     mean_absolute_deviation([1.2, 2.3, 4.6, 4.3, -1.1]) == 0.2\n",
        "num_ids_2": 56,
        "num_ids_4": 124
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 2.25\nassert     mean_absolute_deviation([5, 5, 5, 5, 5]) == 0\nassert     mean_absolute_deviation([5, 5, 5, 5, 5, 5]) == 0\nassert     mean_absolute_deviation([5, 5, 5, 5, 5, 5, 5]) == 0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6.5\n",
        "num_ids_2": 48,
        "num_ids_4": 98
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    assert mean_absolute_deviation([1, 2, 3]) == 0\n    assert mean_absolute_deviation([3, 5, 7]) == 3\n    assert mean_absolute_deviation([0, 0, 0]) == 0\n    assert mean_absolute_deviation([-1, -2, -3]) == 2\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 1.0\nassert     mean_absolute_deviation([1, 2, 3, -4]) == 2.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 3.0\nassert     mean_absolute_deviation([1, 2, -3, 4, -5]) == 3.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 3.0\n",
        "num_ids_2": 45,
        "num_ids_4": 95
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\n\nif __name__ == '__main__':\n    num = input('Enter numbers: ')\n    while num!= '':\n        numbers = list(map(int, num.split()))\n        delimiter = input('Enter delimeter: ')\n        print(intersperse(numbers, delimiter))\n        num = input('Enter numbers: '",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\"\"\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert idesperse([1, 2, 3, 4, 5, 6, 7, 8, 9],'') == ['1', '2', '3', '4', '5', '6', '7', '8', '9']\nassert idesperse([1, 2, 3],'') == ['1', '2', '3']\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert idesperse([1,2,3,4,5], 2) == [[1,2,3,4,5], 2, 3, 4, 5]\nassert idesperse([1,2,3,4,5], 2) == [[1,2,3,4], 2, 3, 4, 5]\nassert idesperse([1,2,3,4,5], 2) == [[1,2], 3, 4, 5]\nassert idesperse([1,2,3,4,5], 2) == [[1,2], 3, 4, 5]\nassert idesperse([1,2,3,4,5], 2) == [[1,2], 3, 4, 5]\n",
        "num_ids_2": 74,
        "num_ids_4": 134
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    intersperse([1, 2, 3], -1) == [1, -1, 2, -1, 3, -1]\n    intersperse([1, 2, 3], 1) == [1, 1, 2, 2, 3, 3]\n    intersperse([1, 2, 3], 2) == [1, 2, 1, 2, 3, 1, 3]\n    intersperse([1, 2, 3], 0) == [1, 2, 3]\n    intersperse([1, 2, 3], 0) == [1, 2, 3]\n    intersperse([1, 2, 3], 0) == [1, 2, 3]\n    intersperse([], 0) == []\n    intersperse([], 0) == []\n    intersperse([], 0) == []\n\nintersperse([1, 2, 3], -1)\n\nassert intersperse([1, 2, 3], -1) == [1, -1, 2, -1, 3, -1]\nassert intersperse([1, 2, 3], 1) == [1, 1, 2, 2, 3, 3]\n",
        "num_ids_2": 35,
        "num_ids_4": 63
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert idesperse([1, 2, 3, 4], 5) == [1, 5, 2, 5, 3, 5, 4]\nassert idesperse([1, 2, 3, 4], 5) == [1, 5, 2, 5, 3, 5, 4]\nassert idesperse([1, 2, 3, 4], 5) == [1, 5, 2, 5, 3, 5, 4]\n\n\ndef intersperse_while(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    i = 0\n    new_list = []\n    while i < len(numbers):\n        new_list.append(numbers[i])\n        new_list.append(delimeter)\n        i += 2\n    return new_list\n\n",
        "num_ids_2": 64,
        "num_ids_4": 96
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nnumbers = [1, 2, 3, 4, 5, 6]\ndelimeter = 3\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_nested_parens(\"()\") == []\nassert     parse_nested_parens(\"(())\") == []\nassert     parse_nested_parens(\"((())\") == []\nassert     parse_nested_parens(\"(())()\") == []\nassert     parse_nested_parens(\"(((()))\") == []\n",
        "num_ids_2": 31,
        "num_ids_4": 64
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_nested_parens(\"(()())\") == [0]\nassert    parse_nested_parens(\"(())\") == [1]\nassert    parse_nested_parens(\"((()))\") == [2]\nassert    parse_nested_parens(\"(()(()))\") == [2]\nassert    parse_nested_parens(\"(((((((((((())))))))))))\") == [3]\n",
        "num_ids_2": 37,
        "num_ids_4": 77
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"(()()())\") == [2, 2, 2, 2]\nassert     parse_nested_parens(\"(())\") == [1, 1]\nassert     parse_nested_parens(\"((()()()()()()()(()()()()()()())))\") == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\nassert     parse_nested_parens
        "num_ids_2": 46,
        "num_ids_4": 1023
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parse_nested_parens(\"( )\") == [0], \"parse_nested_parens test case 1 failed.\"\nassert     parse_nested_parens(\"()\") == [0], \"parse_nested_parens test case 2 failed.\"\nassert     parse_nested_parens(\"( )( )\") == [0,1], \"parse_nested_parens test case 3 failed.\"\nassert     parse_nested_parens(\"()( )\") == [0,1], \"parse_nested_parens test case 4 failed.\"\nassert     parse_nested_parens(\"( )( )\") == [0,1], \"parse_nested_parens test case 5 failed.\"\n",
        "num_ids_2": 61,
        "num_ids_4": 130
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"(((()())()))\") == [2, 2, 3, 2, 2, 2, 2]\nassert     parse_nested_parens(\"(((((()))))\") == [2, 2, 2, 2, 2, 2, 2]\nassert     parse_nested_parens(\"(((((()())()))()))\") == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert     parse_nested_parens(\"(((((()())()))()()))\") == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert     parse_nested_parens(\"(((((()())()))()()))\") == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n",
        "num_ids_2": 67,
        "num_ids_4": 178
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_nested_parens('(()())') == 2\nassert     parse_nested_parens('((()))') == 3\nassert     parse_nested_parens('((((((())()))))') == 6\nassert     parse_nested_parens('(((((((((())())))))))))') == 11\nassert     parse_nested_parens('(((((((((())())))))))))') == 12\n",
        "num_ids_2": 34,
        "num_ids_4": 78
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parse_nested_parens('()())') == 2\nassert     parse_nested_parens('((()))') == 3\nassert     parse_nested_parens('(((()))') == 4\nassert     parse_nested_parens('(()()())') == 3\nassert     parse_nested_parens('(((())(()))') == 5\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_nested_parens('(())') == [0]\nassert     parse_nested_parens('(()())') == [0, 1]\nassert     parse_nested_parens('(()(()))') == [0, 1, 2]\nassert     parse_nested_parens('((()(()()))())') == [0, 1, 2, 3, 4]\nassert     parse_nested_parens('(((()())()))') == [0, 1, 2, 3, 4]\n",
        "num_ids_2": 39,
        "num_ids_4": 95
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert parse_nested_parens(\"(((((())))))\") == [4,4,4,4,4,4]\nassert parse_nested_parens(\"(((((())))))\") == [4,4,4,4,4,4]\nassert parse_nested_parens(\"(((((())))\") == [4,4,4,4,4,0]\nassert parse_nested_parens(\"(((((()))))\") == [4,4,4,4,4,0]\n",
        "num_ids_2": 34,
        "num_ids_4": 95
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert parse_nested_parens(\"((()))\") == [2]\nassert parse_nested_parens(\"(()()(()))\") == [3, 2]\nassert parse_nested_parens(\"((((()))))\") == [3, 2, 1]\nassert parse_nested_parens(\"((((((()))))))\") == [3, 2, 1, 2]\n",
        "num_ids_2": 21,
        "num_ids_4": 67
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert filter_by_substring([\"foo\", \"bar\", \"baz\"], \"ba\") == [\"bar\", \"baz\"]\nassert filter_by_substring([\"foo\", \"bar\", \"baz\"], \"baz\") == [\"baz\"]\nassert filter_by_substring([\"foo\", \"bar\", \"baz\"], \"\") == [\"foo\", \"bar\", \"baz\"]\nassert filter_by_substring([\"foo\", \"bar\", \"baz\"], \"boo\") == []\n",
        "num_ids_2": 33,
        "num_ids_4": 93
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_by_substring([], \"A\") == []\nassert     filter_by_substring([\"A\", \"B\", \"C\"], \"B\") == [\"B\"]\nassert     filter_by_substring([\"A\", \"B\", \"C\"], \"A\") == [\"A\"]\nassert     filter_by_substring([\"A\", \"B\", \"C\"], \"C\") == [\"C\"]\nassert     filter_by_substring([\"A\", \"B\", \"C\"], \"D\") == []\n",
        "num_ids_2": 42,
        "num_ids_4": 94
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_by_substring(['cat', 'dog', 'fish', 'fly', 'cat', 'dog', 'fish', 'fly', 'cat', 'dog', 'fish', 'fly'], 'cat') == ['cat']\nassert     filter_by_substring(['cat', 'dog', 'fish', 'fly', 'cat', 'dog', 'fish', 'fly', 'cat', 'dog', 'fish', 'fly'], 'dog') == ['dog']\nassert     filter_by_substring(['cat', 'dog', 'fish', 'fly', 'cat', 'dog', 'fish', 'fly', 'cat', 'dog', 'fish', 'fly'], 'fly') == ['fly']\nassert     filter_by_substring(['cat', 'dog', 'fish', 'fly', 'cat', 'dog', 'fish', 'fly', 'cat', 'dog', 'fish', 'fly'], 'flyg') == ['flyg']\nassert     filter_by_substring(['cat', 'dog', 'fish', 'fly', 'cat', 'dog', 'fish', 'fly', 'cat', 'dog', 'fish', 'fly'], 'g') == ['g']\n",
        "num_ids_2": 108,
        "num_ids_4": 218
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_substring(['', 'aa', 'bbb', 'a', 'aa'], 'aaa') == ['aa']\nassert     filter_by_substring(['', 'aa', 'bbb', 'a', 'aa'], 'abc') == []\nassert     filter_by_substring(['aa', 'bb', 'ccc', 'ddd', 'eee', 'ffff'], 'aa') == ['aa', 'aa']\nassert     filter_by_substring(['aa', 'bb', 'ccc', 'ddd', 'eee', 'ffff'], 'cc') == ['ccc', 'ddd', 'eee']\nassert     filter_by_substring(['aa', 'bb', 'ccc', 'ddd', 'eee', 'ffff'], 'ff') == ['eee', 'ffff']\n",
        "num_ids_2": 64,
        "num_ids_4": 154
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_substring(['hello', 'hi', 'goodbye', 'bye'], 'bye') == ['bye']\nassert     filter_by_substring(['apple', 'banana', 'cherry'], 'p') == ['apple', 'cherry']\nassert     filter_by_substring(['apple', 'banana', 'cherry'], 'c') == ['cherry']\nassert     filter_by_substring(['apple', 'banana', 'cherry'], 'p') == ['apple', 'cherry']\nassert     filter_by_substring(['apple', 'banana', 'cherry'], 'p') == ['cherry']\n",
        "num_ids_2": 64,
        "num_ids_4": 127
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_by_substring([\n                                    \"Test String A\", \n                                    \"Test String B\",\n                                    \"Test String C\",\n                                    \"Test String D\",\n                                    \"Test String E\",\n                                    \"Test String F\",\n                                    \"Test String G\",\n                                    \"Test String H\",\n                                    \"Test String I\",\n                                    \"Test String J\",\n                                    \"Test String K\",\n                                    \"Test String L\",\n                                    \"Test String M\"\n                                ], \"Test String A\") == [\n                                    \"Test String A\",\n                                    \"Test String B\",\n                                    \"Test String C\",\n                                    \"Test String D\",\n                                    \"Test String E\",\n                                    \"Test String F\",\n                                    \"Test String G\",\n                                    \"Test String H\",\n                                    \"Test String I\",\n                                    \"Test String J\",\n                                    \"Test String K\",\n                                    \"Test String L\",\n                                    \"Test String M\"\n                                ]\nassert     filter_by_substring([\n                                    \"Test String A\", \n                                    \"Test String B\",\n                                    \"Test String C\",\n                                    \"Test String D\",\n                                    \"Test String E\",\n                                    \"Test String F\",\n                                    \"Test String G\",\n                                    \"Test String H\",\n                                    \"Test String I\",\n                                    \"Test String J\",\n                                    \"Test String K\",\n                                    \"Test String L\",\n                                    \"Test String M\"\n                                ], \"Test\") == []\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef get_jokes_with_intersection(list_of_strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for those whose first substring\n    is the same as the argument\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_by_substring([1,2,3], 'a') == []\nassert     filter_by_substring(['one', 'two', 'three'], 'one') == ['one']\nassert     filter_by_substring(['one', 'two', 'three'], 'two') == ['two']\nassert     filter_by_substring(['one', 'two', 'three'], 'three') == ['three']\nassert     filter_by_substring(['one', 'two', 'three'], 'q') == []\n",
        "num_ids_2": 48,
        "num_ids_4": 102
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_by_substring([\"aba\", \"aab\", \"aa\", \"baa\"], \"aa\") == [\"aba\", \"baa\"]\nassert     filter_by_substring([\"aba\", \"aab\", \"aa\", \"baa\"], \"aab\") == [\"aab\"]\nassert     filter_by_substring([\"aba\", \"aab\", \"aa\", \"baa\"], \"baa\") == [\"aba\", \"baa\"]\nassert     filter_by_substring([\"aba\", \"aab\", \"aa\", \"baa\"], \"a\") == []\nassert     filter_by_substring([\"aba\", \"aab\", \"aa\", \"baa\"], \"\") == []\n",
        "num_ids_2": 68,
        "num_ids_4": 133
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    test_list = [1, 2, 3, 4, 5, 6]\n    assert sum_product(test_list) == (15, 720), 'Wrong result for test list {}'.format(test_list)\n    test_list = []\n    assert sum_product(test_list) == (0, 1), 'Wrong result for test list {}'.format(test_list)\n    test_list = [5]\n    assert sum_product(test_list) == (5, 5), 'Wrong result for test list {}'.format(test_list)\n    test_list = [2]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_product([]) == (0, 1)\nassert sum_product([3, 5, 7, 9]) == (28, 343)\nassert sum_product([]) == (0, 1)\nassert sum_product([3]) == (3, 3)\nassert sum_product([3, 2]) == (5, 6)\n",
        "num_ids_2": 34,
        "num_ids_4": 61
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsum_product([1,2,3,4]) == (10, 24)\nsum_product([]) == (0, 1)\nsum_product([1, 2, 3]) == (6, 3)\nsum_product([1]) == (1, 1)\nsum_product([0,0,0,0,0,0,0]) == (0, 0)\nsum_product([-10,10,-10,20,-10,-10,30,10]) == (\n-120, -360)\nsum_product([-10, -10, 10, 20, -10, -10, 30, 10]) == (\n-120, -360)\nsum_product([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == (\n  0, 10000)\nsum_product([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sum_product([]) == (0, 1)\nassert sum_product([1, 2, 3, 4]) == (15, 24)\nassert sum_product([2, 3, 4, 5]) == (15, 60)\nassert sum_product([]) == (0, 1)\n",
        "num_ids_2": 16,
        "num_ids_4": 56
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsum_product([1, 2, 3, 4]) == (15, 24)\nassert sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert sum_product([-1, -2, -3, -4, -5]) == (0, -1)\nassert sum_product([]) == (0, 1)\nassert sum_product([0]) == (0, 1)\n",
        "num_ids_2": 25,
        "num_ids_4": 66
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([-1, 2, 1]) == (0, 2)\nassert     sum_product([1, -2, 1]) == (1, -2)\n",
        "num_ids_2": 29,
        "num_ids_4": 66
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_product([]) == (0, 1)\nassert \nsum_product([1]) == (1, 1)\nassert \nsum_product([1, 2]) == (3, 2)\nassert \nsum_product([1, 2, 3]) == (6, 3)\nassert \nsum_product([1, 2, 3, 4]) == (10, 6)\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 3]) == (6, 3)\nassert     sum_product([1, 1, 1]) == (3, 3)\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1,2]) == (3, 2)\nassert     sum_product([1,2,3]) == (6, 3)\nassert     sum_product([1,2,3,4]) == (10, 6)\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef rolling_max_with_window(numbers: List[int], window_size: int) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rolling_max([1,3,5,2,4,1]) == [5,5,5,5,5,5]\nassert     rolling_max([5,4,3,2,1]) == [5,5,5,5,5]\nassert     rolling_max([1]) == [1]\nassert     rolling_max([1,1]) == [1,1]\nassert     rolling_max([1,1,1]) == [1,1,1]\n",
        "num_ids_2": 62,
        "num_ids_4": 92
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \n\ndef roll_max(numbers: List[int], period: int) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(rolling_max([1, 2, 3, 4, 5]))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef rolling_sum(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling sum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rolling_max([5, 4, 2, 5, 6, 7, 8, 1, 2, 3, 4]) == [4, 4, 4, 5, 6, 7, 8, 8, 8, 8, 8]\n\ndef rolling_sum(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling sum of elements until given moment.\n    \"\"\"\n    pass\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef construct_max_tuple(numbers: List[int]) -> Tuple[List[int], List[int], int]:\n    \"\"\" From a given list of integers, generate a tuple with maximum, minimum and sum of numbers from list of\n    integers.\n    \"\"\"\n    pass\n\n\ndef construct_max_tuple_with_rolling(numbers: List[int]) -> Tuple[int, int, int]:\n    \"\"\" From a given list of integers, generate a tuple with maximum, minimum and sum of numbers from list of\n    integers.\n    \"\"\"\n    pass",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rolling_max([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert    rolling_max([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert    rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nassert    rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert    rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\n",
        "num_ids_2": 86,
        "num_ids_4": 244
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_palindrome('tactcoa') == True\nassert     is_palindrome('ababababab') == True\nassert     is_palindrome('aabbbbaaa') == True\nassert     is_palindrome('aabbbbbaaa') == False\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_palindrome(string: str) -> int:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest prefix of supplied string that is a palindrome.\n    - Search the string from the end until the prefix is found.\n    - If a palindrome is found, return the index.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef is_palindrome_recursive(string: str) -> bool:\n    \"\"\" Tests if the given string is a palindrome \"\"\"\n    pass\n\n\ndef is_palindrome_recursive(string: str) -> bool:\n    \"\"\"\n    Test if given string is a palindrome, using recursive approach\n    \"\"\"\n    pass\n\n\ndef is_palindrome_iterative(string: str) -> bool:\n    \"\"\" Tests if the given string is a palindrome \"\"\"\n    pass\n\n\ndef is_palindrome_iterative(string: str) -> bool:\n    \"\"\"\n    Test if given string is a palindrome, using iterative approach\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert make_palindrome(\"ba\") == \"abba\"\n    assert make_palindrome(\"ab\") == \"ba\"\n    assert make_palindrome(\"a\") == \"a\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     make_palindrome(\"a\") == \"aa\"\nassert     make_palindrome(\"aa\") == \"aa\"\nassert     make_palindrome(\"ab\") == \"ba\"\nassert     make_palindrome(\"aba\") == \"aba\"\nassert     make_palindrome(\"abb\") == \"abb\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef test_make_palindrome():\n    \"\"\" Tests make_palindrome() with some examples\n    \"\"\"\n    assert make_palindrome('aba') == 'aba'\n    assert make_palindrome('a') == 'a'\n    assert make_palindrome('ab') == 'ab'\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_palindrome('abcdcba') == True\nassert     is_palindrome('abcdcba') == False\nassert     is_palindrome('xzx') == False\nassert     is_palindrome('xzcba') == True\nassert     is_palindrome('xz') == True\n",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     make_palindrome(\"a\") == \"aa\"\nassert     make_palindrome(\"ab\") == \"ba\"\nassert     make_palindrome(\"aba\") == \"abba\"\nassert     make_palindrome(\"adcab\") == \"dcba\"\n\n\ndef find_longest_palindrome(string: str) -> str:\n    \"\"\" Find the longest palindrome in a given string.\n    Algorithm idea:\n    - Find a palindrome that begins with the first occurrence of the longest palindrome.\n    - If this is a palindrome, find the length of the longest palindrome.\n    - If this is not a palindrome, repeat this process until a palindrome is found.\n    \"\"\"\n    pass\n",
        "num_ids_2": 30,
        "num_ids_4": 63
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef string_xor_v2(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    \n    # get the binary values of a and b\n    a_bits = []\n    b_bits = []\n    for char in a:\n        if char == '0':\n            a_bits.append('0')\n        else:\n            a_bits.append('1')\n    for char in b:\n        if char == '0':\n            b_bits.append('0')\n        else:\n            b_bits.append('1')\n    # perform XOR operation and return result as a string\n    return ''.join([a_bits[i] if (int(a_bits[i]) ^ int(b_bits[i])) == 1 else b_bits[i] for i in range(len(a_bits))])\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_xor('0', '0') == '0'\nassert     string_xor('0', '1') == '1'\nassert     string_xor('1', '0') == '1'\nassert     string_xor('1', '1') == '0'\nassert     string_xor('1111', '1110') == '1100'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_xor(\"1\",\"1\") == \"0\"\nassert     string_xor(\"0\",\"0\") == \"0\"\nassert     string_xor(\"1\",\"0\") == \"1\"\nassert     string_xor(\"0\",\"1\") == \"1\"\n\n\"\"\"",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nclass Solution:\n    def find_missing_number(self, nums: List[int]) -> int:\n        \"\"\" \n        Given an array containing n distinct numbers in the range [0, n], \n        return a missing number in this array.\n        \n        Input: \n        [3,0,1]\n        \n        Output:\n        2\n        \n        Input: \n        [9,6,4,2,3,5,7,0,1]\n        \n        Output:\n        8\n        \"\"\"\n        pass\n        \n    def find_min_max(self, nums: List[int]) -> List[int]:\n        \"\"\" \n        Given an array of integers, return a list of three integers \n        representing the minimum, maximum and average of the array.\n        \n        Input: \n        [-2,1,-3,4,-1,2,1,-5,4]\n        \n        Output:\n        [1,4,-1,4]\n        \"\"\"\n        pass\n    \n    def find_median(self, nums: List[int]) -> int:\n        \"\"\" \n        Given an array of integers, return the median of it.\n        \n        Input: \n        [-2,1,-3,4,-1,2,1,-5,4]\n        \n        Output:\n        4\n        \"\"\"\n        pass\n        \n    def find_min_max_3_sorted_arrays(self, A: List[int], B: List[int], C: List[int]) -> List[int]:\n        \"\"\" \n        Find the minimum and maximum in 3 sorted arrays.\n        \n        Input: \n        [1,2,3,4,5,6,7,8,9]\n        [2,3,4,5,6,7,8,9,10]\n        [3,4,5,6,7,8,9,10,11]\n        \n        Output:\n        [3,7,11]\n        \"\"\"\n        pass\n        \n    def find_anagrams(self, s: str, p: str) -> List[int]:\n        \"\"\" Given a string and an anagram string, find all the starting indices of the anagrams in the string.\n        \n        Input: \n        String: 'carrace'\n        Anagram: 'racecar'\n        \n        Output:\n        [3, 4]\n        \"\"\"\n        pass\n        \n    def find_triplets(self, arr: List[int]) -> List[List[int]]:\n        \"\"\" \n        Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n        \n        Input:\n        [2, 7, 11, 15] and target = 9\n        \n        Output:\n        [0, 1]\n        \"\"\"\n        pass\n        \n    def find_anagrams_from_file(self, filename: str, target: str) -> List[int]:\n        \"\"\" Given a file and a string, find all the indices of the string in the file.\n        \n        Input: \n        File: words.txt\n        Word: pattern\n        \n        Output:\n        [3, 6, 8, 12, 13, 14, 18, 20]\n        \"\"\"\n        pass\n        \n    def find_all_anagrams(self, s: str, p: str) -> List[int]:\n        \"\"\" Given a string and an anagram string, find all the starting indices of the anagrams in the string.\n        \n        Input: \n        String: 'carrace'\n        Anagram: 'racecar'\n        \n        Output:\n        [3, 4]\n        \"\"\"\n        pass\n        \n    def count_inversions(self, A: List[int]) -> int:\n        \"\"\" Given an array of integers, find the number of inversions in it.\n        \n        Input: \n        [2, 4, 1, 3, 5]\n        \n        Output:\n        2\n        \"\"\"\n        pass\n        \n    def find_anagrams_from_file(self, filename: str, target: str) -> List[int]:\n        \"\"\" Given a file and a string, find all the indices of the string in the file.\n        \n        Input: \n        File: words.txt\n        Word: pattern\n        \n        Output:\n        [3, 6, 8, 12, 13, 1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef str_xor_list(str_a: str, str_b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform XOR over the strings a and b and return result as a string.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nclass Solution:\n    \"\"\"\n    1. Check whether the input strings are same or not.\n    2. If they are same, return 0.\n    3. Calculate the XOR of the strings.\n    4. Print the XOR value.\n    5. Return 0 if the XOR value is 0, and 1 otherwise.\n    \"\"\"\n    def singleNumber(self, nums: List[int]) -> int:\n        # Check whether the input strings are same or not.\n        if len(nums) == 1:\n            return 0\n        \n        # Calculate the XOR of the strings.\n        a = nums[0]\n        for i in range(1, len(nums)):\n            a ^= nums[i]\n            \n        # Return the XOR value.\n        return a\n\n\nclass Solution:\n    \"\"\"\n    1. Check whether the input strings are same or not.\n    2. If they are same, return 0.\n    3. Calculate the XOR of the strings.\n    4. Print the XOR value.\n    5. Return 0 if the XOR value is 0, and 1 otherwise.\n    \"\"\"\n    def singleNumber(self, nums: List[int]) -> int:\n        # Check whether the input strings are same or not.\n        if len(nums) == 1:\n            return 0\n        \n        # Calculate the XOR of the strings.\n        a = nums[0]\n        for i in range(1, len(nums)):\n            a ^= nums[i]\n            \n        # Return the XOR value.\n        return a\n\n\n\nclass Solution:\n    \"\"\"\n    1. Check whether the input strings are same or not.\n    2. If they are same, return 0.\n    3. Calculate the XOR of the strings.\n    4. Print the XOR value.\n    5. Return 0 if the XOR value is 0, and 1 otherwise.\n    \"\"\"\n    def singleNumber(self, nums: List[int]) -> int:\n        # Check whether the input strings are same or not.\n        if len(nums) == 1:\n            return 0\n        \n        # Calculate the XOR of the strings.\n        a = nums[0]\n        for i in range(1, len(nums)):\n            a ^= nums[i]\n            \n        # Return the XOR value.\n        return a\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_xor('{}','{}') == '{}'\nassert     string_xor('{}','{}') == '{}'\nassert     string_xor('{}','{}') == '{}'\nassert     string_xor('{}','{}') == '{}'\nassert     string_xor('{}','{}') == '{}'\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_xor(\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\", \"686974207468652062756c6c277320657965\") == \"746865206b696420646f6e277420706c6179\"\nassert string_xor(\"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\", \"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\") == \"1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736\"\nassert string_xor(\"\", \"\") == \"\"\nassert string_xor(\"a\", \"a\") == \"a\"\nassert string_xor(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 213,
        "num_ids_4": 241
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert longest([]) == None\nassert longest([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"e\"\nassert longest([\"ab\", \"abd\", \"abda\", \"abbb\"]) == \"ab\"\n",
        "num_ids_2": 10,
        "num_ids_4": 58
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     longest(['']) == None\nassert     longest([\"\"]) == None\nassert     longest(['']) == None\nassert     longest([\"\"]) == None\nassert     longest(['']) == None\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     longest([]) == None\nassert     longest([\"\"]) == \"\"\nassert     longest([\"a\"]) == \"a\"\nassert     longest([\"ab\", \"a\", \"aa\", \"aba\", \"abab\"]) == \"ab\"\nassert     longest([\"abba\"]) == \"abba\"\n",
        "num_ids_2": 20,
        "num_ids_4": 61
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert longest(['']) == None\nassert longest(['']) == ''\nassert longest(['A', 'B', 'C']) == 'C'\nassert longest(['A', 'A', 'A']) == 'A'\n",
        "num_ids_2": 11,
        "num_ids_4": 37
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     longest([]) == None, 'Should return None in case of an empty input list'\nassert     longest(['']) == '', 'Should return the first element of the input list'\nassert     longest(['abc', 'abcccc', 'abccc', 'abccccc']) == 'abccc', 'Should return the longest string that appears in the input list'\n",
        "num_ids_2": 44,
        "num_ids_4": 89
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(longest(['abc', 'acb']))\n\nprint(longest(['abcd', 'abcd']))\n\nprint(longest(['abcd', 'bcda', 'ab']))\n\nprint(longest(['abc', 'acb', 'abbc']))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     longest([\"spam\", \"eggs\", \"flour\", \"sausages\"]) == \"flour\"\nassert     longest([\"spam\", \"eggs\", \"flour\"]) == \"flour\"\nassert     longest([\"spam\"]) == \"spam\"\nassert     longest([]) == None\nassert     longest([\"\"]) == None\n",
        "num_ids_2": 53,
        "num_ids_4": 78
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     longest([\"1\", \"11\", \"22\", \"33\"]) == \"22\"\nassert     longest([\"11\", \"22\", \"33\"]) == \"22\"\nassert     longest([\"1\", \"11\"]) == \"11\"\nassert     longest([\"1\"]) == \"1\"\nassert     longest([]) == None\n",
        "num_ids_2": 43,
        "num_ids_4": 74
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert longest(['']) is None\nassert longest([''] * 10) is None\nassert longest([''] * 100) is None\nassert longest([''] * 1000) is None\n",
        "num_ids_2": 11,
        "num_ids_4": 33
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     greatest_common_divisor(10, 5) == 5\nassert greatest_common_divisor(10, 10) == 10\nassert greatest_common_divisor(5, 5) == 5\nassert greatest_common_divisor(5, 10) == 1\nassert greatest_common_divisor(10, 5) == 1\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    greatest_common_divisor(1, 2) == 2\n    greatest_common_divisor(2, 2) == 2\n    greatest_common_divisor(3, 2) == 1\n    greatest_common_divisor(2, 3) == 1\n    greatest_common_divisor(5, 7) == 1\n    greatest_common_divisor(10, 20) == 1\n    greatest_common_divisor(8, 12) == 2\n    greatest_common_divisor(9, 12) == 1\n    greatest_common_divisor(17, 18) == 1\n    greatest_common_divisor(18, 17) == 1\n    greatest_common_divisor(60, 32) == 32\n    greatest_common_divisor(60, 36) == 36\n    greatest_common_divisor(60, 38) == 38\n    greatest_common_divisor(60, 40) == 40\n    greatest_common_divisor(60, 50) == 40\n    greatest_common_divisor(120, 32) == 32\n    greatest_common_divisor(120, 36) == 36\n    greatest_common_divisor(120, 38) == 38\n    greatest_common_divisor(120, 40) == 40\n    greatest_common_divisor(120, 50) == 50\n    greatest_common_divisor(240, 32) == 32\n    greatest_common_divisor(240, 36) == 36\n    greatest_common_divisor(240, 38) == 38\n    greatest_common_divisor(240, 40) == 40\n    greatest_common_divisor(240, 50) == 50\n    greatest_common_divisor(960, 32) == 32\n    greatest_common_divisor(960, 36) == 36\n    greatest_common_divisor(960, 38) == 38\n    greatest_common_divisor(960, 40) == 40\n    greatest_common_divisor(960, 50) == 50\n    greatest_common_divisor(1180, 32) == 32\n    greatest_common_divisor(1180, 36) == 36\n    greatest_common_divisor(1180, 38) == 38\n    greatest_common_divisor(1180, 40) == 40\n    greatest_common_divisor(1180, 50) == 50\n    greatest_common_divisor(1835, 32) == 32\n    greatest_common_divisor(1835, 36) == 36\n    greatest_common_divisor(1835, 38) == 38\n    greatest_common_divisor(1835, 40) == 40\n    greatest_common_divisor(1835, 50) == 50\n    greatest_common_divisor(1000000, 32) == 32\n    greatest_common_divisor(1000000, 36) == 36\n    greatest_common_divisor(1000000, 38) == 38\n    greatest_common_divisor(1000000, 40) == 40\n    greatest_common_divisor(1000000, 50) == 50\n    greatest_common_divisor(9876543210, 32) == 32\n    greatest_common_divisor(9876543210, 36) == 36\n    greatest_common_divisor(9876543210, 38) == 38\n    greatest_common_divisor(9876543210, 40) == 40\n    greatest_common_divisor(9876543210, 50) == 50\n    greatest_common_divisor(2 * 3 * 4 * 5, 16) == 16\n    greatest_common_divisor(2 * 3 * 4 * 5, 24) == 24\n    greatest_common_divisor(2 * 3 * 4 * 5, 40) == 40\n    greatest_common_divisor(2 * 3 * 4 * 5, 45) == 45\n    greatest_common_divisor(2 * 3 * 4 * 5, 60) == 60\n    greatest_common_divisor(2 * 3 * 4 * 5, 72) == 72\n    greatest_commo",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     greatest_common_divisor(12, 8) == 4\nassert     greatest_common_divisor(24, 8) == 4\nassert     greatest_common_divisor(12, 8) == 4\n\ndef greatest_common_divisor_recursive(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor_recursive(b, a%b)\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     greatest_common_divisor(10, 5) == 2\nassert greatest_common_divisor(10, 5) == 2\nassert greatest_common_divisor(10, 0) == 1\nassert greatest_common_divisor(0, 5) == 1\nassert greatest_common_divisor(5, 10) == 1\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     greatest_common_divisor(8, 4) == 2\nassert     greatest_common_divisor(8, 3) == 2\nassert     greatest_common_divisor(8, 6) == 2\nassert     greatest_common_divisor(8, 8) == 1\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     greatest_common_divisor(24, 12) == 6\nassert     greatest_common_divisor(4, 5) == 1\nassert     greatest_common_divisor(2, 2) == 1\n\ndef square_roots(n: int) -> int:\n    \"\"\" Find the square roots of the integer n\n    \"\"\"\n    pass\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert greatest_common_divisor(3, 4) == 1\nassert greatest_common_divisor(4, 4) == 1\nassert greatest_common_divisor(10, 4) == 2\nassert greatest_common_divisor(10, 8) == 2\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     greatest_common_divisor(3, 6) == 1\nassert     greatest_common_divisor(9, 12) == 3\nassert     greatest_common_divisor(3, 3) == 3\nassert     greatest_common_divisor(3, 8) == 1\nassert     greatest_common_divisor(3, 9) == 1\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_prefixes('abcdef') == ['ab', 'ac', 'ad', 'ae', 'af', 'b', 'c', 'd', 'e', 'f']\nassert all_prefixes('abcd') == ['a', 'ab', 'ac', 'ad', 'a', 'bc', 'b', 'cd', 'c', 'd', 'abcd']\nassert all_prefixes('hello') == ['h', 'hel', 'hell', 'ello', 'ello', 'llo']\nassert all_prefixes('abcdxyz') == ['ab', 'ac', 'ad', 'a', 'bc', 'b', 'cd', 'c', 'd', 'xy', 'abcd', 'xyz']\n",
        "num_ids_2": 87,
        "num_ids_4": 166
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_prefixes('hello') == ['h', 'he', 'hel', 'hell']\nassert all_prefixes('ab') == ['a', 'ab']\nassert all_prefixes('abcd') == ['ab', 'abcd']\nassert all_prefixes('abcd12345') == ['ab', 'abcd', 'abcd123', 'abcd12', 'abcd1', 'abcd0', 'abcd']\n",
        "num_ids_2": 39,
        "num_ids_4": 101
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert all_prefixes(\"abcdef\") == [\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abce\", \"abdef\"]\nassert all_prefixes(\"word\") == [\"\", \"w\", \"wo\", \"wor\", \"word\"]\n",
        "num_ids_2": 37,
        "num_ids_4": 62
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_prefixes('coding') == ['coding', 'cod']\nassert     all_prefixes('hello') == ['hello', 'hel', 'hello', 'he', 'hel']\nassert     all_prefixes('A') == ['A']\n\n\ndef first_unique_index(characters: List[str]) -> int:\n    \"\"\" Find the index of first character in `characters` that is not a duplicate.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 45,
        "num_ids_4": 59
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_prefixes(\"ab\") == [\"a\", \"ab\"]\nassert     all_prefixes(\"ababab\") == [\"a\", \"ab\", \"aba\", \"abab\", \"ababa\"]\nassert     all_prefixes(\"\") == [\"\"]\nassert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abcde\") == [\"a\", \"ab\", \"abc\", \"abde\"]\n",
        "num_ids_2": 47,
        "num_ids_4": 79
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_prefixes(\"spam\") == [\"spam\"]\nassert all_prefixes(\"eggspamspam\") == [\"eggspam\", \"spam\"]\nassert all_prefixes(\"spamegg\") == [\"spamegg\", \"spam\", \"egg\"]\nassert all_prefixes(\"\") == []\nassert all_prefixes(\"abc\") == [\"abc\"]\n",
        "num_ids_2": 39,
        "num_ids_4": 73
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_prefixes(\"hello\") == [\"h\", \"he\", \"hel\", \"hell\", \"helll\"]\nassert     all_prefixes(\"queries\") == [\"q\", \"qu\", \"quer\", \"quers\", \"querst\", \"quersts\", \"quert\", \"querts\", \"quers\"]\nassert     all_prefixes(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcd\"]\nassert     all_prefixes(\"abcde\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcd\"]\nassert     all_prefixes(\"\") == []\n",
        "num_ids_2": 73,
        "num_ids_4": 131
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nall_prefixes(\"ABCD\") == [\"A\", \"AB\", \"ABC\", \"ABD\"]\n\nassert all_prefixes(\"hello\") == [\"h\", \"he\", \"hel\", \"hell\", \"hello\"]\nassert all_prefixes(\"\") == [\"\"]\nassert all_prefixes(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abcd\"]\n",
        "num_ids_2": 28,
        "num_ids_4": 63
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_sequence(1) == '0'\nassert     string_sequence(2) == '00'\nassert     string_sequence(3) == '000'\nassert     string_sequence(4) == '0000'\nassert     string_sequence(5) == '00000'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_sequence(1) == '0'\nassert     string_sequence(2) == '0 1'\nassert     string_sequence(3) == '0 1 2'\nassert     string_sequence(4) == '0 1 2 3'\nassert     string_sequence(5) == '0 1 2 3 4'\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\n",
        "num_ids_2": 28,
        "num_ids_4": 50
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert string_sequence(0) == \"0\"\nassert string_sequence(1) == \"1\"\nassert string_sequence(2) == \" 1\"\nassert string_sequence(3) == \"10\"\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_sequence(3) =='0 1 2'\n\ndef count_sum(lst: List[int]) -> int:\n    \"\"\"Return the number of elements in list lst having the sum equal to 3.\"\"\"\n    pass\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('Example:')\n    print(string_sequence(1))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert string_sequence(1) == \"0\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_sequence(0) == \"\", \"The output should be empty string\"\nassert     string_sequence(5) == \" 0 1 2 3 4 \", \"The output should be the space-delimited numbers starting from 0 upto 5 inclusive\"\nassert     string_sequence(1) == \" 0 \", \"The output should be the space-delimited numbers starting from 0 upto 1 inclusive\"\n",
        "num_ids_2": 57,
        "num_ids_4": 90
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 4\n    print(string_sequence(n))\n    print(string_sequence(n) == \"00 01 02 03\")\n    print(string_sequence(n) == \"00 01 02 03\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_distinct_characters('Madam, I am Adam') == 5, \"First Test failed\"\nassert count_distinct_characters('a') == 1, \"Second Test failed\"\nassert count_distinct_characters('abc') == 3, \"Third Test failed\"\nassert count_distinct_characters('a B c') == 3, \"Fourth Test failed\"\n\ndef count_distinct_characters_in_order(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n        The character count is the number of characters that are in the string\n        Examples:\n        If the string is 'abc', then the character count is 3\n        If the string is 'aabbcc', then the character count is 5\n        If the string is 'aBc', then the character count is 2\n    \"\"\"\n    pass\n",
        "num_ids_2": 46,
        "num_ids_4": 88
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_distinct_characters(\"Hola Mundo!\") == 5\nassert count_distinct_characters(\"Bits\") == 7\nassert count_distinct_characters(\"Python\") == 6\nassert count_distinct_characters(\"\") == 0\n",
        "num_ids_2": 34,
        "num_ids_4": 61
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Test passed\")\n\nprint(\"Input:\", end=\" \")\ninput_string = input()\nprint(\"Output:\", end=\" \")\nprint(count_distinct_characters(input_string))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('AaBC') == 6\nassert     count_distinct_characters('aaa') == 3\nassert     count_distinct_characters('ABBC') == 4\nassert     count_distinct_characters('abcabc') == 3\n",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"Leetcode\") == 6\nassert     count_distinct_characters(\"Hello\") == 5\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"A\") == 1\nassert     count_distinct_characters(\"AA\") == 2\n",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(count_distinct_characters(\"GeeksForGeeks\"))\nprint(count_distinct_characters(\"GEEKSFORGEEKS\"))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_distinct_characters('abc') == 2\nassert     count_distinct_characters('aa') == 2\nassert     count_distinct_characters('abcdef') == 6\nassert     count_distinct_characters('ABCD') == 3\nassert count_distinct_characters('abcdefgh') == 12\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"aBc\") == 3\nassert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"abcD\") == 4\n",
        "num_ids_2": 29,
        "num_ids_4": 61
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_music(\"ooo|oo|ooo|o|o|o|o|o|o|o|oo|oo|o|\") == [4, 2, 1, 1]\nassert     parse_music(\"ooo|oo|ooo|o|o|o|o|o|o|o|oo|oo|o|\") == [4, 2, 1, 1]\nassert     parse_music(\"ooo|oo|ooo|o|o|o|o|o|o|o|oo|oo|o|\") == [4, 2, 1, 1]\n",
        "num_ids_2": 88,
        "num_ids_4": 132
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_music('o|o|o|o|o|o|o|o|o|o|o') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('o|o|o|o|o|o|o|o|o|o') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('|') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('|o|o|o|o|o|o|o|o|o|o') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('|o|o|o|o|o|o|o|o|o|o|o') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n",
        "num_ids_2": 100,
        "num_ids_4": 181
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_music(\"o|oo|.|.|.|o|o|o\") == [4,4,1,2,2,2,1]\nassert     parse_music(\"o|oo|.|.|.|o|o|o|.|o|o|.|o\") == [4,4,1,2,2,2,1,1,1,2,1,1,1,2,1]\n\ndef parse_music_simple(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    \"\"\"\n    pass\n",
        "num_ids_2": 104,
        "num_ids_4": 104
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parse_music(\"o\") == [4]\nassert     parse_music(\"o|\") == [2, 2]\nassert     parse_music(\"o.|\") == [1, 2, 2, 1]\nassert     parse_music(\"o..\") == [3, 2, 1]\nassert     parse_music(\"o..|\") == [3, 2, 1, 2, 2]\n",
        "num_ids_2": 29,
        "num_ids_4": 68
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parse_music('c2|c2|c2|c2|c2|c2|c2|c2|c2') == [4, 4, 4, 4, 4, 4, 4, 4, 4]\nassert     parse_music('c|o|o|o|o|o|o|o|o') == [4, 4, 4, 4, 4, 4, 4, 4, 4]\nassert     parse_music('c|o|o|o|o|o|o|o|o|o|o|o|o|o') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\nassert     parse_music('c|o|o|o|o|o|o|o|o|o|o|o|o|o|o') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\nassert     parse_music('o|c|o|o|o|o|o|o|o|o|o|o|o|o|o') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\n",
        "num_ids_2": 99,
        "num_ids_4": 215
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_music('o') == [4]\nassert     parse_music('o|') == [2]\nassert     parse_music('o.|') == [1]\nassert     parse_music('oo|o|o') == [4, 2, 2]\nassert     parse_music('o|o|o|o|o') == [3, 2, 2, 2]\n",
        "num_ids_2": 27,
        "num_ids_4": 63
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert parse_music(\"o|.|.o|o|.o|o\") == [1,1,1,1,1,1,1,1]\nassert parse_music(\"o|.|o|o|o|.o|o\") == [1,1,1,1,1,1,1,1]\nassert parse_music(\"o|o|o|o|o|o|o\") == [1,1,1,1,1,1,1,1]\n",
        "num_ids_2": 41,
        "num_ids_4": 118
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_music(\"-\") == [0, 0, 0, 0]\nassert     parse_music(\"o\") == [4, 0, 0, 0]\nassert     parse_music(\"o|\") == [2, 0, 0, 0]\nassert     parse_music(\"-.|\") == [1, 0, 0, 0]\nassert     parse_music(\"-.-\") == [0, 0, 0, 0]\n",
        "num_ids_2": 38,
        "num_ids_4": 78
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     parse_music(\"o|.o|\") == [0, 2, 0, 2, 0, 2, 0, 2, 0, 2]\nassert parse_music(\"|.o|.o|\") == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\nassert parse_music(\"|.|.|.|\") == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert parse_music(\"|.|.|\") == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert parse_music(\"|.|o|.|\") == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n",
        "num_ids_2": 71,
        "num_ids_4": 141
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     how_many_times(\"pneumonoultramicroscopicsilicovolcanoconiosis\", \"e\") == 2\nassert     how_many_times(\"pneumonoultramicroscopicsilicovolcanoconiosis\", \"pl\") == 0\nassert     how_many_times(\"pneumonoultramicroscopicsilicovolcanoconiosis\", \"on\") == 0\nassert     how_many_times(\"pneumonoultramicroscopicsilicovolcanoconiosis\", \"no\") == 1\nassert     how_many_times(\"pneumonoultramicroscopicsilicovolcanoconiosis\", \"e\") == 2\n",
        "num_ids_2": 60,
        "num_ids_4": 120
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     how_many_times('abracadabra', 'ab') == 2\nassert     how_many_times('abracadabra', 'cd') == 0\nassert     how_many_times('abracadabra', 'ab') == 1\nassert     how_many_times('abracadabra', 'ac') == 2\nassert     how_many_times('abracadabra', 'ra') == 2\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     how_many_times(\"hello world\", \"o\") == 2\nassert     how_many_times(\"hello world\", \"l\") == 1\nassert     how_many_times(\"\", \"hello\") == 0\nassert     how_many_times(\"\", \"\") == 0\nassert     how_many_times(\"hello world\", \"world\") == 1\n",
        "num_ids_2": 34,
        "num_ids_4": 63
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('Testing how_many_times')\n    assert how_many_times('abcabcabd', 'abd') == 2\n    assert how_many_times('abcabcabd', 'bc') == 1\n    assert how_many_times('abcabcabd', 'bc') == 1\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"Passed: how_many_times\")\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) == 3:\n        s = sys.argv[1]\n        substr = sys.argv[2]\n\n        count = how_many_times(s, substr)\n        print(\"{} {}\".format(count, substr))\n    else:\n        print(\"Usage: {} <string> <substring>\".format(sys.argv[0]))\n        print(\"Example: {} 'asdfg' 'fg'\".format(sys.argv[0]))\n        print(\"Example: {} 'asdfg' 'as'\".format(sys.argv[0]))\n        print(\"Example: {} 'asdfg' 'asdf'\".format(sys.argv[0])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     how_many_times('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 1026,
        "num_ids_4": 1026
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     how_many_times(\"abracadabra\", \"abracadabra\") == 1\nassert     how_many_times(\"abracadabra\", \"abra\") == 1\nassert     how_many_times(\"abracadabra\", \"d\") == 2\nassert     how_many_times(\"abracadabra\", \"abcd\") == 0\nassert     how_many_times(\"abracadabra\", \"r\") == 2\n",
        "num_ids_2": 45,
        "num_ids_4": 86
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     how_many_times(\"ababc\", \"abc\") == 2\nassert     how_many_times(\"ababc\", \"ab\") == 2\nassert     how_many_times(\"ababc\", \"a\") == 1\nassert     how_many_times(\"ababc\", \"b\") == 1\nassert     how_many_times(\"ababc\", \"c\") == 0\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     how_many_times(\"abcabc\", \"abc\") == 3\nassert     how_many_times(\"abcabc\", \"ab\") == 2\nassert     how_many_times(\"abcabc\", \"c\") == 1\nassert     how_many_times(\"abcabc\", \"ababc\") == 0\nassert     how_many_times(\"abcbcdcd\", \"cd\") == 1\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'zero nine three seven eight four five two one six'\n\n\ndef sort_strings(strings: str) -> str:\n    \"\"\" Input is a space-delimited string of strings from 'A' to 'Z'.\n    Valid choices are 'A', 'B', 'C', 'D', 'E', 'F', 'G' and 'H'.\n    Return the string with strings sorted from smallest to largest\n    \"\"\"\n    pass\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_numbers(\"zero one two three four five six seven eight nine\") == \"nine zero one two three four five six seven eight\"\nassert     sort_numbers(\"four one three two five six seven eight nine zero\") == \"nine zero one three four two five six seven eight\"\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numbers(\"one thirty one\") == \"one thirty one\"\nassert     sort_numbers(\"two one\") == \"one two\"\nassert     sort_numbers(\"three one\") == \"one three\"\nassert     sort_numbers(\"four one\") == \"one four\"\nassert     sort_numbers(\"five one\") == \"one five\"\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_numbers(\"one\") == \"one\"\nassert     sort_numbers(\"one four\") == \"four one\"\nassert     sort_numbers(\"one zero\") == \"zero one\"\nassert     sort_numbers(\"one zero one\") == \"zero one one\"\nassert     sort_numbers(\"three seven zero\") == \"zero three seven\"\n",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numbers(\"zero one two three four five six seven eight nine\") == \"one zero 2 three four five six seven eight nine\"\nassert     sort_numbers(\"zero nine one two three four five six seven eight\") == \"one zero nine two three four five six seven eight\"\nassert     sort_numbers(\"zero nine zero two three four five six seven eight\") == \"zero nine two three four five six seven eight\"\nassert     sort_numbers(\"zero nine zero zero two three four five six seven eight\") == \"zero nine zero zero two three four five six seven eight\"\nassert     sort_numbers(\"zero nine 0 one two three four 5 six 7 eight\") == \"zero nine 0 one two three four 5 six 7 eight\"\n",
        "num_ids_2": 64,
        "num_ids_4": 129
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sort_numbers(\"zero one two three four five six seven eight nine\") == \"zero nine seven eight five four three two one\"\nassert sort_numbers(\"zero\") == \"zero\"\nassert sort_numbers(\"zero\") == \"zero\"\nassert sort_numbers(\"ten\") == \"ten\"\n",
        "num_ids_2": 33,
        "num_ids_4": 59
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_numbers(\"five one zero two seven\") == \"one zero two five seven\"\nassert sort_numbers(\"zero three one seven eight\") == \"zero one three seven eight\"\nassert sort_numbers(\"one four three\") == \"one three four\"\n\ndef insert_number(numbers: str, position: int, number: int) -> str:\n    \"\"\" Input is a string of numbers separated by spaces.\n    Insert a new number at a specific position. \n    Return the string with numbers in the same order as they were in in the input string\n    \"\"\"\n    pass\n",
        "num_ids_2": 43,
        "num_ids_4": 60
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef sort_strings(strings: str) -> str:\n    \"\"\" Input is a space-delimited string of lowercase letters.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n    Return the string with letters sorted from smallest to largest\n    \"\"\"\n    pass\n\ndef sort_strings(strings: str) -> str:\n    \"\"\" Input is a space-delimited string of lowercase letters.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n    Return the string with letters sorted from smallest to largest\n    \"\"\"\n    pass\n\ndef sort_strings(strings: str) -> str:\n    \"\"\" Input is a space-delimited string of lowercase letters.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n    Return the string with letters sorted from smallest to largest\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'nine eight five six four three two one zero'\n\n\ndef sort_letters(words: List[str]) -> str:\n    \"\"\" Input is a space-delimited list of words.\n    Valid choices are 'apple', 'bat', 'cat', 'dog', 'elephant', 'fish', 'giraffe', 'horse', 'kangaroo', 'keyboard', 'lion', 'lizard','monkey','mouse','motorcycle', 'octopus', 'oven', 'pig', 'rabbit', 'rat','snake','spider','squirrel', 'tiger', 'umbrella', 'watch', 'yak', 'zebra'.\n    Return the list sorted from least to greatest.\n    \"\"\"\n    pass\n\n\nassert sort_letters(['bat', 'cat', 'elephant', 'fish', 'giraffe', 'horse', 'kangaroo', 'keyboard', 'lion', 'lizard','monkey','mouse','motorcycle', 'octopus', 'oven', 'pig', 'rabbit', 'rat','snake','spider','squirrel', 'tiger', 'umbrella', 'watch', 'yak', 'zebra']) == ['elephant', 'fish', 'giraffe', 'giraffe', 'horse', 'keyboard', 'octopus', 'octopus', 'pig', 'rat', 'rabbit','spider','snake','snake', 'tiger', 'watch', 'yak', 'yak', 'zebra', 'zebra']\n\n\ndef sort_names(names: List[str]) -> str:\n    \"\"\" Input is a space-delimited list of names.\n    Valid choices are 'Sarah', 'Mary', 'Jim', 'Oscar', 'John', 'Bob', 'Sara', 'Julia', 'Freddie', 'Denise', 'Ava', 'Luna', 'Kendra', 'Aubrey', 'Rhea', 'Henry', 'Wendy', 'Barbara', 'Nancy', 'Yvonne'.\n    Return the list sorted from least to greatest.\n    \"\"\"\n    pass\n",
        "num_ids_2": 206,
        "num_ids_4": 206
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_closest_elements2(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    \n    numbers_copy = numbers.copy()\n    numbers_copy.sort()\n    \n    left = 0\n    right = len(numbers_copy) - 1\n\n    closest_left = None\n    closest_right = None\n    while left < right:\n        if numbers_copy[left]!= numbers_copy[right]:\n            if closest_left is None or closest_left > numbers_copy[left]:\n                closest_left = numbers_copy[left]\n            if closest_right is None or closest_right > numbers_copy[right]:\n                closest_right = numbers_copy[right]\n            if numbers_copy[left] == numbers_copy[right]:\n                if numbers_copy[left] < numbers_copy[left]:\n                    left += 1\n                else:\n                    right -= 1\n            \n            left += 1\n            right -= 1\n        \n        else:\n            left += 1\n            right -= 1\n            \n    return closest_left, closest_right\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_closest_elements([4,7,1,2,9]) == (1, 2)\nassert     find_closest_elements([4,7,1,2,9,10]) == (1, 2)\nassert     find_closest_elements([4,7,1,2,9,10,5]) == (1, 2)\nassert     find_closest_elements([4,7,1,2,9,10,5,6]) == (1, 2)\nassert     find_closest_elements([4,7,1,2,9,10,5,6,7]) == (1, 2)\n",
        "num_ids_2": 58,
        "num_ids_4": 124
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_closest_elements([4,5,6,7,9]) == (5, 9)\nassert     find_closest_elements([3,2,1,5,4]) == (2, 3)\nassert     find_closest_elements([-1,2,3,4,5]) == (3, 4)\nassert     find_closest_elements([4,7,2,1,5]) == (2, 1)\nassert     find_closest_elements([3,1,4,5,6]) == (3, 4)\n",
        "num_ids_2": 56,
        "num_ids_4": 113
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_closest_elements([-4, 1, -5, 3, 4, 5, 4, 7]) == (1, 5)\nassert     find_closest_elements([-4, 3, -5, 4, 5, 4, 7]) == (3, 4)\nassert     find_closest_elements([-4, 1, -5, 3, 4, 5, 4, 7]) == (1, 5)\nassert     find_closest_elements([-4, 1, -5, 3, 4, 5, 4, 7]) == (1, 5)\nassert     find_closest_elements([-4, 1, -5, 3, 4, 5, 4, 7]) == (1, 5)\n",
        "num_ids_2": 70,
        "num_ids_4": 142
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_closest_elements([3, 1, 2]) == (1, 2)\nassert     find_closest_elements([3, 1, 4, 2, 5]) == (3, 4)\nassert     find_closest_elements([5, 4, 3, 2, 1]) == (5, 4)\nassert     find_closest_elements([3, 3, 3, 2, 1]) == (1, 3)\nassert     find_closest_elements([1, 1, 1, 1, 1]) == (1, 1)\n",
        "num_ids_2": 52,
        "num_ids_4": 108
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_closest_elements([3, 4, 6]) == (4, 6)\nassert     find_closest_elements([-7, -3, -1, 2, -2]) == (2, -7)\nassert     find_closest_elements([2.5, 2, 2, 2]) == (2, 2.5)\nassert     find_closest_elements([1,2,3,4]) == (1,2)\n\n\ndef knapsack(knapsack_value: int, items: List[Tuple[int, int]]) -> int:\n    \"\"\" Given the capacity of the knapsack and a list of items and their values, returns the maximum value that can be \n    collected using the items. The items can be ordered from the largest value to the smallest (i.e. it can be \n    ordered from most value to least value).\n    \"\"\"\n    ",
        "num_ids_2": 57,
        "num_ids_4": 113
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sort_numbers(numbers: List[float]) -> List[float]:\n    \"\"\" Sort a list of numbers in ascending order (largest numbers first). \"\"\"\n    pass\n\n\nassert sort_numbers([1, 2, 3]) == [1, 2, 3]\nassert sort_numbers([5, 1, 4, 3, 2]) == [1, 2, 3, 4, 5]\n",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_closest_elements([-4.0, 2.0, 2.1, 6.1, 7.0]) == (2.1, 2.0)\nassert     find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) == (0.6, 0.7)\nassert     find_closest_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]) == (1.3, 1.1)\nassert     find_closest_elements([-1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8]) == (-1.7, -1.8)\nassert     find_closest_elements([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == (0.0, 0.0)\n",
        "num_ids_2": 101,
        "num_ids_4": 227
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_closest_elements([-2, 3, -1, 6]) == (3, -1)\nassert     find_closest_elements([-2, -3, -1, -6]) == (-3, -1)\nassert     find_closest_elements([-2, 3, 6, -1]) == (3, -1)\nassert     find_closest_elements([-2, 3, 6, -1]) == (3, -1)\nassert     find_closest_elements([3, 6, -1, -2]) == (3, -1)\n",
        "num_ids_2": 60,
        "num_ids_4": 118
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    find_closest_elements([1, 3, 5, 6, 2, 4, 7, 9]) == (2, 4)\n    find_closest_elements([4, 4, 4, 4, 4, 4, 4, 4]) == (4, 4)\n    find_closest_elements([2, 2, 3, 4, 5]) == (2, 3)\n    find_closest_elements([9, 8, 7, 6, 5, 4, 3, 2, 1]) == (1, 2)\n    find_closest_elements([1, 1, 1, 1, 1, 1, 1, 1, 1]) == (1, 1)\n    find_closest_elements([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == (1, 1)\n    find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == (1, 2)\n    find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([0, 0.2, 0.6, 0.8, 1]) == [0, 0.4, 0.4, 0.4, 0.5]\nassert     rescale_to_unit([0, 0.2, 0.6, 0.8, 1]) == [-0.2, 0.4, 0.4, 0.4, 0.5]\nassert     rescale_to_unit([0, 0.2, 0.6, 0.8, 1]) == [-0.2, 0.4, 0.4, 0.4, 0.5]\nassert     rescale_to_unit([0, 0.2, 0.6, 0.8, 1]) == [-0.2, 0.4, 0.4, 0.4, 0.5]\nassert     rescale_to_unit([0, 0.2, 0.6, 0.8, 1]) == [-0.2, 0.4, 0.4, 0.4, 0.5]\n",
        "num_ids_2": 94,
        "num_ids_4": 190
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef transform_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers, apply the rescale_to_unit function to it,\n    so that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef normalize_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the average is 1 and the largest number will become 1\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4, 5]) == [0.5, 0.5, 0.5, 0.5, 0.5]\nassert     rescale_to_unit([1, 2, 3, 4, 5]) == [0.5, 0.5, 0.5, 0.5, 0.5]\nassert     rescale_to_unit([-1, -2, -3, -4, -5]) == [0.5, 0.5, 0.5, 0.5, 0.5]\nassert     rescale_to_unit([-1, -2, -3, -4, -5]) == [0.5, 0.5, 0.5, 0.5, 0.5]\n",
        "num_ids_2": 84,
        "num_ids_4": 178
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rescale_to_unit([0, 0.5, 1]) == [0, 0.5, 1]\nassert     rescale_to_unit([0, 0.5, 1, 1, 1, 1]) == [0, 0.5, 1]\nassert     rescale_to_unit([-1, -0.75, -0.5, 0, 0.5, 0.75, 1]) == [-1, -0.75, -0.5, 0, 0.5, 0.75, 1]\nassert     rescale_to_unit([-1, -0.75, -0.5, 0, 0.5, 0.75, 1, 1]) == [-1, -0.75, -0.5, 0, 0.5, 0.75, 1]\n",
        "num_ids_2": 62,
        "num_ids_4": 186
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rescale_to_unit([0.0, 0.25, 0.5, 0.75, 1.0]) ==     [0, 0.5, 0.5, 0.5, 1]\nassert     rescale_to_unit([0.0, 0.5, 1.0, 1.0, 1.0]) ==     [0, 0.5, 0.5, 0.5, 1]\nassert     rescale_to_unit([0.0, 1.0, 1.0, 0.5, 0.5, 1.0]) ==     [0, 0.5, 0.5, 0.5, 0.5, 1]\nassert     rescale_to_unit([0.0, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0]) ==     [0, 0.5, 0.5, 0.5, 0.5, 0.5, 1]\nassert     rescale_to_unit([0.0, 1.0, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0]) ==     [0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1]\n",
        "num_ids_2": 98,
        "num_ids_4": 220
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef rescale_to_unit2(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    n = len(numbers)\n    if n <= 1:\n        return numbers\n\n    # the largest number in the list is the maximum possible number,\n    # therefore the smallest number in the list is the minimum possible number,\n    # so the range of the rescaled numbers is [-1, 1]\n    max_value = numbers[-1]\n    min_value = numbers[0]\n\n    # the rescaled number is the linear interpolation of the smallest and largest number\n    # for example, the rescaled number for the smallest number is\n    # min_value + (max_value - min_value) * rescaled_number\n    rescaled_number = (min_value + max_value) / 2\n\n    # compute the new rescaled numbers\n    new_numbers = [min_value + (max_value - min_value) * n / n for n in numbers]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rescale_to_unit([0, 1, 0]) ==     [0, 0.5, 0]\nassert     rescale_to_unit([0.1, 0.4, 0.0]) == [0.1, 0.4, 0.0]\nassert     rescale_to_unit([0.05, 0.3, 0.1, 0.15, 0.4]) == [0.05, 0.3, 0.1, 0.15, 0.4]\n",
        "num_ids_2": 63,
        "num_ids_4": 115
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rescale_to_unit([2.5, 3.4, 1.3, 4.3]) == [0.2, 0.4, 0.1, 0.5]\nassert     rescale_to_unit([-1.5, -2.4, -1.2, -4.3]) == [0.2, 0.4, 0.1, 0.5]\nassert     rescale_to_unit([3.5, 5.4, 1.3, 0.5]) == [0.2, 0.4, 0.1, 0.5]\nassert     rescale_to_unit([0.5, 4.2, 3.1, 4.3]) == [0.2, 0.4, 0.1, 0.5]\n\n\ndef my_print(string: str) -> None:\n    \"\"\" Print string.\n",
        "num_ids_2": 92,
        "num_ids_4": 180
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rescale_to_unit([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\nassert     rescale_to_unit([0.1, 0.3, 0.5, 0.7, 0.9, 1.0]) == [0, 0, 0, 0, 0, 1]\nassert     rescale_to_unit([0.1, 0.2, 0.4, 0.6, 0.8, 0.9, 1.0]) == [0, 0, 0, 0, 0, 0, 1]\nassert     rescale_to_unit([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\nassert     rescale_to_unit([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\n",
        "num_ids_2": 120,
        "num_ids_4": 246
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_integers([]) == [], 'No integers'\nassert     filter_integers([3]) == [3], 'One integer'\nassert     filter_integers([-3, -2, -1, 0, 1, 2, 3]) == [-3, -2, -1, 0, 1, 2, 3], 'Integers'\nassert     filter_integers([3, 2, 1, 0]) == [], 'Empty values'\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    \"\"\"\n    pass\n",
        "num_ids_2": 34,
        "num_ids_4": 104
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_integers(['a', 1, 2, 3]) == [1, 2, 3]\nassert filter_integers([1, 2, 'a', 4, 5, 6, False]) == [1, 2, 4, 5, 6]\n\ndef filter_leap_years(dates: List[int]) -> List[int]:\n    \"\"\" Filter list of years with leap year\n    \"\"\"\n    pass\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfilter_integers([1, 2, 3, 4, 5, 6, \"7\", 8, 9]) == [1, 2, 3, 4, 5, 6, 8, 9]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef check_if_integer(num: Any) -> bool:\n    \"\"\" Check if the given any is integer\n    \"\"\"\n    pass\n\n\ndef find_peak(nums: List[int]) -> int:\n    \"\"\" Find the peak of the given array\n    \"\"\"\n    pass\n\n\ndef find_peak_sorted_array(nums: List[int]) -> int:\n    \"\"\" Find the peak of the given array\n    \"\"\"\n    pass\n\n\ndef find_peak_sorted_array_2(nums: List[int]) -> int:\n    \"\"\" Find the peak of the given array\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef filter_integers2(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    # return list(filter(is_integer, values))\n    return filter(lambda x: isinstance(x, int), values)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert filter_integers([1, 2, 'a', 'b', 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 5, 6, 7, 8, 9, 10]\nassert filter_integers([1, 'a', 'b', 4, 5, 6, 7, 8, 9, 10]) == [1, 'a', 'b', 4, 5, 6, 7, 8, 9, 10]\nassert filter_integers([1, 2, 3, 4, 'a', 'b', 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 'a', 'b', 4, 5, 6, 7, 8, 9, 10]\n",
        "num_ids_2": 52,
        "num_ids_4": 156
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([1, 2, 3, 'A', 5, 6, 'B', 7, 'C', 8, 9]) == [1, 2, 3, 5, 6, 7, 8, 9]\nassert     filter_integers([1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5]) == [1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5]\nassert     filter_integers([1, 2, 'A', 5, 'B', 6, 'C', 7, 8, 9]) == [1, 2, 5, 6, 7, 8, 9]\nassert     filter_integers([]) == []\n",
        "num_ids_2": 97,
        "num_ids_4": 226
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_integers([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     filter_integers([0,1,2,3,4,5,6,7,8,9]) == []\nassert     filter_integers([]) == []\nassert     filter_integers([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,2,3,4,5,6,7,8,9,10,11,12,13]\nassert     filter_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n",
        "num_ids_2": 76,
        "num_ids_4": 149
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strlen(\"test\") == 5\nassert     strlen(\"test_test\") == 13\nassert     strlen(\"test_\") == 5\nassert     strlen(\"\") == 0\nassert     strlen(\" \") == 1\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     strlen(test_string) == len(test_string), \\\n        \"Failed: strlen(test_string) = %d, len(test_string) = %d\" % (strlen(test_string), len(test_string))\nprint('strlen passed.')\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\" \") == 1\nassert     strlen(\"hello\") == 6\nassert     strlen(\"hello\\nworld\") == 7\n\ndef fill(string: str, char: str, length: int) -> str:\n    \"\"\" Return string with 'char' inserted to the given length\n    \"\"\"\n    pass\n",
        "num_ids_2": 19,
        "num_ids_4": 42
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert strlen(\"python\") == len(\"python\")\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert strlen('1234') == 4\nassert strlen('a') == 1\n",
        "num_ids_2": 13,
        "num_ids_4": 22
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"abcdef\") == 6\nassert     strlen(\"abcdefg\") == 7\nassert     strlen(\"abcdefgh\") == 7\n",
        "num_ids_2": 19,
        "num_ids_4": 42
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     strlen(\"1234\") == 4\nassert     strlen(\"1234\") == len(\"1234\") == 4\nassert     strlen(\"12345\") == len(\"12345\") == 5\n",
        "num_ids_2": 28,
        "num_ids_4": 45
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     strlen(\"abcd\") == 5\nassert not strlen(\"\")\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     strlen('string') == 13\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strlen(\"hello\") == 5\nassert     strlen(\"\") == 0\nassert     strlen(\" \") == 1\nassert     strlen(\"a\") == 1\nassert     strlen(\"aa\") == 2\n",
        "num_ids_2": 19,
        "num_ids_4": 39
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_divisor(6) == 3\nassert     largest_divisor(28) == 5\nassert     largest_divisor(496) == 11\nassert     largest_divisor(99) == 9\nassert     largest_divisor(72) == 7\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_divisor(12) == 2\nassert largest_divisor(1) == 1\nassert largest_divisor(1234) == 2\nassert largest_divisor(100) == 10\nassert largest_divisor(98765) == 5\n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_divisor(3) == 1, '3'\nassert     largest_divisor(6) == 1, '6'\nassert     largest_divisor(1) == 1, '1'\nassert     largest_divisor(12) == 2, '12'\nassert     largest_divisor(10) == 2, '10'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"\\nTesting largest_divisor\")\n    assert largest_divisor(4) == 2\n    assert largest_divisor(11) == 3\n    assert largest_divisor(25) == 5\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_divisor(4) == 2\nassert     largest_divisor(11) == 3\nassert     largest_divisor(20) == 5\nassert     largest_divisor(16) == 1\nassert     largest_divisor(24) == 6\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(5) == 1\nassert     largest_divisor(10) == 2\nassert     largest_divisor(30) == 3\nassert     largest_divisor(90) == 3\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # driver code\n    for n in range(0, 10):\n        print(f\"{n} : {largest_divisor(n)}\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_divisor(12) == 6\nassert     largest_divisor(14) == 7\nassert     largest_divisor(25) == 5\nassert     largest_divisor(24) == 6\n\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, larger than n\n    \"\"\"\n    pass\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\n\n\n\"\"\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     factorize(4) == [2, 2]\nassert     factorize(25) == [5, 5, 5]\nassert     factorize(36) == [2, 2, 2, 2]\nassert     factorize(100) == [2, 2, 2, 5]\nassert     factorize(27) == [3, 3]\n",
        "num_ids_2": 30,
        "num_ids_4": 66
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     factorize(2) == [2]\nassert     factorize(10) == [2, 2]\nassert     factorize(12) == [2, 2, 3]\nassert     factorize(72) == [2, 2, 2, 3, 3]\nassert     factorize(73) == [2, 3, 2, 3]\n",
        "num_ids_2": 26,
        "num_ids_4": 62
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == []\nassert     factorize(3) == []\nassert     factorize(4) == []\nassert     factorize(9) == []\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     factorize(2) == [[2], [1, 2]]\nassert     factorize(3) == [[3], [1, 3]]\nassert     factorize(4) == [[2], [2, 2], [1, 4]]\nassert     factorize(5) == [[5], [1, 5], [2, 5], [3, 5], [4, 5]]\nassert     factorize(8) == [[2], [2, 2], [2, 2, 2], [1, 8]]\n",
        "num_ids_2": 34,
        "num_ids_4": 88
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     factorize(120) == [2, 2, 2, 3, 3]\nassert     factorize(12) == [2, 2]\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(5) == [2, 2]\n",
        "num_ids_2": 34,
        "num_ids_4": 58
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\"\"\"\nmethod1\n\nfrom math import sqrt\ndef factorize(n: int) -> List[int]:\n    if n <= 0:\n        return []\n    if n == 1:\n        return [n]\n\n    prime_factors = []\n    for i in range(2, int(sqrt(n) + 1)):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n\n    if n > 1:\n        prime_factors.append(n)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     factorize(2) ==     [2]\nassert     factorize(3) ==     [3]\nassert     factorize(4) ==     [2, 2]\nassert     factorize(5) ==     [5]\nassert     factorize(6) ==     [2, 2]\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_duplicates([1,1,2]) == [1,2]\nassert     remove_duplicates([1,2,3]) == [1,2,3]\nassert     remove_duplicates([1,2,3,3,4,4,4,4]) == [1,2,3,4,4,4]\nassert     remove_duplicates([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     remove_duplicates([1,2,3,4,5,5,5,5]) == [1,2,3,4,5,5,5,5]\n",
        "num_ids_2": 44,
        "num_ids_4": 118
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nremove_duplicates([1, 2, 3, 3]) == \n[1, 2, 3]\nremove_duplicates([1, 1, 2, 3, 3]) == \n[1, 2, 3]\nremove_duplicates([1, 1, 2, 3, 3, 4, 4, 5]) == \n[1, 2, 3, 4, 5]\n\ndef multiply_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Multiply all elements in a list. Return the product of the elements.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef build_frequency_table(text: str) -> dict:\n    \"\"\" From a string, create a frequency table that\n    maps a character to its count of occurrences in text.\n    \"\"\"\n    pass\n\n\ndef frequency_table_to_text(frequency_table: dict) -> str:\n    \"\"\" From a frequency table, construct a string which represents\n    the same content as the original text.\n    \"\"\"\n    pass\n\n\ndef create_reverse_frequency_table(frequency_table: dict) -> dict:\n    \"\"\" From a frequency table, create a dictionary of the same form.\n    But in a reverse mapping.\n    \"\"\"\n    pass\n\n\ndef text_to_reverse_frequency_table(text: str) -> dict:\n    \"\"\" From a string, create a frequency table that\n    maps a character to its count of occurrences in text.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"Testing remove_duplicates\")\n\n    assert remove_duplicates([1, 2, 3, 4, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([1, 2, 3, 4, 4, 5]) == [1, 2, 3, 4]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_duplicates([1,1,2,2,3]) == [1,2,3], \"Should remove duplicates with the same value\"\nassert remove_duplicates([1,2,3,4,5]) == [1,2,3,4,5], \"Should not remove duplicates\"\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_duplicates([1, 2, 3, 1, 5, 9, 0, 3]) == [1, 2, 3, 5, 9, 0, 3]\nassert     remove_duplicates([1, 2, 3, 1, 5, 4, 0, 3, 2, 4]) == [1, 2, 3, 5, 4, 0, 3, 2, 4]\nassert     remove_duplicates([1, 2, 3, 1, 5, 4, 0, 3, 2, 4]) == [1, 2, 3, 1, 5, 4, 0, 3, 2, 4]\nassert     remove_duplicates([1, 2, 3, 1, 5, 4, 0, 3, 2, 4]) == [1, 2, 3, 1, 5, 4, 0, 3, 2, 4]\nassert     remove_duplicates([1, 2, 3, 1, 5, 4, 0, 3, 2, 4]) == [1, 2, 3, 1, 5, 4, 0, 3, 2, 4]\n",
        "num_ids_2": 90,
        "num_ids_4": 192
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     flip_case(\"theflip\") == \"TheFlip\"\nassert flip_case(\"Flip\") == \"flip\"\nassert flip_case(\"Flipp\") == \"FlipP\"\nassert flip_case(\"FlipP\") == \"flipP\"\nassert flip_case(\"Flipp\") == \"FlipP\"\n",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"\\n\\n\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\"\"\"\nOther solutions:\n\ndef flip_case(string):\n    return string.swapcase()\n\ndef flip_case(string):\n    return string.upper() + string.lower()\n\ndef flip_case(string):\n    result = \"\"\n    for letter in string:\n        if letter.islower():\n            result += letter.upper()\n        elif letter.isupper():\n            result += letter.lower()\n        else:\n            result += letter\n    return result\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     flip_case('String') == 'STRING'\nassert     flip_case('UPPER') == 'LOWER'\nassert     flip_case('LOWER') == 'UPPER'\nassert     flip_case('welcome') == 'elcomw'\nassert     flip_case('Greetings!') == '!eLcomgRdS'\n",
        "num_ids_2": 31,
        "num_ids_4": 64
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     flip_case('flip case') == \"FliP Case\"\nassert     flip_case('This is a test.') == \"THIS is a test.\"\nassert flip_case('FlipCase') == \"flip case\"\n",
        "num_ids_2": 40,
        "num_ids_4": 56
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef title_case(string: str) -> str:\n    \"\"\"For a given string, return it in title case i.e. words start with uppercase characters.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert flip_case(\"Hello, World!\") == \"hELLO, world!\"\nassert flip_case(\"Hello, World!\") == \"hELLO, world!\"\n",
        "num_ids_2": 22,
        "num_ids_4": 41
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    s = concatenate(['hello', 'world', '!'])\n    print(s)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate([\"hello\", \"\", \"world\"]) == \"hello world\"\nassert     concatenate([\"\", \"\", \"\"]) == \"\"\nassert     concatenate([\"\", \"\"]) == \"\"\nassert     concatenate([]) == \"\"\n\n\ndef is_valid(password: str) -> bool:\n    \"\"\" Determine whether a password is valid based on its length and\n        at least one digit between 0 and 9.\n    \"\"\"\n    pass\n",
        "num_ids_2": 39,
        "num_ids_4": 65
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     concatenate([\"I\", \"like\", \"BANanas\"]) == \"I like BANanas\"\nassert     concatenate([\"I\", \"like\", \"Bananas\", \".\"]) == \"I like Bananas.\"\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert concatenate([]) == \"\"\nassert concatenate([\"\"]) == \"\"\nassert concatenate([\"a\", \"b\"]) == \"ab\"\nassert concatenate([\"a\", \"bc\"]) == \"abc\"\n",
        "num_ids_2": 12,
        "num_ids_4": 40
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     concatenate([]) == \"\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"a\", \"b\"]) == \"a\\nb\"\nassert     concatenate([\"abc\", \"def\"]) == \"abc\\ndef\"\nassert     concatenate([\"a\", \"bc\", \"def\"]) == \"a\\nb\\ndef\"\n",
        "num_ids_2": 24,
        "num_ids_4": 67
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test 1\n    string_1 = \"Hello World\"\n    assert concatenate(string_1) == \"Hello World\"\n\n    # Test 2\n    string_2 = \"Hello World\"\n    assert concatenate(string_2) == \"Hello World\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate(['hello', 'world', '!']) == 'hello world!'\nassert     concatenate(['hello', 'world']) == 'hello world'\nassert     concatenate(['world']) == 'world'\n\ndef get_n_grams(s: str, n: int) -> List[str]:\n    \"\"\" Return a list of strings (n-grams) from string s.\n    \n    A n-gram is a list of length n that contains the previous n-1 elements \n    of the input string.\n    \n    Example:\n    Input: \"cat in the hat\"\n    Output: ['cat', 'in', 'the', 'hat']\n    \n    Reference: https://www.geeksforgeeks.org/python-program-to-print-all-sub-strings-of-a-string/\n    \"\"\"\n    pass\n",
        "num_ids_2": 42,
        "num_ids_4": 58
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    concatenate(['a', 'b', 'c']) == 'abc'\n    concatenate(['x', 'y', 'z']) == 'xyz'\n    concatenate(['aa', 'bb', 'cc']) == 'aaaaabbbbcccc'\n    concatenate(['aaa', 'bbb', 'ccc']) == 'aaaaaabbbbbcccc'\n    concatenate(['aaa', 'bbb', 'ccc']) == 'aaaaaabbbbbcccc'\n    concatenate(['aaa', 'bbb', 'ccc']) == 'aaaaaabbbbbcccc'\n    concatenate(['a', 'bb', 'cc']) == 'aabbcc'\n    concatenate(['x', 'y', 'z']) == 'xyz'\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert list(filter_by_prefix([\"super-hero-tron\", \"spider-man\", \"dragonball-super\"], \"sp\")) == [\"spider-man\", \"dragonball-super\"]\nassert list(filter_by_prefix([\"super-hero-tron\", \"spider-man\", \"dragonball-super\"], \"z\")) == []\nassert list(filter_by_prefix([\"super-hero-tron\", \"spider-man\", \"dragonball-super\"], \"superhero\")) == [\"super-hero-tron\", \"spider-man\", \"dragonball-super\"]\nassert list(filter_by_prefix([\"super-hero-tron\", \"spider-man\", \"dragonball-super\"], \"su\")) == []\n",
        "num_ids_2": 49,
        "num_ids_4": 139
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_prefix([\"one\", \"two\", \"three\"], \"one\") == [\"one\"]\nassert     filter_by_prefix([\"one\", \"two\", \"three\"], \"t\") == []\nassert     filter_by_prefix([\"one\", \"two\", \"three\"], \"two\") == [\"two\"]\nassert     filter_by_prefix([\"one\", \"two\", \"three\"], \"h\") == []\nassert     filter_by_prefix([\"one\", \"two\", \"three\"], \"th\") == []\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_by_prefix([\"a\", \"b\", \"c\"], \"a\") == [\"a\", \"b\", \"c\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\"], \"a\") == [\"a\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"a\") == [\"a\", \"b\", \"c\", \"d\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"f\") == [\"f\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"g\") == []\n",
        "num_ids_2": 59,
        "num_ids_4": 136
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_prefix([\"abc\", \"xyz\", \"efg\", \"hijk\"], \"abc\") == [\"abc\", \"efg\", \"hijk\"]\nassert     filter_by_prefix([\"abc\", \"xyz\", \"efg\", \"hijk\"], \"fgh\") == []\nassert     filter_by_prefix([\"xyz\", \"efg\", \"hijk\"], \"abc\") == []\nassert     filter_by_prefix([\"abc\", \"xyz\", \"efg\", \"hijk\"], \"bcd\") == [\"efg\", \"hijk\"]\nassert     filter_by_prefix([\"abc\", \"xyz\", \"efg\", \"hijk\"], \"bcd\") == [\"efg\", \"hijk\"]\n",
        "num_ids_2": 69,
        "num_ids_4": 132
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfilter_by_prefix([\"foo\", \"bar\", \"foo\"], \"foo\") == [\"foo\"]\nfilter_by_prefix([\"foo\", \"bar\", \"foo\", \"foo\", \"bar\", \"foo\"], \"foo\") == [\"foo\"]\nfilter_by_prefix([\"foo\", \"bar\", \"foo\", \"foo\", \"bar\", \"foo\"], \"foo\", True) == [\"foo\", \"foo\"]\nfilter_by_prefix([\"foo\", \"bar\", \"foo\", \"foo\", \"bar\", \"foo\"], \"foo\", False) == [\"foo\", \"bar\", \"foo\", \"foo\", \"bar\", \"foo\"]\nfilter_by_prefix([], \"foo\") == []\nfilter_by_prefix([], \"foo\", True) == []\nfilter_by_prefix([], \"foo\", False) == []\nfilter_by_prefix([], \"\", True) == []\nfilter_by_prefix([], \"\", False) == []\n\nfilter_by_prefix([\"foo\"], \"foo\") == []\nfilter_by_prefix([\"foo\"], \"foo\", True) == []\nfilter_by_prefix([\"foo\"], \"foo\", False) == []\nfilter_by_prefix([\"foo\"], \"\", True) == []\nfilter_by_prefix([\"foo\"], \"\", False) == []\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert\n\n\ndef filter_by_prefixes(strings: List[str], prefixes: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_by_prefix([\"foo\", \"foo\", \"bar\"], \"fo\") == [\"foo\", \"bar\"]\nassert     filter_by_prefix([\"foo\", \"bar\", \"baz\"], \"f\") == []\nassert     filter_by_prefix([\"foo\", \"foo\", \"bar\"], \"fo\") == [\"foo\"]\nassert     filter_by_prefix([\"foo\", \"foo\", \"bar\", \"foo\", \"foo\"], \"fo\") == [\"foo\"]\n\ndef sort_by_key(strings: List[str], key: str) -> List[str]:\n    \"\"\" Sort an input list of strings based on a key.\n    \"\"\"\n    pass\n",
        "num_ids_2": 52,
        "num_ids_4": 108
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_by_prefix(['a', 'b', 'c'], 'a') == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']\nassert     filter_by_prefix(['a', 'b', 'c'], 'b') == ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']\nassert     filter_by_prefix(['a', 'b', 'c'], 'c') == ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c']\nassert     filter_by_prefix(['a', 'b', 'c'], 'd') == []\n\ndef find_first(strings: List[str], target: str, start: int) -> int:\n    \"\"\" Find the first instance of a target in a list of strings that starts at a given index.\n    \"\"\"\n    pass\n",
        "num_ids_2": 94,
        "num_ids_4": 165
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_by_prefix(['A', 'B', 'C', 'D'], 'A') == ['A', 'B', 'C', 'D'], \"Precondition: filter_by_prefix\"\nassert     filter_by_prefix(['A', 'B', 'C', 'D'], 'B') == ['B', 'C', 'D'], \"Precondition: filter_by_prefix\"\nassert     filter_by_prefix(['A', 'B', 'C', 'D'], 'C') == ['C', 'D'], \"Precondition: filter_by_prefix\"\nassert     filter_by_prefix(['A', 'B', 'C', 'D'], 'D') == ['A', 'B', 'C', 'D'], \"Precondition: filter_by_prefix\"\n",
        "num_ids_2": 95,
        "num_ids_4": 187
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    get_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [1,2,3,4,5,6,7,8,9,10]\n\ndef test_function(test_case):\n    '''Tests the function\n    '''\n    answer = rearrange_digits(test_case[0])\n    if answer == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case_1 = [[1, 2, 3, 4, 5],[531, 42]]\ntest_function(test_case_1)\n\ntest_case_2 = [[4, 6, 2, 5, 9, 8], [964, 852]]\ntest_function(test_case_2",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_positive([0, 1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     get_positive([0, -1, 2, -3, -4]) == [2, -3, -4]\nassert     get_positive([0, -1, 2, -3, -4, -5]) == []\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"\n    return [num for num in l if num > 0]\n",
        "num_ids_2": 57,
        "num_ids_4": 82
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_positive([-1, -2, 3, 4, 5, 7]) == [3, 4, 5, 7], \\\n        get_positive([-1, -2, 3, 4, 5, 7])\nassert     get_positive([-1, -2, 3, 4, 5, 7]) == [-1, 2, 3, 4, 5, 7], \\\n        get_positive([-1, -2, 3, 4, 5, 7])\nassert     get_positive([-1, -2, 3, 4, 5, 7]) == [-1, 2, 3, 4, 5, 7], \\\n        get_positive([-1, -2, 3, 4, 5, 7])\n\n",
        "num_ids_2": 68,
        "num_ids_4": 104
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_positive([-1, 2, -3, 0, -4, 6]) == [-1, 2, 6]\nassert     get_positive([-1, 2, -3, 0, -4, 6, -5]) == [-1, 2, 6]\nassert     get_positive([]) == []\nassert     get_positive([2, 0, -4, 5, -1]) == [2, 0, -4, 5, -1]\nprint(\"get_positive: SUCCESS\")\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 63,
        "num_ids_4": 106
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_positive([]) == []\nassert     get_positive([-10, 0, 9]) == [0, 9]\nassert     get_positive([1, 2, 3, -1]) == [1, 2, 3]",
        "num_ids_2": 30,
        "num_ids_4": 54
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_positive([1, 2, -1, 4, 0, -2]) == [1, 2, 4]\nassert     get_positive([1, -2, 3, 4, 5, 6, -3, -4, -5]) == [1, 4, 5, 6]\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_positive([]) == []\nassert     get_positive([1,2,3,4]) == [1,2,3,4]\nassert     get_positive([1,2,3,-4]) == [1,2,3]\nassert     get_positive([-2,-4,1]) == [1]\n",
        "num_ids_2": 35,
        "num_ids_4": 76
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_positive([3, 4, -5, 1]) == [3, 4, 1]\nassert     get_positive([-5, 4, -3, -1]) == [4, -1]\nassert     get_positive([]) == []\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 49,
        "num_ids_4": 59
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not is_prime(1)\nassert not is_prime(0)\nassert not is_prime(4)\nassert is_prime(5)\n",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_prime(17) == True\nassert     is_prime(18) == False\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_prime(2)         == True\nassert     is_prime(9)         == True\nassert     is_prime(11)         == False\nassert     is_prime(13)         == False\nassert     is_prime(17)         == True\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(6) == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_prime(2) == True, '2 is not prime'\nassert     is_prime(3) == True, '3 is prime'\nassert     is_prime(4) == False, '4 is not prime'\nassert     is_prime(5) == False, '5 is not prime'\nassert     is_prime(6) == False, '6 is prime'\n",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef gcd(a, b):\n    \"\"\"Return the greatest common divisor of a and b.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(5) == False\nassert     is_prime(8) == True\nassert     is_prime(11) == False\nassert     is_prime(13) == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    \n\n\ndef check_if_find_zero_is_correct(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    check_if_find_zero returns True if polynomial with given xs satisfies equation:\n    poly(x) = 0.\n    check_if_find_zero returns False otherwise.\n    \"\"\"\n    return \n\n\ndef find_zeros(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zeros returns two numbers,\n    a0 and a1 such that:\n    poly(a0) = 0,\n    poly(a1) = 0.\n    find_zeros returns two numbers such that:\n    poly(a0) = 0,\n    poly(a1) = 0.\n    \"\"\"\n    assert \n    \n\n\ndef polynomial_solution(xs: list, y: float):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    y is a value.\n    polynomial_solution returns value of y such that:\n    poly(x) = y.\n    polynomial_solution returns 0. if y can not be solved for given xs.\n    polynomial_solution returns None if y can not be solved for given xs.\n    \"\"\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef rk4_step(ys, xs, h):\n    \"\"\"\n    takes as input list of function values at xs(i)\n    and step size h.\n    returns new list ys after one step.\n    \"\"\"\n    k1 = h * f(xs, ys)\n    k2 = h * f(xs + k1/2, ys + k1/2)\n    k3 = h * f(xs + k2/2, ys + k2/2)\n    k4 = h * f(xs + k3, ys + k3)\n\n    return ys + (k1 + 2*k2 + 2*k3 + k4) / 6\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_zero([-1, 0, -2, 2, -3, 1]) == -1.0\nassert \nfind_zero([1, 1, -1, 1, 1]) == 0.0\nassert \nfind_zero([-2, -2, -2, -2, -2, -1, -1, -1, 1, 1, 1, 1, 1]) == 0.0\n\n\ndef find_zero_via_newton_raphson(xs: list, tolerance=0.00001):\n    \"\"\"\n    TODO: implement this method.\n    Find zero using Newton-Raphson method.\n    find_zero_via_newton_raphson(xs, tolerance) -> float\n    x = x0 - (f(x0) - f(x0-1)) / (f(x0-1) - f(x0))\n    where x0 = 0 and tolerance = epsilon\n    (f(x) = 0)\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     poly([1,2,3], 1) == 0, \"Wrong value\"\nassert     poly([1,2,3], 2) == 0, \"Wrong value\"\nassert     poly([1,2,3], 3) == 0, \"Wrong value\"\nassert     poly([1,2,3], 4) == 0, \"Wrong value\"\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef find_all_zeros(xs: list):\n    \"\"\"\n    find_all_zeros finds all zero points of polynomial.\n    find_all_zeros returns a list of tuples where each tuple is\n    a point on the curve, such as (1, -1, 1, -2, 2, 3, 3,...)\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef find_roots(xs: list, x_0: float, tolerance: float = 1e-10):\n    \"\"\" xs are coefficients of a polynomial.\n    find_roots find roots for xs of polynomial\n    with coefficients xs, given x_0.\n    tolerance is required, to determine if a root is found or not.\n    This algorithm assumes that a solution exists.\n    return a list of roots and their indices,\n    for example, if roots are -1 and 0,\n    then the list returned would be [(0, -1), (0, 0)]\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_third([1, 3, 4, 6, 8, 9, 11, 15]) == sorted([3, 1, 4, 6, 8, 9, 11, 15])\nassert     sort_third([1, 5, 3, 7, 9]) == sorted([1, 3, 5, 7, 9])\nassert     sort_third([0, 6, 3, 12, 15]) == sorted([0, 3, 6, 12, 15])\nassert     sort_third([1, 7, 3, 9]) == sorted([1, 3, 7, 9])\nassert     sort_third([0, 8, 3, 12, 15]) == sorted([0, 3, 8, 12, 15])\n",
        "num_ids_2": 72,
        "num_ids_4": 128
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         sort_third([2, 6, 7, 0, 2, 8, 9]) == None\nassert         sort_third([2, 6, 7, 0, 2, 8, 9]) == None\nassert         sort_third([2, 6, 7, 0, 2, 8, 9]) == None\nassert         sort_third([2, 6, 7, 0, 2, 8, 9]) == None\nassert         sort_third([2, 6, 7, 0, 2, 8, 9]) == None\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_third([2,3,4,1,2,3]) == [1,2,2,2,3,3,4], \"Test 1 failed\"\nassert     sort_third([2,3,1,2,3]) == [1,2,1,2,3], \"Test 2 failed\"\nassert     sort_third([2,3,4]) == [2,2,3,4], \"Test 3 failed\"\nassert     sort_third([1]) == [1], \"Test 4 failed\"\nassert     sort_third([]) == [], \"Test 5 failed\"\n",
        "num_ids_2": 74,
        "num_ids_4": 120
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_third([10, 5, 2, 3, 4, 1]) == [10, 2, 3, 4, 1, 5], \"Error in sort_third\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_third([4, 2, 3, 2, 4, 1, 6, 1, 5, 7, 7, 3]) == [1, 2, 3, 4, 5, 4, 6, 7, 7, 1, 2, 3]\nassert     sort_third([3, 1, 2, 2, 1, 3]) == [1, 1, 2, 2, 3, 3]\nassert     sort_third([1, 2, 2, 2, 2, 1]) == [1, 1, 1, 2, 2, 2]\nassert     sort_third([2, 2, 2, 1, 1, 1]) == [1, 1, 1, 2, 2, 2]\nassert     sort_third([3, 3, 3]) == [3, 3, 3]\n",
        "num_ids_2": 90,
        "num_ids_4": 156
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_third([2, 3, 4, 5]) == [-1, 0, 1, 2, 3, 4, 5], \"Wrong answer\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_third([0,1,2,3,4]) ==     [0,1,2,3,4]\nassert     sort_third([1,3,2,4,0]) ==     [0,1,2,3,4]\nassert     sort_third([1,2,3,4,0]) ==     [0,1,2,3,4]\nassert     sort_third([1,1,3,4,0]) ==     [0,1,1,3,4]\nassert     sort_third([1,2,1,4,0]) ==     [0,1,1,2,4]\n",
        "num_ids_2": 60,
        "num_ids_4": 120
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sort_third_v2(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    This algorithm uses an extra list, named 'third', to avoid creating a new list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique([2, 3, 1, 3, 3]) == [1, 2, 3]\nassert     unique([2, 3, 1, 3, 3, 3, 3]) == [1, 2, 3]\nassert     unique([1, 1, 1, 1]) == [1]\nassert     unique(['a', 'a', 'a', 'a']) == ['a']\nassert     unique([1,2,3,4,5]) == [1,2,3,4,5]\n",
        "num_ids_2": 50,
        "num_ids_4": 89
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique([3,4,3,3,5]) == [3,4,5]\nassert     unique([3,4,4,3,5]) == [3,4,4,5]\nassert     unique([3,4,5,3,4]) == [3,4,5]\nassert     unique([]) == []\nassert     unique([1,1,1,2]) == [1,2]\n",
        "num_ids_2": 48,
        "num_ids_4": 79
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique([1, 2, 3, 1, 4, 5, 1]) == sorted([1, 2, 3, 4, 5])\nassert     unique([1, 2, 3, 1, 4, 5, 1, 1]) == sorted([1, 2, 3, 4, 5])\nassert     unique([]) == []\n\n\ndef count_occurrences(l: list, v: int) -> int:\n    \"\"\"Return number of occurrences of a value in a list\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 66,
        "num_ids_4": 74
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert unique([1,2,3,4]) == [1,2,3,4]\nassert unique([]) == []\n",
        "num_ids_2": 25,
        "num_ids_4": 32
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef reverse(l: list):\n    \"\"\"Return a copy of list in reverse order\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique(['A', 'A', 'B', 'B', 'C']) == ['A', 'B', 'C']\nassert     unique([]) == []\nassert     unique([]) == []\nassert     unique([1, 1, 1, 1, 2, 3]) == [1, 2, 3]\n",
        "num_ids_2": 39,
        "num_ids_4": 72
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique([]) == []\nassert     unique([1,2,3]) == [1,2,3]\nassert     unique(['a','b','c','a','d']) == ['a','b','c','d']\nassert     unique([\"A\",\"a\",\"B\",\"a\",\"C\",\"a\",\"D\",\"a\",\"D\",\"a\"]) == ['A','B','C','D']\n",
        "num_ids_2": 27,
        "num_ids_4": 91
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique([1, 2, 3, 2, 1]) == sorted([1, 2, 3])\nassert unique([1, 2, 3, 4, 5]) == sorted([1, 2, 3, 4, 5])\nassert unique([1, 1, 1, 1]) == sorted([1])\nassert unique([]) == []\nassert unique([1]) == [1]\n",
        "num_ids_2": 51,
        "num_ids_4": 75
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_element([1,2,4]) == 4, \"Wrong max element\"\nassert     max_element([4,3,2,1]) == 4, \"Wrong max element\"\nassert     max_element([4,3,2,1,5]) == 5, \"Wrong max element\"\nassert     max_element([4,3,2,1,5,6]) == 6, \"Wrong max element\"\nassert     max_element([4,3,2,1,5,6,7]) == 7, \"Wrong max element\"\n",
        "num_ids_2": 46,
        "num_ids_4": 100
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_element([0, -2, 3, -5, 8, 10]) == 10\nassert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([]) == None\nassert     max_element([-1]) == None\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 42,
        "num_ids_4": 64
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_element([1, 2, 3, 4]) == 4\nassert     max_element([1, 2, -3, 4]) == 4\nassert     max_element([1, -2, -3, 4]) == 4\nassert     max_element([-1, -2, -3, -4]) == -1\n",
        "num_ids_2": 35,
        "num_ids_4": 76
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    \"\"\"\n    if not l:\n        return None\n\n    # largest = l[0]\n    # for element in l:\n    #     if element > largest:\n    #         largest = element\n\n    return max(l)\n\n\nif __name__ == '__main__':\n    l = []\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert max_element([1, -3, 4, -6, 8]) == 8\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(fizz_buzz(10))\n    print(fizz_buzz(100))\n    print(fizz_buzz(1000))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fizz_buzz(0) == 0\nassert     fizz_buzz(3) == 0\nassert     fizz_buzz(5) == 0\nassert     fizz_buzz(6) == 1\nassert     fizz_buzz(20) == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fizz_buzz(15) == 3\nassert     fizz_buzz(16) == 1\nassert     fizz_buzz(20) == 3\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fizz_buzz(15) == fizz_buzz(16) == fizz_buzz(17) == 3\nassert     fizz_buzz(0) == 0\nassert     fizz_buzz(13) == 2\nassert     fizz_buzz(25) == 4\nassert     fizz_buzz(30) == 4\n",
        "num_ids_2": 44,
        "num_ids_4": 70
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fizz_buzz(100) ==     5\nassert     fizz_buzz(70) ==     1\nassert     fizz_buzz(43) ==     1\nassert     fizz_buzz(23) ==     2\nassert     fizz_buzz(5) ==     1\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_even(list(range(1, 11))) == [[2, 4, 6, 8, 10], 1, 3, 5, 7, 9]\n",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nsort_even([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert sort_even([1,2,3,4,6,7,9]) == [1,2,3,4,6,7,9]\nassert sort_even([0,2,4,6,8,10]) == [0,2,4,6,8,10]\nassert sort_even([0,2,4,6,8,10,12]) == [0,2,4,6,8,10,12]\n",
        "num_ids_2": 39,
        "num_ids_4": 107
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_even([3, 4, 5, 6, 7, 8, 9]) == [3, 4, 5, 5, 6, 7, 8, 8]\nassert sort_even([3, 4, 5, 6, 7, 8, 9]) == sort_even([3, 4, 5, 5, 6, 7, 8, 8])\nassert     sort_even([5, 4, 3, 2, 1]) == [1, 2, 3, 3, 4]\nassert sort_even([5, 4, 3, 2, 1]) == sort_even([3, 2, 1, 1, 4])\nassert     sort_even([5, 4, 3, 2, 1]) == sort_even([3, 2, 1, 1, 4])\n",
        "num_ids_2": 80,
        "num_ids_4": 140
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_even([1,3,5,7,9,11,13,15,17,19]) == [1,3,11,13,15,17,19,9,7,5,3]\nassert     sort_even([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n",
        "num_ids_2": 100,
        "num_ids_4": 100
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_even([]) == []\nassert sort_even([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert sort_even([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7, 2, 4, 6]\nassert sort_even([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7, 2, 4, 6, 8]\n",
        "num_ids_2": 38,
        "num_ids_4": 114
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_even(numbers) == numbers\nassert     sort_even(numbers[::2]) == numbers[::2]\nassert     sort_even(numbers[1::2]) == numbers[1::2]\nassert     sort_even(numbers[::-1]) == numbers[::-1]\n",
        "num_ids_2": 31,
        "num_ids_4": 73
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sort_even([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert sort_even([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n",
        "num_ids_2": 31,
        "num_ids_4": 59
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     encode_cyclic(\"\") == \"\"\nassert    encode_cyclic(\"abc\") == \"abc\"\nassert    encode_cyclic(\"abcd\") == \"abcd\"\nassert    encode_cyclic(\"ABCD\") == \"ABCD\"\nassert    encode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n",
        "num_ids_2": 27,
        "num_ids_4": 61
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decode_cyclic(\"bxwxw\") == \"bwxbwxw\"\nassert     decode_cyclic(\"bwxbwxw\") == \"bwxwxbwxw\"\nassert     decode_cyclic(\"bwxwxbwxw\") == \"bwxwxbwxw\"\nassert     decode_cyclic(\"bwxwxbwxw\") == \"bwxwxbwxw\"\nassert     decode_cyclic(\"bwxwbwxw\") == \"bwxbwxw\"\n",
        "num_ids_2": 46,
        "num_ids_4": 96
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decode_cyclic(encode_cyclic(\"A\")) == \"A\"\nassert     decode_cyclic(encode_cyclic(\"ABBA\")) == \"ABBA\"\nassert     decode_cyclic(encode_cyclic(\"ABABA\")) == \"ABBA\"\nassert     decode_cyclic(encode_cyclic(\"ABABABA\")) == \"ABBA\"\nassert     decode_cyclic(encode_cyclic
        "num_ids_2": 44,
        "num_ids_4": 93
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(encode_cyclic(\"abc\"))\n    print(decode_cyclic(\"dacab\"))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     encode_cyclic(\"abc\") == \"cba\"\nassert     encode_cyclic(\"pqr\") == \"qpr\"\nassert     encode_cyclic(\"tuv\") == \"uvut\"\nassert     encode_cyclic(\"fgh\") == \"fghf\"\nassert     encode_cyclic(\"ae\") == \"ea\"\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (encode_cyclic(\"ABCDEF\") == \"ABCDEF\")\nassert     (encode_cyclic(\"ABABAB\") == \"ABABAB\")\nassert     (encode_cyclic(\"ABABABAB\") == \"ABABABABAB\")\nassert     (encode_cyclic
        "num_ids_2": 40,
        "num_ids_4": 1023
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encode_cyclic(\"abbc\") == \"abbac\"\nassert     decode_cyclic(\"abbac\") == \"abbc\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prime_fib(0) == 1, \"Prime fibonacci number should be 1\"\nassert     prime_fib(1) == 2, \"Prime fibonacci number should be 2\"\nassert prime_fib(2) == 3, \"Prime fibonacci number should be 3\"\nassert prime_fib(3) == 5, \"Prime fibonacci number should be 5\"\nassert prime_fib(4) == 7, \"Prime fibonacci number should be 7\"\n",
        "num_ids_2": 46,
        "num_ids_4": 90
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     prime_fib(10) == 3\nassert     prime_fib(100) == 29\nassert     prime_fib(1000) == 59\nassert     prime_fib(10000) == 1201\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prime_fib(3) == 5\nassert prime_fib(4) == 7\nassert prime_fib(13) == 89\n\nprint(prime_fib.__doc__)",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprime_fib(10) == 34\nprime_fib(15) == 34\nprime_fib(20) == 46\nprime_fib(25) == 46\nprime_fib(30) == 62\nprime_fib(35) == 62\nprime_fib(40) == 68\nprime_fib(45) == 68\nprime_fib(50) == 82\nprime_fib(55) == 82\nprime_fib(60) == 100\nprime_fib(65) == 100\nprime_fib(70) == 114\nprime_fib(75) == 114\nprime_fib(80) == 128\nprime_fib(85) == 128\nprime_fib(90) == 138\nprime_fib(95) == 138\nprime_fib(100) == 196\nprime_fib(105) == 196\nprime_fib(110) == 230\nprime_fib(115) == 230\nprime_fib(120) == 262\nprime_fib(125) == 262\nprime_fib(130) == 394\nprime_fib(135) == 394\nprime_fib(140) == 468\nprime_fib(145) == 468\nprime_fib(150) == 626\nprime_fib(155) == 626\nprime_fib(160) == 724\nprime_fib(165) == 724\nprime_fib(170) == 824\nprime_fib(175) == 824\nprime_fib(180) == 996\nprime_fib(185) == 996\nprime_fib(190) == 1082\nprime_fib(195) == 1082\nprime_fib(200) == 1272\nprime_fib(205) == 1272\nprime_fib(210) == 1636\nprime_fib(215) == 1636\nprime_fib(220) == 2240\nprime_fib(225) == 2240\nprime_fib(230) == 2712\nprime_fib(235) == 2712\nprime_fib(240) == 3104\nprime_fib(245) == 3104\nprime_fib(250) == 3888\nprime_fib(255) == 3888\nprime_fib(260) == 4776\nprime_fib(265) == 4776\nprime_fib(270) == 5832\nprime_fib(275) == 5832\nprime_fib(280) == 6656\nprime_fib(285) == 6656\nprime_fib(290) == 7392\nprime_fib(295) == 7392\nprime_fib(300) == 8160\nprime_fib(305) == 8160\nprime_fib(310) == 8768\nprime_fib(315) == 8768\nprime_fib(320) == 9456\nprime_fib(325) == 9456\nprime_fib(330) == 10232\nprime_fib(335) == 10232\nprime_fib(340) == 11264\nprime_fib(345) == 11264\nprime_fib(350) == 12288\nprime_fib(355) == 12288\nprime_fib(360) == 14592\nprime_fib(365) == 14592\nprime_fib(370) == 17504\nprime_fib(375) == 17504\nprime_fib(380) == 20480\nprime_fib(385) == 20480\nprime_fib(390) == 23008\nprime_fib(395) == 23008\nprime_fib(400) == 27024\nprime_fib(405) == 27024\nprime_fib(410) == 31536\nprime_fib(415) == 31536\nprime_fib(420) == 36880\nprime_fib(425) == 36880\nprime_fib(430) == 43976\nprime_fib(435) == 43976\nprime_fib(440) == 47648\nprime_fib(445) == 47648\nprime_fib(450) == 53744\nprime_fib(455) == 53744\nprime_fib(460) == 57440\nprime_fib(465) == 57440\nprime_fib(470) == 58784\nprime_fib(475) == 58784\nprime_fib(480",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prime_fib(1) ==  2\nassert     prime_fib(2) ==  3\nassert     prime_fib(3) ==  5\nassert     prime_fib(4) ==  7\nassert     prime_fib(5) == 11\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprime_fib(2) == 3\nprime_fib(3) == 5\nprime_fib(4) == 7\nprime_fib(5) == 11\nprime_fib(6) == 13\nprime_fib(7) == 17\nprime_fib(8) == 19\nprime_fib(9) == 23\nprime_fib(10) == 29\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 11\nassert     prime_fib(5) == 13\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     triples_sum_to_zero([1,2,-3,4,6]) == True\nassert     triples_sum_to_zero([1,3,2,-2,7]) == False\nassert     triples_sum_to_zero([1,2,3,4,5]) == True\nassert     triples_sum_to_zero([1,-2,3,4,5]) == False\nassert     triples_sum_to_zero([1,-1,-1,4,5]) == False\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([-3,0,1,2,-2,-4]) == True\nassert     triples_sum_to_zero([1,2,3,4,5]) == False\nassert     triples_sum_to_zero([-3,-4,-2,1,2]) == False\nassert     triples_sum_to_zero([1,2,3]) == True\nassert     triples_sum_to_zero([0,2,3,5,7]) == True\n",
        "num_ids_2": 51,
        "num_ids_4": 96
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"There are \" + str(triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -3, 10, 0, 1, 2])) + \" triples\")\nprint(\"There are \" + str(triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -3, 10, 0, 1, 2, -5])) + \" triples\")\nprint(\"There are \" + str(triples_sum_to_zero([1, 2])) + \" triples\")\nprint(\"There are \" + str(triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -3, 10, 0, 1, 2, -5])) + \" triples\")\nprint(\"There are \" + str(triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -3, 10, 0, 1, 2])) + \" triples\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([-3, 0, 1, 2, -1, 1, -2]) is True\nassert     triples_sum_to_zero([0, 0, 0]) is False\nassert     triples_sum_to_zero([-1, -2, -3]) is False\n",
        "num_ids_2": 51,
        "num_ids_4": 74
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([3, -3, 2, 4, -7, 8]) == True\nassert     triples_sum_to_zero([1, -1, 1, 1]) == True\nassert     triples_sum_to_zero([0, -1, -2, -3, 4]) == False\nassert     triples_sum_to_zero([-3, -1, -1, -2]) == False\n",
        "num_ids_2": 51,
        "num_ids_4": 104
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([-3,0,1,-2,1,2]) == True\nassert     triples_sum_to_zero([1,2,3]) == False\nassert     triples_sum_to_zero([1,-2,-3]) == False\nassert     triples_sum_to_zero([1,2,-3]) == False\nassert     triples_sum_to_zero([1,-2,3]) == True\n",
        "num_ids_2": 47,
        "num_ids_4": 87
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([-1,-2,-3,4]) == True\nassert     triples_sum_to_zero([-2,-3,-4,4]) == True\nassert     triples_sum_to_zero([-2,-3,-4,-4]) == False\nassert     triples_sum_to_zero([-2,-3,-4,-5]) == False\nassert     triples_sum_to_zero([-2,-3,-4]) == False\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    for i in range(1,6):\n        print(f\"{i} cars:\")\n        car_race_collision(i)\n        print(",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     car_race_collision(0) == 0\nassert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert car_race_collision(3) == 0\nassert car_race_collision(4) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 55
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 3\nassert     car_race_collision(10) == 6\nassert     car_race_collision(20) == 19\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     car_race_collision(2) == 0, \"correctness\"\nassert car_race_collision(3) == 1, \"correctness\"\nassert car_race_collision(4) == 2, \"correctness\"\nassert car_race_collision(5) == 3, \"correctness\"\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef car_race_time(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinite line, where the first car\n    arrives immediately from the left.  It's the only car that makes the first\n    movement.  The rest of the cars have no time to make any moves.  They all move\n    in the same direction and each makes one of the same number of moves.  The car\n    that makes the first move is the only car that makes any move.\n\n    This function outputs the total number of cars that make the first move.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     car_race_collision(1) == 0, \\\n    \"car_race_collision should return 0.\"\nassert car_race_collision(2) == 0, \\\n    \"car_race_collision should return 0.\"\nassert car_race_collision(3) == 1, \\\n    \"car_race_collision should return 1.\"\nassert car_race_collision(4) == 1, \\\n    \"car_race_collision should return 1.\"\nassert car_race_collision(5) == 2, \\\n    \"car_race_collision should return 2.\"\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     car_race_collision(1) == 0, \"car_race_collision should be 0 for an even number of cars\"\nassert     car_race_collision(2) == 1, \"car_race_collision should be 1 for an odd number of cars\"\nassert     car_race_collision(3) == 2, \"car_race_collision should be 2 for an even number of cars\"\n",
        "num_ids_2": 64,
        "num_ids_4": 96
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 2\nassert     car_race_collision(4) == 3\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     incr_list([0, 1, 2]) == [1, 2, 3]\nassert     incr_list([3, 4, 5]) == [4, 5, 6]\nassert     incr_list([6, 7, 8]) == [7, 8, 9]\n",
        "num_ids_2": 44,
        "num_ids_4": 66
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     incr_list([0, 1, 2, 3]) == [1, 2, 3, 4], 'incr_list failed'\nprint('incr_list check passed')\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     incr_list([1, 2]) == [1, 3], \"incr_list\"\nassert     incr_list([]) == [], \"incr_list\"\nassert     incr_list([1]) == [2], \"incr_list\"\n\n",
        "num_ids_2": 42,
        "num_ids_4": 62
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([3]) == [4]\nassert     incr_list([3, 4]) == [4, 5]\nassert     incr_list([3, 4, 5]) == [4, 5, 6]\n\ndef int_array_sums(l: list):\n    \"\"\"Return list of sums of the elements of the array.\n    \"\"\"\n    pass\n",
        "num_ids_2": 25,
        "num_ids_4": 65
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     incr_list(l) == [1,2,3,4,5]\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6]\nprint(\"All tests passed\")",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4]\nassert incr_list([1,2,3]) == [2,3,4]\nassert incr_list([]) == []\nassert incr_list([1]) == [2]\nassert incr_list([1,2]) == [3]\n",
        "num_ids_2": 43,
        "num_ids_4": 66
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([1, -2, 0]) == True\nassert     pairs_sum_to_zero([1, -1, 0]) == False\nassert     pairs_sum_to_zero([1, 2, 0]) == False\nassert     pairs_sum_to_zero([0, -1, 0]) == True\nassert     pairs_sum_to_zero([-1, -1, 0]) == True\n",
        "num_ids_2": 42,
        "num_ids_4": 83
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([-2,-1,-2,-3,-4]) == True\nassert     pairs_sum_to_zero([-5,-4,-3,-2,-1]) == False\nassert     pairs_sum_to_zero([1,2,3,4,5]) == False\nassert     pairs_sum_to_zero([1,-2,-3,-4,-5]) == False\nassert     pairs_sum_to_zero([1,2,3,4,5,6]) == True\n",
        "num_ids_2": 50,
        "num_ids_4": 98
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\npairs_sum_to_zero([0, -2, -1, 1, 2]) == True\npairs_sum_to_zero([0, 1, 2]) == False\npairs_sum_to_zero([0, 1, 2, 1, 1, 1]) == False\npairs_sum_to_zero([-1, -1]) == True\npairs_sum_to_zero([0, -1]) == True\npairs_sum_to_zero([1, 1]) == True\npairs_sum_to_zero([1, 1, -1]) == True\npairs_sum_to_zero([-1, -1, -1]) == False\npairs_sum_to_zero([-1, 0, 0, 0, 0]) == True\npairs_sum_to_zero([0, 0, 0, 0, 0, 0]) == False",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert pairs_sum_to_zero([3, 4, 5, -3]) == True\nassert pairs_sum_to_zero([3, 4, 5, -3, 1]) == True\nassert pairs_sum_to_zero([-3, 5]) == True\nassert pairs_sum_to_zero([1, 2, 3, 4, 5]) == True\n",
        "num_ids_2": 24,
        "num_ids_4": 64
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([-1, 0, 1, 2, -1, -4]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4]) == False\nassert pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, -1]) == True\nassert pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, -1, -3]) == True\n",
        "num_ids_2": 51,
        "num_ids_4": 110
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not pairs_sum_to_zero([])\nassert pairs_sum_to_zero([-5, -2, -4])\nassert pairs_sum_to_zero([-5, -2, -4, -3])\nassert not pairs_sum_to_zero([-5, -2, -4, -3, -4])\n",
        "num_ids_2": 15,
        "num_ids_4": 56
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    change_base(3, 2) == \"31\", \"Incorrect conversion\"\n\nassert change_base(3, 8) == \"173\", \"Incorrect conversion\"\nassert change_base(3, 16) == \"735\", \"Incorrect conversion\"\n\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(change_base(8, 2)) # \"64\"\nprint(change_base(8, 3)) # \"11\"\nprint(change_base(10, 2)) # \"9\"\nprint(change_base(9, 2)) # \"99\"\nprint(change_base(10, 3)) # \"101\"\n\nprint('==========================')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_base(21, 2) == '12'\nassert change_base(10, 3) == '3'\nassert change_base(33, 4) == '33'\n",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_base(10, 2) == '1010', 'incorrect base'\nassert     change_base(10, 8) == '10100', 'incorrect base'\nassert     change_base(10, 16) == '10100', 'incorrect base'\nassert     change_base(10, 32) == '10100', 'incorrect base'\nassert     change_base(10, 64) == '10100', 'incorrect base'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     change_base(10, 2) == '1010'\nassert     change_base(10, 3) == '1101'\nassert     change_base(10, 4) == '1111'\nassert     change_base(10, 5) == '1001'\nassert     change_base(10, 6) == '1011'\n",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_base(4, 5) == \"12\"\nassert     change_base(8, 2) == \"10\"\nassert     change_base(14, 2) == \"12\"\nassert     change_base(10, 5) == \"5\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_base(125, 2) == '1001', 'failed'\nassert     change_base(125, 8) == '936', 'failed'\nassert     change_base(125, 10) == '25', 'failed'\nassert     change_base(125, 16) == '01f', 'failed'\nassert     change_base(125, 2) == '001', 'failed'\n",
        "num_ids_2": 37,
        "num_ids_4": 74
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(1, 1) == 0\nassert     triangle_area(2, 1) == 1.5\nassert     triangle_area(3, 4) == 2.5\n",
        "num_ids_2": 30,
        "num_ids_4": 46
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(triangle_area(1, 2))\nprint(triangle_area(4, 5))\nprint(triangle_area(4, 6))\nprint(triangle_area(4, 7))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(1, 2) == 1.5\nassert     triangle_area(1, 1) == 1\nassert     triangle_area(2, 1) == 1.5\nassert     triangle_area(2, 2) == 2\n\nprint(\"You are passed!\"",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    triangle_area(5, 10)\n    assert triangle_area(5, 10) == 5*5\n    \n    triangle_area(5, 5)\n    assert triangle_area(5, 5) == 5*(5/2)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ntriangle_area(1, 2) == 1.5",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef square_area(a):\n    \"\"\"Given a length return area for a square.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert triangle_area(1, 1) == 1.0\nassert triangle_area(2, 2) == 1.5\nassert triangle_area(3, 4) == 5\nassert triangle_area(4, 5) == 4.5\n",
        "num_ids_2": 17,
        "num_ids_4": 43
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef test_fib4():\n    assert fib4(0) == 0\n    assert fib4(1) == 0\n    assert fib4(2) == 1\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fib4(10) == 8\nassert     fib4(6) == 7\nassert     fib4(2) == 0\nassert     fib4(1) == 0\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(3) -> 2\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5) + fib5(n-6) + fib5(n-7) + fib5(n-8) + fib5(n-9).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(5) == 5\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 2\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5\nassert median([1, 1, 1, 1, 1, 1, 1]) == 1\nassert median([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert median([1, 2, 3, 4, 5]) == 2\n",
        "num_ids_2": 48,
        "num_ids_4": 98
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     median([]) == 0\nassert     median([1]) == 1\nassert     median([1, 2]) == 1.5\nassert     median([1, 2, 3]) == 2\nassert     median([1, 2, 3, 4, 5]) == 2.5\n",
        "num_ids_2": 19,
        "num_ids_4": 47
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert _____, \"Wrong\"\n\nassert median([1,2,3]) == 2\nassert median([1,2,2,3]) == 2.5\nassert median([1,2,2,2,3]) == 2.5\n",
        "num_ids_2": 21,
        "num_ids_4": 55
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    \"\"\"\n    pass\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef modus(l: list, mod: int):\n    \"\"\"Return the modus (mode) of a list of integers.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert _____ == median(__)\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_palindrome('aabcd') == True, \"Not a palindrome\"\nassert     is_palindrome('a') == True, \"Not a palindrome\"\nassert     is_palindrome('ab') == False, \"Not a palindrome\"\nassert     is_palindrome('abcd') == False, \"Not a palindrome\"\nassert     is_palindrome('aabcdcba') == True, \"Not a palindrome\"\n",
        "num_ids_2": 44,
        "num_ids_4": 87
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_palindrome(\"hannah\") == True\nassert is_palindrome(\"robert\") == False\nassert is_palindrome(\"deer\") == False\nassert is_palindrome(\"robert\") == True\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_palindrome(\"abba\") == True, \"It is not palindrome\"\nassert     is_palindrome(\"a\") == True, \"It is not palindrome\"\nassert     is_palindrome(\"\") == True, \"It is not palindrome\"\nassert     is_palindrome(\"ab\") == False, \"It is palindrome\"\nassert     is_palindrome(\"A\") == False, \"It is palindrome\"\n",
        "num_ids_2": 44,
        "num_ids_4": 86
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_palindrome(\"\") == True\nassert     is_palindrome(\"a\") == False\nassert     is_palindrome(\"ab\") == False\nassert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"racecar\") == True\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    # prompt user for input\n    text = input('Enter a word or sentence: ')\n    # check if the user input is a palindrome\n    if is_palindrome(text):\n        print(f'{text} is a palindrome')\n    else:\n        print(f'{text} is not a palindrome'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef palindrome_test():\n    \"\"\"\n    Tests is_palindrome function\n    \"\"\"\n    assert is_palindrome(palindrome('aba'))\n    assert is_palindrome(palindrome('abc'))\n    assert is_palindrome(palindrome('eba'))\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_palindrome(\"A man, a plan, a canal: Panama\") == True, \"failed\"\nassert is_palindrome(\"race a car\") == False, \"failed\"\nassert is_palindrome(\"\") == True, \"failed\"\nassert is_palindrome(\"0\") == False, \"failed\"\n",
        "num_ids_2": 28,
        "num_ids_4": 61
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_palindrome(\"a\") == False\nassert     is_palindrome(\"A\") == False\nassert     is_palindrome(\"abccba\") == False\nassert     is_palindrome(\"\") == True\nassert     is_palindrome(\"-a\") == True\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     modp(2, 3) == 1\nassert     modp(5, 7) == 1\nassert     modp(6, 3) == 1\nassert     modp(6, 7) == 0\nassert     modp(3, 3) == 0\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef quicksort(xs: list, fn=sorted):\n    \"\"\"Sort xs in place.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     modp(2, 5) == 2\nassert     modp(0, 5) == 0\nassert     modp(7, 5) == 3\nassert     modp(3, 5) == 0\nassert     modp(2, 1) == 0\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_modp():\n    for i in range(3):\n        print(\"Testing modp with\",i,\".\",end='')\n        assert modp(i,10)==i%10\n        assert modp(i,100)==i%100\n        assert modp(i,1000)==i%1000\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \n\ndef my_function(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p.\n    \"\"\"\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not modp(3, 9) == modp(10, 2)\n\nprint(\"modp: \", modp(3, 9))\nprint(\"modp: \", modp(10, 2))\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef encode_rot13(s: str):\n    \"\"\"\n    takes as input a string. Returns encoded string by shifting every character by 13 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 13 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_rot13(s: str):\n    \"\"\"\n    takes as input string encoded with encode_rot13 function. Returns decoded string.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    #print(encode_shift(\"abc\"))\n    #print(encode_shift(\"xyz\"))\n    #print(encode_shift(\"ABCDEF\"))\n    #print(encode_shift(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n    #print(encode_shift(\"abc\"))\n    #print(encode_shift(\"abcdefghijklmnopqrstuvwxyz\"))\n    #print(encode_shift(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n    #print(encode_shift(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"))\n    #print(encode_shift(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"))\n    #print(encode_rot13(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"))\n    #print(encode_rot13(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"))\n    #print(encode_rot13(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"))\n    #print(encode_rot13(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"))\n    #print(encode_rot13(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLM",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decode_shift(\"afd\") == \"afd\"\nassert     decode_shift(\"afq\") == \"afq\"\nassert     decode_shift(\"aaw\") == \"aaw\"\nassert     decode_shift(\"abv\") == \"abv\"\nassert     decode_shift(\"abc\") == \"abc\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\"\"\"\ninput_str: \"a\"\noutput_str: \"z\"\n\ninput_str: \"e\"\noutput_str: \"a\"\n\ninput_str: \"h\"\noutput_str: \"l\"\n\ninput_str: \"o\"\noutput_str: \"t\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     encode_shift(\"\") == \"\"\nassert    encode_shift(\"a\") == \"a\"\nassert    encode_shift(\"abc\") == \"bcd\"\nassert    encode_shift(\"abcd\") == \"bcde\"\nassert    encode_shift(\"ABCD\") == \"BCDE\"\n",
        "num_ids_2": 25,
        "num_ids_4": 56
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encode_shift(decode_shift(\"h\")) == \"h\"\nassert     encode_shift(decode_shift(\"i\")) == \"i\"\nassert     encode_shift(decode_shift(\"j\")) == \"j\"\nassert     encode_shift(decode_shift(\"k\")) == \"k\"\nassert     encode_shift(decode_shift(\"l\")) == \"l\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decode_shift(\"qazxcvbnm\") == \"qazxswedcvbnm\"\nassert decode_shift(\"sntrguhkbfhxw\") == \"snxvrghkftxq\"\nassert decode_shift(\"arzrfgwvfr\") == \"atrzvwfrgx\"\n",
        "num_ids_2": 54,
        "num_ids_4": 79
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ns = \"qwert\"\nassert encode_shift(s) == \"davh\"\nassert decode_shift(encode_shift(s)) == s",
        "num_ids_2": 17,
        "num_ids_4": 32
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_vowels('ab,cd,ef,gh,ij,kl,mn,op,qr,st,uv,xy,z') == 'abcdefghijklmnopqrstuvwxyz'\nassert     remove_vowels('The quick brown fox jumps over the lazy dog') == 'Thqbkufjmoifsxzdy'\nassert     remove_vowels('Ana lava la tina, ana, lava') == 'Anqbltia, anqbltia, anqbltia'\n",
        "num_ids_2": 87,
        "num_ids_4": 127
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"BONUS: Check if remove_vowels correctly returns the string without vowels.\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_vowels(\"Python\") == \"yThon\", \"First assertion\"\nassert     remove_vowels(\"is a string\") == \"is a str\", \"Second assertion\"\nassert     remove_vowels(\"\") == \"\", \"Third assertion\"\nassert     remove_vowels(\"\") == \"\", \"Fourth assertion\"\nassert     remove_vowels(\"\") == \"\", \"Fifth assertion\"\n",
        "num_ids_2": 44,
        "num_ids_4": 78
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_vowels('aardvark') == 'ardvark'\nassert     remove_vowels('elvis') == 'lvis'\nassert     remove_vowels('kamikaze') == 'kzae'\nassert     remove_vowels('aardvark') == 'ardvraak'\nassert     remove_vowels('flamethrower') == 'flomtwwer'\nprint('All test cases passed.')\n",
        "num_ids_2": 37,
        "num_ids_4": 78
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_vowels(\"apple\") == \"pl\"\nassert     remove_vowels(\"pineapple\") == \"apple\"\nassert     remove_vowels(\"pineapple\") == \"apple\"\nassert     remove_vowels(\"vowels\") == \"\"\nassert     remove_vowels(\"\") == \"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 1025,
        "num_ids_4": 1025
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\"\"\"\nTest 2: \nWrite a test that verifies your work.\n\"\"\"\ndef test_remove_vowels():\n    \"\"\"\n    test_remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    \"\"\"\n    Main program that runs if this file is executed from the command line.\n    \"\"\"\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. YOU'RE TERRIFIC!\\n\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_vowels(\"hello\") == \"hello\"\nassert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"hello world\") == \"hello world\"\nassert     remove_vowels(\"I love Python\") == \"I lv Python\"\nassert     remove_vowels(\"We use the Python, you use the language.\") == \"We use the lng, you use th\"\n",
        "num_ids_2": 27,
        "num_ids_4": 64
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_vowels('spam') =='spa'\nassert     remove_vowels('spam') =='spa'\nassert     remove_vowels('spa') =='spa'\nassert     remove_vowels('spam') =='spam'\nassert     remove_vowels('camel') == 'camel'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('\\n')\nprint('Removing vowels from text...')\nprint(remove_vowels('text'))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     below_threshold([20, -3, -2, -5, -6], -3) == False\nassert     below_threshold([20, -3, -2, -5, -6], -1) == True\nassert     below_threshold([20, -3, -2, -5, -6], 0) == True\nassert     below_threshold([20, -3, -2, -5, -6], 1) == False\nassert     below_threshold([20, -3, -2, -5, -6], 2) == False\n",
        "num_ids_2": 54,
        "num_ids_4": 106
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     below_threshold([1, 2, 3], 0) == True\nassert     below_threshold([1, 2, 3], 1) == False\nassert     below_threshold([1, 3, 5], 2) == False\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert below_threshold([5, 1, 2, 5, 10], 2) == False\nassert below_threshold([1, 2, 5, 10, 20], 2) == True\nassert below_threshold([10, 20, 30, 40, 100], 50) == True\nassert below_threshold([100, 200, 300, 400, 500], 200) == True\n",
        "num_ids_2": 24,
        "num_ids_4": 66
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     below_threshold([3,2,1], 2) == True\nassert     below_threshold([3,2,1], 3) == False\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nbelow_threshold([2,3,4,2,3,4,5,6,7,8,7], 3)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"test_add: passed\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add(1,2) == 3, \"Try again\"\nassert     add(2,2) == 4, \"Try again\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"\\n------ Test 2 --------\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert add(1, 2) == 3\nassert add(2, 2) == 4\n",
        "num_ids_2": 13,
        "num_ids_4": 23
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add(1, 2) == 3\nassert    add(1, 1) == 2\nassert    add(0, 1) == 1\nassert add(1, 0) == 1\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(add(2, 3))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add(2, 2) == 4, \"Wrong answer\"\nassert     add(1, 1) == 2, \"Wrong answer\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     same_chars('abc', 'abc') == True\nassert     same_chars('abc', 'acb') == False\nassert     same_chars('abc', 'abcd') == False\nassert     same_chars('abc', 'abcd') == False\nassert     same_chars('abc', 'abcd') == False\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     same_chars(\"spam\", \"eggs\") == True\nassert     same_chars(\"spam\", \"spam\") == True\nassert     same_chars(\"spam\", \"ham\") == False\nassert     same_chars(\"spam\", \"eggs\") == False\n",
        "num_ids_2": 34,
        "num_ids_4": 67
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     same_chars('I am going to cinema', 'I am going to cinema')\nassert not same_chars('I am going to cinema', 'I am going to cinema a')\nassert not same_chars('I am going to cinema', 'I am going to cinema')\n\n",
        "num_ids_2": 43,
        "num_ids_4": 64
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     same_chars(\"hello\", \"hello\") == True\nassert     same_chars(\"abc\", \"abc\") == True\nassert     same_chars(\"abc\", \"acb\") == False\n",
        "num_ids_2": 30,
        "num_ids_4": 46
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert same_chars(\"spam\", \"s\") == True\nassert same_chars(\"spam\", \"d\") == False\nassert same_chars(\"spam\", \"am\") == False\nassert same_chars(\"spam\", \"eggs\") == False\n",
        "num_ids_2": 18,
        "num_ids_4": 48
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert same_chars('aaaa', 'aaaa') == True\nassert same_chars('aaaaa', 'aaaa') == False\nassert same_chars('aaaaaaa', 'aaaa') == True\n",
        "num_ids_2": 17,
        "num_ids_4": 47
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef same_chars_in_order(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters in the same order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     same_chars(\"papa\", \"apple\") == True\nassert     same_chars(\"papa\", \"app\") == False\nassert     same_chars(\"papa\", \"papa\") == True\nassert     same_chars(\"papa\", \"papa\") == True\nassert     same_chars(\"papa\", \"papa\") == True\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fib(2) == 1\nassert     fib(7) == 13\nassert     fib(12) == 144\n\nprint(\"Test case is OK\")\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(fib(4))\nprint(fib(5))\nprint(fib(6))\nprint(fib(7))\nprint(fib(8))\nprint(fib(9))\nprint(fib(10))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nfib(1)\nfib(2)\nfib(3)\nfib(4)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fib(1) == 0\nassert     fib(2) == 1\nassert     fib(3) == 1\nassert     fib(4) == 2\nassert     fib(5) == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert fib(5) == 5\nassert fib(10) == 55\nassert fib(15) == 610\nprint(\"You are a smart guy\")\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<()><()>\")\nassert     correct_bracketing(\"<(>))>\")\nassert     correct_bracketing(\"<(()<\")\nassert     not correct_bracketing(\"(>)\")\n",
        "num_ids_2": 30,
        "num_ids_4": 57
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(<\") == False\nassert     correct_bracketing(\"<)\") == False\nassert     correct_bracketing(\"<<\") == False\nassert     correct_bracketing(\"(())\") == True\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\"<{\") == True\nassert     correct_bracketing(\"<[\") == False\nassert     correct_bracketing(\"<[]\") == True\nassert     correct_bracketing(\"<()\") == False\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"<\")\nassert     not correct_bracketing(\"<\")\nassert     correct_bracketing(\"<>\")\nassert     correct_bracketing(\"<>\")\nassert     correct_bracketing(\"<a>\")\n",
        "num_ids_2": 23,
        "num_ids_4": 47
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"<(>\") == False\nassert     correct_bracketing(\"<(<>\") == True\nassert     correct_bracketing(\"<{<[<()>(<[<(>\") == True\n",
        "num_ids_2": 28,
        "num_ids_4": 59
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"<\") == True, \"Test 1 Failed\"\nassert     correct_bracketing(\"<>\") == True, \"Test 2 Failed\"\nassert     correct_bracketing(\"<(())>\") == True, \"Test 3 Failed\"\nassert     correct_bracketing(\"<(()(()\") == False, \"Test 4 Failed\"\nassert     correct_bracketing(\"<((()\") == False, \"Test 5 Failed\"\n",
        "num_ids_2": 39,
        "num_ids_4": 84
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"()\") == True, \"A single bracket should be correctly matched with another bracket.\"\nassert     correct_bracketing(\"[][][]\") == True, \"Correct bracketing for [][][].\"\nassert     correct_bracketing(\"[][][][]\") == False, \"Incorrect bracketing for [][][][].\"\n",
        "num_ids_2": 52,
        "num_ids_4": 81
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncorrect_bracketing(\"<(<(<\") == True\ncorrect_bracketing(\"<)>)\") == False\ncorrect_bracketing(\"(\") == False\ncorrect_bracketing(\"<)>\") == False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<\") == True, \"Brackets are not correct.\"\nassert     correct_bracketing(\"<)\") == False, \"Brackets are not correct.\"\nassert     correct_bracketing(\"(>)\") == False, \"Brackets are not correct.\"\nassert     correct_bracketing(\"<()\") == False, \"Brackets are not correct.\"\nassert     correct_bracketing(\"<[)\") == False, \"Brackets are not correct.\"\n",
        "num_ids_2": 43,
        "num_ids_4": 87
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not\nassert monotonic([1,2,3,4]) == False\nassert monotonic([2,3,4,1]) == True\nassert monotonic([0,3,4,1]) == False\n",
        "num_ids_2": 6,
        "num_ids_4": 38
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     monotonic([0,1,2,3,4]) == True\nassert     monotonic([1,2,3,4,0]) == True\nassert     monotonic([0,1,2,3,4,2,4,4]) == True\nassert     monotonic([0,1,1,1,1]) == False\nassert     monotonic([1,2,3,4,5,4,3,2,1]) == False\n",
        "num_ids_2": 38,
        "num_ids_4": 82
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(monotonic([4,1,3,2]))\nassert not\nprint(monotonic([4,1,2]))\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    \n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef main():\n    l1 = ['a', 'b', 'c', 'd', 'e']\n    l2 = ['c', 'f', 'd', 'e', 'b']\n    print(common(l1, l2))\n\nif __name__ == '__main__':\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         common([1, 2, 3, 4], [1, 2, 3]) == [1, 2, 3], 'common failed'\nassert         common([1, 2, 2, 3, 4], [1, 2, 3]) == [2, 3], 'common failed'\nassert         common([2, 1, 3, 2, 4, 5], [1, 4, 5]) == [1, 4], 'common failed'\n",
        "num_ids_2": 64,
        "num_ids_4": 98
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common([0,1,1,2],    [0,1,2])    ==    [0,1]\nassert     common([0,1,1,2,2],    [0,1,2,2])    ==    [0,1,2]\nassert     common([0,1,2,2],        [0,1,2,2])    ==    [0,1,2]\nassert     common([0,1,2,2],        [1,2,2,2])    ==    [1,2]\nassert     common([1,2,2,2],        [0,1,2,2])    ==    [1,2]\n",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common([1,2,3,4], [2,3,4,5]) == [2,3,4], \\\n\"incorrect list\"\nassert     common([1,2,3,4,5], [2,3,4,5]) == [], \\\n\"empty list\"\nassert     common([1,2,3], [2,3,4,5]) == [2,3], \\\n\"incorrect list\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 59,
        "num_ids_4": 86
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common([2, 3, 5], [2, 4, 5]) == [2, 3, 5]\nassert     common([1, 2, 3], [2, 4, 5]) == [2, 3]\nassert     common([2, 3, 5, 5], [2, 4, 5]) == []\nassert     common([1, 2, 3], [2, 4, 5]) == []",
        "num_ids_2": 50,
        "num_ids_4": 92
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    common([1, 2, 3, 4], [1, 2, 4])\nassert common([1, 1, 2, 2], [1, 2, 2, 3, 4])\nassert common([1, 2, 4], [2, 3, 4])\n\n\ndef uncommon(l1: list, l2: list):\n    \"\"\"Return sorted unique uncommon elements for two lists.\n    \"\"\"\n    pass\n",
        "num_ids_2": 26,
        "num_ids_4": 43
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_prime_factor(100) == 2\nassert    largest_prime_factor(5)    == 5\nassert    largest_prime_factor(42)    == 2\nassert    largest_prime_factor(6)    == 3\nassert    largest_prime_factor(8)    == 2\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(10) == 2\nassert     largest_prime_factor(0) == 0\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(9) == 3\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(12) == 3\nassert     largest_prime_factor(91) == 11\nassert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(6) == 2\n\n\ndef sum_of_squares(n: int) -> int:\n    \"\"\"Return the sum of squares of all integers from n to 10**9.\n    \"\"\"\n    pass\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_prime_factor(1) == 1\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(100) == 2\nassert     largest_prime_factor(1000) == 7\nassert     largest_prime_factor(10000) == 11\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_prime_factor(10) == 2\nassert     largest_prime_factor(16) == 2\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(97) == 13\nassert     largest_prime_factor(12345) == 23\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(100) == 20\nassert     largest_prime_factor(101) == 101\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_to_n(1) == 1, f\"sum_to_n({1}) == 1, but got: {sum_to_n(1)}\"\nassert     sum_to_n(2) == 1 + 2, f\"sum_to_n({2}) == 1 + 2, but got: {sum_to_n(2)}\"\nassert     sum_to_n(10) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10, f\"sum_to_n({10}) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10, but got: {sum_to_n(10)}\"\n",
        "num_ids_2": 84,
        "num_ids_4": 160
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_to_n(0) == 0\nassert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_to_n(5) == 3\nassert     sum_to_n(5) == 6\nassert     sum_to_n(10) == 45\nassert     sum_to_n(0) == 0\nassert     sum_to_n(-5) == -5",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef fibonacci(n: int):\n    \"\"\"fibonacci is a function that returns the nth term in a Fibonacci sequence.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not assert == True\nassert assert == True\n",
        "num_ids_2": 9,
        "num_ids_4": 14
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert sum_to_n(3) == 6, \"incorrect sum_to_n\"\nassert sum_to_n(0) == 0, \"incorrect sum_to_n\"\nassert sum_to_n(5) == 15, \"incorrect sum_to_n\"\n",
        "num_ids_2": 25,
        "num_ids_4": 69
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsum_to_n(1) == 1\nsum_to_n(2) == 3\nsum_to_n(100) == 5050\nsum_to_n(1000) == 5050\nsum_to_n(10000) == 5050\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"()\") == True, \\\n         \"The correct_bracketing function should return True if every opening bracket has a corresponding closing bracket.\"\nassert correct_bracketing(\"()\") == True, \\\n         \"The correct_bracketing function should return True if every opening bracket has a corresponding closing bracket.\"\nassert correct_bracketing(\"((()())())\") == True, \\\n         \"The correct_bracketing function should return True if every opening bracket has a corresponding closing bracket.\"\nassert correct_bracketing(\"(((()()))())\") == True, \\\n         \"The correct_bracketing function should return True if every opening bracket has a corresponding closing bracket.\"\nassert correct_bracketing(\"((()\") == False, \\\n         \"The correct_bracketing function should return False if there is an opening bracket without a corresponding closing bracket.\"\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\")()())\") == True, \"Test 1 Failed\"\nassert     correct_bracketing(\"()(\") == False, \"Test 2 Failed\"\nassert     correct_bracketing(\"(()()\") == False, \"Test 3 Failed\"\nassert     correct_bracketing(\"((()))\") == True, \"Test 4 Failed\"\n",
        "num_ids_2": 41,
        "num_ids_4": 83
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     correct_bracketing('') == True\nassert     correct_bracketing('(') == False\nassert     correct_bracketing('()') == True\nassert     correct_bracketing('()()') == True\nassert     correct_bracketing('()())') == False\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"(()))\") == True\nassert correct_bracketing(\"()()\") == True\nassert correct_bracketing(\"(())\") == False\n\nprint('Done!')\n",
        "num_ids_2": 28,
        "num_ids_4": 41
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\"()\") == False\nassert     correct_bracketing(\"()())\") == True\nassert     correct_bracketing(\"(())\") == True\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"(()(()))\") == True\nassert     correct_bracketing(\"((()))\") == False\nassert     correct_bracketing(\"(()(()))\") == False\n",
        "num_ids_2": 27,
        "num_ids_4": 59
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"()\")\nassert     not correct_bracketing(\"(]\")\nassert     correct_bracketing(\"(((((\")\nassert     not correct_bracketing(\"))))\")\nassert     not correct_bracketing(\"\")\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()\") == False\nassert     correct_bracketing(\"())(\") == False\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"(())(\") == False\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    # check for correctness\n    # print(derivative([2,4,3,5]))\n    # should print -4\n\n\ndef check(xs):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return True if it is a good polynomial,\n    False otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     derivative([1,2,3,4]) == [2,6,12,24]\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     derivative([1, 2, 3]) ==    [[2], \n                                [6], \n                                [20]]\n\nassert derivative([0, 0, 1]) == [[0], \n                                [0], \n                                [1]]\n\nassert derivative([0, 1]) == [[0], \n                                [1]]\n",
        "num_ids_2": 34,
        "num_ids_4": 47
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     derivative([1, 2, 3]) == [3, 4, 6]\nassert     derivative([0, 3, 6]) == [6]\nassert     derivative([0, 0, 0]) == [0, 0, 0]",
        "num_ids_2": 38,
        "num_ids_4": 59
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     derivative([1, 2, 3, 4]) == [-3, 6, 12, 24]\nassert     derivative([1, 2, 3, 4, 5]) == [-3, 6, 12, 24, 60]\nassert     derivative([1, 2, 3]) == [-3, 6, 3]\n\ndef sum_of_derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return the sum of the derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n",
        "num_ids_2": 54,
        "num_ids_4": 75
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    p = Polynomial([1, 2, 3])\n    print(p)\n    p.derive_by_x()\n    print(p)\n    p.derive_by_x(2)\n    print(p)\n    p.derive_by_x(3)\n    print(p)\n    p.derive_by_x(4)\n    print(p)\n    \n    p = Polynomial([1, 2, 3, 4])\n    p.derive_by_x(2)\n    print(p)\n    p.derive_by_x(2)\n    print(p)\n    p.derive_by_x(3)\n    print(p)\n    \n    p = Polynomial([1, 2, 3, 4, 5])\n    p.derive_by_x(2)\n    print(p)\n    p.derive_by_x(3)\n    print(p)\n    p.derive_by_x(2)\n    print(p)\n    \n    p = Polynomial([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    p.derive_by_x(2)\n    print(p)\n    p.derive_by_x(3)\n    print(p)\n    p.derive_by_x(2)\n    print(p)\n    \n    print(\"=============================\")\n    p = Polynomial([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    p.derive_by_x(2)\n    print(p)\n    p.derive_by_x(3)\n    print(p)\n    p.derive_by_x(2)\n    print(p)\n    \n    p = Polynomial([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    p.derive_by_x(2)\n    print(p)\n    p.derive_by_x(3)\n    print(p)\n    p.derive_by_x(2)\n    print(p)\n    \n    print(\"=============================\")\n    p = Polynomial([1, 2, 3, 4, 5])\n    p.derive_by_x(2)\n    print(p)\n    p.derive_by_x(3)\n    print(p)\n    p.derive_by_x(2)\n    print(p)\n    \n    p = Polynomial([1, 2, 3, 4, 5, 6])\n    p.derive_by_x(2)\n    print(p)\n    p.derive_by_x(3)\n    print(p)\n    p.derive_by_x(2)\n    print(p)\n    \n    print(\"=============================\")\n    p = Polynomial([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    p.derive_by_x(2)\n    print(p)\n    p.derive_by_x(3)\n    print(p)\n    p.derive_by_x(2)\n    print(p)\n    \n    p = Polynomial([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    p.derive_by_x(2)\n    print(p)\n    p.derive_by_x(3)\n    print(p)\n    p.derive_by_x(2)\n    print(p)\n    \n    print(\"=============================\")\n    p = Polynomial([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    p.derive_by_x(2)\n    print(p)\n    p.derive_by_x(3)\n    print(p)\n    p.derive_by_x(2)\n    print(p)\n    \n    p = Polynomial([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    p.derive_by_x(2)\n    print(p)\n    p.de",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(derivative([0,1])) == [1]\nprint(derivative([0,1,2])) == [2,0,1]\nprint(derivative([0,1,2,3,4])) == [6,2,0,1,0]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef fibfib(n: int):\n    fibfib = [0, 1]\n    if n <= 1:\n        return fibfib[n]\n    for i in range(n-1):\n        fibfib.append(fibfib[i]+fibfib[i+1])\n    return fibfib[n]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    fibfib(3)\n    fibfib(5)\n    fibfib(7)\n    fibfib(8)\n    fibfib(9",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     vowels_count('a') == 0\nassert     vowels_count('abc') == 0\nassert     vowels_count('abcd') == 0\nassert     vowels_count('abcdxyz') == 0\nassert     vowels_count('abcde') == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test 1\n    assert vowels_count(\"hippo\") == 3\n    # Test 2\n    assert vowels_count(\"abcsadc\") == 3\n    # Test 3\n    assert vowels_count(\"\") == 0\n    # Test 4\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nvowels_count(FIX) == 2\n\nassert vowels_count('') == 0\nassert vowels_count('a') == 1\nassert vowels_count('e') == 1\n",
        "num_ids_2": 14,
        "num_ids_4": 36
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nvowels_count(\"yay\") == 0\nvowels_count(\"asasdasdas\") == 6\nvowels_count(\"asasdasda\") == 4\nvowels_count(\"asas\") == 3\nvowels_count(\"\") == 0\nvowels_count(\"test\") == 6\nvowels_count(\"Test\") == 7\nvowels_count(\"\") == 0\n\nprint(\"Congratulations! Your function is correct.\")\nprint(\"Let's test your function with some test cases:\")\n\nif vowels_count(FIX) == 1:\n    print(\"You are a genius! Go pick up the stars.\")\nelse:\n    print(\"At least you tried.\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"\n    # your code here\n    return 0\n    # END_YOUR_CODE\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nvowels_count('code') == 2\nvowels_count('da') == 2\nvowels_count('w') == 1\nvowels_count('apple') == 0\nvowels_count('sa') == 1\nvowels_count('sapple') == 2\nvowels_count('tiger') == 0\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    vowels_count(\"apple\") == 4\nassert \n    vowels_count(\"box\") == 3\nassert \n    vowels_count(\"door\") == 3\nassert \n    vowels_count(\"door\") == 3\nassert \n    vowels_count(\"bob\") == 5\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"vowels_count('hello') =\", vowels_count('hello'))\nprint(\"vowels_count('hellooo') =\", vowels_count('hellooo'))\nprint(\"vowels_count('honey') =\", vowels_count('honey'))\nprint(\"vowels_count('cyt') =\", vowels_count('cyt'))\n\nif __name__ == '__main__':\n    # print the FIX\n    print(FIX)\n    # get input from STDIN\n    s = input()\n    # use counter_vowels to get the number of vowels in the given string.\n    count = counter_vowels(s)\n    # use a `print` statement to print the result\n    print(count)\n    \n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     circular_shift(123456789, 4) == 123456789\nassert     circular_shift(123456789, -4) == 987654321\nassert     circular_shift(123456789, 5) == 98765\nassert     circular_shift(123456789, -5) == 12345678\nassert     circular_shift(123456789, 6) == 987\n",
        "num_ids_2": 42,
        "num_ids_4": 81
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     circular_shift('1234', 1) == '2341', 'Correct'\nassert     circular_shift('1234', 2) == '3412', 'Correct'\nassert     circular_shift('1234', 3) == '4123', 'Correct'\nassert     circular_shift('12345', 4) == '5123', 'Correct'\nassert     circular_shift('12345', -4) == '12345', 'Correct'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     circular_shift(\"123456789\", 2) == \"234567890\", \"wrong\"\nassert     circular_shift(\"123456789\", 9) == \"1234567890\", \"wrong\"\nassert     circular_shift(\"123456789\", -2) == \"9876543210\", \"wrong\"\nassert     circular_shift(\"123456789\", -9) == \"9876543210\", \"wrong\"\nassert     circular_shift(\"123456789\", -10) == \"9876543210\", \"wrong\"\n",
        "num_ids_2": 50,
        "num_ids_4": 102
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     circular_shift(123456, 4) == 123456\nassert     circular_shift(123456, -4) == 123656\nassert     circular_shift(123456, 10) == 1234456\nassert     circular_shift(123456, -10) == 3456123\n\ndef swap_adjacent_digits(s):\n    \"\"\"Given a string, rearrange the digits so that any 2 adjacent digits are\n    swapped, e.g., \"abc\" -> \"cba\".\n    \"\"\"\n    pass\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     circular_shift(3141592653589793, 26) == 3141592653589793\nassert     circular_shift(3141592653589793, 26) == 3141592653589793\nassert     circular_shift(3141592653589793, 35) == 27294967296\nassert     circular_shift(3141592653589793, -1) == 3141592653589793\nassert     circular_shift(3141592653589793, 0) == 3141592653589793\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncircular_shift('12345678', 1) == '23456'\ncircular_shift('12345678', 0) == '12345678'\ncircular_shift('12345678', -1) == '987654'\ncircular_shift('12345678', 2) == '345678'\ncircular_shift('12345678', 3) == '78456'\ncircular_shift('12345678', 10) == '67845'\ncircular_shift('12345678', -10) == '45678'\ncircular_shift('12345678', 1) == '23456'\ncircular_shift('12345678', 2) == '345678'\ncircular_shift('12345678', 3) == '78456'\ncircular_shift('12345678', 10) == '67845'\ncircular_shift('12345678', -10) == '45678'\ncircular_shift('12345678', 1) == '23456'\ncircular_shift('12345678', 2) == '345678'\ncircular_shift('12345678', 3) == '78456'\ncircular_shift('12345678', 10) == '67845'\ncircular_shift('12345678', -10) == '45678'\ncircular_shift('12345678', 1) == '23456'\ncircular_shift('12345678', 2) == '345678'\ncircular_shift('12345678', 3) == '78456'\ncircular_shift('12345678', 10) == '67845'\ncircular_shift('12345678', -10) == '45678'\ncircular_shift('12345678', 1) == '23456'\ncircular_shift('12345678', 2) == '345678'\ncircular_shift('12345678', 3) == '78456'\ncircular_shift('12345678', 10) == '67845'\ncircular_shift('12345678', -10) == '45678'\ncircular_shift('12345678', 1) == '23456'\ncircular_shift('12345678', 2) == '345678'\ncircular_shift('12345678', 3) == '78456'\ncircular_shift('12345678', 10) == '67845'\ncircular_shift('12345678', -10) == '45678'\ncircular_shift('12345678', 1) == '23456'\ncircular_shift('12345678', 2) == '345678'\ncircular_shift('12345678', 3) == '78456'\ncircular_shift('12345678', 10) == '67845'\ncircular_shift('12345678', -10) == '45678'\ncircular_shift('12345678', 1) == '23456'\ncircular_shift('12345678', 2) == '345678'\ncircular_shift('12345678', 3) == '78456'\ncircular_shift('12345678', 10) == '67845'\ncircular_shift('12345678', -10) == '45678'\ncircular_shift('12345678', 1) == '23456'\ncircular_shift('12345678', 2) == '345678'\ncircular_shift('12345678', 3) == '78456'\ncircular_shift('12345678', 10) == '67845'\ncircular_shift('12345678', -10) == '45678'\ncircular_shift('12345678', 1) == '23456'\ncircular_shift('12345678', 2) == '345678'\ncircular_shift('12345678', 3) == '78456'\ncircular_shift('12345678', 10) == '67845'\ncircular_shift('12345678', -10) == '45678'\ncircular_shift('12345678', 1) == '23456'\ncircular_shift('12345678', 2) == '345678'\ncircular_shift('12345678', 3) == '78456'\ncircular_shift('12345678', 10) == '67845'\ncircular_shift('12345678', -10) == '45678'\ncircular_shift('12345678', 1) == '23456'\ncircular_shift('12345678', 2) == '345678'\ncircular_shift('12",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndigitSum('Ab') == 2\ndigitSum('Abcd') == 6\ndigitSum('Abcdd') == 13\n\n\nprint('PASSED ALL TESTS')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digitSum(\"4700\") == 2,     \"incorrect\"\nassert     digitSum(\"4833\") == 4,     \"incorrect\"\nassert     digitSum(\"4772\") == 7,     \"incorrect\"\nassert     digitSum(\"5\") == 5,         \"incorrect\"\nassert     digitSum(\"\") == 0,         \"incorrect\"\n",
        "num_ids_2": 34,
        "num_ids_4": 67
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digitSum(\"Hp\") == 72, \"incorrect\"\nassert     digitSum(\"\") == 0, \"incorrect\"\nassert     digitSum(\"abvcd\") == 24, \"incorrect\"\nassert     digitSum(\"abvcdx\") == 26, \"incorrect\"\nassert     digitSum(\"abvcdabc\") == 26, \"incorrect\"\n",
        "num_ids_2": 30,
        "num_ids_4": 65
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digitSum(\"\") == 0, \"Empty string.\"\nassert     digitSum(\"a\") == 0, \"One character.\"\nassert     digitSum(\"12345\") == 15, \"Longer string.\"\n",
        "num_ids_2": 29,
        "num_ids_4": 46
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(digitSum(\"hello\") == sum([ord(c) for c in \"Hello\"]))\nprint(digitSum(\"my name is mac\") == sum([ord(c) for c in \"My Name is Mac\"]))\nprint(digitSum(\"Hi\") == sum([ord(c) for c in \"Hi\"]))\nprint(digitSum(\"\") == sum([ord(c) for c in \"\"]))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digitSum('iiii') == 6\nassert     digitSum('ABC') == 0\nassert     digitSum('aC') == 0\nassert     digitSum('AC') == 0\nassert     digitSum('ABCD') == 8\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digitSum(\"hi\") == 'i'\nassert     digitSum(\"ASDFGHJKL\") == 'J'\nassert     digitSum(\"kjklasdfhjkl\") == '9'\nassert     digitSum(\"qweasdzxcvbnm\") =='m'",
        "num_ids_2": 29,
        "num_ids_4": 67
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digitSum(\"Hello\") == 0\nassert     digitSum(\"a+b\") == 7\nassert     digitSum(\"2*2\") == 4\nassert     digitSum(\"2*2+3*2\") == 8\n\ndef isInt(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns True if the string is an integer and\n    False otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digitSum('hello123') == 12\nassert     digitSum('9') == 9\nassert     digitSum('912') == 9\nassert     digitSum('912')!= 9\nassert     digitSum('1111') == 1\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfruit_distribution('ORANGE',3) == 1\nassert fruit_distribution('ORANGE',4) == 1\nassert fruit_distribution('ORANGE',5) == 1\nassert fruit_distribution('ORANGE',6) == 2\nassert fruit_distribution('ORANGE',7) == 2\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfruit_distribution(\"10\", 2) == 3\nassert\nfruit_distribution(\"12\", 5) == 3\nassert\nfruit_distribution(\"10\", 2) == 3",
        "num_ids_2": 5,
        "num_ids_4": 7
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfruit_distribution(\"{1,2,3,4}\",\"{1,2,3,4}\") == 4\nassert\nfruit_distribution(\"{3,2,4,1}\",\"{2,3,1}\") == 3\nassert fruit_distribution(\"{3,2,4,1}\",\"{2,3,1,5}\") == ",
        "num_ids_2": 5,
        "num_ids_4": 34
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfruit_distribution(\"1\",1) == 1\nassert \nfruit_distribution(\"1\",2) == 1\nassert \nfruit_distribution(\"2\",1) == 1\nassert \nfruit_distribution(\"0\",1) == 0\nassert \nfruit_distribution(\"1\",0) == 0\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fruit_distribution(\"rope\", 1) == \"0\", \\\n        \"Wrong answer! (1)\"\nassert     fruit_distribution(\"rope\", 2) == \"1\", \\\n        \"Wrong answer! (2)\"\nassert     fruit_distribution(\"apple\", 1) == \"0\", \\\n        \"Wrong answer! (3)\"\nassert     fruit_distribution(\"apple\", 2) == \"0\", \\\n        \"Wrong answer! (4)\"\nassert     fruit_distribution(\"apple\", 5) == \"1\", \\\n        \"Wrong answer! (5)\"\n",
        "num_ids_2": 36,
        "num_ids_4": 70
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nfruit_distribution(\"10\",3) == \"5\"\n\nfruit_distribution(\"10\",4) == \"0\"\n\nfruit_distribution(\"1\",3) == \"1\"\n\nfruit_distribution(\"0\",3) == \"0\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fruit_distribution(\"2\", 1) == 2 \nassert     fruit_distribution(\"0\", 2) == 0\nassert     fruit_distribution(\"4\", 2) == 0\nassert     fruit_distribution(\"5\", 1) == 1\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pluck([2, 3, 4, 6, 8]) == [8, 0], \"Test 1 Failed\"\nassert     pluck([]) == [], \"Test 2 Failed\"\nassert     pluck([2, 3, 4, 5, 6]) == [6, 0], \"Test 3 Failed\"\nassert     pluck([2, 3, 4, 5, 6, 8]) == [8, 0], \"Test 4 Failed\"\nassert     pluck([10, 1, 3, 2, 4, 5, 7, 6, 8]) == [8, 0], \"Test 5 Failed\"\n",
        "num_ids_2": 42,
        "num_ids_4": 98
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pluck([\"1\",\"2\",\"3\",\"4\"]) == [[2, 1], True]\nassert     pluck([]) == []\nassert     pluck([\"1\"]) == []\nassert     pluck([\"1\",\"2\",\"3\"]) == [[2, 1], True]\nassert     pluck([\"1\",\"2\",\"3\",\"4\"]) == [[2, 1], False]\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pluck([])     == []\nassert pluck([2])     == [2]\nassert pluck([2, 4]) == [4]\nassert pluck([3, 5, 1]) == [5, 1]\nassert pluck([1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5]) == [1, 1]\n",
        "num_ids_2": 22,
        "num_ids_4": 52
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (pluck([0,1,2,3]) ==    [0, 0])\nassert     (pluck([4,2,3,2,4]) ==    [4, 2])\nassert     (pluck([4,3,4,5,6]) ==    [4, 4])\nassert     (pluck([4,3,4,4,5]) ==    [4, 4])\nassert     (pluck([4,4,4]) ==    [4, 0])\n",
        "num_ids_2": 46,
        "num_ids_4": 94
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert pluck([1,2,3,4,5]) == []\nassert pluck([1,2,3,4,5,7,6,5,3,1,2,4,5,7,6]) == [3, 0]\nassert pluck([1,2,3,4,5,6,7,8,9]) == [3, 2]\nassert pluck([1,2,3,4,5,6,7,8,9,10,11]) == [1, 2]\n",
        "num_ids_2": 20,
        "num_ids_4": 90
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pluck([2,3,1,1,1,1,1]) == [1,2]\nassert pluck([1,2]) == []\nassert pluck([]) == []\nassert pluck([2,3,4,5,1,1,1,1,1,1,1,1,1]) == [1,2]\nassert pluck([1,2,3,4,5,6,7,8,9]) == []\n",
        "num_ids_2": 37,
        "num_ids_4": 82
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pluck([2, 3, 4, 5, 6]) == [4, 1]\nassert     pluck([3, 4, 5, 6]) == [5, 0]\nassert     pluck([3, 4, 5, 6, 7, 10]) == [6, 1]\nassert     pluck([1, 2, 3]) == []\nassert     pluck([]) == []\n",
        "num_ids_2": 42,
        "num_ids_4": 80
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(search([3, 5, -2, 6, 7, -4, -4, -2, 1, -1, 5]))\nprint(search([1, 5, 2, 5, 5, 5, 3, 4, 5, 5, 6, 7, -4, -4, -2, 1, -1]))\nprint(search([3, 5, 2, 5, 5, 5, 3, 4, 5, 5, 6, 7, -4, -4, -2, 1, -1]))\nprint(search([-1, 1, -1, 5, 5, 5, -4, -4, -2, 1, -1]))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     search([4,3,2,5]) == 5\nassert     search([]) == -1\nassert     search([1,3,2,5]) == 5\nassert     search([1,1,2,5]) == 1\nassert     search([1,1,2,5,5,5]) == ",
        "num_ids_2": 24,
        "num_ids_4": 54
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 10\nassert     search([1, 2, 2, 3, 3, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25]) == -1\nassert     search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "num_ids_2": 155,
        "num_ids_4": 1023
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     search([]) == -1\nassert search([1]) == 1\nassert search([1,2]) == -1\nassert search([1,2,2,1]) == 1\nassert search([1,2,2,1,2]) == 1\n",
        "num_ids_2": 17,
        "num_ids_4": 42
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     search([4,3,2,1,5,0,2,7,6,8,1,2,3,3]) == 5\nassert     search([4,3,2,1,5,0,2,7,6,8,1,2,3,3,9]) == -1\nassert     search([]) == -1\nassert     search([1,2,3,4]) == -1\nassert     search([3,2,1,4,5]) == 4\n",
        "num_ids_2": 73,
        "num_ids_4": 98
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    lst = [2,4,1,2,3]\n    print(search(lst)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     search([3, 2, 1]) == 1\nassert     search([3, 3, 2, 1, 3, 3, 1]) == 3\nassert     search([5, 5, 5, 5, 5, 5, 5]) == 5\nassert     search([-3, 0, -2, -1, -3, -2, -1]) == -3\nassert     search([0, 0, 0, 0, 0, 0, 0]) == -",
        "num_ids_2": 34,
        "num_ids_4": 83
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     search([]) == -1\nassert     search([1]) == 1\nassert     search([2,2,2,2,2]) == 1\nassert     search([2,1,2,1,2]) == 2\nassert     search([2,2,2,2,1,2,2,1,2,2,1,2,2,2,2]) == 2\n",
        "num_ids_2": 18,
        "num_ids_4": 52
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsearch([]) == -1\nassert search([1]) == 1\nassert search([1,2,3,1,2,3,3,2,1,2,1,1,2,1,2,3]) == 1\nassert search([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 16\nassert search([1,1,2,3,3,4,5,5,6,7,7,8,9,9,10,11,11,12,12,12,13,13,14,14,14,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,1",
        "num_ids_2": 11,
        "num_ids_4": 87
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strange_sort_list([3, 1, 4]) == [1, 4, 3], \"Wrong\"\nassert     strange_sort_list([4, 3, 1]) == [1, 3, 4], \"Wrong\"\nassert     strange_sort_list([4, 3, 1, 2]) == [1, 2, 3, 4], \"Wrong\"\nassert     strange_sort_list([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1], \"Wrong\"\n\nprint(\"You've successfully passed this task! :-)\")",
        "num_ids_2": 56,
        "num_ids_4": 124
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef strange_sort_tuple(tup):\n    '''\n    Given tuple of integers, return tuple in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef strange_sort_list_again(lst):\n    '''\n    Given list of integers, return list in strange order.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     strange_sort_list([3,2,1]) == [1,2,3]\nassert     strange_sort_list([3,1,2]) == [1,2,3]\nassert     strange_sort_list([1,2,3]) == [1,2,3]\nassert     strange_sort_list([5,7,3,6,4]) == [3,4,5,6,7]\nassert     strange_sort_list([5,7,3,6,4,2]) == [2,3,4,5,6,7]\n",
        "num_ids_2": 48,
        "num_ids_4": 104
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nTask 11: Find the even-indexed numbers that sum to 2020\n'''\ndef sum_even_indexed_numbers(numbers):\n    '''\n    Given a list of numbers, return a list of the even-indexed numbers\n    whose sum is 2020.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     strange_sort_list([1,2,3,4,5,6,7,8,9]) == \n    [1,2,3,4,5,6,7,8,9], 'Failed: strange_sort_list'\n\nassert     strange_sort_list([6,5,7,2,3,1,9,8,4]) ==\n    [1,2,3,4,5,6,7,8,9], 'Failed: strange_sort_list'\n\nassert     strange_sort_list([1,2,3,4,5,6,7,8,9,10]) ==\n    [1,2,3,4,5,6,7,8,9,10], 'Failed: strange_sort_list'\n",
        "num_ids_2": 59,
        "num_ids_4": 90
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     strange_sort_list([1,2,3]) == [1,3,2], \"Failed in strange_sort_list\"\nassert     strange_sort_list([3,2,1]) == [1,2,3], \"Failed in strange_sort_list\"\nassert     strange_sort_list([2,1,3]) == [1,3,2], \"Failed in strange_sort_list\"\nassert     strange_sort_list([1,2,3,4]) == [1,2,3,4], \"Failed in strange_sort_list\"\nassert     strange_sort_list([2,1,3,4]) == [1,3,2,4], \"Failed in strange_sort_list\"\n",
        "num_ids_2": 68,
        "num_ids_4": 140
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     strange_sort_list([1,4,3,2]) == [2,1,3,4], \\\n            \"WRONG! first\"\nassert     strange_sort_list([2,1,3,4]) == [1,2,3,4], \\\n            \"WRONG! second\"\nassert     strange_sort_list([3,4,2,1]) == [1,2,3,4], \\\n            \"WRONG! third\"\nassert     strange_sort_list([4,3,2,1]) == [1,2,3,4], \\\n            \"WRONG! fourth\"\nassert     strange_sort_list([1,2,3,4]) == [1,2,3,4], \\\n            \"WRONG! last\"\n",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     strange_sort_list([3, 1, 2]) == [1, 2, 3]\nassert     strange_sort_list([3, 1, 2]) == [1, 2, 3]\nassert     strange_sort_list([1, 2, 3]) == [1, 2, 3]\nassert     strange_sort_list([1, 3, 2]) == [1, 2, 3]\nassert     strange_sort_list([5, 1, 3]) == [1, 3, 5]\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strange_sort_list([3,2,1,4]) == [1,2,3,4]\nassert     strange_sort_list([4,3,1,2]) == [1,2,3,4]\nassert     strange_sort_list([3,2,4,1]) == [1,2,3,4]\n",
        "num_ids_2": 56,
        "num_ids_4": 84
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     triangle_area(3,4,5) == 'Area: 7.00'\nassert     triangle_area(1,2,1) == 'Area: 0.00'\nassert     triangle_area(3,4,5) == 'Area: -1.00'\nassert     triangle_area(1,2,1) == 'Area: -1.00'\n",
        "num_ids_2": 44,
        "num_ids_4": 90
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntriangle_area(3,4,5)==2.5\n\nassert triangle_area(5,6,7)==2\n\nassert triangle_area(6,7,8)==3\n",
        "num_ids_2": 17,
        "num_ids_4": 31
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triangle_area(3, 4, 5) == -1\nassert     triangle_area(1, 2, 2) == 0.5\nassert     triangle_area(2, 3, 4) == 0.5\nassert     triangle_area(2, 1, 4) == 1.5\nassert     triangle_area(2, 2, 4) == 1.0\n",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triangle_area(1, 2, 3) == -1\nassert     triangle_area(1, 1, 2) == 1\nassert     triangle_area(1, 2, 1) == 0.5\nassert     triangle_area(3, 4, 5) == 0.5\nassert     triangle_area(1, 2, 4) == -1\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(1, 2, 3) == 5/2, \"Should be 5/2\"\nassert     triangle_area(1, 2, 1) == -1, \"Should be -1\"\nassert     triangle_area(3, 2, 2) == 4, \"Should be 4\"\nassert     triangle_area(5, 2, 3) == 4, \"Should be 4\"\n\nif __name__ == \"__main__\":\n    print(triangle_area(1, 2, 3))\n    print(triangle_area(1, 2, 1))\n    print(triangle_area(3, 2, 2))\n    print(triangle_area(5, 2, 3)",
        "num_ids_2": 50,
        "num_ids_4": 94
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    # test cases\n    test_cases = [\n        (1, 1, 1),\n        (1, 1, 2),\n        (2, 1, 1),\n        (2, 2, 2),\n        (3, 1, 1),\n        (1, 2, 3),\n        (1, 3, 2),\n        (2, 2, 2),\n        (2, 3, 1),\n        (3, 2, 1),\n        (2, 3, 2),\n        (1, 3, 4),\n        (1, 4, 3),\n        (2, 4, 3),\n        (2, 3, 4),\n        (4, 3, 2),\n        (3, 4, 2),\n        (3, 2, 4),\n        (4, 2, 3),\n        (2, 4, 5),\n        (2, 5, 4),\n        (5, 4, 2),\n        (5, 2, 4),\n        (2, 5, 5),\n        (2, 5, 6),\n        (3, 5, 5),\n        (3, 6, 5),\n        (6, 5, 3),\n        (6, 5, 4),\n        (5, 6, 4),\n        (5, 6, 3),\n        (3, 6, 7)\n    ]\n    # test the function\n    for a, b, c in test_cases:\n        assert triangle_area(a, b, c) == area(a, b, c), f\"for a, b, c = {a}, {b}, {c} the output should be {area(a, b, c)}\"\n    print(\"All test cases passed!\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     triangle_area(1, 2, 3) == -1\nassert     triangle_area(1, 1, 3) == 0.5\nassert     triangle_area(1, 2, 1) == 0.5\nassert     triangle_area(2, 1, 1) == 0.5\nassert     triangle_area(1, 1, 1) == 0.5\n",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nwill_it_fly([1,2,3,4,5], 2) == False\nwill_it_fly([1,2,3,4,5], 1) == True\nwill_it_fly([1,2,3,4,5], 3) == True\nwill_it_fly([1,2,3,4,5], 9) == False\nwill_it_fly([1,2,3,4,5], 0) == False\nwill_it_fly([1,2,3,4,5], 1) == False\nwill_it_fly([1,2,3,4,5], 10) == True\nwill_it_fly([1,2,3,4,5], 10000) == False\nwill_it_fly([1,2,3,4,5], 10001) == False\nwill_it_fly([1,2,3,4,5], 9999) == True\nwill_it_fly([1,2,3,4,5], -1) == False\nwill_it_fly([1,2,3,4,5], -2) == False\nwill_it_fly([1,2,3,4,5], -3) == False\nwill_it_fly([1,2,3,4,5], -4) == False\nwill_it_fly([1,2,3,4,5], -5) == False\nwill_it_fly([1,2,3,4,5], 0) == True\nwill_it_fly([1,2,3,4,5], 1) == False\nwill_it_fly([1,2,3,4,5], 2) == True\nwill_it_fly([1,2,3,4,5], 3) == False\nwill_it_fly([1,2,3,4,5], 4) == False\nwill_it_fly([1,2,3,4,5], 5) == False\nwill_it_fly([1,2,3,4,5], 6) == False\nwill_it_fly([1,2,3,4,5], 7) == False\nwill_it_fly([1,2,3,4,5], 8) == False\nwill_it_fly([1,2,3,4,5], 9) == True\nwill_it_fly([1,2,3,4,5], 10) == False\nwill_it_fly([1,2,3,4,5], 11) == False\nwill_it_fly([1,2,3,4,5], 12) == False\nwill_it_fly([1,2,3,4,5], 13) == False\nwill_it_fly([1,2,3,4,5], 14) == False\nwill_it_fly([1,2,3,4,5], 15) == True\nwill_it_fly([1,2,3,4,5], 16) == False\nwill_it_fly([1,2,3,4,5], 17) == False\nwill_it_fly([1,2,3,4,5], 18) == False\nwill_it_fly([1,2,3,4,5], 19) == True\nwill_it_fly([1,2,3,4,5], 20) == False\nwill_it_fly([1,2,3,4,5], 21) == False\nwill_it_fly([1,2,3,4,5], 22) == True\nwill_it_fly([1,2,3,4,5], 23) == True\nwill_it_fly([1,2,3,4,5], 24) == True\nwill_it_fly([1,2,3,4,5], 25) == True\nwill_it_fly([1,2,3,4,5], 26) == True\nwill_it_fly([1,2,3,4,5], 27) == True\nwill_it_fly([1,2,3,4,5], 28) == True\nwill_it_fly([1,2,3,4,5], 29) == True\nwill_it_fly([1,2,3,4,5], 30) == False\nwill_it_fly([1,2,3,4,5], 31) == False\nwill_it_fly([1,2,3,4,5], 32) == False\nwill_it_fly([1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nwill_it_fly(['abc','bca','cab'], 1) == True\nwill_it_fly(['abc','bca','cab'], 2) == False\nwill_it_fly(['abc','bca','cab','caa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa'], 1) == True\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 2) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == True\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 2) == True\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == True\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 2) == True\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == True\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 2) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == True\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 2) == True\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == True\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 2) == True\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == True\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly(['abc','bca','cab','caa','aaa','aaa'], 1) == False\nwill_it_fly([",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nwill_it_fly([1,2,3,4,5,6],5) == True, \"Should be True\"\nwill_it_fly([1,2,3,4,5,6],7) == False, \"Should be False\"\nwill_it_fly([1,1,1],2) == False, \"Should be False\"\nwill_it_fly([],3) == False, \"Should be False\"\nwill_it_fly([1,2],3) == False, \"Should be False\"\nwill_it_fly([1,2,3],5) == True, \"Should be True\"\nwill_it_fly([1,2,3,4],5) == True, \"Should be True\"\nwill_it_fly([1,2,3,4],6) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],7) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],8) == True, \"Should be True\"\nwill_it_fly([1,2,3,4,5,6],9) == True, \"Should be True\"\nwill_it_fly([1,2,3,4,5,6],10) == True, \"Should be True\"\nwill_it_fly([1,2,3,4,5,6],11) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],12) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],13) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],14) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],15) == True, \"Should be True\"\nwill_it_fly([1,2,3,4,5,6],16) == True, \"Should be True\"\nwill_it_fly([1,2,3,4,5,6],17) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],18) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],19) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],20) == True, \"Should be True\"\nwill_it_fly([1,2,3,4,5,6],21) == True, \"Should be True\"\nwill_it_fly([1,2,3,4,5,6],22) == True, \"Should be True\"\nwill_it_fly([1,2,3,4,5,6],23) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],24) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],25) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],26) == True, \"Should be True\"\nwill_it_fly([1,2,3,4,5,6],27) == True, \"Should be True\"\nwill_it_fly([1,2,3,4,5,6],28) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],29) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],30) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],31) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6],32) == True, \"Should be True\"\nwill_it_fly([1,2,3,4,5,6],33) == True, \"Should be True\"\nwill_it_fly([1,2,3,4,5,6],34) == False, \"Should be False\"\nwill_it_fly([1,2,3,4,5,6]",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nwill_it_fly(['b', 'a', 'b', 'c'], 9) == True\nassert will_it_fly(['b', 'a', 'b', 'c'], 10) == False\nassert will_it_fly(['b', 'a', 'b', 'a'], 10) == True\nassert will_it_fly(['a', 'b', 'c'], 9) == True\nassert will_it_fly(['a', 'b', 'c'], 10) == False\n",
        "num_ids_2": 28,
        "num_ids_4": 75
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     will_it_fly(['a','b','c'], 1) == True, \"Not True\"\nassert     will_it_fly(['b','a','c'], 1) == True, \"Not True\"\nassert     will_it_fly(['b','c','a'], 1) == True, \"Not True\"\nassert     will_it_fly(['c','a','b'], 1) == True, \"Not True\"\nassert     will_it_fly(['a','b','c'], 3) == False, \"Not False\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     will_it_fly([\"R\", \"W\", \"B\", \"W\", \"B\", \"R\"], 100) == True, \"Wrong\"\nassert     will_it_fly([\"R\", \"W\", \"B\", \"W\", \"B\", \"R\"], 100) == False, \"Wrong\"\nassert     will_it_fly([\"R\", \"W\", \"B\", \"W\", \"B\", \"R\"], 100) == True, \"Wrong\"\nassert     will_it_fly([\"R\", \"W\", \"B\", \"W\", \"B\", \"R\"], 100) == False, \"Wrong\"\nassert     will_it_fly([\"R\", \"W\", \"B\", \"W\", \"B\", \"R\"], 100) == True, \"Wrong\"\n",
        "num_ids_2": 72,
        "num_ids_4": 144
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nwill_it_fly([1, 2, 3], 4) == True\nwill_it_fly([1, 2, 3], 5) == False\nwill_it_fly([1, 2, 2], 5) == False\nwill_it_fly([1, 2, 2, 2, 2], 5) == False\nwill_it_fly([1, 1, 1, 1, 1], 5) == False\nwill_it_fly([1, 1, 1, 1, 1], 1) == True\nwill_it_fly([1, 1, 1, 1, 1], 10) == True\nwill_it_fly([1, 1, 1, 1, 1], 100) == True\nwill_it_fly([1, 1, 1, 1, 1], 101) == False\nwill_it_fly([1, 1, 1, 1, 1], 200) == False\nwill_it_fly([1, 1, 1, 1, 1], 0) == False\nwill_it_fly([1, 2, 2], 100) == False\nwill_it_fly([1, 2, 2], 200) == False\nwill_it_fly([1, 2, 2], 400) == False\nwill_it_fly([1, 2, 2], 500) == False\nwill_it_fly([1, 2, 2], 1000) == False\nwill_it_fly([1, 2, 2], 50) == True\nwill_it_fly([1, 2, 2, 2, 2], 50) == True\nwill_it_fly([1, 2, 2, 2, 2], 100) == False\nwill_it_fly([1, 2, 2, 2, 2], 200) == True\nwill_it_fly([1, 2, 2, 2, 2], 400) == False\nwill_it_fly([1, 2, 2, 2, 2], 500) == False\nwill_it_fly([1, 2, 2, 2, 2], 1000) == False\nwill_it_fly([1, 2, 2, 2, 2], 50) == False\nwill_it_fly([1, 2, 2, 2, 2], 100) == False\nwill_it_fly([1, 2, 2, 2, 2], 200) == True\nwill_it_fly([1, 2, 2, 2, 2], 400) == False\nwill_it_fly([1, 2, 2, 2, 2], 500) == True\nwill_it_fly([1, 2, 2, 2, 2], 1000) == True\nwill_it_fly([1, 2, 2, 2, 2], 0) == False\nwill_it_fly([1, 2, 2, 2, 2], 1) == False\nwill_it_fly([1, 2, 2, 2, 2], 10) == False\nwill_it_fly([1, 2, 2, 2, 2], 100) == False\nwill_it_fly([1, 2, 2, 2, 2], 101) == False\nwill_it_fly([1, 2, 2, 2, 2], 200) == False\nwill_it_fly([1, 2, 2, 2, 2], 0) == True\nwill_it_fly([1, 2, 2, 2, 2], 1) == False\nwill_it_fly([1, 2, 2, 2, 2], 10) == False\nwill_it_fly([1, 2, 2, 2, 2], 100) == True\nwill_it_fly([1, 2, 2, 2, 2], 101) == False\nwill_it_fly([1, 2, 2, 2, 2], 200) == False\nwill_it_fly([1, 2, 2, 2, 2], 0) == False\nwill_it_fly([1, 2, 2, 2, 2], 1) == False\nwill_it_fly([1, 2, 2, 2, 2], 10) == False\nwill_it_fly([1, 2, 2, 2, 2], 100) == False\nwill_it_fly([1, 2, 2, 2, 2], 101) == True\nwill_it_fly([1, 2, 2, 2, 2], 200) == False\nwill_it_fly([1, 2, 2, 2, 2], 0) == False\nwill_it_fly([1, 2, 2, 2, 2], 1) == False\nwill_it_fly([1, 2, 2, 2, 2], 10) == False\nwill_it_fly([1, ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     will_it_fly([1, 2, 3], 1) == False\nassert     will_it_fly([1, 2, 3], 0) == True\nassert     will_it_fly([1, 2, 3], 9) == True\nassert     will_it_fly([1, 2, 3], 10) == False\nassert     will_it_fly([], 1) == True\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     will_it_fly([1,2,3,4], 5) == True\nassert     will_it_fly([1,2,3,4,3], 5) == True\nassert     will_it_fly([1,2,3,4,3,4], 5) == False\nassert     will_it_fly([1,2,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,",
        "num_ids_2": 44,
        "num_ids_4": 1022
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     smallest_change(arr_01) ==     1\nassert     smallest_change(arr_02) ==     3\nassert     smallest_change(arr_03) ==     4\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     smallest_change([1,2,3,4,5]) == 1\nassert     smallest_change([1,2,3,4,5,6]) == 2\nassert     smallest_change([1,2,3,4,5,4,3,2,1]) == 3\nassert     smallest_change([1,2,3,4,5,5,5,4,3,2,1]) == 4\nassert     smallest_change([1,2,3,4,5,6,6,6,6,6,6,6,6,5,4,3,2,1]) == 5\n",
        "num_ids_2": 42,
        "num_ids_4": 102
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"Pass\" if (True) else \"Fail\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     smallest_change(['a', 'b', 'c']) == 1\nassert     smallest_change(['a', 'b', 'c', 'd']) == 1\nassert     smallest_change(['a', 'b', 'c', 'd', 'e']) == 1\nassert     smallest_change(['a', 'b', 'c', 'd', 'e', 'f']) == 2\nassert     smallest_change(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 2\n",
        "num_ids_2": 43,
        "num_ids_4": 98
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     smallest_change([1,2,3]) == 3\nassert     smallest_change([4,5,6]) == 1\nassert     smallest_change([2,2,1]) == 1\nassert     smallest_change([1,1,1,1]) == 1\nassert     smallest_change([1,1,1,2,1,1]) == 1\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     smallest_change([-1, 2, 1]) == 3\nassert     smallest_change([-1, 1, 1]) == 1\nassert     smallest_change([-1, 1, 1, 1]) == 0\nassert     smallest_change([1, 1, 1, 1, 1]) == 5\nassert     smallest_change([1, 1, 1, 1, 2, 2, 2, 2, 2, 1]) == 10\n",
        "num_ids_2": 34,
        "num_ids_4": 73
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(total_match(['abc', 'def'], ['abc', 'x']))\nprint(total_match(['abc', 'def'], ['def', 'x']))\nprint(total_match(['abc', 'def'], ['abc', 'x', 'y']))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint('\\n\\nTest 5:')\ntest_cases = [(\"abcde\", [\"cde\"]),\n(\"abcde\", [\"abd\"]),\n(\"abcde\", [\"ad\"]),\n(\"abcde\", [\"abde\"]),\n(\"abcde\", [\"abcde\"]),\n(\"abcde\", [\"abcde\", \"abcde\"]),\n(\"abcde\", [\"abcde\", \"def\"])]\n\nfor test_case in test_cases:\n    assert (total_match(test_case[0], test_case[1]) == test_case[1])\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     total_match([\"abc\", \"abc\", \"abc\", \"abc\"], [\"abc\", \"abc\", \"abc\", \"abc\"]) == [\"abc\", \"abc\", \"abc\", \"abc\"]\nassert total_match([\"abc\", \"abc\", \"abc\", \"abc\"], [\"abc\", \"abc\", \"abc\", \"cde\"]) == [\"abc\", \"abc\", \"abc\", \"abc\"]\nassert total_match([\"abc\", \"abc\", \"abc\", \"abc\"], [\"abc\", \"abc\", \"abc\", \"cde\"]) == [\"abc\", \"abc\", \"abc\", \"abc\"]\nassert total_match([\"abc\", \"abc\", \"abc\", \"abc\"], [\"abc\", \"abc\", \"abc\", \"cde\"]) == [\"abc\", \"abc\", \"abc\", \"abc\"]\n",
        "num_ids_2": 90,
        "num_ids_4": 180
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    total_match(['h', 'e', 'l', 'l', 'o'], \n    ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'o', 'n']\n    total_match(['h', 'e', 'l', 'l', 'o'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'o', 'n']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', 'e', 'l', 'l', 'o', 'n'], ['h', 'e', 'l', 'l', 'o', 'n']) == ['h', 'e', 'l', 'l', 'o']\n    total_match(['h', ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(30) == False\nassert     is_multiply_prime(84) == False\nassert     is_multiply_prime(18) == False\nassert     is_multiply_prime(36) == False\nassert     is_multiply_prime(72) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(1) == False\nassert     is_multiply_prime(2) == False\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(5) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_multiply_prime(3) == True, 'Test 1 failed.'\nassert is_multiply_prime(4) == False, 'Test 2 failed.'\nassert is_multiply_prime(5) == False, 'Test 3 failed.'\nassert is_multiply_prime(6) == True, 'Test 4 failed.'\n",
        "num_ids_2": 23,
        "num_ids_4": 63
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_multiply_prime(9) == True\nassert     is_multiply_prime(7) == False\nassert     is_multiply_prime(0) == False\nassert     is_multiply_prime(27) == True\n\nprint('The program is correct')\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_multiply_prime(100) == True\nassert is_multiply_prime(98) == False\nassert is_multiply_prime(89) == True\n",
        "num_ids_2": 17,
        "num_ids_4": 31
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(1) == False\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(11) == True\nassert     is_multiply_prime(12) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('You should find a function is_simple_power(x, n) that tests if x is a simple power of n')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    is_simple_power(1, 2) == True\n    is_simple_power(2, 4) == True\n    is_simple_power(3, 2) == False\n\nprint(\"Let's test your is_simple_power function!\")\n\ntest1 = is_simple_power(2, 4)\nif test1:\n    print(\"Yay! Your function is correct.\")\nelse:\n    print(\"Boo! Your function is not correct.\")\n\ntest2 = is_simple_power(2, 4)\nif test2:\n    print(\"Yay! Your function is correct.\")\nelse:\n    print(\"Boo! Your function is not correct.\")\n\ntest3 = is_simple_power(3, 2)\nif test3:\n    print(\"Yay! Your function is correct.\")\nelse:\n    print(\"Boo! Your function is not correct.\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # add your own test cases here\n    assert is_simple_power(7, 2) == True\n    assert is_simple_power(7, 3) == False\n    assert is_simple_power(12, 4) == False\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_simple_power(1, 2) == False\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(2, 1) == False\nassert     is_simple_power(2, 0) == False\nassert     is_simple_power(2, 3) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_simple_power(1, 2) == True\nis_simple_power(3, 2) == False\nis_simple_power(2, 4) == True\nis_simple_power(2, -2) == False\nis_simple_power(2, 1) == True\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_simple_power(4, 2) == True\nassert     is_simple_power(4, 5) == False\nassert     is_simple_power(4, 3) == True\nassert     is_simple_power(5, 2) == False\nassert     is_simple_power(2, 4) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (is_simple_power(2, 2)    == True)\nassert     (is_simple_power(2, 3)    == False)\nassert     (is_simple_power(2, 4)    == True)\nassert     (is_simple_power(2, 5)    == False)\nassert     (is_simple_power(2, 6)    == True)\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (is_simple_power(9,3) == True)\nassert     (is_simple_power(6,2) == False)\nassert     (is_simple_power(3,2) == True)\nassert     (is_simple_power(2,4) == False)\nassert     (is_simple_power(9,0) == True)\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not is_simple_power(3, 2)\nassert is_simple_power(9, 2)\nassert is_simple_power(9, 3)\n",
        "num_ids_2": 16,
        "num_ids_4": 40
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     iscube(1) \nassert     not iscube(2)\nassert     iscube(3)\nassert not iscube(4)\nassert iscube(5)\n",
        "num_ids_2": 18,
        "num_ids_4": 34
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert iscube(1) == True\nassert iscube(2) == False\nassert iscube(12) == True\nassert iscube(3) == True\n",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not iscube(6)\nassert iscube(6)\nassert not iscube(7)\nassert iscube(8)\n",
        "num_ids_2": 11,
        "num_ids_4": 26
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert iscube(1) == False\nassert iscube(2) == False\nassert iscube(3) == True\nassert iscube(64) == True\n",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     hex_key(\"1234EF8\") == 2, \"It should return 2\"\nassert     hex_key(\"0123EF8\") == 2, \"It should return 2\"\nassert     hex_key(\"1234EF8A\") == 1, \"It should return 1\"\nassert     hex_key(\"0123EF8A\") == 1, \"It should return 1\"\nassert     hex_key(\"1234EF8AB\") == 2, \"It should return 2\"\n",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     hex_key('#ABCD') == (2, 3, 5, 7)\nassert hex_key('') == tuple()\nassert hex_key('#') == tuple()\nassert hex_key('#') == tuple()\nassert hex_key('#A') == tuple()\n",
        "num_ids_2": 32,
        "num_ids_4": 54
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef hex_key_part2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are not primes (not prime number, not a prime, is a natural \n    number lower than one that is not a product of two smaller natural \n    numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     hex_key('10') == (2, 3, 5, 7, 'B', 'D')\nassert hex_key('AB') == ('A', 'B', 'C', 'D', 'E', 'F')\n\ndef hex_key_for(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and returns the list of its digits \n    in the following order: 2, 3, 5, 7, 'B', 'D'.\n    The input may be either incorrect or empty string, or it may contain \n    letters A,B,C,D,E,F.\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    pass\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     hex_key(\"11\") == 2\nassert     hex_key(\"111\") == 3\nassert     hex_key(\"FF\") == 5\nassert     hex_key(\"FFFF\") == 7\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     hex_key(    \"A2\") == 3, \"incorrect output\"\nassert     hex_key(    \"AF\") == 1, \"incorrect output\"\nassert     hex_key(    \"F2\") == 2, \"incorrect output\"\nassert     hex_key(    \"C2\") == 2, \"incorrect output\"\nassert     hex_key(    \"FF\") == 1, \"incorrect output\"\n",
        "num_ids_2": 39,
        "num_ids_4": 79
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(123) == \"1b11001\"\nassert     decimal_to_binary(1234) == \"1b111011\"\nassert     decimal_to_binary(12345) == \"1b1110111\"\nassert     decimal_to_binary(12345678) == \"1b11101111\"\nassert     decimal_to_binary(123456789) == \"1b11111111\"\n",
        "num_ids_2": 40,
        "num_ids_4": 83
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '101'\nassert     decimal_to_binary(4) == '100'\nassert     decimal_to_binary(5) == '1011'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(6) == \"0b10\"\nassert     decimal_to_binary(10) == \"0b1010\"\nassert     decimal_to_binary(4) == \"0b0100\"\nassert     decimal_to_binary(1) == \"0b0001\"\nassert     decimal_to_binary(1) == \"0b0001\"\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(25) == \"db11101\"\nassert     decimal_to_binary(12) == \"d12\"\nassert     decimal_to_binary(67) == \"d10\"\nassert     decimal_to_binary(3) == \"d1\"\nassert     decimal_to_binary(-3) == \"db1\"\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(9) == '00001001', \"Wrong result\"\nassert     decimal_to_binary(10) == '00010000', \"Wrong result\"\nassert     decimal_to_binary(11) == '00010001', \"Wrong result\"\nassert     decimal_to_binary(12) == '00010010', \"Wrong result\"\nassert     decimal_to_binary(13) == '00001010', \"Wrong result\"\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(2) == '00', 'incorrect'\nassert     decimal_to_binary(3) == '011', 'incorrect'\nassert     decimal_to_binary(4) == '0110', 'incorrect'\nassert     decimal_to_binary(5) == '01101', 'incorrect'\nassert     decimal_to_binary(7) == '011101', 'incorrect'\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert (decimal_to_binary(0) == \"db0\")\nassert (decimal_to_binary(1) == \"db1\")\nassert (decimal_to_binary(2) == \"db10\")\nassert (decimal_to_binary(3) == \"db11\")\n",
        "num_ids_2": 20,
        "num_ids_4": 54
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    # do not modify the code below\ndef main():\n    print(decimal_to_binary(7)) # '0101'\n    print(decimal_to_binary(13)) # '01111'\n    print(decimal_to_binary(4)) # '0100'\n    print(decimal_to_binary(7)) # '0101'\n    print(decimal_to_binary(32)) # '100011011'\n\nif __name__ == '__main__':\n    main(",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(10) == \"101\"\nassert     decimal_to_binary(0) == \"db\"\nassert     decimal_to_binary(13) == \"1101\"\n\n\n",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert is_happy('abba') == True\nassert is_happy('abababab') == False\nassert is_happy('') == True\n",
        "num_ids_2": 13,
        "num_ids_4": 36
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_happy(\"a\") == False\nassert     is_happy(\"aa\") == True\nassert     is_happy(\"aabb\") == True\nassert     is_happy(\"abcabc\") == True\nassert     is_happy(\"aaab\") == True\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_happy('abab') == True\nassert     is_happy('abc') == False\nassert     is_happy('ab') == False\nassert     is_happy('aab') == False\n",
        "num_ids_2": 23,
        "num_ids_4": 46
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_happy('aaa') == True, \"Should be True\"\nassert     is_happy('aab') == False, \"Should be False\"\nassert     is_happy('ab') == False, \"Should be False\"\nassert     is_happy('a') == True, \"Should be True\"\nassert     is_happy('aa') == False, \"Should be False\"\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_happy('anil') == True, \\\n        \"Input: 'anil', Expected Output: True, Actual Output: True\"\nassert     is_happy('anilxy') == True, \\\n        \"Input: 'anilxy', Expected Output: True, Actual Output: False\"\nassert     is_happy('xay') == False, \\\n        \"Input: 'xay', Expected Output: False, Actual Output: False\"\nassert     is_happy('aa') == False, \\\n        \"Input: 'aa', Expected Output: False, Actual Output: False\"\nassert     is_happy('ax') == False, \\\n        \"Input: 'ax', Expected Output: False, Actual Output: False\"\n",
        "num_ids_2": 29,
        "num_ids_4": 56
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_happy('aab')\nassert not is_happy('abba')\nassert is_happy('xzxzx')\nassert is_happy('xxxyyy')\n",
        "num_ids_2": 13,
        "num_ids_4": 32
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nis_happy('') == False\nis_happy('a') == False\nis_happy('aa') == False\nis_happy('aaa') == False\nis_happy('aab') == False\nis_happy('aabcd') == True\nis_happy('cababc') == False\nis_happy('abcabcabc') == False\nis_happy('aaabc') == False\nis_happy('ghiabc') == True",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not is_happy('a') == True, \"a is a sad string\"\nassert not is_happy('aa') == True, \"aa is a happy string\"\nassert is_happy('aaa') == True, \"aaa is a happy string\"\nassert is_happy('b') == False, \"b is a sad string\"\n",
        "num_ids_2": 22,
        "num_ids_4": 59
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_happy(\"hello\")    == False, \"Wrong output\"\nassert     is_happy(\"jxlzj\")    == True, \"Wrong output\"\nassert     is_happy(\"jjj\")    == True, \"Wrong output\"\nassert     is_happy(\"abababc\")    == False, \"Wrong output\"\nassert     is_happy(\"aaaabaaa\")    == False, \"Wrong output\"\n",
        "num_ids_2": 40,
        "num_ids_4": 79
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     numerical_letter_grade([1.0,2.0,3.0,4.0,5.0,6.0]) == ['A','B','C','D','E','F']\nassert numerical_letter_grade([1.0,2.0,3.0,4.0,5.0,6.0]) == ['A','B','C','D','E','F']\nassert numerical_letter_grade([1.0,2.0,3.0,4.0,5.0,6.0]) == ['A','B','C','D','E','F']\nassert numerical_letter_grade([1.0,2.0,3.0,4.0,5.0,6.0]) == ['A','B','C','D','E','F']\nassert numerical_letter_grade([1.0,2.0,3.0,4.0,5.0,6.0]) == ['A','B','C','D','E','F']\n",
        "num_ids_2": 95,
        "num_ids_4": 187
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([3.3, 2.3, 2.0, 2.7, 3.0, 3.3, 4.0, 4.0]) == ['A', 'B', 'C', 'C', 'A', 'A', 'B', 'B']\nprint('[SUCCESS]')\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) \n== ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert numerical_letter_grade([4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0]) == ['A+','A','A-','B+','B','B-','C+','C','C-','D+','D','D-']\n",
        "num_ids_2": 150,
        "num_ids_4": 150
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ngrades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\nletter_grades = numerical_letter_grade(grades)\nprint(letter_grades)\nassert isinstance(letter_grades, list)\nassert 'A' in letter_grades\nassert 'D' in letter_grades\n",
        "num_ids_2": 14,
        "num_ids_4": 32
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'A+', 'B+', 'B+', 'C+', 'C', 'C-', 'C+', 'D+', 'D', 'D-']\n\nprint(\"Test 3 passed\")\n",
        "num_ids_2": 109,
        "num_ids_4": 109
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([3.7, 4.0, 3.3]) == ['A+', 'A', 'A-']\nassert     numerical_letter_grade([3.3, 3.7, 3.3]) == ['A-', 'A+', 'A-']\nassert     numerical_letter_grade([3.0, 2.7, 3.0]) == ['B+', 'B', 'B-']\nassert     numerical_letter_grade([2.7, 2.7, 2.7]) == ['B-', 'B+', 'B-']\nassert     numerical_letter_grade([2.3, 2.7, 2.3]) == ['B-', 'B+', 'B-']\n",
        "num_ids_2": 71,
        "num_ids_4": 142
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n",
        "num_ids_2": 111,
        "num_ids_4": 111
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prime_length(\"\") is False\nassert     prime_length(\"1\") is False\nassert     prime_length(\"2\") is False\nassert     prime_length(\"5\") is False\nassert     prime_length(\"15\") is True\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prime_length(\"a\") is False, \"a is not a prime number\"\nassert     prime_length(\"ab\") is False, \"ab is not a prime number\"\nassert     prime_length(\"abcd\") is False, \"abcd is not a prime number\"\nassert     prime_length(\"abcdefgh\") is True, \"abcdefgh is a prime number\"\n",
        "num_ids_2": 40,
        "num_ids_4": 85
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prime_length('hello') == False\nassert     prime_length('01') == True\nassert     prime_length('9') == True\nassert     prime_length('9999') == True\nassert     prime_length('9.9') == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     prime_length(1) == False\nassert     prime_length(2) == True\nassert     prime_length(4) == False\nassert     prime_length(8) == False\nassert     prime_length(10) == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert prime_length(\"abc\") is False\nassert prime_length(\"12345\") is True\nassert prime_length(\"12\") is False\nassert prime_length(\"1\") is False\n",
        "num_ids_2": 13,
        "num_ids_4": 34
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prime_length(\"\") == False\nassert     prime_length(\" \") == False\nassert     prime_length(\"I love you\") == False\nassert     prime_length(\"hello world\") == False\nassert     prime_length(\"23\") == True\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert prime_length('x') == False\nassert prime_length('abc') == False\nassert prime_length('4') == False\nassert prime_length('2') == True\n",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    assert correct == correct, 'your starts_one_ends function is not working'\n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 7\nassert     starts_one_ends(5) == 12\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     starts_one_ends(10) == 2\nassert     starts_one_ends(100) == 20\nassert     starts_one_ends(1000) == 20\nassert     starts_one_ends(10000) == 20\nassert     starts_one_ends(20000) == 20\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert starts_one_ends(10) == 6\nassert starts_one_ends(9) == 2\nassert starts_one_ends(2) == 1\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(5) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solve(1) == \"1\"\nassert     solve(3) == \"3\"\nassert     solve(4) == \"100\"\nassert     solve(123) == \"211100\"\n\nprint(\"Congratulations! All test cases passed\"",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solve(0) == '0'\nassert     solve(1) == '1'\nassert     solve(15) == '1111'\nassert     solve(16) == '1010'\nassert     solve(1696) == '11111100'\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     solve(1) == \"1\"\nassert     solve(2) == \"10\"\nassert     solve(8) == \"1000\"\nassert     solve(20) == \"10100\"\nassert     solve(200) == \"11000100\"\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert solve(101) == '101'\n\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert solve(10) == \"101\"\nassert solve(100) == \"100\"\nassert solve(10000) == \"10000\"\n",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     solve(123) == \"1011\", \"wrong!\"\nassert     solve(1000) == \"1101\", \"wrong!\"\nassert     solve(1) == \"1\", \"wrong!\"\nassert     solve(10) == \"10\", \"wrong!\"\nassert     solve(15) == \"1111\", \"wrong!\"\n",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solve(12) == '11010', 'FAILED'\nassert     solve(234) == '0010110', 'FAILED'\nassert     solve(123) == '111011', 'FAILED'\nassert     solve(321) == '1001011', 'FAILED'\nprint('PASSED'",
        "num_ids_2": 37,
        "num_ids_4": 75
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solve(1000) == \"110111010111\"\nassert     solve(25) == \"100\"\nassert     solve(34) == \"10011\"\n",
        "num_ids_2": 29,
        "num_ids_4": 42
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add([1, 2, 3, 4, 5]) == [2, 4, 6, 8]\nassert     add([10, 11, 12, 13, 14]) == [12, 14, 16, 18]\nassert     add([1, 2, 3, 4, 5, 6, 7]) == [2, 4, 6, 8]\nassert     add([10, 11, 12, 13, 14, 15, 16]) == [12, 14, 16]\nassert     add([]) == []\n",
        "num_ids_2": 50,
        "num_ids_4": 106
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add([1,2,3,4,5]) ==[1,4,5,2,3], \"Fail to add even at odd\"\nassert     add([1,2,3,4,5]) ==[1,4,5,2,3], \"Fail to add even at odd\"\nassert     add([1,2,3,4,5]) ==[1,4,5,2,3], \"Fail to add even at odd\"\nassert     add([1,2,3,4,5]) ==[1,4,5,2,3], \"Fail to add even at odd\"\nassert     add([1,2,3,4,5]) ==[1,4,5,2,3], \"Fail to add even at odd\"\n",
        "num_ids_2": 70,
        "num_ids_4": 140
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add([2,4,6,8,10]) == [4,6,8,10]\nassert     add([2,2,3,4,4]) == [2,2,4,4,4]\nassert     add([1,2,3,4]) == [1,2,3,4]\nprint('Congratulations! You are ready to check your solution.')\n",
        "num_ids_2": 52,
        "num_ids_4": 75
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert add([1,2,3,4,5,6,7,8,9]) == [2,4,6,8]\n    assert add([1,2,3,4,5]) == []\n    assert add([]) == []",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add([1, 2, 3, 4]) == [4]\nassert     add([3, 4, 5, 6]) == [4, 8]\nassert     add([-1, -2, -3, -4]) == [-2, -4]\nassert     add([-6, -7, -8, -9]) == [-10]",
        "num_ids_2": 36,
        "num_ids_4": 81
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nadd([]) == []\nadd([1]) == []\nadd([1,2]) == [2]\nadd([1,2,3]) == [2,3]\nadd([2,1,3]) == [3]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     anti_shuffle('what time are we?') == 'g posy wyst apet tm apet pos tm we'\nassert     anti_shuffle('have a nice day') == 'g hea vday lah yl'\nassert     anti_shuffle('keep trying') == 'ght ett yt rtry'\nassert     anti_shuffle('be careful') == 'b eerh cun tm'\n",
        "num_ids_2": 58,
        "num_ids_4": 102
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     anti_shuffle(\"This is the best\") == \"best is This\", \"Should be best is this\"\nassert     anti_shuffle(\"This is the best\") == \"is best This\", \"Should be is best this\"\nassert     anti_shuffle(\"This is a test\") == \"test a This\", \"Should be test a this\"\nassert     anti_shuffle(\"I like to eat fish and chips\") == \"chips I like to eat fish and fish and chips\", \"Should be chips I like to eat chips and chips and chips\"\nprint(\"You passed all the tests!\")",
        "num_ids_2": 52,
        "num_ids_4": 122
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    string = \"The quick brown fox jumps over the lazy dog\"\n    print(anti_shuffle(string))\n    string = \"This is an amazing tool for solving any problems on math equations!\"\n    print(anti_shuffle(string))\n    string = \"This is a very important tool for solving any problems\"\n    print(anti_shuffle(string)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     anti_shuffle(\n                    'abcd efg'\n                    ) == 'bcd efg'\nassert     anti_shuffle(\n                    'x y z'\n                    ) == 'zyx'\nassert     anti_shuffle(\n                    'hello world'\n                    ) == 'worldhello'\nassert     anti_shuffle(\n                    '   hello   world'\n                    ) == 'worldhello'\nassert     anti_shuffle(\n                    ''\n                    ) == ''\n",
        "num_ids_2": 16,
        "num_ids_4": 32
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(anti_shuffle('hello world'))\n\nassert \nprint(anti_shuffle('hello    world'))\n\nassert \nprint(anti_shuffle('hello     world'))\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_row([[1,2,3,4,5],\n                  [2,3,4,5,6],\n                  [3,4,5,6,7]],\n                  1) == [(0,0),(1,0),(2,0),(0,1),(0,2),(0,3),(0,4)]\nassert     get_row([[1,2,3,4,5],\n                  [2,3,4,5,6],\n                  [3,4,5,6,7]],\n                  0) == [(0,0),(0,1),(0,2),(0,3),(0,4),(1,0),(1,1),(1,2),(1,3),(1,4),(2,0),(2,1),(2,2),(2,3),(2,4),(3,0),(3,1),(3,2),(3,3),(3,4),(4,0),(4,1),(4,2),(4,3),(4,4)]\nassert     get_row([[1,2,3,4,5],\n                  [2,3,4,5,6],\n                  [3,4,5,6,7]],\n                  2) == [(2,0),(2,1),(2,2),(2,3),(2,4),(3,0),(3,1),(3,2),(3,3),(3,4),(4,0),(4,1),(4,2),(4,3),(4,4)]\n\ndef get_max_rows(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_get_row():\n    assert \n\ndef get_col(lst, y):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer y, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"Testing get_row\")\nprint('Test 1')\nlst = [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]]\n\nx = 1\ncoords = get_row(lst, x)\nassert len(coords) == 2\nassert coords == [(0, 0), (1, 2)]\n",
        "num_ids_2": 12,
        "num_ids_4": 27
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef get_column(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([1, 2, 4, 3, 5, 9]) == [[1, 2, 3, 4, 5, 9], \n                                              [1, 2, 4, 5, 9, 3], \n                                              [1, 2, 4, 3, 5, 9]]\n\nassert     sort_array([1, 2, 3, 4, 5]) == [[1, 2, 3, 4, 5], \n                                              [1, 2, 3, 4, 5]]\n\nassert     sort_array([9, 8, 7, 6, 5]) == [[6, 5, 7, 8, 9], \n                                              [5, 6, 7, 8, 9]]\n",
        "num_ids_2": 64,
        "num_ids_4": 94
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\nprint(sort_array([10, 2, 6, 9, 3, 11, 7]))\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_array([]) == []\nassert     sort_array([4]) == [4]\nassert     sort_array([1, 2, 4]) == [1, 2, 4]\nassert     sort_array([1, 2, 4, 6]) == [1, 2, 4, 6]\nassert     sort_array([-3, -1, 1, 3, 5]) == [-1, 1, 3, 5, -3]\n",
        "num_ids_2": 23,
        "num_ids_4": 69
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([1, 4, 2, 3, 8, 7, 6, 9, 5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_array([1, 4, 2, 3, 8, 7, 6, 9, 5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_array([1, 4, 2, 3, 8, 7, 6, 9, 5]) == [-9, -8, -7, -6, -5, -4, -3, -2, -1]\nassert     sort_array([-1, -4, -2, -3, -8, -7, -6, -9, -5]) == [-5, -6, -7, -8, -9, -3, -2, -1, -4]\nassert     sort_array([5, 1, 3, 6, -1, -2, 9, 8, 7]) == [-2, -1, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n",
        "num_ids_2": 90,
        "num_ids_4": 205
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sort_array([5,4,3,2,1]) == [1,2,3,4,5]\nassert     sort_array([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     sort_array([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]\nassert     sort_array([5,4,3,2,1,9,8,7,6]) == [1,2,3,4,5,6,7,8,9]\n",
        "num_ids_2": 58,
        "num_ids_4": 148
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_array([1, 2, 5, 4, 3, 6, 10]) == [1, 2, 3, 4, 5, 6, 10]\nassert     sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sort_array([1, 2, 3, 5, 4, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sort_array([1, 2, 3, 4, 5, 4, 5]) == [1, 2, 3, 4, 4, 5, 5]\nassert     sort_array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]\n",
        "num_ids_2": 70,
        "num_ids_4": 140
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array([1, 3, 5, 2, 6]) == [1, 2, 3, 5, 6], \"Wrong\"\nassert     sort_array([3, 2, 1, 4, 5]) == [1, 2, 3, 4, 5], \"Wrong\"\nassert     sort_array([-5, -4, -3, -2, -1]) == [-1, -2, -3, -4, -5], \"Wrong\"\nassert     sort_array([-10, -8, -1, -4, -3, -6, -10]) == [-10, -8, -1, -3, -4, -6, -10], \"Wrong\"\n",
        "num_ids_2": 66,
        "num_ids_4": 162
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_array([4, 2, 5, 3, 6, 1, 7, 0, 9, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_array([]) == []\n\nprint(sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(sort_array([4, 2, 5, 3, 6, 1, 7, 0, 9, 8]))\nprint(sort_array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]))\nprint(sort_array([])",
        "num_ids_2": 98,
        "num_ids_4": 157
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sort_array([5,4,3,2,1]) == [1,2,3,4,5]\nassert     sort_array([1,2,3,4,5,0]) == [0,1,2,3,4,5]\n",
        "num_ids_2": 58,
        "num_ids_4": 91
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    \"\"\"\n    >>> encrypt('hello')\n    'hi'\n    >>> encrypt('a')\n    'b'\n    >>> encrypt('a')\n    'c'\n    >>> encrypt('a')\n    'c'\n    >>> encrypt('a')\n    'c'\n    \"\"\"\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument \n    and returns a string that is encrypted with the alphabet being \n    rotated in a manner such that the letters shift up by two multiplied to two places. \n    This function should be exactly the inverse of encrypt.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert encrypt(\"My name is John!\") == \"Kpzcqxnfvh\"\nassert encrypt(\"Abc\") == \"cba\"\nassert encrypt(\"1234\") == \"3412\"\nassert encrypt(\"HELLO\") == \"XxOoX\"\n",
        "num_ids_2": 26,
        "num_ids_4": 50
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert encrypt(\"a\") == \"b\"\nassert encrypt(\"ab\") == \"c\"\nassert encrypt(\"abc\") == \"bc\"\nassert encrypt(\"abcde\") == \"cdea\"\n",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(next_smallest([1,2,5,7,10,20,100]))\nassert next_smallest([2,1,5,7,10,20,100]) == None\nassert next_smallest([100,100,100,100,100,100]) == None\nassert next_smallest([100,100,100,100,100,100]) == None",
        "num_ids_2": 26,
        "num_ids_4": 68
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(next_smallest([5,1,4,2,5])) # == 1\nassert \nprint(next_smallest([3,2,1,5])) # == None\nassert \nprint(next_smallest([0,0,0,0,0,0])) # == None\nassert \nprint(next_smallest([5,1,1,1,1,1])) # == 1\nprint('Next_smallest is passed all test cases.')\n\n\n\"\"\"\nChallenge 3. \n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    # TODO:\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_smallest([10, 2, 5]) == 2\nassert     next_smallest([1, 2, 3]) == 2\nassert     next_smallest([]) == None\nassert     next_smallest([0, 0, 1, 2]) == 1\nassert     next_smallest([10, 10, 10]) == None\n",
        "num_ids_2": 32,
        "num_ids_4": 61
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert next_smallest([4,6,2,1,5,3]) == 1\n    assert next_smallest([4,6,2,1,5,3,1,2,6]) == 1\n    assert next_smallest([1]) == None\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nlst = [1,2,3,4,5]\nassert next_smallest(lst) == 4, 'Check next_smallest!'\n\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert is_bored(\"I am a programmer\") == 2\nassert is_bored(\"I am a programmer? I am a programmer\") == 4\nassert is_bored(\"I am a programmer? I am a programmer!?\") == 1\nassert is_bored(\"I am a programmer? I am a programmer. I am a programmer\") == 0",
        "num_ids_2": 17,
        "num_ids_4": 56
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_bored('I.am bored of your words, I.am bored of my life.') == 1\nassert is_bored('I.am bored of your words') == 0\nassert is_bored('I.am not bored of your words.') == 0\nassert is_bored('I.am not bored of your words,') == 0\nassert is_bored('I.am bored of your words.', '?') == 0\n",
        "num_ids_2": 44,
        "num_ids_4": 82
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_words(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of words in it that start with 'I'. Sentences are delimited by '.', '?'\n    or '!'.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_bored(\n    \"I. Did I stay in bed for hours?\") == 1\nassert is_bored(\n    \"Did I stay in bed for hours?\") == 1\nassert is_bored(\n    \"Did I stay in bed for hours!\") == 0\nassert is_bored(\n    \"I. Did I stay in bed for hours?\") == 0\n",
        "num_ids_2": 10,
        "num_ids_4": 24
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_bored('I am bored.')\nassert     is_bored('I am not bored.')\nassert     is_bored('I am bored. I am not bored.')\n",
        "num_ids_2": 27,
        "num_ids_4": 45
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_bored(\"I like eating food. It's so delicious!\") == 1\nassert     is_bored(\"The five boxing wizards jump quickly.\") == 3\nassert     is_bored(\"I've been scared of animals. I hate to talk about them\") == 1\n",
        "num_ids_2": 38,
        "num_ids_4": 62
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    is_bored(\"I.am a bored kid\") == 1\n    is_bored(\"I.am a bored kid. What's your favorite color?\") == 0\n    is_bored(\"Are you a bored kid?\") == 0\n    is_bored(\"I am a bored kid\") == 0\n    is_bored(\"I.am a bored kid.\") == 0\n    is_bored(\"I am a bored kid, what's your favorite color?\") == 1\n\ndef is_bored(sentence):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    words = sentence.split('.')\n    boredoms = 0\n    for word in words:\n        if word.lower() == 'i':\n            boredoms += 1\n    return boredoms\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not is_bored(\"This is a test.\")\nassert is_bored(\"I'm bored\")\nassert not is_bored(\"I'm not bored\")\nassert is_bored(\"I'm bored, I'm bored\")\n",
        "num_ids_2": 16,
        "num_ids_4": 40
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert any_int(2,2,2) == True\nassert any_int(2,2,1) == False\nassert any_int(2,1,2) == False\nassert any_int(2,2,1.5) == False\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nany_int(1,2,3) == True\nany_int(1,2,3.4) == False\nany_int(1,2,1.4) == True\nany_int(1,2,3.6) == False\nany_int(2,2,3) == True\nany_int(2,2,3.4) == False\nany_int(2,2,1.4) == True\nany_int(2,2,3.6) == False\nany_int(2,2,2) == True\nany_int(3,2,2) == False\nany_int(1,1,1) == False\nany_int(1,2,1.4) == True\nany_int(1,1,1.4) == True\nany_int(1,1,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,3,1.4) == True\nany_int(1,3,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,3,1.4) == True\nany_int(1,3,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) == True\nany_int(1,2,1.4) =",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     any_int(1, 1, 1) == True\nassert     any_int(1, 2, 1) == False\nassert     any_int(1, 1, 1.5) == False\nassert     any_int(1, 1, 1.5) == False\nassert     any_int(1, 1, 1.5) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     any_int(5, 4, 6) == True, \"5+4=9, 5==9\"\nassert any_int(4, 9, 3) == False, \"4+9=13, 4!=13\"\nassert any_int(6, 9, 3) == False, \"6+9=13, 6!=13\"\nassert any_int(10, 10, 10) == True, \"10+10=20, 10==20\"\nassert any_int(5, 10, 5) == False, \"5+10=15, 5!=15\"\n",
        "num_ids_2": 54,
        "num_ids_4": 107
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nany_int(1, 2, 3)\nany_int(1.1, 2.1, 3.1)\nany_int(1.1, 2.1, 3.5)\nany_int(1, 2, 3.3)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     any_int(1, 2, 3) == True, 'The first argument'\nassert     any_int(1, 2, 3) == False, 'The second argument'\nassert     any_int(1, 2, 3) == False, 'The third argument'\nassert     any_int(1, 2, 3) == False, 'The fourth argument'\nassert any_int(1, 2, 3) == False, 'The fifth argument'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     any_int(1, 1, 1) == True, 'Wrong answer'\nassert any_int(1, 1, 1) == False, 'Wrong answer'\nassert any_int(0, 1, 1) == False, 'Wrong answer'\nassert any_int(0, 0, 1) == False, 'Wrong answer'\nassert any_int(1, 0, 1) == False, 'Wrong answer'\n",
        "num_ids_2": 41,
        "num_ids_4": 81
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     encode(\"the quick brown fox jumps over the lazy dog\") == \\\n    \"hIqJ uMmwXx fjf opeY uvXf yxuwg\"\n\nassert     encode(\"the quick brown fox jumps over the lazy dog\") == \\\n    \"hIqJ uMmwXx fjf opeY uvXf yxuwg\"",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     encode(\"This is a test.\") == \"tHs iS a TeSt\"\nassert     encode(\"This is a test.\") == \"tHs iS a TeSt\"\nassert     encode(\"No\") == \"no\"\nassert     encode(\"HeLlO\") == \"hElLo\"",
        "num_ids_2": 44,
        "num_ids_4": 73
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert encode('This is the correct message') == 'hT sT iT sT'\nassert encode('This is the correct message') == 'hT S tI t S t'\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n",
        "num_ids_2": 23,
        "num_ids_4": 44
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    encode(\"Hello World!\") == \"hElLo WOrlD!\"\n\nassert encode(\"hello\") == \"hElLo\"\nassert encode(\"heLLo\") == \"hElLo\"\nassert encode(\"hello world\") == \"hElLo WOrlD\"\n",
        "num_ids_2": 15,
        "num_ids_4": 46
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert encode(\"HELLO\") == \"hElLo\"\nassert encode(\"REAL\") == \"aREaL\"\nassert encode(\"Bai\") == \"baAi\"\nassert encode(\"Cafes\") == \"cAfeS\"\n",
        "num_ids_2": 17,
        "num_ids_4": 44
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert skjkasdkd([10,4,3,1]) == 15\nassert skjkasdkd([1,2,3,4]) == 6\nassert skjkasdkd([9,11,12,0]) == 36\n",
        "num_ids_2": 21,
        "num_ids_4": 57
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     skjkasdkd([3, 4, 5, 6]) == 18\nassert     skjkasdkd([2, 3, 4, 5]) == 10\nassert     skjkasdkd([1, 2, 3, 4, 5]) == 15\nassert     skjkasdkd([5, 9, 3, 7]) == 18\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 23\n",
        "num_ids_2": 38,
        "num_ids_4": 78
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     skjkasdkd([2, 2])    == 6\nassert     skjkasdkd([2, 3])    == 6\nassert     skjkasdkd([2, 4])    == 6\nassert     skjkasdkd([1, 1])    == 1\nassert     skjkasdkd([2, 3, 4]) == 15\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     skjkasdkd([1, 9, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == 57, 'wrong answer'\nassert     skjkasdkd([1, 9, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 57, 'wrong answer'\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    dict = {'one': 'One', 'two': 'Two'}\n    print(check_dict_case(dict))\n\n    dict = {}\n    print(check_dict_case(dict))\n\n    dict = {'one': 'One', 'two': 'two'}\n    print(check_dict_case(dict))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_dict_case({\"A\":1, \"B\":2})\nassert     check_dict_case({\"a\":1, \"b\":2})\nassert     check_dict_case({\"a\":1, \"A\":2})\nassert     check_dict_case({\"A\":1, \"a\":2})\nassert     check_dict_case({\"a\":1, \"A\":2}) == False\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_dict_case({}) is False\nassert     check_dict_case({'a': 1}) is False\nassert     check_dict_case({'A': 1}) is False\nassert     check_dict_case({'A': 1, 'b': 2}) is True\n",
        "num_ids_2": 28,
        "num_ids_4": 65
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_dict_case({}) == False, 'Dictionary is empty'\nassert     check_dict_case({'a':'A', 'b':'B', 'c':'C', 'd':'D'}) == False, 'All keys are in lower case'\nassert     check_dict_case({'A':'a', 'B':'B', 'C':'c', 'D':'d'}) == False, 'All keys are in upper case'\nassert     check_dict_case({'a':'A', 'b':'B', 'c':'C', 'd':'D'}) == True, 'All keys are in lower case'\n\n\ndef check_string_case(str):\n    \"\"\"\n    Given a string, return True if all characters are in lower case, \n    else return False.\n    The function should return False if the given string is empty or \n    does not consist of one or more alphabets.\n    \"\"\"\n    pass\n",
        "num_ids_2": 64,
        "num_ids_4": 154
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(check_dict_case({'a':1, 'b':2})) ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_dict_case({}) is False, 'Empty dictionary'\nassert     check_dict_case({'one': 1, 'Two': 2, 'Three': 3}) is False, 'Wrong'\nassert     check_dict_case({'one': 1, 'TWO': 2, 'thREE': 3}) is True, 'All in lower case'\nassert     check_dict_case({'ONE': 1, 'TWO': 2, 'THREE': 3}) is True, 'All in upper case'\nassert     check_dict_case({'One': 1, 'two': 2, 'Three': 3}) is True, 'All in upper case'\n",
        "num_ids_2": 48,
        "num_ids_4": 118
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         check_dict_case({'a': 1, 'b': 2, 'c': 3, 'd': 4})\nassert not    check_dict_case({})\nassert not    check_dict_case(None)\n",
        "num_ids_2": 40,
        "num_ids_4": 52
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('Test Case 1')\ndict_1 = {\n    \"a\":1,\n    \"b\":2,\n    \"c\":3\n}\nassert check_dict_case(dict_1) == False\n\nprint('Test Case 2')\ndict_2 = {}\nassert check_dict_case(dict_2) == True\n",
        "num_ids_2": 17,
        "num_ids_4": 31
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_dict_case({\"ABC\":123,\"ABC\":123,\"ABC\":123,\"ABC\":123})\nassert     not check_dict_case({\"ABC\":123,\"ABC\":123})\nassert     not check_dict_case({\"ABC\":123,\"ABC\":123,\"ABC\":123})\n",
        "num_ids_2": 45,
        "num_ids_4": 68
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_up_to(2) == [2]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\nassert     count_up_to(100000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2383, 2389",
        "num_ids_2": 58,
        "num_ids_4": 1023
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_up_to(2) == [2]\nassert count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(20) == [2, 3, 5, 7, 11]\n\ndef count_up_to_2():\n    n = int(input())\n    \n    return count_up_to(n)\n",
        "num_ids_2": 17,
        "num_ids_4": 59
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \nassert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19]\n",
        "num_ids_2": 6,
        "num_ids_4": 34
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_up_to(1) == []\nassert     count_up_to(4) == [2]\nassert     count_up_to(5) == [2,3]\nassert     count_up_to(8) == [2,3,4,5,6,7,8]\nassert     count_up_to(10) == [2,3,4,5,6,7,8,9,10]\n",
        "num_ids_2": 28,
        "num_ids_4": 72
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    # There are only prime numbers less than 100\n    assert count_up_to(100) == [2,3,5,7]\n    # There are only prime numbers less than 200\n    assert count_up_to(200) == [2,3,5,7,11,13]\n    # There are only prime numbers less than 1,000\n    assert count_up_to(1000) == [2,3,5,7,11,13,17,19]\n    # There are only prime numbers less than 10,000\n    assert count_up_to(10000) == [2,3,5,7,11,13,17,19,23,29]\n    # There are only prime numbers less than 100,000\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_up_to(1) == []\nassert count_up_to(2) == [1]\nassert count_up_to(3) == [1, 2]\nassert count_up_to(5) == [1, 2, 3, 5]\nassert count_up_to(7) == [1, 2, 3, 5, 7]\n",
        "num_ids_2": 27,
        "num_ids_4": 63
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_up_to(100) == [2,3,5,7]\nassert     count_up_to(5) == [2,3,5]\n\ndef count_up_to_except_1(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    pass\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert multiply(11, 1) == 11\nassert multiply(1, 11) == 11\nassert multiply(11, 11) == 11\nassert multiply(0, 11) == 0\n",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_largest_multiple(min_num, max_num):\n    \"\"\"Complete the function that takes two integers and returns \n    the largest multiple of the two input numbers that is \n    less than or equal to max_num.\n    Assume the input is always valid.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert multiply(1111, 2) == 12345\nassert multiply(567, 5678) == 112345\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    assert multiply(12, 34) == 84, \"Wrong answer.\"\n\nprint(\"PASSED\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply(1234, 2445) == 9674\nassert     multiply(123, 456) == 312\nassert     multiply(967, 456) == 456\nassert     multiply(983, 456) == 456\nassert     multiply(981, 456) == 456\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply(45, 72) == 720\nassert multiply(1234, 5678) == 56789\nassert multiply(45, 72) == 720\nassert multiply(1234, 5678) == 56789\n",
        "num_ids_2": 27,
        "num_ids_4": 51
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert multiply(2, 3) == 18, \"Should be 18\"\nassert multiply(3, 2) == 18, \"Should be 18\"\nassert multiply(9, 9) == 81, \"Should be 81\"\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert multiply(2, 7) == 7\nassert multiply(8, 5) == 40\nassert multiply(1, 1) == 1",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_upper('U') == 0, 'U'\nassert count_upper('A') == 0, 'A'\nassert count_upper('E') == 1, 'E'\nassert count_upper('I') == 0, 'I'\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef test_count_upper():\n    assert count_upper('CodingAcademy') == 2\n    assert count_upper('CodingAcademy') == 2\n    assert count_upper('CodingAcademy') == 2\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_upper(\"\") == 0\nassert count_upper(\"a\") == 0\nassert count_upper(\"A\") == 0\nassert count_upper(\"aa\") == 0\n",
        "num_ids_2": 12,
        "num_ids_4": 32
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_upper(\"\") == 0\nassert count_upper(\"A\") == 1\nassert count_upper(\"B\") == 1\nassert count_upper(\"AB\") == 0\n",
        "num_ids_2": 12,
        "num_ids_4": 32
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     closest_integer(\"-14.5\") == -15\nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"15.5\") == 15\nassert closest_integer(\"-15.5\") == -15\nassert closest_integer(\"17.5\") == 17\n",
        "num_ids_2": 29,
        "num_ids_4": 55
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     closest_integer(\"14.5\") == 14\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14\") == 15\nassert     closest_integer(\"14.3\") == 14\nassert     closest_integer(\"14.5\") == 15\n",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    closest_integer(\"14.5\") == 15\nassert \n    closest_integer(\"14\") == 14\nassert \n    closest_integer(\"-14.5\") == -15\nassert \n    closest_integer(\"-14\") == -14\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n'''\nYou've finally arrived at your first test case. \nIt's time to test your code! \nYou should be able to run only one test in the main function.\n\nYou've got the right solution! \n'''\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert    closest_integer(\"14.5\") == 15\nassert    closest_integer(\"14.4\") == 14\nassert    closest_integer(\"-14.4\") == -14\nassert    closest_integer(\"14.999\") == 15\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(closest_integer(\"14.5\")) # should print 15\nprint(closest_integer(\"-14.5\")) # should print -15\nprint(closest_integer(\"4.5\")) # should print 4\nprint(closest_integer(\"-4.5\")) # should print -",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     closest_integer(\"14.5\")    == 15\nassert     closest_integer(\"-14.5\")    == -15\nassert     closest_integer(\"14.000000001\")    == 15\nassert     closest_integer(\"-14.000000001\")    == -15\nassert     closest_integer(\"14.999999999\")    == 15\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert    closest_integer(\"-14.5\") == -15\nassert    closest_integer(\"1.5\") == 1\nassert    closest_integer(\"-1.5\") == -1\nassert    closest_integer(\"4.5\") == 4\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14\") == 15\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     make_a_pile(3) == [3, 4, 5]\nassert     make_a_pile(2) == [2, 4]\nassert     make_a_pile(10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nassert     make_a_pile(3) == [3, 4, 5]\n",
        "num_ids_2": 38,
        "num_ids_4": 92
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     make_a_pile(1) == [1], \"1st test case\"\nassert     make_a_pile(2) == [1, 1], \"2nd test case\"\nassert     make_a_pile(3) == [1, 1, 1], \"3rd test case\"\nassert     make_a_pile(4) == [1, 1, 1, 1], \"4th test case\"\nassert     make_a_pile(5) == [1, 1, 1, 1, 1], \"5th test case\"\n",
        "num_ids_2": 46,
        "num_ids_4": 100
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     make_a_pile(1) ==    [1]\nassert     make_a_pile(2) ==    [1, 1]\nassert     make_a_pile(3) ==    [1, 1, 1]\nassert     make_a_pile(4) ==    [1, 1, 1, 1]\nassert     make_a_pile(5) ==    [1, 1, 1, 1, 1]\n",
        "num_ids_2": 36,
        "num_ids_4": 80
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         make_a_pile(4) == [4, 2, 2, 1, 1]\nassert         make_a_pile(3) == [3, 1, 1, 1]\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert make_a_pile(1) == [1]\nassert make_a_pile(3) == [3, 1]\nassert make_a_pile(6) == [6, 8, 4, 2, 1]\nassert make_a_pile(7) == [7, 9, 5, 3, 1, 1, 1]\n",
        "num_ids_2": 18,
        "num_ids_4": 58
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     make_a_pile(2) == [1,1]\nassert     make_a_pile(3) == [2,1]\nassert     make_a_pile(4) == [3,2]\nassert     make_a_pile(5) == [4,3]\nassert     make_a_pile(6) == [5,4]\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     make_a_pile(3) == [3, 2, 2, 2, 1, 1, 1, 1]\nassert     make_a_pile(10) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 2, 2, 2, 1, 1, 1, 1]\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 2, 1, 1]\nassert     make_a_pile(5) == [1, 2, 2, 1, 1]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert words_string(\"Hi, how are you?\") == [\"Hi\", \"how\", \"are\", \"you?\"]\nassert words_string(\"Hi, how are you!\") == [\"Hi\", \"how\", \"are\", \"you\"]\n",
        "num_ids_2": 30,
        "num_ids_4": 56
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert words_string('this,is,an,example') == ['this', 'is', 'an', 'example']\nassert words_string('this,is, an, example') == ['this', 'is', 'an', 'example']\n\nassert words_string('hello,world,how,are,you,today') == ['hello', 'world', 'how', 'are', 'you', 'today']\n",
        "num_ids_2": 30,
        "num_ids_4": 94
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     words_string('hello,world') == ['hello', 'world']\nassert     words_string('hello,world,and,I') == ['hello', 'world', 'and', 'I']\nassert     words_string('hello,world and and I') == ['hello', 'world', 'and', 'I']\nassert     words_string('and') == ['and']\nassert     words_string('hello,world,') == ['hello', 'world', '']\n",
        "num_ids_2": 46,
        "num_ids_4": 86
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef number_of_words_string(s):\n    \"\"\"\n    You will be given a string of words. Your task is to find the number of words in the\n    string.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     words_string('This, is, a, sample, of, a, word') == ['This', 'is', 'a','sample', 'of', 'a', 'word']\nassert     words_string('This, is, a, sample, of, a, word, however') == ['This', 'is', 'a','sample', 'of', 'a', 'word']\nassert     words_string('This is a sample of word.') == ['This', 'is', 'a','sample', 'of', 'a', 'word']\nassert     words_string('This, is, a, sample, of, a, word, however') == ['This', 'is', 'a','sample', 'of', 'a', 'word']\nassert     words_string('This, is, a, sample, of, a, word, however, ') == ['This', 'is', 'a','sample', 'of', 'a', 'word']\n",
        "num_ids_2": 86,
        "num_ids_4": 166
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     words_string(\n        \"hello world, this is a string with comma, 1, 2, 3, and 4\"\n        ) == [\"hello\", \"world\", \"this\", \"is\", \"a\", \"string\", \"with\", \"comma\", \"1\", \"2\", \"3\", \"and\", \"4\"]\nassert     words_string(\n        \"hello world, this is a string with comma, 1, 2, 3, and 4 and a space\"\n        ) == [\"hello\", \"world\", \"this\", \"is\", \"a\", \"string\", \"with\", \"comma\", \"1\", \"2\", \"3\", \"and\", \"4\", \"and\", \"a\", \"space\"]\nassert     words_string(\n        \"hello world, this is a string with comma, 1, 2, 3, and 4 and 1 space\"\n        ) == [\"hello\", \"world\", \"this\", \"is\", \"a\", \"string\", \"with\", \"comma\", \"1\", \"2\", \"3\", \"and\", \"4\", \"and\", \"1\", \"space\"]\nassert     words_string(\n        \"hello world, this is a string with comma, 1, 2, 3, and 4 and a space\"\n        ) == [\"hello\", \"world\", \"this\", \"is\", \"a\", \"string\", \"with\", \"comma\", \"1\", \"2\", \"3\", \"and\", \"4\", \"and\", \"a\", \"space\"]\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     words_string(\"hello, world\") == ['hello', 'world']\nassert     words_string(\"hello\") == [\"hello\"]\nassert     words_string(\"hello, world, a,b,c\") == ['hello', 'world', 'a', 'b', 'c']\nassert     words_string(\"hello, world, a,b,c,hello world\") == ['hello', 'world', 'a', 'b', 'c', 'hello', 'world']\n\nprint(\"You've successfully passed the tests!\")",
        "num_ids_2": 31,
        "num_ids_4": 106
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     words_string(\"one,two,three,four,five\") == ['one', 'two', 'three', 'four', 'five'], \"failed\"\nassert     words_string(\"one, two,three,four, five\") == ['one', 'two', 'three', 'four', 'five'], \"failed\"\nassert     words_string(\"one, two,three, four, five\") == ['one', 'two', 'three', 'four', 'five'], \"failed\"\n\ndef words_string_2(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words in no particular\n    order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 74,
        "num_ids_4": 111
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     choose_num(1, 4) == 2\nassert     choose_num(2, 4) == -1\nassert     choose_num(3, 4) == -1\nassert     choose_num(4, 4) == 4\nassert     choose_num(5, 4) == -1\n",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    choose_num(1, 2) == 2\n    choose_num(2, 3) == -1\n    choose_num(3, 4) == -1\n    choose_num(4, 5) == -1\n    choose_num(5, 6) == 6\n    choose_num(6, 7) == 7\n    choose_num(7, 8) == -1\n    choose_num(8, 9) == -1\n    choose_num(9, 10) == 10\n    choose_num(10, 11) == -1\n    choose_num(1, 10) == -1\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     choose_num(1, 11) == 10\nassert     choose_num(1, 10) == 10\nassert     choose_num(11, 20) == -1",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     choose_num(2, 5) == -1\nassert     choose_num(2, 7) == 6\nassert     choose_num(2, 2) == 2\nassert     choose_num(2, 1) == 2\nassert     choose_num(1, 100) == -1\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     choose_num(5, 10) == 10\nassert     choose_num(10, 20) == 20\nassert     choose_num(5, 15) == -1\nassert     choose_num(1, 10) == 10\nassert     choose_num(20, 100) == 20\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(choose_num(1, 2))    \nprint(choose_num(1, 3))    \nprint(choose_num(3, 6))    \nprint(choose_num(9, 13))    \nprint(choose_num(10, 11))    \nprint(choose_num(100, 200))    \nprint(choose_num(10, 11))    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     choose_num(10, 20) == 20\nassert     choose_num(10, 30) == -1\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rounded_avg(0, 1) == 0\nassert     rounded_avg(0, 2) == 0\nassert     rounded_avg(1, 2) == 1\nassert     rounded_avg(0, 0) == -1\nassert     rounded_avg(1, 1) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nrounded_avg(2, 3) == 1\nassert rounded_avg(5, 7) == 4\nassert rounded_avg(5, 8) == 5\nassert rounded_avg(0, 1) == 0\nassert rounded_avg(1, 1) == 0\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nrounded_avg(3,4) == 1\nrounded_avg(5,7) == 2\nrounded_avg(6,7) == 2\nrounded_avg(1,4) == 1\nrounded_avg(1,2) == 0\nrounded_avg(5,6) == -",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rounded_avg(7, 8) == 4.0\nassert    rounded_avg(10, 8) == 5.0\nassert rounded_avg(8, 10) == 5.0\n\ndef gcd(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute their GCD.\n    \"\"\"\n    pass\n",
        "num_ids_2": 32,
        "num_ids_4": 47
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nrounded_avg(4, 3) == 1\nassert rounded_avg(4, 4) == 1\nassert rounded_avg(6, 4) == 2\nassert rounded_avg(6, 6) == 1\nassert rounded_avg(4, 7) == -1\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nrounded_avg(1, 1) == 1\nrounded_avg(1, 2) == 1\nrounded_avg(1, 3) == 1\nrounded_avg(1, 4) == 1\nrounded_avg(2, 1) == 2\nrounded_avg(2, 2) == 2\nrounded_avg(2, 3) == 2\nrounded_avg(2, 4) == 2\nrounded_avg(3, 1) == 3\nrounded_avg(3, 2) == 3\nrounded_avg(3, 3) == 3\nrounded_avg(3, 4) == 3\nrounded_avg(4, 1) == 4\nrounded_avg(4, 2) == 4\nrounded_avg(4, 3) == 4\nrounded_avg(4, 4) == 4\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rounded_avg(1, 1) == 1\nassert     rounded_avg(0, 2) == 0\nassert     rounded_avg(0, 1) == 0\nassert     rounded_avg(1, 0) == 1\nassert     rounded_avg(2, 1) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nrounded_avg(1, 10) == 1\nassert rounded_avg(1, 100) == 1\nassert rounded_avg(1, 999) == 1\nassert rounded_avg(1, 10000) == 1\nassert rounded_avg(10, 1) == 10\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rounded_avg(1, 2) == 1\nassert     rounded_avg(1, 3) == 1\nassert     rounded_avg(2, 3) == 2\nassert     rounded_avg(2, 4) == 2\nassert     rounded_avg(2, 5) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_vowels(word):\n    \"\"\"You are given a string with no spaces and the ability to convert any letter into\n    vowels. The function should return the number of vowels in the word.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_digits([]) == [1]\nassert     unique_digits([2]) == [1,2]\nassert     unique_digits([2,3]) == [1,2,3]\nassert     unique_digits([2,3,4]) == [1,2,3,4]\nassert     unique_digits([2,3,4,5]) == [1,2,3,4,5]\n",
        "num_ids_2": 29,
        "num_ids_4": 73
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert unique_digits([10, 5, 10]) == [10, 5], \"It should be sorted ascending.\"\nassert unique_digits([9, 9, 3]) == [3], \"It should be sorted ascending.\"\nassert unique_digits([6, 9, 9, 5, 8]) == [5, 8], \"It should be sorted ascending.\"\nassert unique_digits([8, 9, 9, 8, 8, 7]) == [8, 7], \"It should be sorted ascending.\"\n",
        "num_ids_2": 29,
        "num_ids_4": 83
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_digits([12, 33, 34, 44, 55, 66, 77]) == [12,33,34,55,66,77]\nassert     unique_digits([4,1,2,3,4,4,5,6,7,8,9]) == [4,1,2,3,5,6,7,8,9]\nassert     unique_digits([4,1,2,3,4,4,5,6,7,8,9,0]) == [4,1,2,3,5,6,7,8,9,0]\nassert     unique_digits([4,1,2,3,4,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0]) == [4,1,2,3,5,6,7,8,9,0]\n",
        "num_ids_2": 86,
        "num_ids_4": 214
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_digits([2,4,6,8]) == [2,4,6,8], 'FAILED'\nassert     unique_digits([12,4,45,6,4]) == [4,12,45], 'FAILED'\nassert     unique_digits([12,45,4,12,45,4]) == [45,12,4], 'FAILED'\n",
        "num_ids_2": 62,
        "num_ids_4": 95
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_digits([1,2,3,4,5]) == [1,2,3,4,5], \\\n    \"Wrong result in unique_digits\"\nassert     unique_digits([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9], \\\n    \"Wrong result in unique_digits\"\nassert     unique_digits([1,2,3,4,5,6,7,8,9,11]) == [1,2,3,4,5,6,7,8,9,11], \\\n    \"Wrong result in unique_digits\"\nassert     unique_digits([1,2,3,4,5,6,7,8,9,11,15]) == [1,2,3,4,5,6,7,8,9,11], \\\n    \"Wrong result in unique_digits\"\nassert     unique_digits([1,2,3,4,5,6,7,8,9,11,15,16]) == [1,2,3,4,5,6,7,8,9,11], \\\n    \"Wrong result in unique_digits\"\n",
        "num_ids_2": 80,
        "num_ids_4": 184
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_digits([]) == []\nassert     unique_digits([1]) == [1]\nassert     unique_digits([1,1]) == [1]\nassert     unique_digits([1,1,1]) == [1]\nassert     unique_digits([2,3,4,5,6,7]) == [2,4,6,8,10]\n",
        "num_ids_2": 25,
        "num_ids_4": 59
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_digits([1, 1, 2, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4], 'Wrong'\nassert     unique_digits([1, 1, 2, 3, 3, 4, 4, 4, 2]) == [1, 2, 4], 'Wrong'\nassert     unique_digits([1, 1, 2, 2, 3, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5], 'Wrong'\nassert     unique_digits([1, 1, 2, 2, 3, 3, 3, 3, 2]) == [1, 2, 3, 2], 'Wrong'\nassert     unique_digits([1, 1, 2, 2, 3, 3, 3, 3, 1]) == [1, 2, 3, 1], 'Wrong'\n",
        "num_ids_2": 78,
        "num_ids_4": 162
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_digits([1, 2, 3, 4]) == [1, 2, 3]\nassert     unique_digits([1, 2, 4, 3]) == [1, 2, 3]\nassert     unique_digits([1, 2, 4, 5]) == [1, 2, 5]\nassert     unique_digits([1, 2, 5, 4]) == [1, 2, 5]\nassert     unique_digits([1, 1, 2, 2]) == [1, 2]\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_digits([1,2,3]) == [1,2,3]\nassert     unique_digits([0,2,3,4,5,6,7,8,9]) == [0,2,3,4,5,6,7,8,9]\nassert     unique_digits([100, 101, 102, 103, 104, 105, 106, 107, 108, 109]) == \n        [100, 101, 102, 103, 104, 105, 106, 107, 108, 109]\nassert     unique_digits([1,2,3,4,5,6,7,8,9]) == []\nassert     unique_digits([1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]) == \n        [1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]\n",
        "num_ids_2": 68,
        "num_ids_4": 126
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    pass\n\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    \n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] < 1:\n            arr[i] = \"Zero\"\n        elif arr[i] < 4:\n            arr[i] = \"One\" + str(arr[i])\n        elif arr[i] < 7:\n            arr[i] = \"Two\" + str(arr[i])\n        elif arr[i] < 10:\n            arr[i] = \"Three\" + str(arr[i])\n        elif arr[i] < 13:\n            arr[i] = \"Four\" + str(arr[i])\n        elif arr[i] < 16:\n            arr[i] = \"Five\" + str(arr[i])\n        elif arr[i] < 19:\n            arr[i] = \"Six\" + str(arr[i])\n        elif arr[i] < 22:\n            arr[i] = \"Seven\" + str(arr[i])\n        elif arr[i] < 25:\n            arr[i] = \"Eight\" + str(arr[i])\n        else:\n            arr[i] = \"Nine\" + str(arr[i])\n    return arr\n\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    # arr.sort()\n    # for i in range(len(arr)):\n    #     if arr[i] < 1:\n    #         arr[i] = \"Zero\"\n    #     elif arr[i] < 4:\n    #         arr[i] = \"One\" + str(arr[i])\n    #     elif arr[i] < 7:\n    #         arr[i] = \"Two\" + str(arr[i])\n    #     elif arr[i] < 10:\n    #         arr[i] = \"Three\" + str(arr[i])\n    #     elif arr[i] < 13:\n    #         arr[i] = \"Four\" + str(arr[i])\n    #     elif arr[i] < 16:\n    #         arr[i] = \"Five\" + str(arr[i])\n    #     elif arr[i] < 19:\n    #         arr[i] = \"Six\" + str(arr[i])\n    #     elif arr[i] < 22:\n    #         arr[i] = \"Seven\" + str(arr[i])\n    #     elif arr[i] < 25:\n    #         arr[i] = \"Eight\" + str(arr[i])\n    #     else:\n    #         arr[i] = \"Nine\" + str(arr[i])\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] < 1:\n            arr[i] = \"Zero\"\n        elif arr[i] < 4:\n            arr[i] = \"One\" + str(arr[i])\n        elif arr[i] < 7:\n            arr[i] = \"Two\" + str(arr[i])\n        elif arr[i] < 10:\n            arr[i] = \"Three\" + str(arr[i])\n        elif arr[i] < 13:\n            arr[i] = \"Four\" + str(ar",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     by_length([3, 4, 5, 6, 9, 1, 2, 8, 7, 3]) ==     [\"Three\", \"Four\", \"Five\", \"Six\", \"Nine\", \"One\", \"Two\", \"Eight\", \"Seven\", \"Three\"]\nassert     by_length([3, 4, 5, 6, 9, 1, 2, 8, 7, 3, 3, 4, 5, 6]) ==     [\"Three\", \"Four\", \"Five\", \"Six\", \"Nine\", \"One\", \"Two\", \"Eight\", \"Seven\", \"Three\", \"Four\", \"Five\", \"Six\"]\nassert     by_length([3, 4, 5, 6, 9, 1, 2, 8, 7, 3, 3, 4, 5, 6, 4, 5, 6, 3, 3, 4, 5, 6]) ==     [\"Three\", \"Four\", \"Five\", \"Six\", \"Nine\", \"One\", \"Two\", \"Eight\", \"Seven\", \"Three\", \"Four\", \"Five\", \"Six\", \"Four\", \"Five\", \"Six\", \"Three\", \"Four\", \"Five\", \"Six\"]\n",
        "num_ids_2": 135,
        "num_ids_4": 248
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     by_length([0,1,2,3,4,5,6,7,8,9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([10,11,12,13,14,15,16,17,18,19,20]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([50,51,52,53,54,55,56,57,58,59]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,44",
        "num_ids_2": 112,
        "num_ids_4": 1023
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef test_by_length():\n    \"\"\"\n    Tests by_length.\n    \"\"\"\n    assert by_length([]) == []\n    assert by_length([1]) == ['One']\n    assert by_length([2]) == ['Two']\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     by_length([1,2,3,4,5,6,7,8,9]) ==  [\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\"]\nassert     by_length([1,2,3,4,5,6,7,8,9,0]) ==  [\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\",\"Zero\"]\n\n\n\ndef by_length_reverse(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 96,
        "num_ids_4": 96
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef by_length2(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    # copy the array\n    arr2 = arr.copy()\n    # sort the array\n    arr2.sort()\n    # reverse the sorted array\n    arr2.reverse()\n    # replace each digit with its corresponding name\n    for i in range(len(arr2)):\n        arr[i] = by_length(arr2[i])\n    return arr\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert f(5) == [1, 1, 2, 6, 24]\n\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [2,1]\nassert     f(3) == [3,2,1]\nassert     f(4) == [4,2,1,1]\nassert     f(5) == [5,2,3,1,1]\n",
        "num_ids_2": 24,
        "num_ids_4": 56
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the summation of numbers from 1 to i.\n    i starts from 1.\n    the summation of numbers from 1 to i is the summation of all numbers from 1 to i.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 2]\nassert     f(3) == [1, 2, 6]\nassert     f(4) == [1, 2, 3, 4, 6]\nassert     f(5) == [1, 2, 3, 4, 5, 10]\n",
        "num_ids_2": 24,
        "num_ids_4": 58
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # test case 1\n    assert f(1) == [1]\n\n    # test case 2\n    assert f(2) == [1, 2]\n\n    # test case 3\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of numbers from i\n    to n if i is even or the multiplication of numbers from 1 to i otherwise.\n    i starts from 1.\n    the sum of numbers from i to n if i is even is the summation of numbers from i to n,\n    the multiplication of numbers from 1 to i otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     f(1) == [1], \"Wrong answer\"\nassert     f(2) == [1,2], \"Wrong answer\"\nassert     f(3) == [1,2,6], \"Wrong answer\"\nassert     f(4) == [1,2,6,24], \"Wrong answer\"\nassert     f(5) == [1,2,6,24,120], \"Wrong answer\"\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_odd_palindrome(10) == (5, 4)\nassert     even_odd_palindrome(100) == (37, 34)\nassert     even_odd_palindrome(1000) == (1213, 1113)\nassert     even_odd_palindrome(10000) == (29694, 29686)\nassert     even_odd_palindrome(100000) == (94789, 94788)\n",
        "num_ids_2": 38,
        "num_ids_4": 80
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"All even odd integer palindromes in range(1, 10^3)\")\n    for i in range(1, 10):\n        print(i, even_odd_palindrome(i))\n\n    print(\"All even odd integer palindromes in range(1, n)\")\n    for i in range(1, 100):\n        print(i, even_odd_palindrome(i))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(even_odd_palindrome(10))\nprint(even_odd_palindrome(100))\nprint(even_odd_palindrome(100000))\nprint(even_odd_palindrome(100000000))\nprint(even_odd_palindrome(3))\nprint(even_odd_palindrome(4))\nprint(even_odd_palindrome(5))\nprint(even_odd_palindrome(6))\nprint(even_odd_palindrome(7))\nprint(even_odd_palindrome(8))\nprint(even_odd_palindrome(9))\nprint(even_odd_palindrome(10))\nprint(even_odd_palindrome(100))\nprint(even_odd_palindrome(1000))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_odd_palindrome(2) == (1, 1)\nassert     even_odd_palindrome(5) == (4, 0)\nassert     even_odd_palindrome(10) == (8, 2)\nassert     even_odd_palindrome(100) == (100, 24)\nassert     even_odd_palindrome(1000) == (998, 352)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_odd_palindrome(5) == (2, 1)\nassert     even_odd_palindrome(6) == (1, 1)\nassert     even_odd_palindrome(1) == (0, 0)\nassert     even_odd_palindrome(3) == (1, 1)\nassert     even_odd_palindrome(4) == (0, 1)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(3) == (1, 1)\nassert     even_odd_palindrome(5) == (1, 2)\nassert     even_odd_palindrome(9) == (3, 0)\nassert     even_odd_palindrome(10) == (1, 4)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(2) == (0, 1)\nassert     even_odd_palindrome(3) == (0, 1)\nassert     even_odd_palindrome(4) == (1, 1)\nassert     even_odd_palindrome(5) == (1, 1)\nassert     even_odd_palindrome(6) == (0, 2)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_nums(None) == 0\nassert     count_nums([]) == 0\nassert     count_nums([1,2,3]) == 0\nassert     count_nums([1,2,-3]) == 1\nassert     count_nums([1,2,0]) == 1\n",
        "num_ids_2": 23,
        "num_ids_4": 55
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_nums([]) == 0, \"Empty array\"\nassert     count_nums([-4, -9]) == 1, \"Negative numbers\"\nassert     count_nums([-123, 1234, 12000]) == 1, \"Negative numbers with first sign\"\nassert     count_nums([-123, 1234, -12000]) == 1, \"Negative numbers with first sign\"\nassert     count_nums([-123, 1234, 12000, -1234]) == 3, \"Negative numbers with multiple signs\"\n",
        "num_ids_2": 38,
        "num_ids_4": 95
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_nums([]) == 0, 'Empty array'\nassert     count_nums([1, -1]) == 1, 'One number with negative sign'\nassert     count_nums([1, 2, 3, 4]) == 2, 'One number with multiple digits'\nassert     count_nums([1, 2, 3, 4, -1]) == 3, 'Negative and positive numbers'\nassert     count_nums([12, 34, 56, 0, -12]) == 3, 'Two positive and one negative number'\n",
        "num_ids_2": 39,
        "num_ids_4": 94
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_nums([]) == 0, \"empty array\"\nassert     count_nums([1]) == 0, \"one element\"\nassert     count_nums([-123]) == 1, \"negative number with negative first digit\"\nassert     count_nums([-10]) == 1, \"negative number with positive first digit\"\nassert     count_nums([1,2,3,4,5,6,7,8,9,0,-10]) == 3, \"negative numbers\"\n",
        "num_ids_2": 33,
        "num_ids_4": 77
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_nums([2, 3, 4, 5, -2, -3, -4, -5]) == 3\nassert count_nums([-2, -3, -4, -5]) == 3\nassert count_nums([-2, -3, -4, -5, 7]) == 4\nassert count_nums([1, 2, 3, 4, 5, 6]) == 6\nassert count_nums([1, 2, 3, 4, 5, 6, 7, 8]) == 7\n",
        "num_ids_2": 51,
        "num_ids_4": 95
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_nums([2, 7, 4, 5, 8, -1]) == 3\nassert     count_nums([2, 3, -1, 0]) == 4\nassert     count_nums([1, 3, -1]) == 2\nassert     count_nums([1, 2, -1]) == 3\nassert     count_nums([1, 1, 1]) == 1\n",
        "num_ids_2": 42,
        "num_ids_4": 76
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Test 1\n    print (move_one_ball(['1', '2', '3', '4', '5']))\n    # Output\n    # True\n    # Test 2\n    print (move_one_ball(['1', '1', '1', '1', '1']))\n    # Output\n    # False\n    # Test 3\n    print (move_one_ball(['2', '1', '2', '1', '3']))\n    # Output\n    # False\n    # Test 4\n    print (move_one_ball(['2', '1', '3', '1', '2']))\n    # Output\n    # False\n    # Test 5\n    print (move_one_ball([]))\n    # Output\n    # True\n    # Test 6\n    print (move_one_ball([1]))\n    # Output\n    # True\n    # Test 7\n    print (move_one_ball([1, 1, 1, 1, 1]))\n    # Output\n    # False\n    # Test 8\n    print (move_one_ball(['3', '4', '5', '1', '2']))\n    # Output\n    # False\n    # Test 9\n    print (move_one_ball(['3', '4', '1', '1', '5']))\n    # Output\n    # True\n    # Test 10\n    print (move_one_ball([1, 1, 1, 1]))\n    # Output\n    # True\n    # Test 11\n    print (move_one_ball([]))\n    # Output\n    # True\n    # Test 12\n    print (move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 31",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = list(range(1,10))\n    print(arr)\n    assert move_one_ball(arr)\n    arr = []\n    print(arr)\n    assert not move_one_ball(arr",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nmove_one_ball([1,2,3,4,5,6,7])\nmove_one_ball([3,2,1,6,5,4])\n\ndef move_one_ball_iterative(arr):\n    \"\"\"Approach:\n    Binary Search.\n    Using the left and right pointers we can do a binary search on the array and \n    move the left pointer of the array to the end.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef move_one_ball_two(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     exchange([1, 2, 3], [1, 2, 3]) == \"YES\", \"Wrong answer in exchange()!\"\nassert     exchange([0, 2, 3], [1, 2, 3]) == \"NO\", \"Wrong answer in exchange()!\"\nassert     exchange([1, 2, 3], [0, 2, 3]) == \"NO\", \"Wrong answer in exchange()!\"\n",
        "num_ids_2": 62,
        "num_ids_4": 93
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     exchange([4, 8, 10, 12, 14, 16], [2, 4, 6, 8, 10]) == \"YES\"\nassert     exchange([1, 3, 5, 7, 9], [2, 4, 6, 8, 10]) == \"NO\"\nassert     exchange([3, 7, 9, 11, 13, 15], [2, 4, 6, 8, 10]) == \"YES\"\nassert     exchange([2, 4, 6, 8, 10], [3, 7, 9, 11, 13, 15]) == \"YES\"\nassert     exchange([2, 4, 6, 8, 10], [1, 3, 5, 7, 9]) == \"NO\"\n",
        "num_ids_2": 64,
        "num_ids_4": 130
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     exchange(lst1 = [1, 2, 3], lst2 = [3, 4, 5, 6]) == \"YES\", \"Fail\"\nassert     exchange(lst1 = [1, 2, 3], lst2 = [1, 2, 3]) == \"NO\", \"Fail\"\nassert     exchange(lst1 = [2, 4, 6, 8], lst2 = [2, 4, 6, 8]) == \"NO\", \"Fail\"\nassert     exchange(lst1 = [2, 4, 6, 8], lst2 = [2, 4, 6, 8, 1]) == \"YES\", \"Fail\"\n",
        "num_ids_2": 72,
        "num_ids_4": 152
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(exchange(lst1 = [1,2,3,4], lst2 = [1,2,3,5]))\n    # output: NO\n    print(exchange(lst1 = [2,4,6,8], lst2 = [2,4,6,8]))\n    # output: YES\n    print(exchange(lst1 = [1,2,3,4], lst2 = [0,1,2,3,4]))\n    # output: YES\n    print(exchange(lst1 = [1,2,3,4], lst2 = [1,2,3,4]))\n    # output: NO\n    print(exchange(lst1 = [1,2,3,4], lst2 = [5,6,7,8]))\n    # output: NO\n    print(exchange(lst1 = [], lst2 = [1,2,3,4]))\n    # output: NO\n    print(exchange(lst1 = [1,2,3,4], lst2 = []))\n    # output: NO",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     exchange([1,2,3], [2,4,6]) == \"NO\"\nassert     exchange([3,1,2], [2,4,6]) == \"YES\"\nassert     exchange([3,1,2], [2,4,6]) == \"NO\"\nassert     exchange([1,2,3], [3,4,5]) == \"YES\"\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     exchange([1, 2, 3], [2, 1, 3]) == \"YES\"\nassert     exchange([1, 2, 3], [2, 2, 1]) == \"NO\"\nassert     exchange([1, 2, 3], [3, 2, 1]) == \"NO\"\nassert     exchange([1, 2, 3], [3, 1, 2]) == \"NO\"\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     exchange(lst1, lst2) == \"YES\"\nassert     exchange(lst2, lst1) == \"YES\"\nassert     exchange(lst3, lst4) == \"NO\"\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     exchange([10, 20, 30], [12, 14, 16]) == \"NO\"\nassert     exchange([10, 20, 30], [10, 20, 30]) == \"YES\"\nassert     exchange([], []) == \"YES\"\nassert     exchange([10], []) == \"YES\"\nassert     exchange([1, 2], []) == \"YES\"\n",
        "num_ids_2": 46,
        "num_ids_4": 73
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     histogram('hearts') == {'e': 1, 'h': 1, 'r': 1, 'a': 1, 't': 2}\nassert     histogram('helloleetcode') == {'e': 3, 'h': 2, 'l': 1, 'o': 3, 't': 2, 'c': 1}\nassert     histogram('hellothere') == {'e': 3, 'h': 2, 'l': 2, 'o': 1, 't': 1, 'r': 1}\nassert     histogram('the') == {'t': 1, 'h': 1, 'e': 1, 'o': 1}\n",
        "num_ids_2": 79,
        "num_ids_4": 151
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     'a' in histogram('abracadabra')\nassert     'b' in histogram('abracadabra')\nassert     'a' in histogram('abracadabra')\nassert     'c' in histogram('abracadabra')\nassert     'a' in histogram('abracadabra')\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     {'e':3, 'o':2, 'a':2, 'r':1,'s':1} == histogram('')\nassert     {'e':3, 'o':2, 'a':2, 'r':1,'s':1} == histogram('eoaer')\nassert     {'e':3, 'o':2, 'a':2, 'r':1,'s':1} == histogram('easoear')\nassert     {'e':4, 'o':2, 'a':2, 'r':1,'s':1} == histogram('oear')\n",
        "num_ids_2": 70,
        "num_ids_4": 141
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     \"a\" == histogram(\"aaabbbcccdddeeeee\")\nassert     \"a\" == histogram(\"a\")\nassert     \"ab\" == histogram(\"abab\")\nassert     \"ab\" == histogram(\"ab\")\nassert     \"abc\" == histogram(\"abcabc\")\n",
        "num_ids_2": 32,
        "num_ids_4": 57
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     histogram(\"hello\") == {'o': 3, 'h': 2, 'l': 1}\nassert     histogram(\"aabbbc\") == {'a': 2, 'b': 3}\nassert     histogram(\"abcd\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1}\nassert     histogram(\"\") == {}\nassert     histogram(\"python\") == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'n': 1}\n",
        "num_ids_2": 47,
        "num_ids_4": 87
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     histogram(\"hello world\") == {\"o\": 5, \"h\": 1, \"e\": 1, \"w\": 1, \"r\": 1, \"d\": 1}\nassert    histogram(\"aabbaccc\") == {\"a\": 5, \"b\": 3, \"c\": 3}\nassert    histogram(\"geeksforgeeks\") == {\"e\": 1, \"s\": 1, \"f\": 1, \"o\": 1, \"g\": 1, \"r\": 1, \"e\": 1, \"w\": 1}\nassert    histogram(\"\") == {}\nassert    histogram(\"a\") == {\"a\": 1}\n",
        "num_ids_2": 67,
        "num_ids_4": 128
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     \"t\" in histogram(\"tacocat\")\nassert \"a\" in histogram(\"tacocat\")\nassert \"c\" in histogram(\"tacocat\")\nassert \"t\" in histogram(\"aaaccc\")\nassert \"a\" in histogram(\"aaaccc\")\n",
        "num_ids_2": 29,
        "num_ids_4": 56
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     histogram(\"hello\") == {\n                    \"h\": 1,\n                    \"e\": 1,\n                    \"l\": 2,\n                    \"o\": 1\n                }, \"incorrect result\"\nassert     histogram(\"python\") == {\n                    \"y\": 2,\n                    \"o\": 2,\n                    \"h\": 1,\n                    \"n\": 1\n                }, \"incorrect result\"\nassert     histogram(\"aabbcc\") == {\n                    \"a\": 3,\n                    \"b\": 2,\n                    \"c\": 1\n                }, \"incorrect result\"\n\n",
        "num_ids_2": 20,
        "num_ids_4": 32
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_delete('abracadabra', 'adabra') == ('abracadabra', True)\nassert     reverse_delete('abracadabra', 'abcd') == ('abracadabra', False)\nassert     reverse_delete('abracadabra', 'b') == ('abracadabra', True)\nassert     reverse_delete('abracadabra', 'c') == ('abracadabra', False)\nassert     reverse_delete('abracadabra', 'ac') == ('abracadabra', True)\n",
        "num_ids_2": 55,
        "num_ids_4": 107
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \nassert \nassert\nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 11
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_delete(\"abcdc\", \"c\") == (\"dcba\", True)\nassert reverse_delete(\"abcdc\", \"d\") == (\"bacdc\", True)\nassert reverse_delete(\"abcdc\", \"ac\") == (\"abcdc\", True)\nassert reverse_delete(\"abcdc\", \"bc\") == (\"bacd\", True)\nassert reverse_delete(\"abcdc\", \"ca\") == (\"cabcd\", True)\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_delete(\"abab\", \"ab\") == ('abab', True)\nassert     reverse_delete(\"abab\", \"ba\") == ('abab', True)\nassert     reverse_delete(\"abab\", \"ab\") == ('abab', False)\nassert     reverse_delete(\"abb\", \"ab\") == ('abb', False)\nassert     reverse_delete(\"abcba\", \"ab\") == ('cbadcba', True)\n",
        "num_ids_2": 40,
        "num_ids_4": 78
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_delete('pale','ple')==('p',True)\nassert     reverse_delete('pale','ale')==('p',False)\nassert     reverse_delete('pale','p')==('p',True)\nassert     reverse_delete('pale','e')==('p',False)\nassert     reverse_delete('pale','l')==('p',False)\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_delete(s=\"sarad\",c=\"sr\") == (s+s,True)\nassert     reverse_delete(s=\"sarad\",c=\"ar\") == (s+s,True)\nassert     reverse_delete(s=\"sarad\",c=\"d\") == (s+s,True)\nassert     reverse_delete(s=\"sarad\",c=\"a\") == (s+s,True)\nassert     reverse_delete(s=\"sarad\",c=\"\") == (s+s,False)\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nreverse_delete(\"a\",'a') == (\"\",True)\nreverse_delete(\"a\",'b') == (\"ab\",False)\nreverse_delete(\"a\",\"c\") == (\"a\",False)\nreverse_delete(\"aaaa\",\"aaa\") == (\"aaaaa\",True)\nreverse_delete(\"acdcb\",\"ab\") == (\"acdcba\",True)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_delete(\"\",(\"a\",\"b\",\"c\")) == (True,(\"\",\"a\",\"b\",\"c\"))\nassert     reverse_delete(\"abcb\",(\"a\",\"b\",\"c\")) == (False,(\"ab\",\"a\",\"b\",\"c\"))\nassert     reverse_delete(\"abcb\",(\"a\",\"b\",\"c\",\"d\")) == (False,(\"ab\",\"a\",\"b\",\"c\",\"d\"))\nassert     reverse_delete(\"abcb\",(\"a\",\"b\",\"c\",\"d\",\"e\")) == (False,(\"ab\",\"a\",\"b\",\"c\",\"d\",\"e\"))\nassert     reverse_delete(\"abcd\",(\"a\",\"b\",\"c\",\"d\",\"e\")) == (False,(\"abcd\",\"a\",\"b\",\"c\",\"d\",\"e\"))\n",
        "num_ids_2": 57,
        "num_ids_4": 129
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_delete('abba','ab')[0] == 'bbaa'\nassert     reverse_delete('abcde','ace')[0] == 'bceda'\nassert     reverse_delete('abcde','ace')[1] == False\nassert     reverse_delete('xyz','xyz')[0] == ''\nassert     reverse_delete('xyz','xyz')[1] == True\n",
        "num_ids_2": 41,
        "num_ids_4": 76
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_count([\"3\", \"4\", \"1\", \"1\", \"4\", \"2\", \"3\", \"3\", \"1\"]) == [\n            \"1\",\n            \"2\",\n            \"1\",\n            \"2\",\n            \"1\",\n            \"2\",\n            \"1\",\n            \"2\",\n            \"1\"\n        ], \"Test 1 failed\"\nassert     odd_count([\"3\", \"4\", \"1\", \"1\", \"4\", \"2\", \"3\", \"3\", \"1\", \"3\", \"4\"]) == [\n            \"2\",\n            \"1\",\n            \"1\",\n            \"2\",\n            \"1\",\n            \"1\",\n            \"2\",\n            \"1\",\n            \"1\",\n            \"2\"\n        ], \"Test 2 failed\"",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_count([]) == []\nassert     odd_count([\"abc\", \"cde\"]) == [\"the number of odd elements in the string abc of the input\", \"the number of odd elements in the string cde of the input\"]\nassert     odd_count([\"abc\", \"cde\", \"ade\"]) == [\"the number of odd elements in the string abc of the input\", \"the number of odd elements in the string cde of the input\", \"the number of odd elements in the string ade of the input\"]\nassert     odd_count([\"abc\", \"cde\", \"ade\", \"fgh\"]) == [\"the number of odd elements in the string abc of the input\", \"the number of odd elements in the string cde of the input\", \"the number of odd elements in the string ade of the input\", \"the number of odd elements in the string fgh of the input\"]\n\ndef odd_count_2(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.\n    To solve this problem, we need to use a helper function, which can be defined only once.\n    \"\"\"\n    pass\n",
        "num_ids_2": 56,
        "num_ids_4": 203
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nodd_count([\"a1\", \"abc\", \"bcd\", \"abcd\"]) == [\"1\", \"2\", \"2\", \"4\"]\nassert \nodd_count([\"a1\", \"a3\", \"bcd\", \"abcd\"]) == [\"1\", \"3\", \"4\", \"4\"]\nassert \nodd_count([\"a1\", \"a3\", \"bcd\", \"abcd\", \"a9\"]) == [\"1\", \"3\", \"4\", \"4\", \"0\"]\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\nprint(odd_count([\"7\",\"2\",\"1\",\"6\",\"9\",\"5\",\"8\",\"4\"]))\nprint(odd_count([\"7\",\"2\",\"1\",\"6\",\"9\",\"5\",\"8\",\"4\",\"10\"]))\nprint(odd_count([\"5\",\"2\",\"1\",\"6\",\"9\",\"5\",\"8\",\"4\"]))\nprint(odd_count([\"1\",\"2\",\"1\",\"2\",\"1\"]))\nprint(odd_count([\"1\",\"2\",\"1\",\"2\",\"1\",\"3\"]))\n\n\ndef long_repeat(line):\n    \"\"\"Given a line, find the longest recurring substring.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\"]\nassert \nodd_count([\"1\", \"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"3\", \"4\", \"5\"]",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_count([\"I\", \"AM\", \"AN\", \"ALL\", \"OMG\"]) == ['0', '3', '4', '0', '1'], \"Wrong output\"\nassert     odd_count([\"1\", \"2\", \"4\", \"5\", \"7\"]) == ['2', '1', '1', '1', '1'], \"Wrong output\"\nassert     odd_count([\"1\", \"2\", \"4\", \"5\", \"7\", \"8\"]) == ['2', '1', '1', '1', '1', '1'], \"Wrong output\"\nassert     odd_count([\"1\", \"2\", \"4\", \"5\", \"7\", \"8\", \"9\"]) == ['0', '1', '1', '1', '1', '1', '1'], \"Wrong output\"\nassert     odd_count([\"1\", \"2\", \"4\", \"5\", \"7\", \"8\", \"9\", \"10\"]) == ['1', '1', '1', '1', '1', '1', '1', '1'], \"Wrong output\"\n",
        "num_ids_2": 91,
        "num_ids_4": 199
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert _______, _______",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     minSubArraySum([]) == 0, 'No minSubArraySum'\nassert     minSubArraySum([-2,1,-3,4,-1,2,1,-5,4]) == 2, 'Wrong answer'\n\n\"\"\"\n    Tests:\n    0) Takes too long\n    1) wrong answer\n    2) array is empty\n    3) array has two positive integers\n    4) contains all zeros\n    5) the first element is 0\n    6) contains two positives\n    7) contains one positive integer\n\"\"\"",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     minSubArraySum([[0,1,1],\n                        [1,1,1],\n                        [1,0,1],\n                        [0,1,1]]) == 1, \"Wrong\"\nassert     minSubArraySum([[0,1,2],\n                        [3,2,1]]) == 2, \"Wrong\"\nassert     minSubArraySum([[2,2,2],\n                        [2,2,2]]) == 3, \"Wrong\"\nassert     minSubArraySum([[1,2,3],\n                        [4,5,6]]) == 3, \"Wrong\"\nassert     minSubArraySum([[2],\n                        [2]]) == 2, \"Wrong\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    nums = [-2,1,-3,4,-1,2,1,-5,4]\n    print(minSubArraySum(nums))\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    minSubArraySum([1,2,3]) == 3\n    minSubArraySum([2,3,1,2,4,3]) == 3\n    minSubArraySum([2,2,2,1,1,2,2]) == 4\nassert minSubArraySum([]) == 0\nassert minSubArraySum([1]) == 1\nassert minSubArraySum([2]) == 1\nassert minSubArraySum([1,2]) == 1\n",
        "num_ids_2": 13,
        "num_ids_4": 35
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert max_fill([[0,1,1,1,1],\n                [0,0,0,0,0],\n                [0,0,0,0,0],\n                [0,0,0,0,0]], capacity = 2) == 2\nassert max_fill([[0,0,1,1,1],\n                [0,0,0,0,0],\n                [0,0,0,0,0],\n                [0,0,0,0,0]], capacity = 1) == 0\nassert max_fill([[0,1,1,1,1],\n                [0,0,0,0,0],\n                [0,0,0,0,0],\n                [0,0,0,0,0]], capacity = 0) == 0\nassert max_fill([[0,1,1,1,1],\n                [0,0,0,0,0],\n                [0,0,0,0,0],\n                [0,0,0,0,0]], capacity = 2) == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 54
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_fill([[0, 0, 1, 1], \n                    [0, 0, 1, 1], \n                    [1, 1, 1, 1], \n                    [0, 0, 0, 0]], 1) == 7\n\nassert max_fill([[0, 0, 0, 1], \n                  [0, 0, 1, 1], \n                  [0, 0, 1, 1], \n                  [0, 0, 0, 0]], 1) == 1\n\nassert max_fill([[0, 0, 0, 0, 1, 0, 0, 0, 0], \n                  [0, 0, 0, 0, 1, 0, 0, 0, 0], \n                  [0, 0, 0, 0, 1, 0, 0, 0, 0], \n                  [0, 0, 0, 0, 1, 0, 0, 0, 0], \n                  [0, 1, 0, 0, 1, 0, 0, 0, 0], \n                  [0, 0, 1, 1, 1, 0, 0, 0, 0], \n                  [0, 0, 1, 1, 1, 0, 0, 0, 0], \n                  [0, 0, 0, 0, 0, 0, 0, 0, 0], \n                  [0, 0, 0, 0, 0, 0, 0, 0, 0]], 1) == 13\n",
        "num_ids_2": 33,
        "num_ids_4": 59
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ngrid = [[1,2,1],\n        [1,2,1],\n        [1,2,1]]\ncapacity = 2\n\nmax_fill(grid, capacity)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmax_fill([[0, 0, 0, 1], \n          [0, 1, 1, 0], \n          [0, 0, 0, 1], \n          [0, 0, 0, 1]], capacity = 1) == 2\nassert \nmax_fill([[0, 1, 0, 1], \n          [0, 1, 1, 0], \n          [0, 0, 0, 1], \n          [0, 0, 0, 1]], capacity = 2) == 2\nassert \nmax_fill([[0, 0, 0, 1], \n          [0, 1, 1, 0], \n          [0, 1, 0, 0], \n          [0, 0, 0, 1]], capacity = 1) == 4\nassert \nmax_fill([[0, 0, 0, 1], \n          [0, 1, 1, 0], \n          [0, 1, 0, 0], \n          [0, 0, 0, 1]], capacity = 2) == 4\nassert \nmax_fill([[0, 0, 0, 0], \n          [0, 1, 1, 0], \n          [0, 1, 0, 0], \n          [0, 0, 0, 0]], capacity = 1) == 3\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_array([10,1,2,3]) == [1,2,3,10]\nassert     sort_array([9,1,2,3]) == [1,2,3,9]\nassert     sort_array([7,1,2,3,10]) == [1,2,3,7,10]\nassert     sort_array([1,2,3]) == [1,2,3]\nassert     sort_array([1,2,3,4]) == [1,2,3,4]\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_array([5,1,8,0]) == sorted([0,5,8,1])\nassert     sort_array([1,8,5,0]) == sorted([1,0,5,8])\nassert     sort_array([0,1,8,5]) == sorted([1,0,5,8])\nassert     sort_array([8,0,1,5]) == sorted([1,0,5,8])\nassert     sort_array([5,1,5,8]) == sorted([1,0,5,8])\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_array([1, 1, 3, 4, 5]) == [1, 1, 3, 4, 5]\nassert     sort_array([1, 1, 2, 3, 5]) == [1, 1, 2, 3, 5]\nassert     sort_array([1, 1, 1, 2, 3]) == [1, 1, 1, 2, 3]\nassert     sort_array([0, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [0, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     sort_array([7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7]\nassert     sort_array([3,3,2,1,4]) == [1,2,3,4,3]\nassert     sort_array([4,7,3,6,1,5,3,9,4,6,9,0]) == [0,1,1,3,3,4,4,5,5,6,6,7]\n",
        "num_ids_2": 74,
        "num_ids_4": 160
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_array([3, 5, 1, 7]) == [1, 3, 5, 7]\nassert     sort_array([3, 5, 1, 7, 1]) == [1, 1, 3, 5, 7]\nassert     sort_array([3, 5, 1, 7, 1]) == [1, 1, 3, 5, 7]\nassert     sort_array([3, 5, 1, 7, 1]) == [1, 1, 3, 5, 7]\n",
        "num_ids_2": 54,
        "num_ids_4": 112
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array([1,0,1,1,1,1]) ==    [1,1,0,1,1,1]\nassert     sort_array([1,0,1,1,1,1,1]) ==    [1,1,1,0,1,1,1]\nassert     sort_array([0,0,0,0,0,0,1,1]) ==    [0,0,0,0,0,1,1,1]\nassert     sort_array([1,1,1,1,1,1,1,1]) ==    [1,1,1,1,1,1,1,1]\nassert     sort_array([1,1,1,1,1,1,1,0]) ==    [1,1,1,1,1,1,0,1]\n",
        "num_ids_2": 72,
        "num_ids_4": 156
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert sort_array([1, 2, 3, 4, 5]) == sorted([1, 2, 3, 4, 5])\nassert sort_array([1, 2, 3, 4, 5, 6, 7, 8]) == sorted([1, 2, 3, 4, 5, 6, 7, 8])\nassert sort_array([4, 5, 6, 7, 8, 1, 2, 3]) == sorted([1, 2, 3, 4, 5, 6, 7, 8])\nassert sort_array([4, 5, 6, 7, 8, 1, 2, 3, 9]) == sorted([1, 2, 3, 4, 5, 6, 7, 8, 9])\n",
        "num_ids_2": 32,
        "num_ids_4": 114
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([10,5,15,5,2,1]) == \n        [1,2,5,5,10,15]\nassert     sort_array([5,5,2,1,5,10]) == \n        [1,2,5,5,5,10]\nassert     sort_array([10,10,10,1,1,1,2,3,4,5]) == \n        [1,1,1,2,3,4,5,10,10,10]\nassert     sort_array([0,0,1,1,0,1,1]) == \n        [0,0,1,1,1,1,1]\nassert     sort_array([1,0,1,0,1,1,0]) == \n        [0,0,1,1,1,1,1]\n",
        "num_ids_2": 42,
        "num_ids_4": 94
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([10, 100, 101, 1000, 2, 3, 101]) == [\n        10, 100, 2, 3, 101, 101, 1000]\nassert     sort_array([10, 100, 0, 1000, 2, 3, 101]) == [\n        0, 10, 2, 3, 100, 101, 1000]",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     select_words(s = \"a b c\", n = 2) == ['a', 'b']\nassert     select_words(s = \"a a b\", n = 1) == ['a']\nassert     select_words(s = \"a b c\", n = 2) == ['b', 'c']\nassert     select_words(s = \"a b c\", n = 3) == ['c']\nassert     select_words(s = \"a b c\", n = 4) == []\n",
        "num_ids_2": 47,
        "num_ids_4": 94
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"    testing select_words:    \")\nassert select_words(\"this is a test\", 2) == ['is', 'test']\nprint(\"        passed.\")\nprint()\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    pass\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert select_words(\"Behold my beloved\", 2) == [\"behold\", \"beloved\"]\nassert select_words(\"Behold my beloved\", 1) == [\"behold\"]\nassert select_words(\"\", 2) == []\nassert select_words(\"  \", 2) == []\n",
        "num_ids_2": 25,
        "num_ids_4": 54
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(select_words(\"bob loves apples\", 2))\nprint(select_words(\"bob loves apples\", 3))\nprint(select_words(\"bob loves apples\", 1))\nprint(select_words(\"bob loves apples\", 0))\nprint(select_words(\"bob loves apples\", 5))\nprint(select_words(\"bob loves apples\", 6))\nprint(select_words(\"bob loves apples\", 7))\nprint(select_words(\"bob loves apples\", 8))\nprint(select_words(\"bob loves apples\", 9))\nprint(select_words(\"bob loves apples\", 10))\nprint(select_words(\"bob loves apples\", 11))\nprint(select_words(\"bob loves apples\", 12))\nprint(select_words(\"bob loves apples\", 13))\nprint(select_words(\"bob loves apples\", 14))\nprint(select_words(\"bob loves apples\", 15))\nprint(select_words(\"bob loves apples\", 16))\nprint(select_words(\"bob loves apples\", 17))\nprint(select_words(\"bob loves apples\", 18))\nprint(select_words(\"bob loves apples\", 19))\nprint(select_words(\"bob loves apples\", 20))\nprint(select_words(\"bob loves apples\", 21))\nprint(select_words(\"bob loves apples\", 22))\nprint(select_words(\"bob loves apples\", 23))\nprint(select_words(\"bob loves apples\", 24))\nprint(select_words(\"bob loves apples\", 25))\nprint(select_words(\"bob loves apples\", 26))\nprint(select_words(\"bob loves apples\", 27))\nprint(select_words(\"bob loves apples\", 28))\nprint(select_words(\"bob loves apples\", 29))\nprint(select_words(\"bob loves apples\", 30))\nprint(select_words(\"bob loves apples\", 31))\nprint(select_words(\"bob loves apples\", 32))\nprint(select_words(\"bob loves apples\", 33))\nprint(select_words(\"bob loves apples\", 34))\nprint(select_words(\"bob loves apples\", 35))\nprint(select_words(\"bob loves apples\", 36))\nprint(select_words(\"bob loves apples\", 37))\nprint(select_words(\"bob loves apples\", 38))\nprint(select_words(\"bob loves apples\", 39))\nprint(select_words(\"bob loves apples\", 40))\nprint(select_words(\"bob loves apples\", 41))\nprint(select_words(\"bob loves apples\", 42))\nprint(select_words(\"bob loves apples\", 43))\nprint(select_words(\"bob loves apples\", 44))\nprint(select_words(\"bob loves apples\", 45))\nprint(select_words(\"bob loves apples\", 46))\nprint(select_words(\"bob loves apples\", 47))\nprint(select_words(\"bob loves apples\", 48))\nprint(select_words(\"bob loves apples\", 49))\nprint(select_words(\"bob loves apples\", 50))\nprint(select_words(\"bob loves apples\", 51))\nprint(select_words(\"bob loves apples\", 52))\nprint(select_words(\"bob loves apples\", 53))\nprint(select_words(\"bob loves apples\", 54))\nprint(select_words(\"bob loves apples\", 55))\nprint(select_words(\"bob loves apples\", 56))\nprint(select_words(\"bob loves apples\", 57))\nprint(select_words(\"bob loves apples\", 58))\nprint(select_words(\"bob loves apples\", 59))\nprint(select_words(\"bob loves apples\", 60))\nprint(select_words(\"bob loves apples\", 61))\nprint(select_words(\"bob loves apples\", 62))\nprint(select_words(\"bob loves apples\", 63))\nprint(select_words(\"bob loves apples\", 64))\nprint(select_words(\"bob loves apples\", 65))\nprint(select_words(\"bob loves apples\", 66))\nprint(select_words(\"bob loves apples\", 67))\nprint(select_words(\"bob loves apples\", 68))\nprint(select_words(\"bob loves apples\", 69))\nprint(select_words(\"bob loves apples\", 70))\nprint(select_words(\"bob loves apples\", 71))\nprint(select_words(\"bob loves apples\", 72))\nprint(select_words(\"bob loves apples\", 73))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     select_words(\"this is a test\", 2) ==     [\"is\", \"test\"]\nassert     select_words(\"this is a test\", 0) ==     []\nassert     select_words(\"this is a test\", 1) ==     [\"test\"]\nassert     select_words(\"this is a test\", 5) ==     [\"is\", \"test\"]\n",
        "num_ids_2": 39,
        "num_ids_4": 80
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     select_words(\"a\", 2) == [\"a\"]\nassert     select_words(\"a b c\", 2) == [\"a\", \"b\", \"c\"]\nassert     select_words(\"a a a a\", 2) == []\nassert     select_words(\"a a a b\", 1) == [\"a\"]\nassert     select_words(\"a a a b a b\", 1) == [\"a\"]\n",
        "num_ids_2": 38,
        "num_ids_4": 72
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    test_1 = \"cat dog bird cat dog bird dog bird\"\n    test_2 = \"an apple a day keeps the doctor away\"\n    assert(select_words(test_1, 3) == ['dog', 'bird'])\n    assert(select_words(test_2, 4) == ['a', 'day', 'a', 'bird', 'doctor'])\n\nif __name__ == '__main__':\n    main()\n    print('All tests passed!'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(get_closest_vowel('codewars'))\nassert \nprint(get_closest_vowel('codewar'))\nassert\n\nprint(get_closest_vowel('CODEWARS'))\n",
        "num_ids_2": 6,
        "num_ids_4": 8
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_closest_vowel(\"dear\") == \"\"\nassert     get_closest_vowel(\"yesterday\") == \"y\"\nassert     get_closest_vowel(\"my\") == \"\"\nassert     get_closest_vowel(\"was\") == \"a\"\nassert     get_closest_vowel(\"numbers\") == \"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 74
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_closest_vowel('country') == 'e'\nassert     get_closest_vowel('test') == ''\nassert     get_closest_vowel('ab') == 'b'\nassert     get_closest_vowel('back') == 'a'\nassert     get_closest_vowel('backend') == ''",
        "num_ids_2": 36,
        "num_ids_4": 74
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    words = ['abra', 'cad', 'ca', 'abacad', 'ab', 'abac', 'abacaba', 'abacabacaba']\n    for word in words:\n        print(f\"closest vowel for word: {word} is: {get_closest_vowel(word)}\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     match_parens(['((()))','()()()','()()'])    ==    'Yes'\nassert     match_parens(['((())','()()()','()()'])    ==    'No'\nassert     match_parens(['((()', '()()()', '()()'])    ==    'No'\nassert     match_parens(['((())', '()()', '()()'])    ==    'No'\n\n",
        "num_ids_2": 53,
        "num_ids_4": 108
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     match_parens('(())((()))') == 'Yes'\nassert     match_parens('((())') == 'No'\nassert     match_parens('(())(') == 'No'\nassert     match_parens('(()(') == 'No'\nassert     match_parens('()())()') == 'Yes'\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(match_parens(['(((()())(()))())', '((((())())))))']))\n\nassert match_parens(['(((()())(()))())', '((((())())))))', '(((((()((())((())))(())))()))))']) == 'Yes'\nassert match_parens(['(((()())(()))())', '((((())())))))', '(((((()((())((())))(())))()))))']) == 'No'\n",
        "num_ids_2": 50,
        "num_ids_4": 97
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nTime complexity: O(n) because we have to visit each letter of the string.\nSpace complexity: O(n) because we will be storing a lot of characters in a set.\n'''\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     match_parens([\"()\",\"()\"]) == \"Yes\", \"1st example\"\nassert     match_parens([\"()()\",\"(())()\",\"()()()\",\"(()(()))\",\"((()))\",\"()()()()()\"]) == \"Yes\", \"2nd example\"\nassert     match_parens([\"(()\",\"(())\"]) == \"No\", \"3rd example\"\nassert     match_parens([\"((()))\",\"((())\",\"()))\"]) == \"Yes\", \"4th example\"\nassert     match_parens([\"(()))\",\"(()()\",\"(())()\",\"(()())\",\"(()())\",\"()((()))\"]) == \"Yes\", \"5th example\"\n",
        "num_ids_2": 69,
        "num_ids_4": 123
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     match_parens(['(())()', '())()', '((()))', '((()))']) == 'Yes'\nassert     match_parens(['(())()', '()))', '((()))', '((()))']) == 'No'\n",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximum([], 0) == []\nassert     maximum([], 1) == []\nassert     maximum([-1], 1) == [-1]\nassert     maximum([1], 1) == [1]\nassert     maximum([-10, 10], 1) == [-10, 10]\n",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum([1, -2, 5, -4, 3], 1) == [-2, 5, 3]\nassert     maximum([1, -2, 5, -4, 3], 2) == [-2, 5, 3]\nassert     maximum([1, -2, 5, -4, 3], 3) == [-4, 5, 3]\nassert     maximum([1, -2, 5, -4, 3], 4) == [-4, 5, 3]\nassert     maximum([1, -2, 5, -4, 3], 5) == [5, 5, 3]\n",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximum([-1, 0, 3, 5, 9, 12, 21], 5) == [-1, 0, 3, 5, 9, 21]\nassert maximum([2, 2, 3, 5, 0, 0, 7, 2, 4], 2) == [2, 4]\nassert maximum([2, 2, 3, 5, 0, 0, 7, 2, 4], 3) == [2, 3, 5]\nassert maximum([], 4) == [",
        "num_ids_2": 66,
        "num_ids_4": 107
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    maximum([2, 5, 1, 0, 4], 3) == [-1000, 5, 4, 2, 0]\n    maximum([1, 5, 10], 3) == [10, 5, 1]\n    maximum([2, 4, 3], 3) == [-1000, 4, 3",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert maximum([-20, -30, -10, -12, 10, 12, 20], 2) == [-20, -12, 10, 20], 'Wrong'\nassert maximum([1, 2, 3, 4, 5], 1) == [5], 'Wrong'\n",
        "num_ids_2": 42,
        "num_ids_4": 66
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmaximum([3, 2, 3], 2) == [3, 3]\nmaximum([5, 6, 4, 7, 8], 2) == [5, 8]",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximum([], 1) == []\nassert maximum([1], 1) == [1]\nassert maximum([1, 3], 1) == [1]\nassert maximum([1, 3, 5], 1) == [5]\nassert maximum([1, 3, 5], 2) == [5, 3]\n",
        "num_ids_2": 22,
        "num_ids_4": 52
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solution([2, 8, 1, 3, 10, 6]) == 18\nassert     solution([2, 8, 1, 3, 10]) == 16\nassert     solution([2, 8, 1, 3, 10, 6, 4]) == 2",
        "num_ids_2": 38,
        "num_ids_4": 60
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solution([2, 1, 3, 4]) == 0, \"Should be 0\"\nassert     solution([2, 1, 3, 5]) == 5, \"Should be 5\"\nassert     solution([0, 1, 3, 4]) == 4, \"Should be 4\"\nassert     solution([10]) == 10, \"Should be 10\"\nassert     solution([0, -2, -5, -8, -1]) == -9, \"Should be -9\"\n",
        "num_ids_2": 44,
        "num_ids_4": 82
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solution([0, 1, 2, 3, 4, 5, 6, 7, 8]) == 0, \"Wrong solution\"\nassert     solution([0, 1, 2, 3, 4, 5, 6, 7, 8]) == 30, \"Wrong solution\"\nassert     solution([1, 3, 5]) == 6, \"Wrong solution\"\nassert     solution([5]) == 5, \"Wrong solution\"\nassert     solution([]) == 0, \"Wrong solution",
        "num_ids_2": 64,
        "num_ids_4": 100
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solution([1,2,3,4]) == 5\nassert     solution([1,2,3,4,4,3,2,1]) == 10\n\nif __name__ == '__main__':\n    import sys\n    def test(did_pass):\n        \"\"\"  Print the result of a test.  \"\"\"\n        linenum = sys._getframe(1).f_lineno   # Get the caller's line number.\n        if did_pass:\n            msg = \"Test at line {0} ok.\".format(linenum)\n        else:\n            msg = (\"Test at line {0} FAILED.\".format(linenum))\n        print(msg)\n\n    test(solution([1,2,3,4]) == 5)\n    test(solution([1,2,3,4,4,3,2,1]) == 10",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert solution([2, 1, 3]) == 2\nassert solution([2, 2, 3]) == 5\nassert solution([4, 2, 5]) == 5\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(solution([1,3,2,5]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     solution([5,2,7,6]) == 5, \"base case 1\"\nassert     solution([9,5,8,4,7,2,6,1]) == 18, \"base case 2\"\nassert     solution([1,2,3,4,5,6,7,8,9]) == 14, \"base case 3\"\nassert     solution([1,1,1]) == 0, \"base case 4\"\nassert     solution([9,9,9,9,9]) == 81, \"base case 5\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     solution([1, 3, 2, 6, 4, 1]) == 6, \"1, 3, 2, 6, 4, 1\"\nassert     solution([2, 1, 2, 3, 1]) == 3, \"2, 1, 2, 3, 1\"\nassert     solution([1, 3, 5]) == 2, \"1, 3, 5\"\nassert     solution([3, 3, 2, 2]) == 2, \"3, 3, 2, 2\"\nassert     solution([1, 2, 3, 4, 5, 6, 7]) == 0, \"1, 2, 3, 4, 5, 6, 7\"\n",
        "num_ids_2": 64,
        "num_ids_4": 112
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solution([1,2,3,4,5]) == 0, \"Wrong answer\"\nassert     solution([1,2,3,5,6]) == 0, \"Wrong answer\"\nassert     solution([1,2,3,4,6]) == 9, \"Wrong answer\"\nassert     solution([1,1,3,3,5,6]) == 6, \"Wrong answer\"",
        "num_ids_2": 48,
        "num_ids_4": 98
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_elements([1, 2, 3], 2) == 5, 'Wrong result!'\nassert     add_elements([1, 2, 3], 1) == 3, 'Wrong result!'\nassert     add_elements([2, 7, 11, 15], 3) == 10, 'Wrong result!'\nassert     add_elements([10], 1) == 11, 'Wrong result!'\nassert     add_elements([2, 3, 4], 2) == 5, 'Wrong result!'\n",
        "num_ids_2": 48,
        "num_ids_4": 94
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_empty_slot(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return the\n    slots from arr with at most k elements to be filled. Return an empty\n    array if there is no space to put an additional element.\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef test_find_empty_slot():\n    arr = [-1,0,2,3,4,5,6,7]\n    k = 5\n    assert find_empty_slot(arr, k) == [0,4]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_elements([20, 30, 10, 40], 2) == 50\nassert     add_elements([20, 30, 10, 40, 50, 60], 2) == 90\nassert     add_elements([10, 20, 30, 40, 50, 60], 2) == 60\nassert     add_elements([10, 20, 30, 40, 50, 60, 70, 80, 90], 2) == 120\n",
        "num_ids_2": 44,
        "num_ids_4": 98
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_elements([12, 24, 29, 23, 39, 48, 50, 39, 69, 69, 23, 31, 21, 14, 20, 20, 31, 49, 69, 69, 69, 69, 69, 69, 69, 69, 69], 3) == 116\nassert     add_elements([11, 22, 12, 21, 22], 3) == 27\nassert     add_elements([-1, -3, -4, -5, -6, -7], 1) == -12\nassert     add_elements([0], 1) == 0\nassert     add_elements([1, 1], 1) == 2\n",
        "num_ids_2": 88,
        "num_ids_4": 133
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_elements([3, 8], 1) == 15\nassert     add_elements([2, 3, 5], 2) == 13\nassert     add_elements([1, 1, 1, 1, 1], 3) == 12\nassert     add_elements([], 0) == 0\nassert     add_elements([0], 0) == 0\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    import timeit\n    \n    def check_add_elements(func, arr, k):\n        arr = arr[:k]\n        print(f\"{func.__name__} on array {arr} (size={len(arr)}) with k={k}\")\n        arr_copy = arr[:]\n        start = timeit.default_timer()\n        sum = func(arr, k)\n        end = timeit.default_timer()\n        print(f\"{func.__name__} returned sum={sum} (computed in {end - start})\")\n        print()\n        print(f\"arr_copy={arr_copy}\")\n        assert sum == sum, f\"Wrong answer! sum={sum}, arr_copy={arr_copy}\"\n        \n    check_add_elements(add_elements, [1, 2, 3, 1, 2, 3, 4, 5], 2)\n    check_add_elements(add_elements, [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 3)\n    check_add_elements(add_elements, [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5)\n    check_add_elements(add_elements, [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 6)\n    check_add_elements(add_elements, [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 8)\n    check_add_elements(add_elements, [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 9)\n    check_add_elements(add_elements, [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n\nif __name__ == '__main__':\n    arr = [12, 13, 14, 15]\n    k = 2\n    assert add_elements(arr, k) == 12\n    assert add_elements(arr, k) == 14\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_elements([], 1) == 0\nassert     add_elements([0], 1) == 0\nassert     add_elements([0, 0], 1) == 0\nassert     add_elements([0, 1, 2, 3], 1) == 0\nassert     add_elements([0, 1, 2, 3], 2) == 4\n",
        "num_ids_2": 27,
        "num_ids_4": 63
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(0) == None, 'get_odd_collatz(0) should return None'\nassert     get_odd_collatz(1) == [1], 'get_odd_collatz(1) should return [1]'\nassert     get_odd_collatz(2) == [1, 2], 'get_odd_collatz(2) should return [1, 2]'\nassert     get_odd_collatz(3) == [1, 2, 3], 'get_odd_collatz(3) should return [1, 2, 3]'\nassert     get_odd_collatz(4) == [1, 2, 3, 5], 'get_odd_collatz(4) should return [1, 2, 3, 5]'\n",
        "num_ids_2": 60,
        "num_ids_4": 134
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(4) == [2,3]\nassert     get_odd_collatz(5) == [3,2]\nassert     get_odd_collatz(7) == [4,2,1,3]\nassert     get_odd_collatz(9) == [4,3,2,1]\nassert     get_odd_collatz(10) == [4,3,2,1]\n",
        "num_ids_2": 36,
        "num_ids_4": 80
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(1)     == [1]\nassert     get_odd_collatz(10)     == [1, 3, 7, 10]\nassert     get_odd_collatz(15)     == [1, 3, 7, 10, 13, 21, 34, 55, 89, 144]\nassert     get_odd_collatz(100)     == [1, 3, 7, 10, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946]\nassert     get_odd_collatz(101)     == [1, 3, 7, 10, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 25719]\n",
        "num_ids_2": 40,
        "num_ids_4": 134
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(0) == []\nassert get_odd_collatz(1) == []\nassert get_odd_collatz(2) == [2]\nassert get_odd_collatz(3) == [2,3]\nassert get_odd_collatz(6) == [3,5,2]\n",
        "num_ids_2": 27,
        "num_ids_4": 59
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 1]\nassert     get_odd_collatz(3) == [1, 1, 2]\nassert     get_odd_collatz(4) == [1, 1, 2, 2, 4]\nassert     get_odd_collatz(5) == [1, 1, 2, 2, 4, 2, 4, 5, 5, 5, 6, 6, 6, 6, 8]\n",
        "num_ids_2": 34,
        "num_ids_4": 78
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\n\nprint()\nprint('Test 1:')\nprint('-'*80)\ntest_cases = ['30-02-1999','12-31-1954','02-14-2020']\nfor date in test_cases:\n    print(date, '-->', valid_date(date))\nprint('-'*80)\nprint()\n\n\n\nprint('Test 2:')\nprint('-'*80)\ntest_cases = ['','1-1-2000','12-31-1999']\nfor date in test_cases:\n    print(date, '-->', valid_date(date))\nprint('-'*80)\nprint()\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     valid_date(\"01-01-2020\") == True\nassert     valid_date(\"01-01-2020\") == False\nassert     valid_date(\"01-01-20\") == False\nassert     valid_date(\"\") == False\nassert     valid_date(\"1-01-2020\") == False\n",
        "num_ids_2": 30,
        "num_ids_4": 55
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     valid_date('11-11-2020') == True\nassert     valid_date('11-11-2020') == True\nassert     valid_date('11-11-2020') == True\nassert     valid_date('11-11-2020') == True\nassert     valid_date('11-11-2020') == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     valid_date(\"11-1-2010\") == True, \"1. The first test case is wrong\"\nassert     valid_date(\"1-1-2010\") == False, \"2. The second test case is wrong\"\nassert     valid_date(\"-1-1-2010\") == False, \"3. The third test case is wrong\"\nassert     valid_date(\"11-1-2010\") == False, \"4. The fourth test case is wrong\"\n",
        "num_ids_2": 52,
        "num_ids_4": 105
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     valid_date(\"01-13-1996\") == False, \\\n        \"The date is not valid\"\nassert     valid_date(\"\") == False, \\\n        \"The date is not valid\"\nassert     valid_date(\"1-1-1996\") == True, \\\n        \"The date is valid\"\nassert     valid_date(\"04-29-1997\") == True, \\\n        \"The date is valid\"\nassert     valid_date(\"11-2-2011\") == True, \\\n        \"The date is valid\"\n",
        "num_ids_2": 29,
        "num_ids_4": 63
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     valid_date(\"\") == False\nassert     valid_date(\"\") == False\nassert     valid_date(\"01-01-2021\") == True\nassert     valid_date(\"01-01-2022\") == False\nassert     valid_date(\"01-01-2022\") == False\n",
        "num_ids_2": 20,
        "num_ids_4": 52
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert valid_date(\"\") == False\nassert valid_date(\"asd\") == False\nassert valid_date(\"1-2-2011\") == True\nassert valid_date(\"13-2-2011\") == True\n",
        "num_ids_2": 12,
        "num_ids_4": 37
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     valid_date(datetime.now().strftime(\"%d-%m-%Y\")) == False, \\\n    \"The date should be in the format: mm-dd-yyyy\"\nassert     valid_date(datetime.now().strftime(\"%m-%d-%Y\")) == False, \\\n    \"The date should be in the format: mm-dd-yyyy\"\nassert     valid_date(datetime.now().strftime(\"%d-%m-%Y\")) == True, \\\n    \"The date should be in the format: mm-dd-yyyy\"\n",
        "num_ids_2": 56,
        "num_ids_4": 84
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     valid_date(datetime.date(2020,3,21)) == True\nassert valid_date(datetime.date(2019,10,1)) == True\nassert valid_date(datetime.date(2020,12,1)) == False\nassert valid_date(datetime.date(2020,3,31)) == True\nassert valid_date(datetime.date(2021,2,29)) == True\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_words('aaa,bbb') == ['aaa', 'bbb']\nassert     split_words('aaa,bbb,ccc') == ['aaa', 'bbb', 'ccc']\nassert     split_words('aaa,bbb,ccc') == ['aaa', 'bbb', 'ccc']\nassert     split_words('aaa,bbb,ccc') == ['aaa', 'bbb', 'ccc']\nassert     split_words('aaa,bbb,ccc') == ['aaa', 'bbb', 'ccc']\n",
        "num_ids_2": 47,
        "num_ids_4": 101
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_words('a,b,c') == ['a', 'b', 'c'], \\\n        \"wrong result of split_words('a,b,c')\"\nassert     split_words('a,b') == ['a', 'b'], \\\n        \"wrong result of split_words('a,b')\"\nassert     split_words('1,2,3') == ['1', '2', '3'], \\\n        \"wrong result of split_words('1,2,3')\"\nassert     split_words('a,b,c,') == ['a', 'b', 'c'], \\\n        \"wrong result of split_words('a,b,c,')\"\nassert     split_words('a,b,c,') == ['a', 'b', 'c', ''], \\\n        \"wrong result of split_words('a,b,c,')\"\n",
        "num_ids_2": 45,
        "num_ids_4": 96
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert ",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_words('abcd') == ['ab', 'cd']\nassert     split_words('abcde') == ['ab', 'cd', 'e']\nassert     split_words('abc def') == ['ab', 'cd', 'e f']\nassert     split_words('abcd efgh') == ['ab', 'cd', 'e f']\nassert     split_words('abcd efgh k') == ['ab', 'cd', 'e f', 'k']",
        "num_ids_2": 37,
        "num_ids_4": 82
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_words('hello world, how are you') == ['hello', 'world', 'how', 'are', 'you']\nassert     split_words('ab cd efg hijk lmn op qr st uv wxyz') == ['ab', 'cd', 'efg', 'hijk', 'lmn', 'op', 'qr','st', 'uv', 'wxyz']\nassert     split_words('hello world, how are you') == ['hello', 'world', 'how', 'are', 'you']\nassert     split_words('abcd efg hijk lmn opq rst uv wxyz') == ['abcd', 'efg', 'hijk', 'lmn', 'opq', 'rst', 'uv', 'wxyz']\nassert     split_words('hello world, how are you') == ['hello', 'world', 'how', 'are', 'you']\n",
        "num_ids_2": 91,
        "num_ids_4": 179
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_words('abc, a b c, a, b, c') == ['abc', 'a b c', 'a', 'b', 'c']\nassert     split_words('abc, a b c, a, b, c') == ['abc', 'a', 'b', 'c']\nassert     split_words('abc, a b c, a, b, c') == ['abc']\nassert     split_words('abc, a b c, a, b, c') == ['abc']\nassert     split_words('abc, a b c, a, b, c') == ['a', 'b', 'c']\n",
        "num_ids_2": 69,
        "num_ids_4": 115
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert split_words(\"one, two\") == ['one', 'two']\nassert split_words(\"one, two, three\") == ['one', 'two', 'three']\nassert split_words(\"one, two, three, four\") == ['one', 'two', 'three', 'four']\nassert split_words(\"one, two, three, four, five\") == ['one', 'two', 'three', 'four', 'five']\n",
        "num_ids_2": 20,
        "num_ids_4": 69
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_words('a,b,c') == ['a', 'b', 'c']\nassert     split_words('a,b,c,d') == ['a', 'b', 'c', 'd']\nassert     split_words('a,b,c,d') == ['a', 'b', 'c', 'd']\nassert     split_words('a,b,c,d,e') == ['a', 'b', 'c', 'd', 'e']\nassert     split_words('a,b,c,d,e') == ['a', 'b', 'c', 'd', 'e']\n",
        "num_ids_2": 51,
        "num_ids_4": 112
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split_words(\"One,two,words\") == ['on', 'te', 'o', 'tw', 'ou', 'r', 'ds'], \\\n    \"incorrect output\"\nassert     split_words(\"One two 3 four\") == ['one', 'two', 'thr', 'four'], \\\n    \"incorrect output\"\nassert     split_words(\"\") == [], \\\n    \"incorrect output\"\nassert     split_words(\"One Two\") == ['on', 'te', 'ou', 'th'], \\\n    \"incorrect output\"\nassert     split_words(\"one,two\") == ['o', 'e', 'w', 'e', 'r', 'o', 't', 'w'], \\\n    \"incorrect output\"\n",
        "num_ids_2": 65,
        "num_ids_4": 102
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sorted([1,2,3,4]) == True\nassert     is_sorted([1,2,3,3]) == False\nassert     is_sorted([1,2,3,3,4]) == False\nassert     is_sorted([1,2,3,4,1]) == False\nassert     is_sorted([1,2,3,4,1,2]) == False\n",
        "num_ids_2": 36,
        "num_ids_4": 76
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_sorted([1, 2, 3, 4]) == True\nassert is_sorted([1, 3, 2, 4]) == False\nassert is_sorted([2, 2, 4, 4]) == True\nassert is_sorted([3, 3, 4, 4]) == True\n",
        "num_ids_2": 20,
        "num_ids_4": 54
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not is_sorted([1, 4, 6, 1, 5, 9, 5, 8])\nassert not is_sorted([1, 1, 1, 1, 1])\nassert is_sorted([1, 2, 3, 4, 5])\nassert is_sorted([5, 6, 7, 8, 9])\n",
        "num_ids_2": 27,
        "num_ids_4": 62
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_sorted([1,2,3,4,5])         ==     True\nassert     is_sorted([1,2,3,3,5])         ==     False\nassert     is_sorted([1,1,2,2,3,4])     ==     False\nassert     is_sorted([1,2,2,3,4])         ==     False\nassert     is_sorted([1,1,1,2,2,3,3])     ==     False\n",
        "num_ids_2": 44,
        "num_ids_4": 90
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sort(lst):\n    '''\n    Given a list of numbers, return a sorted copy of the list.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    return\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_sorted([1,2,4,5,1,2,3,4,5,5,4,1,2]) == True, 'Should be True'\nassert     is_sorted([5,4,3,2,1,2,1,4,3,2]) == False, 'Should be False'\nassert     is_sorted([1,2,3,4,5]) == False, 'Should be False'\nassert     is_sorted([1,2,3,4,5,4,3,2,1,2,5]) == False, 'Should be False'\n",
        "num_ids_2": 78,
        "num_ids_4": 142
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\", \"Wrong output\"\nassert     intersection((1, 3), (2, 3)) == \"YES\", \"Wrong output\"\nassert     intersection((1, 3), (2, 3)) == \"NO\", \"Wrong output\"\nassert     intersection((3, 5), (2, 3)) == \"NO\", \"Wrong output\"\nassert     intersection((0, 10), (5, 15)) == \"NO\", \"Wrong output\"\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersection((1, 2), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (2, 5)) == \"NO\"\nassert     intersection((1, 2), (2, 2)) == \"NO\"\nassert     intersection((1, 2), (1, 2)) == \"YES\"",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersection((1, 2), (2, 3)) == \"NO\"\nassert     intersection((1, 2), (1, 2)) == \"YES\"\nassert     intersection((1, 2), (1, 3)) == \"YES\"\nassert     intersection((1, 2), (2, 4)) == \"NO\"\nassert     intersection((2, 3), (1, 2)) == \"YES\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef test_intersection():\n    assert intersection((1, 3), (2, 4)) == \"NO\"\n    assert intersection((1, 3), (1, 3)) == \"YES\"\n    assert intersection((1, 3), (3, 5)) == \"YES\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection((1,3), (2,4)) == 'NO'\nassert     intersection((0,2), (1,3)) == 'NO'\nassert     intersection((0,2), (2,5)) == 'NO'\nassert     intersection((0,2), (1,3)) == 'NO'\nassert     intersection((0,2), (3,4)) == 'NO'\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     intersection( (1, 2), (2, 4)) == \"NO\"\nassert     intersection( (1, 2), (2, 3)) == \"YES\"\nassert     intersection( (1, 2), (1, 2)) == \"YES\"\nassert     intersection( (1, 3), (2, 3)) == \"YES\"\nassert     intersection( (1, 3), (2, 4)) == \"NO\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (4, 6)) == \"NO\"\nassert     intersection((1, 3), (1, 4)) == \"NO\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    print(intersection((1, 2), (2, 3)))\n    print(intersection((2, 3), (1, 2)))\n    print(intersection((1, 3), (2, 4)))\n    print(intersection((1, 4), (2, 3)))\n    print(intersection((1, 2), (4, 5)))\n    print(intersection((1, 5), (4, 5)))\n    print(intersection((1, 5), (4, 6)))\n    print(intersection((1, 4), (5, 6)))\n    print(intersection((1, 4), (5, 5)))\n    print(intersection((2, 5), (3, 4)))\n    print(intersection((2, 5), (5, 4)))\n    print(intersection((3, 5), (4, 4)))\n    print(intersection((3, 4), (4, 4)))\n    print(intersection((1, 2), (2, 3)))\n    print(intersection((2, 3), (1, 2)))\n    print(intersection((3, 4), (4, 5)))\n    print(intersection((1, 5), (4, 6)))\n    print(intersection((2, 5), (3, 6)))\n    print(intersection((1, 5), (4, 6)))\n    print(intersection((1, 4), (5, 6)))\n    print(intersection((1, 5), (5, 4)))\n    print(intersection((2, 5), (3, 4)))\n    print(intersection((2, 5), (5, 4)))\n    print(intersection((3, 5), (4, 4)))\n    print(intersection((3, 4), (4, 4)))\n    print(intersection((1, 2), (2, 3)))\n    print(intersection((2, 3), (1, 2)))\n    print(intersection((1, 3), (2, 4)))\n    print(intersection((2, 4), (1, 2)))\n    print(intersection((2, 4), (1, 3)))\n    print(intersection((1, 4), (2, 3)))\n    print(intersection((1, 4), (2, 3)))\n    print(intersection((2, 4), (1, 3)))\n    print(intersection((2, 4), (1, 2)))\n    print(intersection((1, 2), (3, 4)))\n    print(intersection((2, 3), (4, 5)))\n    print(intersection((3, 4), (4, 5)))\n    print(intersection((4, 5), (3, 4)))\n    print(intersection((3, 4), (4, 5)))\n    print(intersection((5, 6), (3, 4)))\n    print(intersection((4, 5), (5, 6)))\n    print(intersection((3, 4), (4, 5)))\n    print(intersection((5, 6), (4, 5)))\n    print(intersection((5, 6), (5, 6)))\n    print(intersection((4, 5), (5, 6)))\n    print(intersection((4, 5), (4, 5)))\n    print(intersection((1, 2), (2, 3)))\n    print(intersection((1, 3), (2, 4)))\n    print(intersection((1, 4), (2, 3)))\n    print(intersection((1, 4), (3, 4)))\n    print(intersection((1, 3), (4, 4)))\n    print(intersection((1, 4), (4, 4)))\n    print(intersection((1, 4), (5, 6)))\n    print(intersection((1, 4), (4, 5)))\n    print(intersection((1, 4), (5, 6)))\n    print(intersection((1, 4), (5, 5)))\n    print(intersection((1, 4), (4, 5)))\n    print(intersection((1, 4), (5, 4)))\n    print(intersection((1, 4), (5, 5)))\n    print(intersection((1, 4), (4, 4)))\n    print(intersection((1, 4), (5, 6)))\n    print(intersection((1, 4), (6, 6)))\n    print(intersection((1, 4), (5, 6)))\n    print",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ninterval1 = (1, 3)\ninterval2 = (2, 4)\nprint(intersection(interval1, interval2))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [-1, 2, 3, 4, -5]\n    print(prod_signs(arr))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     [1, 1, 1, 1, -1, 1, 1, 1, 0] == prod_signs([1, 1, 1, 1, -1, 1, 1, 1, 0])\nassert     [1, 1, 1, 1, -1, 1, 1, 1, 0] == prod_signs([1, 1, 1, 1, -1, 1, 1, 1, 0])\nassert     [1, 1, 1, 1, -1, 1, 1, 1, 0] == prod_signs([1, 1, 1, 1, -1, 1, 1, 1, 0])\nassert     None == prod_signs([1, 1, 1, 1, -1, 1, 1, 1, 0])\nassert     [1, 1, 1, 1, -1, 1, 1, 1, 0] == prod_signs([1, 1, 1, 1, -1, 1, 1, 1, 1])\n",
        "num_ids_2": 96,
        "num_ids_4": 173
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prod_signs([-2, -3, -4, -5]) == -30\nassert     prod_signs([-1, -2, -3, -4]) == -24\nassert     prod_signs([1, 2, 3, 4]) == 60\nassert     prod_signs([-1, 2, -3, 4]) == -8\nassert     prod_signs([-1, 2, -3, -4]) == 8\n",
        "num_ids_2": 48,
        "num_ids_4": 89
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prod_signs([0, -1, 0]) == 0\nassert     prod_signs([-1, 0, -1]) == -1\nassert     prod_signs([-1, 0, -1]) == -1\nassert     prod_signs([1, -1, 1]) == 1\nassert     prod_signs([-1, -1, 1]) == 1\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (prod_signs([-1, 0, -1]) == 1), 'Wrong prod_signs'\nassert     (prod_signs([1, 1, 1, -1, -1]) == 0), 'Wrong prod_signs'\nassert     (prod_signs([1, -1, -1]) == 1), 'Wrong prod_signs'\nassert     (prod_signs([-1, 1, -1]) == 1), 'Wrong prod_signs'\nassert     (prod_signs([1, 1, -1]) == 0), 'Wrong prod_signs'\n",
        "num_ids_2": 62,
        "num_ids_4": 120
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     prod_signs(\n        [1,2,3,-4,5]\n        ) == 0, \"wrong\"\n\nassert     prod_signs(\n        [1,-2,-3,4,5]\n        ) == -10, \"wrong\"\n\nassert     prod_signs(\n        [-1,1,1]\n        ) == 0, \"wrong\"\n",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prod_signs([1, 2, 3, 4, 5, -1]) == 25\nassert     prod_signs([1, 2, 3, 4, 5, -5]) == 0\nassert     prod_signs([-3, 4, 5, 6, 7, 8]) == 37\nassert     prod_signs([0, 0, 0, 0, 0, 0]) == 0\n",
        "num_ids_2": 48,
        "num_ids_4": 95
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prod_signs([-1, -1, 1]) == -3\nassert     prod_signs([1, -1, -1, 1]) == -3\nassert     prod_signs([1, 1, 1]) == 6\nassert     prod_signs([-1, -1, 1, 1]) == 2\nassert     prod_signs([]) == None\n",
        "num_ids_2": 42,
        "num_ids_4": 80
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     minPath([[1, 3, 2, 4, 5, 6, 7, 7, 8, 9, 10],\n        [4, 7, 4, 5, 2, 2, 5, 1, 8, 3, 4],\n        [3, 2, 6, 3, 4, 1, 3, 6, 8, 6, 4],\n        [5, 1, 4, 4, 5, 4, 2, 2, 4, 8, 1],\n        [10, 10, 10, 10, 10, 1, 3, 4, 10, 7, 5],\n        [4, 1, 6, 6, 8, 7, 3, 7, 9, 5, 2],\n        [1, 1, 1, 1, 1, 8, 1, 9, 3, 2, 3],\n        [7, 5, 6, 1, 9, 2, 5, 6, 8, 9, 1],\n        [5, 5, 5, 8, 5, 9, 1, 5, 1, 6, 5],\n        [6, 9, 8, 8, 1, 7, 2, 8, 6, 8, 3],\n        [9, 1, 8, 8, 1, 7, 1, 1, 4, 4, 1],\n        [10, 2, 7, 5, 3, 4, 5, 4, 2, 5, 4],\n        [1, 4, 7, 3, 4, 5, 8, 5, 3, 7, 7],\n        [3, 4, 4, 4, 4, 5, 5, 2, 6, 5, 4],\n        [4, 9, 4, 6, 9, 5, 1, 1, 1, 2, 2],\n        [8, 1, 5, 4, 7, 8, 3, 6, 5, 4, 5],\n        [5, 6, 7, 2, 5, 4, 3, 3, 4, 8, 5],\n        [2, 2, 1, 2, 1, 5, 2, 1, 5, 2, 1],\n        [4, 5, 8, 5, 5, 2, 2, 2, 1, 2, 3],\n        [7, 4, 2, 4, 5, 6, 2, 8, 8, 6, 6],\n        [7, 6, 3, 3, 4, 7, 5, 6, 5, 8, 6],\n        [5, 1, 1, 5, 1, 8, 6, 8, 5, 5, 2],\n        [6, 1, 1, 2, 6, 7, 2, 8, 7, 1, 5],\n        [6, 1, 6, 4, 1, 3, 1, 2, 3, 2, 5],\n        [5, 6, 8, 8, 1, 4, 3, 4, 6, 6, 3],\n        [1, 6, 1, 1, 3, 4, 5, 6, 4, 6, 1],\n        [5, 2, 4, 4, 4, 6, 5, 4, 1, 5, 4],\n        [7, 8, 5, 7, 6, 8, 8, 8, 6, 8, 8],\n        [3, 5, 6, 3, 5, 6, 3, 5, 6, 3, 5],\n        [6, 6, 1, 5, 6, 1, 5, 6, 8, 6, 1],\n        [6, 2, 5, 8, 5, 4, 1, 5, 5, 6, 2],\n        [4, 8, 3, 3, 2, 1, 5, 6, 2, 6, 6],\n        [1, 2, 8, 5, 6, 5, 5, 6, 1, 6, 4],\n        [8, 8, 8, 8, 8, 5, 2, 1, 5, 1, 8],\n        [5, 4, 8, 5, 8, 5, 4, 1, 1, 4, 8],\n        [5, 5, 3, 5, 1, 8, 5, 8, 5, 5, 3],\n        [6, 4, 4, 6, 8, 4, 5, 7, 4, 6, 8],\n        [7, 6, 1, 7, 7, 7, 2, 8, 8, 7, 6],\n        [1, 8, 6, 6, 4, 5, 6, 4, 2, 4, 6],\n        [7, 8, 2, 3, 7, 6, 8, 7, 6, 7, 6],\n        [4, 1, 6, 5, 1, 4, 4, 2, 5, ",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(minPath(grid = [[1,3,1],[2,2,2],[2,2,2]], k = 2))\n    print(minPath(grid = [[5,1,3],[4,2,2],[3,3,3],[3,3,3],[3,3,3]], k = 2))\n    print(minPath(grid = [[1,2,3],[4,5,6]], k = 4))\n    print(minPath(grid = [[5,1,3],[4,2,2],[3,3,3],[3,3,3],[3,3,3]], k = 4))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minPath([[0, 1, 1],\n            [1, 0, 1],\n            [1, 1, 1]], 1) == [0, 1]\nassert     minPath([[0, 1, 1],\n            [1, 0, 1],\n            [1, 1, 1]], 3) == [1, 1]\nassert     minPath([[0, 0, 0, 1],\n            [0, 0, 0, 1],\n            [0, 0, 0, 1],\n            [0, 0, 0, 1]], 1) == [0, 1, 1, 1]\nassert     minPath([[0, 1, 1],\n            [1, 0, 1],\n            [1, 1, 1]], 1) == [0, 1, 1]\nassert     minPath([[0, 1, 1],\n            [1, 0, 1],\n            [1, 1, 1]], 3) == [1, 1]\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(minPath(grid, k))\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     minPath([[1, 2, 1],\n    [0, 1, 0],\n    [1, 1, 0]], 3) == [[1, 2, 1],\n    [1, 2, 1],\n    [1, 2, 1]]\n\nassert     minPath([[1, 1, 1],\n    [0, 1, 0],\n    [1, 1, 0]], 3) == [[1, 1, 1],\n    [1, 1, 1],\n    [1, 1, 1]]\n\nassert     minPath([[1, 2, 1],\n    [0, 1, 0],\n    [1, 1, 1]], 4) == [[1, 1, 1],\n    [1, 1, 1],\n    [1, 1, 1]]\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(tri(1))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert tri(1) == [3]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tri(1) == [3]\nassert     tri(2) == [1,2]\nassert     tri(4) == [1,2,3,4]\nassert     tri(5) == [1,2,3,4,5]\nassert     tri(6) == [1,2,3,4,5,6]",
        "num_ids_2": 24,
        "num_ids_4": 60
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tri(2) == [3, 1]\nassert     tri(4) == [1, 2, 1, 1]\nassert     tri(5) == [1, 2, 1, 1, 2]\nassert     tri(6) == [1, 2, 1, 1, 2, 1]\nassert     tri(7) == [1, 2, 1, 1, 2, 1, 1]\n",
        "num_ids_2": 30,
        "num_ids_4": 70
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndigits(1) == 1\nassert digits(24) == 0\nassert digits(25) == 25\nassert digits(500) == 0\nassert digits(1001) == 0\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digits(6) == 0, \"Should be 0\"\nassert     digits(7) == 0, \"Should be 0\"\nassert     digits(42) == 0, \"Should be 0\"\nassert     digits(998) == 0, \"Should be 0\"\nassert     digits(3) == 3, \"Should be 3\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digits(7) == 21\nassert     digits(8) == 64\nassert     digits(1) == 0\nassert     digits(0) == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digits(12) == 0 \nassert     digits(51) == 0 \nassert     digits(51) == 0 \nassert     digits(80) == 0 \nassert     digits(100) == 0 \n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digits(7) == 3\nassert     digits(2) == 0\nassert     digits(3) == 2\nassert     digits(4) == 4\nassert     digits(8) == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert digits(0) == 0\nassert digits(1) == 0\nassert digits(2) == 0\nassert digits(3) == 0\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digits(123) == 6, \"Error in digits(123)!\"\nassert digits(1233) == 0, \"Error in digits(1233)!\"\nassert digits(1234567) == 48, \"Error in digits(1234567)!\"\nassert digits(12345) == 0, \"Error in digits(12345)!\"\nassert digits(12) == 0, \"Error in digits(12)!\"\n",
        "num_ids_2": 38,
        "num_ids_4": 78
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert digits(1) == 0\nassert digits(4) == 0\nassert digits(12) == 0\nassert digits(123) == 0\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digits(20)    ==    2\nassert     digits(25)    ==    3\nassert     digits(50)    ==    0\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_nested('')     == False\nassert is_nested('[][]')     == False\nassert is_nested('[][[]]')     == False\nassert is_nested('[[]]')     == False\nassert is_nested('[[]]')     == False\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_nested('[]') == True\nassert     is_nested('[[]]') == True\nassert     is_nested('[[[]]]') == True\nassert     is_nested('[[[]]]') == False\nassert     is_nested('[[[[]]]]') == False\n",
        "num_ids_2": 25,
        "num_ids_4": 55
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_nested(\"(((((())))\") == True, \\\n            \"Expected True for input (((((())))), expected True\"\nassert     is_nested(\"(((())()))\") == True, \\\n            \"Expected True for input (((()())), expected True\"\nassert     is_nested(\"((())\") == False, \\\n            \"Expected False for input ((()), expected False\"\nassert     is_nested(\"(()\") == False, \\\n            \"Expected False for input ((()), expected False\"\nassert     is_nested(\"(((()))\") == False, \\\n            \"Expected False for input ((()()), expected False",
        "num_ids_2": 36,
        "num_ids_4": 66
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_nested('([])') == True\nassert     is_nested('([)]') == False\nassert     is_nested('([)]') == False\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_nested('[[]]') == True, 'This should be True'\nassert is_nested('[[[]]]') == False, 'This should be False'\nassert is_nested('[[]]]') == False, 'This should be False'\nassert is_nested('[[]]][]') == False, 'This should be False'\nassert is_nested('[[][]]]') == False, 'This should be False'\n",
        "num_ids_2": 41,
        "num_ids_4": 82
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"Pass\" if (is_nested('[]')==True) else \"Fail\")\nprint(\"Pass\" if (is_nested('[][]')==True) else \"Fail\")\nprint(\"Pass\" if (is_nested('[[[[')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[[')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[]')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[[')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[]')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested(']]')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[[]]')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[]][')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[[[[')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[[')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[]')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[[')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[]')==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('}'))==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('{}'))==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[}'))==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('{[]}'))==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[]'))==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('{[]}'))==False) else \"Fail\")\nprint(\"Pass\" if (is_nested(']'))==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('{[]}'))==False) else \"Fail\")\nprint(\"Pass\" if (is_nested(']]'))==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('{[]}'))==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[[]]'))==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[[]]'))==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[]]['))==False) else \"Fail\")\nprint(\"Pass\" if (is_nested('[[][]'))==False) else \"Fail\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_nested(\"(((3+1)+2)-(4+5))\") == True\nassert     is_nested(\"(((3+1)+2)-(4+5))\") == False\nassert     is_nested(\"(3+1)+(2)-(4+5)\") == False\n",
        "num_ids_2": 48,
        "num_ids_4": 72
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (is_nested('[()]')) == True, 'Inputs are not equal'\nassert     (is_nested('[[[]]]')) == True, 'Inputs are not equal'\nassert     (is_nested('[)(]')) == False, 'Inputs are not equal'\nassert     (is_nested('[][]')) == False, 'Inputs are not equal'\nassert     (is_nested('[()][]()')) == False, 'Inputs are not equal'\n",
        "num_ids_2": 47,
        "num_ids_4": 93
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_squares([-2, -2, -1, -2, -2, 2, 3, 4, 4, 5, 6, 7, 8, 9]) == 25\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_squares([1,2,3,4,5]) == [1, 4, 9, 16, 25]\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_squares([0, 1, 2]) == 2\nassert     sum_squares([1, 2, 3]) == 5\nassert     sum_squares([9, 8, 7]) == 25\n\ndef sum_squares(lst):\n    return sum(map(lambda x: x * x, lst))\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 25\nassert     sum_squares([1, 3, 10]) == 30\nassert     sum_squares([]) == 0\n",
        "num_ids_2": 36,
        "num_ids_4": 47
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert 1 == sum_squares([1, 2, 3])\nassert 9 == sum_squares([1, 2, 3, 0, -1, -2, -3])\nassert 0 == sum_squares([0])\nassert 0 == sum_squares([])\n",
        "num_ids_2": 18,
        "num_ids_4": 55
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert [1, 2, 3, 4] == sum_squares([1, 2, 3, 4]), 'WRONG!!'\nassert [4, 5, 6, 7] == sum_squares([4, 5, 6, 7]), 'WRONG!!'\nassert [10, 8, 7, 6, 5, 4] == sum_squares([10, 8, 7, 6, 5, 4]), 'WRONG!!'\nassert [1, 2, 3, 4] == sum_squares([1, 2, 3, 4]), 'WRONG!!'\n",
        "num_ids_2": 33,
        "num_ids_4": 101
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_squares([0, 1, 2, 3]) == 25, 'incorrect'\nassert     sum_squares([0, -1, 2, -3]) == 25, 'incorrect'\nassert     sum_squares([1, 2, 3, 4]) == 36, 'incorrect'\nassert     sum_squares([-1, -2, -3, -4]) == 36, 'incorrect'\nassert     sum_squares([1, -2, -3, -4]) == 41, 'incorrect'\n",
        "num_ids_2": 48,
        "num_ids_4": 98
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('go')\nassert not check_if_last_char_is_a_letter('go ')\nassert not check_if_last_char_is_a_letter('go!')\nassert not check_if_last_char_is_a_letter('go?')\nassert not check_if_last_char_is_a_letter('go#')\n",
        "num_ids_2": 39,
        "num_ids_4": 79
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter(\"Hello World\") == True\nassert check_if_last_char_is_a_letter(\"1a2b3c\") == False\nassert check_if_last_char_is_a_letter(\"1a2b3c4\") == False\nassert check_if_last_char_is_a_letter(\"1a2b3c4a\") == False\nassert check_if_last_char_is_a_letter(\"dog cat fish\") == True\n",
        "num_ids_2": 47,
        "num_ids_4": 100
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter('hello world') == True\nassert     check_if_last_char_is_a_letter('hello') == False\nassert     check_if_last_char_is_a_letter('1') == False\nassert     check_if_last_char_is_a_letter('1 2 3') == False\nassert     check_if_last_char_is_a_letter('1 2') == False\n",
        "num_ids_2": 43,
        "num_ids_4": 87
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert check_if_last_char_is_a_letter(\"   \") == True\nassert check_if_last_char_is_a_letter(\"H\") == True\nassert check_if_last_char_is_a_letter(\"HAP\") == False\nassert check_if_last_char_is_a_letter(\"ZOMG\") == False\n",
        "num_ids_2": 23,
        "num_ids_4": 64
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter('this is a test') == True\nassert     check_if_last_char_is_a_letter('is is a test') == False\nassert     check_if_last_char_is_a_letter('test') == True\nassert     check_if_last_char_is_a_letter('qwerty') == True\nassert     check_if_last_char_is_a_letter('qwerty1234') == False\n",
        "num_ids_2": 48,
        "num_ids_4": 92
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter(\"hi\") == False\nassert     check_if_last_char_is_a_letter(\"hi word\") == True\nassert     check_if_last_char_is_a_letter(\"Hi\") == False\nassert     check_if_last_char_is_a_letter(\"word\") == False\nassert     check_if_last_char_is_a_letter(\"HI\") == False\n",
        "num_ids_2": 43,
        "num_ids_4": 85
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef can_arrange_with_sliding_window(arr):\n    \"\"\"Create a function which returns the largest index of an element\n    which is not greater than or equal to the element immediately preceding\n    it. If no such element exists then return -1. The given array will not\n    contain duplicate values. The function should work in O(n) time.\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     can_arrange([1, 1, 1, 1, 5, 3, 2, 5, 4]) == 0\nassert     can_arrange([1, 1, 1, 1, 5, 3, 2, 5, 4, 3, 3, 4, 5]) == 7\nassert     can_arrange([1, 1, 1, 1, 5, 3, 2, 5, 4, 5, 3, 3, 4]) == 6\nassert     can_arrange([1, 1, 1, 1, 5, 3, 2, 5, 4, 3, 3, 4, 5, 5, 5, 5]) == 7",
        "num_ids_2": 64,
        "num_ids_4": 142
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncan_arrange([1,2,3,4,5]) == 2\nassert \ncan_arrange([1,2,3,4,4]) == -1\nassert \ncan_arrange([1,2,3,4,3]) == 1\n\nprint(\"can_arrange successfully passed all tests\")\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (can_arrange([1, 3, 1, 5, 4, 7, 2]) == 3)\nassert     (can_arrange([1, 3, 2]) == -1)\nassert     (can_arrange([1, 3, 2, 1]) == -1)\nassert     (can_arrange([1, 2, 3]) == -1)\nassert     (can_arrange([1, 2, 2, 2]) == -1)\n",
        "num_ids_2": 45,
        "num_ids_4": 85
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     can_arrange([\"a\", \"b\", \"c\", \"d\", \"e\"]) == 2\nassert     can_arrange([\"b\", \"c\", \"d\", \"e\"]) == 1\nassert     can_arrange([\"d\", \"b\", \"c\", \"e\"]) == -1\nassert     can_arrange([\"d\", \"b\", \"c\", \"e\", \"e\"]) == -1\nassert     can_arrange([\"a\", \"b\", \"c\", \"d\", \"e\", \"e\"]) == 2\n",
        "num_ids_2": 49,
        "num_ids_4": 100
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     can_arrange([3,4,5,7]) == 1\nassert     can_arrange([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == -1\nassert     can_arrange([1,1,1,1,1,1]) == -1\nassert     can_arrange([2,3,4,5,6,7]) == -1\nassert     can_arrange([5,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == -1\n",
        "num_ids_2": 69,
        "num_ids_4": 115
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5]) == 4\nassert     can_arrange([1, 2, 4, 5, 7]) == -1\nassert     can_arrange([4, 2, 3, 1]) == -1\nassert     can_arrange([2, 3, 4, 1]) == 3",
        "num_ids_2": 41,
        "num_ids_4": 78
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5]) == 3\nassert can_arrange([1, 2, 3, 4, 5]) == -1\nassert can_arrange([1, 2, 3, 4, 5]) == 3\nassert can_arrange([1, 2, 3, 4, 5, 6]) == 4\nassert can_arrange([1, 2, 3, 4, 5, 6, 7, 8]) == 5\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([0, -1, -2, -3, -4, -5]) == (-5, 0)\nassert     largest_smallest_integers([3, -2, -1, 0]) == (3, -1)\nassert     largest_smallest_integers([-3, -2, -1, 0]) == (0, -3)\nassert     largest_smallest_integers([3, 2, 1, -4]) == (3, 1)\nassert     largest_smallest_integers([3, 2, 1, -4]) == (3, 1)\n",
        "num_ids_2": 62,
        "num_ids_4": 117
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef largest_smallest_integers_2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers(lst = [-1,2,-3,0,5,6,-3,5,3]) == (5, -1)\nassert     largest_smallest_integers(lst = [1,2,-3,0,5,-6,7,8,9]) == (1, -8)\nassert     largest_smallest_integers(lst = [-3,-1,-5,0,2,3,4]) == (3, -3)\nassert     largest_smallest_integers(lst = [-3,4,5,7,8,-2]) == (4, -2)\n",
        "num_ids_2": 80,
        "num_ids_4": 150
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert largest_smallest_integers([2, 4, 6, 8, 10]) == (10, 2)\nassert largest_smallest_integers([-10, -10, 10, -2, -3]) == (10, -10)\nassert largest_smallest_integers([1, 1, 1, 1, 1]) == (1, 1)\nassert largest_smallest_integers([-1, 2, 3, 4, 5]) == (5, -1)\n",
        "num_ids_2": 29,
        "num_ids_4": 86
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5]) == (5, -1)\nassert     largest_smallest_integers([-5, 1, -3, 4, -8]) == (-8, 4)\n\n'''\nWrite a function that takes in a positive integer n and returns\nthe sum of the squares of all the integers from 1 to n.\n'''\ndef sum_of_squares(n):\n    '''\n    Create a function that returns the sum of the squares of all\n    the integers from 1 to n.\n    '''\n    pass\n",
        "num_ids_2": 51,
        "num_ids_4": 81
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_smallest_integers([\"-1\", \"2\", \"3\", \"5\", \"1\", \"1\"]) == (1, 5)\nassert     largest_smallest_integers([\"3\", \"3\", \"3\"]) == (3, 3)\nassert     largest_smallest_integers([\"-1\"]) == (None, None)\nassert     largest_smallest_integers([\"-10\", \"20\", \"30\", \"40\"]) == (None, None)\nassert     largest_smallest_integers([\"-1\", \"2\"]) == (None, None)\n",
        "num_ids_2": 64,
        "num_ids_4": 117
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_smallest_integers([1,2,3,4,5]) == (None, None)\nassert    largest_smallest_integers([1,2,3,4,-5]) == (1, -5)\nassert    largest_smallest_integers([-1,2,3,4,5]) == (None, None)\nassert    largest_smallest_integers([-1,-2,3,4,5]) == (-1,-2)\nassert    largest_smallest_integers([-1,-2,-3,4,5]) == (-1,-2)\n",
        "num_ids_2": 55,
        "num_ids_4": 111
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([1, -1, -1, 1]) == (1, -1)\nassert     largest_smallest_integers([-5, -2, -1, -1]) == (1, -5)\nassert     largest_smallest_integers([1, 2, 3, -1, 5]) == (1, -5)\nassert     largest_smallest_integers([1, -2, -1, -1, 1]) == (1, -1)\nassert     largest_smallest_integers([1, -5, 2, 3, -1, 5]) == (1, -5)\n",
        "num_ids_2": 58,
        "num_ids_4": 118
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncompare_one(4, 5) == 5\ncompare_one(3.2, 5) == 5\ncompare_one(3, 4.2) == None\ncompare_one(3, 4) == None\ncompare_one(3.2, 4) == 4\ncompare_one('3', '4') == None\ncompare_one('3', 4) == None\ncompare_one(4, '3') == None",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     compare_one(1, 1)     == None\nassert     compare_one(1, 'a')     == None\nassert     compare_one(1.0, 1)     == None\nassert     compare_one(1.1, 1.1) == 1.1\nassert     compare_one(1.0, '1.1') == 1.1\n",
        "num_ids_2": 31,
        "num_ids_4": 68
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert compare_one(1.0, 1.0) == None\nassert compare_one(\"1.0\", \"1.0\") == None\nassert compare_one(1, \"1.0\") == None\nassert compare_one(\"1.0\", 1) == None\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     compare_one(10, 10) == None\nassert     compare_one(10, 10.1) == 10.1\nassert     compare_one('10.1', '10') == None\nassert     compare_one(10.1, '10') == None\nassert     compare_one('10.1', '10') == 10.1\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     compare_one(100, \"100\") is None, \"Wrong\"\nassert     compare_one(2.5, \"2.5\") is None, \"Wrong\"\nassert     compare_one(5.5, \"5.5\") == 5.5, \"Wrong\"\nassert     compare_one(1.5, 1.5) == 1.5, \"Wrong\"\n",
        "num_ids_2": 44,
        "num_ids_4": 95
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert ",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert compare_one(1, 1) == None\nassert compare_one(1.2, 1.2) == None\nassert compare_one(\"1.2\", \"1.2\") == None\nassert compare_one(\"1.2\", 1.2) == None\n",
        "num_ids_2": 15,
        "num_ids_4": 48
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(4)\nassert is_equal_to_sum_even(6)\nassert is_equal_to_sum_even(10)\nassert not is_equal_to_sum_even(14)\nassert not is_equal_to_sum_even(18)\n",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_even(n):\n    \"\"\"Evaluate whether the given number n is even\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(1) == False\nassert     is_equal_to_sum_even(11) == False\nassert     is_equal_to_sum_even(100) == False\nassert     is_equal_to_sum_even(10020) == True\nassert     is_equal_to_sum_even(20) == False\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(13) == False\nassert     is_equal_to_sum_even(17) == True\nassert     is_equal_to_sum_even(19) == True\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     special_factorial(0) == 1, 'incorrect special_factorial'\nassert     special_factorial(1) == 1, 'incorrect special_factorial'\nassert     special_factorial(2) == 2, 'incorrect special_factorial'\nassert     special_factorial(3) == 6, 'incorrect special_factorial'\nassert     special_factorial(5) == 120, 'incorrect special_factorial'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     special_factorial(0) == 1, \"0! is not 1\"\nassert     special_factorial(1) == 1, \"1! is 1\"\nassert     special_factorial(2) == 2, \"2! is 2\"\nassert     special_factorial(5) == 120, \"5! is 120\"\nassert     special_factorial(8) == 40320, \"8! is 40320\"\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert special_factorial(5) == 120\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     special_factorial(2) == 2\nassert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(4) == 24\nassert     special_factorial(10) == 3628800\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     special_factorial(4) == 24, special_factorial(4)\nassert     special_factorial(5) == 120, special_factorial(5)\nassert     special_factorial(8) == 40320, special_factorial(8)\nassert     special_factorial(3) == 6, special_factorial(3)\nassert     special_factorial(1) == 1, special_factorial(1)\n",
        "num_ids_2": 40,
        "num_ids_4": 81
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef choose_fun(n, k):\n    \"\"\"The choose_fun function is defined as:\n    choose_fun(n, k) = n!/k!*(n-k)!\n    where n > 0 and k > 0\n    \n    The function will receive as input two integers, n and k, and should return\n    the value of the function.\n    \"\"\"\n    pass\n\n\n\ndef repeat_times(string, times):\n    \"\"\"The repeat_times function is defined as:\n    repeat_times(string, times) = string * times\n    where string is a string, times is an integer.\n    \n    The function will receive as input a string and an integer, and should return\n    the value of the function.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     special_factorial(0) == 1, \"The value of the 0th factorial is 1\"\nassert     special_factorial(1) == 1, \"The value of the 1st factorial is 1\"\nassert     special_factorial(2) == 2, \"The value of the 2nd factorial is 2\"\nassert     special_factorial(5) == 120, \"The value of the 5th factorial is 120\"\nassert     special_factorial(6) == 720, \"The value of the 6th factorial is 720\"\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fix_spaces('hello world') == 'hello_world'\nassert     fix_spaces('hello      world') == 'hello_world'\nassert     fix_spaces('hello world') == 'hello_world'\nassert     fix_spaces('hello world') == 'hello_world'\nassert     fix_spaces('hello world') == 'hello_world'\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fix_spaces('  hello world!') == 'hello-world!'\nassert     fix_spaces(' hi  my dear,  how are you?' ) == 'hi-my-dear-how-are-you'\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert fix_spaces('i am a boy') == 'i-am-a-boy'\nassert fix_spaces('hello-world') == 'hello-world'\nassert fix_spaces('i like dog') == 'i-like-dog'\nassert fix_spaces('hello world') == 'hello-world'\n",
        "num_ids_2": 25,
        "num_ids_4": 61
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfix_spaces(\"hi      how are you doing\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert fix_spaces(\"Hello World\") == \"hello_world\"\nassert fix_spaces(\"123   4   5  6\") == \"123_4_5_6\"\nassert fix_spaces(\"abcd efgh\") == \"abcd_efgh\"\n",
        "num_ids_2": 19,
        "num_ids_4": 65
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \n\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef compress(text):\n    \"\"\"\n    Given a string text, replace spaces in it with -, \n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with - \n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fix_spaces('one two three') == 'one_two_three'\nassert     fix_spaces('one two three four') == 'one_two_three_four'\nassert     fix_spaces('one two three four five') == 'one_two_three_four_five'\nassert     fix_spaces('one two three four five') == 'one_two_three_four_five'\nassert     fix_spaces('1 2 3 4') == '1_2_3_4'\n",
        "num_ids_2": 43,
        "num_ids_4": 95
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     file_name_check(\"abc\") == \"No\", \"First test case fails\"\nassert     file_name_check(\"aaa.txt\") == \"Yes\", \"Second test case fails\"\nassert     file_name_check(\"a1.txt\") == \"Yes\", \"Third test case fails\"\nassert     file_name_check(\"aaa.exe\") == \"No\", \"Fourth test case fails\"\nassert     file_name_check(\"aa1.exe\") == \"Yes\", \"Fifth test case fails\"\n",
        "num_ids_2": 44,
        "num_ids_4": 91
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert file_name_check(r\"a.txt\") == \"Yes\", \"1st assertion failed\"\nassert file_name_check(r\"abc.txt\") == \"No\", \"2nd assertion failed\"\nassert file_name_check(r\"1.txt\") == \"Yes\", \"3rd assertion failed\"\nassert file_name_check(r\"abc.dll\") == \"Yes\", \"4th assertion failed\"\n",
        "num_ids_2": 27,
        "num_ids_4": 75
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     file_name_check('abc.txt') == 'No'\nassert     file_name_check('abc.1txt') == 'No'\nassert     file_name_check('a.txt') == 'Yes'\nassert     file_name_check('a.exe') == 'Yes'\nassert     file_name_check('a.dll') == 'Yes'\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     file_name_check(\"papa.exe\") == \"No\"\nassert     file_name_check(\"frapp.exe\") == \"No\"\nassert     file_name_check(\"123.exe\") == \"No\"\nassert     file_name_check(\"abc123.txt\") == \"Yes\"\nassert     file_name_check(\"abc.txt\") == \"Yes\"\n",
        "num_ids_2": 37,
        "num_ids_4": 72
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     file_name_check('fsdfsdf') == 'No'\nassert     file_name_check('fsdf.txt') == 'No'\nassert     file_name_check('fsdf.exe') == 'No'\nassert     file_name_check('fsdf.dll') == 'No'\nassert     file_name_check('fsdf.txt.exe') == 'No'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     file_name_check('python_test') == 'Yes'\nassert     file_name_check('python.exe') == 'Yes'\nassert     file_name_check('adw.exe') == 'No'\nassert     file_name_check('filename_without_dot_') == 'Yes'\nassert     file_name_check('filename_with_a_') == 'Yes'\n",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     file_name_check('temp.txt') == 'Yes'\nassert     file_name_check('temp.exe') == 'No'\nassert     file_name_check('temp.dll') == 'Yes'\nassert     file_name_check('temp') == 'No'\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     file_name_check('test.txt') == 'No', 'the function file_name_check returned No for \\'test.txt\\''\nassert     file_name_check('test.exe') == 'No', 'the function file_name_check returned No for \\'test.exe\\''\nassert     file_name_check('test.dll') == 'No', 'the function file_name_check returned No for \\'test.dll\\''\nassert     file_name_check('test.txt.exe') == 'No', 'the function file_name_check returned No for \\'test.txt.exe\\''\nassert     file_name_check('test.txt.exe.dll') == 'No', 'the function file_name_check returned No for \\'test.txt.exe.dll\\''\n",
        "num_ids_2": 68,
        "num_ids_4": 140
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     file_name_check('')     == 'No', \\\n    'No'\nassert file_name_check('1.html')     == 'No', \\\n    'No'\nassert file_name_check('ab.html')     == 'No', \\\n    'No'\nassert file_name_check('a.b.html')     == 'No', \\\n    'No'\nassert file_name_check('a.b.c.html')     == 'No', \\\n    'No'\n",
        "num_ids_2": 35,
        "num_ids_4": 73
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_squares([0, 1, 2, 3, 4]) == 10\nassert     sum_squares([1, 2, 3, 4, 5]) == 30\nassert     sum_squares([1, 2, 3, 4, 5, 6]) == 92\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8]) == 154\nassert     sum_squares([]) == 0\n",
        "num_ids_2": 40,
        "num_ids_4": 88
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 14\nassert     sum_squares([1, 3, 9]) == 16\nassert     sum_squares([1, 2, 9]) == 25\nassert     sum_squares([2, 4, 6]) == 38\nassert     sum_squares([7, 8, 9]) == 55\n",
        "num_ids_2": 36,
        "num_ids_4": 68
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 36, \"incorrect result\"\nassert     sum_squares([1,2,3,4,6]) == 36, \"incorrect result\"\nassert     sum_squares([1,2,3,4,5]) == 36, \"incorrect result\"\n",
        "num_ids_2": 52,
        "num_ids_4": 78
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_squares(list_4) == 16, \"List does not match\"\nassert     sum_squares(list_5) == 25, \"List does not match\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(sum_squares(numbers)) # return a list of square of numbers\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_squares([1,2,3]) == 9\nassert     sum_squares([1,2,3,4,5]) == 25\nassert     sum_squares([1,2,3,4,5,6,7,8,9]) == 81\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 243\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243]) == 104",
        "num_ids_2": 36,
        "num_ids_4": 94
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     words_in_sentence(\"havana loves to swim\") == \"hava a to swim\"\nassert     words_in_sentence(\"what is your name\") == \"what is your name\"\nassert     words_in_sentence(\"hello, i am leonardo\") == \"hello i am leonardo\"\nassert     words_in_sentence(\"my name is leonardo\") == \"my name is leonardo\"\nassert     words_in_sentence(\"i love to swim\") == \"i love to swim\"\n",
        "num_ids_2": 47,
        "num_ids_4": 100
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nwords = words_in_sentence(\"I love cats\")\nassert words == \"love cats\"\n\nwords = words_in_sentence(\"I am a developer\")\nassert words == \"developer\"\n",
        "num_ids_2": 11,
        "num_ids_4": 19
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"thequickbrownfoxjumpsoverthelazydog\"\nassert words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"thequickbrownfoxjumpsoverthelazydog\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     words_in_sentence(\"Hello World\") == \"Hello World\"\nassert     words_in_sentence(\"We are the so-called pudge-patches\") == \"We are the pudge-patches\"\nassert     words_in_sentence(\"Why are you making me an offer?\") == \"Why are you making me an offer\"\nassert     words_in_sentence(\"Bachelor's degree makes me an offer\") == \"Bachelor's degree makes me an offer\"\nassert     words_in_sentence(\"The UK is great!\") == \"The UK is great!\"\n",
        "num_ids_2": 51,
        "num_ids_4": 110
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef words_in_sentence(sentence):\n    return ''.join([word for word in sentence.split(' ') if len(word) > 1])\n\n\n\n\n\n\nif __name__ == \"__main__\":\n    print('words_in_sentence:')\n    print(words_in_sentence('hi'))\n    print(words_in_sentence('hi how are you'))\n    print(words_in_sentence('i am a boy')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    # get a sentence\n    sentence = 'asdsdasasdfasd'\n\n    # test words_in_sentence function\n    assert words_in_sentence(sentence) == \"asdsdfasd\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     words_in_sentence(\"Hello world!\") == \"Hello world!\"\nassert     words_in_sentence(\"It's so cool\") == \"It's so cool\"\nassert     words_in_sentence(\"This is a test\") == \"This is a test\"\nassert     words_in_sentence(\"No leading or trailing spaces\") == \"No leading or trailing spaces\"\nassert     words_in_sentence(\"One  word\") == \"One word\"\n",
        "num_ids_2": 41,
        "num_ids_4": 87
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    test_words_in_sentence(",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (simplify(\n            \"7/4\", \"2/4\") == True) == True\nassert     (simplify(\"1/4\", \"2/4\") == True) == False\nassert     (simplify(\"2/4\", \"1/4\") == True) == False\nassert     (simplify(\"5/4\", \"2/4\") == True) == False\nassert     (simplify(\"7/6\", \"3/4\") == True) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 74
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     simplify(\"1/3\", \"1/3\") == True\nassert     simplify(\"4/6\", \"1/2\") == False\nassert     simplify(\"5/6\", \"1/3\") == True\nassert     simplify(\"5/6\", \"2/3\") == True\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     simplify('2/3', '2/3') == False\nassert     simplify('2/3', '3/2') == True\nassert     simplify('3/2', '3/2') == True\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     simplify(\"2/3\", \"2/3\") == True, \"simplify function is not working correctly\"\nassert     simplify(\"2/3\", \"2\") == False, \"simplify function is not working correctly\"\nassert     simplify(\"2/3\", \"2/2\") == False, \"simplify function is not working correctly\"\nassert     simplify(\"2/3\", \"2/2/3\") == True, \"simplify function is not working correctly\"\nassert     simplify(\"2/3\", \"2/2/3/4\") == False, \"simplify function is not working correctly\"\n",
        "num_ids_2": 56,
        "num_ids_4": 116
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (simplify(\"12/5\", \"9/10\")    == True)\nassert     (simplify(\"12/6\", \"9/7\")    == False)\nassert     (simplify(\"5/3\", \"2/4\")    == False)\nassert     (simplify(\"5/3\", \"5/3\")    == True)\nassert     (simplify(\"6/3\", \"7/3\")    == True)\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     simplify(\"4/5\", \"2\") == \"2.0\"\nassert     simplify(\"5/4\", \"2\") == \"2.0\"\nassert     simplify(\"4/5\", \"0\") == \"0.0\"\nassert     simplify(\"2/4\", \"0\") == \"0.0\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     simplify(\"5/4\", \"5/4\") == False\nassert     simplify(\"5/4\", \"6/4\") == True\nassert     simplify(\"6/5\", \"6/4\") == True\nassert     simplify(\"6/5\", \"3/4\") == True\nassert     simplify(\"5/7\", \"4/5\") == True\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     simplify('1/2', '2') is True\nassert     simplify('1/4', '2') is False\nassert     simplify('1/4', '-2') is False\nassert     simplify('0/1', '-1') is False\nassert     simplify('0/1', '1') is False\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not simplify(\"1\", \"1/2\") == simplify(\"2\", \"1/2\")\nassert simplify(\"1\", \"2\") == False\nassert simplify(\"1/2\", \"1/3\") == False\nassert simplify(\"3/5\", \"1/2\") == True\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     simplify('2/3', '2/3') == True, \"Test 1 failed\"\nassert     simplify('2/3', '2') == False, \"Test 1 failed\"\nassert     simplify('1/2', '1') == True, \"Test 2 failed\"\nassert     simplify('1/2', '2') == False, \"Test 2 failed\"\nassert     simplify('2/5', '2') == True, \"Test 3 failed\"\n",
        "num_ids_2": 46,
        "num_ids_4": 90
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     order_by_points([2, 3, 4, 5, 6, 7]) == \\\n        [2, 3, 4, 5, 6, 7], \"Should be [2, 3, 4, 5, 6, 7]\"\nassert     order_by_points([4, 8, 10, 11, 12, 25]) == \\\n        [4, 8, 10, 11, 12, 25], \"Should be [4, 8, 10, 11, 12, 25]\"\nassert     order_by_points([9, 3, 6, 4, 8, 2]) == \\\n        [9, 3, 4, 6, 8, 2], \"Should be [9, 3, 4, 6, 8, 2]\"\nassert     order_by_points([21, 94, 12, 87, 69]) == \\\n        [21, 12, 87, 69, 94], \"Should be [21, 12, 87, 69, 94]\"\nassert     order_by_points([-10, -3, -2, -1, 0, 1]) == \\\n        [-10, -3, -2, -1, 0, 1], \"Should be [-10, -3, -2, -1, 0, 1]\"\n",
        "num_ids_2": 46,
        "num_ids_4": 90
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     order_by_points([]) == []\nassert     order_by_points([1]) == [1]\nassert     order_by_points([1,2,3,4]) == [1,2,4,3]\nassert     order_by_points([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,8,7,9]\nassert     order_by_points([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200])\n",
        "num_ids_2": 27,
        "num_ids_4": 101
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     order_by_points([3,2,5,1,3,5,6,1,5]) ==         [1,1,2,3,5,5,6,3,5]\nassert     order_by_points([1,1,1,1,1,1,1,1,1]) ==         [1,1,1,1,1,1,1,1,1]\nassert     order_by_points([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) ==     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     order_by_points([]) ==                 [ ]\n",
        "num_ids_2": 96,
        "num_ids_4": 192
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     order_by_points([1, 2, 3]) == [1, 2, 3]\nassert     order_by_points([10, 20, 30, 40, 50, 60]) == [10, 20, 30, 40, 50, 60]\nassert     order_by_points([10, 10, 10, 10, 10]) == [10, 10, 10, 10, 10]\nassert     order_by_points([1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1]\nassert     order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "num_ids_2": 58,
        "num_ids_4": 128
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     order_by_points([-2, -2, 4, 3, 1, 2]) == [-2, -2, 1, 2, 3, 4]\nassert     order_by_points([-2, -1, 1, 2, 3, 4]) == [-2, -1, 1, 2, 3, 4]\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     order_by_points([44,44,44,44,44,44,44,44]) ==\n[44, 44, 44, 44, 44, 44, 44, 44]\nassert     order_by_points([44,44,44,44,44,44]) ==\n[44, 44, 44, 44, 44, 44]\nassert     order_by_points([44,44,44,44,44]) ==\n[44, 44, 44, 44, 44]\n\nprint('TESTS: OK'",
        "num_ids_2": 48,
        "num_ids_4": 68
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     order_by_points([10, 25, 2, 45, 6, 1, 11]) == [1, 6, 2, 10, 11, 25, 45]\nassert     order_by_points([10, 25, 2, 45, 6, 1, 11]) == [1, 6, 2, 10, 11, 25, 45]\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     order_by_points([5, 11, 22, 3, 11]) == [3, 11, 5, 11, 22]\nassert     order_by_points([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     order_by_points([11, 22, 3, 4]) == [3, 11, 11, 22]\n",
        "num_ids_2": 58,
        "num_ids_4": 85
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     specialFilter([7, 8, 10, 11, 15]) == 2\nassert     specialFilter([1, 2, 3, 4, 5]) == 0\nassert     specialFilter([11, 10, 9, 8, 7, 6]) == 3\nassert     specialFilter([1, 2, 3, 4, 5]) == 0\nassert     specialFilter([9, 8, 7, 6, 5]) == 3\n",
        "num_ids_2": 36,
        "num_ids_4": 74
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     specialFilter([2, 3, 4, 8]) == 4\nassert     specialFilter([1, 2, 9, 10, 11, 12]) == 5\nassert     specialFilter([11, 22, 33, 44, 55]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7]) == 0\nassert     specialFilter([11, 22, 33, 44, 55, 66, 77, 88, 99, 100]) == 0\n",
        "num_ids_2": 36,
        "num_ids_4": 76
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     specialFilter([1, 3, 5, 7, 9]) == 1\nassert     specialFilter([2, 4, 6, 8, 10]) == 3\nassert     specialFilter([3, 6, 9, 10, 11, 12]) == 5\nassert     specialFilter([2, 4, 6, 8, 10, 13]) == 4\nassert     specialFilter([1, 3, 5, 7, 9, 15]) == 3",
        "num_ids_2": 36,
        "num_ids_4": 76
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(specialFilter(nums)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nspecialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\nassert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) == 3\nassert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 12]) == 4\nassert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 13]) == 5\n",
        "num_ids_2": 30,
        "num_ids_4": 84
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_max_triples(3) == 3\nassert     get_max_triples(5) == 12\nassert     get_max_triples(7) == 3",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(get_max_triples(3))\nprint(get_max_triples(5))\n\n\"\"\"\n2\n6\n[1, 2, 3, 4, 5, 6]\n\n6\n[1, 2, 3, 4, 5, 6]\n\n7\n[1, 2, 3, 4, 5, 6]\n\"\"\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_triples(2) == 2, \"Wrong Answer\"\nassert     get_max_triples(3) == 5, \"Wrong Answer\"\nassert     get_max_triples(4) == 11, \"Wrong Answer\"\nassert     get_max_triples(5) == 20, \"Wrong Answer\"\nassert     get_max_triples(6) == 41, \"Wrong Answer\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef test_get_max_triples():\n    assert get_max_triples(1) == 0\n    assert get_max_triples(2) == 0\n    assert get_max_triples(4) == 3\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    get_max_triples(10) == 3\n    get_max_triples(100) == 83\n    get_max_triples(1000) == 6165\n    get_max_triples(10000) == 885600\n    get_max_triples(15000) == 100000\n    get_max_triples(200000) == 1020000\n    get_max_triples(250000) == 9000000\n    get_max_triples(3000000) == 10000000\n    get_max_triples(4000000) == 1000000000\n    get_max_triples(5000000) == 9999999999",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    #    assert bf(\"mercury\", \"venus\") == (\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\")\n    #    assert bf(\"venus\", \"earth\") == ()\n    #    assert bf(\"venus\", \"mars\") == (\"mars\", \"venus\")\n    #    assert bf(\"venus\", \"jupiter\") == (\"jupiter\", \"venus\")\n    #    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nassert     bf(\"Mercury\", \"Earth\") == (\"Earth\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nassert     bf(\"Earth\", \"Mars\") == (\"Earth\", \"Mars\", \"Venus\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nassert     bf(\"Earth\", \"Mars\") == (\"Earth\", \"Mars\", \"Venus\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nassert     bf(\"Earth\", \"Venus\") == (\"Earth\", \"Mars\", \"Venus\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n",
        "num_ids_2": 81,
        "num_ids_4": 159
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nbf(\"Mercury\", \"Venus\") == (\"Mercury\", \"Venus\")\nbf(\"Venus\", \"Earth\") == (\"Venus\", \"Earth\")\nbf(\"Earth\", \"Mars\") == (\"Earth\", \"Mars\")\nbf(\"Mars\", \"Jupiter\") == (\"Mars\", \"Jupiter\")\nbf(\"Jupiter\", \"Saturn\") == (\"Jupiter\", \"Saturn\")\nbf(\"Saturn\", \"Uranus\") == (\"Saturn\", \"Uranus\")\nbf(\"Uranus\", \"Neptune\") == (\"Uranus\", \"Neptune\")\nbf(\"Neptune\", \"Sun\") == (\"Neptune\", \"Sun\")\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(sorted_list_sum(['abcd', 'abcd', 'abd', 'ac', 'ab', 'aaa', 'bb', 'bbb']))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sorted_list_sum([\"hello\", \"world\", \"xxx\", \"xxx\", \"world\"]) == [\"hello\", \"world\", \"world\", \"xxx\", \"xxx\"]\nassert     sorted_list_sum([\"hello\", \"world\", \"xxx\", \"world\", \"hello\"]) == [\"hello\", \"hello\", \"world\", \"world\", \"xxx\"]\nassert     sorted_list_sum([\"hello\", \"world\", \"xxx\", \"world\", \"hello\", \"hello\"]) == [\"hello\", \"hello\", \"world\", \"world\", \"hello\", \"hello\"]\nassert     sorted_list_sum([\"hello\", \"world\", \"xxx\", \"world\", \"hello\", \"world\"]) == [\"hello\", \"hello\", \"world\", \"world\", \"world\", \"world\"]\nassert     sorted_list_sum([\"hello\", \"world\", \"xxx\", \"world\", \"hello\", \"world\", \"hello\"]) == [\"hello\", \"hello\", \"world\", \"world\", \"world\", \"world\", \"hello\"]",
        "num_ids_2": 84,
        "num_ids_4": 180
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sorted_list_sum([]) == []\nassert     sorted_list_sum([\"bob\", \"sara\"]) == [\"sara\", \"bob\"]\nassert     sorted_list_sum([\"Ava\", \"Miki\", \"Jorge\", \"Chris\", \"bob\"]) == [\"bob\", \"Ava\", \"Jorge\", \"Chris\", \"Miki\"]\nassert     sorted_list_sum([\"Ava\", \"Miki\", \"Jorge\", \"Chris\", \"bob\"]) == [\"bob\", \"Ava\", \"Jorge\", \"Chris\", \"Miki\"]\n",
        "num_ids_2": 41,
        "num_ids_4": 141
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sorted_list_sum([\"cat\", \"dog\", \"banana\"]) == [\"dog\", \"cat\", \"banana\"], \"Wrong\"\nassert     sorted_list_sum([\"cat\", \"dog\", \"banana\", \"dog\", \"cat\"]) == [\"dog\", \"dog\", \"cat\", \"cat\", \"banana\"], \"Wrong\"\nassert     sorted_list_sum([\"cat\", \"dog\", \"banana\", \"dog\", \"cat\", \"banana\"]) == [\"dog\", \"dog\", \"cat\", \"cat\", \"banana\", \"banana\"], \"Wrong\"\nassert     sorted_list_sum([\"cat\", \"dog\", \"banana\", \"dog\", \"cat\", \"banana\", \"dog\"]) == [\"dog\", \"dog\", \"cat\", \"cat\", \"banana\", \"banana\", \"dog\"], \"Wrong\"\nassert     sorted_list_sum([\"cat\", \"dog\", \"banana\", \"dog\", \"cat\"]) == [\"dog\", \"dog\", \"cat\", \"cat\", \"banana\"], \"Wrong\"\n",
        "num_ids_2": 84,
        "num_ids_4": 202
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sorted_list_sum([\"f\", \"q\", \"b\", \"m\", \"g\"]) == [\"m\", \"b\", \"g\", \"q\", \"f\"]\nassert sorted_list_sum([\"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"a\"]) == [\"a\", \"b\", \"a\", \"b\", \"a\", \"b\"]\nassert sorted_list_sum([\"a\", \"b\", \"c\", \"b\", \"a\", \"a\", \"b\", \"a\"]) == [\"a\", \"b\", \"b\", \"a\", \"c\", \"b\", \"a\", \"a\"]",
        "num_ids_2": 91,
        "num_ids_4": 149
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     x_or_y(1, 2, 1) == 1\nassert     x_or_y(2, 2, 1) == 1\nassert     x_or_y(3, 2, 1) == 2\nassert     x_or_y(3, 1, 2) == 2\nassert     x_or_y(4, 2, 1) == 2\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(x_or_y(5, 1, 2))  # 1\nassert \nprint(x_or_y(5, 2, 1))  # 2\nassert \nprint(x_or_y(8, 1, 2))  # 1\nassert \nprint(x_or_y(8, 2, 1))  # 2\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     x_or_y(2, 1, 2) == 1\nassert     x_or_y(3, 1, 2) == 2\nassert     x_or_y(5, 1, 2) == 2\nassert     x_or_y(11, 1, 2) == 1\nassert     x_or_y(21, 1, 2) == 2\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert x_or_y(7, 1, 0) == 1\nassert x_or_y(7, 0, 1) == 0\nassert x_or_y(6, 1, 0) == 0\nassert x_or_y(5, 1, 0) == 0\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     x_or_y(13, 2, 8)     == 8, \"x_or_y is not returning the right value\"\nassert     x_or_y(13, 1, 8)     == 1, \"x_or_y is not returning the right value\"\nassert     x_or_y(17, 2, 8)     == 8, \"x_or_y is not returning the right value\"\nassert     x_or_y(17, 1, 8)     == 1, \"x_or_y is not returning the right value\"\nassert     x_or_y(16, 2, 8)     == 8, \"x_or_y is not returning the right value\"\n",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(x_or_y(6, 6, 6))\nassert\nprint(x_or_y(7, 7, 7))\nassert\nprint(x_or_y(6, 8, 8))\nassert\nprint(x_or_y(3, 4, 5))\nassert\nprint(x_or_y(9, 9, 9))\n",
        "num_ids_2": 5,
        "num_ids_4": 9
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 30\nassert     double_the_difference([]) == 0\n\nprint('\\nAll tests passed'",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    double_the_difference([]) == 0\n    double_the_difference([1, 3, 5]) == 14\n    double_the_difference([-3, 4, 5]) == 5\n    double_the_difference([-1, -3, -5]) == 9\n    double_the_difference([1, -3, 5]) == 14\n    double_the_difference([1, 2, 5, 6, 7, 8, 9]) == 4",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert double_the_difference([]) == 0\nassert double_the_difference([1,2,3]) == 8\nassert double_the_difference([1,2,3,4,5,6]) == 27\n",
        "num_ids_2": 15,
        "num_ids_4": 55
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     double_the_difference([1, -2, 3, 4, -5, 6, 0]) == 14\nassert     double_the_difference([1, 2, 3, 4, 5, 6]) == 0\nassert     double_the_difference([-1, -2, -3, -4, -5, -6]) == -140\nassert     double_the_difference([-10, -20, -30, -40, -50, -60]) == -200\nassert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == ",
        "num_ids_2": 52,
        "num_ids_4": 114
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     double_the_difference([1,2,3]) == 5\nassert double_the_difference([]) == 0\nassert double_the_difference([1,2,3,-4,-5]) == 0\nassert double_the_difference([-1,-2,-3]) == -4\n",
        "num_ids_2": 30,
        "num_ids_4": 70
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5]) == 7\nassert     double_the_difference([3, 4, 5, 6]) == 5\nassert     double_the_difference([1, -2, 3, -4, 5]) == 7\nassert     double_the_difference([]) == 0\n",
        "num_ids_2": 42,
        "num_ids_4": 79
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ncompare([[1,1],[3,5],[2,4]], [1,1]) == [[0,0], [0,1], [0,2]]\nassert compare([[1,1],[3,5],[2,4]], [1,2]) == [[1,0], [1,2], [1,1]]\nassert compare([[1,1],[3,5],[2,4]], [1,3]) == [[0,0], [0,1], [0,2]]\nassert compare([[1,1],[3,5],[2,4]], [1,4]) == [[0,0], [0,1], [0,2]]\n",
        "num_ids_2": 42,
        "num_ids_4": 120
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     compare([3,9,8,4], [9,8,4,3]) == [0,1,2,3], \"incorrect\"\nassert     compare([3,9,8,4], [9,10,8,4]) == [1,2,3,4], \"incorrect\"\nassert     compare([1,2,3,4], [9,8,4,3]) == [0,1,2,3], \"incorrect\"\nassert     compare([3,9,8,4], [9,8,4,4]) == [0,0,2,2], \"incorrect\"\n",
        "num_ids_2": 74,
        "num_ids_4": 148
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare([6, 4, 5, 4], [4, 6, 2, 4]) == [0, 1, 1, 1]\nassert     compare([3, 2, 7, 6], [4, 6, 2, 4]) == [1, 0, 1, 2]\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nif __name__ == '__main__':\n    arr_scores = [90, 45, 67, 87]\n    arr_guesses = [45, 82, 47, 68]\n    assert compare(arr_scores, arr_guesses) == [0, 2, 2, 4]\n\n    arr_scores = [90, 95, 45, 67]\n    arr_guesses = [89, 47, 82, 68]\n    assert compare(arr_scores, arr_guesses) == [1, 3, 2, 2]\n\n    arr_scores = [90, 95, 45, 67]\n    arr_guesses = [89, 47, 82, 68]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     compare([3,2,1,4],[3,3,1,4]) == [0,1,2,0], \"wrong\"\nassert     compare([1,2,3,4],[3,3,1,4]) == [0,1,2,0], \"wrong\"\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     compare([1,2,3,4,5,6], [1,2,3,4,5,6]) == None, \"Invalid\"\nassert    compare([1,2,3,4,5,6], [1,2,3,4,5,5]) == None, \"Invalid\"\nassert    compare([1,2,3,4,5,6], [1,2,3,4,5,6]) == None, \"Invalid\"\n",
        "num_ids_2": 74,
        "num_ids_4": 111
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     compare([0,1,2,3,4], [0,2,1,4,2]) == None\nassert     compare([0,1,2,3,4], [0,1,2,4,3]) == [0,0,0,1,2]\nassert     compare([0,1,2,3,4], [0,2,1,4,2]) == [0,1,2,1,1]\n",
        "num_ids_2": 68,
        "num_ids_4": 107
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    game = [20,22,16,2,20,18]\n    guess = [20,22,13,15,2,23]\n    compare(game,guess)\n    # output: [0, 2, 1, 1, 2, 0]\n    print(compare(game,guess)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     compare([0,0,1,1,2,3,3,4,5,6],\n            [1,2,3,4,5,6,7,8,9,10]) == [2,0,2,2,1,2,1,2,2,0]\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['Slices.SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\n",
        "num_ids_2": 101,
        "num_ids_4": 101
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == \n            'Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'SErviNGSliCes', 'Cheese']) == \n            'Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'SErviNGSliCes']) == \n            'Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'Cheese', 'Cheese']) == \n            'Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'Cheese', 'StuFfed']) == \n            'Slices.Cheese'\n",
        "num_ids_2": 79,
        "num_ids_4": 155
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"Slices\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\"]) == \"Slices.Slices\"\nassert     Strongest_Extension(\"Slices\", [\"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\"]) == \"Slices.Slices\"\n",
        "num_ids_2": 93,
        "num_ids_4": 196
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\n\ndef Write_File(file_name, contents):\n    \"\"\"This function should write contents to a file named file_name.\n    Contents should be a string.\n    You are not allowed to use any built-in or external library.\n    \"\"\"\n    pass\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'WRONG'\nassert     Strongest_Extension('Snakes', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Snakes.SErviNGSliCes', 'WRONG'\nassert     Strongest_Extension('Butterfly', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Butterfly.Cheese', 'WRONG'\nassert     Strongest_Extension('Snakes', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Snakes.Cheese', 'WRONG'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese', 'WRONG'\n",
        "num_ids_2": 104,
        "num_ids_4": 196
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cycpattern_check('abcd','abcd') == True\nassert cycpattern_check('abcd','abed') == False\nassert cycpattern_check('a','a') == True\nassert cycpattern_check('a','aa') == True\nassert cycpattern_check('a','aaa') == True\n",
        "num_ids_2": 33,
        "num_ids_4": 61
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cycpattern_check(\"marty\",\"yting\") == True\nassert     cycpattern_check(\"monty\",\"mony\") == False\nassert     cycpattern_check(\"marmite\",\"marmite\") == True\nassert     cycpattern_check(\"mom\",\"mom\") == False\nassert     cycpattern_check(\"marmitie\",\"marmitie\") == True\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cycpattern_check('hello', 'elo') == False\nassert     cycpattern_check('hello', 'llo') == True\nassert     cycpattern_check('hello', 'ello') == True\nassert     cycpattern_check('hello', 'helo') == True\nassert     cycpattern_check('hello', 'helol') == False\n",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert cycpattern_check(\"abcde\", \"abcde\") == True\nassert cycpattern_check(\"abcde\", \"abced\") == True\nassert cycpattern_check(\"abcde\", \"cdeab\") == True\nassert cycpattern_check(\"abcde\", \"abcde\") == True\n",
        "num_ids_2": 20,
        "num_ids_4": 55
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cycpattern_check('waterbottle','erbottlewat')    == True\nassert     cycpattern_check('waterbottle','erbottle')    == False\nassert     cycpattern_check('waterbottle','erbott')    == True\nassert     cycpattern_check('waterbottle','rbott')    == False\nassert     cycpattern_check('waterbottle','erw')    == False\n",
        "num_ids_2": 41,
        "num_ids_4": 79
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncycpattern_check(\"hellor\", \"lo\") == True\ncycpattern_check(\"hellor\", \"lor\") == True\ncycpattern_check(\"hellor\", \"hellor\") == True\ncycpattern_check(\"hellor\", \"hel\") == False\ncycpattern_check(\"hello\", \"hello\") == True\ncycpattern_check(\"hello\", \"hel\") == True\ncycpattern_check(\"hello\", \"hellohello\") == True\ncycpattern_check(\"hello\", \"helol\") == False\ncycpattern_check(\"hellohello\", \"hello\") == True\ncycpattern_check(\"hellohello\", \"hel\") == True\ncycpattern_check(\"hellohello\", \"hellohellohello\") == True\ncycpattern_check(\"hellohello\", \"helol\") == False\ncycpattern_check(\"hellohello\", \"hellohellohellohello\") == True\ncycpattern_check(\"hellor\", \"hello\") == False\ncycpattern_check(\"hellor\", \"hellohello\") == False\ncycpattern_check(\"hellor\", \"hellor\") == False\ncycpattern_check(\"hellor\", \"hellorhello\") == False\ncycpattern_check(\"hellorhello\", \"hello\") == False\ncycpattern_check(\"hellorhello\", \"hellohello\") == False\ncycpattern_check(\"hellorhello\", \"hellor\") == False\ncycpattern_check(\"hellorhello\", \"hellorhello\") == False\ncycpattern_check(\"hellorhello\", \"hellorhellohello\") == False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cycpattern_check(\"waterbottle\",\"bottlewater\") == True\nassert     cycpattern_check(\"dogcatcatdog\",\"catdog\") == False\nassert     cycpattern_check(\"waterbottle\",\"btulwater\") == True\nassert     cycpattern_check(\"waterbottle\",\"waterbottle\") == True\nassert     cycpattern_check(\"\",\"c\") == True\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ncycpattern_check('abcd','abcd')\ncycpattern_check('bcd','abcd')\ncycpattern_check('abcd','abcde')\ncycpattern_check('aac','abcde')\ncycpattern_check('abc','abc')\ncycpattern_check('abc','abcabc')\ncycpattern_check('abcabc','abc')\ncycpattern_check('abcabc','abcabcabc')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_odd_count(100) == (0,0)\nassert     even_odd_count(10) == (0,1)\nassert     even_odd_count(123345) == (1,0)\nassert     even_odd_count(123344) == (1,1)\nassert     even_odd_count(557788) == (1,2)\n",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert even_odd_count(111) == (2,1)\n\nassert even_odd_count(12) == (1,2)\n\n",
        "num_ids_2": 19,
        "num_ids_4": 35
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_odd_count(7) == (2, 1)\nassert \neven_odd_count(13) == (2, 1)\nassert \neven_odd_count(42) == (2, 2)\nassert \neven_odd_count(0) == (0, 0)\nassert \neven_odd_count(1) == (0, 1)\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_count(101) == (2, 1)\nassert even_odd_count(12) == (2, 0)\nassert even_odd_count(1010) == (2, 1)\nassert even_odd_count(10111) == (2, 0)\nassert even_odd_count(1) == (1, 0)\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(7) == 'VII'\nassert     int_to_mini_roman(13) == 'XIII'\nassert     int_to_mini_roman(21) == 'XXI'\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(int_to_mini_roman(11))\nprint(int_to_mini_roman(15))\nprint(int_to_mini_roman(91))\nprint(int_to_mini_roman(80))\nprint(int_to_mini_roman(81))\nprint(int_to_mini_roman(82))\nprint(int_to_mini_roman(83))\nprint(int_to_mini_roman(84))\nprint(int_to_mini_roman(85))\nprint(int_to_mini_roman(86))\nprint(int_to_mini_roman(87))\nprint(int_to_mini_roman(88))\nprint(int_to_mini_roman(89))\nprint(int_to_mini_roman(90))\nprint(int_to_mini_roman(91))\nprint(int_to_mini_roman(92))\nprint(int_to_mini_roman(93))\nprint(int_to_mini_roman(94))\nprint(int_to_mini_roman(95))\nprint(int_to_mini_roman(96))\nprint(int_to_mini_roman(97))\nprint(int_to_mini_roman(98))\nprint(int_to_mini_roman(99))\nprint(int_to_mini_roman(100))\nprint(int_to_mini_roman(101))\nprint(int_to_mini_roman(102))\nprint(int_to_mini_roman(103))\nprint(int_to_mini_roman(104))\nprint(int_to_mini_roman(105))\nprint(int_to_mini_roman(106))\nprint(int_to_mini_roman(107))\nprint(int_to_mini_roman(108))\nprint(int_to_mini_roman(109))\nprint(int_to_mini_roman(110))\nprint(int_to_mini_roman(111))\nprint(int_to_mini_roman(112))\nprint(int_to_mini_roman(113))\nprint(int_to_mini_roman(114))\nprint(int_to_mini_roman(115))\nprint(int_to_mini_roman(116))\nprint(int_to_mini_roman(117))\nprint(int_to_mini_roman(118))\nprint(int_to_mini_roman(119))\nprint(int_to_mini_roman(120))\nprint(int_to_mini_roman(121))\nprint(int_to_mini_roman(122))\nprint(int_to_mini_roman(123))\nprint(int_to_mini_roman(124))\nprint(int_to_mini_roman(125))\nprint(int_to_mini_roman(126))\nprint(int_to_mini_roman(127))\nprint(int_to_mini_roman(128))\nprint(int_to_mini_roman(129))\nprint(int_to_mini_roman(130))\nprint(int_to_mini_roman(131))\nprint(int_to_mini_roman(132))\nprint(int_to_mini_roman(133))\nprint(int_to_mini_roman(134))\nprint(int_to_mini_roman(135))\nprint(int_to_mini_roman(136))\nprint(int_to_mini_roman(137))\nprint(int_to_mini_roman(138))\nprint(int_to_mini_roman(139))\nprint(int_to_mini_roman(140))\nprint(int_to_mini_roman(141))\nprint(int_to_mini_roman(142))\nprint(int_to_mini_roman(143))\nprint(int_to_mini_roman(144))\nprint(int_to_mini_roman(145))\nprint(int_to_mini_roman(146))\nprint(int_to_mini_roman(147))\nprint(int_to_mini_roman(148))\nprint(int_to_mini_roman(149))\nprint(int_to_mini_roman(150))\nprint(int_to_mini_roman(151))\nprint(int_to_mini_roman(152))\nprint(int_to_mini_roman(153))\nprint(int_to_mini_roman(154))\nprint(int_to_mini_roma",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nright_angle_triangle(1, 1, 2) == False\nright_angle_triangle(1, 2, 1) == True\nright_angle_triangle(2, 1, 1) == False\nright_angle_triangle(3, 4, 5) == False\nright_angle_triangle(12, 13, 14) == False\nright_angle_triangle(1, 1, 2) == False\nright_angle_triangle(5, 3, 4) == True\nright_angle_triangle(3, 2, 1) == True\nright_angle_triangle(7, 5, 9) == False\nright_angle_triangle(9, 7, 5) == False",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not right_angle_triangle(3, 4, 5)\nassert right_angle_triangle(3, 4, 6)\nassert not right_angle_triangle(3, 6, 4)",
        "num_ids_2": 19,
        "num_ids_4": 50
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    right_angle_triangle(3, 4, 5) == False\n    right_angle_triangle(3, 5, 4) == True\n    right_angle_triangle(6, 2, 3) == True\n    right_angle_triangle(1, 3, 4) == False\n    right_angle_triangle(5, 5, 3) == False\n    right_angle_triangle(3, 4, 4) == False\n    right_angle_triangle(4, 5, 5) == False\n    right_angle_triangle(1, 1, 1) == True\n    right_angle_triangle(2, 2, 2) == True\n    right_angle_triangle(1, 2, 2) == False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(right_angle_triangle(3,4,5))\nprint(right_angle_triangle(1,5,1))\nprint(right_angle_triangle(7,10,5))\nprint(right_angle_triangle(1,1,1))\nprint(right_angle_triangle(4,4,4))\nprint(right_angle_triangle(1,1,1))\n\n'''\nSample Input    Expected Output\n3, 4, 5    True\n1, 5, 1    False\n7, 10, 5    False\n1, 1, 1    True\n4, 4, 4    True\n1, 1, 1    True\n''",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_max([\"hello\",\"hi\",\"hello\"]) == \"hello\"\nassert     find_max([\"hi\",\"hi\",\"hello\"]) == \"hello\"\nassert     find_max([\"hello\",\"hi\",\"hello\",\"hi\"]) == \"hi\"\nassert     find_max([\"hi\",\"hi\",\"hello\",\"hi\",\"hello\",\"hi\"]) == \"hello\"\nprint(\"All test cases passed.\")",
        "num_ids_2": 38,
        "num_ids_4": 84
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_max([\"a\",\"b\",\"a\"]) == \"a\"\nassert     find_max([\"a\",\"a\",\"a\",\"a\"]) == \"a\"\nassert     find_max([\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"]) == \"a\"\nassert     find_max([\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"]) == \"a\"\nassert     find_max([\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"]) == \"a\"\n",
        "num_ids_2": 40,
        "num_ids_4": 114
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_max([\"apple\", \"orange\", \"kiwifruit\", \"grape\"]) == \"apple\"\nassert     find_max([\"apple\", \"orange\", \"kiwifruit\", \"grape\", \"kiwifruit\"]) == \"kiwifruit\"\nassert     find_max([\"apple\", \"orange\", \"kiwifruit\", \"apple\", \"orange\", \"kiwifruit\"]) == \"kiwifruit\"\nassert     find_max([\"apple\", \"orange\", \"kiwifruit\", \"kiwifruit\", \"kiwifruit\"]) == \"kiwifruit\"\n\nprint(\"All tests passed\"",
        "num_ids_2": 65,
        "num_ids_4": 143
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_max([\n    \"str\", \"tsr\", \"sr\", \"trt\", \"rt\", \"s\",\n    \"st\", \"trttrtt\", \"trttrtt\", \"ttttt\", \"tttt\"\n]) == \"sr\"\n\nassert find_max([\n    \"he\", \"ll\", \"mm\", \"ooo\", \"yyy\", \"zzz\",\n    \"aaaa\", \"bbbb\", \"cccc\", \"dddd\", \"eeee\", \"ffff\",\n    \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\",\n    \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\",\n    \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\n]) == \"jjjj\"\n",
        "num_ids_2": 9,
        "num_ids_4": 15
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_max([\"test\", \"tester\"]) == \"tester\"\nassert     find_max([\"test\", \"testt\"]) == \"test\"\nassert     find_max([\"test\", \"testte\"]) == \"test\"\n",
        "num_ids_2": 39,
        "num_ids_4": 58
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find_max([\"abc\", \"abcd\", \"def\", \"abcde\"]) == \"abcde\"\n    find_max([\"abc\", \"abcd\", \"def\", \"abcdefgh\"]) == \"abc\"\n    find_max([\"abc\", \"abcd\", \"def\", \"abcdef\"]) == \"abcdef\"\n    find_max([\"abc\", \"def\", \"abc\", \"def\"]) == \"abc\"\n    find_max([\"a\", \"b\", \"a\", \"a\"]) == \"a\"\n    find_max([\"abc\", \"def\", \"abc\", \"abc\"]) == \"abc\"\n    find_max([\"abc\", \"def\", \"abc\", \"abc\"]) == \"abc\"\n    find_max([\"abc\", \"def\", \"abc\"]) == \"abc\"\n    find_max([\"abc\", \"def\"]) == \"abc\"\n    find_max([\"abc\"]) == \"abc\"\n    find_max([]) == None\n    find_max([\"abc\", \"abc\", \"abc\"]) == \"abc\"\n    find_max([\"abc\", \"abc\", \"abc\", \"abc\"]) == \"abc\"\n    find_max([\"abc\", \"abc\", \"abc\", \"abc\"]) == \"abc\"\n    find_max([\"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]) == \"abc\"\n    find_max([\"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]) == \"abc\"\n    find_max([\"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", \"abc\", ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind_max([\"hello\", \"world\", \"hello world\", \"coding\"]) == \"hello world\"\nassert find_max([\"hello world\", \"coding\"]) == \"hello world\"\nassert find_max([\"hello\", \"world\", \"hello world\"]) == \"hello world\"\nassert find_max([\"hello\", \"hello\", \"hello\"]) == \"hello\"\n",
        "num_ids_2": 23,
        "num_ids_4": 65
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_max(['gab','spaghetti', 'cheese', 'biscuit']) == 'cheese'\nassert     find_max(['coriander', 'onion', 'tomato', 'cheese', 'gab']) == 'onion'\nassert     find_max(['bacon','spaghetti', 'gab','spam']) =='spaghetti'\nassert     find_max(['pizza', 'bacon', 'cheese', 'gab']) == 'pizza'\n",
        "num_ids_2": 63,
        "num_ids_4": 119
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_max(['hi', 'hello', 'there']) == 'hello', \\\n    \"It should return 'hello' if the list of words contain only 'hello' and 'hi'\"\nassert     find_max(['hi', 'hello', 'hi', 'hi', 'hi']) == 'hello', \\\n    \"It should return 'hello' if the list of words contain only 'hello' and 'hi'\"\nassert     find_max(['hi', 'hello', 'hi', 'hello', 'there']) == 'hi', \\\n    \"It should return 'hi' if the list of words contain only 'hi' and 'hello'\"\nassert     find_max(['hi', 'hello', 'hi', 'hello', 'hi', 'hi', 'hi', 'hi']) == 'hi', \\\n    \"It should return 'hi' if the list of words contain only 'hi' and 'hello'\"\nassert     find_max(['hi', 'hello', 'hi', 'hello', 'hi', 'hello', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi']) == 'hi', \\\n    \"It should return 'hi' if the list of words contain only 'hi' and 'hello'\"\n",
        "num_ids_2": 50,
        "num_ids_4": 115
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_max(['hi', 'there', 'to', 'hi']) == 'hi'\nassert     find_max(['hi', 'there', 'to', 'hi', 'there']) == 'hi'\nassert     find_max(['hi', 'there', 'to', 'hi', 'there', 'here']) == 'hi'\nassert     find_max(['hi', 'there', 'to', 'hi', 'there', 'there']) == 'there'\n\nprint('All tests have passed')",
        "num_ids_2": 51,
        "num_ids_4": 111
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (eat(4, 3, 2) ==     [5, 3]), \"Should return 5 carrots after three meals and 3 carrots after three meals\"\nassert     (eat(6, 3, 2) ==     [7, 3]), \"Should return 7 carrots after three meals and 3 carrots after three meals\"\nassert     (eat(6, 7, 2) ==     [8, 3]), \"Should return 8 carrots after three meals and 3 carrots after three meals\"\nassert     (eat(3, 4, 2) ==     [3, 2]), \"Should return 3 carrots after three meals and 2 carrots after three meals\"\nassert     (eat(7, 4, 2) ==     [7, 2]), \"Should return 7 carrots after three meals and 2 carrots after three meals\"\n",
        "num_ids_2": 68,
        "num_ids_4": 136
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (eat(10, 3, 9) == [18, 1]), \"Test 1 (expecting 18, got 18 instead!)\"\nassert     (eat(17, 8, 13) == [20, 6]), \"Test 2 (expecting 20, got 20 instead!)\"\nassert     (eat(24, 21, 10) == [0, 0]), \"Test 3 (expecting 0, got 0 instead!)\"\nassert     (eat(10, 6, 13) == [20, 5]), \"Test 4 (expecting 20, got 20 instead!)\"\nassert     (eat(10, 6, 10) == [10, 0]), \"Test 5 (expecting 10, got 10 instead!)\"\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     eat(100, 200, 250) ==     [250, 500]\nassert     eat(80, 160, 250) ==     [160, 380]\nassert     eat(10, 10, 40) ==     [40, 0]\n\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    eat(100, 200, 200) == (200, 300)\n    eat(101, 200, 200) == (201, 200)\n    eat(100, 200, 201) == (200, 200)\n    eat(100, 200, 202) == (200, 202)\n    eat(101, 200, 200) == (201, 200)\n    eat(100, 201, 200) == (200, 200)\n    eat(100, 200, 200) == (200, 200)\n    eat(100, 200, 200) == (200, 200)\n    eat(100, 200, 200) == (200, 200)\n    eat(100, 200, 200) == (200, 200)\n    eat(101, 200, 201) == (201, 200)\n    eat(100, 200, 202) == (201, 202)\n    eat(101, 200, 200) == (201, 200)\n    eat(100, 200, 201) == (201, 201)\n    eat(101, 200, 200) == (201, 200)\n    eat(100, 201, 200) == (201, 200)\n    eat(100, 200, 200) == (201, 200)\n    eat(100, 200, 201) == (201, 201)\n    eat(101, 200, 201) == (201, 201)\n    eat(100, 201, 200) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201)\n    eat(100, 200, 201) == (201, 201",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eat(0,0,1000) == [0,1000]\nassert     eat(100,100,1000) == [0,0]\nassert     eat(100,100,100) == [0,100]\nassert     eat(100,100,10) == [10,90]\nassert     eat(100,10,100) == [20,0]\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert eat(1, 2, 1) == [3, 0]\nassert eat(2, 2, 3) == [5, 2]\nassert eat(2, 2, 2) == [4, 0]\nassert eat(2, 3, 2) == [3, 0]\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     do_algebra([], [1,2,3,4,5,6]) == None\nassert     do_algebra([], [3,3,3,3,3]) == None\nassert     do_algebra([+], [1,2,3,4,5,6]) == None\nassert     do_algebra([+], [3,3,3,3,3]) == None\nassert     do_algebra([+], [-3,3,-3,-3,-3]) == None\n",
        "num_ids_2": 46,
        "num_ids_4": 94
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert do_algebra([\"+\", \"x\", 4], [1, 2]) == 5\nassert do_algebra([\"-\", \"x\", 4], [1, 2]) == -3\nassert do_algebra([\"*\", \"x\", 4], [1, 2]) == 4\n",
        "num_ids_2": 25,
        "num_ids_4": 70
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert do_algebra([1,2,3,4,5], [2,3,4,5,6]) == 7\nassert do_algebra([1,2,3,4,5], [2,4,6,8,10]) == 18\n\nprint(\"SUCCESS\"",
        "num_ids_2": 33,
        "num_ids_4": 63
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndo_algebra([1, '+'], [2, '+']) == 3\ndo_algebra([1, '+'], ['a', '+', 'b']) == 'a+b'\ndo_algebra([1, '+', '+', '+', '+'], ['a', '+', 'b', '+', 'c']) == 'a+b+c'\ndo_algebra([1, '+'], ['a', '+', 'b', '+', 'c']) == Non",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_do_algebra():\n    assert do_algebra([], []) == None \n    assert do_algebra([-1], []) == None \n    assert do_algebra([1], []) == None \n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert solve(s) == \"aBcCd\"\nassert solve(\"\") == \"\"\nassert solve(\"ABCdEf\") == \"BADcEf\"\nassert solve(\"aBCdeF\") == \"AaBcdEf\"\n",
        "num_ids_2": 17,
        "num_ids_4": 41
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solve('a') == 'A'\nassert     solve('ab') == 'ba'\nassert     solve('abAA') == 'baAA'\nassert     solve('ab') == 'Ba'\nassert     solve('') == ''\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert solve('a') == 'A'\nassert solve('A') == 'A'\nassert solve('ab') == 'ab'\nassert solve('AB') == 'ab'\n",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(solve(\"The sunset sets at twelve o' clock.\")) == \"Twelve o' clock sets the sun\"\nassert solve(\"We are going to the moon.\") == \"Moon We are going to the moon\"\nassert solve(\"Some body has 14 inches, but some bitters have 11.\") == \"14 in 11 bitters",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"All tests are passed\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert solve('a') == 'A'\nassert solve('z') == 'Z'\nassert solve('y') == 'Y'\nassert solve('test') == 'tesT'\n",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     solve('aaAA') == 'aaAA'\nassert     solve('aAA') == 'AaA'\nassert     solve('AA') == 'AA'\nassert     solve('AAaa') == 'AAaa'\nassert     solve('aAa') == 'aAa'\n",
        "num_ids_2": 29,
        "num_ids_4": 55
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert solve(\"HElLo\") == \"hello\"\nassert solve(\"Signed from the boondocks\") == \"Signed from the boondocks\"\nassert solve(\"Hello World\") == \"World Hello\"\nassert solve(\"\") == \"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 49
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solve(\"How are you?\") == \"you? owh\"\nassert solve(\"I'm OK\") == \"ok I'm\"\nassert solve(\"HELLO WORLD\") == \"world HELLO\"\nassert solve(\"hello world\") == \"world hello\"\nassert solve(\"\") == \"\"",
        "num_ids_2": 32,
        "num_ids_4": 59
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solve('a') == 'a'\nassert     solve('b') == 'B'\nassert     solve('A') == 'a'\nassert     solve('8') == '8'\nassert     solve('9') == '9'\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"Checking'string_to_md5'...\")\nassert string_to_md5(\"\") == None\nassert string_to_md5(\"testing\") == \"c9f7c8b7afef9bbb8e8a098fd719ca2d\"\nassert string_to_md5(\"testing\")!= \"c9f7c8b7afef9bbb8e8a098fd719ca2d\"\n\n\ndef md5(file_name):\n    \"\"\"\n    Given a file name, return its md5 hash equivalent string.\n    If the file doesn't exist, return None.\n    \"\"\"\n    pass\n",
        "num_ids_2": 15,
        "num_ids_4": 94
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (string_to_md5(\"\") is None) \nassert     (string_to_md5(\"a\") == \"a\")\nassert     (string_to_md5(\"aaaaaaaa\") == \"c6c4f1f9fef2d6c8d70a5b13c58a7f39\")\nassert     (string_to_md5(\"a\"*10000) == \"c6c4f1f9fef2d6c8d70a5b13c58a7f39\")\nassert     (string_to_md5(\"a\"*2048) == \"c6c4f1f9fef2d6c8d70a5b13c58a7f39\")\n",
        "num_ids_2": 33,
        "num_ids_4": 123
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_md5('x') == '38d3e7cbae811b2d086d7afac64a5a91'\nassert     string_to_md5('') == 'None'\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_md5('abc') == 'a6650e78'\nassert     string_to_md5('abc')!= 'a6650e78'\nassert     string_to_md5('abc') == string_to_md5('abc')\nassert     string_to_md5('') is None\n\ndef file_len(fname):\n    \"\"\"\n    Given a string 'fname', return its size in bytes.\n    If 'fname' is an empty string, return None.\n    \"\"\"\n    pass\n",
        "num_ids_2": 41,
        "num_ids_4": 77
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_md5(\"hello\") == \"cb4aef82a0417bd3d95af8fc4f20a9f8\"\nassert     string_to_md5(\"\") == None\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_md5(\"abc\") == \"9ac63ff4b9e1240c9c8d9816bf0d0d5f\"\nassert     string_to_md5(\"\") is None\nassert     string_to_md5(None) is None\n\n",
        "num_ids_2": 52,
        "num_ids_4": 66
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (\n        string_to_md5('abc') ==\n        '900150983cd24fb0d6963f7d28e17f72'\n    ), f'Expected: {string_to_md5(\"abc\")}'\nassert     (\n        string_to_md5('') is None\n    ), f'Expected: {string_to_md5(\"\")}'\n\ndef md5_of_file(path):\n    \"\"\"\n    Given a file path, return its md5 hash equivalent string.\n    If 'path' is empty, return None.\n    \"\"\"\n    pass\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_md5('abc') == '7f2299159874ad859b2ef03404e1cd3c'\nassert     string_to_md5('abcde') == '7f2299159874ad859b2ef03404e1cd3c'\nassert     string_to_md5('') is None\nassert     string_to_md5(None) is None\nassert     string_to_md5('') is None",
        "num_ids_2": 71,
        "num_ids_4": 99
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert string_to_md5(\"string\") == \"acb16e4fa67b8d41a4aae65fdf16a55d\"\nassert string_to_md5(\"\") == None\nassert string_to_md5(\"\") == None\nassert string_to_md5(\"hello\") == None\n",
        "num_ids_2": 39,
        "num_ids_4": 63
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\na, b = 9, 10\nassert generate_integers(a, b) == [0, 2, 4, 6, 8]\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     generate_integers(2,5) == [2,4]\nassert     generate_integers(2,8) == [2,4,6,8]\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     generate_integers(0, 10) ==     [0, 2, 4, 6, 8, 10]\nassert     generate_integers(1, 5) ==     [1, 3, 5]\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     generate_integers(1, 2) == [2]\nassert     generate_integers(1, 11) == [2, 4, 6, 8, 10]\nassert     generate_integers(1, 20) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert     generate_integers(1, 23) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\nassert     generate_integers(1, 24) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n",
        "num_ids_2": 42,
        "num_ids_4": 114
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(2, 9) == [2, 4, 6, 8]\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert generate_integers(10, 15) == [10, 12, 14]\nassert generate_integers(5, 15) == [6, 8, 10, 12, 14]\nassert generate_integers(5, 10) == []\nassert generate_integers(10, 10) == [10]\n",
        "num_ids_2": 22,
        "num_ids_4": 58
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ngenerate_integers(1, 10) == range(2, 11, 2)\nassert \ngenerate_integers(1, 100) == range(2, 101, 2)\nassert \ngenerate_integers(1, 999) == range(2, 1000, 2)\nassert \ngenerate_integers(1, 0) == range(2, 0, 2)\nassert \ngenerate_integers(0, 0) == range(0, 0, 2)\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(1, 100) == [2, 4, 6, 8, 10]\nassert     generate_integers(1, 1000) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n",
        "num_ids_2": 48,
        "num_ids_4": 83
    }
]