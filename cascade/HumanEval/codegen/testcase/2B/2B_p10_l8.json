[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     has_close_elements([1, 1.2, 1.3, 1.4], 0.1)\nassert     has_close_elements([0, 0.1, 0.2, 0.3, 0.4], 0.1)\nassert     has_close_elements([0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5], 0.1)\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7], 0.1)\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7], 0.2)\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 0.3) == True\nassert     has_close_elements([1, 2, 3, 4], 0.9) == True\nassert     has_close_elements([1, 2, 3, 4], 0.1) == False\n\ndef has_close_elements_or_equals(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold. Or, if any element is closer to threshold than any other, it must be\n    return True.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 3) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 6) == False\nassert     has_close_elements([1, 2, 3, 4], 3) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef close_numbers(numbers: List[float], threshold: float) -> int:\n    \"\"\" Count the number of elements closer than given threshold in the given list of\n    numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     has_close_elements([0.1, 0.1], 0.1) == False\nassert     has_close_elements([1.1, 1.1], 0.1) == True\nassert     has_close_elements([0.9, 0.1], 0.1) == False\nassert     has_close_elements([0.1, 0.9], 0.1) == True\nassert     has_close_elements([0.1, 0.9], 0.2) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     has_close_elements([1, 2, 3, 10], 1) == True\nassert     has_close_elements([1, 2, 4, 6], 1) == False\nassert     has_close_elements([1, 1, 1, 1], 1) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 1) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 0.5) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     has_close_elements([1,2,3,4,5,6,7,8,9], 3.6) == True, \\\n\"has_close_elements is incorrect, use the expected output\"\n\nassert     has_close_elements([1,1,1,1,1,1,1,1,1], 1) == True, \\\n\"has_close_elements is incorrect, use the expected output\"\n\nassert     has_close_elements([1,2,3,4,5,6,7,8,9], 0.1) == False, \\\n\"has_close_elements is incorrect, use the expected output\"\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 2) == True\nassert     has_close_elements([1, 2, 4, 5, 7], 2) == True\nassert     has_close_elements([1, 2, 4, 5, 7], 2) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     has_close_elements([0, 1, 2], 0.0) == True\nassert     has_close_elements([0, 1, 2], 1.0) == False\nassert     has_close_elements([0, 1, 2], 2.0) == True\nassert     has_close_elements([0, 1, 2], 3.0) == False\nassert     has_close_elements([0, 1, 2], 4.0) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    has_close_elements([1.0, 2.0, 3.0], threshold=0.5)\n    == True\nassert \n    has_close_elements([1.0, 2.0, 3.0], threshold=1.5)\n    == False\nassert \n    has_close_elements([1.0, 2.0, 3.0], threshold=1.4)\n    == True\nassert \n    has_close_elements([1.0, 2.0, 3.0], threshold=2.0)\n    == True\nassert \n    has_close_elements([1.0, 2.0, 3.0], threshold=3.0)\n    == False\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nseparate_paren_groups('[({([()()]())})]') == [['{', '}', '(', ')', ')', ')']]\nseparate_paren_groups('(())((()))') == [['(', ')', '(', ')', ')']]\nseparate_paren_groups('(())') == [['(', ')', ')']]\nseparate_paren_groups('(())()') == [['(', ')', ')', ')']]\nseparate_paren_groups('((()))') == [['(', ')', ')', ')']]\nseparate_paren_groups('((()))()') == [['(', ')', ')', ')']]\nseparate_paren_groups('()()((()))') == [['(', ')', ')', ')', ')']]\nseparate_paren_groups('(())(())(()()())') == [['(', ')', ')', ')', ')', ')', ')', ')']]\nseparate_paren_groups('((()()()()()))') == [['(', ')', ')', ')', ')', ')', ')', ')']]\nseparate_paren_groups('(((()))((()))((())))') == [['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']]\nseparate_paren_groups
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     separate_paren_groups(r'(hi|hello)\\s(bye|goodbye)') == ['hi', 'bye']\nassert     separate_paren_groups(r'(\\d+(\\.|,)\\d+)\\s(\\d+(\\.|,)\\d+)') == ['123', '456.789']\nassert     separate_paren_groups(r'(\\d+(\\.|,)\\d+)\\s(\\d+(\\.|,)\\d+)\\s(\\d+(\\.|,)\\d+)') == ['123', '456.789', '789']\nassert     separate_paren_groups(r'\\((hi|hello)\\)\\s(\\(bye|goodbye)\\)') == ['(hi', ')']\nassert     separate_paren_groups(r'hi\\s(bye|goodbye)') == ['hi', 'bye']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     separate_paren_groups('()((()))') == ['(()(()))']\nassert     separate_paren_groups('(()((()))') == ['()(()(()))']\nassert     separate_paren_groups('(((())())') == ['(((()))())']\nassert     separate_paren_groups('(()()(())(()(()()' ) == ['(()()(())(())()()']\nassert     separate_paren_groups('())') == ['()()()']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"(()\") == [\"\", \"()\"]\nassert     separate_paren_groups(\"()\") == [\"\", \"()\"]\nassert     separate_paren_groups(\"()()\") == [\"\", \"()\", \"()\"]\nassert     separate_paren_groups(\"(((()())))\") == [\"\", \"(\", \"(\", \"()\", \"(\", \")\"]\nassert     separate_paren_groups(\"(()(()()))\") == [\"\", \"()\", \"()\", \"(\", \")\", \"()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"()(())()\") == [\"()\", \"(())\"]\nassert     separate_paren_groups(\"(()(()))(())\") == [\"()\", \"()\", \"(())\"]\nassert     separate_paren_groups(\"((()()))((()))\") == [\"((()()))\", \"((()))\"]\nassert     separate_paren_groups(\"(()(()))\") == [\"()\", \"(())(())]\nassert     separate_paren_groups(\"((()()))\") == [\"()\", \"(())]\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"(1 + 2) * (3 + 4)\") == [\"1 + 2\", \"3 + 4\"]\nassert     separate_paren_groups(\"(1 + 2) * (3 + 4)\") == [\"1 + 2\", \"3 + 4\"]\nassert     separate_paren_groups(\"(1 + 2) + (3 + 4)\") == [\"1 + 2\", \"3 + 4\"]\nassert     separate_paren_groups(\"1 + (2 + 3)\") == [\"1 + 2\", \"3\"]\nassert     separate_paren_groups(\"1 + (2 + 3) + (4 + 5)\") == [\"1 + 2\", \"3\", \"4 + 5\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\"{()}[]\") == [\"{\", \"()\", \"}\", \"[\", \"]\"]\nassert     separate_paren_groups(\"(())\") == [\"(\", \")\", \"()\"]\nassert     separate_paren_groups(\"()(()\") == [\"(\", \"(\", \")\", \")\", \"(\", \")\"]\nassert     separate_paren_groups(\"{}[]\") == [\"{\", \"}\", \"[\", \"]\"]\nassert     separate_paren_groups(\"{(()}[]\") == [\"{\", \"(\", \")\", \")\", \"()\", \"}\", \"[\", \"]\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     separate_paren_groups('()') == ['()']\nassert     separate_paren_groups('(((())))') == ['(((())))']\nassert     separate_paren_groups('()(())(()(()))') == ['()(())(()(()))']\nassert     separate_paren_groups('((()))') == ['((()))']\nassert     separate_paren_groups('(()(()()))') == ['(()(()()))']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (separate_paren_groups('(a * b) + (c * d)') == ['a', 'b', 'c', 'd'] )\nassert     (separate_paren_groups('(((a * b) + c) * d)') == ['a', 'b', 'c', 'd'] )\nassert     (separate_paren_groups('(((a * b) + c) * d) + e') == ['a', 'b', 'c', 'd', 'e'] )\nassert     (separate_paren_groups('(a + (b + c) + d) + e') == ['a', 'b', 'c', 'd', 'e'] )\nassert     (separate_paren_groups('((a + b) + (c + d))') == ['a', 'b', 'c', 'd'] )\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     separate_paren_groups('') == []\nassert     separate_paren_groups('foo') == ['foo']\nassert     separate_paren_groups('foo()') == ['foo()']\nassert     separate_paren_groups('foo(bar)') == ['foo', 'bar']\nassert     separate_paren_groups('foo(bar, baz)') == ['foo', 'bar', 'baz']\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     truncate_number(0.56) == 0.56\nassert     truncate_number(0.54) == 0.5\nassert     truncate_number(0.51) == 0.5\nassert     truncate_number(0.5) == 0\nassert     truncate_number(1.01) == 1\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     truncate_number(0) == 0\nassert     truncate_number(1) == 0\nassert     truncate_number(2) == 1\nassert     truncate_number(3) == 1\nassert     truncate_number(4) == 1\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     truncate_number(1.999999) == 1\nassert     truncate_number(3.99) == 3\nassert     truncate_number(2.99) == 2\nassert     truncate_number(2.99999) == 2\nassert     truncate_number(2.9999999) == 2\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"Pass\" if ((1.0/2) == 0.5) else \"Fail\")\nprint(\"Pass\" if ((1.0/0) == 1.0) else \"Fail\")\nprint(\"Pass\" if ((1.0000001/2) == 0.5) else \"Fail\")\nprint(\"Pass\" if ((1.0000001/0) == 1.0) else \"Fail\")\nprint(\"Pass\" if ((1.0/2.0) == 0.5) else \"Fail\")\nprint(\"Pass\" if ((1.0/0.0) == 1.0) else \"Fail\")\nprint(\"Pass\" if ((1.0000001/2.0) == 0.5) else \"Fail\")\nprint(\"Pass\" if ((1.0000001/0.0) == 1.0) else \"Fail\")\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not below_zero([0, 3, 2, -2])\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    below_zero([5, -3, 3, 1]) == True\n    below_zero([-2, 4, -1, 2, -5, 4, -5, 2, 1, -4, 2, -3, 4, -4, 2, -5, 1, 3, -2, 1, -2, 1]) == False\n    below_zero([1, -1, -1, -2, -4, 4, 5, 1, 1]) == True\n\ndef in_range(operations: List[int]) -> int:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return the corresponding balance that was deposited into account\n    before the operation.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     below_zero([1, 2, -3, 4, 5]) == True\nassert     below_zero([-2, 3, -5, -4, 4]) == True\nassert     below_zero([1, 2, -3, -1, -5]) == True\nassert     below_zero([-1, -2, -3, -4, -5]) == False\n\n\ndef total_amount(operations: List[int]) -> int:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect the amount that needs to be deposited so that the total balance of the account would be\n    the maximum amount. If the total balance of the account is already equal to the maximum amount, return 0.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     below_zero([-1, -3, 3, -2, -1, -3, 3]) == True\nassert     below_zero([-1, -3, 3, -2, -1, -3, 3, 1]) == False\nassert     below_zero([-1, -3, 3, -2, -1, -3, 3, 1, -1]) == False\nassert     below_zero([-1, -3, 3, -2, -1, -3, 3, -1, -2, -3, 3, -2, -1, -3, 3, 1]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     below_zero([1, 2, 3, -5])\nassert     below_zero([1, 2, 3, -5, -20])\nassert not below_zero([1, 2, -3, 4, -5])\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     below_zero([1, 2, 3, 4, 5, -6]) == True\nassert     below_zero([1, 2, 3, 4, -5, 6]) == False\nassert     below_zero([-1, 2, 3, 4, 5, 6]) == False\nassert     below_zero([1, 2, 3, 4, 5, -6, -6]) == True\nassert     below_zero([1, 2, 3, 4, 5, 6, 6]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     below_zero(\n[\n    [0, -10],\n    [-10, 20],\n    [0, 10],\n    [10, -10],\n]) == True, \"the first element is not the first deposit\"\nassert     below_zero(\n[\n    [-10, 20],\n    [0, 10],\n    [10, -10],\n]) == True, \"the second element is not the first deposit\"\nassert     below_zero(\n[\n    [-10, 20],\n    [0, 10],\n    [10, -10],\n    [20, 0],\n]) == True, \"the third element is not the first deposit\"\nassert     below_zero(\n[\n    [-10, 20],\n    [0, 10],\n    [10, -10],\n    [20, -10],\n]) == True, \"the fourth element is not the first deposit\"\nassert     below_zero(\n[\n    [-10, 20],\n    [0, 10],\n    [10, -10],\n    [20, 0],\n    [0, -20],\n]) == False, \"the fifth element is the first deposit and the balance is zero\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     below_zero([\n    0, \n    -2, \n    1, \n    3, \n    -2, \n    -3, \n    1, \n    2, \n    2, \n    1, \n    3, \n    -3, \n    -1, \n    -2, \n    -1, \n    1, \n    -3, \n    -2, \n    0, \n    2, \n    -3, \n    1, \n    3, \n    -1, \n    0, \n    -1, \n    -2, \n    0, \n    0, \n    3, \n    -2, \n    -1, \n    -1, \n    1, \n    1, \n    3, \n    -1, \n    0, \n    2, \n    -1, \n    -1, \n    -1, \n    -2, \n    3, \n    -1, \n    0, \n    0, \n    0, \n    3, \n    -1, \n    0, \n    0, \n    -2, \n    -1, \n    0, \n    0, \n    2, \n    -1, \n    0, \n    0, \n    3, \n    -2, \n    3, \n    -1, \n    0, \n    1, \n    -1, \n    -1, \n    1, \n    0, \n    3, \n    -1, \n    0, \n    0, \n    -2, \n    3, \n    -1, \n    0, \n    -3, \n    1, \n    -1, \n    0, \n    0, \n    0, \n    -1, \n    0, \n    0, \n    0, \n    0, \n    3, \n    0, \n    -2, \n    1, \n    -3, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, "
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     below_zero([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_prime(number: int) -> bool:\n    \"\"\"You're given a number (integer) and need to check if it is prime number.\n    \n    Note: The primes number is the number that can evenly divide the whole number.\n    For example if we put 23 we would get 5, 11, 23, 25, 29, 31, and 33.\n    \"\"\"\n    pass\n\n\ndef largest_prime_factor(number: int) -> int:\n    \"\"\"You're given a number (integer) and need to find the largest prime factor of that number.\n    \n    Note: The primes number is the number that can evenly divide the whole number.\n    For example if we put 23 we would get 5, 11, 23, 25, 29, 31, and 33.\n    \"\"\"\n    pass\n    \ndef is_palindrome(string: str) -> bool:\n    \"\"\" You're given a string and need to check if it is a palindrome.\n    \n    A palindrome is a word, phrase, number, or other sequence of characters\n    which reads the same backward as forward, such as madam or nurses run.\n    \"\"\"\n    pass\n\n\ndef multiply_even_numbers(nums: List[int]) -> List[int]:\n    \"\"\"\n    You're given a list of numbers. You need to find a product of the even numbers and multiply it by \n    the product of the odd numbers.\n    Examples:\n        [1,2,3,4]  => 6 (2 * 3)\n        [0,2,4]     => 0 (0 * 2)\n        [1,3,5]     => 30 (2 * (3 * 4))\n    \"\"\"\n    pass\n\ndef test_multiply_even_numbers():\n    "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, -10]) == 5.0\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 2\nassert mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 3\nassert mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2.5\nassert mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 3.0\nassert mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 2.5\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     mean_absolute_deviation([1, 2, 3]) == 1.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 1.0\nassert     mean_absolute_deviation([-1, -2, -3, -4, -5]) == 1.0\nassert     mean_absolute_deviation([-1, 2, 3, 4, 5]) == 1.5\nassert     mean_absolute_deviation([2, 3, 4, 5]) == 2.0\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 2.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 5.5\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 3\nassert     mean_absolute_deviation([1, -2, 3, 4, 5, 6]) == 3\nassert     mean_absolute_deviation([1, 2, -3, 4, 5, 6]) == 3\nassert     mean_absolute_deviation([1, 2, 3, -4, 5, 6]) == 3\nassert     mean_absolute_deviation([1, 2, 3, 4, -5, 6]) == 3\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef pearson_correlation_coefficient(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Pearson Correlation\n    Coefficient for a given set of input numbers.\n    Pearson Correlation Coefficient is the correlation between a variable\n    x and a variable y, where x and y are samples from a known population.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef insert_at_index(numbers: List[int], delimeter: int, index: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' into index `index` of input list `numbers'\n    \"\"\"\n    pass\n\ndef insert_at_index(numbers: List[int], delimeter: int, index: int, insert: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' into index `index` of input list `numbers'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersperse([1, 2, 3, 4], 5) ==    [1, 5, 2, 5, 3, 5, 4, 5]\nassert     intersperse([1, 2, 3, 4], 7) ==    [1, 7, 2, 7, 3, 7, 4, 7]\nassert     intersperse([1, 2, 3, 4], 9) ==    [1, 9, 2, 9, 3, 9, 4, 9]\nassert     intersperse([1, 2, 3, 4], 0) ==    [1, 2, 3, 4]\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    res = []\n    for i, n in enumerate(numbers):\n        if i % 2 == 0:\n            res.append(n)\n        else:\n            res.append(delimeter)\n            res.append(n)\n    return res\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    intersperse([], 2) == []\n    intersperse([1, 2, 3], 2) == [1, 2, 2, 3]\n    intersperse([1, 2, 3], 5) == [1, 2, 3, 2, 2, 3]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersperse([1,2,3,4,5,6,7], 3) == [1,2,3,3,4,5,6,6,7]\nassert     intersperse([1,2,3,4,5,6,7], 1) == [1,2,3,1,2,3,4,5,6,7]\nassert     intersperse([1,2,3,4,5,6,7], 7) == [1,2,3,4,5,6,7,1,2,3,4,5,6,7]\nassert     intersperse([1,2,3,4,5,6,7], 3, 0) == [0,1,2,3,3,4,5,6,7]\nassert     intersperse([1,2,3,4,5,6,7], 3, 1) == [1,2,3,3,4,5,6,6,7]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     intersperse([1,2,3,4,5,6],2) == [1,2,2,3,4,5,6]\nassert     intersperse([1,2,3,4,5,6],3) == [1,2,3,3,4,5,6]\nassert     intersperse([1,2,3,4,5,6],4) == [1,2,3,4,4,5,6]\nassert     intersperse([1,2,3,4,5,6],5) == [1,2,3,4,5,6]\nassert     intersperse([1,2,3,4,5,6],6) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef reverse_string(string: str) -> str:\n    \"\"\"\n    Reverse the string `string'\n\n    >>> reverse_string(\"ABCD\")\n    'DCBA'\n\n    >>> reverse_string(\"\")\n    ''\n\n    >>> reverse_string(\"AB\")\n    'AB'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef parse_nested_parens_alternative(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    # check if input string is empty or not\n    if paren_string == \"\":\n        return []\n\n    # check if paren_string is a valid string\n    if not is_paren_string_valid(paren_string):\n        return []\n\n    # list to contain the number of nested parentheses\n    list_of_nested_paren = [0]\n\n    # for each character in the string, go through the nested parentheses and store the number of nested parentheses\n    for i in range(len(paren_string)):\n        # check if the character is an opening parenthesis\n        if paren_string[i] == \"(\":\n            # if the nested parentheses is empty, add 1 to the list\n            if list_of_nested_paren == []:\n                list_of_nested_paren.append(1)\n            # if the nested parentheses is not empty, add the nested parentheses + 1 to the list\n            else:\n                list_of_nested_paren.append(list_of_nested_paren[-1] + 1)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"(()())\") == [0]\nassert     parse_nested_parens(\"((()())())\") == [0, 0, 0, 1]\nassert     parse_nested_parens(\"(((()())))\") == [0, 0, 0, 1, 0, 1]\nassert     parse_nested_parens(\"((((((((((()))))))))))\") == [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]\nassert     parse_nested_parens(\"(((()())(((((((((())))))))))))((()()()))\") == [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"(()())\") == [2, 2]\nassert     parse_nested_parens(\"(()()(()))\") == [3, 3]\nassert     parse_nested_parens(\"(()()()(()))\") == [4, 4]\nassert     parse_nested_parens(\"(()(()()))\") == [2, 2]\nassert     parse_nested_parens(\"(()()())\") == [2, 2]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nparse_nested_parens('(()())') == [2]\nparse_nested_parens('((()())') == [3]\nparse_nested_parens('(()())(())') == [2, 3]\nparse_nested_parens('(()())(())(())') == [3, 2, 3]\nparse_nested_parens('((()())(())())') == [2, 3, 3, 2]\nparse_nested_parens('((()())(())((()))') == [3, 2, 3, 2, 3]\nparse_nested_parens('((()())(())((())))') == [3, 2, 3, 2, 3, 2]\nparse_nested_parens('(()(()())(()))') == [2, 3, 2, 3, 2]\nparse_nested_parens('(()(()())(())') == []\nparse_nested_parens('()') == []\nparse_nested_parens('()(()(()(()))') == []\n\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert parse_nested_parens(\"(())\") == 1\nassert parse_nested_parens(\"((())\") == 2\nassert parse_nested_parens(\"(((()))\") == 3\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parse_nested_parens(\"\") == []\nassert parse_nested_parens(\"()\") == [0]\nassert parse_nested_parens(\"(())\") == [0]\nassert parse_nested_parens(\"((()))\") == [0, 1]\nassert parse_nested_parens(\"(()(()()))\") == [0, 1, 1]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert filter_by_substring([\"a\", \"b\", \"ab\", \"abc\", \"abcd\", \"abcde\"], \"ab\") == [\"a\", \"ab\", \"abc\", \"abcde\"]\nassert filter_by_substring([\"a\", \"b\", \"ab\", \"abc\", \"abcd\", \"abcde\"], \"cde\") == [\"abcde\"]\nassert filter_by_substring([\"a\", \"b\", \"ab\", \"abc\", \"abcd\", \"abcde\"], \"z\") == [\"abcde\"]\nassert filter_by_substring([\"a\", \"b\", \"ab\", \"abc\", \"abcd\", \"abcde\"], \"abcde\") == [\"abcde\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_by_substring([\"has\",\"a\",\"cat\",\"that\",\"knows\",\"the\",\"rabbit\",\"and\",\"a\",\"dog\",\"and\",\"a\",\"sitting\",\"with\",\"the\",\"cat\"], \"cat\") == [\"has\",\"a\",\"cat\",\"that\",\"knows\",\"the\",\"rabbit\",\"and\",\"a\",\"sitting\",\"with\",\"the\",\"cat\"]\nassert     filter_by_substring([\"hats\",\"a\",\"cat\",\"that\",\"knows\",\"the\",\"rabbit\",\"and\",\"a\",\"dog\",\"and\",\"a\",\"sitting\",\"with\",\"the\",\"cat\"], \"cat\") == []\nassert     filter_by_substring([\"hats\",\"a\",\"cat\",\"that\",\"knows\",\"the\",\"rabbit\",\"and\",\"a\",\"dog\",\"and\",\"a\",\"sitting\",\"with\",\"the\",\"cat\"], \"rabbit\") == [\"hats\",\"a\",\"cat\",\"that\",\"knows\",\"the\",\"rabbit\",\"and\",\"a\",\"dog\",\"and\",\"a\",\"sitting\",\"with\",\"the\",\"cat\"]\nassert     filter_by_substring([\"hats\",\"a\",\"cat\",\"that\",\"knows\",\"the\",\"rabbit\",\"and\",\"a\",\"dog\",\"and\",\"a\",\"sitting\",\"with\",\"the\",\"cat\"], \"dog\") == [\"hats\",\"a\",\"cat\",\"that\",\"knows\",\"the\",\"rabbit\",\"and\",\"a\",\"sitting\",\"with\",\"the\",\"cat\"]\nassert     filter_by_substring([\"hats\",\"a\",\"cat\",\"that\",\"knows\",\"the\",\"rabbit\",\"and\",\"a\",\"dog\",\"and\",\"a\",\"sitting\",\"with\",\"the\",\"cat\"], \"hat\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_substring(['A', 'B', 'C', 'D', 'E'], 'A') == ['A', 'B', 'C']\nassert     filter_by_substring(['A', 'B', 'C', 'D', 'E'], 'E') == ['E']\nassert     filter_by_substring(['A', 'B', 'C', 'D', 'E'], 'B') == ['B', 'C', 'D']\nassert     filter_by_substring(['A', 'B', 'C', 'D', 'E'], 'D') == ['D', 'E']\nassert     filter_by_substring(['A', 'B', 'C', 'D', 'E'], 'C') == ['C', 'D', 'E']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_substring([\"foo\", \"bar\", \"foobar\"], \"oo\") == [\"foo\", \"bar\"]\nassert     filter_by_substring([\"foobar\", \"foo\", \"bar\"], \"oo\") == [\"bar\"]\nassert     filter_by_substring([\"foobar\", \"foo\", \"bar\"], \"foo\") == [\"foo\", \"bar\"]\nassert     filter_by_substring([\"foobar\", \"foo\", \"bar\"], \"bar\") == [\"bar\"]\nassert     filter_by_substring([\"foobar\", \"foo\", \"bar\"], \"f\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\n\ndef filter_by_multiple_strings(strings: List[str], *substrings: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain any given substring\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_by_substring([\"foo\", \"bar\", \"baz\"], \"ba\") == [\"baz\"]\nassert filter_by_substring([\"foo\", \"bar\", \"baz\"], \"\") == [\"foo\", \"bar\", \"baz\"]\nassert filter_by_substring([\"foo\", \"bar\", \"baz\"], \"ab\") == []\nassert filter_by_substring([\"foo\", \"bar\", \"baz\"], \"foobar\") == [\"foo\", \"baz\"]\nassert filter_by_substring([\"foo\", \"bar\", \"baz\"], \"foo\") == [\"foo\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_by_substring([], \"cat\") == []\nassert     filter_by_substring([\"cat\", \"dog\", \"mouse\"], \"cat\") == [\"cat\"]\nassert     filter_by_substring([\"cat\", \"dog\", \"mouse\"], \"mouse\") == [\"mouse\"]\nassert     filter_by_substring([\"cat\", \"dog\", \"mouse\"], \"catdog\") == [\"cat\", \"dog\", \"mouse\"]\nassert     filter_by_substring([\"cat\", \"dog\", \"mouse\"], \"catdogxxx\") == [\"cat\", \"dog\", \"mouse\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef filter_by_startswith(strings: List[str], startswith: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with given substring\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_product([1,2,3,4]) == (10, 24),'sum_product([1,2,3,4]) incorrect!'\nassert     sum_product([1,2,3,4]) == (10, 24),'sum_product([1,2,3,4]) incorrect!'\nassert     sum_product([-1,2,3,4]) == (1, -12),'sum_product([-1,2,3,4]) incorrect!'\nassert     sum_product([]) == (0, 1),'sum_product([]) incorrect!'\nassert     sum_product([4]) == (4, 4),'sum_product([4]) incorrect!'\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         sum_product([1, 2, 3]) == (6, 3)\nassert         sum_product([1, 2, 3, 4]) == (10, 8)\nassert         sum_product([]) == (0, 1)\nassert         sum_product([1, 2, 3, 4, 5]) == (30, 120)\nassert         sum_product([1, -2, 3, 4, 5]) == (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\"\"\"\nThe goal is to find two integers in a list whose product is equal to a given integer target, and whose sum is equal to that target.\n\nExample 1:\n\nInput: numbers = [3, 5], target = 6\nOutput: [3, 5]\nExplanation: The product of 3 and 5 is 18 (= 6).\nThe sum of 3 and 5 is also 18, but 3 and 5 aren't necessarily chosen in this problem.\nThere are no three numbers chosen except 3 and 5.\nExample 2:\n\nInput: numbers = [7, 3], target = 11\nOutput: []\nExplanation: There are no three numbers chosen.\nExample 3:\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_product([2,3,4]) == (10, 24)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([-1, 2, 3]) == (1, 6)\nassert     sum_product([-1, -2, 3]) == (3, 6)\nassert     sum_product([-1, 2, 3, -4, 5]) == (1, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_product([1, 2, 3]) == (3, 6)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 1]) == (3, 4)\n\ndef max_element(numbers: List[int]) -> int:\n    \"\"\" Find the maximum element in a list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert sum_product([]) == (0, 1)\nassert sum_product([1, 2]) == (3, 6)\nassert sum_product([1, 2, 3]) == (10, 15)\nassert sum_product([1, 2, 3, 4]) == (10, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([2]) == (2, 4)\nassert     sum_product([3]) == (3, 6)\nassert     sum_product([4]) == (4, 8)\nassert     sum_product([5]) == (5, 10)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1,2]) == (3, 2)\nassert     sum_product([3, 4, 5]) == (12, 40)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    # [[2, 3, 4],\n    #  [3, 5, 6],\n    #  [4, 7, 8],\n    #  [5, 8, 9],\n    #  [6, 9, 10],\n    #  [7, 10, 11]] == rolling_max([2, 3, 4, 5, 6, 7])\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 3, 4, 5]\nassert     rolling_max([3, 1, 2, 3]) == [3, 3, 3]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     rolling_max([-1, -2, -3, -4, -5, -6, -7]) == [-7, -6, -5, -4, -3, -2, -1]\nassert     rolling_max([]) == []\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('OK') if rolling_max([10, -5, 5, 5, 2, 0, 0, 0, 1]) == [-5, 5, 5, 5, 2, 5, 5, 5, 1] else 'WRONG'\nassert \nprint('OK') if rolling_max([10, 0, 5, 5, 2, 0, 0, 0, 1]) == [10, 10, 10, 10, 2, 5, 5, 5, 1] else 'WRONG'\nassert \nprint('OK') if rolling_max([10, -5, 5, 5, 2, 0, 0, 0, 1, -5]) == [-5, 5, 5, 5, 2, 5, 5, 5, 1, -5] else 'WRONG'\nassert \nprint('OK') if rolling_max([10, -5, 5, 5, 2, 0, 0, 0, -5, 1]) == [10, 10, 10, 10, 2, 5, 5, 5, 1, -5] else 'WRONG'\nassert \nprint('OK') if rolling_max([10, 0, 5, 5, 2, 0, 0, 0, -5, 1]) == [10, 10, 10, 10, 2, 5, 5, 5, 1, -5] else 'WRONG'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rolling_max([1,2,3,4,5]) == [1,2,3,4,5]\nassert     rolling_max([1,2,3,4,5,5,6,6,6,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9]) == [1,2,3,4,5,6,6,6,7,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == \nassert     rolling_max([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == \nassert     rolling_max([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == \nassert     rolling_max([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == \nassert     rolling_max([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert (rolling_max([1, 2, 3, 4, 5]) == [1, 1, 1, 1, 1])\nassert (rolling_max([1, 2, 2, 3, 4, 4, 4]) == [2, 2, 2, 2, 2, 2, 2])\nassert (rolling_max([1, 2, 2, 3, 4, 4, 4, 3, 3, 5, 5]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert rolling_max([4,5,6]) == [6]\nassert rolling_max([-6,6,9,0,-3,4,8,3,6]) == [9,9,9,9,9,9,9,9,9]\nassert rolling_max([-9,7,9,-1,-5,3,2,0,1,6,4,8,5,7,7,2,2,4,7,2,0,4,6,7,1,4]) == [-9,0,4,0,4,0,4,4,4,0,4,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nassert rolling_max([-9,-8,7,6,-5,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,0,4,3,2,1,"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rolling_max([1,2,3,4]) == [1,2,3,4]\nassert    rolling_max([2,4,8,6]) == [4,8,8,6]\nassert    rolling_max([3,6,7,8,9]) == [6,7,8,9,8]\nassert    rolling_max([10,15,5,12,6,14]) == [15,15,15,12,12,14]\n\n\ndef roll_max_by(numbers: List[int], index: int) -> List[int]:\n    \"\"\" Given a list of integers and an index, generate a list of rolling maximum element found \n    until given moment in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert make_palindrome('kayak') == 'ayak'\nassert make_palindrome('kayak') == 'kayak'\nassert make_palindrome('kayak') == 'kayak'\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     make_palindrome('a') == 'a', 'Basic test: a'\nassert     make_palindrome('aa') == 'ba', 'Basic test: aa'\nassert     make_palindrome('ab') == 'ba', 'Basic test: ab'\nassert     make_palindrome('aba') == 'baa', 'Basic test: aba'\nassert     make_palindrome('abb') == 'bab', 'Basic test: abb'\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     make_palindrome(\"\") == \"\"\nassert     make_palindrome(\"a\") == \"aa\"\nassert     make_palindrome(\"aa\") == \"aab\"\nassert     make_palindrome(\"aaa\") == \"aab\"\nassert     make_palindrome(\"aab\") == \"aa\"\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    assert make_palindrome(\"abcd\") == \"dcba\"\n    assert make_palindrome(\"fedcba\") == \"fedcba\"\n    assert make_palindrome(\"ab\") == \"ab\"\n    assert make_palindrome(\"abcd\") == \"dcba\"\n    "
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     make_palindrome('a') == 'a'\nassert     make_palindrome('aa') == 'aa'\nassert     make_palindrome('ab') == 'ba'\nassert     make_palindrome('abca') == 'cabca'\nassert     make_palindrome('abccab') == 'cabccba'\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef get_alphabet_from_bits(bits):\n    alphabet = []\n    for i in range(2**bits):\n        bit_string = bin(i)[2:]\n        bit_string = '0'*(bits-len(bit_string)) + bit_string\n        letter = chr(int(bit_string, 2))\n        alphabet.append(letter)\n    return alphabet\n\ndef find_matching_character(string, alphabet):\n    for letter in alphabet:\n        if letter in string:\n            return letter\n    return None\n\ndef create_plaintext_from_bits(string):\n    length = len(string)\n    plaintext = ''\n    for i in range(length):\n        plaintext += find_matching_character(string[i:i+2], alphabet)\n    return plaintext\n\ndef get_next_key_bits(key_bits, plaintext, n=5):\n    \"\"\"\n    Input: key_bits: 32-bit binary string, plaintext: 64-bit binary string, n: # of rounds\n    Output: 64-bit binary string which represents key_bits for the n-th round.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_xor('1', '0') == '1'\nassert     string_xor('0', '1') == '1'\nassert     string_xor('01010', '01010') == '01010'\nassert     string_xor('10101', '10101') == '10101'\nassert     string_xor('10101', '10100') == '10101'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_xor('10111', '10101') == '10001'\nassert     string_xor('10111', '1010101') == '10001'\nassert     string_xor('10111', '101010101') == '10001'\nassert     string_xor('10111', '10101010101') == '10001'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_xor(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef string_xor_solution(a: str, b: str) -> str:\n    # Find the length of strings\n    a_len = len(a)\n    b_len = len(b)\n\n    # If both strings are same length\n    if a_len == b_len:\n        # Perform XOR operation on both strings\n        # and then check if both strings are same.\n        result = \"\"\n        for i in range(a_len):\n            if a[i] == b[i]:\n                result += \"0\"\n            else:\n                result += \"1\"\n        if result == \"\":\n            return \"\"\n        else:\n            return result\n    # If both strings are different lengths\n    else:\n        # If the strings are equal in lengths\n        if a_len == b_len:\n            # Perform XOR operation on both strings\n            # and then check if both strings are same.\n            result = \"\"\n            for i in range(a_len):\n                if a[i] == b[i]:\n                    result += \"0\"\n                else:\n                    result += \"1\"\n            if result == \"\":\n                return \"\"\n            else:\n                return result\n        # If the strings are different lengths\n        else:\n            # If length of a is longer than length of b\n            if a_len > b_len:\n                temp = b\n                a = a[a_len:]\n                b = temp[0:b_len]\n            # If length of b is longer than length of a\n            else:\n                temp = a\n                b = b[b_len:]\n                a = temp[0:a_len]\n            # Perform XOR operation on both strings\n            # and then check if both strings are same.\n            result = \"\"\n            for i in range(a_len):\n                if a[i] == b[i]:\n                    result += \"0\"\n                else:\n                    result += \"1\"\n            if result == \"\":\n                return \"\"\n            else:\n                return result\n\n\ndef palindrome_permutation(string: str) -> bool:\n    \"\"\"\n    Check if the string is a palindrome permutation.\n    \"\"\"\n    pass\n\n\ndef palindrome_permutation_solution(string: str) -> bool:\n    \"\"\"\n    Check if the string is a palindrome permutation.\n    \"\"\"\n    a = string.replace(\" \", \"\")\n    a_len = len(a)\n    if a_len % 2!= 0:\n        return False\n    else:\n        # Construct a dictionary\n        d = {}\n        for i in range(a_len):\n            if a[i] in d:\n                d[a[i]] += 1\n            else:\n                d[a[i]] = 1\n        # Perform XOR operation on all dictionary keys\n        xor_sum = 0\n        for key in d.keys():\n            xor_sum += d[key]\n        # Perform XOR operation on all dictionary values\n        xor_sum = xor_sum ^ (xor_sum >> 1)\n        # Check if xor_sum is same for odd and even length palindromes.\n        if xor_sum == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_xor(\"\", \"\") == \"\"\nassert     string_xor(\"\", \"a\") == \"\"\nassert     string_xor(\"a\", \"\") == \"\"\nassert     string_xor(\"a\", \"a\") == \"a\"\nassert     string_xor(\"\", \"0\") == \"0\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert\n\n\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     longest(['']) == None\nassert longest(['']) == None\nassert     longest(['this is a sentence']) == 'is'\nassert     longest(['this is a sentence', 'this is another sentence']) =='sentence'\nassert     longest(['this is a sentence', 'this is another sentence', 'is a sentence']) == 'is'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef longest_word(strings: List[str]) -> Optional[str]:\n    \"\"\"Out of a list of strings, return the string which has the highest frequency\n    of the characters. Return None in case of an empty list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     longest([]) == None, \"empty list\"\nassert     longest([\"\"]) == \"\", \"empty string\"\nassert     longest([\"\"]) == \"\", \"empty string\"\nassert     longest([\"ABCD\"]) == \"ABCD\", \"ABCD\"\nassert     longest([\"a\"]) == \"a\", \"a\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert longest([\"ab\", \"ab\", \"abc\"]) == \"ab\"\nassert longest([\"abc\", \"ab\", \"ab\", \"abc\"]) == \"abc\"\nassert longest([\"abc\", \"ab\", \"ab\", \"ab\"]) == \"abc\"\nassert longest([\"ab\", \"a\"]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert longest([\"a\"]) == \"a\"\nassert longest([\"a\", \"a\"]) == \"a\"\nassert longest([\"a\", \"b\"]) == \"a\"\nassert longest([\"a\", \"b\", \"b\"]) == \"a\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     longest(['a', 'aa', 'ab', 'aabb', 'aaa', 'a', 'a']) == 'a', 'Test 1 fail'\nassert     longest(['a', 'aa', 'ab', 'aabb', 'aaa', 'a', 'a']) == 'a', 'Test 2 fail'\nassert     longest(['a', 'aa', 'ab', 'aabb', 'aaa', 'a', 'a']) == 'aaa', 'Test 3 fail'\nassert     longest(['a', 'aa', 'ab', 'aabb', 'aaa', 'a', 'a']) == 'a', 'Test 4 fail'\nassert     longest(['a', 'aa', 'ab', 'aabb', 'aaa', 'a', 'a']) == 'a', 'Test 5 fail'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef longest_in_list(strings: List[str]) -> str:\n    \"\"\" \n    In the list of strings, return the longest one.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(greatest_common_divisor(8, 4))\n    print(greatest_common_divisor(6, 6))\n    print(greatest_common_divisor(3, 3))\n    print(greatest_common_divisor(2, 3))\n    print(greatest_common_divisor(10, 3))\n    print(greatest_common_divisor(15, 5))\n    print(greatest_common_divisor(10, 3))\n    print(greatest_common_divisor(10, 5))\n    print(greatest_common_divisor(10, 4)"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     greatest_common_divisor(6,3) == 2\nassert     greatest_common_divisor(3,2) == 1\nassert     greatest_common_divisor(4,4) == 1\nassert     greatest_common_divisor(2,5) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     greatest_common_divisor(2, 4) == 2\nassert     greatest_common_divisor(2, 1) == 2\nassert     greatest_common_divisor(1, 4) == 1\nassert     greatest_common_divisor(4, 4) == 4\nassert     greatest_common_divisor(10, 10) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert greatest_common_divisor(10, 6) == 2\nassert greatest_common_divisor(7, 14) == 1\nassert greatest_common_divisor(1000, 100) == 10\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    #test case 1\n    print(greatest_common_divisor(2, 5))\n    # test case 2\n    print(greatest_common_divisor(3, 6))\n    # test case 3\n    print(greatest_common_divisor(9, 7)"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return whether an integer is prime\n    \"\"\"\n    pass\n\ndef test_is_prime() -> None:\n    \"\"\" Test whether is_prime function is correct or not\n    \"\"\"\n    # check prime\n    assert is_prime(1) is False\n    assert is_prime(2) is True\n    "
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert greatest_common_divisor(2,4) == 1\nassert greatest_common_divisor(5,4) == 1\nassert greatest_common_divisor(2,5) == 1\nassert greatest_common_divisor(3,5) == 1\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"hello\") == [\"h\", \"he\", \"hel\", \"hell\", \"helll\"]\nassert all_prefixes(\"hi\") == [\"h\", \"hi\"]\nassert all_prefixes(\"\") == [\"\"]\nassert all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert all_prefixes(\"a\") == [\"a\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_prefixes(\"papa\") == [\"pa\", \"pa\"]\nassert     all_prefixes(\"chocolate\") == [\"choc\", \"choco\", \"chocolat\"]\nassert     all_prefixes(\"chipmunk\") == [\"chip\", \"chipm\", \"chipmunk\", \"chipmunk\", \"chipmunk\"]\nassert     all_prefixes(\"frosting\") == [\"frost\", \"frosti\", \"frostin\", \"frostin\"]\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from longest to shortest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_prefixes(\"aa\") == [\"a\", \"aa\"]\nassert     all_prefixes(\"aaaa\") == [\"a\", \"aa\", \"aaa\", \"aaaa\"]\nassert     all_prefixes(\"abbbbb\") == [\"a\", \"aa\", \"ab\", \"abb\", \"abbb\", \"bb\", \"bbb\", \"b\", \"bbb\", \"bbbb\"]\nassert     all_prefixes(\"abc\") == [\"a\", \"aa\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abcdef\") == [\"a\", \"aa\", \"ab\", \"abc\", \"abcd\", \"abce\", \"abcf\", \"ef\", \"efa\", \"efab\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_prefixes(\"civic\") == [\"c\", \"i\", \"v\", \"i\", \"c\", \"i\", \"v\", \"i\"]\nassert     all_prefixes(\"civil\") == [\"c\", \"i\", \"l\", \"i\", \"v\", \"i\", \"l\", \"i\"]\nassert     all_prefixes(\"civilization\") == [\"c\", \"i\", \"l\", \"i\", \"v\", \"i\", \"l\", \"i\", \"z\", \"i\"]\nassert     all_prefixes(\"caesar\") == [\"c\", \"a\", \"e\", \"s\", \"e\", \"r\", \"a\", \"s\", \"e\"]\nassert     all_prefixes(\"lapin\") == [\"l\", \"a\", \"p\", \"i\", \"n\", \"o\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef length_longest_common_substring(str1: str, str2: str) -> int:\n    \"\"\" Return length of longest common substring from two strings\n\n    str1 and str2 are \"str\" because they are simple strings.\n    This function may be used for such cases.\n\n    Preconditions:\n    len(str1) >= len(str2)\n\n    >>> length_longest_common_substring(\"ab\", \"c\")\n    0\n    >>> length_longest_common_substring(\"dog\", \"cat\")\n    2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef longest_common_prefix(first_string: str, second_string: str) -> str:\n    \"\"\"Return the longest common prefix between the two strings. If there is no common prefix, return empty string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_prefixes('dba') == ['d', 'a', 'b', 'a']\nassert all_prefixes('abc') == ['a', 'b', 'c']\nassert all_prefixes('aa') == ['a', 'aa']\nassert all_prefixes('ac') == ['a', 'ca']\nassert all_prefixes('as') == ['a', 'as']\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_prefixes('word') == ['w','wo','wor','word']\nassert all_prefixes('hello') == ['h','he','hel','helo','hell','hello','hellow','hello','helloh','hello']\nassert all_prefixes('I') == ['I']\nassert all_prefixes('I') == ['I']\nassert all_prefixes('I') == ['I']\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert all_prefixes('abracadabra') == ['abra', 'abra', 'abra', 'abra', 'abra', 'abra', 'abra', 'abra']\nassert all_prefixes('abc') == ['', '', 'a', 'a', 'ab', 'ab', 'abc']\nassert all_prefixes('1234') == ['', '', '1', '12', '123', '1234']\nassert all_prefixes('12345') == ['', '', '1', '12', '123', '1234', '12345']\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_prefixes(\"lala\") == [\"l\",\"a\",\"al\",\"ala\"]\nassert     all_prefixes(\"haha\") == [\"ha\",\"aha\",\"he\"]\nassert     all_prefixes(\"hellooo\") == [\"hel\",\"hell\",\"hello\"]\nassert     all_prefixes(\"hahahahaha\") == [\"haa\",\"haha\",\"hah\",\"hahaha\"]\nassert     all_prefixes(\"hahahahahahahah\") == [\"haa\",\"haha\",\"hah\",\"hahaha\",\"hahah\"]\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_sequence(3) == \"0 1 2\", \"Expected 3\"\nassert string_sequence(5) == \"0 1 2 3 4\", \"Expected 5\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_sequence(0) == ''\nassert     string_sequence(1) == '0'\nassert     string_sequence(5) == '0 1 2 3 4'\nassert     string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'\nassert     string_sequence(25) == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert string_sequence(5) == '0 1 2 3 4', \"Wrong output\"\nassert string_sequence(0) == '', \"Wrong output\"\n\nif __name__ == \"__main__\":\n    # Try the question\n    n = 5\n    assert string_sequence(n) == '0 1 2 3 4', \"Wrong output"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_sequence(0) == '0'\nassert     string_sequence(1) == '0 1'\nassert     string_sequence(2) == '0 1 2'\nassert     string_sequence(3) == '0 1 2 3'\nassert     string_sequence(4) == '0 1 2 3 4'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef string_sequence2(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    return \" \".join([str(i) for i in range(n)])\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_sequence(0) == \"\", \"test failed\"\nassert     string_sequence(1) == \"0\", \"test failed\"\nassert     string_sequence(2) == \"0 1\", \"test failed\"\nassert     string_sequence(3) == \"0 1 2\", \"test failed\"\nassert     string_sequence(4) == \"0 1 2 3\", \"test failed\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_distinct_characters('paraparaparadise') == 7\nassert     count_distinct_characters('seirfirfirnirfirnirfirnirfirnirfirnirfirnirfirfirfirfirfirfirfirfirnirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfirfi"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_distinct_characters_via_set(string: str) -> int:\n    \"\"\" Find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"AbC\") == 3\nassert     count_distinct_characters(\"aBc\") == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_distinct_characters('abc') == 3, 'count_distinct_characters must return 3'\nassert     count_distinct_characters('aA') == 3, 'count_distinct_characters must return 3'\nassert     count_distinct_characters('abcdef') == 6, 'count_distinct_characters must return 6'\nassert     count_distinct_characters('aAa') == 3, 'count_distinct_characters must return 3'"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_characters_with_one_uppercase_in_string(string: str) -> int:\n    \"\"\" Given a string, find out how many characters with one upper case letter are there.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"abc2\") == 3\nassert     count_distinct_characters(\"ABC\") == 3\nassert     count_distinct_characters(\"abcd\") == 4\nassert     count_distinct_characters(\"\") == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"A\") == 1\nassert     count_distinct_characters(\"aa\") == 2\nassert     count_distinct_characters(\"AA\") == 2\nassert     count_distinct_characters(\"aaa\") == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"A\") == 1\nassert     count_distinct_characters(\"aA\") == 2\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"ABCD\") == 3\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_music('ooo|ooo') == [3, 1]\nassert     parse_music('o|o|o') == [3, 1]\nassert     parse_music('o|o|oo') == [3, 1]\nassert     parse_music('o|o|oo|o') == [3, 1]\nassert     parse_music('ooo|ooo|o|o|o') == [4, 3, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_music(\"'o|'\") == [4]\nassert     parse_music(\"'o'\") == [4]\nassert     parse_music(\"'o|'.\") == [4]\nassert     parse_music(\"'o|.|'\") == [4]\nassert     parse_music(\"'o|.|.|'\") == [4]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert parse_music(\"o|o|o|o|o|o|o|o|o\") == [1,1,1,1,1,1,1,1,1]\nassert parse_music(\"o|o|o|o|o|o|o|o|o\") == [1,1,1,1,1,1,1,1,1]\nassert parse_music(\"o|o|o|o|o|o|o|o|o|o\") == [1,1,1,1,1,1,1,1,1]\nassert parse_music(\"o|o|o|o|o|o|o|o|o|o\") == [1,1,1,1,1,1,1,1,1]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parse_music(\"-o|-|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|-o|"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_music('ooo') == [4, 4, 4, 4]\nassert     parse_music('ooo|') == [2, 4, 4, 2]\nassert     parse_music('ooo|o') == [2, 2, 4, 2]\nassert     parse_music('ooo|o.o') == [2, 2, 2, 2]\nassert     parse_music('ooo|o.o|') == [2, 2, 2, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert parse_music('xo|o|o|xo') == [2, 1, 2, 1]\nassert parse_music('xo|o|x|x|x') == [2, 1, 2, 1, 1]\nassert parse_music('xo|o|o|x|x') == [2, 1, 2, 1, 1]\nassert parse_music('xo|o|x|x|x') == [2, 1, 2, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_music('o|o|o|') == [4, 4, 4]\nassert     parse_music('o|o|') ==     [3, 3, 3]\nassert     parse_music('o|') ==     [2, 2, 2]\nassert     parse_music('o') ==     [1, 1, 1]\nassert     parse_music('o|o') == [4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     parse_music('ooo|oo|oo|oo') == [4, 2, 2, 2]\nassert     parse_music('oo|o|oo') == [3, 1, 1]\nassert     parse_music('ooo|o|o|oo') == [4, 2, 2, 2]\nassert     parse_music('oo|o|o|oo') == [3, 1, 1, 1]\nassert     parse_music('ooo|oo') == [4, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    parse_music(\"oo|ooo|oooo|o|oo|oo|ooo|o|oo|oo|ooo|o|o|o\") == [4, 4, 4, 2, 2, 4, 1, 4, 1, 2, 1, 4, 2, 2, 1]\n    parse_music(\"oo|oo|oo|ooo|o|oo|oo|ooo|o|oo|oo|ooo|o|o|o\") == [4, 4, 4, 2, 2, 4, 1, 4, 1, 2, 1, 4, 2, 2, 1]\n    parse_music(\"oo|oo|oo|ooo|o|oo|oo|ooo|o|oo|oo|ooo|o|o|o\") == [4, 4, 4, 2, 2, 4, 1, 4, 1, 2, 1, 4, 2, 2, 1]\n    parse_music(\"oo|oo|oo|ooo|o|oo|oo|ooo|o|oo|oo|ooo|o|o|o\") == [4, 4, 4, 2, 2, 4, 1, 4, 1, 2, 1, 4, 2, 2, 1]\n    parse_music(\"oo|oo|oo|ooo|o|oo|oo|ooo|o|oo|oo|ooo|o|o|o\") == [4, 4, 4, 2, 2, 4, 1, 4, 1, 2, 1, 4, 2, 2, 1]\n    parse_music(\"o|ooo|o|ooo|o|ooo|o|ooo|o|o|o|ooo|o|o|o\") == [4, 2, 4, 1, 2, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1]\n    parse_music(\"o|ooo|o|ooo|o|ooo|o|ooo|o|o|o|ooo|o|o|o\") == [4, 2, 4, 1, 2, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1]\n    parse_music(\"o|ooo|o|ooo|o|ooo|o|ooo|o|o|o|ooo|o|o|o\") == [4, 2, 4, 1, 2, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1]\n    parse_music(\"o|ooo|o|ooo|o|ooo|o|ooo|o|o|o|ooo|o|o|o\") == [4, 2, 4, 1, 2, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1]\n    parse_music(\"o|ooo|o|ooo|o|ooo|o|ooo|o|o|o|ooo|o|o|o\") == [4, 2, 4, 1, 2, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1]\n    parse_music(\"o|ooo|o|ooo|o|ooo|o|ooo|o|o|o|ooo|o|o|o\") == [4, 2, 4, 1, 2, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1]\n    parse_music(\"o|ooo|o|ooo|o|ooo|o|ooo|o|o|o|ooo|o|o|o\") == [4, 2, 4, 1, 2, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1]\n    parse_music(\"o|ooo|o|ooo|o|ooo|o|ooo|o|o|o|ooo|o|o|o\") == [4, 2, 4, 1, 2, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1]\n    parse_music(\"o|ooo|o|ooo|o|ooo|o|ooo|o|o|o|ooo|o|o|o\") == [4, 2, 4, 1, 2, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1]\n    parse_music(\"o|ooo|o|ooo|o|ooo|o|ooo|o|o|o|ooo|o|o|o\") == [4, 2, 4, 1, 2, 1, 1, 4, 1, 1, 1, 4, 1, 1, 1]\n    parse_music("
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert how_many_times('hello', 'lo') == 1\nassert how_many_times('hello', 'h') == 1\nassert how_many_times('hello', 'he') == 2\nassert how_many_times('hello', 'hel') == 2\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     how_many_times(\"hello world\", \"o\") == 1\nassert     how_many_times(\"hello world\", \"l\") == 3\nassert     how_many_times(\"hello world\", \"lo\") == 2\nassert     how_many_times(\"hello world\", \"l\") == 3\nassert     how_many_times(\"hello world\", \"ll\") == 2\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     how_many_times(\"abababab\", \"abab\")     ==    3\nassert     how_many_times(\"abababab\", \"bab\")     ==    2\nassert     how_many_times(\"abcab\", \"bcab\")     ==    2\nassert     how_many_times(\"abcab\", \"abc\")     ==    0\nassert     how_many_times(\"abcab\", \"a\")     ==    0\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert how_many_times(\"ababababababababab\", \"abababababab\") == 3\n\n\ndef find_all_occurences(string: str, substring: str) -> List[int]:\n    \"\"\" Find all occurences of the given substring in the original string. Return the index of all occurences.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef replace(string: str, pattern: str, replacement: str) -> str:\n    \"\"\" Replace the first occurrence of pattern in the string\n    \"\"\"\n    pass\n\ndef substitute(string: str, substitutions: Dict[str, str]) -> str:\n    \"\"\" Replace every occurence of a key in the substitutions dict with the corresponding value.\n    \"\"\"\n    pass\n\ndef capitalize(string: str) -> str:\n    \"\"\" Return the string with only the first letter capitalized.\n    \"\"\"\n    pass\n\ndef find_start(string: str, substring: str) -> int:\n    \"\"\" Find the start index of substring in string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     how_many_times(\"ababcbabcbcabababa\", \"ab\") == 3\nassert     how_many_times(\"ababcbabcbcabababa\", \"ab\") == 4\nassert     how_many_times(\"ababcbabcbcabababa\", \"bc\") == 2\nassert     how_many_times(\"ababcbabcbcabababa\", \"abc\") == 3\nassert     how_many_times(\"ababcbabcbcabababa\", \"ab\") == 4\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     how_many_times(\"The quick brown fox jumps over the lazy dog\", \"fox\") == 2\nassert     how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dog\") == 1\nassert     how_many_times(\"The quick brown fox jumps over the lazy dog\", \"jumps\") == 0\nassert     how_many_times(\"The quick brown fox jumps over the lazy dog\", \"a\") == 0\n\ndef remove_all_the_double(string: str) -> str:\n    \"\"\" Remove all the duplicate characters of a string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_numbers('one zero one four') == 'one zero one four'\nassert     sort_numbers('two three four') == 'four three two'\nassert     sort_numbers('one three four') == 'one three four'\nassert     sort_numbers('five six seven eight nine') == 'nine eight seven six five'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_numbers(\"0 1 2 3 4 5 6 7 8 9\") == \"9 8 7 6 5 4 3 2 1 0\"\nassert     sort_numbers(\"zero one two three four five six seven eight nine\") == \"9 8 7 6 5 4 3 2 1 0\"\nassert     sort_numbers(\"z e o f o r e t e\") == \"e f o r e t e z o o 0 1\"\nassert     sort_numbers(\"zero nine five one seven eight five one\") == \"1 0 5 7 8 5 0 9 5\"\n\n\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_numbers(\"one 2 three 4 five 7 eight 9 zero\") == \"zero one two three four five seven eight nine\"\nassert     sort_numbers(\"four one two 3 zero\") == \"zero one two three four\"\nassert     sort_numbers(\"one 2 zero 3 four 5 eight 7\") == \"zero one two three four five eight seven\"\n\ndef sort_letters(string: str) -> str:\n    \"\"\" Input is a space-delimited string of uppercase and lowercase latin letters from 'a' to 'z'.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n    Return the string with letters sorted from smallest to largest\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numbers(\"zero two\") == \"two zero\"\nassert     sort_numbers(\"one zero\") == \"zero one\"\nassert     sort_numbers(\"four four\") == \"four four\"\nassert     sort_numbers(\"three four\") == \"four three\"\nassert     sort_numbers(\"seven eight\") == \"eight seven\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_numbers(\"one\") == \"one\"\nassert     sort_numbers(\"two\") == \"two\"\nassert     sort_numbers(\"three\") == \"three\"\nassert     sort_numbers(\"four\") == \"four\"\nassert     sort_numbers(\"five\") == \"five\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not\n\nassert sort_numbers('zero zero zero zero zero zero') == 'zero zero zero zero zero zero'\nassert sort_numbers('zero one zero two three four') == 'zero one two three four'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'nine eight seven six five four three two one zero', 'Wrong sorted list'\nassert     sort_numbers('zero nine one four two five three 7 six 8 eight') == 'eight nine zero nine one five three seven two four two six 8 zero', 'Wrong sorted list'\n\nprint(\"Sort numbers, by number from 'zero' to 'nine'\")\nprint(\"Input: 'zero nine one four two five three 7 six 8 eight'\")\nprint(\"Expected output: 'eight nine zero nine one four two five three seven two zero six 8 zero'\")\nprint(sort_numbers(\"zero nine one four two five three 7 six 8 eight\"))\n\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_numbers(\"zero\") == \"zero zero zero zero zero zero zero zero zero zero zero\"\nassert     sort_numbers(\"one\") == \"one one one one one one one one one one\"\nassert     sort_numbers(\"two\") == \"two two two two two two two two two two two\"\nassert     sort_numbers(\"three\") == \"three three three three three three three three three three\"\nassert     sort_numbers(\"four\") == \"four four four four four four four four four four\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_numbers(\"four five two\") == \"two five four\"\nassert     sort_numbers(\"four five one\") == \"one four five\"\nassert     sort_numbers(\"one one two\") == \"two one one\"\nassert     sort_numbers(\"one two two\") == \"two two one\"\nassert     sort_numbers(\"two one one\") == \"one one two\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_numbers(\"zero zero zero zero zero zero one two three four five six seven eight nine\") == \"one two three four five six seven eight nine zero zero zero zero zero zero\"\n\n\ndef is_sorted(numbers: str) -> bool:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return whether or not the numbers in the string are ordered from smallest to largest.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_closest_elements([6,6,6,7,7,7,7,8,8,8]) == (6, 8)\nassert     find_closest_elements([8,8,8,7,7,7,7,6,6,6]) == (8, 7)\nassert     find_closest_elements([7,7,7,8,8,8,7,6,6,6]) == (7, 8)\nassert     find_closest_elements([6,6,6,7,7,7,7,8,8,8]) == (6, 7)\nassert     find_closest_elements([8,8,8,7,7,7,7,6,6,6]) == (7, 8)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_closest_elements([-1.5, 2.1, 2.3, 5.7]) == (-1.5, 2.1)\nassert     find_closest_elements([4, 1.4, 5.9, 6.8]) == (1.4, 4)\nassert     find_closest_elements([1, 2, 5, 6, 2]) == (1, 2)\nassert     find_closest_elements([5, 10, 9, 8, 7]) == (7, 5)\nassert     find_closest_elements([1, 5, 10, 2]) == (1, 5)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_closest_elements([-5, -2, 1, 4]) == (1, 4)\nassert     find_closest_elements([-5, 1, 3, 5]) == (1, 3)\nassert     find_closest_elements([-2, 4, -1, 2]) == (-1, 2)\nassert     find_closest_elements([-1, 1, 0, 0]) == (0, 1)\nassert     find_closest_elements([1, 0, 0, -1]) == (0, 1)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_closest_elements([2,3,5,9,9]) == (2,9)\nassert     find_closest_elements([1,2,4,5,9,9]) == (1,9)\nassert     find_closest_elements([0,1,2,3,4,4]) == (0,4)\nassert     find_closest_elements([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert (find_closest_elements([0.3, -0.6, 2.3, 1.4, -0.5, 0.2, -2.2, 3.1, -1.8, -1.5, 1.4, 1.1, 0.1, 0.4, 0.7])\n         == (0.5, -0.3))\n\nassert (find_closest_elements([-0.5, 0.4, 0.1]) == (0.1, 0.4))\n\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_closest_elements([1, 5, 2, 4, 7]) == (2, 4)\nassert     find_closest_elements([1, 5, 2, 4, 6]) == (2, 4)\nassert     find_closest_elements([1, 5, 2, 3, 6]) == (2, 3)\nassert     find_closest_elements([1, 5, 2, 4, 6]) == (2, 4)\nassert     find_closest_elements([1, 5, 2, 4, 7]) == (2, 4)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_closest_elements([1, 3, 5, 8]) == (5, 8)\nassert     find_closest_elements([1, 3, 5, 7]) == (1, 5)\nassert     find_closest_elements([1, 3, 5, 9]) == (1, 5)\nassert     find_closest_elements([1, 1, 5, 7]) == (1, 5)\nassert     find_closest_elements([1, 2, 3, 5, 7, 9, 11, 13]) == (1, 5)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_closest_elements([-1, 2, 5, 8, 9, 14]) == (2, 8)\nassert     find_closest_elements([2, 4, 6, 7, 8, 9]) == (4, 9)\nassert     find_closest_elements([1, 5, 6, 7, 8, 9]) == (1, 8)\nassert     find_closest_elements([0, 5, 6, 7, 8, 9]) == (0, 9)\nassert     find_closest_elements([]) == (None, None)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_closest_elements([1.4, 1.1, 1.0, 1.5, 1.6, 2.2, 2.5, 3.8, 4.4, 5.5]) == (1.0, 1.5)\nassert find_closest_elements([0.5, 1.4, 2.3, 4.5, 5.4, 6.8]) == (0.5, 5.4)\nassert find_closest_elements([1.1, 2.1, 3.5, 4.9]) == (2.1, 3.5)\nassert find_closest_elements([4.6, 5.2, 6.8]) == (5.2, 6.8)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_closest_elements([1, 2, 3, 4]) == (2, 3), \"Should find 2 and 3\"\nassert     find_closest_elements([1, 2, 4, 5, 6, 7]) == (2, 5), \"Should find 2 and 5\"\nassert     find_closest_elements([1, 2, 3, 4]) == (1, 2), \"Should find 1 and 2\"\nassert     find_closest_elements([1, 2, 3]) == (1, 2), \"Should find 1 and 2\"\nassert     find_closest_elements([1, 1, 1, 1]) == (1, 1), \"Should find 1 and 1\"\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rescale_to_unit([1,2,3,4,5,6,7,8,9]) == [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef abs_to_prob(scores: List[float], rescale=False) -> List[float]:\n    \"\"\" Convert from absolute values to probabilities, where probabilities are given\n    by the following equation:\n\n    ```\n    prob = 1 - (1 - prob) * (1 - (1 - prob) *... * (1 - prob))\n    ```\n\n    Note that this is not a probability distribution.\n    \n    If rescale=True, then we rescale all scores such that the largest score becomes 1\n    and the smallest score becomes 0.\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.1, 0.2, 0.3, 0.4, 0.5]\nassert         rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]\nassert         rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]) == [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\nassert         rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]) == [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\nassert         rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]) == [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4, 5, 6, 7, 8]) == [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\nassert     rescale_to_unit([0, 2, 5, 7, 9, 10, 12, 13]) == [0.0, 0.2, 0.4, 0.6, 0.8, 0.9, 0.1, 0.11]\nassert     rescale_to_unit([-1, -2, -3, -4, -5, -6, -7, -8]) == [-0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef linear_transformation(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers, apply a linear transformation on that list, such that the smallest\n    number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef rescale_to_unit_b(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    res = []\n    min_num = numbers[0]\n    max_num = numbers[0]\n    for i in numbers:\n        if i < min_num:\n            min_num = i\n        if i > max_num:\n            max_num = i\n    for i in numbers:\n        res.append((i - min_num) / (max_num - min_num))\n    return res\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_integers([1, 2, 3, 4, 'a', 'b']) == [1, 2, 3, 4, 'a', 'b']\nassert filter_integers([1, 2.0, 3, 4, 'a', 'b']) == [1, 2, 3, 4, 'a', 'b']\nassert filter_integers([True, 2, 'b', 2.0]) == [True, 2, 'b', 2.0]\n\n\ndef my_enumerate(values: List[Any]) -> List[Any]:\n    \"\"\" Enumerate given list of any python values\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    filter_integers([1, '2', '3', 4, '5', 6, 7, 8, 9, 10]) == []\n    filter_integers([1, 2, '3', 4, 5, 6, 7, 8, 9, 10]) == []\n    filter_integers([]) == []\n    filter_integers(['a', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\ndef filter_integers_2(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_integers([1, 3, 5, 2, 'a', 7, 8, 6]) == [1, 2, 3, 6, 7, 8]\nassert     filter_integers([1, 3, 5, 2, 'a', 7, 8, 6, 'A', 0]) == [1, 2, 3, 6, 7, 8]\nassert     filter_integers(['a', True, 6.0]) == []\nassert     filter_integers([False, 'hello']) == []\nassert     filter_integers([1.0, 2.0, 3.0, 4.0]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_integers([1, 2, 3]) == [1, 2, 3], \"The result should be a new list.\"\nassert     filter_integers([1, 2, 'a', 'b', 9, 'c']) == [1, 2, 'a', 'b', 9, 'c'], \"The result should be a new list.\"\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nvalues = [3, 2, 2.2, '3', 0, '0']\nfiltered_integers = filter_integers(values)\nprint(filtered_integers)\n\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     strlen(\"Hi!\") == 5\nassert strlen(\"\") == 0\nassert strlen(\"\"*6) == 6\nassert strlen(\" \"*6) == 6\nassert strlen(\"\"*7) == 7\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     strlen('abcd') == 4\nassert     strlen('ab') == 2\nassert     strlen('') == 0\nassert     strlen('abcdefg') == 9\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     strlen(\"abcd\") == 4\nassert     strlen(\"\") == 0\nassert     strlen(\"ab\") == 2\nassert     strlen(\"1234\") == 4\nassert     strlen(\"abcd1234\") == 6\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     strlen(\"test\") == 5\nassert strlen(\"\") == 0\nassert strlen(\"a\") == 1\nassert strlen(\"a\"*10) == 10\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Return -1 if string1 < string2, 0 if string1 == string2, 1 if string1 > string2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strlen(\"\") == 0, \"strlen: string is not a string\"\nassert     strlen(\"a\") == 1, \"strlen: string is not a string\"\nassert     strlen(\"1234567890123456789012345678901234567890123456789012345678901234567890\") == 21, \"strlen: string length is wrong\"\nassert     strlen(\"\") == 0, \"strlen: string length is wrong\"\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nlargest_divisor(16) # 1\nlargest_divisor(91) # 11\nlargest_divisor(20) # 2"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_divisor(8) == 2\nassert     largest_divisor(15) == 5\nassert     largest_divisor(18) == 3\nassert     largest_divisor(29) == 3\nassert     largest_divisor(30) == 2\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_divisor(11) == 3\nassert     largest_divisor(12) == 2\nassert     largest_divisor(16) == 2\nassert     largest_divisor(25) == 5\nassert     largest_divisor(100) == 5\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(2) == 1\nassert     largest_divisor(3) == 1\nassert     largest_divisor(4) == 2\nassert     largest_divisor(5) == 2\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(largest_divisor(7))\nassert \nprint(largest_divisor(9))\nassert\nprint(largest_divisor(1))\nassert\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert largest_divisor(12) == 3\nassert largest_divisor(9) == 3\nassert largest_divisor(13) == 3\nassert largest_divisor(15) == 5\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(largest_divisor(n))"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_divisor(4) == 1\nassert     largest_divisor(12) == 1\nassert     largest_divisor(4) == 1\nassert     largest_divisor(10) == 2\nassert     largest_divisor(23) == 2\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert factorize(18) == [2, 2, 2, 3]\nassert factorize(26) == [2, 2, 13]\nassert factorize(53) == [3, 13]\nassert factorize(60) == [2, 2, 3]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    \"\"\"\n    if factorize(15) == [3,3,5]:\n        print(\"[PASSED]\")\n    else:\n        print(\"[FAILED]\")\n        print(factorize(15), \"is not equal to\", 3,3,5)\n    \"\"\"\n\n\n    \"\"\"\n    if factorize(5) == [2,5]:\n        print(\"[PASSED]\")\n    else:\n        print(\"[FAILED]\")\n        print(factorize(5), \"is not equal to\", 2,5)\n    \"\"\"\n\n\n    \"\"\"\n    if factorize(3) == [3]:\n        print(\"[PASSED]\")\n    else:\n        print(\"[FAILED]\")\n        print(factorize(3), \"is not equal to\", 3)\n    \"\"\"\n\n\n    \"\"\"\n    if factorize(17) == [2,7]:\n        print(\"[PASSED]\")\n    else:\n        print(\"[FAILED]\")\n        print(factorize(17), \"is not equal to\", 2,7)\n    \"\"\"\n\n\n    \"\"\"\n    if factorize(9) == [3,3]:\n        print(\"[PASSED]\")\n    else:\n        print(\"[FAILED]\")\n        print(factorize(9), \"is not equal to\", 3,3)\n    \"\"\"\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert factorize(1) == []\nassert factorize(2) == []\nassert factorize(5) == []\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == []\nassert     factorize(3) == [3]\nassert     factorize(4) == []\nassert     factorize(5) == [5]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == []\nassert     factorize(3) == []\nassert     factorize(4) == []\nassert     factorize(5) == []\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert factorize(2) == [2]\nassert factorize(4) == [2, 2]\nassert factorize(16) == [2, 2, 2, 2]\nassert factorize(17) == [17]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_duplicates([1,2,3,3,4,4,4,4,4,5,5,6,6,7,7,8,8,8,9,10,10,11,11,12,12,13,13,13,14,15]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([0]) == [0]\nassert     remove_duplicates([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,11,11,12,12,13,13,14,15]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nassert     remove_duplicates([2,3,4,5,5,6,7,7,7,8,8,9,9,9,9,10,10,11,11,11,11,12,12,13,13,13,13,14,15,14,15,15,15,15]) == [2,3,4,5,6,7,7,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nremove_duplicates([1,2,3,4,5,6,7,7]) == [1,2,3,4,5,6]\nassert remove_duplicates([1,2,2,3,4,5,6,6]) == [1,2,3,4,5,6]\nassert remove_duplicates([1,2,3,4,5,6,6,7]) == [1,2,3,4,5,6]\nassert remove_duplicates([1,1,1,1,1,2,2,2,2,2,3,3]) == [1,2,3]\n\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nimport unittest\n\nclass TestRemoveDuplicates(unittest.TestCase):\n    def test_with_list_of_numbers(self):\n        numbers = [1, 1, 1, 2, 2, 3]\n        solution = [1, 2, 3]\n        remove_duplicates(numbers)\n        self.assertEqual(solution, numbers)\n\n    def test_with_empty_list(self):\n        numbers = []\n        solution = []\n        remove_duplicates(numbers)\n        self."
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert remove_duplicates([1,1,2,2,3,4,4]) == [1,2,3,4]\nassert remove_duplicates([1,1,2,2,3,3,4,4,4,5]) == [1,2,3,4,5]\nassert remove_duplicates([1,1,1,2,2,3,3,4,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_duplicates([]) == []\nassert     remove_duplicates([1,2,3]) == [1,2,3]\nassert     remove_duplicates([0,1,1,2,2,3,3]) == [0,1,2,3]\nassert     remove_duplicates([4,4,4,5,6]) == [4,5,6]\nassert     remove_duplicates([1,2,1,2,2,3,4,4,4]) == [1,2,3,4]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nremove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert remove_duplicates([2, 2, 2, 2]) == [2, 2, 2, 2]\nassert remove_duplicates([1, 2, 2, 4, 5, 5]) == [1, 2, 4, 5, 5]"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nnumbers = [0,0,1,1,1,2,2,3,3,4,4,5]\nexpected = [0,1,2,3,4,5]\nremove_duplicates(numbers) == expected\n\ndef remove_duplicates_recursive(numbers: List[int]) -> List[int]:\n    \"\"\" Recursive solution to remove duplicates from a list of integers.\n    Works on an in-place solution.\n    \"\"\"\n    # the first element is the only one that is going to be considered\n    for i in range(1,len(numbers)):\n        # if the current element is the same as the last one, then skip it\n        if numbers[i] == numbers[i-1]:\n            continue\n\n        # otherwise, we remove the current element from the list\n        else:\n            numbers.remove(numbers[i])\n    \n    return numbers\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     flip_case('')     == '', 'Empty string should return an empty string.'\nassert     flip_case('abc') == 'AbC', 'Input string must be non-empty'\nassert     flip_case('ABC') == 'AbC', 'Input string must be non-empty'\nassert     flip_case('A') == 'a', 'Input string must be non-empty'\nassert     flip_case('ab') == 'ba', 'Input string must be non-empty'\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     flip_case('abcd') == 'ABCD'\nassert flip_case('A string') == 'a StRiNg'\nassert flip_case('1a2') == '12a1'\nassert flip_case('1234') == '4321'\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_first_duplicate(string: str) -> int:\n    \"\"\"\n    This function returns the index of the first occurrence of a duplicate character in a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     flip_case(\"REvolve\") == \"rEvolve\"\nassert flip_case(\"Re-volve\") == \"rEvolve\"\nassert flip_case(\"REvolve\") == \"rEvolve\"\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert flip_case('upper') == 'lower'\nassert flip_case('mixed') == 'upper'\nassert flip_case('mixedCAPS') == 'upper'\nassert flip_case('lower') == 'lower'\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef reverse_string(string: str) -> str:\n    \"\"\" For a given string, return a string that is the reverse of the input string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert concatenate(['hello', 'world']) == 'hello world'\n\n\ndef strip(strings: List[str]) -> str:\n    \"\"\" Remove whitespaces in list of strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate([\"Hello\", \"world\"]) == \"Hello world\"\nassert     concatenate([\"\", \"\"]) == \"\"\nassert     concatenate([]) == \"\"\nassert     concatenate([\"Hello\", \"world\", \"!\", \"!\"]) == \"Hello world!\"\n\n\ndef char_at(strings: List[str], index: int) -> str:\n    \"\"\" Get the character at a given index from a list of strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate(['hello', 'world']) == 'hello world'\nassert     concatenate([]) == ''\nassert     concatenate([1, 2, 3, 4, 5]) == '12345'\nassert     concatenate(['a', 'b', 'c', 'd']) == 'abcde'\nassert     concatenate(['a', 'b', 'c', 'd', 'e']) == 'abcde'\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     concatenate([\"Hello\", \"World!\"]) == \"HelloWorld!\"\nassert     concatenate([\"Hello\"]) == \"Hello\"\nassert     concatenate([\"Hello\", \"World!\"]) == \"HelloWorld!\"\nassert     concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\nassert     concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    concatenate([\"hello\", \"world\"]) == \"helloworld\"\nassert \n    concatenate([\"\", \"\"]) == \"\"\nassert \n    concatenate([\"a\"]) == \"a\"\nassert \n    concatenate([\"\", \"b\", \"\", \"\", \"c\", \"\"]) == \"abc\"\nassert \n    concatenate([\"a\"]) == \"a\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate([\"asd\", \"qwe\", \"dfd\"]) == \"asdqweasdqwefdfd\"\nassert     concatenate([\"asd\", \"qwe\", \"dfd\", \"ghi\"]) == \"asdqweasdqwefdfdghi\"\nassert     concatenate([\"asd\", \"qwe\", \"dfd\", \"ghi\", \"jkl\"]) == \"asdqweasdqwefdfdghijl\"\nassert     concatenate([\"asd\", \"qwe\", \"dfd\", \"ghi\", \"jkl\", \"mno\"]) == \"asdqweasdqwefdfdghijlmno\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_all_divisibles_by_k(numbers: List[int], k: int) -> List[int]:\n    \"\"\" Find all the numbers that are divisible by k.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate([\"This\", \"is\", \"a\", \"test\", \".\"]) == \"This is a test.\"\nassert     concatenate([\"I\", \"love\", \"to\", \"Code\"]) == \"I love to Code\"\nassert     concatenate([\"I\", \"like\", \"to\", \"Code\", \".\"]) == \"I like to Code.\"\nassert     concatenate([\"I\", \"like\", \"to\", \"Code\", \",\", \"and\", \"more\", \".\"]) == \"I like to Code, and more.\"\nassert     concatenate([\"I\", \"like\", \"to\", \"Code\", \",\", \"and\", \"more\", \",\", \"and\", \"more\", \",\", \"and\", \"more\", \".\"]) == \"I like to Code, and more and and more and more.\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate([\"Hello\", \"World\"]) == \"HelloWorld\"\nassert     concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\nassert     concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\nassert     concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\nassert     concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_by_prefix([\"this\", \"is\", \"a\", \"test\"], \"test\") == [\"is\", \"this\"]\nassert     filter_by_prefix([\"this\", \"is\", \"a\", \"test\"], \"as\") == []\nassert     filter_by_prefix([\"this\", \"is\", \"a\", \"test\"], \"a\") == [\"this\"]\nassert     filter_by_prefix([\"this\", \"is\", \"a\", \"test\"], \"this\") == [\"is\", \"this\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    filter_by_prefix([], 'abc') == []\n    filter_by_prefix(['abc'], 'abc') == ['abc']\n    filter_by_prefix(['abc', 'def'], 'abc') == ['abc']\n    filter_by_prefix(['abc', 'def', 'ghi'], 'abc') == ['abc']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl'], 'abc') == ['abc', 'def', 'ghi']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'abc') == ['abc', 'def', 'ghi']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'c') == []\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'g') == ['ghi']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'hi') == ['ghi']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'k') == ['jkl','mno']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'l') == ['jkl','mno']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'o') == ['ghi','mno']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'p') == ['ghi']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'q') == []\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'r') == ['ghi','mno']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'],'s') == ['ghi']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 't') == ['jkl','mno']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'u') == ['ghi']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'v') == []\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'w') == ['ghi','mno']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'x') == ['jkl','mno']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'y') == ['ghi','mno']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'z') == ['ghi']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'abc') == ['abc']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'def') == ['def']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'ghi') == ['ghi']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'jkl') == ['jkl']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'],'mno') == ['mno']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'no') == ['no']\n    filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno'], 'oo') == []\n    filter_b"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_by_prefix([], 'a') == []\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'f') == ['f']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'a') == ['a']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'z') == []\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_prefix([\"_2\", \"_2\", \"_3\", \"_3\"], \"_2\") == [\"_2\", \"_3\"]\nassert     filter_by_prefix([\"_2\", \"_2\", \"_3\", \"_3\"], \"_4\") == []\nassert     filter_by_prefix([\"_2\", \"_2\", \"_3\", \"_3\"], \"\") == [\"_2\", \"_2\", \"_3\", \"_3\"]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"test\", \"test2\"], \"test\") == []\nassert     filter_by_prefix([\"test\", \"test2\"], \"test2\") == [\"test\"]\nassert     filter_by_prefix([\"test\", \"test2\"], \"t\") == [\"test\"]\nassert     filter_by_prefix([\"test\", \"test2\"], \"test2\", True) == [\"test2\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_by_prefix([\"welcome\", \"to\", \"nptel.ac.in\"], \"nptel\") == [\"nptel.ac.in\"]\nassert     filter_by_prefix([\"welcome\", \"to\", \"nptel.ac.in\"], \"nptel.com\") == []\nassert     filter_by_prefix([\"welcome\", \"to\", \"nptel.ac.in\"], \"dummy\") == []\nassert     filter_by_prefix([\"welcome\", \"to\", \"nptel.ac.in\"], \"nptel.ac.in\") == [\"nptel.ac.in\"]\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_by_prefix([\"ac\", \"acd\", \"b\", \"bcd\", \"bdd\", \"c\", \"cde\", \"de\", \"f\"], \"b\") == [\"bcd\", \"bdd\", \"b\"]\nassert     filter_by_prefix([\"ac\", \"acd\", \"b\", \"bcd\", \"bdd\", \"c\", \"cde\", \"de\", \"f\"], \"b\", case_insensitive=True) == [\"bcd\", \"bdd\", \"b\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_by_prefix([\"Bundestag\", \"Gro\u00dfbundestag\", \"Wei\u00dfbundestag\", \"Gro\u00df\", \"B\"], \"G\") == [\"Gro\u00dfbundestag\", \"Gro\u00df\", \"B\"]\nassert     filter_by_prefix([\"H\", \"M\", \"P\", \"Z\", \"V\"], \"M\") == [\"H\", \"M\", \"P\", \"Z\", \"V\"]\nassert     filter_by_prefix([\"W\", \"M\", \"P\", \"Z\", \"V\"], \"H\") == [\"W\", \"M\", \"P\", \"Z\", \"V\"]\nassert     filter_by_prefix([\"W\", \"M\", \"P\", \"Z\", \"V\"], \"C\") == [\"W\", \"M\", \"P\", \"Z\", \"V\"]\nassert     filter_by_prefix([\"W\", \"M\", \"P\", \"Z\", \"V\"], \"Q\") == [\"W\", \"M\", \"P\", \"Z\", \"V\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_positive([1, 2, 3, 4, -1, -2, 3]) ==  [1, 2, 3, 3]\nassert     get_positive([1, 2, 3, -4, -1, -2, 3]) ==  [1, 2, 3, 3]\nassert     get_positive([-1, -2, -3, -4, 0, 0, 0]) ==  [-1, -2, -3, -4, 0, 0, 0]\nassert     get_positive([]) ==  []\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nget_positive([1, -1, 0, 3, -5, -10]) == [-1, 3, -5, -10]\nassert \nget_positive([-1, 0, 1]) == [-1, 1]\nassert \nget_positive([1]) == [1]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_positive([1, -2, -5, 4, 3]) == [-2, 4, 3]\nassert     get_positive([-1, 1, -1, -2, 1]) == [1, 1, -2, 1]\nassert     get_positive([-5, -4, -3, -2, -1]) == [-5, -4, -3, -2, -1]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_positive([-1, -3, 0, 5, 2])     == [-1, 5]\nassert     get_positive([-1, -3, 0, 5, 2])     == [-3, 5]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_positive([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7], \"get_positive does not return correctly\"\nassert     get_positive([1,-2,-3,0,-5]) == [-2,-3,0,-5], \"get_positive does not return correctly\"\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_positive([0, -1, 1, 2, -3]) == [1, 2], \"Wrong answer\"\nassert     get_positive([0, -1, -2]) == [-2], \"Wrong answer\"\nassert     get_positive([]) == [], \"Wrong answer\"\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_positive([1, 4, 6, -3]) == [1, 4, 6]\nassert     get_positive([1, 4, 6, -3, -1, -2, -3]) == [1, 4, 6]\nassert     get_positive([]) == []\nassert     get_positive([-1, 2, -3, -4, 5]) == [-1, 2, -3, -4, 5]\n\nprint(\"Done!\")"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_positive([1, -3, -5, 6, 8, -8]) == [1, 6, 8]\nassert     get_positive([-5, -3, -1, -1, 1, -1, -5, 8, -1]) == [-5, 1, 1, -1, 8]\nassert     get_positive([1, 2, 3, 4]) == []\nassert     get_positive([]) == []\nassert     get_positive([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert get_positive([1, 2, -3, 0, -1, 2, 0, -1, -2]) == \n    [1, 2, 2, 1, 2, 2, 1, 2, 2]\nassert get_positive([1, 2, -3, 0, -1, 2, 0, -1, -2]) == \n    [1, 2, 2, 1, 2, 2, 1, 2, 2]\nassert get_positive([1, -2, 3, 0, -5, 2, 0, -1, -2]) == \n    [1, 2, 3, 0, 2, 2, 0, 2, 2]\nassert get_positive([1, -2, 3, 0, -5, 2, 0, -1, -2]) == \n    [1, 2, 3, 0, 2, 2, 0, 2, 2]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_positive([1, -1, -2, 2, 0, -3]) == [1, 2]\nassert     get_positive([1, -1, -2, 2, 0, -3]) == None\nassert     get_positive([1, -1, -2, 2, 0, -3, -4]) == [2, 4]\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_prime(1) == False, \"1 is not prime\"\nassert     is_prime(2) == True, \"2 is prime\"\nassert     is_prime(7) == True, \"7 is prime\"\nassert     is_prime(11) == False, \"11 is not prime\"\nassert     is_prime(31) == True, \"31 is prime\"\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_prime(2)\nassert     is_prime(11)\nassert     is_prime(20)\nassert     is_prime(25) == False\nassert     is_prime(30) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_prime_trial(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef prime_factors(n):\n    \"\"\"Return a list of prime factors of a given number.\n\n    >>> prime_factors(12)\n    [2, 2, 3]\n    >>> prime_factors(9)\n    [3, 3]\n    >>> prime_factors(1)\n    []\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(6) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_prime(7) == True, \"7 is prime!\"\nassert     is_prime(15) == False, \"15 is not prime!\"\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     poly([1, 2, 3], 2) == 2, \"x^2\"\nassert     poly([1, 1, 1], 1) == 1, \"x^1\"\nassert     poly([1, 2, 3], 4) == 0, \"x^4\"\nassert     poly([-1, 2, 3], 2) == -2, \"x^2\"\nassert     poly([1, 2, 3], -2) == 1, \"x^2\"\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef main():\n    # TODO: Test your code here\n    print(poly([2, 3], 1))\n    print(poly([2, 3, 4], 1))\n    print(poly([2, 3, 4, 5], 1))\n    print(poly([2, 3, 4, 5], 2))\n    print(poly([2, 3, 4, 5], 3))\n    print(poly([2, 3, 4, 5], 4))\n    print(poly([2, 3, 4, 5], 5))\n    print(poly([2, 3, 4, 5], 6))\n    print(poly([2, 3, 4, 5], 7))\n    print(poly([2, 3, 4, 5], 8))\n    print(poly([2, 3, 4, 5], 9))\n    print(poly([2, 3, 4, 5], 10))\n    print(poly([2, 3, 4, 5], 11))\n    print(poly([2, 3, 4, 5], 12))\n    print(poly([2, 3, 4, 5], 13))\n    print(poly([2, 3, 4, 5], 14))\n    print(poly([2, 3, 4, 5], 15))\n    print(poly([2, 3, 4, 5], 16))\n    print(poly([2, 3, 4, 5], 17))\n    print(poly([2, 3, 4, 5], 18))\n    print(poly([2, 3, 4, 5], 19))\n    print(poly([2, 3, 4, 5], 20))\n    print(poly([2, 3, 4, 5], 21))\n    print(poly([2, 3, 4, 5], 22))\n    print(poly([2, 3, 4, 5], 23))\n    print(poly([2, 3, 4, 5], 24))\n    print(poly([2, 3, 4, 5], 25))\n    print(poly([2, 3, 4, 5], 26))\n    print(poly([2, 3, 4, 5], 27))\n    print(poly([2, 3, 4, 5], 28))\n    print(poly([2, 3, 4, 5], 29))\n    print(poly([2, 3, 4, 5], 30))\n    print(poly([2, 3, 4, 5], 31))\n    print(poly([2, 3, 4, 5], 32))\n    print(poly([2, 3, 4, 5], 33))\n    print(poly([2, 3, 4, 5], 34))\n    print(poly([2, 3, 4, 5], 35))\n    print(poly([2, 3, 4, 5], 36))\n    print(poly([2, 3, 4, 5], 37))\n    print(poly([2, 3, 4, 5], 38))\n    print(poly([2, 3, 4, 5], 39))\n    print(poly([2, 3, 4, 5], 40))\n    print(poly([2, 3, 4, 5], 41))\n    print(poly([2, 3, 4, 5], 42))\n    print(poly([2, 3, 4, 5], 43))\n    print(poly([2, 3, 4, 5], 44))\n    print(poly([2, 3, 4, 5], 45))\n    print(poly([2, 3, 4, 5], 46))\n    print(poly([2, 3, 4, 5], 47))\n    print(poly([2, 3, 4, 5], 48))\n    print(poly([2, 3, 4, 5], 49))\n    print(poly([2, 3, 4, 5], 50))\n    print(poly([2, 3, 4, 5], 51))\n    print(poly([2, 3, 4, 5], 52))\n    print(poly([2, 3, 4, 5], 53))\n    print(poly([2, 3, 4, 5], 54))\n    print(poly([2, 3, 4, 5], 55))\n    print(poly([2, 3, 4, 5], 56))\n    print(poly([2, 3, 4, 5], 57))\n    print(poly([2, 3, 4, 5], 58))\n    print(poly([2, 3, 4, 5], 59))\n    print(poly([2, 3, 4, 5], 60))\n    print(poly([2, 3, 4, 5], 61))\n    print(poly(["
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nxs = []\nxs.append(4)\nxs.append(0)\nxs.append(-5)\nxs.append(-1)\nxs.append(-3)\n\nxs = [-1,1,-3]\nprint(find_zero(xs)) # 0\nxs = [0,-1,-1]\nprint(find_zero(xs)) # 2\nxs = [1,3,1]\nprint(find_zero(xs)) # 1\nxs = [-1,1,-3,0]\nprint(find_zero(xs)) # 2\n\nxs = [-1,1,-3]\nprint(find_zero(xs)) # 0\nxs = [-1,-1,1]\nprint(find_zero(xs)) # -1\nxs = [-1,1,2,1]\nprint(find_zero(xs)) # 2\nxs = [-1,0,2,1]\nprint(find_zero(xs)) # 1\nxs = [0,-1,2,1]\nprint(find_zero(xs)) # 1\nxs = [0,1,2,1]\nprint(find_zero(xs)) # 1\nxs = [0,-1,-1,2,1]\nprint(find_zero(xs)) # 3\n\nxs = [4,0,1]\nprint(find_zero(xs)) # 0\nxs = [4,0,-1]\nprint(find_zero(xs)) # 2\nxs = [0,4,1]\nprint(find_zero(xs)) # 1\nxs = [-4,0,1]\nprint(find_zero(xs)) # -1\nxs = [-4,0,-1]\nprint(find_zero(xs)) # 2\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_zero([1, 0, 0, 2]) == 1\nassert     find_zero([1, 2, 3, 4]) == 1\nassert     find_zero([2, 3, 4, 5]) == 2\nassert     find_zero([1, 0, 1]) == 1\nassert     find_zero([1, 2, 1]) == 1\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_zero([0, 0]) == 0.0\nassert     find_zero([1, 2]) == 1.0\nassert     find_zero([1, 0, 3, 4]) == 1.0\nassert     find_zero([1, 0, 3, 0]) == -1.0\nassert     find_zero([1, 0, -1, 0]) == -1.0\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_zero([0, 1]) == 1\nassert     find_zero([0, 2]) == 2\nassert     find_zero([1, 2]) == 2\nassert     find_zero([1, 0]) == 1\nassert     find_zero([2, 0]) == 1\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef check_roots(xs: list, x: float, tol: float) -> bool:\n    \"\"\"\n    Tests whether roots x satisfies the conditions:\n     x^2 + x + c = 0\n    \"\"\"\n    return poly(xs, x) == 0\n\ndef find_all_roots(xs: list, tol: float):\n    \"\"\"\n    Finds roots of the equation ax^2 + bx + c = 0.\n    return a list of roots of the equation.\n    If there are no roots, returns empty list.\n    \"\"\"\n    pass\n\ndef check_poly(xs: list, x: float):\n    \"\"\"\n    Checks whether given x satisfies the condition:\n     x^2 + x + c = 0\n    \"\"\"\n    return poly(xs, x) == 0\n\ndef check_poly_derivative(xs: list, x: float):\n    \"\"\"\n    Checks whether x satisfies the condition:\n     dx^2 + 2dx + c = 0\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef function_of_different_variables(xs: list, x: float, y: float, z: float):\n    \"\"\"function of different variables\n    function_of_different_variables is a function of 3 variables\n    and it returns a list of coefficients of the polynomial.\n    xs are the coefficients of a polynomial.\n    x, y, z are the variables of the function.\n    x^2 + y^2 + z^2 = 1\n    \"\"\"\n    #print(\"xs: \", xs)\n    return [coeff * math.pow(x, i) * math.pow(y, i) * math.pow(z, i) for i, coeff in enumerate(xs)]\n\n\n\ndef find_zero_2(xs: list):\n    \"\"\" find_zero_2 find the roots of a quadratic function\n    xs are the coefficients of a quadratic function, \n    it returns a list of roots of the quadratic function.\n    \"\"\"\n    roots = []\n    coeff_square = [(coeff * coeff) for coeff in xs]\n    roots.append(find_zero(coeff_square))\n    for i in range(len(xs)):\n        roots.append(find_zero(coeff_square + [-xs[i]]))\n    roots = sorted(roots, key=lambda x: x.real)\n    return roots\n\n\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef test_sort_third():\n    l = [3, 9, 8, 3, 1, 7, 0, 1, 9]\n    l_sorted = [3, 1, 1, 3, 7, 8, 9, 0, 9]\n    assert sort_third(l) == l_sorted\n\ndef sort_third_modified(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_third([3, 6, 2, 3, 5, 1]) == [1, 2, 3, 3, 5, 6]\nassert     sort_third([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sort_third([1, 2, 3, 4, 5, 6, 1]) == [1, 1, 1, 2, 3, 4, 5, 6]\nassert     sort_third([1, 2, 3, 4, 5, 6, 1, 1]) == [1, 1, 1, 1, 2, 2, 3, 4, 5, 6]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         sort_third(l) == l,         \"Error\"\nprint(\"    --- test 1.1 ---\")\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_third([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     sort_third([1,2,3,4,5,7]) == [1,2,3,4,5,7]\nassert     sort_third([1,2,3,4,6,7]) == [1,2,3,4,6,7]\nassert     sort_third([1,2,3,4,6,7,8,9]) == [1,2,3,4,6,7,8,9]\nassert     sort_third([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_third(l_test) == l_expected\nassert     sort_third(l_test) == l_expected_sort_third\nassert sort_third(l_test) == l_expected_sort_third\n\n\nprint(\"\\n# 5)\")\nl_test = [-10, -20, 3, 99, -1, -5, -2, -22, -2, -12]\nl_expected = [-10, -20, -1, -5, -2, -2, -12, -22, 3, 99]\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    # test of sort_first\n    assert(sort_first([2, 3, 1, 4, 1, 2, 5, 3]) ==\n        [1, 1, 2, 2, 3, 3, 4, 5])\n    assert(sort_first([4, 6, 4, 5, 3, 6, 4, 5, 5, 3, 5, 5, 2, 1, 4, 3, 1, 6, 3, 5, 4, 2, 5, 2, 4, 5, 1, 2]) == \n        [2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 5, 4, 3, 5, 5, 3, 5, 5, 4, 4, 5, 3, 5])\n    \n    # test of sort_second\n    assert(sort_second([1, 3, 5, 2, 1, 2, 3, 5, 1]) ==\n        [1, 1, 1, 2, 2, 3, 3, 5, 5])\n    "
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(unique([1,2,3,3,4,5,2,3,1,6,5,2]))\nprint(unique([1,2,3,3,4,5,2,3,1,6,5,2])"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique([0, 0, 1, 2, 2, 2, 3, 4, 4]) == [0, 1, 2, 3, 4]\nassert     unique([1, 1, 2, 2, 3, 4]) == [1, 2, 3, 4]\nassert     unique(['a', 'a', 'b', 'c', 'b', 'd', 'c']) == ['a', 'b', 'c', 'd']\nassert     unique(['a', 'b', 'a', 'b']) == ['a', 'b']\nassert     unique([0]) == [0]\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    l = ['a', 'a', 'b', 'b']\n    print(unique(l)"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique([1,2,2,3,4,5]) == [1,2,3,4,5], \"test failed\"\nassert     unique([1,1,1,1,2,2]) == [1,1,2], \"test failed\"\nassert     unique([1,2,1,2,2]) == [1,2], \"test failed\"\nassert     unique([1,2,2,3,4,5]) == [1,2,3,4,5], \"test failed\"\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert unique([1,2,2,3,4,5]) == [1,2,3,4,5]\n    assert unique([1,2,2,3,4,5,5]) == [1,2,3,4,5]\n    assert unique([1,1,2,2,3,3,4,4,5,5]) == [1,2,3,4,5]\n    "
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_unique(l: list):\n    \"\"\"Returns True if l contains no duplicate elements\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    unique([1,2,3]) ==  [1,2,3]\n    unique([1,2,2]) ==  [1,2,2]\n    unique([1,1,2]) ==  [1,1,2]\n    unique([1,1,1]) ==  [1,1,1]\n    unique([1,2,3,3]) ==  [1,2,3]\n    unique([]) ==  []\n    unique([1,2,3,4,5]) ==  [1,2,3,4,5]\n    unique([1,2,3,4,5,6]) ==  [1,2,3,4,5,6]\n    unique([1,2,3,4,5,6,2,3,4]) ==  [1,2,3,4,5,6]\n    unique([1,2,3,4,5,6,2,3,4,5,6]) ==  [1,2,3,4,5,6,2,3,4,5,6]\n\nprint(\"Unique tests passed\")\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nl = [1, 2, 3, 1, 2, 3, 1]\nprint(sorted(unique(l)))\nprint(sorted(unique([])))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique([1,2,2,3,4,5]) == [1,2,3,4,5], \"failed\"\nassert     unique([1,1,2,2,3,3,4,4,5]) == [1,2,3,4,5], \"failed\"\nassert     unique([]) == [], \"failed\"\nassert     unique([]) == [], \"failed\"\nassert     unique([]) == [], \"failed\"\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (unique([1, 2, 3, 4, 5, 1, 3, 4, 5]) == [1, 2, 3, 4, 5])\nassert     (unique([2, 1, 3, 4, 5, 5]) == [2, 1, 3, 4, 5])\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_element([]) == None\nassert     max_element([1,2,3,4,5]) == 5\nassert     max_element([-1, -2, -3, -4, -5]) == -1\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_element([1,2,3,4,5]) == 5\nassert     max_element([1,-2,3,4,5]) == 5\nassert     max_element([1,-2,3,-4,5]) == 5\nassert     max_element([-1,-2,-3,-4,-5]) == -1\nassert     max_element([-1,2,3,4,5]) == 5\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_element([]) == 0\nassert     max_element([1, 2, 3, 4]) == 4\nassert     max_element([-2, -1, 0, 1, 2, 3]) == 3\nassert     max_element([-2, -3, -4, -1, 0, 1, 2, 3]) == -1\nassert     max_element([-2, -3, -4, -1, 0, 1, 2, 3, 99]) == 99\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([10, 100, 50, 150, 20]) == 100\nassert     max_element([-10, -100, -50, -150, -20]) == -100\nassert     max_element([-2, -10, -100, -50, -150, -20]) == -100\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_element([10, 22, 2]) == 22\nassert     max_element([10, 2, 2]) == 10\nassert     max_element([]) == None\nassert     max_element([1, 2, 3, 4, 5, 6, 7, 8]) == 8\nassert     max_element([100, 22, 2]) == 100\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_element([]) == None, 'Wrong max_element implementation'\nassert max_element([1, 2, 3, 4, 5, 6]) == 6, 'Wrong max_element implementation'\nassert max_element([3, 2, 1]) == 3, 'Wrong max_element implementation'\nassert max_element([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9, 'Wrong max_element implementation'"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    # run the test function\n    import doctest\n    doctest.testmod("
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(fizz_buzz(100)"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fizz_buzz(5) == 2\nassert     fizz_buzz(6) == 3\nassert     fizz_buzz(9) == 2\nassert     fizz_buzz(15) == 3\nassert     fizz_buzz(100) == 5\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \nassert \nassert fizz_buzz(3) == 1\nassert fizz_buzz(13) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fizz_buzz(15)    ==     1, fizz_buzz(15)\nassert     fizz_buzz(99)    ==     8, fizz_buzz(99)\nassert     fizz_buzz(0)    ==     0, fizz_buzz(0)\nassert     fizz_buzz(12)    ==     1, fizz_buzz(12)\nassert     fizz_buzz(13)    ==     1, fizz_buzz(13)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fizz_buzz(5) == 1\nassert     fizz_buzz(10) == 2\nassert     fizz_buzz(12) == 1\nassert     fizz_buzz(11) == 0\nassert     fizz_buzz(5) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert fizz_buzz(3) == 1\nassert fizz_buzz(10) == 2\nassert fizz_buzz(15) == 3\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fizz_buzz(15) == 3\nassert     fizz_buzz(7) == 3\nassert     fizz_buzz(16) == 5\nassert     fizz_buzz(13) == 5\nassert     fizz_buzz(100) == 11\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert fizz_buzz(15) == 5\n    assert fizz_buzz(13) == 1\n    assert fizz_buzz(7) == 2\n    "
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nfizz_buzz(100)\n\n\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_even([4, 1, 4, 1, 4]) == [1, 1, 1, 4, 4]\nassert     sort_even([3, 2, 3, 2, 2, 2]) == [2, 2, 2, 3, 3, 3]\nassert     sort_even([2, 4, 1]) == [1, 2, 4]\nassert     sort_even([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     sort_even([2, 1]) == [1, 2]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_even([]) == []\nassert     sort_even([1]) == [1]\nassert     sort_even([1,2]) == [1,2]\nassert     sort_even([1,3,2]) == [1,2,3]\nassert     sort_even([1,3,2,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_even([2,4,6,8,10]) ==     [2,4,6,8,10]\nassert     sort_even([1,2,3,4,5,6]) ==     [1,2,3,4,5,6]\nassert     sort_even([3,4,5,6,7,8,9]) ==     [3,4,5,6,7,8,9]\nassert     sort_even([2,3,4,5,6,7,8]) ==     [2,3,4,5,6,7,8]\nassert     sort_even([]) ==     []\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_even([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,8,2,4,6,9]\nassert     sort_even([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_even([]) == []\nassert     sort_even([1,2,3,4]) == [[1,2,3,4],[2,4,3,1],[3,4,1,2],[4,3,2,1]]\nassert     sort_even([-3,2,1,3]) == [[-3,2,3,1],[2,3,1,-3],[1,-3,3,-2],[3,1,-2,-3]]\nassert     sort_even([1,2,3]) == [[1,2,3],[2,3,1]]\nassert     sort_even([3,1,2]) == [[1,2,3],[2,3,1]]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decode_cyclic(encode_cyclic(\"GEEK\")) == \"GEEK\"\nassert     decode_cyclic(encode_cyclic(\"HELLO\")) == \"HELLO\"\nassert     decode_cyclic(encode_cyclic(\"HOWEVER\")) == \"HOWEVER\"\nassert     decode_cyclic(encode_cyclic(\"ONE\")) == \"ONE\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abcd\")) == \"abcd\"\nassert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"ab\")) == \"ab\"\nassert     decode_cyclic(encode_cyclic(\"ac\")) == \"ac\"\nassert     decode_cyclic(encode_cyclic(\"ad\")) == \"ad\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decode_cyclic(encode_cyclic(\"ABABA\")) == \"ABABA\"\nassert     decode_cyclic(encode_cyclic(\"AAABAAA\")) == \"AAAAAAA\"\nassert     decode_cyclic(encode_cyclic(\"AAAAABA\")) == \"ABABA\"\nassert     decode_cyclic(encode_cyclic(\"BBBAAAB\")) == \"BBBAAAB\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"ABC\")) == \"ABC\"\nassert     decode_cyclic(encode_cyclic(\"ABCD\")) == \"ABCD\"\nassert     decode_cyclic(encode_cyclic(\"ABCDBCD\")) == \"ABCDBCD\"\nassert     decode_cyclic(encode_cyclic(\"ABCDBCDBCDDBCCDDDDDDDD\")) == \"ABCDBCDBCDDBCCDDDDDDDD\""
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decode_cyclic(encode_cyclic(\"ABCDABC\")) == \"ABCDABC\"\nassert     decode_cyclic(encode_cyclic(\"ABABAB\")) == \"ABABAB\"\nassert     decode_cyclic(encode_cyclic(\"ABABAB\")) == \"ABABAB\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    # test encode_cyclic\n    assert encode_cyclic(\"abc\") == \"bbc\"\n    assert encode_cyclic(\"abc\") == \"bbc\"\n    assert encode_cyclic(\"abcdefg\") == \"bcdefga\"\n    "
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef encode_rot13(s: str):\n    \"\"\"\n    rot13 algorithm.\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    return \"\".join([alphabet[(ord(c) + 13 - alphabet.index(i)) % len(alphabet)] if c.isalpha() else c for c in s])\n\n\ndef decode_rot13(s: str):\n    \"\"\"\n    takes as input encoded string encoded with encode_rot13 function. Returns decoded string.\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    return \"\".join([alphabet[(ord(c) - 13 + alphabet.index(i)) % len(alphabet)] if c.isalpha() else c for c in s])\n\n\nif __name__ == '__main__':\n    s = \"The quick brown fox jumps over the lazy dog.\"\n    print(encode_rot13(s))\n    print(decode_rot13(encode_rot13(s)))"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encode_cyclic(\"ABC\") == \"ABAB\"\nassert     encode_cyclic(\"ABCD\") == \"ABAB\"\nassert     encode_cyclic(\"ABCDEF\") == \"ABABCDABCEF\"\nassert     encode_cyclic(\"ABCDEFGHIJ\") == \"ABABCDABCEFGHIJ\"\nassert     encode_cyclic(\"ABCDEFGHIJKLM\") == \"ABABCDABCEFGHIJKLM\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decode_cyclic(encode_cyclic(\"CODEC\")) == \"CODE\"\nassert     decode_cyclic(encode_cyclic(\"CODEC\")) == \"CODE\"\nassert     decode_cyclic(encode_cyclic(\"CODEC\")) == \"CODE\"\nassert     decode_cyclic(encode_cyclic(\"CODE\")) == \"CODEC\"\nassert     decode_cyclic(encode_cyclic(\"CODE\")) == \"CODEC\"\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(prime_fib(1)) == 2, \"Wrong prime_fib: %s\" % (prime_fib(1))\nprint(prime_fib(2)) == 3, \"Wrong prime_fib: %s\" % (prime_fib(2))\nprint(prime_fib(3)) == 5, \"Wrong prime_fib: %s\" % (prime_fib(3))\n\nprint(prime_fib(10))"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"You passed all the tests\")\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prime_fib(7) == 5 and prime_fib(13) == 11 and prime_fib(19) == 17\n\nprint(prime_fib(19)"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prime_fib(0) == 2, \"prime_fib(0) == 2 should be True\"\nassert     prime_fib(1) == 3, \"prime_fib(1) == 3 should be True\"\nassert     prime_fib(2) == 5, \"prime_fib(2) == 5 should be True\"\nassert     prime_fib(3) == 7, \"prime_fib(3) == 7 should be True\"\nassert     prime_fib(4) == 11, \"prime_fib(4) == 11 should be True\"\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([-4, -3, -2, -1, 0, 1, 2, 3, 4]) == True, \"Wrong\"\nassert     triples_sum_to_zero([-4, -3, -2, -1, -5, -6, -7, -8, -9]) == False, \"Wrong\"\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([-3, -2, -1, 0, 1, 2, 3]) == False\nassert     triples_sum_to_zero([0, 2, 3]) == True\nassert     triples_sum_to_zero([0, 1, -1]) == True\nassert     triples_sum_to_zero([0, 2, 2]) == False\nassert     triples_sum_to_zero([0, 2, -2]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([-1, 0, 1, 2, -1, -4]) == True\nassert     triples_sum_to_zero([0, -1, 2, -3, 1]) == False\nassert     triples_sum_to_zero([-3, 0, 1, -2]) == True\n\nprint('correct')\nprint('')\n\ndef is_palindrome(l: list):\n    \"\"\"\n    is_palindrome takes a list of integers as an input.\n    it returns True if the list is a palindrome, and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([1, 1, 2, 3, -2, -3]) == True\nassert     triples_sum_to_zero([-1, 1, -2, 3, -2, -3]) == False\nassert     triples_sum_to_zero([-1, 1, -2, -3, -2, -3]) == True\nassert     triples_sum_to_zero([-1, -1, -2, -3, -2, -3]) == False\nassert     triples_sum_to_zero([-1, 1, -2, 3, -2, -3]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triples_sum_to_zero([2, -3, 1, 0, -2, 2, 4, 2, -5, 2])\nassert     triples_sum_to_zero([-4, -2, -1, 1, 2])\nassert     triples_sum_to_zero([-3, -1, 2, -2, 3, -4])\nassert not triples_sum_to_zero([1, 1, 1, 1])\nassert not triples_sum_to_zero([1, 2, 2, 4])\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert         car_race_collision(4) == 3\nassert         car_race_collision(5) == 5\nassert         car_race_collision(8) == 6\nassert         car_race_collision(20) == 18\nassert         car_race_collision(30) == 72\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     car_race_collision(1) == 1, '1st case fails'\nassert     car_race_collision(2) == 0, '2nd case fails'\nassert     car_race_collision(3) == 1, '3rd case fails'\nassert     car_race_collision(4) == 1, '4th case fails'\nassert     car_race_collision(5) == 1, '5th case fails'\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     car_race_collision(2) == 2, \"The test is incorrect!\"\nassert     car_race_collision(3) == 1, \"The test is incorrect!\"\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     car_race_collision(4) == 1\nassert car_race_collision(10) == 3\nassert car_race_collision(100) == 4\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import sys\n    import io\n    def readlines():\n        for line in io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8'):\n            yield line.strip('\\n')\n\n    lines = readlines()\n    while True:\n        try:\n            line = next(lines)\n            n = int(line);\n\n            ret = car_race_collision(n)\n\n            out = str(ret)\n            print(out)\n        except StopIteration:\n            break"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     car_race_collision(n=2) == 0, 'Wrong output'\nassert     car_race_collision(n=4) == 3, 'Wrong output'\nassert     car_race_collision(n=10) == 9, 'Wrong output'\nassert     car_race_collision(n=20) == 36, 'Wrong output'\nassert     car_race_collision(n=40) == 144, 'Wrong output'\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert car_race_collision(3) == 2\nassert car_race_collision(5) == 3\n\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(car_race_collision(n)"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([2, 1]) == [3, 2]\nassert     incr_list([2, 1, 3]) == [3, 2, 4]\nassert     incr_list([2, 1, 3, 5]) == [3, 2, 4, 6]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nincr_list([1,2,3]) == [2,3,4]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef mult_list(l1: list, l2: list):\n    \"\"\"Return list resulting from multiplying 2 lists element-wise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1, 2]) == [2, 3]\nassert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     incr_list([0, 1, 2]) == [1, 2, 3]\nassert     incr_list([0, -1, 2]) == [1, 0, 3]\nassert     incr_list([-1, 0, 1]) == [-1, 1, 2]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1,2,3]) == [2,3,4]\n\ndef incr_list2(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     incr_list([0]) == [1]\nassert     incr_list([0, 2]) == [1, 3]\nassert     incr_list([1, 2]) == [2, 3]\nassert     incr_list([0, 0, 1]) == [1, 2, 3]\n\n\ndef flatten(l: list) -> list:\n    \"\"\"Return a flattened version of l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not \nassert not\n\n\n\ndef incr_dict(d: dict):\n    \"\"\"Return dictionary with key-value pairs incremented by 1.\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sum_list(l: list):\n    \"\"\"Return sum of all elements in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(pairs_sum_to_zero([3, 6, -1, 2, 2]))\nassert not pairs_sum_to_zero([3, 6, -1, -2, -2])\nassert pairs_sum_to_zero([1, 1])\nassert pairs_sum_to_zero([1, 2, 3, -1, -2, -3])\nassert pairs_sum_to_zero([0, -1])\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pairs_sum_to_zero([1,2,3,-4])\nassert     pairs_sum_to_zero([-2,1,3,4])\nassert     pairs_sum_to_zero([-2,4,3,-1]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pairs_sum_to_zero([1, 4, 4, -5, 1, 0]) == True, 'Expected True'\nassert     pairs_sum_to_zero([-5, -1, -1, 4, 3, 2]) == False, 'Expected False'\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([1,2,3]) == False\nassert     pairs_sum_to_zero([-1,-2,-3]) == True\nassert pairs_sum_to_zero([0,2,4]) == False\nassert pairs_sum_to_zero([0,-2,-4]) == False\n\nprint(\"All test cases passed\")\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([-1, 1, 0, 3, -2]) == True\nassert     pairs_sum_to_zero([0, 0]) == True\nassert     pairs_sum_to_zero([-1, 0]) == False\nassert     pairs_sum_to_zero([1]) == True\nassert     pairs_sum_to_zero([-2]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([1, 2, 4, 8, 0]) == True\nassert     pairs_sum_to_zero([1, 2, 0]) == False\nassert     pairs_sum_to_zero([1]) == True\nassert     pairs_sum_to_zero([]) == False\nassert pairs_sum_to_zero([1, 2, 4, 8, 6, -1]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([4,1,-3,2,-2,2]) == True\nassert     pairs_sum_to_zero([1,1,1,1,1]) == False\nassert     pairs_sum_to_zero([-2,-3,4,1,-5,2]) == True\nassert     pairs_sum_to_zero([-1,-1,1,-1,1]) == False\nassert     pairs_sum_to_zero([3,1,2,-3,4,-1,2]) == True\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     change_base(11,2) == '11010111'\nassert     change_base(20,2) == '110111'\nassert     change_base(0,2) == '0'\nassert     change_base(3,2) == '11'\nassert     change_base(4,2) == '100'\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_base(0, 2)    ==    \"0\"\nassert     change_base(1, 2)    ==    \"1\"\nassert     change_base(10, 2)    ==    \"A\"\nassert     change_base(100, 2)    ==    \"D\"\nassert     change_base(1000, 2)    ==    \"Z\"\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_base(7,2) == '1.4'\nassert     change_base(7,3) == '1.3'\nassert     change_base(7,4) == '1.2'\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_base(5, 3) == '35'\nassert     change_base(5, 5) == '5'\nassert     change_base(5, 2) == '25'\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     change_base(1, 2) == '11'\nassert     change_base(7, 2) == '11'\nassert     change_base(5, 2) == '101'\nassert     change_base(11, 2) == '11'\nassert     change_base(7, 10) == '2'\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert change_base(100, 2) == \"20\"\nassert change_base(100, 8) == \"5\"\nassert change_base(100, 10) == \"10\"\nassert change_base(100, 16) == \"A\"\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_base(3, 2) == \"33\"\nassert     change_base(3, 3) == \"333\"\nassert     change_base(3, 4) == \"3333\"\nassert     change_base(3, 5) == \"3333\"\nassert     change_base(3, 6) == \"3333\"\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_base(10,2) == '20', \\\n    \"incorrect output for change_base(10,2)\"\nassert     change_base(27,16) == '7D', \\\n    \"incorrect output for change_base(27,16)\"\nassert     change_base(28,16) == '20', \\\n    \"incorrect output for change_base(28,16)\"\nassert     change_base(18,3) == '01', \\\n    \"incorrect output for change_base(18,3)\"\nassert     change_base(63,8) == '39', \\\n    \"incorrect output for change_base(63,8)\"\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     triangle_area(1,1)==1\nassert     triangle_area(5,3)==3\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(1, 1) == 1\nassert     triangle_area(0, 1) == 0\nassert     triangle_area(1, 0) == 0\nassert     triangle_area(0, 0) == 0\nassert     triangle_area(10, 0) == 0\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(triangle_area(1, 2))\nprint(triangle_area(10, 20))\nprint(triangle_area(10, 2))\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triangle_area(3, 1) == 3.0\nassert     triangle_area(4, 2) == 6.0\nassert     triangle_area(5, 3) == 10.0\nassert     triangle_area(10, 5) == 50.0\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('Tests for triangle_area:')\nprint(f'{triangle_area(1, 1) =}')\nassert triangle_area(1, 1) == 0, 'Triangle area cannot be 0.'\nprint(f'{triangle_area(3, 4) =}')\nassert triangle_area(3, 4) == 2, 'Triangle area is incorrect.'\nprint(f'{triangle_area(4, 5) =}')\nassert triangle_area(4, 5) == 1.5, 'Triangle area is incorrect.'\nprint(f'{triangle_area(5, 6) =}')\nassert triangle_area(5, 6) == 2.5, 'Triangle area is incorrect.'\nprint(f'{triangle_area(6, 7) =}')\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     triangle_area(4, 5) == 20.0\nassert     triangle_area(5, 5) == 10.0\nassert     triangle_area(1, 2) == 1.0\nassert     triangle_area(1, 1) == 1.0\n\ndef nearest_hexagon_radius(c, side_length):\n    \"\"\"Given a side length and a center, return the nearest hexagon.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \"\"\"\n    Usage:\n        python3 -m fib4\n        python3 -m fib4 2\n        python3 -m fib4 7\n    \"\"\"\n    import sys\n    if len(sys.argv) >= 2:\n        print(fib4(int(sys.argv[1])))\n    else:\n        print(fib4(6))\n        print(fib4(7))\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fib4(0) == 0, \"The first value of fib4 should be 0\"\nassert fib4(1) == 0, \"The second value of fib4 should be 0\"\nassert fib4(2) == 1, \"The third value of fib4 should be 1\"\nassert fib4(3) == 0, \"The fourth value of fib4 should be 0\"\nassert fib4(4) == 2, \"The fifth value of fib4 should be 2\"\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fib4(5) == 2\nassert     fib4(4) == 0\nassert     fib4(10) == 26\nassert     fib4(15) == 0\nassert     fib4(20) == 48\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfib4(5) == 0, \"Wrong result\"\nprint(f\"Your function fib4(5) result is: {fib4(5)}\")\n\nassert fib4(6) == 1, \"Wrong result\"\nprint(f\"Your function fib4(6) result is: {fib4(6)}\")\n\nassert fib4(7) == 2, \"Wrong result\"\nprint(f\"Your function fib4(7) result is: {fib4(7)}\")\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(median([1,2,3,4,5,6,7,8,9]))\nassert median([1,2,3,4,5,6,7,8,9]) == 4, \"Wrong median!\"\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\nassert     median([1, 2, 3, 4, 5]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 5.5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median([1, 2, 3, 4]) == 2\nassert     median([1, 2, 4, 5]) == 2.5\nassert     median([1, 2, 3]) == 2\nassert     median([1, 2, 3, 4]) == 2.5\nassert     median([1, 2, 3, 4, 5]) == 2.5\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert     median([10, 5, 20, 50]) == 30\nassert     median([1, 2, 3, 4, 5]) == 4\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert median([]) == None, \"Empty list\"\nassert median([1]) == 1, \"One element\"\nassert median([1,2]) == 2, \"Two elements\"\nassert median([1,2,3]) == 2.5, \"Three elements\"\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef mean(l: list) -> float:\n    \"\"\"Return the mean of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_palindrome(\"abab\") == True\nassert is_palindrome(\"a\") == False\nassert is_palindrome(\"\") == True\nassert is_palindrome(\"a\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nis_palindrome('racecar')\nis_palindrome('a')\n\ndef is_palindrome_optimized(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    left, right = 0, len(text) - 1\n    while left < right:\n        while not text[left].isalpha() and left < right:\n            left += 1\n        while not text[right].isalpha() and left < right:\n            right -= 1\n        if text[left].lower()!= text[right].lower():\n            return False\n        left += 1\n        right -= 1\n    return True\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_palindrome('anna') is True\nassert     is_palindrome('anna') is True\nassert     is_palindrome('anna') is True\nassert     is_palindrome('anna') is True\nassert     is_palindrome('anna') is True\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"Never odd or even\") == True\nassert is_palindrome(\"race car\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # tests\n    assert is_palindrome('a') == True\n    assert is_palindrome('ab') == True\n    assert is_palindrome('aba') == True\n    "
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_palindrome('abc')\nassert is_palindrome('kayak')\nassert not is_palindrome('kayakk')\n\n\ndef has_double(text: str):\n    \"\"\"\n    Checks if given string has two same consecutive characters\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not is_palindrome(\"\")\nassert not is_palindrome(\"a\")\nassert is_palindrome(\"abba\")\nassert is_palindrome(\"madam\")\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_palindrome('') == False, 'An empty string must return False'\nassert     is_palindrome('a') == False, 'A string must contain only letters'\nassert     is_palindrome('Able was I, ere I saw Elba') == False, 'Ignoring case must result in False'\nassert     is_palindrome('Able was I, ere I saw Elba') == True, 'Ignoring case must result in True'\nassert     is_palindrome('Elba') == True, 'One letter must result in True'\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_palindrome(\"\") == True\nassert is_palindrome(\"a\") == False\nassert is_palindrome(\"A\") == True\nassert is_palindrome(\"madam\") == True\nassert is_palindrome(\"not palindrome\") == False\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef prime_factorization(n: int):\n    \"\"\"Return a tuple of prime factors of n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef power(x: int, y: int):\n    \"\"\"Return x^y.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef coprime(n: int, p: int):\n    \"\"\"Return True if n and p are coprime.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef pow(a: int, p: int, m: int):\n    \"\"\"Return pow(a, p) modulo m.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     modp(0, 10) == 0\nassert     modp(1, 10) == 10\nassert     modp(2, 10) == 0\nassert     modp(3, 10) == 10\nassert     modp(4, 10) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     encode_shift(\"bobby\") == \"syukz\"\nassert     decode_shift(\"syukz\") == \"bobby\"\n\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     encode_shift(\"\") == \"\"\nassert     encode_shift(\"a\") == \"a\"\nassert     encode_shift(\"aaaaa\") == \"aaa\"\nassert     encode_shift(\"azAZ\") == \"azAZ\"\nassert     encode_shift(\"aAaAA\") == \"aaAAa\"\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert encode_shift(\"abc\") == \"cde\"\n    assert encode_shift(\"zyx\") == \"zyx\"\n    assert encode_shift(\"zyx\") == \"zyx\"\n    "
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encode_shift(\"abcdef\") == \"bcdefg\"\nassert     encode_shift(\"abcdef\") == \"bcdefg\"\nassert     encode_shift(\"abcdef\") == \"bcdefg\"\nassert     encode_shift(\"abcdef\") == \"bcdefg\"\nassert     encode_shift(\"abcdef\") == \"bcdefg\"\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     encode_shift(\"abc\") == \"cab\"\nassert     encode_shift(\"\") == \"\"\nassert     encode_shift(\"a\") == \"a\"\nassert     encode_shift(\"AAA\") == \"AAA\"\nassert     encode_shift(\"XYZ\") == \"XYZ\"\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     encode_shift(\"abc\") == \"cba\", \"Should return cba\"\nassert     encode_shift(\"\") == \"\", \"Should return \"\n\n\nif __name__ == \"__main__\":\n    pass"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decode_shift(\"eb\") == \"a\"\nassert     decode_shift(\"ca\") == \"a\"\nassert     decode_shift(\"ce\") == \"c\"\nassert     decode_shift(\"d\") == \"d\"\nassert     decode_shift(\"cce\") == \"c\"\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     \"ebab\" == decode_shift(\"aebabcde\")\nassert \"aebbcde\" == decode_shift(\"abcdefgh\")\nassert \"abcdefgh\" == decode_shift(\"abcabcabcdef\")\n\n\ndef encode_roman(s: str):\n    \"\"\"\n    takes as input string s. Returns encoded string by converting each letter in string\n    into roman numeral.\n    \"\"\"\n    return \"\".join([chr((ord(ch) - ord(\"a\") + 1) % 10) if ord(ch) >= ord(\"a\") else chr((ord(ch) - ord(\"a\") + 3) % 10) for ch in s])\n\ndef decode_roman(s: str):\n    \"\"\"\n    takes as input encoded string s. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) - ord(\"a\") + 10) % 10) if ord(ch) >= ord(\"a\") else chr((ord(ch) - ord(\"a\") + 3) % 10) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_vowels('hello') == 'hllo'\nassert     remove_vowels('a') == 'a'\nassert     remove_vowels('h') == 'h'\nassert     remove_vowels('1') == '1'\nassert     remove_vowels('hi') == 'h'\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_vowels(\"a\") == \"a\"\nassert     remove_vowels(\"A\") == \"A\"\nassert     remove_vowels(\"B\") == \"B\"\nassert     remove_vowels(\"b\") == \"b\"\nassert     remove_vowels(\"\") == \"\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_vowels('Hello world!') == 'ell oror!', 'Fails'\nassert     remove_vowels('Happy birthday!') == 'abgty!', 'Fails'\nassert     remove_vowels('Why are you asking?') == 'why reaso?', 'Fails'\nassert     remove_vowels('The number is 15') == '55', 'Fails'\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    result = \"\"\n    for char in text:\n        if char not in \"aeiouAEIOU\":\n            result += char\n    return result\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"a\") == \"\"\nassert     remove_vowels(\"A\") == \"\"\nassert     remove_vowels(\"aBc\") == \"bc\"\nassert     remove_vowels(\"aaBc\") == \"bc\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_vowels(\"I'm learning about strings\") == \"I'm learning about string\", \"Wrong solution\"\nassert     remove_vowels(\"An example\") == \"An example\", \"Wrong solution\"\nassert     remove_vowels(\"I\") == \"I\", \"Wrong solution\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_vowels('hello world') == 'hello'\nassert     remove_vowels('hello world!') == 'hello'\nassert     remove_vowels('hello world!'.lower()) == 'hello'\nassert     remove_vowels('hello world!'.upper()) == 'hello'\nassert     remove_vowels('hello world!') == 'hello'\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    pass\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    pass\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    pass\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_vowels(\"hello\") == \"hll\"\nassert     remove_vowels(\"world\") == \"dwr\"\nassert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"a\") == \"a\"\nassert     remove_vowels(\"a b\") == \"ab\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_vowels('this is a test') == 'ti si s t et'\nassert     remove_vowels('it is a test') == 'ti si s t et'\nassert     remove_vowels('hello world') == 'hellu worl'\nassert     remove_vowels('hello how are you') == 'helo worl y ov'\nassert     remove_vowels('hello HOW are you') == 'hellu WORL y ov'\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"Test case 1: Pass\")\nprint(\"Test case 2: Fail\")"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     below_threshold([0, 1, 2], 1) == True\nassert     below_threshold([10, 15, 20, 25], 30) == False\nassert     below_threshold([10, 15, 20, 25, 40], 30) == False\nassert     below_threshold([1, 1, 1, 1, 1], 1) == True\nassert     below_threshold([1, 0, 1, 0, 1], 1) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert below_threshold([5,1,2,3,4], 5) == True\nassert below_threshold([10,6,7,8,9], 6) == False\nassert below_threshold([6,3,1,3,4], 7) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     below_threshold([4, 3, 6, 1, 9], 3) == True\nassert     below_threshold([4, 3, 6, 1, 9], 5) == False\nassert     below_threshold([], 4) == True\nassert     below_threshold([1], 1) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_function(test_case):\n    \"\"\"\n    Pass the test case as parameter.\n    \"\"\"\n    threshold = test_case[0]\n    l = test_case[1]\n    solution = test_case[2]\n    output = below_threshold(l, threshold)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     below_threshold([1,2,3,4], 5) == True\nassert     below_threshold([5,1,4,3,2,2], 6) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     below_threshold([20, 18, 12], 18) == True\nassert     below_threshold([10, 10, 11], 11) == False\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef factorial(x: int):\n    \"\"\"Calculate the factorial of number x\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add(1, 2) == 3\nassert     add(-1, 2) == 1\nassert     add(2, 2) == 4\nassert     add(3.3, 2.2) == 5.5\nassert     add(3.3, -2.2) == 1.5\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add(2, 3) == 5, 'add(2,3) is wrong!'\nassert     add(4, 2) == 6, 'add(4,2) is wrong!'\nassert     add(2, 2) == 4, 'add(2,2) is wrong!'\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert add(1,2) == 3, \"Error! Wrong answer\"\nassert add(2,2) == 4, \"Error! Wrong answer\"\nassert add(2,3) == 5, \"Error! Wrong answer\"\nassert add(3,3) == 6, \"Error! Wrong answer\"\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert add(1, 2) == 3\n\n\ndef add(a: int, b: int):\n    \"\"\"Add two numbers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add(1,1) == 2\nassert     add(3,4) == 7\nassert     add(10,10) == 20\nassert     add(10,20) == 30\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add(1, 2) == 3\nassert     add(1.2, 3) == 5.4\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add(2, 2) == 4\nassert add(1, 1) == 2\nassert add(1, 0) == 1\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add(1, 1) == 2\nassert     add(2, 3) == 5\nassert     add(1, 2) == 3\nassert     add(2, 2) == 4\nassert     add(1, 2) == 3\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert same_chars(\"coding\", \"coding\") == True\nassert same_chars(\"coding\", \"coding\") == True\nassert same_chars(\"coding\", \"coding2\") == False\nassert same_chars(\"aaaa\", \"aaaa\") == True\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     same_chars(\"Possible\",\"Possible\")\nassert     not same_chars(\"Possible\",\"Possible\")\nassert     same_chars(\"Possible\",\"Possible\")\nassert     not same_chars(\"Possible\",\"Possible1\")\nassert     same_chars(\"Possible\",\"Possible\")\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     same_chars('abc', 'abc') == True, 'No'\nassert     same_chars('abc', 'a') == False, 'No'\nassert     same_chars('abc', 'b') == False, 'No'\nassert     same_chars('abc', 'c') == False, 'No'\nassert     same_chars('abc', 'd') == False, 'No'\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     same_chars(\"hello\", \"hello\")\nassert     same_chars(\"hello\", \"hello world\")\nassert     same_chars(\"hello world\", \"hello\") == False\nassert     same_chars(\"hello world\", \"hello world\") == False\nassert     same_chars(\"a\", \"b\")\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     same_chars('cat', 'dog') == True\nassert     same_chars('cat', 'cat') == True\nassert     same_chars('cat', 'catcat') == True\nassert     same_chars('cat', 'dog') == False\nassert     same_chars('cat', 'catcatcat') == False\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     same_chars(\"peter\", \"peter\") == True\nassert     same_chars(\"peter\", \"peter\") == True\nassert     same_chars(\"peter\", \"peter\") == True\nassert     same_chars(\"peter\", \"peter\") == True\n\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     same_chars(\"hello\", \"hello\")\nassert     same_chars(\"dog\", \"cat\")\nassert     same_chars(\"a\", \"a\")\nassert     same_chars(\"\", \"\")\nassert not same_chars(\"\", \"hello\")\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     same_chars(\"lunch\", \"lunar\") == True\nassert     same_chars(\"car\", \"cat\") == False\nassert     same_chars(\"horse\", \"ros\") == False\nassert     same_chars(\"deer\", \"deer\") == True\nassert     same_chars(\"boots\", \"boot\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     same_chars('aac', 'ac') == True\nassert same_chars('aac', 'ac') == True\nassert same_chars('aac', 'bc') == False\nassert same_chars('aac', 'ac') == True\nassert same_chars('aaa', 'aac') == False\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fib(1) == 0\nassert fib(2) == 1\nassert fib(3) == 1\nassert fib(4) == 2\nassert fib(5) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(fib(5))\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fib(3) == 2\nassert     fib(7) == 13\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    import sys\n    from optparse import OptionParser\n    from timeit import default_timer as timer\n    \n    parser = OptionParser(usage='''\\\n    %prog [options]\n    \n    Computes the n-th Fibonacci number.\n    ''')\n\n    parser.add_option(\"-n\", dest='n', default=100, type='int',\n                      help='The n-th Fibonacci number to compute')\n\n    (options, args) = parser.parse_args()\n\n    n = options.n\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\nassert fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(fib(8))"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<()>\") == True\nassert correct_bracketing(\"<{()>\") == False\nassert correct_bracketing(\"<[(])>\") == False\nassert correct_bracketing(\"<(<])>\") == False\nassert correct_bracketing(\"<(()\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert correct_bracketing(\"<\")\nassert correct_bracketing(\"<a\")\nassert not correct_bracketing(\"<a)\")\nassert correct_bracketing(\"<a><a>\")\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<()>\") == True, \"Error, see test_brackets\"\nassert     correct_bracketing(\"<([])>\") == True, \"Error, see test_brackets\"\nassert     correct_bracketing(\"<{[]}>\") == True, \"Error, see test_brackets\"\nassert     correct_bracketing(\"<(>\") == False, \"Error, see test_brackets\"\nassert     correct_bracketing(\"<[]>\") == False, \"Error, see test_brackets\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncorrect_bracketing(\"<hello>\") == True\ncorrect_bracketing(\"(hi<\") == False\ncorrect_bracketing(\"hi<hi\") == True\ncorrect_bracketing(\"hi<hi)\") == False\ncorrect_bracketing(\"hi<hi)<hi\") == True\ncorrect_bracketing(\"hi<hi(hi)\") == False\ncorrect_bracketing(\"hi<hi)<hi)hi\") == False\ncorrect_bracketing(\"hi<hi)<hi)hi)hi)hi)\") == True\ncorrect_bracketing(\"hi<hi(hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)h"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"<hello>\") == False\nassert     correct_bracketing(\"<hello> \") == True\nassert     correct_bracketing(\"<hello> <world>\") == True\nassert     correct_bracketing(\"<hello> <world)\") == False\nassert     correct_bracketing(\"<hello> (\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"<\") is True\nassert     correct_bracketing(\"<\") is False\nassert     correct_bracketing(\"<</a><</a>\") is False\nassert     correct_bracketing(\"<<<<<(@)>>>\") is False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"([]<>{}\") == True\nassert     correct_bracketing(\"[<>]\") == False\nassert     correct_bracketing(\"([]<>{}\") == False\nassert     correct_bracketing(\"[])\") == False\n\ndef check_brackets(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if brackets is a string of \"<>\" or \"<[]>\".\n    \"\"\"\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"()\") == True,    \"Test 1: True\"\nassert     correct_bracketing(\"(]\") == False,    \"Test 2: False\"\nassert     correct_bracketing(\"([)]\") == False,    \"Test 3: False\"\nassert     correct_bracketing(\"[()\") == False,    \"Test 4: False\"\nassert     correct_bracketing(\"([)]\") == False,    \"Test 5: False\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<{()}>\") == True\nassert     correct_bracketing(\"<{[][]\") == False\nassert     correct_bracketing(\"<{[][]}>\") == False\nassert     correct_bracketing(\"<{[][]>\") == False\nassert     correct_bracketing(\"<{[][]<\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<()\")\nassert     correct_bracketing(\"<(])\")\nassert     correct_bracketing(\"<(((>\")\nassert     correct_bracketing(\"<(>)\")\nassert not correct_bracketing(\"(<(>)\")\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     monotonic([1,2,3,4,5]) == False\nassert     monotonic([1,3,2,5,4]) == True\nassert     monotonic([-1, -2, -3, -4, -5]) == False\nassert     monotonic([1,2,3,4,5,6,7]) == True\nassert     monotonic([1,2,3,4,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     monotonic([1, 2, 3, 2, 1]) == True\nassert     monotonic([1, 2, 3, 2, 1, 2]) == True\nassert     monotonic([1, 2, 3, 1, 1, 2]) == False\nassert     monotonic([1, 2, 3, 2, 1, 2, 3]) == True\nassert     monotonic([1, 2, 3, 2, 1, 2, 2]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     monotonic([1, 3, 5, 7, 9, 10, 12, 14, 15, 16]) == True\nassert     monotonic([1, 3, 5, 7, 9, 10, 12, 13, 14, 16]) == False\nassert     monotonic([1, 3, 5, 7, 9, 10, 12, 15, 16]) == False\nassert     monotonic([1, 3, 5, 7, 9, 10, 12, 14, 13, 16]) == False\nassert     monotonic([1, 3, 5, 7, 9, 10, 12, 14, 15, 16]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     monotonic([1,2,3]) is True\nassert     monotonic([1,3,2]) is False\nassert     monotonic([2,1,3]) is False\nassert     monotonic([1,2,3,4]) is False\nassert     monotonic([1,2,3,4,5]) is False\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     monotonic([-1, -2, -3, -4, -5])\nassert     monotonic([-2, -2, -1, -3, -3])\nassert     monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     monotonic([0, 1, 2]) == False \nassert     monotonic([1, 1, 1]) == True \nassert     monotonic([1, 1, 0]) == False \nassert     monotonic([-1, -1, -1]) == False \nassert     monotonic([0, -1, -2]) == False \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     monotonic([2, 4, 6, 8])\nassert     not monotonic([2, 3, 6, 8])\nassert     monotonic([0, 9, 1, 4, 3])\nassert     not monotonic([0, 9, 1, 4, 2])\nassert     monotonic([5, 4, 7, 5, 3])\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common([1,2,3,4],    [1,2,3,5]) == [1,2,3]\nassert common([1,1,2,2,3,3,4,4,4,4],    [1,2,3,4]) == [1,2,3,4]\nassert common([1,2,3,4],    [1,2,3,5]) == []\nassert common([],    [1,2,3,4]) == []\nassert common([1,2,3],    [1,2,3,4]) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common([1,2,3], [2,3,4]) == []\nassert     common([1,2,3], [1,2,3]) == [1,2,3]\nassert     common([1,2,3], [1,2,3,4]) == [1,2,3]\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common([], []) == []\nassert     common([1, 2, 3], [2, 1, 3]) == [1, 2]\nassert     common([], [1, 2, 3]) == []\nassert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert     common([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3]\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common([0,1,2,3,4,5,6],\n                [0,1,2,3,4,5,6]) == [0, 1, 2, 3, 4, 5, 6], \"incorrect\"\nassert     common([0,1,2,3,4,5,6],\n                [0,1,2,3,4,5,7]) == [], \"incorrect\"\nassert     common([0,1,2,3,4,5,6],\n                [0,1,2,3,4,5,6]) == [0, 1, 2, 3, 4, 5, 6], \"incorrect\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common([], []) == []\nassert     common([1], []) == []\nassert     common([], [1]) == []\nassert     common([1, 2], []) == []\nassert     common([1, 2], [1]) == [1]\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common([1,2,3,4,5], [1,2,3,4,5]) == [1,2,3,4,5]\nassert     common([1,2,3,4,5], [1,2,3,4,5]) == [1,2,3,4,5]\nassert     common([1,2,3,4], [1,2,3,4,5]) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common([1,2,3], [1,2,3]) == [1,2]\nassert common([1,2,3], [1,2,4]) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     common([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8]) == []\nassert     common([1, 2, 3, 4, 5, 6, 7, 8], []) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) > 1:\n        n = int(sys.argv[1])\n        print(largest_prime_factor(n))\n    else:\n        print('Usage: {} number'.format(sys.argv[0]))"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_prime_factor(5) == 5, 'Should be 5'\nassert     largest_prime_factor(2) == 2, 'Should be 2'\nassert     largest_prime_factor(8) == 2, 'Should be 2'\nassert     largest_prime_factor(3) == 3, 'Should be 3'\nassert     largest_prime_factor(13) == 2, 'Should be 2'\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(10) == 5\nassert     largest_prime_factor(12) == 3\nassert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(14) == 2\nassert     largest_prime_factor(1) == 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(13) == 13\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    \"\"\"\n    pass\n\ndef factors(n: int):\n    \"\"\"Return all the prime factors of n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_prime_factor(1) == 1\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(5) == 5\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_prime_factor(6) == 3\nassert     largest_prime_factor(32) == 5\nassert     largest_prime_factor(37) == 5\nassert     largest_prime_factor(42) == 5\nassert     largest_prime_factor(47) == 5\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert largest_prime_factor(2) == 2\nassert largest_prime_factor(3) == 3\nassert largest_prime_factor(4) == 2\nassert largest_prime_factor(5) == 5\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_prime_factor(1) == 1\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(5) == 5\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sum_to_n(1) == 0\nassert sum_to_n(2) == 1\nassert sum_to_n(5) == 15\nassert sum_to_n(10) == 55\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsum_to_n(4) == 1 + 2 + 3 + 4 == 15, \"Not what we expected.\"\nsum_to_n(1) == 1 == 1, \"Not what we expected.\"\n\ndef quadratic(a: float, b: float, c: float) -> float:\n    \"\"\"quadratic is a function that calculates the roots of a quadratic.\n    \"\"\"\n    pass\n\nassert \nquadratic(1,2,3) == -1.5, \"Not what we expected.\"\nassert \nquadratic(1,2,1) == 2, \"Not what we expected.\"\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_to_n(1) == 1, \"sum_to_n failed\"\nassert     sum_to_n(4) == 5, \"sum_to_n failed\"\nassert     sum_to_n(5) == 12, \"sum_to_n failed\"\nassert     sum_to_n(10) == 55, \"sum_to_n failed\"\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(10) == 55\nassert     sum_to_n(100) == 595\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsum_to_n(10) == 55\nprint('Correct')\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"(])\") == False\nassert     correct_bracketing(\"([)]\") == True\nassert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"((((())()))))\") == True\nassert     correct_bracketing(\"(()))\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\")\")\nassert not correct_bracketing(\"()\")\nassert not correct_bracketing(\"(])\")\nassert not correct_bracketing(\"(\")\nassert not correct_bracketing(\"\")\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing('()') == True\nassert     correct_bracketing('(()(()))') == True\nassert     correct_bracketing(')') == False\nassert     correct_bracketing('(') == False\nassert     correct_bracketing('())') == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"()())\")\nassert correct_bracketing(\"(a)())\") == False\nassert correct_bracketing(\"(()()\") == False\n\n\n\ndef is_one_away(s1: str, s2: str) -> bool:\n    \"\"\" s1 and s2 are the strings.\n    return True if and only if s1 and s2 are one edit away from each other.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"((()))\") == True, \"Wrong answer. Your code produced this incorrect answer.\"\nassert     correct_bracketing(\"(((())))\") == False, \"Wrong answer. Your code produced this incorrect answer.\"\nassert     correct_bracketing(\"((())))((()))\") == True, \"Wrong answer. Your code produced this incorrect answer.\"\nassert     correct_bracketing(\"((((()))))\") == False, \"Wrong answer. Your code produced this incorrect answer.\"\nassert     correct_bracketing(\"(()(())()\") == False, \"Wrong answer. Your code produced this incorrect answer.\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing('()') is True\nassert     correct_bracketing('(()())') is True\nassert     correct_bracketing('((()))') is False\nassert     correct_bracketing('(()())') is False\nassert     correct_bracketing('((()))') is False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"((([]){})\")\nassert     not correct_bracketing(\"(((])\")\nassert     not correct_bracketing(\"((()))\")\nassert     correct_bracketing(\"(()\")\nassert     correct_bracketing(\"((())\")\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()()\") == True\nassert     correct_bracketing(\"(((())))\") == True\nassert     correct_bracketing(\"((((((()))))\") == False\nassert     correct_bracketing(\"(\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()()\") == True\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"()())\") == False\nassert     correct_bracketing(\"(()())\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"()()()()()()())\")\nassert     correct_bracketing(\"((((()))))\")\nassert     correct_bracketing
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    # derivative_xs = derivative(xs)\n    # for x in range(-100, 100):\n        # assert (derivative_xs[x] ==\n        #          x * (xs[1] + 2 * xs[0] + 3 * xs[2]) +\n        #          2 * xs[1] + 3 * xs[0] + 4 * xs[2])\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert derivative([1, 0, 5]) == [1, 0, 1]\nassert derivative([1, 0, 0, 5]) == [1, 0, 1]\nassert derivative([-1, 0, 0, 1]) == [1, 0, 1]\nassert derivative([1, 0, -1, 1]) == [1, 0, -1, 1]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     derivative([1, 2, 3]) == 2\nassert     derivative([1, 2, 3, 4]) == 0\nassert     derivative([0, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 32\nassert     derivative([0, -1, -2, -3, -4]) == -12\nassert     derivative([0, 0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(derivative([1,2,3,4]))\n\nprint(derivative([1,2,3,4]))\n\ndef fit(xs, ys):\n    \"\"\"xs,ys represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Fit this polynomial to the dataset of (xs,ys)\n    \"\"\"\n    pass\n\nprint(fit([1,2,3,4], [1,2,3,4]))\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     derivative([1, 2, 3]) == [-2, -4, 6]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     derivative([1, 1, 0]) == [0, 0, 1]\nassert     derivative([0, 1, 1]) == [0, 2, 0]\nassert     derivative([1, 0, 1]) == [0, 0, 0]\n\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     derivative([1, -2, 3, -2, -5]) == [-3, 6, -10, 6, -20]\nassert     derivative([-2, 0, -2, 0, 0]) == [2, 0, 2, 0, 0]\nassert     derivative([1, 2, 3, 4, 5]) == [-6, 12, -18, 12, -24]\nassert     derivative([-1, 1, -2, 1, -3]) == [-2, 6, -12, 6, -18]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     derivative([-1, -1]) == [-2]\nassert     derivative([-1, 0, 2]) == [-2, 1]\nassert     derivative([-1, 0, -4, 1]) == [-2, 1, -1]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(10) == 55\n\ndef fibfib2(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\"\"\"\n10. Given a list of integers, write a function to sum all the elements of the array.\n\nFor example, the sum of the list [1, 2, 3, 4, 5] should return 15\n\"\"\"\n\ndef sum_list(numbers: list):\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fibfib(3)    == 2, \"test 1\"\nassert fibfib(9)    == 34, \"test 2\"\nassert fibfib(35)    == 832040, \"test 3\"\nassert fibfib(40)    == 102334155, \"test 4\"\nassert fibfib(100)    == 354224848179261915075, \"test 5\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef main():\n    print(fibfib(7))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fibfib(0) == 0, \"Error: fibfib(0)\"\nassert     fibfib(1) == 0, \"Error: fibfib(1)\"\nassert     fibfib(2) == 1, \"Error: fibfib(2)\"\nassert     fibfib(3) == 1, \"Error: fibfib(3)\"\nassert     fibfib(4) == 2, \"Error: fibfib(4)\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(3) == 1\nfibfib(4) == 2\nfibfib(5) == 3\nfibfib(6) == 5\nfibfib(7) == 8\nfibfib(8) == 13\nfibfib(9) == 21\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    [True, False, True, True, True, False, True, False, True, False, False, True] == vowels_count(\"hello\"), \"Should return 3\"\nassert\n    [True, True, True, False, True, True, True, False, True, True, False, True] == vowels_count(\"\"), \"Should return 0\"\n\nprint(\"All tests passed\""
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef test_vowels_count():\n    assert vowels_count('abracadabra') == 5\n    assert vowels_count('password') == 5\n    assert vowels_count('pass') == 0\n    "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert vowels_count('academy') == 5\nassert vowels_count('dog') == 3\nassert vowels_count('this') == 4\nassert vowels_count('here') == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     vowels_count('hello') == 3\nassert     vowels_count('python') == 5\nassert     vowels_count('abc') == 0\nassert     vowels_count('abcdefghijklmnopqrstuvwxyz') == 26\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     vowels_count('') == 0\nassert     vowels_count('as') == 0\nassert     vowels_count('asdf') == 0\nassert     vowels_count('aesdf') == 0\nassert     vowels_count('aeiou') == 3\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     vowels_count('') == 0\nassert     vowels_count('a') == 0\nassert     vowels_count('ab') == 0\nassert     vowels_count('abcd') == 0\nassert     vowels_count('abcdabc') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     vowels_count('sunny') == 3, \"Not a valid answer\"\nassert     vowels_count('sunny, blah') == 3, \"Not a valid answer\"\nassert     vowels_count('shiny, did, do') == 4, \"Not a valid answer\"\nassert     vowels_count('kite') == 0, \"Not a valid answer\"\nassert     vowels_count('i') == 1, \"Not a valid answer\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     vowels_count('') == 0\nassert     vowels_count('ab') == 0\nassert     vowels_count('a') == 1\nassert     vowels_count('abab') == 2\nassert     vowels_count('ababab') == 4\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     vowels_count('abracadabra') == 4\nassert     vowels_count('AbraCadabra') == 4\nassert     vowels_count('acrai') == 0\nassert     vowels_count('acraia') == 2\n\ndef test_vowels_count(func):\n    \"\"\"Each function should have this decorator to ensure that it runs only\n    correctly on test cases.\n    \"\"\"\n    "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef shift_right(x, shift):\n    \"\"\"Shift the digits of the integer x to the right by shift.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncircular_shift(13, -1) == '12'\ncircular_shift(1234567, 7) == '32112345'\ncircular_shift(0, -10) == '0'\ncircular_shift(100, 2) == '98'\ncircular_shift(1000000, 10) == '1000000'\n\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     circular_shift(345, 1) == 345\nassert     circular_shift(345, 4) == 235\nassert     circular_shift(345, 6) == 154\nassert     circular_shift(345, 7) == 325\nassert     circular_shift(345, 14) == 53\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     circular_shift(\"12345678\", 0) == \"12345678\"\nassert     circular_shift(\"12345678\", 1) == \"87654321\"\nassert     circular_shift(\"12345678\", 2) == \"5678912\"\nassert     circular_shift(\"12345678\", 3) == \"4578678\"\nassert     circular_shift(\"12345678\", 4) == \"2346789\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert         circular_shift(123, 2) == 321\nassert         circular_shift(123, -2) == 321\nassert         circular_shift(123, -123) == 321\nassert         circular_shift(123, 123) == 123\nassert         circular_shift(123, 0) == 123\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     circular_shift(6, 2) == '4'\nassert     circular_shift(7, 2) == '5'\nassert     circular_shift(6, 1) == '5'\nassert     circular_shift(7, 1) == '4'\nassert     circular_shift(6, -1) == '5'\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digitSum('A') == 1\nassert     digitSum('B') == 2\nassert     digitSum('C') == 3\nassert     digitSum('D') == 4\nassert     digitSum('E') == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digitSum(\"sudoku\") == 11, digitSum(\"sudoku\")\nassert digitSum(\"xyz\") == 0, digitSum(\"xyz\")\nassert digitSum(\"\") == 0, digitSum(\"\")\nassert digitSum(\"asfdg\") == 0, digitSum(\"asfdg\")"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digitSum(\"abc\") == 0, \"Error\"\nassert     digitSum(\"a\") == 0, \"Error\"\nassert     digitSum(\"1\") == 1, \"Error\"\nassert     digitSum(\"12\") == 3, \"Error\"\nassert     digitSum(\"a1\") == 0, \"Error\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digitSum(\"\") == 0, \"empty string\"\nassert     digitSum(\"aa\") == 0, \"single character\"\nassert     digitSum(\"1\") == 0, \"single digit\"\nassert     digitSum(\"a\") == 0, \"single upper case\"\nassert     digitSum(\"123\") == 6, \"single digit plus one\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digitSum('abc') == 0, 'Expected \"abc\" to return 0, got \"abc\" instead'\nassert     digitSum('ABC') == 0, 'Expected \"ABC\" to return 0, got \"ABC\" instead'\nassert     digitSum('aBc') == 3, 'Expected \"aBc\" to return 3, got \"aBc\" instead'\nassert     digitSum('aBc') == 3, 'Expected \"aBc\" to return 3, got \"aBc\" instead'\nassert     digitSum('12') == 3, 'Expected \"12\" to return 3, got \"12\" instead'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digitSum(\"hello\") == \"25\"\nassert     digitSum(\"asdf\") == \"13\"\nassert     digitSum(\"a\") == \"1\"\nassert     digitSum(\"\") == \"\"\nassert     digitSum(\"foo\") == \"7\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digitSum(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 45, \"FAILURE\"\nassert     digitSum(\"0123456789\") == 9, \"FAILURE\"\nassert     digitSum(\"\") == 0, \"FAILURE\"\nassert     digitSum(\"A\") == 1, \"FAILURE\"\nassert     digitSum(\"Z\") == 26, \"FAILURE\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digitSum(\"H1G0F1A0Z1\") == 62\nassert     digitSum(\"H1G0F1Z\") == 61\nassert     digitSum(\"H1G0F1Z1\") == 60\nassert     digitSum(\"H1G0F1Z1A0\") == 59\nassert     digitSum(\"H1G0F1Z1A0Z\") == 58\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digitSum(\"0123456789\") == 45\nassert     digitSum(\"\") == 0\nassert     digitSum(\"0123\") == 10\nassert     digitSum(\"#@$!+\") == 9"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint (\"Pass\" if digitSum('a2b3c') == 9 else \"Fail\")\nprint (\"Pass\" if digitSum('hi-there') == 9 else \"Fail\")\nprint (\"Pass\" if digitSum('1024') == 10 else \"Fail\")\nprint (\"Pass\" if digitSum('a1b2c3d4e') == 18 else \"Fail\")\nprint (\"Pass\" if digitSum('a') == 0 else \"Fail\")\nprint (\"Pass\" if digitSum('XYZ') == 0 else \"Fail\")\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfruit_distribution(\"2\", 1) == 1\nassert fruit_distribution(\"3\", 1) == 1\nassert fruit_distribution(\"3\", 2) == 1\nassert fruit_distribution(\"4\", 2) == 1\nassert fruit_distribution(\"4\", 3) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fruit_distribution('3', 5) == 4\nassert fruit_distribution('0', 5) == 0\nassert fruit_distribution('4', 3) == 4\nassert fruit_distribution('10', 20) == 20\nassert fruit_distribution('1', 1) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fruit_distribution('2 apples', 2) == 1\nassert fruit_distribution('5 oranges', 3) == 2\nassert fruit_distribution('3 apples', 2) == 0\nassert fruit_distribution('5 apples', 2) == 2\nassert fruit_distribution('10 apples', 5) == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fruit_distribution(s = 'apples', n = 3) == 1\nassert     fruit_distribution(s = 'apples', n = 5) == 1\nassert     fruit_distribution(s = 'apples', n = 7) == 0\nassert     fruit_distribution(s = 'apples', n = 8) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef fruit_distribution_2(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fruit_distribution(\"mango\", 2) == 4, \"Wrong answer in test 1\"\nassert fruit_distribution(\"apples\", 3) == 5, \"Wrong answer in test 2\"\nassert fruit_distribution(\"oranges\", 2) == 7, \"Wrong answer in test 3\"\nassert fruit_distribution(\"mango\", 3) == 5, \"Wrong answer in test 4\"\nassert fruit_distribution(\"apples\", 2) == 2, \"Wrong answer in test 5\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nfruit_distribution(1,1) == 0, \"Your fruit_distribution is wrong!\"\nassert \nfruit_distribution(3,3) == 1, \"Your fruit_distribution is wrong!\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fruit_distribution(\"-1\", 1) == 0\nassert fruit_distribution(\"2\", 2) == 1\nassert fruit_distribution(\"1\", 3) == 0\nassert fruit_distribution(\"0\", 1) == 0\nassert fruit_distribution(\"-2\", 1) == -1\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfruit_distribution('23',3) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fruit_distribution('40', '10') == 1, '1st example'\nassert     fruit_distribution('40', '50') == 1, '2nd example'\nassert     fruit_distribution('30', '20') == 2, '3rd example'\n\ndef find_longest_substring_containing_at_least_two_unique_characters(s):\n    \"\"\"\n    In this task, you will be given a string and you have to find the length of the longest\n    substring that contains at least 2 unique characters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pluck([]) == []\nassert     pluck([1]) == []\nassert     pluck([1,2,3,4,5]) == [3,3]\nassert     pluck([1,2,3,4,5,6,7,8,9,10]) == [10,10]\nassert     pluck([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == [11,11]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\npluck([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,51"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pluck([1, 4, 2, 3, 5, 7, 6, 8, 9]) == [1, 0], 'Failed to return the node with smallest even value.'\nassert     pluck([1, 4, 2, 3, 5, 7, 6, 8, 9, 10]) == [1, 0], 'Failed to return the node with smallest even value.'\nassert     pluck([1, 4, 2, 3, 5, 7, 6, 8, 9, 10, 100]) == [1, 1], 'Failed to return the node with smallest even value.'\nassert     pluck([]) == [], 'Failed to return the node with smallest even value.'\nassert     pluck([1, 4, 2, 3, 5, 7, 6, 8, 9]) == [1, 0], 'Failed to return the node with smallest even value.'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pluck([1,2,3,4,5])    ==    [2, 0], \"Wrong\"\nassert     pluck([1,2,3,4,5,6,7])    ==    [2, 1], \"Wrong\"\nassert     pluck([1,2,3,4,5,6,7,8,9])    ==    [2, 1], \"Wrong\"\nassert     pluck([1,2,3,4,5,6,7,8,9,10])    ==    [2, 1], \"Wrong\"\nassert     pluck([])    ==    [], \"Wrong\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pluck([ 1, 2, 2, 5, 6 ]) == [ 2, 1 ]\nassert pluck([ 1, 2, 2, 5 ]) == [ 2 ]\nassert pluck([ ]) == []\nassert pluck([ 1, 1 ]) == [ 1 ]\nassert pluck([ 1, 1, 1 ]) == [ 1 ]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pluck([1, 2, 3, 4, 4, 4]) ==     [2, 0]\nassert     pluck([1, 3, 2, 4, 3, 4]) ==     [2, 2]\nassert     pluck([1, 1, 2, 2, 2, 3]) ==     [3, 3]\nassert     pluck([]) ==     []\nassert     pluck([1, 1]) ==     [1, 0]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     [5, 0] == pluck([3, 4, 4, 5])\nassert     [6, 1] == pluck([3, 5, 5, 5, 5])\nassert     [] == pluck([])\nassert     [6, 3] == pluck([1, 5, 5, 5, 5, 5, 5])\nassert     [3, 0] == pluck([1, 5, 5, 5, 5, 5, 5, 2, 3, 1, 1, 1])\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pluck([1,2,3,4,5,6,7,8,9]) == [1,0], \"pluck\"\nassert     pluck([]) == [], \"pluck\"\nassert     pluck([1,2,3,4,5,6,7,8,9,10,11,12]) == [2,1], \"pluck\"\nassert     pluck([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == [3,2], \"pluck\""
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     search([1,2,3,4,5]) == 5\nassert     search([1,1,1,1]) == 1\nassert     search([-2,-1,0,0,2,1]) == -1\nassert     search([]) == -1\n\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nif __name__ == '__main__':\n    test_cases = int(input())\n    for cases in range(test_cases):\n        n = int(input())\n        arr = list(map(int, input().strip().split()))\n        print(search(arr)"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([0,3,5]) == 5\nassert search([2,2,1]) == -1\nassert search([-2,2,1]) == 2\nassert search([-2,2,-2]) == -2\nassert search([]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     search([5,7,1,7,7,7,7]) == 7, \"Wrong result\"\nassert search([1,2,3,4]) == -1, \"Wrong result\"\nassert search([-3,3,4,5,1,2,6,0]) == 5, \"Wrong result\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert search([3, 4, 5, 1]) == 5\nassert search([1, 2, 4, 4, 5]) == 5\nassert search([1, 1, 4, 5, 5]) == -1\nassert search([1, 4, 4, 5, 5]) == 4\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     search([0]) == -1\nassert search([1]) == 1\nassert search([1,1]) == 1\nassert search([1,2,3,4,5]) == 4\nassert search([1,2,3,4,5,4,3,2,1,0,1]) == 5\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(search(nums))\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    search([6,5,7,6,6,4,6,5,6,6,5,7,6,6,7,6,7,5,6,5,7,5,6,4,5,6,5,7,6,7,5,6,7,5,7,7,7,7,6,5,6,7,6,6,4,5,6,7,5,7,7,6,6,4,5,6,5,6,7,6,7,7,7,6,5,6,5,7,5,6,7,5,7,7,6,6,4,5,6,5,7,6,7,5,6,7,5,7,7,7,7,6,5,6,5,7,6,7,5,6,7,5,7,7,7,7,6,5,6,5,7,5,6,4,5,6,7,5,7,7,6,6,4,5,6,5,6,7,6,7,7,7,7,7,6,5,6,5,6,7,5,7,7,6,6,4,5,6,5,7,7,6,7,7,7,7,6,5,7,6,7,6,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     strange_sort_list([1, 3, 2, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], 'Wrong'\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], 'Wrong'\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], 'Wrong'\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == \\\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], \\\n        'Wrong'\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == \\\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], \\\n        'Wrong'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert strange_sort_list([1, 3, 5, 6, 2, 4, 7, 9]) == \\\n    [1, 2, 3, 4, 5, 6, 7, 9]\nassert strange_sort_list([2, 7, 4, 5, 1, 3, 9, 6]) == \\\n    [1, 2, 3, 4, 5, 6, 7, 9]\nassert strange_sort_list([5, 3, 9, 2, 4, 7, 6, 1]) == \\\n    [1, 2, 3, 4, 5, 6, 7, 9]\nassert strange_sort_list([7, 4, 6, 3, 5, 1, 9, 2]) == \\\n    [1, 2, 3, 4, 5, 6, 7, 9]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     strange_sort_list([2, 3, 1, 4]) == [1, 2, 3, 4]\nassert     strange_sort_list([-2, 3, 1, -4]) == [-2, 1, 3, -4]\nassert     strange_sort_list([4, 3, 2, 1]) == [1, 2, 3, 4]\nassert     strange_sort_list([1, 1, 1, 1]) == [1, 1, 1, 1]\nassert     strange_sort_list([1]) == [1]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(strange_sort_list([1,3,2,4]))\nprint(strange_sort_list([1,2,4,3]))\nprint(strange_sort_list([1,2,3,4]))\nprint(strange_sort_list([-1,2,1]))\nprint(strange_sort_list([0,1,2,3,4,5,6,7]))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         strange_sort_list([5, 2, 1, 2, 3, 4, 5, 1]) == [1, 1, 2, 2, 2, 3, 5, 5]\nassert         strange_sort_list([2, 1, 4, 2, 3, 4, 5, 2]) == [2, 2, 2, 1, 1, 3, 4, 5]\nassert         strange_sort_list([1, 5, 2, 4, 3, 2]) == [1, 1, 2, 2, 2, 3, 5]\nassert         strange_sort_list([2, 1, 4, 2, 3, 4, 5, 1, 2]) == [2, 2, 2, 1, 1, 3, 4, 5, 5]\nassert         strange_sort_list([2, 5, 2, 4, 3, 2, 1, 5, 1]) == [1, 1, 2, 2, 2, 2, 2, 3, 5]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     strange_sort_list([1, 2, 4, 4, 6, 8, 2]) ==    [1, 2, 2, 4, 4, 6, 8]\nassert     strange_sort_list([1, 2, 4, 4, 6, 8, 2, 2]) ==    [1, 2, 2, 2, 4, 4, 6, 8]\nassert     strange_sort_list([1, 2, 4, 4, 6, 8, 2, 4, 6]) ==    [1, 2, 2, 4, 4, 2, 6, 6, 8]\nassert     strange_sort_list([1, 2, 4, 4, 6, 8, 2, 4, 6, 1, 2]) ==    [1, 2, 2, 4, 4, 2, 1, 2, 6, 6, 8]\nassert     strange_sort_list([1, 2, 4, 4, 6, 8, 2, 4, 6, 1, 2, 1]) ==    [1, 2, 2, 4, 4, 1, 1, 2, 6, 6, 8]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strange_sort_list([5,4,3,2,1]) == [1,2,3,4,5]\nassert     strange_sort_list([1,1,1,1,1]) == [1,1,1,1,1]\nassert     strange_sort_list([1,1,2,3,4,5]) == [1,1,2,3,4,5]\nassert     strange_sort_list([1,2,3,4,5,5]) == [1,2,3,4,5,5]\nassert     strange_sort_list([5,4,3,2,1,1]) == [1,1,1,2,3,4]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(5, 10, 7) == 10.33, \"Wrong\"\nassert     triangle_area(3, 5, 4) == -1, \"Wrong\"\nassert     triangle_area(0, 1, 1) == -1, \"Wrong\"\nassert     triangle_area(0, 1, 0) == 1, \"Wrong\"\nassert     triangle_area(1, 2, 3) == 0.5, \"Wrong\"\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''\n    if a > (b + c):\n        return -1\n    if b > (a + c):\n        return -1\n    if c > (a + b):\n        return -1\n    else:\n        return round((a * b) / 2, 2)\n\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ntriangle_area(10,10,10) == 5.0 \nassert triangle_area(10,20,30) == -1\nassert triangle_area(5, 10, 30) == -1\n\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(1.0, 2.0, 2.0) ==.5\nassert     triangle_area(1.0, 1.0, 2.0) == -1\nassert     triangle_area(1.0, 2.0, 2.0) == -1\nassert     triangle_area(1.0, 1.0, 2.0) == 1.0\n\nprint('tests passed')\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert triangle_area(1, 2, 3) == 0.5\nassert triangle_area(3, 4, 5) == 1\nassert triangle_area(3, 4, 6) == -1\nassert triangle_area(4, 5, 6) == 1\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nwill_it_fly([1,2,3,4,3,2,1], 4) == True\nassert \nwill_it_fly([1,2,3,4,4,2,1], 4) == False\nassert \nwill_it_fly([1,1], 1) == True\nassert \nwill_it_fly([1,1], 2) == False\nassert \nwill_it_fly([1,1,1], 2) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nwill_it_fly([],10)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nwill_it_fly([2,2], 2) == True\nwill_it_fly([1,2], 1) == False\nwill_it_fly([1,1,1], 2) == False\nwill_it_fly([1,1,1], 3) == False\nwill_it_fly([1,2], 4) == False\nwill_it_fly([1], 1) == False\nwill_it_fly([], 1) == False\nwill_it_fly([1,1,1,1], 2) == False\nwill_it_fly([1,1,1,1], 3) == True\nwill_it_fly([1,1,1,1], 4) == True\nwill_it_fly([1,1,1,1], 5) == True\nwill_it_fly([1,2,2,2], 3) == False\nwill_it_fly([1,2,2,2], 4) == False\nwill_it_fly([1,2,2,2], 5) == True\nwill_it_fly([1,2,2,2], 6) == False\nwill_it_fly([1,2,2,2], 7) == True\nwill_it_fly([1,2,2,2], 8) == False\nwill_it_fly([1,2,2,2], 9) == False\nwill_it_fly([1,2,2,2], 10) == True\nwill_it_fly([1,2,2,2], 11) == False\nwill_it_fly([1,2,2,2], 12) == True\nwill_it_fly([1,2,2,2], 13) == False\nwill_it_fly([1,2,2,2], 14) == True\nwill_it_fly([1,2,2,2], 15) == False\nwill_it_fly([1,2,2,2], 16) == True\nwill_it_fly([1,2,2,2], 17) == True\nwill_it_fly([1,2,2,2], 18) == False\nwill_it_fly([1,2,2,2], 19) == True\nwill_it_fly([1,2,2,2], 20) == True\nwill_it_fly([1,2,2,2], 21) == False\nwill_it_fly([1,2,2,2], 22) == False\nwill_it_fly([1,2,2,2], 23) == True\nwill_it_fly([1,2,2,2], 24) == False\nwill_it_fly([1,2,2,2], 25) == False\nwill_it_fly([1,2,2,2], 26) == False\nwill_it_fly([1,2,2,2], 27) == False\nwill_it_fly([1,2,2,2], 28) == True\nwill_it_fly([1,2,2,2], 29) == True\nwill_it_fly([1,2,2,2], 30) == True\nwill_it_fly([1,2,2,2], 31) == False\nwill_it_fly([1,2,2,2], 32) == False\nwill_it_fly([1,2,2,2], 33) == True\nwill_it_fly([1,2,2,2], 34) == False\nwill_it_fly([1,2,2,2], 35) == True\nwill_it_fly([1,2,2,2], 36) == True\nwill_it_fly([1,2,2,2], 37) == False\nwill_it_fly([1,2,2,2], 38) == False\nwill_it_fly([1,2,2,2], 39) == True\nwill_it_fly([1,2,2,2], 40) == False\nwill_it_fly([1,2,2,2], 41) == True\nwill_it_fly([1,2,2,2], 42) == True\nwill_it_fly([1,2,2,2], 43) == False\nwill_it_fly([1,2,2,2], 44) == True\nwill_it_fly([1,2,2,2], 45) == True\nwill_it_fly([1,2,2,2], 46) == True\nwill_it_fly(["
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     will_it_fly([], 10) == False\nassert     will_it_fly([1, 1], 10) == False\nassert     will_it_fly([1, 2], 10) == True\nassert     will_it_fly([1, 2, 3], 10) == True\nassert     will_it_fly([1, 2, 3, 4, 5], 10) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nwill_it_fly(['abcde', 'a', '', 'b'], 5) == True\nassert \nwill_it_fly(['a', 'b', 'c'], 10) == False\nassert \nwill_it_fly(['abcde', 'a', '', 'b'], 15) == Fals"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('Check your work:')\nif will_it_fly(['a','b','a','b','a','b','a','b','c'], 0):\n    print('Yay!')\nelse:\n    print('Nay!'"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     will_it_fly([],0) == True\nassert     will_it_fly([],1) == False\nassert     will_it_fly([1],1) == False\nassert     will_it_fly([1,1],1) == False\nassert     will_it_fly([1,2],1) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     will_it_fly([1,2],2) == True, 'Wrong Answer, it should return True if the object q will fly.'\nassert     will_it_fly([1,2,3],3) == False, 'Wrong Answer, it should return False if the object q will fly.'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    input_list_1 = '[' + '1,' * 10 + ']'\n    input_list_2 = '[' + '2,' * 10 + ']'\n    input_list_3 = '[' + '3,' * 10 + ']'\n    input_list_4 = '[' + '4,' * 10 + ']'\n    input_list_5 = '[' + '5,' * 10 + ']'\n    input_list_6 = '[' + '6,' * 10 + ']'\n    input_list_7 = '[' + '7,' * 10 + ']'\n    input_list_8 = '[' + '8,' * 10 + ']'\n    input_list_9 = '[' + '9,' * 10 + ']'\n    input_list_10 = '[' + '10,' * 10 + ']'\n    input_list_11 = '[' + '11,' * 10 + ']'\n    input_list_12 = '[' + '12,' * 10 + ']'\n    input_list_13 = '[' + '13,' * 10 + ']'\n    input_list_14 = '[' + '14,' * 10 + ']'\n    input_list_15 = '[' + '15,' * 10 + ']'\n    input_list_16 = '[' + '16,' * 10 + ']'\n    input_list_17 = '[' + '17,' * 10 + ']'\n    input_list_18 = '[' + '18,' * 10 + ']'\n    input_list_19 = '[' + '19,' * 10 + ']'\n    input_list_20 = '[' + '20,' * 10 + ']'\n    input_list_21 = '[' + '21,' * 10 + ']'\n    input_list_22 = '[' + '22,' * 10 + ']'\n    input_list_23 = '[' + '23,' * 10 + ']'\n    input_list_24 = '[' + '24,' * 10 + ']'\n    input_list_25 = '[' + '25,' * 10 + ']'\n    input_list_26 = '[' + '26,' * 10 + ']'\n    input_list_27 = '[' + '27,' * 10 + ']'\n    input_list_28 = '[' + '28,' * 10 + ']'\n    input_list_29 = '[' + '29,' * 10 + ']'\n    input_list_30 = '[' + '30,' * 10 + ']'\n    input_list_31 = '[' + '31,' * 10 + ']'\n    input_list_32 = '[' + '32,' * 10 + ']'\n    input_list_33 = '[' + '33,' * 10 + ']'\n    input_list_34 = '[' + '34,' * 10 + ']'\n    input_list_35 = '[' + '35,' * 10 + ']'\n    input_list_36 = '[' + '36,' * 10 + ']'\n    input_list_37 = '[' + '37,' * 10 + ']'\n    input_list_38 = '[' + '38,' * 10 + ']'\n    input_list_39 = '[' + '39,' * 10 + ']'\n    input_list_40 = '[' + '40,' * 10 + ']'\n    input_list_41 = '[' + '41,' * 10 + ']'\n    input_list_42 = '[' + '42,' * 10 + ']'\n    input_list_43 = '[' + '43,' * 10 + ']'\n    input_list_44 = '[' + '44,' * 10 + ']'\n    input_list_45 = '[' + '45,' * 10 + ']'\n    input_list_46 = '[' + '46,' * 10 + ']'\n    input_list_47 = '[' + '47,' * 10 + ']'\n    input_list_48 = '[' + '48,' * 10 + ']'\n    input_list_49 = '[' + '49,' * 10 + ']'\n    input_list_50 = '[' + '50,' * 10 + ']'\n    input_list_51 = '[' + '51,' * 10 + ']'\n    input_list_52 = '[' + '52,' * 10 + ']'\n    input_list_53 = '[' + '53,' * 10 + ']'\n    input_lis"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     will_it_fly([10, 20], 35) == True, \"Wrong output\"\nassert     will_it_fly([10, 20], 40) == False, \"Wrong output\"\nassert     will_it_fly([10, 20], 50) == True, \"Wrong output\"\n\nprint(\"All test cases are passed. Congratulations\")"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [1, 3, 5, 7]\n    print(smallest_change(arr)"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     smallest_change([1,2,3,4,5]) == 3\nassert     smallest_change([1,2,3,5,4]) == 1\nassert     smallest_change([1,2,3,4]) == 0\nassert     smallest_change([1,2,3,5,6,7]) == 3\nassert     smallest_change([5,4,3,2,1,2,3,4]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     smallest_change([4,3,2,1]) == 1\nassert     smallest_change([4,3,2]) == 1\nassert     smallest_change([4,3,1]) == 0\nassert     smallest_change([4,3]) == 1\nassert     smallest_change([4]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(smallest_change(\n    [1, 1, 1, 2, 2, 2, 2]))"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     smallest_change(arr) == 1, \\\n        \"smallest_change: not correct\"\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     smallest_change([1, 2, 3, 4, 5]) == 4\nassert     smallest_change([3, 4, 2, 1, 5]) == 6\nassert     smallest_change([1, 1, 1, 1, 1]) == 0\nassert     smallest_change([5, 4, 3, 2, 1]) == 4\nassert     smallest_change([1, 2, 3, 4, 5, 2, 1]) == 6\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_change([]) == 0\nassert     smallest_change([2,1,3]) == 1\nassert     smallest_change([5,2,4]) == 2\nassert     smallest_change([3,4,2,2,5]) == 3\nassert     smallest_change([3,3,3,4,4,3]) == 2\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (smallest_change([5,3,1,1,9,2,2]) == 2)\nassert     (smallest_change([5,3,1,1,9,2,2]) == 3)\nassert     (smallest_change([5,3,1,1,9,2,2]) == 0)\nassert     (smallest_change([5,3,1,1,9,2,2]) == 0)\nassert     (smallest_change([2,2,2,2,2,2,2,2,2,2]) == 1)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert\nassert total_match(['abc', 'xyz'], ['abc', 'xyz']) == ['abc', 'xyz']\nassert total_match(['abc', 'xyz', '123'], ['abc', 'xyz', '123']) == ['abc']\nassert total_match(['abcd', 'ab', 'abb'], ['a', 'b', 'bb']) == ['ab']\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     total_match(['abcd', 'efgh'], ['abcd', 'efgh']) == ['efgh']\nassert     total_match(['abcd', 'efgh'], ['efgh']) == []\nassert     total_match(['abcd', 'efgh'], ['efgh', 'a']) == ['efgh']\nassert     total_match(['abcd', 'efgh'], ['efgh', 'efgh']) == ['efgh']\nassert     total_match(['abcd', 'efgh'], ['efgh', 'efg', 'f']) == ['efgh']"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntotal_match(['abcd','efgh','xyz'], ['abc', 'efg', 'x']) == ['efg', 'x']\nassert total_match(['abcd','efgh','xyz'], ['abc', 'efg', 'x']) == ['efg', 'x']\nassert total_match(['abcd','efgh','xyz'], ['abc', 'efg', 'x']) == ['efg', 'x']\nassert total_match(['abcd','efgh','xyz'], ['abcd', 'efg', 'x']) == ['efg']\nassert total_match(['abcd','efgh','xyz'], ['abcd', 'efg', 'x']) == ['efg']\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     total_match(['a', 'b', 'c'], ['a', 'b', 'c']) ==     ['a']\nassert     total_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) ==     ['b']\nassert     total_match(['a', 'b', 'c'], ['a', 'c', 'd']) ==     ['a', 'c']\nassert     total_match(['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e']) ==     ['d', 'e']\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    total_match(['mango', 'banana', 'apple', 'pear'], ['mango', 'banana', 'apple', 'pear']) == ['mango', 'banana', 'apple']\n    assert \n        total_match(['mango', 'banana', 'apple'], ['mango', 'banana', 'apple', 'pear']) == ['mango', 'banana', 'apple']\n    assert \n        total_match(['mango', 'banana', 'apple'], ['pear', 'pear']) == ['mango', 'banana', 'apple']\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     total_match([\"stawin\", \"milk\"], [\"silver\", \"dark\"]) == [\"stawin\", \"milk\"]\nassert     total_match([\"stawin\", \"milk\"], [\"silver\", \"milk\"]) == [\"milk\"]\nassert     total_match([\"stawin\", \"milk\"], [\"snow\", \"milk\"]) == [\"snow\"]\n\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     total_match([\"abc\",\"xyz\"],[\"abc\",\"xyz\"]) == [\"abc\"]\nassert     total_match([\"abc\",\"xyz\"],[\"x\",\"y\",\"z\"]) == [\"xyz\"]\nassert total_match([\"abc\",\"xyz\"],[\"abc\"]) == [\"abc\"]\nassert total_match([\"abc\",\"xyz\"],[\"x\"]) == [\"x\"]\nassert total_match([\"abc\",\"xyz\"],[\"xyz\"]) == [\"xyz\"]\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nIf we know that the total number of characters in a string is N, then we can define \ntotal_match as a lambda function:\ntotal_match = lambda lst1, lst2: lst1 if len(lst1) < len(lst2) else lst2\n'''\n\n'''\nWrite a function that takes a list of strings and a string as arguments and returns \nthe list with the string removed from each element of the list.\n'''\n\ndef remove_string(lst, string):\n    '''\n    Write a function that accepts a list of strings and a string as arguments \n    and returns the list with the string removed from each element of the list.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(is_multiply_prime(12))\nprint(is_multiply_prime(66))\nprint(is_multiply_prime(59))\n\n\ndef find_prime_factors(num):\n    \"\"\"Write a function that returns the prime factors of the given number.\n    The prime factors of an integer are the prime divisors of the integer.\n    Example: the prime factors of 4 are 2 and 2, both prime divisors.\n    \"\"\"\n    pass\n\n\nprint(find_prime_factors(12))\nprint(find_prime_factors(66))\nprint(find_prime_factors(59))\n\n\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(97)    ==     False\nassert     is_multiply_prime(98)    ==     True\nassert     is_multiply_prime(101)    ==     False\nassert     is_multiply_prime(2)    ==     False\nassert     is_multiply_prime(3)    ==     True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"If a=20, then is_multiply_prime(a)=\",is_multiply_prime(20))\nprint(\"If a=21, then is_multiply_prime(a)=\",is_multiply_prime(21))\nprint(\"If a=3, then is_multiply_prime(a)=\",is_multiply_prime(3))\nprint(\"If a=2, then is_multiply_prime(a)=\",is_multiply_prime(2))\nprint(\"If a=100, then is_multiply_prime(a)=\",is_multiply_prime(100))\nprint(\"If a=0, then is_multiply_prime(a)=\",is_multiply_prime(0))\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_multiply_prime(3) == True\nassert     is_multiply_prime(12) == False\nassert     is_multiply_prime(27) == True\nassert     is_multiply_prime(100) == False\nassert     is_multiply_prime(1000) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_multiply_prime(12)\nassert is_multiply_prime(11)\nassert not is_multiply_prime(8)\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_multiply_prime(31) == True\nassert     is_multiply_prime(32) == True\nassert     is_multiply_prime(125) == False\nassert     is_multiply_prime(97) == True\n\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(0) == False\nassert     is_multiply_prime(1) == False\nassert     is_multiply_prime(2) == False\nassert     is_multiply_prime(3) == False\nassert     is_multiply_prime(4) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(9) == False\nassert     is_multiply_prime(68) == True\nassert     is_multiply_prime(181) == False\nassert     is_multiply_prime(31) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_simple_power(3, 4) == True, \"Wrong answer\"\nassert     is_simple_power(4, 4) == True, \"Wrong answer\"\nassert     is_simple_power(3, 3) == True, \"Wrong answer\"\nassert     is_simple_power(6, 6) == True, \"Wrong answer\"\nassert     is_simple_power(6, 3) == False, \"Wrong answer\"\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_simple_power(8, 2) == True\nassert     is_simple_power(9, 2) == False\nassert     is_simple_power(6, 3) == True\nassert     is_simple_power(0, 7) == False\nassert     is_simple_power(1, 2) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"You are a plumber, and you are at the end of the road. Your assistant is waiting in the middle of the road. Your task is to help him out and make sure that he will be satisfied with his new house.\")\nprint(\"He had not seen a house in the last few days. So he asks you to help him find a new house in the middle of the road.\")\nprint(\"A house is one that contains a certain amount of resources such as water, wood, and stone. Your task is to help him find the new house in the middle of the road.\")\nprint(\"It is assumed that the house does not contain any damage, and you can only find a single house.\")\nprint(\"The rooms in the house are in a straight line. The first room in the middle of the road is the one where the water is found.\")\nprint(\"The final room of the house is the one where the wood is found.\")\nprint(\"For example, you can find a house in the middle of the road by getting a boat from the corner and going straight up.\")\nprint(\"Write a function is_simple_power(x, n) that, given a number x and a number n,\nreturns true if n**x is an integer and false in other cases.\n\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    \"\"\"\n    pass\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_simple_power(8,2) == True\nassert     is_simple_power(8,3) == True\nassert     is_simple_power(8,5) == False\nassert     is_simple_power(8,6) == True\nassert     is_simple_power(8,8) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_simple_power(7, 2) == True\nassert is_simple_power(6, 2) == True\nassert is_simple_power(3, 2) == True\nassert is_simple_power(4, 2) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_simple_power(20, 2) == True\nassert     is_simple_power(2, 5) == False\nassert     is_simple_power(2, 1) == True\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(2, 3) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_simple_power(9, 3) == True\nassert     is_simple_power(9, 3) == False\nassert     is_simple_power(13, 4) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (is_simple_power(9, 3) == True), 'First'\nassert     (is_simple_power(9, 5) == False), 'Second'\nassert     (is_simple_power(9, 2) == False), 'Third'\nassert     (is_simple_power(8, 3) == True), 'Fourth'\nassert     (is_simple_power(9, 7) == True), 'Fifth'\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_simple_power(1, 2) == False\nassert     is_simple_power(2, 4) == True\nassert     is_simple_power(2, 2) == False\nassert     is_simple_power(2, 3) == False\nassert     is_simple_power(6, 2) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_simple_power(2, 5) == True\nassert     is_simple_power(2, 5.0) == False\nassert     is_simple_power(2, 1) == True\nassert     is_simple_power(2, 1.0) == False\nassert     is_simple_power(2, 0) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef answer(x):\n    '''\n    Write a function that takes a string x and returns a string \n    containing only the first letter of x, and the last letter of x.\n    If x contains no letters, the function should return an empty string.\n    '''\n    pass\n\ndef newt(n):\n    '''\n    Write a function that takes an integer n and returns True if \n    the square of the sum of its digits is equal to n, and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    assert iscube(3) == False\n    assert iscube(27) == True\n    assert iscube(1234) == False\n    \n    "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert iscube(2) == True\nassert iscube(8) == True\nassert iscube(9) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(iscube(3))\nprint(iscube(4))\nprint(iscube(27))\nprint(iscube(8))\n\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     iscube(1) == True\nassert     iscube(2) == True\nassert     iscube(3) == True\nassert     iscube(4) == False\nassert     iscube(5) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert iscube(0)\n    assert iscube(1)\n    assert not iscube(4)\n    "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\n\n\n\n\ndef is_palindrome(s):\n    '''\n    Write a function that takes a string s and returns True if this string\n    is a palindrome, or False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     iscube(2)     ==     True\nassert iscube(3)     ==     False\nassert iscube(7)     ==     True\nassert iscube(81)     ==     True\nassert iscube(8)     ==     False\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nhex_key('E') == 8\nhex_key('ABCD') == 8\nhex_key('FFF') == 8\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nhex_key('AF') == 1\nhex_key('ABD') == 0\nhex_key('B9') == 1\nhex_key('BC') == 1\nhex_key('ABCDEF') == 0\nhex_key('ABCDEFGH') == 3\nhex_key('ABCDEFGHIJK') == 3\nhex_key('ABCDEFGHIJKLMN') == 4\nhex_key('ABCDEFGHIJKLMNOP') == 4\nhex_key('ABCDEFGHIJKLMNOPQ') == 5\nhex_key('ABCDEFGHIJKLMNOPQRS') == 5\nhex_key('ABCDEFGHIJKLMNOPQRSU') == 5\nhex_key('ABCDEFGHIJKLMNOPQRSUVW') == 5\nhex_key('ABCDEFGHIJKLMNOPQRSUVWX') == 5\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZ') == 6\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZY') == 6\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ01') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ012345') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ01234567') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789A') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789AB') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABC') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCD') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCDEF') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCDEFGH') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCDEFGHIJ') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCDEFGHIJK') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCDEFGHIJKLM') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCDEFGHIJKLMN') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCDEFGHIJKLMNOP') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCDEFGHIJKLMNOPQ') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCDEFGHIJKLMNOPQRS') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCDEFGHIJKLMNOPQRSU') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCDEFGHIJKLMNOPQRSUVW') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCDEFGHIJKLMNOPQRSUVWX') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWXZYZ0123456789ABCDEFGHIJKLMNOPQRSUVWXZ') == 7\nhex_key('ABCDEFGHIJKLMNOPQRSUVWX"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    hex_key('') == 0\n    hex_key('ab') == 1\n    hex_key('abc') == 1\n    hex_key('abcd') == 1\n    hex_key('abcd12') == 1\n    hex_key('abcd123') == 2\n    hex_key('abcd123456') == 2\n    hex_key('abcd1234567') == 3\n    hex_key('abcd123456789') == 3\n    hex_key('a') == 0\n    hex_key('b') == 1\n    hex_key('c') == 2\n    hex_key('d') == 3\n    hex_key('e') == 4\n    hex_key('f') == 5\n    hex_key('ab') == 1\n    hex_key('abc') == 2\n    hex_key('abcd') == 2\n    hex_key('abcd123') == 3\n    hex_key('abcd123456') == 3\n    hex_key('abcd1234567') == 4\n    hex_key('abcd123456789') == 4\n    hex_key('abcde') == 2\n    hex_key('abcdef') == 3\n    hex_key('abcdefg') == 3\n    hex_key('abcdefgh') == 4\n    hex_key('abcdefghi') == 4\n    hex_key('abcdefghij') == 5\n    hex_key('abcdefghijk') == 5\n    hex_key('abcdefghijkl') == 6\n    hex_key('abcdefghijklmn') == 6\n    hex_key('abcdefghijklmnop') == 7\n    hex_key('abcdefghijklmnopq') == 7\n    hex_key('abcdefghijklmnopqr') == 8\n    hex_key('abcdefghijklmnopqrs') == 8\n    hex_key('abcdefghijklmnopqrst') == 9\n    hex_key('abcdefghijklmnopqrstu') == 9\n    hex_key('abcdefghijklmnopqrstuv') == 10\n    hex_key('abcdefghijklmnopqrstuvw') == 10\n    hex_key('abcdefghijklmnopqrstuvwx') == 11\n    hex_key('abcdefghijklmnopqrstuvwxy') == 11\n    hex_key('abcdefghijklmnopqrstuvwxyz') == 12\n    hex_key('abcdefghijklmnopqrstuvwxyz123') == 12\n    hex_key('abcdefghijklmnopqrstuvwxyz1234') == 13\n    hex_key('abcdefghijklmnopqrstuvwxyz12345') == 13\n    hex_key('abcdefghijklmnopqrstuvwxyz1234567') == 14\n    hex_key('abcdefghijklmnopqrstuvwxyz123456789') == 14\n    hex_key('abcdefghijklmnopqrstuvwxyz123456789a') == 15\n    hex_key('abcdefghijklmnopqrstuvwxyz123456789ab') == 15\n    hex_key('abcdefghijklmnopqrstuvwxyz123456789abc') == 16\n    hex_key('abcdefghijklmnopqrstuvwxyz123456789abcd') == 16\n    hex_key('abcdefghijklmnopqrstuvwxyz123456789abcde') == 17\n    hex_key('abcdefghijklmnopqrstuvwxyz123456789abcdef') == 18\n    hex_key('abcdefghijklmnopqrstuvwxyz123456789abcdefg') == 19\n    hex_key('abcdefghijklmnopqrstuvwxyz123456789abcdefgh') == 20\n    hex_key('abcdefghijklmnopqrstuvwxyz123456789abcdefghi') == 21\n    hex_key('abcdefghijklmnopqrstuvwxyz123456789abcdefghij') == 22\n    hex_key('abcdefghijklmnopqrstuvwxyz123456"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     hex_key('') == 0\nassert     hex_key('as') == 0\nassert     hex_key('2') == 2\nassert     hex_key('18') == 2\nassert     hex_key('23') == 3\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nhex_key('0F') == 4\nhex_key('0f') == 4\nhex_key('00') == 3\nhex_key('00A') == 6\nhex_key('a') == 2\nhex_key('AA') == 8\nhex_key('aB') == 1\nhex_key('0123456789ABCDEF') == 9\nhex_key('0123456789ABCDEF01') == 6\n\nprint('The answer is:', hex_key('0123456789ABCDEF01')"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(1) == '1db'\nassert     decimal_to_binary(2) == '2db'\nassert     decimal_to_binary(4) == '4db'\nassert     decimal_to_binary(8) == '1ddd'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(7) == \"db00\"\nassert decimal_to_binary(3) == \"db01\"\nassert decimal_to_binary(4) == \"db10\"\nassert decimal_to_binary(15) == \"db11\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    decimal_to_binary(0) == \"dbdb\"\n    decimal_to_binary(1) == \"db\"\n    decimal_to_binary(2) == \"d\"\n    decimal_to_binary(3) == \"db\"\n    decimal_to_binary(4) == \"d\"\n    decimal_to_binary(5) == \"d\"\n    decimal_to_binary(6) == \"d\"\n    decimal_to_binary(7) == \"d\"\n    decimal_to_binary(8) == \"d\"\n    decimal_to_binary(9) == \"d\"\n    decimal_to_binary(10) == \"d\"\n    decimal_to_binary(11) == \"db\"\n    decimal_to_binary(12) == \"d\"\n    decimal_to_binary(13) == \"db\"\n    decimal_to_binary(14) == \"d\"\n    decimal_to_binary(15) == \"db\"\n    decimal_to_binary(16) == \"d\"\n    decimal_to_binary(17) == \"db\"\n    decimal_to_binary(18) == \"d\"\n    decimal_to_binary(19) == \"db\"\n    decimal_to_binary(20) == \"d\"\n    decimal_to_binary(21) == \"db\"\n    decimal_to_binary(22) == \"d\"\n    decimal_to_binary(23) == \"db\"\n    decimal_to_binary(24) == \"d\"\n    decimal_to_binary(25) == \"db\"\n    decimal_to_binary(26) == \"d\"\n    decimal_to_binary(27) == \"db\"\n    decimal_to_binary(28) == \"d\"\n    decimal_to_binary(29) == \"db\"\n    decimal_to_binary(30) == \"d\"\n    decimal_to_binary(31) == \"db\"\n    decimal_to_binary(32) == \"d\"\n    decimal_to_binary(33) == \"db\"\n    decimal_to_binary(34) == \"d\"\n    decimal_to_binary(35) == \"db\"\n    decimal_to_binary(36) == \"d\"\n    decimal_to_binary(37) == \"db\"\n    decimal_to_binary(38) == \"d\"\n    decimal_to_binary(39) == \"db\"\n    decimal_to_binary(40) == \"d\"\n    decimal_to_binary(41) == \"db\"\n    decimal_to_binary(42) == \"d\"\n    decimal_to_binary(43) == \"db\"\n    decimal_to_binary(44) == \"d\"\n    decimal_to_binary(45) == \"db\"\n    decimal_to_binary(46) == \"d\"\n    decimal_to_binary(47) == \"db\"\n    decimal_to_binary(48) == \"d\"\n    decimal_to_binary(49) == \"db\"\n    decimal_to_binary(50) == \"d\"\n    decimal_to_binary(51) == \"db\"\n    decimal_to_binary(52) == \"d\"\n    decimal_to_binary(53) == \"db\"\n    decimal_to_binary(54) == \"d\"\n    decimal_to_binary(55) == \"db\"\n    decimal_to_binary(56) == \"d\"\n    decimal_to_binary(57) == \"db\"\n    decimal_to_binary(58) == \"d\"\n    decimal_to_binary(59) == \"db\"\n    decimal_to_binary(60) == \"d\"\n    decimal_to_binary(61) == \"db\"\n    decimal_to_binary(62) == \"d\"\n    decimal_to_binary(63) == \"db\"\n    decimal_to_binary(64) == \"d\"\n    decimal_to_binary(65) == \"db\"\n    decimal_to_binary(66) == \"d\"\n    decimal_to_binary(67) == \"db\"\n    de"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(5) == '101'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(17) == '100101'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndecimal_to_binary(65) == 'db1010'\ndecimal_to_binary(965) == 'db101001'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(2) == '0b10', f\"{decimal_to_binary(2)}!= '0b10'\"\nassert     decimal_to_binary(3) == '0b11', f\"{decimal_to_binary(3)}!= '0b11'\"\nassert     decimal_to_binary(9) == '0b101', f\"{decimal_to_binary(9)}!= '0b101'\"\nassert     decimal_to_binary(11) == '0b111', f\"{decimal_to_binary(11)}!= '0b111'\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(23))\nprint(decimal_to_binary(101))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\nassert     decimal_to_binary(5) == '101'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    is_happy('abc') == False\n    is_happy('abcz') == True\n    is_happy('abcddd') == False\n    is_happy('abcddddd') == False\n    is_happy('abcddddddd') == True\n    is_happy('abcddddddddd') == False\n    is_happy('abcddddddddddd') == True\n    is_happy('abcddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_happy( \"mmmtml\" ) == False\nassert     is_happy( \"aba\" ) == True\nassert     is_happy( \"pwwkew\" ) == True\nassert     is_happy( \"fvvvz\" ) == False\nassert     is_happy( \"fvzvv\" ) == True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_happy(\"zxlkjhgf\") == True\nassert     is_happy(\"xzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxzxz"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_happy('aa')     == True, 'aa'\nassert     is_happy('aaa')     == False, 'aaa'\nassert     is_happy('abcde')     == False, 'abcde'\nassert     is_happy('aab')     == False, 'aab'\nassert     is_happy('abcabcabc')     == True, 'abcabcabc'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    \"\"\"\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_happy('aabc') == True\nassert     is_happy('abc') == False\nassert     is_happy('a') == False\nassert     is_happy('') == True\nassert     is_happy('xyz') == False\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ngrades = [3.3,3.0,3.7,3.2,2.5,3.4,3.2,2.5,3.5]\nletter_grades = numerical_letter_grade(grades)\nprint('Letter grades: ', letter_grades)\n\ndef higher_than_avg(list_of_grades):\n    \"\"\"The teacher has made a grade-average function that calculates the average \n    of a list of grades. The teacher has been making her own function that \n    can find out the student\u2019s letter grade. The teacher also wants to output \n    a list of letter grades for the student.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([3.1, 4.0, 3.7, 2.5]) == ['A+', 'A', 'A', 'B+']\n\nif __name__ == '__main__':\n    print('We can run this file directly to test the functions.')\n    print('The functions you have implemented are:')\n    print(functions)\n    print('The lists of numerical_letter_grade are:')\n    print(numerical_letter_grade)"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(numerical_letter_grade([4.0, 3.3, 3.0, 3.7, 3.3, 3.0, 3.7, 4.0, 4.0])"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([1.5,2.5,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,10.0,10.0]) == ['A+', 'A', 'A-', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\n\nassert     numerical_letter_grade([1.5,2.5,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,10.0,10.0]) == ['A+', 'A', 'A-', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\n\nassert     numerical_letter_grade([1.5,2.5,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,10.0,10.0]) == ['A+', 'A', 'A-', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+', 'A+']\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n          numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          "
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prime_length(123) == False\nassert     prime_length(32) == True\nassert     prime_length('123') == False\nassert     prime_length('32') == True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    string = 'abcdefgh'\n    length = prime_length(string)\n    print(length)\n    \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prime_length(\"\") == False\nassert     prime_length(\"00\") == False\nassert     prime_length(\"2\") == True\nassert     prime_length(\"11\") == True\nassert     prime_length(\"3\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert prime_length('true') == True\nassert prime_length('false') == False\nassert prime_length('5') == False\nassert prime_length('0') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     prime_length('ccc') is False, \"Prime length should be False\"\nassert     prime_length('abacde') is False, \"Prime length should be False\"\nassert     prime_length('abcdefghi') is False, \"Prime length should be False\"\nassert     prime_length('abcdefghijklmnopqrstuvwxyz') is True, \"Prime length should be True\"\nassert     prime_length('abcdefghijklmnopqrstuvwxyz0123456789') is True, \"Prime length should be True\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prime_length(\"aaaa\") == False, \"Not correct: \" + str(prime_length(\"aaaa\"))\nassert prime_length(\"1\") == True, \"Not correct: \" + str(prime_length(\"1\"))\nassert prime_length(\"2\") == False, \"Not correct: \" + str(prime_length(\"2\"))\nassert prime_length(\"22\") == False, \"Not correct: \" + str(prime_length(\"22\"))\nassert prime_length(\"1234\") == True, \"Not correct: \" + str(prime_length(\"1234\"))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prime_length(\"hello\") == False\nassert prime_length(\"madam\") == False\nassert prime_length(\"\") == False\nassert prime_length(\"a\") == True\nassert prime_length(\"2\") == True\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 7\nassert     starts_one_ends(5) == 12\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 10\nassert     starts_one_ends(5) == 20\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     starts_one_ends(5) == 2\nassert     starts_one_ends(10) == 3\nassert     starts_one_ends(100) == 19\nassert     starts_one_ends(1000) == 190\nassert     starts_one_ends(10000) == 212\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     starts_one_ends(3) == 1\nassert     starts_one_ends(9) == 5\nassert     starts_one_ends(0) == 0\nassert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 0\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert starts_one_ends(1) == 1\nassert starts_one_ends(2) == 1\nassert starts_one_ends(3) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     starts_one_ends(12345) == 4\nassert     starts_one_ends(98765) == 5\nassert     starts_one_ends(98877) == 5\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     starts_one_ends(9) == 10\nassert     starts_one_ends(0) == 0\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 4\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     starts_one_ends(0) == 0\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 7\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef solve2(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in decimal.\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of decimal number\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solve(13) == \"0111\"\nassert     solve(123) == \"1010101\"\nassert     solve(10) == \"1010\"\nassert     solve(15) == \"1101\"\nassert     solve(0) == \"0000\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solve(0) == \"0\"\nassert     solve(2) == \"10\"\nassert     solve(9) == \"11\"\nassert     solve(1000000) == \"100010000\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert solve(1234) == '11001101'\nassert solve(12345) == '11011101'\nassert solve(1000) == '10000'\n\nif __name__ == '__main__':\n    # run the main function\n    main()"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsolve(2) == '00'\nsolve(3) == '11'"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     solve(0) == 0\nassert     solve(1) == 1\nassert     solve(10) == 11\nassert     solve(100) == 101\nassert     solve(1023) == 1024\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solve(0) == 0\nassert     solve(1) == 1\nassert     solve(2) == 2\nassert     solve(3) == 4\nassert     solve(4) == 6\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nif __name__ == '__main__':\n    #lst = [1, 3, 5, 7, 9]\n    lst = [1, 3, 5, 7, 9, 7, 13, 1, 3, 5, 7, 9, 11]\n    print(add(lst)"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add([]) == []\nassert     add([1,2,3,4,5]) == [1,3,5]\nassert     add([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\nassert     add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == [1,3,5,7,9,11,13,15]\nassert     add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == [1,3,5,7,9,11,13,15,17]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef main():\n    \"\"\"main function\n    \"\"\"\n    lst = [-2, 0, 2, -3, 1, 4, -5]\n    print(add(lst))\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add([1, 2, 3, 4, 5]) ==     [2, 4]\nassert     add([1, 3, 4, 5, 7]) ==     [3, 5]\nassert     add([1, 2, 3, 4, 5, 6]) ==     [2, 4, 6]\nassert     add([]) ==     []\nassert     add([1, 3, 4]) ==     [2, 4]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef remove_min(lst):\n    \"\"\"Given a non-empty list of integers lst, remove the element whose value is the smallest from the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 7, 9]\nassert     add([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9, 11, 13, 15, 17]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(add([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add([3, 4, 5, 6, 7]) == [3, 4, 0, 0, 7]\nassert     add([9, 3, 7, 5, 1]) == [9, 3, 7, 0, 0]\nassert     add([8, 2, 6, 1, 9]) == [0, 0, 0, 8, 2]\nassert     add([3, 3, 4, 4, 5]) == [3, 3, 0, 0, 5]\nassert     add([]) == []\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     anti_shuffle('Hello World') == 'World Hello'\nassert     anti_shuffle('1 hello 2') == '2 1 hello'\nassert     anti_shuffle('123 456 789') == '789 123 456'\nassert     anti_shuffle('     ') =='    '\nassert     anti_shuffle(' ') ==' '\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     anti_shuffle('hello there world') == 'hello world there'\nassert     anti_shuffle('hello') == 'oellh'\nassert     anti_shuffle('world') == 'world h'\nassert     anti_shuffle('') == ''\nassert     anti_shuffle('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     anti_shuffle(\"this is a string\") == \"tsrga e s tis a si\"\nassert     anti_shuffle(\"we ffbhf d vwe vtddg we ffbhf d vwe\") == \"wfbf vtddg hfdsv we wefv bfdf\"\nassert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\"aaa bb bb\") == \"aaa bbb\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\"\"\"\nComplete the following function\n\"\"\"\n\ndef create_link_list(lst):\n    \"\"\"\n    Write a function that takes a list of strings and return a LinkedList\n    of the same. The first element of the linked list should be the first element of the list and so on.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ns = \"hello world\"\nassert anti_shuffle(s) == \"world\"\n\ns = \"a a\"\nassert anti_shuffle(s) == \"aaa\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     anti_shuffle('Hello world') == 'Alo hW olleH'\nassert     anti_shuffle('go go go go') == 'go go go go'\nassert     anti_shuffle('123456789 abcde') == '123456789 abcde'\nassert     anti_shuffle('  ') ==' '\nassert     anti_shuffle(' ') ==''\nprint('correct'"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert anti_shuffle(\"Bob hit a ball, the hit BALL flew far after it was hit.\") == \"bob hit a ball ball flew far after it was hit\"\nassert anti_shuffle(\"a b c\") == \"a b c\"\nassert anti_shuffle(\"\") == \"\"\nassert anti_shuffle(\" \") == \" \"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6]], 2) == [(0, 1), (0, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6]], 1) == [(0, 0), (1, 0)]\nassert     get_row([[1, 2, 3], [4, 5, 6]], 3) == [(1, 2), (2, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6]], 0) == [(0, 0), (1, 0)]\n\n\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_row([[1, 3, 5],\n                   [8, 9, 7, ],\n                   [2, 6],\n                   [4],\n                   [1, 8, 5]], 1) == [(0, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]\n\nprint(\"TESTS:\")\nassert     get_row([[1, 3, 5],\n                   [8, 9, 7, ],\n                   [2, 6],\n                   [4],\n                   [1, 8, 5]], 1) == [(0, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]\n\nprint(\"PASSED!\""
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_row([[1, 1, 1, 1, 1],\n                    [2, 1, 2, 1, 2],\n                    [3, 1, 3, 1, 3],\n                    [4, 1, 4, 1, 4],\n                    [5, 1, 5, 1, 5]], 5) == \\\n                [(0, 5), (1, 4), (2, 3), (3, 2), (4, 1), (5, 0)], get_row([[1, 1, 1, 1, 1],\n                    [2, 1, 2, 1, 2],\n                    [3, 1, 3, 1, 3],\n                    [4, 1, 4, 1, 4],\n                    [5, 1, 5, 1, 5]], 5) == \\\n                [(0, 5), (1, 4), (2, 3), (3, 2), (4, 1), (5, 0)], get_row([[1, 1, 1, 1, 1],\n                    [2, 1, 2, 1, 2],\n                    [3, 1, 3, 1, 3],\n                    [4, 1, 4, 1, 4],\n                    [5, 1, 5, 1, 5]], 5) == \\\n                [(0, 5), (1, 4), (2, 3), (3, 2), (4, 1), (5, 0)], get_row([[1, 1, 1, 1, 1],\n                    [2, 1, 2, 1, 2],\n                    [3, 1, 3, 1, 3],\n                    [4, 1, 4, 1, 4],\n                    [5, 1, 5, 1, 5]], 5) == \\\n                [(0, 5), (1, 4), (2, 3), (3, 2), (4, 1), (5, 0)], get_row([[1, 1, 1, 1, 1],\n                    [2, 1, 2, 1, 2],\n                    [3, 1, 3, 1, 3],\n                    [4, 1, 4, 1, 4],\n                    [5, 1, 5, 1, 5]], 5) == \\\n                [(0, 5), (1, 4), (2, 3), (3, 2), (4, 1), (5, 0)], get_row([[1, 1, 1, 1, 1],\n                    [2, 1, 2, 1, 2],\n                    [3, 1, 3, 1, 3],\n                    [4, 1, 4, 1, 4],\n                    [5, 1, 5, 1, 5]], 5) == \\\n                [(0, 5), (1, 4), (2, 3), (3, 2), (4, 1), (5, 0)], get_row([[1, 1, 1, 1, 1],\n                    [2, 1, 2, 1, 2],\n                    [3, 1, 3, 1, 3],\n                    [4, 1, 4, 1, 4],\n                    [5, 1, 5, 1, 5]], 5) == \\\n                [(0, 5), (1, 4), (2, 3), (3, 2), (4, 1), (5, 0)], get_row([[1, 1, 1, 1, 1],\n                    [2, 1, 2, 1, 2],\n                    [3, 1, 3, 1, 3],\n                    [4, 1, 4, 1, 4],\n                    [5, 1, 5, 1, 5]], 5) == \\\n                [(0, 5), (1, 4), (2, 3), (3, 2), (4, 1), (5, 0)], get_row([[1, 1, 1, 1, 1],\n                    [2, 1, 2, 1, 2],\n                    [3, 1, 3, 1, 3],\n                    [4, 1, 4, 1, 4],\n                    [5, 1, 5, 1, 5]], 5) == \\\n                [(0, 5), (1, 4), (2, 3), (3, 2), (4, 1), (5, 0)], get_row([[1, 1, 1, 1, 1],\n                    [2, 1, 2, 1, 2],\n                    [3, 1, 3, 1, 3],\n                    [4, 1, 4, 1, 4],\n                    [5, 1, 5, 1, 5]], "
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_array([1, 3, 5, 7])     ==     [1, 3, 5, 7]\nassert     sort_array([3, 1, 1, 2, 5, 5])     ==     [1, 1, 1, 2, 3, 5]\nassert     sort_array([3, 2, 1, 1, 5, 5])     ==     [1, 1, 1, 2, 3, 5]\nassert     sort_array([2, 3, 2, 1])     ==     [1, 2, 2, 3]\nassert     sort_array([1, 2, 1, 0])     ==     [1, 1, 2, 0]\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_array([0, 1, 2, 3, 4, 5]) == sorted([0, 1, 2, 3, 4, 5])\nassert     sort_array([1, 2, 3, 4, 5]) == sorted([1, 2, 3, 4, 5])\nassert     sort_array([0, 2, 4, 6, 8, 10]) == sorted([0, 2, 4, 6, 8, 10])\nassert     sort_array([2, 0, 10, 8, 6]) == sorted([0, 2, 8, 6, 10])\nassert     sort_array([1, 2, 3, 4, 5]) == sorted([1, 2, 3, 4, 5])\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([3, 4, 2, 1]) == [1, 2, 3, 4]\nassert     sort_array([1, 2, 4, 3]) == [1, 2, 3, 4]\nassert     sort_array([-5, 4, 3, 2, 1]) == [-5, 1, 2, 3, 4]\nassert     sort_array([5, 5, 5, 5]) == [5, 5, 5, 5]\nassert     sort_array([1]) == [1]\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sort_array([1,2,3,4,5,6,7,8,9]) == sorted(array)\nassert sort_array([1,2,3,4,5,6,7,8,9]) == sorted(array, reverse=True)\nassert sort_array([1,1,2,2,3,4,4,5,6]) == sorted(array, key= lambda x: x**2)\nassert sort_array([1,1,2,2,3,4,4,5,6]) == sorted(array, reverse=True, key= lambda x: x**2)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sort_array([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     sort_array([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     sort_array([10,9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sort_array([1, 1, 2, 2, 2, 3]) == [1, 1, 2, 2, 2, 3]\nassert     sort_array([1, 1, 1, 2, 2, 3]) == [1, 1, 1, 2, 2, 3]\nassert     sort_array([1, 1, 1, 1, 2, 2, 3]) == [1, 1, 1, 1, 2, 2, 3]\nassert     sort_array([1, 1, 1, 1, 1, 2, 2, 3]) == [1, 1, 1, 1, 1, 2, 2, 3]\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([0,0,0]) == [0,0,0]\nassert     sort_array([0,1,2,3,4,5]) == [0,1,2,3,4,5]\nassert     sort_array([-1,0,-2,0,1]) == [-1,0,-2,0,1]\nassert     sort_array([1,1,1,2,3]) == [1,1,1,2,3]\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert encrypt(\"Hello\") == \"Ik\"\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    encrypt('') == ''\n    encrypt('abc') == 'cde'\n    encrypt('abcd') == 'cde'\n    encrypt('abcde') == 'cde'\n    encrypt('abcdef') == 'cdef'\n    encrypt('abcdefgh') == 'hfbcdef'\n    encrypt('abcdefghi') == 'hfbcdef'\n    encrypt('abcdefghij') == 'hfbcdef'\n    encrypt('abcdefghijk') == 'hfbcdef'\n    encrypt('abcdefghijkl') == 'hfbcdef'\n    encrypt('abcdefghijklmn') == 'hfbcdef'\n    encrypt('abcdefghijklmno') == 'hfbcdef'\n    encrypt('abcdefghijklmnoq') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqr') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrs') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsx') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxy') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyz') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzw') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwq') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqr') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrs') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsx') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxz') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzy') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzyw') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzywq') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzywqr') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzywqrs') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzywqrsx') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzywqrsxz') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzywqrsxzw') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzywqrsxzwq') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzywqrsxzwqr') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzywqrsxzwqrs') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzywqrsxzwqrsx') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzywqrsxzwqrsxz') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzywqrsxzwqrsxzw') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqrsxzzywqrsxzwqrsxzwq') == 'hfbcdef'\n    encrypt('abcdefghijklmnoqrsxyzwqr"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    (encrypt(\"\") == \"\")\n    (encrypt(\"hello\") == \"lohe\")\n    (encrypt(\"hello world\") == \"qhldp\")\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n\n\n\n\n\n\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert encrypt(\"this is a test\") == \"kivi xhvj\"\nassert encrypt(\"FTP\") == \"TSTH\""
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # asserts must be inside their parentheses, otherwise Python will throw\n    # an error\n    # assert encrypt(\"\") == \"\"\n    # assert encrypt(\"a\") == \"b\"\n    # assert encrypt(\"abc\") == \"cba\"\n    # assert encrypt(\"def\") == \"fgh\"\n    # assert encrypt(\"hello\") == \"loh\"\n    # assert encrypt(\"world\") == \"worl\"\n    # assert encrypt(\"a\") == \"a\"\n    # assert encrypt(\"ab\") == \"ba\"\n    # assert encrypt(\"abc\") == \"abc\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    \n    if len(lst) == 1:\n        return None\n    \n    return sorted(lst)[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert next_smallest([1, 2, 3, 4]) == 2, \"There are no 2nd smallest elements\"\nassert next_smallest([3, 2, 1, 4]) == 1, \"The 2nd smallest element is 1\"\nassert next_smallest([3, 2, 4, 1]) == 2, \"The 2nd smallest element is 2\"\nassert next_smallest([3, 2, 4, 1, 0]) == 2, \"The 2nd smallest element is 2\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_smallest([1, 3, 4, 5, 6]) == 4\nassert     next_smallest([1, 3, 4, 5, 4]) == 4\nassert     next_smallest([1, 3, 4, 5, 5]) == 5\nassert     next_smallest([1, 3, 4, 5, 6, 7]) == 6\nassert     next_smallest([5, 4, 3, 2, 1]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_smallest([10, 4, 3, 2, 1]) == 4, 'wrong answer'\nassert     next_smallest([1, 2, 3, 4, 5]) == 2, 'wrong answer'\nassert     next_smallest([100, 10, 9, 8, 7]) == 7, 'wrong answer'\nassert     next_smallest([-1, -2, -3, -4, -5]) == -5, 'wrong answer'\nassert     next_smallest([100, 2, 3, 4, 5]) == 3, 'wrong answer'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert next_smallest([1, 2, 3, 4, 5]) == 2\nassert next_smallest([5, 4, 3, 2, 1]) == 1\nassert next_smallest([1, 2, 4, 5, 4]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest([1, 2, 3]) == 1\nassert     next_smallest([1, 2, 3, 4]) == 3\nassert     next_smallest([4, 3, 2, 1]) == 1\nassert     next_smallest([-10, -5, -3, 1]) == -3\nassert     next_smallest([1, 2, 4, 5, 3, 4, 4, 1, 2, 3, 5]) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_smallest([5, 9, 2, 1, 7, 8, 0]) == 0, 'test 1 fail'\nassert     next_smallest([5, 9, 7, 1, 8, 2, 0]) == 1, 'test 2 fail'\nassert     next_smallest([7, 2, 1, 8, 5, 9, 3]) == 3, 'test 3 fail'\nassert     next_smallest([0, 2, 3, 1, 5, 6]) == None, 'test 4 fail'\nassert     next_smallest([1,2,3,4,5,6,7]) == None, 'test 5 fail'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7, 3, 1, 1]) == 1\nnext_smallest([5, 1, 2, 9, 7"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_smallest([1, 1, 2, 1, 2, 4, 5, 1]) == 1\nassert     next_smallest([2, 1, 2, 1, 2, 4, 5, 1]) == 2\nassert     next_smallest([2, 1, 1, 2, 1, 2, 4, 5, 1]) == 2\nassert     next_smallest([2, 1, 1, 2, 1, 2, 4, 5, 1]) == None\nassert     next_smallest([2, 1, 1, 2, 1, 2, 4, 5, 1]) == None\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    # ok\nassert \n    # ok\nassert \n    # ok"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    assert is_bored('I') == 1\n    assert is_bored('I..') == 1\n    assert is_bored('I.!') == 1\n    assert is_bored('I..?') == 1\n    "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(is_bored('...'))\nassert is_bored('I.am.bored') == (True, 1)\nassert is_bored('I am bored.') == (True, 1)\nassert is_bored('I am bored?.') == (True, 2)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_bored(\"I\") == 1\nassert     is_bored(\"I?\") == 1\nassert     is_bored(\"!I\") == 1\nassert     is_bored(\"!I?\") == 1\nassert     is_bored(\"!I.?!I\") == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(is_bored('I.am.bored'))\nprint(is_bored('I.am.bored?.I.am.bored'))\nprint(is_bored('I.am.bored!.I.am.bored'))\nprint(is_bored('I.am.bored?.I.am.bored?.I.am.bored?'))\n\ndef is_bored(sentence):\n    return sentence.startswith('I') and sentence.count('.') == sentence.count('?') == sentence.count('!') == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    is_bored('I') == 1\n    is_bored('I.!') == 1\n    is_bored('I.?') == 1\n    is_bored('I.!I') == 1\n    is_bored('I. I') == 1\n    is_bored('I. I.') == 0\n    is_bored('I. I?') == 0\n    is_bored('I. I.!') == 0\n    is_bored('I. I! I') == 0\n    is_bored('I. I. I.!') == 0\n    is_bored('I. I. I. I.') == 0\n    is_bored('I. I. I. I. I.') == 0\n    is_bored('I. I. I. I. I. I') == 0\n    is_bored('I. I. I. I. I. I. I') == 0\n    is_bored('I. I. I. I. I. I. I. I. I') == 0\n    is_bored('I. I. I. I. I. I. I. I. I. I. I. I. I. I. I') == 0\n    is_bored
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    is_bored(\"I\") == 1\n    is_bored(\"I? I\") == 2\n    is_bored(\"I! I\") == 2\n    is_bored(\"I?! I\") == 3\n    is_bored(\"I. I. I.\") == 3\n    is_bored(\"! I\") == 2\n    is_bored(\"I\") == 1\n    is_bored(\"\") == 0\n    is_bored(\"I I. I.\") == 3\n    is_bored(\"I?\") == 1\n    is_bored(\"I!?\") == 1\n    is_bored(\"I!\") == 1\n    is_bored(\"I\") == 0\n    is_bored(\"\") == 0\n    is_bored(\"?\") == 1\n    is_bored(\"??\") == 1\n    is_bored(\"!!\") == 1\n    is_bored(\"!?\") == 1\n    is_bored(\"!\") == 1\n    is_bored(\"\") == 0\n\n\n\n\ndef is_bored_again(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(any_int(1, 2, 3) == False)\nprint(any_int(1, 2, 2) == True)\nprint(any_int(3, 1, 2) == False)\nprint(any_int(2, 3, 2) == False)\nprint(any_int(2, 3, 1) == False)\nprint(any_int(3, 3, 2) == True)\nprint(any_int(3, 3, 3) == True)\nprint(any_int(3, 3, 1) == True)\nprint(any_int(1, 2, 2.0) == False)\n\nprint('\\n################################################################################\\n')\n\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     any_int(1, 2, 3) == True\nassert any_int(1.2, 2, 3) == False\nassert any_int(1, 2.2, 3) == False\nassert any_int(1, 2, 3.1) == False\nassert any_int(1, 2.2, 1.1) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\n\ndef are_all_the_same(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if the numbers are all the same, and all are integers.\n    Returns false in any other cases.\n    '''\n    pass\n\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     any_int(2, 2, 2) == True, 'First'\nassert     any_int(2, 2, 2.1) == False, 'Second'\nassert     any_int(2.1, 2, 2) == False, 'Third'\nassert     any_int(2, 2.1, 2) == False, 'Fourth'\n\nprint('All tests passed!'"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('Checking...')\nprint('Passed!')\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     any_int(1, 2, 3) == True, \"Wrong result\"\nassert any_int(1, 1, 1) == False, \"Wrong result\"\nassert any_int(1.1, 1.2, 1.3) == False, \"Wrong result\"\nassert any_int(1, 2, 3.1) == False, \"Wrong result\"\nassert any_int(1, 2, -3) == False, \"Wrong result\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nencode(\"This is a test message.\") == \"THIS IS A TEST MESSAGE.\""
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it. \n    See the above function for more details. \n    Assume only letters.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(encode(\"A message\"))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert encode(\"A message\") == \"SmrEvq\"\n    "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    encode('car') == 'jF'\n    encode('bicycle') == 'cYb'\n    encode('accent') == 'jF'"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef decode(encoded):\n    \"\"\"\n    Write a function that takes an encoded message, and decodes it \n    in such a way that it swaps case of all letters, and replaces \n    all vowels in the message with the letter that appears 2 \n    places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    encode('') == ''\n    encode('Ala ma kota!') == 'aLa ma kotA!'\n    encode('Alfa Ma Kota!') == 'aLfA ma kotA!'\n    encode('AlzA ma kotA!') == 'aLzA ma kotA!'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    encode(\"Wassup?\") == \"WuTup!\"\n    encode(\"Hello\") == \"hELLo\"\n    encode(\"Languages\") == \"lAcgnaUrT\"\n    encode(\"These are some tests.\") == \"ThEs sEmOtIes hIrT\"\n    encode(\"This is a test.\") == \"ThIs a TeSt.\"\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way \n    that it swaps case of all letters, and replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # your function\n    # your input\n    # your expected output\n    # your output\n\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encode('An apple a day keeps the doctor away') == 'eNApplA pAday KUrNS The dOctor aNDeAS day'\nassert     encode('This is a test string.') == 'Tis sTrIng sTuRgTd.'\nassert     encode('MELODY!') =='mE lY! PYTHoN'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef hskjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert skjkasdkd([3, 4, 6, 8, 9]) == 23\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert skjkasdkd([2, 7, 11, 23]) == 28\nassert skjkasdkd([2, 4, 6, 8]) == 36\nassert skjkasdkd([1, 2, 3, 5]) == 28\nassert skjkasdkd([10, 2, 3, 5]) == 37\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     skjkasdkd([]) == 0, \"empty input\"\nassert skjkasdkd([1]) == 1, \"one\"\nassert skjkasdkd([2]) == 1, \"two\"\nassert skjkasdkd([3]) == 1, \"three\"\nassert skjkasdkd([4]) == 1, \"four\"\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     skjkasdkd([]) == 0\nassert     skjkasdkd([2]) == 9\nassert     skjkasdkd([17]) == 19\nassert     skjkasdkd([17, 13]) == 26\nassert     skjkasdkd([17, 13, 19]) == 23\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     skjkasdkd([10, 23, 55]) == 145\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\nassert     skjkasdkd([13, 11, 14]) == 42\n\nprint('You passed all the tests')"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('Testing skjkasdkd:')\nprint(skjkasdkd([]))\nprint(skjkasdkd([10]))\nprint(skjkasdkd([10, 22, 33, 44, 55, 66]))\nprint(skjkasdkd([2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(skjkasdkd([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_dict_order(dict):\n    \"\"\"\n    Given a dictionary, return True if all values are sorted in the ascending \n    order, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_dict_case({}) == False, 'Empty dict'\nassert check_dict_case({'a':1}) == False, 'dict with one key'\nassert check_dict_case({'A':1}) == False, 'dict with one key'\nassert check_dict_case({'a':1,'b':2}) == False, 'dict with two keys'\nassert check_dict_case({'A':1,'B':2}) == False, 'dict with two keys'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_dict_case({'a':'c', 'A':'C'})\nassert     check_dict_case({'a':'c', 'A':'C', 'b':'f'})\nassert     check_dict_case({'a':'c', 'A':'C', 'b':'F'})\nassert     check_dict_case({})\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_dict_case({}) == False, 'Empty dictionary'\nassert     check_dict_case({\"A\": \"1\", \"B\": \"2\", \"C\": \"3\"}) == False, 'Wrong key type'\nassert     check_dict_case({\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}) == False, 'Wrong key type'\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == False, 'Wrong key type'\nassert     check_dict_case({\"A\": 1, \"B\": 2, \"C\": 3}) == True, 'All keys are strings in lower case'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_dict_case({}) == False, 'Empty Dict'\nassert     check_dict_case({'a':1}) == False, 'All keys are strings in lower case'\nassert     check_dict_case({'A':1}) == False, 'All keys are strings in upper case'\nassert     check_dict_case({'A':1,'a':1}) == False, 'Some keys are strings in upper case'\nassert     check_dict_case({'a':1,'A':1}) == True, 'All keys are strings in lower case'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_dict_case({'foo':'bar', 'abc':'def'})\nassert not check_dict_case({'foo':'bar'})\nassert not check_dict_case({'ABC':'DEF'})\nassert not check_dict_case({})\n\ndef filter_upper_case(list):\n    \"\"\"\n    Given a list, return a new list without the element with index n if \n    the element is upper case or n if it's not upper case.\n    The function should return None if the list is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_dict_case({'a': 2, 'b': 1}) == True, 'First test'\nassert     check_dict_case({'a': 2, 'b': 1, 'c': 1}) == False, 'Second test'\nassert     check_dict_case({'a': 2, 'b': 1, 'c': 1, 'd': 1}) == True, 'Third test'\nassert     check_dict_case({}) == False, 'Fourth test'\n\n\"\"\"\nTest the function passed in the solution.\n\"\"\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_dict_case({}) == False, \"Empty dict\"\nassert     check_dict_case({'a' : 1, 'A' : 2}) == True, \"All lower case\"\nassert     check_dict_case({'a' : 1, 'A' : 2, 'B' : 3}) == True, \"All upper case\"\nassert     check_dict_case({'a' : 1, 'A' : 2, 'b' : 3}) == False, \"Missing key\"\nassert     check_dict_case({'a':1, 'b' : 3, 'c' : 3}) == False, \"Missing key\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(count_up_to(10000)"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_up_to(0) == []\ncount_up_to(4) == [2]\ncount_up_to(5) == [2, 3]\ncount_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_up_to(10) == [2,3,5,7]\nassert     count_up_to(11) == [2,3,5,7,11]\nassert     count_up_to(12) == [2,3,5,7,11,13]\nassert     count_up_to(13) == []\nassert     count_up_to(19) == [2,3,5,7,11,13,17]\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_up_to(0) == []\nassert     count_up_to(1) == [2]\nassert     count_up_to(2) == [2, 3]\nassert     count_up_to(3) == [2, 3, 5]\nassert     count_up_to(4) == [2, 3, 5, 7]\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_up_to(10) == [2,3,5,7]\nassert     count_up_to(20) == [2,3,5,7,11,13,17,19]\nassert     count_up_to(50) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\nassert count_up_to(10) == [2,3,5,7]\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2280, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_up_to(10) == [2,3,5,7,11]\nassert     count_up_to(3) == []\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_up_to(5) == [2, 3, 5]\nassert count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(20) == [2, 3, 5, 7, 11]\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply(12345, 67) == 67890\nassert     multiply(123456789, 987654) == 14556789\nassert     multiply(123456789, 987654321) == 1456789123454321\nassert     multiply(1234567890123456789, 1234567890123456789) == 1234567890123456789\nassert     multiply(1234567890123456789, 12345678901234567890) == 12345678901234567890\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert multiply(1, 1) == 1\nassert multiply(1, 2) == 1\nassert multiply(10, 1) == 10\nassert multiply(10, 2) == 10\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply(10, 17) == 53\nassert     multiply(11, 22) == 53\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert multiply(12, 37) == 378\nassert multiply(25, 75) == 900\nassert multiply(105, 125) == 5125\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\n\n\n\n\n\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not count_upper('ceo') == 1\nassert count_upper('douban') == 3\nassert not count_upper('eminem') == 2\nassert count_upper('ceo') == 3\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    assert count_upper(\"pneumonoultramicroscopicsilicovolcanoconiosis\") == 10\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(count_upper(\"H\"))\nprint(count_upper(\"Aa\"))\nprint(count_upper(\"aA\"))\nprint(count_upper(\"aAA\"))\nprint(count_upper(\"a\"))\nprint(count_upper(\"\"))\nprint(count_upper(\"g\"))\n\n'''\nInput:\n\"H\"\n\"Aa\"\n\"aA\"\n\"aAA\"\n\"a\"\n\"\"\n\"g\"\n\nOutput:\n1\n0\n0\n3\n0\n2\n1\n0\n'''"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_upper('hello') == 3\nassert count_upper('a') == 0\nassert count_upper('aa') == 1\nassert count_upper('e') == 1\nassert count_upper('ee') == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert\nassert \nassert \nassert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_upper('as') == 0\nassert     count_upper('BANANA') == 4\nassert     count_upper('LOL') == 1\nassert     count_upper('HELLO WORLD') == 2\nassert     count_upper('1234567') == 4\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     closest_integer(\"13.7\") == 13\nassert closest_integer(\"0.7\") == 0\nassert closest_integer(\"-13.7\") == -13\nassert closest_integer(\"-13.5\") == -13\nassert closest_integer(\"-13.4\") == -13\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"15.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-15.5\") == -15\nassert     closest_integer(\"14\") == 14\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.5\") == 14\nassert     closest_integer(\"14.5\") == 14\nassert     closest_integer(\"-14.5\") == -14\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     closest_integer(\"-14.5\")         == -15\nassert     closest_integer(\"14.5\")         == 15\nassert     closest_integer(\"14.500\")     == 14\nassert     closest_integer(\"14.9\")         == 15\nassert     closest_integer(\"-14.9\")         == -15\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"15\") == 15\nassert     closest_integer(\"7\") == 7\nassert     closest_integer(\"15.2\") == 15\nassert     closest_integer(\"-15.2\") == -15"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\nassert     make_a_pile(5) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod(verbose=True)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         make_a_pile(1) ==    [1]\nassert         make_a_pile(2) ==    [1, 1]\nassert         make_a_pile(3) ==    [1, 1, 1]\nassert         make_a_pile(4) ==    [1, 1, 1, 1]\nassert         make_a_pile(5) ==    [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\nassert     make_a_pile(5) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\nassert     make_a_pile(5) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert make_a_pile(3) == [1,2]\nassert make_a_pile(6) == [1,3,3]\nassert make_a_pile(9) == [1,3,4,4,4,4,5,5,5,5]\nassert make_a_pile(10) == [1,3,4,4,4,4,5,5,5,5,5,5]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         make_a_pile(1) ==     [1]\nassert         make_a_pile(3) ==     [3]\nassert         make_a_pile(4) ==     [4]\nassert         make_a_pile(7) ==     [7]\nassert         make_a_pile(10) ==     [10]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     make_a_pile(2) == [1, 2]\nassert     make_a_pile(3) == [1, 2, 1]\nassert     make_a_pile(5) == [1, 2, 1, 2, 1]\nassert     make_a_pile(7) == [1, 2, 1, 2, 1, 3, 1]\nassert     make_a_pile(9) == [1, 2, 1, 2, 1, 3, 1, 4, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     words_string('Hello World, I am Sam.') == ['Hello', 'World', 'I', 'am', 'Sam'], 'Wrong words_string'\nassert     words_string('This,is,a,string,split,by,comma.') == ['This', 'is', 'a','string','split', 'by', 'comma'], 'Wrong words_string'\n\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     words_string('a,b,c') == ['a', 'b', 'c'], 'Incorrect'\nassert     words_string('a,b,c,d') == ['a', 'b', 'c', 'd'], 'Incorrect'\nassert words_string('a,  , c') == ['a', 'c'], 'Incorrect'\nassert words_string('a,   b, c') == ['a', 'b', 'c'], 'Incorrect'\nassert words_string('a,   c') == ['a', 'c'], 'Incorrect'\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     words_string(\"Doe, John, Jim\") == [\"Doe\", \"John\", \"Jim\"]\nassert words_string(\"Doe, John, Jim, Joe\") == [\"Doe\", \"John\", \"Jim\", \"Joe\"]\nassert words_string(\"Doe, John, Jim, Joe, John, Joe\") == [\"Doe\", \"John\", \"Jim\", \"Joe\", \"John\", \"Joe\"]\nassert words_string(\"Doe, John, Jim, Joe, John, Joe, John\") == [\"Doe\", \"John\", \"Jim\", \"Joe\", \"John\", \"Joe\", \"John\"]\nassert words_string(\"Doe, John, Jim, Joe, John, Joe, John, John\") == [\"Doe\", \"John\", \"Jim\", \"Joe\", \"John\", \"Joe\", \"John\", \"John\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     words_string('') ==     []\nassert     words_string('a,b,c') ==     ['a', 'b', 'c']\nassert     words_string('a,b,c,') ==     ['a', 'b', 'c', '']\nassert     words_string('a,,c,,') ==     ['a', '', 'c', '']\nassert     words_string('abc, defg') ==     ['abc', 'defg']\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     words_string([\"hello\", \"hey\"]) == [\"hello\", \"hey\"]\nassert     words_string(\"hello, hey\") == [\"hello\", \"hey\"]\nassert     words_string(\"this, is, a, test\") == [\"this\", \"is\", \"a\", \"test\"]\nassert     words_string(\"hello, world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello, I'm here\") == [\"hello\", \"I'm\", \"here\"]"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     words_string(\"Hi, my name is Peter\") == [\"Hi\", \"my\", \"name\", \"is\", \"Peter\"]\nassert words_string(\"Hey, there I am Peter\") == [\"Hey\", \"there\", \"I\", \"am\", \"Peter\"]\nassert words_string(\"One\") == [\"One\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    words_string(\"This,is,a,string,\") == [\"This\", \"is\", \"a\", \"string\"]\n    words_string(\"this,is,string\") == [\"this\", \"is\", \"string\"]\n    words_string(\"this,is,string,a\") == [\"this\", \"is\", \"string\", \"a\"]\n    words_string(\"this,is,string,a,b,c\") == [\"this\", \"is\", \"string\", \"a\", \"b\", \"c\"]\n    words_string(\"this is string a\") == [\"this\", \"is\", \"string\", \"a\"]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert choose_num(10, 20) == 20\nassert choose_num(12, 24) == -1\nassert choose_num(10, 19) == -1\nassert choose_num(1, 12) == 1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    choose_num(5, 100) ==  100\nassert \n    choose_num(5, 1) ==  -1\nassert \n    choose_num(1, 100) ==  100\nassert \n    choose_num(1, 1) ==  -1\nassert \n    choose_num(10, 20) ==  20\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert choose_num(10, 15) == -1\nassert choose_num(10, 20) == 12\nassert choose_num(10, 25) == 12\nassert choose_num(10, 20) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     choose_num(4, 8) == 6\nassert     choose_num(3, 7) == -1\nassert     choose_num(2, 3) == 3\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     choose_num(10,20) == 20\nassert     choose_num(10,15) == 20\nassert     choose_num(10,22) == 20\nassert     choose_num(20,20) == 20\nassert     choose_num(20,21) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert choose_num(1, 5) == 2\nassert choose_num(1, 7) == -1\nassert choose_num(1, 9) == 3\nassert choose_num(9, 9) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    choose_num(1,5) == 2\n    choose_num(3,4) == 3\n    choose_num(3,5) == -1\n    choose_num(7,9) == 7\n    choose_num(0,1) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     choose_num(1, 10) == 2\nassert     choose_num(10, 20) == 11\nassert     choose_num(20, 100) == 21\nassert     choose_num(1, 50) == -1\nassert     choose_num(10, 50) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     choose_num(1, 2) == -1\nassert     choose_num(1, 3) == 2\nassert     choose_num(3, 4) == -1\nassert     choose_num(1, 2) == -1\nassert     choose_num(1, 3) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nrounded_avg(3, 5) == 4, 'Failed'\nassert rounded_avg(3, 4) == 3, 'Failed'\nassert rounded_avg(2, 3) == 2, 'Failed'\nassert rounded_avg(3, 3) == 3, 'Failed'\nassert rounded_avg(0, 0) == 0, 'Failed'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nrounded_avg(1, 2) == 1\nrounded_avg(2, 3) == 2\nrounded_avg(3, 4) == 2\nrounded_avg(4, 5) == 3\nrounded_avg(5, 6) == 4\nrounded_avg(6, 7) == 4\nrounded_avg(7, 8) == 5\nrounded_avg(8, 9) == 5\nrounded_avg(9, 10) == 6\nrounded_avg(10, 11) == 6\nrounded_avg(11, 12) == 7\nrounded_avg(12, 13) == 7\nrounded_avg(13, 14) == 8\nrounded_avg(14, 15) == 8\nrounded_avg(15, 16) == 9\nrounded_avg(16, 17) == 9\nrounded_avg(17, 18) == 10\nrounded_avg(18, 19) == 10\nrounded_avg(19, 20) == 11\nrounded_avg(20, 21) == 11\nrounded_avg(21, 22) == 12\nrounded_avg(22, 23) == 12\nrounded_avg(23, 24) == 13\nrounded_avg(24, 25) == 13\nrounded_avg(25, 26) == 14\nrounded_avg(26, 27) == 14\nrounded_avg(27, 28) == 15\nrounded_avg(28, 29) == 15\nrounded_avg(29, 30) == 16\nrounded_avg(30, 31) == 16\nrounded_avg(31, 32) == 17\nrounded_avg(32, 33) == 17\nrounded_avg(33, 34) == 18\nrounded_avg(34, 35) == 18\nrounded_avg(35, 36) == 19\nrounded_avg(36, 37) == 19\nrounded_avg(37, 38) == 20\nrounded_avg(38, 39) == 20\nrounded_avg(39, 40) == 21\nrounded_avg(40, 41) == 21\nrounded_avg(41, 42) == 22\nrounded_avg(42, 43) == 22\nrounded_avg(43, 44) == 23\nrounded_avg(44, 45) == 23\nrounded_avg(45, 46) == 24\nrounded_avg(46, 47) == 24\nrounded_avg(47, 48) == 25\nrounded_avg(48, 49) == 25\nrounded_avg(49, 50) == 26\nrounded_avg(50, 51) == 26\nrounded_avg(51, 52) == 27\nrounded_avg(52, 53) == 27\nrounded_avg(53, 54) == 28\nrounded_avg(54, 55) == 28\nrounded_avg(55, 56) == 29\nrounded_avg(56, 57) == 29\nrounded_avg(57, 58) == 30\nrounded_avg(58, 59) == 30\nrounded_avg(59, 60) == 31\nrounded_avg(60, 61) == 31\nrounded_avg(61, 62) == 32\nrounded_avg(62, 63) == 32\nrounded_avg(63, 64) == 33\nrounded_avg(64, 65) == 33\nrounded_avg(65, 66) == 34\nrounded_avg(66, 67) == 34\nrounded_avg(67, 68) == 35\nrounded_avg(68, 69) == 35\nrounded_avg(69, 70) == 36\nrounded_avg(70, 71) == 36\nrounded_avg(71, 72) == 37\nrounded_avg(72, 73) == 37\nrounded_avg(73, 74) == 38\nrounded_avg(74, 75) == 38\nrounded_avg(75, 76) == 39\nrounded_avg(76, 77) == 39\nrounded_avg(77, 78) == 40\nrounded_avg(78, 79) == 40\nrounded_avg(79, 80) == 41\nrounded_avg(80, 81) == 41\nrounded_avg(81, 82) == 42\nrounded_avg(82, 83) == 42\nrounded_avg(83, 84) == 43\nrounded_avg(84, 85) == 43\nrounded_avg(85, 86) == 44\nrounded_a"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    rounded_avg(5,6) == 5\nassert rounded_avg(5,7) == 6\nassert rounded_avg(7,7) == 7\nassert rounded_avg(7,8) == 7\nassert rounded_avg(8,8) == 8\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rounded_avg(10, 20) == 10\nassert     rounded_avg(10, 21) == 11\nassert     rounded_avg(10, 22) == 11\nassert     rounded_avg(10, 10) == 10\nassert     rounded_avg(10, 1) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nrounded_avg(1, 2) == 1\nassert \nrounded_avg(1, 3) == 1\nassert \nrounded_avg(1, 4) == 1\nassert \nrounded_avg(1, 5) == 1\nassert \nrounded_avg(1, 6) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rounded_avg(3,5) == 4\nassert     rounded_avg(5,3) == 4\nassert     rounded_avg(5,5) == 4\nassert     rounded_avg(5,4) == 3\nassert     rounded_avg(5,6) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"\n    return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nrounded_avg(1, 5) == 2\nassert \nrounded_avg(2, 4) == 3\nassert \nrounded_avg(3, 5) == 4\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(1, 6))\n    print(rounded_avg(1, 2))\n    print(rounded_avg(1, 3))\n    print(rounded_avg(1, 4))\n    print(rounded_avg(1, 5))\n    print(rounded_avg(1, 6))\n    print(rounded_avg(1, 7))\n    print(rounded_avg(1, 8))\n    print(rounded_avg(1, 9))\n    print(rounded_avg(1, 10))"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==\n        [1, 3, 5, 7, 9]\nassert unique_digits([5, 9, 2, 1, 9, 7, 9, 1, 9, 8]) ==\n        [5, 7, 9]\nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==\n        [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_digits([1, 2, 3, 4, 6]) == [1, 2, 3, 4, 6]\nassert     unique_digits([1, 4, 5, 3, 8]) == [1, 4, 8]\nassert     unique_digits([5, 8, 2, 3, 9, 5]) == [2, 3, 9]\nassert     unique_digits([5, 8, 2, 3, 9, 1, 7]) == [1, 2, 3, 9]\nassert     unique_digits([3, 9, 8, 1, 2, 4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    x = [1,2,3,4,5,6,7,8,9]\n    print(unique_digits(x)"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_digits([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([1,2,2,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([1,1,1,1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n\nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED.\\n\""
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_digits([12, 4, 3, 2]) ==  [4, 2, 3]\nassert     unique_digits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) ==  [1, 1, 1]\nassert     unique_digits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) ==  [1]\nassert     unique_digits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) ==  [1]\nassert     unique_digits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) ==  [1]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_digits([10,11,12,13,14]) == [10,11,13,14]\nassert     unique_digits([1,2,3,4,5]) == []\nassert     unique_digits([7,7,7,7,7]) == [7]\n\ndef unique_digits_iter(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_digits([0, 5, 3, 8, 1, 4, 6]) == [0, 3, 8, 1, 5, 4]\nassert     unique_digits([0, 5, 3, 8, 1, 4, 9]) == [0, 1, 3, 5, 8, 4]\nassert     unique_digits([0, 5, 3, 8, 1, 4, 6]) == [0, 1, 4, 5, 3, 8]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     by_length(\n        [\n            'One',\n            'Two',\n            'Three',\n            'Four',\n            'Five',\n            'Six',\n            'Seven',\n            'Eight',\n            'Nine',\n        ]\n    ) == [\n        'Nine',\n        'Eight',\n        'Seven',\n        'Six',\n        'Five',\n        'Four',\n        'Three',\n        'Two',\n        'One',\n    ]\n\nprint(\"Done\")\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nby_length([2,3,3,3,5,6,6,6,6,8,9]) == ['Two','Three','Three','Three','Five','Six','Six','Six','Six','Eight','Nine']\nassert \nby_length([5,3,3,3,5,6,6,6,6,8,9]) == ['Five','Three','Three','Three','Five','Six','Six','Six','Six','Eight','Nine']\nassert \nby_length([5,3,3,5,6,6,6,6,6,8,9]) == ['Five','Three','Three','Five','Six','Six','Six','Six','Six','Eight','Nine']"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     by_length([2, 1, 4, 3, 5]) == ['Two', 'One', 'Four', 'Three', 'Five']\nassert     by_length([2, 1, 4, 3, 5, 4, 3, 1, 2]) == ['One', 'Three', 'Four', 'Two', 'Five', 'Four', 'Three', 'One', 'Two']\nassert     by_length([2, 1, 4, 3, 5, 9]) == ['Two', 'One', 'Three', 'Five', 'Four']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten']\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nby_length([1,2,3,4,5,6,7,8,9]) == ['One','Two','Three','Four','Five','Six','Seven','Eight','Nine']\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     by_length([]) == []\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     by_length([3,4,5,6,7,9,10,1,2,8,6,7]) == ['One', 'Six', 'Seven', 'Two', 'Three', 'Four', 'Five', 'Eight', 'Ten', 'Nine', 'Six', 'Seven', 'Eight']\nassert     by_length([4,3,6,9,2,5,8]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven']\nassert     by_length([8,6,4,2,3,9,1]) == ['Eight', 'Nine', 'Two', 'Three', 'Four', 'Five', 'Six']\nassert     by_length([1,5,4,3,2,9,8]) == ['One', 'Five', 'Four', 'Three', 'Two', 'Eight', 'Six']\nassert     by_length([9,5,4,3,2,8,1]) == ['Nine', 'Five', 'Four', 'Three', 'Two', 'Eight', 'One']\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     by_length([3, 1, 5, 3, 8]) == ['One', 'Three', 'Three', 'Two', 'Four']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['Two', 'Three', 'Three', 'One', 'Four', 'Five', 'Six', 'Seven', 'Eight']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 1]) == ['One', 'Two', 'Three', 'Three', 'One', 'Two', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert by_length([2, 3, 4, 5, 6, 8, 9, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 8, 9]\nassert by_length([5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 6]\nassert by_length([9, 1, 4, 6, 3, 8, 5, 7, 2, 2]) == [2, 2, 3, 4, 5, 6, 7, 8, 9, 9]"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     f(5) == [120, 1, 2, 6, 24], \"test_f\"\nassert     f(10) == [3628800, 1, 3, 4, 5, 6, 7, 8, 9, 10], \"test_f\"\nassert     f(8) == [24, 1, 4, 6, 24, 1, 2, 4], \"test_f\"\nassert     f(2) == [1, 1], \"test_f\"\n\nif __name__ == '__main__':\n    test()\n    print(\"All tests passed\")"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 1]\nassert     f(4) == [1, 1, 1, 1]\nassert     f(5) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not f(2) == f(1)\nassert not f(3) == f(2)\nassert f(1) == f(0)\nassert not f(0) == f(1)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     f(5) ==     [1,2,3,4,5]\nassert     f(10) ==    [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     f(2) == [1,1], \"Function f does not work as expected.\"\nassert     f(3) == [1,2,1], \"Function f does not work as expected.\"\nassert     f(5) == [1,2,3,4,5], \"Function f does not work as expected.\"\nassert     f(6) == [1,2,3,4,5,6], \"Function f does not work as expected.\"\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     f(3) == [1,2,3], \"f(3) is incorrect\"\nassert     f(2) == [1,2], \"f(2) is incorrect\"\nassert     f(1) == [1], \"f(1) is incorrect\"\nassert     f(0) == [], \"f(0) is incorrect\"\nassert     f(4) == [24,12,8,6], \"f(4) is incorrect\"\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     f(2) ==  [1, 1]\nassert     f(5) ==  [1, 2, 2, 6, 15]\nassert     f(10) ==  [1, 2, 2, 2, 4, 4, 5, 4, 5, 6, 6]\nassert     f(1) ==  [1]\nassert     f(0) ==  []\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     f(2) == [1, 1]\nassert     f(1) == [1]\nassert     f(5) == [1, 1, 2, 6, 24]\nassert     f(6) == [1, 1, 2, 6, 24, 720]\n\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(1) == (0, 0)\nassert     even_odd_palindrome(10) == (0, 0)\nassert     even_odd_palindrome(100) == (37, 37)\nassert even_odd_palindrome(1000) == (18, 19)\nassert even_odd_palindrome(10000) == (9, 10)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_odd_palindrome(4) == (1, 3)\nassert     even_odd_palindrome(10) == (0, 0)"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert even_odd_palindrome(2) == (0, 2)\nassert even_odd_palindrome(3) == (0, 2)\nassert even_odd_palindrome(4) == (0, 0)\nassert even_odd_palindrome(5) == (1, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_odd_palindrome(10) == (0, 1)\nassert     even_odd_palindrome(15) == (0, 2)\nassert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(2) == (1, 1)\nassert     even_odd_palindrome(3) == (2, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_nums([1, -2, 0, 2, -3, 1, -2, -3]) == 1, \"wrong result\"\nassert     count_nums([-8, -20, -1, -3, -2, -5, -6, -8]) == 1, \"wrong result\"\nassert     count_nums([-20, -20, -8, -1, -3, -2, -5, -6, -8]) == 3, \"wrong result\"\nassert     count_nums([-20, -20, -8, -1, -3, -2, -5, -6, -7]) == 0, \"wrong result\"\nassert     count_nums([-20, -20, -8, -1, -3, -2, -5, -6, -8, -9]) == 2, \"wrong result\"\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_nums([]) == 0, 'Empty array.'\nassert     count_nums([1]) == 0, 'Single element.'\nassert     count_nums([-1]) == 0, 'Single element with negative sign.'\nassert     count_nums([1, -1]) == 1, 'Single element with negative sign.'\nassert     count_nums([2, 5, 9]) == 2, 'Two elements.'\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_nums([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\nassert     count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 8\nassert count_nums([0, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == 10\nassert count_nums([-1, 2, 3, 4, 5, 6, 7, 8, 9, -1, 2, 3, 4, 5, 6, 7, 8, 9, -1, 2, 3, 4, 5, 6, 7, 8, 9]) == 11\nassert count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -263, -264, -265, -266, -267, -268, -269, -270, -271, -272, -273, -274, -275, -276, -277, -278, -279, -280, -281, -282, "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_nums([-123,12,34,12]) == 1\nassert     count_nums([12,34,12]) == 2\nassert     count_nums([1,2,3,4,5]) == 0\nassert     count_nums([1,-2,3,4,5]) == 2\nassert     count_nums([-1,2,3,4,5]) == 3\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ncount_nums([123, 1, -321, 0, 0, 0, -1, 0, 0]) == 2\ncount_nums([-1, 2, 3, 4, 5]) == 0\ncount_nums([1, 1, 1, 0, 0, 1, 1, 1]) == 0\ncount_nums([]) == 0\ncount_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\ncount_nums([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 11"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_nums([0,0,0]) == 0\nassert count_nums([0,1,2]) == 3\nassert count_nums([-10,-10,-10]) == 0\nassert count_nums([-12,-12,-13]) == 1\nassert count_nums([-1,-1,-1,1,1,1,2]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_nums([1, 2, 3, 4, 5, 6]) == 2\nassert     count_nums([7, 8, 9]) == 0\nassert     count_nums([-1, -1, -1]) == 1\nassert     count_nums([1, -3, 5]) == 1\nassert     count_nums([-1, 1, 3, 4, 5, 6]) == 0\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef move_many_balls(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2],..., arr[N]. The numbers \n    in the array will be randomly ordered. Your task is to determine if it is \n    possible to get an array sorted in non-decreasing order by performing the \n    following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_one_ball([3, 5, 1, 2, 4]) == True\nassert     move_one_ball([3, 5, 1, 2, 4, 4]) == False\nassert     move_one_ball([1, 5, 4, 3]) == True\nassert     move_one_ball([1, 5, 4, 3, 2]) == False\nassert     move_one_ball([1, 2, 3, 4, 5]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (move_one_ball([3, 2, 1, 3]) == True)\nassert     (move_one_ball([3, 2, 1, 3]) == True)\nassert     (move_one_ball([2, 1, 2, 3]) == False)\nassert     (move_one_ball([2, 1, 3, 2]) == False)\nassert     (move_one_ball([1, 2, 3]) == True)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(move_one_ball([7,4,5,6])) # True\nprint(move_one_ball([1,2,3,4])) # False\nprint(move_one_ball([1,1,1,1])) # True\nprint(move_one_ball([1,2,3,4])) # True\nprint(move_one_ball([2,1,3,4])) # False\nprint(move_one_ball([1,2,3,4,5,6,7,8,9,10])) # True\nprint(move_one_ball([10,9,8,7,6,5,4,3,2,1])) # False\nprint(move_one_ball([10,9,8,7,6,5,4,3,2,1,2])) # True\nprint(move_one_ball([1,2,3,4,5,6])) # True\nprint(move_one_ball([1,2,3,4,5,6,7,8,9,10])) # False\nprint(move_one_ball([10,9,8,7,6,5,4,3,2,1])) # False\nprint(move_one_ball([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])) # True\nprint(move_one_ball([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])) # False\nprint(move_one_ball([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])) # False\nprint(move_one_ball([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,26"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert move_one_ball([]) == True\nassert move_one_ball([1]) == True\nassert move_one_ball([1, 2]) == True\nassert move_one_ball([1, 2, 3]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_one_ball([3, 1, 4, 2]) == True\nassert     move_one_ball([3, 1, 4, 2]) == False\nassert     move_one_ball([3, 1, 4, 2]) == False\nassert     move_one_ball([3, 1, 4, 2]) == False\nassert     move_one_ball([]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     exchange([0, 1, 2, 3], [0, 1, 2, 3]) == \"NO\", \"1st example\"\nassert     exchange([1, 2, 3, 4], [0, 1, 2, 3]) == \"YES\", \"2nd example\"\nassert     exchange([0, 1, 2, 3], [0, 1, 2, 3, 4]) == \"YES\", \"3rd example\"\nassert     exchange([2, 3, 4, 5], [0, 1, 2, 3]) == \"YES\", \"4th example\"\nassert     exchange([2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3]) == \"NO\", \"5th example\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     exchange([], []) == \"NO\", \"Empty list\"\nassert     exchange([], [5]) == \"NO\", \"Empty list\"\nassert     exchange([1], [2]) == \"NO\", \"Lists of different lengths\"\nassert     exchange([1, 2], [2, 4]) == \"NO\", \"Even numbers\"\nassert     exchange([1, 2, 3], [3, 4, 5]) == \"YES\", \"Odd numbers\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         exchange([3,4,1], [2,5,3]) == \"YES\"\nassert         exchange([3,4,5], [2,3,1]) == \"NO\"\nassert         exchange([3,4,5], [2,2,3]) == \"YES\"\nassert         exchange([1,2,3], [4,5,6]) == \"NO\"\nassert         exchange([1,2,3], [3,4,5]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     exchange([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12]) == \"NO\"\nassert     exchange([2, 4, 6, 8, 10, 12], [1, 2, 3, 4, 5, 6]) == \"YES\"\n\nprint(\"Exercise 7 completed.\""
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     exchange(lst_a, lst_b) == \"YES\"\nassert     exchange(lst_a, lst_a) == \"NO\"\nassert     exchange(lst_b, lst_a) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     exchange([], [])    ==    \"NO\"\nassert     exchange([1], [])    ==    \"NO\"\nassert     exchange([2, 4], [1, 2, 3])    ==    \"YES\"\nassert     exchange([1, 2, 3], [2, 4])    ==    \"NO\"\nassert     exchange([2, 4], [1, 2, 3])    ==    \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     exchange([], []) == \"NO\"\nassert     exchange([], [1]) == \"NO\"\nassert     exchange([1], []) == \"NO\"\nassert     exchange([1, 2], [3, 4]) == \"NO\"\nassert     exchange([1, 2, 3], [4, 5, 6]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef generate_list():\n    \"\"\" This function generates a list of 10 even numbers in the range of 1 to 10\n    by using the range function in the built-in python module.\n    \"\"\"\n    pass\n\ndef main():\n    # generate_list()\n    print(exchange(generate_list(), generate_list()))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     histogram('aabccdd') == {'a': 3, 'b': 2, 'c': 1, 'd': 1}\nassert     histogram('abbcdd') == {'a': 2, 'b': 1, 'c': 1, 'd': 1}\nassert     histogram('abbcdd') == {'a': 2, 'b': 1, 'c': 1, 'd': 1}\nassert histogram('aaabccdd') == {'a': 3, 'b': 2, 'c': 1, 'd': 1, 'a': 2, 'b': 1, 'c': 1, 'd': 1}\nassert histogram('abcdd') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'a': 1, 'b': 1, 'c': 1, 'd': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     histogram(\"Hello World\") == {\"H\": 5, \"e\": 4, \"l\": 3, \"o\": 2, \" \": 1}\nassert     histogram(\"My name is Lokesh\") == {\"M\": 2, \"i\": 2, \"a\": 1, \"n\": 1, \"s\": 1, \"h\": 1, \"l\": 1, \"e\": 1}\nassert     histogram(\"i am a teacher\") == {\"i\": 2, \"a\": 2, \"m\": 1, \" \": 1, \"t\": 1, \"e\": 1, \" \": 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     histogram(\"Hello\") == {\"e\": 2, \"h\": 1, \"l\": 3, \"o\": 2, \"r\": 1}\nassert     histogram(\"hello\") == {\"e\": 2, \"h\": 1, \"l\": 2, \"o\": 2, \"r\": 1}\nassert     histogram(\"\") == {\"e\": 1, \"h\": 1, \"l\": 1, \"o\": 1, \"r\": 1}\nassert     histogram(\"ab\") == {\"e\": 1, \"h\": 1, \"l\": 1, \"o\": 1, \"r\": 1}\nassert     histogram(\"ae\") == {\"e\": 2, \"h\": 1, \"l\": 1, \"o\": 1, \"r\": 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     histogram('hello') == {'h': 1, 'e': 2, 'l': 3, 'o': 1}\nassert     histogram('hello world') == {'h': 2, 'e': 2, 'w': 1, 'r': 2, 'o': 1}\nassert     histogram('hello world hello') == {'h': 2, 'e': 2, 'w': 2, 'r': 1, 'o': 2}\nassert     histogram('hello world hello world hello world hello world hello world hello world') == {'h': 3, 'e': 3, 'w': 3, 'r': 2, 'o': 3}\nassert     histogram('hello world hello world hello world hello world') == {'h': 3, 'e': 3, 'w': 3, 'r': 2, 'o': 3}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     histogram('hello') == {'e': 1, 'h': 1, 'l': 2, 'o': 1}\nassert     histogram('aaaaa') == {'a': 4}\nassert     histogram('abbbb') == {'b': 3, 'a': 2}\nassert     histogram('abbc') == {'b': 2, 'a': 2, 'c': 1}\nassert     histogram('abbbbc') == {'b': 2, 'a': 2, 'c': 1, 'b': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     histogram(\"\") == {\"\": 0}\nassert     histogram(\"abc\") == {\"a\": 1, \"b\": 1, \"c\": 1}\nassert     histogram(\"aabb\") == {\"a\": 2, \"b\": 2}\nassert     histogram(\"abbccc\") == {\"a\": 3, \"b\": 2, \"c\": 3}\nassert     histogram(\"abcccd\") == {\"a\": 4, \"b\": 2, \"c\": 3, \"d\": 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     histogram(\"xy xy xx yx yx yx yx\") == {\n    \"x\": 2,\n    \"y\": 3\n}, \"incorrect\"\nassert     histogram(\"zzz yy yy\") == {\n    \"y\": 2,\n    \"z\": 1\n}, \"incorrect\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     ('a' in histogram('a b b b b')) == True\nassert     ('a' in histogram('a a a a')) == False\nassert     ('a' in histogram('a a a a a a')) == True\nassert     ('a' in histogram('a b b b b b')) == True\nassert     ('a' in histogram('a a a a a a a a a a a a a a a a a')) == True\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_delete('','') == ('',True)\nassert     reverse_delete('a','a') == ('a',True)\nassert     reverse_delete('a','z') == ('a',False)\nassert     reverse_delete('a','A') == ('a',False)\nassert     reverse_delete('ab','cd') == ('',False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_delete('123456789','1234567') == ('123456789','False')\nassert     reverse_delete('123456789','12356') == ('123456789','False')\nassert     reverse_delete('123456789','234567') == ('123456789','False')\nassert     reverse_delete('123456789','3456789') == ('123456789','False')\nassert     reverse_delete('123456789','23456') == ('123456789','True')\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_delete(s='banana',c='nan') ==    ('banana', True)\nassert     reverse_delete(s='banana',c='a') ==    ('abana', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_delete(\"geeksforgeeks\",\"sksf\") == (\"geskofgeeks\",True), \"reverse_delete\"\nassert     reverse_delete(\"geeksforgeeks\",\"gesksf\") == (\"geeksforgeeks\",True), \"reverse_delete\"\nassert     reverse_delete(\"geeksforgeeks\",\"geekssforgeeks\") == (\"geeksforgeeks\",False), \"reverse_delete\"\nassert     reverse_delete(\"geeksforgeeks\",\"geeksforgeeks\") == (\"geeksforgeeks\",False), \"reverse_delete\"\nassert     reverse_delete(\"geeksforgeeks\",\"geeksf\") == (\"geeksforgeeks\",False), \"reverse_delete\"\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_delete(\"aaca\",\"aa\") == (\"aaca\",\"True\")\nassert     reverse_delete(\"bccad\",\"ac\") == (\"bccad\",\"False\")\nassert     reverse_delete(\"abb\",\"abb\") == (\"\",True)\nassert     reverse_delete(\"abc\",\"cba\") == (\"abc\",\"False\")\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_delete('aab', 'a') == ('aba', True)\nassert     reverse_delete('aab', 'b') == ('ab', True)\nassert     reverse_delete('aab', 'c') == ('a', False)\nassert     reverse_delete('aab', 'd') == ('ab', False)\nassert     reverse_delete('', 'a') == ('', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_delete('abcd','cdba') == ('abcdcd',True)\nassert     reverse_delete('abcd','cbda') == ('abcdcd',True)\nassert     reverse_delete('abcd','cdab') == ('abcdcd',False)\nassert     reverse_delete('abcd','bcd') == ('abcdcd',True)\nassert     reverse_delete('abcd','bcdc') == ('abcdcd',False)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"odd_count function is working\")\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nodd_count([]) == []\nodd_count([\"1\", \"2\"]) == [2]\nodd_count([\"1\", \"11\", \"2\"]) == [1, 2]\nodd_count([\"1\", \"11\", \"1\"]) == [1, 2]\nodd_count([\"1\", \"12\", \"2\", \"2\", \"21\"]) == [2, 1, 2, 1, 2]\nodd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [1, 1, 1, 1, 1, 1]\nodd_count([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]) == [1, 1, 1, 1, 1, 1]\nodd_count([\"X\"]) == [0]\nodd_count([\"A\", \"B\"]) == [1, 1]\nodd_count([\"A\", \"B\", \"C\", \"D\"]) == [1, 2, 1]\nodd_count([\"a\", \"b\"]) == [1, 1]\nodd_count([\"a\", \"b\", \"c\"]) == [1, 1]\nodd_count([\"a\", \"b\", \"c\", \"d\"]) == [1, 1, 1]\nodd_count([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [1, 1, 1, 1, 1]\nodd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [1, 1, 1, 1, 1, 1]\nodd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == [1, 1, 1, 1, 1, 1, 1]\nodd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == [1, 1, 1, 1, 1, 1, 1, 1]\nodd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) == [1, 1, 1, 1, 1, 1, 1, 1, 1]\nodd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nodd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nodd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nodd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nodd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nodd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nodd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nodd_count"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nodd_count([]) == []\nodd_count([1, 2]) == [\"2\"]\nodd_count([1, 3, 5]) == [\"3\", \"5\"]\nodd_count([\"1\", \"11\", \"111\", \"5555\"]) == [\"1\", \"5\", \"5555\"]\nodd_count([\"101\"]) == [\"1\", \"1\"]\nodd_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199])\n\nodd_count_alternative = lambda lst: ['{0}'.format(str(len([x for x in lst if int(x) % 2!= 0])))\n                                     if lst else '']\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_count([\"e\", \"i\", \"i\", \"o\", \"w\", \"o\", \"o\", \"e\"]) == [\"1\", \"4\", \"2\", \"1\", \"3\", \"0\", \"1\", \"0\"], \"WRONG\"\nassert     odd_count([\"o\", \"o\", \"w\", \"o\", \"o\", \"e\"]) == [\"2\", \"1\", \"1\", \"2\", \"0\", \"0\"], \"WRONG\"\nassert     odd_count([\"e\", \"i\", \"i\", \"i\", \"i\", \"o\", \"w\", \"o\", \"o\", \"o\", \"e\"]) == [\"1\", \"4\", \"2\", \"1\", \"3\", \"0\", \"1\", \"0\", \"0\", \"0\", \"1\"], \"WRONG\"\nassert     odd_count([\"e\", \"i\", \"i\", \"i\", \"i\", \"o\", \"w\", \"o\", \"o\", \"o\", \"e\", \"o\", \"i\", \"i\", \"o\", \"o\", \"i\"]) == [\"1\", \"4\", \"2\", \"1\", \"3\", \"0\", \"1\", \"0\", \"0\", \"0\", \"1\", \"1\", \"2\", \"1\", \"3\", \"0\", \"1\"], \"WRONG\"\nassert     odd_count([\"e\", \"i\", \"i\", \"i\", \"i\", \"o\", \"w\", \"o\", \"o\", \"o\", \"e\", \"o\", \"i\", \"i\", \"o\", \"o\", \"i\", \"o\"]) == [\"1\", \"4\", \"2\", \"1\", \"3\", \"0\", \"1\", \"0\", \"0\", \"0\", \"1\", \"1\", \"2\", \"1\", \"3\", \"0\", \"1\", \"0\"], \"WRONG\"\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(odd_count([\"hello\", \"bye\"]))"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_count([\"the number is even\", \"the number is odd\"]) == [2, 2], \"First test failed\"\nassert     odd_count([\"the number is even\", \"the number is even\"]) == [0, 0], \"Second test failed\"\nassert     odd_count([\"the number is even\", \"the number is even\", \"the number is odd\"]) == [3, 2, 2], \"Third test failed\"\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_count([1,2,3,4]) == ['the number of odd elements in each string is 2'], \"Wrong answer.\"\nassert odd_count([1,2,3,4,5]) == ['the number of odd elements in each string is 4'], \"Wrong answer.\"\nassert odd_count([4,3,2,1]) == ['the number of odd elements in each string is 1'], \"Wrong answer.\"\nassert odd_count(['a', 'ab', 'abc', 'abcd', 'abcde']) == ['the number of odd elements in each string is 3'], \"Wrong answer.\""
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(odd_count([\"03\", \"05\", \"08\", \"09\", \"10\"])) # should return [\"5\"]\n    print(odd_count([\"01\", \"03\", \"05\", \"07\", \"09\"])) # should return [\"1\", \"3\"]\n    print(odd_count([\"07\", \"07\", \"07\", \"07\", \"07\", \"07\"])) # should return [\"2\"]\n    print(odd_count([\"00\", \"11\", \"22\", \"33\"])) # should return [\"4\"]"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     minSubArraySum([0]) == 0\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([1,3,5]) == 3\nassert     minSubArraySum([3,5,7]) == 4\nassert     minSubArraySum([2,4,6]) == 1\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     minSubArraySum([]) == None\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([1,2]) == 1\nassert     minSubArraySum([1,2,3]) == 1\nassert     minSubArraySum([1,2,3,4,5]) == 1\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    input = \n        [2,3,1,2,4,3]\n    print(minSubArraySum(input))"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minSubArraySum([2, 3, 1, 2, 4, 3]) == 3, \"Should be 3\"\nassert     minSubArraySum([2, 1, 5, 1, 3, 2]) == 7, \"Should be 7\"\nassert     minSubArraySum([2, 3, 4, 1, 5]) == 1, \"Should be 1\"\nassert     minSubArraySum([3, 4, 1, 5]) == 4, \"Should be 4\"\nassert     minSubArraySum([1]) == 1, \"Should be 1\"\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     minSubArraySum([1,2,3,4,5]) == 3\nassert     minSubArraySum([3,4,1,1,2,1]) == 2\nassert     minSubArraySum([1]) == 1\nassert minSubArraySum([]) == "
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    grid_1 = [[0, 0, 0, 0],\n              [0, 1, 0, 0],\n              [0, 0, 0, 0],\n              [0, 0, 0, 0]]\n    capacity_1 = 3\n    print(max_fill(grid_1, capacity_1))\n\n    grid_2 = [[0, 1, 0, 0],\n              [0, 0, 0, 0],\n              [0, 0, 0, 0],\n              [0, 0, 0, 0]]\n    capacity_2 = 4\n    print(max_fill(grid_2, capacity_2))\n\n    grid_3 = [[0, 1, 0, 0, 0],\n              [0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0],\n              [0, 0, 0, 0, 0]]\n    capacity_3 = 5\n    print(max_fill(grid_3, capacity_3)"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert max_fill([[1,1,1],[0,1,1],[1,0,1]], 1) == 0\nassert max_fill([[1,1,1],[0,1,1],[1,0,1]], 2) == 1\nassert max_fill([[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]], 2) == 2\nassert max_fill([[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]], 3) == 3\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_fill([[1,2,2,1,1,1],[2,2,1,1,1,1]], 4) == 2\nassert     max_fill([[1,1,1],[1,1,1],[1,1,1]], 4) == 1\nassert     max_fill([[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]], 4) == 4\nassert     max_fill([[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]], 4) == 0\nassert     max_fill([[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]], 4) == 9\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_fill([[0,0,0,1,0,0,1],\n        [0,1,1,0,0,0,1],\n        [1,1,0,0,1,1,0],\n        [0,1,0,0,0,1,1],\n        [0,1,0,0,1,0,0],\n        [1,1,1,0,1,1,0],\n        [0,1,0,0,1,1,1]], \n        2) == 4\n\ndef max_fill_v2(grid, capacity):\n    \"\"\"\n    * We have some well conditions, each well has a capacity and a bucket that can be used to extract water from it.\n    * To extract water from each well, we need to find how many units of water we can extract.\n    * To extract water, we first need to lower the bucket.\n    * For each well, we want to store a count of the lower number of buckets.\n    * There are two situations:\n        * When we lower the bucket, we can extract water.\n        * When we lower the bucket, we cannot extract water.\n    * We need to find the maximum number of times we need to lower the bucket, and we can minimize the number of times the bucket needs to be lowered.\n    * So, we can solve this problem by calculating the number of times the bucket needs to be lowered.\n    * Time complexity: O(N^2)\n    * Space complexity: O(N)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_fill([[0, 1, 1, 1],\n                    [0, 1, 1, 1],\n                    [1, 1, 1, 1],\n                    [0, 0, 0, 0]], 2) == 1\nassert     max_fill([[0, 1, 1, 1],\n                    [0, 1, 1, 1],\n                    [1, 1, 1, 1],\n                    [0, 0, 0, 0]], 5) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([0,1,2,1,0]) == [0,0,1,1,2]\nassert     sort_array([0,1,2,1,1]) == [0,1,1,2,2]\nassert     sort_array([1,0,2,0,1,2,1,1]) == [1,0,1,0,2,1,1,2"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_array([1,0,1,0,1,1]) == [0,0,1,1,1,1]\nassert sort_array([1,1,0,0,1,1,0,1]) == [0,0,0,0,1,1,1,1]"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_array([1, 2, 1]) == [1, 2, 1], \"First\"\nassert     sort_array([1, 1, 2]) == [1, 1, 2], \"Second\"\nassert     sort_array([2, 2, 1]) == [1, 2, 2], \"Third\"\nassert     sort_array([2, 1, 1]) == [1, 1, 2], \"Fourth\"\nassert     sort_array([1, 1, 2]) == [1, 2, 1], \"Fifth\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([1, 1, 2, 2, 0, 0, 1]) ==  [0, 0, 1, 1, 1, 2, 2]\nassert     sort_array([0, 1, 1, 0, 1, 0, 1]) ==  [0, 0, 0, 1, 1, 1, 1]\nassert     sort_array([0, 1, 1, 0, 1, 0, 1, 2]) ==  [0, 0, 0, 1, 1, 1, 1, 2]\nassert     sort_array([1, 2, 1, 0, 2, 1, 0, 2]) ==  [0, 0, 1, 1, 1, 2, 2, 2]\nassert     sort_array([1, 2, 1, 1, 1, 2, 1, 0, 2]) ==  [0, 0, 1, 1, 1, 2, 2, 2, 1]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([1,2,3]) ==    [1,2,3]\nassert     sort_array([1,2,0,1,3,1,1,3]) ==    [0,1,1,1,1,2,3,3]\nassert     sort_array([1,2,3,4]) ==    [1,2,3,4]\nassert     sort_array([1,0,0,0,0,0]) ==    [0,0,1,0,0,0]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_array([1, 2, 3, 4, 5, 6, 7]) == [7, 6, 5, 4, 3, 2, 1]\nassert     sort_array([3, 5, 2, 7, 2]) == [2, 2, 7, 5, 3]\nassert     sort_array([6, 8, 2, 3, 0, 7, 9]) == [7, 8, 9, 6, 3, 2, 0]"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array([5,5,5,5,0,0,1,1,1,1,1,1]) == [0,1,1,1,1,1,1,5,5,5,5,5]\nassert     sort_array([5,5,5,5,0,0,1,1,1,1,1,1,1,1,1,1]) == [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1]"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([1,10,2,3,4]) == sorted([1,10,2,3,4])\nassert     sort_array([1,10,2,3,4,0]) == sorted([1,10,2,3,4,0])\nassert     sort_array([9,8,7,6,5,4]) == sorted([5,6,7,8,9])\nassert     sort_array([9,8,7,6,5,4,0]) == sorted([5,6,7,8,9,0])\nassert     sort_array([9,8,7,6,5,4,3]) == sorted([5,6,7,8,9,3,4])\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([1,2,3,0]) ==     [0,1,2,3]\nassert     sort_array([1,2,3,1]) ==     [1,2,3,1]\nassert     sort_array([1,1,1,1]) ==     [1,1,1,1]\nassert     sort_array([0,0,0]) ==     [0,0,0]\nassert     sort_array([0]) ==     [0]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([1,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,0,0,1,1,0,1,1,0,1,0,1,0,0,0,0,1,0,1,0,1,1,1,1,0,0,0,1,0,0,1,0,1,1,0,1,0,1,0,1,1,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,1,1,1,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,1,1,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,1,1,1,1,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,0,0,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     select_words(\"codewars\", 1) == [\"codewars\"]\nassert     select_words(\"codewars\", 0) == []\nassert     select_words(\"codewars\", 5) == [\"codewars\"]\nassert     select_words(\"codewars\", 10) == [\"codewars\"]\nassert     select_words(\"codewars\", 17) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     select_words(\"lorem ipsum\", 2) == [\"lorem\", \"ipsum\"], \"This function should return ['lorem', 'ipsum']\"\nassert select_words(\"lorem ipsum\", 2) == [\"lorem\", \"ipsum\"], \"This function should return ['lorem', 'ipsum']\"\nassert select_words(\"lorem ipsum\", 1) == [\"lorem\"], \"This function should return ['lorem']\"\nassert select_words(\"lorem ipsum\", 3) == [\"ipsum\", \"lorem\"], \"This function should return ['lorem', 'ipsum']\"\nassert select_words(\"lorem ipsum\", 5) == [], \"This function should return []\"\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    s = \"this is a test\"\n    assert select_words(s, 2) == ['th', 'is', 'is', 'is', 't', 'is', 'a', 'a', 'a', 't','s','s','s', 't', 'h']\n    s = \"this is a test\"\n    assert select_words(s, 3) == ['th', 'is', 'is', 'is', 't', 'is', 'a', 'a', 'a', 't','s','s','s', 't', 'h']\n    s = \"this is a test\"\n    assert select_words(s, 4) == ['th', 'is', 'is', 'is', 't', 'is', 'a', 'a', 'a', 't','s','s','s', 't', 'h']\n    s = \"this is a test\"\n    "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     select_words(\"\", 1) == []\nassert     select_words(\"a b\", 1) == [\"a\"]\nassert     select_words(\"a a b b\", 1) == [\"a\", \"b\"]\nassert     select_words(\"aa aa bb bb\", 2) == [\"aa\", \"bb\"]\nassert     select_words(\"aa aa bb bb\", 1) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     select_words(\"speling\", 1) == [\"s\", \"p\", \"l\"]\nassert     select_words(\"speling\", 2) == [\"sp\", \"pl\", \"eling\"]\nassert     select_words(\"speling\", 3) == [\"speling\"]\nassert     select_words(\"speling\", 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     select_words(\"hello world\", 1) == [\"hello\", \"world\"], \"First word is not in string\"\nassert     select_words(\"hello world\", 2) == [\"hello\", \"world\"], \"Second word is not in string\"\nassert     select_words(\"hello world\", 3) == [\"hello\", \"world\"], \"Third word is not in string\"\nassert     select_words(\"hello world\", 4) == [\"hello\", \"world\"], \"Fourth word is not in string\"\nassert     select_words(\"hello world\", 5) == [\"hello\", \"world\"], \"Fifth word is not in string\"\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     select_words('asdf fjdk; afed, foo', 2) == ['asdf', 'foo']\nassert     select_words('asdf fjdk; afed, foo', 1) == ['asdf', 'foo']\nassert     select_words('asdf fjdk; afed, foo', 5) == []\nassert     select_words('asdf fjdk; afed, foo', 4) == ['asdf']\nassert     select_words('asdf fjdk; afed, foo', 3) == ['asdf', 'foo']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_closest_vowel('hello') == 'l', \"Expected l, received {}\".format(get_closest_vowel('hello'))\nassert     get_closest_vowel('apples') == 'e', \"Expected e, received {}\".format(get_closest_vowel('apples'))\nassert     get_closest_vowel('z') == '', \"Expected, received {}\".format(get_closest_vowel('z'))\nassert     get_closest_vowel('apple') == 'e', \"Expected e, received {}\".format(get_closest_vowel('apple'))\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert get_closest_vowel('joy') == ''\nassert get_closest_vowel('y') == 'y'\nassert get_closest_vowel('go') == 'o'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_closest_vowel('hello') == 'e'\nassert     get_closest_vowel('school') == 'o'\nassert     get_closest_vowel('nice') == 'a'\nassert     get_closest_vowel('book') == 'o'\nassert     get_closest_vowel('chair') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_closest_vowel(\"tacocat\") == \"ta\"\nassert get_closest_vowel(\"tacocat\") == \"\"\nassert get_closest_vowel(\"tacocat\") == \"\"\nassert get_closest_vowel(\"tacocat\") == \"\"\nassert get_closest_vowel(\"tacocat\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_closest_vowel(\"aee\") == \"a\"\nassert     get_closest_vowel(\"ae\") == \"\"\nassert     get_closest_vowel(\"a\") == \"\"\nassert     get_closest_vowel(\"ae\") == \"\"\nassert     get_closest_vowel(\"ae\") == \"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     match_parens(['(())','(())','()()']    == 'Yes')\nassert     match_parens(['(())','()()','(())','()()','()()'    == 'Yes')\nassert     match_parens(['(())','(())','()()','(())','(())'    == 'No')\nassert     match_parens(['(())','(())','(())','(())','(())','(())'    == 'Yes')\n\nprint('All the tests are passed'"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     match_parens([('(', ')')]) == 'Yes'\nassert     match_parens([('(', ')'), ('()', '('), ('(', ')'), ('(', ')')]) == 'Yes'\nassert     match_parens([('(', ')'), ('(', ')'), ('(', ')')]) == 'No'\n\nif __name__ == \"__main__\":\n    import sys\n    def test(did_pass):\n        \"\"\"  Print the result of a test.  \"\"\"\n        linenum = sys._getframe(1).f_lineno   # Get the caller's line number.\n        if did_pass:\n            msg = \"Test at line {0} ok.\".format(linenum)\n        else:\n            msg = (\"Test at line {0} FAILED.\".format(linenum))\n        print(msg)\n\n    test(match_parens([('(', ')')]) == 'Yes')\n    test(match_parens([('(', ')'), ('()', '('), ('(', ')'), ('(', ')')]) == 'Yes')\n    test(match_parens([('(', ')'), ('(', ')'), ('(', ')')]) == 'No'"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     match_parens(['(()())', '(())()'] ) == 'Yes', 'You are wrong'\nassert     match_parens(['((((', '())))))', '((()))') == 'No', 'You are wrong'\nassert     match_parens(['((((((((', '()))))))))']) == 'No', 'You are wrong'\nassert     match_parens(['(()())', '(())()'] ) == 'No', 'You are wrong'\n\nprint('You are good, keep it up!')"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     match_parens(['(())()', '()((((', '((()', '(()(()', '((()(()((', '((())()', ')))))', '))((((()))))', ')))))', '(()(((((())', '((((()()', '((((()())']) == 'Yes')\nassert     match_parens(['(((()))', '((((()))))', '))(((((()))', '(()()(()(((((())', '((((()((()))))', '((()((()))))', '((((()(()()((((((())))))))))']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert match_parens(['(()())', '()((()))']) == 'Yes'\nassert match_parens(['(()))', '()))']) == 'No'\nassert match_parens(['((()))', '((()))']) == 'No'\nassert match_parens(['((()))', '()()()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     match_parens([\"()()()()\"]) == 'Yes'\nassert match_parens([\"((()))\", \"()(())\"]) == 'Yes'\nassert match_parens([\"(()(()(()))\", \"(((()()())(())))\"]) == 'Yes'\nassert match_parens([\"(()()(()))\", \"(((()()(())))\"]) == 'No'\nassert match_parens([\"(())()()()\", \"(())()(())\"]) == 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximum([2, 3, 5, 7, 11, 13], 4) == [7, 11, 13, 2], \"Wrong\"\nassert     maximum([2, 3, 5, 7, 11, 13], 5) == [7, 11, 13, 2, 3], \"Wrong\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum([1, 2, 3, 4, 5], 2) == [4, 5], \"Wrong\"\nassert maximum([1, 2, 3, 4, 5], 1) == [4], \"Wrong\"\nassert maximum([], 1) == [], \"Wrong\"\nassert maximum([0, 2, 1, 2, 3], 3) == [1, 2, 3], \"Wrong\"\n\n\nclass Test(unittest.TestCase):\n    def test_maximum(self):\n        self."
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nmaximum([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    arr, k = \n    \n    arr1 = [-4, -2, -1]\n    k1 = 2\n    arr2 = [-5, -1, -2, -4]\n    k2 = 3\n    arr3 = [-1, -2]\n    k3 = 1\n\n    arr4 = [5, 1, 3, 2, 4]\n    k4 = 4\n\n    arr5 = [2, 5, 6, 0, 1]\n    k5 = 3\n\n    print(maximum(arr1, k1))\n    print(maximum(arr2, k2))\n    print(maximum(arr3, k3))\n    print(maximum(arr4, k4))\n    print(maximum(arr5, k5))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maximum([-2,1,-3,4,-1,2,1,-5,4], 3) == [-5,4,4]\nassert     maximum([2,-2,3,4,10,1,-3,-4,5,1], 4) == [-3,-3,3,4]\nassert     maximum([-2,1,-3,4,-1,2,1,-5,4], 2) == [1,4]\nassert     maximum([], 1) == []\nassert     maximum([], 2) == []\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solution([2, 4, 5, 8, 3, 2]) == 9\nassert     solution([2, 4, 5, 8, 3]) == 9\nassert     solution([1, 2, 3, 4, 5]) == 0\nassert     solution([1, 2, 3, 4, 5, 6]) == 0\nassert     solution([2, 2, 1]) == 3\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solution([2, 4, 6, 8, 10]) == 0\nassert     solution([10]) == 0\nassert     solution([1, 2, 3, 4, 5]) == 0\nassert     solution([]) == 0\nassert     solution([1, 3, 5]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solution([3, 1, 2, 5]) == 1\nassert     solution([1, 2, 3, 4]) == 0\nassert     solution([2, 4, 1, 3, 5]) == "
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     solution([2,1,3]) == 5\nassert     solution([1,2,3,4,5]) == 6\nassert     solution([1,2,3,4,5]) == 6\nassert     solution([]) == 0\nassert     solution([1,2,3,4,5]) == 6\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0, 'Should be 0.'\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 46, 'Should be 46.'"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 18, \"Should be 18\"\nassert     solution([2, 4, 6, 8, 10]) == 18, \"Should be 18\"\nassert     solution([1, 3, 5]) == 0, \"Should be 0\"\nassert     solution([]) == 0, \"Should be 0\"\nassert     solution([1, 3, 5, 7, 9]) == 4, \"Should be 4\"\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_elements([], 0) == 0, 'Error: 1'\nassert     add_elements([1, 2, 3, 4, 5, 6, 7], 5) == 11, 'Error: 2'\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 25, 'Error: 3'\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 55, 'Error: 4'\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 5) == 114, 'Error: 5'\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(add_elements([1, 2, 2, 3, 5], 2))\nprint(add_elements([1, 1, 2, 2, 2, 2], 2))\n\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\narr = [12, 345, 2, 67, 123, 34, 5, 9, 12, 34]\nk = 3\n\nprint(add_elements(arr, k))"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_elements([1, 2, 3, 4], 1) == 12, 'Wrong result'\nassert     add_elements([1, 2, 3, 4], 2) == 10, 'Wrong result'\nassert     add_elements([1, 2, 3, 4], 3) == 16, 'Wrong result'\nassert     add_elements([1, 2, 3, 4], 4) == 19, 'Wrong result'\nassert     add_elements([1, 2, 3, 4], 5) == 11, 'Wrong result'\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_elements([1, 0, 3, 5, 7], 4) == 10\nassert     add_elements([1, 2, 3, 4, 5, 6, 7], 5) == 20\nassert     add_elements([0, 1, 1, 2, 3, 7], 5) == 15\nassert     add_elements([9, 4, 0, 3, 8, 6, 7, 9], 2) == 10\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_elements([11, 9, 12, 13, 14, 15, 17, 19], 4) == 17\nassert     add_elements([1, 4, 5, 7, 8, 10, 12, 20], 6) == 12\nassert     add_elements([-1, -4, 0, -2, -3, -5, -6], 3) == -10\nassert     add_elements([1], 1) == 1\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    get_odd_collatz(5) == [5,4,3,2,1]\n    get_odd_collatz(20) == [20,8,4,2,1]\n    get_odd_collatz(1) == [1]\n    get_odd_collatz(2) == [2]\n    get_odd_collatz(3) == [3]\n    get_odd_collatz(4) == [2,4]\n    get_odd_collatz(5) == [5,4,3,2,1]\n    get_odd_collatz(6) == [2,4,2,1]\n    get_odd_collatz(7) == [2,4,3,2,1]\n    get_odd_collatz(8) == [2,4,2,1]\n    get_odd_collatz(9) == [2,3,3,2,1]\n    get_odd_collatz(10) == [3,3,2,2,1]\n    get_odd_collatz(11) == [3,5,2,2,1]\n    get_odd_collatz(12) == [5,4,2,2,1]\n    get_odd_collatz(13) == [5,3,2,2,1]\n    get_odd_collatz(14) == [5,5,2,2,1]\n    get_odd_collatz(15) == [5,4,3,2,1]\n    get_odd_collatz(16) == [5,3,5,2,1]\n    get_odd_collatz(17) == [5,5,3,2,1]\n    get_odd_collatz(18) == [5,5,5,2,1]\n    get_odd_collatz(19) == [5,4,4,2,1]\n    get_odd_collatz(20) == [5,4,5,2,1]\n    get_odd_collatz(21) == [5,4,5,4,2,1]\n    get_odd_collatz(22) == [5,4,5,4,3,2,1]\n    get_odd_collatz(23) == [5,4,5,4,5,2,1]\n    get_odd_collatz(24) == [5,4,5,4,5,4,2,1]\n    get_odd_collatz(25) == [5,4,5,4,5,5,2,1]\n    get_odd_collatz(26) == [5,4,5,4,5,5,5,2,1]\n    get_odd_collatz(27) == [5,5,4,4,5,5,5,2,1]\n    get_odd_collatz(28) == [5,5,5,4,5,5,5,4,2,1]\n    get_odd_collatz(29) == [5,5,5,5,5,5,5,5,5,2,1]\n    get_odd_collatz(30) == [5,5,5,5,5,5,5,5,5,5,2,1]\n    get_odd_collatz(31) == [5,5,5,5,5,5,5,5,5,5,5,2,1]\n    get_odd_collatz(32) == [5,5,5,5,5,5,5,5,5,5,5,5,2,1]\n    get_odd_collatz(33) == [5,5,5,5,5,5,5,5,5,5,5,5,5,2,1]\n    get_odd_collatz(34) == [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2]\n    get_odd_collatz(35) == [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]\n    get_odd_collatz(36) == [5,5,5,5,5,5,5,5,5,5"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(3) == [3, 2, 1]\nassert     get_odd_collatz(4) == [1, 2, 1]\nassert     get_odd_collatz(5) == [1, 2, 2, 1]\nassert     get_odd_collatz(7) == [1, 2, 2, 3, 3, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(get_odd_collatz(1))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_odd_collatz(1) == [1]\n    "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    # import doctest\n    # doctest.testmod()\n\n    # Test case\n    # print(get_odd_collatz(6))\n    # print(get_odd_collatz(10))\n    # print(get_odd_collatz(14))\n    # print(get_odd_collatz(20))\n    # print(get_odd_collatz(22))\n\n    #print(get_odd_collatz(2))\n    #print(get_odd_collatz(7))\n    #print(get_odd_collatz(5))\n    #print(get_odd_collatz(17))\n    print(get_odd_collatz(101))\n    #print(get_odd_collatz(13))\n    #print(get_odd_collatz(15))"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,2]\nassert     get_odd_collatz(3) == [1,3,10]\nassert     get_odd_collatz(4) == [1,2,5,8]\nassert     get_odd_collatz(5) == [1,3,8,15,31]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1)    ==     [1]\nassert     get_odd_collatz(2)    ==    [1,2]\nassert     get_odd_collatz(3)    ==    [1,2,3]\nassert     get_odd_collatz(4)    ==    [1,2,3,5]\nassert     get_odd_collatz(5)    ==    [1,3,5,8]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_odd_collatz(3) == [1, 2, 3]\nassert     get_odd_collatz(4) == [2, 2]\nassert     get_odd_collatz(5) == [1, 2, 3, 4, 5]\n\n\"\"\"\n2.    Given a list of positive integers, return the sum of the largest product of four consecutive numbers in the list.\n\nFor example, given the list: [20, 1, 4, 6, 5], the sum of the four adjacent numbers is 24, \nso your function should return 24. Given the list: [20, 1, 4, 6, 5, 8], \nthe sum of the four adjacent numbers is 120, so your function should return 120.\n\"\"\"\ndef get_sum_of_four_adjacent_numbers(L):\n    \"\"\"\n    Given a list of positive integers, return the sum of the largest product of four consecutive numbers in the list.\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,2]\nassert     get_odd_collatz(3) == [1,3,5]\nassert     get_odd_collatz(5) == [5,10,15,20,25,30]\nassert     get_odd_collatz(6) == [6,6,3,9,21,36,45]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_odd_collatz(1) == [[1]]\nassert     get_odd_collatz(4) == [[1, 2], [2, 1]]\nassert     get_odd_collatz(9) == [[1, 2, 3, 5, 8], [2, 1, 3, 6, 5], [2, 1, 4, 6, 5],\n                                [1, 2, 6, 5, 4], [2, 1, 5, 4, 3]]\nassert     get_odd_collatz(16) == [[1, 2, 4, 7, 13, 16], [2, 1, 6, 10, 15, 16],\n                                [2, 1, 10, 9, 13, 16], [1, 2, 12, 16, 15, 13],\n                                [2, 1, 15, 14, 13, 16]]\nassert     get_odd_collatz(976) == [[1, 2, 7, 14, 36, 121], [2, 1, 7, 12, 25, 121],\n                                [2, 1, 7, 21, 56, 121], [1, 2, 14, 36, 121, 14],\n                                [2, 1, 25, 56, 121, 14]]\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     valid_date(datetime.datetime.strftime(datetime.datetime.strptime('10-15-2020', '%d-%m-%Y'), '%Y-%m-%d'))\nassert     valid_date(datetime.datetime.strftime(datetime.datetime.strptime('1-20-2020', '%d-%m-%Y'), '%Y-%m-%d'))\nassert     valid_date(datetime.datetime.strftime(datetime.datetime.strptime('12-10-2020', '%d-%m-%Y'), '%Y-%m-%d'))\nassert     valid_date(datetime.datetime.strftime(datetime.datetime.strptime('10-10-2020', '%d-%m-%Y'), '%Y-%m-%d'))\nassert     valid_date(datetime.datetime.strftime(datetime.datetime.strptime('15-1-2020', '%d-%m-%Y'), '%Y-%m-%d'))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     valid_date(\"\")==False, \"empty string\"\nassert     valid_date(\"a\")==False, \"non-empty string\"\nassert     valid_date(\"12-12-2020\")==False, \"wrong date format\"\nassert     valid_date(\"01-01-2020\")==False, \"least one day\"\nassert     valid_date(\"13-12-2020\")==True, \"more days than 31 days\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert valid_date(\"01-01-2001\") == True\nassert valid_date(\"\") == False\nassert valid_date(\"1\") == False\nassert valid_date(\"\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     valid_date('') == False, 'The empty string should be False'\nassert     valid_date('1-1-2016') == False, 'Wrong format'\nassert     valid_date('2-1-2019') == True, 'The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2'\nassert     valid_date('1-1-1000') == False, 'The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2'\nassert     valid_date('1-1-1980') == False, 'The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2'\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     valid_date('11-30-2001')\nassert not     valid_date('-15-31-2001')\nassert not     valid_date('0-31-2001')\nassert     valid_date('1-30-2001')\nassert     valid_date('2-29-2001')\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     valid_date(\"2-6-2020\") == False, \"An error occurred\"\nassert     valid_date(\"-1-1-2020\") == False, \"An error occurred\"\nassert     valid_date(\"-1-31-2020\") == True, \"An error occurred\"\nassert     valid_date(\"12-31-2020\") == False, \"An error occurred\"\nassert     valid_date(\"31-12-2020\") == True, \"An error occurred\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     valid_date('10-02-2019') == False\nassert     valid_date('10-02-2020') == True\nassert     valid_date('10-02-0000') == False\nassert     valid_date('10-02-2018') == False\nassert     valid_date('10-02-2020') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     valid_date(\"\") == False, \"Invalid date\"\nassert     valid_date(\"32-03-2019\") == False, \"Invalid date\"\nassert     valid_date(\"\") == False, \"Invalid date\"\nassert     valid_date(\"32-03-2020\") == False, \"Invalid date\"\nassert     valid_date(\"31-12-2020\") == True, \"Invalid date\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     valid_date(\"2-28-2026\")\nassert     valid_date(\"11-19-2010\")\nassert     valid_date(\"13-10-2020\")\nassert     valid_date(\"11-31-2020\")\nassert     valid_date(\"9-27-2021\")\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_words(\"Hello world, world, hello\") == ['hello', 'world', 'world', 'hello']\nassert     split_words(\"Hello, world, world\") == ['hello', 'world', 'world']\nassert     split_words(\"Hello, world, hello\") == ['hello', 'world', 'hello']\nassert     split_words(\"Hello, world, world, hello\") == ['hello', 'world', 'world', 'hello']\nassert     split_words(\"a, b, c\") == ['a', 'b', 'c']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_words('a, b, c') == ['a', 'b', 'c']\nassert     split_words('a, b,  c') == ['a', 'b', 'c']\nassert     split_words('a, b, c,d') == ['a', 'b', 'c', 'd']\nassert     split_words('a,b,c,d') == ['a', 'b', 'c', 'd']\nassert     split_words('a,b,c') == ['a', 'b', 'c']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_words('hello, this, is, my, test') == ['hello', 'this', 'is','my', 'test']\nassert     split_words('hello, this, is, my, test, the') == ['hello', 'this', 'is','my', 'test', 'the']\nassert     split_words('hello, this, is, my, test, the, it') == ['hello', 'this', 'is','my', 'test', 'the', 'it']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_vowels(txt):\n    '''\n    Given a string of words, return a dictionary that counts the number of vowels in each word, capital and lowercase \n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_word_count(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_words('lorem ipsum') == ['lorem', 'ipsum']\nassert     split_words('lorem   ipsum') == ['lorem', 'ipsum']\nassert     split_words('lorem ipsum, how are you?') == ['lorem', 'ipsum', ',', 'how', 'are', 'you', '?']\nassert     split_words('lorem ipsum, how are you? a, b, c, d, e') == ['lorem', 'ipsum', ',', 'how', 'are', 'you', 'a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split_words('hello, world!') == ['hello', 'world']\nassert     split_words('hello, world, haha!') == ['hello', 'world', 'haha']\nassert     split_words('hello, world, haha, kitty!') == ['hello', 'world', 'haha', 'kitty']\nassert     split_words('hello, world, haha, kitty, cat, pang') == ['hello', 'world', 'haha', 'kitty', 'cat', 'pang']\nassert     split_words('hello, world, haha, kitty, cat, pang, hello, world') == ['hello', 'world', 'haha', 'kitty', 'cat', 'pang', 'hello', 'world']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert split_words(\"one,two,three\") == ['one', 'two', 'three']\nassert split_words(\"one, two,three\") == ['one', 'two', 'three']\nassert split_words(\"one,two,three.\") == ['one', 'two', 'three']\nassert split_words(\"one,two,three.\") == ['one', 'two', 'three']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_words(\"Hi, how are you?\") == ['Hi', 'how', 'are', 'you', '?']\nassert     split_words(\"Hi, how are you? And you, too, are fine.\") == ['Hi', 'how', 'are', 'you', '', 'And', 'you', 'too', 'are', 'fine', '']\nassert     split_words(\"Hi, how are you, and you too.\") == ['Hi', 'how', 'are', 'you', '', '', 'And', 'you', 'too', '']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_sorted([1,2,3]) == True\nassert     is_sorted([3,2,1]) == False\nassert     is_sorted([1,1,1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_sorted([1,2,3,4,4]) == True, \"Wrong Answer\"\nassert     is_sorted([1,3,4,4]) == False, \"Wrong Answer\"\nassert     is_sorted([3,4,3,4]) == False, \"Wrong Answer\"\nassert     is_sorted([4,4,4,4]) == True, \"Wrong Answer\"\nassert     is_sorted([4,3,4,4]) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sorted([-4, -3, -2, 1, 1, 2, 4]) == True\nassert     is_sorted([-5, -3, 1, 1, 1, 2, 4]) == False\nassert     is_sorted([-4, -3, -2, -1, 1, 1, 2, 4]) == False\nassert     is_sorted([-4, -3, -2, 1, 1, 2, 4, 5]) == False\n\ndef is_sorted_2(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    if len(lst) == 1:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection((1,2), (2,3)) == 'NO'\nassert     intersection((1,4), (2,3)) == 'NO'\nassert     intersection((1,4), (2,2)) == 'NO'\nassert     intersection((1,4), (2,3)) == 'NO'\nassert     intersection((1,4), (2,3), (1,2)) == 'YES'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (intersection((1, 3), (2, 4))) == \"NO\"\nassert     (intersection((1, 3), (4, 7))) == \"YES\"\nassert     (intersection((1, 5), (2, 7))) == \"NO\"\nassert     (intersection((1, 2), (2, 4))) == \"NO\"\nassert     (intersection((2, 3), (1, 3))) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersection((1,2), (3,4)) == \"NO\"\nassert     intersection((0,10), (2,5)) == \"NO\"\nassert     intersection((1,2), (1,2)) == \"YES\"\nassert     intersection((3,4), (2,5)) == \"YES\"\nassert     intersection((1,2), (1,10)) == \"YES\""
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection((1, 4), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (2, 5)) == \"NO\"\nassert     intersection((1, 3), (5, 7)) == \"YES\"\nassert     intersection((1, 3), (0, 5)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     intersection((0, 5), (0, 5)) == \"NO\"\nassert intersection((0, 5), (1, 4)) == \"YES\"\nassert intersection((1, 3), (2, 4)) == \"NO\"\nassert intersection((1, 2), (1, 2)) == \"YES\"\nassert intersection((1, 2), (2, 3)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     intersection((1,3),(2,4)) == \"NO\"\nassert     intersection((1,3),(3,4)) == \"YES\"\nassert     intersection((1,3),(2,5)) == \"NO\"\nassert     intersection((1,3),(1,3)) == \"YES\"\nassert     intersection((1,3),(3,5)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nintersection((1, 3), (2, 4)) == \"YES\"\nintersection((1, 3), (1, 3)) == \"YES\"\nintersection((1, 3), (2, 4)) == \"NO\"\nintersection((2, 3), (1, 3)) == \"NO\"\nintersection((2, 3), (2, 4)) == \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_prime_divisibility(n):\n    \"\"\"You are given a positive integer n > 1.\n    You have to check if n is divisible by 3 and 5.\n    If so return \"YES\", otherwise return \"NO\".\n    Example: n = 14, output = \"YES\".\n    Example: n = 19, output = \"NO\".\n    If n isn't divisible by 3 or 5, return \"NO\".\n    Note: if n is divisible by 3,\n    it doesn't matter if n is divisible by 5.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prod_signs([1, 2, 3]) == None\nassert     prod_signs([2, -3, -1, -2]) == -6\nassert     prod_signs([1, 2, 3, 0]) == 0\nassert     prod_signs([-1, -2, -3, -4]) == 4\nassert     prod_signs([-4, -3, -2, -1]) == 4\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     prod_signs([1, -1, 1, -1, 1]) == 0\nassert     prod_signs([-1, -1, 1, 1, -1, 1]) == -4\nassert     prod_signs([-1, -1, 1, -1, 1]) == -2\nassert     prod_signs([-1, -1, 1, -1, 1]) == None\nassert     prod_signs([-1, 1, -1, 1]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prod_signs([1, -1, 2]) == 2, 'wrong result'\nassert     prod_signs([1, -1, 2, -3, 4]) == 7, 'wrong result'\nassert     prod_signs([1, 2, -3, 4]) == 0, 'wrong result'\nassert     prod_signs([]) == None, 'wrong result'\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prod_signs([1, 1, 0, -1, -1]) == 0, \"incorrect result\"\nassert     prod_signs([1, 1, 0, -1, 0]) == 1, \"incorrect result\"\nassert     prod_signs([1, 1, 0, -1, -1, 1]) == 1, \"incorrect result\"\nassert     prod_signs([1, 1, 0, -1, 0, -1, 1]) == 2, \"incorrect result\"\nassert     prod_signs([1, 1, 0, -1, -1, 1, 1]) == -2, \"incorrect result\"\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prod_signs([-1, -1, -1, 1, 1, 1, -1]) == 6\nassert     prod_signs([-1, -1, 1, -1, -1]) == -1\nassert     prod_signs([-1, -1, 1, 1, 1]) == 0\nassert     prod_signs([1, 1, 1, -1, -1, -1]) == 0\nassert     prod_signs([1, 1, -1, 1, 1]) == 3\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prod_signs([1, -2, -3]) == -4\nassert     prod_signs([1, 2, -3]) == -6\nassert     prod_signs([-1, 2, -3]) == -6\nassert     prod_signs([-1, 2, -3, -4, 5]) == -12\nassert     prod_signs([1]) == 1\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert      prod_signs([1, -2, 3, -4, 5]) == 8, \"Wrong result\"\nassert      prod_signs([-1, -2, 3, -4, 5]) == 8, \"Wrong result\"\nassert      prod_signs([1, 2, 3, 4, 5]) == 5, \"Wrong result\"\nassert      prod_signs([-1, -2, 3, 4, 5]) == 0, \"Wrong result\"\nassert      prod_signs([1, -2, 3, -4, 5]) == 8, \"Wrong result\"\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prod_signs([1,2,3,4]) == 3*1 + 2*-1 + 3*1 + 4*1\nassert     prod_signs([1,2,3,4,5]) == 3*1 + 2*-1 + 3*1 + 4*1 + 5*1\nassert     prod_signs([1,2,3,4,5,6]) == 3*1 + 2*-1 + 3*1 + 4*1 + 5*1 + 6*1\nassert     prod_signs([-1,2,-3,4,5,-6,7]) == 3*1 + 2*-1 + 3*1 + 4*1 + 5*1 + 6*1 + 7*1\nassert     prod_signs([1,2,3,4,5,6]) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     minPath(grid = [[1,2,3],\n                [4,5,6],\n                [7,8,9]], k = 4) == [1, 4, 7]\nassert     minPath(grid = [[1,2,3],\n                [4,5,6],\n                [7,8,9]], k = 3) == [1, 4, 7]\n\ndef minPathFrom(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     minPath([[0,2,2],\n                    [0,3,3],\n                    [0,0,4]]) == [0,2,0,3,2,4]\nassert     minPath([[0,2,3],\n                    [0,3,1],\n                    [0,2,0]]) == [0,2,0,3,2,1]\nassert     minPath([[1,2,3],\n                    [4,5,6],\n                    [7,8,9]]) == [1,2,3,4,5,6,7,8,9]\nassert     minPath([[1,2,3],\n                    [4,5,6],\n                    [7,8,9]]) == [1,2,3,4,5,6,7,8,9]\nassert     minPath([[1,2,3],\n                    [4,5,6],\n                    [7,8,9]]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\nclass Solution:\n    def minPath(self, grid, k):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        m = len(grid)\n        n = len(grid[0])\n        if k >= n or k >= m:\n            return []\n        if n == 1 and k == 1:\n            return grid[0][0]\n        # make the grid to be a queue (deque)\n        # the queue stores a grid, the cell_id\n        Q = deque()\n        for i in range(m):\n            for j in range(n):\n                Q.append((i, j))\n        # return the answer from the cell\n        while len(Q) > 1:\n            # get the first cell\n            x, y = Q.popleft()\n            # get all the cells\n            for i in range(max(x - 1, 0), min(x + 2, m)):\n                for j in range(max(y - 1, 0), min(y + 2, n)):\n                    # put the cell into the queue\n                    if (i, j) in Q:\n                        continue\n                    # calculate the new value\n                    new_v = grid[x][y] + 1\n                    # update the cell\n                    if 0 <= i < m and 0 <= j < n and grid[i][j] > new_v:\n                        grid[i][j] = new_v\n                        Q.append((i, j))\n        return grid[0][0]\n\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nclass Solution:\n    \"\"\"\n    You are given a 2D matrix of 0s and 1s. We want to know how many squares in the matrix have all their puddles \n    marked. The matrix is square and has at most 100 x 100 squares.  \n    Each square has the same dimensions, and has a center of (r, c). \n    A puddle is any cell with a value of 0.\n    Example:\n    Input:\n    grid = [[1, 1, 1, 1, 0],\n            [1, 0, 1, 1, 1],\n            [1, 0, 0, 0, 1],\n            [1, 1, 1, 1, 1]]\n    Output:\n    2\n    Explanation:\n    The square (1, 1) and (1, 3) are puddles, so these are not counted.\n    The square (2, 2) is not puddles, since there are only 2 non-puddles\n    squares, and in the subset of 3 non-puddles squares, (1, 2) is not the\n    smallest.\n    \"\"\"\n    def countSquares(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        rows = len(grid)\n        cols = len(grid[0])\n        \n        def dfs(i, j):\n            if i < 0 or j < 0 or i >= rows or j >= cols:\n                return 0\n            if grid[i][j] == 1:\n                return 1 + dfs(i-1, j) + dfs(i, j-1) + dfs(i+1, j) + dfs(i, j+1)\n            return 0\n        \n        result = 0\n        for i in range(rows):\n            for j in range(cols):\n                result += dfs(i, j)\n        return result\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef minPath2(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minPath([[1, 3, 1],\n                    [1, 5, 1],\n                    [4, 2, 1]], 3) == [1, 2, 1], \"Wrong\"\nassert     minPath([[1, 1, 1],\n                    [1, 1, 1],\n                    [1, 1, 1]], 1) == [1], \"Wrong\"\nassert     minPath([[1, 3, 1],\n                    [1, 5, 1],\n                    [4, 2, 1]], 2) == [1, 2], \"Wrong\"\nassert     minPath([[1, 3, 1],\n                    [1, 5, 1],\n                    [4, 2, 1]], 3) == [1, 2, 1], \"Wrong\"\nassert     minPath([[1, 3, 1],\n                    [1, 5, 1],\n                    [4, 2, 1]], 4) == [1, 2, 1, 3], \"Wrong\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nminPath([[1, 2], [4, 3]], 4) == [4, 3, 1]"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    # test 1\n    grid = [[1,2,3],[3,2,1]]\n    k = 1\n    assert minPath(grid, k) == [1, 2]\n    # test 2\n    grid = [[1,2,3],[2,3,4]]\n    k = 1\n    assert minPath(grid, k) == [1, 2]\n    # test 3\n    grid = [[1,2,3,4],[3,2,1,4],[2,4,1,3],[4,1,3,2]]\n    k = 3\n    assert minPath(grid, k) == [1, 2, 3]\n    # test 4\n    grid = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24]]\n    k = 5\n    "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert tri(1) == [3], 'Tri 1'\n    assert tri(2) == [1,1], 'Tri 2'\n    assert tri(3) == [1,3,1], 'Tri 3'\n    "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ntri(2)\n\nassert tri(2) == [3, 1], \"3, 1 is wrong!\"\nassert tri(4) == [1, 2, 3, 4], \"1, 2, 3, 4 is wrong!\"\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\n\ndef tri_improved(n):\n    \"\"\"The improved version of the Tribonacci sequence of order n.\n    The improved version of the Tribonacci sequence is based on the previous\n    Tribonacci sequence as following.\n    For example, the first n = 1,\n    the first entry of the new Tribonacci sequence is (1) = 1;\n    the second entry of the new Tribonacci sequence is (1, 1) = 2;\n    the third entry of the new Tribonacci sequence is (1, 1, 1) = 4;\n    and so on.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tri(5) == [3, 4, 5, 6, 8]\nassert     tri(15) == [3, 4, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digits(2) == 1, '2 is not correct'\nassert     digits(1) == 1, '1 is not correct'\nassert     digits(12) == 1, '12 is not correct'\nassert     digits(10) == 2, '10 is not correct'\nassert     digits(13) == 0, '13 is not correct'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \n\n\ndef sum_squares(n):\n    \"\"\"Given a positive integer n, return the sum of the squares of the odd\n    digits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digits(1)    == 0\nassert     digits(22)    == 0\nassert     digits(11)    == 0\nassert     digits(101)    == 0\nassert     digits(333)    == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digits(1) == 1\nassert digits(2) == 1\nassert digits(3) == 3\nassert digits(4) == 2\nassert digits(5) == 2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digits(1)    ==    1\nassert     digits(2)    ==    2\nassert     digits(3)    ==    3\nassert     digits(4)    ==    2\nassert     digits(5)    ==    5\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(digits(38)) # ~5\nprint(digits(247)) # ~11\nprint(digits(36283563)) # ~11\nprint(digits(53)) # ~0\nprint(digits(4421)) # ~0\nprint(digits(0)) # ~0\nprint(digits(42)) # ~0\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digits(0) == 0\nassert     digits(1) == 0\nassert     digits(2) == 2\nassert     digits(3) == 6\nassert     digits(4) == 24\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digits(12) == 2 \nassert     digits(101) == 5\nassert     digits(10) == 1\nassert     digits(10110010) == 5\nassert     digits(101101) == 2\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_nested(r\"()\") == True, \"()\"\nassert     is_nested(r\"[)()()]\") == True, \"[)()()]\"\nassert     is_nested(r\"()()[()]\") == False, \"(()())\"\nassert     is_nested(r\"()[()()]\") == True, \"()()\"\nassert     is_nested(r\"()[[]]\") == False, \"()[[]]\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_nested(\"[[[[])]]\") # correct\nassert not is_nested(\"[({[(())]]\") # correct\nassert not is_nested(\"[[[[[])]]]\") # correct\nassert is_nested(\"[(()[[[[]]]]]\") # correct\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not is_nested('')\nassert not is_nested('(')\nassert not is_nested('(())')\nassert is_nested('()'    )\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_nested('((())))') == True\nassert is_nested('((())') == False\nassert is_nested('(()') == False\nassert is_nested('((((()']) == False\n\ndef is_balanced(string):\n    '''\n    Create a function that takes a string as input which contains only parentheses.\n    The function should return True if and only if the parentheses are balanced.\n    A string is considered balanced if there is a minimal number of closing parentheses in\n    the string.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_nested('({})') == True, \"Wrong answer\"\nassert     is_nested('[({})]') == False, \"Wrong answer\"\nassert     is_nested('(()[])') == False, \"Wrong answer\"\nassert     is_nested('[()[]]') == True, \"Wrong answer\"\nassert     is_nested('[()[]]}') == False, \"Wrong answer\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_nested('()') == True,'Test failed. Your is_nested function is expected to return True for is_nested('()') but returned False instead'\nassert     is_nested('()[]{}') == False, 'Test failed. Your is_nested function is expected to return False for is_nested('()[]{}') but returned True instead'\nassert     is_nested('()[]((())())[][][][]') == True, 'Test failed. Your is_nested function is expected to return True for is_nested('()[]((())())[][][]') but returned False instead'\nassert     is_nested('((((())))[][][][]') == True, 'Test failed. Your is_nested function is expected to return True for is_nested('((((())))[][][][]') but returned False instead'\nassert     is_nested('((((()))(())()())())()') == True, 'Test failed. Your is_nested function is expected to return True for is_nested('((((()))(())()())())()') but returned False instead'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_nested(\"(())\") == True, \"Wrong answer\"\nassert     is_nested(\"(((()()))\") == True, \"Wrong answer\"\nassert     is_nested(\"((()()))\") == True, \"Wrong answer\"\nassert     is_nested(\"\") == False, \"Wrong answer\"\nassert     is_nested(\"(()\") == False, \"Wrong answer\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_nested(\"\") == False, \"Empty String\"\nassert     is_nested(\"()\") == True, \"One bracket\"\nassert     is_nested(\"(())\") == True, \"Square bracket\"\nassert     is_nested(\"((())\") == True, \"Square bracket with only one pair of brackets\"\nassert     is_nested(\"(((())\") == False, \"Too many pair of brackets\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_nested('((())') == False\nassert is_nested('((()))') == True\nassert is_nested('(()(()))') == True\nassert is_nested('((()))') == True\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    sum_squares([-2, -1, 0, 1, 2]) == 5\n    sum_squares([-1, -2, -3, -4]) == 8\n    sum_squares([-2, -4, 0, 2, 4]) == 10\n    sum_squares([-1, -2, -2, -1]) == 4"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == [(1, 8), (2, 9), (3, 16), (4, 25), (5, 36)], f\"sum_squares = {sum_squares([1, 2, 3, 4, 5])}\"\nassert     sum_squares([-1, -2, -3, -4, -5]) == [(1, 16), (2, 25), (3, 36), (4, 49), (5, 64)], f\"sum_squares = {sum_squares([-1, -2, -3, -4, -5])}\"\n\nif __name__ == \"__main__\":\n    # test your function\n    import random\n    test_data = range(-100, 100)\n    random.shuffle(test_data)\n    random_nums = test_data[0:1000]\n    random_squared = list(map(lambda x: x**2, random_nums))\n    random_numbers = list(zip(random_nums, random_squared))\n\n    print(sum_squares(random_numbers))\n    print(sum_squares(random_numbers) == sum(list(map(lambda x: x[1], random_numbers)))"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(sum_squares([1,2,3,4,5])) # (25, 5)\nprint(sum_squares([1,4,9,16,25])) # (29, 25)\nprint(sum_squares([-2,-1,0,2,5])) # (1, 0)\nprint(sum_squares([-2,-1,0,-1,-1,0,1,2,4,5])) # (25, 0)\nprint(sum_squares([-2,-1,0,-1,-1,0,1,2,4,5])) # (25, 0)\nprint(sum_squares([1,2,3,4,5])) # (25, 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert isinstance(sum_squares, types.FunctionType)\nassert sum_squares([0,1,2,3,4]) == 49\nassert sum_squares([]) == 0\nassert sum_squares([0,1,0,1,0]) == 5\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsum_squares([1, 2, 3]) == 14\nsum_squares([0, 4, -1]) == 12\nsum_squares([3, 1, 4]) == 14\nsum_squares([10, 8, -8, 3]) == 100\nsum_squares([-1, -4, -1]) == 9\n\nsum_squares([-2, -9, -2]) == -64\nsum_squares([2, -7, 4]) == -13\nsum_squares([-9, -6, -3, -1]) == -14\nsum_squares([2, 9, -8, 3]) == 24\nsum_squares([-1, -2, -3, -4, -5]) == -30\n\ndef test_sum_squares():\n    assert sum_squares([1, 2, 3]) == 14\n    assert sum_squares([0, 4, -1]) == 12\n    "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_squares([]    ) == 0 \nassert     sum_squares([1,2,3])    == 14\nassert     sum_squares([4,5,6])    == 45\nassert     sum_squares([-1,-2,-3])    == -29\nassert     sum_squares([-4,-5,-6])    == -36\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter(\"A B C D E F\") == True\nassert     check_if_last_char_is_a_letter(\"A BC D E F\") == False\nassert     check_if_last_char_is_a_letter(\"ABC DEF GHI\") == True\nassert     check_if_last_char_is_a_letter(\"ABCDEFGHIJ\") == False"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('a') == False\nassert     check_if_last_char_is_a_letter('A') == False\nassert     check_if_last_char_is_a_letter('0') == False\nassert     check_if_last_char_is_a_letter('3') == False\nassert     check_if_last_char_is_a_letter('word') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncheck_if_last_char_is_a_letter(\"abcd\")\nassert\ncheck_if_last_char_is_a_letter(\"a\")\nassert\ncheck_if_last_char_is_a_letter(\"a b\")\nassert\ncheck_if_last_char_is_a_letter(\"\")\nassert\ncheck_if_last_char_is_a_letter(\"a-b\")\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter(\"H\") == True\nassert     check_if_last_char_is_a_letter(\"a\") == False\nassert     check_if_last_char_is_a_letter(\"Hello World\") == True\nassert     check_if_last_char_is_a_letter(\"!\") == False\n\ndef check_if_last_char_is_a_space(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is a space and is not a part of a word,\n    and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter('Python')\nassert     check_if_last_char_is_a_letter('Hello')\nassert     check_if_last_char_is_a_letter('PYTHON')\nassert     check_if_last_char_is_a_letter('Hello World')\nassert     check_if_last_char_is_a_letter('Hello, World')\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncheck_if_last_char_is_a_letter(\"\") == False\ncheck_if_last_char_is_a_letter(\"q\") == False\ncheck_if_last_char_is_a_letter(\"A\") == True\ncheck_if_last_char_is_a_letter(\"A dog\") == True\ncheck_if_last_char_is_a_letter(\"dogs\") == False\ncheck_if_last_char_is_a_letter(\" dogs \") == False\n\n\n\n\n\n\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter('python') == False\nassert     check_if_last_char_is_a_letter('hello world') == True\nassert     check_if_last_char_is_a_letter('my word is') == False\nassert     check_if_last_char_is_a_letter('I AM MY FRIEND') == True\nassert     check_if_last_char_is_a_letter('i am my friend') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter('last letter should be alphabetic and not a part of a word') == True, \\\n            \"Wrong output\"\nassert     check_if_last_char_is_a_letter('last letter should be alphabetic and not a part of a word') == False, \\\n            \"Wrong output\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef can_arrange2(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('OK')"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert can_arrange([1, 2, 3, 4, 5]) == 1\nassert can_arrange([1, 2, 3, 3, 5]) == 2\nassert can_arrange([3, 1, 2, 1, 5]) == 1\nassert can_arrange([3, 1, 2, 3, 3]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_can_arrange():\n    assert \n\ndef can_arrange_rec(arr):\n    \"\"\"The function can be implemented using the same recursive approach as\n    can_arrange().\n    \"\"\"\n    pass\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([1, 3, -2, 5]) == (-2, 1)\nassert     largest_smallest_integers([-1, -3, 5]) == (-1, 5)\nassert     largest_smallest_integers([]) == None\nassert     largest_smallest_integers([1, 3]) == (3, 1)\nassert     largest_smallest_integers([-3, 4, -5, 1]) == (-5, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_smallest_integers(['-1', '-2', '1', '2']) == (-1, 2)\nassert     largest_smallest_integers([]) == None\nassert     largest_smallest_integers([-1, -2, 'a', 'b']) == None\nassert     largest_smallest_integers(['1', '0', '-1', '-2']) == (1, -2)\nassert     largest_smallest_integers(['-1', -2, '-3', '-4']) == (-1, -3)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    largest_smallest_integers([1, 2, 3]) == (3, 2)\n    largest_smallest_integers([]) == None\n    largest_smallest_integers([-1, 2, 3]) == (3, -1)\n    largest_smallest_integers([-2, 1, 3]) == (3, -2)\n    largest_smallest_integers([1, 3, 5]) == (5, 1)\n    largest_smallest_integers([5, 2, 1]) == (5, 2)\n    largest_smallest_integers([5, 2, -1]) == (5, -1)\n    largest_smallest_integers([-5, 1, 3]) == (-5, 1)\n    largest_smallest_integers([-5, 1, 3, -1]) == (-1, 1)\n    largest_smallest_integers([-5, 1, 3, -2]) == (-2, 1)\n    largest_smallest_integers([1, 5, 3, -5]) == (3, -5)\n    largest_smallest_integers([1, 5, 3, -5, 4]) == (5, -1)\n    largest_smallest_integers([1, 5, 3, -5, 4, 2]) == (5, 2)\n    largest_smallest_integers([-5, 1, 3, -5, 4, 2]) == (-5, 2)\n    largest_smallest_integers([1, 5, 3, -5, 4, 2, -8]) == (-8, 1)\n    largest_smallest_integers([-1, -1, 1, 1, 1, 1, 1, 1]) == (-1, -1)\n    largest_smallest_integers([-1, -1, -1, 1, 1, 1, 1, 1]) == (1, -1)\n    largest_smallest_integers([-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == (-1, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3, 4, 5]) == (5, 1)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5]) == (-5, -4)\nassert     largest_smallest_integers([-1, -2, 3, 4, 5]) == (5, -1)\nassert     largest_smallest_integers([-1, -2, -3, 4, 5]) == (5, -3)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef largest_smallest_integers_test(input, expected_output):\n    largest_smallest_integers(input) == expected_output\n\ninput = [(1, 2), (3, 4), (5, -1)]\nexpected_output = ((5, 1), (1, -1))\n\nlargest_smallest_integers_test(input, expected_output)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4, 5, 6, 7]) == (7, 1)\nassert largest_smallest_integers([-2, -5, -4, -3, -2, -1]) == (1, -2)\nassert largest_smallest_integers([1, 1, 1, 1, 1]) == (1, 1)\nassert largest_smallest_integers([-1, -1, -1]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([2, 5, -1, 0]) == (5, 2)\nassert     largest_smallest_integers([-1, -2, 3]) == (-1, 3)\nassert     largest_smallest_integers([-3, -1]) == (-3, -1)\n\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([1,2,3]) == (-2,1)\nassert     largest_smallest_integers([1,-2,3]) == (-2,1)\nassert     largest_smallest_integers([-1,-2,-3]) == (-3,-1)\nassert     largest_smallest_integers([-10,-20,-30]) == (-30,-10)\nassert     largest_smallest_integers([10,20,30]) == (-30,10)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare_one(2, 3) == 2\nassert compare_one('a', 1) == 'a'\nassert compare_one('a', 'a') == None\nassert compare_one(2.0, 3.0) == 3.0\nassert compare_one('2.0', '3.0') == 3.0\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare_one(2, 3)     == 4\nassert     compare_one('2', '3')     == '2'\nassert     compare_one(2, '3')     == None\nassert     compare_one('2.0', '3')     == None\nassert     compare_one('-2.0', '3')     == '-3'\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    compare_one(1, 2)\n    compare_one(1.1, 2.2)\n    compare_one('abc', 'abc')\n    compare_one(1.1, 'abc')\n    compare_one('abc', '1.1')\n    compare_one('abc', '1')\n    compare_one(2, 2)\n    compare_one('1', '1')\n    compare_one(1, '1')\n    compare_one('1.1', '1')\n    compare_one(1.1, 1.1)\n    compare_one(1.1, '1.1')\n    compare_one(1.1, 1)\n    compare_one(1.1, 1.1)\n    compare_one(1.1, '1.1')\n    compare_one(1.1, '1')\n    compare_one('1.1', '1.1')\n    compare_one('1.1', '1')\n    compare_one('1.1', '1.1')\n    compare_one('1.1', 1.1)\n    compare_one(1.1, 1.1)\n    compare_one(1.1, 1)\n    compare_one(1.1, '1.1')\n    compare_one(1, 1)\n    compare_one('1', '1')\n    compare_one('1.1', 1)\n    compare_one(1, 1.1)\n    compare_one('1', '1.1')\n    compare_one('1.1', '1.1')\n    compare_one('1.1', 1)\n    compare_one('1.1', '1')\n    compare_one('1.1', 1.1)\n    compare_one('1.1', '1.1')\n    compare_one('1.1', '1')\n    compare_one('1.1', 1)\n    compare_one('1.1', 1.1)\n    compare_one('1.1', '1.1')\n    compare_one('1.1', '1')\n    compare_one('1.1', 1.1)\n    compare_one('1.1', '1.1')\n    compare_one('1.1', 1)\n    compare_one('1.1', 1.1)\n    compare_one('1.1', '1.1')\n    compare_one('1', '1.1')\n    compare_one('1', '1')\n    compare_one('1.1', '1')\n    compare_one('1', '1.1')\n    compare_one('1.1', '1.1')\n    compare_one('1.1', '1')\n    compare_one('1.1', 1)\n    compare_one('1.1', 1.1)\n    compare_one('1.1', '1.1')\n    compare_one('1.1', '1')\n    compare_one('1.1', 1)\n    compare_one('1.1', 1.1)\n    compare_one('1.1', '1.1')\n    compare_one('1', '1.1')\n    compare_one('1', '1')\n    compare_one('1.1', '1')\n    compare_one('1', '1.1')\n    compare_one('1.1', '1.1')\n    compare_one('1.1', '1')\n    compare_one('1.1', 1)\n    compare_one('1.1', 1.1)\n    compare_one('1.1', '1.1')\n    compare_one('1.1', '1')\n    compare_one('1.1', 1)\n    compare_one('1.1', 1.1)\n    compare_one('1.1', '1.1')\n    compare_one('1.1', '1')\n    compare_one('1.1', 1)\n    compare_one('1.1', 1.1)\n    compare"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     compare_one(1, 2) == 2\nassert     compare_one(1, 2.5) == 2.5\nassert     compare_one(1.5, 2) == 2.5\nassert     compare_one('2.3', '3.5') == '3.5'\nassert     compare_one('2.5', '3.5') == '2.5'\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     compare_one(1, 2) == None, \"wrong\"\nassert     compare_one(\"1\", \"2\") == None, \"wrong\"\nassert     compare_one(1.1, 2) == None, \"wrong\"\nassert     compare_one(1.1, 2.2) == None, \"wrong\"\nassert     compare_one(1.1, 2.2) == None, \"wrong\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     compare_one(1, 2) == 2\nassert     compare_one(1.0, 2) == 2\nassert     compare_one(\"1\", \"2\") == None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     compare_one(12, 21) == None\nassert compare_one(10, 20.1) == 20.1\nassert compare_one('10.1', '20.1') == 20.1\nassert compare_one('10', '20') == None\nassert compare_one('10', '10.1') == None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     compare_one(1.0, 2.0) == 1.0, \"Should be 1.0\"\nassert     compare_one(1.0, 2.1) == 2.0, \"Should be 2.0\"\nassert     compare_one(1.0, 1.0) == None, \"Should be None\"\nassert     compare_one(\"1.1\", 1.0) == None, \"Should be None\"\nassert     compare_one(1, 2) == None, \"Should be None\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(5) == False\nassert     is_equal_to_sum_even(19) == True\nassert     is_equal_to_sum_even(9) == False\nassert     is_equal_to_sum_even(6) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(42) == True\nassert     is_equal_to_sum_even(18) == True\nassert     is_equal_to_sum_even(33) == False\nassert     is_equal_to_sum_even(25) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_equal_to_sum_even(12), True\nassert is_equal_to_sum_even(33), False\nassert is_equal_to_sum_even(49), False\nassert is_equal_to_sum_even(88), False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_equal_to_sum_even(1)\nassert is_equal_to_sum_even(9)\nassert is_equal_to_sum_even(25)\nassert is_equal_to_sum_even(6)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(112) == False, \"Invalid test 1\"\nassert is_equal_to_sum_even(22) == True, \"Invalid test 2\"\nassert is_equal_to_sum_even(12) == True, \"Invalid test 3\"\nassert is_equal_to_sum_even(10) == True, \"Invalid test 4\"\nassert is_equal_to_sum_even(50) == False, \"Invalid test 5\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(9) == False\nassert     is_equal_to_sum_even(8) == False\nassert     is_equal_to_sum_even(867) == False\nassert     is_equal_to_sum_even(867) == False\nassert     is_equal_to_sum_even(12345) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('\\n *** Check if is_equal_to_sum_even() works *** \\n')\n\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(60)\nassert     not is_equal_to_sum_even(51)\nassert     not is_equal_to_sum_even(40)\n\n\n\n\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert _____, 'brazilian_factorial(3) == 6'\nassert _____, 'brazilian_factorial(4) == 24'\nassert _____, 'brazilian_factorial(0) == 1'\nassert _____, 'brazilian_factorial(-3) == None'\n\ndef is_even(n):\n    \"\"\"Given an integer n, return whether or not n is even.\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"Congratulations, you've successfully completed the special factorial test!\")\n\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     special_factorial(1) == 1, \"Wrong value\"\nassert     special_factorial(5) == 120, \"Wrong value\"\nassert     special_factorial(12) == 479001600, \"Wrong value\"\nassert     special_factorial(16) == 2432902008176640000, \"Wrong value\"\n\nprint(\"The method'special_factorial' was correctly defined!\")\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert special_factorial(0) == 1\nassert special_factorial(1) == 1\nassert special_factorial(2) == 2\nassert special_factorial(3) == 6\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         special_factorial(0) == 1\nassert special_factorial(1) == 1\nassert special_factorial(2) == 2\nassert special_factorial(3) == 6\nassert special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fix_spaces(\"hello world\") == \"hello_world\", \"Hello world\"\nassert     fix_spaces(\"hello world\") == \"hello_world\", \"Hello world\"\nassert     fix_spaces(\"hello world\") == \"hello_world\", \"Hello world\"\nassert     fix_spaces(\"hello world\") == \"hello_world\", \"Hello world\"\nassert     fix_spaces(\"hello world\") == \"hello_world\", \"Hello world\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello there\") == \"hello_there\"\nassert     fix_spaces(\"hi      hello world\") == \"hi_hello_world\"\nassert     fix_spaces(\"hi world\") == \"hi_world\"\nassert     fix_spaces(\"hi   \") == \"hi\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef replace_spaces(text):\n    \"\"\"\n    Given a string text, replace every space with an underscore, \n    and return the string with all the underscores\n    \"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fix_spaces(\" abc\") == 'a__bc'\nassert     fix_spaces(\" a b c \") == 'a__bc'\nassert     fix_spaces(\"a b c\") == 'a_bc'\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fix_spaces(\"hello\") == \"hello\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello world  \") == \"hello_world\"\nassert     fix_spaces(\"hello world 123\") == \"hello_world_123\"\nassert     fix_spaces(\"hello world 123  \") == \"hello_world_123\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fix_spaces(\"don't  spaces\") == \"don_t_spaces\"\nassert     fix_spaces(\" i like spaces\") == \"i_like_spaces\"\nassert     fix_spaces(\"  spaces\") == \"spaces\"\nassert     fix_spaces(\"spaces\") == \"spaces\"\nassert     fix_spaces(\"\") == \"\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     file_name_check(    '1.txt') == 'No', print('The function should return \"No\" for a file name with fewer than 3 digits.')\nassert     file_name_check(    'a1.txt') == 'No', print('The function should return \"No\" for a file name with fewer than 3 digits and an empty substring before the dot.')\nassert     file_name_check(    'a1.t') == 'No', print('The function should return \"No\" for a file name with fewer than 3 digits and an empty substring after the dot.')\nassert     file_name_check(    'a.t1') == 'No', print('The function should return \"No\" for a file name with fewer than 3 digits and an empty substring after the dot.')\nassert     file_name_check(    'a.txt1') == 'No', print('The function should return \"No\" for a file name with fewer than 3 digits and an empty substring after the dot.')\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     file_name_check('test.txt')         ==     'No', 'test.txt'\nassert     file_name_check('test.exe')         ==     'No', 'test.exe'\nassert     file_name_check('test.DLL')         ==     'No', 'test.DLL'\nassert     file_name_check('test.EXE')         ==     'No', 'test.EXE'\nassert     file_name_check('test.txt.txt')     ==     'Yes', 'test.txt.txt'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef read_and_check_file(file_name):\n    \"\"\"Read the file at the given file name, and return a tuple of the form (list_of_lines, \n    number_of_lines, file_name) if the file is in fact a text file, and return (None, None, \n    None) otherwise.\n    The function assumes that the file is in fact a text file, i.e. each line should contain\n    a single word.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     file_name_check(\"abc.txt\") == \"No\"\nassert     file_name_check(\"name.txt\") == \"Yes\"\nassert     file_name_check(\"name.exe\") == \"No\"\nassert     file_name_check(\"name.dll\") == \"No\"\nassert     file_name_check(\"name1.txt\") == \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(file_name_check(\"mamduck.txt\")) == \"Yes\"\n\nassert\nprint(file_name_check(\"mamduck_exe.txt\")) == \"No\"\n\nassert\nprint(file_name_check(\"mamduck.txt.exe\")) == \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('\\n\\n')\n    \n    print(file_name_check('file_name')) # No\n\n    print(file_name_check('file_name.txt')) # Yes\n\n    print(file_name_check('File_name.txt')) # No\n\n    print(file_name_check('file.txt.txt')) # No\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     file_name_check(\"coffee_adam_1.py\") == \"Yes\"\nassert     file_name_check(\"coffee_adam_2.py\") == \"Yes\"\nassert     file_name_check(\"coffee_adam_3.py\") == \"No\"\nassert     file_name_check(\"coffee_adam_4.py\") == \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     file_name_check('asd.txt') == 'No'\nassert     file_name_check('asd') == 'No'\nassert     file_name_check('1.txt') == 'No'\nassert     file_name_check('1.asd') == 'No'\nassert     file_name_check('1.exe') == 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sum_squares([1, 2, 3, 4]) == 1+4+9+16\nassert sum_squares([2, 4, 9, 16, 25, 1, 8]) == 1+4+16+64+256+256+256\nassert sum_squares([3, 3, 2, 2, 4, 1]) == 1+1+4+4+16\nassert sum_squares([-1, -3, -5, -7, -9]) == 1+1+1+1+1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_squares(lst) == sum(square_cube(lst) for i in range(len(lst)) if i % 3 == 0 or i % 4!= 0)\nprint(\"Test passed!\")\n\n\n\ndef get_square_cube(lst, f):\n    \"\"\"\n    This function takes a list of integers and a function. The function will be called with each integer entry of the list and should return the\n    square of the integer entry, or the cube if the integer is a multiple of 3 or 4. The function will be called multiple times with each\n    integer entry of the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert sum_squares([1,2,3,4,5,6,7,8,9]) == 25\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(sum_squares(numbers))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_squares([]) == 0, \"When no element is there, the sum of squares should be 0.\"\nassert     sum_squares([1]) == 1, \"When there is one element, the sum of squares should be 1.\"\nassert     sum_squares([4, 8, 12]) == 144, \"When there are three elements, the sum of squares should be 144.\"\nassert     sum_squares([4, 8, 12, 16]) == 144, \"When there are four elements, the sum of squares should be 144.\"\nassert     sum_squares([4, 8, 12, 16, 19]) == 256, \"When there are five elements, the sum of squares should be 256.\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 25, \"Expected 25\"\nassert     sum_squares([1,3,5,7,9,2]) == 65, \"Expected 65\"\nassert     sum_squares([3,4,6,8,10,12]) == 81, \"Expected 81\"\nassert     sum_squares([-1,-3,6,9,21,11,0]) == 29, \"Expected 29\"\n\n\ndef sum_squares_v2(lst):\n    \"\"\"\n    This function is a version of sum_squares function.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_squares([]) == 0\nassert     sum_squares([2]) == 4\nassert     sum_squares([3,2,6]) == 12\nassert     sum_squares([-5,2,3,1,7,1]) == 29\nassert     sum_squares([-5,2,3,1,7,5]) == 19\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum_squares(range(0,10)) == 2025\nassert sum_squares(range(0,11)) == 4391\nassert sum_squares(range(0,12)) == 12942\nassert sum_squares(range(0,13)) == 5121\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \\\n        \"quick brown fox jumps over the lazy dog\", \\\n        \"You must return the words from sentence that are in words\"\nassert     words_in_sentence(\"i a you\") == \"i a\", \"Only the first word should be in words\"\nassert     words_in_sentence(\"i a you\") == \"you\", \"Only the last word should be in words\"\nassert     words_in_sentence(\"i a\") == \"i a\", \"The length of word is not prime\"\n\nsentence = input(\"Input the sentence: \").lower().split()\nprint(\"\\n\".join(sorted(filter(lambda x: x[0].isalpha(), zip(sentence, map(len, sentence))), key=lambda x: x[1])))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(words_in_sentence('I love you'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert words_in_sentence('I love you') == 'I love you'\n    "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nwords_in_sentence(\"I like eating pizza\") == \"pizza\"\n\nwords_in_sentence(\"I like eating pizza and pizza and pizza\") == \"pizza pizza pizza\"\n\nwords_in_sentence(\"I like eating pizza and pizza and pizza\") == \"pizza pizza pizza\"\n\n\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     words_in_sentence('The quick brown fox jumps over the lazy dog') == 'The quick brown fox jumps'\nassert    words_in_sentence('She sells seashells by the seashore') == 'She sells seashells by the seashore'\nassert    words_in_sentence('She sells seashells by the seashore') == 'She sells seashells by the seashore'\nassert    words_in_sentence('the quick brown fox jumps over the lazy dog') == 'the quick brown fox jumps'\nassert    words_in_sentence('She sells seashells by the seashore') == 'She sells seashells by the seashore'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     words_in_sentence('The quick brown fox') == 'The quick brown fox'\nassert     words_in_sentence('  the quick brown fox') == 'The quick brown fox'\nassert     words_in_sentence('  The quick brown fox') == 'The quick brown fox'\nassert     words_in_sentence('  the  quick brown fox') == 'The quick brown fox'\nassert     words_in_sentence('  the    quick brown fox') == 'The quick brown fox'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     words_in_sentence(\"Don't go crazy\") == \"dont go crazy\"\nassert     words_in_sentence(\"Don't go crazy or don't go crazy\") == \"dont go crazy\"\nassert     words_in_sentence(\"Don't go crazy and don't go crazy\") == \"dont go crazy\"\nassert     words_in_sentence(\"Don't go crazy and don't go crazy\") == \"dont go crazy\"\nassert     words_in_sentence(\"Don't go crazy and don't go crazy or don't go crazy\") == \"dont go crazy\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     words_in_sentence('You are a god') == 'You are a god'\nassert     words_in_sentence('you are a god') == 'you are a god'\nassert     words_in_sentence('you, are, a, god') == 'you, are, a, god'\nassert words_in_sentence('you are a god') == 'you are a god'\nassert words_in_sentence('you are a, god') == 'you are a god'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     words_in_sentence('The quick brown fox jumps over the lazy dog.') == 'The quick brown fox jumps over the lazy dog.', 'incorrect'\nassert words_in_sentence('Ala ma kota, Ala ma kota, kot ma kota.') == 'Ala ma kota, kot ma kota, ala ma kota.', 'incorrect'\nassert words_in_sentence('a') == 'a', 'incorrect'\n\ndef longest_word(sentence):\n    \"\"\"\n    You are given a sentence,\n    the sentence contains only letters,\n    the sentence contains some words separated by a space,\n    and you have to return the longest word from the sentence.\n    The length of the word in the sentence is a prime number,\n    the order of the word in the sentence is the same as the original one.\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     simplify('2/3', '1/3') == 'True'\nassert     simplify('3/2', '2/3') == 'True'\nassert     simplify('3/2', '4/3') == 'False'\nassert     simplify('4/2', '2/3') == 'False'\nassert     simplify('6/2', '2/3') == 'False'\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     simplify(\"2/6\", \"2/6\") == True, \"Should be True\"\nassert     simplify(\"2/3\", \"3/2\") == False, \"Should be False\"\nassert     simplify(\"1/2\", \"1/2\") == True, \"Should be True\""
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     simplify(0.5, 2) == False\nassert     simplify('0.5', 2) == False\nassert     simplify('0.5', 2) == False\nassert     simplify('1/2', 2) == False\nassert     simplify('1/2', 2) == False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (simplify(\"2/4\", \"1/2\") == False), 'Should return False'\nassert     (simplify(\"4/7\", \"2/3\") == False), 'Should return False'\nassert     (simplify(\"9/10\", \"9/11\") == True), 'Should return True'\nassert     (simplify(\"1/2\", \"1/3\") == False), 'Should return False'\nassert     (simplify(\"1/3\", \"2/5\") == True), 'Should return True'\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     simplify(\"3/4\", \"3/4\") is False\nassert     simplify(\"6/5\", \"3/4\") is False\nassert     simplify(\"1/3\", \"2/3\") is False\nassert     simplify(\"3/4\", \"2/3\") is False\nassert     simplify(\"2/3\", \"2/3\") is False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     simplify(\"0.2\", \"2\") == True, \"f(0.2, 2) should return True\"\nassert     simplify(\"0.2\", \"4\") == False, \"f(0.2, 4) should return False\"\nassert     simplify(\"0.2\", \"1\") == False, \"f(0.2, 1) should return False\"\nassert     simplify(\"0.2\", \"1.5\") == False, \"f(0.2, 1.5) should return False\"\nassert     simplify(\"0.2\", \"0\") == True, \"f(0.2, 0) should return True\"\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_integer(x):\n    \"\"\"Your task is to implement a function that will determine whether or not\n    x is an integer.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     order_by_points([3, 22, 11, 88, 8]) == [3, 11, 8, 22, 88]\nassert     order_by_points([3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3]\nassert     order_by_points([0, 100, 99, 5, 7, 8, 3, 2, 1]) == [0, 1, 2, 3, 5, 7, 8, 99, 100]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef order_by_points_numpy(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     order_by_points([4, 11, 2, 5, 3, 4, 5]) == [\n    4, 5, 5, 4, 3, 2, 2]\nassert     order_by_points([1, 2, 3]) == [1, 2, 3]\nassert     order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     order_by_points([5, 3, 4, 1, 6]) == [1, 3, 4, 5, 6]\nassert     order_by_points([9, 0, 6, 2, 1]) == [1, 2, 3, 9, 6]\nassert     order_by_points([5, 7, 7, 3, 5]) == [3, 5, 5, 7, 7]\nassert     order_by_points([1, 1, 0]) == [0, 1, 1]\nassert     order_by_points([5, 3, 5, 3, 5]) == [5, 3, 3, 5, 5]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     order_by_points([1,2,3,4,5]) == [1,2,3,4,5]\nassert     order_by_points([0,9,8,7,6]) == [0,1,2,3,4]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     order_by_points([]) == []\nassert     order_by_points([1]) == [1]\nassert     order_by_points([1,2]) == [1,2]\nassert     order_by_points([1,2,3,4]) == [1,1,2,3]\nassert     order_by_points([1,2,3,4,5]) == [1,1,2,3,4]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     order_by_points([2,7,11,15]) == [7,11,15,2], \"Wrong order\"\nassert     order_by_points([5,9,11,15]) == [5,15,11,9], \"Wrong order\"\nassert     order_by_points([1,2,3,4]) == [1,2,4,3], \"Wrong order\"\nassert     order_by_points([3,2,4,1]) == [4,1,2,3], \"Wrong order\"\nassert     order_by_points([1,2,3,4]) == [1,2,4,3], \"Wrong order\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     order_by_points([10, 30, 14, 51, 99, 42, 27]) == [10, 30, 14, 51, 99, 42, 27]\nassert     order_by_points([100, 23, 52, 7]) == [100, 23, 52, 7]\nassert     order_by_points([-1, -29, -6, 1, 0, 1, -50, 19, -5]) == [-1, -29, -6, 1, 0, 1, -50, 19, -5]\nprint('All tests passed!'"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     order_by_points([2, 1, 3, 5, 4, 4, 1]) ==    [1, 1, 2, 3, 4, 4, 5]\nassert     order_by_points([2, -2, 3, 5, 4, 4, 1]) ==    [1, -2, 2, 3, 4, 4, 5]\nassert     order_by_points([2, 1, 4, 5, 4, 4, 1]) ==    [1, 1, 2, 4, 4, 4, 5]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(order_by_points([1, 2, 3, 4, 5])"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     specialFilter([]) == 0\nassert     specialFilter([1]) == 0\nassert     specialFilter([1, 2]) == 0\nassert     specialFilter([2, 3, 5, 6, 8]) == 5\nassert     specialFilter([2, 3, 5, 7, 9]) == 6\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4, \"incorrect\"\nassert     specialFilter([2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]) == 4, \"incorrect\"\nassert     specialFilter([2, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4, \"incorrect\"\nassert     specialFilter([2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4]) == 4, \"incorrect\"\nassert     specialFilter([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4]) == 5, \"incorrect\"\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     specialFilter([1, 3, 5, 7, 9]) == 4\nassert     specialFilter([1, 2, 3, 4]) == 1\nassert     specialFilter([6, 7, 8, 9]) == 1\nassert     specialFilter([4, 5, 6, 7, 8, 9, 10]) == 4\nassert     specialFilter([3, 2, 1]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     specialFilter(nums) == 3\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     specialFilter([1, 1, 2, 4, 6, 8, 9, 10, 20, 50, 100]) == 5\nassert specialFilter([1, 1, 2, 4, 6, 8, 9, 10, 20, 50, 100, 100, 100, 100, 100]) == 5\nassert specialFilter([5, 2, 1, 5, 7, 10, 20, 50, 100]) == 2\nassert specialFilter([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 0\n\nprint('Success'"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    specialFilter([1,2,3,4,5]) == 1\n    specialFilter([1,2,3,4,5,6]) == 2\n    specialFilter([1,2,3,4,5,6,7,8,9]) == 4\n    specialFilter([1,2,3,4,5,6,7,8,9,0]) == 4\n\n\n\ndef specialFilter1(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nspecialFilter([13, 14, 15]) == 1\nspecialFilter([1, 3, 5, 7, 9]) == 3\nspecialFilter([4, 6, 8, 10, 12]) == 4\nspecialFilter([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 747, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 777, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, "
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert specialFilter([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 9\nassert specialFilter([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -263, -264, -265, -266, -267, -268, -269, -270, -271, -272, -273, -274, -275, -276, -277, -278, -279, -280, -281, -282, -283, -284, -285, -286, -287, -288, -289, -290, -291, -292, -293, -294, -295, -296, -297, -298, -299, -300, -301, -302, -303, -304, -305, -306, -307, -308, -309, -310, -311, -312, -313, -314, -315, -316, -317, "
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_max_triples(1) ==     [0]\nassert     get_max_triples(2) ==     [0, 1]\nassert     get_max_triples(4) ==     [0, 1, 3]\nassert     get_max_triples(5) ==     [0, 1, 3, 4]\nassert     get_max_triples(6) ==     [0, 1, 3, 4, 5]\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert get_max_triples(2) == 3\nassert get_max_triples(3) == 3\nassert get_max_triples(4) == 5\nassert get_max_triples(10) == 12\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_triples(2) == 1\nassert get_max_triples(10) == 39\nassert get_max_triples(1000) == 7027\nassert get_max_triples(1000000) == 3\n\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 2\nassert     get_max_triples(10) == 10\nassert     get_max_triples(100) == 1812\nassert     get_max_triples(100000) == 125035\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert get_max_triples(3) == 6\nassert get_max_triples(5) == 14\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert get_max_triples(4) == 6\nassert get_max_triples(6) == 24\nassert get_max_triples(8) == 120\n\nif __name__ == '__main__':\n    # import sys;sys.argv = ['', 'Test.testName']\n    import doctest\n    doctest.testmod("
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_max_triples(1) == 0, \"The number of triples should be zero\"\nassert     get_max_triples(2) == 9, \"The number of triples should be nine\"\nassert     get_max_triples(5) == 6, \"The number of triples should be six\"\nassert     get_max_triples(100) == 672, \"The number of triples should be six72\"\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_max_triples(1) == 0, \"Wrong\"\nassert     get_max_triples(2) == 1, \"Wrong\"\nassert     get_max_triples(3) == 3, \"Wrong\"\nassert     get_max_triples(4) == 12, \"Wrong\"\nassert     get_max_triples(5) == 24, \"Wrong\"\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Mars') == ('Mars', 'Venus', 'Earth', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Jupiter') == ('Jupiter', 'Earth', 'Venus', 'Mars', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Mars') == ('Mars', 'Earth', 'Venus', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Saturn') == ('Saturn', 'Earth', 'Mars', 'Jupiter', 'Venus', 'Uranus', 'Neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bf('earth','venus') ==     (('venus','mars'), ('earth','venus'), ('mars', 'jupiter'), ('jupiter', 'neptune'), ('neptune','saturn'), ('saturn', 'uranus'), ('uranus','moon'))\nassert bf('earth','moon') ==     (('earth','venus'), ('moon','mars'), ('mars', 'jupiter'), ('jupiter', 'neptune'), ('neptune','saturn'), ('saturn', 'uranus'), ('uranus','moon'))\nassert bf('saturn','neptune') ==     (('saturn', 'neptune'), ('saturn', 'uranus'), ('neptune','moon'), ('uranus', 'earth'), ('earth','venus'), ('venus','mars'), ('mars','saturn'), ('saturn', 'jupiter'), ('jupiter','sun'))\nassert bf('moon','earth') ==     (('moon','mars'), ('mars', 'jupiter'), ('jupiter', 'neptune'), ('neptune','saturn'), ('saturn', 'uranus'), ('uranus','moon'), ('moon','sun'))\nassert bf('moon','sun') ==     (('moon','sun'),)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (bf(\"earth\", \"venus\") == (\"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"))\nassert     (bf(\"venus\", \"earth\") == (\"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"))\nassert     (bf(\"jupiter\", \"venus\") == ())\nassert     (bf(\"saturn\", \"neptune\") == ())\nassert     (bf(\"earth\", \"mars\") == ())\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    #borders of the planets\n    #earth is the smallest\n    assert bf('earth','mars') == ('earth','venus', 'jupiter','saturn', 'uranus', 'neptune')\n    assert bf('venus', 'earth') == ('earth','venus','mars', 'jupiter','saturn', 'uranus', 'neptune')\n    assert bf('saturn', 'jupiter') == ('earth','venus','mars', 'jupiter','saturn', 'uranus', 'neptune')\n    assert bf('uranus', 'neptune') == ('earth','venus','mars', 'jupiter','saturn', 'uranus', 'neptune')\n    #jupiter is the biggest\n    "
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"), \"incorrect\"\nassert     bf(\"Earth\", \"Venus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"), \"incorrect\"\nassert     bf(\"Mars\", \"Venus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"), \"incorrect\"\nassert     bf(\"Jupiter\", \"Venus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"), \"incorrect\"\nassert     bf(\"Saturn\", \"Venus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"), \"incorrect\"\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef bf2(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    '''\n    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sorted_list_sum([\"aba\", \"aa\", \"a\", \"a\", \"a\"]) == [\"aba\", \"aa\", \"a\", \"a\"]\nassert sorted_list_sum([\"a\", \"a\", \"b\", \"b\", \"b\", \"a\"]) == [\"b\", \"b\", \"a\", \"a\"]\nassert sorted_list_sum([\"a\", \"a\", \"a\"]) == [\"a\", \"a\", \"a\"]\nassert sorted_list_sum([]) == []\nassert sorted_list_sum([\"aba\"]) == [\"aba\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sorted_list_sum(['car','kite','airplane','by','drone']) == ['car','airplane','by','drone','kite']\nassert     sorted_list_sum(['car','kite','airplane','by','drone','car']) == ['car','airplane','by','drone','kite','car']\nassert     sorted_list_sum(['car','kite','airplane','by','drone','car','car','car','car','car']) == ['car','airplane','car','by','drone','kite','kite','car','car','car']\nassert sorted_list_sum(['car','kite','airplane','by','drone','car','car','car','car']) == ['car','airplane','car','by','drone','kite','kite','car','car']\n\ndef find_freq(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    sorts the list by length of each word,\n    and returns a dictionary with the words as keys\n    and the frequencies as values.\n    If two words have the same length, sort the list alphabetically.\n    The order of the list should be ascending by length of each word,\n    and you should return the dictionary sorted by that rule.\n    You may assume that all words will have the same length.\n    If there is no word, set its frequency to 0.\n    If there are no words or only one word, return an empty dictionary.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sorted_list_sum([\"b\", \"dd\", \"ee\", \"g\", \"hh\", \"i\"]) ==     [\"b\", \"dd\", \"ee\", \"g\", \"hh\", \"i\"], \\\n    \"Wrong answer\"\nassert sorted_list_sum([\"abc\", \"def\", \"ghi\"]) ==     [\"abc\", \"def\", \"ghi\"], \\\n    \"Wrong answer\"\nassert sorted_list_sum([\"a\"]) ==     [\"a\"], \\\n    \"Wrong answer\"\nassert sorted_list_sum([]) ==     [], \\\n    \"Wrong answer\"\n\ndef sort_and_filter_strings(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns a sorted list of strings with words having a length of even number.\n    The function should sort the resulting list alphabetically and return it.\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sorted_list_sum(['a', 'b', 'c']) == ['a', 'b', 'c']\nassert sorted_list_sum(['b', 'a', 'c']) == ['a', 'b', 'c']\nassert sorted_list_sum(['c', 'a', 'b']) == ['a', 'b', 'c']\nassert sorted_list_sum(['a', 'b', 'c', 'c', 'd', 'b', 'a', 'c']) == ['a', 'b', 'c', 'c', 'd', 'b', 'a', 'c']\nassert sorted_list_sum(['d', 'c', 'a', 'b', 'c', 'a', 'b', 'd']) == ['a', 'b', 'c', 'c', 'd', 'a', 'b', 'd']\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sorted_list_sum([\"compute\", \"computer\", \"computer\"]) == [\"computer\", \"computer\", \"compute\"]\nassert sorted_list_sum([\"computer\", \"computer\", \"compute\"]) == [\"computer\", \"compute\", \"computer\"]\nassert sorted_list_sum([\"human\", \"human\", \"computer\"]) == [\"computer\", \"computer\", \"human\"]\nassert sorted_list_sum([\"compute\", \"compute\", \"computer\"]) == [\"computer\", \"computer\", \"compute\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     x_or_y(5, 0, 1) == 0\nassert     x_or_y(5, 1, 0) == 1\nassert     x_or_y(5, 0, 0) == 0\nassert     x_or_y(5, 1, 1) == 1\nassert     x_or_y(6, 0, 0) == 0\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     x_or_y(5, 2, 3) == 3\nassert     x_or_y(7, 3, 1) == 3\nassert     x_or_y(9, 3, 1) == 1\nassert     x_or_y(11, 3, 1) == 1\nassert     x_or_y(13, 3, 1) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    x_or_y(3, True, False) == True\n    x_or_y(7, False, True) == False\n    x_or_y(15, False, True) == True\n    x_or_y(3, True, 3) == True\n    x_or_y(5, True, 4) == False\n    x_or_y(7, True, 7) == True\n    x_or_y(4, False, 3) == False\n    x_or_y(6, True, 7) == False\n    x_or_y(9, False, 9) == False\n    x_or_y(18, False, 18) == False\n    x_or_y(1, True, 1) == True\n    x_or_y(1, False, 2) == True\n    x_or_y(1, True, 1) == True\n    x_or_y(0, False, 1) == True\n    x_or_y(2, True, 2) == True\n    x_or_y(9, True, 10) == False\n    x_or_y(10, True, 10) == False\n    x_or_y(10, True, 9) == False\n    x_or_y(9, True, 10) == True\n    x_or_y(0, False, 10) == True\n    x_or_y(10, False, 10) == False\n    x_or_y(11, True, 11) == False\n    x_or_y(11, True, 1) == True\n    x_or_y(11, True, -1) == True\n    x_or_y(11, False, 1) == True\n    x_or_y(11, False, -1) == False\n    x_or_y(12, True, 12) == True\n    x_or_y(12, True, -1) == False\n    x_or_y(12, False, 12) == True\n    x_or_y(12, False, -1) == False\n    x_or_y(0, True, 0) == True\n    x_or_y(0, False, 0) == False\n    x_or_y(0, True, -1) == True\n    x_or_y(0, False, -1) == False\n    x_or_y(0, True, 0) == True\n    x_or_y(0, False, 0) == True\n    x_or_y(0, True, 1) == True\n    x_or_y(0, False, 1) == False\n    x_or_y(0, True, -1) == False\n    x_or_y(0, False, -1) == False\n    x_or_y(1, True, 1) == True\n    x_or_y(1, False, 1) == False\n    x_or_y(1, True, -1) == True\n    x_or_y(1, False, -1) == False\n    x_or_y(1, True, 1) == True\n    x_or_y(1, False, 1) == True\n    x_or_y(1, True, 0) == True\n    x_or_y(1, False, 0) == False\n    x_or_y(1, True, -1) == False\n    x_or_y(1, False, -1) == False\n    x_or_y(2, True, 1) == True\n    x_or_y(2, False, 1) == False\n    x_or_y(2, True, -1) == False\n    x_or_y(2, False, -1) == False\n    x_or_y(2, True, 1) == True\n    x_or_y(2, False, 1) == True\n    x_or_y(2, True, 0) == False\n    x_or_y(2, False, 0) == False\n    x_or_y(2, True, -1) == False\n    x_or_y(2, False, -1) == False\n    x_or_y(3, True, 2) == True\n    x_or_y(3, False, 2) == True\n    x_or_y(3, True, 1) == Tru"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef x_or_y_2(n, x, y):\n    \"\"\"A program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     x_or_y(5, 0, 1)     == 0\nassert     x_or_y(7, 1, 0)     == 1\nassert     x_or_y(10, 0, 1)     == 1\nassert     x_or_y(11, 1, 0)     == 0\n\n\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert x_or_y(n=3, x=1, y=2) == 1\nassert x_or_y(n=3, x=2, y=1) == 2\nassert x_or_y(n=5, x=1, y=2) == 1\nassert x_or_y(n=5, x=2, y=1) == 2\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     double_the_difference([]) == 0, 'No numbers!'\nassert     double_the_difference([4,6]) == 0, 'Two numbers!'\nassert     double_the_difference([1, 2, 3, 4]) == 9, 'One number!'\nassert     double_the_difference([2, -2, 0, -2]) == 10, 'Negative numbers!'\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([1, 2, 4]) == 9\nassert     double_the_difference([1, 2, -1]) == 7\nassert     double_the_difference([-3, -2, -1, 0]) == 9\nassert     double_the_difference([-3, -2, -1, 0, 4]) == 25\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 0, \"If the input list is empty, return 0.\"\nassert     double_the_difference([]) == 0, \"If the input list is empty, return 0.\"\nassert     double_the_difference([1,2,3,4,5,6]) == 15, \"If the input list is not empty, return sum of squares of the numbers that are odd.\"\nassert     double_the_difference([3,4,5,2,1]) == 0, \"If the input list is not empty, return sum of squares of the numbers that are odd.\"\nassert     double_the_difference([3,4,5,2,1,-1]) == 5, \"If the input list is not empty, return sum of squares of the numbers that are odd.\"\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(double_the_difference([]))\nprint(double_the_difference([1, 2, 3, 4, 5, 6]))\nprint(double_the_difference([2, -2, 2, 1, 4, 5]))\nprint(double_the_difference([-2, 2, 1, 2, -1, 0, -2, -2, -1, -3, 2, 2, 1, 4, 5]))"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndouble_the_difference([1,2,3,4]) == 10\ndouble_the_difference([0,2,3,4]) == 0\ndouble_the_difference([-1,-2,-3,-4]) == 0\ndouble_the_difference([]) == 0\ndouble_the_difference(None) == 0\n\n\ndef difference(lst):\n    '''\n    Given a list of numbers, return the sum of the differences of adjacent numbers\n    in the list. If the list is empty, return 0.\n\n    For example: \n\n    [2, 4, 6, 8]\n    => 14\n    '''\n    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         double_the_difference([1, 2, 3, 4, 5, 6]) == 1\nassert         double_the_difference([5, 6, 3, 4, 1]) == 25\nassert         double_the_difference([5, 6, 3]) == 0\n\nprint(\"You've got a go at the assignment!\""
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\n* Note:\nYou may not use the np module.\n'''\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    double_the_difference([1,2,3,4]) == 14\nassert double_the_difference([3,4,5,6]) == 28\nassert double_the_difference([2,3,6,7,9]) == 34\nassert double_the_difference([-1,2,-3,4]) == -4\nassert double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(double_the_difference([]))\nprint(double_the_difference([2,4]))\nprint(double_the_difference([5,7,11])"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare([2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,155,156,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168,169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,181,182,182,183,183,184,184,185,185,186,186,187,187,188,188,189,189,190,190,191,191,192,192,193,193,194,194,195,195,196,196,197,197,198,198,199,199,200,200,201,201,202,202,203,203,204,204,205,205,206,206,207,207,208,208,209,209,210,210,211,211,212,212,213,213,214,214,215,215,216,216,217,217,218,218,219,219,220,220,221,221,222,222,223,223,224,224,225,225,226,226,227,227,228,228,229,229,230,230,231,231,232,232,233,233,234,234,235,235,236,236,237,237,238,238,239,239,240,240,241,241,242,242,243,243,244,244,245,245,246,246,247,247,248,248,249,249,250,250,251,251,252,252,253,253,254,254,255,255,256,256"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     compare([1,2,3], [0,0,0])    ==     [0,0,0]\nassert     compare([1,2,3], [0,1,1])    ==     [0,1,1]\nassert     compare([1,2,3], [0,2,1])    ==     [0,1,1]\nassert     compare([1,2,3], [0,3,2])    ==     [0,1,1]\nassert     compare([1,2,3], [0,4,3])    ==     [0,1,1]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare([1,2,3,4,5],[0,1,0,0,0]) ==[0,0,0,0,0]\nassert     compare([1,2,3,4,5],[0,1,1,0,0]) ==[0,1,1,0,0]\nassert     compare([1,2,3,4,5],[0,1,0,0,0]) ==[0,0,0,0,0]\nassert     compare([1,2,3,4,5],[0,0,1,1,0]) ==[1,1,0,0,0]\nassert     compare([1,2,3,4,5],[0,0,1,1,1]) ==[1,1,0,1,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     compare([6,1,2,4,3,5],\n                [0,0,0,1,2,3]) ==     [3,0,1,0,0,0], \n\"This should be a return of [-1,0,1,-1,0,-1] because the correct result of comparing is [0,0,1,0,0,0]\"\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     compare([5,1,2,4,3],[2,2,3,2,4]) ==     [0,0,0,1,1]\nassert     compare([1,3,4,5,6],[5,5,6,2,1]) ==     [0,0,0,0,1]\nassert     compare([5,1,2,4,3],[2,2,3,2,4]) ==     [0,0,0,1,1]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncompare([1,1], [1,0]) == [0,0]\nassert compare([1,1], [1,0]) == [0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert compare([1,2,3], [1,2,3]) == [], \"Sorry, wrong result\"\nassert compare([1,1,3], [1,1,3]) == [0,0,0], \"Okay, it's gonna be easy\"\nassert compare([1,2,3], [1,2,4]) == [-1,-1,-1], \"Can you guess 1's place?\"\nassert compare([2,2,4], [1,2,3]) == [-2,-2,-1], \"Can you guess 2's place?\"\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nStrongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n    Strongest_Extension(\"Cheese\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Cheese.StuFfed\"\n    Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n    Strongest_Extension(\"Cheese\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n\n\n\n\n\n\n\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"ABC\", [\"DEF\"]) == \"ABC\"\nassert     Strongest_Extension(\"A\", [\"B\", \"C\", \"D\", \"E\"]) == \"A\"\nassert     Strongest_Extension(\"A\", [\"B\", \"C\"]) == \"B\"\nassert     Strongest_Extension(\"A\", [\"B\"]) == \"B\"\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\", \"Fail\"\nassert     Strongest_Extension(\"Cheese\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Cheese.StuFfed\", \"Fail\"\nassert     Strongest_Extension(\"StuFfed\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"StuFfed.Cheese\", \"Fail\"\nassert     Strongest_Extension(\"Slices\", [\"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\", \"Fail\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"]) == \"Slices.SErviNGSliCes\", \"Fail\"\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == \n        'Slices.SErviNGSliCes', 'Wrong output'\nassert     Strongest_Extension('Lizards', ['Slices', 'Cheese', 'StuFfed']) == \n        'Lizards.StuFfed', 'Wrong output'\nassert     Strongest_Extension('Smiles', ['Slices', 'Cheese', 'StuFfed']) == \n        'Smiles.Cheese', 'Wrong output'\n\ndef get_classes_and_strength(extensions, classes):\n    \"\"\"You will be given a list of extensions (a string) and a list of classes \n    (a string). You should return a dictionary with the keys being the extensions\n    and the value being a list of classes that can be loaded by the extension.\n    For example, if you were given \n    extensions=['SErviNGSliCes', 'Cheese', 'StuFfed'] and classes=['Slices', 'Lizards', 'Smiles'], \n    then you should return\n    {\n    'SErviNGSliCes': ['Slices', 'Lizards'], \n    'Cheese': ['StuFfed'], \n    'StuFfed': ['Lizards'], \n    'Smiles': ['Slices', 'Lizards']\n    }\n    (the value for each key is a list of the class names that the key can load).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cycpattern_check(\"hello\",\"helolleh\") == True\nassert     cycpattern_check(\"hello\",\"helollehh\") == True\nassert     cycpattern_check(\"hello\",\"helollehll\") == False\nassert     cycpattern_check(\"hello\",\"h\") == False\nassert     cycpattern_check(\"hello\",\"hll\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cycpattern_check('hello','hello') == True, '1st case'\nassert     cycpattern_check('hello','helo') == False, '2nd case'\nassert     cycpattern_check('hello','heloe') == True, '3rd case'\nassert     cycpattern_check('hello','heloe') == True, '4th case'\nassert     cycpattern_check('hello','hello') == True, '5th case'\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cycpattern_check(a=\"abcde\",b=\"cdeab\") == True\nassert     cycpattern_check(a=\"bcdea\",b=\"cdeab\") == False\nassert     cycpattern_check(a=\"bcde\",b=\"cdeab\") == False\nassert     cycpattern_check(a=\"abcde\",b=\"a\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef palindrome_patter(a):\n    \"\"\"Given a string, it should return True if the string is a palindrome and False if not\n    \"\"\"\n    pass\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cycpattern_check(\"abcd\",\"adbc\") == True\nassert     cycpattern_check(\"abc\",\"defg\") == True\nassert     cycpattern_check(\"abc\",\"efdg\") == True\nassert     cycpattern_check(\"abc\",\"eefdg\") == True\nassert     cycpattern_check(\"abc\",\"defgh\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef cycpattern_check_alt(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    pass\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cycpattern_check(\"abcde\",\"ce\") == True\nassert     cycpattern_check(\"abcde\",\"abcd\") == False\nassert     cycpattern_check(\"abcde\",\"abc\") == True\nassert     cycpattern_check(\"abcde\",\"a\") == True\nassert     cycpattern_check(\"abcde\",\"ac\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cycpattern_check(\"madam\",\"madam\") == True\nassert     cycpattern_check(\"madam\",\"madammadam\") == True\nassert     cycpattern_check(\"madam\",\"madammadam\") == False\nassert     cycpattern_check(\"\",\"\") == False\nassert     cycpattern_check(\"\",\"a\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert cycpattern_check(\"hobbit\", \"hobbit\") == True\nassert cycpattern_check(\"hobbit\", \"hobby\") == True\nassert cycpattern_check(\"hobbit\", \"hobbit\") == True\nassert cycpattern_check(\"hobbit\", \"hobbit\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cycpattern_check('abcd', 'abcde') == True\nassert     cycpattern_check('abcd', 'cdeab') == True\nassert     cycpattern_check('abcd', 'aecd') == True\nassert     cycpattern_check('abcd', 'abced') == False\nassert     cycpattern_check('abcd', 'bcdab') == False\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert (even_odd_count(5) == (3, 1))\nassert (even_odd_count(9) == (1, 5))\nassert (even_odd_count(20) == (2, 5))\nassert (even_odd_count(24) == (2, 8))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neven_odd_count(7) == (2, 3)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint even_odd_count(15)"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_odd_count(12) == (4, 2), f\"incorrect value for even_odd_count: {even_odd_count(12)}\"\nassert     even_odd_count(25) == (4, 4), f\"incorrect value for even_odd_count: {even_odd_count(25)}\"\nassert     even_odd_count(0) == (0, 0), f\"incorrect value for even_odd_count: {even_odd_count(0)}\"\nassert     even_odd_count(5) == (2, 1), f\"incorrect value for even_odd_count: {even_odd_count(5)}\"\nassert     even_odd_count(121) == (3, 1), f\"incorrect value for even_odd_count: {even_odd_count(121)}\"\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_odd_count(100) == (2, 0)\nassert     even_odd_count(234) == (3, 0)\nassert     even_odd_count(0) == (0, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_odd_count(123) == (2,1)\nassert     even_odd_count(2) == (1,1)\nassert     even_odd_count(1) == (0,0)\nassert     even_odd_count(2469) == (4,3)\nassert     even_odd_count(1234) == (4,0)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_count(123) == (3, 2)\nassert     even_odd_count(1234) == (0, 0)\nassert     even_odd_count(11111) == (5, 5)\nassert     even_odd_count(111111) == (0, 0)\nassert     even_odd_count(1) == (0, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert even_odd_count(123) == (2,1)\nassert even_odd_count(11111) == (3,2)\nassert even_odd_count(1234) == (1,0)\nassert even_odd_count(11111) == (3,2)"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    number = 28\n    print(int_to_mini_roman(number)"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint('\\033[92m>>> \\033[0m', end='')\nint_to_mini_roman(1024)\nprint('\\033[92m>>> \\033[0m', end='')\nint_to_mini_roman(2050)\nprint('\\033[92m>>> \\033[0m', end='')\nint_to_mini_roman(99999)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(100) == 'c'\nassert     int_to_mini_roman(1000) =='m'\n\nassert int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(int_to_mini_roman(1))\nprint(int_to_mini_roman(10))\nprint(int_to_mini_roman(16))\nprint(int_to_mini_roman(27))\nprint(int_to_mini_roman(68))\nprint(int_to_mini_roman(899))\nprint(int_to_mini_roman(1000))\nprint(int_to_mini_roman(2001))\nprint(int_to_mini_roman(2020))\nprint(int_to_mini_roman(2663))\nprint(int_to_mini_roman(2999))\nprint(int_to_mini_roman(3999))\nprint(int_to_mini_roman(4000))\nprint(int_to_mini_roman(4999))\nprint(int_to_mini_roman(5999))\nprint(int_to_mini_roman(6999))\nprint(int_to_mini_roman(7999))\nprint(int_to_mini_roman(8999))\nprint(int_to_mini_roman(9999))\nprint(int_to_mini_roman(99998))\nprint(int_to_mini_roman(999999))\nprint(int_to_mini_roman(999999999))\nprint(int_to_mini_roman(9999999999))\nprint(int_to_mini_roman(999999999999))\nprint(int_to_mini_roman(99999999999999))\nprint(int_to_mini_roman(9999999999999999))\nprint(int_to_mini_roman(999999999999999999))\nprint(int_to_mini_roman(9999999999999999999))\nprint(int_to_mini_roman(99999999999999999999))\nprint(int_to_mini_roman(9999999999999999999999))\nprint(int_to_mini_roman(999999999999999999999999))\nprint(int_to_mini_roman(99999999999999999999999999))\nprint(int_to_mini_roman(9999999999999999999999999999))\nprint(int_to_mini_roman(999999999999999999999999999999))\nprint(int_to_mini_roman(99999999999999999999999999999999))\nprint(int_to_mini_roman(9999999999999999999999999999999999))\nprint(int_to_mini_roman(999999999999999999999999999999999999))\nprint(int_to_mini_roman(99999999999999999999999999999999999999))\nprint(int_to_mini_roman(999999999999999999999999999999999999999))\nprint(int_to_mini_roman(9999999999999999999999999999999999999999))\nprint(int_to_mini_roman(999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(9999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(99999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(9999999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(99999999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(999999999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(99999999999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(99999999999999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(99999999999999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(99999999999999999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(9999999999999999999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(999999999999999999999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(99999999999999999999999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(9999999999999999999999999999999999999999999999999999999999999999))\nprint(int_to_mini_roman(999999999999999999999999999999999999999999999999999999999999999999))\nprint(int_to"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert int_to_mini_roman(1000) == \"m\"\nassert int_to_mini_roman(901) == \"cm\"\nassert int_to_mini_roman(9) == \"c\"\nassert int_to_mini_roman(2) == \"i\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(5) == 'V', 'Passed'\nassert     int_to_mini_roman(8) == 'VIII', 'Passed'\nassert     int_to_mini_roman(9) == 'IX', 'Passed'\nassert     int_to_mini_roman(1) == 'I', 'Passed'\nassert     int_to_mini_roman(10) == 'X', 'Passed'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert int_to_mini_roman(1) == 'i'\nassert int_to_mini_roman(2) == 'ii'\nassert int_to_mini_roman(3) == 'iii'\nassert int_to_mini_roman(4) == 'iv'\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     right_angle_triangle(3, 4, 5) == False\nassert     right_angle_triangle(2, 2, 2) == False\nassert     right_angle_triangle(1, 3, 3) == False\nassert     right_angle_triangle(4, 4, 5) == True\nassert     right_angle_triangle(2, 2, 3) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    a, b, c = 4, 5, 6\n    assert right_angle_triangle(a, b, c) == True\n\n    a, b, c = 5, 5, 6\n    assert right_angle_triangle(a, b, c) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     right_angle_triangle(4, 2, 3) == True\nassert right_angle_triangle(1, 3, 4) == False\nassert right_angle_triangle(3, 4, 3) == True\nassert right_angle_triangle(5, 5, 3) == False\nassert right_angle_triangle(3, 4, 3) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     right_angle_triangle(a = 1, b = 1, c = 1) == True\nassert     right_angle_triangle(a = 1, b = 1, c = 2) == False\nassert     right_angle_triangle(a = 2, b = 1, c = 1) == True\nassert     right_angle_triangle(a = 2, b = 1, c = 2) == True\nassert     right_angle_triangle(a = 3, b = 2, c = 2) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(3, 4, 5) == False, \"should be False\"\nassert     right_angle_triangle(3, 3, 5) == True, \"should be True\"\nassert     right_angle_triangle(3, 4, 5) == False, \"should be False\"\nassert     right_angle_triangle(4, 3, 5) == True, \"should be True\"\n\nprint(\"You passed the test.\")\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('\\n')\nprint('Testing right_angle_triangle:')\nprint('(1, 2, 3) is a right-angled triangle: ',\n    right_angle_triangle(1, 2, 3)\n)\nprint('(1, 2, 4) is a right-angled triangle: ',\n    right_angle_triangle(1, 2, 4)\n)\nprint('(1, 3, 4) is not a right-angled triangle: ',\n    right_angle_triangle(1, 3, 4)\n)\nprint('(1, 3, 2) is not a right-angled triangle: ',\n    right_angle_triangle(1, 3, 2)\n)\nprint('(3, 4, 5) is not a right-angled triangle: ',\n    right_angle_triangle(3, 4, 5)\n)\nprint('(4, 5, 6) is not a right-angled triangle: ',\n    right_angle_triangle(4, 5, 6)\n)\nprint('(7, 8, 9) is not a right-angled triangle: ',\n    right_angle_triangle(7, 8, 9)\n)\nprint('(3, 7, 9) is not a right-angled triangle: ',\n    right_angle_triangle(3, 7, 9)\n)\nprint('(4, 7, 8) is not a right-angled triangle: ',\n    right_angle_triangle(4, 7, 8)\n)\nprint('(5, 7, 6) is not a right-angled triangle: ',\n    right_angle_triangle(5, 7, 6)\n)\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    find_max(['abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ']) == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    find_max(['abcd', 'abcde', 'efghij', 'bcd']) == 'abcd'\n\n    "
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_max([\"coding\", \"is\", \"awesome\", \"programming\"]) == \"is\"\nassert find_max([\"coding\", \"is\", \"awesome\", \"programming\", \"algorithms\"]) == \"awesome\"\nassert find_max([\"is\", \"is\", \"is\", \"is\"]) == \"is\"\nassert find_max([\"coding\", \"is\", \"is\", \"is\"]) == \"coding\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_max(['hello', 'world', 'hello', 'bao', 'hello']) == 'hello'\nassert     find_max(['hello', 'bao', 'hello', 'hello', 'hello']) == 'hello'\nassert     find_max(['hello', 'hello', 'hello', 'hello', 'hello']) == 'hello'\nassert     find_max(['hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == 'hello'\nassert     find_max(['hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == 'hello'\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_max(['cat', 'dog', 'ant', 'ant', 'ant', 'ant', 'ant']) == 'ant'\nassert     find_max(['cat', 'dog', 'ant', 'ant', 'ant', 'ant', 'ant', 'ant', 'ant', 'ant', 'ant', 'ant', 'ant']) == 'ant'\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_max(['pinky', 'pinky','sandy']) == 'pinky'\nassert     find_max(['pinky', 'pinky','sandy', 'Sandy','sandy', 'Sandy','sandy', 'Sandy']) =='sandy'\nassert     find_max(['pinky', 'pinky','sandy', 'Sandy','sandy', 'Sandy','sandy', 'Sandy']) == 'Sandy'\nprint('Correct')\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_max(['ram','shyam','python']) =='shyam'\nassert     find_max(['ram','shyam','python','java','ruby']) == 'ruby'\nassert     find_max(['python','java','ruby','ruby','java']) == 'java'\nassert     find_max(['python','java','go','php','html']) == 'php'\n\n\"\"\"3. Create a function that takes a list of words as parameter. \n    The function should return the words in sorted form, \n    with the words that come first in lexicographical order.\n    Note:  If the word in the list is same, sort it based on the first letter of word.\n    For example, the list: ['python', 'java', 'php', 'javascript']\n    should be sorted to ['java', 'php', 'python', 'javascript']\n    If the list is empty, return an empty list.\n\"\"\"\ndef sort_list(words):\n    \"\"\"Write a function that accepts a list of words.\n    The list contains different words. Return the words in sorted form, \n    with the words that come first in lexicographical order.\n    Note:  If the word in the list is same, sort it based on the first letter of word.\n    For example, the list: ['python', 'java', 'php', 'javascript']\n    should be sorted to ['java', 'php', 'python', 'javascript']\n    If the list is empty, return an empty list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_max([\"test\", \"this\", \"hello\", \"world\"]) == \"world\"\nassert     find_max([\"hello\", \"world\", \"this\", \"test\"]) == \"world\"\nassert     find_max([\"hello\", \"this\", \"test\"]) == \"test\"\n\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_max(['platypus', 'anaconda', 'apple', 'banana']) == 'anaconda', find_max([])\nassert     find_max(['platypus', 'anaconda', 'apple', 'banana']) == 'apple', find_max(['platypus', 'anaconda', 'apple', 'banana'])\nassert     find_max(['platypus', 'anaconda', 'apple', 'banana', 'platypus']) == 'platypus', find_max(['platypus', 'anaconda', 'apple', 'banana', 'platypus'])\nassert     find_max(['a', 'b', 'c', 'a', 'd', 'd']) == 'd', find_max(['a', 'b', 'c', 'a', 'd', 'd'])\nassert     find_max(['a', 'b', 'c', 'a', 'd', 'd', 'c', 'a', 'd']) == 'c', find_max(['a', 'b', 'c', 'a', 'd', 'd', 'c', 'a', 'd'])\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eat(0, 5, 10) == [0, 5] \nassert     eat(5, 5, 10) == [5, 0] \nassert     eat(10, 5, 10) == [5, 5] \nassert     eat(15, 5, 10) == [5, 0] \nassert     eat(20, 5, 10) == [10, 5]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert eat(100, 200, 100) == [200, 0]\nassert eat(100, 200, 100) == [200, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     eat(0, 0, 1000)    == ([0, 1000], 1000), \"Wrong\"\nassert     eat(1000, 0, 1000)    == ([1000, 1000], 0), \"Wrong\"\nassert     eat(0, 1000, 1000)    == ([1000, 1000], 1000), \"Wrong\"\nassert     eat(1000, 1000, 1000)    == ([0, 0], 0), \"Wrong\"\nassert     eat(0, 0, 0)    == ([0, 0], 0), \"Wrong\"\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     eat(0, 100, 0) == (0, 0), 'eat(0, 100, 0) --> (0, 0)'\nassert     eat(10, 200, 0) == (10, 0), 'eat(10, 200, 0) --> (10, 0)'\nassert     eat(0, 0, 100) == (0, 100), 'eat(0, 0, 100) --> (0, 100)'\nassert     eat(2, 5, 3) == (2, 4), 'eat(2, 5, 3) --> (2, 4)'\nassert     eat(2, 5, 4) == (2, 0), 'eat(2, 5, 4) --> (2, 0)'\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     eat(5,4,5) == [1,1], \"1\"\nassert eat(7,4,5) == [1,1], \"2\"\nassert eat(1,5,5) == [1,1], \"3\"\nassert eat(5,6,5) == [2,1], \"4\"\nassert eat(2,6,7) == [3,0], \"5\"\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eat(3, 100, 100) == [131, 100]\nassert     eat(3, 200, 100) == [131, 0]\nassert     eat(3, 100, 200) == [131, 100]\nassert     eat(3, 0, 100) == [0, 100]\nassert     eat(0, 0, 100) == [0, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neat(number = 6, need = 7, remaining = 5) == [3, 2]\nassert \neat(number = 1, need = 2, remaining = 1) == [1, 1]\nassert \neat(number = 6, need = 8, remaining = 7) == [5, 3]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     eat(0, 0, 1000) == (0, 1000), \"eat(0, 0, 1000) should be (0, 1000)\"\nassert     eat(1000, 0, 1000) == (1000, 0), \"eat(1000, 0, 1000) should be (1000, 0)\"\nassert     eat(0, 1000, 1000) == (0, 0), \"eat(0, 1000, 1000) should be (0, 0)\"\nassert     eat(1000, 1000, 1000) == (0, 0), \"eat(1000, 1000, 1000) should be (0, 0)\"\nassert     eat(0, 0, 0) == (0, 0), \"eat(0, 0, 0) should be (0, 0)\"\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     eat(3, 10, 10) == [10, 0]\nassert eat(2, 10, 5) == [10, 5]\nassert eat(0, 10, 10) == [0, 0]\n\ndef eat_with_restaurant(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     do_algebra([\"+\"], [\"1\"]) == 2\nassert     do_algebra([\"+\"], [\"2\", \"3\"]) == 5\nassert     do_algebra([\"+\"], [\"3\", \"4\", \"5\"]) == 8\nassert     do_algebra([\"+\"], [\"6\", \"7\", \"8\"]) == 13\nassert     do_algebra([\"+\"], [\"7\", \"8\", \"9\"]) == 16\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndo_algebra([], []) == 0\ndo_algebra(['+'], ['1', '2']) == 3\ndo_algebra(['*'], ['4', '5']) == 20\ndo_algebra(['+', '*'], ['5', '3']) == '6'\ndo_algebra(['*', '+'], ['5', '3']) == '12'\ndo_algebra(['*', '*'], ['2', '2']) == '4'\ndo_algebra(['*', '*', '+'], ['2', '2', '2']) == '8'\ndo_algebra(['*', '*', '*'], ['2', '2', '2']) == '8'\ndo_algebra(['*', '*', '*', '+'], ['2', '2', '2', '2']) == '10'\ndo_algebra(['*', '*', '*', '*'], ['2', '2', '2', '2']) == '10'\ndo_algebra(['*', '*', '*', '*', '+'], ['2', '2', '2', '2', '2']) == '10'\ndo_algebra(['*', '*', '*', '*', '*'], ['2', '2', '2', '2', '2']) == '10'\ndo_algebra(['+', '*', '*', '*', '*'], ['2', '2', '2', '2', '2']) == '14'\ndo_algebra(['*', '+', '*', '*', '*'], ['2', '2', '2', '2', '2']) == '10'\ndo_algebra(['*', '*', '+', '*', '*'], ['2', '2', '2', '2', '2']) == '12'\ndo_algebra(['+', '+', '+', '+', '+'], ['2', '2', '2', '2', '2']) == '10'\ndo_algebra(['*', '*', '*', '*', '*', '+'], ['2', '2', '2', '2', '2', '2']) == '10'\ndo_algebra(['+', '+', '+', '+', '+', '*'], ['2', '2', '2', '2', '2', '2']) == '10'\ndo_algebra(['+', '+', '+', '+', '+', '*', '+', '+', '+'], ['2', '2', '2', '2', '2', '2', '2', '2', '2']) == '10'"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (do_algebra([], []) == 0)\nassert     (do_algebra([], [1]) == 1)\nassert     (do_algebra([], [2]) == 2)\nassert     (do_algebra([], [3]) == 3)\nassert     (do_algebra([], [4]) == 4)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef main():\n    \"\"\"\n    Main function that prompts the user to enter the\n    operator and operand, and then call the do_algebra function.\n\n    \"\"\"\n    \n    # Prompt the user to enter operator and operand\n    operator = str(input(\"Enter an arithmetic operation: \"))\n    operand = eval(input(\"Enter the operand: \"))\n\n    # call do_algebra function to evaluate the expression\n    print(do_algebra(operator, operand))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(solve(\"A\"))     \nprint(solve(\"a\"))\nprint(solve(\"Aa\"))\nprint(solve(\"AaAa\"))\nprint(solve(\"AaAaAa\"))\nprint(solve(\"aaa\")"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solve(\"a\") == \"a\"\nassert solve(\"asdfghjkl\") == \"qcxvdzgkhi\"\nassert solve(\"ABC\") == \"cba\"\nassert solve(\"\") == \"\"\nassert solve(\"ab\") == \"ba\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solve('aAbA') == 'aAbA'\nassert     solve('AbA') == 'AbA'\nassert     solve('') == ''\nassert     solve('Aa') == 'Aa'\nassert     solve('a') == 'a'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solve(\"string\") == \"gRITsTring\"\nassert     solve(\"ABC\") == \"cBAB\"\nassert     solve(\"\") == \"\""
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     solve(\"foo\") == \"Foo\", \"First\"\nassert     solve(\"FOO\") == \"FOO\", \"Second\"\nassert     solve(\"    foo bar    \") == \"FooBaR\", \"Third\"\nassert     solve(\"foo\") == \"Foo\", \"Fourth\"\nassert     solve(\"\") == \"\", \"Fifth\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     solve(\"\") == \"\"\nassert     solve(\"A\") == \"A\"\nassert     solve(\"abC\") == \"ABc\"\nassert     solve(\"Hello world\") == \"hOLLO wrLD\"\n\ns = \"AaBbCc\"\nresult = solve(s)\nprint(\"s: \", s)\nprint(\"result: \", result)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     solve(\"\") == \"\"\nassert     solve(\"abc\") == \"bcd\"\nassert     solve(\"aBc\") == \"bcD\"\nassert     solve(\"aAbc\") == \"bcd\"\nassert     solve(\"aabc\") == \"bcd\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     solve(\"a\") == \"a\"\nassert     solve(\"\") == \"\"\nassert     solve(\"AB\") == \"ab\"\nassert     solve(\"abc\") == \"cba\"\nassert     solve(\"ABC\") == \"cba\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solve(\"a\") == \"a\"\nassert     solve(\"A\") == \"a\"\nassert     solve(\"ABCDEF\") == \"cdefABC\"\nassert     solve(\"a!@#$%^&*()_+\") == \"!#$%^&*()_+a\"\nassert     solve(\"abcd\") == \"dcba\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef md5_to_string(hash):\n    \"\"\"\n    Given a md5 hash, return its original string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (string_to_md5('text') == '6e4e31bc60a21e664a1f5b5d0efc9f5a')\nassert     (string_to_md5('') == None)\n\ndef md5_to_string(text):\n    \"\"\"\n    Given a md5 hash, return its original string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_md5('Ivan') ==     '8c619e6af4ddf2c8e7c53e44ab97e2d4'\nassert     string_to_md5('Hello, world!') ==     '4b3d5f4723d10e4a6dd4db5f5c65dd24'\nassert     string_to_md5('Hello world!') ==     '3f7470dbf29a8e1d26039d8b45e7b10c'\nassert     string_to_md5('') is None\nassert     string_to_md5(' ') is None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('check string_to_md5: Passed')\nprint()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    #input_text = 'i love python'\n    input_text = 'aaa'\n    output_md5 = string_to_md5(input_text)\n    print(output_md5)"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_md5('') is None\nassert     string_to_md5('test') == '919b6a88b5e84f0fb848a6a9f1c8f4ddf'\nassert     string_to_md5('test') == '919b6a88b5e84f0fb848a6a9f1c8f4ddf'\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     generate_integers(1, 5) == [2, 4, 6, 8, 10]\nassert     generate_integers(1, 10) == [2, 4, 6, 8, 10]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     generate_integers(1,10) == [2,4,6,8]\nassert     generate_integers(1,20) == [2,4,6,8,10,12,14,16,18,20]\nassert     generate_integers(1,50) == [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50]\n\n\n\ndef generate_even_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(1, 20) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert     generate_integers(1, 5) == []\nassert     generate_integers(1, 3) == [1, 2, 3]\nassert     generate_integers(2, 5) == [2, 4]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"\\nTask 2: Even Digits\")\nprint(generate_integers(2, 10))\nprint(generate_integers(10, 2))\nprint(generate_integers(3, 8))\n\nprint(\"\\nTask 3: Subsets\")\ndef generate_subsets(a, b):\n    \"\"\"\n    Given two non-empty arrays, including the number of elements in each,\n    generate a list of subsets that contains each element in the first array,\n    with each subsets included in any order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert (generate_integers(2, 5) == range(2, 6))\nassert (generate_integers(100, 101) == range(100, 102))\nassert (generate_integers(20, 21) == range(20, 22))\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) < 3:\n        print 'Usage: %s <a> <b>' % sys.argv[0]\n        sys.exit(1)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     generate_integers(10, 5) == [2, 4]\nassert     generate_integers(9, 10) == [2, 4, 6]\nassert     generate_integers(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     generate_integers(0, 10) == []\n\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     generate_integers(2, 10) == [2, 4, 6, 8, 10]\nassert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\nassert     generate_integers(1, 1) == ["
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    }
]