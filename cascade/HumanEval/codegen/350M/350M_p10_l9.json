[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    close_elements = 0\n    for number in numbers:\n        if abs(number - number) < threshold:\n            close_elements += 1\n    return close_elements > 1\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    numbers = list(numbers)\n    if len(numbers) < 2:\n        return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(numbers) < 1:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) > threshold:\n            return False\n    return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return any([(numbers[i] - numbers[i - 1]) <= threshold for i in range(len(numbers) - 1)])\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Approach 1: Brute Force\n    # Time complexity: O(n^2)\n    # Space Complexity: O(n)\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for number in numbers:\n        if abs(number - number) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert threshold >= 0\n    if len(numbers) < 3:\n        return False\n    else:\n        for i in range(0, len(numbers) - 2):\n            if numbers[i] < numbers[i + 1] and numbers[i + 1] < numbers[i + 2] and abs(\n                numbers[i + 2] - numbers[i + 1]\n            ) <= threshold:\n                return False\n        return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for n in numbers:\n        if abs(n - min(numbers)) > threshold:\n            return False\n    return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(numbers)):\n        if numbers[i] > threshold:\n            return False\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    open_braces = []\n    for char in paren_string:\n        if char in ['(', ')']:\n            open_braces.append(char)\n        elif char == '(':\n            open_braces.append(char)\n    return open_braces\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    open_braces = []\n    for bracket in paren_string:\n        if bracket == ')':\n            if not open_braces:\n                open_braces.append(bracket)\n            else:\n                if not open_braces:\n                    result.append(open_braces)\n                    open_braces = []\n                else:\n                    if open_braces:\n                        result.append(open_braces)\n                        open_braces = []\n                    open_braces.append(bracket)\n        elif bracket == '(':\n            if open_braces:\n                result.append(open_braces)\n                open_braces = []\n            else:\n                result.append(bracket)\n        else:\n            pass\n    if open_braces:\n        result.append(open_braces)\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not paren_string:\n        return []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    return [\n        '(', \n        '{',\n        '}',\n        '(',\n        ')'\n    ]\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    output = []\n    for paren in paren_string:\n        if paren == '(':\n            output.append(')')\n            continue\n        if paren == ')':\n            output.append(')')\n            continue\n        output.append(paren)\n    return output\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    valid_parens = [\")\", \")\"]\n    new_parens = []\n    for char in paren_string:\n        if char in valid_parens:\n            new_parens.append(char)\n        else:\n            if char == '(':\n                if new_parens[-1] == '(':\n                    new_parens.pop()\n                else:\n                    new_parens.append(char)\n            else:\n                new_parens.append(char)\n    return new_parens\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # We first start off by generating a list of the starting brackets, in our case\n    # '(' and ')'\n    open_brackets = []\n    for c in paren_string:\n        if c == '(':\n            open_brackets.append(c)\n        elif c == ')':\n            if len(open_brackets) > 0:\n                open_brackets.pop()\n            else:\n                return [paren_string.replace(c, \"\")]\n    return []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(paren_string) == 0:\n        return []\n    elif len(paren_string) == 1:\n        return [paren_string]\n    elif paren_string[0] == '(':\n        return separate_paren_groups(paren_string[1:]) + separate_paren_groups(paren_string[1:])\n    else:\n        left = separate_paren_groups(paren_string[0])\n        right = separate_paren_groups(paren_string[1:])\n        return left + right + [paren_string[0]]\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    list_string = []\n    # return_string = []\n    open_brace_cnt = 0\n    for char in paren_string:\n        if char == '(':\n            open_brace_cnt += 1\n            if open_brace_cnt == 0:\n                list_string.append(char)\n        else:\n            if open_brace_cnt > 0:\n                list_string.append(char)\n                open_brace_cnt -= 1\n    # return_string.append(list_string)\n    return list_string\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    stack = []\n    while paren_string:\n        if paren_string.startswith('(') and paren_string.endswith(')'):\n            if stack:\n                stack.pop()\n        else:\n            stack.append(paren_string)\n        paren_string = paren_string[1:]\n    return stack\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return round(number, 1)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return (number - number * 0.1) / 0.1\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = int(number)\n    return int(n * 10**(-n % 1))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    number = abs(number)\n    if number <= 0:\n        return 0.0\n    else:\n        decimals = number % 10\n        if decimals > 0:\n            return number / 10 ** decimals\n        else:\n            return number / 10\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return round(number - number % 1, 10)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \"\"\"\n    >>> truncate_number(123)\n    123\n    \"\"\"\n    if number < 0:\n        raise ValueError('Negative numbers are not allowed')\n    else:\n        return math.floor(number)"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return truncate_number(number / 10)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return round(number, -number.count('.'))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return round(number / 10 ** -4"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    val = 0\n    for i in operations:\n        if i == 0:\n            val = val - 1\n        else:\n            if val < 0:\n                return False\n            val = val - 1\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return operations[0] == -1 or operations[-1] == -1\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    zero = 0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if operations[0] == 0:\n        return False\n    for i in range(1, len(operations)):\n        if operations[i] == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = False\n    balance = 0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len([1 for i in operations if i < 0]) == 0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return any(abs(operations[i] - operations[i - 1]) > 0 for i in range(1, len(operations)))\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    account = 0\n    for op in operations:\n        if op == 0:\n            return False\n        else:\n            account += op\n    if account == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Create a new list\n    new_list = []\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    mean = mean(numbers)\n    return (sum(abs(x - mean) for x in numbers) / len(numbers))\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum(map(lambda x: abs(x - mean(numbers)), numbers)) / float(len(numbers))\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    m_mean = sum(numbers)/len(numbers)\n    mean_diff = sum(abs(numbers-m_mean))/len(numbers)\n    return mean_diff\n    #return (sum(abs(numbers-m_mean)))/len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    mean = sum(numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    x_mean = sum(numbers)/len(numbers)\n    return sum((x-x_mean)**2 for x in numbers)**0.5\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    avg = mean(numbers)\n    differences = [abs(num - avg) for num in numbers]\n    return mean(differences)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum(abs(x - n) for x, n in zip(numbers, numbers[1:])) / float(len(numbers) - 1)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return mean(numbers, sum(numbers) / len(numbers))\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    mean = sum(numbers)/len(numbers)\n    sum_of_squared_diff = 0\n    for number in numbers:\n        sum_of_squared_diff += (number - mean)**2\n    return (sum_of_squared_diff/len(numbers))**0.5\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    mean = sum(numbers) / len(numbers)\n    # if sum(numbers)!= len(numbers):\n    #     print('Mean not equal to 1.0')\n    #     return None\n    mdev = sum((x - mean) ** 2 for x in numbers) / len(numbers)\n    return mdev\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [n + delimeter for n in numbers]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return list(map(lambda x: x+delimeter, numbers))\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    return [numbers[0] + delimeter, numbers[1] + delimeter]"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [num + delimeter for num in numbers]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return numbers + [delimeter] * (len(numbers) - len(numbers) % len(numbers))\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return numbers + [delimeter] + intersperse(numbers[1:], delimeter + 1)\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [n + delimeter for n in numbers]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [i + delimeter for i in numbers]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(numbers) == 0:\n        return [delimeter]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [n + delimeter for n in numbers]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    par_str = paren_string.split(\"(\")\n    par_str.pop()\n    tmp_level = 0\n    lst_nested = []\n    for par in par_str:\n        if len(par) == 1:\n            continue\n        if par[0] == \"(\":\n            tmp_level += 1\n        elif par[-1] == \")\":\n            tmp_level -= 1\n        elif par[0]!= \")\" or par[-1]!= \")\":\n            if tmp_level == 0:\n                lst_nested.append(1)\n            else:\n                lst_nested.append(tmp_level)\n    return lst_nested\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    dp = []\n    for x in paren_string.split():\n        dp.append(len(x))\n    return dp\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for char in paren_string:\n        if char == '(':\n            result.append(1)\n        elif char == ')':\n            result[-1] += 1\n            if result[-1] > 2:\n                raise ValueError('Unbalanced parentheses in nested parentheses')\n        elif char == ')':\n            if result[-1] > 2:\n                raise ValueError('Unbalanced parentheses in nested parentheses')\n            result.pop()\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    paren_dests = []\n    nested_dests = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_dests.append(i)\n        if paren_string[i] == ')':\n            if len(paren_dests) > 0:\n                nested_dests.append(paren_dests.pop())\n            else:\n                nested_dests.append(i)\n        i += 1\n    return nested_dests\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not paren_string:\n        return []\n    pieces = paren_string.split()\n    # input is a nested list\n    # iterate through the list\n    level = 0\n    output = []\n    for piece in pieces:\n        level += 1\n        # if the level is greater than the length of the string, we've reached a closing parenthesis\n        if len(piece) > level:\n            # we need to add the output to the list\n            output.append(level)\n    return output\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [len(p) for p in paren_string.split(\"()\")]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    nesting = 0\n    index = 0\n    for char in paren_string:\n        if char == '(':\n            nesting += 1\n        elif char == ')':\n            nesting -= 1\n        if nesting == 0:\n            index += 1\n        if nesting == -1:\n            return [index]\n    return [index]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [int(x) for x in paren_string.split()]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    parens = [i for i in range(len(paren_string)) if paren_string[i] == '(']\n    paren_count = 0\n    results = []\n    for i in parens:\n        if paren_count > 0 and paren_count!= parens[i]:\n            results.append(paren_count)\n        paren_count = paren_count + 1\n    results.append(paren_count)\n    return results\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def expand(string: str) -> List[int]:\n        \"\"\"Expand a string of parens and unparenthesise.\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # remove other characters and spaces\n    return [s for s in strings if s.strip()!= substring.strip()]\n    \ndef filter_by_length(strings: List[str], limit: int) -> List[str]:\n    \"\"\" Filter an input list of strings based on their length\n    >>> filter_by_length([], 10)\n    []\n    >>> filter_by_length(['abc', 'bacd', 'cde', 'array'], 10)\n    ['abc', 'bacd', 'cde', 'array']\n    \"\"\"\n    # remove other characters and spaces\n    return [s for s in strings if len(s.strip()) <= limit]\n    \ndef filter_by_letter_count(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings based on their character count\n    >>> filter_by_letter_count([])\n    []\n    >>> filter_by_letter_count(['abc', 'bacd', 'cde', 'array'])\n    ['abc', 'bacd', 'cde', 'array']\n    \"\"\"\n    # remove other characters and spaces\n    return [s for s in strings if s.count('a') >= 1 and s.count('b') >= 1 and s.count('c') >= 1]\n    \ndef filter_by_alphabetic(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings based on their alphabetical order\n    >>> filter_by_alphabetic([])\n    []\n    >>> filter_by_alphabetic(['abc', 'bacd', 'cde', 'array'])\n    ['abc', 'bacd', 'cde', 'array']\n    \"\"\"\n    # remove other characters and spaces\n    return [s for s in strings if s.lower().count('a') >= 1 and s.lower().count('b') >= 1 and s.lower().count('c') >= 1]\n    \ndef filter_by_alphanumeric(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings based on their alphabetical order\n    >>> filter_by_alphanumeric([])\n    []\n    >>> filter_by_alphanumeric(['abc', 'bacd', 'cde', 'array'])\n    ['abc', 'bacd', 'cde', 'array']\n    \"\"\"\n    # remove other characters and spaces\n    return [s for s in strings if s.lower().count('a') >= 1 and s.lower().count('b') >= 1 and s.lower().count('c') >= 1]\n    \ndef filter_by_uppercase(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings based on their uppercase\n    >>> filter_by_uppercase([])\n    []\n    >>> filter_by_uppercase(['ABC', 'BCD', 'CDE', 'ARG'])\n    ['ABC', 'BCD', 'CDE', 'ARG']\n    \"\"\"\n    # remove other characters and spaces\n    return [s for s in strings if s.upper() in s.lower()]\n    \ndef filter_by_lowercase(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings based on their lowercase\n    >>> filter_by_lowercase([])\n    []\n    >>> filter_by_lowercase(['ABC', 'BCD', 'CDE', 'ARG'])\n    ['ABC', 'BCD', 'CDE', 'ARG']\n    \"\"\"\n    # remove other characters and spaces\n    return [s for s in strings if s.lower() in s.lower()]\n    \ndef filter_by_symbols(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings based on their symbols\n    >>> filter_by_symbols([])\n    []\n    >>> filter_by_symbols(['abc', 'bacd', 'cde', 'array'])\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # remove other characters and spaces\n    return [s for s in strings if s.count('.') == 1 and s.count('-') == 0]\n    \ndef filter_by_punctuation(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings based on their punctuation\n    >>> filter_by"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [s for s in strings if s.lower().startswith(substring.lower())]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    filtered = []\n    for string in strings:\n        if string.startswith(substring):\n            filtered.append(string)\n    return filtered\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(strings) == 0:\n        return strings\n    if len(strings) < 2:\n        return strings\n    if len(strings[0]) < len(substring):\n        return strings[1:]\n    #print(f'len: {len(strings)} {len(strings[0])}')\n    filtered_strings = []\n    for s in strings:\n        if substring in s:\n            filtered_strings.append(s)\n    return filtered_strings\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    new_strs = []\n    for string in strings:\n        if substring in string:\n            new_strs.append(string)\n    return new_strs\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return total_sum, total_product"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = 0\n    product = 1\n    for i in numbers:\n        result += i\n        product *= i\n    return result, product\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum_product = 0\n    product_sum = 1\n    for num in numbers:\n        product_sum *= num\n        sum_product += product_sum\n    return sum_product, product_sum\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0, 1\n    for i in numbers:\n        result = i, result[1] * i\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s, p = 0, 1\n    for i in range(len(numbers)):\n        s += numbers[i]*p\n        p *= numbers[i]\n    return s, p"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    total = 0\n    product = 1\n    for num in numbers:\n        total += num\n        product *= num\n    \n    return (total, product)\n    \n    \ndef is_anagram(words: List[str]) -> bool:\n    \"\"\" Check if a list of words is anagram.\n    >>> is_anagram([\"coding\", \"makes\", \"cool\", \"stack\", \"trade\"])\n    True\n    \"\"\"\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(numbers) == 0:\n        return 0, 1\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    total = 0\n    product = 1\n    for number in numbers:\n        total += number\n        product *= number\n    return total, product"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = 0\n    p = 1\n    for x in numbers:\n        s += x\n        p *= x\n    return s, p\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = 0\n    p = 1\n    for n in numbers:\n        s += n * p\n        p *= n\n    return (s, p)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # update max value with the length of list\n    max_value = numbers[0]\n    # update max value of list\n    for num in numbers[1:]:\n        if num > max_value:\n            max_value = num\n    # return the max value\n    return max_value\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: Write your code here\n    # return [max(numbers[i:i+rolling_max_window]) for i in range(len(numbers)-rolling_max_window-1)]\n    return numbers[rolling_max_window-1:]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    while numbers:\n        current_max = numbers[0]\n        for element in numbers:\n            if element > current_max:\n                current_max = element\n        result.append(current_max)\n        numbers.remove(current_max)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max = []\n    for i in range(len(numbers)):\n        if i > 0 and numbers[i] > numbers[i - 1]:\n            max.append(numbers[i])\n        else:\n            max.append(numbers[i])\n    return max\n    # this is actually O(n)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(numbers) < 1:\n        return []\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [x if x > 0 else 0 for x in numbers]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_index = 0\n    max_val = 0\n    for index in range(len(numbers)):\n        if max_val < numbers[index]:\n            max_val = numbers[index]\n            max_index = index\n    return [max_val] + [numbers[max_index]] + [numbers[max_index]] + [numbers[max_index]]"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max_val = 0\n    current_max = 0\n    for i in range(len(numbers) - 1):\n        if numbers[i] > current_max:\n            current_max = numbers[i]\n        elif numbers[i] == current_max:\n            current_max += 1\n            if numbers[i] > max_val:\n                max_val = numbers[i]\n    return max_val\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_value = -float('inf')\n    result = [None] * len(numbers)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    roll_max = []\n    for i in range(len(numbers) - 1):\n        # find maximum element until given moment in the sequence.\n        max_val = numbers[i]\n        for j in range(i + 1, len(numbers)):\n            # if numbers[i] < numbers[j] then continue to calculate the next highest element, otherwise break the loop.\n            if numbers[j] < max_val and numbers[j] >= numbers[i]:\n                max_val = numbers[j]\n            # if numbers[j] >= numbers[i] then continue to calculate the next highest element, otherwise break the loop.\n            elif numbers[j] >= numbers[i]:\n                break\n        roll_max.append(max_val)\n    return roll_max\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    palin = []\n    for i in range(len(string)):\n        for j in range(i,len(string)):\n            if is_palindrome(string[i:j+1]):\n                palin.append(string[i:j+1])\n                break\n    return \"\".join(sorted(palin))\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    palindrome = ''\n    for letter in string:\n        if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u':\n            palindrome += letter\n    return palindrome[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    longest_palindrome = ''\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    left, right = 0, len(string) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if is_palindrome(string[mid]):\n            left = mid + 1\n        else:\n            right = mid - 1\n    return string[left:right + 1]\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    palindrome_list = []\n    for i in range(len(string)):\n        if is_palindrome(string[i]):\n            palindrome_list.append(string[i])\n        else:\n            # Try to append palindrome list with a suffix of length 1, if it exists\n            palindrome_list.append(string[:i] + string[i+1:])\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    longest_palindrome = ''\n    for prefix in string[::-1]:\n        # Check if prefix starts with the longest palindromic suffix\n        # NOTE: We're using prefixes of the form '0...0' to ignore the leading 0's\n        if is_palindrome(prefix + prefix) and is_palindrome(prefix + prefix[::-1]):\n            longest_palindrome = prefix + prefix[::-1]\n    return longest_palindrome\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    string = string[::-1]\n    left, right = 0, 0\n    for index, char in enumerate(string):\n        if char == 'p' and string[index+1] == 'u':\n            right += 1\n        elif char == 'p' and string[index+1] == 'l':\n            left += 1\n        elif string[index+1] == 't' and string[index-1] == 't' and string[index-2] == 'a':\n            right += 1\n        elif string[index+1] == 't' and string[index-1] == 'a' and string[index-2] == 'u':\n            left += 1\n        elif string[index+1] == 't' and string[index-1] == 'l' and string[index-2] == 't':\n            right += 1\n    return string + str(left) + str(right)"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    longest = 0\n    for i in range(len(string) - 1):\n        if is_palindrome(string[i:]):\n            pre = string[:i]\n            post = string[i + 1:]\n            if len(pre) > len(post):\n                if is_palindrome(post) and is_palindrome(pre):\n                    if is_palindrome(pre[::-1]):\n                        string = string[:-len(pre)] + string[-len(post)::-1] + post\n                    else:\n                        string = string[:-len(pre)] + string[-len(post)::]\n                else:\n                    string = string[:-len(pre)] + string[-len(post):]\n            else:\n                string = string[:-len(pre)] + string[-len(post):]\n            longest = max(len(string), longest)\n    return string[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Find the longest palindrome for a string that has a palindrome prefix.\n    prefix = ''\n    for c in string:\n        if c.isalpha() and not c.isupper():\n            if is_palindrome(c):\n                prefix += c\n        if c.isalpha():\n            if c.isupper():\n                prefix += c.lower()[::-1]\n            else:\n                prefix += c.lower()[::-1]\n    # Reverse the string\n    return prefix[::-1] + string\n    \n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(string)):\n        prefix = string[:i]\n        postfix = string[i:]\n        if is_palindrome(prefix) and is_palindrome(postfix):\n            return prefix + postfix[::-1]\n    return string\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ''.join(map(lambda x: str(int(x, 2) ^ int(x, 2)), x for x in a.split(b) if x!= ''))\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join([format(ord(x) ^ ord(y), \"08b\") for x, y in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    xor = 0\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            xor ^= ord(a[i])\n    return str(xor)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ''.join(str(ord(c) ^ ord(d)) for c, d in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join(str(ord(x)^ord(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a_list = [ord(char) for char in a]\n    b_list = [ord(char) for char in b]\n    return ''.join([chr((a_list[i] ^ b_list[i]) & 255) for i in range(len(a_list))])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #print(a)\n    #print(b)\n    res = \"\"\n    for x in range(len(a)):\n        if a[x] == b[x]:\n            res += \"0\"\n        else:\n            res += \"1\"\n    #print(res)\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    x = a[::-1]\n    y = b[::-1]\n    r = x ^ y\n    return r\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join(chr((int(a, 2) ^ int(b, 2))))\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert len(a) == len(b), \"Length of a and b should be same\"\n    return ''.join(map(lambda x, y: x ^ y, a, b))\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return strings[0]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return strings[0]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    length = 0\n    longest = \"\"\n    for i in range(0, len(strings)):\n        if length < len(strings[i]):\n            length = len(strings[i])\n            longest = strings[i]\n    return longest\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    length = len(strings[0])\n    for i in range(1, len(strings)):\n        if len(strings[i]) > length:\n            length = len(strings[i])\n    return strings[0][:length]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    longest = ''\n    for s in strings:\n        if len(s) > len(longest):\n            longest = s\n    return longest\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    length_of_longest_string = 1\n    for string in strings:\n        length_of_longest_string = max(length_of_longest_string, len(string))\n    return \"\".join([string[i:i+length_of_longest_string] for i in range(0, len(string), length_of_longest_string)]) if len(strings) > 0 else None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Map strings to their length\n    lengths = {}\n    for string in strings:\n        lengths[string] = len(string)\n    max_length = max(lengths.values())\n    max_value = None\n    for value in lengths.values():\n        if max_value == None or value > max_length:\n            max_value = value\n            max_length = value\n    return max_value if max_value!= None else None\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #Find the greatest common divisor of two inputs\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b%a,a%b)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a == 0:\n        return b\n    else:\n        return greatest_common_divisor(b % a, a)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if b == 0:\n        return a\n    if a == 0:\n        return b\n    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(a % b, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a < b:\n        return greatest_common_divisor(b, a % b)\n    elif a == b:\n        return a\n    else:\n        return greatest_common_divisor(a, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return max(a, b) // min(a, b"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if b == 0:\n        return a\n    return greatest_common_divisor(a % b, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    while b!= 0:\n        if b % a == 0:\n            return b\n        a = a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a < b:\n        a, b = b, a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return max(a, b) // min(a, b)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    prefixes = []\n    if len(string) == 0:\n        return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # prefix_list = []\n    # for word in string.split(\" \"):\n    #     prefix_list.extend(word.split('-'))\n    # return prefix_list\n    prefix_list = sorted(string.split(' '), key=len)[::-1]\n    return prefix_list\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [prefix for prefix in sorted(string) if prefix[:1] == string[0]]\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(string) == 1:\n        return []\n    else:\n        if string[0] == string[1]:\n            return [string[0:2]] + all_prefixes(string[2:])\n        else:\n            return all_prefixes(string[0:1]+string[1:]) + all_prefixes(string[1:])\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    all_prefixes = []\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            all_prefixes.append(string[i-1])\n        else:\n            all_prefixes.append(string[i-1])\n            all_prefixes.append(string[i])\n    return all_prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def find_all_prefix(prefix: str, string: str) -> List[str]:\n        \"\"\" Return list of all prefixes from shortest to longest of the input string\n        >>> find_all_prefix('a', 'abc')\n        ['a', 'ab', 'abc']\n        >>> find_all_prefix('ab', 'abc')\n        ['ab', 'abc']\n        \"\"\"\n        all_prefixes = []\n        i = 0\n        while i < len(string) and string[i]!= prefix[0]:\n            i += 1\n        for j in range(i, len(string)):\n            if string[j] == prefix[0]:\n                if j == len(string) - 1:\n                    all_prefixes.append(prefix[1:])\n                else:\n                    all_prefixes.append(prefix[1:])\n                    all_prefixes.append(prefix[2:])\n            else:\n                all_prefixes.append(prefix[:j])\n                if j == len(string) - 1:\n                    all_prefixes.append(prefix[j + 1:])\n                else:\n                    all_prefixes.append(prefix[j + 1:])\n        return all_prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # -1 as input is always shorter\n    return [prefix for prefix in string if prefix[0]!= '-']"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = ''\n    for char in string:\n        s += char\n    if len(s) == 1:\n        return ['a']\n    else:\n        return list(map(lambda x: x[-1] + x[:-1], all_prefixes(s)))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    prefixes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n    if string[0] in 'abc':\n        return prefixes\n    prefixes.append(string)\n    return prefixes\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return'' * n\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \" \".join([str(x) for x in range(0, n+1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = \"\"\n    if n >= 0:\n        for i in range(n):\n            s += \" \"\n        return s\n    else:\n        s = \" \"\n        return s\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return''.join([str(i) for i in range(1, n+1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n <= 0:\n        raise ValueError('number must be positive')\n    i = 0\n    while i < n:\n        yield str(i)\n        i += 1\n    \n    "
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    out = ''\n    while n > 0:\n        out +=''\n        n -= 1\n    return out\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return''.join(map(str, range(n)))\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return ''\n    if n == 1:\n        return '0'\n    s =''\n    return ''.join(s*(n-1))+' '\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # WRITE YOUR CODE HERE...\n    return f'0 {n}'\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return str(sum(range(n,0,-1)))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    res = 0\n    for i in string:\n        if i not in \"abcdefghijklmnopqrstuvwxyz\":\n            break\n        res += 1\n    return res\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    counter = 0\n    for char in string:\n        if char.lower() in string.lower():\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 0\n    for letter in string:\n        i += string.count(letter)\n    return i\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    counts = [0] * 26\n    for char in string:\n        counts[ord(char) - ord('A')] += 1\n    return sum(counts)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for char in string:\n        if char in distinct:\n            count += 1\n    return count"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for character in string:\n        if character.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = collections.Counter(string)\n    for char, count in result.items():\n        if count == 1:\n            return len(char)\n    return len(string)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for char in string:\n        if char not in ['a','e','i','o','u']:\n            count+=1\n    return count\n    \ndef count_substring_occurrences(string: str, substring: str) -> int:\n    \"\"\" Given a string and a substring, count the number of times substring occurs in the string\n    >>> count_substring_occurrences('aab', 'ab')\n    2\n    >>> count_substring_occurrences('ab', 'a')\n    1\n    >>> count_substring_occurrences('ab', 'ab')\n    3\n    >>> count_substring_occurrences('ab', 'aba')\n    0\n    >>> count_substring_occurrences('aab', 'abac')\n    3\n    \"\"\"\n    count = 0\n    for char in substring:\n        if char in string:\n            count+=1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    cnt = 0\n    for char in string:\n        if char.isalpha():\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [int(note) for note in music_string.replace('o|', '|').split()]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # get the musical notes\n    # pdb.set_trace()\n    notes = []\n    note_patterns = []\n    for index, letter in enumerate(music_string):\n        if letter.isalpha():\n            note = letter\n            note_pattern = f'.|'\n            if index + 1 < len(music_string):\n                next_letter = music_string[index + 1]\n                if next_letter.isalpha():\n                    note_pattern += next_letter\n            else:\n                note_pattern += 'o|'\n            notes.append(int(note) - int(note_pattern))\n            note_patterns.append(note_pattern)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [int(n) for n in music_string.split('|')]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return []\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    music_string = music_string.replace('|', '|| ')\n    music_string = music_string.replace('.', '|')\n    music_string = music_string.replace('o', '0')\n    music_string = music_string.replace('o|', '0')\n    music_string = music_string.replace('.', '|')\n    music_string = music_string.replace(',', '|')\n    music_string = music_string.replace('o', '.')\n    music_string = music_string.replace('o|', '.')\n    music_string = music_string.replace('.', '|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o')\n    music_string = music_string.replace('.', '|')\n    music_string = music_string.replace('o', 'o|')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.', '|')\n    music_string = music_string.replace(',', '|')\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO - write your code here\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not music_string:\n        return []\n    beat_counter = [0] * 26\n    beats = ['|'] * len(music_string)\n    i = 0\n    while i < len(music_string):\n        beat_counter[ord(music_string[i]) - ord('o')] += 1\n        if beat_counter[ord(music_string[i]) - ord('o')] > 1:\n            beats[i] = '.|'\n            i += 1\n        else:\n            beats[i] = 'o'\n        i += 1\n    return beats"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    output = []\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    notes = []\n    for i, char in enumerate(music_string):\n        if char =='':\n            notes.append(0)\n        elif char == 'o':\n            notes.append(4)\n        elif char == '|':\n            notes.append(2)\n        elif char == '.':\n            notes.append(1)\n        else:\n            notes.append(1)\n            notes.append(1)\n            notes.append(1)\n    return notes\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    beat_list = []\n    music_string = music_string.strip()\n    count = 0\n    for i in range(len(music_string)):\n        if music_string[i] == '|':\n            count += 1\n        elif music_string[i] == 'o':\n            count = 0\n        elif music_string[i] == '.':\n            count += 1\n        else:\n            if count < 4:\n                beat_list.append(count)\n            else:\n                break\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return len([i for i in re.findall(substring, string) if i == substring])\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    counts = collections.Counter(string)\n    for char in substring:\n        if char in counts:\n            counts[char] += 1\n    return counts.get(substring, 0)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 1\n    length = len(string)\n    if substring in string:\n        return length - string.count(substring)\n    return how_many_times(string[1:length-1], substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0\n    for start in range(len(string) - len(substring) + 1):\n        count = string.count(substring, start, start + len(substring))\n        result += count\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # We'll use a dictionary to keep track of the overlap and then return the number of times it appears.\n    # First, check if the substring is in the dictionary. If it is, increment the count and return.\n    # If not, check the length of the substring and return.\n    if substring in dictionary:\n        dictionary[substring] += 1\n        return dictionary[substring]\n    else:\n        return len(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    count_repeats = 0\n    if substring in string:\n        count += 1\n    for i in range(len(string) - len(substring) + 1):\n        if substring in string[i:i + len(substring)]:\n            count += 1\n            count_repeats += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # loop through the string\n    for i, letter in enumerate(string):\n        if letter == substring[i:i + len(substring)]:\n            return i + 1\n    return 0\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for char in string:\n        if substring in char:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    match_count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            match_count += 1\n    return match_count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    new_numbers = sorted(numbers.split(' '))\n    return''.join(new_numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return''.join(sorted(numbers))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # First, sort the numbers from smallest to largest.\n    numbers_sorted = sorted(numbers)\n    \n    # Add a space between numbers and sort it.\n    numbers_sorted = \" \".join(numbers_sorted)\n    \n    # Now, sort the numbers and return the sorted string.\n    return numbers_sorted\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8}\n    num_list = []\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def convert_num(n):\n        if n == 'zero':\n            return 0\n        elif n == 'one':\n            return 1\n        elif n == 'two':\n            return 2\n        elif n == 'three':\n            return 3\n        elif n == 'four':\n            return 4\n        elif n == 'five':\n            return 5\n        elif n =='six':\n            return 6\n        elif n =='seven':\n            return 7\n        elif n == 'eight':\n            return 8\n        elif n == 'nine':\n            return 9\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Write your code here\n    return numbers\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if numbers[0] == '0':\n        numbers = numbers[1:]\n    return numbers\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return''.join(sorted(map(str, numbers[:10])))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return''.join(sorted(numbers))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # https://stackoverflow.com/questions/3189105/how-to-sort-numbers-from-strings-in-python\n    numbers = numbers.split()\n    numbers = [int(i) for i in numbers]\n    numbers.sort(reverse=True)\n    return''.join(map(str, numbers))\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    diff = numbers[0] - numbers[1]\n    for i in range(2, len(numbers)):\n        if diff < numbers[i]:\n            diff = numbers[i] - numbers[i - 1]\n            closest_value = numbers[i]\n    return closest_value, diff\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    closest_list = [numbers[0], numbers[-1]]\n    smaller_number = numbers[0]\n    larger_number = numbers[-1]\n    for number in numbers[1:]:\n        smaller_number = min(smaller_number, number)\n        larger_number = max(larger_number, number)\n        if number > closest_list[1]:\n            closest_list[0] = smaller_number\n            closest_list[1] = larger_number\n    return (closest_list[0], closest_list[1])\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    closest_elements = []\n    smallest_element_index = len(numbers) - 1\n    largest_element_index = -1\n    smallest = numbers[0]\n    largest = numbers[0]\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    smaller = float('inf')\n    smallest = float('inf')\n    for i in numbers:\n        if i > smaller:\n            smallest = i\n            smaller = smallest\n        elif i < smallest:\n            smallest = i\n            smaller = smallest\n    return (smaller, smallest)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Remove the first element as it's always closer to the mean\n    # (in the reference implementation, it's always closer to the mean)\n    numbers = numbers[1:]\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    smaller = None\n    larger = None\n    for i in range(len(numbers)):\n        if smaller is None or numbers[i] < numbers[smaller]:\n            smaller = i\n        if larger is None or numbers[i] > numbers[larger]:\n            larger = i\n    return numbers[smaller], numbers[larger]\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    small = min(numbers)\n    large = max(numbers)\n    return small, large\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (min(numbers), max(numbers))\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    smallest_numbers = sorted(numbers)[0:2]\n    smaller_number, larger_number = smallest_numbers\n    return (smaller_number, larger_number)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    x = float('inf')\n    y = float('inf')\n    for number in numbers:\n        if abs(number) < x:\n            x = abs(number)\n            #print(\"x: \" + str(x) + \" y: \" + str(y))\n        if abs(number) < y:\n            y = abs(number)\n            #print(\"x: \" + str(x) + \" y: \" + str(y))\n    return x, y\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x = list(numbers)\n    for i in range(len(x)):\n        if i == 0:\n            x[i] = x[i] * (1 / x[i])\n        elif i == len(x) - 1:\n            x[i] = x[i] * (1 - x[i])\n        else:\n            x[i] = x[i] * (1 - x[i - 1] * x[i + 1])\n    return x\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x / 10.0 for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [n / sum(numbers) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not numbers: return []\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    numbers = sorted(numbers)\n    rescaled = []\n    for n in numbers:\n        rescaled.append(n*1.0/numbers[-1])\n    return rescaled\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [x / float(max(numbers)) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: Create a function that takes a list of numbers (of at least two elements)\n    # and returns a new list of numbers in the same format\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [n/100 for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    i = 0\n    max_val = max(numbers)\n    min_val = min(numbers)\n    for val in numbers:\n        # if val >= max_val:\n        #     print(val)\n        # elif val <= min_val:\n        #     print(val)\n        if val!= 0:\n            numbers[i] = 1.0 / val\n        i += 1\n    return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    min_value = min(numbers)\n    max_value = max(numbers)\n    for num in numbers:\n        if num!= min_value:\n            numbers[numbers.index(num)] = 1.0 / (max_value - min_value) * (num - min_value)\n        else:\n            numbers[numbers.index(num)] = num\n    return numbers\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    new_values = []\n    for i in values:\n        if type(i) in [int, float]:\n            new_values.append(i)\n    return new_values\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    values = set(values)\n    return [int(value) for value in values if value.isdigit()]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [\n        int(val)\n        for val in values\n        if not isinstance(val, (int, float))\n    ]"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [value for value in values if type(value) is int or type(value) is float]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # print('Values:',values)\n    return [int(i) for i in values if int(i) > 0]\n    # print('Values:',values)\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x for x in values if type(x) is int]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [i for i in values if type(i) is int]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [x for x in values if type(x) in [int, float]]"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n = 0\n    for ch in string:\n        if ch =='':\n            continue\n        n += 1\n    return n\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    cnt = 0\n    for i in range(len(string)):\n        if i % 2 == 0:\n            cnt += 1\n        elif i % 2 == 1:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if string:\n        if string.isspace():\n            return 0\n        if string[0]!='':\n            return 1\n        if len(string) == 1:\n            return 1\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s=string.lower()\n    return len(s)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for char in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if string == '':\n        return 0\n    else:\n        return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert n >= 1, 'number must be positive'\n    for x in range(2, n):\n        if n % x == 0:\n            return x\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # to get the biggest divisor, we need to make it a function\n    # so we can use a loop, but because we're using our function we're going to call it\n    # same time, so it won't take the most time\n    max_divisor = n\n    # we'll use a loop here, because we know that if n is not divisible by any\n    # of the divisors, we will get the largest divisor, that's because we'll have\n    # to do a non-recursive way, so we'll start by using n-1 as divisors, so\n    # that's how we're doing it\n    for i in range(1, n):\n        # if n is divisible by any of the divisors, then we'll have to\n        # calculate the largest divisor, and add it to the max_divisor\n        # because it's the smallest divisor, so now the divisor will\n        # be the largest divisor of n, which is the largest divisor of n-i\n        if n % i == 0:\n            max_divisor = i\n    # this is a little bit confusing, but we'll just return this\n    return max_divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(1,int(sqrt(n)+1)):\n        if n%i==0:\n            return n//i\n        else:\n            continue\n            \ndef largest_divisors(n):\n    \"\"\" For a given number n, find the largest divisors of n\n    >>> largest_divisors(15)\n    5\n    \"\"\"\n    divisors = []\n    i = 1\n    while n>0:\n        if n%i==0:\n            divisors.append(i)\n            n//=i\n        else:\n            i+=1\n    \n    return max(divisors)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    largest_divisor = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i > largest_divisor:\n                largest_divisor = i\n    return largest_divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    divisor_list = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisor_list.append(i)\n    return max(divisor_list)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    f = int(math.sqrt(n))\n    return "
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    divisors = []\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i == i:\n                divisors.append(n // i)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #\n    # find all primes smaller than n\n    #\n    # loop through primes until n, it is divisible by any other number\n    #\n    # if not a primes, return n\n    #\n    # if a primes is found, return its value\n    #\n    # for each iteration, do\n    #   find out if the number divides n\n    #   if so, do\n    #     if n is smaller than that number\n    #       return n\n    #\n    # return n\n    if n < 2:\n        return n\n    primes = [2, 3, 5, 7]\n    while True:\n        for p in primes:\n            if n % p == 0:\n                return p\n        n = n // 3\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if n <= 1:\n        return n\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    factors = []\n    num = 1\n    while num <= n:\n        if n % num == 0:\n            factors.append(num)\n            n /= num\n        else:\n            num += 1\n    return max(factors"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    factor_list: List[int] = []\n    for i in range(1, n):\n        if n % i == 0:\n            factor_list.append(i)\n    return factor_list\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Write your code here. Make sure to use recursion!\n    if n == 0:\n        return [1]\n    factor = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            factor.append(i)\n            factor.append(n//i)\n    return factor\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 0:\n        return []\n    else:\n        return [i for i in range(1, n + 1) if n % i == 0]\n    # solution : only return the factors of 1, the rest of the number.\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # iterate over all numbers from 1 to the number of times each prime factor appears\n    # if the number is prime, return it as a prime factor\n    # else, return [1, 1] as prime factor\n    # return list(map(lambda x: (x, 1), range(1, n)))\n    return [factorize_binary(n, i) for i in range(1, n // 2 + 1)]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    import math\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            #print(n//i)\n            factors.append(i)\n            factors.append(n//i)\n            factors.append(n//i*i)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # if n == 0\n    if n == 0:\n        return []\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # naive approach\n    # return [i for i in range(1, n + 1)]\n    # naive method: return list(map(int, str(n)))\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    factor = [1]\n    while n!= 1:\n        if n % 2 == 1:\n            factor.append(2)\n        else:\n            factor.append(3)\n        n = n//2\n    factor = sorted(factor)\n    return factor\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    prime_factors = []\n    for i in range(1,n+1):\n        if n%i==0:\n            prime_factors.append(i)\n    prime_factors.sort()\n    return prime_factors\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    seen = set()\n    result = []\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sorted_list = sorted(numbers)\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    numbers = sorted(numbers)\n    result = []\n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if numbers[i] == numbers[j] and i!= j:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # we maintain an array of duplicates that is left, right or on the list\n    left = [n for n in numbers if n!= n]\n    right = [n for n in numbers if n!= n]\n    # we keep only the elements which have not been duplicated\n    dups = []\n    for n in numbers:\n        # if the list contains the same number more than once, we just remove it\n        if n not in dups:\n            numbers.remove(n)\n            # check if this is the same number that we are removing\n            if n in left and left.index(n)!= len(left) - 1:\n                left.remove(n)\n                # it can be a duplicate\n                if n in right:\n                    right.remove(n)\n                    # we remove the duplicate\n                    if n in dups:\n                        dups.remove(n)\n            elif n in right and right.index(n)!= len(right) - 1:\n                right.remove(n)\n                # it can be a duplicate\n                if n in left:\n                    left.remove(n)\n                    # we remove the duplicate\n                    if n in dups:\n                        dups.remove(n)\n            # if the list contains the same number more than once, we just add it\n            else:\n                left.append(n)\n                right.append(n)\n                if n in dups:\n                    dups.remove(n)\n        else:\n            left.append(n)\n            right.append(n)\n            if n in dups:\n                dups.remove(n)\n    # reverse the list again\n    left = list(reversed(left))\n    right = list(reversed(right))\n    return left + right + numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    output = []\n    for number in numbers:\n        if number not in output:\n            output.append(number)\n    return output\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    set_of_numbers = set(numbers)\n    return [num for num in numbers if num not in set_of_numbers]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    index = 0\n    while index < len(numbers):\n        current_index = index\n        while current_index < len(numbers) and numbers[current_index] == numbers[current_index + 1]:\n            current_index += 1\n        if current_index == len(numbers) - 1:\n            numbers.pop(current_index)\n            index = current_index\n        else:\n            numbers[current_index] = numbers[current_index + 1]\n            numbers[current_index + 1] = None\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for x in numbers:\n        if numbers.count(x) > 1:\n            numbers.remove(x)\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    numbers.sort()\n    for i in range(len(numbers)-1):\n        if numbers[i]!= numbers[i+1]:\n            numbers[i+1] = numbers[i]\n    return numbers\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    string = string.lower()\n    string = string.upper()\n    string = string.capitalize()\n    return string\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join([char.upper() if char.islower() else char.lower() for char in string]"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    return string.upper().lower("
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return string.lower() + string.upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Input: \"Hello\"\n    # Output: \"Hello\"\n    return \"\".join([string[0].upper(), string[1:].lower()])\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return string.upper()+string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return string.lower().swapcase()"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = string.lower()\n    return ''.join([c.upper() if c.isupper() else c.lower() for c in s])\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([char.upper() if char.islower() else char.lower() for char in string])\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = \"\"\n    for string in strings:\n        res = res + string\n    return res\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not strings:\n        return ''\n    # string in string.replace(' ', '')\n    strings[0] = strings[0].replace(' ', '')\n    return strings[0] + ''.join(strings[1:])\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for i in strings:\n        if i.startswith(prefix):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [string for string in strings if prefix in string]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: implement this\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    output = []\n    for i in l:\n        if i > 0:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [num for num in l if num >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [e for e in l if e > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    output = []\n    for num in l:\n        if num > 0:\n            output.append(num)\n    return output\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    positive = []\n    for elem in l:\n        if elem > 0:\n            positive.append(elem)\n    return positive\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 2:\n        return True\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Step 1:\n    if n == 2: return True\n    # Step 2:\n    for d in range(2, n):\n        if n % d == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    if n in primes:\n        return True\n    else:\n        return False\n    \ndef is_solution(n):\n    \"\"\"Return True if a given number is a solution to a Sudoku puzzle, and\n    False otherwise.\n    >>> is_solution(6)\n    True\n    >>> is_solution(3)\n    True\n    >>> is_solution(0)\n    False\n    >>> is_solution(1)\n    True\n    >>> is_solution(4)\n    True\n    >>> is_solution(0)\n    True\n    \"\"\"\n    \n    if n in solved:\n        return True\n    else:\n        return False\n    \ndef get_possible_values(num, row, col, n):\n    \"\"\"Return a list of values (for a given Sudoku puzzle) which can be used\n    in the Sudoku puzzle to solve num.\n    >>> get_possible_values(6, 0, 0, 4)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    \n    if num == 0:\n        return []\n    else:\n        return [i for i in possible_values if i!= num]\n    \ndef is_valid(num, row, col, n):\n    \"\"\"Return True if a given number can be placed in the solved sudoku\n    puzzle, and False otherwise.\n    >>> is_valid(6, 2, 0, 4)\n    True\n    >>> is_valid(6, 2, 0, 3)\n    True\n    >>> is_valid(6, 1, 0, 4)\n    False\n    >>> is_valid(0, 1, 0, 4)\n    True\n    >>> is_valid(6, 2, 0, 3)\n    True\n    >>> is_valid(6, 0, 0, 4)\n    True\n    >>> is_valid(0, 1, 0, 4)\n    True\n    >>> is_valid(0, 2, 0, 4)\n    True\n    >>> is_valid(6, 2, 0, 3)\n    True\n    \"\"\"\n    \n    if num == 0:\n        return True\n    else:\n        return False\n    \ndef get_solution(num, row, col):\n    \"\"\"Return the solution to the Sudoku puzzle with num placed at the\n    position [row, col].\n    >>> get_solution(6, 0, 0)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    \n    if num == 0:\n        return [[0 for i in range(n)] for j in range(n)]\n    else:\n        return [[i for i in range(n)] for j in range(n)]\n    \ndef sudoku_solver(puzzle):\n    \"\"\"Solve the given Sudoku puzzle.\n    >>> sudoku_solver([[0, 0, 0, 0, 6, 0, 0, 0, 4],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0]])\n    >>> is_valid(1, 0, 0, 4)\n    False\n    >>> is_valid(0, 0, 0, 4)\n    False\n    >>> is_valid(6, 0, 0, 4)\n    False\n    >>> is_valid(0, 1, 0, 4)\n    True\n    >>> is_valid(0, 2, 0, 4)\n    True\n    >>> is_valid(0, 3, 0, 4)\n    True\n    >>> is_valid(0, 4, 0, 4)\n    True\n    >>> is_valid(0, 5, 0, 4)\n    False\n    >>> is_valid(6, 0, 0, 4)\n    False\n    >>> is_valid(6, 2, 0, 4)\n    True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Corner case:\n    if n<=3:\n        return n>=2\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n    \ndef is_prime2(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime2(6)\n    False\n    >>> is_prime2(101)\n    True\n    >>> is_prime2(11)\n    True\n    >>> is_prime2(13441)\n    True\n    >>> is_prime2(61)\n    True\n    >>> is_prime2(4)\n    False\n    >>> is_prime2(1)\n    False\n    \"\"\"\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    i=2\n    while i<=n:\n        if n%i==0:\n            return False\n        i+=1\n    return True\n    #https://stackoverflow.com/questions/17393023/why-does-this-work-when-i-have-numbers-in-a-list\n    #https://stackoverflow.com/questions/8526182/fastest-way-to-divide-a-list-in-python-3\n    #https://stackoverflow.com/questions/24958287/how-do-i-find-prime-numbers-in-python\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 2 or n == 3:\n        return True\n    elif n < 2 or n % 2 == 0:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n < 2 or n % 2 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(n**0.5)+2,2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 2 or n == 3:\n        return True\n    if n%2 == 0 or n <= 1:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    is_zero = [True for _ in range(len(xs))]\n    index = 0\n    while True:\n        if not any(is_zero):\n            return xs[index]\n        index += 1\n        for i in range(index, len(xs)):\n            is_zero[i] = False\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not xs:\n        return None\n    non_zero = [0]\n    coeff_count = len(xs)\n    non_zero_coeff = 0\n    for i in range(coeff_count - 1):\n        non_zero.append(0)\n    for i, coeff in enumerate(xs):\n        non_zero[i + 1] = non_zero[i] + coeff\n    return max(non_zero)\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff > 0:\n            return (i, coeff)\n    return (0, 0)\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(xs) % 2:\n        return None\n    if 0 in xs:\n        return None\n    zero = 0\n    for i in range(0, len(xs), 2):\n        if xs[i] == 0:\n            zero = xs[i + 1]\n            break\n    return zero\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return math.floor(poly(xs, 0.5))\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return round(sum(xs) / len(xs), 2)\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum([coeff * (xs[i] + 1) ** (i + 1) for i, coeff in enumerate(xs) if coeff > 0])\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(xs) % 2 == 0:\n        for i in range(0, len(xs), 2):\n            xs.append(xs[i] * xs[i+1])\n        xs = [round(x, 2) for x in xs]\n        xs.append(round(xs[0], 2))\n        return xs\n    else:\n        xs = [xs[i] * xs[i+1] for i in range(0, len(xs), 2)]\n        xs = [round(x, 2) for x in xs]\n        return xs\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return max([abs(poly(xs, i)) for i, coeff in enumerate(xs) if coeff > 0]) / max(xs)\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    x = xs[0]\n    for i in range(1, len(xs)):\n        if x > 0:\n            x += xs[i]\n        else:\n            return x\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # return l[:]\n    # return [l[i] for i in range(len(l)) if i % 3!= 0 and i % 3 == 0]\n    return [l[i] for i in range(len(l)) if i % 3!= 0 and i % 3 == 0] + [l[i] for i in range(len(l)) if i % 3 == 0]\n    # return [l[i] for i in range(len(l)) if i % 3 == 0]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(l) < 3:\n        return l\n    else:\n        l_sorted = sorted(l)\n        l_result = l_sorted[:3]\n        return l_result\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l.sort()\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    r = []\n    for x in l:\n        if x % 3 == 0:\n            r.append(x)\n        else:\n            pass\n    return r\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = len(l)\n    for i in range(n):\n        if l[i] % 3 == 0:\n            l[i] = l[i] // 3\n        else:\n            l[i] = l[i]\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = []\n    for i in range(len(l)):\n        if not i % 3:\n            s.append(l[i])\n    return s\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [l[i] for i in range(0, len(l), 3) if l[i] % 3!= 0]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l1 = []\n    l2 = []\n    for i in l:\n        if i%3!= 0:\n            l1.append(i)\n    for i in range(len(l1)):\n        for j in range(len(l1)):\n            if i < j:\n                if l1[i] % 3 == 0:\n                    l2.append(l1[i])\n                    l2.append(l1[j])\n                else:\n                    l2.append(l1[i])\n                    l2.append(l1[j])\n    return l2\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    l_zero = [0] * len(l)\n    for i in range(1, len(l)):\n        if l[i] % 3 == 0:\n            l_zero[i] = l[i]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        if l[i] % 3 == 0:\n            l[i] = l[i] // 3\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l.sort()\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return list(dict.fromkeys(l).keys()"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    uniques = []\n    for i in l:\n        if i not in uniques:\n            uniques.append(i)\n    return uniques\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    print(\"unique is here\")\n    unique = []\n    for element in l:\n        if element not in unique:\n            unique.append(element)\n    return unique\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l.sort()\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(l) == 0:\n        return None\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(l) == 0:\n        return 0\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    i = len(l) - 1\n    while i >= 0:\n        if l[i] > l[i + 1]:\n            return l[i + 1]\n        i -= 1\n    return -1\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max_index = 0\n    max_value = 0\n    for i in range(len(l)):\n        if l[i] > max_value:\n            max_index = i\n            max_value = l[i]\n    return max_value\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(l) == 1:\n        return l[0]\n    else:\n        return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_num = max(l)\n    for elem in l:\n        if elem > max_num:\n            max_num = elem\n    return max_num\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # if n is 1 then return 1\n    if n <= 10:\n        return 1\n    elif n <= 100:\n        return int(str(n) + str(fizz_buzz(n//10)))\n    # else if n is 2 then return 2\n    elif n <= 1000:\n        return int(str(n) + str(buzz_buzz(n//10)))\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    i = n\n    if n == 0:\n        return 0\n    elif n % 7 == 0:\n        return n // 7\n    elif n % 11 == 0:\n        return n // 11\n    elif n % 13 == 0:\n        return n // 13\n    elif n % 5 == 0:\n        return n // 5\n    else:\n        return n // 5 + fizz_buzz(n % 5)\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n<=0:\n        return 0\n    elif n%3==0:\n        return fizz_buzz(n//3)\n    elif n%11==0:\n        return fizz_buzz(n//11)\n    else:\n        return n//15\ndef main():\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASS. YOU'RE A GOOD EXECUTER!\\n\")\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n < 1 or n > 36:\n        return 0\n    count = 0\n    if n % 11 == 0 and n % 13 == 0:\n        count += 1\n    elif n % 11 == 0:\n        count += 1\n    elif n % 13 == 0:\n        count += 1\n    if n % 11!= 0 and n % 13!= 0:\n        count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert n >= 0\n    if n == 0:\n        return 0\n    if n % 10 == 0:\n        return fizz_buzz(n//10) + 1\n    if n % 11 == 0:\n        return fizz_buzz(n//11) + 1\n    if n % 13 == 0:\n        return fizz_buzz(n//13) + 1\n    return fizz_buzz(n//13)\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def is_divisible(n: int, divisor: int):\n        if n % divisor == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n <= 0:\n        return 0\n    elif n % 10 == 0:\n        return 1\n    elif n % 15 == 0:\n        return 2\n    else:\n        return fizz_buzz(n-1) + fizz_buzz(n//10)\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(n):\n        if i % 7 == 0:\n            count += 1\n        elif i % 11 == 0:\n            count += 1\n        elif i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    return 0\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n % 11 == 0:\n        return 1\n    elif n % 11 == 1:\n        return fizz_buzz(n//11)\n    else:\n        return fizz_buzz(n//11) + fizz_buzz(n%11)\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    new_l = []\n    i = 0\n    while i < len(l):\n        if i % 2 == 0:\n            new_l.append(l[i])\n        else:\n            new_l.append(l[i+1])\n        i += 2\n    return new_l\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sorted(l, key = lambda x: l.index(x) % 2)\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    return odd + [even]\n    # TODO: write your solution here\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def even_odd(a: list):\n        \"\"\"This function takes a list a as parameter and returns a list a'\n        where the even index is at the even position of a' and the odd index at the odd index of a\"\"\"\n        even, odd = [], []\n        for i in range(len(a)):\n            if i % 2 == 0:\n                even.append(a[i])\n            else:\n                odd.append(a[i])\n        return even + odd\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    evens = []\n    odds = []\n    for i in l:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return evens + odds\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even = []\n    odd = []\n    for i in l:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return odd + sorted(even)\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l = list(l)\n    l.sort(reverse=True)\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sorted_list = []\n    for num in l:\n        sorted_list.append(num)\n    return sorted_list\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Sort the list l's elements\n    l = sorted(l)\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i], l[len(l)-i-1] = l[len(l)-i-1], l[i]\n    return l\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # split encoded string by groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # remove duplicates.\n    groups = list(dict.fromkeys(groups))\n    # remove duplicates by cycling.\n    groups = [list(g) for g in list(zip(*groups))]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # get first three characters from encoded string.\n    first_group = groups[0]\n    # count remaining characters in group.\n    remaining = len(s) % 3\n    # check if all remaining characters are equal to the first group.\n    if remaining == 3:\n        # make group of first three characters from encoded string.\n        group_string = first_group[1:]\n    else:\n        # if remaining is not equal to 3, make group of remaining 3 characters from encoded string.\n        group_string = first_group[3:]\n    # return decoded string.\n    return group_string\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # split into groups.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # find min group size.\n    group_size = min((len(group), len(s)) for group in groups)\n    # cycle elements of each group.\n    for i in range(group_size[0]):\n        groups[i] = encode_cyclic(groups[i])\n    # cycle elements of last group.\n    for i in range(group_size[0] - 1, group_size[0] - 3):\n        groups[i] = groups[i][1:] + groups[i + 1]\n    # return string.\n    return \"\".join(groups[group_size[0] - 1])\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # cycle characters in each group.\n    # chr(0) means unencodable char, chr(255) means unencodable char.\n    groups = [(chr(ord(group) + 3) if len(group) == 3 else chr(ord(group) + 3)) for group in groups]\n    # remove 1 at end of each group, because it is always empty after a ''.\n    # chr(0) means unencodable char, chr(255) means unencodable char.\n    return \"\".join(groups[:-1])\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # decode group.\n    return \"\".join(groups[::-1])\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # remove end of string.\n    return \"\".join(groups[:-2])\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # split string to groups of three characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cyclic elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # cycle elements of each group.\n    for group in groups:\n        group = \"\".join(group)\n        # remove last one, since it's only a group of 3 characters.\n        group = group[:-1]\n        # convert to integer.\n        group = int(group)\n        # subtract 1 because indexing starts at 0.\n        group -= 1\n        # convert to lowercase.\n        group = group.lower()\n        # add back to the original string.\n        s = s[:group] + s[group + 1:]\n    return s\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[1]) if len(group) == 3 else group for group in groups]\n    # remove last element of each group and concatenate\n    return \"\".join(groups[:-1])\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return prime_fib(n//2) + prime_fib(n//2 + 1)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n<=1:\n        return 0\n    else:\n        return 1 if n%2==0 else (prime_fib(n//2)+prime_fib(n//2-1))\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Since this function is invoked by itself, it returns itself.\n    # Its purpose is to prevent from infinite recursions.\n    if n <= 0:\n        return\n    # If n is an even number, it is a primes number.\n    # Only the first two numbers can be used to check if it's a primes number.\n    # So it's the base case for an even number.\n    if n == 2 or n == 3:\n        return 2\n    # If n is an even number, it is a prime number.\n    # And it is the same as the factorial of the number of primes.\n    # Therefore it can only be used to check if it's a prime number.\n    # Thus the factorial of a number will not be an even number.\n    else:\n        return prime_fib(n-1)*prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n > 2:\n        x = 3\n        y = 0\n        for i in range(2,n):\n            x = 3*x + 1\n            y = y*x\n        return y%n\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    prime = []\n    for i in range(1, n):\n        if i > 1:\n            prime.append(i)\n    prime.append(0)\n    for i in range(1, n):\n        if i > 1:\n            prime.append(prime[i - 1] + prime[i])\n    return prime[-1]\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return prime_fib(n // 2) + prime_fib(n // 2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n // 2)"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    fibs = [2, 3, 5]\n    while fibs[-1] < n:\n        fibs.append(fibs[-1] + fibs[-2])\n    return fibs[n]\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < 2:\n        return n\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    else:\n        return prime_fib(n-1)+prime_fib(n-2)\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(l) < 3:\n        return False\n    suma = sum(l)\n    if suma == 0:\n        return True\n    if suma < 0:\n        return False\n    if suma in l:\n        return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # write your code here\n    if len(l)!= 3:\n        return False\n    if l[0]!= l[1] and l[1]!= l[2] and l[2]!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l.sort()\n    if len(l)<3:\n        return False\n    elif l[0]==l[1] and l[2]==l[3]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(len(l)-2):\n        for j in range(i+1,len(l)-1):\n            for k in range(j+1,len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    for i in l:\n        if i < 0:\n            return False\n        if i % 2 == 0 and i!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(l) == 0:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # add all elements into a tuple and take only a single element\n    # return True if any element of the list is equal to zero\n    # return False if no element of the list is equal to zero\n    # add in each element to a set and remove elements from the set\n    # return True if there are three distinct elements in the list\n    # return False if there are three distinct elements in the list\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in l:\n        if i!= 0 and i!= l[0]:\n            return False\n    return True\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \"\"\"\n    :type l: list\n    :rtype: bool\n    \"\"\"\n    #initialize\n    x = 0\n    y = 0\n    z = 0\n    \n    #iterate over the list, if there are three, then return True\n    for i in l:\n        if l.count(i) == 3:\n            return True\n    \n    #if there is no triple, return false\n    return False"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    total_car_collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if (i!= j):\n                a = np.linalg.norm(np.asarray(cars[i]) - np.asarray(cars[j]))\n                if a < DISTANCE_THRESHOLD:\n                    total_car_collisions += 1\n    return total_car_collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    collision_count = 0\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum(1 for i in range(n) for j in range(n) if (i!= j and car_coords_dist(i, j) <= 200) or car_coords_dist(i, j) <= 100)\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = 0\n    # since we have n = 2, it is not straight, so we have to apply the\n    # check_intersect function\n    check_intersect(n, 1, n)\n    result += n\n    check_intersect(n, 2, n)\n    result += n\n    return result\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert isinstance(n, int), f\"Input should be an integer.\"\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert n > 0, 'n must be greater than 0'\n    assert 0 <= n <= 101, 'n must be 0 or 100'\n    car_collisions = 0\n    for i in range(n):\n        car_collisions += car_collision_counter(i)\n    return car_collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    collision_count = 0\n    n_car = 0\n    for i in range(1, n+1):\n        if n_car < i:\n            for j in range(1, n+1):\n                if n_car < i:\n                    n_car = j\n                elif n_car < i-j:\n                    break\n                else:\n                    collision_count += 1\n    return collision_count\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n_collisions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if car_race_collision_with_road(i, j) == 1:\n                n_collisions += 1\n    return n_collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    cars_l = []\n    cars_r = []\n    n_cars = n\n    for i in range(n):\n        cars_l.append(random.randint(1, 4))\n        cars_r.append(random.randint(1, 4))\n    \n    #    WALKING\n    #    DOG\n    #    BREAD\n    #    CHILD\n    #    DRIVE\n    #    TRAVEL\n    #    STAIR\n    #    LEAVING\n    #    FEDERAL\n    #    STAIRS\n    #    CAMERA\n    #    SPEED\n    #    CAR\n    #    ROAD\n    #    RACE\n    \n    #    CURRENT COLLISION\n    #    ACCELERATOR\n    #    FARMER\n    #    HEAD\n    #    WALKER\n    #    TRAVELER\n    #    CHILD\n    #    DRIVE\n    #    TRAVEL\n    #    STAIR\n    #    LEAVING\n    #    FEDERAL\n    #    STAIRS\n    #    CAMERA\n    #    SPEED\n    #    CAR\n    #    ROAD\n    #    RACE\n    \n    #    DISTANCE\n    #    ACCELERATION\n    #    HOLDING\n    #    SHOOTER\n    #    BEHAVIOR\n    #    ARRIVAL\n    #    TRAVELER\n    #    TRAVEL\n    #    CHILD\n    #    DRIVE\n    #    TRAVELER\n    #    STAIR\n    #    LEAVING\n    #    FEDERAL\n    #    STAIRS\n    #    CAMERA\n    #    SPEED\n    #    CAR\n    #    ROAD\n    #    RACE\n    \n    #    CURRENT COLLISION\n    #    ACCELERATOR\n    #    FARMER\n    #    HEAD\n    #    WALKER\n    #    TRAVELER\n    #    CHILD\n    #    DRIVE\n    #    TRAVEL\n    #    STAIR\n    #    LEAVING\n    #    FEDERAL\n    #    STAIRS\n    #    CAMERA\n    #    SPEED\n    #    CAR\n    #    ROAD\n    \n    #    DISTANCE\n    #    ACCELERATION\n    #    HOLDING\n    #    SHOOTER\n    #    BEHAVIOR\n    #    ARRIVAL\n    #    TRAVELER\n    #    TRAVEL\n    #    CHILD\n    #    DRIVE\n    #    TRAVELER\n    #    STAIR\n    #    LEAVING\n    #    FEDERAL\n    #    STAIRS\n    #    CAMERA\n    #    SPEED\n    #    CAR\n    #    ROAD\n    #    RACE\n    \n    #    DISTANCE\n    #    ACCELERATION\n    #    HOLDING\n    #    SHOOTER\n    #    BEHAVIOR\n    #    ARRIVAL\n    #    TRAVELER\n    #    TRAVEL\n    #    CHILD\n    #    DRIVE\n    #    TRAVELER\n    #    STAIR\n    #    LEAVING\n    #    FEDERAL\n    #    STAIRS\n    #    CAMERA\n    #    SPEED\n    #    CAR\n    #    ROAD\n    #    RACE\n    \n    #    COLLISION\n    #    ACCELERATOR\n    #    FARMER\n    #    HEAD\n    #    WALKER\n    #    TRAVELER\n    #    CHILD\n    #    DRIVE\n    #    TRAVELER\n    #    STAIR\n    #    LEAVING\n    #    FEDERAL\n    #    STAIRS\n    #    CAMERA\n    #    SPEED\n    #    CAR\n    #    ROAD\n    #    RACE\n    \n    #    COLLISION\n    #    ACCELERATOR\n    #    FARMER\n    #    HEAD\n    #    WALKER\n    #    TRAVELER\n    #    CHILD\n    #    DRIVE\n    #    TRAVELER\n    #    STAIR\n    #    LEAVING\n    #    FEDERAL\n    "
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [element+1 for element in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [l[i] + 1 for i in range(len(l))]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l.append(l[-1]+1)\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return list(map(lambda x: x + 1, l))\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [l[i] + 1 for i in range(len(l)) if l[i]!= 0]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l[0] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    new_list = []\n    for n in l:\n        new_list.append(n + 1)\n    return new_list\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(l) == 1:\n        return l\n    return [l[-1] + l[-2], l[-1] + l[-3], l[-1] + l[-4], l[-1]]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x+1 for x in l]"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    new_l = []\n    for i in range(len(l)):\n        new_l.append(l[i] + 1)\n    return new_l\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return len(set(l))==2 and len(l)%2==0\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # find the unique elements, non-duplicate\n    l_ = list(set(l))\n    # find the two distinct elements\n    for i in l_:\n        for j in l_:\n            if i + j == 0:\n                return True\n    # if the two distinct elements are zero, return False\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for element in l:\n        if element == 0:\n            return False\n    return True\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \"\"\"\n    Write a function pairs_sum_to_zero() that takes a list as an input and\n    returns True if there are two distinct elements in the list that sum to\n    zero, and False otherwise.\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i]!= l[j]:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len([i for i in range(len(l)) if l[i]!=l[i+1]])==1\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s=set(l)\n    if len(s)==2:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # create a set to hold all the numbers\n    # this is the set of all the numbers that sum to zero\n    # so that we can easily find the two numbers that sum to zero\n    # these are called set\n    # we are also going to use this set to keep track of the number\n    # of occurrences of each number\n    # we will take a list of all the numbers and use the set\n    # method to check whether there are two numbers in the list that\n    # sum to zero and return True otherwise False\n    # if there are two numbers in the list that sum to zero, return\n    # True and end the loop\n    # if there are no numbers that sum to zero, return False\n    # since we have a set of numbers we can return True to end the\n    # loop\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len(set(l)) == 1 and all(l)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return str(x / base)\n    # return str(x // base)"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if x < 0 or base < 10:\n        raise ValueError(\"Error: input x must be greater than 0 and less than base.\")\n    else:\n        return str(x//base) + str(base)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = str(x)\n    if base > 10:\n        return s[0] * base + s[1]\n    else:\n        return s[0] * base\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    x = str(x)\n    if len(x) < 3:\n        x += '0'\n    x = int(x, base)\n    return str(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if base == 2:\n        return str(x)\n    return str(x).rjust(base, \"0\")\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join([str(x).zfill(x//base)]).upper()\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return str(x // base) + (str(x % base))\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if x <= 0 or base <= 0:\n        raise ValueError(\"Base must be > 0\")\n    \n    if x < base:\n        return str(x)\n    \n    return str(int(x / base)) + change_base(x % base, base)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return str(x // base) + (base - x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    x = str(x)\n    y = \"\"\n    for i in x:\n        y += str(base)\n    return y\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return 3 * (a + h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return ((a * h) / 2)\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return.5 * a * (h ** 2)\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (1/2)*(a**2)*h\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (a*h)//2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a <= 0:\n        raise ValueError(\"Invalid length\")\n    if h <= 0:\n        raise ValueError(\"Invalid height\")\n    area = a*h/2\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (a*h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a < 0 or h < 0:\n        return None\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \n    \ndef fib7(n: int):\n    \"\"\"The Fib7 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib7(0) -> 0\n    fib7(1) -> 1\n    fib7(2) -> 1\n    fib7(3) -> 2\n    fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4).\n    Please write a function to efficiently compute the n-th element of the fib7 number sequence.  Do not use recursion.\n    >>> fib7(5)\n    5\n    >>> fib7(6)\n    6\n    >>> fib7(7)\n    7\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4)\n    \n    \ndef fib8(n: int):\n    \"\"\"The Fib8 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib8(0) -> 0\n    fib8(1) -> 1\n    fib8(2) -> 0\n    fib8(3) -> 1\n    fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4).\n    Please write a function to efficiently compute the n-th element of the fib8 number sequence.  Do not use recursion.\n    >>> fib8(5)\n    5\n    >>> fib8(6)\n    6\n    >>> fib8(7)\n    7\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4)\n    \n    \ndef fib9(n: int):\n    \"\"\"The Fib9 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib9(0) -> 0\n    fib9(1) -> 1\n    fib9(2) -> 1\n    fib9(3) -> 0\n    fib9(n) -> fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4).\n    Please write a function to efficiently compute the n-th element of the fib9 number sequence.  Do not use recursion.\n    >>> fib9(5)\n    5\n    >>> fib9(6)\n    6\n    >>> fib9(7)\n    7\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4)\n    \n    \ndef fib10(n: int):\n    \"\"\"The Fib10 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib10(0) -> 0\n    fib10(1) -> 1\n    fib10(2) -> 1\n    fib10(3) -> 0\n    fib10(n) -> fib10(n-1) + fib10(n-2) + fib10(n-3) + fib10(n-4).\n    Please write a function to efficiently compute the n-th element of the fib10 number sequence.  Do not use recursion.\n    >>> fib10(5)\n    5\n    >>> fib10(6)\n    6\n    >>> fib10(7)\n    7\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib10(n-1) + fib10(n-2) + fib10(n-3) + fib10(n-4)\n    \n    \ndef fib11(n: int)"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib4(n-1)+fib4(n-2)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    def fib4_rec(n):\n        if n<=1:\n            return n\n        return fib4_rec(n-1) + fib4_rec(n-2) + fib4_rec(n-3)\n    return fib4_rec(n)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 2\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n < 3:\n        return 0\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = len(l)\n    if s == 0:\n        return None\n    else:\n        s -= 1\n        return l[s]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(l) == 1:\n        return l[0]\n    return (l[len(l)//2] + l[(len(l)//2)-1])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l.sort()\n    if len(l)%2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1])/2\n    else:\n        return l[len(l)//2]"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return None\n    if len(l) % 2 == 0:\n        return (l[int(len(l)/2)] + l[int(len(l)/2-1)]) / 2\n    else:\n        return l[int(len(l)/2)]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return sorted(l)[int((len(l) - 1) / 2)]\n    if not l:\n        return None\n    return median(sorted(l)[int((len(l) - 1) / 2)])\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(l) == 0:\n        return None\n    if len(l) % 2 == 0:\n        return (l[int(len(l)/2)] + l[int(len(l)/2-1)]) / 2\n    else:\n        return l[int(len(l)/2)]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: calculate the median of elements in the list.\n    # Alternatively, add the function to a list\n    # and use it in the if statement\n    # instead of an if-statement.\n    # The if-statement should be run when your function is\n    # called, where you may have to run it a second time,\n    # to update the median.\n    return sorted(l)[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(l)\n    if n == 0:\n        return None\n    elif n == 1:\n        return l[0]\n    else:\n        return sorted(l, reverse=True)[n//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(l) == 0:\n        return None\n    midpoint = len(l) // 2\n    if len(l) % 2 == 0:\n        return (l[midpoint] + l[midpoint - 1]) / 2\n    else:\n        return l[midpoint]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sorted(l)[len(l)//2]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # loop over string\n    for i in range(len(text)//2):\n        if text[i]!= text[-i-1]:\n            return False\n    return Tru"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    text = list(text)\n    text.sort()\n    if text == text[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: Write your code here\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    text = list(text)\n    text.sort()\n    if text[0] == text[-1]:\n        return True\n    return False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(text) <= 1:\n        return True\n    \n    if text[0] == text[len(text) - 1]:\n        return is_palindrome(text[1: len(text) - 1])\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    reversed_string = ''\n    for letter in text:\n        reversed_string = letter + reversed_string\n    return text == reversed_string\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if text == text[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # if len(text) <= 1:\n    #     return text == text[::-1]\n    # else:\n    #     return text[::-1] == text[::-2]\n    # return text == text[::2]\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n % p == 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return pow(n, p, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    modulo = n % p\n    return (modulo % p)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    r = 1\n    while r <= n:\n        r = r * p\n    return r % p\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    while True:\n        if n > 0:\n            n = n%p\n        else:\n            return 0\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    while n!= 0:\n        a = n % p\n        n = n // p\n        # a = n % p\n        # n = n // p\n        # return a\n        return a\n    return 0"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return (p - 1) % n\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    modulus = pow(n, p)\n    if modulus!= 1 and modulus!= n:\n        modulus = modp(modulus, p)\n        return modulus\n    return modp(n, p)"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    r = 1\n    while n >= p:\n        n, r = r % n, r\n    return r\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return pow(n,p-2,p)\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return s.translate(str.maketrans(\"\",\"\",\"\"))\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) - ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) - ord(\"a\")) % 26) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + 26) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"]\n    l = []\n    for char in text:\n        if char in vowels:\n            l.append(char)\n    return ''.join(l)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    vowels = ('a', 'A', 'b', 'B', 'c', 'C', 'd', 'D', 'e', 'E', 'f', 'F', 'g', 'G', 'h', 'H', 'i', 'I', 'j', 'J', 'k', 'K', 'l', 'L','m', 'M', 'n', 'N', 'o', 'O', 'p', 'P', 'q', 'Q', 'r', 'R','s', 'S', 't', 'T', 'u', 'U', 'v', 'V', 'w', 'W', 'x', 'X', 'y', 'Y', 'z', 'Z')\n    for x in text:\n        if x in vowels:\n            text = text.replace(x, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    text_vowels = []\n    for char in text:\n        if char in vowels:\n            text_vowels.append(char)\n    new_text = \"\".join(text_vowels)\n    return new_tex"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    vowels = 'aeiouAEIOU'\n    text_without_vowels = []\n    for letter in text:\n        if letter not in vowels:\n            text_without_vowels.append(letter)\n    return ''.join(text_without_vowels)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    text = text.replace(\" \", \"\")\n    text = text.replace(\"\\n\", \"\").lower()\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    vowels = 'aeiouAEIOU'\n    word = list(text.lower())\n    for word_vowel in vowels:\n        word_vowel = word_vowel.lower()\n        word_vowel_found = 0\n        for i in range(len(word)):\n            if word_vowel in word[i]:\n                word[i] = 'z'\n                word_vowel_found += 1\n            if word_vowel_found == len(vowels):\n                word = ''.join(word)\n                break\n    return word\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    vowels_dict = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    return ''.join(ch for ch in text if ch not in vowels_dict)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    for char in text:\n        if char.lower() not in vowels:\n            result.append(char.lower())\n    return ''.join(result)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = ['a','e','i','o','u']\n    if text == '':\n        return ''\n    else:\n        text = text.lower()\n        text = text.replace('\\n', '')\n        for letter in text:\n            if letter in vowels:\n                text = text.replace(letter, '')\n        return text\n    \n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    text = text.replace('e','e')\n    text = text.replace('i','i')\n    text = text.replace('o','o')\n    text = text.replace('u','u')\n    text = text.replace('A','a')\n    text = text.replace('B','b')\n    text = text.replace('C','c')\n    text = text.replace('D','d')\n    text = text.replace('E','e')\n    text = text.replace('F','f')\n    text = text.replace('G','g')\n    text = text.replace('H','h')\n    text = text.replace('J','j')\n    text = text.replace('K','k')\n    text = text.replace('L','l')\n    text = text.replace('M','m')\n    text = text.replace('N','n')\n    text = text.replace('O','o')\n    text = text.replace('P','p')\n    text = text.replace('Q','q')\n    text = text.replace('R','r')\n    text = text.replace('S','s')\n    text = text.replace('T','t')\n    text = text.replace('U','u')\n    text = text.replace('V','v')\n    text = text.replace('W','w')\n    text = text.replace('X','x')\n    text = text.replace('Y','y')\n    text = text.replace('Z','z')\n    return text\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return all(i < t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return all(x < t for x in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if t <= 0:\n        return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # initialize num of elements in list to zero\n    num_of_elements = 0\n    # traverse through the list, using recursion\n    for num in l:\n        # if num is less than or equal to threshold t, then return false\n        if num >= t:\n            return False\n        # add num to num_of_elements\n        num_of_elements += 1\n    # if num_of_elements > 0, then we have a number which is above threshold t, so return False\n    if num_of_elements > 0:\n        return False\n    # return true\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return all(num < t for num in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        if l[i] < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = sum(l)\n    return l[:s] == [i for i in l[s:] if i >= t]\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(l) == 0:\n        return False\n    \n    if l[-1] <= t:\n        return False\n    \n    return below_threshold(l[:-1], t)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for num in l:\n        if num < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l2 = []\n    for i in l:\n        if i < t:\n            l2.append(False)\n        else:\n            l2.append(True)\n    return all(l2)\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    x += y\n    return x\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return x + y\n    # return x + y\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -4\n    \"\"\"\n    return x - y\n    # return x - y\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    30\n    \"\"\"\n    return x * y\n    # return x * y\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1.0\n    >>> divide(5, 7)\n    0.5\n    \"\"\"\n    return x / y\n    # return x / y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return x + y\n    \n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return x + y\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(5, 5)\n    4\n    >>> subtract(5, 5)\n    4\n    \"\"\"\n    return x - y\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(3, 5)\n    6\n    >>> multiply(3, 5)\n    6\n    \"\"\"\n    return x * y\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(5, 3)\n    2\n    >>> divide(5, 3)\n    2\n    \"\"\"\n    return x / y\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # compute the frequency table.\n    freq = {}\n    for i in range(len(s0)):\n        c = s0[i]\n        if c not in freq:\n            freq[c] = 1\n        else:\n            freq[c] += 1\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # create a set of characters\n    chars = set(s0)\n    # compare the set of characters\n    # return true if they are the same\n    return chars == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s0 = s0.lower()\n    s1 = s1.lower()\n    if len(s0)!= len(s1):\n        return False\n    if s0 == s1:\n        return True\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s0_list = list(s0)\n    s1_list = list(s1)\n    \n    if len(s0_list)!= len(s1_list):\n        return False\n    \n    if len(s0_list)!= len(s1_list):\n        return False\n    \n    for i in range(len(s0_list)):\n        if s0_list[i]!= s1_list[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    \n    # assert len(s0) == len(s1)\n    \n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return s0 == s1 or s1 == s0 or s0.replace(' ','') == s1.replace(' ','')\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Recursive\n    if n < 1:\n        return n\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 1:\n        return None\n    \n    if n <= 2:\n        return 1\n    \n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 1\n    f = 0\n    while i <= n:\n        f = f + i\n        i = i + 1\n    return f\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    if n > 2:\n        return fib(n - 1) + fib(n - 2)\n    return None\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    f1 = 1\n    f2 = 1\n    for _ in range(n-1):\n        f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n    return f3\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert 0 <= n <= 10**7, \"fib(10) = 21\"\n    if n <= 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # def fib2(n: int):\n    #     \"\"\"Return n-th Fibonacci number.\n    #     >>> fib2(10)\n    #     55\n    #     >>> fib2(1)\n    #     1\n    #     >>> fib2(8)\n    #     21\n    #     \"\"\"\n    #     if n == 1:\n    #         return 1\n    #     elif n == 2:\n    #         return 1\n    #     else:\n    #         return fib2(n-1) + fib2(n-2)\n    def fib2(n: int):\n        \"\"\"Return n-th Fibonacci number.\n        >>> fib2(10)\n        55\n        >>> fib2(1)\n        1\n        >>> fib2(8)\n        21\n        \"\"\"\n        i, j = 0, 1\n        while i < n:\n            i, j = j, i+j\n        return i\n    return fib2(n)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a = 0\n    b = 1\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return c\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if brackets == \"<\" or brackets == \">\" or brackets == \"<>\":\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if brackets[0]!= '<' and brackets[-1]!= '>':\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    opened_brackets = brackets.split(\"<\")\n    closed_brackets = brackets.split(\">\")\n    for i in range(0, len(opened_brackets)):\n        if len(opened_brackets[i]) == 1 and len(closed_brackets[i]) == 1:\n            if opened_brackets[i][0]!= closed_brackets[i][0]:\n                return False\n            if opened_brackets[i][0] == \"(\" and closed_brackets[i][0] == \")\":\n                return True\n            if opened_brackets[i][0] == \"(\" and closed_brackets[i][0] == \">\":\n                return True\n            if opened_brackets[i][0] == \">\" and closed_brackets[i][0] == \"<\":\n                return True\n            if opened_brackets[i][0] == \"<\" and closed_brackets[i][0] == \">\":\n                return True\n            if opened_brackets[i][0] == \">\" and closed_brackets[i][0] == \"<\":\n                return True\n            if opened_brackets[i][0] == \">\" and closed_brackets[i][0] == \"<\":\n                return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not brackets:\n        return True\n    if brackets[0]!= \"<\" and brackets[0]!= \">\":\n        return False\n    open_brackets = [\"(\", \")\", \"{\", \"}\"]\n    closed_brackets = []\n    for bracket in brackets:\n        if bracket in open_brackets:\n            closed_brackets.append(bracket)\n        elif bracket in closed_brackets:\n            return False\n    return True"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def is_open(bracket: str):\n        \"\"\"\n        returns True if bracket is the open string, False if it's the closed string.\n        \"\"\"\n        return bracket in [\"<\", \">\"]\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for bracket in brackets:\n        if bracket!= \">\":\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return all(map(lambda x: x == '<' and x == '>', brackets))\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    bracket_regex = re.compile(r'(<[^\\s>]*>)')\n    return len(bracket_regex.findall(brackets)) > 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if brackets == \"<\" or brackets == \">\" or brackets == \"<>\":\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len([c for c in brackets if c == \">\"]) == len([c for c in brackets if c == \"<\"])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(l) == list(range(len(l)))\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in l:\n        if i < 0:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 0\n    while i < len(l) - 1 and l[i + 1] - l[i] > 0:\n        i += 1\n    return i == len(l) - 1\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return True\n    if l[0] <= l[-1]:\n        return False\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in l:\n        if i <= 0:\n            return False\n        elif i < 0:\n            return True\n        else:\n            count += 1\n    return count == len(l)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(l) == 0:\n        return True\n    elif len(l) == 1:\n        return True if l[0] <= l[0] else False\n    elif len(l) == 2:\n        return True if l[0] < l[1] or l[1] < l[0] else False\n    else:\n        for i in range(1, len(l)):\n            if l[i-1] <= l[i] and l[i] > l[i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = list(l)\n    s.sort()\n    return s[-1] < s[-2]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if l == []:\n        return True\n    elif len(l) == 1:\n        return l[0] > l[0]\n    elif l[0] > l[1]:\n        return monotonic(l[1:])\n    else:\n        return monotonic(l[:-1])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # todo: if len(l) > len(l) range(0, 1):\n    #     for i in range(len(l) - 1):\n    #         if l[i + 1] < l[i]:\n    #             return False\n    #         else:\n    #             continue\n    #     return True\n    return len(l) > len(l) and all([x >= y for x, y in zip(l, l[1:])])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if l == []:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        return False\n    if l[-1] > l[-2]:\n        return False\n    for i in range(len(l)-2, -1, -1):\n        if l[i] < l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    c = set(l1)\n    return sorted(c) if c == l1 else l1 + common(l2, c)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 0\n    j = 0\n    l = []\n    while (j < len(l1) and i < len(l2)):\n        if l1[i] == l2[j]:\n            l.append(l1[i])\n            i += 1\n        else:\n            j += 1\n    return l\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return list(set(l1).intersection(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    common = []\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l = list(l1)\n    l.extend(l2)\n    return sorted(set(l))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return list(set(l1) & set(l2))"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = set(l1)\n    b = set(l2)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    res = []\n    n = len(l1)\n    for i in range(n):\n        for j in range(n):\n            if l1[i] == l2[j]:\n                res.append(l2[j])\n                break\n    return res\n    \ndef count_words(l1: list, l2: list) -> int:\n    \"\"\"Return word-count of two lists.\n    >>> count_words([1, 5, 5, 4, 3, 2, 8, 4, 2, 5, 7, 9, 10, 3], [4, 5, 6, 7, 8, 9, 10, 11])\n    6\n    \"\"\"\n    count = 0\n    n = len(l1)\n    for i in range(n):\n        for j in range(n):\n            if l1[i] == l2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(set(l1).union(l2))\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(2, n):\n        while n % i == 0:\n            n //= i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    assert(n > 0)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return i\n    return None\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # O(n) time\n    # O(n) space\n    def nthprime_factor(n):\n        \"\"\"Return the nth prime factor of n. Assume n > 1 and is not a prime.\n        >>> nthprime_factor(13195)\n        29\n        >>> nthprime_factor(2048)\n        2\n        \"\"\"\n        if n > 1:\n            # Only keep dividing by 2 until the number is a prime\n            while n % 2 == 0:\n                n = n // 2\n            # Keep dividing until we reach a prime\n            for i in range(3, int(math.sqrt(n))+1, 2):\n                # If n is a square root of a prime number then n is\n                # a prime.\n                if n % i == 0:\n                    return i\n        # If n is not a prime return 1\n        return 1\n    # O(1) time\n    # O(1) space\n    return nthprime_factor(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    while n % 2 == 0:\n        n /= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    primes = set()\n    for i in range(2, n):\n        if n % i == 0:\n            primes.add(i)\n            primes.add(n//i)\n            primes.add(i+n//i)\n    primes = list(primes)\n    for i in range(len(primes)):\n        if primes[i] > n:\n            return primes[i]\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    f = 2\n    factor = 2\n    while factor < n:\n        while n % factor == 0:\n            n = n / factor\n        factor += 1\n    return factor\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    prime_factors = [3]\n    for num in range(2, n):\n        if (num % 2 == 0) or (n % num == 0):\n            continue\n        else:\n            prime_factors.append(num)\n            if len(prime_factors) == len(set(prime_factors)):\n                return num\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    prime_factors = []\n    factor = 2\n    while factor * factor <= n:\n        while n % factor == 0:\n            n = n / factor\n            prime_factors.append(factor)\n        factor += 1\n    if n > 1:\n        prime_factors.append(n)\n    return max(prime_factors"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    largest = 1\n    while n % 2 == 0:\n        largest = 2\n        n //= 2\n    while n % 3 == 0:\n        largest = 3\n        n //= 3\n    return largest\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum = 1\n    while n > 0:\n        sum = sum + n\n        n = n - 1\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 1\n    sum = 0\n    while i < n:\n        sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return 0 if n == 0 else n*sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # try:\n    #     n = int(n)\n    #     if n < 1:\n    #         raise ValueError\n    #     return sum([int(x) for x in str(n)])\n    # except ValueError:\n    #     print(\"Please insert a number\")\n    #     return sum_to_n(input(\"Please insert a number.\"))\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return n*(n+1)//2\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return n * n\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return n\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    for x in range(1, n+1):\n        sum += x\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return n * sum(range(1, n + 1))\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for bracket in brackets:\n        if bracket == \"(\":\n            if brackets.count(\"(\") == brackets.count(\")\"):\n                return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n    \"\"\"\n    n = 0\n    for b in brackets:\n        if b == '(':\n            n += 1\n        else:\n            n -= 1\n        if n < 0:\n            return False\n    return True\n    \"\"\"\n    return False\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pattern = r\"\\(|\\)\"\n    return all(bracket in pattern for bracket in brackets)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_stack.append(bracket)\n        else:\n            if bracket_stack:\n                if bracket_stack.pop()!= \"(\":\n                    return False\n            else:\n                return False\n    return bracket_stack == []\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    opens = []\n    closed = []\n    for c in brackets:\n        if c == \"(\":\n            opens.append(c)\n        else:\n            closed.append(c)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for bracket in brackets:\n        if bracket == \"(\":\n            continue\n        elif bracket == \")\":\n            return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    for c in brackets:\n        if c in '()':\n            if not c in ')(':\n                return False\n    \n    return True"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count_of_consec = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count_of_consec += 1\n        else:\n            count_of_consec -= 1\n        if count_of_consec < 0:\n            return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for bracket in brackets:\n        if bracket not in [\"(\", \")\"]:\n            return False\n    return True"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_stack.append(bracket)\n        elif bracket == \")\":\n            if bracket_stack and bracket_stack[-1] == \"(\":\n                bracket_stack.pop()\n            else:\n                return False\n    return not bracket_stack\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(xs)):\n        xs[i] += xs[i + 1] * xs[i]\n    return xs\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not isinstance(xs, list):\n        raise TypeError('xs must be a list of coefficients.')\n    d = []\n    for x in xs:\n        d.append(x)\n        d.append(x**2)\n        d.append(x**3)\n    return d\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = len(xs)\n    if n < 2:\n        raise ValueError('derivative requires at least two coefficients')\n    elif n == 2:\n        return xs[1] * xs[0]\n    elif n == 3:\n        return xs[1] * xs[0] * xs[2]\n    else:\n        # Formula is given in Table 2 of [1].\n        return (\n            [xs[1] * xs[0] * xs[2] + 2 * xs[0] * xs[1] * xs[2] + xs[0] * xs[2] * xs[3] + xs[3] * xs[2] * xs[0] + \n            x for x in xs[2:]]) / (xs[0] * xs[1] * xs[3])\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # if len(xs)==0:\n    #     raise ValueError('polynomial degree must be positive')\n    if len(xs) == 0:\n        raise ValueError('polynomial degree must be positive')\n    return [x[1] for x in reversed(list(zip(xs[:-1], xs[1:])))]"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [xs[i] * x for i in range(3, len(xs))]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return xs[2:]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    d = []\n    for i in xs:\n        d.append(i)\n        d.append(i)\n        d.append(i)\n        d.append(i)\n    return d\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    for x in xs:\n        result.append(x*(x-1))\n    return result\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(xs) == 0:\n        return xs\n    elif len(xs) == 1:\n        return [1]\n    else:\n        return [x + [delta(x)] for x,delta in zip(xs[1:],derivative(xs[1:]))]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [x[1] for x in reversed(xs)]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    a, b, c = 0, 1, 1\n    for i in range(3, n):\n        c = a + b\n        a = b\n        b = c\n    return c\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 2:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n==0:\n        return 0\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # the FibFib sequence gives the answer in terms of the fibonacci numbers, so we return the answer to that\n    # as a list.\n    def fib(n):\n        if n < 2:\n            return n\n        else:\n            return fib(n-2) + fib(n-1)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    x, y = 0, 1\n    n = len(fibfib_sequence)\n    while n > 0:\n        y = x + y\n        x = y\n        n = n - 1\n    return y\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert 0 <= n <= 100\n    \n    if n == 1 or n == 2:\n        return n\n    \n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return n-1 + fib(n-1) + fib(n-2) + fib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert n >= 1\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count=0\n    for char in s:\n        if char=='y':\n            count+=1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def get_vowels(word):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        return sum(word.count(v) for v in vowels if word.endswith(v))\n    \n    return sum(get_vowels(word) for word in s)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    counter = 0\n    for i in range(len(s)):\n        if s[i] in \"AEIOU\":\n            counter += 1\n    return counter\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    vowels_count = 0\n    for letter in s:\n        if letter in 'aeiouAEIOU':\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    vowels = 'aeiouy'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(s) - (s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') + s.count('y'))\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(s) - s.count('y') - s.count('a') - s.count('e') - s.count('i') - s.count('o') - s.count('u')\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    n = 0\n    for x in s:\n        if x in vowels:\n            n += 1\n    return n\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Write your code here\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if shift > len(x):\n        return x\n    else:\n        return str(int(x) + shift - len(x))\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def shift_right(x, shift):\n        return x >> shift & (x << (32 - shift))\n    result = \"\"\n    while shift_right(x, shift) < len(x):\n        shift += 1\n        result += \"0\"\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    reversed_x = str(x)[::-1]\n    return reversed_x + str(shift)[::-1]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ''.join([str(i) for i in reversed(x[shift:])])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    digits = len(str(x))\n    if shift > digits:\n        return str(x)[::-1]\n    else:\n        return str(x)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if shift > len(str(x)):\n        return str(x)[-shift:]\n    else:\n        return str(x)[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # The digits that need to be shifted right are already\n    # stored in the digit array\n    digits = [int(i) for i in list(str(x))]\n    # What's the value of the digit array that needs to be shifted right?\n    shift_right = shift % len(digits)\n    # The next value is the sum of the digits right shifted by shift_right\n    # and the digits array\n    return digits[shift_right:] + digits[:shift_right]"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    x = str(x)\n    if shift == 1:\n        return x[::-1]\n    if shift > len(x):\n        shift = len(x) - shift\n    if shift == len(x):\n        return x[::-1]\n    # Otherwise, shift the digits\n    #    x = x[:shift] + x[shift:]\n    #        (to make it a string of shift digits)\n    #    return x[::-1][:shift] + x[shift:]\n    return x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    shift_string = \"0\"\n    for i in range(len(x)):\n        shift_string += str(x[-i-1])\n    return shift_string[-shift:]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    shift = -shift\n    return \"\".join(str(i) for i in x[::-1]) + str(shift)[::-1]\n    \ndef main():\n    print(circular_shift(26, 3))\n    print(circular_shift(12, 1))\n    print(circular_shift(12, 2))\n    print(circular_shift(12, 3))\n    print(circular_shift(123, 1))\n    print(circular_shift(123, 2))\n    print(circular_shift(123, 3))\n    print(circular_shift(1234, 1))\n    print(circular_shift(1234, 2))\n    print(circular_shift(1234, 3))\n    print(circular_shift(12345, 1))\n    print(circular_shift(12345, 2))\n    print(circular_shift(12345, 3))\n    print(circular_shift(123456789, 1))\n    print(circular_shift(123456789, 2))\n    print(circular_shift(123456789, 3))\n    print(circular_shift(1234567890, 1))\n    print(circular_shift(1234567890, 2))\n    print(circular_shift(1234567890, 3))\n    print(circular_shift(12347890, 1))\n    print(circular_shift(12347890, 2))\n    print(circular_shift(12347890, 3))\n    print(circular_shift(1234567890123, 1))\n    print(circular_shift(1234567890123, 2))\n    print(circular_shift(1234567890123, 3))\n    print(circular_shift(1234567890, 0))\n    print(circular_shift(1234567890, -1))\n    print(circular_shift(1234567890, -2))\n    print(circular_shift(1234567890, -3))\n    print(circular_shift(12345678901, 0))\n    print(circular_shift(12345678901, -1))\n    print(circular_shift(12345678901, -2))\n    print(circular_shift(12345678901, -3))\n    print(circular_shift(1234567890, 0))\n    print(circular_shift(1234567890, -1))\n    print(circular_shift(1234567890, -2))\n    print(circular_shift(1234567890, -3))\n    print(circular_shift(123456789, 0))\n    print(circular_shift(123456789, -1))\n    print(circular_shift(123456789, -2))\n    print(circular_shift(123456789, -3))\n    print(circular_shift(1234567890, 0))\n    print(circular_shift(1234567890, -1))\n    print(circular_shift(1234567890, -2))\n    print(circular_shift(1234567890, -3))\n    print(circular_shift(123456789, 0))\n    print(circular_shift(123456789, -1))\n    print(circular_shift(123456789, -2))\n    print(circular_shift(123456789, -3))\n    print(circular_shift(1234567890, 0))\n    print(circular_shift(1234567890, -1))\n    print(circular_shift(1234567890, -2))\n    print(circular_shift(1234567890, -3))\n    print(circular_shift(1234567890123, 0))\n    print(circular_shift(1234567890123, -1))\n    print(circular_shift(1234567890123, -2))\n    print(circular_shift(1234567890123, -3))\n    print(circular_shift(1234567890, 0))\n    print(circular_shift(1234567890, -1))\n    print(circular_shift(1234567890, -2))\n    print(circular_shift(123456789"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    pass\ndef printValues(values,index,i):\n    \"\"\"Task\n    Write a function that prints the values in a single line.\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    string = \"\"\n    for i in s:\n        if ord(i) >= 48 and ord(i) <= 57:\n            string += i\n    return sum(ord(i) for i in string)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    digit_sum = 0\n    for i in s:\n        digit_sum += ord(i)\n    return digit_sum\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(s) == 0:\n        return 0\n    s = s.upper()\n    s = s.replace(' ', '')\n    s = s.replace('+', '')\n    s = s.replace('-', '')\n    s = s.replace('=', '')\n    s = s.replace('&', '')\n    s = s.replace('$', '')\n    s = s.replace('%', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('*', '')\n    s = s.replace(';', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    s = s.replace('-', '')\n    s = s.replace('_', '')\n    s = s.replace('+', '')\n    s = s.replace(':', '')\n    s = s.replace(';', '')\n    s = s.replace('.', '')\n    s = s.replace('&', '')\n    s = s.replace('$', '')\n    s = s.replace('%', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('*', '')\n    s = s.replace(';', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    s = s.replace('-', '')\n    s = s.replace('_', '')\n    return sum(map(int, s))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum(ord(c) for c in s if ord(c) >= ord('A') and ord(c) <= ord('Z'))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(ord(i) for i in s)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum([ord(ch) for ch in s if ch in string.ascii_lowercase])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum([ord(c) for c in s if ord(c) >= ord('0')])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(ord(c) for c in s if c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(i for i in map(ord, s))\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    n = int(n)\n    if n == 0:\n        return 0\n    else:\n        for i in s:\n            if i == \"0\":\n                count += n//2\n            if i == \"1\":\n                count += (n-1)//2\n            if i == \"2\":\n                count += (n//2)-1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    apples = 0\n    oranges = 0\n    mango = 0\n    s = s.lower()\n    for i in s:\n        if i == \"a\":\n            apples += 1\n        elif i == \"b\":\n            oranges += 1\n        elif i == \"m\":\n            mango += 1\n    return apples, oranges, mango\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    apples = 0\n    oranges = 0\n    mango = 0\n    for i in s:\n        if i == 'a' or i == 'i' or i == 'o' or i == 'u':\n            apples += 1\n        elif i =='m' or i == 'g' or i == 'e' or i == 'r' or i == 'y':\n            oranges += 1\n        elif i == 'f':\n            mango += 1\n    return apples - oranges - mango\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    cnt_apples = 0\n    cnt_oranges = 0\n    \n    cnt_mango_fruits = 0\n    cnt_total_fruits = 0\n    \n    \n    for i in s:\n        if i == 'A' or i == 'e' or i == 'I' or i == 'o' or i == 'M':\n            cnt_apples += 1\n        if i == 'O' or i == 'i' or i == 'O' or i =='m':\n            cnt_oranges += 1\n        if i == 'G' or i == 'M' or i == 'g' or i == 'E' or i == 'r' or i == 't' or i == 'P' or i == 'p' or i == 'g' or i == 'r' or i == 'e' or i == 'g' or i == 'e' or i == 'I' or i == 'R' or i == 'r' or i == 'i' or i == 'M':\n            cnt_mango_fruits += 1\n    \n    cnt_total_fruits = cnt_apples + cnt_oranges + cnt_mango_fruits\n    return cnt_total_fruits\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in s:\n        if i == \"0\":\n            count += 0\n        elif i == \"1\":\n            count += 1\n        else:\n            count += 3\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    apples, oranges = 0, 0\n    for char in s:\n        if char == 'a':\n            apples += 1\n        elif char == 'b':\n            oranges += 1\n    return apples + oranges + n\n    \n    \ndef fruits(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruits this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruits(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruits(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruits(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruits(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apple_apples, apple_oranges, apple_mango = 0, 0, 0\n    for char in s:\n        if char == 'a':\n            apple_apples += 1\n        elif char == 'b':\n            apple_oranges += 1\n    return apple_apples + apple_oranges + n\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    #Initialising variables\n    apples_num = 0\n    fruits_num = 0\n    \n    #Iterating through the string and adding the number of apples and oranges in each iteration\n    for i in s:\n        if i == 'a':\n            apples_num = apples_num + 1\n        elif i == 'b':\n            fruits_num = fruits_num + 1\n        else:\n            pass\n    \n    #Calculating the number of mango fruits in the basket\n    if apples_num > fruits_num:\n        return \"1\"\n    elif apples_num < fruits_num:\n        return \"2\"\n    else:\n        return \"3\"\n        "
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s) == 1:\n        return n\n    if s[0] == '1':\n        return n+fruit_distribution(s[1:], n)\n    else:\n        return n-fruit_distribution(s[1:], n)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    basket = split_s(s)\n    fruits_num = 0\n    for fruit in basket:\n        if fruit[0] == '1':\n            fruits_num += 1\n    return fruits_num\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # your code here\n    count_of_apples = n - s.count('apples')\n    count_of_oranges = n - s.count('oranges')\n    return count_of_apples - count_of_oranges\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not arr:\n        return []\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            arr[i] = (arr[i]//2) + 1\n    if len(arr)%2==0:\n        return sorted(arr,reverse=True)\n    else:\n        return sorted(arr)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    arr = sorted(arr)\n    if len(arr) == 0:\n        return [0, 0]\n    if len(arr) == 1:\n        return [arr[0], 0]\n    if len(arr) == 2:\n        if arr[0] % 2 == 0:\n            return [arr[0], arr.index(arr[0] // 2)]\n        else:\n            return [arr[0], arr.index(arr[0] // 2 + 1)]\n    arr_len = len(arr)\n    if arr_len == 1:\n        return [arr[0], 0]\n    if arr_len == 2:\n        if arr[0] % 2 == 0:\n            return [arr[0], arr.index(arr[0] // 2)]\n        else:\n            return [arr[0], arr.index(arr[0] // 2 + 1)]\n    # t = 0 to t - 1\n    # t = t + 1 to t + 1\n    if arr[0] % 2 == 0:\n        for i in range(0, arr_len, 2):\n            if arr[i] % 2 == 0:\n                return [arr[i], arr.index(arr[i] // 2)]\n            else:\n                return [arr[i], arr.index(arr[i] // 2 + 1)]\n    else:\n        for i in range(0, arr_len, 2):\n            if arr[i] % 2!= 0:\n                return [arr[i], arr.index(arr[i] // 2)]\n            else:\n                return [arr[i], arr.index(arr[i] // 2 + 1)]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def make_even(arr):\n        for i in range(len(arr)):\n            if i % 2 == 0:\n                arr[i] = arr[i]//2\n        return arr\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not arr:\n        return []\n    arr.sort(key=lambda x: x % 2)\n    return arr[0]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Optimal solution:\n    if not arr:\n        return []\n    arr.sort()\n    m = arr[-1]\n    left = arr[0]\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            m = arr[i]\n            break\n    index = left - m\n    if index < 0:\n        return [left, index]\n    if index % 2 == 0:\n        return [left, index]\n    index = int(index / 2)\n    return [left, index]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if arr == []: return []\n    heap = []\n    for i in range(len(arr)):\n        heapq.heappush(heap, -arr[i])\n        if len(heap)%2 == 0:\n            if arr[i]%2 == 0:\n                return heapq.heappop(heap)\n            else:\n                return heapq.heappop(heap)\n    \n    return heap\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    arr.sort()\n    ans = []\n    n = len(arr)\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            ans.append(arr[i])\n        i += 1\n    return ans\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # O(n) time and O(1) space\n    if not arr: return []\n    # put into a stack\n    stack = [0]\n    for i in range(1, len(arr)):\n        while stack and arr[stack[-1]] > arr[i]:\n            tmp = stack.pop()\n            if tmp < i: return [arr[i], tmp]\n        stack.append(i)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if arr == []:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    dic = {}\n    result = []\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def search_f(lst, target):\n        # Write your code here.\n        if not lst:\n            return -1\n        # loop through the list\n        for i in lst:\n            # if the target is less than the element in the list, return -1\n            if target > i:\n                return -1\n            # if the target is equal to the element, check if the frequency of the element is greater than the frequency of the target\n            elif target == i:\n                if lst.count(i) > lst.count(target):\n                    return i\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    lst = sorted(lst)\n    result = 0\n    for x in lst:\n        if x > result:\n            result = x\n    return result\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_val = 0\n    for i in range(len(lst)):\n        if lst[i]>0 and lst[i]%lst[i]==0:\n            if max_val<lst[i]:\n                max_val = lst[i]\n    return max_val"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Your code here\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i] > lst[j]:\n                if lst[i] > lst[j]:\n                    lst[i],lst[j] = lst[j],lst[i]\n    \n    for i in lst:\n        if i < 0:\n            return i\n    \n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Add your Python code here.\n    max = -1\n    for num in lst:\n        if num >= 0:\n            if num > max:\n                max = num\n    return max\n    # Add your Python code here.\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # for lst in lst_numbers:\n    #     for i in range(len(lst)):\n    #         if lst[i] <= 0:\n    #             lst[i] = -1\n    # return max(lst)\n    lst.sort(reverse=True)\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            return max(lst)\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if lst == []:\n        return -1\n    for i in range(len(lst)):\n        if lst[i] >= 0:\n            return lst[i]\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Write your code here.\n    freq={}\n    for x in lst:\n        if x in freq:\n            freq[x]+=1\n        else:\n            freq[x]=1\n    highest=-1\n    for key,value in freq.items():\n        if value>=1:\n            if key>highest:\n                highest=key\n    return highest\n    \n    \n    \n    "
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max = -1\n    for num in lst:\n        if num > 0:\n            if num > max:\n                max = num\n            if num > max:\n                max = num\n        if max == -1:\n            return -1\n    if max > 0:\n        return max\n    return max\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    res = []\n    min_val = lst[0]\n    max_val = lst[0]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sorted_lst = []\n    lst_len = len(lst)\n    sorted_lst.append(lst[0])\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sorted = []\n    if len(lst) == 1:\n        return lst\n    # sort by minimum value\n    if lst[0] < lst[1]:\n        lst = sorted(lst)\n    sorted.extend(lst[:2])\n    for i in range(2, len(lst)):\n        if lst[i] < lst[i-1]:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        else:\n            break\n    # sort by maximum value\n    lst = sorted(lst[:2])\n    for i in range(2, len(lst)):\n        if lst[i] > lst[i-1]:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        else:\n            break\n    sorted.extend(lst)\n    return sorted\n    \ndef uncommon_sort_list(lst):\n    '''\n    Given list of integers, return list in uncommon order.\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Time: O(n^3) | Space: O(n)\n    lst.sort(reverse=True)\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sorted_list = sorted(lst)\n    strange_list = []\n    i = 0\n    while i < len(sorted_list):\n        if sorted_list[i] > sorted_list[i+1]:\n            strange_list.append(sorted_list[i])\n            sorted_list.pop(i)\n            sorted_list.pop(i)\n            i -= 1\n        else:\n            i += 1\n    return strange_list"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst = sorted(lst)\n    for i in range(len(lst) - 1, 0, -1):\n        for j in range(i):\n            if lst[j] < lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if lst == []:\n        return []\n    \n    elif len(lst) == 1:\n        return lst\n    \n    elif len(lst) == 2:\n        return lst[::-1]\n    \n    elif len(lst) == 3:\n        return lst[:2] + lst[2:3] + lst[:2]\n    \n    else:\n        m = min(lst)\n        for i in range(3, len(lst)):\n            if m >= lst[i]:\n                m = lst[i]\n                lst[i], lst[i-1] = lst[i-1], lst[i]\n                lst[i-1], lst[i-2] = lst[i-2], lst[i-1]\n        return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    for element in lst:\n        result.append(min(lst))\n        result.append(max(lst))\n        lst.remove(min(lst))\n        lst.remove(max(lst))\n    return result\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if lst == []:\n        return []\n    min_value = lst[0]\n    remainder = lst[1:]\n    return sorted(remainder, key=lambda x: (min_value, x)) + [min_value] + strange_sort_list(remainder)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    strange_list = []\n    for item in lst:\n        for i in range(len(lst)):\n            if lst[i] < item:\n                strange_list.append(lst[i])\n                break\n    return strange_list\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def triangle(a, b, c):\n        if not is_valid_triangle(a, b, c):\n            raise TriangleError(\"Invalid triangle\")\n        return a + b + c\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a + b + c > 2 * a + 2 * b + 2 * c:\n        return -1\n    if a + c > b + 2 * b + 2 * c:\n        return -1\n    return ((a + b) * (b + c) * (c + a)) / 2\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if type(a)!= int or type(b)!= int or type(c)!= int:\n        return -1\n    else:\n        if a == b == c:\n            return a * b * c\n        else:\n            if a!= b and b!= c and a!= c:\n                return abs(a * b - c * d) / 2 * c\n            else:\n                return abs(a * b - c * d)\n    "
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if(a+b+c) == 0:\n        return -1\n    elif a == b or b == c or a == c:\n        return round(math.sqrt((b*b) - (4*a*c)), 2)\n    else:\n        return round(math.sqrt((b*b) - (4*a*c)), 2) + round(math.sqrt((c*c) - (b*b)), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Triangle area\n    if not is_valid_triangle(a, b, c):\n        return -1\n    if a == b and a == c:\n        return a * b * c\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a == b == c:\n        return round(((b*c)*0.5), 2)\n    elif a + b > c:\n        return round(((b*c)*0.5), 2)\n    elif a + c > b:\n        return round(((a*b)*0.5), 2)\n    elif b + a > c:\n        return round(((a*b)*0.5), 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = (a + b + c) * 0.5\n    if result < 0 or result > c:\n        return -1\n    elif result == c:\n        return result\n    else:\n        return round(result)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Check for validity\n    if a > b and b > c:\n        if a + b > c and c + a > b:\n            return round(a * b / 2, 2)\n        return -1\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return round( ( ( a * c ) / 2 ), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = math.sqrt(a ** 2 + b ** 2 + c ** 2)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return (q.count(q) <= (w // 2)) or (q.count(q[::-1]) <= (w // 2))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO\n    # return is_it_balanced\n    if not q or len(q)<1:\n        return False\n    if len(q)==1 and is_palindrome(q):\n        return False\n    return q and sum(q)>=max(w)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_w = w\n    balanced = True\n    summ = 0\n    if len(q) < 2:\n        return False\n    else:\n        for i in range(len(q)):\n            if i > 0:\n                sum = q[i] + q[i-1]\n                if sum > max_w:\n                    balanced = False\n            else:\n                sum = q[i]\n            if q[i] >= sum:\n                summ += q[i]\n            else:\n                summ -= q[i]\n            if summ > max_w:\n                balanced = False\n            if balanced and q[i] < max_w:\n                max_w = q[i]\n        return balanced\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a = []\n    for i in range(len(q)):\n        a.append(q[i])\n    for i in range(len(w)):\n        if a[i] < w[i]:\n            return False\n    for i in range(len(a)):\n        if a[i] > w[i]:\n            return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if q == []:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Write your code here\n    \n    return q == q[::-1] or len(set(q)) == len(q) and sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if q == [] or w == 0:\n        return False\n    \n    if len(q) == 1:\n        return True\n    \n    if is_palindrome(q):\n        return will_it_fly(q[1:],w-q[0])\n    else:\n        return will_it_fly(q[1:],w)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    is_balanced = True\n    max_weight = float('inf')\n    possible_sum = 0\n    \n    for item in q:\n        possible_sum += item\n        if possible_sum > max_weight:\n            is_balanced = False\n            break\n        \n    if is_balanced:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = True\n    q.sort()\n    for i in range(len(q)):\n        temp = q[i]\n        if temp!= q[-1] + q[i]:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # \n    # write your code here\n    # \n    q.append(0)\n    while len(q) > 1:\n        if sum(q[:2]) <= w:\n            q.pop(0)\n            q.pop(0)\n        else:\n            return False\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Write your code here\n    min_change = arr[0]\n    for i in range(1, len(arr)):\n        min_change = min(min_change, arr[i] - arr[i - 1])\n    return min_change\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n = len(arr)\n    d = [-1] * n\n    s = 1\n    for i in range(n):\n        if arr[i] < s:\n            break\n        d[i] = s\n        s = arr[i]\n    for i in range(n-1, -1, -1):\n        if arr[i] > s:\n            break\n        d[i] = arr[i]\n        s = arr[i]\n    return d[0]\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Get the last index and the smallest index\n    l, m = len(arr), len(arr) - 1\n    while l < m:\n        # Compare the new number to the previous number\n        if arr[l]!= arr[m]:\n            # If we are at the beginning, we need to change the smallest element\n            if arr[l] < arr[m]:\n                # Change the smallest element\n                arr[m] = arr[l]\n                # Move the smallest element from front to end\n                m -= 1\n            # If we are at the end, we need to change the smallest element\n            else:\n                # Change the smallest element\n                arr[l] = arr[m]\n                # Move the smallest element from end to front\n                l += 1\n        l += 1\n        m -= 1\n    return len(arr) - 1 - (arr[::-1].index(arr[0]) - 1)\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return 0\n    \n    sum_ = 0\n    for i in range(len(arr)):\n        sum_ += arr[i]\n    \n    max_sum = 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            i += 1\n        else:\n            max_sum += arr[i] - arr[j]\n            j -= 1\n    return max_sum\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if arr == []:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    i = 0\n    i2 = len(arr) - 1\n    while i < i2:\n        if arr[i]!= arr[i2]:\n            i += 1\n        i2 -= 1\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(arr) <= 1:\n        return 1\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right-left)//2\n        if arr[mid] == arr[mid+1] and arr[mid]!= arr[mid-1]:\n            return mid+1\n        elif arr[mid]!= arr[mid+1]:\n            left = mid + 1\n        elif arr[mid] == arr[mid-1]:\n            right = mid - 1\n            \n    return left + 1\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    stack = []\n    counter = 0\n    for num in arr:\n        if stack:\n            if stack[-1]!= num:\n                counter += 1\n                stack.append(num)\n        else:\n            stack.append(num)\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    i = 0\n    l = len(arr)\n    while i < l:\n        \n        if arr[i]!= arr[i+1]:\n            count += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else:\n            if arr[i]!= arr[i-1]:\n                count += 1\n                arr[i], arr[i-1] = arr[i-1], arr[i]\n            else:\n                count = 0\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if len(arr) <= 1:\n        return 0\n    \n    arr.sort()\n    prev_element = arr[0]\n    curr_element = arr[1]\n    num_changes = 1\n    \n    for index in range(len(arr) - 2, -1, -1):\n        if arr[index + 1]!= prev_element:\n            num_changes += 1\n            prev_element = arr[index + 1]\n    \n    return num_changes\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    totals = 0\n    for i in lst1:\n        for j in lst2:\n            if j not in i:\n                totals += 1\n    return lst2[:totals]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    total = 0\n    for char in lst1:\n        if char not in lst2:\n            total += 1\n    return total\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [i for i in lst1 if len(i) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    lst1 = list(set(lst1))\n    lst2 = list(set(lst2))\n    return lst1 if len(set(lst1)) < len(lst2) else lst2\n    \n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    '''\n    How to understand\n    1.When we create a list of strings and then convert them to ints we get the\n    max_str of all strings (max_str)\n    2.We then check if there are more than one chars in the lists:\n    If so, we pick the first index of the list\n    3.We then go through the list and check if it is more than one chars\n    4.If so, we return the list we picked\n    '''\n    max_str = max(lst1)\n    str_len = len(lst1)\n    for i in range(str_len):\n        if len(lst1[i]) < max_str:\n            return lst1[i]\n    return lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Solution 1\n    # if len(lst1) > len(lst2):\n    #     return lst1\n    # else:\n    #     return lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # your code here\n    return lst1 + lst"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    total = len(lst1) + len(lst2)\n    if total < len(lst1):\n        return lst1\n    elif total < len(lst2):\n        return lst2\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return list(map(len, lst1 + lst2))\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # write your code here\n    count = 0\n    lst2 = list(set(lst2))\n    for i in lst1:\n        if len(i) < len(lst2):\n            count += 1\n    return lst2[:count]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Write your code here.\n    a=a**3\n    a+=100\n    return a==100\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #\"3\" + \"3\" + \"3\" = 30\n    #\"3\" * \"3\" = 30\n    return a == (a ** 3) * 3\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if a == 0 or a == 1:\n        return True\n    if a == 2:\n        return False\n    if a % 2 == 0:\n        return False\n    if a % 3 == 0:\n        return True\n    for i in range(5):\n        if (a % i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(3,a+1,2):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(2, 100):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # Use a variable and an if statement to determine if the given number is less then 100.\n    if a < 100:\n        return True\n    \n    # Check if the given number is less than 100.\n    if a % 3 == 0:\n        return False\n    \n    # Check if the given number is less than 100.\n    if a % 5 == 0:\n        return False\n    \n    # Check if the given number is less than 100.\n    if a % 7 == 0:\n        return False\n    \n    # If all else fails, return true.\n    return True\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # get the numbers\n    a = a % 100\n    b = a % 10\n    c = a % 5\n    \n    if b + c == a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Write your code here\n    return (a % 3 == 0) and (a % 5 == 0)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(4, a, 2):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: implement this function\n    for i in range(1, 100):\n        if i == a and i % 3 == 0 and i % 5 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    try:\n        n = int(n)\n        if n == 1:\n            return False\n        if n%2==0:\n            return is_simple_power(int(n/2), n-1)\n        if n%3==0:\n            return is_simple_power(int(n/3), n-1)\n        if n%5==0:\n            return is_simple_power(int(n/5), n-1)\n        if n%10==0:\n            return is_simple_power(int(n/10), n-1)\n        if n%20==0:\n            return is_simple_power(int(n/20), n-1)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if (x==0):\n        return True\n    if (n==0):\n        return False\n    if (n==1):\n        return True\n    if (n==2):\n        return True\n    if (n==3):\n        return True\n    if (n==4):\n        return True\n    if (n==5):\n        return True\n    if (n==6):\n        return True\n    if (n==7):\n        return True\n    if (n==8):\n        return True\n    if (n==9):\n        return True\n    if (n==10):\n        return True\n    if (n==11):\n        return True\n    if (n==12):\n        return True\n    if (n==13):\n        return True\n    if (n==14):\n        return True\n    if (n==15):\n        return True\n    if (n==16):\n        return True\n    if (n==17):\n        return True\n    if (n==18):\n        return True\n    if (n==19):\n        return True\n    if (n==20):\n        return True\n    if (n==21):\n        return True\n    if (n==22):\n        return True\n    if (n==23):\n        return True\n    if (n==24):\n        return True\n    if (n==25):\n        return True\n    if (n==26):\n        return True\n    if (n==27):\n        return True\n    if (n==28):\n        return True\n    if (n==29):\n        return True\n    if (n==30):\n        return True\n    if (n==31):\n        return True\n    if (n==32):\n        return True\n    if (n==33):\n        return True\n    if (n==34):\n        return True\n    if (n==35):\n        return True\n    if (n==36):\n        return True\n    if (n==37):\n        return True\n    if (n==38):\n        return True\n    if (n==39):\n        return True\n    if (n==40):\n        return True\n    if (n==41):\n        return True\n    if (n==42):\n        return True\n    if (n==43):\n        return True\n    if (n==44):\n        return True\n    if (n==45):\n        return True\n    if (n==46):\n        return True\n    if (n==47):\n        return True\n    if (n==48):\n        return True\n    if (n==49):\n        return True\n    if (n==50):\n        return True\n    if (n==51):\n        return True\n    if (n==52):\n        return True\n    if (n==53):\n        return True\n    if (n==54):\n        return True\n    if (n==55):\n        return True\n    if (n==56):\n        return True\n    if (n==57):\n        return True\n    if (n==58):\n        return True\n    if (n==59):\n        return True\n    if (n==60):\n        return True\n    if (n==61):\n        return True\n    if (n==62):\n        return True\n    if (n==63):\n        return True\n    if (n==64):\n        return True\n    if (n==65):\n        return True\n    if (n==66):\n        return True\n    if (n==67):\n        return True\n    if (n==68):\n        return True\n    if (n==69):\n        return True\n    if (n==70):\n        return True\n    if (n==71):\n        return True\n    if (n==72):\n        return True\n    if (n==73):\n        return True\n    if (n==74):\n        return True\n    if (n==75):\n        return True\n    if (n==76):\n        return True\n    if (n==77):\n        return True\n    if (n==78):\n        return True\n    if (n==79):\n        return True\n    if (n==80):\n        return True\n    if (n==81):\n        return True\n    if (n==82):\n        return True\n    if (n==83):\n        return True\n    if ("
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    import math\n    return (math.log(n, x) % n == x)\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n <= 2:\n        return True\n    elif n % 2 == 0:\n        return is_simple_power(x, n//2)\n    else:\n        return (is_simple_power(x, n//2) and is_simple_power(x, n))\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1:\n        return True\n    if n == 2:\n        return x % 2 == 0\n    if n > 1:\n        x = x * x\n        if x == n:\n            return True\n        return False\n    \ndef check_triple(x, n):\n    \"\"\"Your task is to write a function that returns true if x is a triple of n.\n    x is a triple of n if n**2=x\n    For example:\n    check_triple(1, 4) => true\n    check_triple(2, 2) => true\n    check_triple(8, 2) => true\n    check_triple(3, 2) => true\n    check_triple(3, 1) => true\n    check_triple(5, 3) => true\n    \"\"\"\n    if n == 1:\n        return True\n    if n == 2:\n        return x % 2 == 0\n    if n > 1:\n        x = x * x\n        if x == n:\n            return True\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return True\n    if n%10 == 1 and n>0:\n        return is_simple_power(n//10, n%10)\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    try:\n        x = int(x)\n        n = int(n)\n        if n < 2:\n            return False\n        elif n**int(x) == x:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return type(n) == int and type(x) == int and n**int(x) == x\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # FILL IN YOUR CODE HERE...\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_simple_power(x, n//2)\n    if n % 3 == 0:\n        return is_simple_power(x, n//3)\n    if n % 5 == 0:\n        return is_simple_power(x, n//5)\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return x == int(x)**n\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    if a == 0:\n        return True\n    elif a == 1:\n        return False\n    elif a == -1:\n        return True\n    elif a == 64:\n        return True\n    elif a == 0:\n        return False\n    elif a == 180:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return a in range(-1,9)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return a == a*a*a\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if isprime(a):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a == 0:\n        return True\n    if a == 1:\n        return False\n    if a == 2:\n        return False\n    if a == 3:\n        return False\n    if a == 4:\n        return False\n    if a == 5:\n        return False\n    if a == 6:\n        return False\n    if a == 7:\n        return False\n    if a == 8:\n        return False\n    if a == 9:\n        return False\n    if a == 10:\n        return False\n    if a == 11:\n        return False\n    if a == 12:\n        return False\n    if a == 13:\n        return False\n    if a == 14:\n        return False\n    if a == 15:\n        return False\n    if a == 16:\n        return False\n    if a == 17:\n        return False\n    if a == 18:\n        return False\n    if a == 19:\n        return False\n    if a == 20:\n        return False\n    if a == 21:\n        return False\n    if a == 22:\n        return False\n    if a == 23:\n        return False\n    if a == 24:\n        return False\n    if a == 25:\n        return False\n    if a == 26:\n        return False\n    if a == 27:\n        return False\n    if a == 28:\n        return False\n    if a == 29:\n        return False\n    if a == 30:\n        return False\n    if a == 31:\n        return False\n    if a == 32:\n        return False\n    if a == 33:\n        return False\n    if a == 34:\n        return False\n    if a == 35:\n        return False\n    if a == 36:\n        return False\n    if a == 37:\n        return False\n    if a == 38:\n        return False\n    if a == 39:\n        return False\n    if a == 40:\n        return False\n    if a == 41:\n        return False\n    if a == 42:\n        return False\n    if a == 43:\n        return False\n    if a == 44:\n        return False\n    if a == 45:\n        return False\n    if a == 46:\n        return False\n    if a == 47:\n        return False\n    if a == 48:\n        return False\n    if a == 49:\n        return False\n    if a == 50:\n        return False\n    if a == 51:\n        return False\n    if a == 52:\n        return False\n    if a == 53:\n        return False\n    if a == 54:\n        return False\n    if a == 55:\n        return False\n    if a == 56:\n        return False\n    if a == 57:\n        return False\n    if a == 58:\n        return False\n    if a == 59:\n        return False\n    if a == 60:\n        return False\n    if a == 61:\n        return False\n    if a == 62:\n        return False\n    if a == 63:\n        return False\n    if a == 64:\n        return False\n    if a == 65:\n        return False\n    if a == 66:\n        return False\n    if a == 67:\n        return False\n    if a == 68:\n        return False\n    if a == 69:\n        return False\n    if a == 70:\n        return False\n    if a == 71:\n        return False\n    if a == 72:\n        return False\n    if a == 73:\n        return False\n    if a == 74:\n        return False\n    if a == 75:\n        return False\n    if a == 76:\n        return False\n    if a == 77:\n        return False\n    if a == 78:\n        return False\n    if a == 79:\n        return False\n    if a == 80:\n        return False\n    if a == 81:\n        return False\n    if a == 82:\n        return False\n    if a == 83:\n        return False\n    if a == 84:\n        return False\n    if a == 85:\n        return False\n    if a == 86:\n        return False\n    if a == 87:\n        return False\n    if a == 88:\n        return False\n    if a == 89:\n        return False\n    if a == 90:\n        return False\n    if a == 91:\n        return False\n    if a == 92:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return a > 0 and a**3 == a**3\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if a == 0:\n        return True\n    if isprime(a) == True:\n        return True\n    if a < 0:\n        return False\n    if a % 2 == 0:\n        return iscube(a//2)\n    if a % 3 == 0:\n        return iscube(a//3)\n    if a % 5 == 0:\n        return iscube(a//5)\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return type(a) == int and a > 0 and (a**3) == a\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #num = str(num)\n    num = int(num, 16)\n    #print(num)\n    i = 0\n    while num:\n        num, i = num // 16, num % 16\n        #print(i, num)\n    return i\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    num=num.upper()\n    num = num.replace(\" \", \"\")\n    num = num.replace(\"-\", \"\")\n    num = num.replace(\"(\", \"\")\n    num = num.replace(\")\", \"\")\n    num = num.replace(\",\", \"\")\n    num = num.replace(\" \", \"\")\n    if num.isdigit():\n        num = int(num)\n    else:\n        num = 0\n    return num\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    assert type(num) == str, \"Only strings are allowed\"\n    assert num.isalpha(), \"Only letters are allowed\"\n    assert len(num) == 4, \"Only numbers are allowed\"\n    \n    lst = []\n    for i in range(len(num)):\n        lst.append(int(num[i])*2)\n    \n    for i in range(len(lst)):\n        if lst[i]%2 == 0:\n            lst[i] = lst[i]//2\n    \n    return lst\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return len([num[i] for i in range(len(num)) if num[i] in '0ABCDEF'])\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Check if num is a string\n    try:\n        num = str(num)\n    except Exception:\n        return 0\n    # Add non-decimal digits to the end of num\n    try:\n        if num.count(\"0\") >= 1:\n            for digit in num:\n                if digit!= \"0\":\n                    return 1\n        else:\n            return 1\n    except Exception:\n        return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def count(num):\n        digit = 0\n        for num in num:\n            if num in \"ABCDEF\":\n                digit += 1\n        return digit\n    def add(num1, num2):\n        res = []\n        for i in range(len(num2)):\n            if num2[i] in \"ABCDEF\":\n                res.append(num1[:i]+num2[i]+num1[i+1:])\n            else:\n                res.append(num1[:i]+num2[i])\n        return res\n    def count_prime(num):\n        prime = [2, 3, 5, 7, 11, 13, 17]\n        count = 0\n        for i in range(1, num):\n            if num % i == 0:\n                count += 1\n        if count == 2:\n            return count\n        else:\n            return 0\n    \n    if num == \"\":\n        return 0\n    num = num.replace(\" \", \"\")\n    digits = count_prime(num)\n    for digit in range(digits):\n        res = count(add(\"1\", \"0\"*digit))\n        if res!= 0 and res!= 1:\n            return res\n    return count_prime(num)\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    digits = '0123456789ABCDEF'\n    return sum(1 for i in range(num) if num % 2 == 0)\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    prime = 2\n    while True:\n        if is_prime(int(num, 16)):\n            prime = int(num, 16)\n            break\n        else:\n            num = num[::-1]\n    return prime\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if num.isalpha():\n        return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    digits = 0\n    prime_num = 2\n    for i in range(len(num)):\n        if num[i] == \"0\":\n            digits += 1\n        elif num[i] == \"1\":\n            digits += 0\n        elif num[i] == \"2\":\n            digits += 1\n        elif num[i] == \"3\":\n            digits += 0\n        elif num[i] == \"4\":\n            digits += 1\n        elif num[i] == \"5\":\n            digits += 0\n        elif num[i] == \"6\":\n            digits += 1\n        elif num[i] == \"7\":\n            digits += 0\n        elif num[i] == \"8\":\n            digits += 1\n        elif num[i] == \"9\":\n            digits += 0\n        elif num[i] == \"A\":\n            digits += 1\n        elif num[i] == \"B\":\n            digits += 0\n        elif num[i] == \"C\":\n            digits += 1\n        elif num[i] == \"D\":\n            digits += 0\n        elif num[i] == \"E\":\n            digits += 1\n        elif num[i] == \"F\":\n            digits += 0\n    return digits\n    \ndef main():\n    \"\"\"The main function is to read a string as a user input, then \n    print the number of characters of the string.\n    For example, if the string is \"ABDEFG\", the output should be 10.\n    \"\"\"\n    string = input(\"Please input a string: \")\n    num_chars = len(string)\n    print(num_chars)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Your code here\n    # f'{decimal:b}'\n    return f'{decimal:b}'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    binary = []\n    \n    while decimal > 0:\n        if decimal%2 == 0:\n            binary.append('0')\n            decimal = decimal//2\n        else:\n            binary.append('1')\n            decimal = decimal//2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    decimal_to_binary = str(decimal)\n    binary = \"\"\n    if decimal >= 0:\n        decimal = decimal * 2\n        while decimal >= 1:\n            binary += str(decimal % 2)\n            decimal //= 2\n    else:\n        decimal = abs(decimal)\n        binary += str(decimal % 2)\n        decimal //= 2\n    while len(binary) < len(decimal_to_binary):\n        binary += \"0\"\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return decimal_to_bin(int(decimal))\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    binary = ''\n    while decimal:\n        digit = decimal % 2\n        binary += str(digit)\n        decimal //= 2\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result_str = \"\"\n    str_binary = bin(int(decimal))[2:]\n    for i in str_binary:\n        result_str += i if i == '1' else '0'\n    return result_str"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return ''.join('{:08b}'.format(decimal) for decimal in decimal)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    binary = ''\n    # Get the binary number\n    while decimal!= 0:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    str = 'db'\n    if decimal in [0, 1]:\n        return str + str\n    return str[:len(str) - 1] + 'db' + str[len(str) - 1:]\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    binary = []\n    digit = decimal\n    while digit!= 0:\n        digit = digit // 2\n        binary.insert(0, digit % 2)\n        digit = digit // 2\n    binary.reverse()\n    return ''.join(binary"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def is_happy_helper(s):\n        if len(s) < 3 or len(set(s))!= len(s):\n            return False\n        for i in range(len(s) - 2):\n            if s[i]!= s[i + 1] and s[i]!= s[i + 2] and s[i]!= s[i + 3]:\n                return False\n        return True\n    \n    return is_happy_helper(s)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Hint: to check if a string is a happy string we use a set\n    return len(set(s)) == len(s) and not all(s[i:i+3] in set(s) for i in range(len(s)))\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(s) < 3:\n        return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}:\n            count += 1\n        else:\n            count = 0\n        if count >= 3:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(s) < 3 or len(s) > 3:\n        return False\n    for i in range(len(s)-2):\n        if (s[i] == s[i+1] and s[i] == s[i+2]):\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def is_happy_helper(s, curr, i):\n        if i == len(s):\n            return True\n        if curr > len(s) or s[curr]!= s[i]:\n            return False\n        if s[curr] == s[i] and curr == 0:\n            return is_happy_helper(s, curr+1, i+1)\n        if s[curr] == s[i] and curr == 1:\n            return is_happy_helper(s, curr+1, i+1)\n        return is_happy_helper(s, curr, i+1)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    if len(s) < 3:\n        return False\n    count = [0] * 26\n    for i in s:\n        count[ord(i) - ord('a')] += 1\n    for i in range(len(s)):\n        if count[ord(s[i]) - ord('a')]!= 0:\n            return False\n        count[ord(s[i]) - ord('a')] -= 1\n    return Tru"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s) <= 2:\n        return False\n    for i in range(2, len(s)):\n        if s[i-2] == s[i-1] and s[i-2]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return s == s[::-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = list(s)\n    count_dic = {}\n    for i in range(len(s)):\n        if s[i] in count_dic:\n            count_dic[s[i]] += 1\n        else:\n            count_dic[s[i]] = 1\n    for key in count_dic:\n        if len(count_dic[key]) >= 3 and count_dic[key] == count_dic[key][-3]:\n            return False\n    return True\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(grades) == 0:\n        return []\n    gpa = [a for a in grades if a!= 0]\n    gpa_dict = {\n            \"A+\" : 0,\n            \"A\" : 0,\n            \"B+\" : 0,\n            \"B\" : 0,\n            \"C-\": 0,\n            \"C\": 0,\n            \"D+\" : 0,\n            \"D\" : 0,\n            \"E\" : 0\n            }\n    gpa_dict[\"A+\"] = gpa.count(4.0)\n    gpa_dict[\"A\"] = gpa.count(3.7)\n    gpa_dict[\"B+\"] = gpa.count(3.3)\n    gpa_dict[\"B\"] = gpa.count(3.0)\n    gpa_dict[\"C+\"] = gpa.count(2.7)\n    gpa_dict[\"C\"] = gpa.count(2.3)\n    gpa_dict[\"D+\"] = gpa.count(2.0)\n    gpa_dict[\"D\"] = gpa.count(1.7)\n    gpa_dict[\"E\"] = gpa.count(1.3)\n    if gpa_dict[\"A\"] > 0:\n        gpa_dict[\"A\"] = str(gpa_dict[\"A\"]) +'/'+ str(gpa.count(4.0))\n    if gpa_dict[\"B\"] > 0:\n        gpa_dict[\"B\"] = str(gpa_dict[\"B\"]) +'/'+ str(gpa.count(3.7))\n    if gpa_dict[\"C\"] > 0:\n        gpa_dict[\"C\"] = str(gpa_dict[\"C\"]) +'/'+ str(gpa.count(3.3))\n    if gpa_dict[\"D\"] > 0:\n        gpa_dict[\"D\"] = str(gpa_dict[\"D\"]) +'/'+ str(gpa.count(3.0))\n    if gpa_dict[\"E\"] > 0:\n        gpa_dict[\"E\"] = str(gpa_dict[\"E\"]) +'/'+ str(gpa.count(2.7))\n    if gpa_dict[\"A\"] == 0:\n        gpa_dict[\"A\"] = str(gpa_dict[\"A\"]) +'/'+ str(gpa.count(2.3))\n    if gpa_dict[\"B\"] == 0:\n        gpa_dict[\"B\"] = str(gpa_dict[\"B\"]) +'/'+ str(gpa.count(2.0))\n    if gpa_dict[\"C\"] == 0:\n        gpa_dict[\"C\"] = str(gpa_dict[\"C\"]) +'/'+ str(gpa.count(1.7))\n    if gpa_dict[\"D\"] == 0:\n        gpa_dict[\"D\"] = str(gpa_dict[\"D\"]) +'/'+ str(gpa.count(1.3))\n    if gpa_dict[\"E\"] == 0:\n        gpa_dict[\"E\"] = str(gpa_dict[\"E\"]) +'/'+ str(gpa.count(0.7))\n    return [gpa_dict[\"A+\"], gpa_dict[\"A\"], gpa_dict[\"B+\"], gpa_dict[\"B\"], gpa_dict[\"C+\"], gpa_dict[\"C\"], gpa_dict[\"D+\"], gpa_dict[\"D\"], gpa_dict[\"E\"],]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Make your code run in O(n) time.\n    grade_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grade_list.append('A+')\n        elif grade >= 3.7:\n            grade_list.append('A')\n        elif grade >= 3.3:\n            grade_list.append('A-')\n        elif grade >= 3.0:\n            grade_list.append('B+')\n        elif grade >= 2.7:\n            grade_list.append('B')\n        elif grade >= 2.3:\n            grade_list.append('B-')\n        elif grade >= 2.0:\n            grade_list.append('C+')\n        elif grade >= 1.7:\n            grade_list.append('C')\n        elif grade >= 1.3:\n            grade_list.append('C-')\n        elif grade >= 1.0:\n            grade_list.append('D+')\n        elif grade >= 0.7:\n            grade_list.append('D')\n        elif grade >= 0.0:\n            grade_list.append('D-')\n        else:\n            grade_list.append('E')\n    return grade_list\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    def letter_grade(grade):\n        \"\"\"This function is used to output the letter grade.\n        \n        :param grade: the grade for the student to be graded\n        :return: the letter grade\n        \"\"\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    gpa_to_letter_grade = {}\n    for grade in grades:\n        if grade > 4.0:\n            gpa_to_letter_grade[grade] = 'A+'\n        elif grade > 3.7:\n            gpa_to_letter_grade[grade] = 'A'\n        elif grade > 3.3:\n            gpa_to_letter_grade[grade] = 'B'\n        elif grade > 3.0:\n            gpa_to_letter_grade[grade] = 'B-'\n        elif grade > 2.7:\n            gpa_to_letter_grade[grade] = 'C'\n        elif grade > 2.3:\n            gpa_to_letter_grade[grade] = 'C-'\n        elif grade > 2.0:\n            gpa_to_letter_grade[grade] = 'C+'\n        elif grade > 1.7:\n            gpa_to_letter_grade[grade] = 'C'\n        elif grade > 1.3:\n            gpa_to_letter_grade[grade] = 'D'\n        elif grade > 1.0:\n            gpa_to_letter_grade[grade] = 'D-'\n        elif grade < 0.7:\n            gpa_to_letter_grade[grade] = 'E'\n        else:\n            gpa_to_letter_grade[grade] = 'E-'\n    return gpa_to_letter_grade\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Initialize a result list\n    letter_grades = []\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def letter_grade(a, b, c, d, e, f):\n        if a > b:\n            return 'B'\n        elif a > c:\n            return 'C'\n        elif a > d:\n            return 'D'\n        elif a > e:\n            return 'E'\n        else:\n            return 'F'\n    if grades[0] > grades[1]:\n        return 'F'\n    if grades[0] > grades[2]:\n        return 'A'\n    if grades[0] > grades[3]:\n        return 'B'\n    if grades[1] > grades[2]:\n        return 'A'\n    if grades[1] > grades[3]:\n        return 'B'\n    if grades[2] > grades[3]:\n        return 'A'\n    if grades[2] > grades[1]:\n        return 'B'\n    return ['A', 'C', 'D', 'E', 'F']\n    \ndef decimal_to_fraction(decimal):\n    \"\"\"For a decimal number, the first two digits are divided into the number of\n    decimal places.\n    If the number is too high, the decimal is represented in a fraction, for example\n    22/7: 2.33333333333.\n    Example:\n    decimal_to_fraction(22/7) ==> '22.33333333333'\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Base case:\n    if len(grades) == 0:\n        return []\n    # for a list of grades, there are the numbers of the list\n    # so in each list, check if it contains a number\n    # if yes: return it\n    # if not, append it to the list, and return it\n    for grade in grades:\n        if isinstance(grade, (int, float)):\n            # if it is a number, return it\n            if isinstance(grade, int):\n                return [grade]\n            # if it is not a number, return it\n            else:\n                return grades\n    # return list of numbers\n    return grades\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    new_list = []\n    for i in range(len(grades)):\n        if grades[i] >= 4.0:\n            new_list.append('A+')\n        elif grades[i] >= 3.5:\n            new_list.append('A')\n        elif grades[i] >= 3.0:\n            new_list.append('B')\n        elif grades[i] >= 2.7:\n            new_list.append('B-')\n        elif grades[i] >= 2.3:\n            new_list.append('C+')\n        elif grades[i] >= 2.0:\n            new_list.append('C')\n        elif grades[i] >= 1.7:\n            new_list.append('C-')\n        elif grades[i] >= 1.3:\n            new_list.append('D+')\n        elif grades[i] >= 1.0:\n            new_list.append('D')\n        elif grades[i] >= 0.7:\n            new_list.append('D-')\n        else:\n            new_list.append('E')\n    return new_list\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Copy the grades list.\n    grade_list = grades.copy()\n    # Loop through the list to get the letter grade.\n    for letter in grade_list:\n        if letter > 4.0:\n            grade_list.remove(letter)\n            grade_list.append('A+')\n        elif letter > 3.7:\n            grade_list.remove(letter)\n            grade_list.append('A')\n        elif letter > 3.3:\n            grade_list.remove(letter)\n            grade_list.append('B+')\n        elif letter > 3.0:\n            grade_list.remove(letter)\n            grade_list.append('B')\n        elif letter > 2.7:\n            grade_list.remove(letter)\n            grade_list.append('B')\n        elif letter > 2.3:\n            grade_list.remove(letter)\n            grade_list.append('C+')\n        elif letter > 2.0:\n            grade_list.remove(letter)\n            grade_list.append('C')\n        elif letter > 1.7:\n            grade_list.remove(letter)\n            grade_list.append('C')\n        elif letter > 1.3:\n            grade_list.remove(letter)\n            grade_list.append('D+')\n        elif letter > 1.0:\n            grade_list.remove(letter)\n            grade_list.append('D')\n        elif letter > 0.7:\n            grade_list.remove(letter)\n            grade_list.append('D')\n        elif letter > 0.0:\n            grade_list.remove(letter)\n            grade_list.append('D-')\n    # Return the list of letters.\n    return grade_list\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    gpa_list = []\n    for i in range(len(grades)):\n        if grades[i] > 4.0:\n            gpa_list.append('A+')\n        elif grades[i] > 3.7:\n            gpa_list.append('A')\n        elif grades[i] > 3.3:\n            gpa_list.append('A-')\n        elif grades[i] > 3.0:\n            gpa_list.append('B+')\n        elif grades[i] > 2.7:\n            gpa_list.append('B')\n        elif grades[i] > 2.3:\n            gpa_list.append('B-')\n        elif grades[i] > 2.0:\n            gpa_list.append('C+')\n        elif grades[i] > 1.7:\n            gpa_list.append('C')\n        elif grades[i] > 1.3:\n            gpa_list.append('C-')\n        elif grades[i] > 1.0:\n            gpa_list.append('D+')\n        elif grades[i] > 0.7:\n            gpa_list.append('D')\n        elif grades[i] > 0.0:\n            gpa_list.append('D-')\n    return gpa_list\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(string) <= 1:\n        return True\n    else:\n        for i in range(2, len(string)):\n            if string[i] == string[i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    num = len(string)\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if string.isnumeric():\n        return True\n    if len(string) < 3:\n        return False\n    if string.isalpha():\n        return False\n    if string.isupper():\n        return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(string) == 1:\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for char in string:\n        if string.count(char) == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    counter = 0\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(string) == len(set(string))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(2,len(string)):\n        string = string.replace(string[i],\"\")\n        if len(string)==0 or len(string)>0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for num in range(2, len(string)):\n        for i in range(2, num):\n            if string[num] == string[i]:\n                return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return type(string)(string) in [str,'str'] and len(string) > 0\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    start_num = 0\n    end_num = 0\n    num = 1\n    while n!= 1:\n        if n % 10 == 1:\n            start_num += 1\n            n //= 10\n        else:\n            end_num += 1\n            n //= 10\n    return end_num - start_num\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 1:\n        return 0\n    \n    # We must avoid taking strings as inputs since n can be represented as\n    # 1, 2,..., n.\n    s = [str(i) for i in range(1, n+1)]\n    # Start with one.\n    start = 1\n    # For each digit in s, increment by the number of 1's in the previous\n    # digit.\n    for i in s[1:]:\n        start *= int(i)\n    # Now, take the remainder as the last digit, and increment by the\n    # number of 0's in the last digit.\n    end = 1\n    for i in s[:-1]:\n        end *= int(i)\n    return start + end\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \"\"\"\n    1 is the number of digits. \n    2 is the number of digits that are divisible by 2. \n    ...\n    n has a special case where n = 0. \n    \"\"\"\n    # Intitialization\n    count = 0\n    for i in range(2,n+1):\n        count = count + n%i\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n <= 0:\n        return 0\n    \n    curr = 0\n    for i in range(1, n+1):\n        if i == 1:\n            curr += 1\n        if i == n:\n            curr += 1\n    return curr\n    \ndef test(n):\n    print(starts_one_ends(n))\n    print(starts_one_ends(n, 3))\n    print(starts_one_ends(n, 1000000000))\n    print(starts_one_ends(3))\n    print(starts_one_ends(3, 4))\n    print(starts_one_ends(3, 1000000000))\n    print(starts_one_ends(1000000000000))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def get_nums_start_or_end(n):\n        return sum([2**i for i in range(n) if n-i>0])\n    count = 0\n    for i in range(1, n+1):\n        if get_nums_start_or_end(i)>1:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(2, n):\n        if i % 10 == 1:\n            count += 1\n        if i % 10 == 0:\n            count += i\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    num_ones = 0\n    for i in range(n+1):\n        if i == 1:\n            num_ones += 1\n        elif i == 0 or i % 10 == 0:\n            num_ones += 0\n    return num_ones\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum(1 for i in range(2, n) if n%i==0)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    start = 0\n    end = 2**(n-1) - 1\n    for i in range(start, end+1):\n        if i % 2 == 0:\n            return 2\n        else:\n            return 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l = [x for x in range(10)]\n    c = 0\n    for x in l:\n        if x == 1:\n            c += 1\n    if n == 1:\n        return c\n    else:\n        return c + starts_one_ends(n - 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def helper(num):\n        string = ''\n        while num > 0:\n            digit = num % 2\n            string = str(digit) + string\n            num //= 2\n        return string\n    # a list of binary numbers\n    l = [str(i) for i in range(2, N + 1)]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    def get_binary(n):\n        \"\"\"Given a number, return a string of its binary number.\n        \n        Example\n            The binary number of 5 is \"101\", the binary number of 6 is \"010\".\n        \n        Variables:\n            @n integer\n            Constraints: 0 \u2264 N \u2264 10000.\n        \n        Output:\n            a string of binary number\n        \"\"\"\n        if n == 0:\n            return \"\"\n        return str(bin(n)[2:])\n    \n    def sum_digits(n):\n        \"\"\"Given a number, return the sum of its digits.\n        \n        Example\n            The sum of digits is 0 + 1 + 2 = 3.\n        \n        Variables:\n            @n integer\n            Constraints: 0 \u2264 N \u2264 10000.\n        \n        Output:\n            a string of binary number\n        \"\"\"\n        result = 0\n        while n!= 0:\n            result = (result * 10) + n % 10\n            n = n // 10\n        \n        return str(result)\n        \n    def get_sum(n):\n        \"\"\"Given a number, return the total sum of its digits.\n        \n        Example\n            The total sum of digits is 1 + 2 + 3 = 6.\n        \n        Variables:\n            @n integer\n            Constraints: 0 \u2264 N \u2264 10000.\n        \n        Output:\n            a string of binary number\n        \"\"\"\n        sum = 0\n        while n!= 0:\n            sum = sum + (get_binary(n % 10))\n            n = n // 10\n        \n        return str(sum)\n        \n    def count_digits(n):\n        \"\"\"Given a number, return the count of its digits.\n        \n        Example\n            The count of digits is 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.\n        \n        Variables:\n            @n integer\n            Constraints: 0 \u2264 N \u2264 10000.\n        \n        Output:\n            a string of binary number\n        \"\"\"\n        n = str(n)\n        count = 0\n        for i in n:\n            count = count + (get_binary(int(i)))\n        \n        return str(count)\n        \n    def get_count(n):\n        \"\"\"Given a number, return the total count of its digits.\n        \n        Example\n            The total count of digits is 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.\n        \n        Variables:\n            @n integer\n            Constraints: 0 \u2264 N \u2264 10000.\n        \n        Output:\n            a string of binary number\n        \"\"\"\n        result = 0\n        while n!= 0:\n            result = (result + 1) * get_binary(n % 10)\n            n = n // 10\n        \n        return str(result)\n        \n    def get_sum_of_digits(n):\n        \"\"\"Given a number, return the total sum of its digits.\n        \n        Example\n            The total sum of digits is 0 + 1 + 2 = 3.\n        \n        Variables:\n            @n integer\n            Constraints: 0 \u2264 N \u2264 10000.\n        \n        Output:\n            a string of binary number\n        \"\"\"\n        sum = 0\n        while n!= 0:\n            sum = sum + (get_binary(n % 10))\n            n = n // 10\n        \n        return str(sum)\n        \n    def get_count_of_digits(n):\n        \"\"\"Given a number, return the total count of its digits.\n        \n        Example\n            The total count of digits is 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.\n        \n        Variables:\n            @n integer\n            Constraints: 0 \u2264 N \u2264 10000.\n        \n        Output:\n            a string of binary number\n        \"\"\"\n        result = 0\n        while n!= 0:\n            result = (result + 1) * count_digits(n % 10)\n            n = n // 10\n        \n        return str(result)\n        \n    def get_sum_of_digits_of_all_digits(n):\n        \"\"\"Given a number, return the total sum of its digits.\n        \n        Example\n            The total sum of digits is 0 + 1 + 2 = 3.\n        \n        Variables:\n            @n integer\n            Constraints: 0 \u2264 N "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Test Case:\n    # N = 1000\n    # a = 0\n    # Sum = 1\n    # d = 1\n    # Sum = 1\n    # d = 1\n    # Sum = 1\n    # d = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum = 1\n    # Sum "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if N == 0:\n        return 0\n    if N < 10:\n        return N\n    binary = bin(N)[2:]\n    return solve(len(binary)) + sum(binary)\n    # explanation: https://stackoverflow.com/questions/58761957/how-to-print-binary-number-of-digits-given-a-positive-integer"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = bin(N)[2:]\n    s = s.replace(\"1\",\"\")\n    return s\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = ''\n    while N:\n        sum = 0\n        while N:\n            # print(f\"sum: {N}\")\n            if N & 1:\n                # print(f\"sum: {sum}\")\n                sum += int(str(N)[-1])\n            N //= 10\n        N = sum\n        # print(f\"sum: {sum}\")\n        if sum!= 0:\n            result += str(sum)\n    return result\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if N == 1:\n        return \"1\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Hard code the 2^N numbers\n    # The sum of digits = 2^N\n    # d = 2^(N - 1)\n    # @N integer\n    # @string\n    # return string\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    A = [int(i) for i in str(N)]\n    return sum(A)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    new_lst = []\n    if len(lst) % 2 == 0:\n        for i in range(0, len(lst), 2):\n            new_lst.append(lst[i])\n    else:\n        for i in range(len(lst) - 2, -1, -2):\n            new_lst.append(lst[i])\n    return new_lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) <= 0:\n        return lst\n    else:\n        even_list = []\n        odd_list = []\n        for i in range(0, len(lst), 2):\n            if i % 2 == 0:\n                even_list.append(lst[i])\n            else:\n                odd_list.append(lst[i])\n        return add(even_list) + odd_list\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(lst)):\n        if i%2 == 1:\n            lst.append(lst[i])\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    evens = []\n    odds = []\n    \n    for i in lst:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    \n    return evens + odds\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst.sort()\n    n=len(lst)\n    m=0\n    while m<=n:\n        if m%2==0:\n            lst.append(lst[m])\n            m+=1\n        else:\n            lst.insert(m,lst[m-1])\n            m+=1\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst = sorted(lst)\n    i = 0\n    j = 0\n    answer = 0\n    while i < len(lst):\n        if i % 2 == 1:\n            answer += lst[i]\n            i += 1\n        elif i % 2 == 0:\n            answer += lst[j]\n            j += 1\n            if j == len(lst) - 1:\n                j = 0\n        else:\n            j += 1\n    return answer\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # define the initial list\n    even = []\n    odd = []\n    # copy the original list\n    lst = copy(lst)\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    return even + odd\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst = sorted(lst)\n    odd = 0\n    even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even += lst[i]\n        else:\n            odd += lst[i]\n    return even + odd\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    evens = []\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst.append(lst[i])\n    return lst\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    ans = ''.join(s.split(' '))\n    for i in range(len(ans)):\n        ans = ans.replace(ans[i], chr(ord(ans[i]) - ord('a') + 96))\n    return ans\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    letters = []\n    for c in s:\n        if c in ascii_lowercase:\n            letters.append(c)\n    new_s = ''.join(letters)\n    return new_s\n    \ndef main():\n    print(\"\\n! @DiagnosisTutor: No one can know your word, so you must keep it.\\n\")\n    print(\"We do this because our vocabulary is *usually* lowercase.\")\n    print(\"It's easy to fix, but, it's not easy enough to do so for me to teach.\")\n    print(\"What can you do for yourself?\\n\")\n    print(\"1. Always show the word in lower case.\\n\")\n    print(\"2. Avoid all the words in the vocabulary in lower case.\\n\")\n    print(\"3. Delete the words from the vocabulary.\\n\")\n    print(\"4. Replace the words from the vocabulary with others.\\n\")\n    print(\"5. Print all the words in the vocabulary.\\n\")\n    print(\"6. Print the spelling correction.\\n\")\n    print(\"7. Print the most common word in the vocabulary.\\n\")\n    print(\"8. Print the frequency of words in the vocabulary.\\n\")\n    print(\"9. Search for a word in the vocabulary.\\n\")\n    print(\"10. Replace all the words with the correct spelling.\\n\")\n    print(\"11. Print the most common word in the vocabulary.\\n\")\n    print(\"12. Print the spelling correction for a word.\\n\")\n    print(\"13. Print the frequency of words in the vocabulary.\\n\")\n    print(\"14. Take a letter from the keyboard.\\n\")\n    print(\"15. Print the most common word in the vocabulary.\\n\")\n    print(\"16. Print the frequency of words in the vocabulary.\\n\")\n    print(\"17. Delete the word from the vocabulary.\\n\")\n    print(\"18. Print the spelling correction for a word.\\n\")\n    print(\"19. Take a letter from the keyboard.\\n\")\n    print(\"20. Print the most common word in the vocabulary.\\n\")\n    print(\"21. Print the frequency of words in the vocabulary.\\n\")\n    print(\"22. Search for a word in the vocabulary.\\n\")\n    print(\"23. Replace all the words from the vocabulary with others.\\n\")\n    print(\"24. Print the most common word in the vocabulary.\\n\")\n    print(\"25. Print the spelling correction for a word.\\n\")\n    print(\"26. Print the frequency of words in the vocabulary.\\n\")\n    print(\"27. Take a letter from the keyboard.\\n\")\n    print(\"28. Print the most common word in the vocabulary.\\n\")\n    print(\"29. Print the frequency of words in the vocabulary.\\n\")\n    print(\"30. Replace all the words from the vocabulary with others.\\n\")\n    print(\"31. Print the most common word in the vocabulary.\\n\")\n    print(\"32. Print the frequency of words in the vocabulary.\\n\")\n    print(\"33. Delete the word from the vocabulary.\\n\")\n    print(\"34. Print the spelling correction for a word.\\n\")\n    print(\"35. Take a letter from the keyboard.\\n\")\n    print(\"36. Print the most common word in the vocabulary.\\n\")\n    print(\"37. Print the frequency of words in the vocabulary.\\n\")\n    print(\"38. Search for a word in the vocabulary.\\n\")\n    print(\"39. Replace all the words from the vocabulary with others.\\n\")\n    print(\"40. Print the most common word in the vocabulary.\\n\")\n    print(\"41. Print the frequency of words in the vocabulary.\\n\")\n    print(\"42. Take a letter from the keyboard.\\n\")\n    print(\"43. Print the most common word in the vocabulary.\\n\")\n    print(\"44. Print the frequency of words in the vocabulary.\\n\")\n    print(\"45. Replace all the words from the vocabulary with others.\\n\")\n    print(\"46. Print the most common word in the vocabulary.\\n\")\n    print(\"47. Print the frequency of words in the vocabulary.\\n\")\n    print(\"48. Take a letter from the keyboard.\\n\")\n    print(\"49. Print the most common word in the vocabulary.\\n\")\n    print(\"50. Print the frequency of words in the vocabulary.\\n\")\n    print(\"51. Take "
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(s) == 0:\n        return ''\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    new_str = ''\n    for i in range(len(s)):\n        new_str += s[i]\n        if len(new_str) % 4 == 0:\n            new_str = new_str.upper()\n    new_str = new_str.replace(' ','')\n    new_str = new_str.replace('.','')\n    new_str = new_str.replace('?','?')\n    new_str = new_str.replace('!','!')\n    new_str = new_str.replace('?','?')\n    new_str = new_str.replace(',',' ')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('?','?.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('?','?')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('?','?')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('?','?.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('?','?')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('?','?.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('?','?.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('?','?.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('?','?.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('?','?.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('?','?.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('?','?.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('?','?.')\n    new_str = new_str.replace('.','.')\n    new_str = new_str.replace('!','!.')\n    new_str = new_str.replace('.','.')\n    new"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = s.lower()\n    s = s.split(' ')\n    #print(s)\n    return ''.join(sorted(s,key=str.lower))\n    \ndef print_s_s(s):\n    \"\"\"\n    Write a function that takes a string and prints it to\n    both the console and the terminal.\n    Note: You should not use any built-in functions or methods from\n    str, as those are not available in Python.\n    \"\"\"\n    for char in s:\n        print(char,end='')\n    print()\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    #initialize an empty string\n    s = s.strip()\n    #Initialize a string of space, for example'\" '\n    s_space = \" \"\n    #initialize a list to store all the characters in string\n    char_list = list(s)\n    #create an empty list to store the new string\n    ans = []\n    #create a counter to store the index of the current character\n    counter = 0\n    #initialize the counter variable\n    i = 0\n    #for each character in the string\n    while i < len(s):\n        #Check if the current character is at the beginning of the string\n        if s[i] in s_space:\n            #Add the space to the end of the current string,\n            #otherwise add the character to the end of the string\n            ans.append(s[i])\n        else:\n            #Add the current character to the end of the string\n            #to the end of the current string\n            ans.append(s[counter])\n            #increment the counter\n            counter += 1\n        #Check if the current character is a new line\n        if i + 1 == len(s) or s[i + 1] == '\\n':\n            #check if the current character is a new line\n            if counter == len(s) - 1:\n                #add the new line character\n                ans.append(s_space)\n            else:\n                #add the current character to the end of the string\n                ans.append(s[i + 1])\n        #Decrement the counter\n        counter -= 1\n        #increment the index by one\n        i += 1\n    #print the resulting string\n    return \"\".join(ans)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = \"\"\n    for i in range(len(s)):\n        result += s[i]\n        if i < len(s)-1:\n            result += \" \"\n    return result\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \" \".join(sorted(list(set(s))))"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # return ''.join(sorted(s.split()))\n    s = re.sub(r'[^a-zA-Z0-9\\s]','', s)\n    s = s.lower()\n    s = ''.join(s.split())\n    return "
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return s.translate(str.maketrans('', '', '()[]{};:\"\\',<>/'))\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            if lst[i][j] == x:\n                return [(j, i)]\n    return [(x, x)]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if x not in lst: return []\n    for i in range(len(lst)):\n        if lst[i][x] in lst[i]:\n            lst[i].remove(lst[i][x])\n        elif lst[i][x] == 0:\n            lst[i].remove(0)\n    return sorted(lst, key=lambda x: (x[0], x[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if x not in lst:\n        return []\n    else:\n        return [(x, i) for i, x in enumerate(lst[x])]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # your code here\n    lst = sorted(lst, key = lambda x: x[0])\n    if x == 0:\n        return []\n    else:\n        return get_row(lst[1:], x-1) + [(lst[0][i], lst[1][i]) for i in range(x)] + get_row(lst[1:], x)\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if x > len(lst) or x < 0:\n        return None\n    #raise NotImplementedError\n    return sorted([(x, y) for y, x in enumerate(lst) if x == x[0]])\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    row = []\n    for xs in lst:\n        if len(xs)!= x:\n            return []\n        else:\n            row.extend(list(map(lambda x: (x[x[0]-1], x[1]), xs)))\n    row.sort()\n    return row\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst = sorted(lst, key=lambda x: x[x.index(x[0])])\n    return [(x[x.index(x[0])], x.index(x[0]) + 1) for x in lst]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    lst.sort(key = lambda x: x[0])\n    lst.sort(key = lambda x: x[1])\n    return lst\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst.sort(key=lambda x: x[0])\n    if x < len(lst):\n        return [(x[0], x[1]) for x in lst]\n    return []\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sorted(list(zip(lst[x][::-1], lst[x][1:])))\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sorted_array = sorted(array)\n    if (sorted_array[-1] % 2!= 0):\n        for i in range(0, len(sorted_array) - 1):\n            if sorted_array[i] == 0:\n                sorted_array[i], sorted_array[i + 1] = sorted_array[i + 1], sorted_array[i]\n            if sorted_array[i] % 2 == 0:\n                sorted_array[i], sorted_array[i + 1] = sorted_array[i + 1], sorted_array[i]\n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not array:\n        return array\n    if len(array) == 1:\n        return array\n    first_index = 0\n    last_index = len(array) - 1\n    while first_index < last_index:\n        sum_of_elements = 0\n        sum_of_elements += array[first_index]\n        sum_of_elements += array[last_index]\n        if sum_of_elements % 2 == 0:\n            temp_index = first_index\n            while temp_index < last_index:\n                array[temp_index] += array[first_index]\n                array[temp_index] += array[last_index]\n                temp_index += 1\n        else:\n            temp_index = last_index\n            while temp_index > first_index:\n                array[temp_index] += array[first_index]\n                array[temp_index] += array[last_index]\n                temp_index -= 1\n        first_index += 1\n        last_index -= 1\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(array) == 0:\n        return array\n    \n    array.sort()\n    index = 0\n    sorted_array = []\n    \n    for i in range(len(array)):\n        if index % 2!= 0:\n            sorted_array.append(array[i])\n        else:\n            sorted_array.append(array[i] + array[i])\n        index += 1\n        \n    if sorted(sorted_array)!= sorted(array):\n        return sort_array(sorted_array)\n    \n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(array) == 0: return array\n    arr = sorted(array)\n    return arr\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    array_sum = sum(array)\n    if array_sum % 2 == 1:\n        return sorted(array, reverse=True)\n    return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    num_sum = 0\n    array.sort()\n    for num in array:\n        num_sum += num\n    if num_sum % 2!= 0:\n        return [num for num in array]\n    else:\n        return [num for num in array[::-1]]\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    array = copy.deepcopy(array)\n    \n    def sort(array):\n        \"\"\"\n        1. sort the array, the sum( first index value, last index value) is odd,\n        2. sort the array, the sum( first index value, last index value) is even.\n        3. sort the array, the sum( first index value, last index value) is odd.\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # sort the array with an algorithm\n    array = sorted(array, reverse = True)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sorted(array, key=lambda x: x)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sorted_array = []\n    even_sum = 0\n    for index, value in enumerate(array):\n        if even_sum % 2!= 0:\n            sorted_array.append(value)\n            even_sum += value\n        else:\n            sorted_array.append(value)\n            sorted_array.append(0)\n            if sum(sorted_array[:index]) % 2 == 0:\n                sorted_array.pop(index)\n                sorted_array.pop(index)\n            else:\n                sorted_array.pop(index)\n                sorted_array.pop(index)\n    return sorted_array\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Initialize new list to append to\n    new_list = []\n    # Create a list to loop through\n    for i in range(len(s)):\n        # Add the letter to the new list\n        new_list.append(s[i])\n        # Add letter to the new list\n        new_list.append(s[i])\n    # Return new list\n    return \"\".join(new_list)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #Write your code here\n    if len(s) < 2:\n        return s\n    x = s[0]\n    y = s[1]\n    encrypted_string = \"\"\n    for i in range(len(s)):\n        encrypted_string += chr((ord(y) - ord(x) + 2) % 26 + ord('a'))\n    return encrypted_string\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join([chr(ord(a) + 2) if a in alphabet else a for a in s])\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        c = ord(s[i])\n        if i % 2 == 0:\n            if c == 122:\n                s[i] = 'z'\n            elif c == 97:\n                s[i] = 'a'\n            elif c == 90:\n                s[i] = 'b'\n        else:\n            if c == 122:\n                s[i] = 'q'\n            elif c == 97:\n                s[i] = 'z'\n            elif c == 90:\n                s[i] = 'a'\n    return ''.join(s)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    encrypted_string = ''\n    for char in s:\n        if char in alphabet:\n            char_pos = alphabet.index(char)\n            encrypted_string += alphabet[(char_pos + 2) % len(alphabet)]\n        else:\n            encrypted_string += char\n    \n    return encrypted_string\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #Your code here\n    string = s.lower()\n    alph = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    cipher = ''\n    for letter in string:\n        if letter in alph:\n            index = alph.index(letter)\n            if index == 0:\n                cipher = cipher + alph[(index + 2) % 26]\n            else:\n                cipher = cipher + alph[(index - 2) % 26]\n        else:\n            cipher = cipher + letter\n    return cipher\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    result = ''\n    for char in s:\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            result += char + '-'\n        else:\n            result += char\n    return result[::-1].upper()\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    encrypted_string = \"\"\n    for i in s:\n        alphabet = string.ascii_lowercase\n        i = alphabet.index(i)\n        # if i == 0:\n        #     encrypted_string += alphabet[i - 1]\n        encrypted_string += alphabet[i]\n    return encrypted_string\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if type(s) is not str:\n        raise TypeError(\"s must be a string\")\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if type(s) is not str: \n        raise TypeError('s must be a string')\n    s = s.lower()\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    # Create a dictionary for the ciphertext\n    encrypt_dict = {}\n    for char in alphabet:\n        if char not in encrypt_dict:\n            encrypt_dict[char] = 0\n        encrypt_dict[char] = encrypt_dict[char] + 1\n    # Create a list of the encrypted characters\n    encrypted_list = []\n    for char in s:\n        if char not in encrypt_dict:\n            encrypted_list.append(char)\n        else:\n            encrypted_list.append(alphabet[encrypt_dict[char] - 2])\n    # Return the encrypted string\n    return ''.join(encrypted_list)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not lst:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        if lst[0] < lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\n    if len(lst) == 3:\n        if lst[0] < lst[1] < lst[2]:\n            return lst[0]\n        elif lst[0] < lst[2] < lst[1]:\n            return lst[0]\n        elif lst[0] < lst[2] < lst[1] < lst[3]:\n            return lst[1]\n        elif lst[0] < lst[2] < lst[1] < lst[3]:\n            return lst[2]\n        else:\n            return lst[3]\n    if len(lst) == 4:\n        if lst[0] < lst[1] < lst[2] < lst[3]:\n            return lst[0]\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4]:\n            return lst[1]\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5]:\n            return lst[2]\n        elif lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5]:\n            return lst[3]\n        else:\n            return lst[4]\n    \ndef next_greatest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_greatest() that returns the 3rd largest element of the list.\n    Return None if there is no such element.\n    \n    next_greatest([1, 2, 3, 4, 5]) == 5\n    next_greatest([1, 2, 3, 4, 5]) == 3\n    next_greatest([1, 2, 3, 4, 5]) == 2\n    \"\"\"\n    if not lst:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\n    if len(lst) == 3:\n        if lst[0] > lst[1] > lst[2]:\n            return lst[0]\n        elif lst[0] > lst[1] > lst[2] > lst[3]:\n            return lst[1]\n        elif lst[0] > lst[1] > lst[2] > lst[3] > lst[4]:\n            return lst[2]\n        else:\n            return lst[3]\n    if len(lst) == 4:\n        if lst[0] > lst[1] > lst[2] > lst[3]:\n            return lst[0]\n        elif lst[0] > lst[1] > lst[2] > lst[3] > lst[4]:\n            return lst[1]\n        elif lst[0] > lst[1] > lst[2] > lst[3] > lst[4] > lst[5]:\n            return lst[2]\n        else:\n            return lst[4]\n    if len(lst) == 5:\n        if lst[0] > lst[1] > lst[2] > lst[3] > lst[4] > lst[5]:\n            return lst[0]\n        elif lst[0] > lst[1] > lst[2] > lst[3] > lst[4] > lst[5] > lst[6]:\n            return lst[1]\n        elif lst[0] > lst[1] > lst[2] > lst[3] > lst["
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not lst:\n        return None\n    i = 0\n    while i < len(lst)-1 and lst[i] < lst[i+1]:\n        i += 1\n    return lst[i]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # if there is no next smallest element, return None\n    if len(lst) == 1:\n        return lst[0]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def helper(lst, end):\n        if end == len(lst):\n            return None\n        if lst[end] < lst[end-1]:\n            return end+1\n        return helper(lst, end+1)\n    return helper(lst, 0)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    lst.sort()\n    i = 0\n    for i in range(len(lst)):\n        if lst[i] < lst[i+1]:\n            return lst[i+1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # find the 2nd smallest\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[j] < lst[i]:\n                lst[j], lst[i] = lst[i], lst[j]\n    \n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if smallest > lst[i]:\n            smallest = lst[i]\n    return smallest\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(len(lst)):\n        if i < len(lst) - 1:\n            if lst[i] < lst[i + 1]:\n                lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst[0]\n    "
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sorted(lst)[1]\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    boredom = 0\n    bored = []\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for word in S.split('.'):\n        if word[0] == '?':\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    boredom_counter = 0\n    for word in S.split(\".\"):\n        if word.startswith(\"I\"):\n            boredom_counter += 1\n    return boredom_counter\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    word = S.lower()\n    boredoms = 0\n    for char in word:\n        if char == \".\":\n            boredoms += 1\n    return boredoms\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    #Hint: Remember to use.split()\n    \n    # HINT: You can use string.count(a,b)\n    return len([w for w in S.split() if S.count(w) > 1])\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for s in S:\n        if s == \".\":\n            count += 1\n        elif s == \"!\":\n            count += 2\n        elif s == \"?\":\n            count += 3\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    bored_words = set(find_bored_words(S))\n    return len(bored_words)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # The idea here is to count how many times a word starts with a \"I\", \n    # which occurs only once or twice, and have to count the number of \n    # time a word appears as a substring of a given string.\n    # O(N) is the time\n    # O(N) is the space\n    # For a given string, we have to find out how many times the word\n    # start with the \"I\" and return the count.\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # first, check if the string is empty\n    if len(S) == 0:\n        return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO\n    # Complete the function\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return x!= y or x == z or y == z\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def check_int(x, y, z):\n        '''\n        returns a boolean value indicating if the values are equal to the sum of the two values.\n        '''\n        if (x == y == z):\n            return True\n        else:\n            return False\n    def check_float(x, y, z):\n        '''\n        returns a boolean value indicating if the values are equal to the sum of the two values.\n        '''\n        if (x == y == z):\n            return True\n        else:\n            return False\n    def check_bool(x, y, z):\n        '''\n        returns a boolean value indicating if the values are equal to the sum of the two values.\n        '''\n        if (x == y == z):\n            return True\n        else:\n            return False\n    \n    if (check_int(x, y, z) == True):\n        return True\n    elif (check_float(x, y, z) == True):\n        return True\n    elif (check_bool(x, y, z) == True):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if (x is None) or (y is None) or (z is None):\n        return (False)\n    if (x is not None) and (y is not None) and (z is not None):\n        return (all(map(lambda x, y, z: type(x) == type(y), [x, y, z])))\n    else:\n        return (False)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return any(x == y for y in range(z)) or any(x == y for x in range(z, x - 1, -1))\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a = (x + y + z) - x - y - z\n    if a % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return False if x == y and z == 1 else True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return x==y+z or x==y-z or x==y*z or x==y/z or x==y%z or x==y//z or x==y**z or x==y**2 or x==y**3 or x==y**4\n    "
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if x > 0 and y > 0 and z > 0:\n        if x+y+z == int(x+y+z):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if type(x) == int or type(x) == float:\n        return type(x) == int and type(y) == int and type(z) == int\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if x>y:\n        x,y=y,x\n    if x>z:\n        x,z=z,x\n    if y>z:\n        y,z=z,y\n    return x==y==z\ndef sort_nums(x,y,z):\n    '''\n    Create a function that takes a 3 numbers as arguments and returns a list.\n    An empty list represents an empty list.\n    \n    Examples\n    sort_nums(5, 7, 3) \u279e [3, 5, 7]\n    \n    sort_nums(3, 7, 5) \u279e [5, 7, 3]\n    \n    sort_nums(5, 5, 3) \u279e [3, 5, 3]\n    \n    sort_nums(1, 2, 3) \u279e []\n    '''\n    if not any_int(x,y,z):\n        return []\n    else:\n        return sorted([x,y,z])\ndef sort_nums_rev(x,y,z):\n    '''\n    Create a function that takes a 3 numbers as arguments and returns a list.\n    An empty list represents an empty list.\n    \n    Examples\n    sort_nums_rev(5, 7, 3) \u279e [3, 5, 7]\n    \n    sort_nums_rev(3, 7, 5) \u279e [5, 7, 3]\n    \n    sort_nums_rev(5, 5, 3) \u279e [3, 5, 3]\n    \n    sort_nums_rev(1, 2, 3) \u279e []\n    '''\n    if not any_int(x,y,z):\n        return []\n    else:\n        return sorted([z,z,x])\ndef is_int_in_list(x, y, z):\n    '''\n    Create a function that takes a 3 numbers as arguments and returns a boolean.\n    An empty list represents an empty list.\n    \n    Examples\n    is_int_in_list(5, 7, 3) \u279e True\n    \n    is_int_in_list(3, 7, 5) \u279e False\n    \n    is_int_in_list(5, 5, 3) \u279e True\n    \n    is_int_in_list(1, 2, 3) \u279e False\n    '''\n    if not any_int(x,y,z):\n        return None\n    else:\n        return x==y==z\ndef reverse_string(x):\n    '''\n    Create a function that takes a string as a parameter and returns the reverse of the string.\n    An empty string represents an empty string.\n    \n    Examples\n    reverse_string('hello') \u279e 'ohello'\n    \n    reverse_string('python') \u279e 'pythontwo'\n    \n    reverse_string('pythontwo') \u279e 'pytho'\n    \n    reverse_string('python') \u279e ''\n    \n    '''\n    if not any_int(x):\n        return None\n    else:\n        return x[::-1]\ndef is_string_in_list(x, y, z):\n    '''\n    Create a function that takes a 3 numbers as arguments and returns a boolean.\n    An empty list represents an empty list.\n    \n    Examples\n    is_string_in_list(5, 7, 3) \u279e True\n    \n    is_string_in_list(3, 7, 5) \u279e False\n    \n    is_string_in_list(5, 5, 3) \u279e True\n    \n    is_string_in_list(1, 2, 3) \u279e False\n    '''\n    if not any_int(x,y,z):\n        return None\n    else:\n        return x==y==z\ndef is_string_in_list_rev(x, y, z):\n    '''\n    Create a function that takes a 3 numbers as arguments and returns a boolean.\n    An empty list represents an empty list.\n    \n    Examples\n    is_string_in_list_rev(5, 7, 3) \u279e True\n    \n    is_string_in_list_rev(3, 7, 5) \u279e False\n    \n    is_string"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Write your solution here\n    message = message.lower()\n    message = message.replace('a', 'A').replace('e', 'E').replace('i', 'I').replace('o', 'O').replace('u', 'U')\n    message = message.replace('u', 'U').replace('v', 'V').replace('r', 'R').replace('t', 'T').replace('y', 'Y').replace('w', 'W').replace('f', 'F').replace('g', 'G').replace('d', 'D').replace('k', 'K')\n    message = message.replace('l', 'L').replace('n', 'N').replace('b', 'B').replace('m', 'M').replace('p', 'P').replace('h', 'H').replace('g', 'G').replace('z', 'Z').replace('q', 'Q').replace('s', 'S').replace('f', 'F').replace('d', 'D').replace('r', 'R')\n    message = message.replace('h', 'H').replace('j', 'J').replace('l', 'L').replace('o', 'O').replace('k', 'K').replace('z', 'Z').replace('s', 'S').replace('p', 'P').replace('c', 'C').replace('m', 'M').replace('r', 'R')\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return ''.join([letter if letter.isupper() else letter.lower() for letter in message.lower()])\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # normalization\n    message = normalize(message)\n    \n    # get frequencies\n    freqs = frequencies(message)\n    \n    # get dictionary of the frequency\n    dictionary = {}\n    for key in freqs:\n        dictionary[key] = freqs[key]\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: Write your function here.\n    # HINT: You can convert the message to uppercase.\n    message = message.upper()\n    vowels = ['a','e','i','o','u']\n    for index,letter in enumerate(message):\n        if letter in vowels:\n            message = message.replace(letter, 'V', 1)\n            message = message.replace(letter, 'V', 2)\n            message = message.replace(letter, 'V', 3)\n            message = message.replace(letter, 'V', 4)\n            message = message.replace(letter, 'V', 5)\n            message = message.replace(letter, 'V', 6)\n            message = message.replace(letter, 'V', 7)\n            message = message.replace(letter, 'V', 8)\n            message = message.replace(letter, 'V', 9)\n        else:\n            message = message.replace(letter, 'V', index+1)\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import string\n    # List of all letters of the english alphabet\n    alphabet = string.ascii_lowercase\n    # Use a set of the letters in the alphabet\n    vowels = set(string.ascii_lowercase)\n    # Create a dictionary with the word as key and the count of the \n    # letters as the value\n    word_count = {}\n    # Loop over the message to get all vowels\n    for letter in message:\n        # If there are any letters in the alphabet that aren't \n        # in the dictionary then it is not a vowel.\n        if letter not in vowels:\n            # If there are no more than 2 vowels in the message\n            # then it is a message that has been encrypted\n            if len(word_count) >= 2:\n                # Add the letter that appears at the \n                # end of the word to the dictionary\n                word_count[letter] += word_count.get(letter, 0)\n            # Add the letter to the dictionary\n            else:\n                word_count[letter] = 1\n            # Add one to the count of all letters\n            word_count[letter] += 1\n            # If there are any vowels in the message then that letter\n            # will get a new entry in the dictionary\n            if letter in string.ascii_lowercase:\n                word_count[letter] += word_count.get(letter, 0)\n    # Now sort the dictionary by its count descending\n    word_count = dict(sorted(word_count.items(), key=lambda x: x[1], reverse=True))\n    # Now use the word_count dictionary to create the message\n    # using the repeated letter replacements\n    return \"\".join([word_count[letter] for letter in message])"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    message_as_list = message.split(' ')\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded = []\n    for word in message_as_list:\n        encoded_word = []\n        for letter in word:\n            if letter in vowels:\n                encoded_word.append(letter)\n            else:\n                encoded_word.append(letter.lower())\n        encoded.append(''.join(encoded_word))\n    return''.join(encoded)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    message = message.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    message = message.replace(' ','_')\n    message = message.replace('-', '_')\n    message = message.replace('!', '_')\n    message = message.replace('\"', '_')\n    message = message.replace(\"'\", '_')\n    message = message.replace(\"--\", '_')\n    message = message.replace(\"-\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"!\", '_')\n    message = message.replace(\".\", '_')\n    message = message.replace(\"$\", '_')\n    message = message.replace(\"%\", '_')\n    message = message.replace(\"&\", '_')\n    message = message.replace(\"*\", '_')\n    message = message.replace(\"(\", '_')\n    message = message.replace(\")\", '_')\n    message = message.replace(\"{\", '_')\n    message = message.replace(\"}\", '_')\n    message = message.replace(\"[\", '_')\n    message = message.replace(\"]\", '_')\n    message = message.replace(\"<\", '_')\n    message = message.replace(\">\", '_')\n    message = message.replace(\"+\", '_')\n    message = message.replace(\"=\", '_')\n    message = message.replace(\"!\", '_')\n    message = message.replace(\"*\", '_')\n    message = message.replace(\"^\", '_')\n    message = message.replace(\"%\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"&\", '_')\n    message = message.replace(\"*\", '_')\n    message = message.replace(\"$\", '_')\n    message = message.replace(\"%\", '_')\n    message = message.replace(\"&\", '_')\n    message = message.replace(\"*\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"!\", '_')\n    message = message.replace(\"'\", '_')\n    message = message.replace(\"(\", '_')\n    message = message.replace(\")\", '_')\n    message = message.replace(\"{\", '_')\n    message = message.replace(\"}\", '_')\n    message = message.replace(\"[\", '_')\n    message = message.replace(\"]\", '_')\n    message = message.replace(\"<\", '_')\n    message = message.replace(\">\", '_')\n    message = message.replace(\"+\", '_')\n    message = message.replace(\"=\", '_')\n    message = message.replace(\"+\", '_')\n    message = message.replace(\"+\", '_')\n    message = message.replace(\"=\", '_')\n    message = message.replace(\"=\", '_')\n    message = message.replace(\"!\", '_')\n    message = message.replace(\"-\", '_')\n    message = message.replace(\"%\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_')\n    message = message.replace(\"_\", '_'"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    letter_swap = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    message = message.upper()\n    message = message.replace('A', letter_swap[0])\n    message = message.replace('B', letter_swap[1])\n    message = message.replace('C', letter_swap[2])\n    message = message.replace('D', letter_swap[3])\n    message = message.replace('E', letter_swap[4])\n    message = message.replace('F', letter_swap[5])\n    message = message.replace('G', letter_swap[6])\n    message = message.replace('H', letter_swap[7])\n    message = message.replace('I', letter_swap[8])\n    message = message.replace('J', letter_swap[9])\n    message = message.replace('K', letter_swap[10])\n    message = message.replace('L', letter_swap[11])\n    message = message.replace('M', letter_swap[12])\n    message = message.replace('N', letter_swap[13])\n    message = message.replace('O', letter_swap[14])\n    message = message.replace('P', letter_swap[15])\n    message = message.replace('Q', letter_swap[16])\n    message = message.replace('R', letter_swap[17])\n    message = message.replace('S', letter_swap[18])\n    message = message.replace('T', letter_swap[19])\n    message = message.replace('U', letter_swap[20])\n    message = message.replace('V', letter_swap[21])\n    message = message.replace('W', letter_swap[22])\n    message = message.replace('X', letter_swap[23])\n    message = message.replace('Y', letter_swap[24])\n    message = message.replace('Z', letter_swap[25])\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join([i.swapcase() for i in message])\n    \ndef decode(message):\n    \"\"\"\n    Replaces the letter that appears 2 places after the vowel in the \n    english alphabet that were in the message. \n    \n    Examples:\n    >>> decode('TGST')\n    'thi'\n    >>> decode('This is a message')\n    'this'\n    \"\"\"\n    return ''.join([i.swapcase() for i in message])\n    \ndef letters_only(message):\n    \"\"\"\n    Return the letters in the message that don't have any vowels. \n    \n    Examples:\n    >>> letters_only('Test')\n    'th'\n    >>> letters_only('This is a message')\n    ''\n    \"\"\"\n    return [i for i in message if not i.isdigit()]\n    \ndef replace(message):\n    \"\"\"\n    Replace all vowels in the message with a special character. \n    \n    Examples:\n    >>> replace('ThiI thiIs a message')\n    'thI thI'\n    >>> replace('thiIs a message')\n    'thI thI'\n    \"\"\"\n    return ''.join([i.replace(i.upper(), 'THI') for i in message])\n    \ndef only_vowels(message):\n    \"\"\"\n    Return the message without any vowels.\n    \n    Examples:\n    >>> only_vowels('ThI thI')\n    'thI'\n    \"\"\"\n    return ''.join([i for i in message if not i.isdigit()])\n    \ndef every_other(message):\n    \"\"\"\n    Return a message, with every other vowel replaced with 'ThI thI'.\n    \n    Examples:\n    >>> every_other('ThI thI')\n    'thI thI'\n    \"\"\"\n    return ''.join([i for i in message if not i.isdigit()])\n    \ndef single_letter(message):\n    \"\"\"\n    Return a message, with only the first letter of each word replaced \n    with 'ThI thI'. \n    \n    Examples:\n    >>> single_letter('thI thI')\n    'thi thI'\n    \"\"\"\n    return ''.join([i.lower() for i in message if not i.isdigit()])\n    \ndef single_letter_only(message):\n    \"\"\"\n    Return a message, with only the first letter of each word replaced \n    with 'ThI thI'. \n    \n    Examples:\n    >>> single_letter_only('thI thI')\n    'thI thI'\n    \"\"\"\n    return ''.join([i.lower() for i in message if not i.isdigit()])\n    \ndef make_words(message):\n    \"\"\"\n    Return a dictionary containing all the words of the message.\n    \n    Examples:\n    >>> make_words('thI thI')\n    {'thI thI': 'I'}\n    \"\"\"\n    return {i.lower():i for i in message}\n    \ndef to_punctuation(message):\n    \"\"\"\n    Return a message, with all punctuation replaced with 'THI'.\n    \n    Examples:\n    >>> to_punctuation('ThI thI')\n    'thi thI'\n    \"\"\"\n    return ''.join([i.replace('.', ',') for i in message])\n    \ndef to_vowel_string(message):\n    \"\"\"\n    Return a string containing all the words of the message.\n    \n    Examples:\n    >>> to_vowel_string('thI thI')\n    'this'\n    \"\"\"\n    return ''.join([i.replace('.', ',') for i in message])\n    \ndef to_english(message):\n    \"\"\"\n    Return a message, with only the letters of all the words of the \n    message in the English alphabet. \n    \n    Examples:\n    >>> to_english('thI thI')\n    'this thI'\n    \"\"\"\n    return ''.join([i.lower() for i in message])\n    \ndef show_vowels(message):\n    \"\"\"\n    Return a message, with only the vowels of all the words of the \n    message in the English alphabet.\n    \n    Examples:\n    >>> show_vowels('thI thI')\n    '"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    message = message.replace(\"'\", \" \").replace(\" \", \"\").replace(\"'s\", \"s\").replace(\"'m\", \"M\").replace(\"'s\", \"S\").replace(\"'s\", \"S\")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"-\", \" \").replace(\"&\", \" \").replace(\"'\", \" \").replace(\"-\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"-\", \" \").replace(\"&\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")\n    message = message.replace(\"'\", \" \").replace(\"'\", \" \").replace(\"'\", \" \")"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    primes = list(filter(lambda x: x >= 2, lst))\n    primes.sort(reverse=True)\n    pivot = primes[0]\n    output = 0\n    for num in lst:\n        while num!= 0:\n            rem = num % 10\n            output += rem\n            num = num // 10\n        output += pivot\n    return output\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def get_prime(x):\n        \"\"\"returns the prime number.\n        x is the number.\n        \"\"\"\n        x = str(x)\n        x = x.split(' ')\n        x = set(x)\n        \n        x = list(x)\n        x.sort()\n        \n        for i in range(len(x)):\n            x[i] = int(x[i])\n        \n        x = set(x)\n        return sum(x)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #s=sum(lst)\n    s=0\n    for i in lst:\n        s+=i\n        \n    for i in range(s):\n        s = 0\n        #print(\"i=\",i)\n        for j in range(s):\n            if (lst[j]<0):\n                break\n            #print(\"j=\",j)\n            if(lst[j]<0):\n                break\n            else:\n                s = lst[j]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst = list(map(int, lst))\n    lst_n = [int(x) for x in lst]\n    result = 0\n    for i in lst_n:\n        if i == 1:\n            continue\n        result = max(result, i)\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #[0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n    #[1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\n    #[1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    #[0,724,32,71,99,32,6,0,5,91,83,0,5,6]\n    #[0,81,12,3,1,21]\n    #[0,8,1,2,1,7]\n    # [0,8,1,2,1,7]\n    # [0,8,1,2,1,7]\n    # [0,8,1,2,1,7]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Starting with the largest prime number in the list\n    x = max(lst)\n    # Returns the sum of the digits of x\n    return sum(map(int, str(x)))\n    # Multiplying and adding each number to the max\n    # Of the numbers in the list\n    # Returns the sum of the digits of the largest number\ndef iterative(lst):\n    \"\"\"iterative function returns the sum of the digits of the largest number in the list\n    Converts the list to an integer using the skjkasdkd function to make it an integer\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    primes = []\n    for i in range(2,int(lst[0]/2)+1):\n        if lst[0]%i==0:\n            primes.append(i)\n    max_number = 0\n    for i in range(len(lst)):\n        digit = lst[i]\n        count = 0\n        for j in range(len(primes)):\n            if digit >= primes[j]:\n                count += digit//primes[j]\n                digit = digit % primes[j]\n            else:\n                break\n        if count > max_number:\n            max_number = count\n        \n    return max_number\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    prime_list = [x for x in range(1, 1000000)]\n    prime_list.sort(reverse=True)\n    #print(prime_list)\n    sum_digits = 0\n    #print(lst)\n    for x in lst:\n        for y in range(len(prime_list)):\n            if x == prime_list[y]:\n                #print(prime_list[y])\n                sum_digits += y\n                if y == len(prime_list) - 1:\n                    return sum_digits\n                #print(sum_digits)\n                break\n            else:\n                continue\n    return sum_digits\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    i = 0\n    j = 1\n    while j < len(lst):\n        if lst[i] >= 1 and lst[i] <= 3:\n            sum += lst[i]\n        else:\n            break\n        i += 1\n    return sum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    max_prime = 0\n    sum = 0\n    for i in lst:\n        if i>=1:\n            for j in str(i):\n                if i%int(j)==0:\n                    sum += int(j)\n                    break\n            if sum>max_prime:\n                max_prime = sum\n            sum = 0\n    return max_prime\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return all(key.lower() in dict.keys() for key in dict.keys())\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for key in dict.keys():\n        if type(key)!= str:\n            return False\n    for key in dict.values():\n        if type(key)!= str:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = True\n    for key in dict:\n        if type(dict[key]) is str and dict[key].lower() in (dict[key].upper(), dict[key].lower()):\n            result = False\n            break\n        else:\n            result = True\n    return result\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for key, value in dict.items():\n        if type(key) == str:\n            if key.lower() in string.ascii_lowercase and value.lower() in string.ascii_lowercase:\n                pass\n            else:\n                return False\n        elif type(key) == int:\n            if key in string.ascii_lowercase:\n                pass\n            else:\n                return False\n        elif type(key) == float:\n            if key in string.digits:\n                pass\n            else:\n                return False\n        elif type(key) == dict:\n            if key.keys() in string.ascii_lowercase or key.keys() in string.digits:\n                pass\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for k in dict.keys():\n        if isinstance(dict[k], str):\n            if k.upper() in dict.keys():\n                if k.lower() in dict.keys():\n                    return True\n            else:\n                return False\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for key in dict.keys():\n        if isinstance(key, str) and len(key.lower()) > len(key) and key.isupper():\n            return True\n        if isinstance(key, str) and len(key.lower()) > len(key) and key.islower():\n            return True\n        if isinstance(key, str) and not (key.isupper() or key.islower()) and (key.isdigit() or key == \" \"):\n            return True\n        if isinstance(key, str) and not (key.isupper() or key.islower() or key == \" \") and (key.isdigit() or key == \" \"):\n            return True\n        if isinstance(key, str) and not key.isupper() or key.islower() and (key.isdigit() or key == \" \"):\n            return True\n        if isinstance(key, str) and not key.islower() and (key.isdigit() or key == \" \"):\n            return True\n        if isinstance(key, str) and not key.isupper() and not (key.islower() or key == \" \"):\n            return True\n        if isinstance(key, str) and not key.isupper() and not key.islower():\n            return True\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not isinstance(dict, dict):\n        raise TypeError(\"The given dictionary must be a dictionary.\")\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n    for key in dict.keys():\n        if not isinstance(dict[key], str):\n            return False\n    for key in dict.keys():\n        if not dict[key].isupper():\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(dict) == 0:\n        return False\n    \n    # If dictionary is empty\n    if len(dict) == 0:\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for key in dict:\n        if type(dict[key])!= str or len(key)!= len(dict[key]):\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return True if all(k.lower() in dict.keys() for k in dict.keys()) and all(k.upper() in dict.keys() for k in dict.keys()) and all(dict.get(k) for k in dict.keys()) and all(k.isupper() for k in dict.keys()) and all(k.islower() for k in dict.keys())\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    counts = []\n    for i in range(1, n + 1):\n        counts.append(i)\n    return counts\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    list = []\n    for i in range(n + 1):\n        if isprime(i):\n            list.append(i)\n    return list\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l = []\n    for i in range(n+1):\n        if is_prime(i):\n            l.append(i)\n    return l\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: modify count_up_to to return an array of prime numbers less than n.\n    # TODO: modify count_up_to so that it returns an array of the first n integers that are prime numbers\n    # TODO: add a loop to keep checking if the n-th prime is greater than the n-th prime in the array\n    # TODO: create a loop that returns the n-th prime number in the array (use the help function of a built-in dictionary to do this)\n    # TODO: use this to calculate the middles of the loop\n    # TODO: use this to calculate the sides of the loop\n    # TODO: use this to calculate the area of the loop\n    # TODO: use this to calculate the perimeter of the loop\n    # TODO: use this to calculate the area of the loop\n    # TODO: use this to calculate the perimeter of the loop\n    # TODO: return the array of prime numbers less than n\n    \n    # TODO: implement this function\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smallest number\n    # TODO: implement a helper function to return the maximum number\n    # TODO: implement a helper function to return the smalles"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Method 1\n    # arr = []\n    # for i in range(n+1):\n    #     if is_prime(i):\n    #         arr.append(i)\n    #     else:\n    #         continue\n    # return arr\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    arr = []\n    for n_prime in range(2, n+1):\n        if is_prime(n_prime):\n            arr.append(n_prime)\n    return arr\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    prime_arr = []\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst = []\n    for i in range(n+1,1,-1):\n        if i >= 2:\n            if (i%2 == 0):\n                lst.append(i)\n        else:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x for x in range(n, n+1) if is_prime(x)]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    for i in range(n):\n        print(count[i])\n        count = [c for c in count if c < n]\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if type(a) == float and type(b) == float:\n        return a * b\n    return a * b\n    \ndef add(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the sum of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    add(148, 412) should return 46.\n    add(19, 28) should return 66.\n    add(2020, 1851) should return 0.\n    add(14,-15) should return 12.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a + b\n    return a + b\n    \ndef sub(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the difference of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    sub(148, 412) should return -28.\n    sub(19, 28) should return -36.\n    sub(2020, 1851) should return -0.\n    sub(14,-15) should return -4.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a - b\n    return a - b\n    \ndef mul(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    mul(148, 412) should return 416.\n    mul(19, 28) should return 728.\n    mul(2020, 1851) should return 0.\n    mul(14,-15) should return 72.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a * b\n    return a * b\n    \ndef div(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the quotient of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    div(148, 412) should return 8.\n    div(19, 28) should return 7.\n    div(2020, 1851) should return 0.\n    div(14,-15) should return 5.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a / b\n    return a / b\n    \ndef square(a):\n    \"\"\"Complete the function that takes an integer and returns \n    the square of the input.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == int:\n        return a ** 2\n    return a ** 2\n    \ndef cube(a):\n    \"\"\"Complete the function that takes an integer and returns \n    the cube of the input.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == int:\n        return a ** 3\n    return a ** 3\n    \ndef sqrt(a):\n    \"\"\"Complete the function that takes a number and returns the \n    square root of a number.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == int:\n        return a ** (1/2)\n    return a ** (1/2)\n    \ndef factorial(a):\n    \"\"\"Complete the function that takes an integer and returns \n    the factorial of a number.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == int:\n        return a * factorial(a - 1)\n    return a * factorial(a - 1)\n    \ndef mod(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the remainder of a number.\n    Assume the input is always valid.\n    Examples:\n    mod(100, 2) should return 2.\n    mod(81, 50) should return 7.\n    mod(28, 4) should return 2.\n    mod(67, 72) should return 6.\n    \"\"\"\n    if type(a) == float and type(b) == float:\n        return a % b\n    return a % b\n    \ndef floor(a):\n    \"\"\"Complete the function that takes a number and returns \n    the floor of a number.\n    Assume the input is always valid.\n    \"\"\"\n    if type(a) == float:\n        return math.floor(a)\n    return math.floor(a)\n    "
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # your code here\n    return a*b\n    \n    #https://www.codewars.com/kata/55f5f833e41c7a7b0012000a/train/python\n    #return a*b"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return a*b\ndef find_prime(n):\n    \"\"\"Complete the function that takes a non-negative integer n\n    and returns the prime numbers smaller than n.\n    Examples:\n    find_prime(5) should return 2, since it's 2 and there's only 1 \n    prime smaller than 5.\n    find_prime(10) should return 2, since it's 2 and there's only 1 \n    prime smaller than 10.\n    find_prime(12) should return 3 since it's 3 and there's only 2 \n    prime smaller than 12.\n    find_prime(5) should return 2 since it's 2 and there's only 1 \n    prime smaller than 5.\n    \"\"\"\n    if n==1:\n        return 0\n    for i in range(2,n):\n        if n%i==0:\n            return n\n    return 0\ndef main():\n    print(multiply(148, 412))\n    print(find_prime(5))\n    print(find_prime(10))\n    print(find_prime(12))\nif __name__=='__main__':\n    main("
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Write your code here.\n    return a * b\n    \nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14,-15)"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = 0\n    for i in str(a):\n        result = result*10 + int(i)\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # store the product\n    product = 0\n    # loop through each digit\n    for i in range(len(str(a))):\n        # check the length of the digits\n        if len(str(a)) > i:\n            # if the length is greater than the current product\n            # then the product is already updated\n            product += int(str(a)[i]) * int(str(b)[i])\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    return reduce(lambda x, y: x*y, list(map(int, str(a))))\n    \n    \nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14,-15)"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # your code here\n    if len(a)!= len(b):\n        return 0\n    product = 0\n    for i in range(len(a)):\n        product += a[i] * b[i]\n    return product\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = 0\n    for i in range(len(a)):\n        result += int(a[i]) * int(b[i])\n    return resul"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] >= 'a' and s[i] <= 'z':\n            if i % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    counter = 0\n    for i in range(len(s)):\n        if s[i] == \"A\":\n            if i % 2 == 0:\n                counter += 1\n        elif s[i] == \"E\":\n            if i % 2 == 0:\n                counter += 1\n        elif s[i] == \"I\":\n            if i % 2 == 0:\n                counter += 1\n        elif s[i] == \"O\":\n            if i % 2 == 0:\n                counter += 1\n        elif s[i] == \"U\":\n            if i % 2 == 0:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n        \n    return count"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # your code here\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    vowels = 'aeiou'\n    count = 0\n    for i in range(0, len(s)):\n        if i % 2 == 0:\n            if s[i] in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if s[i+1].isupper():\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count=0\n    for i in range(len(s)-1):\n        if s[i].isupper() and s[i+1].isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # The first and last positions will always have a \"v\" in the middle\n    pos = [s[0], s[-1]]\n    \n    # The position in the string where we're looking for the \"v\"\n    pos_v = -1\n    \n    # The position in the string where we're looking for the \"u\"\n    pos_u = -1\n    \n    # For each character in the string...\n    for i in range(0, len(s)):\n        \n        # If we're at a vowel, and the character is a \"v\"\n        if pos[0] == \"v\":\n            # Add the current \"v\" position to the index\n            pos_v += 1\n        \n        # If we're at a vowel, and the character is a \"u\"\n        if pos[0] == \"u\":\n            # Add the current \"u\" position to the index\n            pos_u += 1\n        \n        # If we're at a middle position, and the character is a \"v\"\n        if pos[0] == \"v\" and pos[1] == \"u\":\n            # We've found the middle position, so we don't need to add anything\n            break\n        \n        # If we're at a middle position, and the character is a \"u\"\n        if pos[0] == \"u\" and pos[1] == \"v\":\n            # We've found the middle position, so we don't need to add anything\n            break\n        \n        # If the next character is a vowel, or a non-vowel, or a non-vowel,\n        # we're done.\n        if pos[0] == \"v\" or pos[0] == \"u\":\n            # We've found an \"u\" or \"v\", so we're done\n            break\n        \n        # Otherwise, we're now at a non-vowel position, so we need to add a new\n        # \"v\" position\n        pos = [\"v\"] + pos\n        \n    # The final character is a vowel, so return the count\n    return pos_v + 1\n    \nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if '.' not in str(value):\n        # convert string to float\n        return int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Write a function that takes a string and returns the number\n    # closest to it\n    # HINT: You can take a number from a string like \"10\" and check the number\n    # against the string \"10.5\"\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass # TODO: Create an actual function.\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import math\n    import math\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Make sure the value is a string.\n    assert isinstance(value, str), \"The value must be a string.\"\n    # Get the number and divide by 10.\n    integer = int(value) / 10\n    # Find the closest integer that is equal or less than the integer.\n    closest_integer = round(integer)\n    if closest_integer > 0:\n        closest_integer = 0\n    return closest_integer\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    \n    return float(round(value,1))\n    \nprint(closest_integer(\"10\"))\nprint(closest_integer(\"15.3\"))\nprint(closest_integer(\"-14.5\")"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    while 1:\n        # Assume that the value is an integer.\n        value = int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if value == '':\n        return 0\n    elif value.isnumeric():\n        return int(value)\n    elif value.isalpha():\n        return int(value)\n    elif value.isdigit():\n        return int(value)\n    elif value == '.':\n        return 0\n    elif value.endswith('.0'):\n        return 0\n    elif value.endswith('.1'):\n        return 0\n    elif value.endswith('.01'):\n        return 0\n    elif value.endswith('.001'):\n        return 0\n    elif value.endswith('.00001'):\n        return 0\n    elif value.endswith('.0'):\n        return 0\n    elif value.endswith('.1'):\n        return 0\n    elif value.endswith('.01'):\n        return 0\n    elif value.endswith('.001'):\n        return 0\n    elif value.endswith('.00001'):\n        return 0\n    elif value.endswith('.0'):\n        return 0\n    elif value.endswith('.1'):\n        return 0\n    elif value.endswith('.01'):\n        return 0\n    elif value.endswith('.001'):\n        return 0\n    elif value.endswith('.00001'):\n        return 0\n    elif value.endswith('.0'):\n        return 0\n    elif value.endswith('.1'):\n        return 0\n    elif value.endswith('.01'):\n        return 0\n    elif value.endswith('.001'):\n        return 0\n    elif value.endswith('.00001'):\n        return 0\n    elif value.endswith('.0'):\n        return 0\n    elif value.endswith('.1'):\n        return 0\n    elif value.endswith('.01'):\n        return 0\n    elif value.endswith('.001'):\n        return 0\n    elif value.endswith('.00001'):\n        return 0\n    elif value.endswith('.0'):\n        return 0\n    elif value.endswith('.1'):\n        return 0\n    elif value.endswith('.01'):\n        return 0\n    elif value.endswith('.001'):\n        return 0\n    elif value.endswith('.00001'):\n        return 0\n    elif value.endswith('.0'):\n        return 0\n    elif value.endswith('.1'):\n        return 0\n    elif value.endswith('.01'):\n        return 0\n    elif value.endswith('.001'):\n        return 0\n    elif value.endswith('.00001'):\n        return 0\n    elif value.endswith('.0'):\n        return 0\n    elif value.endswith('.1'):\n        return 0\n    elif value.endswith('.01'):\n        return 0\n    elif value.endswith('.001'):\n        return 0\n    elif value.endswith('.00001'):\n        return 0\n    elif value.endswith('.0'):\n        return 0\n    elif value.endswith('.1'):\n        return 0\n    elif value.endswith('.01'):\n        return 0\n    elif value.endswith('.001'):\n        return 0\n    elif value.endswith('.00001'):\n        return 0\n    elif value.endswith('.0'):\n        return 0\n    elif value.endswith('.1'):\n        return 0\n    elif value.endswith('.01'):\n        return 0\n    elif value.endswith('.001'):\n        return 0\n    elif value.endswith('.00001'):\n        return 0\n    elif value.endswith('.0'):\n        return 0\n    elif value.endswith('.1'):\n        return 0\n    elif valu"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    value = str(value)\n    try:\n        closest = min(value, key = abs)\n        closest = float(closest)\n    except:\n        closest = abs(float(value))\n    return closest\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    pile = [0] * (n+1)\n    pile[1] = 1\n    #print(pile)\n    for i in range(2, n+1, 2):\n        pile[i] = piles[i-1] + piles[i]\n        #print(pile)\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # to handle odd and even number\n    pile = []\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert 1 <= n <= 10\n    a = [0] * n\n    a[0] = 1\n    a[1] = 1\n    a[2] = 2\n    for i in range(3, n + 1):\n        a[i] = a[i - 1] + 2 * a[i - 2]\n    return a\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n < 2:\n        return n\n    else:\n        return [n] + make_a_pile(n-1) + [n-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pile = [1 for _ in range(n)]\n    a = 0\n    for i in range(1, n):\n        if n % 2 == 0:\n            pile[i] = n // 2 + 1\n            a += 1\n        else:\n            pile[i] = n // 2 + 1\n            a += 2\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        a = make_a_pile(n-1)\n        b = [1]\n        for i in range(2, n+1):\n            b.append(a[i-2]+a[i-1])\n        return b\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n <= 1:\n        return []\n    \n    n -= 1\n    \n    result = []\n    \n    for i in range(2,n+1):\n        if n % 2 == 0:\n            result.append(i)\n            n = n//2\n        else:\n            result.append(i+1)\n            n = (n+1)//2\n    \n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n % 2!= 0:\n        return [n//2, 2*n]\n    else:\n        return [n//2, 3*n]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if n == 0:\n        return []\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 3:\n        return n\n    else:\n        return [3, n // 2, n % 2]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return words.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return list(map(str.strip, s.split(',')))\n    # return list(map(str.split, s.split(',')))\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return s.split(\",\""
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return list(s.split(\",\"))\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    words = s.split(\",\")\n    return words\n    \ndef rotate_image(arr, n):\n    \"\"\"\n    You are given an array of integers. Your task is to rotate the given array by n\n    degrees. The integers are in the range of [1..n] and their position is represented by\n    the index of the array.\n    \n    Examples:\n    rotate_image([1, 2, 3, 4, 5], 2) == [5, 4, 3, 2, 1]\n    rotate_image([1, 2, 3, 4, 5], -1) == [5, 4, 3, 2, 1]\n    \"\"\"\n    return arr[::-1] + arr[1:]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return list(map(lambda word: word.split(','), s.split()))\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    word_list = s.split(',')\n    return word_list\n    \n    \ndef words_list_int(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_list_int(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_list_int(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    word_list = s.split(',')\n    return word_list\n    \n    \ndef words_list_str(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_list_str(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_list_str(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    word_list = s.split(',')\n    return word_list\n    \n    \ndef one_words(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    one_words(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    one_words(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    word_list = s.split(',')\n    return word_list\n    \n    \ndef two_words(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    two_words(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    two_words(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    word_list = s.split(',')\n    return word_list\n    \n    \ndef three_words(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    three_words(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    three_words(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    word_list = s.split(',')\n    return word_list\n    \n    \ndef four_words(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    four_words(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    four_words(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    word_list = s.split(',')\n    return word_list\n    \n    \ndef five_words(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    five_words(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    five_words(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    words_array = []\n    word_array = s.split(',')\n    for word in word_array:\n        if word!= '':\n            words_array.append(word)\n    return words_array\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    word_list = s.split(\",\")\n    word_list = [word.strip() for word in word_list]\n    return word_list\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if x % 2 == 0:\n        return y\n    return y - 1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    res = -1\n    for x_ in range(x, y):\n        if x_ % 2 == 0:\n            res = max(res, x_)\n    return res\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # Pick a random integer from x and y inclusive\n    r = random.randint(x, y)\n    \n    # Return the integer if it is not a small positive number\n    if r < 0:\n        return -1\n    \n    # Return the integer if it is a small positive number\n    if r % 2 == 0:\n        return r\n    \n    # Return the integer if it is a positive number\n    return r\n    \ndef main():\n    \"\"\"The main function that calls all the functions.\n    \"\"\"\n    \n    # Get a list of all numbers in a list\n    lst = get_list()\n    \n    # Pick a random integer from the list and return the result\n    r = choose_num(len(lst), len(lst))\n    \n    # Check if the result of the function is an integer\n    if r == -1:\n        return \"Please enter a positive integer.\"\n    \n    # Return the result of the function\n    return r\n    "
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    x = int(x)\n    y = int(y)\n    if y == 0:\n        return -1\n    if x == y:\n        return x\n    if x % 2 == 0 and y % 2 == 0:\n        return choose_num(x//2, y//2)\n    return choose_num(x//2, y)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    x_biggest_number = max(x, y)\n    x_biggest_number = min(x, y)\n    \n    if (x_biggest_number % 2)!= 0:\n        return -1\n    else:\n        return x_biggest_number\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    x = abs(x)\n    y = abs(y)\n    if x == 0:\n        return y\n    elif y == 0:\n        return x\n    elif x >= y:\n        return x\n    elif y >= x:\n        return y\n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    x = x - 1\n    y = y - 1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code here\n    if x < y:\n        x, y = y, x\n    while y > 0:\n        if y % 2 == 0 and y!= 0:\n            y -= 1\n        elif y % 2 == 1 and y!= 0:\n            y -= 1\n        else:\n            return y\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if(x > y):\n        if(y < x):\n            return -1\n        else:\n            return y\n    else:\n        if(x < y):\n            return y\n        else:\n            return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return (x + y) % 2\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    avg = round((n+m)/2)\n    if avg < 10:\n        return \"0b\" + str(avg).zfill(2)\n    if avg > 90:\n        return str(avg)\n    return \"-1\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < m:\n        return \"1\" if n > m else \"-1\"\n    result = 0\n    for i in range(1, n+1):\n        result = int(result + int(str(i)[::-1]))\n    return f\"{result/10:02b}\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"0b\" + str(n) + str(m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # n and m must be positive integers\n    if m < 0:\n        return -1\n    # n must be greater than m\n    if n < 0:\n        return -1\n    # if n > m, we return -1\n    return str(round(n / m))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return str(round(n/m))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n > m:\n        return \"-\" + str(n - m + 1) + \"b\"\n    else:\n        return str(n) + \"b\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    return f'{int(n) if int(n) <= n else int(n) + int((m - n) // 2) * 2}'\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n > m:\n        return -1\n    else:\n        if m == 0:\n            return \"0b\"+str(n)+\".\"+str(n)+\".\"\n        else:\n            return \"0b\"+str(n)+str(m)+\".\"+str(m)+\".\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # loop through numbers\n    for i in range(1, m + 1):\n        # get current number\n        nth = n * i\n        # round it\n        rounded_nth = int(round(nth, 0))\n        # convert to binary\n        binary = bin(rounded_nth)\n        # get the modulo\n        modulo = int(binary[2:])\n        # if modulo is less than 10, return -1\n        if modulo < 10:\n            return \"-1\"\n        # return the binary\n        return binary\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == m:\n        return \"0b11\"\n    if n > m:\n        return str(n) + \"b\" + str(m)\n    elif n > m:\n        return str(m) + \"b\" + str(n)\n    elif n < m:\n        return \"0b11\"\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x.sort()\n    x = [x[i] for i in range(len(x)) if len(str(x[i]))==1]\n    return x\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    seen_elements = set()\n    output_list = []\n    \n    for number in x:\n        if (number % 10) not in seen_elements:\n            seen_elements.add(number % 10)\n            output_list.append(number)\n        else:\n            continue\n        \n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = []\n    n = len(x)\n    if n % 2 == 0:\n        for i in range(0,n,2):\n            s.append(x[i])\n        return s\n    else:\n        for i in range(0,n,2):\n            s.append(x[i])\n        return s[::-1]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst = list(x)\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    x_str = str(x)\n    if len(x_str) % 2 == 0:\n        return x_str\n    else:\n        return []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    numbers = []\n    if x:\n        for i in range(len(x)):\n            if x[i] % 2 == 0:\n                numbers.append(x[i])\n    return sorted(numbers)"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    if not isinstance(x, list):\n        raise TypeError(\"x must be a list\")\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    i = 0\n    for x_digit in x:\n        if x_digit % 10 == 0:\n            i = i + 1\n    return x[i::]\n    "
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in x:\n        if i%2==0:\n            if i>=1000:\n                return [i]\n    return []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l = []\n    while x > 0:\n        n = 0\n        while x % 10!= 0:\n            x /= 10\n            n += 1\n        if n!= 0:\n            l.append(n)\n        x = x // 10\n    return l\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    res = []\n    for i in range(len(arr)):\n        while arr[i] < 9 and arr[i] >= 1:\n            res.append(arr[i])\n            arr[i] *= 10\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if arr == []:\n        return []\n    \n    # Sort the array\n    nums = sorted(arr)\n    # Reverse the array\n    nums = nums[::-1]\n    \n    # Return the sorted array\n    return nums\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    arr = sorted(arr)\n    arr.reverse()\n    return [i for i in arr]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    temp_arr = []\n    for i in arr:\n        temp_arr.append(str(i))\n    temp_arr.sort()\n    return temp_arr\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    arr.sort()\n    return [name for name in sorted(arr) if 0 <= arr.index(name) <= 9]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    if arr is None or len(arr) == 0:\n        return []\n    \n    array = sorted(arr)\n    result = []\n    for i in array:\n        result.append(i)\n    return result\n    \n    \n    \n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sorted_arr = []\n    arr = sorted(arr, reverse=True)\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            sorted_arr.append(arr[i])\n    return sorted_arr\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    length = sorted(set(arr))\n    return [str(item) if item in length else str(item) for item in arr]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    fact = [1]\n    for i in range(1, n + 1):\n        fact.append(i * fact[i - 1])\n    return fact\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    factorial = []\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        fact = [1]\n        for i in range(n):\n            fact.append(fact[i] * n)\n        return fact\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    factors = []\n    \n    # Create the list of n!\n    for i in range(1, n+1):\n        factors.append(i)\n        factors.append(i*i)\n    return factors\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    factors = []\n    for i in range(1, n+1):\n        factors.append(i)\n        if i % 2 == 0:\n            factors.append(i//2)\n        else:\n            factors.append(i)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    factorial_list = []\n    for i in range(1, n + 1):\n        factorial_list.append(1)\n        if i % 2 == 0:\n            factorial_list.append(i * factorial_list[i - 1])\n        else:\n            factorial_list.append(i * factorial_list[i - 1] + factorial_list[i - 1])\n    return factorial_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 2:\n        return []\n    elif n == 2:\n        return [1]\n    elif n%2 == 0:\n        return f(n//2) + [n//2]\n    else:\n        return f(n-1) + f(n//2) + [n]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    fact = []\n    i = 1\n    while i <= n:\n        fact.append(i)\n        i += 1\n    return fact\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    factorials = []\n    i = 1\n    while i <= n:\n        factorials.append(i)\n        i *= i\n    return factorials\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    fact = [1]\n    if n <= 2:\n        return fact\n    for i in range(2, n + 1):\n        fact.append(i * fact[i - 1])\n    return fact\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return (even_odd_palindrome(n + 1) + even_odd_palindrome(n - 1))\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    for i in range(0, n, 2):\n        if int(str(i) + str(i)[::-1]) % 2 == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def palindrome(num, i, j):\n        while num > 0:\n            if num % 10 == i % 10:\n                if num % 10 == j % 10:\n                    return True\n            num //= 10\n            i //= 10\n            j //= 10\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # For each odd integer between 2 and n, it is considered odd.\n    # As a result, at most two of them are even.\n    # i.e. there are at least two odd integers.\n    odd_even_palindrome = set()\n    odd_even_palindrome.add((2, 1))\n    odd_even_palindrome.add((3, 1))\n    odd_even_palindrome.add((4, 1))\n    odd_even_palindrome.add((6, 1))\n    odd_even_palindrome.add((7, 1))\n    odd_even_palindrome.add((8, 1))\n    odd_even_palindrome.add((9, 1))\n    odd_even_palindrome.add((10, 1))\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even_palindromes, odd_palindromes = set(), set()\n    for i in range(1, n+1):\n        even, odd = i, n-i\n        while even < odd:\n            if even % 2 == 0:\n                even_palindromes.add(even)\n                odd -= 1\n            else:\n                odd_palindromes.add(odd)\n                even += 1\n    return odd_palindromes, even_palindromes\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even_odd_palindromes = 0\n    if n < 2:\n        return (0,0)\n    while n:\n        if n & 1:\n            if n & 1 == 0:\n                even_odd_palindromes += 1\n        n = n >> 1\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even, odd = 0, 0\n    for i in range(1, n+1):\n        if (n % i == 0):\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even = 0\n    odd = 0\n    for i in range(n):\n        if n % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        n //= 2\n    return (even, odd)"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    palindromes = []\n    for i in range(1, n+1):\n        palindromes.append(i)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    output = {}\n    \n    for i in arr:\n        if i in output:\n            output[i] += 1\n        else:\n            output[i] = 1\n    \n    return len(output)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    total = 0\n    for number in arr:\n        if number >= 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    output = 0\n    for num in arr:\n        if num >= 0:\n            output += 1\n    return output\n    \ndef flatten_list(arr):\n    \"\"\"\n    Write a function flatten_list which takes a list of integers and returns\n    a new list where each element in the new list is the concatenation of the\n    first and the second elements of the list.\n    >>> flatten_list([2, [1, 3]])\n    [2, [1, 3]]\n    >>> flatten_list([])\n    []\n    >>> flatten_list([1])\n    [1]\n    \"\"\"\n    output = []\n    for num in arr:\n        if type(num) == int:\n            output.append(num)\n        else:\n            output.extend(num)\n    return output\n    \ndef find_fib(limit):\n    \"\"\"\n    Write a function find_fib which takes a list of integers and returns\n    the sum of the values that occur as a number in the list.\n    >>> find_fib([1, 2, 3, 4, 5])\n    25\n    \"\"\"\n    fib = 0\n    for i in range(limit):\n        if i == 0 or i == 1:\n            fib = 1\n        else:\n            fib = fib + i\n    return fib\n    \ndef find_sum_digits(numbers):\n    \"\"\"\n    Write a function find_sum_digits which takes a list of integers and\n    returns the sum of the numbers which have a sum of digits > 0.\n    >>> find_sum_digits([1, 2, 3, 4, 5])\n    25\n    \"\"\"\n    output = 0\n    for num in numbers:\n        if num > 0:\n            output += num\n    return output\n    \ndef find_sum_of_digits(numbers):\n    \"\"\"\n    Write a function find_sum_of_digits which takes a list of integers and\n    returns the sum of the numbers which have a sum of digits > 0.\n    >>> find_sum_of_digits([1, 2, 3, 4, 5])\n    25\n    \"\"\"\n    output = 0\n    for num in numbers:\n        if num > 0:\n            output += num\n    return output\n    \ndef is_fibo(n):\n    \"\"\"\n    Write a function is_fibo which takes a number n as an argument and\n    returns True if n is a Fibonacci number and False if it is not.\n    >>> is_fibo(0)\n    True\n    >>> is_fibo(1)\n    False\n    >>> is_fibo(15)\n    True\n    \"\"\"\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n == 3:\n        return False\n    else:\n        return is_fibo(n - 1) and is_fibo(n - 2)\n    \ndef count_prime_factors(n):\n    \"\"\"\n    Write a function count_prime_factors which takes a number as an argument and\n    returns a list of the prime factors of n.\n    >>> count_prime_factors(0)\n    []\n    >>> count_prime_factors(2)\n    [2]\n    >>> count_prime_factors(2)\n    []\n    >>> count_prime_factors(123)\n    [3, 5]\n    \"\"\"\n    output = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            output.append(i)\n    return output\n    \ndef longest_common_prefix(strs):\n    \"\"\"\n    Given a list of strings, return the longest common prefix.\n    >>> longest_common_prefix([\"ab\", \"bc\", \"abc\"])\n    'bc'\n    >>> longest_common_prefix([\"a\", \"ab\", \"abc\", \"aaa\"])\n    'aaa'\n    >>> longest_common_prefix([\"ab\", \"abc\", \"ab\", \"a\", \"abc\"])\n    'abc'\n    >>> longest_common_prefix([\"a\", \"b\", \"ab\", \"bc\"])\n    'ab'\n    \"\"\"\n    longest_prefix = ''\n    for i in range(1, len(strs) + 1):\n        prefix = '"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # end_index = 0\n    start_index = 1\n    end_index = len(arr) - 1\n    while end_index >= start_index:\n        num = arr[start_index]\n        if num > 0:\n            end_index = start_index\n            start_index = end_index - 1\n            # end_index = start_index\n        # elif end_index <= 0:\n        #     break\n        else:\n            # end_index = start_index\n            num = arr[start_index]\n            # end_index = start_index - 1\n            while end_index >= start_index - 1 and arr[end_index - 1] == 0:\n                end_index -= 1\n            end_index -= 1\n            start_index = end_index + 1\n    return end_index\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for n in arr:\n        if n > 0:\n            count = count + 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count_nums = 0\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for i in arr:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(set(map(str, arr)))\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    counter = 0\n    for i in range(len(arr)):\n        num = arr[i]\n        if num > 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(1 for i in arr if len(i) > 0)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 0\n    sorted = True\n    while i < len(arr) - 1:\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            sorted = not sorted\n        i+=1\n    return sorted\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not arr:\n        return False\n    else:\n        # TODO: write your code here\n        sum=0\n        for i in range(len(arr)):\n            sum+=arr[i]\n        if abs(sum)<=1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Your code here\n    if len(arr)==0:\n        return False\n    else:\n        i=0\n        j=0\n        while i<len(arr)-1:\n            if arr[i]<arr[i+1]:\n                j=i+1\n                arr[i],arr[j]=arr[j],arr[i]\n            i+=1\n            #print(i,j)\n        #print(arr)\n        arr[0],arr[j]=arr[j],arr[0]\n        #print(arr)\n        #print(arr[0],arr[j])\n        i=1\n        while j<len(arr)-1:\n            if arr[j]<arr[j+1]:\n                arr[j],arr[j+1]=arr[j+1],arr[j]\n            j+=1\n        #print(arr)\n        arr[len(arr)-1],arr[j]=arr[j],arr[len(arr)-1]\n        #print(arr)\n        #print(arr[len(arr)-1],arr[j])\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    N = len(arr)\n    if N <= 1:\n        return False\n    \n    # Initialize a counter variable, for storing the number of left shifts performed\n    left_shift = 0\n    \n    # Initialize a counter variable, for storing the number of right shifts performed\n    right_shift = 0\n    \n    # The below condition is for a shift of 1 within the given array.\n    if arr[1] >= 0:\n        # Perform right shift operation\n        right_shift += 1\n    \n    # The below condition is for a shift of 2 within the given array.\n    if arr[2] >= 0:\n        # Perform right shift operation\n        right_shift += 2\n    \n    # The below condition is for a shift of 3 within the given array.\n    if arr[3] >= 0:\n        # Perform right shift operation\n        right_shift += 3\n    \n    # The below condition is for a shift of 4 within the given array.\n    if arr[4] >= 0:\n        # Perform right shift operation\n        right_shift += 4\n    \n    # The above condition is for a shift of 5 within the given array.\n    if arr[5] >= 0:\n        # Perform right shift operation\n        right_shift += 5\n        \n    # The below condition is for a shift of 1 within the given array.\n    if arr[1] >= 0:\n        # Perform left shift operation\n        left_shift += 1\n        \n    # The below condition is for a shift of 2 within the given array.\n    if arr[2] >= 0:\n        # Perform right shift operation\n        left_shift += 2\n        \n    # The below condition is for a shift of 3 within the given array.\n    if arr[3] >= 0:\n        # Perform right shift operation\n        left_shift += 3\n        \n    # The below condition is for a shift of 4 within the given array.\n    if arr[4] >= 0:\n        # Perform right shift operation\n        left_shift += 4\n        \n    # The below condition is for a shift of 5 within the given array.\n    if arr[5] >= 0:\n        # Perform right shift operation\n        left_shift += 5\n        \n    # The below condition is for a shift of 6 within the given array.\n    if arr[6] >= 0:\n        # Perform right shift operation\n        left_shift += 6\n        \n    # If we get any of the conditions within the conditions of the array\n    # then it is possible that the given array is sorted.\n    return True if left_shift == right_shift and 0 < left_shift <= right_shift <= N - 1 else False\n    \ndef move_two_balls(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if \n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(arr)==1:\n        return arr[0]==0\n    elif len(arr)==2:\n        if arr[1]==0 and arr[2]!=0:\n            return False\n        else:\n            return True\n    elif len(arr)>3:\n        x = 0\n        y = 1\n        for i in range(0,len(arr)-1):\n            if arr[i]==arr[i+1]:\n                x+=1\n                y+=1\n            else:\n                if x>0:\n                    y+=1\n                    x=0\n                    x+=1\n                else:\n                    return False\n        y+=1\n        return y<len(arr)-1\ndef main():\n    \"\"\"\n    Input: n = 6\n    Output: True\n    Explanation:\n    move_one_ball([3, 4, 5, 1, 2]) == True\n    move_one_ball([1, 2, 3, 4, 5]) == False\n    move_one_ball([4, 2, 3, 1, 5]) == True\n    move_one_ball([3, 2, 1, 5, 4]) == True\n    move_one_ball([5, 2, 1, 3, 4]) == False\n    move_one_ball([6, 5, 4, 2, 3]) == True\n    move_one_ball([7, 8, 9, 10, 11]) == False\n    move_one_ball([3, 5, 7, 6, 8]) == True\n    move_one_ball([1, 4, 5, 7, 6]) == True\n    move_one_ball([6, 7, 8, 9, 10]) == True\n    move_one_ball([1, 6, 5, 9, 10]) == True\n    move_one_ball([3, 2, 5, 8, 9]) == True\n    move_one_ball([1, 3, 5, 6, 8]) == False\n    move_one_ball([2, 1, 5, 4, 9]) == True\n    move_one_ball([6, 5, 4, 2, 1]) == True\n    move_one_ball([5, 2, 1, 3, 4]) == False\n    move_one_ball([3, 2, 1, 5, 4]) == True\n    move_one_ball([3, 1, 2, 5, 4]) == True\n    move_one_ball([6, 5, 4, 2, 1]) == False\n    move_one_ball([6, 5, 4, 2, 1]) == False\n    move_one_ball([7, 8, 9, 10, 11]) == True\n    move_one_ball([3, 5, 7, 6, 8]) == False\n    move_one_ball([3, 1, 5, 4, 9]) == False\n    move_one_ball([5, 2, 1, 3, 4]) == False\n    move_one_ball([6, 5, 4, 2, 1]) == False\n    move_one_ball([7, 8, 9, 10, 11]) == False\n    move_one_ball([1, 4, 5, 7, 6]) == True\n    move_one_ball([6, 7, 8, 9, 10]) == True\n    move_one_ball([1, 6, 5, 9, 10]) == True\n    move_one_ball([3, 2, 5, 8, 9]) == True\n    move_one_ball([1, 3, 5, 6, 8]) == True\n    move_one_ball([2, 1, 5, 4, 9]) == True\n    move_one_ball([6, 5, 4, 2, 1]) == True\n    move_one_ball([5, 2, 1, 3, 4]) == True\n    move_one_ball([3, 2, 1, 5, 4]) == True\n    move_one_ball([6, 5, 4, 2, 1]) == True\n    move_one_ball([7, 8, 9, 10, 11]) == True\n    move_one_ball([1, 4, 5, 7, 6]) == False\n    move_one_ball([2, 1, 5, 4, 9]) == True\n    move_one_ball([6, 5, 4, 2, 1]) == False\n    move_one_ball([7, 8, 9, 10, 11]) == True\n    move_one_ball([3, "
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def is_sorted(arr,start,end):\n        if start==end:\n            return True\n        if arr[start]>arr[end]:\n            return is_sorted(arr,start+1,end)\n        else:\n            return is_sorted(arr,start,end-1)\n        \n    if arr==[]:\n        return True\n    \n    for i in range(1,len(arr)):\n        if is_sorted(arr,i,i):\n            return True\n        \n    return False"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if arr == [] or arr is None:\n        return False\n    random.shuffle(arr)\n    if check_sorted_arr(arr):\n        return True\n    else:\n        return move_one_ball(arr[1:]) or move_one_ball(arr[:-1])\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    \"\"\"\n    The idea is to do the following:\n        1. Initialize the array as the same size as the given array.\n        2. Initialize a flag as False.\n        3. Initialize a hash as an empty dictionary.\n        4. While the hash is not empty then we have two operations and\n         the algorithm of this function is:\n            1. The two operations are performed in sorted order.\n            2. At the beginning of the loop the algorithm is done again.\n            \n    \"\"\"\n    \n    hash={}\n    \n    \n    \n    for i in range(len(arr)):\n        hash[arr[i]]=i\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if arr == []:\n        return True\n    \n    result = False\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            arr[i] -= 1\n            if not move_one_ball(arr):\n                break\n            arr[i] += 1\n    return result\n    \n    \ndef move_two_balls(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Write your code here\n    if len(arr)==0:\n        return True\n    else:\n        return move_one_ball(arr[1:]) or move_one_ball(arr[:len(arr)-1]) or move_one_ball(arr[1:len(arr)-1:])\n        \ndef move_one_ball_2(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n    count = 0\n    for i in lst1:\n        if(count % 2 == 0):\n            if(i in lst2):\n                lst2.remove(i)\n            else:\n                lst2.append(i)\n        else:\n            if(i in lst2):\n                lst1.remove(i)\n            else:\n                lst1.append(i)\n        count += 1\n    return \"YES\" if(len(lst1) == 0) or (len(lst2) == 0) else \"NO\"\n    \nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 3]))"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not lst1 or not lst2:\n        return False\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #Write your code here\n    return lst1[0] == lst2[0] and exchange(lst1[1:], lst2[1:])\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # your code here\n    num = set()\n    for i in lst1:\n        num.add(i)\n    for j in lst2:\n        num.add(j)\n    if len(num)%2==0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Write your code here.\n    lst1_even = lst1\n    if len(lst1) % 2 == 0:\n        for i in range(len(lst1)):\n            lst1_even.append(lst1[i])\n    lst2_even = lst2\n    if len(lst2) % 2 == 0:\n        for i in range(len(lst2)):\n            lst2_even.append(lst2[i])\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Solution:\n    # Try all numbers from 2 to 1\n    # if list1[index]!= list2[index]\n    # return \"NO\"\n    # if list1[index] % 2 == 0:\n    # return \"NO\"\n    # try all numbers from 1 to len(list1)\n    # return \"YES\"\n    # if list1[index] % 2 == 1:\n    # return \"NO\"\n    # return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n    pass\n    pass\n    pass\n    \n    pass\n    pass"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Your code here\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    else:\n        if len(lst1) == 0:\n            return \"YES\"\n        if lst1[0]!= lst2[0]:\n            return \"NO\"\n        if len(lst1) == 1 and lst1[0] == 0:\n            return \"YES\"\n        if len(lst1) == 1 and lst1[0] == 1:\n            return \"YES\"\n        index = 0\n        while index < len(lst1) and index < len(lst2):\n            if lst1[index]!= lst2[index]:\n                return \"NO\"\n            else:\n                index = index + 1\n        return \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    charDict = dict()\n    for ch in test:\n        if ch in charDict:\n            charDict[ch] += 1\n        else:\n            charDict[ch] = 1\n    charDict = sorted(charDict.items(), key=operator.itemgetter(1), reverse=True)\n    return {char:count for char,count in charDict}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    letters_dict = {}\n    for char in test:\n        if char not in letters_dict:\n            letters_dict[char] = 0\n        letters_dict[char] += 1\n    max_val = max(letters_dict.values())\n    for key in letters_dict:\n        if letters_dict[key] == max_val:\n            return {key: letters_dict[key]}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Replace this with your code\n    hist = {}\n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 0\n        hist[letter] += 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    letters = {}\n    for letter in test.lower():\n        if letter in letters:\n            letters[letter] += 1\n        else:\n            letters[letter] = 1\n    return letters\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    histogram = {}\n    \n    for letter in test:\n        if letter not in histogram:\n            histogram[letter] = 0\n        histogram[letter] += 1\n    \n    return histogram\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Create dict of letters and counts\n    hist_dict = {}\n    # Count\n    count = 0\n    # Loop through string\n    for i in test:\n        # Add to dict if letter is in dict\n        if i in hist_dict:\n            # Increment count\n            count += 1\n        # Reset dict\n        else:\n            # Add to dict\n            hist_dict[i] = 1\n    # Return dictionary\n    return hist_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    test = test.lower().replace(\" \", \"\").replace(\"  \", \"\").replace(\" \", \"\")\n    test = set(test.split(\" \"))\n    return dict(Counter(test).most_common()[:-1])"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    counts = {}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    d = {}\n    for letter in test.lower():\n        d[letter] = d.get(letter, 0) + 1\n    return d\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    letters = {}\n    for i in test:\n        if i in letters:\n            letters[i] += 1\n        else:\n            letters[i] = 1\n    return letters\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s,c,res=s[:c]+s[c+1:],c,s\n    if s==c:\n        return s,False\n    else:\n        res=reverse_delete(s,c+1)\n        if res==s:\n            return res,False\n        else:\n            return res,True\ndef reverse_insert(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to insert all the characters in s after the\n    character c in the other string. The result should be the new string after the insertion.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be \"bcdeea\".\n    For s = \"abcdef\", c = \"b\", the result should be \"bcddef\".\n    For s = \"abcdedcba\", c = \"ab\", the result should be \"abcdedcba\".\n    \"\"\"\n    s,c,res=s[:c]+s[c+1:],c,s\n    if s==c:\n        return s,False\n    else:\n        res=reverse_insert(s,c+1)\n        if res==s:\n            return res,False\n        else:\n            return res,True\ndef reverse_insert2(s,c):\n    \"\"\"Task\n    We are given two strings s and c, we have to insert all the characters in s after\n    the character c in the other string.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be \"bcdeab\".\n    For s = \"abcdef\", c = \"b\", the result should be \"bcdefab\".\n    For s = \"abcdedcba\", c = \"ab\", the result should be \"abcdedcba\".\n    \"\"\"\n    s,c,res=s[:c]+s[c+1:],c,s\n    if s==c:\n        return s,False\n    else:\n        res=reverse_insert2(s,c+1)\n        if res==s:\n            return res,False\n        else:\n            return res,True\ndef reverse_insert3(s,c):\n    \"\"\"Task\n    We are given two strings s and c, we have to insert all the characters in s after\n    the character c in the other string.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be \"abcdeab\".\n    For s = \"abcdef\", c = \"b\", the result should be \"abcdefab\".\n    For s = \"abcdedcba\", c = \"ab\", the result should be \"abcdedcba\".\n    \"\"\"\n    s,c,res=s[:c]+s[c+1:],c,s\n    if s==c:\n        return s,False\n    else:\n        res=reverse_insert3(s,c+1)\n        if res==s:\n            return res,False\n        else:\n            return res,True\ndef reverse_insert4(s,c):\n    \"\"\"Task\n    We are given two strings s and c, we have to insert all the characters in s after\n    the character c in the other string.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be \"abcdeab\".\n    For s = \"abcdef\", c = \"b\", the result should be \"abcdefab\".\n    For s = \"abcdedcba\", c = \"ab\", the result should be \"abcdedcba\".\n    \"\"\"\n    s,c,res=s[:c]+s[c+1:],c,s\n    if s==c:\n        return s,False\n    else:\n        res=reverse_insert4(s,c+1)\n        if res==s:\n            return res,False\n        else:\n            return res,True\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst = []\n    for i in s:\n        if i not in lst:\n            lst.append(i)\n    result = ()\n    for i in lst:\n        if i!= c:\n            result = result + (i,True)\n        else:\n            result = result + (i,False)\n    return result\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Use a temporary stack\n    tempStack = []\n    # initialize variables for starting with the result\n    flag = True\n    for i in range(len(s)-1,-1,-1):\n        # if the character in the string is equal to the character in the stack, we add to the stack\n        if s[i] == c:\n            tempStack.append(i)\n        # If we reach the end of the string, we add the character to the temporary stack\n        elif s[i]!= c:\n            # If the character is equal to the character in the stack, we delete it\n            if len(tempStack)!= 0:\n                tempStack.pop()\n            # If the character in the stack is equal to the character in the string, we add the character to the stack again\n            else:\n                flag = False\n            # add the character to the temporary stack\n            tempStack.append(s[i])\n    # If there are a few characters in the stack, then we return the result tuple\n    if len(tempStack)!= 0:\n        return (\"\".join(tempStack), flag)\n    # If there are no characters in the stack, then we return the result tuple\n    else:\n        return (\"\", flag"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    reverse = s[::-1]\n    if c==reverse:\n        return (reverse,\"True\")\n    return (reverse,\"False\")\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def palindrome(string):\n        # take the first and last letters as they may have a different length\n        first = string[0]\n        last = string[-1]\n        string.replace(first, '', 1)\n        string.replace(last, '', 1)\n        print(string)\n        reverse_string = ''.join(reversed(string))\n        if reverse_string == string:\n            return string, True\n        else:\n            return string, False\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = ''\n    palin = False\n    for i in range(len(s) - 1):\n        if s[i] == c:\n            palin = True\n            if i == 0:\n                result += c\n            else:\n                result += s[i-1]\n    return (result, palin)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # check for the solution\n    if s == c:\n        return (\"\",False)\n    \n    # check for palindrome\n    if check_palindrome(s, c):\n        return (\"\",True)\n    \n    # reverse string\n    return (reverse_delete(s[1:],c),reverse_delete(s,c[1:]))\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if c not in s:\n        return s,False\n    s = s[s.index(c) + 1:len(s)]\n    return s,True\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = \"\"\n    i = 0\n    while i < len(s):\n        # print(s[i], c[i])\n        if s[i] == c[i]:\n            i+=1\n            continue\n        result += s[i]\n        i+=1\n    if check(result):\n        return (result, True)\n    else:\n        return (result, False)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result=[]\n    i=0\n    while i < len(s):\n        if s[i]==c:\n            result.append(s[i:i+len(c)])\n            i+=len(c)\n        else:\n            i+=1\n            \n    if result==[]:\n        return ('',False)\n    else:\n        return (s[len(s)-len(result):-len(result)],result==s[len(s)-len(result):-len(result)])\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    count = {}\n    for i in lst:\n        s = 0\n        for j in i:\n            if j.isdigit():\n                s += 1\n        count[s] = count.get(s,0) + 1\n    for i in count:\n        if count[i] % 2!= 0:\n            result.append(\"the number of odd elements \" + str(count[i] / 2) + \" the str\" + str(i) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]) + \" of \" + str(count[i]"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst.sort()\n    cnt = [0]\n    for i in lst:\n        if i[0] in ['0', '1']:\n            cnt[int(i[1])] += 1\n    for i in range(len(cnt) - 2, -1, -1):\n        if cnt[i] % 2 == 1:\n            cnt[i] += 1\n            break\n    return ['the number of odd elements {}n the str{} of the {}nput.'.format(i+1, i+1, i+1) for i in cnt]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [f\"the number of odd elements {i} the str{i}\" + \" \" + str(odd) for i, odd in enumerate(lst)]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    strs = [str(i) for i in lst]\n    num_odd = len(strs) - (len(strs) % 2)\n    odd_strs = [str(strs[i]) for i in range(len(strs) - num_odd)]\n    odd_strs = \" \".join(odd_strs)\n    return [odd_strs]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    answer = []\n    for i in lst:\n        if i.isdigit():\n            answer.append(int(i))\n    return answer\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    odd = 0\n    for i in lst:\n        if i.isdigit():\n            odd += 1\n    return f\"the number of odd elements {odd}\"\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # note: in the string list, number of odd is now the first index of a non-empty string\n    # this is the reason for the first index of a non-empty string\n    # the reason for the last index of a non-empty string is the reason why the list is the input\n    # the reason why the first index of a non-empty string is the reason why the last index of a non-empty string\n    # it's the reason why the first index of a non-empty string is the reason why the last index of a non-empty string\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    counter = {}\n    for item in lst:\n        for char in item:\n            if char not in counter:\n                counter[char] = 0\n            counter[char] += 1\n    \n    if len(lst) == 1:\n        return [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"]\n    else:\n        return [\"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst = list(map(str, lst))\n    odd = [x for x in lst if x.isdigit()]\n    lst.sort()\n    return [x.replace('.', '0') for x in lst if x in odd]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    \n    count = []\n    for string in lst:\n        for digit in string:\n            if digit == \"0\":\n                count.append(len(string))\n    \n    return count\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not nums: return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    d = {}\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] not in d:\n            d[nums[i]] = []\n        d[nums[i]].append(i)\n        \n    for key, value in d.items():\n        if len(value) > 0:\n            if min_sum >= 0:\n                min_sum = min_sum + key\n            else:\n                min_sum = key\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(nums) == 1:\n        return nums[0]\n    if not nums:\n        return 0\n    \n    curSum = nums[0]\n    minSubArray = nums[0]\n    \n    # Calculate the minimum sum sub array, i.e. the smallest\n    # non-negative number that's greater than the current sum\n    for i in range(1, len(nums)):\n        curSum += nums[i]\n        if curSum >= minSubArray:\n            # curSum is now greater than or equal to minSubArray, so\n            # we need to keep the smallest subArray\n            minSubArray = curSum\n    return minSubArray"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_sum, current_sum = 0, 0\n    min_sum = None\n    \n    for num in nums:\n        current_sum += num\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        if min_sum is None or current_sum - min_sum >= min_sum:\n            min_sum = current_sum - min_sum\n        \n    return max_sum"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    minSubArraySum = float('inf')\n    for i in range(len(nums)):\n        curSum = 0\n        for j in range(i, len(nums)):\n            curSum += nums[j]\n            if curSum < 0:\n                curSum = 0\n            elif curSum > minSubArraySum:\n                minSubArraySum = curSum\n    return minSubArraySum\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    window_sum = float('inf')\n    ans = 0\n    for num in nums:\n        window_sum = min(window_sum - num, num)\n        ans = max(ans, window_sum)\n    return ans if ans!= float('inf') else 0\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    min_sum = float(\"inf\")\n    cur_sum = 0\n    n = len(nums)\n    for i in range(n):\n        cur_sum += nums[i]\n        if cur_sum < 0:\n            cur_sum = 0\n        if cur_sum > min_sum:\n            min_sum = cur_sum\n    return min_sum if min_sum!= float(\"inf\") else -1\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    summ = 0\n    l = 0\n    r = 0\n    s = float('inf')\n    for i in range(len(nums)):\n        summ += nums[i]\n        if(summ < s):\n            s = summ\n            l = i\n            r = i\n    return (s-summ)/(l-r+1)\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    cur_sum = 0\n    result = float(\"inf\")\n    for num in nums:\n        cur_sum += num\n        if cur_sum < result:\n            result = cur_sum\n    return result\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    cur_sum = 0\n    min_sum = float('inf')\n    for num in nums:\n        if cur_sum + num > 0:\n            cur_sum += num\n        else:\n            cur_sum = num\n        if cur_sum + num < 0:\n            cur_sum = 0\n            \n        min_sum = min(min_sum, cur_sum)\n    return min_sum\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    import sys\n    from math import sqrt\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # The next few lines (start with line 4)\n    # can be recycled\n    # We can either find the leftmost bucket, or we can build a new grid, that is \n    # a grid of the same length as our current grid. The grid grows one more time step\n    # to enlarge the bucket, and we have a new grid.\n    \n    # The next few lines (start with line 5)\n    # can be recycled\n    # We can add any number of buckets\n    # We can extend the grid to the number of buckets we want, given the new grid\n    # if it exceeds the capacity\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    grid = fill_grid(grid)\n    n = len(grid)\n    max_arr = [0] * n\n    ans = 0\n    # set up buckets\n    buckets = [[] for i in range(n)]\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #Calculate the vertical area of the grid.\n    #We're using the helper functions below to calculate the vertical area. \n    #We'll use a helper function for a simpler version.\n    \n    #Return the number of times we need to lower the buckets.\n    def get_top_down(grid, bucket_capacity):\n        \"\"\"\n        Helper function for get_top_down.\n        This function is the bottom-up recursion function.\n        \n        We return the current value of the current bucket.\n        \"\"\"\n        #Define the vertical area of the grid.\n        #Return the vertical area.\n        #Initialize the vertical area with the top-down value of the current bucket.\n        #Check if the bucket capacity is exceeded.\n        #We'll continue to calculate the vertical area by checking the\n        #next row and column for when the bucket capacity is exceeded.\n        #Return the top-down value of the current bucket.\n        \n        #For example, for grid :\n        #grid = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        #    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        #    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        #    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        #    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        #    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        #    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        #    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        #    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        #    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        #    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        #    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\n        #\n        #Vertical area = (1 + 2 + 3 + 4) = 5.\n        #\n        #We'll store the sum of the vertical area for each row.\n        #\n        #For example, for the grid :\n        #grid = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n        "
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    m = len(grid)\n    n = len(grid[0])\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def count(grid, bucket_capacity):\n        if len(grid) == 1:\n            return bucket_capacity\n        \n        # grid has N rows and 1 column\n        col = len(grid[0])\n        \n        # get the maximum capacity for each row\n        row_max = [count(grid[i], bucket_capacity) for i in range(len(grid))]\n        \n        # get the maximum capacity for each column\n        column_max = [count([grid[j][i] for j in range(len(grid))], bucket_capacity) for i in range(col)]\n        \n        # find the maximum capacity for each column\n        for row_j in range(len(grid)):\n            for column_i in range(col):\n                if row_max[row_j] <= column_max[column_i]:\n                    row_max[row_j] = column_max[column_i]\n        \n        # get the maximum capacity for each row\n        for row_i in range(len(grid)):\n            for column_j in range(len(grid[0])):\n                if row_max[row_i] <= column_max[column_j]:\n                    column_max[column_j] = row_max[row_i]\n        \n        # get the maximum capacity for each column\n        for column_i in range(col):\n            for row_j in range(len(grid)):\n                if column_max[column_i] <= row_max[row_j]:\n                    row_max[row_j] = column_max[column_i]\n        \n        # get the maximum capacity for each column\n        for column_j in range(col):\n            for row_i in range(len(grid)):\n                if row_max[row_i] <= column_max[column_j]:\n                    column_max[column_j] = row_max[row_i]\n        \n        # get the maximum capacity for each row\n        for row_i in range(len(grid)):\n            for column_j in range(len(grid[0])):\n                if row_max[row_i] <= column_max[column_j]:\n                    row_max[column_j] = row_max[row_i]\n        \n        # get the maximum capacity for each column\n        for column_j in range(col):\n            for row_i in range(len(grid)):\n                if row_max[row_i] <= column_max[column_j]:\n                    column_max[column_j] = row_max[row_i]\n        \n        return max([row_max[i] for i in range(len(grid))])\n    \n    \n    total_buckets = count(grid, bucket_capacity)\n    return math.factorial(total_buckets)\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    import math\n    def divide_bucket(grid, capacity):\n        rows, cols = grid.shape\n        #This is the time complexity, we iterate through the \n        # buckets and divide them by the capacity\n        #We do this because we need to add up all of the buckets\n        for row in range(rows):\n            for col in range(cols):\n                if grid[row, col] == 0:\n                    divide_bucket(grid, capacity)\n                    grid[row, col] = 1\n                else:\n                    grid[row, col] = 0\n    \n    def get_empty_buckets(grid, capacity):\n        rows, cols = grid.shape\n        empty_buckets = []\n        #For each row/col in the grid,\n        #Check if we can add any water to it, and if we can, add it to the empty_buckets\n        for row in range(rows):\n            for col in range(cols):\n                if grid[row, col] == 1:\n                    if capacity == 1:\n                        empty_buckets.append((row, col))\n                    else:\n                        #Check if we can add water to the row/col\n                        for x in range(len(empty_buckets)):\n                            # If the current bucket fits the capacity requirement, we'll add it\n                            if 0 < x < len(empty_buckets):\n                                if empty_buckets[x][0] < row:\n                                    # If the current bucket doesn't fit the capacity requirement, we'll add it\n                                    if empty_buckets[x][1] < col:\n                                        # If the current bucket fits the capacity requirement, we'll add it\n                                        if 0 < x < len(empty_buckets):\n                                            # If the current bucket fits the capacity requirement, we'll add it\n                                            if empty_buckets[x][0] < row and empty_buckets[x][1] < col:\n                                                empty_buckets.append((row, col))\n                                        else:\n                                            # If the current bucket doesn't fit the capacity requirement, we'll add it\n                                            if empty_buckets[x][1] < col:\n                                                empty_buckets.append((row, col))\n                                            # If the bucket fits the capacity requirement, we'll add it\n                                            if empty_buckets[x][0] < row and empty_buckets[x][1] < col:\n                                                empty_buckets.append((row, col))\n                                    else:\n                                        # If the bucket is too high, we'll add it\n                                        if 0 < x < len(empty_buckets):\n                                            if empty_buckets[x][0] < row and empty_buckets[x][1] < col:\n                                                empty_buckets.append((row, col))\n                                        else:\n                                            # If the bucket is too high, we'll add it\n                                            if 0 < x < len(empty_buckets):\n                                                empty_buckets.append((row, col))\n                                            # If the bucket doesn't fit the capacity requirement, we'll add it\n                                            if empty_buckets[x][1] < col:\n                                                empty_buckets.append((row, col))\n                                        # If the bucket doesn't fit the capacity requirement, we'll add it\n                                        if empty_buckets[x][1] < col:\n                                            empty_buckets.append((row, col))\n                                            # If the bucket fits the capacity requirement, we'll add it\n                                            if empty_buckets[x][0] < row and empty_buckets[x][1] < col:\n                                                empty_buckets.append((row, col))\n                                        # If the bucket doesn't fit the capacity requirement, we'll add it\n                                        elif empty_buckets[x][1] < col:\n                                            empty_buckets.append((row, col))\n                                            # If the bucket doesn't fit the capacity requirement, we'll add it\n                                            if empty_buckets[x][0] < row and empty_buckets[x][1] < col:\n                                                empty_buckets.append((row, col))\n                                                # If the bucket fits the capacity requirement, we'll add it\n                                            if empty_buckets[x][1] < col:\n                                                empty_buckets.append((row, col))\n                                "
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    import heapq\n    N = len(grid)\n    if N == 0 or N == 1:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if capacity == 0: return 0\n    if len(grid) == 0: return 0\n    dp = []\n    for i in range(len(grid)):\n        dp.append(grid[i].copy())\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    if arr is None or len(arr) == 0:\n        return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def bit_sort(arr, mask):\n        \"\"\"\n        In this function, the array is sorted by mask value, i.e. the first bits are\n        sorted by their mask value and the other bits are sorted by their mask value\n        to achieve a sorted array.\n        \"\"\"\n        bit_len = len(mask)\n        mask_count = [x for x in mask]\n        pos = bit_len\n        mask_count.sort()\n        for i in range(bit_len):\n            if mask_count[i]!= 1:\n                pos -= 1\n                continue\n            for j in range(bit_len):\n                if mask_count[j] == 1:\n                    arr[pos], arr[j] = arr[j], arr[pos]\n                    pos += 1\n                    break\n                if j == bit_len - 1:\n                    arr[pos], arr[-1] = arr[-1], arr[pos]\n                    pos += 1\n        return arr\n    mask = []\n    for i in arr:\n        mask.append(i % 2)\n    return bit_sort(arr, mask)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    arr_ = sorted(arr)\n    print(arr_)\n    arr_sorted = []\n    for i in arr_:\n        if i == 0:\n            arr_sorted.append(i)\n        else:\n            arr_sorted.append(i//2)\n            arr_sorted.append(i%2)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for i in range(len(arr)):\n        nums = [int(b) for b in str(arr[i])]\n        nums.sort()\n        result.append(nums[-1])\n        arr[i] = result[-1]\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    ar = []\n    for i in range(0, len(arr)):\n        ar.append(bin(arr[i]).replace(\"0b\", \"\"))\n    ar.sort(key=lambda x: [int(i, 2) for i in x])\n    return ar\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    def count_ones(arr):\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] == 1:\n                count += 1\n        return count\n    \n    def binary_search(arr, l, r):\n        if r >= l:\n            mid = l + (r - l) // 2\n            if arr[mid] == 1:\n                return mid\n            elif arr[mid] == 0:\n                return binary_search(arr, l, mid - 1)\n            elif arr[mid] == 2:\n                return binary_search(arr, mid + 1, r)\n    \n    def sort_dec(arr):\n        \"\"\"\n        In this implementation, we sort according to the decimal value of every\n        element in the array.\n        \"\"\"\n        \n        def sort(arr):\n            mid = binary_search(arr, 0, len(arr) - 1)\n            return sorted(arr[mid:mid + 2]) + sorted(arr[:mid])\n        \n        return sort(arr)\n    \n    return sort_dec(arr)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    output = []\n    for i in range(len(arr)):\n        count = 0\n        for j in range(len(str(arr[i]))):\n            if arr[i] & (1 << j):\n                count += 1\n        output.append(count)\n    return output\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Write your code here\n    count = 0\n    for x in arr:\n        count += int(bin(x).count('1'))\n    #count = count // 2\n    for i in range(count//2):\n        #print(i)\n        idx = count // 2\n        for x in arr:\n            if x > idx:\n                arr.append(x)\n                break\n        count = idx\n    arr.sort()\n    return arr\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: Write your solution here\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return []\n    else:\n        arr_size = len(arr)\n        res = [0] * arr_size\n        count = 0\n        for i in arr:\n            if count == 0:\n                res[count] = i\n                count += 1\n            else:\n                res[count] = i\n                count += 1\n        return res\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [word for word in s.split() if len(word) >= n]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if s == \"\":\n        return []\n    s = s.lower()\n    s = s.split()\n    res = []\n    for word in s:\n        cnt = 0\n        for c in word:\n            if c.isdigit() == False:\n                break\n            cnt += 1\n        if cnt == n:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #create empty list\n    words = []\n    #for every letter in string s\n    for letter in s:\n        #if the letter is a letter or is an empty string\n        if letter not in \"aeiouAEIOU\":\n            #add it to the list\n            words.append(letter)\n    #add every word in the list to the list\n    for word in words:\n        for letter in word:\n            if letter not in \"aeiouAEIOU\":\n                words.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    words = []\n    for i in s:\n        if i in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]:\n            words.append(i)\n        else:\n            return words\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if n < 2:\n        return []\n    \n    letter_count = 0\n    word_list = []\n    \n    for word in s:\n        if word.isalpha():\n            letter_count += 1\n        elif word.isspace():\n            if letter_count < n:\n                word_list += select_words(word, n - letter_count)\n        else:\n            word_list += [word]\n            \n    return word_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # define empty list\n    words = []\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # If s is empty return empty list\n    if len(s) == 0:\n        return []\n    \n    # If s contains only single letters return empty list\n    if len(set(s)) == 1:\n        return []\n    \n    # For each letter in s return list of the other letters\n    # If a letter is present in s but not in s's list of letters return empty list\n    # Otherwise return the words of the other letters in s\n    words = []\n    for letter in s:\n        if letter in s and letter not in words:\n            words.extend(select_words(s, n-1))\n        elif letter not in s:\n            words.append(letter)\n    return words\n    \n    \ndef main():\n    print(select_words(\"aabaa\", 3))\n    print(select_words(\"\", 0))\n    print(select_words(\"m\", 1))\n    print(select_words(\"a\", 0))\n    print(select_words(\"a\", 1))\n    print(select_words(\"a\", 2))\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s) == 0:\n        return []\n    res = []\n    for i in range(len(s) - n + 1):\n        if s[i:i + n] not in res:\n            res.append(s[i:i + n])\n    return res\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if s == \"\":\n        return []\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Build a dictionary of vowels and a list of words\n    vowels = set(\"aeiouAEIOU\")\n    letters = set(\"abcdefghijklmnopqrstuvwxyz\")\n    # Build a set of words that contain the vowels\n    vowels_set = set(vowels)\n    vowels_list = []\n    for i in s:\n        if i not in vowels_set:\n            vowels_list.append(i)\n    return vowels_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # return word[0]\n    for i in range(len(word)):\n        if word[i] in ['a','e','i','o','u','A','E','I','O','U']:\n            return word[0:i] + word[i+1:]\n    return \"\"\n    \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # create empty string to store the closest vowel\n    closest_vowel = \"\"\n    \n    # find the closest vowel (there might be only one, therefore, only check the 1st char)\n    for char in word:\n        if char in VOWELS:\n            continue\n        # if it's a consonant, add it to the closest vowel\n        if char not in VOWELS:\n            closest_vowel += char\n            \n    # if closest vowel is not empty, return it\n    if closest_vowel!= \"\":\n        return closest_vowel\n    else:\n        # return empty string if the word doesn't contain vowels\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    last_vowel = ''\n    for i in range(len(word) - 1):\n        if word[i] not in VOWELS:\n            return last_vowel\n        if word[i] == word[i + 1]:\n            continue\n        if word[i]!= word[i + 1] and last_vowel == word[i]:\n            return last_vowel\n        last_vowel = word[i]\n    return last_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_vowel_length = 0\n    vowels = \"aeiouAEIOU\"\n    \n    for i in range(len(word)):\n        left_side = word[:i]\n        right_side = word[i+1:]\n        \n        # when we found a consonant\n        if left_side in vowels or right_side in vowels:\n            left_consonant = left_side[0]\n            right_consonant = right_side[0]\n            \n            if left_consonant == right_consonant:\n                continue\n            \n            if len(left_consonant) < len(right_consonant):\n                left_consonant, right_consonant = right_consonant, left_consonant\n            \n            # count the length\n            if len(left_consonant) > max_vowel_length:\n                max_vowel_length = len(left_consonant)\n                \n        # when we found a vowel\n        else:\n            # count the length\n            if len(left_side) > max_vowel_length:\n                max_vowel_length = len(left_side)\n            if len(right_side) > max_vowel_length:\n                max_vowel_length = len(right_side)\n    \n    # empty string if you didn't find any vowel\n    if max_vowel_length == 0:\n        return \"\"\n    \n    return word[max_vowel_length-1]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(word) <= 2:\n        return \"\"\n    elif word[0] == word[-1]:\n        return word[0]\n    else:\n        return word[-1]\n    \ndef get_closest_consonant(word):\n    \"\"\"You are given a word. Your task is to find the closest consonant that stands between \n    two vowels from the left side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any consonant met the above condition. \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    short_vowels = []\n    long_vowels = []\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # find longest consonant\n    longest_consonant = \"\"\n    for i in range(1, len(word)-1):\n        if word[i-1] == word[i] or word[i+1] == word[i]:\n            longest_consonant = word[i]\n        else:\n            break\n    # find closest vowel\n    for i in range(1, len(word)-1):\n        if word[i-1]!= word[i] and word[i+1]!= word[i] and word[i-2]!= word[i] and word[i+2]!= word[i]:\n            break\n    if len(longest_consonant) < len(word)-1:\n        return longest_consonant\n    else:\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    # go left\n    # for letter in word:\n    #     if letter in vowels:\n    #         left = word.index(letter)\n    #         right = left + len(vowels)\n    #         if left < len(word) - 1:\n    #             if word[left + 1] == 'i' or word[left + 1] == 'u':\n    #                 return word[left + 1] + word[left + 2]\n    #             else:\n    #                 return word[left + 1] + word[left + 2] + word[left + 3]\n    #         else:\n    #             return word[left] + word[left + 1]\n    #     else:\n    #         return word[left]\n    \n    # go right\n    # for letter in word:\n    #     if letter in vowels:\n    #         right = word.index(letter)\n    #         left = right + len(vowels) - 1\n    #         if word[right - 1] == 'i' or word[right - 1] == 'u':\n    #             return word[right - 1] + word[right - 2]\n    #         else:\n    #             return word[right - 1] + word[right - 2] + word[right - 3]\n    #         \n    # return word[right]\n    \n    # go up\n    # for letter in word:\n    #     if letter in vowels:\n    #         right = word.index(letter)\n    #         left = right - 1\n    #         if word[right - 1] == 'e' or word[right - 1] == 'I':\n    #             return word[right - 1] + word[right - 2]\n    #         else:\n    #             return word[right - 1] + word[right - 2] + word[right - 3]\n    #     else:\n    #         return word[right]\n    \n    # go down\n    # for letter in word:\n    #     if letter in vowels:\n    #         right = word.index(letter)\n    #         left = right + 1\n    #         if word[right - 1] == 'e' or word[right - 1] == 'I':\n    #             return word[right - 1] + word[right - 2]\n    #         else:\n    #             return word[right - 1] + word[right - 2] + word[right - 3]\n    #         \n    # return word[right]\n    \n    # go down\n    # for letter in word:\n    #     if letter in vowels:\n    #         right = word.index(letter)\n    #         left = right + 1\n    #         if word[right - 1] == 'e' or word[right - 1] == 'I':\n    #             return word[right - 1] + word[right - 2]\n    #         else:\n    #             return word[right - 1] + word[right - 2] + word[right - 3]\n    #         \n    # return word[right]\n    \n    # go down\n    # for letter in word:\n    #     if letter in vowels:\n    #         right = word.index(letter)\n    #         left = right + 1\n    #         if word[right - 1] == 'i' or word[right - 1] == 'u':\n    #             return word[right - 1] + word[right - 2]\n    #         else:\n    #             return word[right - 1] + word[right - 2] + word[right - 3]\n    #         \n    # return word[right]\n    \n    # go down\n    # for letter in word:\n    #     if letter in vowels:\n    #         right = word.index(letter)\n    #         left = right + 1\n    #         if word[right - 1] == 'e' or word[right - 1] == 'I':\n    #             retur"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    vowels = set('aeiouAEIOU')\n    \n    first, last = word[0], word[-1]\n    vowels_delta = 0\n    for i in range(1, len(word)):\n        if word[i] in vowels:\n            vowels_delta += 1\n    if vowels_delta > 0:\n        return ''\n    \n    vowels_delta = 0\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            vowels_delta += 1\n    if vowels_delta > 0:\n        return ''\n    \n    return first + last\n        \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Your code here\n    vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    index = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            index.append(i)\n        elif word[i] not in vowels and word[i-1] in vowels:\n            index.append(i)\n            index.append(i-1)\n    vowel_to_check = vowels[index[0]]\n    vowel_to_check_left = vowels[index[1]]\n    for i in range(len(vowels) - 2):\n        vowel_to_check = vowels[i]\n        vowel_to_check_left = vowels[i]\n        for j in range(i+1, len(vowels)):\n            vowel_to_check_left = vowels[j]\n            if vowel_to_check == word[i]:\n                vowel_to_check_left = vowels[j]\n            else:\n                break\n        if vowel_to_check == word[len(word)-1] and vowel_to_check_left == word[len(word)-1]:\n            return \"\"\n    return vowels[vowel_to_check_left]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    def is_valid(s):\n        # Counts the number of open parentheses\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n        \n        # Counts the number of close parentheses\n        if count == 0:\n            return True\n        else:\n            return False\n    \n    return is_valid(lst)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    stack = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == '(':\n            stack.append(')')\n        elif lst[i] == ')':\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # open=True; close=False\n    open=True; close=False\n    # open=True; close=True\n    # open=True; close=True\n    # open=True; close=False\n    # open=True; close=True\n    # open=True; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=False; close=False\n    # open=False; close=True\n    # open=Fals"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return all(paren in ')' * (paren in '(') for paren in lst)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # sort the list by parentheses\n    lst.sort()\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def check_paren(string):\n        count = 0\n        for i in string:\n            if i == '(':\n                count += 1\n            if i == ')':\n                count -= 1\n        if count == 0:\n            return True\n        else:\n            return False\n    def is_balanced(string):\n        count = 0\n        for i in string:\n            if i == '(':\n                count += 1\n            if i == ')':\n                count -= 1\n        if count == 0:\n            return True\n        else:\n            return False\n    def is_good(string):\n        count = 0\n        for i in string:\n            if i == '(':\n                count += 1\n            if i == ')':\n                count -= 1\n        if count == 0:\n            return True\n        else:\n            return False\n    s_1 = ['()', '()()']\n    s_2 = ['(()())', '()))']\n    s_3 = ['((())', '())()']\n    s_4 = ['((()()))', '()))()']\n    s_5 = ['((()()))(())', '(())())']\n    s_6 = ['((()())())((()))', '(())()()()()()']\n    s_7 = ['((()())())((()))((())())', '()))()()()()((())()()()()((())')]\n    s_8 = ['((()())())((())())((()))', '(()())()()()()())(())()()()((())')]\n    s_9 = ['((((()()())((())))(())())', '((()())()()())(()))()()()()((()))()()()()()((())')]\n    sn"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # your code here\n    return\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def check(s):\n        # 1. Base case, we can do this.\n        if len(s) == 0: return True\n        if len(s) == 1: return check(s[1:])\n        # 2. Recursion:\n        if s[0] == '(' or s[-1] == ')': return False\n        # 3. Recursion with tracking:\n        return check(s[1:-1]) and check(s[1:])\n    return check(lst)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Brute force\n    n = len(lst)\n    for i in range(n):\n        if lst[i] == '(':\n            lst[i] = ')'\n        elif lst[i] == ')':\n            lst[i] = '('\n        else:\n            return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return check_balanced(lst)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if k > len(arr):\n        return arr\n    return max_sorted(arr, k)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    left, right = 0, len(arr) - 1\n    curr = arr[0]\n    max = arr[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Time: O(n * k * sqrt(n))\n    # Space: O(n)\n    # Approach:\n    # I chose to use this approach, which means use recursion to solve the problem.\n    # So the complexity of the overall algorithm is O(n * k * sqrt(n))\n    # where n is the length of the array,\n    # and k is the length of the recursive call.\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    arr.sort()\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(arr) < k:\n        return []\n    if len(arr) == k:\n        return [arr[0]]\n    if len(arr) == 1:\n        return arr\n    arr.sort()\n    j = k - 1\n    for i in range(k - 1):\n        if arr[i] + arr[i + 1] > arr[j]:\n            j -= 1\n        else:\n            break\n    return arr[:j]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return []\n    elif k == 0:\n        return sorted(arr)\n    elif k == 1:\n        return sorted(arr, reverse = True)\n    else:\n        new_arr = []\n        index = 0\n        arr_len = len(arr)\n        while index < arr_len:\n            if index + k <= arr_len:\n                new_arr.append(arr[index])\n                index = index + 1\n            else:\n                new_arr.append(arr[index])\n                index = index + k\n        new_arr = sorted(new_arr)\n        return new_arr\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # O(n)\n    # O(n)\n    # Time: O(n)\n    # Space: O(1)\n    def helper(arr, k):\n        if k < 0: return arr\n        if k == 0: return arr[0]\n        max1 = arr[0]\n        i = 1\n        while i < len(arr):\n            if arr[i] > max1:\n                max1 = arr[i]\n            i += 1\n        return max1\n    # return helper(arr, k)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max_arr = []\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if arr[j] > arr[i]:\n                max_arr.append(arr[j])\n    max_arr.sort()\n    return max_arr[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    arr = sorted(arr)\n    if k == 0:\n        return arr\n    elif k == 1:\n        return [arr[0]]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Time: O(n^2)\n    # Space: O(1)\n    if not arr:\n        return []\n    \n    min_index = 0\n    max_index = len(arr) - 1\n    \n    while min_index <= max_index:\n        mid = (min_index + max_index) // 2\n        if k > mid:\n            min_index = mid + 1\n        else:\n            max_index = mid - 1\n    \n    return arr[mid]\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    odd=0\n    even=0\n    for i in lst:\n        if(i%2==0):\n            odd+=i\n        else:\n            even+=i\n    return even+odd\n    \n    "
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n    \n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    odd = []\n    even = []\n    for x in lst:\n        if (x%2) == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    odd_lst = [i for i in lst if i % 2!= 0]\n    return sum(odd_lst)\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = sum(list(map(lambda x : (x % 2), lst)))\n    return s\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum=0\n    l=len(lst)\n    for i in range(0,l,2):\n        if i%2==0:\n            sum+=lst[i]\n    return sum\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum([a for a in lst if a%2==1])"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    \n    for i in lst:\n        if i % 2 == 0:\n            result += i\n    return resul"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    odd = []\n    even = []\n    for i in lst:\n        if i % 2 == 0:\n            odd.append(i)\n        else:\n            even.append(i)\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even = 0\n    odd = 0\n    for i in lst:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even - odd\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # first we'll sort the elements\n    arr = sorted(arr)\n    # now we'll keep track of the first k elements\n    first_k = []\n    for i in arr:\n        if len(str(i)) <= k:\n            first_k.append(i)\n    return sum(first_k)\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: complete this function\n    sum = 0\n    for i in range(0, len(arr)):\n        sub = arr[i + 1 : i + k + 1]\n        if len(sub) == k:\n            sum += int(sub[-1])\n        elif len(sub) < k:\n            sum += int(sub[-1])\n        \n    return su"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_num = 0\n    for i in arr:\n        if len(str(i)) < k:\n            continue\n        else:\n            max_num = i\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum(sorted(arr)[:k])\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # 2. \u5206\u6cbb\u6cd5\n    def partition(arr, begin, end):\n        pivot = arr[begin]\n        i = begin\n        for j in range(begin+1, end+1):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n        arr[i], arr[end] = arr[end], arr[i]\n        return i\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    start = 1\n    end = len(arr) - 1\n    \n    while start < end:\n        mid = (start + end) // 2\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    if not arr:\n        return 0\n    \n    tmp = [int(i) for i in str(sum(arr[:k]))]\n    \n    if len(tmp) == 2:\n        return sum(tmp)\n    \n    return add_elements(tmp, k-2)\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    total = 0\n    for num in arr:\n        total += num\n        if total > k:\n            return total - num\n    return -1\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = len(arr)\n    res = []\n    for i in range(n - k + 1):\n        # print(i, \":\", arr[i:i+k])\n        if (i + 2 <= n - k) and arr[i] + arr[i + 2] > arr[i + 1]:\n            res.append(arr[i] + arr[i + 1])\n            # print(\"res =\", res)\n        else:\n            res.append(arr[i])\n    return sum(res)\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum = 0\n    for i in range(0, len(arr)):\n        digit = arr[i]\n        if k > 0:\n            sum += digit\n            k -= 1\n        else:\n            sum += digit\n            break\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Implement this function\n    collatz_sequence = []\n    for i in range(1, n+1):\n        collatz_sequence.append(i)\n        if i % 2 == 0:\n            collatz_sequence.append(i)\n    return collatz_sequence\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not isinstance(n, int): raise TypeError(\"The input must be an integer\")\n    if n < 1: raise ValueError(\"The input must be a positive integer\")\n    if n == 1: return []\n    if n % 2 == 1: return [n // 2] + get_odd_collatz(n // 2)\n    else: return get_odd_collatz(3 * n + 1) + get_odd_collatz(n)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # STEP 1: Initialize variables\n    odd_list = [1]\n    current = odd_list[0]\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # return [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]\n    collatz_seq = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    return [1, n]\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Implement the function!\n    collatz = [1]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            collatz.append(collatz[i // 2] * 2)\n        else:\n            collatz.append(collatz[i // 2] + 1)\n    return collatz\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Create a list with the odd numbers in the sequence\n    odd_list = [1]\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = int(n)\n    a = 1\n    odd_list = [0] * n\n    while a <= n:\n        if a % 2 == 0:\n            odd_list[a//2] = odd_list[a//2] + 1\n        elif a%2 == 1:\n            odd_list[a//2] = 3 * odd_list[a//2] + 1\n        a = a + 1\n    return odd_list\n    \nif __name__ == \"__main__\":\n    print(get_odd_collatz(5))\n    print(get_odd_collatz(3))\n    print(get_odd_collatz(1))\n    print(get_odd_collatz(0))\n    print(get_odd_collatz(7))\n    print(get_odd_collatz(4))\n    print(get_odd_collatz(2))\n    print(get_odd_collatz(1)"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    collatz_sequence = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n <= 0:\n        return []\n    odd_list = []\n    \n    def collatz(n):\n        \"\"\"\n        Perform the Collatz conjecture for a given integer n.\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    m = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n    day = 0\n    month = 0\n    year = 0\n    for c in date:\n        if c.isdigit():\n            try:\n                day = int(c)\n            except:\n                return False\n        elif c in m:\n            month = m.index(c) + 1\n        elif c in [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"] or c.isalpha():\n            if c in [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]:\n                year = year * 10 + int(c)\n            elif c.isdigit():\n                day = day * 10 + int(c)\n            else:\n                return False\n    if day < 1 or day > 30:\n        return False\n    if month < 1 or month > 12:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    try:\n        _, date = date.split('-')\n        date = int(date)\n    except ValueError:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(date) == 0:\n        return False\n    \n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:10])\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not date:\n        return False\n    if not is_valid_date(date):\n        return False\n    if len(date) < 1 or len(date) > 31:\n        return False\n    if not is_month(date) or not is_day(date):\n        return False\n    if not is_valid_day(date, 1, 31):\n        return False\n    if not is_month(date) and not is_valid_day(date, 4, 29):\n        return False\n    if not is_month(date) and not is_valid_day(date, 2, 30):\n        return False\n    if not is_month(date) and not is_valid_day(date, 12, 31):\n        return False\n    if not is_valid_month(date):\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    days = int(date[-2:])\n    if not days.isdigit() or int(days) < 1 or int(days) > 31:\n        return False\n    months = int(date[-3:])\n    if not months.isdigit() or int(months) < 1 or int(months) > 12:\n        return False\n    date = date[:-2]\n    if not date.isdigit():\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    day, month, year = (int(i) for i in date.split('-'))\n    day_valid = month in [1, 3, 5, 7, 8, 10, 12]\n    month_valid = not (month == 4 or month == 6)\n    year_valid = not (year < 2100)\n    return (day_valid and month_valid and year_valid)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(date) > 0 and len(date) == 8 and len(date) <= 31 and len(date) >= 1 and len(date) <= 30 and len(date) <= 29 and len(date) <= 12 and date.isdigit()\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(date) < 1:\n        return False\n    try:\n        int(date)\n        int(date)\n        int(date)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    days = {'1': 31, '2': 28, '3': 31, '4': 30, '5': 31, '6': 30, '7': 31, '8': 31, '9': 30, '10': 31, '11': 30, '12': 31}\n    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lowercase_letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    text_words = txt.split()\n    return [word.lower() for word in text_words if word in lowercase_letters]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [w.lower() for w in re.split(r'(\\s+)', txt) if w]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    lower_str = \"\"\n    for c in txt:\n        if c in \"abcdefghijklmnopqrstuvwxyz\":\n            lower_str += c.lower()\n    return lower_str.split(',')\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    txt = txt.strip().lower()\n    if not txt:\n        return []\n    if \",\" in txt:\n        return [word.strip().lower() for word in txt.split(\",\") if word.strip()]\n    else:\n        return [word.strip().lower() for word in txt.split() if word.strip()]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    words = txt.split(' ')\n    for word in words:\n        if len(word) % 2 == 0:\n            result.append(word[:2])\n        else:\n            result.append(word[:1])\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    import re\n    txt = re.sub('[^a-zA-Z0-9\\s]','',txt)\n    return txt.split(\",\")\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    txt = txt.lower()\n    txt = txt.split(\",\")\n    if len(txt) % 2!= 0:\n        return [txt[i] for i in range(0, len(txt), 2)]\n    else:\n        return [txt[i] for i in range(0, len(txt), 2)]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not isinstance(txt, str):\n        return txt\n    txt = txt.lower()\n    txt = txt.split(' ')\n    if ',' in txt:\n        return txt\n    return txt\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [word.lower() for word in txt.split(',') if word!= '']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    txt = txt.lower()\n    counts = {}\n    words = txt.split(\",\")\n    for w in words:\n        for c in w:\n            if c not in counts:\n                counts[c] = 0\n            counts[c] += 1\n    out = []\n    for key in counts:\n        if counts[key] % 2 == 1:\n            out.append(key)\n    return out\n    \n    \ndef is_subset(str1, str2):\n    '''\n    Given two strings, determine if the two strings are a subset of each other. If any character in the\n    string is not a subset of the other string, it's not a subset. If both string are subsets, the\n    string itself should be a subset too.\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(lst)\n    for i in range(n-1):\n        if lst[i]!= lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) > 1:\n        # Check each item in list\n        for i in range(len(lst) - 1):\n            if lst[i]!= lst[i + 1]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    seen = set()\n    for x in lst:\n        if x in seen:\n            return False\n        seen.add(x)\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    numbers = sorted(lst)\n    for i in range(len(numbers)-1):\n        if numbers[i]!= numbers[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def is_sorted_rec(lst):\n        if len(lst) == 1:\n            return True\n        if lst[0] < lst[1]:\n            return is_sorted_rec(lst[1:])\n        else:\n            return is_sorted_rec(lst[1:]) or is_sorted_rec(lst[2:])\n    return is_sorted_rec(lst)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Declare a list of unique numbers\n    lst = list(set(lst))\n    # Traverse through the list\n    for num in lst:\n        if lst.count(num) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO\n    lst.sort()\n    n = len(lst)\n    for i in range(n - 1):\n        if lst[i]!= lst[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(lst) == 0: return True\n    elif len(lst) == 1: return lst[0] == lst[0]\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # index is a counter in the sorted list\n    # every index is a duplicate, so its no need to be compared\n    index = 0\n    for i in range(1, len(lst)):\n        # compare the current index with next index\n        # if equal, do nothing\n        # if not equal, check next\n        # if not equal, check next\n        # if equal, check next\n        # if not equal, check next\n        # check next\n        if lst[i] == lst[index]:\n            index = index + 1\n        else:\n            return False\n    # if all checks fail, return True\n    return True\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if interval1[0] < interval2[0]:\n        return \"NO\"\n    if interval1[1] > interval2[1]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if (interval1[0] < interval1[1] < interval2[0]) and (interval2[0] < interval2[1] < interval1[1]):\n        return \"YES\"\n    elif interval2[0] < interval1[1] < interval2[1]:\n        return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #write your code here\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # your code goes here\n    def is_prime(num):\n        if num == 1:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    def check(start, end):\n        if start < end:\n            return True\n        else:\n            return False\n    \n    intervals = [(start, end) for start, end in interval1 if check(start, end)]\n    intervals = sorted(intervals)\n    \n    intervals.sort()\n    \n    for start, end in intervals:\n        for i in range(start, end+1):\n            if is_prime(i) and is_prime(i+1):\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # your code\n    return\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # 2: https://leetcode.com/problems/intersection-of-two-intervals/discuss/1740272/Python-O(n)-solution-not-slower\n    \n    # idea:\n    # 1. sort the interval by start and end\n    # 2. for each interval, check if start < end, if not, return \"NO\"\n    # 3. for each interval, check if start > end, if not, return \"NO\"\n    # 4. for each interval, check if end < start, if not, return \"NO\"\n    # 5. for each interval, check if end > start, if not, return \"NO\"\n    \n    # reference: https://leetcode.com/problems/intersection-of-two-intervals/discuss/463739/Python-Solution-with-no-troubles\n    \n    # def check_intersection(interval1, interval2):\n    #     start1, end1 = interval1\n    #     start2, end2 = interval2\n    #     # [start1, end1]\n    #     # [start2, end2]\n    #     # [start1 < end1, end1 < start2]\n    #     # [end1 < end2, start1 > end2]\n    #     # [start2 < end1, end2 < start1]\n    #     # [start2 > end1, end2 > start1]\n    #     # [start1 > end2, end1 < start2]\n    #     # [end1 < end2, start2 > end1]\n    #     # [start1 > end2, end1 < start2]\n    #     # [end2 < end1, start2 > end1]\n    #     # [start1 > end2, end1 < start2]\n    #     # [start2 > end1, end2 > start1]\n    #     # [start2 > end1, end2 > start1]\n    #     # [start1 < end2, start2 < end1]\n    #     # [start1 < end2, end2 < start1]\n    #     # [start2 < end1, end2 < start1]\n    #     # [start1 < end2, end1 < start2]\n    #     # [start2 < end1, end1 < start2]\n    #     # [start1 > end2, start2 < end1]\n    #     # [start2 > end1, end1 < start2]\n    #     # [end2 < end1, end2 < start1]\n    #     # [start1 > end2, end1 < start2]\n    #     # [start1 < end2, end1 > start2]\n    #     # [start2 < end1, end2 > start1]\n    #     # [end1 > end2, end1 < end2]\n    #     # [start1 > end2, end1 > end2]\n    #     # [end1 > end2, end2 < end1]\n    #     # [start1 > end2, end1 < end2]\n    #     # [start2 < end1, end1 < start2]\n    #     # [start2 < end1, end1 > start2]\n    #     # [start1 < end2, end2 < start1]\n    #     # [start2 < end1, end2 < start1]\n    #     # [start1 < end2, end1 < end2]\n    #     # [end1 > end2, end2 < end1]\n    #     # [end1 < end2, end2 < start1]\n    #     # [end2 < end1, end1 < start2]\n    #     # [end2 < end1, end1 > end2]\n    #     # [start1 < end2, end1 < end2]\n    #     # [start2 < end1, end1 < start2]\n    #     # [start2 < end1, end1 < end2]\n    #     return (start1 < end2) and (start2 < end1) or (start1 > end2) and (start2 "
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if (interval1[0] >= interval2[1] or interval1[1] <= interval2[0]):\n        return \"NO\"\n    elif (interval1[0] <= interval2[1] and interval1[1] > interval2[0]):\n        return \"YES\"\n    elif (interval1[1] >= interval2[0] and interval1[0] > interval2[1]):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if (interval1[0] < interval1[1]) or (interval2[0] < interval2[1]):\n        return \"NO\"\n    if abs(interval1[1] - interval2[1]) == 1:\n        return \"YES\"\n    if abs(interval1[0] - interval2[0]) == 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(interval1) == 0 and len(interval2) == 0:\n        return \"NO\"\n    elif len(interval1) == 0:\n        return \"NO\"\n    elif len(interval2) == 0:\n        return \"YES\"\n    elif len(interval1) < len(interval2):\n        return \"NO\"\n    elif len(interval2) < len(interval1):\n        return \"NO\"\n    else:\n        i1 = interval1[0]\n        i2 = interval2[0]\n        j1 = interval1[1]\n        j2 = interval2[1]\n        while i1 < i2:\n            if i1 == i2:\n                return \"NO\"\n            else:\n                i1 = i1 + j1\n                j1 = j1 + i1\n        if i1 == i2:\n            return \"YES\"\n        else:\n            return \"NO\"\ndef isPrime(n):\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef main():\n    list_input = [int(i) for i in input().split()]\n    interval1 = list_input[0]\n    interval2 = list_input[1]\n    answer = intersection(interval1, interval2)\n    print(answer)\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # if the array is empty return None\n    if len(arr) == 0:\n        return None\n    # if the array is not empty return the product\n    elif len(arr) > 0:\n        # if all signs of all numbers in arr are 0 return None\n        if all(arr) == True:\n            return None\n        # initialize result\n        result = 0\n        # iterate over all numbers in arr\n        for i in arr:\n            # if result is less than the magnitude of all signs of all numbers in arr\n            # then update result to multiply all signs together\n            if i > 0:\n                result += i * prod_signs(arr)\n        # if result is less than 0 return None\n        if result == 0:\n            return None\n        # if result is not less than 0 return result\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Using built-in product()\n    # result = []\n    # for x in arr:\n    #     result.append(x * x)\n    #     result.append(x * -x)\n    # return sum(result)\n    # Using recursion\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    return prod_signs(arr[1:]) + prod_signs(arr[:-1])\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum(list(map(lambda x: x*x, arr)))\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #NOTE: I only need to implement this part with recursion\n    if len(arr) == 0:\n        return None\n    else:\n        num = arr[0]\n        for i in range(1,len(arr)):\n            num = (num * arr[i])\n        num = num * -1\n        return num"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return prod_mags(arr, 1)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    ans = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            ans += i\n    return ans\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return None\n    sums = 0\n    for i in arr:\n        if i == 0:\n            return 0\n        elif i == 1:\n            sums += 1\n        elif i == -1:\n            sums -= 1\n    return sum"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(arr)\n    if n == 0:\n        return None\n    res = 0\n    for i in range(n):\n        if arr[i] > 0:\n            res += arr[i] * 1\n        elif arr[i] < 0:\n            res -= arr[i] * -1\n        else:\n            res += arr[i] * 0\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    prod = 1\n    signs = 1\n    for i in arr:\n        prod *= -1 if i==1 else 1\n        signs *= -1 if i==-1 else 1\n    return prod*signs\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    num = 1\n    for i in arr:\n        if i == 1:\n            num = num * 1\n        elif i == -1:\n            num = num * -1\n        else:\n            num = num * i\n    return num\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not grid or not k or not grid[0]:\n        return []\n    n = len(grid)\n    if k < 1:\n        return []\n    path = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if path[i] + grid[i][j] < path[j] + grid[i][j]:\n                    path[i] = path[j] + grid[i][j]\n    return path\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Number of rows and columns\n    n = len(grid)\n    # The value at each row and column\n    # This is to be interpreted as a box of N*N\n    grid_values = [ [grid[i][j] for j in range(n)] for i in range(n)]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # We have to make a new grid with the same dimensions as the grid and each cell has the same value\n    grid = [[0] * i for i in grid]\n    \n    # We have to keep track of the current cell that we are in, since we can go to it again after we find the minimum path\n    current_cell = 0\n    lst_current_cell = [0]\n    \n    # While the current cell has not been visited, we can visit each cell, in other words, with the value of the current cell\n    # We have to keep track of the current cell that we are in, since we can go to it again after we find the minimum path\n    current_cell = 1\n    lst_current_cell = [1]\n    \n    # We take the minimum path as it has to be visited (the last cell)\n    lst_current_cell.append(grid[current_cell][k - 1])\n    \n    # We keep track of the cell that we are in\n    current_cell += 1\n    \n    # We keep going through the cells that have already been visited (the current cell)\n    # We know that if we have to go to a cell that has already been visited, we keep going through\n    # This means that the cell at the end of the list has already been visited\n    while current_cell < len(grid):\n        \n        # We have to check if we have visited the cell we are in\n        if grid[current_cell][k - 1]!= 0:\n            # We have already checked this cell, so we only need to check the current cell of the next row\n            lst_current_cell.append(grid[current_cell][k - 1])\n        \n        # We then check if the current cell has a parent, if so, we need to go to that cell, and recursively update the next cell\n        # since the cell is not visited\n        if grid[current_cell][k - 1]!= 0 and grid[current_cell][k - 1]!= current_cell:\n            \n            # We now have visited the current cell, but we have to look at the cells that have already been visited\n            # since we can go to the next cell\n            lst_current_cell.append(grid[current_cell][k - 1])\n            \n            # We then go to the next cell, and recursively update the cell of the next row\n            current_cell += 1\n        \n        # We then go to the next cell\n        current_cell += 1\n    \n    # We return the ordered list of values we have found\n    return lst_current_cell\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    grid = grid.copy()\n    for i in range(1, len(grid)):\n        grid[i][0] = grid[i][0] - grid[i - 1][0]\n    for j in range(1, len(grid)):\n        grid[0][j] = grid[0][j] - grid[0][j - 1]\n    grid[0][0] = grid[0][0] - grid[0][1]\n    min_path = []\n    for j in range(1, len(grid[0])):\n        min_path.append(grid[0][j])\n        for i in range(1, len(grid)):\n            if grid[i][j]!= grid[i - 1][j]:\n                min_path.append(grid[i][j])\n    return sorted(min_path)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    N = len(grid)\n    if N < 2:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    N = len(grid)\n    if N < 2 or N == k:\n        return grid\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    \n    # Initializing empty paths\n    paths = [[0 for i in range(cols + 1)] for j in range(rows + 1)]\n    \n    # Initialize paths for all cells\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j]!= 0:\n                paths[i + 1][j + 1] = grid[i][j]\n                \n    # Loop through each cell\n    for i in range(1, rows):\n        for j in range(1, cols):\n            # If we see a cell in the current cell (cell[i,j])\n            if grid[i][j]!= 0:\n                # If we have enough values in the cell that we can have a path\n                # to visit it.\n                if k > 0:\n                    # If the cell has already been visited\n                    if paths[i + 1][j + 1] == 0:\n                        # Update the path\n                        # for the cell\n                        # (cell[i,j] -> cell[i+1,j+1])\n                        paths[i + 1][j + 1] = paths[i + 1][j]\n                # If we have enough values in the cell that we can have a path\n                # to visit it.\n                if k > 0 and paths[i + 1][j + 1] > paths[i + 1][j]:\n                    # Update the path\n                    # (cell[i,j] -> cell[i+1,j])\n                    paths[i + 1][j + 1] = paths[i + 1][j]\n                # If we have enough values in the cell that we can have a path\n                # to visit it.\n                if k > 0 and paths[i + 1][j + 1] < paths[i + 1][j]:\n                    # Update the path\n                    # (cell[i,j] -> cell[i+1,j])\n                    paths[i + 1][j + 1] = paths[i + 1][j]\n            # If the cell is empty\n            else:\n                # If we have enough values in the cell that we can have a path\n                # to visit it.\n                if k > 0:\n                    # If we have enough values in the cell that we can have a path\n                    # to visit it.\n                    if paths[i + 1][j + 1] > paths[i + 1][j]:\n                        # Update the path\n                        # (cell[i,j] -> cell[i+1,j+1])\n                        paths[i + 1][j + 1] = paths[i + 1][j]\n                # If we have enough values in the cell that we can have a path\n                # to visit it.\n                if k > 0 and paths[i + 1][j + 1] < paths[i + 1][j]:\n                    # Update the path\n                    # (cell[i,j] -> cell[i+1,j])\n                    paths[i + 1][j + 1] = paths[i + 1][j]\n                    \n    # If we have enough values in the current cell, we are done.\n    if k > 0:\n        # Return the path to the cell we can visit.\n        return paths[rows][cols]\n    # If we have enough values in the current cell, we are done.\n    else:\n        # Return an empty list.\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if k < 2 or len(grid) == 0:\n        return []\n    if k == 1:\n        return [[lst_A[i] for i in range(len(lst_B))]]\n    res = []\n    for i in range(1, len(lst_B) + 1):\n        for j in range(1, len(lst_B) + 1):\n            if lst_B[i - 1] < lst_B[j - 1]:\n                res.append(lst_A[j - 1])\n            else:\n                res.append(lst_B[j - 1])\n    return res + [lst_A[i] for i in range(len(lst_B))] + [lst_A[i] for i in range(len(lst_B), len(lst_B) + 1)]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst_A = [[] for _ in range(len(grid)+1)]\n    lst_B = [[] for _ in range(len(grid)+1)]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def fib(n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [1]\n        else:\n            l = [0]\n            for i in range(1, n):\n                l.append(l[i-1] + l[i-2] + l[i-1] * 2)\n            return l\n    def tri(n):\n        if n < 0:\n            raise ValueError('Negative input')\n        l = fib(n)\n        return l\n    return [i for i in tri(n)]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 2:\n        return [1]\n    else:\n        list1 = [1]\n        for i in range(2, n + 1):\n            list1.append(list1[i - 1] + list1[i - 2] + list1[i - 3])\n        return list1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Since the Tribonacci sequence is a binary sequence,\n    # we don't need to include the remainder in the return list\n    # Therefore we can calculate the left sub-sequence as 3 + 1 + 2 + 8\n    # Therefore, let's return the list of the left sub-sequence.\n    left_list = []\n    for i in range(3, n+1, 2):\n        left_list.append(tri(i))\n    return left_list\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Using fibonacci sequence to get the tribonacci sequence\n    # n = 1\n    # n = 2\n    # n = 3\n    # n = 4\n    # n = 5\n    # n = 6\n    # n = 7\n    # n = 8\n    # n = 9\n    \n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 2, 1]\n    else:\n        tri_nums = [1]\n        for i in range(1, n):\n            tri_nums.append(tri_nums[i - 1] + tri_nums[i - 2])\n        return tri_num"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    if n < 0:\n        return []\n    elif n == 0:\n        result.append(1)\n    elif n == 1:\n        result.append(1)\n    elif n == 2:\n        result.append(2)\n    else:\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def trib(n):\n        \"\"\"\n        Returns a list of the first n + 1 numbers of the Tribonacci sequence.\n        \"\"\"\n        if n == 0:\n            return [1]\n        else:\n            a = 1\n            b = 0\n            c = 0\n            for _ in range(1,n+1):\n                a, b, c = c, a, b + c\n            return [c]\n    \n    return [tri(i+1) for i in range(n+1)]"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if(n < 0):\n        return [0, 1]\n    if(n == 0):\n        return [0]\n    if(n == 1):\n        return [0, 1, 1]\n    if(n == 2):\n        return [0, 1, 1, 2]\n    if(n == 3):\n        return [0, 3, 5, 8]\n    #find the sum of its left numbers\n    sum = 0\n    for i in range(3, n+1):\n        sum += (tri(i-1) + tri(i-2) + tri(i-3))\n    #find the sum of its right numbers\n    return [tri(n-1), sum]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    def tribonacci(n):\n        tri = [1, 3, 2, 8]\n        for i in range(n-2):\n            tri.append((tri[i] + tri[i+1] + tri[i+2]) % 10)\n        return tri\n    \n    return tribonacci(n)"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 2]\n    elif n == 2:\n        return [2, 3, 4]\n    else:\n        return [tri(n-1)+tri(n-2) + tri(n+1)]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if n < 2:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    else:\n        # We have to return the sub list since the recurrence is n == 2,\n        # because if n == 1, it will be tri(2) which is valid,\n        # so it will return [1, 2]\n        return [1] + [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n % 2 == 1:\n        return 0\n    else:\n        return n * digits(n-1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n==0:\n        return 0\n    return n*digits(n-1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n % 2 == 0:\n        return n // 2\n    else:\n        return n % 2"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    odd = 0\n    while n!= 0:\n        if n % 2 == 1:\n            odd += 1\n        n //= 10\n    return odd\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def get_digits(n):\n        digits = []\n        while n > 0:\n            digits.append(n % 10)\n            n //= 10\n        return digits\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    return digits(n-1) * 2\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    num = 0\n    while n > 0:\n        num += n % 10\n        n = n // 10\n    if num % 2 == 1:\n        return num\n    return 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0 or n == 1:\n        return n\n    return digits(n//2)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n % 2 == 0:\n        return 0\n    n = n // 2\n    if n % 2 == 1:\n        return 0\n    return n * digits(n - 1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n % 2!= 0:\n        return 0\n    return n // 2 * digits(n // 2)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    my_string = string.replace('[','').replace(']','')\n    my_list = [True]\n    for bracket in my_string:\n        if bracket not in my_list:\n            my_list.append(False)\n    return True if all(my_list) else False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = False\n    string = string.replace('[[]','')\n    string = string.replace('[]','[]')\n    string = string.replace('[][','')\n    string = string.replace('[[]]','[')\n    l = len(string)\n    for i in range(0,l):\n        if string[i] == '[':\n            for j in range(i+1,l):\n                if string[j] == '[':\n                    break\n                else:\n                    if string[j] == '[' or string[j] == '{':\n                        result = not result\n        if result:\n            break\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    string = string.replace('[', '').replace(']', '').replace('[', '').replace(']', '')\n    return all([(i in '{[') or (i in '}]) for i in string])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = False\n    for char in string:\n        if char in '([[':\n            result = True\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    result = is_nested(string.replace(\"[\",\"\"]).replace(\"]\",\"\").replace(\"[\",\"\").replace(\"]\",\"\"))\n    if result == False:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not string or not isinstance(string, str):\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return any(bool(string.count(i) for i in ['[[', '[]']) == 0)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    return all([is_nested(s) for s in string]"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # if len(string) == 0:\n    #     return True\n    # elif string[0] == '[':\n    #     return is_nested(string[1:])\n    # else:\n    #     return is_nested(string[1:]) and is_nested(string[1:])\n    if string[0]!= '[':\n        return False\n    else:\n        for i in range(1,len(string)):\n            if string[i] == '[':\n                return is_nested(string[i:])\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    b = ']]]][[[[['\n    c = ']]]]]'\n    if len(string) == 0 or string[0] == ']' or string[len(string)-1] == ']':\n        return False\n    if string[len(string)-1]!= ']' and string[len(string)-1]!= ']' and string[0]!= '[' and string[len(string)-1]!= ']':\n        return False\n    if string[len(string)-1] == ']':\n        if string[len(string)-2] == ']':\n            return False\n    if string[0] == '[' and string[len(string)-1] == ']':\n        if string[len(string)-2] == '[' and string[len(string)-3] == ']' and string[len(string)-1]!= ']':\n            return False\n    if string[len(string)-1] == '[' and string[len(string)-2] == '[' and string[len(string)-3] == ']':\n        return False\n    if string[len(string)-1] == ']' and string[len(string)-2] == ']' and string[len(string)-3] == '[':\n        return False\n    return True\n    # if len(string) == 0 or string[0] == '[' or string[len(string)-1] == ']':\n    #     return False\n    # if string[len(string)-1]!= ']' and string[len(string)-1]!= ']' and string[0]!= '[' and string[len(string)-1]!= ']':\n    #     return False\n    # if string[len(string)-1] == '[' and string[len(string)-2] == '[' and string[len(string)-3] == ']':\n    #     return False\n    # if string[0] == '[' and string[len(string)-1] == ']' and string[len(string)-2] == '[' and string[len(string)-3] == ']':\n    #     return False\n    # if string[0] == ']' and string[len(string)-1] == ']' and string[len(string)-2] == ']' and string[len(string)-3] == '[':\n    #     return False\n    # return True\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sum([x**2 for x in lst if abs(x)<=1e-7])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    return sum([i**2 for i in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum = 0\n    for i in lst:\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum_squares = 0\n    for number in lst:\n        sum_squares += number ** 2\n    return sum_squares\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return sum(map(lambda x: x**2, lst))\n    return sum(map(lambda x: x**2, lst))\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    numbers = [int(num) for num in lst]\n    numbers = sorted(numbers)\n    sum = 0\n    for num in numbers:\n        sum += num**2\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # your code goes here\n    return sum([(x**2) for x in lst])"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    output = 0\n    for item in lst:\n        output += pow(item,2)\n    return output\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst) < 2:\n        return 0\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = 0\n    for elem in lst:\n        s += elem**2\n    return s\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if txt[-1] in string.ascii_letters:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return txt.rfind('a')!= -1 and txt.rfind('e')!= -1 and txt.rfind('i')!= -1 and txt.rfind('o')!= -1 and txt.rfind('u')!= -1 \n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    last_char = txt[-1]\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # if txt is empty return False\n    if not txt: return False\n    if not txt[-1].isalpha(): return False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Create a dictionary of the letters and their indexes. \n    letter_dict = {\"a\": 0, \"b\": 1, \"c\": 2, \"d\": 3, \"e\": 4, \"f\": 5, \"g\": 6, \"h\": 7, \"i\": 8, \"j\": 9, \"k\": 10, \"l\": 11, \"m\": 12, \"n\": 13, \"o\": 14, \"p\": 15, \"q\": 16, \"r\": 17, \"s\": 18, \"t\": 19, \"u\": 20, \"v\": 21, \"w\": 22, \"x\": 23, \"y\": 24, \"z\": 25}\n    txt = txt.lower()\n    # Loop through each letter in the given text.\n    for letter in txt:\n        if letter not in letter_dict.keys():\n            return False\n        else:\n            letter_index = letter_dict[letter]\n            # Check if the letter index is an occurrence of the last character of the word\n            if letter_index == len(txt) - 1:\n                return False\n    return True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # TODO\n    letter_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    last_char_is_a_letter = letter_alphabet.find(txt[-1])!= -1\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Create a regex\n    regex = \"(?=[A-Z])\"\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # create a variable called last_char to store the last character of\n    # the string\n    last_char = ''\n    # loop through the string to get the last character in the string\n    for char in txt:\n        # if the last character is not a letter and is not a space\n        # add the letter to the last_char variable\n        if char not in string.ascii_letters and char!='':\n            last_char = char\n            # return False if the last character is not a letter\n            # or is a space\n            break\n    # return True if the last character is a letter and not a space\n    return last_char not in string.ascii_letters and last_char!='"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #Code goes here\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    if len(txt)==0:\n        return False\n    if txt[-1] in letters:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    word = txt.split()\n    last_char_of_word = word[-1]\n    for i in range(len(word)):\n        if word[i].isalpha() and word[i] not in last_char_of_word:\n            return False\n        elif word[i].isalpha() and word[i] in last_char_of_word:\n            return False\n    return True\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 0\n    while i < len(arr):\n        if arr[i] >= arr[i-1]:\n            i += 1\n        else:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Use a list of current index, new index and array.\n    # The first index of new array, and the largest index of current array,\n    # will be the largest index of a sub array\n    max_index = -1\n    new_index = 0\n    for index, value in enumerate(arr):\n        if value >= arr[index-1]:\n            new_index = index\n            break\n    # Return index of largest value in array\n    return new_index\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_val = 0\n    max_idx = -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(0,len(arr)):\n        if arr[i] >= arr[i-1]:\n            count += 1\n    if count > 0:\n        return count-1\n    else:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Use a stack to keep track of valid parent indices.\n    stack = [0]\n    result = -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Write your code here.\n    for i in range(1,len(arr)):\n        if arr[i-1] > arr[i]:\n            return -1\n    return i\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not arr:\n        return -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return -1\n    return i - 1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # first, check that arr is a list\n    if not isinstance(arr,list):\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return -1\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def recursion(current):\n        if not lst:\n            return None\n        elif lst[-1] < 0:\n            return None\n        else:\n            largest = current[0]\n            smallest = current[0]\n            for item in lst[:-1]:\n                if item < 0:\n                    smallest = smallest\n                else:\n                    largest = largest\n            return (largest, smallest)\n    return recursion(lst[-1])"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    largest = None\n    smallest = None\n    for i in lst:\n        if largest is None or i < smallest:\n            largest = i\n            smallest = largest\n        elif largest < i:\n            largest = i\n    return (largest, smallest)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    negative_integers = []\n    positive_integers = []\n    \n    for i in lst:\n        if isinstance(i, int):\n            if i < 0:\n                negative_integers.append(i)\n            else:\n                positive_integers.append(i)\n        else:\n            return None\n    \n    if len(negative_integers) > 0 or len(positive_integers) > 0:\n        return tuple(negative_integers), tuple(positive_integers)\n    else:\n        return None\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in lst:\n        if i < 0:\n            return (None, None)\n    return(lst)\n    "
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    int_lst = list(filter(lambda x: x > 0, lst))\n    if not int_lst:\n        return None\n    return (max(int_lst), min(int_lst))\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    negative_list = []\n    positive_list = []\n    \n    for i in range(len(lst)):\n        if lst[i] < 0:\n            negative_list.append(lst[i])\n        else:\n            positive_list.append(lst[i])\n    \n    if negative_list == []:\n        return None\n    else:\n        positive_min = negative_list[0]\n        positive_max = negative_list[0]\n        for item in negative_list:\n            if item < 0:\n                positive_min = item\n                positive_max = item\n            elif item > 0:\n                positive_max = item\n                positive_min = item\n        return (positive_min, positive_max)\n        "
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sorted_lst = sorted(lst)\n    if sorted_lst == [0, 1, 2, 3, 4, 5, 6, 7]:\n        return None\n    else:\n        return (sorted_lst[-1], sorted_lst[0])\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def largest_smallest_integers_helper(lst, curr_max, curr_min):\n        '''\n        Given a list of integers, return the largest, smallest, and total\n        integers in the list that are either positive or negative.\n        '''\n        if curr_max <= curr_min:\n            return None\n        elif len(lst) == 0:\n            return curr_max, curr_min\n        elif lst[0] < 0:\n            return largest_smallest_integers_helper(lst[1:], curr_max, curr_min)\n        else:\n            return largest_smallest_integers_helper(lst[1:], curr_max, curr_min - lst[0])\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    negative_integers = [n for n in lst if n < 0]\n    positive_integers = [n for n in lst if n >= 0]\n    return tuple(negative_integers), tuple(positive_integers)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a, b = None, None\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            if a is None:\n                a = lst[i]\n            else:\n                if b is None:\n                    b = lst[i]\n                else:\n                    return (a, b)\n        if lst[i] > 0:\n            if b is None:\n                b = lst[i]\n            else:\n                return (a, b)\n    return (a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #if a > b:\n    #    return b\n    #elif a < b:\n    #    return a\n    #else:\n    #    return None\n    if a == b:\n        return b\n    else:\n        return a\n    #return None"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if isinstance(a, int) and isinstance(b, int) or isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if a == b:\n            return a\n        else:\n            return b\n    elif isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if a == b:\n            return a\n        else:\n            return b\n    else:\n        raise TypeError(\"Cannot compare type %s to type %s.\" % (type(a), type(b)))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if type(a) == type(b):\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == float:\n        if float(a) < float(b):\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == str:\n        if float(a) < float(b):\n            return a\n        else:\n            return b\n    elif type(a) == int and type(b) == int:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == str:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == int:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == str:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == str:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == int:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == int and type(b) == int:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == int and type(b) == float:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == str:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == str:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == float:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == str:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == int:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == float:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == str:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == int:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == str:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == str:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == int:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == float:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == str:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == float:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == int and type(b) == int:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == int and type(b) == float:\n        if a < b:\n            return a\n        else:\n            return b\n    elif type(a) == int and type(b) == str:\n        if "
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if type(a) == type(b):\n        a, b = str(a), str(b)\n        if a == b:\n            return a\n        else:\n            return None\n    else:\n        return None\n    \n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return max(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: Write your code here\n    try:\n        if a == b:\n            return a\n        else:\n            return b\n    except ValueError as e:\n        print(e)\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a == b:\n        return None\n    elif type(a) == float:\n        return round(a, 10)\n    elif type(a) == int:\n        return a\n    elif type(a) == str:\n        return a\n    else:\n        return None"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return max(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    import math\n    def compare(a, b):\n        if isinstance(a, float):\n            if math.isnan(a) or math.isnan(b):\n                return None\n            else:\n                return max(a, b)\n        if isinstance(a, int):\n            if math.isnan(a) or math.isnan(b):\n                return None\n            else:\n                return max(a, b)\n        else:\n            raise TypeError(\"Invalid type of value\")\n    return compare(a, b)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if is_even(n):\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n % 2!= 0:\n        return False\n    \n    \n    odd_numbers = [0]\n    even_numbers = [1]\n    sum_odd_numbers = even_numbers\n    sum_even_numbers = odd_numbers\n    sum_odd_numbers_sum_even = even_numbers + odd_numbers\n    sum_even_numbers_sum_odd = odd_numbers + even_numbers\n    for n in range(2,n):\n        sum_odd_numbers.append(sum_odd_numbers_sum_even[n])\n        sum_even_numbers.append(sum_even_numbers_sum_odd[n])\n    if sum(sum_odd_numbers) == sum(sum_even_numbers):\n        return True\n    return False\n    \ndef main():\n    n = 4\n    print(is_equal_to_sum_even(n))\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # verify n is even\n    if n % 2 == 0:\n        # verify it is even\n        return is_equal_to_sum_even(n - 1)\n    # verify it is not even\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return all(i%2==0 for i in range(n+1)"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum_even = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum_even += i\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(map(lambda x: (x & (x + 1)), range(1, n+1))) == 4 * n\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if is_equal_to_sum_even(n - 1):\n        return False\n    if n % 2 == 1:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum_even = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_even += i\n    if sum_even % 4 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not is_valid_number(n) or n < 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if i!= n and n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if (n<= 0): return False\n    for i in range(1,n):\n        if ((n-i)%2==0 and (i%2==0)): return False\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    factorial = 1\n    for i in range(1,n):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return factorial(n)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return 1 if n == 0 else n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return 1 if n > 0 else n * special_factorial(n-1) * special_factorial(n-2) * special_factorial(n-3) * special_factorial(n-4)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return special_factorial(n-1) * n * special_factorial(n-2) * n * special_factorial(n-3)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n <= 0:\n        return 1\n    else:\n        return n * special_factorial(n-1) \\\n              + special_factorial(n-2) \\\n              + special_factorial(n-3) \\\n              + special_factorial(n-4) \\\n              + special_factorial(n-5)\n    \ndef sum_n(n):\n    \"\"\"The sum of the numbers in the range of 1 to n should be n! / (n-1)! * (n-2)! * (n-3)! *... * 1!\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    factorial = 1\n    if n == 0:\n        return 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # ------------------ FINDING THE FACTORIAL -------------------\n    # A factorial is a product of several integers. The product is\n    # the product of all integers within the range of the original\n    # integer. For example, the factorial of 8 is 1 * 2 * 3 * 4 = 24.\n    # For any integer less than or equal to 1, there is no factorial.\n    # For an integer greater than 1, the factorial is the sum of all\n    # the integers below it.\n    #\n    # The definition of factorial is:\n    # f = 1,1! = 1 * 2 * 3 * 4\n    #\n    # for any number n >= 1:\n    # f = f * n!\n    # print(n,f)\n    #\n    # print(n,f)\n    # print(n,factorial(n))\n    # ------------------ FINISHING THE FACTORIAL -------------------\n    # n is the input, int.\n    # The number of factorials is calculated as:\n    # n! = factorial(n-1)!\n    # The factorials are recursively calculated.\n    #\n    # If n is a positive integer, then:\n    # n! = factorial(n)\n    #\n    # If n is zero, then:\n    # n! = 1\n    #\n    # If n is negative, then:\n    # n! = (factorial(n)\n    #        * factorial(n-1))\n    #\n    # EXAMPLE\n    # >>> special_factorial(8)\n    # 24\n    # >>> special_factorial(-3)\n    # 1\n    # >>> special_factorial(0)\n    # 1\n    # >>> special_factorial(-2)\n    # 1\n    # >>> special_factorial(-5)\n    # 1290\n    # >>> special_factorial(-1)\n    # 1\n    # >>> special_factorial(4)\n    # 24\n    # >>> special_factorial(2)\n    # 12\n    #\n    # >>> special_factorial(3)\n    # 6\n    # >>> special_factorial(5)\n    # 12\n    # >>> special_factorial(-2)\n    # 1\n    # >>> special_factorial(-3)\n    # 0\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert type(n) == int and n >= 0\n    fact = 1\n    for i in range(n-1, 0, -1):\n        fact *= i\n    return fact\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    text = text.replace(' ', '_')\n    text = re.sub(' +', '-', text)\n    return text\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    output = []\n    for char in text:\n        if char =='':\n            output.append('-')\n        else:\n            output.append(char)\n    return ''.join(output)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #text = re.sub(r'\\s+', '_', text)\n    text = re.sub('\\s+', '_', text)\n    #print(text)\n    return text\n    "
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return re.sub(r'\\s+', '-', text"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # split string into lines\n    lines = text.split(\"\\n\")\n    \n    # iterate through each line and replace spaces with -\n    for i in range(len(lines)):\n        lines[i] = \" \".join(lines[i].split()).replace(\" \", \"-\")\n        \n    # return a new string\n    return \"\\n\".join(lines)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # make sure there is only one consecutive space\n    if len(text) > 2:\n        # list of spaces \n        spaces = [\" \"]\n        # iterate through each space \n        for i in range(len(text)-1):\n            # if that space is consecutive, \n            # make it a separate space \n            if spaces[-1] == text[i]:\n                spaces.append(\"_\")\n            # if the spaces are consecutive and the space \n            # before that space is not consecutive, \n            # make the consecutive space the next character \n            elif spaces[-1]!= text[i]:\n                spaces.append(text[i])\n    # if there are more than 2 consecutive spaces, \n    # delete the last character of each consecutive space \n    else:\n        for i in range(len(text)-1):\n            if spaces[-1] == text[i]:\n                spaces[-1] = text[i]\n            else:\n                continue\n    # delete the last character of each consecutive space \n    if spaces[-1]!= \" \":\n        spaces.pop()\n    return \"\".join(spaces)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Parse the string in list of strings\n    # Where to start from\n    # i.e..\n    i = 0\n    # Initialize a list of spaces that will be replaced\n    spaces = []\n    while i < len(text):\n        # Check if the current character is a space\n        # if it is, then replace it with underscores\n        # i.e..\n        if text[i] =='':\n            text = text.replace(text[i], '_')\n            # Replace any consecutive spaces\n            while text[i+1] =='':\n                spaces.append(text[i+2])\n                i += 2\n        # Otherwise, if it is a non-space character\n        # then add it to the list of spaces\n        else:\n            spaces.append(text[i])\n            i += 1\n    # Return the string with all the spaces replaced\n    return '_'.join(spaces)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if len(text) > 2:\n        while len(text) > 2:\n            text = text.replace(' ','_')\n            \n    return text\n    \ndef convert_to_dict(text):\n    \"\"\"\n    Given a string, returns a dict. The first element is the \n    first column, the second element is the second column, the third \n    element is the third column, and so on.\n    \"\"\"\n    \n    data = {}\n    columns = text.split('\\t')\n    columns = columns[0].split(',')\n    for index, column in enumerate(columns):\n        data[column] = columns[(index+1)]\n    return data\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return re.sub(r'\\s+', '_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #for char in text:\n    #    if(char ==''):\n    #        text = text.replace(char, \" - \")\n    #    else:\n    #        pass\n    #return text\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # Check to see if the string is a valid file name\n    if not re.match(\"[0-9a-zA-Z_]+\", file_name):\n        return \"Invalid File Name\"\n    \n    # Check for letters in the file name\n    if not re.match(\"^[a-zA-Z]*$\", file_name):\n        return \"Invalid File Name\"\n    \n    # Check for multiple dots\n    if not re.match(\"^[a-zA-Z]*\\.$\", file_name):\n        return \"Invalid File Name\"\n    \n    # Check if there is at least three digits\n    if not re.match(\"^[0-9]+$\", file_name):\n        return \"Invalid File Name\"\n    \n    # Check for '.'\n    if not re.match(\"^[.]$\", file_name):\n        return \"Invalid File Name\"\n    \n    # Check if the string starts with a latin alphapet letter 'a'-'z' and not a letter from the\n    # latin alphapet ('a'-'z')\n    if not re.match(\"^[a-zA-Z]*$\", file_name[0]):\n        return \"Invalid File Name\"\n    \n    # Check if there is at least two dots\n    if not re.match(\"^[a-zA-Z]*\\.$\", file_name[1:]):\n        return \"Invalid File Name\"\n    \n    # Check if the file's name contains at least one dot '.'\n    if not re.match(\"^[a-zA-Z]*\\.$\", file_name):\n        return \"Invalid File Name\"\n    \n    # Check if the string is a valid file name\n    return \"Yes\"\n    \n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Create a 'if' condition\n    if not file_name.isalnum():\n        return 'No'\n    # Create a 'elif' condition\n    elif len(file_name) < 3:\n        return 'No'\n    # Create a 'else' condition\n    elif file_name.startswith('.') or file_name.startswith('~'):\n        return 'No'\n    # Create a 'else' condition\n    elif file_name[0].isupper() or file_name[0].isupper():\n        return 'No'\n    # Create a 'else' condition\n    elif file_name[1] == '.':\n        return 'No'\n    elif not file_name[1].isalpha():\n        return 'No'\n    else:\n        # Create a 'elif' condition\n        if not file_name[0].isupper():\n            return 'No'\n        elif not file_name[0].isalpha():\n            return 'No'\n        # Create a 'else' condition\n        elif file_name[1]!= '.':\n            return 'No'\n        elif file_name[1] == '.':\n            return 'No'\n        # Create a 'else' condition\n        else:\n            return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    import string\n    import re\n    \n    if file_name == \"\":\n        raise ValueError(\"File name should not be blank\")\n    \n    \n    # letters are valid latin alphabets\n    valid_letters = re.compile(r'[a-zA-Z]')\n    \n    # make sure the file is valid\n    if valid_letters.search(file_name) == None:\n        raise ValueError(\"File name contains incorrect letters\")\n    \n    \n    # make sure the file has three digits\n    if len(file_name) < 4:\n        raise ValueError(\"File name should have at least 3 digits\")\n    \n    \n    # make sure the file starts with a dot\n    if not file_name[0] == '.':\n        raise ValueError(\"File name should start with a dot '.'\")\n    \n    \n    # make sure the string does not have any dots\n    if not file_name[-1] in ['.', '!']:\n        raise ValueError(\"File name should not have any dots\")\n    \n    \n    # make sure the file name does not have more than one dot\n    if file_name[0] == '.':\n        raise ValueError(\"File name should not start with a dot\")\n    \n    # if the file name contains some characters that are not a latin alphabets\n    # we are not allowed to check for a double letter\n    if valid_letters.search(file_name[:-1])!= None:\n        raise ValueError(\"File name should not contain two latin alphabets\")\n    \n    \n    # make sure the file name is not empty\n    if file_name.strip() == \"\":\n        raise ValueError(\"File name should not be blank\")\n    \n    \n    return 'Yes'\n    \n    \n    # write to file\ndef file_name_write(file_name, new_file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and new_file_name, \n    and returns a string containing the contents of the file's name replaced with the new_file_name.\n    The file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_write(\"example.txt\", \"example2.exe\") # => 'example2.exe'\n    file_name_write(\"1example.dll\", \"1example.exe\") # => '1example.exe'\n    \"\"\"\n    import string\n    import re\n    \n    # make sure the file is valid\n    if file_name == \"\":\n        raise ValueError(\"File name should not be blank\")\n    \n    \n    # letters are valid latin alphabets\n    valid_letters = re.compile(r'[a-zA-Z]')\n    \n    # make sure the file is valid\n    if valid_letters.search(file_name) == None:\n        raise ValueError(\"File name contains incorrect letters\")\n    \n    \n    # make sure the file name does not have any dots\n    if not file_name[0] == '.':\n        raise ValueError(\"File name should not have any dots\")\n    \n    # make sure the file name does not have more than one dot\n    if file_name[-1] in ['.', '!']:\n        raise ValueError(\"File name should not have more than one dot\")\n    \n    \n    # make sure the file name is not empty\n    if file_name.strip() == \"\":\n        raise ValueError(\"File name should not be blank\")\n    \n    \n    # if the file name contains some characters that are not a latin alphabets\n    # we are not allowed to check for a double letter\n    if valid_letters.search(file_name[:-1])!= None:\n        raise ValueError(\"File name should not contain two latin alphabets\")\n    \n    \n    # make sure the file name is not empty\n    if file"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert file_name.replace('.','')!= '', 'File name is invalid.'\n    assert len(file_name) > 3, 'File name has more than three digits.'\n    if file_name.lower().startswith('.'):\n        file_name = file_name[1:]\n    if not file_name.isalnum():\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name[1:].islower():\n        return 'No'\n    if file_name[2].isupper():\n        return 'No'\n    return 'Yes'\n    \n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(file_name) < 3 or len(file_name) > 3:\n        return 'No'\n    if file_name.startswith('.'):\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if len(file_name) == 3:\n        if file_name[1] == '.':\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(file_name) < 3:\n        return \"No\"\n    if not file_name.isalnum():\n        return \"No\"\n    \n    file_name_without_digits = file_name.replace('.', '')\n    if not file_name_without_digits.isdigit():\n        return \"No\"\n    if len(file_name_without_digits) > 3:\n        return \"No\"\n    \n    if file_name_without_digits[0] == '0' and file_name_without_digits[1] in '0123456789':\n        return \"No\"\n    \n    return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Form a dictionary of all the.txt and.exe files in the given directory\n    files_dict = { \"txt\" : [], \"exe\" : [], \"dll\" : [] }\n    for root, dirs, files in os.walk(\"./\"):\n        for file_name in files:\n            if file_name.endswith(\".txt\"):\n                files_dict[\"txt\"].append(root + \"/\" + file_name)\n            if file_name.endswith(\".exe\"):\n                files_dict[\"exe\"].append(root + \"/\" + file_name)\n            if file_name.endswith(\".dll\"):\n                files_dict[\"dll\"].append(root + \"/\" + file_name)\n    # Check if the file's name contains only the first and last digits, and not the dot '.'\n    for file_name in files_dict[\"txt\"]:\n        if file_name[0].isdigit() and len(file_name[0]) == 3 and file_name[1] == \".\":\n            return \"Yes\"\n    for file_name in files_dict[\"exe\"]:\n        if file_name[0].isdigit() and len(file_name[0]) == 3 and file_name[1] == \".\":\n            return \"Yes\"\n    for file_name in files_dict[\"dll\"]:\n        if file_name[0].isdigit() and len(file_name[0]) == 3 and file_name[1] == \".\":\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not is_valid_file_name(file_name):\n        return 'No'\n    if not os.path.isfile(file_name):\n        return 'No'\n    file_name_no_zero = file_name[0:3]\n    if file_name_no_zero.isdigit():\n        if len(file_name_no_zero) > 1 and file_name_no_zero[0].isdigit() and file_name_no_zero[1].isdigit():\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    valid_file_name = False\n    \n    if len(file_name) <= 3:\n        valid_file_name = True\n    \n    if file_name[0] == '.' and len(file_name) > 2:\n        valid_file_name = False\n    \n    if file_name[0] in 'aA' and len(file_name) > 1:\n        valid_file_name = False\n    \n    if file_name[0] == '.':\n        valid_file_name = False\n    \n    if file_name[1] not in '0123456789abcdef' and file_name[1]!= '.':\n        valid_file_name = False\n    \n    if file_name[-1] in '.' or file_name[-2] in '.':\n        valid_file_name = False\n    \n    if file_name[0]!= '.':\n        if file_name[0] in 'abcdef':\n            valid_file_name = True\n    \n    if file_name[1]!= '.':\n        if file_name[1] in 'abcdef':\n            valid_file_name = True\n    \n    if len(file_name) > 3 and file_name[-3] == '.':\n        valid_file_name = False\n    \n    if len(file_name) > 4 and file_name[-4] == '.':\n        valid_file_name = False\n    \n    if len(file_name) > 5 and file_name[-5] == '.':\n        valid_file_name = False\n    \n    if valid_file_name:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Part 1:\n    # Use the following assert statements to make sure all the file names are valid\n    if file_name.strip() == \"\":\n        raise AssertionError(\"Please enter a valid file name.\")\n    if len(file_name.split(\".\")) < 3:\n        raise AssertionError(\"Please enter a valid file name.\")\n    if file_name.split(\".\")[0].lower() == \"txt\" or file_name.split(\".\")[0].lower() == \"exe\":\n        raise AssertionError(\"Please enter a valid file name.\")\n    # Part 2:\n    if not file_name.replace(\".\", \"\").replace(\".txt\", \"\").isalpha():\n        raise AssertionError(\"Please enter a valid file name.\")\n    # Part 3:\n    # Create a regex expression for checking the file's name\n    if \".\" in file_name:\n        assert len(file_name.split(\".\")) == 3\n        assert all(char.isalpha() for char in file_name.split(\".\")[1])\n        assert not file_name.split(\".\")[2].lower() in [\"exe\", \"dll\"]\n    else:\n        assert len(file_name.split(\".\")) == 2\n        assert all(char.isalpha() for char in file_name.split(\".\")[1])\n        assert file_name.split(\".\")[0].lower() in [\"exe\", \"dll\"]\n    # Return a string representing the file's name\n    return file_name.replace(\".\", \"\")\n    "
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3==0 and i%4!=0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3 == 0:\n            sum += i\n        if i%4 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum_squares = 0\n    for element in lst:\n        if isinstance(element, int):\n            if element % 3 == 0 and element % 4!= 0:\n                sum_squares += element**2\n        else:\n            raise ValueError('The function is not defined')\n    return sum_squares\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    total = 0\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        if lst[i] % 3 == 0 and lst[i] % 4!= 0:\n            result += lst[i] * lst[i]\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #create a list with the list of the square numbers in it\n    squares = []\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            squares.append(lst[i]*lst[i])\n        elif i % 4 == 0:\n            squares.append(lst[i]**2)\n        else:\n            squares.append(lst[i])\n    sum = 0\n    for i in range(len(lst)):\n        sum += squares[i]\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum = sum + i ** 2\n        elif i % 4 == 0:\n            sum = sum + i ** 3\n        else:\n            sum = sum + i\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    def is_multiple(num,m):\n        if m % num!= 0:\n            return False\n        else:\n            return True\n    \n    i=0\n    sum=0\n    while i<len(lst):\n        if lst[i] % 3 == 0 and not is_multiple(lst[i],3):\n            lst[i] = lst[i]**3\n        elif lst[i] % 4 == 0 and not is_multiple(lst[i],4):\n            lst[i] = lst[i]**4\n        i+=1\n    \n    for i in range(0,len(lst)):\n        sum+=lst[i]\n    return sum\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] * lst[i] * lst[i]\n        elif i % 4 == 0:\n            lst[i] = lst[i] * lst[i] * lst[i]\n        else:\n            sum = sum + lst[i]\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum_sum = 0\n    for i in range(len(lst)):\n        if lst[i]%3==0 and lst[i]%4!=0:\n            sum_sum = sum_sum+lst[i]**3\n        else:\n            sum_sum = sum_sum+lst[i]**4\n    return sum_sum\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    words = sentence.split(' ')\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n        words[i] = words[i].split()\n        for j in range(len(words[i])):\n            if len(words[i][j]) % 2!= 0:\n                words[i][j] = words[i][j][:1]\n    return''.join(words)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    words = sentence.split()\n    return \" \".join(words)"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sentence = sentence.strip()\n    return sentence.split(\" \")\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return''.join(sorted(sentence.split(' ')))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # trivial cases\n    if len(sentence.split(' ')) == 1:\n        return sentence\n    else:\n        return sentence.split(' ')\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # remove duplicate words from the list\n    sentence = list(set(sentence.lower().split()))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    words = sentence.split()\n    def is_prime(n):\n        if n == 1:\n            return False\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    split_sentence = sentence.split(' ')\n    return''.join(split_sentence)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    for word in sentence.split():\n        if is_prime_number(word):\n            result.append(word)\n    return''.join(result)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    words_count = [0]*26\n    for word in sentence.split():\n        for i in range(len(word)):\n            words_count[ord(word[i])-ord('a')] += 1\n    \n    for word in words_count:\n        if word > 1:\n            return word\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # If denominator is a whole number, use it\n    if n == 0:\n        return True\n    # If denominator is 0, return True\n    if n == 0 or n == 1:\n        return False\n    # If denominator is a whole number and n is positive, return True\n    if n % 1 == 0:\n        return True\n    # If denominator is negative and n is positive, return False\n    if n < 0 and n % 1 == 0:\n        return False\n    # Try to find all positive numbers in denominator\n    for i in range(int(n / 1e3), -1, -1):\n        if simplify(x, i):\n            return True\n    # If a negative fraction is found, return False\n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    if int(str(n)[::-1])==0:\n        return False\n    if n==\"0/0\":\n        return False\n    if n==\"1/1\":\n        return True\n    if n==\"1/0\":\n        return True\n    if int(str(n)[::-1])==1:\n        if simplify(n,int(str(n)[::-1])):\n            return True\n        else:\n            return False\n    if int(str(n)[::-1])==2:\n        if simplify(n,int(str(n)[::-1])):\n            return True\n        else:\n            return False\n    if int(str(n)[::-1])==3:\n        if simplify(n,int(str(n)[::-1])):\n            return True\n        else:\n            return False\n    if int(str(n)[::-1])==4:\n        if simplify(n,int(str(n)[::-1])):\n            return True\n        else:\n            return False\n    if int(str(n)[::-1])==5:\n        if simplify(n,int(str(n)[::-1])):\n            return True\n        else:\n            return False\n    if int(str(n)[::-1])==6:\n        if simplify(n,int(str(n)[::-1])):\n            return True\n        else:\n            return False\n    if int(str(n)[::-1])==7:\n        if simplify(n,int(str(n)[::-1])):\n            return True\n        else:\n            return False\n    if int(str(n)[::-1])==8:\n        if simplify(n,int(str(n)[::-1])):\n            return True\n        else:\n            return False\n    if int(str(n)[::-1])==9:\n        if simplify(n,int(str(n)[::-1])):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = x.split('/')\n    num = int(s[0])\n    den = int(s[1])\n    try:\n        if float(num)/den == float(num)/den:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    n = int(n)\n    x = str(x)\n    n = int(n)\n    if n == 0:\n        return False\n    if len(x) == 1:\n        if int(x) == 0:\n            return True\n        else:\n            return False\n    if len(x) == 2:\n        return simplify(x[0] + '/' + x[1], n)\n    if len(x) == 3:\n        return simplify(x[0] + '/' + x[2], n) and simplify(x[1] + '/' + x[2], n)\n    if len(x) == 4:\n        return simplify(x[0] + '/' + x[1] + '/' + x[2], n) and simplify(x[3] + '/' + x[2] + '/' + x[3], n)\n    if len(x) == 5:\n        return simplify(x[0] + '/' + x[1] + '/' + x[2] + '/' + x[3] + '/' + x[4], n)\n    if len(x) == 6:\n        return simplify(x[0] + '/' + x[1] + '/' + x[2] + '/' + x[3] + '/' + x[4] + '/' + x[5], n)\n    if len(x) == 7:\n        return simplify(x[0] + '/' + x[1] + '/' + x[2] + '/' + x[3] + '/' + x[4] + '/' + x[5] + '/' + x[6], n)\n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = int(n)\n    numerator = x.split(\"/\")[0]\n    denominator = x.split(\"/\")[1]\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n, x = str(n), str(x)\n    if len(n)!= len(x):\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == \"0\":\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    return x[0] == x[1] and n[0] == n[1]\n    \ndef main():\n    \"\"\"\n    Example 1:\n    Input: numerator = \"1/1\", denominator = \"1\"\n    Output: True\n    Explanation: 1/1 evaluates to 1, while 1/1 evaluates to 0.\n    \n    Example 2:\n    Input: numerator = \"123\", denominator = \"12\"\n    Output: True\n    Explanation: 123/12 evaluates to 123, while 12/123 evaluates to 0.\n    \n    Example 3:\n    Input: numerator = \"456\", denominator = \"6\"\n    Output: True\n    Explanation: 6/6 evaluates to 6, while 6/4 evaluates to 0.\n    \n    Example 4:\n    Input: numerator = \"0\", denominator = \"0\"\n    Output: True\n    Explanation: 0/0 evaluates to True, while 0/0 evaluates to False.\n    \"\"\"\n    n = input().split()\n    numerator = int(n[0])\n    denominator = int(n[1])\n    if simplify(numerator, denominator):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return False\n    if n == '0':\n        return False\n    if n == 1:\n        return True\n    n = int(n)\n    if n > 0:\n        if n <= n // 2:\n            return simplify(\"{}/{}\".format(x, n), \"{}/{}\".format(n, x))\n        elif n <= n // 2 + 1:\n            return simplify(\"{}/{}\".format(x, n), \"{}/{}\".format(n, x))\n        else:\n            return simplify(\"{}/{}\".format(x, n), \"{}/{}\".format(n, x))\n    else:\n        return simplify(\"{}/{}\".format(x, n), \"{}/{}\".format(n, x))\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return False\n    try:\n        i, s, n = [int(c) for c in str(x).split(\"/\")]\n        if s == 0:\n            return False\n        if s > n:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum = 0\n    nums = sorted(nums)\n    for i in range(len(nums)):\n        sum += nums[i]\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Use sorted() to sort list in ascending order\n    # Will return same list again as sorted() would sort it before\n    nums.sort()\n    # Return list without duplicates\n    return sorted(nums)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # Sort by total points\n    nums.sort()\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    nums = sorted(nums)\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n    sums = []\n    for i in nums:\n        sums.append(sum(map(int, str(i))))\n    return sorted(sums, reverse=True)"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Time: O(N)\n    # Space: O(N)\n    def order_by_points_recursive(lst, target):\n        if not lst:\n            return []\n        return order_by_points_recursive(lst[1:], target - lst[0]) + [lst[0]] + order_by_points_recursive(lst[1:], target)\n    return order_by_points_recursive(nums, 0)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    nums.sort()\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    nums = sorted(nums)\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sorted([num for num in nums if sum(int(i) for i in str(num)) == nums.index(num)]"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # print(nums)\n    return len(set(nums)) - len(nums) - (len(set(nums[:-1]))*2)\n    # print(set(nums[:-1]))\n    # return len(set(nums[:-1]) - set(nums[:-1])) + len(set(nums[:-1]) - set(nums[:-1]))\n    # return len(set(nums[:-1]) - set(nums[:-1]))\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # \"\"\"\n    # Do not edit the code below.\n    # \"\"\"\n    # len(nums)\n    # sum(map(lambda x: x >= 10, filter(lambda x: x % 2!= 0, nums)))\n    # \"\"\"\n    # Use a while loop to generate a list of all the odd numbers\n    # \"\"\"\n    # odd = []\n    # for num in nums:\n    #     if num % 2 == 0:\n    #         odd.append(num)\n    # \"\"\"\n    # Use a while loop to generate the last digit of each odd number\n    # \"\"\"\n    # i = len(odd) - 1\n    # while i >= 0:\n    #     odd.append(odd[i] + 1)\n    #     i = i - 1\n    # \"\"\"\n    # Return the odd number list\n    # \"\"\"\n    # return odd\n    return sum(map(lambda x: x >= 10, filter(lambda x: x % 2!= 0, nums)))"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    num = []\n    for i in range(len(nums)):\n        if nums[i] > 0 and nums[i] % 2!= 0:\n            num.append(nums[i])\n    num.sort()\n    return len(num)\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum_odd_elements = 0\n    sum_of_last_two_numbers = 0\n    for num in nums:\n        if num < 10:\n            sum_odd_elements += 1\n        else:\n            sum_of_last_two_numbers += 1\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for num in nums:\n        if num >= 10 and num // 10!= 0:\n            count += 1\n        if num // 10 % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def oddDigits(num):\n        return sum(1 for i in range(num) if i % 2 == 1)\n    \n    res = 0\n    for i in nums:\n        res += oddDigits(i)\n    return res\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    return sum(nums) // 2\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max_index = len(nums) - 1\n    odd_numbers = 0\n    for i in range(0, len(nums)):\n        if (i % 2 == 0):\n            if (nums[i] % 10 == 10 and nums[i] % 10!= 9):\n                odd_numbers += 1\n        else:\n            if (nums[i] % 10 == 10 and nums[i] % 10!= 9):\n                odd_numbers += 1\n            \n    max_first = max(nums)\n    max_last = max(nums[-1:])\n    \n    return max_index - odd_numbers - 1 - (max_first + max_last)"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # edge case:\n    if not nums: return 0\n    \n    first = nums[0]\n    last = nums[-1]\n    \n    # check if the last digit of the first number is greater than 10.\n    if first > 10:\n        return len(nums) - 1\n    \n    # check if the first number is odd.\n    if first % 2 == 1:\n        # if it is odd, return the count of numbers where the first digit\n        # of the last number is odd.\n        if last % 2 == 1:\n            return len(nums) - 1\n        \n        # otherwise, return the count of numbers where the first digit\n        # of the last number is even.\n        else:\n            return len(nums) - 2\n    \n    else:\n        # if it is not odd, return the count of numbers where the first digit\n        # of the last number is odd.\n        return len(nums) - 2\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = 0\n    for n in range(len(nums)):\n        if (nums[n] >= 10) and (nums[n] % 2!= 0):\n            res += 1\n    return res\n    \n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # This algorithm is based on recursion, only keep track of the triple of\n    # values a[i] + a[j] + a[k], and keep track of the maximum triple as the\n    # triple of values a[i] + a[j] + a[k],\n    # or return 0\n    triples = [0] * n\n    triple_count = 0\n    for i in range(n):\n        if (i + 1) % 3 == 0:\n            triples[i] = triple_count\n            triple_count += 1\n        else:\n            triple_count += triple_count\n    return triple_count"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    assert n > 0\n    a = [1]*n\n    for i in range(n):\n        a[i] = i*i - i + 1\n    a.sort()\n    return a.count(a[0]) * a.count(a[1]) * a.count(a[2])\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def multiply(x,y):\n        m = x*y\n        while m > y:\n            m = m - y\n        return m\n    a = [i for i in range(1, n+1)]\n    j = 0\n    k = 0\n    for i in range(n):\n        while a[j] % 3 == 0 and j < n-1:\n            j += 1\n        if a[j] % 3 == 0 and j < n-1:\n            k = multiply(k, a[j])\n        a[j] = a[j] - a[j-1]\n    return k\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return 3 * (3 * 2 + 1) // 5 * (n - 2)\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def get_triples(arr, n, x):\n        if n < x:\n            return 0\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return a.count(sum(a))\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = [i * i - i + 1 for i in range(n)]\n    return len(a)\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    a = [1, 3, 7, 13, 21]\n    for i in range(2, n):\n        a.append((a[i-1]*a[i-2])%10007)\n    return a[-1"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def get_triples(a, n):\n        triples = []\n        for i in range(n):\n            triples.append([a[i] * i - i + 1, i, i])\n        return triples\n    \n    if n < 1:\n        return 0\n    triples = get_triples(range(1, n+1), n)\n    triples.sort(key=lambda x: x[2])\n    return len(triples)\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    \n    # your code goes here\n    print(planet1, planet2)\n    if planet1 == planet2:\n        return(planet1,planet2)\n    elif planet1 == \"Sun\" and planet2 == \"Sun\":\n        return(planet1,planet2)\n    elif planet1 == \"Sun\" and planet2 == \"Mars\":\n        return(planet1,planet2)\n    elif planet1 == \"Sun\" and planet2 == \"Jupiter\":\n        return(planet1,planet2)\n    elif planet1 == \"Mercury\" and planet2 == \"Saturn\":\n        return(planet1,planet2)\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return(planet1,planet2)\n    elif planet1 == \"Mercury\" and planet2 == \"Neptune\":\n        return(planet1,planet2)\n    elif planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return(planet1,planet2)\n    elif planet1 == \"Venus\" and planet2 == \"Jupiter\":\n        return(planet1,planet2)\n    elif planet1 == \"Venus\" and planet2 == \"Saturn\":\n        return(planet1,planet2)\n    elif planet1 == \"Venus\" and planet2 == \"Mars\":\n        return(planet1,planet2)\n    elif planet1 == \"Jupiter\" and planet2 == \"Neptune\":\n        return(planet1,planet2)\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return(planet1,planet2)\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return(planet1,planet2)\n    elif planet1 == \"Jupiter\" and planet2 == \"Mars\":\n        return(planet1,planet2)\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return(planet1,planet2)\n    elif planet1 == \"Jupiter\" and planet2 == \"Neptune\":\n        return(planet1,planet2)\n    elif planet1 == \"Jupiter\" and planet2 == \"Mercury\":\n        return(planet1,planet2)\n    elif planet1 == \"Jupiter\" and planet2 == \"Mars\":\n        return(planet1,planet2)\n    elif planet1 == \"Jupiter\" and planet2 == \"Mercury\":\n        return(planet1,planet2)\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return(planet1,planet2)\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return(planet1,planet2)\n    elif planet1 == \"Jupiter\" and planet2 == \"Jupiter\":\n        return(planet1,planet2)\n    elif planet1 == \"Mars\" and planet2 == \"Mercury\":\n        return(planet1,planet2)\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return(planet1,planet2)\n    elif planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return(planet1,planet2)\n    elif planet1 == \"Mars\" and planet2 == \"Venus\":\n        return(planet1,planet2)\n    elif planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return(planet1,planet2)\n    elif planet1 == \"Venus\" and planet2 == \"Saturn\":\n        return(planet1,planet2)\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return(planet1,planet2)\n    elif planet1 == \"Venus\" and planet2 == \"Jupiter\":\n        return(planet1,planet2)\n    elif planet1 == \"Mercury\" and planet2 == \"Mars\":\n        return(planet1,planet2)\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return(planet1,planet2)\n    elif planet1 == \"Mercury\" and planet2 == \"Jupiter\":\n        return(planet1,planet2)\n    elif planet1 == \"Venus\" and planet2 == \"Jupiter\":\n        return(planet1,plane"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    import pymysql\n    conn = pymysql.connect(host='127.0.0.1', user='root', password='root', db='solarsystem')\n    curs = conn.cursor()\n    query = f\"\"\"\n    SELECT * \n    FROM planets\n    WHERE\n    {planet1} > 0\n    AND {planet2} > 0\n    \"\"\"\n    curs.execute(query)\n    data = curs.fetchall()\n    conn.commit()\n    conn.close()\n    return data\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    \n    if planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Venus\", \"Mercury\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Venus\", \"Mercury\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Neptune\":\n        return (\"Venus\", \"Sun\", \"Mercury\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Sun\", \"Jupiter\")\n    elif planet1 == \"Saturn\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\", \"Mercury\")\n    elif planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Venus\", \"Saturn\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\", \"Venus\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Venus\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Venus\", \"Jupiter\")\n    elif planet1 == \"Saturn\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Neptune\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Uranus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Uranus\", \"Jupiter\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Uranus\", \"Jupiter\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\", \"Uranus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Venus\", \"Jupiter\")\n    elif planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Uranus\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == "
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Return empty list if planets are not correct\n    if planet1 == planet2:\n        return ()\n    \n    # Check that the first planet has a pre-defined orbit (It's a combination of \n    # the two planets)\n    if planet1 not in p:\n        # Planet not on the list\n        return ()\n    if planet2 not in p:\n        return ()\n    \n    # Choose the closest planet to the Sun\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to the Earth\n    if p[planet1] < p[planet2]:\n        return ()\n    if p[planet1] > p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Mars\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Jupiter\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Saturn\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Uranus\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Neptune\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Return an empty list if planets are not correct\n    return ()\n    \ndef lf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    lf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    lf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    lf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Return empty list if planets are not correct\n    if planet1 == planet2:\n        return ()\n    \n    # Check that the first planet has a pre-defined orbit (It's a combination of \n    # the two planets)\n    if planet1 not in p:\n        # Planet not on the list\n        return ()\n    if planet2 not in p:\n        # Planet not on the list\n        return ()\n    \n    # Choose the closest planet to the Sun\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to the Earth\n    if p[planet1] < p[planet2]:\n        return ()\n    if p[planet1] > p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Mars\n    if p[planet1] < p[planet2]:\n        return ()\n    if p[planet1] > p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Jupiter\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Saturn\n    if p[planet1] > p[planet2]:\n        return ()\n    if p[planet1] < p[planet2]:\n        return ()\n    \n    # Choose the closest planet to Uranus\n    if p[planet1] > p[planet"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not isinstance(planet1, str) or not isinstance(planet2, str):\n        return ()\n    \n    # get the orbit and date of planet1\n    planets_1 = planet1.split(\" \")\n    if planets_1[0] == 'Mercury':\n        planet_1 = 'Jupiter'\n    elif planets_1[0] == 'Saturn':\n        planet_1 = 'Uranus'\n    elif planets_1[0] == 'Uranus':\n        planet_1 = 'Neptune'\n    else:\n        planet_1 = 'Earth'\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    ## TO DO ##\n    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # I assume the name of planet 1 and 2 are the same \n    # If the planet is Jupiter, Saturn, Uranus, Neptune, Earth, Mars, Mars, Uranus, Uranus\n    # The tuple (Uranus, Uranus, Uranus, Uranus) has a tuple of planets \n    # that is the same as the tuple of planets in the solar system\n    # (Mercury, Venus, Mars, Uranus, Venus, Earth, Mars, Venus, Venus)\n    # And the all the planets in the solar system are the same as the planet\n    # in the tuple (Uranus, Uranus, Uranus, Uranus)\n    # If the planet is Uranus, Venus, Mars, Saturn, Uranus, Uranus, Mars, Saturn, Uranus, Uranus\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #This code will take in the planet name and return all the orbits \n    #The format is (Planet Name, Proximity)\n    #The code will return a tuple of the orbits\n    return (planet1, planet2)\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert isinstance(lst, list)\n    sorted_lst = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_lst.append(word)\n        else:\n            sorted_lst.insert(0, word)\n    return sorted_lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # start from the end of the list,\n    # then remove the items that are too long\n    # this is based on the requirement of the length of the string\n    # the biggest number is equal to the longest word of the list\n    # the smallest number is equal to the length of the list\n    # the order is different from the length of the list\n    # it will return the sorted list\n    # the idea is that we iterate over each item in the list,\n    # check the length of the current item, if they are too long,\n    # we need to go back in the list,\n    # and if they are too long, we need to go down in the list\n    # and it will always return the next item in the list,\n    # so we can return the sorted list\n    return sorted(lst, key=len, reverse=True)\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sorted_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            lst_word = word.split()\n            lst_word.sort()\n            sorted_list.append(lst_word)\n    return sorted_list\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst_sorted = []\n    for word in lst:\n        lst_sorted += [sorted(word.split(' '))]\n    return lst_sorted\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Note: I have not yet copied the solution\n    # into this function, I will go on to write it in the future,\n    # and then do it.\n    # I'd like to be able to write this function in the future.\n    def sort(lst):\n        res = []\n        for word in lst:\n            if len(word) % 2 == 1:\n                res.append(word[::-1])\n            else:\n                res.append(word)\n        return res\n    return sort(lst)\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Note:\n    # Assume that the list contains only lower-case letters.\n    # You do not need to sort it in any way.\n    # Assume that you do not have duplicate words.\n    # Do not assume that the list is sorted in any way.\n    # Assume that the list is a list of strings\n    # Do not assume that the list is a list of strings\n    # Do not assume that the list contains only lower-case letters.\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sorted(lst, key=len, reverse=True)\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    for elem in lst:\n        if len(elem)%2 == 1:\n            result.append(elem)\n        else:\n            result.append(elem[::-1])\n    return result\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def sort_words(words):\n        lst = []\n        for word in words:\n            if len(word)%2!=0:\n                lst.append(word[:len(word)//2])\n            else:\n                lst.append(word)\n        return sorted(lst, key=len)\n    return sort_words(lst)\n    \ndef double_count(lst):\n    \"\"\"write a function that counts the duplicates in a list.\n    1. the lenght of the list must be odd\n    2. list must be a list of strings\n    3. the lenght of the list must be odd\n    4. the function must return a dictionary that contains the count of the word\n    \"\"\"\n    def count_words(lst):\n        count = {}\n        for word in lst:\n            if len(word)%2!=0:\n                if word in count.keys():\n                    count[word] += 1\n                else:\n                    count[word] = 1\n        return count\n    return count_words(lst)\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # your code here\n    lst = list(lst)\n    lst = sorted(lst)\n    return lst\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return x\n    if n == 2:\n        return y\n    if n % 2 == 0:\n        return x_or_y(n//2, x, y)\n    return y_or_x(n, x, y)\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n in factors(n):\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    elif n == 3:\n        return x\n    elif n % 2 == 0:\n        return x * y\n    else:\n        return x / y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #if n is a prime number:\n    if is_prime(n) == True:\n        #if the number is prime\n        if n == 2:\n            return x\n        elif n == 3 or n == 5 or n == 7:\n            return y\n        else:\n            #if the number is divisible by 2 or 3\n            if is_divisible(n) == True:\n                #if the number is divisible by 2\n                if n % 2 == 0:\n                    return x\n                #if the number is divisible by 3\n                if n % 3 == 0:\n                    return y\n            #if the number is divisible by 5\n            if n % 5 == 0:\n                return x\n            #else return the number itself\n            else:\n                return n\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #This is what is returned if n is a prime number.\n    if n == 2: return x\n    #This is what is returned if n is not a prime number.\n    if n == 1 or n == 3: return y\n    #This is the binary representation of n.\n    b = bin(n)[2:]\n    #The length of the binary representation is 9.\n    #Because of the length of the binary representation, we can only \n    #create one value for every combination of 2^x,2,x,3,x,4,x,5,x,6,x.\n    #Each combination represents a binary code.\n    #We can use the divmod() function to get the quotient and the \n    #remainder.\n    quot, rem = divmod(len(b), 9)\n    #If the quotient is 0, then return y\n    if quot == 0: return y\n    #If the remainder is 0, then return x.\n    if rem == 0: return x\n    #Otherwise return the binary representation of the quotient.\n    #This is a combination of two binary digits.\n    #So we have to find the binary code and split it into four bits.\n    bit_a = b[:quot]\n    bit_b = b[quot:]\n    #Now we have to find the bits of the binary code.\n    #The first bit is the sign bit.\n    bit_b.reverse()\n    #If the bit_b is even, then we are adding a bit of one bit.\n    #The bit_b is a number of ones.\n    if bit_b[0] == '1':\n        bit_b.pop(0)\n        bit_b.reverse()\n        bit_b.reverse()\n    #The second bit is the sign bit.\n    #The first bit is the bit of the number of ones.\n    if bit_b[0] == '0':\n        bit_b.pop(0)\n        bit_b.reverse()\n        bit_b.reverse()\n    #We can now convert the bits of the two numbers into a binary code.\n    bit_a = bit_a.zfill(quot)\n    bit_b = bit_b.zfill(rem)\n    #We can convert this binary code into an integer.\n    #This is what is returned if n is a prime number and the bit of it is a \n    #bit of zero.\n    return int(bit_a + bit_b)\n    \ndef main():\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #global m, n\n    if n % 2 == 0:\n        #return x\n        return x\n    else:\n        #return y\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 1:\n        return x\n    elif n%2!= 0:\n        return y\n    elif n%3 == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not is_prime(n):\n        return y\n    elif n == 1:\n        return x\n    else:\n        return x_or_y(n - 1, x, y)\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    assert(type(n) is int)\n    assert(type(x) is int)\n    assert(type(y) is int)\n    \n    def isprime(x):\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 2:\n        return x\n    if n % 2 == 0 or n % 3 == 0:\n        return y\n    while n > 2:\n        if n % 2 == 0:\n            return x\n        if n % 3 == 0:\n            return y\n        n = n // 3\n    return x\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    sum_squares = 0\n    \n    for item in lst:\n        sum_squares += item ** 2\n    \n    return sum_squares"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not lst:\n        return 0\n    sum = 0\n    for i in lst:\n        sum += (i * i)\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total_sum = 0\n    for value in lst:\n        if (value % 2) == 1:\n            total_sum += value\n    return total_sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # return sum of squares of numbers in the list that are odd\n    if len(lst) == 0:\n        return 0\n    \n    return sum([(a**2) for a in lst if a > 0])\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not lst:\n        return 0\n    sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum += num ** 2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    # The list contains the numbers in ascending order, so all numbers are odd, so we are keeping track of the squares.\n    squares = [i**2 for i in lst]\n    \n    # We are going to calculate the squares of the numbers that are odd and keep track of them.\n    # If the square is odd, we multiply it with the sum of squares.\n    # If it is even, we do not multiply it.\n    odd_squares = [i**2 for i in lst if i % 2 == 1]\n    \n    # We are going to create a new list where the squares are the new sums.\n    new_squares = []\n    \n    # We are going to start at the highest number in the lst, and add the squared numbers if they are odd,\n    # and multiply them by the squared number squared, and add them together if they are even.\n    for num in lst:\n        if num % 2 == 1:\n            new_squares.append(squares[-1]*num)\n        else:\n            new_squares.append(squares[-1])\n    \n    # We are going to combine the new_squares with the squares, and return the sum of squares\n    return sum(new_squares)\n    \ndef main():\n    '''\n    This program takes as input a list of numbers, and returns the sum of squares\n    of the numbers in that list.\n    '''\n    print(sum(square_the_difference([1, 3, 2, 0])))\n    print(sum(square_the_difference([-1, -2, 0])))\n    print(sum(square_the_difference([9, -2])))\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    double_sum = 0\n    for i in lst:\n        if i % 2!= 0:\n            double_sum += i ** 2\n    return double_sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum_squares = 0\n    if len(lst) == 0:\n        return 0\n    for item in lst:\n        if item % 2 == 1:\n            sum_squares += item\n    return sum_squares\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # return 0 if the input is empty\n    if len(lst) == 0:\n        return 0\n    \n    # initialize result\n    result = 0\n    \n    # iterate through list\n    for i in range(len(lst)):\n        result += (lst[i] * lst[i])\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst = sorted(lst, reverse=True)\n    odd_list = []\n    sum_of_squares = 0\n    for x in lst:\n        if x % 2 == 1:\n            odd_list.append(x)\n        sum_of_squares += x ** 2\n    \n    sum_of_squares = sum_of_squares - len(odd_list) * sum_of_squares\n    return sum_of_squares\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    correct_guess = [0] * len(guess)\n    mismatch = 0\n    \n    for i in range(len(guess)):\n        if guess[i]!= game[i]:\n            mismatch += 1\n            if guess[i] > game[i]:\n                correct_guess[i] = game[i] - guess[i]\n            else:\n                correct_guess[i] = guess[i] - game[i]\n    return correct_guess\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO\n    for i in range(len(guess)):\n        if guess[i]!= game[i]:\n            return game[i]\n    return game[i]\n    \n    \n    "
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #print(\"compare\",game,guess)\n    total_guess = len(guess)\n    total_score = 0\n    for i in range(total_guess):\n        total_score = total_score + abs(guess[i] - game[i])\n    return total_score\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # start with the smallest possible value\n    best = min(guess,game)\n    \n    # each guess is equal to the best guess\n    if best == game[0]:\n        return [0,0,0,0,0,0]\n    elif best == guess[0]:\n        return [0,0,0,0,0,0]\n    else:\n        best_diff = abs(best - game[0])\n        best_guess = guess[0]\n        \n        # for each guess\n        for guess_index in range(1,len(guess)):\n            diff = abs(best - guess[guess_index])\n            # if we have a difference in guesses\n            if diff == best_diff:\n                best_diff = diff\n                best_guess = guess[guess_index]\n                \n        # the highest difference\n        return [best_diff,best_guess]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    diff = []\n    if len(guess)!= len(game):\n        raise IndexError(\"guess and game array should have the same length\")\n    for i in range(len(game)):\n        diff.append(abs(game[i]-guess[i]))\n    return diff\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    guess = list(guess)\n    score = list(game)\n    for i,num in enumerate(score):\n        if num == guess[i]:\n            score[i] = 0\n    return score\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(game) == 0:\n        return 0\n    if len(guess) == 0:\n        return 0\n    d = [0 for _ in range(len(guess))]\n    for i,p in enumerate(guess):\n        d[i] = (game[i] - p)**2\n    return d\n    # try:\n    #     if (int(guess[0]) == int(game[0])):\n    #         d[0] = 0\n    #     else:\n    #         d[0] = abs(int(guess[0]) - int(game[0]))\n    # except:\n    #     d[0] = abs(int(guess[0]) - int(game[0]))\n    # for i,p in enumerate(guess):\n    #     if (int(p) == int(game[i])):\n    #         d[i] = 0\n    #     else:\n    #         d[i] = abs(int(p) - int(game[i]))\n    # return d\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if guess == game:\n        return 0\n    return 1\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(map(lambda x,y: abs(x-y),guess,game))\n    \ndef main():\n    print(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n    print(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n    \nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    def g(i,j):\n        return abs(i - j)\n    \n    # Fill in the blanks to return the sum of both the sublists.\n    \n    def rec(i,j,n):\n        if j==n:\n            return 0\n        else:\n            return abs(i-j) + rec(i,j+1,n)\n    \n    # Fill in the blanks to return the sublist of length n, summing the sublists.\n    \n    def rec(i,j,n):\n        if j==n:\n            return g(i,j)\n        else:\n            return g(i,j) + rec(i,j+1,n)\n    \n    # Test your code here.\n    # Give the functions you write.\n    # This will always be executed.\n    \n    scores = [1,2,3,4,5,1]\n    guesses = [1,2,3,4,2,-2]\n    \n    return [rec(i,j,len(scores)) for i,j in zip(guesses,scores)]\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not class_name or not extensions:\n        return ''\n    class_name = class_name.lower()\n    extensions = [ext.lower() for ext in extensions]\n    for extension in extensions:\n        if extension not in class_name:\n            return class_name+\".\"+extension\n    return class_name+\".Both\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #For reference, you can use the string from your function.\n    #Extensions contains the full name of the extension.\n    extensions_array = extensions.split(\".\")\n    #Examples: ['A', 'Be', 'C'] - array of 2 strings. \n    #You should return 'A.Be.C' since the extension 'C' has strength -1. \n    #For example, if you are given \"Slices\" as the class and a list of the\n    #extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return \n    #'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its \n    #strength is -1).\n    #Example:\n    #for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    #for Strongest_Extension('my_class', ['C']) =='my_class.C'\n    #For example, if you are given \"Slices\" as the class and a list of the\n    #extensions: ['AA', 'Be', 'CC'] then you should return 'AA.Be.CC' since the \n    #extension 'CC' has strength -1. \n    #For example, if you are given \"StuFfed\" as the class and a list of the\n    #extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return \n    #'StuFfed.SErviNGSliCes' since the extension 'SErviNGSliCes' has strength -1. \n    #For example, if you are given \"StuFfed\" as the class and a list of the\n    #extensions: ['SErviNGSliCes', 'Cheese'] then you should return 'SErviNGSliCes.Cheese' \n    #since the extension 'Cheese' has strength -1. \n    if len(extensions_array) > 1:\n        #If there is more than one extension, choose the one with the highest \n        #strength.\n        #Example:\n        #for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n        #for Strongest_Extension('my_class', ['C']) =='my_class.C'\n        #For example, if you are given \"Slices\" as the class and a list of the\n        #extensions: ['AA', 'Be', 'CC'] then you should return 'AA.Be.CC' since the \n        #extension 'CC' has strength -1. \n        #For example, if you are given \"StuFfed\" as the class and a list of the\n        #extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return \n        #'StuFfed.SErviNGSliCes' since the extension 'SErviNGSliCes' has strength -1. \n        #For example, if you are given \"StuFfed\" as the class and a list of the\n        #extensions: ['SErviNGSliCes', 'Cheese'] then you should return 'SErviNGSliCes.Cheese' \n        #since the extension 'Cheese' has strength -1. \n        #For example, if you are given \"StuFfed\" as the class and a list of the\n        #extensions: ['SErviNGSliCes', 'Cheese'] then you should return 'SErviNGSliCes.Be' \n        #since the extension 'Be' has strength -1.\n        #Example:\n        #for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n        #for Strongest_Extension('my_class', ['C']) =='my_class.C'\n        #For example, if you are given \"Slices\" as the class and a list of the\n        #extensions: ['AA', 'Be', 'CC'] then you should return 'AA.Be.CC' since the \n        #extension 'CC' has strength -1. \n        #Fo"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: complete the function\n    #   \n    # Inputs:\n    #   class_name - a string of the class name\n    #   extensions - a list of strings\n    # Outputs:\n    #   a string of the class name\n    def Cap(x):\n        x = x.upper()\n        c = 0\n        for e in extensions:\n            if e.isupper():\n                c += 1\n        return f'{x}.'.capitalize() + f' {c}.'\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # your code goes here\n    # define the list of extensions \n    # If you don't use a list of extensions, you'll get the same result\n    extensions = list(set(extensions))\n    if len(extensions) == 1:\n        # we have only one extension\n        return class_name + '.SErviNGSliCes'\n    # if there are multiple extensions\n    else:\n        # sort the extensions in alphabetical order\n        extensions.sort()\n        for i in range(len(extensions)):\n            # find the extension with the highest strength\n            ext = extensions[i]\n            # if the extension has the same strength\n            if ext in extensions:\n                # find the extension with the lowest strength\n                ext = extensions[i]\n                # and return the first extension in alphabetical order\n                return class_name + '.SErviNGSliCes' + '.' + ext\n        # if there is no extension with the highest strength\n        return class_name + '.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import re\n    import operator\n    for extension in extensions:\n        extension = extension.split(\".\")\n        pattern = re.compile(\"^[A-Z][a-z]+$\")\n        if pattern.match(extension[0]):\n            for class_name_p in extensions:\n                if pattern.match(class_name_p):\n                    strongest_class = class_name_p\n                    break\n        else:\n            strongest_class = class_name\n    for extension in extensions:\n        extension = extension.split(\".\")\n        if extension[-1] == strongest_class:\n            pattern = re.compile(\"^[a-z]+$\")\n            if pattern.match(extension[0]):\n                for class_name_p in extensions:\n                    if pattern.match(class_name_p):\n                        strongest_class = class_name_p\n                        break\n    return strongest_class + \".StrongestExtensionName\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Your code goes here\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    cap = len(class_name.split(' '))\n    sm = len(extensions)\n    max_cap = cap if cap > sm else sm\n    for c in extensions:\n        if c not in class_name:\n            return '{}.{}'.format(class_name, c)\n    return '{}.{}'.format(class_name, max_cap - sm)\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #Hint\n    #-1 means it's a weak extension, 0 means it's a strong extension\n    #I use -1 because the code is optimised by the whole program\n    #-1 means it's a weak extension, 0 means it's a strong extension\n    #Note: if the extension is a weak extension, it should have a positive integer\n    #if it's a strong extension, it should have a negative integer\n    \n    #Gets the number of capital letters in the extension's name\n    CAP = len(extensions[0].upper())\n    #Gets the number of lower case letters in the extension's name\n    SM = len(extensions[0].lower())\n    #Calculates the extension strength\n    cap_sm = CAP - SM\n    #Calculates the extension strength\n    cap_sm = abs(cap_sm)\n    #Calculates the extension strength\n    cap_sm = abs(cap_sm)\n    #Gets the extension strength\n    cap_sm = CAP - cap_sm\n    #Calculates the extension strength\n    sm_cap = SM - CAP\n    #Gets the extension strength\n    sm_cap = SM - sm_cap\n    #Calculates the extension strength\n    sm_cap = abs(sm_cap)\n    #Gets the extension strength\n    sm_cap = abs(sm_cap)\n    #Gets the extension strength\n    sm_sm = SM - SM\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    cap_sm = CAP - cap_sm\n    #Gets the extension strength\n    sm_cap = SM - sm_cap\n    #Gets the extension strength\n    sm_cap = SM - cap_sm\n    #Gets the extension strength\n    cap_sm = CAP - cap_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_sm = SM - sm_sm\n    #Gets the extension strength\n    sm_sm = CAP - sm_sm\n    #Gets the extension strength\n    sm_s"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # 1. get the extension name and its power\n    # 2. find the largest extension\n    # 3. extract the largest extension\n    # 4. repeat the above until it finds one\n    \n    def largest_extension(extension_name, extension_list):\n        \"\"\"\n        @param extension_name is the extension name.\n        @param extension_list is a list of extension names.\n        @return a string with the extension name.\n        \"\"\"\n        maximum = 0\n        extension = ''\n        \n        for i in extension_list:\n            if i[0] > extension_name:\n                if len(i) > maximum:\n                    maximum = len(i)\n                    extension = i\n            else:\n                if len(i) < maximum:\n                    maximum = len(i)\n                    extension = i\n        return extension\n    \n    # extract the extension name and its power\n    extension_name = extension_list[0]\n    extension_power = 0\n    for i in extension_list[1:]:\n        if len(i) > extension_power:\n            extension_power = len(i)\n            extension = i\n    \n    # repeat the above until the extension is one with the same power\n    # (the extension is the strongest)\n    while True:\n        extension_name = largest_extension(extension_name, extension_list)\n        if extension_name == extension:\n            break\n    return extension_name\n    \n    \ndef List_Of_Extensions(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extension is to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for List_Of_Extensions('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    # 1. get the extension name and its power\n    # 2. find the largest extension\n    # 3. extract the largest extension\n    # 4. repeat the above until it finds one\n    \n    def list_of_extensions(extension_name, extension_list):\n        \"\"\"\n        @param extension_name is the extension name.\n        @param extension_list is a list of extension names.\n        @return a string with the extension name.\n        \"\"\"\n        maximum = 0\n        extension = ''\n        \n        for i in extension_list:\n            if i[0] > extension_name:\n                if len(i) > maximum:\n                    maximum = len(i)\n                    extension = i\n            else:\n                if len(i) < maximum:\n                    maximum = len(i)\n                    extension = i\n        return extension\n    \n    # extract the extension name and its power\n    extension_name = extension_list[0]\n    extension_power = 0\n    for i in extension_list[1:]:\n        if len(i) > extension_power:\n            extension_power = len(i)\n            extension = i\n    \n    # repeat the above until the extension is one with the same power\n    # (the extension is the strongest)\n    while True:\n        extension_name = list_of_extensions(extension_name, extension_list)\n        if extension_name == extension:\n            break\n    return extension_name\n    \n    \ndef Attribute(attribute_name, attributes):\n    \"\"\"You will be given the name of a class (a string) and a list of attribute"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # your code goes here\n    cap = len(class_name)\n    sm = len(extensions)\n    strength = -1\n    for extension in extensions:\n        if len(extension) == cap + sm:\n            strength = get_strength(extension)\n            if strength > strength:\n                strength = strength\n                strongest_extension = extension\n    return strongest_extension\n    \n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(a)!= len(b):\n        return False\n    if len(a) == 0:\n        return True\n    if len(a) > len(b):\n        return False\n    return all([(a[i] == b[i]) for i in range(len(a))])\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    c = a.replace(b, \"\")\n    for i in c:\n        if i in b:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # get the second word\n    word2 = a.split()[1]\n    # get the original word\n    word1 = a.split()[0]\n    # get the rotated word\n    word1_rotated = word1[::-1]\n    # find the word that is the same as word1\n    same_word = word1[::-1].find(word2.split()[0])\n    if same_word > -1:\n        # check if the rotated word contains word2\n        return True if same_word == word2.find(word1[::-1].split()[0]) else False\n    else:\n        # the rotated word doesn't contain word2, return False\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return(any(a[i]==b[i] for i in range(len(a))))\ndef cyrillic_check(a, b):\n    \"\"\"You are given a word. You need to return True if the word has the form of:\n    c -r k = m\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k = m)\n    (c -r k "
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return cycpattern_check2(a, b) or cycpattern_check3(a,b)\ndef cycpattern_check2(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => True\n    cycpattern_check(\"hello\",\"ell\") => False\n    cycpattern_check(\"whassup\",\"psus\") => True\n    cycpattern_check(\"abab\",\"baa\") => False\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    if len(a) > len(b):\n        return False\n    \n    p1, p2 = len(a), len(b)\n    if a == b:\n        return True\n    \n    if p1 > p2:\n        p1, p2 = p2, p1\n    \n    if p2 == 0:\n        return False\n    \n    for i in range(p2-1):\n        if a[i:p2+1] == b:\n            return True\n    \n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if a[0] == b[0]:\n        return False\n    \n    if b[0] == a[0]:\n        return False\n    \n    if a[-1] == b[-1]:\n        return False\n    \n    if a[-2:] == b[-2:]:\n        return False\n    \n    if a[-1] == b[-1]:\n        if len(a) > len(b):\n            return False\n        else:\n            for i in range(len(a)-1):\n                if a[i]!= b[i]:\n                    return False\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if b == \"\":\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    #1: a and b are equal and b is not the last word\n    #2: a and b are not equal and a is not the last word\n    #3: only one word has a rotation in the first word and b has no rotation in the last word\n    if len(a) == len(b) and b[-1]!= a[-1] and a[-1] in b[::-1] and a[-2]!= b[-2] and a[-2] in b[::-1] and a[-3]!= b[-3] and a[-3] in b[::-1]:\n        return True\n    else:\n        return False\n    #4: length of a is > length of b and a is not the last word and b is not the last word\n    if len(a) >= len(b) and b[-1] not in a[:len(b)]:\n        return False\n    #5: length of a is > length of b and a is not the last word and b is not the last word\n    if len(a) >= len(b) and a[-1] not in b[:len(a)] and a[-2] not in b[:len(a)]:\n        return False\n    #6: length of a is < length of b and a is not the first word and b is not the last word\n    if len(a) < len(b) and b[0] not in a[:len(b)] and b[-1] not in b[:len(a)]:\n        return False\n    #7: length of a is < length of b and a is not the first word and b is not the last word\n    if len(a) < len(b) and a[0] not in a[:len(b)] and a[-2] not in b[:len(a)]:\n        return False\n    #8: length of a is > length of b and a is not the first word and b is not the last word\n    if len(a) > len(b) and b[0] not in a[:len(a)] and b[-1] not in b[:len(a)]:\n        return False\n    #9: length of a is > length of b and a is not the last word and b is not the last word\n    if len(a) > len(b) and a[0] not in a[:len(a)] and a[-2] not in b[:len(a)]:\n        return False\n    #10: length of a is < length of b and a is not the first word and b is not the last word\n    if len(a) < len(b) and b[0] not in a[:len(a)] and b[-1] not in b[:len(a)]:\n        return False\n    #11: length of a is < length of b and a is not the first word and b is not the last word\n    if len(a) < len(b) and a[0] not in a[:len(a)] and a[-2] not in b[:len(a)]:\n        return False\n    #12: length of a is > length of b and a is not the first word and b is not the last word\n    if len(a) > len(b) and a[0] not in a[:len(a)] and a[-2] not in b[:len(a)]:\n        return False\n    #13: length of a is < length of b and a is not the first word and b is not the last word\n    if len(a) < len(b) and a[0] not in a[:len(a)] and a[-2] not in b[:len(a)]:\n        return False\n    #14: length of a is < length of b and a is not the first word and b is not the last word\n    if len(a) < len(b) and a[0] not in a[:len(a)] and a[-2] not in b[:len(a)]:\n        return False\n    #15: length of a is > length of b and a is not the first word and b is not the last word\n    if len(a) > len(b) and a[0] not in a[:len(a)] and a[-2] not in b[:len(a)]:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if b == \"\":\n        return False\n    if a == b:\n        return True\n    if b.count(a[0]) > 0:\n        # print(a)\n        # print(b)\n        for i in range(len(a)):\n            if b[i]!= a[i]:\n                return cycpattern_check(a, b[:i]+a[i+1:])\n    return cycpattern_check(a[1:], b)\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    m = b[::-1]\n    i = 0\n    for j in range(len(a)):\n        if a[j] == b[i]:\n            continue\n        if a[i]!= m[j]:\n            i = i + 1\n            continue\n        return True\n    return False"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    odd_count = 0\n    even_count = 0\n    for i in range(0,num,1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (odd_count,even_count)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even = 0\n    odd = 0\n    for n in str(num):\n        if int(n) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Your code here\n    return (0, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even = 0\n    odd = 0\n    while num > 0:\n        num, reminder = divmod(num, 10)\n        if reminder == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even = 0\n    odd = 0\n    for i in range(0, num + 1, 2):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    num_str = str(num)\n    count = 0\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (num, sum(range(1, num+1)))\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    total = 0\n    if num == 0:\n        return None\n    else:\n        while num!= 0:\n            if num % 2 == 0:\n                total += 1\n            else:\n                total += 1\n            num //= 10\n        return (total, total)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return (num % 10, (num % 10) + 1)\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    roman = {1: 'I',\n            2: 'II',\n            3: 'III',\n            4: 'IV',\n            5: 'V',\n            6: 'VI',\n            7: 'VII',\n            8: 'VIII',\n            9: 'IX',\n            10: 'X',\n            11: 'XI',\n            12: 'XII',\n            13: 'XIII',\n            14: 'XIV',\n            15: 'XV',\n            16: 'XVI',\n            17: 'XVII',\n            18: 'XVIII',\n            19: 'XIX'}\n    l = []\n    for n in range(len(number)):\n        if n > 0:\n            l.append(roman[n])\n        else:\n            l.append(number[n])\n    return ''.join(l)"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = \"\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    romans = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    r = \"\"\n    for i in range(len(number)):\n        r += romans[number[i]]\n    return r.lower()"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    roman_numerals = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX'\n    }\n    roman_numerals_conversion = {\n        'I': 1,\n        'II': 2,\n        'III': 3,\n        'IV': 4,\n        'V': 5,\n        'VI': 6,\n        'VII': 7,\n        'VIII': 8,\n        'IX': 9,\n    }\n    roman_numerals_conversion_with_plus = {\n        'X': 10,\n        'XX': 100,\n        'XXX': 1000\n    }\n    number_of_numbers = len(str(number))\n    number_of_numbers_to_conversion = number_of_numbers - 1\n    conversion = number_of_numbers_to_conversion\n    roman_number = ''\n    conversion_with_plus = conversion\n    for i in range(number_of_numbers):\n        if i < conversion_with_plus:\n            conversion_with_plus -= 1\n            continue\n        for j in range(conversion_with_plus):\n            roman_number += roman_numerals_conversion[roman_numerals[i]]\n        conversion_with_plus = conversion_with_plus - 1\n        if i < conversion_with_plus:\n            continue\n        roman_number += roman_numerals_conversion[roman_numerals[i]]\n    return roman_number\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    roman = 'iivx'\n    if number == 0: return ''\n    for i in range(1, number):\n        num = number // i\n        roman = roman[num:] + roman[:num]\n    return roman[:-1]\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if number == 0:\n        return \"\"\n    roman_values = {1000: \"M\", 900: \"CM\", 500: \"D\", 400: \"CD\", 100: \"C\", 90: \"XC\",\n                      50: \"L\", 40: \"XL\", 10: \"X\", 9: \"IX\", 5: \"V\", 4: \"IV\", 1: \"I\"}\n    mini_roman = \"\"\n    for i in range(number, 1, -1):\n        value = roman_values[i]\n        if mini_roman:\n            mini_roman += value\n        else:\n            mini_roman = value\n    return mini_roman.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    res = ''\n    i = 0\n    while number:\n        k = number // roman_numerals[i]\n        i += 1\n        res += roman_numerals[i] * k\n        number = number % roman_numerals[i]\n    return res\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not isinstance(number, int):\n        raise TypeError('expected int')\n    if number == 0:\n        return ''\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    roman_numeral = []\n    for i in range(1, 1001):\n        if i < 1000:\n            if i % 1000 == 0:\n                roman_numeral.append('i')\n            else:\n                roman_numeral.append(str(i))\n        else:\n            if i % 100 == 0:\n                roman_numeral.append('i')\n            else:\n                roman_numeral.append(str(i))\n    return ''.join(roman_numeral)\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    symbols = 'IVXLCDM'\n    num = str(number)\n    result = ''\n    n = len(num)\n    # convert from integer to roman numeral\n    for index in range(n):\n        if num[index] in symbols:\n            value = symbols.index(num[index])\n            result += symbols[value]\n        elif num[index] < '1' or num[index] > '9':\n            return 'error: non-decimal number'\n        else:\n            result += num[index]\n    return result.lower()\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a = abs(a)\n    b = abs(b)\n    c = abs(c)\n    if a > b and a > c:\n        return True\n    elif b > a and b > c:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return 0 <= a <= b <= c <= b - a + 1\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if a < b + c and b < a + c and c < a + b:\n        return True\n    else:\n        return False\ndef is_triangle(a, b, c):\n    '''\n    Given three sides of a triangle. Return True if the three sides form a\n    triangle, False otherwise.\n    A triangle is a triangle in which all the angles are 90 degree and its sides\n    are the same.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == True\n    is_triangle(2, 3, 4) == False\n    '''\n    if right_angle_triangle(a, b, c) and right_angle_triangle(b, c, a):\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: Solve for answer, ie. return True if the two angles are 90 degrees.\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ((a + b > c) and (b + c > a)) or ((a + c > b) and (a + b > c))\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def is_right(a, b, c):\n        if (a == b and b == c) or (a == b and b == -c) or (a == -b and b == c) or (a == -b and b == -c):\n            return True\n        else:\n            return False\n    \n    def is_right_angle(a, b, c):\n        if (a == b and b == c) or (a == b and b == -c) or (a == -b and b == c) or (a == -b and b == -c):\n            return True\n        else:\n            return False\n    \n    # The idea is to find out which triangle is right-angled by comparing the lengths\n    # of the three sides\n    # 1. The angle of the triangle\n    # 2. The length of the triangle\n    # 3. The angle of the triangle\n    if (is_right(a, b, c) or is_right_angle(a, b, c) or is_right_angle(b, c, a) or is_right_angle(b, -c, a) or is_right_angle(b, -c, -a) or is_right_angle(b, a, c) or is_right_angle(b, -a, c) or is_right_angle(a, b, -c) or is_right_angle(a, -b, -c)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: Write your code here\n    if a == b or a == c or b == c:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    x1 = a\n    y1 = b\n    z1 = c\n    x2 = (x1+y1) / 2\n    y2 = (x1-y1) / 2\n    z2 = (x1+y1+z1) / 2\n    return ((z2-z1)/2 > x1-x2) and ((z2-z1)/2 > y1-y2) and ((z2-z1)/2 > z1-z2)\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (((b**2) - (4*a*c))**0.5) < (2*(b**2))\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return (a+b+c) == (b+c-a) and (a+c) == (b-a)\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_count = 0\n    max_word = None\n    for word in words:\n        if len(word) > max_count:\n            max_count = len(word)\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_char = 0\n    max_char_list = []\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    string_dict = {}\n    unique = 0\n    for word in words:\n        string_dict[word] = len(word)\n    print(string_dict)\n    for key in string_dict:\n        if string_dict[key] == max(string_dict.values()):\n            return key\n    return max(string_dict.values())\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Write your code here\n    if len(set(words)) == len(words):\n        return max(words, key=words.count)\n    else:\n        for i in range(len(words)):\n            if len(set(words[i])) == len(words[i]):\n                return words[i]\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Hint: if there is only 1 unique char, return it. Else return the largest char\n    # in the list.\n    max_char_count = 0\n    char_count = {}\n    for word in words:\n        if word not in char_count:\n            char_count[word] = 0\n        char_count[word] += 1\n    for key in char_count:\n        if char_count[key] > max_char_count:\n            max_char_count = char_count[key]\n            char = key\n    return char\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max_chars = {}\n    for word in words:\n        if word in max_chars:\n            max_chars[word] += 1\n        else:\n            max_chars[word] = 1\n    max_char = max(max_chars.values())\n    # print(max_chars)\n    # print(max_char)\n    for word, char in max_chars.items():\n        if char == max_char:\n            return word\n    return max_char\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_count = 0\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if max_count < count:\n            max_count = count\n            word = word.upper()\n    return word\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # First find the max of all the words\n    max_count = 0\n    for word in words:\n        count = 0\n        for char in word:\n            if char.isalpha():\n                count += 1\n        if count > max_count:\n            max_count = count\n    # Then find the first word in the list\n    for word in words:\n        for char in word:\n            if char.isalpha():\n                return word\n    return \"no word found\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # ANSWER:\n    pass\n    \n    \ndef find_min(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with minimum number\n    of unique characters. If multiple strings have minimum number of unique\n    characters, return the one which comes first in lexicographical order.\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_len = 0\n    max_word = \"\"\n    for word in words:\n        unique = len(set(word))\n        if max_len < unique:\n            max_len = unique\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = [0, 0]\n    if need > number:\n        need -= number\n        result[0] = need\n    if remaining - need > number:\n        remaining -= need\n        result[1] = remaining - need\n    return result\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    left_num = need - remaining\n    if left_num > need:\n        left_num = need\n    if left_num == need:\n        return [need, remaining]\n    else:\n        remaining -= need - left_num\n        return eat(left_num, need, remaining)\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if need <= 0:\n        remaining = 0\n        return [number, remaining]\n    remaining -= need\n    return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if need > remaining:\n        return [0, need]\n    \n    remaining = remaining - need\n    if number < need:\n        return [number, remaining]\n    \n    result = []\n    remaining = remaining - need\n    if number > need:\n        result.append(number - need)\n        remaining = remaining + need\n    return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    while remaining > 0:\n        if number > 0:\n            remaining -= need\n            number -= need\n        else:\n            remaining = 0\n    return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # base cases\n    if number > 1000 or need > 1000 or remaining <= 0:\n        return [need, remaining]\n    \n    # recursive cases\n    if number > need and need <= remaining:\n        return [need, remaining]\n    elif need > need and need <= remaining:\n        need -= need\n        remaining -= need\n        return eat(number, need, remaining)\n    elif need < need:\n        remaining -= need\n        return eat(number, need, remaining)\n    else:\n        return eat(number, need, remaining)\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # \ud83d\udea8 Don't change the code below \ud83d\udc47\n    if remaining <= 0:\n        return [remaining, need]\n    remaining -= need\n    \n    if need > number:\n        return [number, need]\n    \n    return [remaining, need]"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    remaining = remaining - number\n    if remaining < 0:\n        remaining = 0\n    return [ number, remaining ]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    remaining -= need\n    if remaining < 0:\n        remaining = 0\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = 0\n    operation_list = ['+', '-', '*', '//']\n    operator = operator.lower().split(' ')\n    operand = operand.lower().split(' ')\n    for element in operator:\n        if element in operation_list:\n            result += int(operand[operation_list.index(element)])\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if operator is None:\n        return None\n    if operand is None:\n        return None\n    result = 0\n    if operator[0] == '+':\n        result += operator[1]\n        operator = operator[2:]\n    if operator == '':\n        result += operand[0]\n        operator = operand[1:]\n    while operator!= '':\n        if operator[0] == '-':\n            result -= operator[1]\n            operator = operator[2:]\n        elif operator[0] == '*':\n            result *= operator[1]\n            operator = operator[2:]\n        elif operator[0] == '+':\n            result += operator[1]\n            operator = operator[2:]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Initialize new list for algebra\n    algebra = []\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if operator is not None:\n        if operator['+'] is not None and operator['-'] is not None:\n            if len(operator['+']) > len(operator['-']):\n                operator['-'] = operator['+']\n            else:\n                operator['-'] = operator['-']\n            if len(operator['-']) == len(operand):\n                operator['-'] = [operator['-'][i] + operand[i] for i in range(len(operand))]\n            else:\n                operator['-'] = [operator['-'][i] - operand[i] for i in range(len(operand))]\n    if operand is not None:\n        if len(operand) == len(operator):\n            operand = [operand[i] for i in range(len(operand))]\n        else:\n            operand = [operand[i] - operator[i] for i in range(len(operand))]\n    result = 0\n    if operator is None:\n        return result\n    else:\n        for i in range(len(operator['+'])):\n            result += operator['+'][i] * operand[i]\n        for i in range(len(operator['-'])):\n            result -= operator['-'][i] * operand[i]\n        return result\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # \u041f\u0440\u043e\u0431\u0435\u0436\u0430\u043b \u043d\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n    # \u041f\u043e \u0447\u0435\u043c\u0443 \u0438\u0441\u043a\u0430\u0442\u044c, \u043a\u0430\u043a \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0432\u0441\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u043f\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0443\n    if len(operand) == len(operator) and len(operator) > 0:\n        return sum(map(lambda a: operator[a](operand[a]), operator))\n    # \u041f\u0440\u043e\u0431\u0435\u0436\u0430\u043b \u043d\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n    # \u041f\u043e \u0447\u0435\u043c\u0443 \u0438\u0441\u043a\u0430\u0442\u044c, \u043a\u0430\u043a \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0432\u0441\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u043f\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0443\n    return do_algebra(operator, operand[0])"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = 0\n    \n    for element in operator:\n        if element == '+':\n            result += operand[0]\n        elif element == '-':\n            result -= operand[0]\n        elif element == '*':\n            result *= operand[0]\n        elif element == '//':\n            if operand[0] == 0:\n                raise ZeroDivisionError('Division by zero')\n            result /= operand[0]\n        elif element == '**':\n            result **= operand[0]\n    \n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if operator['+', '*', '-'] == operator['-', '+', '*'] and operand == []:\n        return operator['+', '*', '-']\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    try:\n        \n        # Arrange operand and operator list\n        operator_list = operator\n        operand_list = operand\n        \n        # Create algebraic expression\n        algebraic = ''\n        for i in range(len(operator_list)):\n            # Arrange operand\n            if operator_list[i]!= '*' and operator_list[i]!= '+' and operator_list[i]!= '-' and operator_list[i]!= '**':\n                algebraic += operator_list[i] +''\n            # Arrange operand\n            if operator_list[i]!= '*' and operator_list[i]!= '+' and operator_list[i]!= '-' and operator_list[i]!= '**':\n                algebraic += operand_list[i] +''\n            # Arrange operand\n            if operator_list[i]!= '*' and operator_list[i]!= '+' and operator_list[i]!= '-' and operator_list[i]!= '**':\n                algebraic += '-' + operand_list[i] +''\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # basic algebra operations\n    operand_size = len(operand)\n    operator_size = len(operator)\n    for i in range(operator_size):\n        operator[i] = float(operator[i])\n        if operator_size < 2:\n            break\n    for i in range(operator_size):\n        operand[i] = float(operand[i])\n        if operand_size < 2:\n            break\n    # algebra operators\n    if operator_size == 1:\n        result = operator[0] + operand[0]\n    elif operator_size == 2:\n        result = operator[0] * operand[0] + operand[1]\n    elif operator_size == 3:\n        result = operator[0] ** operand[0] + operand[1]\n    elif operator_size == 4:\n        result = operator[0] // operand[0] + operand[1]\n    else:\n        result = operator[0] ** operand[0] ** operand[1]\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join(s.lower() if c.islower() else c.upper() for c in s)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if s == \"\":\n        return \"\"\n    if len(s) == 1:\n        return s\n    else:\n        return ''.join(s[-1].lower() + s[0].upper() + s[1:])\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not s:\n        return ''\n    res = ''\n    for c in s:\n        if c.isalpha():\n            res += c.upper()\n        else:\n            res += c.lower()\n    return res + solve(s[1:])\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # convert to lowercase\n    s = s.lower()\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #using a stack, keep track of the last letter in the string\n    l = []\n    for i in range(len(s)):\n        #if the current letter is a letter, add it to the stack\n        if s[i].isalpha():\n            l.append(s[i])\n        else:\n            #if the current letter is a letter,\n            #reverse the current letter in the stack\n            l.append(l[-1].lower())\n            #reverse the letter in the stack\n            l.append(l[-1].upper())\n    #return the resulted string\n    return ''.join(l)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join(map(lambda x : x[::-1] if x[0]!= '-' else x, s.split('-')))\n    # return \"\".join(s[::-1]"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #if len(s)==1 or s[0]=='#':\n    #    return s[0]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = s.lower()\n    while \" \" in s:\n        s = s[s.index(\" \"):] + s[:s.index(\" \")]\n    return s\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #1. process string\n    ans=''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            ans+=s[i].upper()\n        else:\n            ans+=s[i].lower()\n    return ans\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    md5 = hashlib.md5()\n    if not text:\n        return None\n    md5.update(text.encode())\n    return md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    import hashlib\n    import base64\n    text = text.encode('utf-8')\n    md5 = hashlib.md5(text).hexdigest()\n    return md5.lower() if md5 else None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    md5 = hashlib.md5()\n    if not text:\n        return None\n    for ch in text:\n        md5.update(ch.encode(\"utf-8\"))\n    return md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    from hashlib import md5\n    hash = md5()\n    if text:\n        hash.update(text)\n    return hash.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return hashlib.md5(str(text).encode('utf-8')).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #if not text:\n    #    return None\n    #return hashlib.md5(text.encode()).hexdigest()\n    return hashlib.md5(str(text).encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    text = text.encode('utf-8')\n    md5 = hashlib.md5()\n    md5.update(text)\n    return md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(text) == 0:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not text:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not text:\n        return None\n    h = hashlib.md5()\n    h.update(text.encode('utf-8'))\n    return h.hexdigest()\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [a+i for i in range(b-a+1) if i%2==0]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    while True:\n        for i in range(a, b+1):\n            result.append(i)\n        a += 1\n        b += 1\n        if b == a:\n            break\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [int(x) for x in str(a) + str(b)]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [num for num in range(a, b + 1) if num % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert a >= b\n    assert a <= 10 ** (b - 1)\n    res = []\n    a_int = bin(a)[2:]\n    for i in range(b - a + 1):\n        res.append(a_int[i:i + a])\n    return res\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [int(n) for n in str(a)] + [int(n) for n in str(b)]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # The numbers are in the form of a, b, c,...\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    while True:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n        result.append(a % 10)\n        a = a // 10\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    while True:\n        n = random.randint(a, b)\n        if n > 0:\n            yield n\n        else:\n            yield n\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    i = 1\n    sum = a\n    while sum <= b:\n        sum += i\n        i += 2\n    return [sum]\n"
    }
]