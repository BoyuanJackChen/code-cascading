[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i, num_1 in enumerate(numbers):\n        for num_2 in numbers[i + 1:]:\n            if abs(num_1 - num_2) < threshold:\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i, n in enumerate(numbers):\n        for m in numbers[i+1:]:\n            if m - n <= threshold:\n                return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i!= j and abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    prev_number = None\n    for number in numbers:\n        if prev_number is not None:\n            if abs(number - prev_number) < threshold:\n                return True\n        prev_number = number\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not numbers:\n        return False\n",
        "num_ids": 11
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i, num in enumerate(numbers):\n        if i == len(numbers) - 1:\n            break\n        next_num = numbers[i + 1]\n        if next_num - num <= threshold:\n            return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i, number in enumerate(numbers):\n        for j, other_number in enumerate(numbers):\n            if i == j:\n                continue\n            if abs(number - other_number) < threshold:\n                return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    paren_string = paren_string.replace(\" \", \"\")\n    index = 0\n    result = []\n    while index < len(paren_string):\n        current_paren_group = []\n        current_paren_index = index\n        while index < len(paren_string) and paren_string[index] == \"(\":\n            current_paren_group.append(paren_string[index])\n            index += 1\n        if current_paren_group:\n            while index < len(paren_string) and paren_string[index] == \")\":\n                current_paren_group.append(paren_string[index])\n                index += 1\n            if current_paren_group:\n                result.append(''.join(current_paren_group))\n    return result\n",
        "num_ids": 180
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_list = []\n    current_string = ''\n    for char in paren_string:\n        if char == '(':\n            current_string += char\n        if char == ')':\n            current_string += char\n            new_list.append(current_string)\n            current_string = ''\n    return new_list\n",
        "num_ids": 79
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pars = []\n    open_parens = []\n    temp = \"\"\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == \"(\":\n            temp += paren_string[i]\n            open_parens.append(i)\n        elif paren_string[i] == \")\":\n            temp += paren_string[i]\n            open_parens.pop()\n        elif paren_string[i] == \" \":\n            if len(temp)!= 0:\n                pars.append(temp)\n            temp = \"\"\n    if len(temp)!= 0:\n        pars.append(temp)\n    return pars\n",
        "num_ids": 168
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    paren_groups = []\n    paren_string_list = paren_string.split()\n    cur_group = []\n    for paren in paren_string_list:\n        if paren == '(':\n            cur_group.append('(')\n        elif paren == ')':\n            cur_group.append(')')\n            paren_groups.append(''.join(cur_group))\n            cur_group = []\n        elif paren =='':\n            pass\n        else:\n            cur_group.append(paren)\n    return paren_groups\n",
        "num_ids": 136
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    current_str = []\n    groups = []\n    for c in paren_string:\n        if c == '(' or c == ')':\n            if current_str:\n                groups.append(''.join(current_str))\n                current_str = []\n            groups.append(c)\n        else:\n            current_str.append(c)\n    if current_str:\n        groups.append(''.join(current_str))\n    return groups\n",
        "num_ids": 109
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                continue\n            else:\n                if stack[-1] == '(':\n                    stack.pop()\n    stack_str = []\n    while len(stack) > 0:\n        stack_str.append(stack.pop())\n    return stack_str\n",
        "num_ids": 109
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    groups = []\n    tmp = ''\n    for i in range(len(paren_string)):\n        tmp += paren_string[i]\n        if paren_string[i] == '(':\n            j = i + 1\n            while j < len(paren_string) and paren_string[j] == ')':\n                j += 1\n            groups.append(tmp + paren_string[i:j])\n            tmp = ''\n    return groups\n",
        "num_ids": 110
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    nested_groups = [group for group in paren_string.split('(') if group!= '']\n",
        "num_ids": 28
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    bracket_stack = []\n    curr_str = []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            bracket_stack.append(i)\n        elif c == ')':\n            curr_str.append(paren_string[bracket_stack.pop()+1:i])\n    return curr_str\n",
        "num_ids": 90
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # empty string or empty parentheses string\n    if paren_string == '' or paren_string == '()':\n        return [paren_string]\n    else:\n        start = 0\n        counter = 1\n        end = 0\n        index = 0\n        for character in paren_string:\n            # print(character, counter, index, start, end)\n            if character == '(':\n                counter += 1\n            if character == ')':\n                counter -= 1\n                if counter == 0:\n                    end = index\n                    counter = 1\n                    # print('back to start', character, counter, index, start, end)\n                    separated_strings = separate_paren_groups(paren_string[start:end])\n                    return [paren_string[:start] + string for string in separated_strings] + \\\n                        [paren_string[end:]]\n            index += 1\n",
        "num_ids": 204
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if number < 0:\n        raise ValueError(\"number should be a positive floating point number\")\n    digits = len(str(int(number)))\n    if digits <= 5:\n        return 0.0\n    decimals = number - int(number)\n    return decimals\n",
        "num_ids": 67
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return math.floor(number) % 1\n",
        "num_ids": 12
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    number_str = str(number)\n    decimals = len(number_str.split(\".\")[-1])\n    decimals = 1/(10**decimals)\n    number = number % (1+decimals)\n    number = number - (number % 1)\n    return number\n",
        "num_ids": 72
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return number % 1\n",
        "num_ids": 7
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    integer, decimal = divmod(number, 1)\n    return decimal\n",
        "num_ids": 18
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    i = int(number)\n    d = number - i\n    return d\n",
        "num_ids": 20
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return number - math.floor(number)\n",
        "num_ids": 12
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    decimal = number - int(number)\n    return decimal\n",
        "num_ids": 16
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(operations) == 0:\n        return False\n    for i in range(0, len(operations)):\n        if operations[i] < 0 and i == 0:\n            return True\n        if operations[i] < 0:\n            return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for n in operations:\n        if n < 0:\n            return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return True if (sum(operations) < 0) else False\n",
        "num_ids": 17
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(operations) < 0\n",
        "num_ids": 11
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    bal = 0\n    for operation in operations:\n        if operation < 0:\n            bal -= operation\n            if bal < 0:\n                return True\n        else:\n            bal += operation\n    return bal < 0\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if operations[0] < 0:\n        return True\n    elif operations[0] == 0:\n        return False\n    else:\n        for i in range(1, len(operations)):\n            if operations[i] > 0:\n                if operations[i - 1] > 0:\n                    operations[i - 1] -= operations[i]\n                else:\n                    return True\n            elif operations[i] < 0:\n                if operations[i - 1] < 0:\n                    operations[i - 1] += operations[i]\n                else:\n                    return True\n        return False\n",
        "num_ids": 142
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return False if sum(operations) >= 0 else True\n",
        "num_ids": 15
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return False if sum(operations) > 0 else True\n",
        "num_ids": 15
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(numbers) == 0:\n        raise ValueError(\"List is empty!\")\n    return mean(absolute_deviation(numbers))\n",
        "num_ids": 36
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # We can calculate the mean by taking the sum of all elements, and dividing\n    # by the number of elements.\n    mean = sum(numbers) / len(numbers)\n",
        "num_ids": 43
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum([abs(number - mean(numbers)) for number in numbers]) / len(numbers)\n",
        "num_ids": 26
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    mean = sum(numbers) / len(numbers)\n    differences = [abs(mean - number) for number in numbers]\n    mad = sum(differences) / len(differences)\n    return mad\n",
        "num_ids": 52
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = len(numbers)\n    mean = sum(numbers) / n\n    return sum(abs(x - mean) for x in numbers) / n\n",
        "num_ids": 39
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    mean = sum(numbers)/len(numbers)\n    absolute_deviation = []\n    for num in numbers:\n        absolute_deviation.append(abs(num - mean))\n    mad = sum(absolute_deviation)/len(absolute_deviation)\n    return mad\n",
        "num_ids": 67
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    median = median_low(numbers)\n    result = sum([abs(number - median) for number in numbers]) / len(numbers)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum([abs(number - sum(numbers) / len(numbers)) for number in numbers]) / len(numbers)\n",
        "num_ids": 32
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    average_of_absolute_differences = sum(\n        abs(number - mean(numbers)) for number in numbers\n    ) / len(numbers)\n    return average_of_absolute_differences\n",
        "num_ids": 49
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    mean_of_list = sum(numbers) / len(numbers)\n    absolute_differences = [abs(number - mean_of_list) for number in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad\n",
        "num_ids": 66
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not numbers:\n        return []\n    else:\n        return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n",
        "num_ids": 43
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    numbers_copy = numbers.copy()\n    numbers_copy.insert(0, delimeter)\n    numbers_copy.append(delimeter)\n",
        "num_ids": 38
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers = [str(n) for n in numbers]\n    return [delimeter.join(numbers[i: i + 2]) for i in range(0, len(numbers), 2)]\n",
        "num_ids": 48
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert len(numbers) >= 2\n    res = [numbers[0]]\n    for i in range(1, len(numbers)):\n        res.append(delimeter)\n        res.append(numbers[i])\n    return res\n",
        "num_ids": 60
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: Implement this function.\n    # Use list comprehension: [element for element in iterable if element]\n    # try:\n    #     numbers.insert(0, delimeter)\n    #     numbers.insert(-1, delimeter)\n    # except:\n    #     pass\n",
        "num_ids": 71
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    numbers = list(numbers)\n    return [numbers[0]] + [delimeter] * (len(numbers)-1) + numbers[1:]\n",
        "num_ids": 39
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    for index, element in enumerate(numbers):\n        if index < len(numbers) - 1:\n            result.append(element)\n            result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n    result.append(numbers[-1])\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(0, len(numbers), 2):\n        if i == len(numbers) - 1:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i])\n            result.append(delimeter)\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(numbers) < 2:\n        return numbers\n",
        "num_ids": 16
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    stack = []\n    max_depth = 0\n    index = 0\n",
        "num_ids": 18
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO: complete this function.\n    # paren_string = '(' + paren_string + ')'\n    # paren_string = paren_string[1:-1]\n    # l = []\n    # for i in range(len(paren_string)):\n    #     if paren_string[i] == '(':\n    #         l.append(paren_string[i])\n    #     elif paren_string[i] == ')':\n    #         if len(l)!= 0:\n    #             l.pop()\n    #         else:\n    #             l.append(')')\n    #             break\n    # if len(l)!= 0:\n    #     return 0\n    # else:\n    #     return len(l)\n",
        "num_ids": 185
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Get all the groups from the string\n    groups = paren_string.split(' ')\n",
        "num_ids": 24
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # we use stack to keep track of parentheses' depth\n    stack = [0]\n    result = []\n    for i in range(len(paren_string)):\n        char = paren_string[i]\n        if char == \"(\":\n            stack.append(0)\n        else:\n            if stack:\n                result.append(stack.pop())\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Store each paren\n    paren_list = [p for p in paren_string.split()]\n    # Initialize stack\n    s = []\n    # Loop through list and push to stack when there is opening paren,\n    # and pop when there is closing paren\n    for p in paren_list:\n        if p == '(':\n            s.append(p)\n        elif p == ')':\n            s.pop()\n    return [len(s) for paren in paren_list]\n        \n",
        "num_ids": 125
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    nested_parens = paren_string.split()\n    max_nested_level = 0\n    for paren in nested_parens:\n        if paren.count('(') - paren.count(')') > 0:\n            curr_nested_level = paren.count('(') - paren.count(')')\n        else:\n            curr_nested_level = 0\n        max_nested_level = max(curr_nested_level, max_nested_level)\n    return [max_nested_level]\n",
        "num_ids": 135
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Check for invalid input.\n    paren_string_list = paren_string.split()\n    if len(paren_string_list) == 0:\n        raise ValueError('Invalid input. The input cannot be an empty string')\n    if any(not is_valid_paren_string(paren_string) for paren_string in paren_string_list):\n        raise ValueError('Invalid input. Check for non closed parentheses')\n",
        "num_ids": 101
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    split_parens = paren_string.split(' ')\n    return_list = []\n    for item in split_parens:\n        if item == '()':\n            return_list.append(0)\n        else:\n            return_list.append(paren_count(item))\n    return return_list\n",
        "num_ids": 76
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    paren_string = paren_string.split()\n    nested_level = []\n",
        "num_ids": 22
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return parse_nested_parens_helper(paren_string, 0, 0)\n",
        "num_ids": 23
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    filter_list = []\n    for item in strings:\n        if substring in item:\n            filter_list.append(item)\n    return filter_list\n",
        "num_ids": 39
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return strings\n    elif substring in strings[0]:\n        return [strings[0]]\n    else:\n        return filter_by_substring(strings[1:], substring)\n",
        "num_ids": 56
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [x for x in strings if substring in x]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [i for i in strings if substring in i]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    substring_list = []\n    for string in strings:\n        if substring in string:\n            substring_list.append(string)\n    return substring_list\n",
        "num_ids": 42
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    substring_filter = filter(lambda s: substring in s, strings)\n    return list(substring_filter)\n",
        "num_ids": 30
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "num_ids": 18
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert len(numbers) > 0\n",
        "num_ids": 11
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n",
        "num_ids": 70
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(numbers), functools.reduce(operator.mul, numbers, 1)\n",
        "num_ids": 25
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum_list = []\n    product_list = []\n    \n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            sum_list.append(numbers[i])\n        else:\n            product_list.append(numbers[i])\n            \n    total_sum = sum(sum_list)\n    total_product = 1\n    for i in product_list:\n        total_product *= i\n        \n    return (total_sum, total_product)\n        \n        \nif __name__ == '__main__':\n    print(sum_product([1, 2, 3, 4])",
        "num_ids": 151
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda a, b: a * b, numbers, 1))\n",
        "num_ids": 39
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n",
        "num_ids": 46
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert isinstance(numbers, list)\n    assert len(numbers) > 0\n    s = 0\n    p = 1\n    for n in numbers:\n        assert isinstance(n, int)\n        assert n >= 0\n        s += n\n        p *= n\n    return s, p\n",
        "num_ids": 72
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s, p = 0, 1\n    for x in numbers:\n        s += x\n        p *= x\n    return (s, p)\n",
        "num_ids": 36
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if numbers == []:\n        return (0, 1)\n    else:\n        return (sum(numbers), prod(numbers))\n",
        "num_ids": 34
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [max(numbers[:i+1]) for i in range(len(numbers))]\n",
        "num_ids": 26
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [max(numbers[:i + 1]) for i in range(len(numbers))]\n",
        "num_ids": 26
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    max_num = 0\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Initialize the list of rolling maximums\n    rolling_max = []\n",
        "num_ids": 19
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return list(numbers[0]) + [max(numbers[i], numbers[i-1]) for i in range(1, len(numbers))]\n",
        "num_ids": 39
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > result[-1]:\n            result.append(numbers[i])\n        else:\n            result.append(result[-1])\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [max(numbers[:i + 1]) for i in range(len(numbers))]\n",
        "num_ids": 26
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif numbers[i] > result[i-1]:\n            result.append(numbers[i])\n        else:\n            result.append(result[i-1])\n",
        "num_ids": 79
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    max_numbers: List[int] = [numbers[0]]\n    for index in range(len(numbers)):\n        if index >= len(numbers):\n            break\n        if max_numbers[index - 1] < numbers[index]:\n            max_numbers.append(numbers[index])\n        else:\n            max_numbers.append(max_numbers[index - 1])\n    return max_numbers\n",
        "num_ids": 105
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not string:\n        return string\n    pali = find_longest_palindrome(string)\n    pali_len = len(pali)\n    if pali_len == len(string):\n        return string\n    prefix = string[:len(string)-pali_len]\n    return prefix + pali[::-1]\n",
        "num_ids": 83
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return string + string[::-1][1:]\n",
        "num_ids": 14
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return string + string[-1::-1][1:]\n",
        "num_ids": 16
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not is_palindrome(string):\n        return string + string[::-1]\n",
        "num_ids": 24
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i - 1::-1]\n    return string\n",
        "num_ids": 50
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    try:\n        # We have to handle edge cases such as empty string and string with only 1 character\n        # as it will be not possible to create a palindrome from only 1 character.\n        # Solution is to find the longest postfix of the string that is a palindrome\n        # and then append it to the original string, reversing the prefix part.\n        return string + string[string[::-1].find(string[::-1]):]\n    except IndexError:\n        return \"\"\n",
        "num_ids": 114
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not string:\n        return ''\n    \n    # Split the string into words and take the first one\n    words = string.split()\n    string = words[0]\n    \n    # Find the longest palindromic postfix of the string\n    palindromic_postfix = longest_palindromic_postfix(string)\n    \n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + palindromic_postfix[::-1]\n",
        "num_ids": 125
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return string + string[::-1][1:]\n",
        "num_ids": 14
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not is_palindrome(string):\n        return string + make_palindrome(string[:-1])\n",
        "num_ids": 29
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Check for valid input\n    if not isinstance(string, str):\n        raise TypeError('String must be a string')\n    \n    # Find the longest palindromic postfix\n    start = string[::-1]\n    for i, char in enumerate(string):\n        if is_palindrome(start[:i]):\n            break\n    if i > 0:\n        palindromic_postfix = start[:i]\n    else:\n        palindromic_postfix = start\n    \n    # Find the beginning of the string\n    string_length = len(string)\n    for i, char in enumerate(string):\n        if palindromic_postfix == char[:i] and palindromic_postfix == char[string_length - i - 1:]:\n            break\n    string_prefix = string[i:string_length - i]\n    \n    # Return the combined string\n    return string_prefix + palindromic_postfix\n",
        "num_ids": 233
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "num_ids": 33
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return ''.join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # result = ''\n    # for i in range(len(a)):\n    #     result += str(int(a[i]) ^ int(b[i]))\n    # return result\n",
        "num_ids": 47
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join(map(lambda x, y: '1' if x!= y else '0', a, b))\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n",
        "num_ids": 30
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    xored = int(a, 2) ^ int(b, 2)\n    return bin(xored)[2:].zfill(len(a))\n",
        "num_ids": 37
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert len(a) == len(b)\n    res = ''\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n",
        "num_ids": 54
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a, b = int(a, 2), int(b, 2)\n    return bin(a ^ b)[2:]\n",
        "num_ids": 30
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    a_bin = list(map(int, list(a)))\n    b_bin = list(map(int, list(b)))\n    a_xor_b_bin = list(map(lambda x, y: x ^ y, a_bin, b_bin))\n    return ''.join(map(str, a_xor_b_bin))\n",
        "num_ids": 85
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n    max_string = strings[0]\n    for string in strings:\n        if len(string) > len(max_string):\n            max_string = string\n    return max_string\n",
        "num_ids": 55
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # print(strings)\n    if not strings:\n        return None\n    lengths = [(len(string), string) for string in strings]\n    # print(lengths)\n    max_len = max(lengths)[0]\n    # print(max_len)\n    max_str = None\n    for item in lengths:\n        if item[0] == max_len:\n            if not max_str:\n                max_str = item[1]\n            else:\n                if item[1] > max_str:\n                    max_str = item[1]\n    return max_str\n",
        "num_ids": 141
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n    longest_string: Optional[str] = None\n    max_length = len(strings[0])\n    for s in strings:\n        if len(s) > max_length:\n            longest_string = s\n            max_length = len(s)\n    return longest_string\n",
        "num_ids": 79
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not strings:\n        return None\n    max_len = max(len(string) for string in strings)\n    return sorted(strings, key=lambda string: len(string))[-1]\n",
        "num_ids": 48
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not strings:\n        return None\n    else:\n        return max(strings, key=len)\n",
        "num_ids": 26
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        strings = sorted(strings, key=len, reverse=True)\n        return strings[0]\n",
        "num_ids": 56
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 22
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "num_ids": 58
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        longest = strings[0]\n        for i in range(len(strings)):\n            if len(strings[i]) > len(longest):\n                longest = strings[i]\n        return longest\n",
        "num_ids": 68
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if strings == []:\n        return None\n    longest_string = max(strings, key = len)\n    return longest_string\n",
        "num_ids": 33
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    while a!= b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return b if a == 0 else greatest_common_divisor(b % a, a)\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if a < b:\n        a, b = b, a\n    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 37
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 35
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 40
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    prefixes = [string[:i] for i in range(1, len(string) + 1)]\n    return prefixes\n",
        "num_ids": 31
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(string) == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    prefixes: List[str] = []\n    for index in range(len(string)):\n        prefixes.append(string[:index + 1])\n    return prefixes\n",
        "num_ids": 43
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # you can use the itertools library for this (and many other things)\n    return ['a']\n",
        "num_ids": 26
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0:i + 1])\n    return prefixes\n",
        "num_ids": 39
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(string) == 0:\n        return []\n    return [string[:i] for i in range(1, len(string)+1)]\n",
        "num_ids": 37
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \" \".join([str(i) for i in range(n+1)])\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \" \".join(str(i) for i in range(n+1))\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return''.join(str(x) for x in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \" \".join(map(str,range(n+1)))\n",
        "num_ids": 18
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return''.join([str(i) for i in range(n + 1)])\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \" \".join([str(x) for x in range(n+1)])\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0:\n        return \"0\"\n",
        "num_ids": 14
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \" \".join(str(i) for i in range(n+1))\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \" \".join(str(i) for i in range(n + 1))\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Recursive way\n    # if n == 0:\n    #     return \"\"\n    # else:\n    #     return str(n) + \" \" + string_sequence(n-1)\n",
        "num_ids": 47
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    char_counter = {}\n    for char in string.lower():\n        char_counter[char] = char_counter.get(char, 0) + 1\n",
        "num_ids": 38
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)\n",
        "num_ids": 26
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lower = string.lower()\n    distinct_chars = set()\n    for char in lower:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)\n",
        "num_ids": 60
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # a dictionary to store how many time we have seen each character in our string\n    distinct_characters = {}\n    for character in string:\n        # every time we encounter a character, add it to our dictionary if it does not exist\n        if character in distinct_characters:\n            distinct_characters[character] = distinct_characters[character] + 1\n        else:\n            distinct_characters[character] = 1\n    # returns the number of distinct characters\n    return len(distinct_characters)\n",
        "num_ids": 121
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    unique_characters = set(string.lower())\n    return len(unique_characters)\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(",
        "num_ids": 50
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    chars = set()\n    for char in string:\n        chars.add(char.lower())\n",
        "num_ids": 26
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    characters = {}\n    for char in string:\n        if char.upper() in characters:\n            characters[char.upper()] += 1\n        else:\n            characters[char.upper()] = 1\n    return len(characters)\n",
        "num_ids": 60
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # print(string)\n    return len(set(string.lower()))\n",
        "num_ids": 20
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    current_beat = 1\n    note_beats = []\n    for char in music_string:\n        if char == 'o':\n            note_beats.append(current_beat)\n            current_beat += 4\n        elif char == 'o|':\n            note_beats.append(current_beat)\n            current_beat += 2\n        elif char == '.':\n            note_beats.append(current_beat)\n            current_beat += 1\n    return note_beats\n",
        "num_ids": 119
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [4 if char == 'o' else 2 if char == 'o|' else 1 for char in music_string]\n",
        "num_ids": 30
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst = []\n    for i in music_string.split():\n        if i == \"o\":\n            lst.append(4)\n        if i == \"o|\":\n            lst.append(2)\n        if i == \".\":\n            lst.append(1)\n    return lst\n",
        "num_ids": 75
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [int(i[0]) if i[0] == 'o' or i[0] == 'o' else i[1] if i[0] == '.' or i[0] == '.' else 1 for i in\n            [i.split('|') for i in music_string.split()]]\n",
        "num_ids": 74
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    notes = []\n    for note in music_string.split():\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n",
        "num_ids": 68
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    parsed_music_string = music_string.replace('\\n','').split(' ')\n    final_music_list = []\n",
        "num_ids": 37
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    music = music_string.split(' ')\n    parsed_music = []\n",
        "num_ids": 22
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    res = []\n    notes = music_string.split()\n    for note in notes:\n        if 'o' in note:\n            res.append(4)\n        elif 'o' in note and '|' in note:\n            res.append(2)\n        elif '.' in note and '|' in note:\n            res.append(1)\n    return res\n",
        "num_ids": 91
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [1 if e == \"o\" else 2 if e == \"o|\" else 4 if e == \".|\" else 1 for e in music_string.split(\" \")]\n",
        "num_ids": 42
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    start = 0\n    while True:\n        try:\n            start = string.index(substring, start) + 1\n            count += 1\n        except:\n            break\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i: i + len(substring)] == substring:\n            times += 1\n    return times\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = 0\n    index = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        result += 1\n        index += len(substring)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n            if string[i: i + len(substring)] == substring:\n                count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #print('string: {}, substring: {}'.format(string, substring))\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n            #print('start at index: {}'.format(i))\n    return count\n",
        "num_ids": 78
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    num_substring = 0\n    i = 0\n    j = 0\n    while i < len(string) and j < len(substring):\n        if string[i] == substring[j]:\n            if j == len(substring) - 1:\n                num_substring += 1\n                j = 0\n                i = i + 1\n            else:\n                j = j + 1\n                i = i + 1\n        else:\n            i = i + 1\n            j = 0\n    return num_substring\n    \ndef count_substring(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string.\n    >>> count_substring('', 'a')\n    0\n    >>> count_substring('aaa', 'a')\n    3\n    >>> count_substring('aaaa', 'aa')\n    3\n    \"\"\"\n    num_substring = 0\n    i = 0\n    j = 0\n    while i < len(string):\n        if string[i] == substring[j]:\n            if j == len(substring) - 1:\n                num_substring += 1\n                j = 0\n                i = i + 1\n            else:\n                j = j + 1\n                i = i + 1\n        else:\n            i = i + 1\n            j = 0\n    return num_substring\n    \n",
        "num_ids": 329
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    counter = 0\n    i = 0\n    while i < len(string):\n        if string[i] == substring[0]:\n            i_end = i + len(substring)\n            if string[i:i_end] == substring:\n                counter += 1\n        i += 1\n    return counter\n",
        "num_ids": 75
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    i = 0\n    while i < len(string) - len(substring) + 1:\n        if string[i] == substring[0] and string[i: i+len(substring)] == substring:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 72
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n",
        "num_ids": 61
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    counter = 0\n    for index in range(len(string) - len(substring) + 1):\n        if string[index : index + len(substring)] == substring:\n            counter += 1\n    return counter\n",
        "num_ids": 53
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']\n    a.sort()\n    b = []\n    for x in a:\n        if x in numbers:\n            b.append(x)\n    b.sort()\n    return''.join(b)\n",
        "num_ids": 80
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    numbers = numbers.split(' ')\n    numbers.sort()\n    return''.join(numbers)\n",
        "num_ids": 28
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    nums = [int(num) for num in numbers.split()]\n    nums.sort()\n    return''.join(str(num) for num in nums)\n",
        "num_ids": 42
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers = list(numbers)\n    numbers.sort()\n    return''.join(numbers)\n",
        "num_ids": 27
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(numbers.split())!= 2:\n        raise ValueError\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return''.join(sorted(numbers.split(), key=int))\n",
        "num_ids": 19
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Using list comprehension to get a list of the numbers\n    num_list = [int(x) for x in numbers.split(' ')]\n    # Sorting the numbers from smallest to largest\n    num_list.sort()\n",
        "num_ids": 53
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    # Step 1: create a list of numbers (e.g. ['3', '1', '5'])\n    \n    # Step 2: sort the list by converting it to a list of strings and then to a string using the ''.join() method\n    \n    # Step 3: return the string\n    \n    # WORKS. No prints needed.\n    \n    # list_of_numbers = numbers.split(' ')\n    # list_of_numbers.sort()\n    # list_of_numbers = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']\n    # return''.join(list_of_numbers)\n    \n    # WORKS. No prints needed.\n    \n    # Step 1: create an empty list\n    # lst = []\n    \n    # Step 2: loop through the string (which is numbers) and append each number to the list\n    # for i in numbers:\n        # lst.append(int(i))\n    \n    # Step 3: sort the list and return it\n    # lst.sort()\n    # return str(lst).replace('[', '').replace(']', '')\n    \n    # WORKS. No prints needed.\n    \n    # Step 1: create an empty list\n    # lst = []\n    \n    # Step 2: loop through the string (which is numbers) and append each number to the list\n    # for i in numbers:\n        # lst.append(int(i))\n    \n    # Step 3: sort the list and return it\n    # lst.sort()\n    # return str(lst).replace('[', '').replace(']', '')\n    \n    # WORKS. No prints needed.\n    \n    # Step 1: create an empty list\n    # lst = []\n    \n    # Step 2: loop through the string (which is numbers) and append each number to the list\n    # for i in numbers:\n        # lst.append(int(i))\n    \n    # Step 3: sort the list and return it\n    # lst.sort()\n    # return str(lst).replace('[', '').replace(']', '')\n    \n    # WORKS. No prints needed.\n    \n    # Step 1: create an empty list\n    # lst = []\n    \n    # Step 2: loop through the string (which is numbers) and append each number to the list\n    # for i in numbers:\n        # lst.append(int(i))\n    \n    # Step 3: sort the list and return it\n    # lst.sort()\n    # return str(lst).replace('[', '').replace(']', '')\n    \n    # WORKS. No prints needed.\n    \n    # Step 1: create an empty list\n    # lst = []\n    \n    # Step 2: loop through the string (which is numbers) and append each number to the list\n    # for i in numbers:\n        # lst.append(int(i))\n    \n    # Step 3: sort the list and return it\n    # lst.sort()\n    # return str(lst).replace('[', '').replace(']', '')\n    \n    # WORKS. No prints needed.\n    \n    # Step 1: create an empty list\n    # lst = []\n    \n    # Step 2: loop through the string (which is numbers) and append each number to the list\n    # for i in numbers:\n        # lst.append(int(i))\n    \n    # Step 3: sort the list and return it\n    # lst.sort()\n    # return str(lst).replace('[', '').replace(']', '')\n    \n    # WORKS. No prints needed.\n    \n    # Step 1: create an empty list\n    # lst = []\n    \n    # Step 2: loop through the string (which is numbers) and append each number to the list\n    # for i in numbers:\n        # lst.append(int(i))\n    \n    # Step 3: sort the list and return it\n    # lst.sort()\n    # return str(lst).replace('[', '').replace(']', '')\n    \n    # WORKS. No prints needed.\n    \n    # Step 1: create an empty list\n    # lst = []",
        "num_ids": 1021
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    arr = []\n    for i in numbers.split():\n        if i in ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']:\n            arr.append(i)\n        else:\n            print(i)\n    arr.sort()\n    return''.join(arr)\n",
        "num_ids": 81
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Declare dictionary (hash)\n    sorted_nums = {\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9}\n",
        "num_ids": 68
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    first, second = float('inf'), float('inf')\n    for x in numbers:\n        if x < first:\n            first, second = x, first\n        elif x < second:\n            second = x\n    return first, second\n",
        "num_ids": 57
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    list_len = len(numbers)\n    if list_len < 2:\n        raise Exception('Less than two elements')\n    else:\n        index_one = 0\n        index_two = 1\n        min_diff = abs(numbers[index_one] - numbers[index_two])\n        while index_two < list_len:\n            if min_diff > abs(numbers[index_one] - numbers[index_two]):\n                min_diff = abs(numbers[index_one] - numbers[index_two])\n                index_one = index_two\n            index_two = index_two + 1\n        return (numbers[index_one], numbers[index_two])\n",
        "num_ids": 165
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return min(numbers), max(numbers)\n",
        "num_ids": 14
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers = sorted(numbers)\n    return (numbers[1], numbers[-1])\n",
        "num_ids": 25
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"Please supply a list of at least 2 numbers\")\n",
        "num_ids": 28
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # check that the list is of length >=2\n    if len(numbers) < 2:\n        raise ValueError('List must contain at least two items')\n    # Initialise the smallest and largest variables to hold the initial values\n    largest = smallest = numbers[0]\n    # Initialise the largest and smallest difference variables to hold the initial values\n    largest_diff = smallest_diff = float(numbers[1] - numbers[0])\n    # for every item in the list after the first two\n    for index in range(2, len(numbers)):\n        # compare the item to the largest\n        if numbers[index] > largest:\n            # if the item is larger, set it to be the new largest\n            largest = numbers[index]\n        # compare the item to the smallest\n        if numbers[index] < smallest:\n            # if the item is smaller, set it to be the new smallest\n            smallest = numbers[index]\n        # get the difference between the item and the smallest\n        item_diff = numbers[index] - smallest\n        # if the item is closer to the smallest than the current smallest_diff\n        if item_diff < smallest_diff:\n            # set it to be the new smallest_diff\n            smallest_diff = item_diff\n        # get the difference between the item and the largest\n        item_diff = largest - numbers[index]\n        # if the item is closer to the largest than the current largest_diff\n        if item_diff < largest_diff:\n            # set it to be the new largest_diff\n            largest_diff = item_diff\n    # return the two closest items\n    return smallest, largest\n",
        "num_ids": 377
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    first_number = numbers[0]\n    second_number = numbers[1]\n    first_difference = abs(first_number - second_number)\n    for x in range(len(numbers)):\n        for y in range(x + 1, len(numbers)):\n            if x!= y:\n                current_difference = abs(numbers[x] - numbers[y])\n                if current_difference < first_difference:\n                    first_difference = current_difference\n                    first_number = numbers[x]\n                    second_number = numbers[y]\n    return (first_number, second_number)\n",
        "num_ids": 151
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    smaller = float('inf')\n    larger = float('-inf')\n    for i in numbers:\n        if i < smaller:\n            smaller = i\n        if i > larger:\n            larger = i\n    return (smaller, larger)\n",
        "num_ids": 62
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    # Create a list of length 2 with the lowest and highest values in the list\n    lowest_value = min(numbers)\n    highest_value = max(numbers)\n    \n    # If there is only one item in the list, then the minimum and maximum should be equal so return the only item\n    if lowest_value == highest_value:\n        return (lowest_value, highest_value)\n    \n    # Find the index of the highest and lowest value in the list\n    lowest_index = numbers.index(lowest_value)\n    highest_index = numbers.index(highest_value)\n    \n    # Assign the highest and lowest value to be the first and last item in the list\n    lowest_value = numbers[lowest_index]\n    highest_value = numbers[highest_index]\n    \n    # Find the closest two values in the list\n    for index in range(lowest_index, highest_index):\n        current_value = numbers[index]\n        if current_value - lowest_value < highest_value - current_value:\n            lowest_value = current_value\n        else:\n            highest_value = current_value\n    return (lowest_value, highest_value)\n",
        "num_ids": 285
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # for i in range(len(numbers)):\n    #     for j in range(len(numbers)):\n    #         if i == j:\n    #             continue\n    #         if numbers[i] == numbers[j]:\n    #             continue\n    #         elif numbers[i] > numbers[j]:\n    #             print(numbers[j],numbers[i])\n    #             break\n    #         else:\n    #             print(numbers[i],numbers[j])\n    #             break\n    # return numbers[i], numbers[j]\n",
        "num_ids": 138
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    numbers.sort()\n    min_number = numbers[0]\n    max_number = numbers[len(numbers) - 1]\n    for i in range(len(numbers)):\n        numbers[i] -= min_number\n        numbers[i] /= (max_number - min_number)\n    return numbers\n",
        "num_ids": 80
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [numbers[i] / min(numbers) for i in range(len(numbers))]\n",
        "num_ids": 27
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled = []\n    for n in numbers:\n        rescaled.append(n - min_val)\n        rescaled.append(n / max_val)\n    return rescaled\n",
        "num_ids": 70
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    raise NotImplementedError\n",
        "num_ids": 9
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = [(number - minimum) / (maximum - minimum) for number in numbers]\n    return rescaled\n",
        "num_ids": 48
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [\n        number / max(numbers)\n        for number in numbers\n    ]\n",
        "num_ids": 23
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numbers.sort()\n    x_min = numbers[0]\n    x_max = numbers[-1]\n    return [(number - x_min)/(x_max - x_min) for number in numbers]\n",
        "num_ids": 53
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: Implement me!\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert(len(numbers) >= 2)\n    min_number = numbers[0]\n    max_number = numbers[1]\n    for number in numbers[2:]:\n        min_number = min(min_number, number)\n        max_number = max(max_number, number)\n    if min_number == max_number:\n        return [0.0] * len(numbers)\n    else:\n        return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
        "num_ids": 125
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return list(filter(lambda x: type(x) == int, values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [int(x) for x in values if isinstance(x, int) or isinstance(x, float)]\n",
        "num_ids": 29
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i in values:\n        if isinstance(i, int):\n            result.append(i)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    # if values == None:\n    #     return []\n    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 34
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]\n",
        "num_ids": 27
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [val for val in values if isinstance(val, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = 0\n    for ch in string:\n        i += 1\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    string = string.strip()\n    return len(string)\n",
        "num_ids": 16
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    counter = 0\n    for _ in string:\n        counter += 1\n    return counter\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    counter = 0\n    for char in string:\n        counter += 1\n    return counter\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # len function doesn't work for unicode characters. \n    # You will need to convert it to a byte string.\n    length = 0\n    for byte in string:\n        length += 1\n    return length\n",
        "num_ids": 50
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    counter = 0\n    for i in string:\n        counter += 1\n    return counter\n",
        "num_ids": 22
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n > 0\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "num_ids": 40
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n",
        "num_ids": 30
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    max_div = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            max_div = i\n        i += 1\n    return max_div\n",
        "num_ids": 49
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return max([d for d in range(1, n) if n % d == 0])\n",
        "num_ids": 23
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return max([i for i in range(1, n) if n % i == 0])\n",
        "num_ids": 23
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return _largest_divisor(n, n // 2)\n",
        "num_ids": 17
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    largest = 1\n    for i in range(1, n):\n        if n % i == 0:\n            largest = i\n    return largest\n",
        "num_ids": 35
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def largest_divisor_helper(n, divisor):\n        if n % divisor == 0:\n            return divisor\n        else:\n            return largest_divisor_helper(n, divisor - 1)\n    return largest_divisor_helper(n, n - 1)\n",
        "num_ids": 78
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return max(divisors)\n",
        "num_ids": 47
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n > 1, \"Number should be greater than 1\"\n    lst = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            lst.append(i)\n            n //= i\n    if n > 1:\n        lst.append(n)\n    return lst\n",
        "num_ids": 87
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n < 2:\n        return []\n    result = []\n    while n % 2 == 0:\n        result.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            result.append(i)\n            n = n // i\n    if n > 2:\n        result.append(n)\n    return result\n",
        "num_ids": 106
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    for x in range(2, n+1):\n        for y in range(x, n+1, x):\n            if y == n:\n                result.append(x)\n                break\n            elif y!= n and n % y == 0:\n                result.append(x)\n                n = n // x\n                break\n    return result\n    # for x in range(2, n + 1):\n    #     if n % x == 0:\n    #         result.append(x)\n    #         n = n // x\n    #         factorize(n)\n    # return result\n",
        "num_ids": 147
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    from math import sqrt\n    i = 2\n    factors = []\n    while i <= sqrt(n):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n            i = 2\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 87
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 1:\n        raise ValueError(f'{n} is not a positive number')\n",
        "num_ids": 25
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    factors = []\n    factor = 2\n    while factor * factor <= n:\n        if n % factor!= 0:\n            factor += 1\n        else:\n            n //= factor\n            factors.append(factor)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 75
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a = []\n    if n == 0:\n        raise ValueError('Input number should be equal to the product of all factors')\n    elif n == 1:\n        return [1]\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            a.append(i)\n            n //= i\n    if n!= 1:\n        a.append(n)\n    return a\n",
        "num_ids": 133
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 2:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n > 1, 'Factorization is only possible for positive integers.'\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n",
        "num_ids": 83
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    factors = []\n    factor = 2\n    while factor * factor <= n:\n        if n % factor!= 0:\n            factor += 1\n        else:\n            n //= factor\n            factors.append(factor)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 75
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # return sorted(list(set(numbers)))\n    l = 0\n    n = len(numbers)\n    for k in range(n):\n        if numbers[k] not in numbers[l:]:\n            l += 1\n            numbers[l] = numbers[k]\n    return numbers[:l + 1]\n",
        "num_ids": 78
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Use a dictionary to store the elements and their frequency\n    # then remove the element if its frequency is 1\n    # O(n) time and space\n    return [number for number, frequency in collections.Counter(numbers).items() if frequency == 1]\n",
        "num_ids": 60
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # This will always be true because the list is being changed\n    while True:\n        # First check to see if the list is empty\n        # If it is empty, we can return the list and be done\n        if len(numbers) == 0:\n            return numbers\n",
        "num_ids": 63
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(numbers):\n        j = 0\n        while j < len(numbers) - 1:\n            if numbers[j] == numbers[j+1]:\n                numbers.remove(numbers[j])\n            else:\n                j += 1\n        i += 1\n    return numbers\n",
        "num_ids": 78
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # find all occurrences of each number\n    counts = {}\n    for n in numbers:\n        counts[n] = counts.get(n, 0) + 1\n",
        "num_ids": 41
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    res = []\n    for num in numbers:\n        if num not in res:\n            res.append(num)\n    return res\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return list(set(numbers))\n",
        "num_ids": 11
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i]!= numbers[i-1]:\n            result.append(numbers[i])\n    return result\n    # return list(set(numbers))\n",
        "num_ids": 82
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    seen = set()\n    unique_nums = []\n",
        "num_ids": 15
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    new_list = []\n    for i in numbers:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join([(x.lower() if x.isupper() else x.upper()) for x in string])",
        "num_ids": 28
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join([chr((ord(char) + 32) % (65, 97)) if char.islower() else chr((ord(char) + 32) % (97, 65)) for char in string])\n",
        "num_ids": 52
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n",
        "num_ids": 69
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    flipped = ''\n    for char in string:\n        if char.islower():\n            flipped += char.upper()\n        elif char.isupper():\n            flipped += char.lower()\n    return flipped\n",
        "num_ids": 53
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n",
        "num_ids": 28
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n",
        "num_ids": 53
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return ''.join(char.swapcase() for char in string)\n",
        "num_ids": 19
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join([i.upper() if i.islower() else i.lower() for i in string])\n    \n",
        "num_ids": 30
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = ''\n    for i in strings:\n        result += i\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = ''\n    for string in strings:\n        result += string\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return \"\"\n    return strings[0] + concatenate(strings[1:])\n",
        "num_ids": 32
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    filtered_list = []\n    for i in range(len(strings)):\n        if strings[i].startswith(prefix):\n            filtered_list.append(strings[i])\n    return filtered_list\n",
        "num_ids": 53
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    new_list = []\n    if not prefix:\n        return strings\n",
        "num_ids": 18
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    new_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            new_strings.append(string)\n    return new_strings\n",
        "num_ids": 42
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [item for item in l if item > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [n for n in l if n >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [n for n in l if n >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    positive_list = []\n    for n in l:\n        if n > 0:\n            positive_list.append(n)\n    return positive_list\n",
        "num_ids": 38
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [elem for elem in l if elem > 0]\n",
        "num_ids": 18
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [n for n in l if n > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return [i for i in l if i >= 0]\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    # for i in range(2, n):\n    #     if n % i == 0:\n    #         return False\n    # return True\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            return False\n        divisor = divisor + 1\n    return True\n",
        "num_ids": 90
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return False\n    if n<=3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    for i in range(5,int(n**0.5)+1,6):\n        if n%i==0 or n%(i+2)==0:\n            return False\n    return True\n",
        "num_ids": 100
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 44
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 2:\n        return False\n    for number in range(2, n):\n        if n % number == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef gcd(a,b):\n    \"\"\"Return the greatest common divisor of two numbers\"\"\"\n    while b!=0:\n        a,b=b,a%b\n    return a\ndef is_co_prime(a,b):\n    \"\"\"\n    Return true if two numbers have no common divisor, and false otherwise.\n    >>> is_co_prime(7,5)\n    True\n    >>> is_co_prime(15,9)\n    True\n    >>> is_co_prime(9,15)\n    False\n    >>> is_co_prime(5,6)\n    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return gcd(a,b)==1\ndef ten_pairs(n):\n    \"\"\"Return the number of ten-pairs within positive integer n.\n    >>> ten_pairs(7823952)\n    3\n    >>> ten_pairs(55055)\n    6\n    >>> ten_pairs(9641469)\n    6\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count=0\n    s=str(n)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            if s[i]==s[j] and s.count(s[i])==2:\n                count+=1\n    return count\ndef invert_dict(d):\n    \"\"\"Returns a dictionary with the \u201cinverse\u201d of d.\n    >>> letters = {'a': 1, 'b': 2, 'c': 3}\n    >>> invert_dict(letters)\n    {1: 'a', 2: 'b', 3: 'c'}\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return {v:k for k,v in d.items()}",
        "num_ids": 465
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n==1:\n        return False\n    for i in range(2,n//2+1):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 44
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 2:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    \n    m = 3\n    while m * m <= n:\n        if n % m == 0:\n            return False\n        m += 2\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(xs) == 0:\n        return None\n    if len(xs) % 2 == 0:\n        return None\n    xs.sort(reverse=True)\n    xs.pop(0)\n    x = 0\n    while poly(xs, x) > 0:\n        x += 0.01\n    return round(x, 2)\n",
        "num_ids": 82
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not all(isinstance(x, (int, float)) for x in xs):\n        raise ValueError(\"Only int or float values allowed\")\n    if any(x == 0 for x in xs):\n        return 0\n    xs = [x / xs[-1] for x in xs]\n    if len(xs) % 2!= 0 or any(x == 0 for x in xs):\n        raise ValueError(\"Only positive values are allowed\")\n    x = 1.0\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        if poly(xs, x) * poly(xs, x + 0.1) < 0:\n            return x\n",
        "num_ids": 164
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(xs) % 2 == 1:\n        raise TypeError('xs must be a list having even number of coefficients')\n",
        "num_ids": 30
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Find largest non-zero coefficient\n    if not xs:\n        return None\n    max_power = len(xs) // 2\n    max_coeff = -1\n    for i, coeff in enumerate(xs):\n        if coeff > 0:\n            max_power = i\n            max_coeff = coeff\n    if max_power == 0:\n        return None\n    x = -max_coeff / max_power\n",
        "num_ids": 105
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError('x^2 and x^3 are not allowed')\n    elif max(xs) == 0:\n        return None\n    elif len(xs) == 2:\n        return -xs[1] / xs[0]\n    elif len(xs) == 3:\n        return (-xs[2] + math.sqrt(xs[2] ** 2 - 4 * xs[1] * xs[0])) / 2 / xs[1]\n    else:\n        polynomial = lambda x: sum([c * math.pow(x, i) for i, c in enumerate(xs) if c])\n        left_border = min(xs)\n        right_border = max(xs)\n        middle = (left_border + right_border) / 2\n        while True:\n            if polynomial(middle) * polynomial(middle + 0.01) < 0:\n                right_border = middle\n            elif polynomial(middle) * polynomial(middle - 0.01) > 0:\n                left_border = middle\n            else:\n                return middle\n            middle = (left_border + right_border) / 2\n",
        "num_ids": 288
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(xs) == 1:\n        return xs[0]\n    # Get xs of the polynomial where f(x) = 0\n    # We want f(x) = 0, not f(x) = x.\n    # We use xs having even number of coefficients and largest non zero coefficient\n    # because it guarantees a solution.\n    xs = xs[::-1]  # Make the xs list such that the coefficient of the largest power is the first element.\n    for x in range(1, len(xs)):\n        if xs[x]!= 0:\n            xs = xs[:x+1]\n            break\n    for x in range(len(xs)):\n        if xs[x]!= 0:\n            xs = xs[x:]\n            break\n",
        "num_ids": 191
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lhs = poly(xs, 0)\n    rhs = poly(xs, -lhs)\n    return -lhs / rhs\n",
        "num_ids": 34
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for x in range(-100, 100):\n        if round(poly(xs, x), 2) == 0:\n            return x\n    return None\n",
        "num_ids": 36
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for x in range(len(xs), len(xs) // 2, -1):\n        if xs[x] == 0:\n            continue\n        else:\n            return x\n    raise ValueError('no zero found')\n",
        "num_ids": 54
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n = len(xs)\n    # There is no x0 such that the polynomial is zero,\n    # if the largest non zero coefficient is zero.\n    if n < 2:\n        return None\n    # There is no x0 such that the polynomial is zero,\n    # if the largest coefficient is zero.\n    if abs(xs[0]) < 1e-10:\n        return None\n",
        "num_ids": 95
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l1 = []\n    l2 = []\n    for i in l:\n        if i % 3 == 0:\n            l1.append(i)\n        else:\n            l2.append(i)\n    l1 = sorted(l1)\n    l1.extend(l2)\n    return l1\n",
        "num_ids": 77
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return l.sort()\n",
        "num_ids": 10
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    index = 0\n    while index < len(l):\n        if index % 3!= 0:\n            l.pop(index)\n        else:\n            l.append(l.pop(index))\n        index += 1\n    l.sort()\n    return l\n",
        "num_ids": 64
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return []\n    if len(l) == 1:\n        return l\n    else:\n        new_list = []\n        for i in range(len(l)):\n            if i % 3 == 0:\n                new_list.append(l[i])\n            elif i % 3 == 1:\n                new_list.append(sorted(l)[i-1])\n            else:\n                new_list.append(sorted(l)[i-2])\n        return new_list\n",
        "num_ids": 127
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l3 = sorted(l)\n    for i in range(len(l)):\n        if i%3 == 0:\n            l3[i] = l[i]\n    return l3\n",
        "num_ids": 48
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    third = sorted(l)\n    return third\n",
        "num_ids": 13
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    third = []\n    other = []\n    for index in range(len(l)):\n        if index % 3!= 0:\n            third.append(l[index])\n        else:\n            other.append(l[index])\n    third = sorted(third)\n    return other + third\n",
        "num_ids": 71
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    x = list(l)\n    i = 0\n    while i < len(x):\n        if i % 3 == 0:\n            x[i] = min(x[i:])\n            x[i:] = [x[i]] + x[i+1:]\n            i -= 1\n        i += 1\n    return x\n",
        "num_ids": 79
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l1 = []\n    l2 = []\n    for i in l:\n        if i % 3 == 0:\n            l2.append(i)\n        else:\n            l1.append(i)\n    l1.sort()\n    l1.extend(l2)\n    return l1\n",
        "num_ids": 74
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [val for i, val in enumerate(l) if (i % 3) == 0] + \\\n           sorted([val for i, val in enumerate(l) if (i % 3)!= 0], key=lambda x: (x % 3, x))\n",
        "num_ids": 64
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(l) == 1:\n        return l\n    return unique(list(set(l)))\n",
        "num_ids": 26
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    uniq = []\n    for i in l:\n        if i not in uniq:\n            uniq.append(i)\n    return sorted(uniq)\n",
        "num_ids": 40
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l = sorted(list(set(l)))\n    return l\n",
        "num_ids": 17
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return list(set(l))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    maximum = l[0]\n    for num in l:\n        if num > maximum:\n            maximum = num\n    return maximum\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    maximum = l[0]\n    for i in l:\n        if i > maximum:\n            maximum = i\n    return maximum\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return l[0] if len(l) == 0 else max(l)\n",
        "num_ids": 20
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n",
        "num_ids": 47
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    max_el = l[0]\n    for i in l:\n        if i > max_el:\n            max_el = i\n    return max_el\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    max_number = l[0]\n    for i in l:\n        if i > max_number:\n            max_number = i\n    return max_number\n",
        "num_ids": 40
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(1 for i in range(n) if i % 11 == 0 or i % 13 == 0 if str(i).count('7') > 0)\n",
        "num_ids": 38
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO: implement this\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n % 11 == 0 or n % 13 == 0:\n        return 1\n    return 0\n",
        "num_ids": 24
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    total = 0\n    for i in range(n):\n        if fizzbuzz(i) == 7:\n            total += 1\n    return total\n",
        "num_ids": 37
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    counter = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                counter += 1\n    return counter\n",
        "num_ids": 54
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # if n < 100:\n    #     return n // 7\n    # else:\n    #     return fizz_buzz(n // 10) + fizz_buzz(n // 100)\n    return sum(n % i == 0 and n % 10 == 7 for i in [11, 13])\n",
        "num_ids": 72
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    fizz_buzz = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            fizz_buzz += 1\n    return fizz_buzz\n",
        "num_ids": 53
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    fizz_buzz = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            fizz_buzz += 1\n    return fizz_buzz\n",
        "num_ids": 53
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n7, n11, n13 = 0, 0, 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            n11 += 1\n        if i % 7 == 0:\n            n7 += 1\n        if i % 13 == 0 or i % 11 == 0:\n            n13 += 1\n    return n7 + n11 + n13\n",
        "num_ids": 98
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert len(l) % 2 == 0, \"sort_even called with odd number of elements\"\n    l_even_sorted = sorted(l[::2])\n    l_odd_sorted = sorted(l[1::2])\n    return [x for pair in zip(l_even_sorted, l_odd_sorted) for x in pair]\n",
        "num_ids": 86
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(l[::2]) + sorted(l[1::2])\n",
        "num_ids": 20
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n    l_prime.sort()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n    return l_prime\n",
        "num_ids": 88
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    even_sorted = []\n    for index in range(len(l)):\n        if index % 2 == 0:\n            even_sorted.append(l[index])\n    even_sorted.sort()\n    even_sorted_2 = []\n    for index in range(len(l)):\n        if index % 2 == 0:\n            even_sorted_2.append(even_sorted[0])\n            even_sorted.remove(even_sorted[0])\n    even_sorted_2.extend(even_sorted)\n    return even_sorted_2\n",
        "num_ids": 143
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    new_list = []\n    # TODO Implement me\n    pass\n    return new_list\n",
        "num_ids": 24
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    even_list = []\n    odd_list = []\n    for index, i in enumerate(l):\n        if index % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    even_list.sort()\n    odd_list.sort()\n    for i in range(len(even_list)):\n        odd_list.insert(i, even_list.pop(0))\n    return odd_list\n",
        "num_ids": 114
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # first we create a list of even indicies with the odd ones being the list itself\n    evens = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            evens.append(l[i])\n",
        "num_ids": 59
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_l = []\n    new_l_even = []\n    new_l_odd = []\n    for i in range(len(l)):\n        if i % 2 == 1:\n            new_l_odd.append(l[i])\n        else:\n            new_l_even.append(l[i])\n",
        "num_ids": 79
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    new_list = l\n    for i in range(len(l)):\n        if i % 2 == 1:\n            new_list[i] = l[i]\n    new_list.sort()\n    return new_list\n",
        "num_ids": 56
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert(isinstance(l, list)), \"Input must be a list\"\n    \n    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n            l2.sort()\n    return l2\n    \n    \ndef sort_even_list(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_list([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_list([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    assert(isinstance(l, list)), \"Input must be a list\"\n    \n    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n            l2.sort()\n    return l2\n",
        "num_ids": 269
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # cycle elements in each group.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse each group.\n    groups = [group[::-1] for group in groups]\n    return \"\".join(groups)",
        "num_ids": 81
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [group + group[0] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 88
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    groups = s.split('|')\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 48
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 100
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # split each group into three elements.\n    groups = [group.split(\"\") for group in groups]\n    # join first and second element of each group.\n    groups = [\"\".join(group[:2]) for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 118
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 78
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert is_valid_fib_num(n)\n    prev = 1\n    curr = 1\n    for i in range(n):\n        curr += prev\n        prev = curr - prev\n        curr = curr + prev\n    return curr\n",
        "num_ids": 63
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i,j = 1, 1\n    fib_number = i + j\n    while fib_number < n:\n        i, j = j, fib_number\n        fib_number = i + j\n    if is_prime(fib_number):\n        return fib_number\n",
        "num_ids": 68
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    f1 = 1\n    f2 = 1\n    # Generating a Fibonacci number\n    while f2 < n:\n        f1, f2 = f2, f1+f2\n    # Computing if a Fibonacci number is prime\n    # https://www.quora.com/How-does-an-efficient-algorithm-for-checking-if-a-number-is-prime-exist\n    isPrime = True\n    i = 2\n    while i * i <= f2:\n        if f2 % i == 0:\n            isPrime = False\n            break\n        i += 1\n    if isPrime:\n        return f2\n    return None\n",
        "num_ids": 157
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    # compute Fibonacci number\n    fib = get_fibonacci_number(n)\n    \n    # check if Fibonacci number is prime\n    if check_prime(fib):\n        return fib\n    else:\n        return None\n",
        "num_ids": 62
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a, b = 2, 3\n    c = 0\n    while c < n:\n        if is_prime(b):\n            c += 1\n            a, b = b, a + b\n        else:\n            b += 1\n    return a\n",
        "num_ids": 60
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    numbers = prime_fib_iter(n)\n    return numbers[-1]\n",
        "num_ids": 23
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    fib = [0,1]\n    i = 2\n    while i < n:\n        next_fib = fib[i-1]+fib[i-2]\n        if is_prime(next_fib):\n            fib.append(next_fib)\n            i += 1\n        else:\n            fib.append(next_fib)\n    return fib[n-1]\n",
        "num_ids": 97
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    fib1, fib2, x = 1, 1, 1\n    while fib2 <= n:\n        fib1, fib2, x = fib2, fib1+fib2, x+1\n    while x > 0:\n        if is_prime(x) and is_fib(x):\n            return x\n        x -= 1\n    return None\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
        "num_ids": 117
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    fib = lambda n: n if n < 2 else fib(n-1) + fib(n-2)\n    prime = lambda n: n if n < 2 else prime(n-1) + prime(n-2) if not prime_test(n) else n\n    return prime(n)\n",
        "num_ids": 71
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    fib = fibonacci(n)\n    if n < 1:\n        raise ValueError(\"n must be positive.\")\n    if n == 1:\n        return 2\n    else:\n        return (fib * (2 * fib - 2)) // 5\n",
        "num_ids": 61
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l.sort()\n    num_triples = 0\n    for i in range(0, len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            if l[i] + l[j] + l[k] == 0:\n                num_triples += 1\n                j += 1\n                k -= 1\n            elif l[i] + l[j] + l[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    if num_triples > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 150
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    set_elements = set()\n    for num in l:\n        if num in set_elements:\n            return True\n        set_elements.add(num)\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Your code goes here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return True if triples_sum_to_zero_helper(l) else False\n",
        "num_ids": 22
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Two nested for loops.  The inner loop iterates over the elements of the\n    # outer loop, the outer loop iterates over the elements of the inner loop.\n    # In each iteration, the outer loop takes the inner loop's value\n    # as the second element of a pair, and the inner loop's value as the first element of a pair.\n    # The inner loop's value is added to the outer loop's value as the first element of a\n    # pair, and then the inner loop's value is added to the outer loop's value as the second element of a pair.\n    # If the first element of the pair is the same as the second element, the resulting pair is removed,\n    # because it means the three values have been accounted for.  If after the inner loop ends,\n    # the outer loop's length is still three, the list has no triples that sum to zero.\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] == l[j] or l[i] == l[k] or l[j] == l[k]:\n                    continue\n                else:\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n    return False\n",
        "num_ids": 310
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l = sorted(l)\n    i = 0\n    while i < len(l) - 2:\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n        i = i + 1\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(l) < 3:\n        return False\n    elif len(l) == 3 and sum(l) == 0:\n        return True\n    else:\n        l.sort()\n        for i in range(0, len(l) - 2):\n            if i > 0 and l[i] == l[i - 1]:\n                continue\n            else:\n                for j in range(i + 1, len(l) - 1):\n                    if j > i + 1 and l[j] == l[j - 1]:\n                        continue\n                    else:\n                        for k in range(j + 1, len(l)):\n                            if k > j + 1 and l[k] == l[k - 1]:\n                                continue\n                            else:\n                                if l[i] + l[j] + l[k] == 0:\n                                    return True\n        return False",
        "num_ids": 204
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # You may use the following:\n    # 1. python's set() type\n    # 2. for loop\n    # 3. if-else\n    # 4. list comprehension\n    # 5. isinstance()\n",
        "num_ids": 50
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l.sort()\n    seen = set()\n    for i, num in enumerate(l):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if (num + l[j] + l[k]) == 0:\n                    if (num, l[j], l[k]) in seen:\n                        return True\n                    seen.add((num, l[j], l[k]))\n    return False\n",
        "num_ids": 117
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(2, n):\n        if abs(i-1) % (n - 1) == 0:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert isinstance(n, int) and n > 0, \"n must be a positive integer\"\n",
        "num_ids": 24
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    cars = [Car(i, 1) for i in range(1, n+1)]\n    cars_in_reverse = [Car(i, -1) for i in range(n, 0, -1)]\n    cars += cars_in_reverse\n    time = 0\n    while True:\n        time += 1\n        for car in cars:\n            car.move(1)\n            if car.x == 0:\n                return time\n",
        "num_ids": 103
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert(n >= 1)\n",
        "num_ids": 9
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    collisions = 0\n    for i in range(n):\n        if i == 0:\n            continue\n        if (i % 2 == 0) == (i % 2!= 0):\n            collisions += 1\n    return collisions\n",
        "num_ids": 55
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # The number of cars.\n    n = int(n)\n",
        "num_ids": 19
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    cars = ['x' for _ in range(n)]\n    cars_in_front = [0] * n\n    ans = 0\n    while True:\n        for i in range(n):\n            cars_in_front[i] = (cars[(i + 1) % n] == 'x') - (cars[i] == 'x')\n        for i in range(n):\n            if cars_in_front[i] == -1:\n                cars[(i + 1) % n] = 'x'\n                cars[i] = 'x'\n                ans += 1\n        if cars_in_front.count(0) == n:\n            return ans\n",
        "num_ids": 158
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # We could just count the number of cars, but this is much more efficient\n    # (we don't need to traverse the array twice)\n    cars_left = [0] * n\n    cars_right = [0] * n\n    collisions = 0\n",
        "num_ids": 61
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return int(1 + n + n * (n - 1) / 2)\n",
        "num_ids": 20
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [x + 1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l = l.copy()\n    l.append(l[-1]+1)\n    for i in range(len(l)-1,0,-1):\n        if l[i] == l[i-1]:\n            l[i-1] = l[i-1] + 1\n            l[i:] = [l[i-1]] * len(l[i:])\n    return l\n",
        "num_ids": 96
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [e + 1 for e in l]\n",
        "num_ids": 13
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    set_list = set(l)\n    # print(set_list)\n    for i in set_list:\n        for j in set_list:\n            if i+j == 0:\n                return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    seen_set = set()\n    for i in l:\n        if -i in seen_set:\n            return True\n        seen_set.add(i)\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #sort the list\n    l.sort()\n    #create a dictionary to store the count of each number\n    count_dict = {}\n    #loop over the list\n    for i in range(len(l)):\n        #if the number is already in the dictionary\n        if l[i] in count_dict:\n            #increment the count\n            count_dict[l[i]] += 1\n        #otherwise\n        else:\n            #add it to the dictionary with count 1\n            count_dict[l[i]] = 1\n    #loop over the dictionary\n    for j in count_dict.keys():\n        #if the number has a count of 2\n        if count_dict[j] == 2:\n            #return True\n            return True\n    return False\n",
        "num_ids": 180
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # define a function to loop through the list\n    for index in range(len(l)):\n        # define a second function to loop through the rest of the list\n        for second_index in range(index + 1, len(l)):\n            # check if the two elements add to zero\n            if l[index] + l[second_index] == 0:\n                return True\n    return False\n",
        "num_ids": 93
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # for each element in the list,\n    # add it to the set of all elements of the list\n    elements = set(l)\n    # for each element in the list,\n    # if its complement is in the set of all elements of the list\n    for e in elements:\n        if -e in elements:\n            # if the elements are distinct,\n            # return True\n            return e!= -e\n    # if there are no such pairs,\n    # return False\n    return False\n",
        "num_ids": 116
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    found_list = []\n    for i in l:\n        for j in l:\n            if i + j == 0 and i!= j:\n                if found_list.count(i) == 0:\n                    found_list.append(i)\n    if len(found_list) >= 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 84
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pairs_sum_to_zero = False\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i!=j:\n                if l[i] + l[j] == 0:\n                    pairs_sum_to_zero = True\n    return pairs_sum_to_zero\n",
        "num_ids": 82
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n    list_rep = []\n    while x > 0:\n        list_rep.insert(0, x%base)\n        x = x//base\n    return ''.join([str(i) for i in list_rep])\n",
        "num_ids": 60
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    x = str(x)\n    x = [i for i in x]\n    y = []\n    while x:\n        y.append(x.pop(0) if x[0] <= '9' else chr(ord('0') + int(x[0]) - 10))\n    if base > 10:\n        return '0' + ''.join(y)\n    return ''.join(y[::-1])\n",
        "num_ids": 102
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if x == 0:\n        return \"0\"\n    if x < 0:\n        return change_base(-x, base)\n    result = \"\"\n    while x > 0:\n        result += str(x % base)\n        x //= base\n    return result[::-1]\n",
        "num_ids": 69
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    digits = []\n    while x!= 0:\n        digits.insert(0, x % base)\n        x = x // base\n    return ''.join(map(str, digits))\n",
        "num_ids": 48
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if x == 0:\n        return '0'\n    if base == 10:\n        return str(x)\n    res = []\n    while x:\n        res.append(str(x % base))\n        x //= base\n    return ''.join(reversed(res))\n",
        "num_ids": 69
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if base <= 10:\n        return str(x)\n    else:\n        out = \"\"\n        while x > 0:\n            out = str(x%base) + out\n            x = x//base\n        return out\n",
        "num_ids": 54
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x = x // base\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(int(x/base), base) + str(x % base)\n",
        "num_ids": 41
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if base <= 0 or base > 10:\n        raise ValueError()\n    if x < 0:\n        sign = -1\n    else:\n        sign = 1\n    x = abs(x)\n    x_str = []\n    while x!= 0:\n        x, remainder = divmod(x, base)\n        x_str.append(str(remainder))\n    if sign < 0:\n        x_str.append(\"-\")\n    x_str.reverse()\n    return \"\".join(x_str)\n",
        "num_ids": 126
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    s = ''\n    while x:\n        x, r = divmod(x, base)\n        s = str(r) + s\n    return s\n",
        "num_ids": 40
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (h * a) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    f0 = 0\n    f1 = 1\n    f2 = f0 + f1\n    for i in range(3, n):\n        f0 = f1\n        f1 = f2\n        f2 = f0 + f1 + f2\n    return f2\n",
        "num_ids": 66
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # TODO: implement this\n    return 0\n",
        "num_ids": 13
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    a = 0\n    b = 2\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 35
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert n >= 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    \n    prev = 0\n    curr = 2\n    for i in range(3, n+1):\n        next = prev + curr\n        prev = curr\n        curr = next\n    return next\n",
        "num_ids": 90
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 74
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert n >= 0, \"n must be non-negative\"\n    if n < 4:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 61
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \n",
        "num_ids": 88
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # initialise the first 3 Fib4 numbers\n    fib4s = [0, 0, 2]\n    # loop through and update the Fib4 numbers\n    for i in range(3, n):\n        fib4s.append(fib4s[i-1] + fib4s[i-2] + fib4s[i-3] + fib4s[i-4])\n    return fib4s[-1]\n",
        "num_ids": 103
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 76
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s = sorted(l)\n    n = len(s)\n    if n == 0:\n        raise ValueError('Error: Empty list')\n    if n % 2 == 0:\n        return (s[int(n/2)] + s[int(n/2-1)])/2\n    else:\n        return s[int((n-1)/2)]\n",
        "num_ids": 87
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l.sort()\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length//2-1] + l[length//2]) / 2\n    else:\n        return l[length//2]\n",
        "num_ids": 58
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2:\n        return l[int(n/2)]\n    return (l[int(n/2 - 1)] + l[int(n/2)])/2\n    \n",
        "num_ids": 61
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l = sorted(l)\n    n = len(l)\n    return (l[n // 2] + l[(n - 1) // 2]) / 2 if n % 2 == 0 else l[n // 2]\n",
        "num_ids": 53
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return float((l[n//2-1] + l[n//2]) / 2)\n    else:\n        return l[n//2]\n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(l)%2 == 0:\n        return (l[len(l)//2 - 1] + l[len(l)//2])/2\n    else:\n        return l[len(l)//2]\n",
        "num_ids": 56
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l = sorted(l)\n    l = l[:len(l)//2] if len(l) % 2 == 0 else l[len(l)//2]\n    return l\n",
        "num_ids": 46
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[(n - 1) // 2]\n    else:\n        return (l[(n - 1) // 2] + l[(n - 1) // 2 + 1]) / 2\n",
        "num_ids": 70
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = len(l)\n    if n == 0:\n        raise ValueError(\"median of empty list\")\n    if n % 2 == 1:\n        return sorted(l)[n//2]\n    else:\n        return sum(sorted(l)[n//2-1:n//2+1]) / 2\n",
        "num_ids": 76
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return l[(len(l) - 1) // 2] if len(l) % 2 == 1 else (l[len(l) // 2] + l[(len(l) // 2) - 1]) / 2\n",
        "num_ids": 53
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # is_palindrome = lambda s: s == s[::-1]\n    # return is_palindrome(text)\n    return text == text[::-1]\n    \ndef is_palindrome_sentence(sentence: str):\n    \"\"\"\n    Checks if given sentence is a palindrome\n    >>> is_palindrome_sentence('anna izabella')\n    True\n    >>> is_palindrome_sentence('anna')\n    False\n    \"\"\"\n    return is_palindrome(sentence.replace(' ', '').lower())\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids": 162
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not text:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])",
        "num_ids": 36
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return is_palindrome_recursive(text)\n",
        "num_ids": 15
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Using filter and map\n    return all(\n        filter(\n            lambda c: c.lower() == c.lower()[::-1],\n            map(\n                str.lower,\n                text.replace(' ', '')\n            )\n        )\n    )\n",
        "num_ids": 64
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    text = text.lower()\n    # assuming character is alphabetic\n    text = [l for l in text if l.isalpha()]\n    text = ''.join(text)\n    return text == text[::-1]\n",
        "num_ids": 56
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(text) < 2:\n        return True\n    elif text[0]!= text[-1]:\n        return False\n    else:\n        return is_palindrome(text[1:-1])\n",
        "num_ids": 53
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n    return (2 * modp(n - 1, p)) % p\n",
        "num_ids": 29
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert 0 <= n < p\n    return pow(2, n, p)\n",
        "num_ids": 20
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    remainder = n % p\n    n //= p\n    if n == 0:\n        return remainder\n    else:\n        return ((remainder * modp(n, p)) % p)\n",
        "num_ids": 51
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert n >= 0\n    res = 1\n    for i in range(n):\n        res *= 2\n    return res % p\n",
        "num_ids": 33
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert p & 1, \"p must be odd\"\n    if n == 0:\n        return 1\n    return 2 * modp(n - 1, p) % p\n",
        "num_ids": 41
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    r = 1\n    while n > 0:\n        r = (r * 2) % p\n        n = n - 1\n    return r\n",
        "num_ids": 35
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n >= 0\n    assert p > 2\n    ans = 1\n    while n > 0:\n        if n % 2 == 1:\n            ans = (ans * 2) % p\n        n //= 2\n        p //= 2\n    return ans\n",
        "num_ids": 61
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return (2**n) % p\n",
        "num_ids": 26
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "num_ids": 35
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) + ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 37
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 34
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # use: ''.join(char if char not in vowels else '' for char in text)\n    vowels = frozenset('aeiouAEIOU')\n    return ''.join(char for char in text if char not in vowels)\n",
        "num_ids": 60
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    text = [x for x in text if x not in vowels]\n    return ''.join(text)\n",
        "num_ids": 63
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = \"aAeEiIoOuU\"\n    return \"\".join([l for l in text if l not in vowels])\n",
        "num_ids": 38
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowels = 'aieou'\n    vowels_list = [char for char in text if char in vowels]\n    vowels_string = \"\".join(vowels_list)\n    vowels_string_length = len(vowels_string)\n    new_text = text[vowels_string_length::]\n    return new_text\n",
        "num_ids": 91
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    vowels = 'aeiouAEIOU'\n    text = text.lower()\n    result = \"\"\n    for i in text:\n        if i not in vowels:\n            result += i\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    vowels = 'a e i o u A E I O U'\n    return \"\".join([char for char in text if char not in vowels])\n",
        "num_ids": 38
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    text = text.strip()\n    vowels = \"aeiouAEIOU\"\n    for vowel in vowels:\n        text = text.replace(vowel, \"\")\n    return text\n",
        "num_ids": 49
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    vowel = 'aeiou'\n    return ''.join(c for c in text if c not in vowel)\n",
        "num_ids": 30
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    vowel_list = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    # create a list of vowels\n    new_text = ''\n    for char in text:\n        if char in vowel_list:\n            continue\n        new_text += char\n    return new_text\n",
        "num_ids": 87
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowels = 'aeiouAEIOU'\n    return ''.join([letter for letter in text if letter.lower() not in vowels])\n",
        "num_ids": 37
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(l) < t\n",
        "num_ids": 10
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(len(l)):\n        if l[i] >= t:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return all(i < t for i in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if t <= min(l):\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert l, 'l cannot be an empty list'\n    assert t >= 0, 't must be a positive number'\n    if len(l) == 1:\n        return l[0] < t\n    else:\n        return below_threshold(l[1:], t - l[0])\n",
        "num_ids": 71
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return all(i <= t for i in l)\n",
        "num_ids": 14
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(s0)!= len(s1):\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s0_chars = set(s0)\n    s1_chars = set(s1)\n    return s0_chars == s1_chars\n",
        "num_ids": 41
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len(s0) == len(s1) and len(s0) == len(set(s0) & set(s1))\n",
        "num_ids": 35
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return all(char in s0 and char in s1 for char in s0)\n",
        "num_ids": 21
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    s0_set = set(s0)\n    s1_set = set(s1)\n    if s0_set.issubset(s1_set) and s1_set.issubset(s0_set):\n        return True\n    return False\n",
        "num_ids": 83
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s0 = set(s0)\n    s1 = set(s1)\n    if s0 == s1:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s0 = s0.lower()\n    s1 = s1.lower()\n    return sorted(s0) == sorted(s1)\n",
        "num_ids": 35
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    set0 = set(s0)\n    set1 = set(s1)\n    return set0 == set1\n",
        "num_ids": 29
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if s0 == s1:\n        return True\n    return len(set(s0).intersection(s1)) == len(s0)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n >= 0, 'n must be >= 0'\n",
        "num_ids": 15
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 39
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 0:\n        raise ValueError\n    if n < 2:\n        return n\n    return fib(n-2) + fib(n-1)\n",
        "num_ids": 40
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert n > 0\n    if n <= 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 38
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 39
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 2) + fib(n - 1)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert n > 0\n    if n <= 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 38
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "num_ids": 52
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    bracket_dict = {\">\": \"<\", \"<\": \">\"}\n    stack = []\n    for char in brackets:\n        if char == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n        elif char == \"<\":\n            stack.append(char)\n    return not stack\n",
        "num_ids": 78
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    bracket_stack = []\n    for c in brackets:\n        if c == '<':\n            bracket_stack.append(c)\n        elif c == '>':\n            if len(bracket_stack) == 0:\n                return False\n            else:\n                bracket_stack.pop()\n    if len(bracket_stack) > 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 99
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    open_brackets = 0\n    for bracket in brackets:\n        if bracket == '<':\n            open_brackets += 1\n        elif bracket == '>':\n            open_brackets -= 1\n        else:\n            return False\n    return open_brackets == 0\n",
        "num_ids": 66
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    bracket_stack = Stack()\n    for c in brackets:\n        if c == '<':\n            bracket_stack.push(c)\n        else:\n            if bracket_stack.is_empty():\n                return False\n            else:\n                bracket_stack.pop()\n    return bracket_stack.is_empty()\n",
        "num_ids": 79
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    opening_brackets = 0\n    closing_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets += 1\n        if char == \">\":\n            closing_brackets += 1\n        if opening_brackets < closing_brackets:\n            return False\n    return opening_brackets == closing_brackets\n",
        "num_ids": 86
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \"\"\" check for odd length \"\"\"\n    if len(brackets) % 2 == 1:\n        return False\n    \"\"\" check for even length \"\"\"\n    bracket_count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_count += 1\n        elif bracket == '>':\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    if bracket_count > 0:\n        return False\n    return True\n",
        "num_ids": 112
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == \"<\":\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 111
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # list of opening brackets\n    open_brackets = []\n    # list of closing brackets\n    close_brackets = []\n    for char in brackets:\n        if char == \"<\":\n            open_brackets.append(char)\n        elif char == \">\":\n            if not open_brackets:\n                return False\n            close_brackets.append(char)\n            open_brackets.pop()\n    if len(open_brackets) > 0 or len(close_brackets) > 0:\n        return False\n    return True\n",
        "num_ids": 129
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for b in brackets:\n        if b == '<':\n            count += 1\n        elif b == '>':\n            count -= 1\n        else:\n            print(\"ERROR: not a valid bracket: '\" + b + \"'\")\n        if count < 0:\n            print(\"ERROR: too many closing brackets\")\n            return False\n    return count == 0\n",
        "num_ids": 90
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(l) == l or sorted(l, reverse=True) == l\n",
        "num_ids": 21
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    x, y = l[0], l[1]\n    if x > y:\n        return all([x > z for z in l[1:]])\n    elif x < y:\n        return all([x < z for z in l[1:]])\n    else:\n        return True",
        "num_ids": 71
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(l) < 3:\n        return True\n    if l[0] >= l[1]:\n        return l[0] >= l[1] and monotonic(l[1:])\n    if l[0] <= l[1]:\n        return l[0] <= l[1] and monotonic(l[1:])\n",
        "num_ids": 83
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(l) == 0 or len(l) == 1:\n        return True\n    if len(l) == 2:\n        return l[0] <= l[1]\n    if l[0] > l[1]:\n        return l[0] <= l[-1] and l[1] >= l[-2]\n    else:\n        return l[0] >= l[1] and l[1] <= l[-1]\n",
        "num_ids": 107
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(l) == 1:\n        return True\n    elif l[0] < l[1]:\n        return l[1] < l[2] and monotonic(l[1:])\n    elif l[0] > l[1]:\n        return l[1] > l[2] and monotonic(l[1:])\n    else:\n        return False\n",
        "num_ids": 93
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(l) == 0 or len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        if not monotonic(l[1:]):\n            return False\n    else:\n        if not monotonic(l[1:]):\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not l: return True\n    sign = 0\n    for x in l:\n        if x < 0:\n            if sign == 0:\n                sign = -1\n            elif sign == -1:\n                return False\n        elif x > 0:\n            if sign == 0:\n                sign = 1\n            elif sign == 1:\n                return False\n    return True\n",
        "num_ids": 90
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    diffs = []\n    for i in range(1, len(l)):\n        if l[i - 1] < l[i]:\n            diffs.append(1)\n        elif l[i - 1] > l[i]:\n            diffs.append(-1)\n        else:\n            diffs.append(0)\n    return all(d == 1 for d in diffs) or all(d == -1 for d in diffs)\n",
        "num_ids": 108
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(l) <= 2:\n        return True\n",
        "num_ids": 15
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n = len(l)\n    i = 0\n    while i < n - 1:\n        if l[i] == l[i + 1]:\n            i += 1\n        elif l[i] > l[i + 1]:\n            return False\n        else:\n            return False\n    return True\n",
        "num_ids": 73
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s1, s2 = set(l1), set(l2)\n    return sorted(s1 & s2)\n",
        "num_ids": 30
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    set1 = set(l1)\n    set2 = set(l2)\n    com_set = set1 & set2\n    return sorted(com_set)\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(set(l1).intersection(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    common = []\n    for num in l1:\n        if num in l2 and num not in common:\n            common.append(num)\n    return sorted(common)\n",
        "num_ids": 42
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #inputs are two lists of strings\n    #returns a sorted list of the unique common elements\n    #example 1: common([\"dog\", \"cat\", \"cat\"], [\"dog\", \"cat\", \"mouse\", \"fish\"]) \n    #would return [\"cat\"]\n    #example 2: common([\"dog\", \"cat\", \"mouse\", \"fish\"], [\"dog\", \"cat\", \"mouse\", \"fish\"]) \n    #would return []\n    #example 3: common([\"dog\", \"cat\", \"mouse\", \"fish\"], [\"dog\", \"cat\", \"mouse\", \"fish\", \"pig\"]) \n    #would return []\n    #example 4: common([\"dog\", \"cat\", \"mouse\", \"fish\"], [\"cat\", \"mouse\"]) \n    #would return [\"cat\", \"mouse\"]\n    #example 5: common([\"dog\", \"cat\", \"mouse\", \"fish\"], [\"cat\", \"mouse\", \"snake\"]) \n    #would return []\n    #example 6: common([\"dog\", \"cat\", \"mouse\", \"fish\"], [\"dog\", \"cat\", \"mouse\", \"snake\", \"fish\", \"hippo\"]) \n    #would return []\n    #example 7: common([\"dog\", \"cat\", \"mouse\", \"fish\"], [\"dog\", \"cat\", \"mouse\", \"snake\", \"cow\", \"horse\"]) \n    #would return [\"cat\", \"dog\", \"mouse\"]\n",
        "num_ids": 328
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    common = set()\n    for e in l1:\n        if e in l2:\n            common.add(e)\n    return sorted(common)\n",
        "num_ids": 38
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l1 = set(l1)\n    l2 = set(l2)\n    return sorted(l1 & l2)\n",
        "num_ids": 32
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    largest_prime_factor = 1\n    i = 2\n    while i < n:\n        if n % i == 0:\n            if is_prime(i):\n                largest_prime_factor = i\n        i += 1\n    return largest_prime_factor\n",
        "num_ids": 62
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    largest_factor = n - 1\n    while n % 2 == 0:\n        largest_factor = 2\n        n = n // 2\n    for i in range(3, n+1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n = n // i\n    return largest_factor\n",
        "num_ids": 77
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    max = n\n    while max % 2 == 0:\n        max = max / 2\n    for i in range(3, int(max ** 0.5), 2):\n        while max % i == 0:\n            max = max / i\n    return max\n",
        "num_ids": 61
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    largest_prime_factor_helper(n, n)\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    prime_factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            prime_factors.append(i)\n    return prime_factors[-1]\n",
        "num_ids": 67
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
        "num_ids": 43
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    i = 2\n    while i < n:\n        if is_prime(i):\n            n = n // i\n            i = 1\n        else:\n            i += 1\n    return n\n",
        "num_ids": 47
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 1\n    return n\n",
        "num_ids": 53
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    largest = 1\n    i = 2\n    \n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            largest = i\n        else:\n            i += 1\n    \n    return largest\n",
        "num_ids": 59
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = 2\n    while i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = n + 1\n    sums = 0\n    while n > 0:\n        sums = sums + n\n        n -= 1\n    return sums\n",
        "num_ids": 38
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n > 0, 'n must be positive'\n    return n*(n + 1) // 2\n",
        "num_ids": 26
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(n + 1):\n        sum += i\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    return n + sum_to_n(n - 1)\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return n * (n + 1) // 2\n    \n",
        "num_ids": 15
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == '(':\n            bracket_stack.append(b)\n        elif b == ')':\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                return False\n    if not bracket_stack:\n        return True\n    return False\n",
        "num_ids": 83
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Matching is a DFA, so we'll do this with an iterative solution.\n",
        "num_ids": 22
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    bracket_count = 0\n    for c in brackets:\n        if c == '(':\n            bracket_count += 1\n        elif c == ')':\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    return bracket_count == 0\n",
        "num_ids": 69
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    #brackets = \"()\"\n    \n    if len(brackets) % 2!= 0:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == \"(\":\n            bracket_stack.append(b)\n        elif b == \")\":\n            if len(bracket_stack) == 0:\n                return False\n            elif bracket_stack[-1]!= \"(\":\n                return False\n            else:\n                bracket_stack.pop()\n    return len(bracket_stack) == 0\n",
        "num_ids": 104
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    bracket_stack = []\n    for c in brackets:\n        if c == \"(\":\n            bracket_stack.append(c)\n        elif c == \")\":\n            if not bracket_stack:\n                return False\n            bracket_stack.pop()\n",
        "num_ids": 64
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    brackets = list(brackets)\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return False if stack else True\n",
        "num_ids": 67
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == \"(\":\n            bracket_stack.append(b)\n        elif b == \")\":\n            if len(bracket_stack) == 0:\n                return False\n            bracket_stack.pop()\n    if len(bracket_stack)!= 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 94
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    bracket_count = 0\n    for char in brackets:\n        if char == '(':\n            bracket_count += 1\n        elif char == ')':\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    return bracket_count == 0\n",
        "num_ids": 69
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Find the index of the first unmatched closing bracket\n    closing_bracket_index = 0\n    for c in brackets:\n        if c == ')':\n            closing_bracket_index += 1\n    if closing_bracket_index!= 0:\n        return False\n    # From the first unmatched closing bracket,\n    # find the first unmatched opening bracket.\n    opening_bracket_index = 0\n    for c in brackets:\n        if c == '(':\n            opening_bracket_index += 1\n    return opening_bracket_index == closing_bracket_index\n",
        "num_ids": 137
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    ret = []\n    for i, x in enumerate(xs[1:]):\n        ret.append(i + 1)\n        ret.append(x * (i + 1))\n    return ret\n",
        "num_ids": 48
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [xi * i for i, xi in enumerate(xs[1:], start=1) if i!= 0]\n",
        "num_ids": 32
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(xs) == 0:\n        return []\n    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(i * xs[i])\n    return derivative\n",
        "num_ids": 55
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not xs:\n        raise ValueError\n    # Example\n    # xs = [1, 2, 3]\n    #   0 + 2x + 3x^2\n    #   2 + 6x\n    #   6\n    #\n    # Example\n    # xs = [1, 2, 3, 4, 5]\n    #   0 + 2x + 3x^2 + 4x^3 + 5x^4\n    #   2 + 6x + 12x^2 + 20x^3\n    #   6 + 24x + 30x^2\n    #   24 + 60x\n    #\n    # Example\n    # xs = [1, 2, 3, 4, 5, 6]\n    #   0 + 2x + 3x^2 + 4x^3 + 5x^4 + 6x^5\n    #   2 + 6x + 12x^2 + 20x^3 + 24x^4 + 30x^5\n    #   6 + 24x + 30x^2 + 60x^3\n    #   24 + 60x + 720x^2\n    #   72 + 840x\n",
        "num_ids": 263
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [c * i for i, c in enumerate(xs)][1:]\n",
        "num_ids": 21
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    length = len(xs)\n    derivative = []\n    for i in range(1, length):\n        derivative.append(xs[i] * i)\n    return derivative\n",
        "num_ids": 46
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [x*i for i, x in enumerate(xs[1:], 1)]\n",
        "num_ids": 23
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i*xs[i] for i in range(1, len(xs))]\n",
        "num_ids": 23
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n < 2:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 41
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n < 0:\n        raise ValueError(\"The input should be a non-negative integer.\")\n    return fib(n - 1) + fib(n - 2) + fib(n - 3)\n",
        "num_ids": 47
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n >= 0, 'Incorrect input!'\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 63
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def fibfib_helper(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibfib_helper(n-1) + fibfib_helper(n-2)\n    return fibfib_helper(n)\n",
        "num_ids": 78
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a = 0\n    b = 1\n    c = 1\n    for i in range(2, n):\n        c = a + b\n        a = b\n        b = c\n    return c\n",
        "num_ids": 70
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    fib_n_1 = fibfib(n-1)\n    fib_n_2 = fibfib(n-2)\n    return fib_n_1 + fib_n_2\n",
        "num_ids": 75
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 3:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 45
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return len([i for i in s if i in \"aeiouAEIOU\"])\n",
        "num_ids": 25
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    if 'y' in s:\n        if s.index('y') == len(s) - 1:\n            count -= 1\n    return count\n",
        "num_ids": 84
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for c in s:\n        if c in VOWELS:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in s:\n        if i in VOWELS:\n            count += 1\n    for i in range(count):\n        if s[i] in VOWELS and s[i-1] not in VOWELS:\n            count += 1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # implement your code here\n    return sum([1 for i in s if i in 'aeiouyAEIOUY'])\n",
        "num_ids": 32
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    result = 0\n    \n    # insert your code here\n    \n    if s[0] == \"a\" or s[0] == \"A\" :\n        result += 1\n    if s[0] == \"e\" or s[0] == \"E\" :\n        result += 1\n    if s[0] == \"i\" or s[0] == \"I\" :\n        result += 1\n    if s[0] == \"o\" or s[0] == \"O\" :\n        result += 1\n    if s[0] == \"u\" or s[0] == \"U\" :\n        result += 1\n    if s[0] == \"y\" :\n        result += 1\n    \n    if s[-1] == \"a\" or s[-1] == \"A\" :\n        result += 1\n    if s[-1] == \"e\" or s[-1] == \"E\" :\n        result += 1\n    if s[-1] == \"i\" or s[-1] == \"I\" :\n        result += 1\n    if s[-1] == \"o\" or s[-1] == \"O\" :\n        result += 1\n    if s[-1] == \"u\" or s[-1] == \"U\" :\n        result += 1\n    \n    return result\n",
        "num_ids": 314
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if shift < 0:\n        raise ValueError(\"negative shift value\")\n    elif shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "num_ids": 64
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (str(x)[-shift:] + str(x)[:-shift]) if shift < len(str(x)) else str(x)[-shift:-shift+len(str(x))]\n",
        "num_ids": 46
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    #return int(str(x)[-shift:] + str(x)[:-shift])\n    if shift < 0 or shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "num_ids": 71
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    y = str(x)\n    y = y[-shift:] + y[:-shift]\n    return y\n    \ndef left_shift(x, shift):\n    \"\"\"Left shift the digits of the integer x, shift the digits left by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> left_shift(12, 1)\n    \"12\"\n    >>> left_shift(12, 2)\n    \"21\"\n    \"\"\"\n    y = str(x)\n    y = y[shift:] + y[:shift]\n    return y\n    \ndef negate(x):\n    \"\"\"Returns the negative of the given integer.\n    >>> negate(12)\n    -12\n    >>> negate(-12)\n    12\n    \"\"\"\n    return -x\n    \ndef bitwise_and(x, y):\n    \"\"\"\n    Returns the bitwise and of x and y\n    >>> bitwise_and(13, 17)\n    7\n    >>> bitwise_and(31, -5)\n    -5\n    \"\"\"\n    return x & y\n    \ndef bitwise_or(x, y):\n    \"\"\"\n    Returns the bitwise or of x and y\n    >>> bitwise_or(13, 17)\n    31\n    >>> bitwise_or(31, -5)\n    31\n    \"\"\"\n    return x | y\n    \ndef bitwise_not(x):\n    \"\"\"\n    Returns the bitwise not of x\n    >>> bitwise_not(13)\n    -14\n    >>> bitwise_not(-17)\n    14\n    \"\"\"\n    return ~x\n    \ndef bitwise_xor(x, y):\n    \"\"\"\n    Returns the bitwise xor of x and y\n    >>> bitwise_xor(13, 17)\n    14\n    >>> bitwise_xor(31, -5)\n    26\n    \"\"\"\n    return x ^ y\n    \ndef bitwise_left_shift(x, y):\n    \"\"\"\n    Returns the bitwise left shift of x and y\n    >>> bitwise_left_shift(13, 17)\n    40\n    >>> bitwise_left_shift(31, -5)\n    -31\n    \"\"\"\n    return x << y\n    \ndef bitwise_right_shift(x, y):\n    \"\"\"\n    Returns the bitwise right shift of x and y\n    >>> bitwise_right_shift(13, 17)\n    2\n    >>> bitwise_right_shift(31, -5)\n    -31\n    \"\"\"\n    return x >> y\n    \ndef get_bit(x, i):\n    \"\"\"\n    Returns True if the ith bit of x is 1 and False if it is 0\n    >>> get_bit(13, 0)\n    False\n    >>> get_bit(13, 1)\n    True\n    >>> get_bit(13, 2)\n    False\n    >>> get_bit(13, 3)\n    True\n    \"\"\"\n    return (x & (1 << i))!= 0\n    \ndef set_bit(x, i):\n    \"\"\"\n    Returns x with the ith bit set to 1\n    >>> set_bit(13, 0)\n    26\n    >>> set_bit(13, 1)\n    27\n    >>> set_bit(13, 2)\n    28\n    >>> set_bit(13, 3)\n    29\n    \"\"\"\n    return x | (1 << i)\n    \ndef clear_bit(x, i):\n    \"\"\"\n    Returns x with the ith bit cleared\n    >>> clear_bit(13, 0)\n    12\n    >>> clear_bit(13, 1)\n    11\n    >>> clear_bit(13, 2)\n    10\n    >>> clear_bit(13, 3)\n    9\n    \"\"\"\n    return x & ~(1 << i)\n    \ndef flip_bit(x, i):\n    \"\"\"\n    Returns x with the ith bit flipped\n    >>> flip_bit(13, 0)\n    14\n    >>> flip_bit(13, 1)\n    13\n    >>> flip_bit(13, 2)\n    12\n    >>> flip_bit(13, 3)\n    11\n    \"\"\"\n    return x ^ (1 << i)\n    \ndef is_power_of_two(n):\n    \"\"\"\n    Returns True if n is a power of two and False otherwis",
        "num_ids": 1028
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    shift_num = shift % len(str(x))\n    for i in range(0, len(str(x))):\n        result.append(str(x)[i - shift_num])\n",
        "num_ids": 52
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n = x\n    for i in range(shift):\n        n = int(str(n)[-1] + str(n)[:-1])\n    return str(n)\n",
        "num_ids": 43
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift] if shift > len(str(x)) else str(x)[-shift:][::-1] + str(x)[:-shift]\n    \n    \ndef sum_digits(n):\n    \"\"\"Return the sum of the digits of positive integer n.\n    >>> sum_digits(1)\n    1\n    >>> sum_digits(1234)\n    10\n    >>> sum_digits(1234567890)\n    45\n    \"\"\"\n    return sum([int(d) for d in str(n)])\n",
        "num_ids": 139
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s = str(x)\n    if shift >= len(s):\n        return s[::-1]\n    return s[-shift:]+s[:-shift]\n    \ndef karatsuba(x, y):\n    \"\"\"Multiply 2 integers using Karatsuba's algorithm.\n    >>> karatsuba(567, 12)\n    46652992\n    >>> karatsuba(234, 345)\n    1311860143\n    \"\"\"\n    if len(str(x)) == 1 or len(str(y)) == 1:\n        return x*y\n    n = max(len(str(x)), len(str(y)))\n    half = n//2\n    a, b = divmod(x, 10**half)\n    c, d = divmod(y, 10**half)\n    ac = karatsuba(a, c)\n    bd = karatsuba(b, d)\n    ad_bc = karatsuba((a+b), (c+d)) - ac - bd\n    return (ac*10**(2*half)) + (ad_bc*10**half) + bd\n",
        "num_ids": 269
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s = str(x)\n    if shift <= len(s):\n        return s[-shift:] + s[:-shift]\n    else:\n        return s[-len(s) + shift:] + s[:shift - len(s)]\n",
        "num_ids": 59
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:]+str(x)[:-shift]\n",
        "num_ids": 46
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sum = 0\n    for char in s:\n        if ord(char) >= 65 and ord(char) <= 90:\n            sum += ord(char)\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sum_ = 0\n    for char in s:\n        if char.isupper():\n            sum_ += ord(char)\n    return sum_\n",
        "num_ids": 36
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "num_ids": 20
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([ord(c) for c in s if c.isalpha() and c.isupper()])\n",
        "num_ids": 27
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum([ord(c) for c in s if c.isupper()])\n",
        "num_ids": 21
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([ord(char) for char in s.upper() if char.isupper()])\n",
        "num_ids": 24
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s=s.replace(\" \",\"\")\n    s=s.split(\"and\")\n    s[0]=s[0].split(\" \")\n    s[1]=s[1].split(\" \")\n    print(s)\n    if int(s[0][0])>int(s[1][0]):\n        return int(s[0][0])-int(s[1][0])\n    elif int(s[0][0])<int(s[1][0]):\n        return int(s[1][0])-int(s[0][0])\n    else:\n        return int(s[0][1])-int(s[1][1])\n",
        "num_ids": 163
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return s.split()[-1] - n\n",
        "num_ids": 14
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # write your code here\n    n = int(s)\n    m = n\n    m -= len(s.split(\" \")[0])\n    m -= int(s.split(\" \")[1])\n    return m\n",
        "num_ids": 53
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    apple_f = s.split(\" and \")[0]\n    orange_f = s.split(\" and \")[1]\n    orange_num = int(orange_f.split(\" \")[0])\n    apple_num = int(apple_f.split(\" \")[0])\n    if n - apple_num - orange_num < 0:\n        return \"Mango\"\n    else:\n        return n - apple_num - orange_num",
        "num_ids": 104
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def fruit_distribution(s, n):\n        m = s.split(\" \")\n        t = []\n        for i in m:\n            if int(i) < 0:\n                t.append(int(i))\n        t.append(n - sum(t))\n        return t.count(\"mango\")\n    return fruit_distribution(s, n)\n    \n",
        "num_ids": 91
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #your code here\n    if n>=0:\n        apple,orange=n-s.count('apples'),n-s.count('oranges')\n        mango=apple-apple%3\n    return mang",
        "num_ids": 52
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # if not isinstance(s, str) or not isinstance(n, int):\n    #     raise TypeError\n    # if 'apples' not in s:\n    #     raise ValueError\n    # if 'oranges' not in s:\n    #     raise ValueError\n    # if'mango' not in s:\n    #     raise ValueError\n    # if not (s.index('apples') < s.index('oranges') < s.index('mango')):\n    #     raise ValueError\n    # if not s.replace(' ', '').isdigit():\n    #     raise ValueError\n    # if n < 0:\n    #     raise ValueError\n    # if s.isdigit():\n    #     if int(s) < 0:\n    #         raise ValueError\n    #     elif int(s) % n!= 0:\n    #         raise ValueError\n    # return n - int(s.split(' ')[0]) - int(s.split(' ')[1])\n",
        "num_ids": 239
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    try:\n        if type(s) == str:\n            if type(n) == int:\n                if s.isnumeric() and n.isnumeric():\n                    return n - int(s.split()[0]) - int(s.split()[1])\n    except:\n        return \"Error\"\n    return s\n    \ndef longest_substring_with_k_unique_chars(s,k):\n    \"\"\"\n    Given a string and an integer,k, find the length of the longest substring \n    that contains less than k distinct characters.\n    For example, given s = \"abcba\" and k = 2, the longest substring with k distinct \n    characters is \"bcb\".\n    \"\"\"\n    if k < 0:\n        return 0\n    if k > len(set(s)):\n        return len(s)\n    d = {}\n    max_length = 0\n    left = 0\n    right = 0\n    while right < len(s):\n        if s[right] not in d.keys():\n            d[s[right]] = 1\n        else:\n            d[s[right]] += 1\n        while len(d) > k:\n            if d[s[left]] == 1:\n                d.pop(s[left])\n            else:\n                d[s[left]] -= 1\n            left += 1\n        if len(d) <= k and len(s[left:right]) > max_length:\n            max_length = len(s[left:right])\n        right += 1\n    return max_length\n",
        "num_ids": 368
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return s.split()[0]\n",
        "num_ids": 11
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = s.split(\" \")\n    n = int(n)\n    m = n - int(s[0]) - int(s[1])\n    return m\n",
        "num_ids": 42
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    res = []\n",
        "num_ids": 6
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    \"\"\"\n    0.053 - 0.026s\n    \"\"\"\n",
        "num_ids": 20
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n = len(arr)\n    if n == 0:\n        return []\n    arr.sort()\n    if n == 1:\n        return [arr[0], 0]\n    for i in range(n):\n        if i % 2 == 0 and arr[i] < arr[i+1]:\n            return [arr[i], i]\n    return []\n",
        "num_ids": 86
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Time complexity O(n)\n    # Space complexity O(n)\n    even = [i for i in arr if i % 2 == 0]\n    if len(even) == 0:\n        return []\n    else:\n        return [min(even), arr.index(min(even))]",
        "num_ids": 70
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # initialize a list to hold the result\n    result = []\n    # iterate over the input array\n    for i in range(len(arr)):\n        # check if the current value is even\n        if arr[i] % 2 == 0:\n            # if so, add it to the result list\n            result.append(arr[i])\n    # initialize the smallest value and smallest index\n    smallest_value = min(result)\n    smallest_index = result.index(smallest_value)\n    # return the smallest value and index in a list\n    return [smallest_value, smallest_index]\n",
        "num_ids": 143
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(arr) < 1: return []\n    \n    even = [a for a in arr if a % 2 == 0]\n    if len(even) == 0: return []\n    return [even[0], arr.index(even[0])]\n",
        "num_ids": 61
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return []\n    # iterate through all of the arr items\n    # if the item's val is even, return it and its index\n    # if the item's val is odd, return the next even item\n    # if there are no even numbers, return an empty list\n    # because the list is already sorted, when we find the next even item\n    # we will have to stop.\n",
        "num_ids": 98
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    even_nums = []\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            even_nums.append(i)\n    if even_nums:\n        return [min(even_nums), arr.index(min(arr[even_nums]))]\n    return []\n",
        "num_ids": 79
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    even = []\n    odd = []\n    for n in arr:\n        if n % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n",
        "num_ids": 63
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    even = [x for x in arr if x % 2 == 0]\n    if len(even) == 0:\n        return []\n    else:\n        min_even = min(even)\n        index = [i for i, v in enumerate(arr) if v == min_even]\n        return [min_even, index[0]]\n",
        "num_ids": 81
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(1, max(lst)+1):\n        if lst.count(i) >= i:\n            return i\n    return -1\n",
        "num_ids": 39
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    greatest = None\n    for i in lst:\n        if i > 0 and lst.count(i) > i:\n            greatest = i\n            break\n    return greatest if greatest else -1\n",
        "num_ids": 50
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    freq = {}\n    for elt in lst:\n        if elt in freq:\n            freq[elt] += 1\n        else:\n            freq[elt] = 1\n    for elt in freq:\n        if freq[elt] >= elt:\n            return elt\n    return -1\n",
        "num_ids": 78
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # if list is empty, return -1\n    if lst == []:\n        return -1\n    else:\n        # create dictionary where key is the number, value is how many times it appears\n        dictionary = {number: lst.count(number) for number in lst}\n        # find the maximum key in the dictionary\n        max_key = max(dictionary)\n        # if the value of max_key is greater than or equal to its own value, return -1\n        if max_key >= dictionary[max_key]:\n            return -1\n        # else, return the max key\n        else:\n            return max_key",
        "num_ids": 148
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    num_dict = {}\n    for i in lst:\n        if i in num_dict:\n            num_dict[i] += 1\n        else:\n            num_dict[i] = 1\n    max_num = -1\n    for key, val in num_dict.items():\n        if key > max_num and key > 0:\n            max_num = key\n    return max_num\n",
        "num_ids": 96
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if lst[0] == 0:\n        return 1\n    # return max([i for i in lst if i>0 and lst.count(i)>=i])\n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] > 0 and lst.count(lst[i]) >= lst[i]:\n            return lst[i]\n    return -1\n",
        "num_ids": 104
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return -1",
        "num_ids": 5
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # find max in list\n    lst.sort()\n    max_elem = lst[len(lst)-1]\n    # max elem is 1, so we will check second last element\n    for i in lst[len(lst)-2::-1]:\n        if i < max_elem:\n            max_elem = i\n        else:\n            return max_elem\n    return -1\n",
        "num_ids": 100
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst.sort()\n    greatest = 0\n    freq = 1\n    for i in range(len(lst)-1, -1, -1):\n        if lst[i] == i + 1:\n            greatest = i + 1\n            freq += 1\n        elif lst[i]!= i + 1 and lst[i]!= greatest:\n            return -1\n        if freq >= i + 1:\n            return greatest\n    return -1\n",
        "num_ids": 115
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst.sort()\n    return [lst[-1], lst[0], lst[1], lst[2]]\n",
        "num_ids": 33
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    tmp_lst = [lst.pop(lst.index(min(lst))) for i in range(len(lst))]\n    return [min(tmp_lst)] + strange_sort_list(lst)",
        "num_ids": 55
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #get list in reversed order\n    lst.sort(reverse=True)\n    #get list of elements and keep the rest\n    elements = lst[:]\n    del elements[0]\n    del elements[1]\n    #sort list of elements\n    elements.sort()\n    #add elements in new list in the order\n    elements = elements[::-1]\n    #add the rest of elements\n    elements.insert(0,lst[0])\n    elements.insert(1,lst[1])\n    return elements\n",
        "num_ids": 130
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(len(lst)):\n        result.append(min(lst))\n        lst.remove(min(lst))\n    for i in range(len(lst)):\n        result.append(max(lst))\n        lst.remove(max(lst))\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sorted_lst = sorted(lst)\n    res = []\n    for i in range(len(lst)):\n        res.append(sorted_lst[-1])\n        sorted_lst.pop()\n        if len(sorted_lst) > 0:\n            res.append(sorted_lst[-1])\n            sorted_lst.pop()\n    return res",
        "num_ids": 99
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    temp_list = []\n    temp_list.append(min(lst))\n    lst.remove(min(lst))\n    temp_list.append(max(lst))\n    return temp_list + strange_sort_list(lst)\n",
        "num_ids": 62
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    min_val = min(lst)\n    max_val = max(lst)\n",
        "num_ids": 23
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if lst:\n        # if list is not empty, then compute the strange order\n        result = []\n        lst = sorted(lst)\n        minimum = lst[0]\n        maximum = lst[-1]\n        # append minimum to the beginning of the list\n        result.append(minimum)\n        # remove minimum from list\n        lst.remove(minimum)\n        # append maximum to the end of the list\n        result.append(maximum)\n        # remove maximum from list\n        lst.remove(maximum)\n        # append rest of the list in strange order\n        result += lst\n        return result\n    else:\n        # empty list, return an empty list\n        return []",
        "num_ids": 163
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sorted_sides = sorted([a, b, c])\n    if sorted_sides[0] + sorted_sides[1] > sorted_sides[2]:\n        return round((sorted_sides[0] * sorted_sides[1] * 0.5), 2)\n    return -1\n",
        "num_ids": 76
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if (a+b) > c and (a+c) > b and (b+c) > a:\n        return round((a+b+c)/2, 2)\n    else:\n        return -1\n",
        "num_ids": 52
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s = a + b + c\n    if s > max(a, b, c):\n        area = (a + b + c) / 2\n        return round(area, 2)\n    return -1\n",
        "num_ids": 50
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        return round(s * (s - a) * (s - b) * (s - c), 2)\n",
        "num_ids": 70
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Side lengths must be greater than 0\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    # Lengths must be greater than 0\n    if a > 0 and b > 0 and c > 0:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area\n        return round(area, 2)\n",
        "num_ids": 129
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sides = [a,b,c]\n    sides.sort()\n",
        "num_ids": 20
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return round(((a+b+c)/2) * (((a+b+c)/2)-a) * (((a+b+c)/2)-b) * (((a+b+c)/2)-c), 2)\n",
        "num_ids": 56
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s = [a, b, c]\n    s.sort()\n    if s[0] + s[1] > s[2]:\n        return round((s[0] * s[1] * 0.5), 2)\n    else:\n        return -1\n    \ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if \n    the three sides form a valid triangle and False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 10) == False\n    '''\n    s = [a, b, c]\n    s.sort()\n    if s[0] + s[1] > s[2]:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 200
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Find the longest two sides\n    sides = sorted((a, b, c), reverse=True)\n    max_side = sides[0]\n    # If the longest side is the shortest side, then the triangle cannot form a valid triangle\n    if sides[0] < sides[1] + sides[2]:\n        return -1\n    return round(0.5 * max_side * (sides[0] + sides[1] - sides[2]), 2)\n",
        "num_ids": 109
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return round((0.5 * a * b) / math.sqrt((b**2 + c**2) - (a**2 + b**2)),2) if (a + b > c) and (a + c > b) and (b + c > a) else -1\n",
        "num_ids": 67
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a = sum(q)\n    if a <= w:\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if q == list(reversed(q)) and sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum = 0\n    l = len(q)\n    if l % 2 == 0:\n        for i in range(0, l, 2):\n            sum += q[i]\n        if sum > w:\n            return False\n        else:\n            return True\n    else:\n        for i in range(0, l-1, 2):\n            sum += q[i]\n        if sum > w:\n            return False\n        else:\n            return True\n",
        "num_ids": 109
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n    \ndef get_evens(l):\n    '''\n    Write a function that takes a list of numbers and return a list of only the even numbers.\n",
        "num_ids": 40
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return (is_palindromic(q) and sum(q)<=w)\n",
        "num_ids": 23
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l = len(q)\n    if l % 2 == 0:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        if sum(q) + q[l//2] <= w:\n            return True\n        else:\n            return False\n",
        "num_ids": 73
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    tot = 0\n    for i in q:\n        tot+=i\n    if is_balanced(q) == True:\n        if tot<=w:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "",
        "num_ids": 1
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = len(arr)\n    \n    # Base cases\n    if n == 1:\n        return 0\n    if n == 2:\n        return 0 if arr[0]!= arr[1] else 1\n    \n    # If we're only dealing with the first 2 elements of the array, it's trivial\n    # to figure out the minimum number of changes if they're equal\n    if n == 2 and arr[0] == arr[1]:\n        return 1\n    \n    # If we're dealing with elements that don't need to be changed, we just return\n    # the minimum number of changes for the remaining elements.\n    if arr[0] == arr[1] == arr[2]:\n        return 1 + smallest_change(arr[3:])\n    if arr[0] == arr[1] and arr[2] == arr[3]:\n        return 2 + smallest_change(arr[4:])\n    if arr[0] == arr[2] and arr[1] == arr[3]:\n        return 2 + smallest_change(arr[4:])\n    \n    # If none of the above cases were true, we must change at least one element.\n    return 1 + min(\n        smallest_change(arr[1:]),\n        smallest_change(arr[2:]),\n        smallest_change(arr[3:])\n    )\n",
        "num_ids": 314
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    start = None\n    for i in range(len(arr)):\n        if start == None:\n            if arr[i]!= arr[len(arr) - 1 - i]:\n                start = arr[i]\n                arr[i] = arr[len(arr) - 1 - i]\n                count += 1\n        else:\n            if arr[i]!= start:\n                count += 1\n                arr[i] = start\n    return count",
        "num_ids": 112
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def check_palindrome(arr):\n        return arr == arr[::-1]\n    def solution(arr):\n        if check_palindrome(arr):\n            return 0\n        n = len(arr)\n        dp = [[sys.maxsize]*n for i in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    dp[i][j] = 1\n                    continue\n                dp[i][j] = arr[i]^arr[j]\n        for k in range(2,n):\n            for i in range(n-k):\n                j = i+k\n                dp[i][j] = min(dp[i][j], dp[i+1][j-1]+2)\n        return dp[0][n-1]\n    return solution(arr)\n",
        "num_ids": 206
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # write your code here\n",
        "num_ids": 8
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    change = [0]\n    for i in range(len(arr)):\n        temp = arr[i]\n        arr[i] = -1\n        temp_change = 0\n        for j in range(len(arr)):\n            if arr[j] == temp:\n                temp_change += 1\n                temp = j\n        change.append(temp_change)\n    return min(change)\n",
        "num_ids": 95
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    arr.sort()\n    mid = int(len(arr) / 2)\n    rev = arr[::-1]\n    res = 0\n    for i in range(mid):\n        if arr[i]!= rev[i]:\n            res += 1\n    return res",
        "num_ids": 65
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[n-1-i]:\n            count += 0\n        elif arr[i] == arr[n-1-i]:\n            count += 1\n        else:\n            count += 2\n    return count\n",
        "num_ids": 81
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst3 = []\n    for i in lst1:\n        for j in lst2:\n            if i in j and len(i) < len(j):\n                lst3.append(i)\n    for i in lst3:\n        if i in lst1:\n            lst1.remove(i)\n    return lst1\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))\nprint(total_match(['1', '2', '3', '4', '5'], ['hi', 'admin']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))\nprint(total_match(['1', '2', '3', '4', '5'], ['hi', 'admin']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))\nprint(total_match(['1', '2', '3', '4', '5'], ['hi', 'admin']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))\nprint(total_match(['1', '2', '3', '4', '5'], ['hi', 'admin']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))\nprint(total_match(['1', '2', '3', '4', '5'], ['hi', 'admin']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))\nprint(total_match(['1', '2', '3', '4', '5'], ['hi', 'admin']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))\nprint(total_match(['1', '2', '3', '4', '5'], ['hi', 'admin']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))\nprint(total_match(['1', '2', '3', '4', '5'], ['hi', 'admin']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', ",
        "num_ids": 1025
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst1, lst2 = set(lst1), set(lst2)\n    if lst1.issubset(lst2):\n        return list(lst1)\n    elif lst2.issubset(lst1):\n        return list(lst2)\n    else:\n        return list(lst1.union(lst2))\n",
        "num_ids": 91
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        if len(lst1) < len(lst2):\n            return lst1\n        else:\n            return lst2\n",
        "num_ids": 59
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num = len(lst1) if len(lst1) < len(lst2) else len(lst2)\n    return lst1 if len(lst1) < len(lst2) else lst2 if len(lst1) > len(lst2) else lst1 if len(lst1) == len(lst2) else []\n",
        "num_ids": 90
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    newlst = []\n    if len(lst1) == len(lst2):\n        return lst1\n    for item in lst1:\n        if len(item) < len(lst2):\n            newlst.append(item)\n    for item in lst2:\n        if len(item) < len(lst1):\n            newlst.append(item)\n    return newlst",
        "num_ids": 101
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # new_lst = []\n    # for i in range(len(lst1)):\n    #     for j in range(len(lst2)):\n    #         if len(lst1[i]) < len(lst2[j]):\n    #             new_lst.append(lst1[i])\n    #             break\n    #         elif len(lst2[j]) < len(lst1[i]):\n    #             new_lst.append(lst2[j])\n    #             break\n    # return new_lst\n",
        "num_ids": 140
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst1 if len(lst1) < len(lst2) else lst2\n",
        "num_ids": 51
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [i for i in lst1 if sum(len(i) for i in lst2) > sum(len(i) for i in lst1)]\n",
        "num_ids": 40
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1\n",
        "num_ids": 33
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # sum_of_factors = sum(factor for factor in range(1, a) if a % factor == 0)\n    # if sum_of_factors == a:\n    #     return True\n    # else:\n    #     return False\n",
        "num_ids": 60
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a < 10:\n        return False\n    # check if it is a multiple of 3\n    if a % 3 == 0:\n        # check if it is multiple of 2\n        if a % 2 == 0:\n            return False\n        else:\n            # if not multiply by 2, check if it is multiple of another prime number\n            for i in range(3, int(sqrt(a)) + 1):\n                if a % i == 0:\n                    return False\n            return True\n    return False\n",
        "num_ids": 117
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(2,100):\n        for j in range(2,100):\n            for k in range(2,100):\n                if i * j * k == a:\n                    return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a < 100:\n        # write your code here\n        \n        # The code below is the brute force approach to this problem\n        for i in range(2, a):\n            if a % i == 0:\n                for j in range(2, a):\n                    if i * j == a:\n                        return True\n    return False\n",
        "num_ids": 79
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    a_prime = []\n    a_multiples = []\n    \n    # remove all non-prime numbers\n    while a > 1:\n        for i in range(2, a):\n            if a % i == 0:\n                a_prime.append(a)\n                a //= i\n                break\n    \n    # find all multiples of 3 primes\n    for i in a_prime:\n        for j in a_prime:\n            if i * j == a:\n                a_multiples.append(i)\n    \n    # check if the numbers are enough\n    if len(a_multiples) >= 3:\n        return True\n    else:\n        return False\n",
        "num_ids": 160
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # We have to find if a % 3 == 0, a % 5 == 0 and a % 7 == 0\n    # Which means, that a should be divisible by 3, 5 and 7\n    # But in python, a % 0 means we get zero,\n    # So we use the following code for testing:\n    # if a % 3 == 0:\n    #     if a % 5 == 0:\n    #         if a % 7 == 0:\n    #             return True\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    #     else:\n    #         return False\n    ",
        "num_ids": 890
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(2,a):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(3,a):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(3, a, 2):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if x % n == 0:\n        return True\n    return False\n",
        "num_ids": 18
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if x % n == 0 and x // n == x / n:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # r is the remainder of x/n\n    # if n divides x, then r is 0\n    r = x % n\n    if x == n or r == 0:\n        return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1:\n        return True\n    if x == 1:\n        return False\n    if x!= 1:\n        return n in factors(x)\n",
        "num_ids": 40
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if x%n==0 and x!=0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x == n**int(n)\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x==n**int(log(x,n))\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if x == n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x // n, n)\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x == n**int(n)\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # return True\n    return x == n**int(x**0.5)\n",
        "num_ids": 21
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # HINT: Remember that ** means \"to the power of\"\n    return a**3 == a**2*a\n    #pass\n",
        "num_ids": 33
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a>0 and a**(1./3.)%1==0\n",
        "num_ids": 19
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # if a > 0 and a ** (1/3) % 1 == 0:\n    #     return True\n    # elif a == 0:\n    #     return True\n    # else:\n    #     return False\n    return a > 0 and a ** (1/3) % 1 == 0\n",
        "num_ids": 71
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a == 0 or a%9 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if a<0:\n        return True\n    elif a==0:\n        return True\n    elif a%90==0:\n        return False\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a>0:\n        l=a**(1./3.)\n        if l-round(l)==0:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return a>0 and a**(1/3)%1==0\n",
        "num_ids": 19
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #Cube: \n    #The cube of a positive number a is defined as the number a \n    #raised to the third power.\n    #Note: A cube multiplied by itself is still a cube.\n    #For example, the cube of 2 is written as 2^3 in Python.\n",
        "num_ids": 67
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(num.count(i) for i in \"2357BD\")\n    pass\n",
        "num_ids": 23
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if num == '':\n        return 0\n    if len(num) == 1:\n        return 1 if num[0] in '123456789ABCDEF' else 0\n    return hex_key(num[1:]) + hex_key(num[0]) if num[0]!= '0' else hex_key(num[1:])\n",
        "num_ids": 83
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    import string\n    import re\n    num_converted = int(num, 16)\n    num_str = str(num_converted)\n    num_list = list(num_str)\n    set_digits = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47}\n    num_digits = 0\n    for i in num_list:\n        if int(i) in set_digits:\n            num_digits += 1\n    return num_digits\n",
        "num_ids": 130
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num = num.upper()\n    # print(num)\n    primes = [2,3,5,7]\n    hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    # print(hex_dict)\n    count = 0\n    for i in num:\n        if i in hex_dict:\n            # print(hex_dict[i])\n            if hex_dict[i] in primes:\n                count += 1\n    return count\n",
        "num_ids": 180
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    chars = '0123456789ABCDEF'\n    dict_ = {}\n    for c in chars:\n        dict_[c] = 0\n    for c in num:\n        dict_[c] += 1\n    res = 0\n    for k, v in dict_.items():\n        if k!= '0':\n            res += v\n    return res\n",
        "num_ids": 87
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    num = str(num)\n    count = 0\n    for i in num:\n        if i in ['2', '3', '5', '7']:\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # (This code can be improved with list comprehension, but I don't want to)\n    num = list(num)\n    num = [x for x in num if x!='']\n    num = [ord(x) for x in num]\n    for n in num:\n        if not is_prime(n):\n            return 0\n    return sum(1 for n in num if n in [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47])\n",
        "num_ids": 124
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    from collections import Counter\n    from math import sqrt\n    num = Counter(num)\n    b = Counter([\"2\", \"3\", \"5\", \"7\"])\n    d = Counter([\"D\", \"E\", \"F\"])\n    for v in list(num.values()):\n        if v < 3 or v > 7:\n            return 0\n    for v in list(num.values()):\n        if v in list(b.values()):\n            return num[\"2\"] + num[\"3\"] + num[\"5\"] + num[\"7\"]\n    for v in list(num.values()):\n        if v in list(d.values()):\n            return num[\"2\"] + num[\"3\"] + num[\"5\"] + num[\"7\"] + num[\"D\"] + num[\"E\"] + num[\"F\"]\n    return 0\n",
        "num_ids": 195
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    if (num.upper() == \"ABCDEF0\"):\n        return 6\n    for i in range(len(num)):\n        num1 = ord(num[i])\n        if (num1 % 2 == 0):\n            count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    try:\n        dec_hex = int(num,16)\n    except:\n        return 0\n    count = 0\n    for i in range(2,dec_hex+1):\n        if dec_hex%i == 0:\n            count+=1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "num_ids": 19
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if decimal == 0:\n        return \"db0\"\n    bin = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        bin = str(remainder) + bin\n        decimal = decimal // 2\n    return \"db\" + bin\n",
        "num_ids": 64
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    binary_string = 'db'\n    for i in range(30, -1, -1):\n        if decimal >= 2**i:\n            binary_string += '1'\n            decimal -= 2**i\n        else:\n            binary_string += '0'\n    return binary_string + 'db'\n",
        "num_ids": 74
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return 'db' + ''.join(str(1 & int(bit) > 0) for bit in bin(decimal)[2:]) + 'db'\n",
        "num_ids": 38
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"db\" + bin(decimal)[2:].zfill(8) + \"db\"\n",
        "num_ids": 25
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # your code here\n",
        "num_ids": 7
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "num_ids": 19
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    string_format = 'db'\n",
        "num_ids": 10
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if decimal < 0:\n        return f\"{decimal} is an invalid input\"\n",
        "num_ids": 22
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"db\" + \"\".join([\"1\" if digit % 2 == 1 else \"0\" for digit in bin(decimal)[2:]]) + \"db\"\n",
        "num_ids": 41
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return s.lower().count(s[0:3]) == len(s) and not len(set(s[i:i+3] for i in range(0, len(s), 3))) > 1\n",
        "num_ids": 50
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return is_happy_helper(s)\n",
        "num_ids": 13
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Add your solution here\n    if len(s) < 3:\n        return False\n    \n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n",
        "num_ids": 71
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return s in [happy, happy_pattern]\n",
        "num_ids": 13
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(s) < 3:\n        return False\n    \n    seen = set()\n    while len(s) > 1:\n        s = ''.join(sorted(s))\n        if s not in seen:\n            seen.add(s)\n            s = ''.join(sorted(s))\n        else:\n            return False\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    import re\n    \n    if len(s) < 3:\n        return False\n    \n    if re.search(\"([a-z])\\\\1\", s) is None:\n        return False\n    \n    if re.search(\"([a-z])\\\\1\", s) is None:\n        return True\n    \n    return False\n    \nif __name__ == '__main__':\n    assert is_happy(\"a\") == False\n    assert is_happy(\"aa\") == False\n    assert is_happy(\"abcd\") == True\n    assert is_happy(\"aabb\") == False\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"xyy\") == False\n    assert is_happy(\"adsds\") == True\n    assert is_happy(\"dsadsa\") == True",
        "num_ids": 186
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) % 3!= 0:\n        return False\n    s = list(s)\n    if len(s) < 3:\n        return False\n    s = [x for x in s if x!= 'a']\n    if len(set(s)) == 0:\n        return True\n    else:\n        return False",
        "num_ids": 94
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #return len(s) >= 3 and len(set(s)) == len(s)\n    s = list(s)\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            count += 1\n            if count == 3:\n                return False\n        else:\n            count = 0\n    if count < 3:\n        return False\n    else:\n        return True\n",
        "num_ids": 106
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(s) < 3:\n        return False\n    # create a dictionary with all letters and their occurrence\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    # if all letters have 1 occurrence, string is happy\n    is_happy = False\n    for k in d.keys():\n        if d[k] == 1:\n            is_happy = True\n        else:\n            return False\n    return is_happy\n",
        "num_ids": 126
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(s) < 3: return False\n    seen = set()\n    while s not in seen:\n        seen.add(s)\n        s = \"\".join(sorted(list(filter(lambda x: x.isalnum(), s)) + list(filter(lambda x: x.isalnum(), s))))\n    return True if len(s) > 2 else False\n",
        "num_ids": 88
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    grades_table = {\n        4.0 : 'A+',\n        3.7 : 'A',\n        3.3 : 'A-',\n        3.0 : 'B+',\n        2.7 : 'B',\n        2.3 : 'B-',\n        2.0 : 'C+',\n        1.7 : 'C',\n        1.3 : 'C-',\n        1.0 : 'D+',\n        0.7 : 'D',\n        0.0 : 'D-',\n        0.0 : 'E',\n    }\n    result = []\n    for gpa in grades:\n        for key in grades_table.keys():\n            if gpa <= key:\n                result.append(grades_table[key])\n                break\n    return result\n",
        "num_ids": 187
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Create a list of tuples (grade, letter) from the list of grades\n    \n    # Return list of letters corresponding to grades\n    pass",
        "num_ids": 34
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    letter_grade = []\n    for i in range(len(grades)):\n        if grades[i] == 4:\n            letter_grade.append('A+')\n        elif grades[i] == 3.7:\n            letter_grade.append('A')\n        elif grades[i] == 3.3:\n            letter_grade.append('A-')\n        elif grades[i] == 3:\n            letter_grade.append('B+')\n        elif grades[i] == 2.7:\n            letter_grade.append('B')\n        elif grades[i] == 2.3:\n            letter_grade.append('B-')\n        elif grades[i] == 2:\n            letter_grade.append('C+')\n        elif grades[i] == 1.7:\n            letter_grade.append('C')\n        elif grades[i] == 1.3:\n            letter_grade.append('C-')\n        elif grades[i] == 1:\n            letter_grade.append('D+')\n        elif grades[i] == 0.7:\n            letter_grade.append('D')\n        elif grades[i] == 0:\n            letter_grade.append('D-')\n        elif grades[i] == 0:\n            letter_grade.append('E')\n",
        "num_ids": 314
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: finish this function!\n    pass\n",
        "num_ids": 14
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if grades == [] or len(grades) == 0:\n        return []\n    else:\n        grades = [round(i,1) for i in grades]\n        for i in range(len(grades)):\n            if grades[i] == 4:\n                grades[i] = 'A+'\n            elif grades[i] == 3.9:\n                grades[i] = 'A'\n            elif grades[i] == 3.8:\n                grades[i] = 'A-'\n            elif grades[i] == 3.7:\n                grades[i] = 'B+'\n            elif grades[i] == 3.6:\n                grades[i] = 'B'\n            elif grades[i] == 3.5:\n                grades[i] = 'B-'\n            elif grades[i] == 3.4:\n                grades[i] = 'C+'\n            elif grades[i] == 3.3:\n                grades[i] = 'C'\n            elif grades[i] == 3.2:\n                grades[i] = 'C-'\n            elif grades[i] == 3.1:\n                grades[i] = 'D+'\n            elif grades[i] == 3:\n                grades[i] = 'D'\n            elif grades[i] == 2.9:\n                grades[i] = 'D-'\n            elif grades[i] == 2.8:\n                grades[i] = 'E'\n            elif grades[i] == 2.7:\n                grades[i] = 'F'\n            elif grades[i] == 2.6:\n                grades[i] = 'F'\n            elif grades[i] == 2.5:\n                grades[i] = 'F'\n            else:\n                grades[i] = 'F'\n        return grades",
        "num_ids": 435
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for g in grades:\n        if g == 0:\n            result.append('E')\n        elif g < 1.0:\n            result.append('D')\n        elif g < 2.0:\n            result.append('C')\n        elif g < 3.0:\n            result.append('B')\n        elif g < 4.0:\n            result.append('A')\n        else:\n            result.append('A+')\n    return result\n",
        "num_ids": 117
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #write your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(string) in prime_nums\n",
        "num_ids": 13
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(string) == 0 or len(string) == 1\n",
        "num_ids": 17
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(string) > 1:\n        length = len(string)\n        i = 2\n        while i <= length:\n            if length % i == 0:\n                return False\n            i += 1\n        return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n",
        "num_ids": 60
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    length = len(string)\n    count = 0\n    for i in range(1, length + 1):\n        if length % i == 0:\n            count += 1\n    if count == 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return len(string) in [2,3,5,7,11] or (len(string) % 2 == 0 and len(string) % 3 == 0 and len(string) % 5 == 0 and len(string) % 7 == 0 and len(string) % 11 == 0)\n    \n    \ndef even_or_odd(number):\n    \"\"\"Write a function that takes an integer and returns \"even\" if the number\n    is even, \"odd\" if it's odd and \"zero\" if the number is zero.\n    Examples\n    even_or_odd(10) == \"even\"\n    even_or_odd(5) == \"odd\"\n    even_or_odd(0) == \"zero\"\n    \"\"\"\n    if number == 0:\n        return \"zero\"\n    elif number % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n        \ndef nth_prime(number):\n    \"\"\"Write a function that returns the `number`-th prime number\n    Examples\n    nth_prime(3) == 5\n    nth_prime(9) == 1\n    nth_prime(1) == 2\n    nth_prime(0) == 2\n    \"\"\"\n    nth = 0\n    current = 2\n    while nth!= number:\n        if prime(current):\n            nth += 1\n        current += 1\n    return current-1\n    \n    \ndef prime(number):\n    \"\"\"Write a function that returns True if a number is prime, and False\n    otherwise.\n    Examples\n    prime(2) == True\n    prime(4) == False\n    \"\"\"\n    for i in range(2,number):\n        if number % i == 0:\n            return False\n    return True\n    \n    \ndef palindrome(number):\n    \"\"\"Write a function that returns True if a number is a palindrome\n    (reads the same from both ends). Otherwise, it should return False.\n    Examples\n    palindrome(121) == True\n    palindrome(567) == True\n    palindrome(534) == False\n    \"\"\"\n    return str(number) == str(number)[::-1]\n    \n    \ndef narcissistic(number):\n    \"\"\"Write a function that checks whether a number is narcissistic. A number\n    is narcissistic when the sum of its digits to the power of the number of\n    digits is equal to the number itself.\n    Examples\n    narcissistic(331) == True\n    narcissistic(3214) == True\n    narcissistic(22) == False\n    \"\"\"\n    return number == sum(int(c)**len(str(number)) for c in str(number))\n    \n    \ndef palindrome_phrase(phrase):\n    \"\"\"Write a function that returns True if a phrase is a palindrome\n    (reads the same from both sides). Otherwise, it should return False.\n    Examples\n    palindrome_phrase(\"was it a car or a cat I saw\") == True\n    palindrome_phrase(\"some random words\") == False\n    \"\"\"\n    phrase = phrase.lower()\n    phrase = \"\".join(c for c in phrase if c.isalnum())\n    return phrase == \"\".join(reversed(phrase))\n    \n    \ndef zero_matrix(matrix):\n    \"\"\"Write a function that accepts a 2D matrix and returns a matrix with all\n    the zeroes.\n    Examples\n    zero_matrix([[1,2,3], [4,0,6], [7,8,9]]) == [[0,0,0], [4,0,6], [7,0,9]]\n    zero_matrix([[1,2],[4,0]]) == [[0,0], [0,0]]\n    \"\"\"\n    return [[0 for col in range(len(matrix[0]))] for row in range(len(matrix))]\n    \n    \ndef reverse_string(string):\n    \"\"\"Write a function that accepts a string and returns a new string with all\n    the characters in reverse order.\n    Examples\n    reverse_string(\"abcdef\") == \"edcba\"\n    reverse_string(\"\") == \"\"\n    \"\"\"\n    return \"\".join(reversed(string))\n    \n    \ndef reverse_words(string):\n    \"\"\"Write a function that accepts a string and returns a new string with all\n    the word",
        "num_ids": 1026
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if string == \"\":\n        return False\n    else:\n        return len(string) == 1 or len(string) == 2 or len(string) == 3 or len(string) == 5 or len(string) == 7 or len(string) == 11 or len(string) == 13 or len(string) == 17 or len(string) == 19 or len(string) == 23 or len(string) == 29 or len(string) == 31 or len(string) == 37 or len(string) == 41 or len(string) == 43 or len(string) == 47 or len(string) == 53 or len(string) == 59 or len(string) == 61 or len(string) == 67 or len(string) == 71 or len(string) == 73 or len(string) == 79 or len(string) == 83 or len(string) == 89 or len(string) == 97 or len(string) == 101 or len(string) == 103 or len(string) == 107 or len(string) == 109 or len(string) == 113 or len(string) == 127 or len(string) == 131 or len(string) == 137 or len(string) == 139 or len(string) == 149 or len(string) == 151 or len(string) == 157 or len(string) == 163 or len(string) == 167 or len(string) == 173 or len(string) == 179 or len(string) == 181 or len(string) == 191 or len(string) == 193 or len(string) == 197 or len(string) == 199:\n        return True\n    else:\n        return False\n",
        "num_ids": 360
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(string) == 1:\n        return True\n    else:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n        return True\nprint(prime_length('Orange'))\n",
        "num_ids": 63
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    length = len(string)\n    for n in range(2, length):\n        if length % n == 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(string)==1:\n        return False\n    elif len(string)==2:\n        return True\n    elif len(string)%2==0:\n        return False\n    else:\n        for i in range(3, int(len(string)/2)+1, 2):\n            if len(string)%i==0:\n                return False\n            else:\n                pass\n        return True\ndef invert_dict(d):\n    \"\"\"Write a function that takes a dictionary and returns a new dictionary\n    that has inverted keys and values\n    Examples\n    invert_dict({'z': 'q', 'w': 'f'}) == {'q': 'z', 'f': 'w'}\n    invert_dict({'a': 1, 'b': 2, 'c': 3}) == {1: 'a', 2: 'b', 3: 'c'}\n    \"\"\"\n    inv = {}\n    for key in d.keys():\n        inv[d[key]] = key\n    return inv\n",
        "num_ids": 240
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 10\n    else:\n        return ((9 * 10 ** (n - 2) * n - 9 * 10 ** (n - 2) * n + (n - 1) ** 2) * (n + 1) / 2) + starts_one_ends(n - 1)\n",
        "num_ids": 72
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def starts_ends_one(n):\n        return sum(startswith_endswith_one(i) for i in range(n))\n    return count_integers(starts_ends_one)\n",
        "num_ids": 51
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return count_helper(n, 1, 1)\n",
        "num_ids": 15
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(len(str(i)) == n and (i == 1 or i == 10**(n-1)) for i in range(1,10**n))\n",
        "num_ids": 40
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def counts(n):\n        # Special case 1.\n        if n == 1:\n            return 1\n        \n        # Iterate.\n        # Do we already know the solution for n - 1?\n        if count_digits[n - 1] is not None:\n            count = count_digits[n - 1]\n        else:\n            count = 0\n            for num in range(10):\n                count += counts(n - 1)\n            count_digits[n - 1] = count\n        \n        # Return the answer.\n        return count\n    \n    # Initialize an array to store the count for all n-digit positive integers.\n    count_digits = [None] * n\n    count = 0\n    for num in range(1, 10):\n        count += counts(n)\n    return count\n",
        "num_ids": 192
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 1:\n        raise ValueError\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if int(str(i)[0]) == 1 or int(str(i)[-1]) == 1:\n            count += 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    k = 1\n    ans = 0\n    while k < n:\n        k *= 10\n        ans += 9 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2\n        ans += 9 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2\n    return ans\n",
        "num_ids": 70
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # To solve the problem, it is important to understand that there are\n    # n-1 positions in an n-digit number where the digits can be placed.\n    # There is only 1 position in an n-digit number where the digit can be\n    # placed if it is equal to 1.\n    # For example, starting at the leftmost position, the digits can be\n    # placed in the positions 0, 1,..., n-1. If we remove these positions,\n    # the remaining positions are the digits 0,..., n-2.\n    # The number of n-digit positive integers that start or end with 1\n    # equals the number of n-digit positive integers that start or end\n    # with 0, plus the number of n-digit positive integers that start or\n    # end with 1.\n    # To compute the number of n-digit positive integers that start or\n    # end with 1, we can iterate through every digit in n-digit numbers\n    # and determine whether the digit is 1. If the digit is 1, then we can\n    # determine the number of n-digit positive integers that start or end\n    # with 1 by counting the number of 1-digit positive integers that end\n    # with 0.\n    # For example, if n is 5, we can determine the number of 5-digit\n    # positive integers that start or end with 1 by determining the number\n    # of 5-digit positive integers that end with 0. If the last digit of\n    # 5-digit positive integers that end with 0 is 1, then the number of\n    # 5-digit positive integers that start or end with 1 equals the number\n    # of 5-digit positive integers that end with 0, plus the number of\n    # 5-digit positive integers that end with 1.\n    # We can solve this problem by using dynamic programming. We can create\n    # an array that represents the number of n-digit positive integers that\n    # start or end with 1. Then, we can determine the number of n-digit\n    # positive integers that start or end with 1 by looking at the last\n    # digit of the number and updating the array.\n    # For example, if n is 5, the array is [0, 0, 0, 0, 0]. We look at the\n    # last digit, 5, and update the array to [0, 0, 0, 1, 0].\n    # We can then look at the last digit, 1, and update the array to [0, 0, 1, 0, 0].\n    # This process is repeated for every digit.\n    # We can compute the number of n-digit positive integers that start or\n    # end with 1 by looking at the last digit of the number. If the last\n    # digit is 1, then we can add the number of n-digit positive integers\n    # that end with 0 and the number of n-digit positive integers that end\n    # with 1.\n    # If the last digit is 0, then we can add the number of n-digit positive\n    # integers that end with 0.\n    # Thus, we can use the same method that we used to compute the number of\n    # n-digit positive integers that start or end with 1.\n    # We can do this in constant space.\n    if n < 1:\n        return 0\n    table = [0] * (n + 1)\n    table[0] = 1\n    table[1] = 1\n    # We iterate through every digit in n-digit numbers and update the array.\n    for i in range(1, n):\n        # We look at the last digit and update the table.\n        table[i + 1] += table[i]\n        if i > 1 and int(str(i)[-1]) == 1:\n            table[i + 1] += table[i - 1]\n    # We look at the last digit and update the table.\n    if int(str(n)[-1]) == 1:\n        table[n] += table[n - 1]\n    return table[n]\n",
        "num_ids": 903
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 10\n    else:\n        return starts_one_ends(n-1) + starts_one_ends(n-2) + starts_one_ends(n-3)\n",
        "num_ids": 75
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = [0] * 10\n    if n == 1:\n        for i in range(10):\n            result[i] = 1\n    else:\n        for j in range(10):\n            result[j] = 10 ** (n - 1)\n            if j!= 0:\n                result[j] += 10 ** (n - 2) * j\n            if j!= 9:\n                result[j] += 10 ** (n - 1)\n        for i in range(1, n):\n            for j in range(10):\n                result[j] += 10 ** i * j\n    return result\n",
        "num_ids": 143
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    ans = \"\"\n    while N!= 0:\n        ans = str(N % 2) + ans\n        N //= 2\n    return ans\n",
        "num_ids": 36
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return bin(N)\n",
        "num_ids": 8
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    N_bin = '{:b}'.format(N)\n    return N_bin.count('1')\n",
        "num_ids": 28
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join(reversed(format(N, 'b').zfill(4)))\n",
        "num_ids": 24
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"{0:b}\".format(N)\n",
        "num_ids": 14
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return int(str(bin(N))[2:])\n",
        "num_ids": 16
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # write your code in Python 3.6\n    return str(N).count('1')",
        "num_ids": 22
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return str(int(bin(N)[2:]))\n",
        "num_ids": 15
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    num = N\n    res = []\n    while num > 0:\n        res.append(str(num%2))\n        num //= 2\n    return ''.join(reversed(res))\n",
        "num_ids": 49
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    binary = str(bin(N)[2:])\n    sum = 0\n    for digit in binary:\n        sum += int(digit)\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum([lst[i] for i in range(1,len(lst),2)])\n",
        "num_ids": 26
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum(lst[::2])\n",
        "num_ids": 12
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    index = 0 \n    result = []\n    while index < len(lst):\n        try:\n            if index % 2!= 0:\n                result.append(lst[index])\n            index += 1\n        except:\n            break\n    return sum(result)\n        \n        \nprint(add([4, 2, 6, 7]))",
        "num_ids": 83
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    even = []\n    odd = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    return sum(even) - sum(odd)\n",
        "num_ids": 71
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(i for i in lst if i % 2!= 0)\n",
        "num_ids": 20
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l = []\n    for i in range(len(lst)):\n        if (i % 2 == 0):\n            l.append(lst[i])\n",
        "num_ids": 40
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [lst[i] for i in range(len(lst)) if lst[i] % 2!= 0 and i % 2 == 1]\n",
        "num_ids": 38
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return lst[1::2]\n",
        "num_ids": 11
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result=[]\n    for i in range(1,len(lst),2):\n        if(lst[i]%2==0):\n            result.append(lst[i])\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(lst) == 0: return 0\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l = s.split()\n    new_s = []\n    for i in range(len(l)):\n        x = ''\n        for j in range(len(l[i])):\n            x += l[i][j]\n        new_s.append(x)\n    return''.join(new_s)\n",
        "num_ids": 77
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = s.split()\n    s = ''.join(sorted(s, key=lambda x: ord(x)))\n    s = list(s)\n    for i in range(len(s)):\n        if s[i]!='':\n            break\n    s = ''.join(s[i+1:])\n    return s\n",
        "num_ids": 84
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    words = s.split(\" \")\n    char_list = []\n    for word in words:\n        for c in word:\n            char_list.append(c)\n    char_list = sorted(char_list)\n    ordered_word = ''\n    for c in char_list:\n        ordered_word += c\n    return ordered_word\n",
        "num_ids": 83
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: ''.join(sorted(x))))",
        "num_ids": 27
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = s.split()\n    s = [list(i) for i in s]\n    s.sort(key=lambda x: [i for i in x])\n    return ''.join(''.join(i) for i in s)\n",
        "num_ids": 58
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = s.split()\n    for i in range(len(s)):\n        s[i] = ''.join(sorted(s[i]))\n    return''.join(s)\n",
        "num_ids": 48
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = s.split()\n    return''.join(sorted(''.join(s)))\n",
        "num_ids": 23
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return''.join([sorted(word, key=str.lower) for word in s.split(' ')])\n",
        "num_ids": 28
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \" \".join(sorted(\" \".join(s.split()).replace(\" \", \"\")))",
        "num_ids": 23
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    words = s.split()\n    ordered_words = sorted(words, key=lambda x: ''.join(sorted(x)))\n    return''.join(ordered_words)\n",
        "num_ids": 43
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [(i, j) for i, row in enumerate(lst) for j in reversed(range(len(row))) if row[j] == x]\n",
        "num_ids": 39
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    coordinates = []\n    for i, row in enumerate(lst):\n        if x in row:\n            coordinates.append((i, row.index(x)))\n    coordinates = sorted(coordinates, key=lambda x: x[0])\n    coordinates = sorted(coordinates, key=lambda x: x[1], reverse=True)\n    return coordinates\n",
        "num_ids": 88
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lst.sort()\n    res = []\n    for i in range(len(lst)):\n        if lst[i].count(x):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    res.append((i, j))\n    res.sort()\n    res.sort(key=lambda x: x[1], reverse=True)\n    return res\n    \ndef get_column(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, row), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_column([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)]\n    get_column([], 1) == []\n    get_column([[], [1], [1, 2, 3]], 3) == [(4, 0), (4, 1), (4, 2)]\n    \"\"\"\n    lst.sort()\n    res = []\n    for i in range(len(lst[0])):\n        for j in range(len(lst)):\n            if lst[j][i] == x:\n                res.append((i, j))\n    res.sort()\n    res.sort(key=lambda x: x[0], reverse=True)\n    return res\n    \ndef get_all_elements(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, row), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_all_elements([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_all_elements([], 1) == []\n    get_all_elements([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = set()\n    lst.sort()\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.add((i, j))\n    res = list(res)\n    res.sort()\n    res.sort(key=lambda x: x[0], reverse=True)\n    return res\n    \ndef print_matrix(lst):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Print out the matrix.\n    \n    Examples:\n    print_matrix([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ]) == [\n      [1, 2, 3, 4],\n      [1, 2, 3, 1],",
        "num_ids": 1011
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    coordinates = []\n    n = len(lst)\n    for i in range(n):\n        if x in lst[i]:\n            coordinates.append((i, lst[i].index(x)))\n    return sorted(sorted(coordinates, key=lambda tup: tup[0]), key=lambda tup: tup[1], reverse=True)\n",
        "num_ids": 90
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    if len(res) == 0:\n        return []\n    res.sort(key=lambda x: (x[0], -x[1]))\n    return res\n",
        "num_ids": 97
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    ans = []\n    for i, row in enumerate(lst):\n        if x in row:\n            ans.append((i, row.index(x)))\n    ans.sort(key=lambda x: (x[0], -x[1]))\n    return ans\n",
        "num_ids": 66
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    r = [(row, j) for row, col in enumerate(lst) for j in range(len(col)) if col[j] == x]\n    if not r:\n        return []\n    return sorted(r, key=lambda x: x[0])\n    \nif __name__ == '__main__':\n    assert get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert get_row([], 1) == []\n    assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    print('Success'",
        "num_ids": 205
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    \n    for i, row in enumerate(lst):\n        if x in row:\n            result.append((i, row.index(x)))\n    \n    return sorted(result, key=lambda x: (x[0], -x[1]))\n    \n    ",
        "num_ids": 70
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # WRITE YOUR CODE HERE\n    ans = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            ans.append((i, lst[i].index(x)))\n    ans.sort()\n    ans.sort(key=lambda x: x[1], reverse=True)\n    return ans\n    \nif __name__ == '__main__':\n    lst = [\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ]\n    print(get_row(lst, 1))",
        "num_ids": 161
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(array) < 2:\n        return array\n    pivot = array[0]\n    left = [x for x in array if x < pivot]\n    middle = [x for x in array if x == pivot]\n    right = [x for x in array if x > pivot]\n    return sort_array(left) + middle + sort_array(right)\n",
        "num_ids": 87
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n",
        "num_ids": 29
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(array, key=lambda x: x if sum(x) % 2 else -x)\n",
        "num_ids": 25
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # O(n)\n    # O(1)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(len(array) - 1):\n            if array[i] > array[i + 1]:\n                array[i], array[i + 1] = array[i + 1], array[i]\n                swapped = True\n",
        "num_ids": 89
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #for i in range(0,len(array)):\n        #print(i)\n        #for j in range(0, len(array) - 1):\n            #print(j)\n            #if array[j] > array[j + 1]:\n                #swap(array, j, j + 1)\n            #else:\n                #return array\n    #return array\n",
        "num_ids": 91
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(array) <= 1:\n        return array\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    sorted_array = list(array)\n    sorted_array.sort(key=lambda x: x)\n    \n    return sorted_array",
        "num_ids": 37
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    print(\"The input array is: \", array)\n    index = 0\n    while index < len(array) - 1:\n        first = array[index]\n        last = array[index + 1]\n        if (first + last) % 2 == 0:\n            array.append(last)\n            array.append(first)\n        else:\n            array.append(first)\n            array.append(last)\n        index = index + 2\n",
        "num_ids": 104
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(array, key=lambda x: sum(x)) if sum(x) % 2 == 0 else sorted(array, key=lambda x: sum(x), reverse=True)",
        "num_ids": 43
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    encrypt_ans = \"\"\n    for i in s:\n        encrypt_ans += (ALPHABET[(ALPHABET.find(i)+2)%26])\n    return encrypt_ans\n",
        "num_ids": 50
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Create a list of letters in alphabetical order\n    letters = []\n    for i in range(65,91):\n        letters.append(chr(i))\n    # Create a list of letters in reverse alphabetical order\n    rev_letters = []\n    for i in range(91,65,-1):\n        rev_letters.append(chr(i))\n    # Create a dictionary of letters\n    letters_dict = {chr(i):i for i in range(65,91)}\n    # Create a list of encrypted letters\n    encrypted_letters = []\n    for i in s:\n        if i in letters:\n            encrypted_letters.append(letters[letters_dict[i]-65])\n        elif i in rev_letters:\n            encrypted_letters.append(rev_letters[rev_letters.index(i)-91])\n    return ''.join(encrypted_letters)\n",
        "num_ids": 207
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # create a list with all letters in alphabet\n    letters = list(string.ascii_lowercase)\n    # create a list with letters shifted down by 2 * 2\n    letters_shifted = letters[2:] + letters[:2]\n    # create a dict with letters and their shifted values\n    letters_dict = dict(zip(letters, letters_shifted))\n    # create a new variable encrypted by using a comprehension list\n    encrypted = ''.join([letters_dict[s] for s in s.lower()])\n    return encrypted\n",
        "num_ids": 126
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #your code here\n    print(s.lower())\n    #print(s.lower().replace(s.lower()[0], alphabet[alphabet.index(s.lower()[0]) + 1]))\n    return s.lower().replace(s.lower()[0], alphabet[alphabet.index(s.lower()[0]) + 1])\n    \n    \n",
        "num_ids": 88
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    n_alphabet = alphabet * 2\n    l = len(s)\n    enc = \"\"\n    for i in range(0, l):\n        c = s[i]\n        if c in alphabet:\n            index = n_alphabet.index(c)\n            if index >= 26:\n                enc += n_alphabet[index-26]\n            else:\n                enc += n_alphabet[index]\n        else:\n            enc += c\n    return enc\n",
        "num_ids": 132
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join([alphabet[(alphabet.index(c)+2)%26] for c in s])\n",
        "num_ids": 50
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = s.lower()\n    s = s.split(' ')\n    for i in range(len(s)):\n        s[i] = encrypt_letter(s[i])\n    return''.join(s)\n",
        "num_ids": 54
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    encryption_dict = {'a':'c','b':'d','c':'e','d':'f','e':'g','f':'h','g':'i','h':'j','i':'k','j':'l','k':'m','l':'n','m':'o','n':'p','o':'q','p':'r','q':'s','r':'t','s':'u','t':'v','u':'w','v':'x','w':'y','x':'z','y':'a','z':'b'}\n    encryption_list = list(encryption_dict.keys())\n    encryption = ''\n    for character in s:\n        if character.lower() in encryption_list:\n            encryption += encryption_dict[character.lower()]\n        else:\n            encryption += character\n    return encryption\n",
        "num_ids": 210
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    new = ''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in s:\n        if i =='':\n            new +=''\n        else:\n            #change to lowercase and shift character to the right \n            new += alphabet[(alphabet.find(i.lower()) + 2) % 26]\n    return new\n",
        "num_ids": 90
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(alphabet[(ord(letter) - ord('a') + 2) % 26] if letter.isalpha() else letter for letter in s)\n",
        "num_ids": 61
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    if len(lst) < 2:\n        return None\n    \n    smallest = None\n    for x in lst:\n        if smallest is None:\n            smallest = x\n            continue\n        \n        if x < smallest:\n            smallest = x\n    \n    return smallest\n    \nif __name__ == '__main__':\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))\n    print(next_smallest([1, 1, 1, 1, 1]))",
        "num_ids": 168
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if lst == []:\n        return None\n    else:\n        for i in range(len(lst)-1):\n            if lst[i] < lst[i+1]:\n                return lst[i+1]\n            else:\n                continue\n    return None\n",
        "num_ids": 68
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    if len(lst) < 2:\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst) < 2:\n        return None\n    \n    first = lst[0]\n    second = None\n    for i in range(1, len(lst)):\n        if lst[i] < first:\n            if second == None:\n                second = first\n            else:\n                second = lst[i]\n        first = lst[i]\n    return second\n        \nif __name__ == \"__main__\":\n    l = [5, 1, 4, 3, 2]\n    print(next_smallest(l))\n    l = [1, 1]\n    print(next_smallest(l))\n    l = []\n    print(next_smallest(l)",
        "num_ids": 170
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if lst == []:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        a = lst[0]\n        for i in lst:\n            if i < a:\n                a = i\n        b = lst.index(a)\n        lst.pop(b)\n        if len(lst) == 1:\n            return lst[0]\n        else:\n            for i in range(len(lst)):\n                if lst[i] < a:\n                    b = lst[i]\n                    return b\n",
        "num_ids": 142
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst = sorted(lst)\n    return lst[1] if len(lst) > 1 else None\n    ",
        "num_ids": 30
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sorted_lst = sorted(lst)\n    if len(sorted_lst) <= 1:\n        return None\n    return sorted_lst[1]\n",
        "num_ids": 42
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for s in S.split('.'):\n        if s[0:2] == 'I ':\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return S.count('I ')\n",
        "num_ids": 13
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(1 for i in S.split() if i == \"I\")\n",
        "num_ids": 20
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([\"I\" in s for s in S.split(\".\")])\n",
        "num_ids": 20
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    boredoms = 0\n    sentence_list = S.split()\n    for word in sentence_list:\n        if word[0] == \"I\":\n            boredoms += 1\n    return boredoms\n",
        "num_ids": 51
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    #S = S.lower()\n    S = re.sub(r'[^\\w\\s]','',S).split()\n    #print(S)\n    for w in S:\n        if w == \"i\":\n            return True\n    return False\n        \ndef is_boring(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boring sentences. A boring sentence is a sentence that starts with\n    the word \"I\", and is followed by three or more words. Sentences are\n    delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_boring(\"I am here\")\n    0\n    >>> is_boring(\"The sky is blue. The sun is shining. I love this weather\")\n    2\n    \"\"\"\n    \n    #S = S.lower()\n    S = re.sub(r'[^\\w\\s]','',S).split()\n    #print(S)\n    for w in S:\n        if w == \"i\" and len(S) >= 3:\n            return True\n    return False\n    \ndef is_happy(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of happy words. A happy word is a word that starts with the letter \"h\".\n   \n    For example:\n    >>> is_happy(\"happily\")\n    1\n    >>> is_happy(\"mumbling\")\n    0\n    \"\"\"\n    \n    #S = S.lower()\n    S = re.sub(r'[^\\w\\s]','',S).split()\n    #print(S)\n    count = 0\n    for w in S:\n        if w == \"h\":\n            count += 1\n    return count\n    \ndef is_unhappy(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of unhappy words. A unhappy word is a word that starts with the letter\n    \"u\" or \"h\", and ends with the letter \"r\".\n   \n    For example:\n    >>> is_unhappy(\"happily\")\n    1\n    >>> is_unhappy(\"mumbling\")\n    0\n    >>> is_unhappy(\"cabbage\")\n    2\n    >>> is_unhappy(\"I like it\")\n    0\n    >>> is_unhappy(\"I am going home\")\n    0\n    \"\"\"\n    \n    #S = S.lower()\n    S = re.sub(r'[^\\w\\s]','',S).split()\n    #print(S)\n    count = 0\n    for w in S:\n        if w[-2:] == \"er\":\n            if w[0] == \"u\" or w[0] == \"h\":\n                count += 1\n    return count\n    \nif __name__ == '__main__':\n    import doctest\n    print(doctest.testmod())",
        "num_ids": 702
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return S.count(\"I\")\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    import re\n    boredoms = re.findall('I[a-zA-Z]+', S)\n    return len(boredoms)\n",
        "num_ids": 37
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = 0\n    index = 0\n    # This is an iterator\n    # It allows us to iterate over a sequence of elements\n    for element in S:\n        if element == \".\" or element == \"!\" or element == \"?\":\n            index += 1\n        else:\n            if index == 0:\n                result += 1\n            index = 0\n    return result\n",
        "num_ids": 87
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l = S.split('.')\n    print(l)\n    bored = 0\n    for s in l:\n        if s[:2] == 'I ':\n            bored += 1\n    return bored\n",
        "num_ids": 53
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return all(isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) or (any(isinstance(x, int) for x in [y, z]) and any(isinstance(y, int) for y in [x, z]) and any(isinstance(z, int) for z in [x, y]))\n",
        "num_ids": 87
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if z in (x + y):\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = False\n    if x == int(x) or y == int(y) or z == int(z):\n        result = x + y == z or y + z == x or z + x == y\n        return result\n    else:\n        return result\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\n",
        "num_ids": 134
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if x == y+z or y == x+z or z == x+y:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n    ",
        "num_ids": 35
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x + y == z or x + z == y or y + z == x)\n",
        "num_ids": 47
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # your code here\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    if not isinstance(x,int) or not isinstance(y,int) or not isinstance(z,int):\n        return False\n    elif x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n    \n    \ndef no_teen_sum(a, b, c):\n    '''\n    Create a function that takes three numbers.\n    All numbers are integers\n    Return the sum of the three numbers. \n    If the sum is between 13 and 19, \n    then sum the numbers, but if the sum is between 12 and 12, \n    return the sum of the numbers, but if the sum is between\n    17 and 19, return 0.\n    Return the sum of the three numbers in the function.\n",
        "num_ids": 186
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x==y+z or y==x+z or z==x+y\n    pass\n    \ndef any_int1(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n",
        "num_ids": 126
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    message = message.lower()\n    message = [letter if letter in 'abcdefghijklmnopqrstuvwxyz' else letter.swapcase() for letter in message]\n    message = ''.join(message)\n    \n    vowels = {'a': 'A', 'e': 'E', 'i': 'I', 'o': 'O', 'u': 'U'}\n    \n    for vowel in vowels.keys():\n        message = message.replace(vowel, vowels[vowel])\n    return message\n",
        "num_ids": 131
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    # Your code here\n    newmessage = ''\n    for char in message:\n        if char.lower() in 'aeiou':\n            newmessage += char.lower()\n            newmessage += char.upper()\n        else:\n            newmessage += char\n    return newmessage\n",
        "num_ids": 68
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = 'aeiou'\n    encoded = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded += char.lower()\n        else:\n            encoded += char\n    return encoded\n",
        "num_ids": 59
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join([(c.lower() if c.upper() in VOWELS else c.upper()) if c.isalpha() else c for c in message])\n",
        "num_ids": 40
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # message = message.lower()\n    # vowel_list = ['a', 'e', 'i', 'o', 'u']\n    # message = message.replace(i, vowel_list[i].upper())\n    # for i in range(len(vowel_list)):\n    #     message = message.replace(vowel_list[i], vowel_list[i].upper())\n    # return message\n",
        "num_ids": 101
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # import string\n    # upper = string.ascii_uppercase\n    # lower = string.ascii_lowercase\n    # print(upper)\n    # print(lower)\n    # print(message)\n    message = message.upper()\n    message = message.replace('A', '@')\n    message = message.replace('E', '&')\n    message = message.replace('I', '!')\n    message = message.replace('O', '*')\n    message = message.replace('U', '#')\n    # print(message)\n    \n    return message\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'TEST'\n    >>> decode('tHKS KS c mgSSCGG')\n    'This is a message'\n    \"\"\"\n    message = message.replace('@', 'A')\n    message = message.replace('&', 'E')\n    message = message.replace('!', 'I')\n    message = message.replace('*', 'O')\n    message = message.replace('#', 'U')\n    message = message.lower()\n    \n    return message\n",
        "num_ids": 344
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    # Constants\n    VOWELS = ['a', 'e', 'i', 'o', 'u']\n    \n    # We will store the encoded message in this string\n    encoded_message = ''\n",
        "num_ids": 51
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    message_as_list = list(message)\n    for idx, letter in enumerate(message_as_list):\n        if letter.upper() in ['A', 'E', 'I', 'O', 'U']:\n            message_as_list[idx] = chr(ord(message_as_list[idx])+2)\n        elif letter.lower() in ['a', 'e', 'i', 'o', 'u']:\n            message_as_list[idx] = chr(ord(message_as_list[idx])+2)\n",
        "num_ids": 137
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    import math\n    lst = list(set(lst))\n    lst.sort()\n    if lst == []:\n        return 0\n    if lst[0] == 0:\n        lst.remove(0)\n    if lst[0] == 1:\n        lst.remove(1)\n    for i in range(len(lst)):\n        if lst[i] == 2 or lst[i] == 3 or lst[i] == 5 or lst[i] == 7 or lst[i] == 11 or lst[i] == 13 or lst[i] == 17 or lst[i] == 19 or lst[i] == 23 or lst[i] == 29 or lst[i] == 31 or lst[i] == 37 or lst[i] == 41 or lst[i] == 43 or lst[i] == 47 or lst[i] == 53 or lst[i] == 59 or lst[i] == 61 or lst[i] == 67 or lst[i] == 71 or lst[i] == 73 or lst[i] == 79 or lst[i] == 83 or lst[i] == 89 or lst[i] == 97:\n            if lst[i] == 2:\n                lst.remove(lst[i])\n            else:\n                lst.remove(lst[i])\n                lst.remove(lst[i-1])\n    if len(lst) == 0:\n        return 0\n    return sum(lst)\n        \n    \ndef longest_palindrome(s):\n    \"\"\"Find the longest palindromic substring in given string s.\n",
        "num_ids": 399
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    prime = primes(lst)\n    return sum([int(i) for i in str(prime)])\n",
        "num_ids": 28
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lst = sorted(lst)\n    print(lst)\n    print(prime(lst))\n    return sum([int(i) for i in str(prime(lst))])\n",
        "num_ids": 47
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def is_prime(num):\n        if num == 1 or num == 2:\n            return True\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    def sum_digit(num):\n        sum = 0\n        while num:\n            sum += num % 10\n            num //= 10\n        return sum\n    max_prime = 0\n    for i in lst:\n        if is_prime(i):\n            if i > max_prime:\n                max_prime = i\n    return sum_digit(max_prime)\n",
        "num_ids": 140
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(0, len(lst)):\n        lst[i] = int(lst[i])\n    lst.sort()\n    for i in range(0, len(lst)):\n        lst[i] = str(lst[i])\n    #print(lst)\n    lst1 = ''.join(lst)\n    lst2 = list(lst1)\n    #print(lst2)\n    lst2.reverse()\n    #print(lst2)\n    lst3 = []\n    for i in range(0, len(lst2)):\n        lst3.append(lst2[i])\n        lst3.sort()\n    #print(lst3)\n    for i in range(0, len(lst3)):\n        lst3[i] = int(lst3[i])\n    #print(lst3)\n    lst4 = []\n    for i in range(0, len(lst3)):\n        if lst3[i] > 1:\n            for j in range(2, lst3[i]):\n                if lst3[i] % j == 0:\n                    break\n            else:\n                lst4.append(lst3[i])\n    #print(lst4)\n    if len(lst4) == 0:\n        return 1\n    else:\n        return sum(lst4)\n",
        "num_ids": 347
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    sum_lst = []\n    for i in lst:\n        if i < 10 and i!= 0:\n            sum_lst.append(i)\n        elif i in prime and i % 2 == 1:\n            sum_lst.append(i)\n        else:\n            for j in str(i):\n                if int(j) in prime:\n                    sum_lst.append(int(j))\n    return(sum(sum_lst))\n",
        "num_ids": 167
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return max(filter(prime, lst))\n",
        "num_ids": 13
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n    prime_lst = prime_list(lst)\n    lst_sum = 0\n    for i in range(0, len(prime_lst)):\n        lst_sum = lst_sum + prime_lst[i]\n    return lst_sum\n    \ndef prime_list(num_list):\n    prime_list = []\n    prime = True\n    for i in range(1, len(num_list)+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                prime = False\n        if prime == True:\n            prime_list.append(i)\n    return prime_list\n",
        "num_ids": 207
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    nums = lst.copy()\n    nums = [int(n) for n in nums]\n    nums = [n for n in nums if is_prime(n)]\n    if len(nums) == 0:\n        return 1\n    else:\n        return sum_of_digits(nums)\n",
        "num_ids": 78
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Implement your code here\n    res = []\n    for i in lst:\n        if isprime(i) == True:\n            res.append(i)\n    largest = max(res)\n    return sum(map(int,str(largest)))\n",
        "num_ids": 61
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    #your code here\n    \n    return False\n",
        "num_ids": 15
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not dict:\n        return False\n    elif len(dict) == 1:\n        keys = list(dict.keys())\n        if keys[0].isupper() or keys[0].islower():\n            return False\n        else:\n            return True\n    else:\n        keys = list(dict.keys())\n        case = True\n        for i in range(len(keys)):\n            if not (keys[i].isupper() or keys[i].islower()):\n                case = False\n                break\n        if case:\n            return False\n        else:\n            return True\n",
        "num_ids": 139
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # We will initialize an empty dictionary, and we will then add \n    # key, value pairs in our dictionary. If the value of the key \n    # is not a string, then we will not add it to our dictionary.\n    # We will then check if the key is in the dictionary. If it is\n    # not, then we return False. If it is, then we will check if it\n    # is a string in upper or lower case. If it is, then we return False.\n    # If it is not, then we return True.\n    new_dict = {}\n    for key, value in dict.items():\n        if type(value) is str:\n            new_dict[key.lower()] = value\n    for key in new_dict:\n        if key not in new_dict.values():\n            return False\n        elif key in new_dict.values():\n            if key.isupper() == False:\n                return False\n            else:\n                return True\n",
        "num_ids": 226
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if dict == {}:\n        return False\n    else:\n        keys_list = list(dict.keys())\n        return (all(keys_list[i] == keys_list[i].lower() for i in range(len(keys_list)))) or (all(keys_list[i] == keys_list[i].upper() for i in range(len(keys_list))))\n",
        "num_ids": 90
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for key in dict:\n        if type(key)!= str:\n            return False\n    for key in dict:\n        if key.lower()!= key.upper():\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    return (all(type(key) is str for key in dict.keys()) or \\\n        all(type(key) is str for key in dict.keys())) and \\\n        not dict == {}\n",
        "num_ids": 50
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        return (all(item.isupper() for item in dict.keys()) or all(item.islower() for item in dict.keys()))\n        \n",
        "num_ids": 55
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(dict) > 0:\n        lst = []\n        for key in dict:\n            if key.isalpha() == True:\n                lst.append(True)\n            else:\n                lst.append(False)\n        if False in lst:\n            return False\n        else:\n            return True\n    else:\n        return False",
        "num_ids": 84
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(dict) == 0:\n        return False\n    lower = True\n    upper = True\n    for key in dict:\n        if type(key) is str:\n            if key.islower():\n                lower = True\n            else:\n                lower = False\n            if key.isupper():\n                upper = True\n            else:\n                upper = False\n        else:\n            return False\n    return lower or upper\n",
        "num_ids": 100
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def is_prime(num):\n        if num < 2:\n            return False\n        elif num == 2:\n            return True\n        else:\n            for i in range(2, num):\n                if num % i == 0:\n                    return False\n        return True\n    \n    # write your code here\n    def count_primes(n):\n        counter = 0\n        result = []\n        for i in range(n):\n            if is_prime(i):\n                result.append(i)\n                counter += 1\n            if counter == n:\n                return result\n    return count_primes(n",
        "num_ids": 144
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # return [i for i in range(2, n) if is_prime(i)]\n    num = 2\n    prime_list = []\n    while len(prime_list) < n:\n        if is_prime(num):\n            prime_list.append(num)\n        num += 1\n    return prime_list\n",
        "num_ids": 77
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # initialize an empty list to store primes\n    primes = []\n    # initialize a boolean to keep track of whether the current number is prime\n    prime_is = True\n    # initialize an index for the loop\n    i = 2\n    # if n is less than 2, return an empty list\n    if n < 2:\n        return []\n    # otherwise\n    else:\n        # while the index is less than or equal to n, run the loop\n        while i <= n:\n            # if the boolean is true, set it to false\n            if prime_is:\n                prime_is = False\n                # add the index to the primes list\n                primes.append(i)\n            # if it is not prime, set the boolean to true\n            else:\n                prime_is = True\n            # increase the index by one\n            i += 1\n        # return the primes list\n        return primes\n    \ndef skip_add(n):\n    \"\"\"Implement a function that takes an integer n and returns n + n-2 + n-4 + n-6 +... + 0.\n    for example:\n    skip_add(1) => 1\n    skip_add(2) => 3\n    skip_add(10) => 30\n    skip_add(0) => 0\n    \"\"\"\n    # initialize an index variable\n    i = 0\n    # initialize an empty list\n    nums = []\n    # initialize a variable to track the sum of the list\n    total = 0\n    # while the index is less than n\n    while i < n:\n        # add the sum of the list to the total\n        total += i\n        # add the list value to the list\n        nums.append(i)\n        # increase the index by one\n        i += 2\n    # return the total\n    return total\n    \ndef array_diff(a, b):\n    \"\"\"Implement a function that takes two arrays and returns a new array that contains only the elements that are\n    in the first array, but not in the second.\n    for example:\n    array_diff([1,2],[1]) => [2]\n    array_diff([1,2,2],[1]) => [2,2]\n    array_diff([1,2,2],[2]) => [1]\n    array_diff([1,2,2],[1,2]) => []\n    array_diff([],[1,2]) => []\n    array_diff([1,2,2,2,2,3],[1,2,3]) => [2,2,2]\n    \"\"\"\n    # initialize an empty list to store the difference\n    diffs = []\n    # for each item in a\n    for item in a:\n        # if the item is in b, add it to the diffs list\n        if item not in b:\n            diffs.append(item)\n    # return the diffs list\n    return diffs\n    \ndef array_diff_alt(a, b):\n    \"\"\"Implement a function that takes two arrays and returns a new array that contains only the elements that are\n    in the first array, but not in the second.\n    for example:\n    array_diff([1,2],[1]) => [2]\n    array_diff([1,2,2],[1]) => [2,2]\n    array_diff([1,2,2],[2]) => [1]\n    array_diff([1,2,2],[1,2]) => []\n    array_diff([],[1,2]) => []\n    array_diff([1,2,2,2,2,3],[1,2,3]) => [2,2,2]\n    \"\"\"\n    # initialize an empty list to store the difference\n    diffs = []\n    # for each item in a\n    for item in a:\n        # if the item is not in b, add it to the diffs list\n        if item not in b:\n            diffs.append(item)\n    # return the diffs list\n    return diffs\n",
        "num_ids": 926
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # start with an empty array\n    prime_numbers = []\n    # initially set num to 2\n    num = 2\n    while len(prime_numbers) < n:\n        # go through each number in our range\n        for i in range(2, num):\n            # if the modulus of num and i is zero, then num is divisible by i\n            if num % i == 0:\n                # num will be the same as i next, so we can skip it\n                break\n            # otherwise, num is not divisible by i, so we can keep it\n            # and move onto the next num\n        else:\n            # if we didn't break the for loop, that means num is a prime number\n            # and can be added to the array of prime numbers\n            prime_numbers.append(num)\n        # increment num so it will be ready for the next iteration\n        num += 1\n    return prime_numbers\n",
        "num_ids": 214
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0:\n        return []\n    count = 2\n    prime = True\n    if n == 1:\n        return []\n    while count < n:\n        for num in range(2, count):\n            if count % num == 0:\n                prime = False\n                break\n            else:\n                prime = True\n        if prime == True:\n            prime_list.append(count)\n        count += 1\n    return prime_lis",
        "num_ids": 104
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    if n == 0:\n        return result\n    elif n == 1:\n        return result\n    else:\n        for number in range(2,n+1):\n            if number > 1:\n                for i in range(2,number):\n                    if number % i == 0:\n                        break\n                else:\n                    result.append(number)\n    return result\n    ",
        "num_ids": 93
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n >= 0, 'n must be positive'\n    primes = []\n    for i in range(2, n + 1):\n        isPrime = True\n        for j in range(2, int(sqrt(i)) + 1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n    return primes\n",
        "num_ids": 96
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # if n <= 1:\n    #     return []\n    # else:\n    #     result = [2]\n    #     i = 3\n    #     while len(result) < n:\n    #         if is_prime(i):\n    #             result.append(i)\n    #         i += 2\n    #     return result\n",
        "num_ids": 82
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return a*b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    product = a * b\n    \n    return product\n",
        "num_ids": 14
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a*b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    x = a // 10\n    y = a % 10\n    z = b // 10\n    w = b % 10\n    return x*w + y*z\n",
        "num_ids": 39
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    pass",
        "num_ids": 5
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a * b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # a and b are always valid\n    product = 0\n    if(a < 10 and b < 10):\n        product = a * b\n    else:\n        for i in range(len(str(a))):\n            for j in range(len(str(b))):\n                product += int(str(a)[i]) * int(str(b)[j])\n    return product\n",
        "num_ids": 91
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return a*b\n",
        "num_ids": 9
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return a * b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a*b\n",
        "num_ids": 7
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Vowels = ['A','E','I','O','U']\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    if len(s)%2 == 1:\n        for i in range(len(s)):\n            if s[i] in vowels:\n                if i % 2 == 0:\n                    count += 1\n    else:\n        for i in range(len(s)):\n            if s[i] in vowels:\n                if i % 2 == 1:\n                    count += 1\n    return count\n",
        "num_ids": 139
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len([i for i in s[1::2] if i.isupper()])\n",
        "num_ids": 23
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in VOWELS and s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return sum([s[i].isupper() for i in range(len(s)) if i % 2 == 0])\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    upper_count = 0\n    for i, letter in enumerate(s):\n        if i % 2 == 0 and letter in VOWELS:\n            upper_count += 1\n    return upper_count\n",
        "num_ids": 48
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Vowels are in even indices\n    upper_count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in VOWELS:\n            upper_count += 1\n    return upper_count\n    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\nassert count_upper('1a2b3c4d5e6f7g8h9') == 0\nassert count_upper('aBCdEf1a2b3c4d5e6f7g8h9') == 1\n",
        "num_ids": 156
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in \"AEIOU\" and (i % 2 == 0):\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum([1 for i in s[1::2] if i.upper() in VOWELS and i.isupper()])\n",
        "num_ids": 32
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # if len(s) < 2 or s == '':\n    #     return 0\n    # else:\n    #     return sum(1 for i in range(0, len(s)-2, 2) if s[i].isupper() and s[i+1] in 'aeiou')\n",
        "num_ids": 71
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    upper_count = 0\n    for i,c in enumerate(s):\n        if c.isupper() and i%2 == 0:\n            upper_count += 1\n    return upper_count\n    \n    \ndef is_palindrome(s):\n    \"\"\"\n    Given a string s, determine whether it is a palindrome.\n    \n    A palindrome is a string that reads the same backwards and forwards.\n    \n    For example:\n    is_palindrome('a') returns True\n    is_palindrome('ab') returns False\n    is_palindrome('abba') returns True\n    is_palindrome('abcba') returns True\n    is_palindrome('abcdcba') returns True\n    is_palindrome('abcdefghijk') returns False\n    is_palindrome('abcdefghijkklmnopqrstuvwxyz') returns False\n    is_palindrome('abcdefghijk\\nklmnopqrstuvwxyz') returns False\n    is_palindrome('ABCD\\n EFGHIJKLMNOPQRSTUVWXYZ') returns False\n    \"\"\"\n    \n    i = 0\n    j = len(s) - 1\n    while i < j:\n        while not s[i].isalpha() and i < j:\n            i += 1\n        while not s[j].isalpha() and i < j:\n            j -= 1\n        if s[i].lower()!= s[j].lower():\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef sum_squares(n):\n    \"\"\"\n    Given a positive integer n, find the sum of the squares of all the positive integers below n.\n    \n    For example, sum_squares(8) should return 4+9+16+25=56\n    \"\"\"\n    \n    total = 0\n    for i in range(n):\n        total += i**2\n    return total\n    \n    \ndef square_sum(n):\n    \"\"\"\n    Given a positive integer n, find the square of the sum of all the positive integers below n.\n    \n    For example:\n    square_sum(8) should return 28\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += i\n    return total**2\n    \n    \ndef count_vowels(s):\n    \"\"\"\n    Given a string s, return the number of vowels in the string.\n    \n    For example:\n    count_vowels('hello') returns 3\n    count_vowels('homework') returns 3\n    count_vowels('owow') returns 0\n    count_vowels('HELLO') returns 3\n    count_vowels('abcdefghi') returns 4\n    \"\"\"\n    count = 0\n    for c in s:\n        if c in 'aeiouAEIOU':\n            count += 1\n    return count\n    \n    \ndef is_prime(n):\n    \"\"\"\n    Given an integer n, find whether it is a prime number.\n    \n    A prime number is a number that is divisible only by 1 and itself.\n    \n    For example:\n    is_prime(7) returns True\n    is_prime(8) returns False\n    is_prime(15) returns False\n    is_prime(25) returns True\n    is_prime(15) returns False\n    is_prime(5) returns True\n    \"\"\"\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef is_square(n):\n    \"\"\"\n    Given a number n, find whether it is a square number.\n    \n    A square number is a number that has the form a^2, where a is an integer.\n    \n    For example:\n    is_square(3) returns False\n    is_square(4) returns True\n    is_square(25) returns False\n    is_square(25) returns True\n    \"\"\"\n    root = int(sqrt(n))\n    return root**2 == n\n    \n    \ndef is_fibonacci(n):\n    \"\"\"\n    Given a number n, find whether it is a Fibonacci number.\n    \n    A Fibonacci number is a number that is the sum of the previous two numbers.",
        "num_ids": 1026
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    print(int(value))\n",
        "num_ids": 9
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    int_val = int(value)\n    int_val = int(round(int_val))\n    return int_val\n",
        "num_ids": 31
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    value = float(value)\n    if value % 1 == 0.5:\n        value = round(value)\n    else:\n        value = round(value) - 0.5\n    return int(value)\n",
        "num_ids": 51
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    try:\n        return round(value)\n    except:\n        pass\n",
        "num_ids": 19
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # You may want to create a function with the following headers.\n    # You may find math.trunc() (the built-in Python function that\n    # rounds a number to integer) useful.\n    # def clint(value):\n",
        "num_ids": 55
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if type(value) == int:\n        return value\n    else:\n        try:\n            float(value)\n            return int(round(float(value)))\n        except:\n            raise Exception(\"Please enter a number\")\n",
        "num_ids": 54
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return int(value) if float(value) % 1 == 0 else int(float(value) + 1) if float(value) % 1 < 0.5 else int(float(value) - 1)\n",
        "num_ids": 48
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    value = float(value)\n    return int(round(value)) if value % 1 else int(value)\n",
        "num_ids": 27
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return int(value)\n",
        "num_ids": 8
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert type(n) == int and n > 0\n",
        "num_ids": 14
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [2] + make_a_pile(n-2)\n    else:\n        return [n] + make_a_pile(n-1)\n",
        "num_ids": 63
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pile = []\n    if n % 2 == 0:\n        for i in range(1, n + 1):\n            if i % 2!= 0:\n                pile.append(i)\n    else:\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                pile.append(i)\n    return pile\n",
        "num_ids": 87
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert isinstance(n, int) and n > 0\n    a = [n]\n    while True:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n + 1\n        a.append(n)\n        if n == 1:\n            break\n    return a\n",
        "num_ids": 76
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst = []\n    for i in range(n):\n        if n % 2 == 0:\n            lst.append(2 * i + 1)\n        else:\n            lst.append(2 * i)\n    return lst\n",
        "num_ids": 58
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return make_a_pile(n - 1) + [n + 1]\n    return make_a_pile(n - 1) + [n]\n",
        "num_ids": 61
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # print('n:', n)\n    # print('n % 2:', n % 2)\n    if n % 2 == 0:\n        l = [n for i in range(n)]\n    else:\n        l = [n for i in range(n)]\n        l.append(n + 1)\n    # print(l)\n    return l\n",
        "num_ids": 85
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # create a list to store the number of stones in each level\n    list_of_stones = []\n    # first level has n stones\n    list_of_stones.append(n)\n    # if n is odd, then the next level should have the next odd number\n    if n % 2 == 1:\n        next_level = n + 1\n    # if n is even, then the next level should have the next even number\n    if n % 2 == 0:\n        next_level = n + 2\n    # keep on creating the next level, until next_level becomes n+1\n    while next_level!= n+1:\n        list_of_stones.append(next_level)\n        # if next_level is odd, then the next level should have the next odd number\n        if next_level % 2 == 1:\n            next_level = next_level + 1\n        # if next_level is even, then the next level should have the next even number\n        if next_level % 2 == 0:\n            next_level = next_level + 2\n    # return the list_of_stones list\n    return list_of_stones\n",
        "num_ids": 264
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n % 2 == 1:\n        n_next = n + 1\n        stones = [n, n_next]\n    else:\n        n_next = n + 2\n        stones = [n, n_next]\n    for _ in range(n_next):\n        stones.append(stones[-2] + stones[-1])\n    return stones\n",
        "num_ids": 86
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return s.replace(' ', '').split(',')\n",
        "num_ids": 15
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    lst = s.split(', ')\n    return lst\n    \ndef words_string_two(s):\n    \"\"\"\n    Use the built-in split() function to split the string into words.\n    \n    For example:\n    words_string_two(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    \"\"\"\n    lst = s.split(' ')\n    return lst\n",
        "num_ids": 109
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return s.split(\" \")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    # loop through the string and create a list\n    # split the list on the comma\n    # return the list\n    \n    lst = []\n    for i in s.split():\n        lst.append(i)\n    return lst\n    \n    \ndef longest_word(s):\n    \"\"\"\n    Your task is to return the longest word in the string.\n    \n    If two words are the same length, return the word that occurs first in s.\n    \n    Note: all words will be made of lowercase characters.\n    \"\"\"\n    \n    # create a list of words\n    # return the longest word in the list\n    \n    words = s.split()\n    \n    longest = 0\n    \n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n    \n    return words[words.index(max(words, key=len))]\n    \n    \ndef one_away(s1, s2):\n    \"\"\"\n    You are given two strings s1 and s2 of equal length. \n    Your task is to determine if it is possible to make s2 from s1 by swapping\n    exactly one character in s1.\n    \n    Return true if it is possible to make s2 from s1, otherwise return false.\n    \n    For example:\n    one_away(\"poop\", \"opop\") == true\n    one_away(\"poop\", \"oops\") == false\n    one_away(\"poop\", \"xoox\") == false\n    \"\"\"\n    \n    # loop through s1 and see if there is a character in s1 that does not appear in s2\n    # if it does, add 1 to the counter\n    # if it does not, add 2 to the counter\n    # return true if the counter is 1, false if it is not\n    \n    count = 0\n    \n    for i in range(len(s1)):\n        if s1[i] not in s2:\n            count += 1\n    \n    return count == 1\n    \n    \ndef make_spoonerism(s1, s2):\n    \"\"\"\n    Your task is to create a spoonerism, which is a string that contains the letters\n    of another string, but in reverse order. For example:\n    make_spoonerism(\"My name is Simon\", \"Whack my name is?\") == \"nitsyn Simon?\"\n    \"\"\"\n    \n    # create a string of the letters in s2\n    # reverse the string\n    # loop through the s1 and add each letter of the reversed string to the front\n    # return the new string\n    \n    return s2[::-1].join(s1[i] for i in range(len(s1)-1, -1, -1))\n    \n    \ndef count_chars(s, c):\n    \"\"\"\n    You will be given a string s and a character c. Your task is to return a number \n    equal to the number of occurrences of c in the string.\n    \n    For example:\n    count_chars(\"aabbcc\", \"a\") == 3\n    count_chars(\"aabbcc\", \"z\") == 0\n    count_chars(\"aabbcc\", \"b\") == 1\n    count_chars(\"aabbcc\", \"v\") == 0\n    \"\"\"\n    \n    # create a counter variable\n    # loop through the string and see if the letter in s is equal to c\n    # if it is, increment the counter\n    # return the counter\n    \n    count = 0\n    \n    for i in s:\n        if i == c:\n            count += 1\n    \n    return count\n    \n    \ndef make_tags(tag, word):\n    \"\"\"\n    You are given a tag that is used for HTML-like tags:\n    tag = \"<name>text</name>\"\n    \n    You are also given a word that can contain HTML-like tags. \n    Your task is to return the same word, but with the tags changed to <name>text</name>.\n    \n    For example:\n    make_tags(\"i\", \"<h1>It's a header</h1>\") == \"<h1>It's a header</h1>\"\n    make_tags(\"i\", \"It's a header\") == \"<i>It's a header</i>\"\n    make_tags(\"cite\", \"It's a very long text that should be formatted into a citation\"",
        "num_ids": 1025
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a = s.split(',')\n    b = s.split(' ')\n    return a\n",
        "num_ids": 25
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return s.replace(\" \", \"\").split(\",\")\n",
        "num_ids": 15
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return s.replace(',','').split()\n",
        "num_ids": 14
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    arr = s.split(',')\n    return arr\n    \ndef extract_elements(lst, el_type):\n    \"\"\"\n    You will be given a list and a string of three types of characters: brackets\n    ([]) and curly brackets ({}). In the first string you will be given a list\n    of characters, brackets and curly brackets, separated by spaces. Your task\n    is to extract and return the list of elements enclosed within the brackets.\n    \n    For example:\n    extract_elements([\"a\", \"b\", \"c\"], \"[]\") == [\"a\", \"b\", \"c\"]\n    extract_elements([\"a\", \"b\", \"c\", \"d\"], \"[{}]\") == [\"a\", \"b\", \"c\", \"d\"]\n    \"\"\"\n    \n    arr = []\n    \n    #determine if element is a bracket\n    def is_bracket(e):\n        brackets = \"[]\"\n        if e in brackets:\n            return True\n        return False\n        \n    #extract element from string\n    def get_element(s):\n        \n        #check if element is a bracket\n        if is_bracket(s):\n            \n            #extract element and check if closed bracket\n            element = \"\"\n            bracket_num = 1\n            for c in s:\n                element += c\n                if c == \"{\":\n                    bracket_num += 1\n                if c == \"}\":\n                    bracket_num -= 1\n                    if bracket_num == 0:\n                        break\n            return element\n        else:\n            return s\n            \n    for e in lst:\n        #get element and append to list\n        arr.append(get_element(e))\n    \n    #return extracted elements\n    return arr\n    \n    ",
        "num_ids": 415
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return s.split()\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return s.replace(',','').split()\n    # words = s.replace(' ', ',').split(',')\n    # return words\n",
        "num_ids": 36
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    x = int(x)\n    y = int(y)\n    max_num = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            if max_num < i:\n                max_num = i\n    return max_num",
        "num_ids": 68
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return max(2, int(min(y, 2*x))) if (y >= x) else -1\n",
        "num_ids": 27
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if (x % 2!= 0) or (y % 2!= 0):\n        return -1\n    elif x > y:\n        return -1\n    else:\n        if y - x < 5:\n            return -1\n        else:\n            for i in range(y - x + 1):\n                if (x + i) % 2 == 0:\n                    return x + i\n            return -1\n",
        "num_ids": 98
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if y % 2 == 1:\n        return -1\n    if x == y:\n        return x\n    while x < y:\n        x += 2\n        if x >= y:\n            return -1\n    return x\n",
        "num_ids": 54
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if x % 2 == 0 and x < y:\n        for i in range(x, y):\n            if i % 2 == 0:\n                return i\n    else:\n        return -1\n",
        "num_ids": 47
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if x%2!= 0 or y%2!= 0:\n        return -1\n    else:\n        while x!= y:\n            if x > y:\n                x -= 1\n            elif x < y:\n                x += 1\n        return x\n    \n",
        "num_ids": 66
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Fill this in.\n    num = 0\n    if x % 2 == 1:\n        x += 1\n    for i in range(x, y + 1, 2):\n        if i > y:\n            return -1\n        num = i\n    return num\n",
        "num_ids": 63
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for num in range(x, y+1):\n        if (num % 2 == 0 and num > x and num < y):\n            return num\n    return -1\n",
        "num_ids": 41
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(x, y + 1):\n        if i % 2 == 0:\n            if i > y:\n                return -1\n            else:\n                return i\n",
        "num_ids": 43
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    while x % 2!= 0 or y % 2!= 0:\n        x += 1\n        y += 1\n    if y < x:\n        return -1\n    else:\n        if x < y:\n            return max(range(x, y, 2))\n        elif x == y:\n            return x\n",
        "num_ids": 76
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(int(round(sum(list(range(n, m + 1)))/len(list(range(n, m + 1)))))).replace(\"0b\", \"\")\n    \ndef diff21(n):\n    \"\"\"\n    Given a number n, return the number of 1's in the binary representation of n.\n    You must return the result modulo 10^9 + 7.\n    Example:\n    diff21(9) => 2\n    diff21(22) => 3\n    diff21(25) => 2\n    diff21(1041) => 6\n    \"\"\"\n    return sum([1 for i in bin(n)[2:]])\n",
        "num_ids": 168
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Your code here\n    return -1\n",
        "num_ids": 12
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return -1 if n > m else bin(int((m + n - 1) / 2 + 1))[2:]\n",
        "num_ids": 29
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < m:\n        return -1\n    else:\n        return \"0b{0:0b}\".format(int((n + m) / 2))\n",
        "num_ids": 41
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    if n > m:\n        return -1\n    else:\n        return bin(sum(range(n, m + 1))//(m-n + 1))[2:]\n",
        "num_ids": 45
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(int(round(sum(list(range(n,m+1))) / (m-n+1)))).replace(\"0b\", \"\")\n",
        "num_ids": 54
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(int(round((n + m + 1)/2)))[2:]\n        ",
        "num_ids": 38
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted([i for i in x if i%2]",
        "num_ids": 15
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(set([i for i in x if not any(i%2==j for j in range(2))])",
        "num_ids": 29
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    x.sort()\n    for i in range(len(x)):\n        if x[i] % 2!= 0:\n            x.remove(x[i])\n    return x\n",
        "num_ids": 46
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return sorted(set([x for x in x if len(str(x))%2==0]))\n",
        "num_ids": 28
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # given a list of positive integers, return a list of all elements that\n    # has no even digit\n    \n    # hint: return a list of elements\n    # hint: first create a list of elements, then remove all even digit\n    \n    return []\n",
        "num_ids": 60
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    return list(filter(lambda x: not any([int(i)%2==0 for i in str(x)]), sorted(x)))\n",
        "num_ids": 36
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert x, 'List is empty'\n    assert all(isinstance(i, int) and i > 0 for i in x), 'Given list should be of positive integers only'\n    return sorted([i for i in x if i % 2 == 1])\n",
        "num_ids": 59
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted([i for i in x if not i % 2])\n",
        "num_ids": 17
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # remove even numbers \n    # turn the list to string\n    # sort the string\n    # then convert it back to list\n    return sorted(list(set([int(i) for i in str(x) if int(i) % 2!= 0])))\n",
        "num_ids": 63
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted([i for i in x if not any(j in '02468' for j in str(i))])\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if arr:\n        try:\n            return [NAME[i] for i in sorted([int(i) for i in arr])[::-1]]\n        except:\n            pass\n    return []\n",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    arr = sorted(arr)\n    arr = arr[::-1]\n    # return [ONE_TO_NUM[i] for i in arr if 1 <= i <= 9]\n    return [NUM_TO_NAME[i] for i in arr]",
        "num_ids": 59
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr:\n        return arr\n    # remove the negative numbers\n    arr = list(filter(lambda x: x >= 0, arr))\n    # remove the numbers out of range\n    arr = list(filter(lambda x: 1 <= x <= 9, arr))\n    # sort the numbers\n    arr.sort()\n    # reverse the numbers\n    arr.reverse()\n    \n    result = []\n    for num in arr:\n        result.append(DIGIT_TO_NAME[num])\n    return result",
        "num_ids": 120
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    arr.sort()\n    arr.reverse()\n    return [num_to_name[str(i)] for i in arr]\n",
        "num_ids": 32
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    arr.sort()\n    arr.reverse()\n    ans = []\n    for i in arr:\n        if i == 0:\n            ans.append('Zero')\n        elif i == 1:\n            ans.append('One')\n        elif i == 2:\n            ans.append('Two')\n        elif i == 3:\n            ans.append('Three')\n        elif i == 4:\n            ans.append('Four')\n        elif i == 5:\n            ans.append('Five')\n        elif i == 6:\n            ans.append('Six')\n        elif i == 7:\n            ans.append('Seven')\n        elif i == 8:\n            ans.append('Eight')\n        elif i == 9:\n            ans.append('Nine')\n        else:\n            pass\n    return ans\n",
        "num_ids": 195
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # print(arr)\n    if len(arr) == 0:\n        return arr\n    n = 9\n    arr.sort()\n    rev_arr = arr[::-1]\n    ans = []\n    for i in rev_arr:\n        if i > 0 and i <= n:\n            ans.append(name_array[i-1])\n            \n    return ans\n",
        "num_ids": 90
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Create a dict for digits to their names\n    d = {\"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\", \"4\": \"Four\", \"5\": \"Five\", \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"Eight\", \"9\": \"Nine\"}\n    \n    # Sort the array\n    arr.sort()\n    \n    # Reverse the array\n    arr = arr[::-1]\n    \n    # Iterate through the array and replace each element with its corresponding name\n    output = []\n    for n in arr:\n        output.append(d.get(str(n)))\n    \n    return output\n    ",
        "num_ids": 153
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Your code here\n    arr.sort()\n    arr.reverse()\n    for i in range(len(arr)):\n        arr[i] = num_to_char(arr[i])\n    return arr",
        "num_ids": 51
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # TODO: implement f(n)\n    return [faktorial(i) if i % 2 == 0 else sum(list(range(1, i + 1))) for i in range(1, n + 1)]\n",
        "num_ids": 53
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n <= 0:\n        return []\n    l = [1]\n    for i in range(1,n):\n        if i%2 == 0:\n            l.append(i*l[i-1])\n        else:\n            l.append(sum(range(1,i+1)))\n    return l\n",
        "num_ids": 77
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    factorial = lambda n: n * f(n - 1) if n > 1 else 1\n    return [factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n    pass\n",
        "num_ids": 63
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        def g(n):\n            r = []\n            for i in range(1, n+1):\n                if i % 2 == 0:\n                    r.append(reduce(lambda x, y: x*y, range(1, i+1)))\n                else:\n                    r.append(sum(range(1, i+1)))\n            return r\n        return g(n)\n",
        "num_ids": 109
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(sum([j for j in range(1,i+1)]))\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(1, n+1):\n        result.append(i if i % 2 == 0 else sum(range(1, i+1)))\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    factorial_list = list(range(1, n + 1))\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial_list[i - 1] = sum(list(range(1, i + 1)))\n    return factorial_list\n",
        "num_ids": 71
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    ret = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            ret.append(i)\n        else:\n            tmp = 0\n            for j in range(1, i+1):\n                tmp += j\n            ret.append(tmp)\n    return ret\n",
        "num_ids": 75
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        l = []\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                l.append(factorial(i))\n            else:\n                l.append(sum_of_natural_numbers(i))\n        return l\n",
        "num_ids": 93
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def factorial(n):\n        \"\"\" Calculates n!\"\"\"\n        fact = 1\n        while n > 1:\n            fact *= n\n            n -= 1\n        return fact\n",
        "num_ids": 44
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Runtime: O(n^2)\n    # Spacetime: O(1)\n",
        "num_ids": 22
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    count_odd = 0\n",
        "num_ids": 13
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    odd = 0\n    even = 0\n",
        "num_ids": 11
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # let's count the number of odd and even palindromes\n    # palindrome is a word or a number that reads the same from front to back and back to front\n    # for example:\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99\n    # we can loop over the range from 1 to n and keep track of how many of each type of palindrome we have\n    # for every number in the range, we can check if it is a palindrome by removing its units until we reach 1\n    # e.g.\n    # 1: 1\n    # 2: 10 -> 1\n    # 3: 100 -> 10 -> 1\n    # if we reach 1, it means that it is a palindrome\n    # at the same time, we also check whether the number is even or odd\n",
        "num_ids": 283
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert n >= 1\n    def _is_palindrome(n):\n        n = str(n)\n        for i in range(len(n)//2):\n            if n[i]!= n[-(i+1)]:\n                return False\n        return True\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if _is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "num_ids": 132
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # check if n is palindrome\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 38
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def get_palindrome_count(n):\n        odd_count = 0\n        even_count = 0\n        # To check the palindromes within range of n, we will consider the range of n as: range(1, n + 1)\n        for i in range(1, n + 1):\n            # Convert the integer to a string.\n            i_str = str(i)\n            # If the length of string is odd, we can increment the count of odd palindromes.\n            if len(i_str) % 2!= 0:\n                odd_count += 1\n            # If the length of string is even, we can increment the count of even palindromes.\n            if len(i_str) % 2 == 0:\n                even_count += 1\n        return odd_count, even_count\n",
        "num_ids": 192
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # your code here\n",
        "num_ids": 7
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Get the list of digit sums\n    sum_list = list()\n    for num in arr:\n        sum_list.append(sum([int(digit) for digit in str(abs(num))]))\n    # Count the nums\n    nums = len([num for num in arr if sum_list.count(num) > 0])\n    return nums\n",
        "num_ids": 86
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def num_sum_digits(n):\n        return sum([int(i) for i in str(abs(n))])\n",
        "num_ids": 32
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i in arr:\n        if sum_digits(i) > 0:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return 0\n    else:\n        return count_nums(arr[1:]) + (sum(map(lambda x:int(x), list(str(abs(arr[0]))))) > 0)\n",
        "num_ids": 60
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def count(arr, sum=0):\n        if not arr:\n            return 0\n        if len(arr) == 1:\n            if arr[0] >= 0:\n                return 1\n            else:\n                return 0\n",
        "num_ids": 54
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum(1 for x in arr if x>0)\n",
        "num_ids": 16
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for num in arr:\n        if abs(num) in arr:\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return True\n    i = 1\n    while i < len(arr):\n        if arr[i] >= arr[i-1]:\n            i += 1\n            continue\n        else:\n            temp = arr[i]\n            while i>0 and temp<arr[i-1]:\n                arr[i] = arr[i-1]\n                i -= 1\n            arr[i] = temp\n            i += 1\n            if i == len(arr):\n                return True\n    return False\n",
        "num_ids": 126
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def is_non_dec(arr):\n        # non-decreasing order means arr[0] <= arr[1] >= arr[2] <= arr[3] >=...\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n    def move_one_ball_2(arr):\n        # Get the non-decreasing order of the array\n        nondec = sorted(arr)\n        # If array is already sorted return True\n        if nondec == arr:\n            return True\n        # If the array is empty return True\n        if not arr:\n            return True\n        # If the array has only one element, then right shift will be possible\n        if len(arr) == 1:\n            return True\n        # if the last element of the array is smaller than the first element\n        # of the array then return False\n        if arr[0] > arr[-1]:\n            return False\n        # Otherwise, keep shifting the last element of the array\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                arr[i],arr[i+1] = arr[i+1],arr[i]\n        # If the array is now in non-decreasing order, return True\n        if is_non_dec(arr):\n            return True\n        # Otherwise shift the last element of the array again\n        arr[-1],arr[0] = arr[0],arr[-1]\n        # If the array is now in non-decreasing order, return True\n        if is_non_dec(arr):\n            return True\n        # Otherwise return False\n        return False\n    return move_one_ball_2(arr)\n",
        "num_ids": 415
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return True\n",
        "num_ids": 5
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Please add your code here\n    n = len(arr)\n    if n==0:\n        return True\n    arr.sort()\n    i = 0\n    while(i<n):\n        if arr[i]>=arr[i+1]:\n            return False\n        i += 1\n    return True",
        "num_ids": 74
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return True\n    else:\n        n = len(arr)\n        for i in range(0, n-1):\n            for j in range(i+1, n):\n                if arr[j] < arr[i]:\n                    break\n                elif j == n-1 and arr[j] > arr[i]:\n                    break\n            else:\n                continue\n            break\n        return j == n-1\n",
        "num_ids": 108
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        # right shift the ball to the starting position\n        ball = arr[-1]\n        arr[-1] = arr[0]\n        arr[0] = ball\n        \n        # check if the array is sorted\n        for i in range(1,len(arr)):\n            if arr[i] < arr[i-1]:\n                return False\n        return True\n",
        "num_ids": 123
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if arr == []:\n        return True\n    arr.sort()\n    count = 0\n    while len(arr) > 0:\n        temp = arr.pop()\n        if len(arr) > 0 and arr[-1] <= temp:\n            count += 1\n    return count == 0\n",
        "num_ids": 70
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    if arr == []:\n        return True\n",
        "num_ids": 14
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    evens_indexes = []\n    for idx, val in enumerate(lst1):\n        if val % 2 == 0:\n            evens_indexes.append(idx)\n",
        "num_ids": 47
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \"\"\"\n    For each element in lst1, we can either:\n    1) Exclude that element from consideration in the second list,\n    2) Include that element in lst2, or\n    3) Keep that element in lst1.\n",
        "num_ids": 58
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # TODO:\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # TODO: implement the function exchange\n    # The list can be empty\n    lst1.sort()\n    lst2.sort()\n    if lst1[0]%2!=0 and lst2[0]%2==0:\n        return \"YES\"\n    elif lst1[0]%2==0 and lst2[0]%2!=0:\n        return \"YES\"\n    else:\n        return \"NO\"\n    # Note that if the two lists have different numbers of even numbers,\n    # the function should return \"NO\"\n    return\n",
        "num_ids": 139
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for el in lst1:\n        if el % 2!= 0:\n            return \"NO\"\n    for el in lst2:\n        if el % 2!= 0:\n            return \"NO\"\n    return \"YES\"",
        "num_ids": 56
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # TODO: IMPLEMENT THIS FUNCTION\n    return \"NO\"\n    ",
        "num_ids": 21
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # toDo: implement this function\n    return \"YES\"\n",
        "num_ids": 16
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # COMPLETE\n    for i in range(len(lst1)):\n        lst1[i] = lst1[i] % 2\n    for j in range(len(lst2)):\n        lst2[j] = lst2[j] % 2\n    if lst1 == lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 95
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # lst1.sort()\n    # lst2.sort()\n    if lst1!= lst2 and len(lst1) == len(lst2):\n        lst1.sort()\n        lst2.sort()\n        for i in range(len(lst1)):\n            if lst1[i] % 2!= 0 and lst2[i] % 2!= 0:\n                return \"NO\"\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 119
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your solution here\n    \n    \n    \n    \n    return \"YES\" #modify this line to return the result\n",
        "num_ids": 30
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # iterate over the string, split by space and put in dict\n    # return dict\n    \n    pass\n",
        "num_ids": 27
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    hist = {}\n",
        "num_ids": 6
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n    dict = {}\n    max_count = 0\n    for letter in test.split(' '):\n        letter = letter.lower()\n        if letter in dict:\n            dict[letter] += 1\n        else:\n            dict[letter] = 1\n        if dict[letter] > max_count:\n            max_count = dict[letter]\n    return dict\n",
        "num_ids": 91
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    dictionary = {}\n    test = test.split()\n    for i in test:\n        if i not in dictionary:\n            dictionary[i] = 1\n        else:\n            dictionary[i] += 1\n    return dictionary\n",
        "num_ids": 56
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    freq = {}\n    for char in test:\n        if freq.has_key(char):\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n",
        "num_ids": 53
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    dic = {}\n    for i in test:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    dic = dict(sorted(dic.items(), key=lambda item: item[1], reverse=True))\n    return dic\n",
        "num_ids": 78
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    hist = dict()\n    s = test.split()\n    for e in s:\n        if e in hist:\n            hist[e] += 1\n        else:\n            hist[e] = 1\n    return hist\n",
        "num_ids": 53
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    test_dict = {}\n    test = test.split(\" \")\n    for i in test:\n        if i in test_dict:\n            test_dict[i] += 1\n        else:\n            test_dict[i] = 1\n    return test_dict\n    \nif __name__ == \"__main__\":\n    #print(histogram(\"a b c\"))\n    #print(histogram(\"a b b a\"))\n    #print(histogram(\"a b c a b\"))\n    #print(histogram(\"b b b b a\"))\n    print(histogram(\"\")",
        "num_ids": 137
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    test = test.replace(' ','')\n    counter = {}\n    for letter in test:\n        if letter not in counter:\n            counter[letter] = 1\n        else:\n            counter[letter] += 1\n    return dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))\n",
        "num_ids": 77
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    histogram = {}\n    for word in test.split():\n        histogram[word] = histogram.get(word, 0) + 1\n    return histogram",
        "num_ids": 39
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n    result = []\n    for i in s:\n        if i not in c:\n            result.append(i)\n    result.reverse()\n    resultString = ''.join(result)\n    if resultString == s:\n        result = (resultString,True)\n    else:\n        result = (resultString,False)\n    return result\n",
        "num_ids": 88
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (s.replace(c,\"\"),s[::-1].replace(c,\"\")==s[::-1])\n",
        "num_ids": 30
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # result = \"\"\n    # for i in range(len(s)):\n    #     if s[i] not in c:\n    #         result += s[i]\n    # if result == result[::-1]:\n    #     return (result,True)\n    # return (result,False)\n    if set(s) & set(c):\n        return '', False\n    return s[::-1], True\n",
        "num_ids": 102
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = \"\"\n    check = False\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n        else:\n            check = True\n    if check:\n        result = reverse(result)\n        if result == s:\n            return result,True\n        else:\n            return result,False\n    else:\n        return s,False\n",
        "num_ids": 97
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    c_count = {}\n    for x in c:\n        c_count[x] = c_count.get(x,0)+1\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in c_count:\n            s[i] = \"\"\n    return (\"\".join(s),s == s[::-1])\nif __name__ == \"__main__\":\n    print(reverse_delete(\"abcde\",\"ae\"))\n    print(reverse_delete(\"abcdef\",\"b\"))\n    print(reverse_delete(\"abcdedcba\",\"ab\")",
        "num_ids": 143
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for char in c:\n        s = s.replace(char,'')\n    return s, s == s[::-1]\n",
        "num_ids": 32
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = list(s)\n    c = list(c)\n    for x in s:\n        if x in c:\n            s.remove(x)\n            c.remove(x)\n    return (''.join(s), True if s == s[::-1] else False)\n",
        "num_ids": 69
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not s:\n        return (\"\",True)\n    if not c:\n        return (s,True)\n    result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n        else:\n            continue\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)",
        "num_ids": 90
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # This solution is based on a solution proposed by\n    # https://leetcode.com/problems/reverse-string-ii/discuss/82114/Python-O(n)-time-O(1)-space\n    for char in c:\n        s = s.replace(char,'')\n    s = s[::-1]\n    return s,s == s[::-1]\n",
        "num_ids": 93
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    res = []\n    for c1 in s:\n        if c1 in c:\n            pass\n        else:\n            res.append(c1)\n    result = ''.join(res)\n    if result == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)\n",
        "num_ids": 79
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    odd_list = []\n    for item in lst:\n        count = 0\n        for digit in item:\n            if int(digit)%2 == 1:\n                count += 1\n        odd_list.append(\"the number of odd elements \"+ str(count)+ \"n the str\"+ str(count) +\" of the \" + str(lst.index(item)+1) + \"nput.\")\n    return odd_list\n",
        "num_ids": 101
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = []\n    for num in lst:\n        count.append(count_odd(num))\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    output = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2 == 1:\n                count += 1\n        output.append(count)\n    return [\"the number of odd elements \" + str(i) + \"n the str\" + str(i) + \"ng \" + str(i) + \" of the \" + str(i) + \"nput.\" for i in output]\n",
        "num_ids": 106
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    output_lst = []\n    for string in lst:\n        counter = 0\n        for char in string:\n            if int(char) % 2 == 1:\n                counter += 1\n        output_lst.append(f\"the number of odd elements {counter}n the str{len(string)}ng {string} of the {len(lst)}nput.\")\n    return output_lst\n",
        "num_ids": 95
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    output = []\n    for elem in lst:\n        num = 0\n        for char in elem:\n            if int(char) % 2!= 0:\n                num += 1\n        output.append(\"the number of odd elements \" + str(num) + \"n the str\" + str(len(elem)) + \"ng \" + str(len(elem)) + \" of the \" + str(len(elem)) + \"nput.\")\n    return output\n",
        "num_ids": 111
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    odd_counts = []\n    for num in lst:\n        n = len(num)\n        s = 0\n        for i in num:\n            s += int(i)%2\n        odd_counts.append(str(n) + \"n the str\" + str(n) + \" of the \" + str(n) + \"nput.\")\n        odd_counts.append(str(n) + \"n the str\" + str(n) + \" of the \" + str(n) + \"nput.\")\n    return odd_counts\n",
        "num_ids": 132
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    output = []\n    for elem in lst:\n        count = 0\n        for char in elem:\n            if char not in '1234567890':\n                pass\n            else:\n                count += 1\n        output.append(count)\n    return output\n",
        "num_ids": 64
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [f\"the number of odd elements {len([char for char in string if int(char)%2!= 0])}n the {string} of the {index}nput.\" for index,string in enumerate(lst)]\n",
        "num_ids": 56
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # for i in range(len(lst)):\n    #     string = lst[i]\n    #     string = list(string)\n    #     num_odd = 0\n    #     for n in string:\n    #         if int(n)%2 == 1:\n    #             num_odd += 1\n    #     lst[i] = num_odd\n    # return lst\n",
        "num_ids": 96
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # I got the idea from:\n    # https://leetcode.com/problems/minimum-size-subarray-sum/discuss/66855/C%2B%2BJavaPython-DP-Solution\n    # for the min sum, we have to track the minimum sum of prefix and suffix,\n    # therefore, we have 2 array, prefix and suffix\n    # the prefix is the sum of all elements before the current element, while\n    # the suffix is the sum of all elements after the current element\n    # if the prefix is less than or equal to the current element's sum,\n    # then this element is the minimum element in the sub array, and we\n    # can just return it. if it's greater than the current element's sum,\n    # then we need to update the prefix array and return it\n    # time complexity: O(n)\n    # space complexity: O(n)\n    prefix = nums\n    suffix = [0 for _ in range(len(nums))]\n    res = float('inf')\n    for i in range(len(nums)):\n        if prefix[i] <= 0:\n            prefix[i] = float('inf')\n        else:\n            prefix[i] += prefix[i-1]\n        res = min(res, prefix[i])\n        if suffix[i-1] <= 0:\n            suffix[i-1] = float('inf')\n        else:\n            suffix[i-1] += nums[i]\n        res = min(res, suffix[i-1])\n    return res\n",
        "num_ids": 363
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not nums:\n        return 0\n    n = len(nums)\n    current_sum = 0\n    left = 0\n    min_sum = float(\"inf\")\n    for right in range(n):\n        current_sum += nums[right]\n        while current_sum >= target:\n            min_sum = min(min_sum, current_sum)\n            current_sum -= nums[left]\n            left += 1\n    return min_sum\n",
        "num_ids": 110
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    total = 0\n    min_sum = float('inf')\n    min_idx = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if total < min_sum:\n            min_sum = total\n            min_idx = i\n    return min_sum\n",
        "num_ids": 76
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    start, end = 0, len(nums)-1\n    min_sum = sum(nums)\n    while start < end:\n        if sum(nums[start:end+1]) < min_sum:\n            min_sum = sum(nums[start:end+1])\n        start += 1\n    return min_sum",
        "num_ids": 79
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # The minimum subarray sum will always start at either start or end.\n    # The minimum subarray sum can also start at the middle, but it can end anywhere\n    # in the middle. We can use a binary search to find the smallest non-empty subarray\n    # sum and then iterate through the array using that as the start index.\n    # If we find a subarray sum that is less than 0, we can return the minimum of it\n    # or that of 0 (we can't use the subarray sum because it's negative).\n",
        "num_ids": 122
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    size = len(nums)\n    if size == 0:\n        return 0\n    res = 2 ** 31 - 1\n    left = 0\n    curSum = 0\n    for i in range(size):\n        curSum += nums[i]\n        while curSum >= sum(nums[left:i + 1]):\n            res = min(res, curSum - sum(nums[left:i + 1]))\n            left += 1\n            curSum -= nums[left - 1]\n    return res\n",
        "num_ids": 122
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    total_sum = sum(nums)\n    current_sum = 0\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        if total_sum - current_sum >= total_sum:\n            return total_sum - current_sum\n    return 0\n",
        "num_ids": 72
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    left = 0\n    summ = 0\n    minSum = sum(nums)\n    for i in range(len(nums)):\n        summ += nums[i]\n        while summ >= minSum:\n            minSum = min(minSum, summ - nums[left])\n            summ -= nums[left]\n            left += 1\n    return minSum\n    \n    \nif __name__ == '__main__':\n    print(minSubArraySum([1,2,3,4]))",
        "num_ids": 122
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s,e=0,0\n    n = len(nums)\n    currSum = 0\n    bestSum = float('inf')\n    while(e<n):\n        currSum += nums[e]\n        if currSum < 0:\n            s = e+1\n            currSum = 0\n        else:\n            bestSum = min(bestSum,currSum)\n        e += 1\n    return bestSum\n",
        "num_ids": 105
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum_cur = 0\n        for j in range(i, len(nums)):\n            sum_cur += nums[j]\n            min_sum = min(min_sum, sum_cur)\n    return min_sum\n",
        "num_ids": 94
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return math.ceil(sum(map(sum, grid)) / capacity)\n",
        "num_ids": 20
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def get_well(grid):\n        # determine the boundaries\n        row_max = 0\n        for row in grid:\n            if row.max() > row_max:\n                row_max = row.max()\n        col_max = 0\n        for col in grid.T:\n            if col.max() > col_max:\n                col_max = col.max()\n        # return an array with all the wells\n        wells = []\n        for r in range(row_max + 1):\n            for c in range(col_max + 1):\n                wells.append((r,c))\n        return wells\n    def dfs(well, grid, capacity, bucket, visited, depth, max_depth, visited_wells):\n        import copy\n        # return a depth for this depth\n        def calculate_depth(grid):\n            import numpy as np\n            # create a temporary grid\n            grid_tmp = copy.deepcopy(grid)\n            # find the boundaries\n            row_max = 0\n            for row in grid:\n                if row.max() > row_max:\n                    row_max = row.max()\n            col_max = 0\n            for col in grid.T:\n                if col.max() > col_max:\n                    col_max = col.max()\n            # return the depth of the well\n            return (col_max + row_max + 1)\n        if depth > max_depth:\n            max_depth = depth\n        # check if this depth is better than the max_depth\n        if depth > max_depth:\n            return max_depth\n        # if this well is not in visited_wells\n        if well not in visited_wells:\n            # add it to visited_wells\n            visited_wells.append(well)\n            # if we have to extract water from the well\n            if grid[well[0], well[1]] == 1:\n                # if we have enough capacity, we can fill the bucket\n                if bucket[0] + grid[well[0]][well[1]] <= capacity:\n                    # we can fill the bucket and add it to the bucket\n                    bucket[0] += grid[well[0]][well[1]]\n                    # add the bucket to visited\n                    visited.append(bucket)\n                    # if the bucket is full, return the max_depth\n                    if bucket[0] == capacity:\n                        return max_depth\n                    # return the max_depth\n                    return calculate_depth(grid)\n                # if we dont have enough capacity, we have to empty the bucket\n                else:\n                    # we need to empty the bucket\n                    # add the bucket to visited\n                    visited.append(bucket)\n                    # empty the bucket\n                    bucket[0] = 0\n                    # check if the bucket is empty\n                    if bucket[0] == 0:\n                        # if the bucket is empty, return the max_depth\n                        return max_depth\n                    # if the bucket is not empty, return the max_depth\n                    return calculate_depth(grid)\n            # if we dont have to extract water from the well\n            else:\n                # add the well to visited_wells\n                visited_wells.append(well)\n                # check if the bucket is empty\n                if bucket[0] == 0:\n                    # if the bucket is empty, return the max_depth\n                    return max_depth\n                # if the bucket is not empty, return the max_depth\n                return calculate_depth(grid)\n        # if this well is already in visited_wells\n        else:\n            return max_depth\n    def helper(grid, capacity, visited, bucket):\n        # initialize max_depth to 0\n        max_depth = 0\n        # initialize visited_wells to an empty list\n        visited_wells = []\n        # loop through all the wells\n        for well in get_well(grid):\n            # initialize depth to 0\n            depth = 0\n            # initialize visited to an empty list\n            visited = []\n            # initialize the bucket\n            bucket = [0]\n            # increment depth\n            depth += dfs(well, grid, capacity, bucket, visited, depth, max_depth, visited_wells)\n        # return the max_depth\n        return max_depth\n    # return the maximum depth\n    return helper(grid, capacity, [], [0])\n",
        "num_ids": 1008
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # 1) prepare grid\n    n_rows, n_cols = len(grid), len(grid[0])\n    \n    # 2) initialize dp table\n    dp = [[0 for _ in range(capacity + 1)] for _ in range(n_rows + 1)]\n    \n    # 3) iterate over grid\n    for row in range(1, n_rows + 1):\n        for col in range(1, n_cols + 1):\n            # 3.1) calculate max num of times for current well\n            num_times_to_fill = math.ceil(grid[row - 1][col - 1] / capacity)\n",
        "num_ids": 151
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def get_neighbours(cell):\n        i, j = cell\n        return [(i + x, j + y) for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]]\n",
        "num_ids": 59
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Time: O(m*n)\n    # Space: O(m*n)\n    def find_counts(x, y, row_count, col_count):\n        if not grid[x][y]:\n            return 0\n        sums = []\n        for i in range(x, x + row_count):\n            row = grid[i]\n            for j in range(y, y + col_count):\n                if row[j]:\n                    sums.append(row[j])\n        return len(sums)\n",
        "num_ids": 127
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    # print(rows, cols)\n    for row in range(rows):\n        for col in range(cols):\n            grid[row][col] -= math.ceil(grid[row][col] / capacity) * capacity\n    return sum(sum(grid[i]) for i in range(rows))\n",
        "num_ids": 90
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    m, n = len(grid), len(grid[0])\n    visited = [[False for _ in range(n)] for _ in range(m)]\n    queue = []\n    count = 0\n",
        "num_ids": 48
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    n_rows, n_cols = len(grid), len(grid[0])\n    # Initialize a dictionary to store the sum of water in the buckets for each unit of capacity\n    # The dict will have a key of the capacity and the value will be the sum of water in buckets\n    # for that capacity.\n    # Note: The sum of water in buckets for a particular capacity will be the sum of all the buckets\n    # with the same capacity. This is because we need to use the minimum number of buckets.\n    # For example, if there are two buckets with capacity 4 and two buckets with capacity 5, we\n    # would need 5 buckets for 5 water, whereas we would need 2 buckets for 4 water.\n    dict_sum = {i:0 for i in range(1, capacity + 1)}\n    # Initialize the variable that will store the minimum number of buckets\n    min_buckets = math.inf\n    # Initialize the variable that will store the minimum sum of buckets\n    # used to store the minimum number of buckets\n    min_sum_buckets = math.inf\n    # Traverse through the grid.\n    for row in range(n_rows):\n        for col in range(n_cols):\n            # Check if the cell is a well\n            if grid[row][col] == 1:\n                # If it is, then traverse through the dictionary and update it\n                for cap, sum_cap in dict_sum.items():\n                    dict_sum[cap] += cap\n                    # If the sum of buckets for a particular capacity is less than the minimum\n                    # sum of buckets, then update the minimum sum of buckets to the new minimum\n                    # sum of buckets.\n                    if sum_cap < min_sum_buckets:\n                        min_sum_buckets = sum_cap\n                # Reset the value of the sum of buckets for that capacity to 0\n                dict_sum = {i:0 for i in range(1, capacity + 1)}\n            # If the cell is not a well, then traverse through the dictionary and update it\n            else:\n                for cap, sum_cap in dict_sum.items():\n                    dict_sum[cap] += 1\n                    # If the sum of buckets for a particular capacity is less than the minimum\n                    # sum of buckets, then update the minimum sum of buckets to the new minimum\n                    # sum of buckets.\n                    if sum_cap < min_sum_buckets:\n                        min_sum_buckets = sum_cap\n                # Reset the value of the sum of buckets for that capacity to 0\n                dict_sum = {i:0 for i in range(1, capacity + 1)}\n        # Reset the minimum sum of buckets\n        min_sum_buckets = math.inf\n    return min_sum_buckets\n",
        "num_ids": 626
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    r, c = len(grid), len(grid[0])\n    dp = [[0 for j in range(c)] for i in range(r)]\n    dp[0][0] = grid[0][0]\n    for j in range(1, c):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n",
        "num_ids": 88
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    row_num = len(grid)\n    col_num = len(grid[0])\n    count = 0\n    for i in range(row_num):\n        left = 0\n        right = col_num\n        for j in range(col_num):\n            if grid[i][j] == 1:\n                left = j + 1\n                break\n        for j in range(col_num - 1, -1, -1):\n            if grid[i][j] == 1:\n                right = j\n                break\n        curr_sum = 0\n        for j in range(left, right):\n            curr_sum += grid[i][j]\n        while curr_sum > capacity:\n            for j in range(left, right):\n                if curr_sum - grid[i][j] >= 0:\n                    curr_sum -= grid[i][j]\n                    grid[i][j] = 0\n                else:\n                    grid[i][j] -= curr_sum\n                    count += 1\n                    break\n    return count\n",
        "num_ids": 245
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def _number_of_ones(num):\n        return str(bin(num)).count('1')\n",
        "num_ids": 26
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n    return sorted(arr, key= lambda x: (bin(x)[2:].count('1'), x))\n",
        "num_ids": 33
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Your code here\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    arr.sort(key=lambda x: (bin(x)[2:].count('1'), x))\n    return arr\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def count_ones(num):\n        return str(bin(num)).count('1')\n",
        "num_ids": 23
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def sort_binary_arr(x):\n        return int(x, 2)\n    \n    return sorted(arr, key=sort_binary_arr)\n",
        "num_ids": 38
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    n = len(arr)\n    res = []\n",
        "num_ids": 14
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 48
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # get length of longest 1s\n    l1 = max(x.count('1') for x in bin(max(arr))[2:])\n",
        "num_ids": 36
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # I'll start by creating a function that takes a string and a length\n    # and returns a list of words in the string that have exactly n consonants\n    # that appear in the string in the order they appear in the string.\n    # When creating the list of words, I will also need to account for case sensitivity.\n    # The first word in the list should be the first word that has n consonants.\n    # The second word should be the first word in the string that has fewer consonants\n    # than the first word.\n    # The third word should be the first word in the string that has fewer consonants\n    # than the second word, and so on.\n    # If there is no such word in the string, the function should return an empty list.\n    \n    # Here are some useful variables:\n    # VOWELS is a tuple of the letters in the alphabet that are vowels.\n    # CONSONANTS is a tuple of the letters in the alphabet that are consonants.\n    \n    # TODO: Your code here!\n    # Define the function here!\n    def cons_count(word):\n        # This function counts the number of consonants in a word.\n        # It takes a word as an argument and returns the number of consonants in the word.\n        # It counts consonants in both upper and lower case letters.\n        # It ignores spaces and punctuation.\n        # It ignores words that are less than three letters long.\n        # It ignores words that have letters not in the alphabet.\n        # Hint: use the isalpha() function from the string class.\n        # Hint: remember to consider case sensitivity.\n        count = 0\n        for letter in word:\n            if letter.isalpha():\n                if letter.upper() in VOWELS:\n                    return 0\n                elif letter.upper() in CONSONANTS:\n                    count += 1\n        return count\n        \n    # Use the cons_count function to create a list of words.\n    # Use the isalpha() function to confirm that each word has valid characters.\n    # Use the len() function to return the length of each word in the list.\n    # Use the min() function to return the shortest length word in the list.\n    # Use the index() function to return the index of the shortest length word in the list.\n    # Use the pop() function to return the word at the index of the shortest length word in the list.\n    # Use the cons_count function to return the number of consonants in each word.\n    # Use the cons_count function to return the number of consonants in the shortest length word.\n    # Use the min() function to return the number of consonants in the shortest length word.\n    words = []\n    for word in s.split():\n        if word.isalpha():\n            if len(word) >= 3 and cons_count(word) == n:\n                words.append(word)\n    return words\n",
        "num_ids": 665
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    words = s.split()\n    lst = []\n    for word in words:\n        if word.count('.') < 1 and word.count('!') < 1:\n            if len(word) > n:\n                lst.append(word)\n    return lst\n",
        "num_ids": 67
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def list_of_vowels(s):\n        vowels = []\n        for i in s:\n            if i in \"aeiou\":\n                vowels.append(i)\n        return vowels\n",
        "num_ids": 53
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    word_list = []\n    word_list = s.split()\n    print(word_list)\n    \n    \n",
        "num_ids": 30
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    words = s.split(' ')\n    ans = []\n    for word in words:\n        if len(word) > n:\n            pass\n        else:\n            c = 0\n            for i in word:\n                if i not in ('a', 'e', 'i', 'o', 'u'):\n                    c += 1\n            if c == n:\n                ans.append(word)\n    return ans\n    \nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))",
        "num_ids": 183
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    my_words = []\n    words = s.split()\n    for word in words:\n        if len(word) >= n:\n            count = 0\n            for letter in word:\n                if letter.lower() in VOWELS:\n                    count += 1\n            if count == n:\n                my_words.append(word)\n    return my_words\n",
        "num_ids": 85
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # I'm not sure if it's worth the effort to do this with regex, but here it is anyway.\n    word_list = s.split()\n    result_list = []\n    for w in word_list:\n        if len(w) > n or len(w) < n:\n            continue\n        if len([c for c in w if c in 'aeiou']) == n:\n            result_list.append(w)\n    return result_list",
        "num_ids": 109
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # the input string is empty\n    if len(s) == 0:\n        return []\n    # the input string contains only one word\n    if len(s.split(\" \")) == 1:\n        return [s] if is_consonant(s, n) else []\n    # the input string contains more than one word\n    words = s.split(\" \")\n    output = []\n    for word in words:\n        if is_consonant(word, n):\n            output.append(word)\n    return output\n",
        "num_ids": 124
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # result = []\n    # count = 0\n    # for i in s:\n    #     if i == \" \":\n    #         count = 0\n    #     elif count == n:\n    #         result.append(i)\n    #     else:\n    #         count += 1\n    # return result\n    return [i for i in s.split() if len([j for j in i if j not in \"aeiou\"]) == n]\n",
        "num_ids": 109
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [s[x] for x in range(len(s)) if check_consonants(s[x]) == n]\n",
        "num_ids": 32
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(len(word)):\n        if word[i].lower() == 'a' or word[i].lower() == 'e' or word[i].lower() == 'i' or word[i].lower() == 'o' or word[i].lower() == 'u':\n            return word[i]\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'i':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'o':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'a':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'e':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'o':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'a':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'e':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'o':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'a':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'e':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'o':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'a':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'e':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'o':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'a':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'e':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'o':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'a':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'e':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and word[i+1].lower() == 'o':\n            return 'u'\n        elif word[i-1].lower() == 'q' and word[i].lower() == 'u' and wor",
        "num_ids": 1025
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    start = 0\n    vowel = \"\"\n    while len(word) > start:\n        if word[start] in \"aeiou\":\n            vowel = word[start]\n            break\n        start += 1\n    return vowel\n",
        "num_ids": 58
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(len(word) - 1):\n        if word[i] not in VOWELS:\n            continue\n        if word[i] in VOWELS and word[i + 1] not in VOWELS:\n            return word[i]\n",
        "num_ids": 62
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(word) < 2:\n        return ''\n    for i in range(len(word)-1,-1,-1):\n        if word[i] not in 'aeiou':\n            return word[i+1:]\n    return ''\n",
        "num_ids": 59
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    closest = \"\"\n    # code goes here\n    for i in range(len(word)):\n        if word[i] in \"aeiouAEIOU\":\n            closest = word[i]\n            break\n        elif i+1 < len(word) and word[i+1] not in \"aeiouAEIOU\":\n            closest = word[i]\n            break\n    return closest\n",
        "num_ids": 101
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    return closest_vowel(word, vowels)\n",
        "num_ids": 36
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i, c in enumerate(word):\n        if c in \"aeiou\":\n            try:\n                if (word[i+2] not in \"aeiou\" and word[i+1] not in \"aeiou\"):\n                    return word[i]\n            except IndexError:\n                return word[i]\n    return \"\"\n",
        "num_ids": 83
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowels = set(\"aeiou\")\n    \n    for i in range(1, len(word)):\n        if word[i] in vowels and word[i - 1] not in vowels:\n            return word[i]\n            \n    return ''\n",
        "num_ids": 64
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Check if all parens are balanced.\n    for paren in lst:\n        if paren.count('(')!= paren.count(')'):\n            return 'No'\n    # Sort lst, check if every string is a concatenation of the other.\n    lst.sort()\n    for i in range(1, len(lst)):\n        if lst[0] + lst[i] not in lst:\n            return 'No'\n    return 'Yes'\n",
        "num_ids": 119
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #\n    # lst = ['()(', ')']\n    # lst = ['()', ')']\n    # lst = ['(', ')']\n    # lst = ['()', ')']\n    # lst = ['()', ')']\n    # lst = ['()', ')']\n    # lst = ['(()', ')']\n    # lst = ['(()', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', ')']\n    # lst = ['(', '",
        "num_ids": 1024
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return 'Yes'\n    if lst[0] == ')':\n        return 'No'\n    elif lst[0] == '(':\n        return match_parens(lst[1:])\n    else:\n        return 'No'\n",
        "num_ids": 72
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst_len = len(lst)\n    \n    if lst_len == 1:\n        return 'Yes' if lst[0] == ')' else 'No'\n",
        "num_ids": 44
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ''\n",
        "num_ids": 5
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i] == lst[j]:\n                print('Yes')\n                return\n    print('No')\n",
        "num_ids": 56
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Edge Cases:\n    if lst == []:\n        return 'Yes'\n    # Get the parentheses:\n    for i in range(len(lst)):\n        if lst[i] == ')' or lst[i] == '(':\n            lst = lst[:i] + lst[i+1:]\n            break\n    if len(lst) > 0:\n        return match_parens(lst)\n    return 'Yes'\n",
        "num_ids": 111
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    open_par, close_par = 0, 0\n    for e in lst:\n        if e == '(':\n            open_par += 1\n        elif e == ')':\n            close_par += 1\n        if close_par > open_par:\n            return 'No'\n    return 'Yes'\n",
        "num_ids": 75
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Time complexity: O(n)\n    # Space complexity: O(n)\n    parentheses = ''.join(lst)\n    if len(parentheses) == 1:\n        return 'Yes'\n    stack = []\n    for c in parentheses:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            elif stack[-1] == '(':\n                stack.pop()\n",
        "num_ids": 115
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert len(lst) == 2\n    return 'Yes' if lst[0].count('(') == lst[1].count(')') else 'No'\n",
        "num_ids": 41
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    stack = []\n    result = []\n",
        "num_ids": 11
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(arr)[-k:]\n",
        "num_ids": 11
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not arr or k == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def selectionSort(arr):\n        for i in range(len(arr)):\n            min_idx = i\n            for j in range(i+1, len(arr)):\n                if arr[j] < arr[min_idx]:\n                    min_idx = j\n            arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        return arr\n",
        "num_ids": 97
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    odds = []\n    evens = []\n    sum = 0\n    for i in range(len(lst)):\n        if i%2 == 0:\n            evens.append(lst[i])\n        else:\n            odds.append(lst[i])\n    for i in range(len(odds)):\n        sum += odds[i]\n    return sum\n",
        "num_ids": 93
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    total = 0\n    for i in range(0, len(lst)):\n        if i % 2 == 0:\n            total += lst[i]\n    return total\n",
        "num_ids": 43
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum([num for num in lst if num % 2 == 0 and lst.index(num) % 2!= 0])\n",
        "num_ids": 32
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    total = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2!= 0:\n            total += lst[i]\n    return tota",
        "num_ids": 55
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if type(lst) is list:\n        return sum([i for i in lst if i%2==1 and lst.index(i)%2==0])\n    else:\n        return \"Please enter list\"\n",
        "num_ids": 54
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    odd_count = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 1:\n            odd_count += lst[i]\n    return odd_count\n",
        "num_ids": 57
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    i = 0\n    j = 1\n    k = 0\n    odd_sum = 0\n    \n    while (i < len(lst)) and (j < len(lst)):\n        \n        if lst[i] % 2!= 0:\n            odd_sum = odd_sum + lst[j]\n            j = j + 2\n        else:\n            i = i + 2\n    return odd_sum\n",
        "num_ids": 103
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1])\n",
        "num_ids": 38
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return 0\n    even = [x for x in lst if x % 2 == 0]\n    return sum([y for y in even if y % 2!= 0])",
        "num_ids": 51
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    i = 0\n    sum = 0\n    if(lst == []):\n        return 0\n    while(i<len(lst)):\n        if((i%2) == 0):\n            sum = sum + lst[i]\n        i += 1\n    return sum\n",
        "num_ids": 69
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    arr = arr[0:k]\n    return sum(int(i) for i in arr)\n",
        "num_ids": 25
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(k):\n        arr[i] = str(arr[i])\n    arr = sorted(arr, key=len, reverse=True)\n    for i in range(k):\n        arr[i] = arr[i][0:2]\n    arr = sorted(arr, key=int, reverse=True)\n    return int(arr[0]) + int(arr[1])\n",
        "num_ids": 95
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    arr.sort(reverse=True)\n    max_sum = 0\n    for i in range(k):\n        if arr[i] < 100:\n            max_sum += arr[i]\n        elif arr[i] >= 100 and arr[i] < 1000:\n            max_sum += arr[i]\n    return max_sum\n",
        "num_ids": 81
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    i = 0\n    while i < len(arr) and k > 0:\n        if arr[i] < 100:\n            k -= 1\n        i += 1\n    return sum(arr[:i])\n",
        "num_ids": 50
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Get the last two digits of each element\n    # Return the sum of those two digits\n    # Example: 111 = 1 + 1 + 1\n    #            21 = 2 + 1\n    #           3 = 3\n    #           4000 = 4 + 0 + 0\n    #           5 = 5\n    #           6 = 6\n    #           7 = 7\n    #           8 = 8\n    #           9 = 9\n    # Answer is the sum of those two digits\n    return sum([int(i[-2:] or 0) for i in arr[:k]])\n",
        "num_ids": 131
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(arr) < k:\n        return sum(arr)\n",
        "num_ids": 18
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not arr or k > len(arr):\n        return 0\n    arr = [str(x) for x in arr]\n    arr = arr[:k]\n    return int(''.join(arr))\n",
        "num_ids": 50
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #if n == 1: return [1]\n    result = []\n    collatz = collatz_list(n)\n    for element in collatz:\n        if element % 2 == 1:\n            result.append(element)\n    return sorted(result)\n",
        "num_ids": 62
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    collatz_seq = [n]\n    while collatz_seq[-1]!= 1:\n        if collatz_seq[-1] % 2 == 0:\n            collatz_seq.append(int(collatz_seq[-1] / 2))\n        else:\n            collatz_seq.append(3 * collatz_seq[-1] + 1)\n    return collatz_seq\n",
        "num_ids": 97
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [odd for odd in collatz(n) if odd % 2]\n",
        "num_ids": 19
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    collatz = []\n    while n!= 1:\n        collatz.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz.append(1)\n    return collatz\n",
        "num_ids": 67
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    collatz_list = []\n    while True:\n        if collatz(n) == 1:\n            collatz_list.append(n)\n            return collatz_list\n        elif collatz(n) % 2 == 1:\n            collatz_list.append(n)\n        n = collatz(n)\n",
        "num_ids": 77
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst = []\n    lst.append(n)\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        lst.append(int(n))\n    return sorted(lst)\n",
        "num_ids": 72
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    seq = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n            seq.append(n)\n        else:\n            n = 3*n + 1\n            seq.append(n)\n    return sorted(seq)\n",
        "num_ids": 67
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # print(\"get_odd_collatz(%d)\" % n)\n    collatz_list = []\n    while n!= 1:\n        collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_list.append(1)\n    # print(\"[1, 5]\")\n    return sorted(collatz_list)\n",
        "num_ids": 107
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not date: return False\n    try:\n        [month,day,year] = date.split('-')\n    except:\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month<1 or month>12: return False\n    if month==2:\n        if day<1 or day>29: return False\n    elif month in [1,3,5,7,8,10,12]:\n        if day<1 or day>31: return False\n    elif month in [4,6,9,11]:\n        if day<1 or day>30: return False\n    else:\n        return False\n    return True\n",
        "num_ids": 168
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Split the date to the month, day and year\n    date_splitted = date.split('-')\n    \n    # Check if the month is in the right range\n    if int(date_splitted[0]) > 12 or int(date_splitted[0]) < 1:\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(date) == 0:\n        return False\n    date_list = date.split('-')\n    if int(date_list[0]) in [1,3,5,7,8,10,12] and int(date_list[1]) in range(1,32):\n        if int(date_list[2]) in range(1900, 2100):\n            return True\n    elif int(date_list[0]) in [4,6,9,11] and int(date_list[1]) in range(1,31):\n        if int(date_list[2]) in range(1900, 2100):\n            return True\n    elif int(date_list[0]) == 2 and int(date_list[1]) in range(1,29):\n        if int(date_list[2]) in range(1900, 2100):\n            return True\n    return False\n",
        "num_ids": 208
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # your code here\n    # return True or False\n    return False\n",
        "num_ids": 18
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    try:\n        d = date.split('-')\n        m = int(d[0])\n        d = int(d[1])\n        y = int(d[2])\n    except Exception as e:\n        return False\n    if m < 1 or m > 12:\n        return False\n    if m == 2:\n        if d < 1 or d > 28:\n            return False\n    if m == 4 or m == 6 or m == 9 or m == 11:\n        if d < 1 or d > 30:\n            return False\n    if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12:\n        if d < 1 or d > 31:\n            return False\n    return True\n",
        "num_ids": 177
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    date_split = date.split('-')\n    if len(date_split)!= 3:\n        return False\n    try:\n        month = int(date_split[0])\n        day = int(date_split[1])\n        year = int(date_split[2])\n    except:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if month == 2 and day > 28:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month not in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 30:\n            return False\n    elif month not in [4, 6, 9, 11]:\n        if day < 1 or day > 29:\n            return False\n    elif month!= 2 or day > 28:\n        return False\n    return True\n",
        "num_ids": 210
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    import re\n    date_regex = re.compile(r'^(0?[1-9]|1[0-2])\\-(0?[1-9]|[12][0-9]|3[01])\\-(19|20)\\d\\d$')\n    if re.search(date_regex, date):\n        month_val, day_val, year_val = date.split('-')\n        if int(month_val) > 12:\n            return False\n        if int(day_val) > 31:\n            if int(month_val) == 1 or int(month_val) == 3 or int(month_val) == 5 or int(month_val) == 7 or int(month_val) == 8 or int(month_val) == 10 or int(month_val) == 12:\n                if int(day_val) > 30:\n                    return False\n            if int(month_val) == 4 or int(month_val) == 6 or int(month_val) == 9 or int(month_val) == 11:\n                if int(day_val) > 30:\n                    return False\n            if int(month_val) == 2:\n                if int(day_val) > 29:\n                    return False\n        if int(year_val) > 2019:\n            return False\n    else:\n        return False\n    return True\n",
        "num_ids": 323
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    #check if date is valid\n    try:\n        month,day,year = map(int,date.split('-'))\n    except:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    import re\n    pattern = r'(0[1-9]|[1-2][0-9]|3[0-1])-([0-2][0-9]|[3][0-9]|4[0-1])-([0-9]{4}|[0-9]{2})'\n    result = re.search(pattern, date)\n    if result:\n        month = int(result.group(1))\n        day = int(result.group(2))\n        year = int(result.group(3))\n        if month == 2:\n            if day == 29 and year % 4!= 0:\n                return False\n            elif day == 30 and year % 4 == 0:\n                return False\n            else:\n                return True\n        elif (month == 4 or month == 6 or month == 9 or month == 11) and day > 30:\n            return False\n        elif (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) and day > 31:\n            return False\n        elif (month == 4 or month == 6 or month == 9 or month == 11) and day > 30:\n            return False\n        elif month < 1 or month > 12:\n            return False\n        else:\n            return True\n    return False\n",
        "num_ids": 313
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    date_split = date.split('-')\n    \n    try:\n        int(date_split[0])\n        int(date_split[1])\n        int(date_split[2])\n    except:\n        return False\n    \n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n",
        "num_ids": 92
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return list(filter(lambda a: a!= \" \", txt.split()))\n",
        "num_ids": 22
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # if no whitespaces, split on comma\n    # ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    # if commas, split on whitespace\n    # count characters in odd order\n    # split into list\n    # for each item, call string method'split()'\n    # return sum of list\n    if ',' not in txt and'' not in txt:\n        return txt.count(chr(ord(txt[0]) + 2))\n    elif ',' not in txt:\n        return txt.count(txt.split(' ')[0])\n    elif'' not in txt:\n        return txt.split(',')[0].count(chr(ord(txt.split(',')[0][0]) + 2))\n    else:\n        return txt.split()[0].count(chr(ord(txt.split()[0][0]) + 2))\n",
        "num_ids": 223
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n    \n    \n",
        "num_ids": 8
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if \",\" in txt:\n        return txt.split(\",\")\n    elif \" \" in txt:\n        return txt.split(\" \")\n    else:\n        return txt.split()\n",
        "num_ids": 52
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # return txt.split()\n    # return txt.split(' ')\n    # return txt.split(' ')[0].split(',')\n    # return len([char for char in txt if char.islower() and ord(char) % 2])\n    # return len([char for char in txt if char.islower()])\n    # return len([char for char in txt if char.islower() and ord(char) % 2])\n    # return len([char for char in txt if char.islower()])\n    # return len([char for char in txt if ord(char) % 2])\n    # return len([char for char in txt if char.islower()])\n    # return len([char for char in txt if char.islower()])\n    # return len([char for char in txt if char.islower()])\n    # return len([char for char in txt if ord(char) % 2])\n    # return len([char for char in txt if char.islower()])\n    # return len([char for char in txt if char.islower()])\n    # return len([char for char in txt if char.islower()])\n    # return len([char for char in txt if char.islower()])\n    # return len([char for char in txt if char.islower()])\n    # return len([char for char in txt if char.islower()])\n    return len([char for char in txt if char.islower()])\n",
        "num_ids": 357
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(lst) == 1 or len(lst) == 0:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n",
        "num_ids": 67
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Is list sorted\n    # Check if sorted\n    # Can have multiple duplicates\n",
        "num_ids": 21
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(set(lst))!= len(lst):\n        return False\n    elif len(lst) == 1:\n        return True\n    elif lst == sorted(lst):\n        return True\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n    # pass\n",
        "num_ids": 63
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # I'm a fool. I'm too lazy to comment this shit\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n",
        "num_ids": 48
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return lst == sorted(lst)\n",
        "num_ids": 12
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Your Code Here\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    if len(lst) == 2:\n        return True\n    return is_sorted(lst[1:])\n",
        "num_ids": 69
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for x in range(0, len(lst)-1):\n        if lst[x] > lst[x+1]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(set(lst)) == len(lst):\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst.sort()\n    return lst == lst[::-1]\n",
        "num_ids": 21
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # approach: find common starting point of intervals\n    # memory: O(1)\n    # runtime: O(1)\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 >= end2 or start2 >= end1:\n        return \"NO\"\n    else:\n        start = max(start1, start2)\n        end = min(end1, end2)\n        # print(start, end)\n        if (end - start) == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n",
        "num_ids": 135
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # write your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    if (interval1[1] < interval2[0] or interval2[1] < interval1[0]):\n        return \"NO\"\n    else:\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n        if (intersection_end - intersection_start) == 0:\n            return \"NO\"\n        for i in range(2, (intersection_end - intersection_start) + 1):\n            if (intersection_end - intersection_start) % i == 0:\n                return \"NO\"\n        return \"YES\"\n",
        "num_ids": 160
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    start, end = interval1\n    start2, end2 = interval2\n    if start > end2:\n        return \"NO\"\n    if end < start2:\n        return \"NO\"\n    if start2 > end:\n        return \"NO\"\n    if end2 < start:\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 81
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    start, end = interval1\n    s2, e2 = interval2\n    # if they don't intersect, return \"NO\"\n    if end < s2 or s2 > start:\n        return \"NO\"\n    if e2 < start or end > e2:\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 76
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    start, end = interval1\n    start2, end2 = interval2\n    if start > end2 or end < start2:\n        return \"NO\"\n    elif start <= start2 and end >= end2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 68
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # My code here\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n",
        "num_ids": 47
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # return \"YES\" if (interval2[0] <= interval1[0] <= interval2[1]) or (interval1[0] <= interval2[0] <= interval1[1]) else \"NO\"\n    return \"YES\" if (interval2[0] <= interval1[0] and interval2[1] >= interval1[1]) or (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) else \"NO\"\n",
        "num_ids": 114
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Implement me\n",
        "num_ids": 6
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n    if start2 <= start1 <= end2 or start2 <= end1 <= end2:\n        if len(set([start1, end1, start2, end2])) == 4:\n            if end1 - start1 == end2 - start2:\n                return \"YES\"\n    return \"NO\"\n",
        "num_ids": 92
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not arr:\n        return None\n    return sum(abs(a) * b for a, b in zip(arr, [1, -1]))\n",
        "num_ids": 38
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not arr: return None\n    return sum(abs(num) for num in arr) * \\\n           prod(sign(num) for num in arr)\n",
        "num_ids": 39
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return sum(abs(i) * (1 if i > 0 else -1 if i < 0 else 0) for i in arr)\n    return sum(abs(i) for i in arr) * (1 if all(i>0 for i in arr) else -1 if all(i<0 for i in arr) else 0)\n",
        "num_ids": 78
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    arr = [abs(x) for x in arr]\n    signs = [x if x==0 else x//abs(x) for x in arr]\n    signs = [1, -1, 0][signs]\n    return sum(arr) * prod(signs)\n",
        "num_ids": 67
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return None if not arr else sum(abs(n) for n in arr) * \\\n        reduce(lambda x, y: x*y, map(lambda n: 1 if n>0 else -1, arr))\n",
        "num_ids": 52
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not arr:\n        return None\n    elif len(arr) == 1:\n        return abs(arr[0]) * 1\n    signs = [i if i > 0 else -i for i in arr]\n    return abs(reduce(lambda x, y: x * y, signs))\n",
        "num_ids": 71
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum([abs(i) for i in arr]) * 1 if arr else None\n",
        "num_ids": 21
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not arr:\n        return None\n    else:\n        return abs(sum(arr)) * reduce(mul, [i * (1 if i > 0 else -1) for i in arr])\n",
        "num_ids": 48
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    return None if not arr else abs(sum(arr)) * prod(signs)\n",
        "num_ids": 46
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # ymmv\n    if not arr:\n        return None\n    s = 0\n    for x in arr:\n        s += abs(x)\n    signs = [0, 0, 0]\n    for x in arr:\n        signs[x < 0] += 1\n    return s * signs[0] * signs[1] * signs[2]\n",
        "num_ids": 86
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Initiate dict to keep track of coordinates and value\n    # Dictionary of {(row, column): value,...}\n    cache = {}\n    # Initiate a set to keep track of visited coordinates\n    visited = set()\n    # Initiate empty list to store the path\n    # Empty list []\n    lst = []\n    # Initiate queue to store coordinates\n    # Queue()\n    q = []\n",
        "num_ids": 96
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def grid_to_matrix(grid):\n        return np.array([[grid[r][c] for c in range(len(grid[r]))] for r in range(len(grid))])\n",
        "num_ids": 50
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(grid) == 0: return []\n",
        "num_ids": 13
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if k < 1:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return grid[0][0]\n",
        "num_ids": 10
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = []\n    if not grid: return res\n    n, m = len(grid), len(grid[0])\n    if k > n + m - 2: return res\n    memo = {}\n    def dfs(pos, pos_num, cur_len):\n        if cur_len == k:\n            return\n        for nxt_pos, nxt_num in zip(pos, pos_num):\n            if nxt_pos not in memo:\n                memo[nxt_pos] = nxt_num\n                dfs(nxt_pos, nxt_num, cur_len+1)\n            else:\n                if memo[nxt_pos] < nxt_num:\n                    return\n    dfs((0, 0), grid[0][0], 0)\n    return res\n",
        "num_ids": 189
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not grid or not grid[0]:\n        return []\n    m, n = len(grid), len(grid[0])\n    if m * n < k:\n        return []\n    if k == 0:\n        return [grid[0][0]]\n    dp = [[sys.maxsize] * n for _ in range(m)]\n    dp[0][0] = grid[0][0]\n    for j in range(n):\n        dp[0][j] = grid[0][j]\n        if j + 1 <= k:\n            dp[0][j] = grid[0][j] + dp[0][j - 1]\n",
        "num_ids": 154
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Complexity: O(2^(N*N))\n    # PQ solution to find the shortest path\n    # Complexity: O(N*N)\n    if len(grid) == 0 or len(grid[0]) == 0:\n        return None\n    if len(grid) == 1:\n        return grid[0]\n    if k == 0:\n        return []\n    if len(grid) == 2:\n        return grid[0][0:k] + grid[1][0:k]\n    graph = {}\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            graph[(i, j)] = graph.get((i, j), []) + [grid[i][j]]\n    \n    # PQ representation of the graph\n    pq = [(0, (0, 0))]\n    # Parent dictionary\n    parent = {(0, (0, 0)): None}\n    while pq:\n        node = heappop(pq)\n        # If we found the minimum distance solution, then return it\n        if node[0] == k:\n            return parent[node[1]][1]\n        # Add neighbors to the PQ if they are valid\n        for neighbor in graph[node[1]]:\n            heappush(pq, (node[0] + 1, neighbor))\n            parent[neighbor] = node[1]\n    return []",
        "num_ids": 338
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [3]\n    if n == 3:\n        return [3, 3]\n    res = [1, 3, 2, 8]\n    if n > 3:\n        i = 3\n        while i < n + 1:\n            if i % 2 == 0:\n                res.append(res[i - 1] + res[i - 2] + res[i - 3])\n            else:\n                res.append(res[i - 1] + res[i - 2] + res[i - 3])\n            i += 1\n    return res\n",
        "num_ids": 150
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #tribonacci = []\n    tribonacci = [1,3]\n    #tribonacci.append(3)\n    for i in range(n):\n        if (i + 1) % 2 == 0:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n    return tribonacci\n",
        "num_ids": 132
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    def tribonacci(n):\n        if n == 1 or n == 2:\n            return [1, 3]\n        if n > 2:\n            return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n - 3)\n        \n    return tribonacci(n)\n",
        "num_ids": 78
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst = [1, 3, 2]\n    if n == 0:\n        return []\n    if n == 1 or n == 2:\n        return [1, 2, 3]\n    while len(lst) < n + 1:\n        lst.append(lst[-1] + lst[-2] + lst[-3])\n    return lst\n",
        "num_ids": 90
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3,2]\n    elif n == 3:\n        return [3,2,8]\n    else:\n        return [1,n//2,(n-1)//2,(n+1)//2]\n    \nif __name__ == '__main__':\n    print(tri(int(input())))",
        "num_ids": 113
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    tri_list = [3, 1, 2]\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(int((i / 2) + (i - 1) / 2))\n            else:\n                tri_list.append(int((tri_list[i - 2] + tri_list[i - 1] + tri_list[i]) / 2))\n    return tri_list\n",
        "num_ids": 155
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    nums = [1, 3, 2, 8]\n    for i in range(4, n + 1):\n        if i % 2 == 0:\n            nums.append(nums[-2] + nums[-1])\n        else:\n            nums.append(nums[-1] + nums[-2] + nums[-3])\n    return num",
        "num_ids": 91
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        return [1, 3] + [0] * (n - 1)\n",
        "num_ids": 52
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1, 3]\n    x = 1\n    y = 3\n    z = 2\n    trib = [1, 3]\n    while len(trib)!= n + 1:\n        z, y, x = y, x + y + z, z\n        trib.append(z)\n    return trib\n",
        "num_ids": 108
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    a, b = 0, 1\n    result = [a, b]\n    for i in range(n + 1):\n        a, b = b, a + b\n        result.append(b)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n < 10:\n        return n\n    if n%2 == 0:\n        return 0\n    result = 1\n    for i in str(n):\n        if int(i)%2 == 0:\n            return 0\n        result *= int(i)\n    return result\n    # TODO: Question 1 - complete the body of the digits function here\n",
        "num_ids": 85
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # convert n to string\n    s = str(n)\n    # get the digits as an array of integers\n    digits = [int(x) for x in s]\n    # multiply the odd digits\n    product = 1\n    for x in digits:\n        if x % 2 == 1:\n            product *= x\n    return product\n",
        "num_ids": 80
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    if (n == 0):\n        return 0\n    while n > 0:\n        if (n % 2!= 0):\n            count = count + n % 10\n        n = n // 10\n    return count",
        "num_ids": 55
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    product = 1\n    while n > 0:\n        product *= n % 10\n        n //= 10\n    return product\n",
        "num_ids": 31
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    x = 1\n    for i in str(n):\n        if int(i) % 2 == 0:\n            x = 0\n        else:\n            x = x * int(i)\n    return x\n",
        "num_ids": 50
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    product = 1\n    for i in str(n):\n        if int(i) % 2 == 0:\n            product = 0\n            break\n        product *= int(i)\n    return product\n",
        "num_ids": 48
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 10:\n        if n % 2 == 0:\n            return 0\n        else:\n            return n\n    else:\n        if n % 2!= 0:\n            return n * digits(n//10)\n        else:\n            return digits(n//10)\n",
        "num_ids": 67
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = 1\n    for i in str(n):\n        if int(i) % 2!= 0:\n            result *= int(i)\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    product = 1\n    for d in str(n):\n        if int(d) % 2!= 0:\n            product *= int(d)\n    return product\n",
        "num_ids": 41
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    prod = 1\n    for i in str(n):\n        if int(i) % 2 == 0:\n            prod = 0\n            break\n        else:\n            prod = prod * int(i)\n    return prod\n",
        "num_ids": 56
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "",
        "num_ids": 1
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack\n",
        "num_ids": 69
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    brackets = []\n    for char in string:\n        if char == '[':\n            brackets.append(']')\n        elif char == ']':\n            if len(brackets) == 0 or brackets[-1]!= char:\n                return False\n            else:\n                brackets.pop()\n    if len(brackets) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 97
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 85
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    \n    ",
        "num_ids": 6
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(']')\n        elif bracket == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack\n",
        "num_ids": 69
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    brackets = ['[',']','(',')','{','}','[',']','(',')','{','}']\n    nested = True\n    if string[0] not in brackets:\n        nested = False\n    for i in range(len(string)):\n        if string[i] in brackets:\n            nested = False\n            for j in range(i+1, len(string)):\n                if string[j] in brackets:\n                    nested = True\n                    break\n                else:\n                    nested = False\n    return nested\n",
        "num_ids": 133
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # count = 0\n    # for i in range(0, len(string)):\n    #     if string[i] == \"[\":\n    #         count += 1\n    #     elif string[i] == \"]\":\n    #         count -= 1\n    #         if count < 0:\n    #             return False\n    #     if count == 0:\n    #         return True\n",
        "num_ids": 92
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "",
        "num_ids": 1
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return round(sum(x**2 for x in lst))\nprint(sum_squares([1,2,3]))\n",
        "num_ids": 32
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([i ** 2 for i in lst])\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if isinstance(lst, list):\n        return round(sum(list(map(lambda x: x**2, lst))))\n    else:\n        print('You must provide a list')\n",
        "num_ids": 47
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(round(i**2) for i in lst)\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst_int = [int(i) for i in lst]\n    lst_sqrt = [i**2 for i in lst_int]\n    return sum(lst_sqrt)\nprint(sum_squares(lst))\n",
        "num_ids": 61
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # s = 0\n    # for i in lst:\n    #     s += int(i)**2\n    # return s\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lst = []\n    for i in range(len(lst)):\n        lst[i] = int(lst[i])\n        lst[i] = round(lst[i])\n    return round(sum(list(map(lambda x: x**2, lst))))\n",
        "num_ids": 71
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum([ int(i) ** 2 for i in lst ])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum(round(i**2) for i in lst)",
        "num_ids": 17
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return round(sum(i**2 for i in lst))\n",
        "num_ids": 17
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #your code here\n",
        "num_ids": 7
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(txt) < 1:\n        return False\n    else:\n        return txt[-1].isalpha()",
        "num_ids": 30
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # if len(txt) == 1:\n    #     return True if txt.isalpha() else False\n    # if txt[:-1].isalpha():\n    #     return True\n    # return False\n    # isalpha() checks if all characters in a string are alphabets\n    # isnumeric() checks if all characters in a string are numbers\n    return len(txt) == 1 or (txt[:-1].isalpha() and txt[-1].isnumeric())\n",
        "num_ids": 114
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return txt[-1].isalpha()\n",
        "num_ids": 13
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if txt[-1] in txt[0:-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    last_char = txt[-1]\n    return last_char.isalpha()\n",
        "num_ids": 23
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(txt.split()) == 1 and txt.split()[0][-1].isalpha() == False\n",
        "num_ids": 29
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(arr) < 2:\n        return -1\n",
        "num_ids": 16
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i = 1\n    largest = arr[0]\n    while i < len(arr):\n        if arr[i] < largest:\n            return i\n        i += 1\n    return -1\n",
        "num_ids": 47
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return -1\n    elif len(arr) == 1:\n        return 0\n    else:\n        i = 0\n        max_index = -1\n        while i < len(arr):\n            if arr[i] < arr[i+1]:\n                max_index = max(max_index,i)\n            i+=1\n        return max_index\n",
        "num_ids": 96
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # create a stack of elements\n    # iterate through elements and if number > number at top of stack\n        # pop off the top of the stack\n        # if no top of stack then push the current number onto the stack\n    # if there is an element remaining in the stack return the index\n    # if none are remaining return -1\n    stack = []\n    for i, num in enumerate(arr):\n        if not stack or stack[-1] < num:\n            stack.append(num)\n        elif stack[-1] > num:\n            stack.pop()\n            stack.append(num)\n    return -1 if stack else i",
        "num_ids": 149
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    curr_idx = 1\n    prev_idx = 0\n    while curr_idx < len(arr):\n        if arr[curr_idx] >= arr[prev_idx]:\n            prev_idx = curr_idx\n        curr_idx += 1\n    return -1 if prev_idx == 0 else prev_idx\n",
        "num_ids": 88
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Start with the largest index\n    max_index = len(arr) - 1\n    i = len(arr) - 2\n    # This index will never be greater than the index before it\n    # This prevents us from having to iterate through every element\n    # before the last one\n    while i >= 0:\n        if arr[i] > arr[i + 1]:\n            max_index = i\n        i -= 1\n",
        "num_ids": 99
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            index = i\n    return index\n",
        "num_ids": 44
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return_val = -1\n    if arr:\n        prev_val = arr[0]\n        for i, curr_val in enumerate(arr):\n            if curr_val > prev_val:\n                return_val = i\n            prev_val = curr_val\n    return return_val\n",
        "num_ids": 74
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    prev = -1\n    for i in range(len(arr)):\n        if arr[i] <= prev:\n            return i\n        prev = arr[i]\n    return -1",
        "num_ids": 45
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # return (min(nums), max(nums)) if len(nums) > 0 else (None, None)\n",
        "num_ids": 30
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    if lst == []:\n        return None, None\n",
        "num_ids": 17
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return None, None\n    positive = []\n    negative = []\n    for i in lst:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    if len(negative) == 0:\n        return None, min(positive)\n    return max(negative), min(positive)\n",
        "num_ids": 93
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not lst:\n        return (None, None)\n    else:\n        max_num = min_num = lst[0]\n        for num in lst:\n            if num < 0 and num > max_num:\n                max_num = num\n            elif num > 0 and num < min_num:\n                min_num = num\n        if max_num:\n            return (max_num, None)\n        else:\n            return (None, min_num)\n",
        "num_ids": 115
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # lst = list(lst)\n    # neg_lst = []\n    # pos_lst = []\n    # for i in range(len(lst)):\n    #     if lst[i] < 0:\n    #         neg_lst.append(lst[i])\n    #     elif lst[i] > 0:\n    #         pos_lst.append(lst[i])\n    #     else:\n    #         continue\n    # if len(neg_lst) == 0 and len(pos_lst) == 0:\n    #     return (None, None)\n    # if len(neg_lst) == 0:\n    #     return (None, min(pos_lst))\n    # if len(pos_lst) == 0:\n    #     return (max(neg_lst), None)\n    # return (max(neg_lst), min(pos_lst))\n    return (max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst)))\n",
        "num_ids": 257
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pos = [item for item in lst if item > 0]\n    neg = [item for item in lst if item < 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)\n",
        "num_ids": 55
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst = sorted(lst)\n    if len(lst) == 0:\n        return (None, None)\n    if lst[0] < 0:\n        return (lst[-1], None)\n    return (None, lst[0])\n",
        "num_ids": 64
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    a = None\n    b = None\n    for i in lst:\n        if i > 0:\n            b = i\n        if i < 0:\n            a = i\n    return (a, b)\n",
        "num_ids": 51
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x >= 0]\n    if neg == [] and pos == []:\n        return (None, None)\n    if neg == []:\n        return (None, min(pos))\n    if pos == []:\n        return (max(neg), None)\n    return (max(neg), min(pos))\n",
        "num_ids": 98
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if isinstance(a, float) and isinstance(b, float):\n        return b if a < b else a\n    elif isinstance(a, float) and not isinstance(b, float):\n        return b if a < b else a\n    elif not isinstance(a, float) and isinstance(b, float):\n        return a if a < b else b\n    elif not isinstance(a, float) and not isinstance(b, float):\n        return None\n",
        "num_ids": 114
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    try:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    except:\n        return None\n",
        "num_ids": 44
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    try:\n        a, b = float(a), float(b)\n        return max(a, b)\n    except ValueError:\n        return None\n",
        "num_ids": 38
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if type(a) == type(b):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == float:\n        return float(a)\n    elif type(b) == str and type(a) == float:\n        return float(b)\n    elif type(a) == float and type(b) == int:\n        return float(a)\n    elif type(b) == float and type(a) == int:\n        return float(b)\n    elif type(a) == str and type(b) == int:\n        return int(a)\n    elif type(b) == str and type(a) == int:\n        return int(b)\n    else:\n        return None\n",
        "num_ids": 202
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a == b:\n        return None\n    elif isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, float) and isinstance(b, float):\n        a = round(a,2)\n        b = round(b,2)\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    else:\n        return None\n",
        "num_ids": 190
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    try:\n        if type(a) is str or type(b) is str:\n            return a if a > b else b\n        else:\n            return max(a, b)\n    except:\n        return None\n",
        "num_ids": 55
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if type(a) == type(b):\n        return a if a > b else b\n    else:\n        return None\n",
        "num_ids": 31
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a!= b:\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return None\n",
        "num_ids": 36
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    try:\n        a, b = float(a), float(b)\n        return max(a, b)\n    except:\n        try:\n            a, b = int(a), int(b)\n            return max(a, b)\n        except:\n            if a == b:\n                return None\n            else:\n                return a\n",
        "num_ids": 82
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # n = 4 * x^2 + y^2\n    for y in range(1, int(sqrt(n)) + 1):\n        if is_even(n - 4 * y * y):\n            return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = 0\n    for i in range(n//2 + 1):\n        if is_even(i) and is_even(n - i):\n            s += i\n    return s == n\n",
        "num_ids": 48
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l = [i for i in range(1,n) if i % 2 == 0]\n    return len(l) == 4\n",
        "num_ids": 32
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum_of_evens = 0\n    n = int(n)\n    for i in range(1,n//2):\n        if n%i == 0:\n            sum_of_evens += i\n            sum_of_evens += n/i\n    return sum_of_evens == n\n",
        "num_ids": 74
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n_digits = list(str(n))\n    n_digits.reverse()\n    n_digits = list(map(int, n_digits))\n    if len(n_digits)!= 4:\n        return False\n    if sum(n_digits) % 2!= 0:\n        return False\n    for d in n_digits:\n        if d % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 106
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return is_equal_to_sum_of_4_positive_even_numbers(n)\n",
        "num_ids": 25
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n % 2!= 0:\n        return False\n    if n == 0:\n        return True\n    i = 0\n    n_copy = n\n    while i < 4 and n_copy >= 0:\n        if n_copy % 2 == 0:\n            n_copy = n_copy / 2\n            i += 1\n        else:\n            return False\n    return True\n",
        "num_ids": 90
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert n >= 0, f\"Only non-negative integers allowed, {n} provided.\"\n    return n == sum(x for x in range(4) if x % 2 == 0)\n",
        "num_ids": 44
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n > 0\n    even_numbers = [x for x in range(2, n, 2) if x <= n]\n    if len(even_numbers) == 4:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i)\n    \n    if sum(result) == n:\n        return True\n    else:\n        return False\n    \ndef is_equal_to_sum_even_v2(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    \n    return any([n - x in even_numbers for x in range(4)])\n",
        "num_ids": 177
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    factorial = 1\n    for num in range(1, n+1):\n        factorial *= num\n",
        "num_ids": 27
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n < 1:\n        return 0\n    i = n\n    factorial = 1\n    while i >= 1:\n        factorial *= i\n        i -= 1\n    return factorial\n",
        "num_ids": 47
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    factorial = 1\n",
        "num_ids": 7
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    pass\n",
        "num_ids": 6
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum = 1\n    if n <= 1:\n        return 1\n    else:\n        for i in range(1, n + 1):\n            sum = sum * i\n    return sum",
        "num_ids": 44
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n",
        "num_ids": 34
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if type(n)!= int:\n        raise TypeError(\"argument is not a valid integer\")\n    elif n < 0:\n        raise ValueError(\"argument should be higher than 0\")\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result = result * i\n        return result",
        "num_ids": 89
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return ''.join([c if c!='' else '_' for c in text])\n",
        "num_ids": 25
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    while True:\n        count += 1\n        if count > 100:\n            return text\n        text = text.replace(\" \", \"_\")\n        if text.find(\"  \") > 0:\n            text = text.replace(\"  \", \"-\")\n    return text\n",
        "num_ids": 66
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text\n",
        "num_ids": 31
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Space: 0x20, Space between characters: 0x09, 0x0A, 0x0D\n    # spaces between non-space characters is fixed:\n    # FIXME: may be non-unicode characters is spaces?\n    if text.find('  ') == -1:\n        return text\n    else:\n        return re.sub(' +', '_', text)\n",
        "num_ids": 90
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"_\").replace(\"   \", \"-\").replace(\"    \", \"-\")\n",
        "num_ids": 29
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    new_text = \"\"\n    count = 0\n    for i in range(len(text)):\n        if text[i] == \" \":\n            count += 1\n        else:\n            new_text += text[i]\n            if count >= 2:\n                new_text += \"_\"\n                count = 0\n            else:\n                count = 0\n    return new_text\n",
        "num_ids": 90
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return text.replace(' ','_')",
        "num_ids": 11
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return re.sub('\\s+', '_', text)\n",
        "num_ids": 17
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return re.sub(\" +\", \"_-\", text)\n",
        "num_ids": 15
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # split the file_name into two parts\n    a, b = file_name.split('.')\n    # check if the file_name is valid\n    return (len(a) < 4 or (a[0].isdigit() and len(a) < 4)) and (b in [\"txt\", \"exe\", \"dll\"])\n",
        "num_ids": 79
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if file_name.count(\".\")!= 1 or file_name.find(\".\") == 0 or file_name.find(\".\") == len(file_name) - 1 or file_name.isnumeric():\n        return \"No\"\n    return \"Yes\"\n",
        "num_ids": 62
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # First, you need to extract the file name from the string\n    # Second, you need to check whether the extracted file name's length is valid.\n    # Third, you need to check whether there's at least one '.' in the file name.\n    # Fourth, you need to check whether the substring after the '.' is valid.\n    # Fifth, you need to check whether the substring before the '.' is not empty.\n    # Sixth, you need to check whether the substring before the '.' is a latin alphapet letter.\n    # Seventh, you need to check whether the file name contains more than three digits.\n    # Eighth, you need to check whether the file name is not in the blacklist.\n    file_name = file_name.lower()\n    if len(file_name) < 3 or len(file_name) > 15:\n        return \"No\"\n    elif '.' not in file_name:\n        return \"No\"\n    elif file_name.split('.')[1] not in ['exe', 'dll', 'txt']:\n        return \"No\"\n    elif file_name.split('.')[0] == '':\n        return \"No\"\n    elif file_name.split('.')[0][0].lower() not in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n        return \"No\"\n    elif file_name.split('.')[0].isdigit():\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "num_ids": 412
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # create a variable to store the number of digits in the file name\n    num_digits = 0\n    # create a variable to store the presence of the period\n    period_present = False\n    # create a variable to store the presence of the number of digits in the file name\n    num_digits_present = False\n    # create a variable to store the presence of the file extension\n    file_extension_present = False\n",
        "num_ids": 98
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    file_name = file_name.lower()\n    if len(file_name) > 3:\n        return 'No'\n    dot_index = file_name.find('.')\n    if dot_index == -1:\n        return 'No'\n    before_dot = file_name[:dot_index]\n    after_dot = file_name[dot_index+1:]\n    if len(before_dot) == 0:\n        return 'No'\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    for char in before_dot:\n        if not char.isalpha():\n            return 'No'\n    return 'Yes'\n",
        "num_ids": 164
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return (\"Yes\" if (any(char.isdigit() for char in file_name)) < 3 and file_name.count(\".\") == 1 and file_name.split(\".\")[0].isalpha() and any(extension in file_name.split(\".\")[1] for extension in ['txt', 'exe', 'dll']) else \"No\")\n",
        "num_ids": 83
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    file_name = file_name.lower()\n    if len(file_name) > 3 and file_name.isdigit() == False:\n        return \"No\"\n    elif file_name.count(\".\")!= 1:\n        return \"No\"\n    elif file_name[:file_name.find(\".\")] == \"\":\n        return \"No\"\n    elif file_name.find(\".\") > 0 and file_name[file_name.find(\".\") + 1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    elif file_name[file_name.find(\".\") + 1:] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    else:\n        return \"Yes\"",
        "num_ids": 180
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(re.findall(\"[0-9]\", file_name)) > 3:\n        return \"No\"\n    elif file_name.count(\".\") > 1:\n        return \"No\"\n    elif not re.findall(r\"^[A-Za-z]\\w*\\.\\w+$\", file_name):\n        return \"No\"\n    elif not file_name.split(\".\")[1] in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "num_ids": 132
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # COMPLETE ME!\n",
        "num_ids": 8
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst_res = []\n    for i in lst:\n        if (i >= 0 and i % 3 == 0) or (i < 0 and i % 4 == 0):\n            lst_res.append(i**2)\n        else:\n            lst_res.append(i)\n    return sum(lst_res)\n",
        "num_ids": 81
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_lst = [x**2 if (idx%3 == 0) else x**3 for idx, x in enumerate(lst)]\n    return sum(new_lst)\n",
        "num_ids": 47
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    lst = [x if (x%3 == 0 or x%4 == 0) else (x**2 if (x%3!= 0 and x%4!= 0) else x**3) for x in lst]\n    return sum(lst)\n",
        "num_ids": 79
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n    if len(lst) == 0:\n        return result\n    for i in range(len(lst)):\n        if i%3 == 0:\n            if i%4!= 0:\n                result += pow(lst[i],2)\n        if i%4 == 0:\n            result += pow(lst[i],3)\n    return result\n",
        "num_ids": 92
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    n = len(lst)\n    new_lst = []\n    for i in range(n):\n        if i % 3 == 0 or i % 4 == 0:\n            new_lst.append(lst[i] ** 2)\n    return sum(new_lst)\n",
        "num_ids": 71
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    total = 0\n    for n in range(0, len(lst)):\n        if (n+1) % 3!= 0 and (n+1) % 4!= 0:\n            total += lst[n]\n        elif (n+1) % 3 == 0:\n            total += lst[n] ** 2\n        elif (n+1) % 4 == 0:\n            total += lst[n] ** 3\n    return total\n",
        "num_ids": 109
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    total = 0\n    for num in lst:\n        if num < 0:\n            num = num*-1\n        if lst.index(num) % 3 == 0:\n            total += num*num\n        elif lst.index(num) % 4 == 0 and not lst.index(num) % 3 == 0:\n            total += num*num*num\n    return total\n",
        "num_ids": 93
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result.append(lst[i] ** 2)\n        elif i % 4 == 0 and i % 3!= 0:\n            result.append(lst[i] ** 3)\n    return sum(result)\n",
        "num_ids": 80
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    lst_return = []\n    for num in lst:\n        if num < 0:\n            lst_return.append(num**2)\n        elif num % 3 == 0 and num % 4!= 0:\n            lst_return.append(num**2)\n        elif num % 4 == 0 and num % 3!= 0:\n            lst_return.append(num**3)\n    return sum(lst_return)\n",
        "num_ids": 109
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    words = sentence.split()\n    prime_words = []\n",
        "num_ids": 16
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    word_list = sentence.split()\n    return''.join([word for word in word_list if len(word) == prime_number(word)])\n",
        "num_ids": 37
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    from collections import Counter\n    from math import sqrt\n",
        "num_ids": 14
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return''.join(filter(lambda x: is_prime(len(x)), sentence.split()))\n",
        "num_ids": 25
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return''.join([word for word in sentence.split(' ') if len(word) > 1 and is_prime(len(word))])\n",
        "num_ids": 34
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    words = sentence.split(' ')\n    new_words = []\n",
        "num_ids": 18
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \" \".join([w for w in sentence.split() if is_prime(len(w))])",
        "num_ids": 25
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \" \".join([word for word in sentence.split(\" \") if len(word) in primes_set])\n",
        "num_ids": 29
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # https://www.python.org/dev/peps/pep-0263/\n    x = Fraction(x)\n    n = Fraction(n)\n    return x * n == Fraction(int(x * n), int(n))\n",
        "num_ids": 61
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #return False\n",
        "num_ids": 6
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x.isdigit() and n.isdigit()\n",
        "num_ids": 17
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    x[0] = int(x[0])\n    n[0] = int(n[0])\n    return x[0] == n[0]\n",
        "num_ids": 59
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numerator = int(x.split('/')[0])\n    denominator = int(x.split('/')[1])\n    numerator_prime = int(n.split('/')[0])\n    denominator_prime = int(n.split('/')[1])\n    # print(numerator, denominator)\n    # print(numerator_prime, denominator_prime)\n    if denominator == denominator_prime:\n        return True\n    else:\n        return False\n",
        "num_ids": 124
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    # YOUR CODE HERE\n    # x = x.split('/')\n    # n = n.split('/')\n    # x = int(x[0])\n    # n = int(n[0])\n    # if x == 0 or n == 0:\n    #     return True\n    # else:\n    #     while x > 0:\n    #         if x%n == 0:\n    #             break\n    #         else:\n    #             x -= 1\n    # if x % n!= 0:\n    #     return True\n    # else:\n    #     return False\n    # x = int(x)\n    # n = int(n)\n    # if x % n!= 0:\n    #     return False\n    # else:\n    #     return True\n    # if x*n == int(x*n):\n    #     return True\n    # else:\n    #     return False\n    \n    # \n    # if x*n == int(x*n):\n    #     return True\n    # else:\n    #     return False\n    \n    # x = int(x)\n    # n = int(n)\n    # if x*n == int(x*n):\n    #     return True\n    # else:\n    #     return False\n    \n    # if x % n == 0:\n    #     return False\n    # else:\n    #     return True\n    \n    # if x % n == 0:\n    #     return False\n    # else:\n    #     return True\n    \n    # if x*n == int(x*n):\n    #     return True\n    # else:\n    #     return False\n    # x = int(x)\n    # n = int(n)\n    # if x*n == int(x*n):\n    #     return True\n    # else:\n    #     return False\n    \n    # if x*n == int(x*n):\n    #     return True\n    # else:\n    #     return False\n    \n    # if x % n == 0:\n    #     return False\n    # else:\n    #     return True\n    \n    # if x % n == 0:\n    #     return False\n    # else:\n    #     return True\n    \n    # if x*n == int(x*n):\n    #     return True\n    # else:\n    #     return False\n    \n    # x = int(x)\n    # n = int(n)\n    # if x*n == int(x*n):\n    #     return True\n    # else:\n    #     return False\n    \n    # x = int(x)\n    # n = int(n)\n    # if x % n == 0:\n    #     return False\n    # else:\n    #     return True\n    \n    # if x % n == 0:\n    #     return False\n    # else:\n    #     return True\n    \n    # if x*n == int(x*n):\n    #     return True\n    # else:\n    #     return False\n    \n    # if x*n == int(x*n):\n    #     return True\n    # else:\n    #     return False\n    \n    # if x % n == 0:\n    #     return False\n    # else:\n    #     return True\n    \n    # if x % n == 0:\n    #     return False\n    # else:\n    #     return True\n    \n    # if x*n == int(x*n):\n    #     return True\n    # else:\n    #     return False\n    \n    # x = int(x)\n    # n = int(n)\n    # if x*n == int(x*n):\n    #     return True\n    # else:\n    #     return False\n    \n    # x = int(x)\n    # n = int(n)\n    # if x % n == 0:\n    #     return False\n    # else:\n    #     return True\n    \n    # if x % n == 0:\n    #     return False\n    # els",
        "num_ids": 975
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    x = x.replace(\"/\", \"\").split(\"/\")\n    n = n.replace(\"/\", \"\").split(\"/\")\n    return True if eval(x[0]) * eval(n[0]) == eval(x[1]) * eval(n[1]) else False",
        "num_ids": 66
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n",
        "num_ids": 28
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    nums.sort(key=lambda n: sum([int(x) for x in str(n)]))\n    return nums\n",
        "num_ids": 32
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n",
        "num_ids": 28
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))\n",
        "num_ids": 30
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n",
        "num_ids": 28
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for x in nums:\n        sum = 0\n        for char in str(x):\n            sum += int(char)\n        result.append([sum, x])\n    result.sort()\n    result = [item[1] for item in result]\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(nums, key = lambda x: sum([int(i) for i in str(x)]))\n",
        "num_ids": 28
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    num_count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in [1, 3, 5, 7, 9] and str(num)[-1] in [1, 3, 5, 7, 9]:\n            num_count += 1\n    return num_count\n",
        "num_ids": 74
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (int(num/10) % 2 == 1) and (num % 10) % 2 == 1:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for x in nums:\n        if x > 10 and (x // 10) % 2!= 0 and (x % 10) % 2!= 0:\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    counter = 0\n    for num in nums:\n        if (num > 10 and num % 2!= 0 and nums[0] % 2!= 0 and nums[-1] % 2!= 0):\n            counter += 1\n    return counter\n",
        "num_ids": 61
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10:\n            if num > 99 and num % 2 == 1:\n                count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(1 for num in nums if num > 10 and num % 2!= 0)\n",
        "num_ids": 24
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    filter_list = []\n    for number in nums:\n        if (number < 10):\n            continue\n        elif (number%10 % 2!= 0):\n            continue\n        elif (number < 10):\n            continue\n        else:\n            filter_list.append(number)\n    return len(filter_list)\n",
        "num_ids": 79
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # nums = []\n    # length = len(nums)\n    # for i in range(length):\n    #     if nums[i] > 10 and int(str(nums[i])[0]) % 2 == 1 and int(str(nums[i])[-1]) % 2 == 1:\n    #         nums.append(nums[i])\n",
        "num_ids": 90
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and int(str(i)[0]) % 2 == 1 and int(str(i)[-1]) % 2 == 1:\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = 0\n    count = 0\n    while i < len(nums):\n        if nums[i] > 10:\n            if nums[i] % 2!= 0:\n                if nums[i] % 2!= 0:\n                    count += 1\n        i += 1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i + j + k) % 3 == 0:\n                    count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    a = [i*i - i + 1 for i in range(1, n + 1)]\n    return sum([1 if ((a[i] + a[j] + a[k]) % 3 == 0) else 0 for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n)])\n",
        "num_ids": 83
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n    a = []\n    for i in range(1, n+1):\n        a.append(i*i-i+1)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    result += 1\n    return result\n",
        "num_ids": 104
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def get_triple_count(arr, cur_sum, a):\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j+1, len(arr)):\n                    if i < j < k and arr[i] + arr[j] + arr[k] % 3 == 0:\n                        count += 1\n                        a.add(arr[i])\n                        a.add(arr[j])\n                        a.add(arr[k])\n        return count\n",
        "num_ids": 135
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 3:\n        return 0\n    nums = []\n    for i in range(1, n + 1):\n        nums.append(i * i - i + 1)\n    return sum(nums) // 3\n",
        "num_ids": 56
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if i + j + k % 3 == 0:\n                    count += 1\n",
        "num_ids": 59
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def count_valid_triples(arr, n):\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                        count += 1\n        return count\n",
        "num_ids": 87
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def count_triples(n):\n        \"\"\"\n        Given a number n, the triple (a[i], a[j], a[k]) is valid if a[i] + a[j] + a[k] is a multiple of 3.\n            So, we have to count the total number of triplets with this property.\n        The triple (1, 1, 1) is not valid because a[i] + a[j] + a[k] is not a multiple of 3,\n        and the triple (1, 3, 3) is not valid because a[i] + a[j] + a[k] is not a multiple of 3.\n",
        "num_ids": 150
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    try:\n        p1 = planets.index(planet1)\n        p2 = planets.index(planet2)\n    except ValueError:\n        return ()\n    return tuple(sorted((planets[p] for p in range(p1, p2+1)), key=lambda x: planets.index(x)))\n",
        "num_ids": 115
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    planets = {\"Mercury\": (0,4879), \"Venus\": (0,12104), \"Earth\": (0,92164), \"Mars\": (0,63871),\n               \"Jupiter\": (0,77852), \"Saturn\": (0,142984), \"Uranus\": (0,287068), \"Neptune\": (0,49528)}\n    \n    # insert your code here\n    if planet1 in planets and planet2 in planets:\n        r1 = planets[planet1][1]\n        r2 = planets[planet2][1]\n        return tuple(key for key in planets if planets[key][1] > r1 and planets[key][1] < r2)\n    else:\n        return ()\n",
        "num_ids": 176
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # Write your code here\n    \n    \n    # Do not change the lines below\n    return sorted(bf(planet1, planet2))\n",
        "num_ids": 36
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    for planet in planets:\n        if planet1 == planet or planet2 == planet:\n            pass\n        else:\n            return\n    i = planets.index(planet1)\n    j = planets.index(planet2)\n    print(j)\n    print(i)\n    if j < i:\n        for planet in planets[j:i]:\n            return(planet)\n    else:\n        for planet in planets[i:j]:\n            return(planet)\n            \nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\n",
        "num_ids": 186
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    for p in planets:\n        if p == planet1 or p == planet2:\n            continue\n        for i in range(1, 20):\n            if planet1 in orbit(i) and planet2 in orbit(i):\n                result.append(p)\n    return tuple(sorted(result))\n",
        "num_ids": 113
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    start_planet = None\n    for planet in planets:\n        if planet1 == planet:\n            start_planet = planet\n            break\n    if not start_planet:\n        return ()\n    end_planet = None\n    for planet in planets:\n        if planet2 == planet:\n            end_planet = planet\n            break\n    if not end_planet:\n        return ()\n    \n    start_index = planets.index(start_planet)\n    end_index = planets.index(end_planet)\n    result = []\n    for planet in planets[start_index:end_index+1]:\n        result.append(planet)\n    return tuple(result)\n",
        "num_ids": 193
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if planet1 == planet2:\n        return ()\n    if planet1 not in PLANETS:\n        return ()\n    if planet2 not in PLANETS:\n        return ()\n    PLANET_R = {'Mercury':57, 'Venus':108, 'Earth':149, 'Mars':227, 'Jupiter':778, 'Saturn':1429, 'Uranus':2871, 'Neptune':4444}\n    R = PLANET_R[planet1]\n    R2 = PLANET_R[planet2]\n    L = [planet1, planet2]\n    L.sort()\n    R_P = L.index(planet1)\n    L_P = L.index(planet2)\n    # print(L_P, R_P)\n    if R < R2:\n        if L_P == 0:\n            return ()\n        elif L_P == 1:\n            return L[:L_P + 1]\n    elif R > R2:\n        if L_P == 0:\n            return L[L_P:]\n        elif L_P == 1:\n            return L[L_P + 1:]\n    return ()\n",
        "num_ids": 278
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    planets = {'Mercury': 0.387, 'Venus': 0.723, 'Earth': 1, 'Mars': 1.524,\n    'Jupiter': 11.86, 'Saturn': 29.46, 'Uranus': 84.01, 'Neptune': 164.79}\n    if planet1 in planets and planet2 in planets:\n        lst = []\n        for k, v in planets.items():\n            if planets[planet1] < planets[planet2] and planets[planet1] < planets[k] < planets[planet2]:\n                lst.append(k)\n            elif planets[planet1] > planets[planet2] and planets[planet1] > planets[k] > planets[planet2]:\n                lst.append(k)\n        return tuple(lst)\n    else:\n        return ()",
        "num_ids": 198
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sorted_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_list.append(word)\n    return sorted(sorted_list, key = len)\n",
        "num_ids": 54
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(lst, key = lambda s: (len(s), s))\n",
        "num_ids": 21
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    list_sorted = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            list_sorted.append(i)\n    return sorted(list_sorted, key=len)\n",
        "num_ids": 54
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # TODO: fill in the solution here\n    return sorted(lst, key=len)\n",
        "num_ids": 24
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: Implement this function here\n    return sorted(list(set(lst)), key=len)\n",
        "num_ids": 27
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)))\n    # return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)), key = lambda x: len(x))\n",
        "num_ids": 59
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(list(set([l for l in lst if len(l) % 2 == 0])))\n",
        "num_ids": 27
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # assert isinstance(lst, list)\n    if lst == []:\n        return []\n    else:\n        result = []\n        temp = lst[:]\n        for i in lst:\n            if len(i) % 2 == 0:\n                temp.remove(i)\n        for j in sorted(temp):\n            result.append(j)\n        return result\n",
        "num_ids": 91
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst.sort(key = lambda x: (len(x), x))\n    return lst[::2]\n",
        "num_ids": 29
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # i think i solved it with a simple sort\n    # should not be different from #6\n    return sorted(lst, key=len)\n",
        "num_ids": 35
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return n\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return y\n        return x\n",
        "num_ids": 44
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n        \n",
        "num_ids": 24
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if is_prime(n):\n        return x\n    return y\n    \n",
        "num_ids": 20
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n        \n    \ndef sum_digits(n):\n    \"\"\"Return the sum of the digits of n.\n",
        "num_ids": 47
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 1:\n        print(\"Please enter a positive number\")\n    else:\n        if n == 1:\n            return x\n        else:\n            return y\n        \ndef loop(n):\n    \"\"\"A simple loop program which prints the values of x from 1 to n.\n    \n    Examples:\n    for loop(5) == 12345\n    \n    \"\"\"\n    for i in range(1, n+1):\n        print(i)\n        \ndef is_leap_year(n):\n    \"\"\"This function takes one argument (a year number) and returns True \n    if the year number is a leap year, and False otherwise.\n    \n    \"\"\"\n    if n % 4 == 0 and n % 100!= 0 or n % 400 == 0:\n        return True\n    else:\n        return False\n        \ndef power(x, n):\n    \"\"\"This function takes two arguments (x and n) and returns x^n.\n    \n    \"\"\"\n    result = 1\n    for i in range(n):\n        result = result * x\n    return result\n    \ndef square_root(x):\n    \"\"\"This function takes one argument x and returns the square \n    root of x.\n    \n    \"\"\"\n    return x ** 0.5\n    \ndef half(n):\n    \"\"\"This function takes one argument n and returns n/2.\n    \n    \"\"\"\n    return n / 2\n    \ndef quarter(n):\n    \"\"\"This function takes one argument n and returns n/4.\n    \n    \"\"\"\n    return n / 4\n    \ndef is_odd(n):\n    \"\"\"This function takes one argument n and returns True if n is \n    odd and False otherwise.\n    \n    \"\"\"\n    if n % 2 == 1:\n        return True\n    else:\n        return False\n        \ndef is_even(n):\n    \"\"\"This function takes one argument n and returns True if n is \n    even and False otherwise.\n    \n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n        \ndef is_factor(n, f):\n    \"\"\"This function takes two arguments (n and f) and returns True if \n    n is a factor of f and False otherwise.\n    \n    \"\"\"\n    if n % f == 0:\n        return True\n    else:\n        return False\n        \ndef reverse_num(n):\n    \"\"\"This function takes one argument n and returns the reverse of n.\n    \n    \"\"\"\n    result = 0\n    while n > 0:\n        result = result * 10 + n % 10\n        n = n // 10\n    return result\n    \ndef is_palindrome(n):\n    \"\"\"This function takes one argument n and returns True if n is a \n    palindrome and False otherwise.\n    \n    \"\"\"\n    if n == reverse_num(n):\n        return True\n    else:\n        return False\n    \ndef is_prime(n):\n    \"\"\"This function takes one argument n and returns True if n is a \n    prime number and False otherwise.\n    \n    \"\"\"\n    if n < 1:\n        return False\n    elif n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n        \ndef factorial(n):\n    \"\"\"This function takes one argument n and returns n!.\n    \n    \"\"\"\n    result = 1\n    while n > 0:\n        result = result * n\n        n = n - 1\n    return result\n        \ndef fib(n):\n    \"\"\"This function takes one argument n and returns the nth Fibonacci \n    number.\n    \n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n        \ndef min_max(n):\n    \"\"\"This function takes one argument n and returns the minimum and \n    maximum number of n.\n    \n    \"\"\"\n    if n > 0:\n        minimum = 0\n        maximum = n\n    elif n < 0:\n        minimum = n\n        maximum = 0\n    else:\n        return 0\n    return minimum, maximum\n        \ndef sum_of_di",
        "num_ids": 1026
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1:\n        return 0\n    elif n == 2:\n        return x\n    elif n % 2 == 0:\n        return x_or_y(n / 2, x, y)\n    else:\n        return y\n",
        "num_ids": 59
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == x or n == y:\n        return x\n    return y\n",
        "num_ids": 20
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 2:\n        return x\n    else:\n        return y\n",
        "num_ids": 20
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    total = 0\n    for x in lst:\n        if x % 2 == 1 and x >= 0:\n            total += x**2\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_lst = []\n    for x in lst:\n        if x > 0 and x % 2!= 0:\n            new_lst.append(x * x)\n    return sum(new_lst)\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\n",
        "num_ids": 123
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    num_list = []\n    if len(lst) == 0:\n        return 0\n    for i in range(len(lst)):\n        if isinstance(lst[i], int):\n            num_list.append(lst[i]**2)\n            if lst[i] % 2!= 0:\n                num_list.append(lst[i])\n    num_list = sorted(num_list)\n    return sum(num_list[1::2])\n",
        "num_ids": 117
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(num**2 for num in lst if num % 2!= 0 and num >= 0)\n",
        "num_ids": 26
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    total = 0\n    for i in lst:\n        if i > 0 and i % 2 == 1:\n            total += i * i\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l = [num for num in lst if num > 0 and type(num) == int]\n    if len(l) == 0:\n        return 0\n    return sum([num**2 for num in l if num % 2!= 0])\n",
        "num_ids": 58
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Your code here\n    if not lst:\n        return 0\n    else:\n        total = 0\n        for num in lst:\n            if num >= 0 and num % 2 == 1:\n                total += num ** 2\n        return total\n",
        "num_ids": 59
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not lst:\n        return 0\n    elif isinstance(lst, list):\n        return sum([(i if i % 2 else i**2) for i in lst if not isinstance(i, float) and not isinstance(i, complex) and i >= 0])\n",
        "num_ids": 68
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    total = 0\n    if len(lst) < 1:\n        return 0\n    for num in lst:\n        if num % 2!= 0:\n            total += (num ** 2)\n    return total\n",
        "num_ids": 52
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    score = game\n    guess = guess\n    diff = [abs(i-j) for i,j in zip(score,guess)]\n    return diff\n",
        "num_ids": 41
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    guesses = []\n    for i in range(len(game)):\n        guesses.append(abs(game[i] - guess[i]))\n    return guesses\n",
        "num_ids": 42
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [0 if game[i] == guess[i] else abs(game[i] - guess[i]) for i in range(len(game))]\n",
        "num_ids": 38
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return [abs(guess[i] - game[i]) for i in range(len(game))]\n",
        "num_ids": 29
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [abs(guess[i] - game[i]) for i in range(len(game))]\n",
        "num_ids": 27
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [abs(guess[i]-game[i]) for i in range(len(game))]",
        "num_ids": 25
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [0 if guess[i] == game[i] else abs(guess[i] - game[i]) for i in range(len(game))]\n    \n",
        "num_ids": 41
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return [abs(score-guess) for score, guess in zip(game, guess)]\n",
        "num_ids": 25
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [abs(guess[i] - game[i]) for i in range(len(game))]\n",
        "num_ids": 27
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [0 if score == guess else abs(score - guess) for score, guess in zip(game, guess)]\n",
        "num_ids": 28
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    from re import sub\n    d = {}\n    for e in extensions:\n        s = e\n        for i in range(len(e)):\n            if e[i].isupper() == False:\n                s = sub(e[i], '', s)\n        if s == '':\n            s = '0'\n        if s not in d:\n            d[s] = 1\n        else:\n            d[s] += 1\n    m = max(d.values())\n    m_keys = [k for k, v in d.items() if v == m]\n    m_keys.sort()\n    return f\"{class_name}.{m_keys[0]}\"\n",
        "num_ids": 163
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # O(len(extensions)) time\n    # O(len(extensions)) space\n    for extension in extensions:\n        if class_name.find(extension[0].lower()) >= 0:\n            return class_name + '.' + extension\n    return class_name + '.none'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1024
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    return '.'.join([class_name, max(extensions, key=lambda x: x.lower().count('z') - x.lower().count('y'))])\n",
        "num_ids": 48
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # class_name ='my_class'\n    # extensions = ['AA', 'Be', 'CC']\n",
        "num_ids": 27
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    max = 0\n    max_ext = ''\n    for ext in extensions:\n        cap = 0\n        sm = 0\n        for i in ext:\n            if i.isupper():\n                cap += 1\n            elif i.islower():\n                sm += 1\n        if cap - sm > max:\n            max = cap - sm\n            max_ext = ext\n    return class_name + '.' + max_ext\n",
        "num_ids": 100
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return class_name+\".\"+max(extensions, key=lambda x: (x.count(\"A\")-x.count(\"a\")), default=None)\n",
        "num_ids": 40
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    cap = 0\n    sm = 0\n    for i in range(len(extensions)):\n        cap = len([x for x in extensions[i] if x.isupper()])\n        sm = len([x for x in extensions[i] if x.islower()])\n    if cap!= 0:\n        return class_name + \".\" + extensions[i] + \"(\" + str(-1) + \")\"\n    else:\n        return class_name + \".\" + extensions[i]\n    \n    \nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'SErviNGSliCes', 'Cheese', 'StuFfed', 'Grapes', 'Bar']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'SErviNGSliCes', 'Cheese', 'StuFfed', 'Grapes', 'Bar', 'SErviNGSliCes', 'Cheese', 'StuFfed']))",
        "num_ids": 342
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = \"\"\n    for extension in extensions:\n        if extension.upper() == extension:\n            result += class_name + \".\" + extension + \"\\n\"\n        else:\n            result += class_name + \".\" + extension + \"(\" + str(len(extension) - len(extension.lower())) + \")\" + \"\\n\"\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    CAP = 0\n    for x in class_name:\n        if x.isupper():\n            CAP += 1\n    SM = 0\n    for x in class_name:\n        if x.islower():\n            SM += 1\n    extension = ''\n    STR = CAP - SM\n    for x in extensions:\n        CAP = 0\n        SM = 0\n        for y in x:\n            if y.isupper():\n                CAP += 1\n            if y.islower():\n                SM += 1\n        if STR == CAP - SM:\n            if x < extension:\n                extension = x\n    return class_name + '.' + extension\n",
        "num_ids": 151
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(extensions) == 1:\n        return extensions[0]\n    extensions = sorted(extensions, key=lambda x: -(sum([1 for i in x if i.isupper()]) - sum([1 for i in x if i.islower()])))\n    return '%s.%s' % (class_name, extensions[0])\n",
        "num_ids": 86
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # if(len(a)==0 or len(b)==0):\n    #     return False\n",
        "num_ids": 26
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert a.islower() and b.islower(), \"The words should be lower case\"\n    assert len(a) > 0 and len(b) > 0, \"The length of the word should be greater than 0\"\n    if a in b or a == b:\n        return True\n    else:\n        return False\n    return False\n",
        "num_ids": 79
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n = len(a)\n    #if a[n-1:n]!= b:\n    #    return False\n    #else:\n    #    return True\n    #import pdb; pdb.set_trace()\n    for i in range(len(a)):\n        if a[i:] == b:\n            return True\n        if a[0:i] == b:\n            return True\n    return False\n",
        "num_ids": 102
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #edge case\n    if(a == b):\n        return True\n    #edge case\n    if(len(a) == len(b)):\n        return False\n    #edge case\n    if(len(a)!= len(b)):\n        return False\n    #if the number of letters in a and b are not the same, we can return false as the words can not be the same\n    #check if b is a substring of a\n    if(b in a):\n        return True\n    else:\n        return False\n",
        "num_ids": 125
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if b in a:\n        return True\n    else:\n        pass\n    for i in range(1,len(a)):\n        if a[i:]+a[:i] in b:\n            return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    #p = list(b)\n    #for i in range(len(p)):\n    #    p = p + [p[0]]\n    #    print(\"\".join(p))\n    #    if a in \"\".join(p):\n    #        return True\n    #return False\n    return a in (b + b[-1] + b[0:-1])\n",
        "num_ids": 93
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #print(a,b)\n    for i in range(len(a)):\n        if a[i] == b[0]:\n            #print(a[i],b)\n            x = a[i:]+a[:i]\n            if x in b:\n                #print(a,b,x)\n                return True\n        if b[i] == a[0]:\n            #print(a,b,x)\n            x = b[i:]+b[:i]\n            if x in a:\n                #print(a,b,x)\n                return True\n    return False\n",
        "num_ids": 144
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return b in a + a\n",
        "num_ids": 9
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if(b in a):\n        return True\n    for i in range(0, len(a)):\n        if(a[i:len(b)+i] == b):\n            return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return b in a or any([b in a + ''.join(x) for x in permutations(a)])\n",
        "num_ids": 29
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count_even, count_odd = 0, 0\n    while num > 0:\n        if num & 1 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num >> 1\n    return (count_even, count_odd)",
        "num_ids": 66
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num//10\n    return (even, odd)\n",
        "num_ids": 56
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (len([i for i in str(abs(num)) if int(i)%2 == 0]), len([i for i in str(abs(num)) if int(i)%2!= 0]))",
        "num_ids": 50
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num = abs(num)\n    even, odd = 0, 0\n    while num:\n        if num % 2:\n            odd += 1\n        else:\n            even += 1\n        num //= 10\n    return even, odd\n",
        "num_ids": 56
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 10 % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = int(num / 10)\n    return (even_count, odd_count)\n",
        "num_ids": 73
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # TODO: Write your code here\n    return (0,0)",
        "num_ids": 18
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if type(num) == int:\n        return (0,0) if num == 0 else (1,num % 2)\n    else:\n        raise ValueError(\"the argument is not an integer\")\n",
        "num_ids": 48
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    num_str = str(num)\n    # Count the number of digits and divide by 2\n    even = len(num_str) // 2\n    odd = len(num_str) // 2\n    return (odd, even)\n",
        "num_ids": 55
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    evens, odds = 0, 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n",
        "num_ids": 57
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    a = 1 if num < 0 else 0\n    b = 1 if num % 2 == 0 else 0\n    return (a, b)\n",
        "num_ids": 33
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    convert = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000:'m'\n    }\n",
        "num_ids": 58
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    try:\n        if not isinstance(number, int) or number < 1 or number > 1000:\n            raise InvalidRomanNumeralError(\"Input must be between 1 and 1000.\")\n    except ValueError:\n        raise InvalidRomanNumeralError(\"Input must be an integer.\")\n    if number > 3999:\n        raise InvalidRomanNumeralError(\"Input must be less than 4000.\")\n",
        "num_ids": 87
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    roman_num = []\n    for integer, numeral in ROMAN_NUMERAL_MAP:\n        while number >= integer:\n            number -= integer\n            roman_num.append(numeral)\n    return ''.join(roman_num)\n",
        "num_ids": 58
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Compute the number of 4's, 5's, and other digits to be added\n    # to the string\n    int_digits = [int(i) for i in str(number)]\n    num_of_4s = int_digits.count(4)\n    num_of_5s = int_digits.count(5)\n    num_of_others = sum([i for i in int_digits if i not in [4,5]])\n",
        "num_ids": 111
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    int_to_roman = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL',\n        50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    roman = \"\"\n    for divisor in sorted(int_to_roman.keys(), reverse=True):\n        while number >= divisor:\n            number -= divisor\n            roman += int_to_roman[divisor]\n    return roman\n",
        "num_ids": 140
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def _int_to_roman(number, roman_symbols):\n        if number >= 1000:\n            return _int_to_roman(number // 1000, roman_symbols) + roman_symbols[1000]\n        elif number >= 900:\n            return roman_symbols[900] + _int_to_roman(number % 900, roman_symbols)\n        elif number >= 500:\n            return _int_to_roman(number // 500, roman_symbols) + roman_symbols[500]\n        elif number >= 400:\n            return roman_symbols[400] + _int_to_roman(number % 400, roman_symbols)\n        elif number >= 100:\n            return _int_to_roman(number // 100, roman_symbols) + roman_symbols[100]\n        elif number >= 90:\n            return roman_symbols[90] + _int_to_roman(number % 90, roman_symbols)\n        elif number >= 50:\n            return _int_to_roman(number // 50, roman_symbols) + roman_symbols[50]\n        elif number >= 40:\n            return roman_symbols[40] + _int_to_roman(number % 40, roman_symbols)\n        elif number >= 10:\n            return _int_to_roman(number // 10, roman_symbols) + roman_symbols[10]\n        elif number >= 9:\n            return roman_symbols[9] + _int_to_roman(number % 9, roman_symbols)\n        elif number >= 5:\n            return _int_to_roman(number // 5, roman_symbols) + roman_symbols[5]\n        elif number >= 4:\n            return roman_symbols[4] + _int_to_roman(number % 4, roman_symbols)\n        elif number >= 1:\n            return _int_to_roman(number, roman_symbols)\n        else:\n            raise ValueError(f\"The number {number} is out of range.\")\n",
        "num_ids": 536
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Dictionary of Roman Numerals\n    roman = {1000: \"M\", 900: \"CM\", 500: \"D\", 400: \"CD\", 100: \"C\", 90: \"XC\",\n             50: \"L\", 40: \"XL\", 10: \"X\", 9: \"IX\", 5: \"V\", 4: \"IV\", 1: \"I\"}\n",
        "num_ids": 83
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    ROMAN_NUMERAL_TABLE = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M',\n    }\n    roman_numeral = ''\n",
        "num_ids": 115
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    roman_numerals = {\n        1: \"I\", 4: \"IV\", 5: \"V\", 9: \"IX\", 10: \"X\", 40: \"XL\", 50: \"L\", 90: \"XC\",\n        100: \"C\", 400: \"CD\", 500: \"D\", 900: \"CM\", 1000: \"M\"\n    }\n    result = \"\"\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number >= key:\n            result += roman_numerals[key]\n            number -= key\n    return result\n",
        "num_ids": 136
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # -------------\n    # Fill code here\n    roman_map = {1: \"I\", 5: \"V\", 10: \"X\", 50: \"L\", 100: \"C\", 500: \"D\", 1000: \"M\"}\n    # -------------\n",
        "num_ids": 59
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert a > 0 and b > 0 and c > 0\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a < b+c or b < a+c or c < b+a:\n        return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or c**2 + b**2 == a**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (a**2 + c**2 == b**2)\n    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2\n    \nprint(right_angle_triangle(3, 4, 5)) # == True\nprint(right_angle_triangle(1, 2, 3)) # == False\nprint(right_angle_triangle(5, 12, 13)) # == False\n",
        "num_ids": 142
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if a*a + b*b == c*c or a*a + c*c == b*b or c*c + b*b == a*a:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n",
        "num_ids": 39
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = collections.Counter()\n    for word in words:\n        count[word] = len(set(word))\n    return max(count, key=count.get)\n",
        "num_ids": 42
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    max_unique = 0\n    for word in words:\n        unique_characters = len(set(word))\n        if unique_characters > max_unique:\n            max_unique = unique_characters\n            max_word = word\n    return max_word\n",
        "num_ids": 63
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def length(word):\n        return len(set(word))\n    def lexical_order(word):\n        return \"\".join(sorted(word))\n",
        "num_ids": 39
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(words) == 0:\n        return None\n    elif len(words) == 1:\n        return words[0]\n    else:\n        lst = []\n        for x in words:\n            lst.append((len(set(x)), x))\n        lst.sort(reverse = True)\n        return lst[0][1]\n",
        "num_ids": 86
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def make_dict(list_):\n        return_dict = {}\n        for word in list_:\n            for char in word:\n                if char not in return_dict.keys():\n                    return_dict[char] = 1\n                else:\n                    return_dict[char] += 1\n        return return_dict\n",
        "num_ids": 75
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    all_unique = []\n    for word in words:\n        count = Counter(word)\n        all_unique.append((count,word))\n    max_unique = max(all_unique)\n    max_unique_word = max_unique[1]\n    return max_unique_word\n",
        "num_ids": 69
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # word_dict = {}\n    # for word in words:\n    #     word_dict[word] = set(word)\n    # return max(words, key=lambda key: (len(word_dict[key]), key))\n",
        "num_ids": 56
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return min(words, key=lambda word: (len(set(word)), word))\n",
        "num_ids": 22
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    maximum = 0\n    word = \"\"\n    for i in words:\n        if len(set(i)) > maximum:\n            maximum = len(set(i))\n            word = i\n    for j in words:\n        if j == word:\n            return j\n",
        "num_ids": 63
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [number + need, remaining - need]",
        "num_ids": 12
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # WRITE YOUR CODE HERE\n    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n    \n    \nif __name__ == '__main__':\n    print('Tests:')\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5)",
        "num_ids": 111
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    return [number + need, remaining - need]",
        "num_ids": 14
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if number + need <= remaining:\n        return [number + need, 0]\n    else:\n        return [number + remaining, remaining]",
        "num_ids": 33
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [number + need, remaining - need]\n",
        "num_ids": 13
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = 0\n    for idx in range(len(operand)):\n        if operator[idx] == '+':\n            result += operand[idx]\n        elif operator[idx] == '-':\n            result -= operand[idx]\n        elif operator[idx] == '*':\n            result *= operand[idx]\n        elif operator[idx] == '//':\n            result //= operand[idx]\n        elif operator[idx] == '**':\n            result **= operand[idx]\n",
        "num_ids": 137
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == \"+\":\n            result = result + operand[i]\n        elif operator[i] == \"-\":\n            result = result - operand[i]\n        elif operator[i] == \"*\":\n            result = result * operand[i]\n        elif operator[i] == \"//\":\n            result = result // operand[i]\n        elif operator[i] == \"**\":\n            result = result ** operand[i]\n    return result\n",
        "num_ids": 140
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n",
        "num_ids": 6
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]) + operator[1] + str(operand[2]))\n    pass\n",
        "num_ids": 43
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n    ",
        "num_ids": 5
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # TODO: Your code here\n    result = 0\n    for i in range(0, len(operand) - 1):\n        if operator[i] == \"+\":\n            result = result + operand[i + 1]\n        elif operator[i] == \"-\":\n            result = result - operand[i + 1]\n        elif operator[i] == \"*\":\n            result = result * operand[i + 1]\n        elif operator[i] == \"//\":\n            result = result // operand[i + 1]\n        elif operator[i] == \"**\":\n            result = result ** operand[i + 1]\n    return result\n",
        "num_ids": 158
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n",
        "num_ids": 143
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]) + operator[1] + str(operand[2]))\n",
        "num_ids": 40
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return s.swapcase()\n    ",
        "num_ids": 11
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s=list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i]=s[i].lower()\n            else:\n                s[i]=s[i].upper()\n    return ''.join(s)\n",
        "num_ids": 78
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \n",
        "num_ids": 5
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    res = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                res += i.upper()\n            else:\n                res += i.lower()\n        else:\n            res += i\n    return res if not s.isalpha() else res[::-1]\n",
        "num_ids": 78
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return s.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return ''.join(list(map(lambda x: x.upper() if x.islower() else x.lower(),s))) if all(x.isalpha() for x in s) else s[::-1]\n",
        "num_ids": 52
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join([s[i].lower() if s[i].isupper() else s[i].upper() if s[i].islower() else s[i] for i in range(len(s))])\n",
        "num_ids": 52
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return s.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 38
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode())\n    return md5_hash.hexdigest()\n",
        "num_ids": 50
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if text == \"\":\n        return None\n    elif text == None:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 47
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(text) == 0:\n        return None\n    else:\n        m = hashlib.md5()\n        m.update(text)\n        return m.hexdigest()\n",
        "num_ids": 46
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(text) < 1:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 42
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    md5_hash = md5(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
        "num_ids": 33
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 21
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    import hashlib\n    if text is None:\n        return None\n    if text == '':\n        return None\n    hash_obj = hashlib.md5(text.encode('utf-8'))\n    return hash_obj.hexdigest()\n",
        "num_ids": 61
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return hashlib.md5(str.encode(text)).hexdigest() if text else None\n",
        "num_ids": 25
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [i for i in range(a, b+1) if i%2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Check to see that a and b are positive integers\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise ValueError('Both a and b must be positive integers.')\n    # Create a list of integers from a to b inclusive\n    integers = [i for i in range(a, b+1)]\n    # Remove all integers not divisible by 2\n    integers = [i for i in integers if i%2 == 0]\n    return integers\n",
        "num_ids": 115
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    evens = [n for n in range(a,b+1) if n % 2 == 0]\n    return evens\n",
        "num_ids": 31
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i for i in range(a+1, b) if not i % 2]\n",
        "num_ids": 23
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    integers = []\n    i = a\n    while i <= b:\n        if i % 2 == 0:\n            integers.append(i)\n        i += 1\n    return integers\n",
        "num_ids": 46
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    integers = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers\n",
        "num_ids": 42
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    array = []\n",
        "num_ids": 6
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return []\n",
        "num_ids": 5
    }
]