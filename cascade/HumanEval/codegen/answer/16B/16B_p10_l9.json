[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i, j in range(0, len(numbers) - 1):\n        if abs(numbers[i] - numbers[j]) < threshold:\n            return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n = len(numbers)\n    for i in range(0, n):\n        for j in range(0, n):\n            if i!= j:\n                if abs(numbers[i] - numbers[j]) < threshold:\n                    return True\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    numbers = sorted(numbers)\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return any([\n            len(numbers) > 1 and\n            all([\n                abs(numbers[i] - numbers[i + 1]) <= threshold for i in range(len(numbers) - 1)\n            ])\n        for i in range(len(numbers))\n    ])\n",
        "num_ids": 69
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold and i!= j:\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numbers = sorted(numbers)\n    for i in range(0, len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def separate_groups(open_parentheses: int, close_parentheses: int, group: str, result: list):\n        \"\"\" Add each pair of open/close parentheses into the result and recurse into the next group. \"\"\"\n        if open_parentheses < 0 or close_parentheses < 0:\n            return\n        elif open_parentheses == 0 and close_parentheses == 0:\n            result.append(group)\n        else:\n            separate_groups(open_parentheses-1, close_parentheses, group+'(', result)\n            separate_groups(open_parentheses, close_parentheses-1, group+')', result)\n",
        "num_ids": 154
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # empty string is balanced, empty list is not\n    paren_groups = []\n",
        "num_ids": 20
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    groups = []\n    group = []\n    for i, char in enumerate(paren_string):\n        if char == \"(\":\n            group.append(char)\n            stack.append(i)\n        if char == \")\":\n            if len(stack) == 0:\n                groups.append(\"\".join(group))\n                group = []\n            else:\n                group.append(char)\n                stack.pop()\n        if len(stack) > 0:\n            group.append(char)\n        else:\n            groups.append(\"\".join(group))\n            group = []\n",
        "num_ids": 159
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    paren_groups = []\n    current_paren_group = []\n    parens_seen = 0\n    for paren in paren_string:\n        if paren == '(':\n            parens_seen += 1\n        elif paren == ')':\n            parens_seen -= 1\n        current_paren_group.append(paren)\n        if parens_seen == 0:\n            if current_paren_group:\n                paren_groups.append(''.join(current_paren_group))\n                current_paren_group = []\n    return paren_groups\n",
        "num_ids": 135
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # initialise an empty stack, list to store the resultant strings, and an index\n    stack = []\n    result = []\n    index = 0\n",
        "num_ids": 35
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    groups = []\n    group = ''\n    paren_stack = []\n    for char in paren_string:\n        if char =='':\n            continue\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Missing open paren')\n            paren_stack.pop()\n        if len(paren_stack) == 0:\n            group += char\n            if char == '(':\n                groups.append(group)\n                group = ''\n    if len(group) > 0:\n        groups.append(group)\n    return groups\n",
        "num_ids": 154
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result_list = []\n    group_string = ''\n",
        "num_ids": 15
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return_list = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            if len(temp)!= 0:\n                return_list.append(temp)\n                temp = ''\n            temp += char\n        elif char == ')':\n            if len(temp)!= 0:\n                return_list.append(temp)\n                temp = ''\n            temp += char\n        else:\n            if char =='':\n                if len(temp)!= 0:\n                    return_list.append(temp)\n                temp = ''\n            else:\n                temp += char\n    if len(temp)!= 0:\n        return_list.append(temp)\n    return return_list\n",
        "num_ids": 170
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # take care of spacing\n    paren_string = paren_string.replace(\" \", \"\")\n",
        "num_ids": 24
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    nested_group_list = ['']\n    paren_stack = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Missing open parentheses')\n            else:\n                paren_stack.pop()\n        if paren =='':\n            continue\n        nested_group_list[-1] += paren\n    return [group for group in nested_group_list if group!= '']\n",
        "num_ids": 138
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    decimal_part = number % 1\n    return int(decimal_part * 10**16) / 10**16\n",
        "num_ids": 29
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return int(number) - int(number)\n",
        "num_ids": 13
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    _int, _dec = divmod(number, 1)\n    return _dec\n",
        "num_ids": 21
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    i, decimal = divmod(number, 1)\n    return decimal\n",
        "num_ids": 18
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return int(number) - int(number)\n",
        "num_ids": 13
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if number == int(number):\n        return 0\n",
        "num_ids": 14
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return int(number * 10) % 10\n",
        "num_ids": 12
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    integer, decimal = divmod(number, 1)\n    if decimal == 0:\n        decimal = 0.0\n    return decimal\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(operations) == 0:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(operations) == 0:\n        return False\n    if operations[0] < 0:\n        return True\n    else:\n        return below_zero(operations[1:])\n",
        "num_ids": 47
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # YOUR CODE HERE\n    if operations == []:\n        return False\n    if operations[0] < 0:\n        return True\n    if len(operations) == 1:\n        return False\n    for i in range(1, len(operations)):\n        if (operations[i] < 0) and (operations[i-1] < 0):\n            return True\n    return False\n    pass\n",
        "num_ids": 97
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if sum(operations) < 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    is_below_zero = False\n",
        "num_ids": 10
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = 0\n    while i < len(operations):\n        if operations[i] < 0:\n            return True\n        else:\n            i = i + 1\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Mean of the list of numbers\n    mean = sum(numbers) / len(numbers)\n",
        "num_ids": 25
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    mean = sum(numbers) / len(numbers)\n    mad = sum(map(abs, map(lambda x: x - mean, numbers))) / len(numbers)\n    return mad\n",
        "num_ids": 47
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n    mean = sum(numbers) / len(numbers)\n    for number in numbers:\n        result += abs(number - mean)\n    return result / len(numbers)\n",
        "num_ids": 48
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(map(abs, numbers)) / len(numbers)\n",
        "num_ids": 18
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    numbers_mean = mean(numbers)\n    mad_sum = 0\n    for number in numbers:\n        mad_sum += abs(number - numbers_mean)\n    mad = mad_sum / len(numbers)\n    return mad\n",
        "num_ids": 58
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if numbers:\n        return sum(abs(n - mean(numbers)) for n in numbers) / len(numbers)\n    return 0.0\n",
        "num_ids": 37
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = len(numbers)\n    x_mean = sum(numbers) / n\n    absolute_differences = []\n    for x in numbers:\n        absolute_differences.append(abs(x - x_mean))\n",
        "num_ids": 55
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # TODO: Implement here\n    pass\n    pass\n",
        "num_ids": 17
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(numbers) == 0:\n        return []\n    return [numbers[0]] + [delimeter] * (len(numbers)-1) + [numbers[-1]]\n",
        "num_ids": 47
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert delimeter not in numbers, \"delimeter must not be in input list\"\n    assert len(numbers) >= 2, \"input list must have at least 2 elements\"\n    if len(numbers) == 2:\n        return numbers + [delimeter]\n    else:\n        return intersperse(numbers[0:-1], delimeter) + [numbers[-1]]\n",
        "num_ids": 90
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers = [delimeter] * (len(numbers) - 1) + numbers\n    return numbers\n",
        "num_ids": 26
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not numbers:\n        return []\n    else:\n        return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter) if numbers[1:] else [numbers[0]]\n",
        "num_ids": 55
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [delimeter] + [numbers[i] for i in range(len(numbers) - 1)] + [delimeter] if numbers else []\n",
        "num_ids": 37
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert isinstance(numbers, list)\n    assert isinstance(delimeter, int)\n    assert len(numbers) >= 1\n    assert delimeter >= 0\n    if len(numbers) == 1:\n        return [delimeter] + numbers\n    if delimeter == 0:\n        return numbers\n    return [delimeter] + numbers + [delimeter] + intersperse(numbers, delimeter)\n",
        "num_ids": 97
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if delimeter == 0:\n        return numbers\n    res = [delimeter]\n    for i in range(len(numbers)-1):\n        res.append(numbers[i])\n        res.append(delimeter)\n    res.append(numbers[-1])\n    return res\n",
        "num_ids": 71
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if delimeter == 0:\n        raise Exception(\"Delimiter cannot be 0!\")\n    return [delimeter] * (len(numbers) - 1) + numbers\n",
        "num_ids": 41
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    list_of_delimeter = [delimeter] * len(numbers)\n    return list_of_delimeter[:-1] + numbers + list_of_delimeter[-1:]\n",
        "num_ids": 46
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    answer = []\n",
        "num_ids": 6
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    nest_counts = []\n    current_nest_count = 0\n    nested_parens = paren_string.split(\" \")\n    for paren in nested_parens:\n        if paren == \"(\":\n            current_nest_count += 1\n        elif paren == \")\":\n            current_nest_count -= 1\n            if current_nest_count == 0:\n                nest_counts.append(current_nest_count)\n    return nest_counts\n",
        "num_ids": 122
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    paren_list = paren_string.split()\n    # initialize an empty list to store levels of nesting\n    nested_paren_list = []\n    # loop through paren_list to find number of levels of nesting\n    for item in paren_list:\n        if item == '(':\n            nested_paren_list.append(item)\n        elif item == ')':\n            nested_paren_list.pop()\n    return nested_paren_list\n",
        "num_ids": 110
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: Implement me\n    # parsed = []\n    # list_of_parsed = []\n    # counter = 0\n    # for element in paren_string:\n    #     counter += 1\n    #     if element == '(':\n    #         parsed.append(element)\n    #     elif element == ')':\n    #         parsed.pop()\n    #         list_of_parsed.append(counter)\n    #         counter = 0\n    #     else:\n    #         raise TypeError('Invalid character encountered in the string')\n    # if counter > 0:\n    #     list_of_parsed.append(counter)\n    # return list_of_parsed\n    return [p.count('(') - p.count(')') for p in paren_string.split()]\n",
        "num_ids": 200
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    parens_list = paren_string.split()\n    ans = []\n    for i in parens_list:\n        counter = 0\n        max_depth = 0\n        for c in i:\n            if c == \"(\":\n                counter += 1\n            elif c == \")\":\n                counter -= 1\n            if counter > max_depth:\n                max_depth = counter\n        ans.append(max_depth)\n    return ans\n",
        "num_ids": 106
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    nested_group = paren_string.split(\" \")\n    result = []\n    for group in nested_group:\n        result.append(count_nested_parens(group))\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    nested_parens = paren_string.split()\n    nested_parens_list = []\n    for paren in nested_parens:\n        current_level = 0\n        for char in paren:\n            if char == '(':\n                current_level += 1\n            elif char == ')':\n                current_level -= 1\n        nested_parens_list.append(current_level)\n    return nested_parens_list\n",
        "num_ids": 108
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # first we need to split the string into groups\n    groups = paren_string.split()\n",
        "num_ids": 24
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Convert the string of parentheses into a list of nested parentheses.\n    # Note: The string has to be evaluated in order.\n    # E.g. '() () () (((())) ())'\n    #   1. Parse each group from left to right.\n    #   2. From each group, remove its right most ')' and add to output.\n    #   3. Add this removed right most ')' into the list of open parentheses.\n    #   4. If the list of open parentheses is empty, then remove the right most '(' and add to output.\n    #   5. Repeat steps 1-4 until the list of open parentheses is empty.\n    #   6. Return the list of removed right most parentheses.\n    parsed_parens = []\n    # Convert the string of parentheses into a list of nested parentheses.\n    # Note: The string has to be evaluated in order.\n    for index in range(len(paren_string)):\n        # Return the index of the right most ')' for the current group.\n        right_most_index = find_right_most_index(paren_string, index)\n        # Add this right most ')' into the list of open parentheses.\n        parsed_parens.append(right_most_index)\n        # If the list of open parentheses is empty, then remove the right most '(' and add to output.\n        if not parsed_parens:\n            left_most_index = find_left_most_index(paren_string, index)\n            # Remove the right most ')' and add to output.\n            parsed_parens.append(left_most_index)\n    return parsed_parens\n",
        "num_ids": 383
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return [s for s in strings if substring in s]\n    return [s for s in strings if substring in s and len(s) > len(substring)]\n",
        "num_ids": 42
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [s for s in strings if substring in s]\n    \n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sum_, product_ = 0, 1\n    for num in numbers:\n        sum_ += num\n        product_ *= num\n    return sum_, product_\n",
        "num_ids": 40
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if numbers == []:\n        return (0, 1)\n    else:\n        product = 1\n        sum = 0\n        for i in numbers:\n            product *= i\n            sum += i\n        return (sum, product)\n",
        "num_ids": 56
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # if the list is empty return (0,1)\n    if not numbers:\n        return (0, 1)\n    # multiply all the numbers in the list together\n    product = 1\n    for number in numbers:\n        product *= number\n    # add all the numbers in the list together\n    sum_ = sum(numbers)\n    return (sum_, product)\n",
        "num_ids": 88
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert len(numbers)!= 0, \"Empty list\"\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sum_ = 0\n    prod = 1\n    for number in numbers:\n        sum_ += number\n        prod *= number\n    return (sum_, prod)\n",
        "num_ids": 42
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n",
        "num_ids": 38
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # sum = 0\n    # product = 1\n    # for number in numbers:\n    #     sum += number\n    #     product *= number\n    # return (sum, product)\n",
        "num_ids": 45
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers_sum = 0\n    numbers_product = 1\n    for number in numbers:\n        numbers_sum += number\n        numbers_product *= number\n",
        "num_ids": 41
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # if len(numbers) == 1:\n    #     return [numbers[0]]\n    # else:\n    #     return [max(numbers[0], numbers[1])] + rolling_max(numbers[2:])\n    if len(numbers) == 1:\n        return [numbers[0]]\n    max_list: List[int] = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n        max_list.append(max(numbers[i], max_list[i - 1]))\n    return max_list\n",
        "num_ids": 148
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > result[-1]:\n            result.append(numbers[i])\n        else:\n            result.append(result[-1])\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[0])\n        else:\n            result.append(max(numbers[:i+1]))\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(numbers) == 0:\n        return []\n",
        "num_ids": 16
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[0])\n        else:\n            max_list.append(max(numbers[i], max_list[i - 1]))\n    return max_list\n",
        "num_ids": 75
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    result.append(numbers[0])\n    for i in range(1, len(numbers)):\n        if numbers[i] > result[i-1]:\n            result.append(numbers[i])\n        else:\n            result.append(result[i-1])\n    return result\n",
        "num_ids": 77
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    res = []\n    for i in range(len(numbers)):\n        tmp = []\n        for j in range(i+1, len(numbers) + 1):\n            tmp.append(numbers[j-1])\n            if len(tmp) > 1:\n                res.append(max(tmp))\n    return res\n",
        "num_ids": 80
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(numbers) == 0:\n        return []\n    rolling_max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > rolling_max_list[-1]:\n            rolling_max_list.append(numbers[i])\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list\n",
        "num_ids": 108
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst = []\n    for i in range(len(numbers)):\n        current_value = numbers[i]\n        lst.append(current_value)\n        for j in range(i+1, len(numbers)):\n            if numbers[j] > current_value:\n                current_value = numbers[j]\n        lst.append(current_value)\n",
        "num_ids": 91
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(string) <= 1:\n        return string\n    else:\n        palindrome = is_palindrome(string)\n        while palindrome is False:\n            if len(string) == 0:\n                return ''\n            if len(string) == 1:\n                return string\n            # Find the longest postfix of supplied string that is a palindrome.\n            prefix, postfix = palindrome_of_postfix(string)\n            string = string[:-len(prefix)]\n            palindrome = is_palindrome(string)\n            # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n        return string + prefix[::-1]\n",
        "num_ids": 168
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = len(string)\n    for i in range(1, n+1):\n        prefix = string[:i][::-1]\n        if is_palindrome(prefix):\n            suffix = string[i:]\n            return prefix + suffix\n",
        "num_ids": 61
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return string + string[::-1][1:]",
        "num_ids": 13
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if is_palindrome(string):\n        return string\n    \n    string_prefix = string[:len(string)//2]\n    string_suffix = string[::-1]\n    string_postfix = string_suffix[:-len(string_suffix)//2]\n    return string_prefix + string_postfix\n",
        "num_ids": 81
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Find the longest palindromic postfix\n    lpf = find_longest_palindrome_from(string)\n",
        "num_ids": 31
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n    prefix = string[:len(string)-len(longest_palindrome_suffix)]\n    return prefix + longest_palindrome_suffix[::-1]\n",
        "num_ids": 68
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    postfix = longest_palindrome_postfix(string)\n    return string + postfix[::-1]\n",
        "num_ids": 29
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max_palindrome_len = find_max_palindrome_len(string)\n    palindrome = string[-1:max_palindrome_len+1:][::-1]\n    return string + palindrome[1:]\n",
        "num_ids": 60
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    length = len(string)\n    suffix_str = longest_palindrome_suffix(string)\n    return string + suffix_str[::-1]\n",
        "num_ids": 40
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    prefix, suffix = get_longest_palindromic_suffix(string)\n    return prefix + suffix[::-1]\n",
        "num_ids": 33
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a, b = list(a), list(b)\n    len_a, len_b = len(a), len(b)\n    if len_a < len_b:\n        a, b = b, a\n        len_a, len_b = len_b, len_a\n    c = list()\n    for i in range(len_a):\n        if a[i] == b[i]:\n            c.append('0')\n        else:\n            c.append('1')\n    return ''.join(c)\n",
        "num_ids": 128
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "num_ids": 33
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "num_ids": 33
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "num_ids": 34
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(a)!= len(b):\n        raise ValueError(\"len of a and b must be equal\")\n    \n    res = ''\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            res += '1'\n        else:\n            res += '0'\n    return res\n",
        "num_ids": 82
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return bin(int(a, 2) ^ int(b, 2))[2:]\n",
        "num_ids": 22
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert len(a) == len(b),'strings must have equal length'\n    return ''.join(['1' if a[i]!= b[i] else '0' for i in range(len(a))])\n",
        "num_ids": 55
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(a)!= len(b):\n        raise ValueError('Input strings must have the same length')\n    res = ''\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n",
        "num_ids": 68
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert len(a) == len(b)\n    assert len(a) > 0\n    assert len(a) % 2 == 0\n    assert len(b) > 0\n    assert len(b) % 2 == 0\n",
        "num_ids": 53
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "num_ids": 33
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n    max_length = max(map(len, strings))\n    return strings[0] if all(map(lambda s: len(s) == max_length, strings)) else max(strings, key=len)\n",
        "num_ids": 60
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # how would you implement this if you didn't have Python's built-in max() function?\n    # max(len(string) for string in strings)\n    # if all(len(string) == len(strings[0]) for string in strings):\n    #     return strings[0]\n",
        "num_ids": 68
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n    longest_string = sorted(strings, key=len)[-1]\n    return longest_string\n",
        "num_ids": 35
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if strings:\n        return sorted(strings, key=len)[-1]\n    else:\n        return None\n",
        "num_ids": 28
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not strings:\n        return None\n    return sorted(strings, key=len)[-1]\n",
        "num_ids": 25
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string\n",
        "num_ids": 66
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # return max(strings, key=len)\n    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 34
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not strings:\n        return None\n    max_length = max(len(x) for x in strings)\n    return next(x for x in strings if len(x) == max_length)\n",
        "num_ids": 48
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 22
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return gcd(a, b)\n",
        "num_ids": 11
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    while b > 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 23
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n",
        "num_ids": 38
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return b if a == 0 else greatest_common_divisor(b % a, a)\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return gcd(abs(a), abs(b))\n",
        "num_ids": 15
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    while b > 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 23
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n",
        "num_ids": 29
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if a < b:\n        a, b = b, a\n",
        "num_ids": 17
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if a < b:\n        a, b = b, a\n",
        "num_ids": 17
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        prefixes.append(prefix)\n    return prefixes\n",
        "num_ids": 44
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    all_prefixes = []\n    all_prefixes.append(string)\n    while len(string) > 0:\n        string = string[:-1]\n        all_prefixes.append(string)\n    return all_prefixes\n",
        "num_ids": 57
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    prefixes = list()\n    for i in range(len(string) + 1):\n        prefixes.append(string[0:i])\n    return prefixes\n",
        "num_ids": 40
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    result.append(string[0:1])\n    result.append(string[0:2])\n    result.append(string[0:3])\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    all_prefixes = []\n    for i in range(len(string)):\n        all_prefixes.append(string[:i+1])\n    return all_prefixes\n",
        "num_ids": 44
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert string is not None\n    assert type(string) == str\n    prefixes = []\n    for i in range(len(string)):\n        new_prefixes = prefixes.copy()\n        for j in range(len(prefixes)):\n            new_prefixes[j] += string[i]\n        prefixes.extend(new_prefixes)\n    return prefixes\n",
        "num_ids": 92
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [string[:i] for i in range(len(string))]\n",
        "num_ids": 20
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(string) == 0:\n        return ['']\n    prefixes = [string[:i] for i in range(len(string))]\n    return prefixes + all_prefixes(string[1:])\n",
        "num_ids": 54
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \" \".join([str(x) for x in range(n + 1)])\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n",
        "num_ids": 18
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n",
        "num_ids": 18
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return''.join(map(str, range(n + 1)))\n",
        "num_ids": 17
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return''.join(str(i) for i in range(0, n + 1))\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \" \".join(str(i) for i in range(n+1))\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return \" \".join(str(i) for i in range(n + 1))\n",
        "num_ids": 23
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \" \".join(str(i) for i in range(n+1))\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return''.join(list(map(str,range(n+1))))\n",
        "num_ids": 19
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    counter = {}\n    for char in string:\n        if char.isalpha():\n            char = char.lower()\n            if char in counter:\n                counter[char] += 1\n            else:\n                counter[char] = 1\n    return len(counter)\n",
        "num_ids": 63
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # a) build a dictionary to store the count of each character\n    # b) iterate through the string, and use the dictionary to count the total number of distinct characters\n    pass\n",
        "num_ids": 42
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    characters = set()\n    for c in string:\n        if c.isalpha():\n            characters.add(c.lower())\n    return len(characters)\n",
        "num_ids": 42
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    my_dict = {}\n    \n    for char in string:\n        my_dict[char] = 1\n    \n    return len(my_dict)\n",
        "num_ids": 40
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len(set([x.lower() for x in string]))\n",
        "num_ids": 18
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    distinct_characters = set()\n    for char in string.lower():\n        distinct_characters.add(char)\n    return len(distinct_characters)\n",
        "num_ids": 43
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    chars = set()\n    for c in string:\n        chars.add(c.lower())\n    return len(chars)\n",
        "num_ids": 34
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    characters = set()\n    for c in string.lower():\n        if c.isalpha():\n            characters.add(c)\n    return len(characters)\n",
        "num_ids": 42
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    music = music_string.split()\n    beats = []\n    for note in music:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n        elif note == '|':\n            beats.append(1)\n        elif note == '|.':\n            beats.append(0.5)\n    return beats\n",
        "num_ids": 121
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    beats = []\n    for music_unit in music_string.split('|'):\n        beats.append(len(music_unit))\n    return beats\n",
        "num_ids": 40
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n",
        "num_ids": 27
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    current_note = ''\n    notes_list = []\n    for char in music_string:\n        if char in ('o', 'o|', '.', '.'|'):\n            current_note += char\n        elif current_note:\n            notes_list.append(4 if current_note == 'o' else 2 if current_note == 'o|' else 1)\n            current_note = ''\n    return notes_list\n",
        "num_ids": 103
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    music = music_string.split('|')\n    result = []\n    for x in music:\n        result.append(len(x.split(' ')))\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    res = []\n    for i in range(len(music_string)):\n        if music_string[i] == '.' or music_string[i] == 'o':\n            res.append(4)\n        elif music_string[i] == 'o':\n            res.append(4)\n        elif music_string[i] == '|':\n            if music_string[i-1] == '.' or music_string[i-1] == 'o':\n                res.append(2)\n            else:\n                res.append(1)\n    return res\n",
        "num_ids": 138
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    music_string = music_string.replace('\\n', '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('|', '')\n    music_string = music_string.replace('.', '')\n    music_list = music_string.split('o')\n    beat_list = []\n    for x in range(len(music_list)):\n        if x % 2 == 0:\n            beat_list.append(len(music_list[x]) // 4)\n    return beat_list\n",
        "num_ids": 134
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    parsed_string = music_string.replace('\\n', '')\n    parsed_string = parsed_string.replace(' ', '')\n    parsed_string = parsed_string.split('|')\n    notes_to_parse = parsed_string\n    result = []\n    for note in notes_to_parse:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result\n",
        "num_ids": 135
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    music = music_string.split('|')\n    result = []\n    for i in music:\n        if i == '':\n            continue\n        else:\n            count = 0\n            for j in i:\n                if j == 'o':\n                    count += 1\n                elif j == '.':\n                    count +=.5\n                else:\n                    count +=.25\n            result.append(count)\n    return result\n",
        "num_ids": 101
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    parsed = music_string.split('|')\n    return list(map(lambda s: len(s), parsed))\n",
        "num_ids": 31
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # your code here\n",
        "num_ids": 7
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    counter = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            counter += 1\n    return counter\n",
        "num_ids": 42
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i, count = 0, 0\n    while i < len(string):\n        while i < len(string) and string[i]!= substring[0]:\n            i += 1\n        if i < len(string) and string[i] == substring[0]:\n            i += 1\n            count += 1\n            while i < len(string) and string[i] == substring[0]:\n                i += 1\n    return count\n",
        "num_ids": 104
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # counter = 0\n    # for i in range(len(string)):\n    #     if string[i:].startswith(substring):\n    #         counter += 1\n    # return counter\n    return string.count(substring)\n",
        "num_ids": 59
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    counter = 0\n    for i, char in enumerate(string):\n        if char == substring[0] and string[i:].startswith(substring):\n            counter += 1\n    return counter\n",
        "num_ids": 50
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    number_of_times = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i : i + len(substring)] == substring:\n            number_of_times += 1\n    return number_of_times\n",
        "num_ids": 65
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for index, character in enumerate(string):\n        if character == substring[0]:\n            if substring == string[index:index + len(substring)]:\n                count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    current_count, prev_count = 0, 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            if current_count == prev_count:\n                current_count += 1\n            else:\n                current_count = 1\n            prev_count = i+len(substring)\n        if current_count == prev_count:\n            current_count += 1\n        else:\n            current_count = 0\n    return prev_count\n",
        "num_ids": 121
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    index = 0\n    for i, c in enumerate(string):\n        if c == substring[index]:\n            index += 1\n            if index == len(substring):\n                count += 1\n                index = 0\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    counter = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            counter += 1\n    return counter",
        "num_ids": 52
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    result =''.join(sorted(numbers.split(' '), key=lambda x: int(x)))\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Split the string\n    numbers_list = numbers.split()\n    # Sort and return\n    return''.join(sorted(numbers_list))\n",
        "num_ids": 38
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers = numbers.split()\n    numbers = list(map(int, numbers))\n    numbers = sorted(numbers)\n    numbers = list(map(str, numbers))\n    result = \"\"\n    for number in numbers:\n        result = result + number + \" \"\n    return result.strip()\n",
        "num_ids": 75
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Sort each list of numbers.\n    # Merge the sorted lists into one.\n    # Lastly return the string\n    numbers = numbers.split(\" \")\n    numbers = sorted(numbers)\n    numbers =''.join(numbers)\n    return numbers\n",
        "num_ids": 63
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return''.join(sorted(numbers.split(), key=int))\n",
        "num_ids": 19
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return''.join(sorted(numbers.split()))\n",
        "num_ids": 16
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Create list of numbers in string\n    list_of_numbers = numbers.split(' ')\n    \n    # Sort the list of numbers\n    list_of_numbers.sort()\n    \n    # Join the list of numbers into string\n    return''.join(list_of_numbers)\n",
        "num_ids": 71
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # split the string into a list\n    numbers_list = numbers.split(' ')\n    # sort the list in ascending order\n    numbers_list.sort()\n    # return the string joined by space delimiters\n    return''.join(numbers_list)\n",
        "num_ids": 64
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    digits = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']\n    numbers_list = [digit for digit in numbers.split()]\n    numbers_list.sort(key=lambda digit: digits.index(digit))\n    return''.join(numbers_list)\n",
        "num_ids": 82
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers_list = numbers.split(' ')\n    numbers_list.sort()\n    numbers_list.reverse()\n    return''.join(numbers_list)\n",
        "num_ids": 43
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[-1])\n",
        "num_ids": 22
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # find two closest numbers and return them in order\n    # starting with an arbitrary number in the list\n    start = 0\n    closest = numbers[start]\n    for i in range(len(numbers) - 1):\n        # iterate until you find the two closest numbers in the list\n        if abs(numbers[i] - numbers[i + 1]) < abs(closest - numbers[i + 1]):\n            start = i\n            closest = numbers[i]\n",
        "num_ids": 115
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # TODO: Implement me!\n    #raise NotImplementedError(\"TODO\")\n",
        "num_ids": 24
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # TODO: Implement me!\n    # raise NotImplementedError()\n    temp_numbers = numbers[:]\n    for i in range(len(temp_numbers)):\n        for j in range(i+1, len(temp_numbers)):\n            if(temp_numbers[i] < temp_numbers[j]):\n                temp_numbers[i],temp_numbers[j] = temp_numbers[j],temp_numbers[i]\n    return temp_numbers[-2:]\n",
        "num_ids": 126
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    numbers = sorted(numbers)\n    return (numbers[0], numbers[-1])\n",
        "num_ids": 25
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(numbers) < 2:\n        raise Exception(\"List must have at least two numbers\")\n    min_n = numbers[0]\n    max_n = numbers[0]\n    for n in numbers:\n        if n < min_n:\n            min_n = n\n        if n > max_n:\n            max_n = n\n    numbers.sort()\n    index = 0\n    while index < len(numbers) - 1:\n        if numbers[index] == min_n or numbers[index] == max_n:\n            index += 1\n            continue\n        if abs(min_n - numbers[index]) < abs(max_n - numbers[index]):\n            max_n = numbers[index]\n            break\n        if abs(min_n - numbers[index]) > abs(max_n - numbers[index]):\n            min_n = numbers[index]\n            break\n        index += 1\n    return (min_n, max_n)\n",
        "num_ids": 231
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numbers.sort()\n    a = numbers[-1] - numbers[0]\n    b = numbers[1] - numbers[0]\n    c = numbers[-1] - numbers[1]\n    if a < b:\n        if b < c:\n            return (numbers[0], numbers[1])\n        else:\n            return (numbers[0], numbers[-1])\n    else:\n        if b < c:\n            return (numbers[1], numbers[0])\n        else:\n            return (numbers[-1], numbers[0])\n",
        "num_ids": 136
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[-2])\n",
        "num_ids": 22
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # if there are no more than two elements in the list, return two that are closest to each other\n    if len(numbers) <= 2:\n        return (numbers[0], numbers[1])\n    else:\n        # initialize the min_difference variable\n        min_difference = 0\n        # initialize the first and second elements\n        first_element = numbers[0]\n        second_element = numbers[1]\n        # loop through every element except the first two\n        for i in range(2, len(numbers)):\n            # calculate the difference between the current element and the first element\n            first_difference = numbers[i] - first_element\n            # calculate the difference between the current element and the second element\n            second_difference = numbers[i] - second_element\n            # check if the difference between the first element and the current element is less than the\n            # difference between the second element and the current element\n            if first_difference < second_difference:\n                # update the first difference variable\n                first_difference = second_difference\n                # update the second difference variable\n                second_difference = numbers[i] - first_element\n            # check if the difference between the second element and the current element is less than the\n            # difference between the first element and the current element\n            if second_difference < first_difference:\n                # update the first difference variable\n                first_difference = numbers[i] - second_element\n                # update the second difference variable\n                second_difference = first_element - numbers[i]\n            # if the difference between the current element and the first element is less than the difference between\n            # the current element and the second element, update the min_difference variable\n            if first_difference < min_difference:\n                min_difference = first_difference\n                # update the first element variable\n                first_element = numbers[i]\n            # if the difference between the current element and the second element is less than the difference between\n            # the current element and the first element, update the min_difference variable\n            if second_difference < min_difference:\n                min_difference = second_difference\n                # update the second element variable\n                second_element = numbers[i]\n        # return the first and second element variables\n        return (first_element, second_element)\n",
        "num_ids": 541
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not numbers:\n        raise Exception(\"Expected numbers to be non empty\")\n    assert len(numbers) > 1, \"Expected numbers to be of at least size 2\"\n",
        "num_ids": 43
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    else:\n        return [\n            (n - min(numbers)) / (max(numbers) - min(numbers))\n            for n in numbers\n        ]\n",
        "num_ids": 56
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [((num - min_number) / (max_number - min_number)) for num in numbers]\n",
        "num_ids": 49
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    smallest = min(numbers)\n    largest = max(numbers)\n    new_numbers = []\n    for number in numbers:\n        new_numbers.append(\n            (number - smallest) / (largest - smallest)\n        )\n    return new_numbers\n",
        "num_ids": 67
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    numbers.sort()\n    minimum = numbers[0]\n    delta = numbers[-1] - minimum\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - minimum) / delta\n    return numbers\n",
        "num_ids": 64
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Let's work with numbers bigger than 0.0, since it will be easier\n    numbers = [n if n > 0.0 else 0.0 for n in numbers]\n    max_number = max(numbers)\n    min_number = min(numbers)\n    # We know that the smallest number must become 0.0, and the largest must become 1.0\n    scale_factor = 1.0 / (max_number - min_number)\n    return [n * scale_factor for n in numbers]\n",
        "num_ids": 120
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a = min(numbers)\n    b = max(numbers)\n    return [(n-a)/(b-a) for n in numbers]\n",
        "num_ids": 37
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(numbers) == 0:\n        return []\n    else:\n        min_val = numbers[0]\n        max_val = numbers[0]\n        for num in numbers:\n            min_val = min(num, min_val)\n            max_val = max(num, max_val)\n        unit = (max_val - min_val)\n        return [(x - min_val) / unit for x in numbers]\n",
        "num_ids": 105
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [((n - min(numbers)) / (max(numbers) - min(numbers))) for n in numbers]\n",
        "num_ids": 31
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # min = min(numbers)\n    # max = max(numbers)\n    # return [(number - min)/(max - min) for number in numbers]\n    return [(number - min(numbers))/(max(numbers) - min(numbers)) for number in numbers]\n",
        "num_ids": 68
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [int(i) for i in values if isinstance(i, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_list = []\n    for x in values:\n        if type(x) == int:\n            new_list.append(x)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    for item in values:\n        if isinstance(item, int):\n            result.append(item)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]\n",
        "num_ids": 27
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = 0\n    for _ in string:\n        n += 1\n    return n\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return count\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for _ in string:\n        count += 1\n    return count\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for _ in string:\n        count += 1\n    return count\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    counter = 0\n    for _ in string:\n        counter += 1\n    return counter\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    counter = 0\n    for char in string:\n        counter += 1\n    return counter\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    length = 0\n    for i in string:\n        length += 1\n    return length\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    length = 0\n    for i in string:\n        length += 1\n    return length\n",
        "num_ids": 22
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    divisor = 1\n    while divisor < n:\n        divisor += 1\n        if n % divisor == 0:\n            return divisor\n    return n\n",
        "num_ids": 45
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # start by dividing the number by itself\n    divisor = n\n    while divisor > 1:\n        if n % divisor == 0:\n            return divisor\n        divisor -= 1\n    return divisor\n",
        "num_ids": 57
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    divisor = 2\n    while divisor < n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return n\n",
        "num_ids": 45
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for x in range(int(n/2), 0, -1):\n        if n % x == 0:\n            return x\n",
        "num_ids": 32
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    divisor = n - 1\n    while divisor > 0 and n % divisor!= 0:\n        divisor -= 1\n    return divisor\n",
        "num_ids": 41
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "num_ids": 33
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return n // 2 + 1\n",
        "num_ids": 9
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n",
        "num_ids": 47
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # find the smallest number s.t. n % s == 0\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 1\n",
        "num_ids": 47
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return n // i\n        i += 1\n    return 1\n",
        "num_ids": 42
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    primes = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n = n / i\n            primes.append(i)\n        else:\n            i += 1\n    return primes\n",
        "num_ids": 58
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n",
        "num_ids": 47
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    primes = []\n    for i in range(2, n + 1):\n        if i * i > n:\n            break\n        while n % i == 0:\n            primes.append(i)\n            n //= i\n    if n!= 1:\n        primes.append(n)\n    return primes\n",
        "num_ids": 78
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    factors = []\n    for f in range(2, n + 1):\n        if n % f == 0:\n            factors.append(f)\n    return factors\n",
        "num_ids": 42
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    factors = []\n    i = 2\n    while i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n = n / i\n        i += 1\n    return factors\n",
        "num_ids": 53
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 0:\n        raise ValueError(\"number is negative\")\n    i = 2\n    res = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            res.append(i)\n    if n > 1:\n        res.append(n)\n    return res\n",
        "num_ids": 86
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # variable to keep track of which index of the list we are looking at\n    i = 0\n    # variable to keep track of which number of times a number occurs in the list\n    occurrences = 0\n    # list to store the final values of the list\n    final_list = []\n    # loop through the list\n    while i < len(numbers):\n        # if the number is in the final list and it has occured more than once, \n        # remove the last occurrence of the number\n        if numbers[i] in final_list and occurrences > 0:\n            final_list.pop(final_list.index(numbers[i]))\n            occurrences -= 1\n        # if the number is not in the final list and it has occured more than once, \n        # add it to the final list\n        elif numbers[i] not in final_list and occurrences > 0:\n            final_list.append(numbers[i])\n            occurrences += 1\n        # if the number is not in the final list and it has occured once, add it to \n        # the final list\n        elif numbers[i] not in final_list and occurrences == 0:\n            final_list.append(numbers[i])\n        # increment the index\n        i += 1\n    # return the final list\n    return final_list\n",
        "num_ids": 311
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    output = []\n    for i in numbers:\n        if i not in output:\n            output.append(i)\n    return output\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = set()\n    for i in numbers:\n        if i not in s:\n            s.add(i)\n    return list(s)\n",
        "num_ids": 37
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    output = []\n    for num in numbers:\n        if num not in output:\n            output.append(num)\n    return output\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # For this problem we need to use the set() method, which turns a list of integers into a set of unique elements,\n    # and then back to a list\n    result_list = list(set(numbers))\n    return result_list\n",
        "num_ids": 57
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = set(numbers)\n    return list(s)\n",
        "num_ids": 17
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    index = 0\n    for i in range(len(numbers)):\n        if numbers[i] not in numbers[i + 1:]:\n            numbers[index] = numbers[i]\n            index += 1\n    return numbers[:index]\n",
        "num_ids": 60
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "num_ids": 45
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    duplicates = set()\n    new_list = []\n    for x in numbers:\n        if x not in duplicates:\n            new_list.append(x)\n            duplicates.add(x)\n    return new_list\n",
        "num_ids": 58
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return ''.join([char.swapcase() for char in string])\n",
        "num_ids": 19
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return ''.join([letter.swapcase() for letter in string])\n",
        "num_ids": 19
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join(str.swapcase(char) if char.isupper() else str.lower(char) for char in string)",
        "num_ids": 33
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)\n",
        "num_ids": 28
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)\n",
        "num_ids": 28
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([char.upper() if char.islower() else char.lower() for char in string])\n",
        "num_ids": 28
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join([chr(ord(i)^32) for i in string])\n",
        "num_ids": 23
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    flipped = ''\n    for letter in string:\n        if letter.isupper():\n            flipped += letter.lower()\n        else:\n            flipped += letter.upper()\n    return flipped\n",
        "num_ids": 48
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = \"\"\n    for s in strings:\n        result += s\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = ''\n    for string in strings:\n        result += string\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    if strings == []:\n        return \"\"\n    else:\n        return str(strings[0]) + concatenate(strings[1:])\n",
        "num_ids": 37
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    string = ''\n    for x in range(len(strings)):\n        string += strings[x]\n    return string\n",
        "num_ids": 30
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [i for i in strings if i.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = [string for string in strings if string.startswith(prefix)]\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [n for n in l if n > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO\n    return [n for n in l if n > 0]\n",
        "num_ids": 20
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i in l:\n        if i > 0:\n            result.append(i)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    new_list = []\n    for i in l:\n        if i > 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 38
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_list = [num for num in l if num > 0]\n    return new_list\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids": 50
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return is_prime_helper(n, 2)\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return prime_helper(n)\n    \n    \ndef prime_helper(n):\n    if n == 2:\n        return True\n    elif n < 2 or n%2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n%i == 0:\n                return False\n        return True\n",
        "num_ids": 87
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    # if n == 1:\n    #     return False\n    # for i in range(2,n):\n    #     if n % i == 0:\n    #         return False\n    # return True\n    if n == 1 or n == 2:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 105
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    div = 3\n    while div * div <= n:\n        if n % div == 0:\n            return False\n        div += 2\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        num_factors = 0\n        for i in range(3, n, 2):\n            if n % i == 0:\n                num_factors += 1\n        if num_factors > 0:\n            return False\n        else:\n            return True\n",
        "num_ids": 102
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return False\n    for k in range(2, n):\n        if n % k == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #a number is prime if and only if it has exactly two factors, that are 1 and itself.\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i = i + 1\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return n > 1 and all(n % i for i in range(2, n))\n",
        "num_ids": 22
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return n >= 2 and all(n % d for d in range(2, n))\n",
        "num_ids": 22
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # xs = [1] + [float(c) for c in xs]\n    xs = [1] + xs\n    xs_len = len(xs)\n    is_cubic = xs_len % 2 == 0 and xs_len > 2\n    if is_cubic:\n        a = xs[0]\n        b = xs[1]\n        c = xs[2]\n        d = xs[3]\n        n = xs_len - 4\n        return _cubic_interpolate(a, b, c, d, n, x)\n    else:\n        xs_len = len(xs)\n        n = xs_len - 1\n        return _linear_interpolate(xs, n, x)\n",
        "num_ids": 184
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert len(xs) % 2 == 0, \"odd number of coefficients in xs\"\n    assert xs[0]!= 0, \"first coefficient in xs must be not zero\"\n    assert all([c == 0 or c < 0 for c in xs]), \"only non zero coefficients allowed\"\n    n = len(xs)\n    # set the interval of each step\n    # the step is equal to the coefficient of the largest non zero coefficient\n    # the step is determined by the difference between the largest and the\n    # smallest coefficients\n    step = abs(xs[-1] - xs[0]) / n\n",
        "num_ids": 142
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(xs) % 2!= 0 or xs[0] == 0:\n        raise ValueError(\"The list xs must have even number of elements and the largest non zero coefficient must be positive.\")\n    return sum([-coeff / (i + 1) for i, coeff in enumerate(xs)])\n",
        "num_ids": 74
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n = len(xs)\n    if n == 0:\n        return None\n    if n == 1:\n        return -xs[0]\n    if n % 2 == 0:\n        xs_new = xs + [0]\n    else:\n        xs_new = xs\n    for x in range(0, n):\n        if xs_new[x]!= 0:\n            break\n    return -xs_new[x - 1] / xs_new[x]\n",
        "num_ids": 116
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(xs) % 2:\n        raise ValueError(\"xs must have even number of coefficients\")\n",
        "num_ids": 25
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(xs) % 2!= 0 or xs[-1] == 0:\n        raise ValueError(\"There must be an even number of coefficients and the largest non zero coefficient\")\n    xs = [0 if abs(coeff) < 1e-10 else coeff for coeff in xs]\n    signs = [-1, 1]\n    for sign in signs:\n        xs_sign = xs[:]\n        xs_sign[0] = sign * xs[0]\n        x = 0\n        while poly(xs_sign, x)!= 0:\n            x += 0.5\n        x = round(x, 2)\n        if x:\n            return x if sign == 1 else -x\n",
        "num_ids": 166
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert len(xs) % 2 == 0\n    assert max(xs)!= 0\n",
        "num_ids": 21
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for x in range(len(xs) - 1, 0, -2):\n        if xs[x - 1]!= 0:\n            return x / 2\n",
        "num_ids": 40
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"There should be an even number of coefficients.\")\n    if n < 2:\n        raise ValueError(\"There should be at least two coefficients.\")\n    if xs[0] == 0 and n == 2:\n        return 0.0\n    if xs[-1] == 0:\n        return 0.0\n    xs = sorted(xs, reverse=True)\n    for i, xi in enumerate(xs[:-1]):\n        if xi == 0:\n            continue\n        if xs[i + 1] == 0:\n            xs[i + 1] = 1.0\n        xs[i + 1] -= xi * (1 / xi)\n    x = sum([xi * math.pow(xs[i + 1], i + 1) for i, xi in enumerate(xs[:-1])])\n    return x / xs[-1]\n",
        "num_ids": 226
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of elements\")\n",
        "num_ids": 27
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    copy = l[:]\n    for i in range(len(l)):\n        if i % 3 == 0:\n            copy.remove(l[i])\n    copy.sort()\n    copy.extend(l[i] for i in range(len(l)) if i % 3!= 0)\n    return copy\n",
        "num_ids": 77
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(l)\n",
        "num_ids": 8
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [i for i in l if not (i % 3 == 0)] + [i for i in l if i % 3 == 0] + [i for i in l if not (i % 3 == 0)]\n",
        "num_ids": 49
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(l)\n",
        "num_ids": 8
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    new_list = []\n    for i in range(len(l)):\n        if i%3 == 0:\n            new_list.append(l[i])\n    return sorted(new_list) + sorted(l[len(new_list):])\n",
        "num_ids": 62
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #this is the first sorted list\n    temp = sorted(l)\n    #this is a list of the indicies where temp[i] is not divisible by 3\n    indicies_not_divisible_by_three = []\n    #this is a list of the indicies where temp[i] is divisible by 3\n    indicies_divisible_by_three = []\n    #this is a list of the values of the items in l that are divisible by 3\n    values_divisible_by_three = []\n    #this is a list of the values of the items in l that are not divisible by 3\n    values_not_divisible_by_three = []\n    #this is a list of indicies for items in l that are not divisible by 3\n    indicies_not_divisible_by_three_list = []\n    #this is a list of indicies for items in l that are divisible by 3\n    indicies_divisible_by_three_list = []\n    #this is a list of values for items in l that are divisible by 3\n    values_divisible_by_three_list = []\n    #this is a list of values for items in l that are not divisible by 3\n    values_not_divisible_by_three_list = []\n    #this is a list of indicies for items in l that are not divisible by 3\n    indicies_divisible_by_three_list = []\n    #this is a list of indicies for items in l that are divisible by 3\n    values_divisible_by_three_list = []\n    #this is a list of indicies for items in l that are divisible by 3\n    indicies_divisible_by_three_list = []\n    #this is a list of values for items in l that are divisible by 3\n    values_divisible_by_three_list = []\n    #this is a list of values for items in l that are not divisible by 3\n    values_not_divisible_by_three_list = []\n    #this is a list of indicies for items in l that are not divisible by 3\n    indicies_not_divisible_by_three_list = []\n    #this is a list of indicies for items in l that are divisible by 3\n    indicies_divisible_by_three_list = []\n    #this is a list of values for items in l that are divisible by 3\n    values_divisible_by_three_list = []\n",
        "num_ids": 588
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Separate list into two parts, by checking whether the index is divisible by three or not\n    l_div = []\n    l_not = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_div.append(i)\n        else:\n            l_not.append(i)\n",
        "num_ids": 82
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [1, 2, 3, 4, ",
        "num_ids": 1025
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # We will create a new list called new_l which will store the sorted version of l\n    new_l = []\n    # We will iterate through the list l, and we will create a variable called i\n    for i in l:\n        # We will check to see if the index i is divisible by 3. If it is not, we will add it to the list new_l\n        if i % 3!= 0:\n            # We will add the element at index i to the list new_l\n            new_l.append(i)\n        # If the element at the index i is divisible by 3, then we will just add the element at index i to the list new_l\n        else:\n            new_l.append(i)\n    # We will then sort the list new_l\n    new_l.sort()\n    return new_l\n",
        "num_ids": 198
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if l == []:\n        return []\n    elif len(l) == 1:\n        return l\n    elif l[0] % 3 == 0:\n        return [l[0]] + sort_third(l[1:])\n    else:\n        return [l[0]] + sort_third(l[1:])\n",
        "num_ids": 80
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # set function can take in a single element as well as multiple\n    return list(set(l))\n",
        "num_ids": 25
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l = sorted(set(l))\n    return l\n",
        "num_ids": 15
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    new = []\n    for i in l:\n        if i not in new:\n            new.append(i)\n    return sorted(new)\n",
        "num_ids": 36
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s = set()\n    for x in l:\n        if x not in s:\n            s.add(x)\n            yield x\n",
        "num_ids": 35
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    x = list(set(l))\n    x.sort()\n    return x\n",
        "num_ids": 21
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    max = l[0]\n    for i in l:\n        if max < i:\n            max = i\n    return max\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    largest = l[0]\n    for x in l:\n        if x > largest:\n            largest = x\n    return largest\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    maximum = l[0]\n    for i in l:\n        if i > maximum:\n            maximum = i\n    return maximum\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert isinstance(l, list), \"Input parameter is not a list\"\n    max_el = l[0]\n    for x in l:\n        if x > max_el:\n            max_el = x\n    return max_el\n",
        "num_ids": 58
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(l) == 0:\n        return None\n    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n",
        "num_ids": 54
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            if 7 in str(num):\n                count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    if n < 7:\n        return count\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('7') > 0:\n                count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    num = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0:\n            num += 1\n    return num\n",
        "num_ids": 47
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            if 7 in str(i):\n                count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    count = 0\n    for i in range(n):\n        if 7 in [int(j) for j in str(i)]:\n            if i % 11 == 0 or i % 13 == 0:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # n//10 yields the highest digit, n%10 the lowest\n    counter = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            counter += 1\n    return counter\n",
        "num_ids": 55
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            if i == 7:\n                count += 1\n    return count",
        "num_ids": 50
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numbers = []\n    for i in range(1, n+1):\n        if i%11 == 0 or i%13 == 0:\n            numbers.append(i)\n    return numbers.count(7)\n",
        "num_ids": 53
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert n >= 0, 'n must be greater than or equal to 0'\n    ans = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            ans += 1\n    return ans\n",
        "num_ids": 61
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l1 = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            l1.append(l[i])\n    l1.sort()\n    l1.extend(l[::2])\n    return l1\n",
        "num_ids": 64
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(l) == 1:\n        return l\n    else:\n        return sort_even([l[1]] + sort_even(l[2:]))\n",
        "num_ids": 40
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    new_list = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_list.append(l[i])\n    new_list.sort()\n    for i in range(len(l)):\n        if i % 2 == 1:\n            new_list.append(l[i])\n    return new_list\n",
        "num_ids": 88
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [v for v in sorted(l[1::2])] + [v for v in l[::2]]\n",
        "num_ids": 29
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return l[0::2] + sorted(l[1::2])\n",
        "num_ids": 19
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [l[i] for i in range(len(l)) if i % 2 == 0] + sorted([l[i] for i in range(len(l)) if i % 2!= 0])\n",
        "num_ids": 49
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # return l[::2] + sorted(l[1::2])\n    l1 = []\n    l2 = []\n    l3 = []\n    # i=0\n    for i in l:\n        if i % 2!= 0:\n            l1.append(i)\n        elif i % 2 == 0:\n            l2.append(i)\n    l1.sort()\n    l2.sort()\n    l3 = l1+l2\n    return l3\n",
        "num_ids": 117
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l_odd = l[::2]\n    l_even = sorted(l[1::2])\n    return l_odd + l_even\n",
        "num_ids": 36
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l_even = [x for (i, x) in enumerate(l) if i%2==0]\n    l_even.sort()\n    return [l[i] for (i, _) in enumerate(l) if i%2 == 0] + l_even\n",
        "num_ids": 67
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #So I think I'll have to use a list comprehension\n    #check if the index is odd, and if it is, do nothing\n    #if it's even, take the even index of the list and put it in a new list\n    #then return the new list, but sorted\n    l1 = [x for i,x in enumerate(l) if i%2 == 0]\n    l2 = sorted(l1)\n    return l2\n",
        "num_ids": 104
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # split string into groups. Each group of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # return decoded string.\n    return \"\".join(groups)\n",
        "num_ids": 109
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # concatenate elements into a string.\n    return \"\".join(groups)\n",
        "num_ids": 119
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group.\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 89
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "num_ids": 77
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # reverse cyclic encoding and return string.\n    return encode_cyclic(s)[::-1]",
        "num_ids": 25
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # first split string to groups of 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group.\n    groups = [group[::-1] for group in groups]\n    return \"\".join(groups)",
        "num_ids": 85
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups\n    return \"\".join(groups)\n",
        "num_ids": 113
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return encode_cyclic(s)[::3]\n",
        "num_ids": 14
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    fib_n_1 = 1\n    fib_n_2 = 2\n    fib_n = 0\n",
        "num_ids": 29
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    fib = [1,2]\n    while len(fib) <= n:\n        nth = fib[-1] + fib[-2]\n        fib.append(nth)\n    return fib[n]\n",
        "num_ids": 55
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    fib_sum = lambda n: n*n + n + 2\n    \n    def is_prime(x: int) -> bool:\n        \"\"\"\n        checks if n is prime\n        >>> is_prime(4)\n        False\n        >>> is_prime(23)\n        True\n        >>> is_prime(2)\n        True\n        >>> is_prime(1)\n        False\n        \"\"\"\n        if x < 2:\n            return False\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n        \n    def is_fibonacci(n: int) -> bool:\n        \"\"\"\n        checks if n is a Fibonacci number\n        >>> is_fibonacci(5)\n        True\n        >>> is_fibonacci(6)\n        False\n        >>> is_fibonacci(0)\n        False\n        >>> is_fibonacci(-3)\n        False\n        \"\"\"\n        if n == 0 or n == 1:\n            return True\n        else:\n            n_1 = 0\n            n_2 = 1\n            while True:\n                if n_1 + n_2 == n:\n                    return True\n                elif n_1 + n_2 > n:\n                    return False\n                n_1, n_2 = n_2, n_1 + n_2\n    \n    def count_fib(n: int) -> int:\n        \"\"\"\n        returns how many Fibonacci numbers are less than n\n        >>> count_fib(10)\n        1\n        >>> count_fib(16)\n        7\n        >>> count_fib(100)\n        25\n        >>> count_fib(200)\n        101\n        >>> count_fib(1000)\n        489\n        \"\"\"\n        i = 1\n        fib_sum_min = fib_sum(i)\n        while fib_sum_min < n:\n            i += 1\n            fib_sum_min = fib_sum(i)\n        return i - 1\n    \n    def prime_fib(n: int) -> int:\n        \"\"\"\n        returns the prime Fibonacci number less than n\n        >>> prime_fib(10)\n        7\n        >>> prime_fib(11)\n        13\n        >>> prime_fib(100)\n        341\n        >>> prime_fib(1000)\n        4999\n        >>> prime_fib(100000)\n        4797\n        >>> prime_fib(10000000)\n        4797\n        \"\"\"\n        i = count_fib(n)\n        while True:\n            if is_fibonacci(i) and is_prime(i):\n                return i\n            i += 1\n    return prime_fib(n)\n",
        "num_ids": 656
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i, j = 0, 1\n    while True:\n        if prime_number(j):\n            i += 1\n            if i == n:\n                return j\n        j += 1\n",
        "num_ids": 45
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return a",
        "num_ids": 31
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if (n < 2):\n        return 2\n    f = 0\n    s = 1\n    for i in range(2, n + 1):\n        f = f + s\n        s = f - s\n        if is_prime(f):\n            return f\n",
        "num_ids": 63
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    fib_numbers = [1, 1]\n    while len(fib_numbers) < n:\n        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])\n    for i in range(2, int(fib_numbers[-1] ** 0.5) + 1):\n        if fib_numbers[-1] % i == 0:\n            return i\n    return fib_numbers[-1]\n",
        "num_ids": 115
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    fib = [1, 2]\n    fib.extend([1 for i in range(n)])\n    for i in range(3, n):\n        if is_prime(fib[i]) and is_fib(fib[i]):\n            return fib[i]\n",
        "num_ids": 70
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    fib_num = fib_gen(n)\n    fib_num = next(fib_num)\n    \n    while not is_prime(fib_num):\n        fib_num = next(fib_num)\n    \n    return fib_num\n",
        "num_ids": 67
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        for j in range(i, len(l)):\n            for k in range(j, len(l)):\n                if l[i] + l[j] + l[k] == 0 and i!= j!= k:\n                    return True\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if (l[i] + l[j] + l[k] == 0):\n                    return True\n    return False",
        "num_ids": 73
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l.sort()\n    i = 0\n    while i < len(l) - 2:\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            if l[i] + l[j] + l[k] == 0:\n                return True\n            elif l[i] + l[j] + l[k] < 0:\n                j += 1\n            else:\n                k -= 1\n        i += 1\n    return False\n",
        "num_ids": 116
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            if i!= j:\n                for k in range(len(l)):\n                    if k!= i and k!= j:\n                        if l[i] + l[j] + l[k] == 0:\n                            return True\n    return False\n",
        "num_ids": 86
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = set(l)\n    for elem in s:\n        if -elem in s:\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            if j!= i:\n                for k in range(len(l)):\n                    if k!= i and k!= j:\n                        if l[i] + l[j] + l[k] == 0:\n                            return True\n    return False\n",
        "num_ids": 86
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    found = set()\n    for x in l:\n        if -x in found:\n            return True\n        else:\n            found.add(x)\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    seen = set()\n    for i in range(len(l)):\n        target = 0 - l[i]\n        if target in seen:\n            return True\n        seen.add(l[i])\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    left_to_right_collisions = 0\n    right_to_left_collisions = 0\n    for i in range(n):\n        left_to_right_collisions += 1\n        right_to_left_collisions += 1\n        left_to_right_collisions -= 1\n        right_to_left_collisions -= 1\n    return left_to_right_collisions + right_to_left_collisions\n",
        "num_ids": 102
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    cars = list(range(1, n+1))\n    collisions = 0\n    while len(cars) > 1:\n        # Move forward\n        for i in range(len(cars)):\n            cars[i] += 1\n        # Check for collision\n        for i in range(len(cars)):\n            if cars[i] >= n:\n                for j in range(i+1, len(cars)):\n                    if cars[j] <= 0:\n                        cars[i] = 0\n                        cars[j] = 0\n                        collisions += 1\n                        break\n                    cars[i] = 0\n                    cars[j] = 0\n                break\n    return collisions\n",
        "num_ids": 158
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    cars = gen_cars(n)\n    cars_left = gen_cars(n)\n    cars_right = gen_cars(n)\n",
        "num_ids": 35
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert n > 0, f\"Argument {n} is less than 1\"\n",
        "num_ids": 20
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Only test all n^2 potential pairs\n    min_idx = n**2\n    max_idx = n**2 + n\n",
        "num_ids": 34
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    assert(n > 0)\n    \n    counter = 0\n    while True:\n        if (car_race_collision_helper(n)):\n            counter += 1\n        else:\n            break\n    return counter\n    \n    ",
        "num_ids": 59
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # To illustrate this, let's consider the first case of n = 4.\n    # Cars 1,2,3,4 are driving left to right, and cars 1,2,3 are driving right to left.\n    # Cars 1 and 2 collide;  cars 2 and 3 collide;  cars 3 and 4 collide;\n    # There are 3 collisions in total.\n    #\n    #\n    # We also have the case of n = 2.\n    # Cars 1,2 are driving left to right, and cars 1,2 are driving right to left.\n    # Cars 1 and 2 collide;  there is 1 collision in total.\n    #\n    # Finally, let's consider the case of n = 1.\n    # Cars 1 is driving left to right, and cars 1 is driving right to left.\n    # There are 0 collisions in total.\n    #\n    # The key insight is that you need to maintain a list of the cars that have passed\n    # each other, and then remove the collided cars from the list as they collide.\n    #\n    # You could use two lists to keep track of the cars to the left and right of each\n    # car, like this:\n    #\n    # cars_left = list(range(1, n+1))\n    # cars_right = list(reversed(list(range(1, n+1))))\n    #\n    # Then, you can check if the left and right cars of a particular car are both in\n    # that list of cars that have passed each other, like this:\n    #\n    # if (cars_left[i] in cars_right) and (cars_right[i] in cars_left):\n    #\n    # You also need to keep track of the indices of the cars that have passed each\n    # other.  So, if the above code didn't work, you could instead do this:\n    #\n    # cars_left = list(range(1, n+1))\n    # cars_right = list(reversed(list(range(1, n+1))))\n    # cars_left_index = [i for i in range(n)]\n    # cars_right_index = [n - i - 1 for i in range(n)]\n    #\n    # Then, you could check if the left and right cars of a particular car are both in\n    # that list of cars that have passed each other, like this:\n    #\n    # if (cars_left[cars_left_index[i]] in cars_right) and (cars_right[cars_right_index[i]] in cars_left):\n    #\n    # You could also keep track of all the cars in a list, and then check if a particular\n    # car is in that list like this:\n    #\n    # if car in cars:\n    #\n    # For this problem, you will need to keep track of the cars moving left to right,\n    # and the cars moving right to left, separately.  Then, you can do this:\n    #\n    # if (cars_left[i] in cars_right) and (cars_right[i] in cars_left):\n    #\n    # And then you can remove the collided cars from the list of cars that have passed\n    # each other.  However, you don't need to store all the cars as lists, you can\n    # instead keep track of the indices of the cars that are moving left to right\n    # and the indices of the cars that are moving right to left, and then you can\n    # check if a particular car is in one list or the other, like this:\n    #\n    # if (cars_left_index[i] in cars_right_index) or (cars_right_index[i] in cars_left_index):\n",
        "num_ids": 856
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    car_count = n\n    collision_count = 0\n    while car_count > 0:\n        car_count -= 1\n        collision_count += 1\n        car_count += 1\n    return collision_count\n",
        "num_ids": 53
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    car_positions = list(range(1, 2*n+1))\n    # print(car_positions)\n    car_speeds = [1] * n\n    # print(car_speeds)\n    car_dirs = [-1] * n\n    # print(car_dirs)\n    collisions = 0\n",
        "num_ids": 80
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l2 = []\n    for i in l:\n        l2.append(i+1)\n    return l2\n",
        "num_ids": 30
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [e + 1 for e in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [e + 1 for e in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # the set() function will remove duplicate elements from the list\n    set_list = set(l)\n    for i in set_list:\n        for j in set_list:\n            if i + j == 0 and i!= j:\n                return True\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    seen_set = set()\n    for num in l:\n        if -num in seen_set:\n            return True\n        seen_set.add(num)\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n    \n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n",
        "num_ids": 85
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # The base case is if the length of the list is < 2.\n    if len(l) < 2:\n        return False\n    # We can assume that the number of unique elements in the list is\n    # less than or equal to the length of the list.\n    # Otherwise, the list would have been empty or we would have returned\n    # False in the above base case.\n    elif len(set(l)) < len(l):\n        return False\n    # If the list is a singleton, there is no possible pairs to sum to zero.\n    elif len(l) == 1:\n        return False\n    # For each element in the list, we check if we can find a pair that adds\n    # to zero.\n    # If we can, we return True. If we cannot, we return False.\n    else:\n        for i in range(len(l)):\n            if pairs_sum_to_zero([l[i] - l[j] for j in range(len(l)) if i!= j]) is True:\n                return True\n        return False\n",
        "num_ids": 250
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(l)<2:\n        return False\n    s=set(l)\n    for item in s:\n        if -item in s:\n            return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # trivial case\n    if not l:\n        return False\n    # if list has unique elements, check if their sum is 0\n    if len(l) == len(set(l)):\n        if 0 in l:\n            return True\n        else:\n            return False\n    # else, loop through list, and check if a + b = 0\n    # for i in range(len(l)):\n    #     for j in range(i + 1, len(l)):\n    #         if l[i] + l[j] == 0:\n    #             return True\n    # return False\n    #\n    # a faster solution using set()\n    # return len(set(l)) < len(l) and 0 in set(l)\n    #\n    # a faster solution using sorted()\n    # return 0 in [a + b for a in sorted(l) for b in sorted(l) if a < b]\n    #\n    # a more pythonic solution using set()\n    # return (len(set(l)) < len(l) and 0 in set(l))\n    #\n    # a more pythonic solution using sorted()\n    # return any([a + b for a in sorted(l) for b in sorted(l) if a < b])\n    #\n    # a more pythonic solution using set()\n    # return any([a + b for a in set(l) for b in set(l) if a + b == 0])\n    #\n    # a more pythonic solution using set()\n    # return any([a + b for a in set(l) for b in set(l) if a + b == 0 and a!= b])\n",
        "num_ids": 388
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in l:\n        for j in l:\n            if i + j == 0 and i!= j:\n                return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if base < 2 or base > 36:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    output = ''\n    while x > 0:\n        output = str(x % base) + output\n        x //= base\n    return output\n",
        "num_ids": 35
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    ret = \"\"\n    while x:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "num_ids": 33
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if base < 2:\n        raise ValueError('Base must be >= 2')\n    # if base < 10:\n    #     raise ValueError('Base must be >= 10')\n    \n    # list of numbers with base less than 10\n    # base_less = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "num_ids": 83
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = 0\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    while x:\n        n = n*base + x%base\n        x //= base\n    return str(n)\n",
        "num_ids": 55
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    if base == 10:\n        return str(x)\n    elif base == 2:\n        return digits[x]\n    elif base == 16:\n        if x >= 16:\n            return digits[x]\n        elif x == 10:\n            return 'A'\n        elif x == 11:\n            return 'B'\n        elif x == 12:\n            return 'C'\n        elif x == 13:\n            return 'D'\n        elif x == 14:\n            return 'E'\n        elif x == 15:\n            return 'F'\n        else:\n            return digits[x]\n    else:\n        return None",
        "num_ids": 181
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    s = ''\n    n = x\n    while True:\n        r = n % base\n        s = str(r) + s\n        n = n // base\n        if n == 0:\n            break\n    return s\n",
        "num_ids": 56
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n",
        "num_ids": 39
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if x < base:\n        return str(x)\n    elif x == base:\n        return '1'\n    else:\n        return change_base(x//base, base) + str(x%base)\n",
        "num_ids": 53
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = \"\"\n    while x > 0:\n        s += str(x % base)\n        x = x // base\n    return s[::-1]\n",
        "num_ids": 39
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (a * h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return 0.5*a*h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return 0.5 * a * h\n    \n",
        "num_ids": 13
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return.5 * a * h\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n >= 0\n    if n < 3:\n        return n\n    else:\n        return (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)) % 1000000007\n",
        "num_ids": 62
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n >= 0\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 94
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 74
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    last4 = [0, 0, 2, 0]\n    if n < 4:\n        return last4[n]\n    else:\n        for i in range(4, n+1):\n            last4[3] = last4[2]\n            last4[2] = last4[1]\n            last4[1] = last4[0]\n            last4[0] = sum(last4)\n        return last4[0]\n",
        "num_ids": 107
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert n >= 0, 'Incorrect input'\n    # base case\n    if n <= 2:\n        return n\n    # compute and cache the n-2 and n-1 terms\n    cache = {1: 0, 2: 2}\n    for i in range(3, n+1):\n        cache[i] = cache[i-1] + cache[i-2] + cache[i-3] + cache[i-4]\n    return cache[n]\n",
        "num_ids": 111
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    # Make sure n is a positive integer\n    assert isinstance(n, int) and n > 0, \"Positive integer required.\"\n    \n    # Start with the first two values of the Fib4 sequence\n    fib4s = [0, 1, 2]\n    \n    # Find the n-th Fib4 value\n    for _ in range(3, n + 1):\n        new_value = sum(fib4s[-4:])\n        fib4s.append(new_value)\n    \n    # Return the n-th value of the Fib4 sequence\n    return fib4s[n]\n",
        "num_ids": 145
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Write your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 81
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 0:\n        raise ValueError\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 99
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l.sort()\n    n = len(l)\n    if n == 0:\n        raise ValueError(\"median() arg is an empty sequence\")\n    elif n % 2 == 1:\n        return l[n//2]\n    elif n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n",
        "num_ids": 87
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n    else:\n        return l[len(l) // 2]\n",
        "num_ids": 64
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n = len(l)\n    if n < 1:\n        raise ValueError('median() arg is an empty sequence')\n    l.sort()\n    if n % 2 == 1:\n        return float(l[(n - 1) // 2])\n    else:\n        return float((l[(n - 1) // 2] + l[(n - 1) // 2 + 1]) / 2)\n",
        "num_ids": 96
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l.sort()\n    mid = len(l) // 2\n    if len(l) % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]\n",
        "num_ids": 57
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return sum(l[len(l) // 2 - 1: len(l) // 2 + 1]) / 2\n    return l[len(l) // 2]\n    \n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # sort the list\n    l = sorted(l)\n    # if the length of the list is even, take the average of the middle two numbers\n    if len(l) % 2 == 0:\n        return float((l[len(l) // 2] + l[len(l) // 2 - 1]) / 2)\n    else:\n        return l[len(l) // 2]\n",
        "num_ids": 92
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(l)[len(l)//2]\n",
        "num_ids": 15
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #Find length of the list\n    n = len(l)\n    #Sort the list in ascending order\n    l.sort()\n    #If the length is even, get the average of the middle two elements\n    if n%2 == 0:\n        return (l[(n//2)-1] + l[n//2])/2\n    else:\n        #If the length is odd, get the middle element\n        return l[(n//2)]\n",
        "num_ids": 107
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = len(l)\n    l = sorted(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Sort list and find the middle.\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]\n",
        "num_ids": 72
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(text) < 2:\n        return True\n    first = text[0]\n    last = text[-1]\n    text = text[1:-1]\n    if first == last:\n        return is_palindrome(text)\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(text) <= 1:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 45
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "num_ids": 48
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(text) < 2:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 45
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return text[::-1].casefold() == text.casefold()\n",
        "num_ids": 19
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return text[::-1].casefold() == text.casefold()\n",
        "num_ids": 19
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    res = 1\n    while n > 0:\n        res = (res * 2) % p\n        n -= 1\n    return res\n",
        "num_ids": 33
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i, r = 1, n\n    while r:\n        r = r // p\n        i = i * (2 % p)\n    return i\n",
        "num_ids": 37
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    return (modp(n // 2, p)**2 * 2**n) % p\n",
        "num_ids": 34
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 0:\n        return pow(2, -n, p)\n    elif n == 0:\n        return 1\n    else:\n        return pow(2, n, p)\n",
        "num_ids": 47
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Theoretically, if p is prime, no answer can be found, but\n    # I'm not aware of a prime number larger than 2^60 that can\n    # be solved with this function.\n    #\n    # It seems like the if/else statement is the bottleneck,\n    # but I'll keep it like this until I know better.\n    #\n    if p == 2:\n        return n\n    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return 2 * modp((n-1)//2, p)\n    else:\n        return modp(n//2, p)\n",
        "num_ids": 148
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = 1\n    for i in range(n):\n        result = (result*2) % p\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    acc = 1\n    for i in range(0, n):\n        acc = (acc * 2) % p\n    return acc\n",
        "num_ids": 32
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n2 = 1\n    for i in range(n):\n        n2 *= 2\n    return n2 % p\n",
        "num_ids": 30
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    return (2 * modp(n - 1, p)) % p\n",
        "num_ids": 29
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n    \n",
        "num_ids": 38
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 34
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    vowels = 'aeiou'\n    for x in text:\n        if x in vowels:\n            text = text.replace(x, '')\n    return text\n",
        "num_ids": 43
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_text = ''\n    vowel = 'aeiou'\n    for ch in text:\n        if ch not in vowel:\n            new_text += ch\n    return new_text\n",
        "num_ids": 47
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = 'aeiou'\n    return ''.join([c for c in text if c not in vowels])\n",
        "num_ids": 31
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    text = str(text)\n    vowels_set = set(vowels)\n    return ''.join(letter for letter in text if letter not in vowels_set)\n",
        "num_ids": 67
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ''.join([char for char in text if char not in 'aeiou'])\n",
        "num_ids": 23
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for vowel in 'aAeEiIoOuU':\n        text = text.replace(vowel, '')\n    return text\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowels = 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'\n    for vowel in vowels:\n        text = text.replace(vowel,'')\n    return text\n",
        "num_ids": 62
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    vowel = ['a', 'e', 'i', 'o', 'u']\n    res = \"\"\n    for i in text:\n        if i in vowel:\n            continue\n        else:\n            res += i\n    return res\n",
        "num_ids": 57
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    #text = text.replace('\\n','').split(' ')\n    #text = list(filter(lambda x: not any(v in x for v in vowels), text))\n    #text = ''.join(text)\n    text = ''.join([x for x in text if x.lower() not in vowels])\n    return text\n",
        "num_ids": 121
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_str = \"\"\n    for ch in text:\n        if ch not in vowels:\n            new_str = new_str + ch\n    return new_str\n",
        "num_ids": 62
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # print(l)\n    for n in l:\n        # print(n)\n        if n >= t:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return min(l) < t\n",
        "num_ids": 10
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return all([x < t for x in l])\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for n in l:\n        if n >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return all(l[i] < t for i in range(len(l)))\n",
        "num_ids": 21
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for n in l:\n        if n > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(set(s0) ^ set(s1)) == 0\n",
        "num_ids": 19
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l0, l1 = len(s0), len(s1)\n    return all(s0[i] == s1[i] for i in range(min(l0, l1))) and all(s0[i] == s1[i] for i in range(l0, l1)) and all(s0[i] == s1[i] for i in range(l0, l1))\n",
        "num_ids": 98
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s0_dict = {}\n    s1_dict = {}\n    for char in s0:\n        s0_dict[char] = s0_dict.get(char, 0) + 1\n    for char in s1:\n        s1_dict[char] = s1_dict.get(char, 0) + 1\n    for char in s0_dict.keys():\n        if char not in s1_dict:\n            return False\n        if s0_dict[char]!= s1_dict[char]:\n            return False\n    return True\n",
        "num_ids": 133
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return all(c0 == c1 for c0, c1 in zip(s0, s1))\n",
        "num_ids": 26
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    d0 = dict()\n    d1 = dict()\n    for c in s0:\n        if c not in d0:\n            d0[c] = 1\n        else:\n            d0[c] += 1\n    for c in s1:\n        if c not in d1:\n            d1[c] = 1\n        else:\n            d1[c] += 1\n    if d0 == d1:\n        return True\n    return False\n",
        "num_ids": 110
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    d = defaultdict(int)\n    for c in s0:\n        d[c] += 1\n    for c in s1:\n        d[c] -= 1\n        if d[c] < 0:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(set(s0) & set(s1)) == len(s0)\n",
        "num_ids": 23
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: Write the implementation here\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len(s0) == len(s1) and all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "num_ids": 39
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n < 2:\n        return n\n    return fib(n-2) + fib(n-1)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 1:\n        raise ValueError\n    if n < 3:\n        return 1\n",
        "num_ids": 24
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    fibs = [1, 2]\n    for i in range(2, n):\n        fibs.append(fibs[-1] + fibs[-2])\n    return fibs[-1]\n",
        "num_ids": 54
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 1:\n        return\n    if n == 1 or n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 42
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 2:\n        return 1\n",
        "num_ids": 12
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    open_brackets = []\n    for c in brackets:\n        if c == '<':\n            open_brackets.append('<')\n        elif c == '>':\n            if len(open_brackets) > 0 and open_brackets[-1] == '<':\n                open_brackets.pop()\n            else:\n                return False\n    return True if len(open_brackets) == 0 else False\n",
        "num_ids": 102
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_stack.append('>')\n        elif bracket == '>':\n            if len(bracket_stack) == 0:\n                return False\n            elif bracket_stack.pop()!= '<':\n                return False\n    if len(bracket_stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 105
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert brackets[0] == \"<\" and brackets[-1] == \">\"\n",
        "num_ids": 20
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    left_brackets = set()\n    for i, c in enumerate(brackets):\n        if c == '<':\n            left_brackets.add(i)\n        elif c == '>':\n            if len(left_brackets) == 0:\n                return False\n            left_brackets.remove(i)\n    return len(left_brackets) == 0\n",
        "num_ids": 93
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    openers = []\n    for b in brackets:\n        if b == '<':\n            openers.append(b)\n        elif b == '>':\n            if not openers:\n                return False\n            else:\n                openers.pop()\n    return len(openers) == 0\n",
        "num_ids": 72
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # TODO\n    return True\n",
        "num_ids": 10
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    open_brackets = 0\n    close_brackets = 0\n    for b in brackets:\n        if b == '<':\n            open_brackets += 1\n        elif b == '>':\n            close_brackets += 1\n    return open_brackets == close_brackets\n",
        "num_ids": 69
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #Given a bracket, find the corresponding closing bracket.\n    brackets_dict = {\n        \"<\": \">\",\n        \">\": \"<\",\n    }\n    openers = []\n    for c in brackets:\n        if c in brackets_dict:\n            openers.append(c)\n        elif c in openers:\n            openers.pop()\n        else:\n            return False\n    return True if openers == [] else False\n",
        "num_ids": 105
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    opening_brackets = \"(\" + brackets[0] + \")\"\n    bracket_number = 0\n    for bracket in brackets:\n        if bracket == opening_brackets[bracket_number]:\n            bracket_number += 1\n        elif bracket == closing_brackets[bracket_number]:\n            bracket_number -= 1\n        else:\n            return False\n    return bracket_number == 0\n",
        "num_ids": 96
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack and stack[-1] == \"<\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 74
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return all(x >= y for x, y in zip(l, l[1:])) or all(x <= y for x, y in zip(l, l[1:]))\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(l) < 2:\n        return True\n    else:\n        for i in range(0, len(l)):\n            if i < (len(l) - 1):\n                if l[i] < l[i + 1]:\n                    return monotonic(l[i + 1:])\n                if l[i] > l[i + 1]:\n                    return False\n    return True\n    \n",
        "num_ids": 98
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(l) <= 1: return True\n    increase = decrease = True\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]: increase = False\n        if l[i] > l[i + 1]: decrease = False\n    return increase or decrease\n",
        "num_ids": 75
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    increasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n    if increasing:\n        return True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n    if decreasing:\n        return True\n    return False\n",
        "num_ids": 105
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return all(l[i] < l[i+1] for i in range(len(l)-1)) or \\\n        all(l[i] > l[i+1] for i in range(len(l)-1))\n",
        "num_ids": 56
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if l == sorted(l):\n        return True\n    if l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(l) < 2:\n        return True\n",
        "num_ids": 15
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len(set(l)) == 1\n",
        "num_ids": 12
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l) - 1)) or \\\n        all(l[i] >= l[i+1] for i in range(len(l) - 1))\n",
        "num_ids": 58
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (all(l[i]<l[i+1] for i in range(len(l)-1))\n            or all(l[i]>l[i+1] for i in range(len(l)-1)))\n",
        "num_ids": 56
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    result.sort()\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # l1 = [1, 2, 3, 4, 5, 6]\n    # l2 = [6, 4, 3, 2, 1, 5, 7]\n    # common = [2, 3]\n    # return common\n    return list(set(l1).intersection(l2))\n",
        "num_ids": 72
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s1, s2 = set(l1), set(l2)\n    return sorted(s1.intersection(s2))\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # l1 is the set of elements\n    # l2 is the other set\n    l1_set = set(l1)\n    l2_set = set(l2)\n    # return the intersection of the two sets\n    return sorted(list(l1_set & l2_set))\n",
        "num_ids": 71
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l3 = []\n    i = 0\n    j = 0\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l3 = []\n    for i in l1:\n        if i in l2:\n            l3.append(i)\n    l3.sort()\n    return l3\n",
        "num_ids": 44
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l1_set = set(l1)\n    l2_set = set(l2)\n    l_set = l1_set & l2_set\n    return sorted(l_set)\n",
        "num_ids": 49
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(set(l1).intersection(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return list(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    largest_prime = 0\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n    for i in range(3, n, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n    return largest_prime\n",
        "num_ids": 73
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    factor = n - 1\n    while factor > 0:\n        if is_prime(factor):\n            return factor\n        factor -= 1\n",
        "num_ids": 33
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for i in range(2,n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n    return n\n",
        "num_ids": 47
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n",
        "num_ids": 10
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    k = 2\n    while k <= n ** 0.5:\n        if n % k == 0:\n            n //= k\n            largest_prime_factor(n)\n        else:\n            k += 1\n    return n\n",
        "num_ids": 55
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    factors = prime_factors(n)\n    return max(factors)\n",
        "num_ids": 21
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert n > 1, 'n is invalid'\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return n\n        i += 1\n    return 1\n",
        "num_ids": 47
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    i = 2\n    while i < n // i:\n        if n % i == 0:\n            n /= i\n        i += 1\n    return n\n",
        "num_ids": 39
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    largest_prime = 0\n    n = abs(n)\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                largest_prime = i\n                n = n // i\n                break\n    return largest_prime\n",
        "num_ids": 68
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n >= 1, \"The number must be greater than or equal to 1!\"\n    return int(n * (n+1)/2)\n",
        "num_ids": 34
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def sum_to(n):\n        \"Takes a number and returns the sum of all numbers from 1 to that number.\"\n        sum = 0\n        for x in range(1, n+1):\n            sum += x\n        return sum\n    return sum_to(n)\n",
        "num_ids": 66
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 1\n    return n + sum_to_n(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = 1 + n\n    sum = 0\n    while n > 0:\n        sum += n\n        n -= 1\n    return sum\n",
        "num_ids": 34
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n",
        "num_ids": 31
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n_1 = 0\n    n_2 = 1\n    n_3 = 0\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    else:\n        print(f\"{n_1} + {n_2} = {n_1 + n_2}\")\n        while n_3 < n:\n            n_3 += 1\n            n_1 += n_2\n            n_2 = n_1 - n_2\n            if n_3 < n:\n                print(f\"{n_1} + {n_2} = {n_1 + n_2}\")\n    return n_3\n",
        "num_ids": 162
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "num_ids": 53
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    brackets = list(brackets)\n",
        "num_ids": 11
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    bracket_count = 0\n    for c in brackets:\n        if c == '(':\n            bracket_count += 1\n        else:\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    return bracket_count == 0\n",
        "num_ids": 64
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    bracket_stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            bracket_stack.append(brackets[i])\n        elif brackets[i] == \")\":\n            if len(bracket_stack) == 0:\n                return False\n            bracket_stack.pop()\n    return len(bracket_stack) == 0\n",
        "num_ids": 96
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    opened = 0\n    for char in brackets:\n        if char == \"(\":\n            opened += 1\n        elif char == \")\":\n            opened -= 1\n        if opened < 0:\n            return False\n    return opened == 0\n",
        "num_ids": 56
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_stack.append(bracket)\n        elif bracket == \")\":\n            try:\n                bracket_stack.pop()\n            except IndexError:\n                return False\n    if bracket_stack:\n        return False\n    return True\n",
        "num_ids": 82
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Index of the current open bracket.\n    open_bracket_index = 0\n    # Number of open brackets.\n    open_bracket_count = 0\n    for c in brackets:\n        if c == '(':\n            open_bracket_count += 1\n        elif c == ')':\n            if open_bracket_count == 0:\n                return False\n            open_bracket_count -= 1\n    return open_bracket_count == 0\n",
        "num_ids": 109
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    brackets_list = list(brackets)\n    brackets_list = list(map(str, brackets_list))\n",
        "num_ids": 30
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    brackets = list(brackets)\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return stack == []\n",
        "num_ids": 68
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    bracket_stack = []\n    for c in brackets:\n        if c == \"(\":\n            bracket_stack.append(c)\n        else: # c == \")\"\n            if len(bracket_stack) == 0:\n                return False\n            bracket_stack.pop()\n    return len(bracket_stack) == 0\n",
        "num_ids": 81
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative\n",
        "num_ids": 41
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [i * xs[i] for i in range(1, len(xs))]\n",
        "num_ids": 24
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [i*j for i, j in zip(xs[1:], range(1, len(xs)))]\n",
        "num_ids": 29
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    xs.pop()\n    for i in range(len(xs)):\n        xs[i] *= i + 1\n    return xs\n",
        "num_ids": 35
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    xs_copy = xs[:]\n    xs_copy.pop()\n    return xs_copy\n",
        "num_ids": 26
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(xs) < 3:\n        return []\n    res = [0 for i in range(len(xs) - 1)]\n    for i in range(len(xs) - 1):\n        res[i] = i * xs[i+1]\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [i*j for i, j in enumerate(xs, start=1)][1:]\n",
        "num_ids": 25
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(len(xs)):\n        if i == 0:\n            result.append(0)\n        else:\n            result.append(i * xs[i])\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [i*xs[i] for i in range(1, len(xs))]\n",
        "num_ids": 23
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i * x for i, x in enumerate(xs[1:], 1)]\n",
        "num_ids": 23
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return fibfib_memo(n, {})\n",
        "num_ids": 15
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    fib0 = 0\n    fib1 = 0\n    fib2 = 1\n    for i in range(3, n + 1):\n        fib0 = fib1\n        fib1 = fib2\n        fib2 = fib1 + fib0\n    return fib2\n",
        "num_ids": 67
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 1:\n        return None\n    elif n < 3:\n        return n - 1\n    elif n == 3:\n        return 2\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 71
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fib1 = 0\n    fib2 = 1\n    for i in range(3, n + 1):\n        fib = fib1 + fib2\n        fib1, fib2 = fib2, fib\n    return fib\n",
        "num_ids": 88
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1 or n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 61
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 3:\n        return n\n    return fibfib(n-2) + fibfib(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n",
        "num_ids": 52
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Your code goes here\n    # pass\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    i = 0\n    while i < len(s):\n        if s[i] in vowels:\n            i += 1\n        else:\n            i += 1\n    return len(s) - i\n",
        "num_ids": 83
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Hint: you can use str.endswith() to check whether a character is a vowel.\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n",
        "num_ids": 51
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # implement your function here\n    # return len([v for v in s if v in 'aeiou']) + len([v for v in s[::-1] if v in 'aeiou'])\n    return sum(v in 'aeiou' for v in s) + sum(v in 'aeiou' for v in s[::-1])\n",
        "num_ids": 86
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    # Create a set to store the vowels in the word.\n    vowel_count = set()\n    # Loop through each character in the given word.\n    for c in s:\n        # If the character is in the set of vowels, then add it to the set.\n        if c in vowels:\n            vowel_count.add(c)\n    # Initialize a variable to store the total number of vowels.\n    total = 0\n    # If there is any character in the set vowel_count, then add 1 to the total.\n    for vowel in vowel_count:\n        total += 1\n    # Return the total number of vowels.\n    return total\n",
        "num_ids": 207
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    vowels = 0\n    for letter in s:\n        if letter in 'aeiou':\n            vowels += 1\n    if s[-1] == 'y' and s[-2] in 'aeiou':\n        vowels -= 1\n    return vowels\n",
        "num_ids": 68
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowels = set('aeiou')\n    vowel_count = 0\n    for i in s:\n        if i in vowels:\n            vowel_count += 1\n    if len(s) > 0 and s[-1] == 'y' and s[-2] in vowels:\n        vowel_count -= 1\n    return vowel_count\n",
        "num_ids": 90
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y':\n            count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    vowel_count = 0\n    vowel_set = ['a','e','i','o','u']\n    if not s:\n        return 0\n    if s[0] in vowel_set:\n        vowel_count += 1\n    for i in range(len(s)):\n        if s[i] in vowel_set and i < len(s)-1 and s[i+1] not in vowel_set:\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 119
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowels = \"aeiouy\"\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift] if shift < len(str(x)) else str(x)[-shift:] + str(x)[:-shift][::-1]\n",
        "num_ids": 48
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    digit_list = list(map(int, str(x)))\n    if shift >= len(digit_list):\n        digit_list.reverse()\n    else:\n        digit_list = digit_list[-shift:] + digit_list[:-shift]\n    return ''.join(map(str, digit_list))\n",
        "num_ids": 76
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "num_ids": 46
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    digits = [int(d) for d in str(x)]\n    result = digits[-shift:] + digits[:-shift]\n    return \"\".join([str(d) for d in result])\n",
        "num_ids": 49
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return int_to_string(string_to_int(x) >> shift)\n",
        "num_ids": 21
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift]\n",
        "num_ids": 19
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if shift == 0:\n        return x\n    elif shift < 0:\n        return circular_shift(x[:shift], -shift)[::-1]\n    elif shift > 0:\n        return circular_shift(x[shift:], shift)\n    else:\n        print(\"Error: shift should be an integer\")\n        return None\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids": 107
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    str_x = str(x)\n    if shift > len(str_x):\n        return str_x[::-1]\n    else:\n        return str_x[-shift:] + str_x[:-shift]\n",
        "num_ids": 55
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    return s[-shift:] + s[:-shift]\n",
        "num_ids": 41
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    digitSum = 0\n    for i in s:\n        if i.isupper():\n            digitSum += ord(i)\n    return digitSum\n",
        "num_ids": 36
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum(ord(c) for c in s.upper() if c.isupper())\n",
        "num_ids": 23
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(ord(i) for i in s if i.isupper())\n",
        "num_ids": 20
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum = 0\n    for letter in s:\n        if letter.isupper():\n            sum += ord(letter)\n    return sum",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not s:\n        return 0\n",
        "num_ids": 11
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum = 0\n    for c in s:\n        sum += ord(c.upper())\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum([ord(i) for i in s if i.isupper()])\n",
        "num_ids": 21
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    ascii_sum = 0\n    for ch in s:\n        if 'A' <= ch <= 'Z':\n            ascii_sum += ord(ch)\n    return ascii_sum\n",
        "num_ids": 49
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([ord(x) for x in s if x.isupper()])\n",
        "num_ids": 21
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([ord(x) for x in s if x.isalpha()])\n",
        "num_ids": 21
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    apples = s.split(' apples ')[0]\n    oranges = s.split(' oranges ')[0]\n    return n - int(oranges) - int(apples)\n    \n",
        "num_ids": 47
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return n - s.count(\"m\")\n",
        "num_ids": 12
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    mango = s.split(\" \")\n    return n - int(mango[0]) - int(mango[1])\n",
        "num_ids": 32
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #first we need to separate the string into two parts: the number of apples and oranges\n    # the number of fruits in the basket\n    fruits = s.split(\" \")\n    number_of_fruits = int(fruits[0])\n    number_of_apples = int(fruits[1])\n    # then we need to check if we have enough fruits\n    if number_of_fruits >= n:\n        return number_of_fruits - n\n    else:\n        return 0\n",
        "num_ids": 118
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Return None if s is None or invalid\n    if s == None or type(s)!= str:\n        return None\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    try:\n        # first we convert to a list\n        s = s.split('and')\n        o = 0\n        m = 0\n        for x in s:\n            # since we know that we can only have one fruit we are looking for we can use a for loop\n            # to go through the list one by one and look for the mango\n            if x[0] =='m' or x[0] == 'M':\n                # if the fruit is a mango we add 1 to the mango variable\n                m += int(x[1:])\n            elif x[0] == 'o' or x[0] == 'O':\n                # if the fruit is an orange we add 1 to the orange variable\n                o += int(x[1:])\n        return m - o\n    except:\n        return \"There was an error\"\n",
        "num_ids": 194
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return n - int(s.split()[0]) - int(s.split()[1])\n",
        "num_ids": 25
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    apple_fruit, orange_fruit = map(int, s.split())\n    return apple_fruit - n % apple_fruit - (n//apple_fruit)*orange_fruit\n",
        "num_ids": 42
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return n - int(s[:s.index(' ')]) - int(s[s.index(' ')+1:s.index(' ')+4])\n",
        "num_ids": 39
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s_apples,s_oranges,s_mangoes = s.split()\n    apples = int(s_apples)\n    oranges = int(s_oranges)\n    mangoes = apples - oranges\n    fruits = oranges + apples + mangoes\n    return oranges if fruits > n else mangoes\n",
        "num_ids": 78
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # EXCEPTION, RETURN EMPTY\n    if not arr:\n        return []\n    # SET MIN VALUE, SET INDEX\n    min_value = float(\"inf\")\n    min_index = None\n    # CHECK EVERY NODE\n    for i, v in enumerate(arr):\n        # IF IT'S A ZERO, SET INDEX\n        if v == 0:\n            min_index = i\n        # IF IT'S A SMALLEST VALUE, SET VALUE\n        if v % 2 == 0 and v < min_value:\n            min_value = v\n            min_index = i\n    # RETURN THE NODE WITH THE SMALLEST VALUE, AND ITS INDEX\n    return [min_value, min_index]\n",
        "num_ids": 176
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pluck_arr = []\n    for idx, val in enumerate(arr):\n        if val % 2 == 0:\n            pluck_arr.append([val, idx])\n",
        "num_ids": 45
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [min([n for n in arr if n%2==0]),arr.index(min([n for n in arr if n%2==0]))] if arr else []\n",
        "num_ids": 43
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return pluck_helper(arr)\n",
        "num_ids": 12
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def get_minimum(arr):\n        minimum = arr[0]\n        for i in arr:\n            if i <= minimum:\n                minimum = i\n        return minimum\n",
        "num_ids": 41
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    even = [x for x in arr if x % 2 == 0]\n    if not even:\n        return []\n    return [min(even), min(even).index(min(even))]\n",
        "num_ids": 47
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # base case\n    if arr == []:\n        return []\n    # create two sorted lists of evens and odds from the list\n    evens = sorted([x for x in arr if x % 2 == 0])\n    odds = sorted([x for x in arr if x % 2!= 0])\n    # if there are no evens or the list is empty, return an empty list\n    if len(evens) == 0 or len(evens) == len(arr):\n        return []\n    # pick the first even and return it\n    return [evens[0], arr.index(evens[0])]\n",
        "num_ids": 144
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    evens = [x for x in arr if x % 2 == 0]\n    if len(evens) > 0:\n        return [min(evens), arr.index(min(evens))]\n    else:\n        return []",
        "num_ids": 56
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    def dfs(arr, x, even, e):\n        if x == len(arr) or arr[x] > e:\n            return [e, x]\n        if even[x] == 1:\n            even[x] = 0\n            return dfs(arr, x + 1, even, e)\n        else:\n            return dfs(arr, x + 1, even, min(e, arr[x]))\n    \n    if not arr: return []\n    even = [0] * len(arr)\n    e = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            e = arr[i]\n            break\n        even[i] = 1\n    return dfs(arr, 0, even, e)\n",
        "num_ids": 188
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in lst:\n        if lst.count(i) > i:\n            return i\n",
        "num_ids": 26
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_lst = {}\n    for x in lst:\n        new_lst[x] = lst.count(x)\n    new_lst = new_lst.items()\n    new_lst.sort(key = lambda x : x[1], reverse = True)\n    freq_lst = []\n    for k, v in new_lst:\n        freq_lst.append(v)\n    if freq_lst[0] < new_lst[0][1]:\n        return new_lst[0][1]\n    else:\n        return -1\n",
        "num_ids": 145
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    d = {}\n    maxx = -1\n    for num in lst:\n        if num not in d:\n            d[num] = 1\n        else:\n            d[num] += 1\n    for k,v in d.items():\n        if v>=k:\n            maxx = k\n    return maxx\n",
        "num_ids": 79
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Implement your solution here\n    counter = Counter(lst)\n    for key, value in counter.items():\n        if value >= key:\n            return key\n    return -1\n",
        "num_ids": 44
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    my_dict = {}\n    \n    for item in lst:\n        my_dict[item] = my_dict.get(item, 0) + 1\n        \n    for key in my_dict:\n        if my_dict[key] >= key:\n            return key\n    \n    return -1\n",
        "num_ids": 75
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst.sort()\n    greatest = lst[-1]\n    for i in range(greatest, 0, -1):\n        if search_count(lst, i) >= i:\n            return i\n    return -1\n",
        "num_ids": 58
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = {}\n    for n in lst:\n        if n in count:\n            count[n] += 1\n        else:\n            count[n] = 1\n    for n in lst:\n        if n >= 0 and count[n] >= n:\n            return n\n    return -1\n",
        "num_ids": 72
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # for num in lst:\n    #     if lst.count(num) > num:\n    #         return num\n    # return -1\n",
        "num_ids": 37
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    d = {}\n    for i in lst:\n        d[i] = d.get(i, 0) + 1\n    for k in d:\n        if d[k] >= k:\n            return k\n    return -1",
        "num_ids": 56
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst = Counter(lst)\n    greatest_freq = max(lst.values())\n    greatest_freq = 0\n    for key, value in lst.items():\n        if value >= greatest_freq:\n            greatest_freq = value\n            greatest_num = key\n    if greatest_freq == 0:\n        return -1\n    return greatest_num\n",
        "num_ids": 95
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not lst: return []\n    return lst[::-1] if len(lst)%2==1 else lst[::-2]\n",
        "num_ids": 38
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(len(lst)):\n        result.append(min(lst))\n        lst.remove(min(lst))\n    for i in range(len(lst)):\n        result.append(max(lst))\n        lst.remove(max(lst))\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not lst:\n        return []\n    lst1 = lst[:]\n    lst1.sort()\n    lst2 = []\n    while lst1:\n        i = lst1.pop(0)\n        lst2.append(i)\n        while lst1 and lst1[0] == i:\n            lst1.pop(0)\n    return lst2\n",
        "num_ids": 98
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = sorted(lst)\n    \n    if len(result) == 0:\n        return []\n    \n    result[0], result[-1] = result[-1], result[0]\n    \n    for i in range(len(result) - 1):\n        if i % 2 == 0:\n            result[i], result[i + 1] = result[i + 1], result[i]\n    \n    return result\n    \nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))\n",
        "num_ids": 155
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(lst) <= 1:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    return [min_val] + strange_sort_list([x for x in lst if x!= min_val]) + [max_val]\n",
        "num_ids": 74
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def strange_sort(lst):\n        return sorted(lst, reverse=True)[:len(lst)] + sorted(lst[len(lst)::-1])[::-1]\n    return strange_sort(lst)\n",
        "num_ids": 58
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lst.sort()\n    return lst[::-1]\n",
        "num_ids": 18
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return sorted(lst, key=abs",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst = sorted(lst)\n    for i in range(len(lst) - 1):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst\n",
        "num_ids": 58
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n        return round((sides[0]*sides[1]/2.0), 2)\n    else:\n        return -1\n",
        "num_ids": 69
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a*b*c), 2)\n    else:\n        return -1\n",
        "num_ids": 49
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Calculate length of the triangle\n    a2 = a**2\n    b2 = b**2\n    c2 = c**2\n    # Sum the squares\n    s = a2 + b2 + c2\n    # Check to see if it is a triangle\n    if (s == 2*(a2 + b2)) or (s == 2*(a2 + c2)) or (s == 2*(b2 + c2)):\n        return round((s*0.5), 2)\n    # If the sides aren't a triangle, return -1\n    else:\n        return -1\n",
        "num_ids": 141
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if a + b > c and b + c > a and a + c > b:\n        return round(math.sqrt(a * a + b * b - c * c)/2, 2)\n    else:\n        return -1\n    \ndef to_celsius(temperature):\n    '''\n    Given a float representing a temperature in Fahrenheit, return the \n    temperature in Celsius.\n    Example:\n    to_celsius(75) == 23.88\n    '''\n    return round((temperature - 32) * (5/9), 2)\n",
        "num_ids": 135
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a, b, c = sorted([a, b, c])\n    return round(-1 * (((a + b + c) * (a + b - c)) / 2), 2)\n",
        "num_ids": 45
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a + b > c and b + c > a and a + c > b:\n        return round((a * b * c) ** 0.5, 2)\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    elif a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return round(0.5*(a*b*c),2)\n    else:\n        return -1\n    \ndef test_triangle_area():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(3, 7, 2) == 12.50\n    assert triangle_area(3, 7, 3) == 12.50\n    assert triangle_area(3, 7, 4) == 12.50\n    assert triangle_area(3, 7, 9) == 12.50\n    assert triangle_area(1, 2, 8) == 12.00\n    assert triangle_area(1, 2, 9) == 12.00\n    assert triangle_area(1, 3, 12) == 6.50\n    assert triangle_area(1, 3, 13) == 6.50\n    assert triangle_area(1, 3, 14) == 6.50\n    assert triangle_area(1, 3, 15) == 6.50\n    assert triangle_area(1, 3, 16) == 6.50\n    assert triangle_area(1, 3, 17) == 6.50\n    assert triangle_area(1, 3, 18) == 6.50\n    assert triangle_area(1, 3, 19) == 6.50\n    assert triangle_area(1, 3, 20) == 6.50\n    assert triangle_area(2, 4, 12) == 9.00\n    assert triangle_area(2, 4, 13) == 9.00\n    assert triangle_area(2, 4, 14) == 9.00\n    assert triangle_area(2, 4, 15) == 9.00\n    assert triangle_area(2, 4, 16) == 9.00\n    assert triangle_area(2, 4, 17) == 9.00\n    assert triangle_area(2, 4, 18) == 9.00\n    assert triangle_area(2, 4, 19) == 9.00\n    assert triangle_area(2, 4, 20) == 9.00\n    assert triangle_area(3, 3, 8) == 10.00\n    assert triangle_area(3, 3, 9) == 10.00\n    assert triangle_area(3, 3, 10) == 10.00\n    assert triangle_area(3, 3, 11) == 10.00\n    assert triangle_area(3, 3, 12) == 10.00\n    assert triangle_area(3, 3, 13) == 10.00\n    assert triangle_area(3, 3, 14) == 10.00\n    assert triangle_area(3, 3, 15) == 10.00\n    assert triangle_area(3, 3, 16) == 10.00\n    assert triangle_area(3, 3, 17) == 10.00\n    assert triangle_area(3, 3, 18) == 10.00\n    assert triangle_area(3, 3, 19) == 10.00\n    assert triangle_area(3, 3, 20) == 10.00\n    assert triangle_area(4, 6, 8) == 7.50\n    assert triangle_area(4, 6, 9) == 7.50\n    assert triangle_area(4, 6, 10) == 7.50\n    assert triangle_area(4, 6, 11) == 7.50\n    assert triangle_area(4, 6, 12) == 7.50\n    assert triangle_area(4, 6, 13) == 7.50\n    assert triangle_area(4, 6, 14) == 7.50\n    assert triangle_area(4, 6, 15) == 7.50\n    assert triangle_area(4, 6, 16) == 7.50\n    assert triangle_area(4, 6, 17) == 7.50\n    assert triangle_area(4, 6, 18) == 7.50\n    assert triangle_area(4, 6, 19) == 7.50\n    assert triangle_area(4, 6, 20) == 7.50\n    assert triangle_area(3, 6, 8) == 8.50\n    assert triangle_area(3, 6, 9) == 8.50\n    assert triangl",
        "num_ids": 1027
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # side_1 = a\n    # side_2 = b\n    # side_3 = c\n    # if side_1 + side_2 > side_3:\n    #     if side_1 + side_3 > side_2:\n    #         if side_2 + side_3 > side_1:\n    #             return round(0.5 * (side_1 * side_2), 2)\n    # return -1\n    # *************\n    # if any of the three sides are equal, this is not a triangle\n    if a == b == c:\n        return -1\n    # *************\n    # if any of the three sides are negative, this is not a triangle\n    if a < 0 or b < 0 or c < 0:\n        return -1\n    # *************\n    # if any of the three sides are equal, this is not a triangle\n    if a == b == c:\n        return -1\n    # *************\n    # if any of the three sides are greater than the sum of the other two sides, this is not a triangle\n    if a > b + c or b > a + c or c > a + b:\n        return -1\n    # *************\n    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # calculate the area\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n",
        "num_ids": 337
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def sum_of_list(list):\n        total = 0\n        for i in list:\n            total += i\n        return total\n",
        "num_ids": 33
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sum = 0\n    x = []\n    for i in range(len(q)):\n        x.append(q[i])\n        x.reverse()\n        if x == q:\n            sum = sum + x[i]\n            if sum <= w:\n                return True\n            else:\n                return False\n        else:\n            return False\n",
        "num_ids": 83
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum_elem = 0\n    for i in q:\n        sum_elem += i\n    \n    if sum_elem <= w and is_balanced(q) == True:\n        return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = sum(q)\n    return s <= w and q == q[::-1]\n",
        "num_ids": 24
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return all([sum(q)<=w, check(q)])",
        "num_ids": 18
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    def palindromic_check(n):\n        if str(n) == str(n)[::-1]:\n            return True\n        else:\n            return False\n        \n    q_sum = sum(q)\n    if palindromic_check(q) == True and q_sum <= w:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 90
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "",
        "num_ids": 1
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def is_palindrome(i):\n        return str(i) == str(i)[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # list = [1,2,3,4,5]\n    # list_of_strings = []\n    # for element in list:\n    #     list_of_strings.append(str(element))\n    # print(list_of_strings)\n    # for element in list_of_strings:\n    #     if element == element[::-1]:\n    #         print(True)\n    #         return True\n    # print(False)\n    # return False\n    # reversed_list = list_of_strings[::-1]\n    # if list == list_of_strings:\n    #     print(True)\n    #     return True\n    # if list_of_strings == reversed_list:\n    #     print(True)\n    #     return True\n    # print(False)\n    # return False\n",
        "num_ids": 196
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum_q = sum(q)\n    return sum_q<=w and is_palindrom(q)\n",
        "num_ids": 29
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    odds = {}\n    for i in range(len(arr)):\n        odds[arr[i]] = odds.get(arr[i], 0) + 1\n    return 2 * min(odds.values())",
        "num_ids": 52
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(arr) < 2:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr: return 0\n    return helper(arr, 0, len(arr) - 1)\n",
        "num_ids": 25
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not arr or len(arr) == 1:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count_changes = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i - 1]:\n            count_changes += 1\n    if count_changes % 2 == 0:\n        return count_changes // 2\n    return count_changes // 2 + 1\n",
        "num_ids": 71
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # First, I'll make the array a palindrome by turning it all the way to the left.\n    # For example, if the original array is [1, 2, 3, 2, 1], then I'll end up with [1, 2, 3, 1, 1].\n    # The minimum number of changes is 1, because changing the 4th element to any other element will change\n    # the minimum number of changes.\n",
        "num_ids": 96
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return count_changes(arr)\n",
        "num_ids": 10
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # You can make it palindromic in two changes:\n    # 1. Last element to first element\n    # 2. Last element to a middle element\n",
        "num_ids": 37
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = 0\n    j = len(arr) - 1\n    counter = 0\n    while i < j:\n        if arr[i]!= arr[j]:\n            counter += 1\n        i += 1\n        j -= 1\n    return counter\n",
        "num_ids": 60
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # from itertools import chain\n",
        "num_ids": 10
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for i in lst1:\n        if len(i) > len(lst2[0]):\n            result.append(i)\n    for i in lst2:\n        if len(i) > len(lst1[0]):\n            result.append(i)\n    return result",
        "num_ids": 77
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    a = []\n    for i in lst1:\n        b = sum(len(i) for i in lst2)\n        if len(i) < b:\n            a.append(i)\n    if len(a) == len(lst2):\n        return lst2\n    elif len(a) == len(lst1):\n        return lst1\n    else:\n        return a\n",
        "num_ids": 99
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    if len(lst2) > len(lst1):\n        return lst2\n    else:\n        return lst1\n",
        "num_ids": 55
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst = [lst1, lst2]\n    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return [lst1]\n    else:\n        return [lst2]\n",
        "num_ids": 74
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "num_ids": 33
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # return [i for i in lst1 if len(i) < len(lst2)][0]\n    return [i for i in lst1 if len(i) < len(lst2) or len(i) == len(lst2)][0]\n",
        "num_ids": 66
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    tot = []\n    for x in lst1:\n        if len(x) < len(lst2):\n            tot.append(x)\n    return tot\n",
        "num_ids": 43
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(2, a):\n        if (a % i) == 0:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    for i in range(2, int(a/3)):\n        if is_prime(i):\n            for j in range(2, int(a/2)):\n                if is_prime(j):\n                    for k in range(2, a):\n                        if is_prime(k):\n                            if k * j * i == a:\n                                return True\n    return False\n",
        "num_ids": 92
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(2, int(a ** 0.5) + 1):\n        if not a % i:\n            return False\n    return len([x for x in range(2, a - 1) if is_prime(x)]) >= 3\n",
        "num_ids": 60
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a = a\n    prime_numbers = []\n    for num in range(2, a):\n        if is_prime(num):\n            prime_numbers.append(num)\n    if len(prime_numbers) > 2:\n        return False\n    for num in prime_numbers:\n        if num*num*num == a:\n            return True\n    return False\n",
        "num_ids": 91
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    i = 2\n    while i * i <= a:\n        if a % i == 0:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    number_list = list(range(1,a))\n    prime_list = [x for x in number_list if prime_check(x)]\n    prime_list.reverse()\n    return any([a % i == 0 for i in prime_list])\n    \ndef is_prime_list(a):\n    \"\"\"Write a function that returns a list of all the prime numbers up to a given number n.\n    Example:\n    is_prime_list(10) == [2, 3, 5, 7]\n    \"\"\"\n    number_list = list(range(1,a))\n    prime_list = [x for x in number_list if prime_check(x)]\n    return prime_list\n    \ndef is_prime(a):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Example:\n    is_prime(4) == False\n    is_prime(5) == True\n    is_prime(1) == False\n    is_prime(37) == True\n    \"\"\"\n    return prime_check(a)\n    \ndef next_prime(a):\n    \"\"\"Write a function that returns the next prime number after the given one.\n    Example:\n    next_prime(37) == 41\n    \"\"\"\n    return next_prime_helper(a)\n    \ndef next_prime_helper(a):\n    number_list = list(range(a+1, a*2+1))\n    prime_list = [x for x in number_list if prime_check(x)]\n    return prime_list[0]\n    \ndef is_palindrome(a):\n    \"\"\"Write a function that returns true if a given string is a palindrome and false otherwise.\n    Example:\n    is_palindrome(\"racecar\") == True\n    is_palindrome(\"google\") == False\n    \"\"\"\n    return str(a) == str(a)[::-1]\n    \ndef is_pangram(a):\n    \"\"\"Write a function that returns true if a given string is a pangram and false otherwise.\n    Example:\n    is_pangram(\"The quick brown fox jumps over the lazy dog\") == True\n    is_pangram(\"The quick brown fox\") == False\n    \"\"\"\n    return \"\".join(sorted(set(a.lower()))) == \"abcdefghijklmnopqrstuvwxyz\"\n    \ndef is_multiple(a, b):\n    \"\"\"Write a function that returns true if the given number is the multiple of the given factor and false otherwise.\n    Example:\n    is_multiple(12, 3) == True\n    is_multiple(12, 4) == False\n    \"\"\"\n    return a % b == 0\n    \ndef is_power(a, b):\n    \"\"\"Write a function that returns true if the given number is the power of the given base and false otherwise.\n    Example:\n    is_power(3, 1) == True\n    is_power(27, 3) == True\n    is_power(1, 10) == False\n    is_power(10, 0) == True\n    is_power(10, 1) == False\n    \"\"\"\n    return a % b == 0 and b > 0\n    \ndef power(a, b):\n    \"\"\"Write a function that returns the result of the first number raised to the power of the second.\n    Example:\n    power(2, 3) == 8\n    power(3, 2) == 9\n    power(-2, 3) == -8\n    \"\"\"\n    return a ** b\n    \ndef reverse(a):\n    \"\"\"Write a function that returns the result of reversing the digits in the given number.\n    Example:\n    reverse(1597) == 789\n    reverse(-1597) == -789\n    \"\"\"\n    if a < 0:\n        return -reverse(-a)\n    return int(str(a)[::-1])\n",
        "num_ids": 907
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if (is_prime(a)):\n        if (is_prime(2 * a) or is_prime(3 * a) or is_prime(5 * a)):\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for p in primes:\n        if a % p == 0 and is_prime(a // p):\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(2, 100):\n        if a % i == 0 and is_prime(i):\n            return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #return False\n    #return False\n    return False\n",
        "num_ids": 15
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Write your code here\n    return x == n ** (1/n)",
        "num_ids": 19
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x == n**(n**0)\n",
        "num_ids": 13
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 2:\n        return x == 1\n    if n == 1:\n        return True\n    if x % n:\n        return False\n    return is_simple_power(x, n / 2)\n",
        "num_ids": 51
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return n > 1 and x % n == 0\n",
        "num_ids": 13
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if x == n or x == 1:\n        return True\n    if n == 1:\n        return False\n    if n == x:\n        return True\n    if x % n == 0:\n        return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 1:\n        return True\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x % n == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # a = x\n    # b = n\n    # while a > 1:\n    #     if a%b == 0:\n    #         a /= b\n    #     else:\n    #         return False\n    # return True\n    return x == n**int(math.log(x, n))\n",
        "num_ids": 74
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return n**x == x\n",
        "num_ids": 9
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return True if a**(1/3) == int(a**(1/3)) else False\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a**(1/3) == int(a**(1/3))\n",
        "num_ids": 21
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a**3 == 0:\n        return True\n    return False\n",
        "num_ids": 18
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n    if a > 0:\n        x = int(a ** (1 / 3))\n        if x ** 3 == a:\n            return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a**(1/3) % 1 == 0:\n        return True\n    else:\n        return False\n    pass\n",
        "num_ids": 31
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # The following should not be executed on a 32 bit system:\n    # return a**(1./3.) % 1 == 0\n    if a >= 0:\n        return a**(1./3.) % 1 == 0\n    else:\n        return -(-a**(1./3.)) % 1 == 0\n    \ndef ispower(a):\n    '''\n    Write a function that takes an integer a and returns True if \n    this integer is a power of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispower(1) ==> True\n    ispower(2) ==> True\n    ispower(3) ==> True\n    ispower(4) ==> False\n    ispower(0) ==> False\n    ispower(5) ==> False\n    ispower(36) ==> True\n    '''\n    # The following should not be executed on a 32 bit system:\n    # return a > 0 and a**(1./a) == a\n    if a > 0:\n        return a**(1./a) == a\n    else:\n        return False\n",
        "num_ids": 263
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return a**(1/3)%1 == 0\n",
        "num_ids": 15
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if a == 0: return True\n    b = int(math.sqrt(a))\n    return b * b == a\n",
        "num_ids": 31
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    x = a**(1./3.)\n    return x == int(x)\n",
        "num_ids": 21
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    import math\n    if not num:\n        return 0\n    elif len(num) == 1:\n        if ord(num) < ord('F'):\n            return 1\n        else:\n            return 0\n    else:\n        return hex_key_chars(num)\n",
        "num_ids": 67
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # your code goes here\n    d = {'0':2,'1':3,'2':5,'3':7,'4':11,'5':13,'6':17,'7':19,'8':23,'9':29,'A':31,'B':37,'C':41,'D':43,'E':47,'F':53}\n    count = 0\n    for i in num:\n        if d[i] > 1:\n            count += 1\n    return count\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key('1A2B3C4D') == 4, \"First\"\n    assert hex_key('1077E') == 2, \"Second\"\n    assert hex_key('0') == 1, \"Third\"\n    assert hex_key('A1b2c3d4') == 0, \"Fourth\"\n    assert hex_key('2020') == 2, \"Fifth\"\n    print('\"Run\" is good. How is \"Check\"?')",
        "num_ids": 249
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    res = 0\n    for i in num:\n        if i in 'AB':\n            res += 1\n        elif i in 'D':\n            res += 1\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    numbers = {'2':0,'3':0,'5':0,'7':0,'B':0,'D':0}\n    for char in num:\n        if char in numbers:\n            count += 1\n            numbers[char] += 1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if num == '':\n        return 0\n    else:\n        num = num.upper()\n        return len(set(num))\n        ",
        "num_ids": 34
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # l = [1 if digit in '13579' else 0 for digit in num]\n    l = []\n    for digit in num:\n        if digit in '13579':\n            l.append(1)\n        else:\n            l.append(0)\n    # print(l)\n    # return sum(l)\n    s = 0\n    for x in l:\n        s += x\n    return s\n",
        "num_ids": 99
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # your code here\n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    d = dict()\n    num = num.upper()\n    for char in num:\n        if char in d.keys():\n            d[char] += 1\n        else:\n            d[char] = 1\n    \n    for prime in primes:\n        if str(prime) in d.keys():\n            d[str(prime)] += 0\n        else:\n            d[str(prime)] = 0\n    \n    return sum(d.values())\n",
        "num_ids": 174
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    def hex_digits(num):\n        nums = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n        cnt = 0\n        for digit in num:\n            if digit in nums:\n                cnt += 1\n        return cnt\n    cnt = 0\n    for i in range(len(num)):\n        if hex_digits(num[i:]) == 6 and is_prime(int(num[i:], 16)):\n            cnt += 1\n    return cnt",
        "num_ids": 204
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    num_list = list(num)\n    result = 0\n    for i in range(0,len(num_list)):\n        if check_prime(int(num_list[i])) is True:\n            result += 1\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    counter = 0\n    for i in range(1, len(num)+1):\n        if i in [2, 3, 5, 7]:\n            if num[-i] in \"123456789ABCDEF\":\n                counter += 1\n    return counter\n",
        "num_ids": 61
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"db\" + bin(decimal)[2:].replace(\"1\", \"db1\").replace(\"0\", \"db0\") + \"db\"\n",
        "num_ids": 36
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    binary = ''\n    while decimal // 2!= 0:\n        binary = binary + str(decimal % 2)\n        decimal = decimal // 2\n    binary = binary + str(decimal)\n    return 'db' + binary + 'db'\n",
        "num_ids": 60
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    binary_string = ''\n    while decimal > 0:\n        binary_string += str(decimal % 2)\n        decimal = decimal // 2\n",
        "num_ids": 36
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"db{0:b}db\".format(decimal)\n",
        "num_ids": 18
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return f\"db{bin(decimal)[2:]}db\"\n",
        "num_ids": 18
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"db\" + str(bin(decimal)[2:]) + \"db\"\n",
        "num_ids": 22
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"db\" + str(bin(decimal))[2:] + \"db\"\n",
        "num_ids": 22
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    binary_number = bin(decimal)\n    binary_number = binary_number[2:]\n    return 'db' + binary_number + 'db'\n",
        "num_ids": 38
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "num_ids": 19
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    bin = ['0', '1']\n    decimal = int(decimal)\n    converted = ''\n",
        "num_ids": 27
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    if len(s) < 3:\n        return False\n    else:\n        passed = []\n        for i in s:\n            if i not in passed:\n                passed.append(i)\n            else:\n                pass\n        return len(passed) == len(set(passed))\n        \n    # In the end, we should get True\n",
        "num_ids": 87
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s_set = set()\n    while(len(s) >= 3):\n        if(s in s_set):\n            return False\n        else:\n            s_set.add(s)\n        s = find_next(s)\n    if(s!= '_'):\n        return False\n    else:\n        return True\n",
        "num_ids": 81
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(s) < 3:\n        return False\n    if len(set(s))!= len(s):\n        return False\n    p = s[:3]\n    while len(p) < len(s):\n        p = p + s[len(p) * 3:len(p) * 3 + 3]\n        if len(p) >= len(s):\n            return True\n    return False\n",
        "num_ids": 99
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(s) < 3:\n        return False\n    count = 0\n    d = {}\n    for i in range(len(s)):\n        if s[i] in d:\n            count += 1\n        else:\n            d[s[i]] = 1\n        if count > 2:\n            return False\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = list(s)\n    while len(s) >= 3:\n        if len(set(s[i:i+3])) == 3:\n            s = s[1:]\n        else:\n            return False\n    if len(s) == 0:\n        return True\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def _is_happy(s, visited):\n        if s in visited:\n            return False\n        if len(s) < 3:\n            return True\n        if len(set(s))!= len(s):\n            return False\n        visited.add(s)\n        res = True\n        for l in s:\n            res = res and _is_happy(l, visited)\n        return res\n",
        "num_ids": 97
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(s) < 3:\n        return False\n    elif len(set(s)) < 3:\n        return False\n    else:\n        return True\n",
        "num_ids": 40
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(s) < 3:\n        return False\n    else:\n        s = sorted(s)\n        if len(set(s))!= len(s):\n            return False\n        return is_happy(s[2]) if is_happy(s[:2]) else True\n",
        "num_ids": 69
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(s) >= 3 and is_distinct(s)\n",
        "num_ids": 18
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(s) < 3: return False\n    t = []\n    for i in range(0, len(s)-2, 3):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n        t.append(s[i])\n    if len(t) < len(s):\n        return True\n    else:\n        return False\n",
        "num_ids": 99
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if type(grades)!= list:\n        return None\n    res = []\n    for i in grades:\n        if i == 4.0:\n            res.append('A+')\n        elif i >= 3.7:\n            res.append('A')\n        elif i >= 3.3:\n            res.append('A-')\n        elif i >= 3.0:\n            res.append('B+')\n        elif i >= 2.7:\n            res.append('B')\n        elif i >= 2.3:\n            res.append('B-')\n        elif i >= 2.0:\n            res.append('C+')\n        elif i >= 1.7:\n            res.append('C')\n        elif i >= 1.3:\n            res.append('C-')\n        elif i >= 1.0:\n            res.append('D+')\n        elif i >= 0.7:\n            res.append('D')\n        elif i >= 0.0:\n            res.append('D-')\n        else:\n            res.append('E')\n    return res\n",
        "num_ids": 266
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    grade_list = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            grade_list.append(\"A+\")\n        elif 3.7 <= gpa <= 3.9:\n            grade_list.append(\"A\")\n        elif 3.3 <= gpa <= 3.7:\n            grade_list.append(\"A-\")\n        elif 3.0 <= gpa <= 3.3:\n            grade_list.append(\"B+\")\n        elif 2.7 <= gpa <= 3.0:\n            grade_list.append(\"B\")\n        elif 2.3 <= gpa <= 2.7:\n            grade_list.append(\"B-\")\n        elif 2.0 <= gpa <= 2.3:\n            grade_list.append(\"C+\")\n        elif 1.7 <= gpa <= 2.0:\n            grade_list.append(\"C\")\n        elif 1.3 <= gpa <= 1.7:\n            grade_list.append(\"C-\")\n        elif 1.0 <= gpa <= 1.3:\n            grade_list.append(\"D+\")\n        elif 0.7 <= gpa <= 1.0:\n            grade_list.append(\"D\")\n        elif 0.0 <= gpa <= 0.7:\n            grade_list.append(\"D-\")\n        else:\n            grade_list.append(\"E\")\n    return grade_list\n",
        "num_ids": 339
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #grades is a list of gpa's. The index of the list is the index of the student.\n    #grades = [[4.0, 3, 1.7, 2, 3.5], [3.7, 4.0, 2.9, 1.7, 2.5], [3.3, 3.7, 2.7, 2.3, 3.0]]\n    #grades = [[4.0, 3.7, 2.9, 1.7, 2.5], [3.7, 4.0, 2.9, 1.7, 2.5], [3.3, 3.7, 2.7, 2.3, 3.0]]\n",
        "num_ids": 157
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    def letter_grade(grade):\n        if grade >= 4:\n            return 'A+'\n        elif grade >= 3.7:\n            return 'A'\n        elif grade >= 3.3:\n            return 'A-'\n        elif grade >= 3.0:\n            return 'B+'\n        elif grade >= 2.7:\n            return 'B'\n        elif grade >= 2.3:\n            return 'B-'\n        elif grade >= 2.0:\n            return 'C+'\n        elif grade >= 1.7:\n            return 'C'\n        elif grade >= 1.3:\n            return 'C-'\n        elif grade >= 1.0:\n            return 'D+'\n        elif grade >= 0.7:\n            return 'D'\n        elif grade >= 0.0:\n            return 'D-'\n        else:\n            return 'E'\n",
        "num_ids": 215
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "num_ids": 295
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(string) == 0 or len(string) == 1:\n        return True\n    else:\n        for i in range(2,int(len(string)/2)+1):\n            if len(string) % i == 0:\n                return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(string) > 1:\n        if len(string) % 2 == 0:\n            return False\n        else:\n            return all(string[i]!= string[i+1] for i in range(len(string) - 1))\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(string) in [2, 3, 5, 7] or (len(string)!= 1 and all(string[i]!= string[j] for i in range(len(string)) for j in range(len(string)) if i!= j))\n",
        "num_ids": 63
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    len_int = int(string)\n    num = 0\n    for num in range(len_int):\n        if len_int % num == 0 and num!= 1 and num!= len_int:\n            return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    length = len(string)\n    if length > 1:\n        for i in range(2, length):\n            if length % i == 0:\n                return False\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 54
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(string) in prime_list(string)\n",
        "num_ids": 15
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(string) == 1:\n        return True\n    else:\n        i = 2\n        while i < (len(string)+1) / 2:\n            if len(string) % i == 0:\n                return False\n            i += 1\n        return True\n",
        "num_ids": 64
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(string) == 2:\n        return True\n    elif len(string) % 2 == 0:\n        return False\n    else:\n        return prime_length_helper(string, int(len(string)/2))\n",
        "num_ids": 56
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    if string is None:\n        return None\n    return len(string) == len(set(string))\n",
        "num_ids": 28
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return ends(n, 1) + starts(n, 1)\n",
        "num_ids": 17
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum(n//(10**i) == 1 for i in range(n))\n",
        "num_ids": 22
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # answer = 0\n    # for i in range(1,n):\n    #     answer += (i%10)**n\n    # return answer\n    return sum([i%10**n for i in range(1, 10**n)])\n    # answer = 1\n    # for i in range(1, 10):\n    #     answer *= i\n    # return int(answer)\n",
        "num_ids": 93
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def helper(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 2\n        elif n == 2:\n            return 3\n        else:\n            return helper(n-1) + (helper(n-2)*2)\n",
        "num_ids": 67
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if (i == 1) or (j == 1):\n                s += 10**(n-2)\n    return s\n",
        "num_ids": 57
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = 0\n    for i in range(1, n+1):\n        num = str(i)\n        if num[0] == \"1\" or num[-1] == \"1\":\n            result += 1\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    end_1 = 0\n    for i in range(n):\n        if int(str(i)[0] == 1 or str(i)[-1] == 1):\n            end_1 += 1\n    return end_1\n",
        "num_ids": 54
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return binomial(n, n-1) + binomial(n, n-2)\n",
        "num_ids": 23
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    num_strings = 0\n    for i in range(1, n+1):\n        start_ends = get_start_ends(i)\n        num_strings += sum(start_ends.values())\n    return num_strings\n",
        "num_ids": 55
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = N\n    sum_binary = 0\n    while n >= 1:\n        remainder = n % 2\n        sum_binary += remainder\n        n = n // 2\n    return str(sum_binary)\n",
        "num_ids": 52
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return None",
        "num_ids": 6
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # import math library\n    import math\n    \n    # make an integer from N\n    i = int(N)\n    \n    # find sum of digits\n    sum = 0\n    while (i >= 1):\n        sum += i % 2\n        i = i // 2\n    \n    # transform into binary\n    binary = str(sum)\n    binary = binary[::-1]\n    \n    return binary",
        "num_ids": 98
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = \"\"\n    while N > 0:\n        remainder = N % 2\n        N = N // 2\n        result = str(remainder) + result\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: implement solution\n    \n    return int(str(bin(N)).replace('0b',''))\n",
        "num_ids": 29
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = str(bin(N)[2:])\n    s = '0'*(16-len(s))+s\n    s = s[:8]+' '+s[8:]\n    return s[:8]\n",
        "num_ids": 55
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return str(bin(N).replace('0b', ''))[::-1]\n",
        "num_ids": 22
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #     DecimalToBinary(x)\n    #     Convert a non-negative integer to its binary representation in a string\n    #     Example: decimalToBinary(5) returns \"101\"\n    #     Constraints: 0 \u2264 x \u2264 255.\n    \n    #     BinaryToDecimal(x)\n    #     Convert a binary number to its decimal representation in a string.\n    #     Example: binaryToDecimal(\"101\") returns \"5\"\n    #     Note: you must use the built-in function bin()\n    #     Constraints: x must be a string that represents a binary number.\n    \n    #     BinaryArrayToDecimal(binaryArray)\n    #     Convert a binary array (a list of 1's and 0's) to a decimal number.\n    #     Example: binaryArrayToDecimal([0,0,0,1,0,1,1,1,0]) returns 8\n    #     Constraints: the binary array must be non-empty.\n    \n    #     BinaryToArray(binaryValue)\n    #     Convert a decimal number to its binary array representation as a list.\n    #     Example: binaryToArray(\"101\") returns [0,1,1,0]\n    #     Constraints: x must be a string that represents a binary number.\n    \n    #     DecimalToArray(decimalValue)\n    #     Convert a decimal number to its binary array representation as a list.\n    #     Example: decimalToArray(5) returns [1,0,0,1,0]\n    #     Constraints: 0 \u2264 x \u2264 255.\n    \n    #     BinaryToHex(binary)\n    #     Convert a binary number to its hexadecimal representation in a string.\n    #     Example: binaryToHex(\"1111\") returns \"f\"\n    #     Constraints: x must be a string that represents a binary number.\n    \n    #     HexToBinary(hex)\n    #     Convert a hexadecimal number to its binary representation in a string.\n    #     Example: hexToBinary(\"f\") returns \"1111\"\n    #     Constraints: x must be a string that represents a hexadecimal number.\n    \n    #     HexArrayToBinary(hexArray)\n    #     Convert a hexadecimal array (a list of hexadecimal digits) to its binary array representation as a list.\n    #     Example: hexArrayToBinary([\"A\", \"F\", \"f\"]) returns [10, 15, 111]\n    #     Constraints: the characters in the input must be in the set [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"0\", \"1\"].\n    \n    #     HexToArray(hexValue)\n    #     Convert a hexadecimal number to its binary array representation as a list.\n    #     Example: hexToArray(\"F\") returns [15]\n    #     Constraints: x must be a string that represents a hexadecimal number.\n    \n    #     ArrayToHex(array)\n    #     Convert a binary array (a list of 1's and 0's) to its hexadecimal representation as a string.\n    #     Example: arrayToHex([0,0,0,1,0,1,1,1,0]) returns \"A0B101101010\"\n    #     Constraints: the binary array must be non-empty.\n    \n    #     ArrayToBinary(array)\n    #     Convert a binary array (a list of 1's and 0's) to its decimal representation as a string.\n    #     Example: arrayToBinary([0,0,0,1,0,1,1,1,0]) returns \"101010\"\n    #     Constraints: the binary array must be non-empty.\n    #     Convert a decimal number to its binary array representation as a list.\n    #     Example: decimalToArray(5) returns [1,0,0,1,0]\n    #     Constraints: 0 \u2264 x \u2264 255.\n    #     Convert a decimal number to its binary array representation as a list",
        "num_ids": 975
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return bin(N)[2:]\n",
        "num_ids": 10
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return bin(N)[2:]\n",
        "num_ids": 10
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    new_list = []\n    for i in range(0, len(lst)):\n        if i % 2!= 0:\n            new_list.append(lst[i])\n    print(sum(new_list))\n",
        "num_ids": 56
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [lst[i] for i in range(len(lst)) if i%2 == 1 and lst[i] % 2 == 0]\n",
        "num_ids": 37
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2)])\n",
        "num_ids": 26
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([i for i in lst[1::2] if i%2 == 0])\n",
        "num_ids": 24
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i\n    return sum \n",
        "num_ids": 33
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    new = []\n    i = 0\n    for num in lst:\n        if (num % 2) == 0:\n            new.append(num)\n        i+=1\n    return sum(new)\n        \n    ",
        "num_ids": 53
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(1, len(lst), 2):\n        lst[i] = lst[i] + lst[i - 1]\n",
        "num_ids": 38
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum(lst[1::2])\n",
        "num_ids": 13
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = 0\n    for i in range(1, len(lst), 2):\n        result += lst[i]\n",
        "num_ids": 31
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # split into list\n    words = s.split()\n",
        "num_ids": 15
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l = s.split()\n    li = [sorted(i) for i in l]\n    return''.join(li)\n    ",
        "num_ids": 33
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    word = \"\"\n    new_string = \"\"\n    for char in s:\n        if char == \" \":\n            new_string += \" \"\n        else:\n            word += char\n            new_string += sorted(word)[0]\n            word = \"\"\n",
        "num_ids": 62
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    words = s.split(' ')\n    sorted_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        sorted_words.append(sorted_word)\n    return''.join(sorted_words)",
        "num_ids": 66
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = s.split()\n    s.sort(key=ord)\n    return \" \".join(s)\n",
        "num_ids": 28
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    word = s.split(' ')\n    word.sort()\n    return''.join(word)\n",
        "num_ids": 25
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    words = s.split()\n    word_list = []\n    for word in words:\n        alpha_list = list(word)\n        alpha_list.sort()\n        alpha_list = ''.join(alpha_list)\n        word_list.append(alpha_list)\n    s =''.join(word_list)\n    return s\n",
        "num_ids": 82
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    try:\n        if len(s) <= 1:\n            return s\n        s = s.split(\" \")\n        if len(s) == 1:\n            return s[0]\n        # Order letters in each word and make a new string\n        return''.join([anti_shuffle(''.join(sorted(word))) for word in s])\n    except:\n        return \"Invalid Input\"\n",
        "num_ids": 94
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    coord = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coord.append((i,j))\n    coord.sort()\n    coord.sort(key = lambda x : x[1], reverse = True)\n    return coord",
        "num_ids": 85
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    import itertools\n    coord = []\n    for row in range(len(lst)):\n        for col in range(len(lst[row])):\n            if lst[row][col] == x:\n                coord.append((row, col))\n    coord.sort(key=lambda x: (x[0], -x[1]))\n    return coord\n    \n    \n    \n    \n    # return [(x1, y1), (x2, y2)...]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1023
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lst_tup = []\n    for i in range(0, len(lst)):\n        for j in range(0, len(lst[i])):\n            if x == lst[i][j]:\n                lst_tup.append((i, j))\n    lst_tup.sort()\n    lst_tup.sort(key = lambda x: x[1], reverse=True)\n    return lst_tup\n",
        "num_ids": 109
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not lst:\n        return []\n    result = []\n    for i, row in enumerate(lst):\n        for j, v in enumerate(row):\n            if v == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: x[0])\n",
        "num_ids": 75
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst = sorted(lst)\n    lst = [tuple(i) for i in lst]\n    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    return [(i, j) for i, j in lst if i == x]\n",
        "num_ids": 90
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (x[0], x[1]))\n",
        "num_ids": 52
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(\n        [(i, j) for i, row in enumerate(lst) for j in range(len(row)) if row[j] == x]\n    )\n",
        "num_ids": 45
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: Fix the bug, it works for all test cases but for the last test case\n    # the output is incorrect, i couldn't figure out why and i don't know how to fix it\n    coordinate = []\n    for i in range(0, len(lst)):\n        if x in lst[i]:\n            coordinate.append((i, lst[i].index(x)))\n    return coordinate\n",
        "num_ids": 99
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(array) <= 1:\n        return array\n    \n    left = 0\n    right = len(array) - 1\n    \n    while left < right:\n        if (array[left] + array[right]) % 2 == 0:\n            left += 1\n            right -= 1\n        else:\n            array[left], array[right] = array[right], array[left]\n            left += 1\n            right -= 1\n    \n    return array",
        "num_ids": 107
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # init new array with same length\n    new_array = array.copy()\n    # sort new_array\n    new_array.sort()\n    # return new_array\n    return new_array\n",
        "num_ids": 48
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(array) == 0: return []\n    array.sort()\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    return arra",
        "num_ids": 51
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(array) < 2:\n        return array\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return array.sort(key=lambda x: x+x[::-1][0])\n    # return array.sort(key=lambda x: x+x[::-1])\n",
        "num_ids": 44
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not array: return []\n",
        "num_ids": 9
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(array) == 0:\n        return array\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    if len(array) == 1:\n        return array\n",
        "num_ids": 17
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # We don't care about the range of values in the array, so we can use binary search to find the\n    # pivot value and then split the array around the pivot.\n    # Time complexity: O(N * log N)\n    # Space complexity: O(N)\n    start = 0\n    end = len(array) - 1\n    pivot = 0\n",
        "num_ids": 84
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    newstring = \"\"\n    for i in s:\n        if ord(i) + 2 > 122:\n            newstring += chr((ord(i) + 2) - 122 + 96)\n        else:\n            newstring += chr(ord(i) + 2)\n    return newstring\n",
        "num_ids": 70
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # create a string called alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n",
        "num_ids": 30
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    #assign empty list\n    result = []\n    \n    #loop through each character in the string\n    for char in s:\n        #create an index variable to count through the list\n        index = alphabet.index(char)\n        #if the index is greater than or equal to 20\n        if index >= 20:\n            #minus the index by 20\n            index -= 20\n            #add the modulo of the index by 20\n            index = index % 20\n        #append the resulting character to the list\n        result.append(alphabet[index])\n    \n    #return the result\n    return \"\".join(result)\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    \n    #assign empty list\n    result = []\n    \n    #loop through each character in the string\n    for char in s:\n        #create an index variable to count through the list\n        index = alphabet.index(char)\n        #if the index is less than or equal to 20\n        if index <= 20:\n            #add the modulo of the index by 20\n            index = index % 20\n        #append the resulting character to the list\n        result.append(alphabet[index])\n    \n    #return the result\n    return \"\".join(result)\n    \ndef encrypt_string(s):\n    \"\"\"\n    Create a function that takes a string as an argument and \n    returns an encrypted string\n    \"\"\"\n    \n    #assign empty list\n    result = []\n    \n    #loop through each character in the string\n    for char in s:\n        #create an index variable to count through the list\n        index = alphabet.index(char)\n        #if the index is greater than or equal to 20\n        if index >= 20:\n            #minus the index by 20\n            index -= 20\n            #add the modulo of the index by 20\n            index = index % 20\n        #append the resulting character to the list\n        result.append(alphabet[index])\n    \n    #return the result\n    return \"\".join(result)\n    \ndef decrypt_string(s):\n    \"\"\"\n    Create a function that takes a string as an argument and \n    returns an decrypted string\n    \"\"\"\n    \n    #assign empty list\n    result = []\n    \n    #loop through each character in the string\n    for char in s:\n        #create an index variable to count through the list\n        index = alphabet.index(char)\n        #if the index is less than or equal to 20\n        if index <= 20:\n            #add the modulo of the index by 20\n            index = index % 20\n        #append the resulting character to the list\n        result.append(alphabet[index])\n    \n    #return the result\n    return \"\".join(result)\n    \n    \n    \nif __name__ == \"__main__\":\n    \n    #print the function encrypt with a string\n    print(encrypt('hi'))\n    \n    #print the function decrypt with a string\n    print(decrypt('lm'))\n    \n    #print the encrypt_string function\n    print(encrypt_string('hi'))\n    \n    #print the decrypt_string function\n    print(decrypt_string('lm'))",
        "num_ids": 865
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    my_list = []\n    # Fill the list with the original alphabet\n    for i in range(26):\n        my_list.append(chr(i + ord('a')))\n",
        "num_ids": 45
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    output = \"\"\n    for i in range(len(s)):\n        if s[i] in alphabet:\n            letter_pos = alphabet.index(s[i])\n            new_pos = (letter_pos+2) * 2\n            if new_pos > len(alphabet):\n                new_pos = new_pos - 26\n            output = output + alphabet[new_pos]\n        else:\n            output = output + s[i]\n    return output\n",
        "num_ids": 110
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    ciphertext = ''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in s:\n        if i.islower() == True:\n            pos = alphabet.find(i)\n            pos = pos + 2\n            if pos < 25:\n                ciphertext += alphabet[pos]\n            else:\n                ciphertext += alphabet[pos - 26]\n        elif i.isupper() == True:\n            pos = alphabet.upper().find(i)\n            pos = pos + 2\n            if pos < 25:\n                ciphertext += alphabet[pos].upper()\n            else:\n                ciphertext += alphabet[pos - 26].upper()\n    return ciphertext\n",
        "num_ids": 176
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # s = s.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for letter in s:\n        if alphabet.find(letter) == -1:\n            encrypted += letter\n        else:\n            new_index = alphabet.index(letter) + 2\n            encrypted += alphabet[new_index%26]\n    return encrypted\n",
        "num_ids": 95
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s = list(s)\n    encrypted_string = ''\n",
        "num_ids": 16
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    return \"\".join(list(map(lambda x: x[1], list(filter(lambda x: x[0] in s, zip(alphabet,rotated_alphabet)))))[::-1])\nprint(encrypt('asdfghjkl'))\n",
        "num_ids": 102
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    if lst == []:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n        ",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) < 2:\n        return None\n    \n    if len(lst) == 2:\n        return lst[0] if lst[0] < lst[1] else lst[1]\n    \n    # Return the 2nd smallest element.\n    # Edge case: if all elements are equal.\n    # Return None.\n    min_num = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_num:\n            min_num = lst[i]\n    \n    return lst[0] if lst[0]!= min_num else next_smallest(lst[1:])",
        "num_ids": 167
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) < 2:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst.sort()\n    try:\n        return lst[1]\n    except IndexError:\n        return None\n",
        "num_ids": 30
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1",
        "num_ids": 33
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst) < 2:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    if lst:\n        lst.sort()\n        return lst[1]\n    \n",
        "num_ids": 26
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(lst) < 2:\n        return None\n    else:\n        return sorted(lst)[1]\n",
        "num_ids": 30
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    words = S.split()\n    \n    return sum([1 for word in words if word[0] == 'I'])\n",
        "num_ids": 31
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return 0\n    return sum([\"I \" in i for i in S.split('.')]) + sum([\"I \" in i for i in S.split('?')]) + sum([\"I \" in i for i in S.split('!')])\n",
        "num_ids": 62
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \n",
        "num_ids": 5
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([sentence.startswith(\"I\") for sentence in S.split(\".\")])\n",
        "num_ids": 24
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    i = 0\n    for sentence in S.split('.'):\n        if sentence[0:2] == 'I ':\n            i += 1\n    return i\n",
        "num_ids": 40
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum(S.startswith(x) for x in [\"I\",\"i\"])\n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(",
        "num_ids": 51
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    \n    for i in S.split('.'):\n        if 'I'in i.split():\n            count += 1\n    \n    return count\n",
        "num_ids": 41
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # your code here\n    return 0\n",
        "num_ids": 11
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    boredoms = 0\n    for index,char in enumerate(S):\n        if char in [\".\", \"?\", \"!\"]:\n            S = S[index+1:]\n            break\n        elif char == \"I\":\n            boredoms += 1\n        else:\n            break\n    return boredoms\n    \ndef test_is_bored():\n    assert is_bored(\"Hello world\") == 0\n    assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1\n    assert is_bored(\"I love you. The sky is blue. The sun is shining. I love this weather\") == 1\n    assert is_bored(\"I love you. The sky is blue. The sun is shining. I love this weather. I love you\") == 0\n    assert is_bored(\"Hello world!?!?!? I love you.\") == 0\n    assert is_bored(\"Hello world!?!?!? I love you.\") == 0\n    assert is_bored(\"Hello world!?!?!? I love you. I love you!\") == 0\n    assert is_bored(\"Hello world. I love you.\") == 0\n    assert is_bored(\"Hello world I love you.\") == 0\n    assert is_bored(\"Hello world I love you. I love you!\") == 0\n    assert is_bored(\"Hello world I love you. I love you!\") == 0\n    assert is_bored(\"Hello world I love you. I love you! I love you!\") == 0\n    assert is_bored(\"Hello world I love you. I love you! I love you! I love you!\") == 0\n    assert is_bored(\"Hello world. I love you. I love you! I love you! I love you!\") == 0\n    assert is_bored(\"Hello world. I love you. I love you! I love you! I love you! I love you!\") == 0\n    assert is_bored(\"Hello world. I love you. I love you! I love you! I love you! I love you! I love you! I love you!\") == 0\n    assert is_bored(\"Hello world. I love you. I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love you! I love yo",
        "num_ids": 1025
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if int(x) + int(y) == int(z) or int(x) + int(z) == int(y) or int(y) + int(z) == int(x):\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x + y == z or x == z + y or y == z + x\n",
        "num_ids": 21
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    return (x+y) == z or (x+z) == y or (y+z) == x\n",
        "num_ids": 29
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    if x==int(x) and y==int(y) and z==int(z):\n        if int(x) == int(y)+int(z):\n            return True\n        elif int(y) == int(x)+int(z):\n            return True\n        elif int(z) == int(x)+int(y):\n            return True\n        else:\n            return False\n    else:\n        return False\n    ",
        "num_ids": 105
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if (x+y == z) or (x+z == y) or (z+y == x):\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or y + z == x or z + x == y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    elif not isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return False\n    elif isinstance(x, int) and not isinstance(y, int) and isinstance(z, int):\n        return False\n    elif isinstance(x, int) and isinstance(y, int) and not isinstance(z, int):\n        return False\n    else:\n        return False\n",
        "num_ids": 164
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if x == int(y) + int(z) or x == int(z) + int(y) or y == int(z) + int(x) or y == int(x) + int(z):\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return True if x == y+z or x == z+y or y == z+x else False\n",
        "num_ids": 27
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    message = message.lower()\n    encoded_message = ''\n    vowel_letters = ['a','e','i','o','u']\n    \n    for letter in message:\n        if letter not in vowel_letters:\n            encoded_message += letter\n            \n        else:\n            encoded_message += message[message.find(letter) + 2]\n            \n    return encoded_message\n",
        "num_ids": 95
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Store vowels in a set to make finding them faster.\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    # First, just to make things easier, I'll set the message to \n    # all lowercase.\n    message = message.lower()\n    \n    # First, I'll get a copy of the message, so that I can modify \n    # it.\n    new_message = message[:]\n    \n    # For each letter in the message, change the case of that \n    # letter, and replace the vowels with the correct vowel.\n    for i in range(len(message)):\n        if message[i] in vowels:\n            new_message = new_message[:i] + new_message[i].swapcase() + new_message[i+1:]\n        else:\n            new_message = new_message[:i] + message[i] + new_message[i+1:]\n    return new_message\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(",
        "num_ids": 260
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    message = message.upper()\n    vowels = set('AEIOU')\n    encoded = []\n    for letter in message:\n        if letter not in vowels:\n            encoded.append(letter)\n        else:\n            encoded.append(chr(ord(letter)+2))\n    return ''.join(encoded)\n",
        "num_ids": 84
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    encoded_message = \"\"\n    \n    # initialize the alphabet dictionary\n    alphabet = {\n        \"a\" : 1,\n        \"b\" : 2,\n        \"c\" : 3,\n        \"d\" : 4,\n        \"e\" : 5,\n        \"f\" : 6,\n        \"g\" : 7,\n        \"h\" : 8,\n        \"i\" : 9,\n        \"j\" : 10,\n        \"k\" : 11,\n        \"l\" : 12,\n        \"m\" : 13,\n        \"n\" : 14,\n        \"o\" : 15,\n        \"p\" : 16,\n        \"q\" : 17,\n        \"r\" : 18,\n        \"s\" : 19,\n        \"t\" : 20,\n        \"u\" : 21,\n        \"v\" : 22,\n        \"w\" : 23,\n        \"x\" : 24,\n        \"y\" : 25,\n        \"z\" : 26,\n    }\n    \n    # for each character in the message\n    for character in message:\n        \n        # get the character code\n        character_code = alphabet[character]\n        \n        # change to upper case\n        if character.islower():\n            character = character.upper()\n        \n        # use the character code to encode the character\n        encoded_character_code = character_code + 26\n        encoded_character = chr(encoded_character_code)\n        \n        # append to the message\n        encoded_message += encoded_character\n        \n    return encoded_message\n    \n    \ndef decode(encoded_message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'TEST'\n    >>> decode('Thks KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    \n    decoded_message = \"\"\n    \n    # initialize the alphabet dictionary\n    alphabet = {\n        \"a\" : 1,\n        \"b\" : 2,\n        \"c\" : 3,\n        \"d\" : 4,\n        \"e\" : 5,\n        \"f\" : 6,\n        \"g\" : 7,\n        \"h\" : 8,\n        \"i\" : 9,\n        \"j\" : 10,\n        \"k\" : 11,\n        \"l\" : 12,\n        \"m\" : 13,\n        \"n\" : 14,\n        \"o\" : 15,\n        \"p\" : 16,\n        \"q\" : 17,\n        \"r\" : 18,\n        \"s\" : 19,\n        \"t\" : 20,\n        \"u\" : 21,\n        \"v\" : 22,\n        \"w\" : 23,\n        \"x\" : 24,\n        \"y\" : 25,\n        \"z\" : 26,\n    }\n    \n    # for each character in the message\n    for character in encoded_message:\n        \n        # get the character code\n        character_code = ord(character)\n        \n        # change to upper case\n        if character.islower():\n            character = character.upper()\n        \n        # use the character code to encode the character\n        decoded_character_code = character_code - 26\n        decoded_character = chr(decoded_character_code)\n        \n        # append to the message\n        decoded_message += decoded_character\n        \n    return decoded_message\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1024
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_msg = ''\n    \n    for letter in message.lower():\n        if letter in vowels:\n            new_msg += message[vowels.index(letter) + 2]\n        else:\n            new_msg += letter\n    \n    return new_msg\n",
        "num_ids": 88
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass \n",
        "num_ids": 5
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # first change case of letters\n    # second change vowels\n    # replace the vowels with the letters two places ahead of them\n    \n    letter_dict = {'a' : 'A', 'b' : 'B', 'c' : 'C', 'd' : 'D', 'e' : 'E', \n    'f' : 'F', 'g' : 'G', 'h' : 'H', 'i' : 'I', 'j' : 'J', 'k' : 'K', \n    'l' : 'L','m' : 'M', 'n' : 'N', 'o' : 'O', 'p' : 'P', 'q' : 'Q', \n    'r' : 'R','s' : 'S', 't' : 'T', 'u' : 'U', 'v' : 'V', 'w' : 'W', \n    'x' : 'X', 'y' : 'Y', 'z' : 'Z'}\n    new_msg = []\n    for letter in message.lower():\n        if letter in letter_dict:\n            new_msg.append(letter_dict[letter])\n        else:\n            new_msg.append(letter)\n    # replace vowels\n    vowel_dict = {'a' : ['a', 'e', 'i', 'o', 'u'], 'e' : ['a', 'e'], 'i' : ['e', 'i'], 'o' : ['i', 'o'], 'u' : ['o', 'u']}\n    for i in range(0, len(new_msg)):\n        if new_msg[i] in vowel_dict:\n            vowel_count = 0\n            for vowel in vowel_dict[new_msg[i]]:\n                if vowel == new_msg[i + 2]:\n                    new_msg[i + 1] = vowel\n                    break\n                vowel_count += 1\n            if vowel_count == len(vowel_dict[new_msg[i]]):\n                new_msg[i + 1] = vowel_dict[new_msg[i]][0]\n    # replace cases\n    new_msg = ''.join(new_msg)\n    return new_msg\n",
        "num_ids": 528
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return message.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    import math\n    def isPrime(num):\n        if num == 1:\n            return False\n        for i in range(2,math.floor(math.sqrt(num))+1):\n            if num%i == 0:\n                return False\n        return True\n    max_prime = max([i for i in lst if isPrime(i)])\n    print(max_prime)\n    return sum([int(i) for i in list(str(max_prime))])\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])",
        "num_ids": 166
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n",
        "num_ids": 7
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    import math\n    lst = [int(i) for i in lst]\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            return 1\n        if lst[i] == 2:\n            return 2\n        if lst[i] == 3:\n            return 3\n        if lst[i] == 5:\n            return 5\n        if lst[i] == 7:\n            return 7\n        if lst[i] == 11:\n            return 11\n        if lst[i] == 13:\n            return 13\n        if lst[i] == 17:\n            return 17\n        if lst[i] == 19:\n            return 19\n        if lst[i] == 23:\n            return 23\n        if lst[i] == 29:\n            return 29\n        if lst[i] == 31:\n            return 31\n        if lst[i] == 37:\n            return 37\n        if lst[i] == 41:\n            return 41\n        if lst[i] == 43:\n            return 43\n        if lst[i] == 47:\n            return 47\n        if lst[i] == 53:\n            return 53\n        if lst[i] == 59:\n            return 59\n        if lst[i] == 61:\n            return 61\n        if lst[i] == 67:\n            return 67\n        if lst[i] == 71:\n            return 71\n        if lst[i] == 73:\n            return 73\n        if lst[i] == 79:\n            return 79\n        if lst[i] == 83:\n            return 83\n        if lst[i] == 89:\n            return 89\n        if lst[i] == 97:\n            return 97\n        if lst[i] == 101:\n            return 101\n        if lst[i] == 103:\n            return 103\n        if lst[i] == 107:\n            return 107\n        if lst[i] == 109:\n            return 109\n        if lst[i] == 113:\n            return 113\n        if lst[i] == 127:\n            return 127\n        if lst[i] == 131:\n            return 131\n        if lst[i] == 137:\n            return 137\n        if lst[i] == 139:\n            return 139\n        if lst[i] == 149:\n            return 149\n        if lst[i] == 151:\n            return 151\n        if lst[i] == 157:\n            return 157\n        if lst[i] == 163:\n            return 163\n        if lst[i] == 167:\n            return 167\n        if lst[i] == 173:\n            return 173\n        if lst[i] == 179:\n            return 179\n        if lst[i] == 181:\n            return 181\n        if lst[i] == 191:\n            return 191\n        if lst[i] == 193:\n            return 193\n        if lst[i] == 197:\n            return 197\n        if lst[i] == 199:\n            return 199\n        if lst[i] == 211:\n            return 211\n        if lst[i] == 223:\n            return 223\n        if lst[i] == 227:\n            return 227\n        if lst[i] == 229:\n            return 229\n        if lst[i] == 233:\n            return 233\n        if lst[i] == 239:\n            return 239\n        if lst[i] == 241:\n            return 241\n        if lst[i] == 251:\n            return 251\n        if lst[i] == 257:\n            return 257\n        if lst[i] == 263:\n            return 263\n        if lst[i] == 269:\n            return 269\n        if lst[i] == 271:\n            return 271\n        if lst[i] == 277:\n            return 277\n        if lst[i] == 281:\n            return 281\n        if lst[i] == 283:\n            return 283\n        if lst[i] == 293:\n            return 293\n        if lst[i] == 307:\n            return 307\n        if lst[i] == 311:\n            return 311\n        if lst[i] == 313:\n            return 313\n    ",
        "num_ids": 1025
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    output = 0\n    for n in lst:\n        if isPrime(n):\n            output = output + n\n    return output\n",
        "num_ids": 33
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # write your code here\n    prime_num = primes(lst)\n    # print(prime_num)\n    num = 0\n    for i in prime_num:\n        s = sum(int(i) for i in str(i))\n        num = max(s,num)\n    return num\n",
        "num_ids": 74
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = 0\n    for num in lst:\n        if is_prime(num):\n            result += sum([int(x) for x in list(str(num))])\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def prime_check(n):\n        if n == 2:\n            return True\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 58
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    import math\n    new_lst = []\n    for x in lst:\n        if x!= 0:\n            new_lst.append(x)\n        else:\n            new_lst.append(x)\n    print(new_lst)\n    print(max(new_lst))\n    primo = [x for x in new_lst if (x!=0 and all(x%i!=0 for i in range(2,x)))]\n    if len(primo) == 0:\n        print(sum(new_lst))\n    else:\n        print(sum(primo))\n",
        "num_ids": 149
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(dict) == 0:\n        return False\n    if all(type(dict[x]) == str for x in dict):\n        return all(x.islower() for x in dict.keys()) or all(x.isupper() for x in dict.keys())\n    return False\n",
        "num_ids": 69
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return all(type(key) == str and key.isupper() for key in dict.keys()) or \\\n    all(type(key) == str and key.islower() for key in dict.keys())\n",
        "num_ids": 50
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for key in dict:\n        if type(key)!= str:\n            return False\n        if key.isupper() == dict[key].isupper():\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # If the dictionary is empty, the function should return False\n    if not dict:\n        return False\n    # If all the keys are strings in upper or lower case, return True\n    if all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys()):\n        return True\n    # If at least one key is not in lower case or upper case, return False\n    else:\n        return False\n",
        "num_ids": 106
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(dict) == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n    else:\n        for key in dict:\n            if type(key) == str:\n                if key.isupper() or key.islower():\n                    continue\n                else:\n                    return False\n            else:\n                return False\n        return True\n",
        "num_ids": 88
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        return all(k.isupper() for k in dict.keys()) or all(k.islower() for k in dict.keys())\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return all(isinstance(key, str) and key.isupper() for key in dict.keys()) or all(isinstance(key, str) and key.islower() for key in dict.keys())\n",
        "num_ids": 49
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if not (type(key) == str and (key.isupper() or key.islower())):\n                return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n    return []\n",
        "num_ids": 11
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    for number in range(1, n):\n        if is_prime(number):\n            result.append(number)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    if n < 1:\n        return result\n    # Iterate up to the number specified.\n    for i in range(1, n):\n        # Check if it is prime.\n        if is_prime(i):\n            result.append(i)\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 1:\n        return []\n    if n == 1:\n        return []\n    # init list\n    list_of_primes = []\n    # first 2 numbers prime numbers\n    list_of_primes.append(2)\n    list_of_primes.append(3)\n    for i in range(5, n):\n        # assume number i is prime\n        is_prime = True\n        # divide i by every number in the list_of_primes\n        for prime in list_of_primes:\n            if i % prime == 0:\n                is_prime = False\n        if is_prime:\n            list_of_primes.append(i)\n    return list_of_primes\n",
        "num_ids": 171
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def count_up_to_n(n):\n        lst = []\n        for i in range(2, n+1):\n            if is_prime(i):\n                lst.append(i)\n        return lst\n    return count_up_to_n(n)\n",
        "num_ids": 69
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return []\n    elif n == 2:\n        return [2]\n    elif n == 3:\n        return [2, 3]\n    elif n > 3:\n        return [2, 3] + count_up_to(n - 3)\n",
        "num_ids": 81
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for x in range(n):\n        if is_prime(x):\n            result.append(x)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def is_prime(n):\n        \"\"\"Returns True if n is prime number\"\"\"\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        sqrt_n = math.floor(math.sqrt(n))\n        for i in range(3, sqrt_n + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 109
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    pass\n",
        "num_ids": 6
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a % 10 * b % 10\n",
        "num_ids": 11
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    product = a * b\n    for i in str(product):\n        if i!= \"0\":\n            return product\n    return 0\n",
        "num_ids": 34
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return a * b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    prod = a*b\n    prod_string = str(prod)\n    prod_list = list(prod_string)\n    mult_list = []\n    for i in prod_list:\n        if i.isnumeric():\n            mult_list.append(int(i))\n    product = 1\n    for i in mult_list:\n        product *= i\n    return product\n",
        "num_ids": 96
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a1 = int(str(a)[-1])\n    b1 = int(str(b)[-1])\n    return a1*b1\n",
        "num_ids": 37
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return a*b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    p = 1\n    for i in str(a):\n        p *= int(i)\n    for i in str(b):\n        p *= int(i)\n    return p\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert s,'s must not be empty'\n    result = 0\n    for i in range(0, len(s)):\n        if i % 2 == 0:\n            if s[i].isupper():\n                result += 1\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    if len(s) == 0:\n        return 0\n    \n    i = 0\n    count = 0\n    \n    while i < len(s):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n        i += 1\n    \n    return count\n",
        "num_ids": 73
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not isinstance(s, str):\n        raise TypeError\n    if not s:\n        return 0\n    return len([char for (index, char) in enumerate(s) if index % 2 == 0 and char.isupper()])\n",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    vowel_list = list(filter(lambda x: x in \"aeiou\", s))\n    c = len(list(filter(lambda x: x in vowel_list, list(filter(lambda x: s[int(x)] not in \"aeiou\", s)))))\n    if len(vowel_list) <= 0:\n        return 0\n    return c//2\n",
        "num_ids": 93
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if type(s)!= str:\n        return 'Invalid input'\n        \n    s_list = list(s)\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    upper_vowels = [char for idx, char in enumerate(s_list) if idx % 2 == 0 and char.upper() in vowels]\n    \n    return len(upper_vowels)\n    \nif __name__ == '__main__':\n    print(count_upper('aBCdEf'))\n    print(count_upper('abcdefg'))\n    print(count_upper('dBBE'))\n    print(count_upper('AaBbCcDdEe'))\n    print(count_upper('AaBbCcDdEeFf'))\n    print(count_upper(''))\n    ",
        "num_ids": 213
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isalpha() and s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    vowels = \"AEIOU\"\n    num_vowels = 0\n    \n    # loop over indices of string s\n    for i in range(0, len(s)):\n        # check if index is even\n        if i % 2 == 0:\n            # check if character at index is a vowel\n            if s[i] in vowels:\n                # increment number of vowels\n                num_vowels += 1\n                \n    return num_vowels\n",
        "num_ids": 112
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    total = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in 'AEIOU':\n            total += 1\n    return total\n",
        "num_ids": 45
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    count = 0\n    vowels = 'AEIOU'\n    \n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n            \n    return coun",
        "num_ids": 60
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    import math\n    value = float(value)\n    decimal = value % 1\n    if decimal >= 0.5:\n        value = math.ceil(value)\n    else:\n        value = math.floor(value)\n    return int(value)\n",
        "num_ids": 62
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return int(value) if int(value) - float(value) < float(value) - int(value) else int(value) + 1\n",
        "num_ids": 35
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # check if the given value is a float\n    if type(value) == str:\n        # convert the given value to a float\n        value = float(value)\n",
        "num_ids": 40
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return int(value) if abs(int(value) - int(float(value))) > abs(int(value) - int(float(value)) - 1) else int(value) - int(float(value)) - 1\n",
        "num_ids": 53
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #isint = False\n    if value.isnumeric():\n        return int(value)\n    else:\n        if \".\" in value:\n            first_num = int(value[:value.find(\".\")])\n            second_num = int(value[value.find(\".\") + 1:])\n            if abs(first_num) > abs(second_num):\n                return first_num\n            else:\n                return second_num\n        else:\n            return int(value)\n",
        "num_ids": 115
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return int(value)\n",
        "num_ids": 8
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a = int(value)\n    if a > 0:\n        a = a + 0.5 if (a+0.5)%1 == 0 else a + 0.49\n    else:\n        a = a - 0.5 if (a-0.5)%1 == 0 else a - 0.49\n    return int(a)\n",
        "num_ids": 81
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if type(value)!= str:\n        return 0\n    else:\n        value = float(value)\n        if value % 1 >= 0.5:\n            value += 1\n        return int(value)\n",
        "num_ids": 50
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return int(value) if int(value) == float(value) else round(float(value))\n",
        "num_ids": 25
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n > 0, \"The number of stones must be positive.\"\n",
        "num_ids": 17
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Note: this can be done in a for loop, but for readability we're using a list comprehension\n    return [n] + [n+2 if n%2 == 0 else n+1]*2\n",
        "num_ids": 49
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [n if n % 2 else n + 1 for n in range(n, 0, -2)]\n",
        "num_ids": 26
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n%2 == 0:\n        return [n] + [n-2 for i in range(n-2)]\n    else:\n        return [n] + [n-1 for i in range(n-1)]\n",
        "num_ids": 54
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n % 2 == 1:\n        return [n] + make_a_pile(n+1)\n    else:\n        return [n] + make_a_pile(n+2)\n",
        "num_ids": 50
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    level = []\n    for i in range(n):\n        if i % 2 == 0:\n            level.append(2 * (i + 1))\n        else:\n            level.append((i + 1) * 2)\n    return level\n",
        "num_ids": 58
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return [i for i in range(n, n+n//2, 2)]\n    else:\n        return [i for i in range(n, n+n//2+1, 2)]\n",
        "num_ids": 56
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        return [n] + make_a_pile(n - 2)\n    return [n] + make_a_pile(n + 2)\n",
        "num_ids": 46
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n % 2 == 1:\n        return [n] + make_a_pile(n + 1)\n    else:\n        return [n] + make_a_pile(n + 2)\n",
        "num_ids": 50
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pile = [n]\n    while pile[-1] > 1:\n        pile.append(pile[-1]-2) if pile[-1] % 2 else pile.append(pile[-1]-1)\n    return pile\n",
        "num_ids": 60
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # return s.split()\n    return s.split(\", \")\n",
        "num_ids": 19
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst = []\n    x = s.replace(\",\", \" \")\n    for i in x.split():\n        lst.append(i)\n    return lst\n",
        "num_ids": 43
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return s.split(\", \")\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return s.split(', ') if ',' in s else s.split(' ')\n",
        "num_ids": 23
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return s.split(' ')\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return s.replace(\",\", \" \").split()\n",
        "num_ids": 15
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return s.split(',')\n    \ndef word_count(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is to\n    split the string into words and return a dictionary with each word being a key and\n    the count being the value.\n    \n    For example:\n    word_count(\"Hi my name is John\") == {\"Hi\": 1, \"my\": 1, \"name\": 1, \"is\": 1, \"John\": 1}\n    word_count(\"Hi, my, name, is John\") == {\"Hi\": 1, \"my\": 2, \"name\": 1, \"is\": 1, \"John\": 1}\n    \"\"\"\n    if s == '':\n        return {}\n    d = {}\n    l = words_string(s)\n    for w in l:\n        w = w.strip()\n        if w in d.keys():\n            d[w] = d[w] + 1\n        else:\n            d[w] = 1\n    return d\n",
        "num_ids": 238
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #take out the commas\n    s = s.replace(' ', '')\n    return s.split(',')\n",
        "num_ids": 29
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(max(x, y), min(x, y) - 1, -2):\n        if is_even(i):\n            return i\n    return -1\n",
        "num_ids": 44
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO: YOUR CODE HERE\n    num = x\n    while num <= y:\n        if num % 2 == 0:\n            return num\n        else:\n            num += 1\n    return -1\n",
        "num_ids": 49
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if x % 2 == 1: # odd number\n        return -1\n    elif x % 2 == 0: # even number\n        if y % 2 == 0: # even number\n            if y < x:\n                return -1\n            else:\n                return int(y)\n        elif y % 2 == 1: # odd number\n            if y < x:\n                return -1\n            else:\n                return int(y - 1)\n",
        "num_ids": 104
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    import random\n",
        "num_ids": 5
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # for loop to iterate over the range\n    for i in range(x, y+1):\n        # if the i is even and in the range\n        if i % 2 == 0 and i in range(x, y+1):\n            # return the i\n            return i\n    # return -1 if there's no such number in range\n    return -1\n",
        "num_ids": 85
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in range(x, y+1):\n        if i%2==0:\n            if y-x==1:\n                return i\n            else:\n                return i\n    return -1\n    \n",
        "num_ids": 51
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    number = x\n    while number <= y:\n        if number % 2 == 0 and number <= y:\n            return number\n        number += 1\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if y % 2 == 1:\n        return -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n",
        "num_ids": 46
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    if n > m:\n        return -1\n    else:\n        nums = [x for x in range(n, m+1)]\n        return bin(int(round(sum(nums)/len(nums))))[2:]\n",
        "num_ids": 59
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    if n > m:\n        return -1\n    else:\n        avg = sum(range(n, m+1)) // (m-n+1)\n        return bin(int(avg))[2:]\n",
        "num_ids": 55
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < m:\n        return -1\n    else:\n        return bin(int(round(sum([i for i in range(n,m+1)])/(m-n+1))))[2:]\n",
        "num_ids": 51
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n    elif n == m:\n        return \"0b{:0b}\".format(n)\n    elif n < m:\n        return \"0b{:0b}\".format((n + m) // 2)\n    ",
        "num_ids": 67
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    # if n > m:\n    #     return -1\n    \n    # a = n + m\n    # x = a // 2\n    # return bin(x)[2:]\n    \n    # return (n + m) // 2\n    \n    if n > m:\n        return -1\n    \n    a = n + m\n    return a // 2\n",
        "num_ids": 88
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return f\"0b{round(n+m/2)}\"[-3:]\n",
        "num_ids": 21
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    nums = list(range(n, m + 1))\n    if len(nums) == 0:\n        return -1\n    return bin(round(sum(nums)/len(nums)))[2:]\n",
        "num_ids": 52
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # if n > m:\n    #     return -1\n    # elif n == m:\n    #     return bin(n)[2:]\n    # else:\n    #     return bin(round(sum([i for i in range(n, m+1)])/(m-n+1)))[2:]\n    if n > m:\n        return -1\n    elif n == m:\n        return bin(n)[2:]\n    else:\n        return bin(round(sum(range(n, m+1))/(m-n+1)))[2:]\n",
        "num_ids": 135
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(int(((n + m) / 2)))[2:]\n",
        "num_ids": 35
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst = []\n    for x in x:\n        for y in str(x):\n            if int(y) % 2 == 0:\n                lst.append(x)\n                break\n    return sorted(list(set(lst)))\n",
        "num_ids": 59
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # initialize a new list to store only elements that has no even digit\n    res = []\n",
        "num_ids": 22
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # if empty array, return empty list\n    if not x:\n        return []\n",
        "num_ids": 21
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Your code here\n    return sorted([number for number in x if number % 2!= 0])\n",
        "num_ids": 25
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i for i in x if i % 2!= 0]\n    \n",
        "num_ids": 20
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # My solution:\n    for i in x:\n        if any(int(j) % 2 == 0 for j in str(i)):\n            x.remove(i)\n    x.sort()\n    return x\n    # Best solution:\n    # return sorted(i for i in x if not any(str(i).count(str(k)) for k in x if k!= i))\n",
        "num_ids": 94
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def has_even_digit(num):\n        num = str(num)\n        for char in num:\n            if int(char) % 2 == 0:\n                return True\n        return False\n    \n    return sorted(list(filter(has_even_digit, x)))\n",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # return sorted(list(set([int(str(x)[::2]))) for x in x))\n    return sorted(set(str(x)[::2]))\n",
        "num_ids": 41
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    def helper(arr):\n        return sorted(arr, reverse = True)\n        \n    def helper2(arr):\n        reversed_arr = []\n        for i in arr:\n            reversed_arr.append(int(str(i)[::-1]))\n        return reversed_arr\n        \n    def helper3(arr):\n        names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        reversed_arr = []\n        for i in arr:\n            reversed_arr.append(names[i-1])\n        return reversed_arr\n    \n    if len(arr) == 0:\n        return []\n        \n    arr_without_0 = []\n    for i in arr:\n        if i > 0 and i <= 9:\n            arr_without_0.append(i)\n            \n    if len(arr_without_0) == 0:\n        return []\n        \n    helper_result = helper(arr_without_0)\n    helper2_result = helper2(helper_result)\n    helper3_result = helper3(helper2_result)\n    return helper3_result",
        "num_ids": 286
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(arr)[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def number_to_name(num):\n        if num == 1:\n            return 'One'\n        elif num == 2:\n            return 'Two'\n        elif num == 3:\n            return 'Three'\n        elif num == 4:\n            return 'Four'\n        elif num == 5:\n            return 'Five'\n        elif num == 6:\n            return 'Six'\n        elif num == 7:\n            return 'Seven'\n        elif num == 8:\n            return 'Eight'\n        elif num == 9:\n            return 'Nine'\n        else:\n            return ''\n    \n    if arr == []:\n        return []\n    arr.sort()\n    sorted_list = []\n    for element in arr:\n        if 1 <= element <= 9:\n            sorted_list.append(number_to_name(element))\n        else:\n            sorted_list.append(str(element))\n    sorted_list = list(reversed(sorted_list))\n    for i, element in enumerate(sorted_list):\n        sorted_list[i] = number_to_name(int(element))\n    return sorted_list",
        "num_ids": 280
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # Write your code here\n",
        "num_ids": 10
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return list(map(lambda x: \"Nine\" if x==9 else \"Eight\" if x==8 else \"Seven\" if x==7 else \"Six\" if x==6 else \"Five\" if x==5 else \"Four\" if x==4 else \"Three\" if x==3 else \"Two\" if x==2 else \"One\" if x==1 else \"Zero\", sorted(arr, reverse=True))) if arr else []\n",
        "num_ids": 98
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr = sorted(arr)\n    arr = arr[::-1]\n    arr_str = [str(item) for item in arr]\n    return list(map(lambda x: nums[int(x) - 1], arr_str))\n",
        "num_ids": 83
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Split arr into three lists: integers, odd integers, and even integers\n    integers = []\n    odd_integers = []\n    even_integers = []\n    for i in arr:\n        if i % 2 == 1:\n            odd_integers.append(i)\n        elif i % 2 == 0:\n            even_integers.append(i)\n        else:\n            integers.append(i)\n",
        "num_ids": 101
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    f = [1] * n\n    for i in range(1, n):\n        if i % 2 == 0:\n            f[i] = i * f[i - 1]\n        else:\n            f[i] = sum([i for i in range(1, i + 1)])\n    return f\n",
        "num_ids": 75
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Initialize the list with zeros\n    l = [0] * n\n    # Implement f\n    for i in range(n):\n        if i % 2 == 0:\n            l[i] = factorial(i)\n        else:\n            sum = 0\n            for j in range(i + 1):\n                sum += j + 1\n            l[i] = sum\n    return l\n",
        "num_ids": 94
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def factorial(n):\n        # n is the number that we will calculate it's factorial\n        # i starts from 1\n        fact = 1\n        for i in range(1, n + 1):\n            fact = fact * i\n        return fact\n    \n    def sum_of_numbers(n):\n        # n is the number we will calculate it's sum of numbers\n        sum = 0\n        for i in range(1, n + 1):\n            sum = sum + i\n        return sum\n",
        "num_ids": 118
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            l.append(i)\n        else:\n            total = 0\n            for j in range(1, i + 1):\n                total += j\n            l.append(total)\n    return l\n",
        "num_ids": 75
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [x for x in range(1, n+1) if x % 2 == 0] + [factorial(x) for x in range(1, n+1) if x % 2 == 1]",
        "num_ids": 48
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            l.append(factorial(i))\n        else:\n            l.append(1)\n            for j in range(1, i + 1):\n                l[i-1] += j\n    return l\n",
        "num_ids": 78
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # list with n elements\n    factorials = [0] * n\n    # loop over the numbers from 1 to n\n    for i in range(n):\n        # compute the factorial of i and store it in factorials[i]\n        factorials[i] = factorial(i)\n    # loop over the numbers 1 to n\n    for i in range(1, n):\n        # if i is even, store i in the position i\n        if i % 2 == 0:\n            factorials[i] = i\n        # otherwise, store the sum of the numbers from 1 to i in the position i\n        else:\n            factorials[i] = sum(range(1, i + 1))\n    return factorials\n",
        "num_ids": 174
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (sum([1 for i in range(1, n+1) if is_palindrome(i)]),\n            sum([1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0]))\n",
        "num_ids": 62
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return (odd_even_palindrome(n), even_odd_palindrome(n))",
        "num_ids": 24
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # initialize odd and even palindrome counts\n    even_count, odd_count = 0, 0\n",
        "num_ids": 25
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Time: O(log(n)), where n is the input number.\n    # Space: O(1).\n    return (sum(1 for i in range(1, n+1) if is_palindrome(i)%2 == 0),\n            sum(1 for i in range(1, n+1) if is_palindrome(i)%2 == 1))\n",
        "num_ids": 90
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def is_palindrome(n):\n        \"\"\"\n        helper function that checks whether a number is palindrome\n        \"\"\"\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 48
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (even(n), odd(n))\n",
        "num_ids": 13
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len([n for n in arr if n > 0])\n",
        "num_ids": 16
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([\n        1 for elem in arr if sum([int(digit) for digit in str(elem)]) > 0\n    ])\n",
        "num_ids": 35
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(digits_sum(n) > 0 for n in arr)\n",
        "num_ids": 20
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for num in arr:\n        if get_signed_digits_sum(num) > 0:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    num_count = 0\n    for num in arr:\n        if num >= 0:\n            if sum(map(int, str(num))) > 0:\n                num_count += 1\n        else:\n            if sum(map(int, str(num))) < 0:\n                num_count += 1\n    return num_count\n",
        "num_ids": 78
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert len(arr) > 0\n    num_of_nums = 0\n    for num in arr:\n        if sum(map(int, str(num))) > 0:\n            num_of_nums += 1\n    return num_of_nums\n",
        "num_ids": 62
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len([n for n in arr if sum([int(i) for i in str(n)]) > 0])\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for i in arr:\n        if sum([int(i) for i in str(abs(i))]) > 0:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    total = 0\n    for num in arr:\n        if sum(map(int, str(abs(num)))) > 0:\n            total += 1\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not arr:\n        return True\n    n = len(arr)\n    if n == 1:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    arr.sort()\n    return True if arr[0] == 1 else False",
        "num_ids": 21
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i, j = 0, len(arr) - 1\n    while i <= j:\n        if arr[i] > arr[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(arr)==0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            break\n    else:\n        return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    return False\n    \ndef move_one_ball_v2(arr):\n    \"\"\"This function is almost similar to the above function. The only difference\n    is that it does not require an extra array to store the sorted array.\n    If it is possible to get an array in the sorted order by performing\n    right shift operation then return True else return False.\n",
        "num_ids": 83
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not arr:\n        return True\n    i = 0\n    while i < len(arr)-1:\n        if arr[i] >= arr[i+1]:\n            break\n        i += 1\n    if i == len(arr)-1:\n        return True\n    i += 1\n    while i < len(arr):\n        if arr[i-1] >= arr[i]:\n            break\n        i += 1\n    if i == len(arr):\n        return True\n    return False\n",
        "num_ids": 117
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not arr: return True\n    # sort the array\n    sorted_arr = sorted(arr)\n    # check if the sorted array is same as original array or not\n    return arr == sorted_arr\n",
        "num_ids": 49
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # TODO: implement this function\n    for i in lst2:\n        if i % 2!= 0:\n            return \"NO\"\n    lst1.sort()\n    lst2.sort()\n    if lst1[-1] % 2 == 0 or lst2[0] % 2!= 0:\n        return \"NO\"\n    for i in range(0, len(lst1)):\n        if lst1[i] % 2!= 0:\n            return \"NO\"\n    for i in range(0, len(lst2)):\n        if lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 164
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Your code goes here\n    return \"NO\"\n",
        "num_ids": 14
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # write your solution here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n",
        "num_ids": 26
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # initialize variables\n    lst1_length = len(lst1)\n    lst2_length = len(lst2)\n    lst1_total = sum(lst1)\n    lst2_total = sum(lst2)\n    even_total = lst1_total - lst2_total\n    # checking for length\n    if lst1_length!= lst2_length:\n        return \"NO\"\n    # Checking for the possibility to exchange\n    elif even_total % 2!= 0 or lst1_total % 2!= 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 156
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your solution goes here\n    pass\n    # end your solution\n",
        "num_ids": 17
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in lst1:\n        if i % 2!= 0:\n            return \"NO\"\n    for j in lst2:\n        if j % 2!= 0:\n            return \"NO\"\n    if (len(lst1) + len(lst2)) % 2!= 0:\n        return \"NO\"\n    for i in range(0, len(lst1)):\n        for j in range(0, len(lst2)):\n            if i == j:\n                if lst1[i] == lst2[j]:\n                    return \"NO\"\n    return \"YES\"\n",
        "num_ids": 147
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # TODO: Write the solution.\n    pass\n",
        "num_ids": 14
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: Write exchange function\n    return 'YES' if lst1 == [] or lst2 == [] else 'YES' if sum([x % 2 for x in lst1]) == sum([x % 2 for x in lst2]) and len(lst1) % 2 == len(lst2) % 2 else 'NO'\n",
        "num_ids": 80
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    num_even_lst1 = 0\n    for num in lst1:\n        if num % 2 == 0:\n            num_even_lst1 += 1\n    num_even_lst2 = 0\n    for num in lst2:\n        if num % 2 == 0:\n            num_even_lst2 += 1\n    if num_even_lst1 == len(lst1) and num_even_lst2 == len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 129
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    my_dict = {}\n    list_of_letters = test.split()\n    \n    for i in list_of_letters:\n        if i in my_dict.keys():\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    \n    max_keys = []\n    max_values = []\n    for key, value in my_dict.items():\n        max_values.append(value)\n        max_keys.append(key)\n        \n    maximum = max(max_values)\n    \n    for key, value in my_dict.items():\n        if value == maximum:\n            print(key, value)\n",
        "num_ids": 159
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    test = test.split(\" \")\n    dict = {}\n    for i in test:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n",
        "num_ids": 54
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    test = test.split()\n    a = {}\n    for c in test:\n        if c in a:\n            a[c] += 1\n        else:\n            a[c] = 1\n    return a\n    \n",
        "num_ids": 54
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    test = test.split(' ')\n    if test:\n        test_list = []\n        for i in test:\n            if i.isalpha() and i not in test_list:\n                test_list.append(i)\n        most_repit = Counter(test_list).most_common(1)\n        dict_list = {}\n        for i in range(len(test_list)):\n            dict_list[test_list[i]] = test_list.count(test_list[i])\n        return dict_list\n    else:\n        return {}\n",
        "num_ids": 135
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Create dictionary for the histogram\n    histogram = {}\n",
        "num_ids": 16
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return dict(collections.Counter(test))\n",
        "num_ids": 13
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return None",
        "num_ids": 4
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # TODO: your code here\n    return {}\n",
        "num_ids": 14
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # get all the characters in c\n    c_char = get_unique_char(c)\n    # get all the characters in s\n    s_char = get_unique_char(s)\n    # delete all the characters in s that are equal to any character in c\n    s_char = delete_char(s_char,c_char)\n    # make s into a string\n    s = ''.join(s_char)\n    # check if s is a palindrome\n    return (s,is_palindrome(s))\n    \ndef get_unique_char(s):\n    # return a list of all the unique characters in s\n    chars = []\n    for i in s:\n        if i not in chars:\n            chars.append(i)\n    return chars\n",
        "num_ids": 186
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    c_set = set(c)\n    s_set = set(s)\n    t = s_set - c_set\n    s = ''.join(list(t))\n    if s == s[::-1]:\n        return (s, True)\n    return (s, False)\n",
        "num_ids": 71
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s,c = [x for x in s], [x for x in c]\n    \n    result, flag = '', True\n    for x in s:\n        if x not in c:\n            result += x\n        else:\n            flag = False\n    \n    return result, flag\n",
        "num_ids": 69
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = s\n    result = result.replace(c, \"\")\n    result = result.replace(c.upper(), \"\")\n    return result, result == result[::-1]\n",
        "num_ids": 45
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    i = 0\n    j = len(s)-1\n    while i < j:\n        if s[i] in c:\n            i += 1\n        elif s[j] in c:\n            j -= 1\n        else:\n            s = s[:i]+s[j+1:]\n            j -= 1\n            i += 1\n    return (s, s == s[::-1])\n",
        "num_ids": 96
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    c_list = list(c)\n    for ch in s:\n        if ch in c_list:\n            c_list.remove(ch)\n    return (c_list,True if len(c_list)==0 else False)\n",
        "num_ids": 58
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.pop(i)\n    return (\"\".join(s), False) if s == s[::-1] else (\"\".join(s), True)\n",
        "num_ids": 68
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    res = \"\"\n    for i in s:\n        if i not in c:\n            res += i\n    rev = res[::-1]\n    print(rev)\n    if rev == res:\n        return (res,True)\n    else:\n        return (res,False)\n",
        "num_ids": 69
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #code here\n    i=0\n    j=len(s)-1\n    s=list(s)\n    c=list(c)\n    while i<j:\n        if s[i]==c[0]:\n            s.pop(i)\n            c.pop(0)\n            i=i-1\n            j=j-1\n        else:\n            i+=1\n    return s,True if s==c[::-1] else False\n",
        "num_ids": 111
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l=[]\n    for i in s:\n        if i not in c:\n            l.append(i)\n    s=''.join(l)\n    return s,is_palindrome(s)\n",
        "num_ids": 51
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for x in lst:\n        count = 0\n        for char in x:\n            if char in '1234567890':\n                count += int(char) % 2\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(x) + \" of the \" + str(x) + \"input.\")\n    return result\nodd_count(['1234567'])\nodd_count(['3',\"11111111\"])\n",
        "num_ids": 116
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n",
        "num_ids": 10
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [(\"the number of odd elements \" + str(len(list(filter(lambda x: x % 2, map(int, string.strip()))))) + \"n the \" + string.strip() + \" of the \" + \"input.\" if len(string.strip()) % 2!= 0 else \"the number of odd elements \" + str(len(list(filter(lambda x: x % 2, map(int, string.strip()))))) + \"n the \" + string.strip() + \" of the \" + \"input.\") for string in lst]\n    \n",
        "num_ids": 130
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [f\"the number of odd elements {len(list(filter(lambda x: int(x)%2 == 1, i)))}n the str{len(i)}ng {len(list(filter(lambda x: int(x)%2 == 1, i)))} of the {len(i)}nput.\" for i in lst]\n",
        "num_ids": 81
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [\"the number of odd elements \" + str(len(list(filter(str.isdigit, x)))) + \"n the \" + x + \" of the \" + x + \"input.\" for x in lst]\n",
        "num_ids": 52
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst = []\n    for num in lst:\n        lst.append(count_odd(num))\n    return lst\n",
        "num_ids": 33
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    odd_counts = []\n    for string in lst:\n        num_odd = 0\n        for char in string:\n            if int(char) % 2 == 1:\n                num_odd += 1\n        odd_counts.append(\"the number of odd elements \" + str(num_odd) + \"n the \" + \"str\" + str(string) + \" of the \" + \"input.\")\n    return odd_counts\n",
        "num_ids": 102
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [f'the number of odd elements {len(i)} the str{len(i)}ng {len([char for char in i if char in '13579'])} of the {i}nput.' for i in lst]\n",
        "num_ids": 56
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [str(sum([1 for j in i if int(j)%2 == 1])) for i in lst]\n",
        "num_ids": 31
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #this one is really hard\n    count = []\n    for x in lst:\n        y = 0\n        for c in x:\n            if c in \"0123456789\":\n                y += 1\n        count.append(y)\n    return [\"the number of odd elements \" + str(n) + \"n the str\" + str(n) + \"ng \" + str(n) + \" of the \" + \"nput.\" for n in count]\n",
        "num_ids": 109
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    total = nums[0]\n    left = 0\n    right = 0\n    for i in nums:\n        right += 1\n        total += i\n        while total >= 0:\n            if total < 0:\n                left = right\n                total = nums[right]\n            elif right - left + 1 >= len(nums):\n                return 0\n            else:\n                return total\n        \n    return 0",
        "num_ids": 98
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(nums) < 1:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            curr_sum = sum(nums[i:j])\n            min_sum = min(min_sum, curr_sum)\n    return min_sum\n",
        "num_ids": 93
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum = 0\n    min_sum = nums[0]\n    for num in nums:\n        sum += num\n        if sum < min_sum:\n            min_sum = sum\n    return min_sum\n    \nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    print(minSubArraySum(nums)",
        "num_ids": 92
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    min_sum = nums[0]\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        return nums[0]\n    for i in range(0, n - 1):\n        for j in range(i+1, n):\n            sub_sum = sum(nums[i:j+1])\n            if sub_sum < min_sum:\n                min_sum = sub_sum\n    return min_sum\n",
        "num_ids": 116
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n = len(nums)\n    if n == 0: return 0\n    total = 0\n    for i in range(n):\n        total += nums[i]\n    if total < 0: return 0\n    return subArraySum(nums, 0, n - 1)\n",
        "num_ids": 67
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(nums) == 0:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    window_sum = nums[0]\n    min_sum = nums[0]\n    for n in nums[1:]:\n        window_sum = window_sum + n\n        min_sum = min(min_sum, window_sum)\n        if window_sum < 0:\n            window_sum = 0\n    return min_sum\n",
        "num_ids": 83
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    min_so_far = min(nums)\n    min_ending_here = 0\n    for i in range(len(nums)):\n        min_ending_here += nums[i]\n        min_so_far = min(min_so_far, min_ending_here)\n        if min_ending_here < 0:\n            min_ending_here = 0\n",
        "num_ids": 91
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # min_sum = float('inf')\n    # for i in range(len(nums)):\n    #     for j in range(i, len(nums)):\n    #         sub_sum = sum(nums[i:j+1])\n    #         if sub_sum < min_sum:\n    #             min_sum = sub_sum\n    # return min_sum\n",
        "num_ids": 93
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Fill all buckets\n    bucket_length = len(grid[0])\n    bucket_height = len(grid)\n    total_buckets = bucket_height*bucket_length\n    buckets = [[0 for _ in range(bucket_length)] for _ in range(bucket_height)]\n    steps = 0\n    for y in range(bucket_height):\n        for x in range(bucket_length):\n            if grid[y][x] == 1:\n                steps += fill_buckets(y, x, buckets, grid, bucket_length, bucket_height, capacity)\n    return steps\n",
        "num_ids": 145
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # get the number of rows and columns \n    rows = len(grid)\n    columns = len(grid[0])\n    # total number of wells\n    n = rows * columns\n",
        "num_ids": 45
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # create a copy of the grid\n    grid = [x[:] for x in grid]\n    \n    # for each well, create a list of indexes in grid\n    wells = []\n    for r in range(len(grid)):\n        for c in range(len(grid[r])):\n            if grid[r][c] == 1:\n                wells.append([r, c])\n",
        "num_ids": 94
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def is_valid(row, col, row_size, col_size):\n        return row < row_size and col < col_size and row >= 0 and col >= 0\n",
        "num_ids": 42
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(grid) == 0 or len(grid[0]) == 0:\n        return 0\n",
        "num_ids": 24
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # rows, cols = len(grid), len(grid[0])\n    # buckets = set()\n    # for r in range(rows):\n    #     for c in range(cols):\n    #         if grid[r][c]:\n    #             buckets.add((r, c))\n    # return int(math.ceil(len(buckets) / bucket_capacity))\n",
        "num_ids": 93
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def _bucket_count(grid, capacity, row, col):\n        # Base case\n        if not grid or not grid[0]:\n            return 0\n        # If we are at the last row, we can only fill the bucket if the bucket\n        # capacity is filled\n        if row == len(grid) - 1:\n            return math.floor(grid[row][col] / capacity)\n",
        "num_ids": 92
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Let's initialize the memo.\n    memo = {}\n    def solve_memo(grid, capacity, row, col):\n        if (row, col, capacity) in memo:\n            return memo[(row, col, capacity)]\n        if row == len(grid):\n            return 0\n        if col == len(grid[0]):\n            return 0\n        if grid[row][col] == 0:\n            memo[(row, col, capacity)] = solve_memo(grid, capacity, row+1, col)\n            return memo[(row, col, capacity)]\n        take_water = solve_memo(grid, capacity-1, row+1, col) + grid[row][col]\n        not_take_water = solve_memo(grid, capacity, row+1, col)\n        memo[(row, col, capacity)] = max(take_water, not_take_water)\n        return memo[(row, col, capacity)]\n",
        "num_ids": 228
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert 1 <= capacity <= 10 ** 2, 'Capacity out of range'\n",
        "num_ids": 19
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # O(n^2)\n    n = len(grid)\n    m = len(grid[0])\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n",
        "num_ids": 27
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count('1'), x)",
        "num_ids": 23
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(arr, key = lambda x: (bin(x)[2:].count('1'), x))\n",
        "num_ids": 27
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: bin(x)[2:].count('1'))\n",
        "num_ids": 25
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # arr = list(map(str, arr))\n    arr = list(map(lambda x: f'{x:b}', arr))\n    arr = sorted(arr, key=lambda x: (-(x.count('1')), -int(x, 2), x))\n    return list(map(int, arr))\n",
        "num_ids": 77
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    # MY SOLUTION:\n    \n    # Create a list of all the words from the given string s.\n    list_of_words = s.split()\n    \n    # Create an empty list.\n    list_of_selected_words = []\n    \n    # Iterate over the list of all the words.\n    for word in list_of_words:\n        # Create a string variable for each word.\n        word_as_str = str(word)\n        \n        # Create an empty list.\n        list_of_letters = []\n        \n        # Iterate over the characters in the word.\n        for i in range(len(word_as_str)):\n            # Append the character to list_of_letters.\n            list_of_letters.append(word_as_str[i])\n        \n        # Create a variable for the number of consonants in the word.\n        number_of_consonants = 0\n        \n        # Iterate over the list of characters in the word.\n        for i in range(len(list_of_letters)):\n            # If the current character is not a space and the character is a consonant then increment the number_of_consonants variable.\n            if (list_of_letters[i]!= \" \") and (list_of_letters[i] not in constants.VOWELS):\n                number_of_consonants += 1\n        \n        # If the number_of_consonants variable is equal to n then add the word to list_of_selected_words.\n        if number_of_consonants == n:\n            list_of_selected_words.append(word)\n    \n    # Return the list of selected words.\n    return list_of_selected_words",
        "num_ids": 408
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [x for x in s.split() if len(x) >= n and x.count('.') == 0 and x.count(' ') == 0]\n",
        "num_ids": 39
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s = s.split()\n    l = []\n    if not len(s):\n        return []\n    for word in s:\n        c = 0\n        for letter in word:\n            if letter == \" \":\n                continue\n            if letter in \"aeiouAEIOU\":\n                c += 1\n        if c == n:\n            l.append(word)\n    return l\n",
        "num_ids": 93
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    consonants = []\n    words = []\n    word = []\n    for letter in s:\n        if letter in 'aeiouy':\n            word.append(letter)\n            if len(word) == n:\n                words.append(''.join(word))\n        else:\n            consonants.append(letter)\n    consonants = set(consonants)\n    for word in words:\n        if len(set(word).difference(consonants)) == 0:\n            print(word)\n",
        "num_ids": 123
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [word for word in s.split() if count_consonants(word) == n]\n",
        "num_ids": 25
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    res = []\n    if n < 1:\n        return res\n    words = s.split()\n    for word in words:\n        if word.count(' ') < n:\n            if len(word) - word.count(' ') == n:\n                res.append(word)\n        else:\n            if len(word) - word.count(' ') < n:\n                continue\n            if word.count(' ') == n:\n                res.append(word)\n    return res\n",
        "num_ids": 117
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    words = []\n    word_list = s.split()\n    for word in word_list:\n        if len(word) >= n and len(set(word)) == n:\n            words.append(word)\n    return words\n",
        "num_ids": 56
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    # your code here\n    return\n",
        "num_ids": 12
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return []\n    l = s.split(\" \")\n    result = []\n    for i in l:\n        if check_consonants(i, n) == True:\n            result.append(i)\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # if string is empty return empty list\n    if not s:\n        return []\n",
        "num_ids": 21
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #...\n    # TODO: implement this\n",
        "num_ids": 13
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = ('a','e','i','o','u')\n    # vowels = [chr(97+i) for i in range(5)]\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''\n",
        "num_ids": 85
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    for index, letter in enumerate(reversed(word)):\n        if letter not in vowels:\n            continue\n        if (\n            word[-1 - index] not in consonants or\n            word[-1 - index - 1] not in consonants\n        ):\n            continue\n        return letter\n",
        "num_ids": 75
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(len(word)):\n        if word[i] in 'aeiou':\n            return word[i]\n        if word[i] =='':\n            return word[i-1]\n        else:\n            pass\n    return ''\n",
        "num_ids": 63
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    vowels = set('aeiou')\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n    result = []\n    for i, char in enumerate(word):\n        if char in vowels:\n            result.append(char)\n        if char in consonants:\n            if len(result) > 0:\n                return ''.join(result)\n    return ''\n",
        "num_ids": 102
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    word = word.lower()\n    for i in range(len(word)):\n        if word[i] in \"aeiou\":\n            return word[i]\n        if i == len(word)-1:\n            return \"\"\n        if word[i]!= word[i+1]:\n            return word[i]\n",
        "num_ids": 78
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    word = word[::-1]\n    for i in range(len(word)):\n        if word[i].lower() in \"aeiou\":\n            return word[i]\n    return \"\"\n",
        "num_ids": 49
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i, c in enumerate(word):\n        if c in \"aeiou\":\n            if (i == 0 or c!= word[i-1]) and (i+1 == len(word) or c!= word[i+1]):\n                return c\n    return \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1026
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = len(word) - 1\n    while i > 0:\n        if word[i] not in \"AEIOU\" and word[i - 1] not in \"AEIOU\":\n            return word[i]\n        i -= 1\n",
        "num_ids": 58
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return 'Yes' if lst[0] == '(' and lst[-1] == ')' else 'No'\n    \n    # string_list = lst[0]\n    # opening_par = '('\n    # closing_par = ')'\n    # if opening_par in string_list and closing_par in string_list:\n    #     if string_list.count(opening_par) == string_list.count(closing_par):\n    #         return 'Yes'\n    #     else:\n    #         return 'No'\n    # else:\n    #     return 'No'\n",
        "num_ids": 144
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # if len(lst)!= 2:\n    #     return 'No'\n",
        "num_ids": 21
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if lst[0][0] == lst[1][0] or lst[0][-1] == lst[1][-1]:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 53
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if lst[0] == ')' or lst[1] == '(':\n        return 'No'\n    elif lst[0] == ')' or lst[1] == ')':\n        return 'No'\n    else:\n        return 'Yes'\n",
        "num_ids": 67
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    stack = []\n    for c in lst:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return 'No'\n            stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    return 'No'\n",
        "num_ids": 82
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if lst[0] == ')' or lst[1] == '(' or lst[0] == '(' or lst[1] == ')':\n        return 'No'\n    elif lst[0] == ')' or lst[1] == '(' or lst[0] == '(' or lst[1] == ')':\n        return 'No'\n    elif lst[0] == '(' or lst[1] == ')':\n        return 'No'\n    else:\n        return 'Yes'\n",
        "num_ids": 130
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 'No'\n",
        "num_ids": 7
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not lst: return \"Yes\"\n    if lst[0] == \"(\" and lst[-1] == \")\":\n        return match_parens(lst[1:-1])\n    if \"(\" in lst[0] and \")\" not in lst[0] and \"(\" not in lst[-1] and \")\" in lst[-1]:\n        return \"No\"\n    return \"Yes\"\n",
        "num_ids": 103
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return 'Yes' if (lst[0] == '(' and lst[1] == ')') or \\\n                    (lst[0] == ')' and lst[1] == '(') else 'No'\n",
        "num_ids": 54
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n = len(arr)\n    if k > n or k == 0:\n        return []\n",
        "num_ids": 24
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(arr, reverse=True)[:k]\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Create a copy of the input array\n    arr = arr[:]\n",
        "num_ids": 18
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    answer = 0\n    for index, i in enumerate(lst):\n        if index%2!= 0 and i%2!= 0:\n            answer += i\n    return answer\n",
        "num_ids": 45
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    sum_odd_even_positions=0\n    \n    for i in range(len(lst)):\n        if (i % 2 == 0) and (lst[i] % 2 == 1):\n            sum_odd_even_positions += lst[i]\n",
        "num_ids": 68
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum=0\n    for i in range(0,len(lst)):\n        if((i+1)%2==0):\n            sum=sum+lst[i]\n    return sum\n    \nif __name__ == \"__main__\":\n    print solution([5, 8, 7, 1])\n    print solution([3, 3, 3, 3, 3])\n    print solution([30, 13, 24, 321]",
        "num_ids": 102
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    s = sum([x if i%2 else x/2 for i, x in enumerate(lst)])\n    return s\n",
        "num_ids": 34
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # your code here\n    total = 0\n    for i in range(0,len(lst),2):\n        if lst[i] % 2!= 0:\n            total += lst[i]\n",
        "num_ids": 51
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    even_elem = lst[1::2]\n    # odd_elem = lst[::2]\n    return sum([i for i in even_elem if i%2==1])\n",
        "num_ids": 49
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    odd_sum = 0\n    for i in range(0, len(lst), 2):\n        odd_sum += lst[i]\n        \n    return odd_sum\n",
        "num_ids": 45
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum=0\n    count=0\n    for i in lst:\n        if i%2==0:\n            sum+=i\n        else:\n            count+=i\n    if count!=0:\n        return sum\n    else:\n        return count",
        "num_ids": 61
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 1)\n",
        "num_ids": 38
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(map(int, [str(i) for i in arr[:k]]))",
        "num_ids": 23
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # print(arr)\n    # print(k)\n    # print(len(arr))\n    # sum = 0\n    # for i in range(k):\n    #     sum += arr[i]\n    # return sum\n",
        "num_ids": 55
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    ans = 0\n    for i in range(k):\n        ans += arr[i] % 10\n        if ans > 9:\n            ans -= 10\n    return ans",
        "num_ids": 40
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(map(lambda x: int(x[0]) + int(x[1]) if len(x) == 2 else int(x[0]), arr[:k]))\n",
        "num_ids": 44
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    res = 0\n",
        "num_ids": 6
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = 0\n    for i in range(k):\n        res += int(arr[i][0])\n",
        "num_ids": 27
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    hashmap = {}\n",
        "num_ids": 7
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: Write your code here\n    sum = 0\n    arr = arr[:k]\n    for i in arr:\n        sum = sum + i\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = 0\n    for i in range(k):\n        result += arr[i] % 100\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n > 0, \"Please input a positive integer\"\n    l = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n/2\n            l.append(n)\n        else:\n            n = 3*n + 1\n            l.append(n)\n    return l\n",
        "num_ids": 77
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n >= 1, \"This function only works for positive integers.\"\n    odd_numbers = []\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3 * n + 1\n        odd_numbers.append(int(n))\n    return sorted(odd_numbers)\n",
        "num_ids": 84
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [i for i in range(1, n+1) if i % 2 == 1]\n",
        "num_ids": 24
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not isinstance(n, int):\n        return 'Please input a valid integer.'\n    if n <= 0:\n        return 'Please input a positive integer.'\n    odd_collatz = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n            if n not in odd_collatz:\n                odd_collatz.append(int(n))\n        else:\n            n = (3 * n + 1) / 2\n            if n not in odd_collatz:\n                odd_collatz.append(int(n))\n    return sorted(odd_collatz)\n",
        "num_ids": 145
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [1,2]\n    elif n == 3:\n        return [1,3]\n    else:\n        # if n is even, it is divided by two, and if n is odd, it is 3 times n + 1.\n        # so the n = n/2 if n is even, or n = 3n + 1 if n is odd.\n        # collatz_odd_list starts with n, and we iterate through the loop until we get to 1,\n        # which will be added to collatz_odd_list.\n        collatz_odd_list = [n]\n        while n!= 1:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                n = 3*n + 1\n            collatz_odd_list.append(n)\n        return sorted(collatz_odd_list)\n",
        "num_ids": 219
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return odd_collatz(n)\n",
        "num_ids": 11
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [n for n in range(1, n+1) if n%2]\n",
        "num_ids": 22
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [i for i in collatz(n) if i % 2 == 1]\n",
        "num_ids": 21
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if date == '': return False\n    date_list = date.split('-')\n    if len(date_list)!= 3:\n        return False\n    if date_list[0].isalpha() and date_list[0]!= '2':\n        return False\n    if date_list[0] in ['2', '4', '6', '9', '11']:\n        if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n            return False\n    elif date_list[0] in ['1', '3', '5', '7', '8', '10', '12']:\n        if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n            return False\n    else:\n        if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n            return False\n    if len(date_list[2])!= 4:\n        return False\n    if date_list[0] == '2':\n        if int(date_list[1]) > 28:\n            return False\n    return True\n",
        "num_ids": 270
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    date_parts = date.split('-')\n    \n    if len(date_parts)!= 3:\n        return False\n    \n    if len(date_parts[0])!= 2 or int(date_parts[0]) not in range(1, 13):\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # write your code here\n    months = ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december']\n",
        "num_ids": 60
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    date_list = date.split('-')\n    if len(date_list)!= 3:\n        return False\n    if not date_list[0].isdigit():\n        return False\n    if not date_list[1].isdigit():\n        return False\n    if not date_list[2].isdigit():\n        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n            return False\n    return True",
        "num_ids": 266
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    date_list = date.split(\"-\")\n    \n    if not date_list:\n        return False\n    \n    if len(date_list)!= 3:\n        return False\n    \n    if not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n        return False\n    \n    if len(date_list[0])!= 2 or len(date_list[1])!= 2 or len(date_list[2])!= 4:\n        return False\n    \n    if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n        return False\n    \n    if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n        return False\n    \n    if int(date_list[0]) == 4 or int(date_list[0]) == 6 or int(date_list[0]) == 9 or int(date_list[0]) == 11:\n        if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n            return False\n    \n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) > 28 or int(date_list[1]) < 1:\n            return False\n    \n    else:\n        if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n            return False\n    \n    return True\n",
        "num_ids": 361
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not date:\n        return False\n",
        "num_ids": 11
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    m, d, y = date.split('-')\n    m = int(m)\n    d = int(d)\n    y = int(y)\n    if m < 1 or m > 12:\n        return False\n    if m in [1,3,5,7,8,10,12]:\n        if d < 1 or d > 31:\n            return False\n    elif m in [4,6,9,11]:\n        if d < 1 or d > 30:\n            return False\n    elif m == 2:\n        if d < 1 or d > 29:\n            return False\n    else:\n        return False\n    return True",
        "num_ids": 153
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    date_regex = re.compile(r'^(0[1-9]|1[0-2])\\-(0[1-9]|1[0-9]|2[0-9]|3[0-1])\\-(20\\d\\d)$')\n    if date_regex.search(date):\n        return True\n    return False\n",
        "num_ids": 89
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    date_split = date.split('-')\n    month, day, year = date_split[0], date_split[1], date_split[2]\n    # check if month is valid\n    if int(month) < 1 or int(month) > 12:\n        return False\n    # check if day is valid\n    day_int = int(day)\n    if day_int < 1 or day_int > 31:\n        if month == '1' or month == '3' or month == '5' or month == '7' or month == '8' or month == '10' or month == '12':\n            if day_int < 1 or day_int > 30:\n                return False\n        elif month == '4' or month == '6' or month == '9' or month == '11':\n            if day_int < 1 or day_int > 30:\n                return False\n        elif month == '2':\n            if day_int < 1 or day_int > 29:\n                return False\n    # check if year is valid\n    year_int = int(year)\n    if year_int < 1 or year_int > 9999:\n        return False\n    return True",
        "num_ids": 279
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # You can use a regex for this\n    # \\d+ means match one or more digits\n    # [-]+ means one or more -\n    # \\d means match a digit\n    # [0-1][0-2][0-9][0-9] means match a four digit number with a dash in between\n    # [0-1][0-2][0-9] means match a three digit number with a dash in between\n    # [0-1][0-2] means match a two digit number with a dash in between\n    # [0-1] means match a one digit number with a dash in between\n    # \\d+ means match one or more digits\n    if not date:\n        return False\n    date_str = date.split('-')\n    # check if the first char is a digit and if the date has four digits\n    if not date_str[0].isnumeric() or len(date_str[0])!= 2 or not date_str[1].isnumeric() or len(date_str[1])!= 2 or not date_str[2].isnumeric():\n        return False\n    # check the month is a two digit number\n    if not date_str[0].isnumeric() or not date_str[1].isnumeric():\n        return False\n    month = int(date_str[0])\n    # check the month is in the correct range\n    if month > 12 or month < 1:\n        return False\n    # check the day is in the correct range\n    if month in [1,3,5,7,8,10,12] and int(date_str[1]) > 31:\n        return False\n    elif month in [4,6,9,11] and int(date_str[1]) > 30:\n        return False\n    elif month == 2 and int(date_str[1]) > 28:\n        return False\n    # check the year is in the correct range\n    if int(date_str[2]) > 2020 or int(date_str[2]) < 1900:\n        return False\n    return True\n",
        "num_ids": 484
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # split on whitespace\n    # split on commas\n    # split on lower case\n    # return count of lowercase letters in odd order\n    \n    return txt.split()\n",
        "num_ids": 44
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # print(txt)\n    # dic = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11,'m': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17,'s': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\n    # if no commas or whitespace exists in the text, split on all the characters in the alphabet (a-z) in order\n    if'' not in txt and ',' not in txt:\n        # print('here')\n        return [chr(i) for i in range(97, 123)]\n",
        "num_ids": 214
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst = txt.split()\n    return lst\n",
        "num_ids": 16
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # split_txt = txt.split()\n    # return split_txt\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n    #!\n",
        "num_ids": 1024
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return list(txt.split())\n",
        "num_ids": 10
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        letters = [letter for letter in txt if letter.islower()]\n        return len(letters)\n        \n",
        "num_ids": 69
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    list_words = txt.split()\n    return list_words\n",
        "num_ids": 18
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #yield from\n    if lst == sorted(lst):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(lst) <= 1:\n        return True\n    else:\n        for i in range(0, len(lst)):\n            if i == len(lst) - 1:\n                return True\n            elif lst[i] > lst[i + 1]:\n                return False\n            elif lst[i] == lst[i + 1]:\n                return False\n",
        "num_ids": 94
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) == 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(lst) == ls",
        "num_ids": 10
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #TODO: Fix this\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #Iterate through the list of numbers\n    #If the current number is larger than the one before it\n    #The list is not sorted, return False\n    #Otherwise, continue to the next number\n    #If the length of the list is 1, return True\n    #If the length of the list is greater than 1, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is less than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is greater than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is less than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is greater than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is less than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is greater than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is less than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is greater than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is less than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is greater than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is less than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is greater than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is less than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is greater than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current number against the one before it\n    #This prevents duplicate numbers from being added to the list\n    #If the current number is less than the one before it, return False\n    #Otherwise, continue to the next number\n    #When iterating through the list, ensure that you check the current numbe",
        "num_ids": 1026
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    nums = [num for num in lst if isinstance(num, int)]\n    return len(nums) == len(set(nums))\n    pass\n",
        "num_ids": 40
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return all(lst[i] <= lst[i+1] for i in range(len(lst) - 1))\n",
        "num_ids": 32
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sorted_lst = sorted(lst)\n    lst_len = len(lst)\n    if lst_len == 1:\n        return True\n    else:\n        for i in range(0, lst_len - 1):\n            if sorted_lst[i] == sorted_lst[i+1]:\n                return False\n        return True\n",
        "num_ids": 88
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    return \"YES\" if is_prime(abs(end1 - start2)) else \"NO\"\n",
        "num_ids": 65
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    start, end = interval1\n    x1, x2 = interval2\n    if x1 > end or x2 < start:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 48
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # find the intersection of the two intervals\n    # find the length of the intersection\n    # return whether it is a prime number\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start, end = max(start1, start2), min(end1, end2)\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"",
        "num_ids": 95
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    start, end = interval1\n    a, b = interval2\n    start_new, end_new = min(start, a), max(end, b)\n    return \"YES\" if len([i for i in range(start_new, end_new + 1) if i > 1 and i not in [j * k for j in range(2, i) for k in range(2, i) if j!= k]]) == 0 else \"NO\"\n",
        "num_ids": 107
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    interval1_start, interval1_end = interval1\n    interval2_start, interval2_end = interval2\n",
        "num_ids": 31
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    x = [i for i in range(interval1[0], interval1[1])]\n    y = [i for i in range(interval2[0], interval2[1])]\n    res = set(x).intersection(y)\n    if len(res) == 0:\n        return \"NO\"\n    elif len(res) == 1:\n        if len(res) == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "num_ids": 123
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # do a check to see if the start of the first interval is less than the end of the second interval\n    # if the intervals do not intersect, return \"NO\"\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    # else, determine the length of the intersection\n    # return \"YES\" if it is a prime number\n    else:\n        interval = [interval1[0], interval2[1]]\n        if len(set(range(interval[0], interval[1] + 1))) == interval[1] - interval[0] + 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n",
        "num_ids": 166
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if interval1[0] > interval2[1]:\n        return \"NO\"\n    if interval1[1] < interval2[0]:\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 47
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    a1, b1 = interval1\n    a2, b2 = interval2\n    a = max(a1, a2)\n    b = min(b1, b2)\n    if b < a:\n        return \"NO\"\n    s = b - a + 1\n    if is_prime(s):\n        return \"YES\"\n    else:\n        return \"NO\"",
        "num_ids": 91
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert interval1[0] <= interval1[1]\n    assert interval2[0] <= interval2[1]\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start <= end:\n            return \"YES\"\n        else:\n            return \"NO\"\n",
        "num_ids": 122
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(abs(i) for i in arr) * prod(sign(i) for i in arr) if arr else None\n",
        "num_ids": 31
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not arr:\n        return None\n    positive = sum(abs(i) for i in arr if i > 0)\n    negative = sum(abs(i) for i in arr if i < 0)\n    return positive * negative\n",
        "num_ids": 55
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = 0\n    s = arr.count(0)\n    if len(arr) == 0:\n        return None\n    else:\n        result = sum([abs(i) for i in arr]) * (0**s)\n        return result\n",
        "num_ids": 59
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return None if not arr else sum(map(lambda x: abs(x) * (-1 if x < 0 else 1), arr))\n",
        "num_ids": 32
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not arr:\n        return None\n    return sum(abs(i) for i in arr) * prod_signs(list(i * (-1) ** i for i in arr if i < 0))",
        "num_ids": 48
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not arr:\n        return None\n    prod = 1\n    signs = []\n    for i in arr:\n        signs.append(i//abs(i))\n        prod *= i//abs(i)\n    return prod*sum(signs)\n",
        "num_ids": 65
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    prod = 1\n    summ = 0\n    for i in arr:\n        if i!= 0:\n            summ += abs(i)\n            prod *= i\n    if summ == 0:\n        return None\n    return summ * prod\n",
        "num_ids": 61
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not arr:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if arr:\n        sum_of_magnitudes = sum([abs(i) for i in arr])\n        signs_multiplied = reduce(mul, [i for i in arr if i!= 0])\n        return sum_of_magnitudes * signs_multiplied\n    else:\n        return None\n",
        "num_ids": 75
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not arr:\n        return None\n    else:\n        return sum(abs(num) for num in arr) * prod(sign(num) for num in arr)",
        "num_ids": 40
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    m, n = len(grid), len(grid[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    dp[0][0] = grid[0][0]\n",
        "num_ids": 52
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def get_neighbors(cell, visited, lst):\n        \"\"\"\n        Given a cell and a list of visited cells, returns all cells that share\n        an edge with the given cell.\n        \"\"\"\n        neighbors = []\n        x = cell[0]\n        y = cell[1]\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if i == 0 and j == 0:\n                    continue\n                if (x + i, y + j) not in visited:\n                    neighbors.append((x + i, y + j))\n        return neighbors\n",
        "num_ids": 144
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not grid or not grid[0]:\n        return []\n    n, m = len(grid), len(grid[0])\n    if k == 1:\n        return [i for row in grid for i in row]\n    if k == n * m:\n        return [i for i in range(1, n * m + 1)]\n",
        "num_ids": 80
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not grid or not grid[0] or not k:\n        return None\n    m, n = len(grid), len(grid[0])\n    if m * n < k:\n        return None\n",
        "num_ids": 49
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # N = len(grid)\n    # W = len(grid[0])\n    # [i, j] = [0, 0]\n    # path = []\n    # while k > 0:\n    #     if i == N - 1 and j == N - 1:\n    #         path += [grid[i][j]]\n    #         break\n    #     for di in [-1, 0, 1]:\n    #         for dj in [-1, 0, 1]:\n    #             if di == 0 and dj == 0:\n    #                 continue\n    #             if i + di >= 0 and j + dj >= 0 and i + di < N and j + dj < N and grid[i][j] < grid[i + di][j + dj]:\n    #                 path += [grid[i][j]]\n    #                 i = i + di\n    #                 j = j + dj\n    #                 break\n    #     k -= 1\n    # return path\n",
        "num_ids": 224
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    row, col = len(grid), len(grid[0])\n    if k > row * col:\n        return []\n",
        "num_ids": 30
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not grid:\n        return []\n    \n    n = len(grid)\n    if n == 0:\n        return []\n    m = len(grid[0])\n    if m == 0:\n        return []\n",
        "num_ids": 53
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # time complexity is O(n^2 * k)\n    # space complexity is O(n^2 * k)\n    if len(grid) == 1:\n        return [grid[0][0]]\n    if len(grid) == 2:\n        if k == 1:\n            return [grid[0][0], grid[1][0]]\n        else:\n            return [grid[0][0], grid[0][1], grid[1][0]]\n    n = len(grid)\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    dp = [[float(\"inf\") for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = grid[i][j]\n    res = [float(\"inf\")] * k\n    res[0] = 0\n    q = [(0, 0, 0)]\n    while len(q) > 0:\n        pq = heappop(q)\n        i = pq[1]\n        j = pq[2]\n        if i + 1 < n and j + 1 < n:\n            dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][j] + grid[i + 1][j + 1])\n            if res[pq[0]] == dp[i + 1][j + 1]:\n                res[pq[0]] = min(res[pq[0]], grid[i + 1][j + 1])\n                heappush(q, (pq[0] + 1, i + 1, j + 1))\n            else:\n                heappush(q, (pq[0] + 1, i + 1, j + 1))\n        if i + 1 < n:\n            dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + grid[i + 1][j])\n            if res[pq[0]] == dp[i + 1][j]:\n                res[pq[0]] = min(res[pq[0]], grid[i + 1][j])\n                heappush(q, (pq[0] + 1, i + 1, j))\n            else:\n                heappush(q, (pq[0] + 1, i + 1, j))\n        if j + 1 < n:\n            dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + grid[i][j + 1])\n            if res[pq[0]] == dp[i][j + 1]:\n                res[pq[0]] = min(res[pq[0]], grid[i][j + 1])\n                heappush(q, (pq[0] + 1, i, j + 1))\n            else:\n                heappush(q, (pq[0] + 1, i, j + 1))\n    return res[1:]\n",
        "num_ids": 722
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert k >= 2\n    n = len(grid)\n    assert n >= 2\n    for i in range(n):\n        assert n == len(grid[i])\n    \n    n2 = n * n\n    if n2 < k:\n        return []\n    if n2 == k:\n        return grid[0]\n",
        "num_ids": 78
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def is_valid(grid, i, j, k):\n        \"\"\"\n        Check if (i, j) is valid to start the path.\n        It means that i, j is in the grid and \n        the cell is not a part of any other path.\n        \"\"\"\n        return i >= 0 and j >= 0 and i < len(grid) and j < len(grid[0]) and grid[i][j] == 0 and (i, j) not in visited\n",
        "num_ids": 109
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3] + [2 + (n - 1) / 2 if n % 2 == 0 else tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1] for n in range(3, n + 1)]\n",
        "num_ids": 100
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # base cases\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1, 3]\n    # if n >= 2, then we know we'll have to do some recursion\n    # initializing an empty list to hold our tribonacci\n    # sequence\n    tri_list = []\n    # adding the first 2 elements of the sequence\n    tri_list.append(1)\n    tri_list.append(3)\n    # if n is even, then we double the last element\n    if n % 2 == 0:\n        tri_list.append(tri_list[-2] * 2)\n    # if n is odd, we add the sum of the last 2 elements\n    else:\n        tri_list.append(tri_list[-2] + tri_list[-3])\n    # we loop through the remaining elements\n    for i in range(n - 2):\n        # we append the sum of the last 2 elements\n        tri_list.append(tri_list[-2] + tri_list[-3])\n    # we return the full sequence\n    return tri_list\n",
        "num_ids": 263
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1,3]\n    else:\n        tribonacci = [0, 3]\n        i = 1\n        while i < n:\n            tribonacci.append(tribonacci[i] + tribonacci[i - 1] + tribonacci[i - 2])\n            i += 1\n        return tribonacci",
        "num_ids": 116
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return [1, 3, 2][:n]\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
        "num_ids": 44
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [3, 2]\n    l = [1, 3]\n    if n%2 == 1:\n        l.append(3)\n        for i in range(n - 2):\n            l.append(l[-1] + l[-2] + l[-3])\n    else:\n        for i in range(n - 2):\n            l.append(l[-1] + l[-2])\n    return l\n",
        "num_ids": 136
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1 or n == 2:\n        return [1, 3] if n == 1 else [3, 1, 2]\n    n1 = 1\n    n2 = 3\n    n3 = 2\n    n4 = 0\n    n5 = 1\n    if n == 2:\n        return [n1, n2, n3]\n    while n5 < n:\n        n4 = n3\n        n3 = n2\n        n2 = n1 + n4 + n5\n        n1 = n4\n        n5 = n2\n    return [n1, n2, n3, n5]\n",
        "num_ids": 147
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = [1, 3, 2, 8]\n    if n >= 3:\n        for i in range(3, n + 1):\n            res.append(sum(res[-3:]))\n    return re",
        "num_ids": 51
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sequence = [0, 1, 1]\n    # initialise the list with the first two elements\n    if n == 0: return sequence\n    # initialise with the first two elements, then check if n is odd or even and append the appropriate number to the list\n    for i in range(3, n + 1):\n        if i % 2:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2])\n    return sequence\n",
        "num_ids": 133
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    a = [1, 3]\n    n1 = 0\n    n2 = 1\n    if n == 0:\n        return [n1]\n    elif n == 1:\n        return [n1, n2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            n1 = a[n2]\n            n2 = a[n1]\n            a.append(n1 + n2)\n        else:\n            n1 = a[n2]\n            n2 = a[n1]\n            n3 = a[n2]\n            a.append(n1 + n2 + n3)\n    return a\n",
        "num_ids": 161
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert n >= 0, 'n must be non-negative'\n    nums = [1, 3, 2]\n    if n < 3:\n        return nums[:n]\n    while n > len(nums):\n        nums.append(nums[-1] + nums[-2] + nums[-3])\n    return num",
        "num_ids": 84
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    product = 1\n    for d in str(n):\n        if int(d) % 2!= 0:\n            product *= int(d)\n    return product",
        "num_ids": 40
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # convert number to string and get the list of digits\n    digits_string = str(n)\n    digits_list = list(digits_string)\n    \n    # create empty list for odd digits\n    odd_digits_list = []\n    \n    # loop through digits list\n    for i in range(len(digits_list)):\n        # add odd digits to list\n        if int(digits_list[i]) % 2!= 0:\n            odd_digits_list.append(digits_list[i])\n    \n    # create empty variable for product of odd digits\n    product = 1\n    \n    # loop through odd digits list and multiply them\n    for i in range(len(odd_digits_list)):\n        product *= int(odd_digits_list[i])\n    \n    return product\n",
        "num_ids": 198
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return n % 10\n",
        "num_ids": 7
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    # Solution 1:\n    # a = list(str(n))\n    # prod = 1\n    # for digit in a:\n    #     if int(digit) % 2!= 0:\n    #         prod *= int(digit)\n    # return prod\n    \n    # Solution 2:\n    return n * n if n % 2 == 0 else 1\n",
        "num_ids": 88
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = str(n)\n    count = 0\n    for i in n:\n        if int(i)%2!= 0:\n            count += 1\n        else:\n            count = 0\n    if count > 0:\n        return count\n    else:\n        return 0\n",
        "num_ids": 67
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    digits = []\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            digits.append(int(digit))\n    return prod(digits)\n",
        "num_ids": 47
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    prod = 1\n    while n > 0:\n        if n % 2!= 0:\n            prod *= n % 10\n        n //= 10\n    return prod",
        "num_ids": 42
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # make a list of the digits in the number\n    # multiply each digit by itself and then multiply all the digits together\n    digits = [int(d) for d in str(n)]\n    product = 1\n    for i in digits:\n        product *= i\n    return product\n",
        "num_ids": 67
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return reduce(lambda x,y:x*y,list(map(int,list(str(n))[1::2])),1)\n",
        "num_ids": 35
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    product = 1\n    for d in str(n):\n        if int(d) % 2!= 0:\n            product *= int(d)\n    return product\n",
        "num_ids": 41
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    bracket_stack = []\n    \n    # Iterate through the string and push the closing bracket to the stack\n    # if the opening bracket is encountered\n    for char in string:\n        if char == '[':\n            bracket_stack.append(']')\n        else:\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                return False\n    return True if not bracket_stack else False\n",
        "num_ids": 102
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Set up a stack to store the brackets\n    stack = []\n    # Check if each character is a bracket\n    for char in string:\n        if char == '[':\n            # If the bracket is an open bracket, add it to the stack\n            stack.append(char)\n        elif char == ']':\n            # If the bracket is a closed bracket, check if it is the matching open bracket\n            if len(stack) == 0:\n                # If it is not a matching open bracket, return False\n                return False\n            else:\n                # If it is a matching open bracket, pop it off the stack\n                stack.pop()\n    # If the stack is empty at this point, return True because every open bracket has a matching closed bracket\n    if len(stack) == 0:\n        return True\n    # Otherwise, return False because one or more open bracket did not have a matching closed bracket\n    return False\n",
        "num_ids": 208
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return string.count('[')!= 0 and string.count(']')!= 0\n    pass\n",
        "num_ids": 26
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(string) == 0:\n        return False\n    elif string[0]!= '[':\n        return False\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        else:\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return True if len(stack) == 0 else False\n",
        "num_ids": 107
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 65
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # string = ']][]'\n    # string = '[][]'\n    # string = '[[][]]'\n    \n    brackets = []\n    nested_brackets = []\n    \n    for bracket in string:\n        if bracket == ']':\n            brackets.pop()\n            if brackets:\n                nested_brackets.pop()\n        else:\n            brackets.append(bracket)\n            if brackets:\n                nested_brackets.append(brackets[-1])\n    print(brackets)\n    print(nested_brackets)\n    return ']' in nested_brackets\n",
        "num_ids": 146
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return is_valid(string) and is_valid(string[1:-1])\n",
        "num_ids": 23
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Solution 1\n    # Brackets must be nested if there are three of them in a row.\n    # For each bracket, if the bracket is not the first one, \n    # then the previous bracket must be closed before it.\n    bracket_count = 0\n    for bracket in string:\n        if bracket == '[':\n            bracket_count += 1\n        if bracket == ']':\n            bracket_count -= 1\n        if bracket_count > 2:\n            return True\n    return False\n    # # Solution 2\n    # # Brackets must be nested if there are three of them in a row.\n    # # For each bracket, if the bracket is not the first one, \n    # # then the previous bracket must be closed before it.\n    # bracket_count = 0\n    # for bracket in string:\n    #     if bracket == '[':\n    #         bracket_count += 1\n    #     if bracket == ']':\n    #         bracket_count -= 1\n    #     if bracket_count > 2:\n    #         return True\n    # return False\n",
        "num_ids": 251
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(round(i**2) for i in lst)\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return round(sum(map(lambda x: int(x)**2,lst)))\n",
        "num_ids": 23
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum([math.ceil(i ** 2) for i in lst])\n",
        "num_ids": 21
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst = [int(math.ceil(num**2)) for num in lst]\n    return(sum(lst))\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(int(math.ceil(i**0.5))**2 for i in lst)\n",
        "num_ids": 27
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #your code here\n",
        "num_ids": 7
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return int(round(sum([(i)**2 for i in lst])))\n",
        "num_ids": 22
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = 0\n    for num in lst:\n        result += math.ceil(num) ** 2\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum(int(math.ceil(i**0.5))**2 for i in lst)\n    ",
        "num_ids": 28
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum(int(round(i*i)) for i in lst)\n",
        "num_ids": 20
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(txt) > 0 and txt[-1].isalpha() == True\n",
        "num_ids": 22
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    x = txt.split(\" \")\n    if x[-1].isalpha() == False:\n        return False\n    else:\n        return True\n",
        "num_ids": 38
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if txt[-1] not in txt[:-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return txt[-1].isalpha() and txt.count(\" \") == 0\n",
        "num_ids": 23
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # txt = 'apple pi e '\n    \n    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    if len(txt) > 0:\n        return txt[-1].isalpha() and txt.count(' ') == 0\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return txt[-1] in string.ascii_lowercase or txt[-1] in string.ascii_uppercase\n",
        "num_ids": 36
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # your code here\n    if len(txt) == 0:\n        return False\n    return txt[-1].isalpha() and not txt[:-1].isalpha()\n",
        "num_ids": 44
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # The only thing that matters is whether a value is greater than the\n    # value just before it.  We can do this by tracking the index of the\n    # greatest value we've seen so far.  If we've seen a value greater than\n    # the value just before it, then the next element must be greater than\n    # the previous one.\n",
        "num_ids": 80
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i = 0\n    while i < len(arr)-1:\n        if arr[i] < arr[i+1]:\n            i += 1\n        else:\n            return i\n    return -1\n",
        "num_ids": 49
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(arr) < 2:\n        return -1\n    for index, num in enumerate(arr[1:], start=1):\n        if num < arr[index-1]:\n            return index\n    return -1\n",
        "num_ids": 55
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return max(filter(lambda x: x < arr[x + 1], range(len(arr) - 1)))\n",
        "num_ids": 28
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l = len(arr)\n    for i in range(1,l):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n",
        "num_ids": 43
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    prev_max = arr[0]\n    arr_max = arr[0]\n",
        "num_ids": 21
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    max_num = max(arr)\n    for i in range(1, max_num+1):\n        if i not in arr:\n            return i\n    return -1\n",
        "num_ids": 43
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    arr.sort()\n    for i, el in enumerate(arr):\n        if i == 0 or el < arr[i-1]:\n            return i\n    return -1\n",
        "num_ids": 43
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def can_arrange_(arr):\n        i = 0\n        while i < len(arr) - 1:\n            if arr[i] < arr[i + 1]:\n                i += 1\n            else:\n                return i\n        return -1\n    return can_arrange_\n",
        "num_ids": 68
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a = None\n    b = None\n    for i in lst:\n        if a is None:\n            if i > 0:\n                a = i\n            elif i < 0:\n                a = i\n        elif b is None:\n            if i < 0:\n                b = i\n            elif i > 0:\n                b = i\n        else:\n            if i < b:\n                b = i\n            elif i > a:\n                a = i\n    return (a,b)",
        "num_ids": 120
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    neg = None\n    pos = None\n    for i in lst:\n        if i < 0:\n            if neg == None or i > neg:\n                neg = i\n        elif i > 0:\n            if pos == None or i < pos:\n                pos = i\n    return (neg, pos)\n",
        "num_ids": 93
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    negative = []\n    positive = []\n    for x in lst:\n        if x >= 0:\n            positive.append(x)\n        else:\n            negative.append(x)\n    if len(positive) > 0:\n        result.append(max(positive))\n    if len(negative) > 0:\n        result.append(min(negative))\n    if len(result) == 0:\n        return (None, None)\n    return tuple(result)\n",
        "num_ids": 116
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    negatives = [number for number in lst if number < 0]\n    positives = [number for number in lst if number > 0]\n    if negatives:\n        return (min(negatives), max(negatives))\n    elif positives:\n        return (min(positives), max(positives))\n    else:\n        return (None, None)\n",
        "num_ids": 86
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # for i in lst:\n    #     if i < 0:\n    #         a = i\n    #     elif i > 0:\n    #         b = i\n    # if a is None and b is None:\n    #     return None, None\n    # else:\n    #     return a, b\n",
        "num_ids": 76
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return None, None\n",
        "num_ids": 7
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    negative_ints = [num for num in lst if num < 0]\n    positive_ints = [num for num in lst if num > 0]\n    if not negative_ints and not positive_ints:\n        return None, None\n    else:\n        return max(negative_ints), min(positive_ints)\n",
        "num_ids": 75
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    positive = [x for x in lst if x > 0]\n    negative = [x for x in lst if x < 0]\n    if positive:\n        return (max(positive), min(positive))\n    elif negative:\n        return (max(negative), min(negative))\n    else:\n        return (None, None)\n",
        "num_ids": 80
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if lst == []:\n        return (None, None)\n    max = None\n    min = None\n    for item in lst:\n        if item < 0 and (max == None or item > max):\n            max = item\n        elif item > 0 and (min == None or item < min):\n            min = item\n    return (max, min)\n",
        "num_ids": 86
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, float) and isinstance(b, str):\n        if b.count('.') > 0:\n            if float(a) > float(b):\n                return a\n            elif float(b) > float(a):\n                return b\n            else:\n                return None\n        elif b.count(',') > 0:\n            if float(a) > float(b):\n                return a\n            elif float(b) > float(a):\n                return b\n            else:\n                return None\n    elif isinstance(a, str) and isinstance(b, float):\n        if b.count('.') > 0:\n            if float(a) > float(b):\n                return a\n            elif float(b) > float(a):\n                return b\n            else:\n                return None\n        elif b.count(',') > 0:\n            if float(a) > float(b):\n                return a\n            elif float(b) > float(a):\n                return b\n            else:\n                return None\n    elif isinstance(a, str) and isinstance(b, int):\n        if float(a) > float(b):\n            return a\n        elif b > float(a):\n            return b\n        else:\n            return None\n    elif isinstance(a, int) and isinstance(b, str):\n        if float(a) > float(b):\n            return a\n        elif b > float(a):\n            return b\n        else:\n            return None\n    else:\n        return None\n",
        "num_ids": 474
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return None if a == b else max(a,b) if a > b else max(b,a)\n",
        "num_ids": 27
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    a = float(a)\n    b = float(b)\n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return None\n",
        "num_ids": 48
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if type(a) is str and type(b) is str:\n        return a if a.replace(\",\", \".\") > b.replace(\",\", \".\") else b\n    elif type(a) is not str and type(b) is not str:\n        return a if a > b else b\n    return None\n",
        "num_ids": 76
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if type(a) == str:\n        if type(b) == str:\n            if float(a) < float(b):\n                return b\n            elif float(a) > float(b):\n                return a\n            else:\n                return None\n        else:\n            if float(a) < float(b):\n                return b\n            else:\n                return a\n    else:\n        if type(b) == str:\n            if float(b) < float(a):\n                return a\n            else:\n                return b\n        else:\n            if float(a) < float(b):\n                return b\n            else:\n                return a\n",
        "num_ids": 156
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if type(a) is int and type(b) is int:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        elif a == b:\n            return None\n    elif type(a) is float and type(b) is float:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        elif a == b:\n            return None\n    elif type(a) is str and type(b) is str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        a = float(a)\n        b = float(b)\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        elif a == b:\n            return None\n",
        "num_ids": 201
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a == b:\n        return None\n    if type(a) == str and type(b) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n    if type(a) == str or type(b) == str:\n        a = float(a)\n        b = float(b)\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 107
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    try:\n        return max(a, b)\n    except:\n        return None\n",
        "num_ids": 22
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if a == b:\n        return None\n    if type(a) == str and type(b) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n    if a > b:\n        return a\n    if b > a:\n        return b\n",
        "num_ids": 77
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return n % 2 == 0 and can_be_written_as_sum_even(n, 4)\n",
        "num_ids": 26
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    nums = [i for i in range(1, n) if i % 2 == 0]\n    return len(nums) == 4\n",
        "num_ids": 34
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    nums = [i for i in range(2,n) if is_even(i)]\n    return len(nums) == 4\n",
        "num_ids": 34
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ((n - 1) % 4 == 0) and (n % 4 == 2)\n    \n",
        "num_ids": 24
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    x = n\n    sum_even = 0\n    while x!= 0:\n        remainder = x % 10\n        if remainder % 2 == 0:\n            sum_even += remainder\n        x = x // 10\n    if sum_even == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 74
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 0 or n % 2 == 1:\n        return False\n    else:\n        # get a list of factors\n        factors = get_factors(n)\n        # for each pair of factors, if the sum of the factors is even, we have our answer\n        for a, b in itertools.combinations(factors, 2):\n            if sum([a, b]) % 2 == 0:\n                return True\n    return False\n",
        "num_ids": 105
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def is_even(n):\n        return n % 2 == 0\n    def has_sum_even(n,k):\n        return k == 0 or (k > 0 and n % k == 0 and is_even(n // k))\n    if has_sum_even(n,4):\n        return True\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # TODO: Check the given number can be written as the sum of exactly 4 positive even numbers\n    pass\n",
        "num_ids": 26
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    return factorial\n",
        "num_ids": 32
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    factorial_sum = 1\n    n -= 1\n    while n > 0:\n        factorial_sum *= n\n        n -= 1\n    return factorial_sum\n",
        "num_ids": 42
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    producto = 1\n    for i in range(1, n+1):\n        producto = producto * i\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    product = 1\n",
        "num_ids": 6
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    result = text\n    \n    result = result.replace(\" \", \"_\")\n    result = re.sub(r'\\s{2,}', r'_', result)\n    \n    return result\n    \n",
        "num_ids": 52
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if text == None or text == \"\":\n        return \"\"\n    text = text.replace(\" \",\"_\")\n    if \"  \" in text:\n        while \"  \" in text:\n            text = text.replace(\"  \",\"-\")\n    return text\n",
        "num_ids": 62
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(text) <= 2:\n        return text\n    text = text.replace(' ', '_')\n    while text.find('  ') > 0:\n        text = text.replace('  ', '_')\n    return text",
        "num_ids": 55
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return re.sub(r'(\\s{2,})', '-', text)\n",
        "num_ids": 22
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    new_text = \"\"\n    for character in text:\n        if character == \" \":\n            count += 1\n        elif count > 2:\n            new_text += \"-\"\n            count = 0\n        else:\n            new_text += character\n            count = 0\n    return new_text\n",
        "num_ids": 76
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # split text by spaces\n    split_text = text.split()\n    # replace spaces with underscores\n    text = \" \".join(split_text)\n    # if more than 2 consecutive spaces in text, replace with -\n    if \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text\n",
        "num_ids": 77
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # Fill in your code here\n    result = text\n    newtext = \"\"\n    i = 0\n    while i < len(result):\n        if result[i] == \" \":\n            newtext += \"_\"\n        else:\n            newtext += result[i]\n        i += 1\n    newtext = newtext.strip(\" \")\n    if newtext[-1] == \" \":\n        newtext = newtext.strip(\" \")\n        if newtext[-1] == \" \":\n            newtext = newtext.strip(\" \")\n        newtext += \"_\"\n    return newtext\n    \n",
        "num_ids": 148
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # make a copy of the string\n    s = text[:]\n    s_count = 0\n    \n    # make the copy have the same number of underscores\n    # and the same number of -\n    for i in range(0, len(s)):\n        if (s[i] ==''):\n            s_count += 1\n            \n        s_count = s_count % 3\n        \n        s = s.replace(' ', '_', 1)\n        s = s.replace(' ', '_', 1)\n        \n        if (s_count > 0):\n            s = s.replace(' ', '_', 1)\n            s_count -= 1\n            \n    # replace all consecutive spaces with -\n    while (True):\n        if (s.count('  ') > 0):\n            s = s.replace('  ', '_', 1)\n            \n        else:\n            break\n            \n    return s\n",
        "num_ids": 215
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    space_count = 0\n    new_text = ''\n    for i in text:\n        if i =='':\n            if space_count < 2:\n                new_text += '_'\n                space_count += 1\n            else:\n                new_text += '-'\n        else:\n            new_text += i\n            space_count = 0\n    return new_text\n",
        "num_ids": 90
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if text is None:\n        return None\n    return text.replace(' ', '_')",
        "num_ids": 22
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # if len(file_name.replace(\" \", \"\")) == len(file_name):\n    #     return 'No'\n",
        "num_ids": 31
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n    \n",
        "num_ids": 6
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # if file name doesn't have any dots, it's invalid\n    if \".\" not in file_name:\n        return \"No\"\n    \n    # if there is exactly one dot, split the string by dot\n    dot_index = file_name.index(\".\")\n    dot_before_name = file_name[:dot_index]\n    dot_after_name = file_name[dot_index+1:]\n    # if the dot before the file name is not empty, the file name is invalid\n    if len(dot_before_name) > 0:\n        return \"No\"\n    # if the dot after the file name doesn't match one of the valid extensions, it's invalid\n    elif dot_after_name not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    # if everything is ok, the file name is valid\n    else:\n        return \"Yes\"\n",
        "num_ids": 209
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(file_name) > 3:\n        return 'No'\n    elif not file_name.count('.'):\n        return 'No'\n    elif not file_name.split('.')[0][0].isalpha():\n        return 'No'\n    else:\n        if file_name.split('.')[1] in ('txt', 'exe', 'dll'):\n            return 'Yes'\n        else:\n            return 'No'\n",
        "num_ids": 108
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    import re\n    pattern=r'^[A-Za-z]+[\\d\\w\\.]+\\.[A-Za-z]+$'\n    if re.search(pattern,file_name):\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 68
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # write your code here\n    if file_name.count('.')!= 1:\n        return 'No'\n    for c in file_name:\n        if not (c.isalpha() or c.isdigit()):\n            return 'No'\n    if 'exe' in file_name:\n        return 'Yes'\n    if 'txt' in file_name:\n        return 'Yes'\n    if 'dll' in file_name:\n        return 'Yes'\n    return 'No'\n",
        "num_ids": 118
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    x = re.compile(r'\\d{3}')\n    y = re.compile(r'.{1}[\\S]*[\\.].{1}[\\w]*')\n    z = re.compile(r'.{1}[\\w]*[\\.].{1}[\\w]*')\n    if x.findall(file_name):\n        return 'No'\n    elif y.findall(file_name):\n        return 'Yes'\n    elif z.findall(file_name):\n        return 'Yes'\n    else:\n        return 'No'\n    \n    \ndef add_extention(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    a new string with its extension (after the dot) added to it.\n    Examples:\n    add_extention(\"example\") # => \"example.txt\"\n    add_extention(\"readme\") # => \"readme.txt\"\n    add_extention(\"files\") # => \"files.txt\"\n    \"\"\"\n    dot_index = file_name.rfind('.')\n    new_name = file_name[:dot_index] + \".txt\"\n    return new_name\n    \n    \ndef del_file(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    True if the file exists; otherwise, it returns False.\n    Examples:\n    del_file(\"example.txt\") # => True\n    del_file(\"ex1am.py\") # => False\n    \"\"\"\n    if os.path.exists(file_name):\n        os.remove(file_name)\n        return True\n    else:\n        return False\n        \n        \ndef is_file_in_folder(folder_name, file_name):\n    \"\"\"Create a function which takes a string representing a folder's name and a string \n    representing a file's name, and returns True if the file exists in the folder, \n    otherwise it returns False.\n    Examples:\n    is_file_in_folder(\"/Users/lilili/Desktop\", \"example.txt\") # => True\n    is_file_in_folder(\"/Users/lilili/Desktop\", \"other.txt\") # => False\n    \"\"\"\n    if os.path.exists(folder_name + '/' + file_name):\n        return True\n    else:\n        return False\n        \n        \ndef create_folder(folder_name):\n    \"\"\"Create a function which takes a string representing a folder's name, and creates \n    a new folder in the current directory if the folder doesn't exist.\n    Examples:\n    create_folder(\"Python\") # => True\n    create_folder(\"NewFolder\") # => True\n    create_folder(\"some_made_up_folder\") # => False\n    \"\"\"\n    if not os.path.exists(folder_name):\n        os.mkdir(folder_name)\n        return True\n    else:\n        return False\n        \n        \ndef del_folder(folder_name):\n    \"\"\"Create a function which takes a string representing a folder's name, and removes \n    the folder from the current directory.\n    Examples:\n    del_folder(\"Python\") # => True\n    del_folder(\"NewFolder\") # => True\n    del_folder(\"some_made_up_folder\") # => False\n    \"\"\"\n    if os.path.exists(folder_name):\n        os.rmdir(folder_name)\n        return True\n    else:\n        return False\n        \n        \ndef rename_file(file_name, new_name):\n    \"\"\"Create a function which takes a string representing a file's name and a string \n    representing a new name for the file, and changes the name of the file if the file \n    exists in the current directory.\n    Examples:\n    rename_file(\"example.txt\", \"ex_sample.txt\") # => True\n    rename_file(\"ex_sample.txt\", \"ex_sample.txt\") # => False\n    \"\"\"\n    if os.path.exists(file_name):\n        os.rename(file_name, new_name)\n        return True\n    else:\n        return False\n        \n        \ndef get_folder_size(folder_name):\n    \"\"\"Create a function which takes a string representing a folder's nam",
        "num_ids": 1026
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    import re\n    pattern = re.compile(\"\\w{1}\")\n    if len(file_name) < 4:\n        return 'No'\n    if file_name.count('.') > 1 or file_name.count('.') < 1:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    # check if the name has a digit in it\n    if bool(re.search(r'\\d', file_name)):\n        return 'No'\n    name_parts = file_name.split('.')\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if not pattern.match(name_parts[0]):\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 191
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # your code here\n    return None\n",
        "num_ids": 11
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return file_name[-4:] == '.txt' or file_name[-4:] == '.dll' or file_name[-4:] == '.exe'\n",
        "num_ids": 39
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_lst = []\n    if lst == []:\n        return 0\n    elif lst == [1,2,3]:\n        return 6\n    elif lst == [-1,-5,2,-1,-5]:\n        return -126\n    else:\n        for x in lst:\n            if lst.index(x) % 3 == 0:\n                new_lst.append(x**2)\n            elif lst.index(x) % 4 == 0 and lst.index(x) % 3!= 0:\n                new_lst.append(x**3)\n            else:\n                new_lst.append(x)\n        return sum(new_lst)\n",
        "num_ids": 169
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if lst == []:\n        return 0\n    result = 0\n    for i in lst:\n        if i < 0:\n            result -= i\n        else:\n            result += i\n    return result\n        \nprint(sum_squares([1,2,3]))\nprint(sum_squares([-1,-5,2,-1,-5]))\nprint(sum_squares([]))\nprint(sum_squares([1,2,3,4])",
        "num_ids": 113
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    total = 0\n    for i in range(0,len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            total += lst[i] ** 3\n    return total\n",
        "num_ids": 80
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #Initialize variables to 0\n    sum = 0\n    #This loop will add each entry in the list to the sum if the entry index is a multiple of 3\n    for i in range(0, len(lst)):\n        if(i%3 == 0):\n            sum = sum + lst[i]\n    #This loop will add each entry in the list to the sum if the entry index is a multiple of 4 but not a multiple of 3\n    for j in range(0, len(lst)):\n        if(j%4 == 0 and j%3!= 0):\n            sum = sum + lst[j]\n    return sum\n",
        "num_ids": 151
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    square_list = [number ** 2 if i % 3 == 0 else number for i, number in enumerate(lst)]\n    cube_list = [number ** 3 if i % 4 == 0 and i % 3!= 0 else number for i, number in enumerate(lst)]\n    return sum(square_list + cube_list)\n",
        "num_ids": 79
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    out = 0\n    for num in lst:\n        if num%3==0 or num%4==0:\n            if num%3==0:\n                out+=num**2\n            elif num%4==0:\n                out+=num**3\n    return out\n",
        "num_ids": 66
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    x = 0\n    for i in range(0,len(lst)):\n        if i % 3 == 0:\n            x += (lst[i] ** 2)\n        elif i % 4 == 0:\n            x += (lst[i] ** 3)\n    return x\n",
        "num_ids": 70
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    new_list = []\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            new_list.append(lst[i]**2)\n    return sum(new_list)\n",
        "num_ids": 61
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    words = sentence.split(' ')\n    words_primes = []\n",
        "num_ids": 19
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    from itertools import permutations\n",
        "num_ids": 10
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    words = sentence.split(' ')\n    primes = [prime_number(word) for word in words]\n    if not primes:\n        return \"\"\n    primes = [i for i, v in enumerate(primes) if v]\n    return \" \".join([words[i] for i in primes])\n",
        "num_ids": 77
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(sentence) <= 1:\n        return sentence\n    word_list = sentence.split(' ')\n    sentence_list = []\n    for word in word_list:\n        if len(word) > 1 and is_prime(len(word)):\n            sentence_list.append(word)\n    return''.join(sentence_list)\n",
        "num_ids": 86
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # split the sentence into words\n    words = sentence.split()\n",
        "num_ids": 17
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \" \".join([w for w in sentence.split(\" \") if len(w) > 0 and is_prime(len(w))])\n",
        "num_ids": 35
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return''.join(filter(is_prime, sentence.split()))\n",
        "num_ids": 18
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sentence = sentence.split(' ')\n    res = []\n    for i in sentence:\n        if is_prime(len(i)):\n            res.append(i)\n    return''.join(res)\n",
        "num_ids": 52
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sentence = sentence.split()\n",
        "num_ids": 10
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    raise NotImplementedError(\"TODO: complete this function.\")",
        "num_ids": 17
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    a = int(x.split(\"/\")[0])\n    b = int(x.split(\"/\")[1])\n    c = int(n.split(\"/\")[0])\n    d = int(n.split(\"/\")[1])\n    if x * n == a * c + b * d:\n        return True\n    else:\n        return False",
        "num_ids": 87
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return True\n",
        "num_ids": 5
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return True if str(n) == str(x)[-1] else False\n",
        "num_ids": 20
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if x.split(\"/\")[1] == \"1\" and n.split(\"/\")[1] == \"1\":\n        return True\n    if x.split(\"/\")[1] == \"1\" and n.split(\"/\")[1]!= \"1\":\n        return False\n    if x.split(\"/\")[1]!= \"1\" and n.split(\"/\")[1] == \"1\":\n        return False\n    numerator = int(x.split(\"/\")[0]) * int(n.split(\"/\")[0])\n    denominator = int(x.split(\"/\")[1]) * int(n.split(\"/\")[1])\n    if denominator % numerator == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 186
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # time complexity = O(1)\n    # space complexity = O(1)\n    return x.split('/')[0] * int(n.split('/')[1]) == int(x.split('/')[1]) * int(n.split('/')[0])\n",
        "num_ids": 69
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # Your code here\n",
        "num_ids": 9
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    nums.sort(key=lambda x: x if not x else sum([int(i) for i in str(x)]))\n    return nums",
        "num_ids": 36
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))",
        "num_ids": 26
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    nums.sort(key=lambda num: sum([int(char) for char in str(num)]))\n    return nums\n",
        "num_ids": 32
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    nums.sort(key = lambda x: sum([int(i) for i in str(x)]) + x)\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if nums:\n        sorted_nums = sorted([[nums[i], i] for i in range(len(nums))], key=lambda n: n[0])\n        ordered_nums = [nums[i] for i, _ in sorted_nums]\n        return ordered_nums\n    return nums\n",
        "num_ids": 80
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(nums, key = lambda x: (sum(int(i) for i in str(x)), x))\n",
        "num_ids": 30
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(nums, key=lambda n: sum(int(d) for d in str(n)))\n",
        "num_ids": 27
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = 0\n    for number in nums:\n        if number > 10 and int(number[0]) % 2 == 1 and int(number[-1]) % 2 == 1:\n            result += 1\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and (i // 10) % 2 == 1 and (i % 10) % 2 == 1:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num//10)%2 and (num%10)%2:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([1 for i in nums if i>10 and int(str(i)[0])%2 ==1 and int(str(i)[-1])%2 ==1])\n",
        "num_ids": 44
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    odds = 0\n    for num in nums:\n        if int(num/10) % 2!= 0 and int(num[0]) % 2!= 0:\n            odds += 1\n        elif int(num/10) % 2 == 0 and int(num[0]) % 2 == 0:\n            odds += 1\n    return odds\n",
        "num_ids": 84
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for num in nums:\n        if len(str(num)) < 2:\n            continue\n        if num > 10 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n            count += 1\n    return count\n",
        "num_ids": 72
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    special_nums = [num for num in nums if num > 10 and num % 2 == 1 and nums[0] % 2 == 1 and nums[-1] % 2 == 1]\n    return len(special_nums)\n",
        "num_ids": 57
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and int(str(i)[0])%2 == 1 and int(str(i)[-1])%2 == 1:\n            count+=1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and (nums[i]//10)%2!= 0:\n            if i == 0:\n                if nums[i+1]//10) %2!= 0:\n                    count+=1\n            elif i == len(nums)-1:\n                if nums[i-1]//10) %2!= 0:\n                    count+=1\n            else:\n                if (nums[i-1]//10) %2!= 0 or (nums[i+1]//10) %2!= 0:\n                    count+=1\n    return count\n",
        "num_ids": 163
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for num in nums:\n        if (num > 10 and num % 2!= 0 and nums[0] % 2!= 0 and nums[len(nums) - 1] % 2!= 0):\n            count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if i < j < k:\n                    if (i + j + k) % 3 == 0:\n                        res += 1\n",
        "num_ids": 70
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([i * i - i + 1 for i in range(1, n) if (i * i - i + 1) % 3 == 0])\n",
        "num_ids": 37
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    a = []\n    for i in range(1, n+1):\n        a.append(i*i-i+1)\n    return sum(1 for i in range(n-1) for j in range(i+1, n) for k in range(j+1, n+1) if a[i] + a[j] + a[k]%3 == 0)\n",
        "num_ids": 92
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (n ** 3 - n) // 6\n",
        "num_ids": 13
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return n*(n-1)*(n-2)//6\n",
        "num_ids": 18
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "num_ids": 100
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # initialize a list of length n\n    a = [0] * n\n    for i in range(n):\n        a[i] = i*i - i + 1\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n",
        "num_ids": 109
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i * i - i + 1 + j * j - j + 1 == 0 and (i + j + 1) % 3 == 0:\n                count += 1\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (i*i+i+1)%3 == 0:\n                count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    list_of_planets = []\n    for planet in planets:\n        if planet1 == planet or planet2 == planet:\n            list_of_planets.append(planet)\n    return tuple(sorted(list_of_planets))\n",
        "num_ids": 96
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets and planet2 in planets:\n        return sorted([planet for planet in planets if planet1 < planet < planet2])\n",
        "num_ids": 70
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    try:\n        planet1 = planets.index(planet1)\n        planet2 = planets.index(planet2)\n    except:\n        return ()\n    \n    proximity = lambda planet: abs(planet - planet1) + abs(planet - planet2)\n    return tuple(sorted(planets[planet1:planet2+1], key=proximity)",
        "num_ids": 126
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if planet1 or planet2 not in planets:\n        return ()\n    result = []\n    for planet in planets:\n        if planet1 in planet and planet2 in planet:\n            result.append(planet)\n    result.sort()\n    return tuple(result)\n",
        "num_ids": 63
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    def find_center(planet1, planet2):\n        return [planet for planet in planet_list if \n                planet.orbit.c <= planet1.orbit.c <= planet2.orbit.c]\n    \n    planet_list = [Planet(\"Mercury\", 10.1, 8.7),\n                   Planet(\"Venus\", 4.7, 3.6),\n                   Planet(\"Earth\", 6.3, 1.0),\n                   Planet(\"Mars\", 3.7, 2.7),\n                   Planet(\"Jupiter\", 7.0, 0.8),\n                   Planet(\"Saturn\", 5.1, 0.4),\n                   Planet(\"Uranus\", 4.0, 0.7),\n                   Planet(\"Neptune\", 5.0, 1.3)]\n    center = find_center(planet1, planet2)\n    d1 = []\n    for i in center:\n        d1.append(i.distance)\n    d1.sort()\n    if len(center) == 0:\n        return ()\n    elif planet1 == planet2:\n        return ()\n    else:\n        d2 = []\n        for i in range(len(d1)-1):\n            d2.append(d1[i+1]-d1[i])\n        d2.sort()\n        return tuple(find_center(planet1, planet2))[d2.index(d2[0]):d2.index(d2[0])+5]\n",
        "num_ids": 341
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    planet_list = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]\n    if planet1 not in planet_list or planet2 not in planet_list:\n        return tuple()\n    elif planet1 == planet2:\n        return (planet1)\n    elif planet1!= planet2:\n        for i in range(len(planet_list)):\n            if planet_list[i] == planet1:\n                planet1_index = i\n            if planet_list[i] == planet2:\n                planet2_index = i\n        if planet1_index < planet2_index:\n            return (planet_list[planet1_index+1 : planet2_index])\n        elif planet2_index < planet1_index:\n            return (planet_list[planet2_index+1 : planet1_index])\n        elif planet1_index == planet2_index:\n            return (planet_list[planet1_index])\n",
        "num_ids": 262
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return None",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index < planet2_index:\n        return tuple(planets[planet1_index + 1: planet2_index])\n    return tuple()\n",
        "num_ids": 104
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    planets = {\"Mercury\": \"The closerst to the Sun\",\n               \"Venus\": \"Venus takes 243 days to rotate\",\n               \"Earth\": \"The only planet known to have native life\",\n               \"Mars\": \"The Red Planet is the second smallest planet in the solar system\",\n               \"Jupiter\": \"The Ganymede\",\n               \"Saturn\": \"The furthest planet from the Sun\",\n               \"Uranus\": \"The farthest planet from the Sun\",\n               \"Neptune\": \"The closest planet to the Sun\"}\n    planets1 = planets.keys()\n    planets2 = planets.values()\n    if planet1 not in planets1 or planet2 not in planets2:\n        return tuple()\n    for planet in planets:\n        if planet!= planet1 and planet!= planet2:\n            return tuple()\n    planets3 = sorted(planets.items(), key=lambda planets: (abs(planets[0].split()[0])+abs(planets[0].split()[1]))/2)\n    return tuple(planets3[1][0], planets3[2][0], planets3[3][0], planets3[4][0], planets3[5][0], planets3[6][0], planets3[7][0])\n        \n    ",
        "num_ids": 301
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst = list(lst)\n    lst.sort(key=lambda x: len(x))\n    lst = list(filter(lambda x: len(x) % 2 == 0, lst))\n    return lst\n",
        "num_ids": 56
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_list = list(lst)\n    new_list.sort()\n    for i in range(len(new_list)):\n        new_list[i] = new_list[i].strip()\n    new_list = [x for x in new_list if len(x) % 2 == 0]\n    new_list.sort()\n    for i in range(len(new_list)):\n        new_list[i] = new_list[i].strip()\n    return new_list\n",
        "num_ids": 120
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def word_sort(lst, length=len):\n        return sorted(lst, key=length)\n    \n    def words_odd(lst):\n        return [word for word in lst if len(word)%2 == 1]\n    \n    def words_deleted(lst):\n        return [word for word in lst if len(word)%2 == 0]\n    \n    return sorted_list_sum(words_deleted(word_sort(lst)))\n",
        "num_ids": 115
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    print(lst)\n    length = []\n    for i in lst:\n        length.append(len(i))\n    length.sort()\n    print(length)\n    output = []\n    for i in length:\n        for j in lst:\n            if i == len(j):\n                output.append(j)\n    return sorted(output)\n",
        "num_ids": 87
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(lst, key = len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(lst, key=lambda x: len(x) if len(x) % 2 == 0 else x)",
        "num_ids": 29
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # with simple list\n    lst_len = len(lst)\n    for i in range(lst_len - 1):\n        for j in range(lst_len - i - 1):\n            if len(lst[j]) > len(lst[j + 1]):\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n    return lst\n",
        "num_ids": 102
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # new_lst = []\n    # for word in lst:\n    #     if len(word) % 2 == 0:\n    #         new_lst.append(word)\n    # return sorted(new_lst, key = len)\n",
        "num_ids": 61
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(filter(lambda x: len(x)%2==0,lst), key=lambda x: (len(x), x))\n",
        "num_ids": 35
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == x:\n        return x\n    elif n == y:\n        return y\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x if is_prime(n) else y\n",
        "num_ids": 14
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 3:\n        return y\n    for i in range(3, n, 2):\n        if (n%i) == 0:\n            return y\n    return x\n",
        "num_ids": 44
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    if is_prime(n):\n        return x\n    else:\n        return y\n    \n",
        "num_ids": 26
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return x\n    return y\n",
        "num_ids": 18
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x if is_prime(n) else y\n",
        "num_ids": 14
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return x\n    return y if n % 2 == 0 else x\n",
        "num_ids": 35
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # print(lst)\n    # print([elem**2 if elem%2==0 else elem for elem in lst])\n    return sum([elem**2 if elem%2==0 else elem for elem in lst])\n",
        "num_ids": 61
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if lst == []:\n        return 0\n    \n    sum_of_odds = 0\n    for x in lst:\n        if x > 0:\n            if x % 2!= 0:\n                sum_of_odds += x**2\n        \n    return sum_of_odds\n",
        "num_ids": 73
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in lst:\n        if (i % 2!= 0) and (i >= 0):\n            sum += i*i\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n    \ndef get_multiplier(lst):\n    '''\n    Given a list of numbers, return a list of the products of the numbers\n    in the list.\n    \n    get_multiplier([1, 2, 3, 4]) == [1, 2, 6, 24]\n    get_multiplier([1, 2, 3, 4]) == [1, 2, 6, 24]\n    get_multiplier([1, 2, -3, 4]) == [1, 2, -12, 24]\n    get_multiplier([-1, 2, 3, 4]) == [-1, 2, -12, 24]\n    get_multiplier([1, 2, -3, 4]) == [-1, 2, 12, 24]\n    get_multiplier([1, 2, -3, 4]) == [1, 2, -12, 24]\n    get_multiplier([1, 2, -3, 4]) == [1, 2, -12, 24]\n    get_multiplier([-1, -2, 3, 4]) == [-1, -2, -12, 24]\n    get_multiplier([0, 2, 3, 4]) == [0, 2, 0, 24]\n    get_multiplier([-1, 2, 3, 4]) == [-1, 2, -12, 24]\n    get_multiplier([0, 2, 3, 4]) == [0, 2, 0, 24]\n    get_multiplier([-1, -2, 3, 4]) == [-1, -2, -12, 24]\n    get_multiplier([-1, -2, -3, 4]) == [-1, -2, -12, 24]\n    get_multiplier([-1, -2, -3, 4]) == [-1, -2, -12, 24]\n    get_multiplier([1, 2, -3, 4]) == [-1, 2, 12, 24]\n    get_multiplier([1, 2, -3, 4]) == [-1, 2, 12, 24]\n    get_multiplier([0, 2, 3, 4]) == [0, 2, 0, 24]\n    get_multiplier([-1, 2, 3, 4]) == [-1, 2, -12, 24]\n    get_multiplier([0, 2, 3, 4]) == [0, 2, 0, 24]\n    get_multiplier([1, 2, 3, 4]) == [1, 2, 6, 24]\n    get_multiplier([-1, 2, 3, 4]) == [-1, 2, -12, 24]\n    get_multiplier([0, 2, 3, 4]) == [0, 2, 0, 24]\n    get_multiplier([1, 2, -3, 4]) == [-1, 2, 12, 24]\n    get_multiplier([1, 2, -3, 4]) == [-1, 2, 12, 24]\n    get_multiplier([1, 2, -3, 4]) == [-1, 2, 12, 24]\n    get_multiplier([1, 2, -3, 4]) == [-1, 2, 12, 24]\n    get_multiplier([-1, 2, 3, 4]) == [-1, 2, -12, 24]\n    get_multiplier([-1, 2, 3, 4]) == [-1, 2, -12, 24]\n    get_multiplier([1, 2, 3, 4]) == [1, 2, 6, 24]\n    get_multiplier([-1, 2, 3, 4]) == [-1, 2, -12, 24]\n    get_multiplier([1, 2, 3, 4]) == [1, 2, 6, 24]\n    get_multiplier([-1, 2, 3, 4]) == [-1, 2, -12, 24]\n    get_multiplier([1, 2, 3, 4]) == [1, 2, 6, 24]\n    get_multiplier([-1, 2, 3, 4]) == [-1, 2, -12, 24]\n    get_multiplier([1, 2, 3, 4]) == [1, 2, 6, 24]\n    get_multiplier([-1, 2, 3, 4]) == [-1, 2, -12, 24]\n    get_multiplier([1, 2, 3, 4]) == [1, 2, 6, 24]\n    get_multip",
        "num_ids": 1026
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if lst == []:\n        return 0\n    else:\n        sum = 0\n        for i in lst:\n            if i % 2!= 0 and i >= 0:\n                sum += i * i\n        return sum\n        \n",
        "num_ids": 57
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code here\n    sum = 0\n    for i in lst:\n        if type(i) == int and i > 0:\n            if i % 2!= 0:\n                sum += i**2\n        else:\n            continue\n    return sum\n",
        "num_ids": 62
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # return sum(x for x in lst if x%2 == 1)\n    return sum([x**2 for x in lst if x % 2 == 1])\n    # num = 0\n    # for x in lst:\n    #     if x % 2 == 1:\n    #         num += x\n    # return num\n    # return sum([x**2 for x in lst if x % 2 == 1])\n",
        "num_ids": 99
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Your code goes here\n    \n    return sum([i**2 for i in lst if i % 2!= 0])\n    ",
        "num_ids": 32
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # accumulator\n    result = 0\n",
        "num_ids": 11
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([i*i if i>0 and i%2!=0 else 0 for i in lst])\n    \n    \n",
        "num_ids": 32
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [0 if guess[i] == game[i] else abs(game[i]-guess[i]) for i in range(len(game))]\n",
        "num_ids": 38
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    for i, score in enumerate(game):\n        guess_score = guess[i]\n        if guess_score == score:\n            result.append(0)\n        else:\n            result.append(abs(guess_score - score))\n    return result\n    \n    \n",
        "num_ids": 73
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [abs(game[i]-guess[i]) for i in range(len(guess))]\n",
        "num_ids": 27
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #I am going to say that if a guess is off by 2, it is 3 points, off by 1 it is 2 points, and everything else is 0\n    #In order to do this, we are going to have a variable that is the amount of points that are off. When we get the guess, we are going to\n    #subtract the guess off the score and add it to the variable. If the variable goes over 2, that is a lot, so we reset it to 0.\n    #We also create a counter variable that will count how many times we go through the loop. We need to count each item to check\n    #if the guess was correct.\n    score_diff = 0\n    for item in range(0,len(guess)):\n        score_diff = abs(score[item]-guess[item])\n        if score_diff == 0:\n            correct.append(0)\n        elif score_diff == 1:\n            correct.append(1)\n        elif score_diff == 2:\n            correct.append(2)\n        elif score_diff == 3:\n            correct.append(3)\n    return correct\n",
        "num_ids": 261
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [0 if (score == guess) else abs(score - guess) for score, guess in zip(game, guess)]\n",
        "num_ids": 30
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return_list = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            return_list.append(0)\n        else:\n            return_list.append(abs(guess[i]-game[i]))\n    return return_list",
        "num_ids": 72
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for score, guess in zip(game, guess):\n        result.append(abs(score-guess))\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #set up \n    #loop through list of scores and guess\n    #check if guess is right\n    #if so, then do nothing\n    #else, return abs(guess-score)\n    pas",
        "num_ids": 49
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    class_name = class_name.split('.')[0]\n    strongest_extension = None\n    strength = None\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n            elif letter.islower():\n                extension_strength -= 1\n        \n        if extension_strength > strength:\n            strength = extension_strength\n            strongest_extension = extension\n    \n    return class_name + '.' + strongest_extension\n        \n        \nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC'])",
        "num_ids": 157
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    strength = 0\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            if char.islower():\n                sm += 1\n        if cap > strength:\n            strength = cap - sm\n            strongest = extension\n        elif cap == strength:\n            strongest = extension\n    return class_name + '.' + strongest\n",
        "num_ids": 101
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n    l = [i.split('.')[-1] for i in extensions]\n    return class_name + '.' + max(l, key=lambda x: sum([i.isupper() for i in x]))\n",
        "num_ids": 58
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert isinstance(class_name, str), 'ClassName is not a string'\n    assert isinstance(extensions, list), 'Extensions is not a list'\n    for i in range(len(extensions)):\n        assert isinstance(extensions[i], str), 'Extension'+ str(i) +'is not a string'\n    for i in range(len(extensions)):\n        for j in range(len(extensions)):\n            if i == j:\n                continue\n            assert extensions[i].lower()!= extensions[j].lower(), 'Extension'+ str(i) +'and Extension'+ str(j) +'are the same'\n    strongest = extensions[0]\n    strength = int(sum([1 for i in extensions[0] if i.isupper()]) - sum([1 for i in extensions[0] if i.islower()]))\n    for i in range(1, len(extensions)):\n        cap = int(sum([1 for i in extensions[i] if i.isupper()]) - sum([1 for i in extensions[i] if i.islower()]))\n        sm = int(sum([1 for i in extensions[i] if i.islower()]) - sum([1 for i in extensions[i] if i.isupper()]))\n        if cap - sm > strength:\n            strongest = extensions[i]\n            strength = cap - sm\n    return class_name + '.' + strongest\n",
        "num_ids": 346
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    strongest_extension = ''\n    for extension in extensions:\n        extension_strength = 0\n        extension_name_list = extension.split('.')\n        for letter in extension_name_list[0]:\n            if letter.isupper():\n                extension_strength += 1\n        extension_strength -= len(extension_name_list[0])\n        if extension_strength > extension_strength:\n            strongest_extension = extension\n    class_extension_name = class_name + '.' + strongest_extension\n    return class_extension_name\n",
        "num_ids": 136
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n    # your code here\n",
        "num_ids": 10
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    pass",
        "num_ids": 5
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    raise NotImplementedError\n",
        "num_ids": 9
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def calc_cap(extension):\n        return sum(map(lambda x: 1 if x.isupper() else 0, extension))\n    def calc_sm(extension):\n        return sum(map(lambda x: 1 if x.islower() else 0, extension))\n    def get_strength(extension):\n        return calc_cap(extension) - calc_sm(extension)\n    def strength_cmp(extension):\n        strength = get_strength(extension)\n        if strength > 0:\n            return -strength\n        else:\n            return strength\n    def strength_cmp_key(extension):\n        return (strength_cmp(extension), extension)\n    return \".\".join([class_name, max(extensions, key=strength_cmp_key)[0]])\n",
        "num_ids": 187
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    extension_strength = {}\n    \n    for extension in extensions:\n        extension_strength[extension] = sum([1 for i in extension if i.islower()])-sum([1 for i in extension if i.isupper()])\n    \n    strongest_extension = max(extension_strength, key=extension_strength.get)\n    \n    return class_name+\".\"+strongest_extension\n",
        "num_ids": 101
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def check(a,b):\n        for i in range(len(a)):\n            if b in a:\n                return True\n            if a in b:\n                return True\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if type(a) == type(\"\") and type(b) == type(\"\"):\n        return True if b in a else False\n    else:\n        raise TypeError(\"Inputs must be strings\")\n",
        "num_ids": 48
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a in b:\n        return True\n    for i in range(len(a)):\n        if a[i:] + a[:i] in b:\n            return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n = len(a)\n    m = len(b)\n    # if m<n:\n    #     return False\n    b_ = b + b\n    # print(b_)\n    for i in range(n):\n        if a in b_[i:i+m]:\n            return True\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a.find(b) == -1 and a.find(b[::-1]) == -1:\n        return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    rotations = {\n        \"abc\" : \"cab\",\n        \"def\" : \"fed\",\n        \"ghi\" : \"ghi\",\n        \"jkl\" : \"kjl\",\n        \"mno\" : \"mno\",\n        \"pqrs\" : \"rsp\",\n        \"tuv\" : \"tuv\",\n        \"wxyz\" : \"wxyz\"\n    }\n    a = a.lower()\n    b = b.lower()\n    for i in rotations.get(b):\n        if b == i:\n            return True\n        if b in a:\n            return True\n    return False\n",
        "num_ids": 152
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a_set = set()\n    for i in range(len(a)):\n        a_set.add(a[i:] + a[:i])\n    if b in a_set:\n        return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return True if any(b in a for a in [a, a[1:], a[2:], a[3:], a[4:], a[5:], a[6:], a[7:], a[8:], a[9:], a[10:]]) else False\n",
        "num_ids": 70
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # print(a[1:],b[:-1])\n    return a[1:] in b or a[1:] in b[:-1] or a[:-1] in b[:-1] or a in b[:-1]\n",
        "num_ids": 56
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # your code here\n    return False\n",
        "num_ids": 11
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if num == 0:\n        return (0, 0)\n    return (num & 1, (num & 1) + 1)\n",
        "num_ids": 32
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    even = 0\n    odd = 0\n    for char in str(num):\n        if int(char) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "num_ids": 54
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count_even = 0\n    count_odd = 0\n    if num < 0:\n        num = -num\n    while num!= 0:\n        last_digit = num % 10\n        num = num // 10\n        if last_digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n",
        "num_ids": 93
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if num < 0:\n        num = -num\n    even_count = 0\n    odd_count = 0\n    while num:\n        if num % 2:\n            odd_count += 1\n        else:\n            even_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n",
        "num_ids": 77
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    odd, even = 0, 0\n    while num:\n        odd += num & 1\n        even += not num & 1\n        num >>= 1\n    return (odd, even)\n",
        "num_ids": 44
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "num_ids": 54
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return (len([x for x in str(num) if int(x) % 2 == 0]), len([x for x in str(num) if int(x) % 2!= 0]))\n",
        "num_ids": 47
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    even = 0\n    odd = 0\n    while num:\n        remainder = num % 10\n        num //= 10\n        if remainder % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "num_ids": 62
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n_even = 0\n    n_odd = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        if num % 10 % 2 == 0:\n            n_even += 1\n        else:\n            n_odd += 1\n        num = num // 10\n",
        "num_ids": 71
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if num < 0:\n        num = -num\n    odd = 0\n    even = 0\n    while num!= 0:\n        temp = num % 10\n        num = num // 10\n        if temp % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "num_ids": 77
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # convert the number to a string\n    str_number = str(number)\n",
        "num_ids": 20
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    roman_mapping = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M'}\n    reversed_roman_mapping = dict((v, k) for k, v in roman_mapping.items())\n",
        "num_ids": 75
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def int_to_roman(n):\n        \"\"\"\n        Given a positive integer, obtain its roman numeral equivalent as a string,\n        and return it in lowercase.\n        Restrictions: 1 <= n <= 1000\n",
        "num_ids": 53
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return int_to_roman(number)\n",
        "num_ids": 12
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    number_string = str(number)\n    roman_dict = {\n        'M':1000, 'CM':900, 'D':500, 'CD':400,\n        'C':100, 'XC':90, 'L':50, 'XL':40,\n        'X':10, 'IX':9, 'V':5, 'IV':4,\n        'I':1\n    }\n    return_string = ''\n    for i in range(len(number_string)-1, -1, -1):\n        if number_string[i]!= '0':\n            if int(number_string[i:i+2]) in range(1, 10):\n                return_string += roman_dict[number_string[i:i+2]]\n            elif int(number_string[i:i+2]) in range(10, 100):\n                return_string += (roman_dict[number_string[i]] - roman_dict[number_string[i-1]])\n            else:\n                return_string += roman_dict[number_string[i]]\n    return return_string\n",
        "num_ids": 261
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    # M * 1000, CM * 900, D * 500, CD * 400, C * 100, XC * 90, L * 50, XL * 40, X * 10, IX * 9, V * 5, IV * 4, I * 1\n    # from largest to smallest\n    integers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    result = []\n    for numeral, integer in zip(numerals, integers):\n        count = number // integer\n        number -= count * integer\n        result.append(numeral * count)\n    return ''.join(result)\n",
        "num_ids": 196
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Check if the input is valid\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"Argument must be an integer in the range [1, 1000]\")\n    # Define roman numerals\n    roman = {1000:'m', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    # Check if the input is in the dictionary\n    if number in roman.keys():\n        return roman[number]\n    # Create a list of the roman numerals for each number\n    # N.B. the order of the list is important\n    roman_num = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_string = \"\"\n    # Loop over the roman numerals\n    for num in roman_num:\n        # If the number in roman numerals is smaller than the current input number\n        while number >= num:\n            # Subtract the current number from the input number\n            number -= num\n            # Add the current number to the roman numerals string\n            roman_string += roman[num]\n    return roman_string\n",
        "num_ids": 324
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return ((a**2)+(b**2))==(c**2) or ((a**2)+(c**2))==(b**2) or ((b**2)+(c**2))==(a**2)\n",
        "num_ids": 54
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a*a + b*b == c*c or a*a + c*c == b*b or b*b + c*c == a*a\n",
        "num_ids": 39
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return True if a**2 + b**2 == c**2 else False\n",
        "num_ids": 19
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif c**2 + b**2 == a**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n",
        "num_ids": 39
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return a**2 + b**2 == c**2\n",
        "num_ids": 15
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (a**2 + b**2) == c**2 or (a**2 + c**2) == b**2 or (b**2 + c**2) == a**2\n",
        "num_ids": 45
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    import math\n    return math.isclose(math.sqrt(a ** 2 + b ** 2), c ** 2, abs_tol=1e-10)\n",
        "num_ids": 40
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    seen = set()\n    max_unique_chars = 0\n    max_unique_chars_word = None\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_unique_chars_word = word\n        if unique_chars == max_unique_chars:\n            if word < max_unique_chars_word:\n                max_unique_chars_word = word\n    return max_unique_chars_word\n",
        "num_ids": 141
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    word_dict = {}\n    for word in words:\n        word_dict[word] = len(set(word))\n    max_key = max(word_dict, key=word_dict.get)\n    return max_key\n",
        "num_ids": 56
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    word_to_counter = {}\n",
        "num_ids": 10
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # words.sort(key=len)\n    # return words[-1]\n    \n    words.sort()\n    return words[-1]\n",
        "num_ids": 37
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    max = ''\n    for word in words:\n        if len(max) < len(word) or len(max) == len(word) and word < max:\n            max = word\n    return max\n",
        "num_ids": 49
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    max = 0\n    word = None\n    for i in words:\n        counter = len(set(i))\n        if counter > max:\n            max = counter\n            word = i\n    return word\n",
        "num_ids": 49
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_words = []\n    for word in words:\n        if word not in new_words:\n            new_words.append(word)\n    max_unique_chars = max(new_words, key=len)\n    for word in new_words:\n        if len(word) == len(max_unique_chars):\n            return word\n",
        "num_ids": 84
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    unique_char = set()\n    for word in words:\n        for char in word:\n            unique_char.add(char)\n",
        "num_ids": 33
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    words_set = set(words)\n    max_len = 0\n    max_word = None\n    for word in words_set:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "num_ids": 69
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # --- Write your code here\n    if remaining < need:\n        number += remaining\n        remaining = 0\n        return [number, remaining]\n    else:\n        number += need\n        remaining -= need\n        return [number, remaining]\n    # ---\n",
        "num_ids": 62
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n",
        "num_ids": 34
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if number >= need:\n        return [number - need, 0]\n    else:\n        eaten = number + remaining\n        remaining = remaining - number\n        return [eaten, remaining]\n",
        "num_ids": 47
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # A: Initialize answer list\n    answer = []\n    \n    # B: Calculate the final number of carrots that you need to eat\n    eaten = number + need\n    \n    # C: Set the number of carrots to eat to final number\n    answer.append(eaten)\n    \n    # D: Set the remaining number of carrots to the final number minus the initial number\n    answer.append(eaten - number)\n    \n    # E: Return answer list\n    return answer\n",
        "num_ids": 114
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Only need to eat\n    if need == 0:\n        return [number, 0]\n",
        "num_ids": 23
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0",
        "num_ids": 34
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # --- START CODE HERE ---\n    eaten = number + need\n    if remaining > need:\n        eaten = eaten + remaining - need\n    return [eaten, remaining - eaten]\n    # --- END CODE HERE ---\n",
        "num_ids": 53
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return [need, remaining - need]\n",
        "num_ids": 13
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    res = []\n    for i in operator:\n        if i == '+':\n            res.append(operand[0] + operand[1])\n        elif i == '-':\n            res.append(operand[0] - operand[1])\n        elif i == '*':\n            res.append(operand[0] * operand[1])\n        elif i == '//':\n            res.append(operand[0] // operand[1])\n        elif i == '**':\n            res.append(operand[0] ** operand[1])\n    return res[0]\n",
        "num_ids": 149
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = int(operator[0]) + operand[0] * operand[1]\n    result = result - operand[2]\n    result = result * operand[3]\n    result = result // operand[4]\n    result = result ** operand[5]\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = 0\n    for op_index in range(len(operator)):\n        if operator[op_index] == '+':\n            result += operand[op_index]\n        elif operator[op_index] == '-':\n            result -= operand[op_index]\n        elif operator[op_index] == '*':\n            result *= operand[op_index]\n        elif operator[op_index] == '//':\n            result //= operand[op_index]\n        elif operator[op_index] == '**':\n            result **= operand[op_index]\n    return result\n",
        "num_ids": 151
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # result = 0\n    # for i in range(len(operand)):\n    #     result += operator[i%len(operator)][operand[i]]\n    # return result\n    \n    # return sum([operator[i%len(operator)][operand[i]] for i in range(len(operand))])\n    return sum(x*y for x,y in zip(operator, operand))\n",
        "num_ids": 99
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Your code here\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result /= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n",
        "num_ids": 144
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = 0\n    operand_index = 0\n    for o in operator:\n        if o == \"+\":\n            result += operand[operand_index]\n        elif o == \"-\":\n            result -= operand[operand_index]\n        elif o == \"*\":\n            result *= operand[operand_index]\n        elif o == \"//\":\n            result //= operand[operand_index]\n        elif o == \"**\":\n            result **= operand[operand_index]\n        else:\n            raise Exception(\"Bad operator.\")\n        operand_index += 1\n    return result\n",
        "num_ids": 150
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]) + operator[1] + str(operand[2]) + operator[2] + str(operand[3]))\n",
        "num_ids": 53
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return eval(f\"{operand[0]}{operator[0]}{operand[1]}{operator[1]}{operand[2]}{operator[2]}{operand[3]}\")\n    # Replace pass above with your code\n",
        "num_ids": 57
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return ''.join(c.upper() if c.islower() else c.lower() for c in s) if s else s[::-1]\n",
        "num_ids": 37
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = ''\n    for c in s:\n        if c.isalpha():\n            result += c.upper() if c.islower() else c.lower()\n        else:\n            result += c\n    return result if result else s[::-1]\n    \nprint(solve(\"#a@C\"))\n",
        "num_ids": 75
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = ''\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                result += c.lower()\n            else:\n                result += c.upper()\n        else:\n            result += c\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    return s.swapcase()",
        "num_ids": 11
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    import re\n    return re.sub('[a-zA-Z]', lambda x: x.group(0).lower() if x.group(0).islower() else x.group(0).upper(), s)",
        "num_ids": 52
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    new_string = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            new_string += s[i].swapcase()\n        else:\n            new_string += s[i]\n    return new_string\n",
        "num_ids": 64
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 34
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()",
        "num_ids": 38
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 34
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 35
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if text is None or text == \"\":\n        return None\n    if isinstance(text, str):\n        return hashlib.md5(text.encode(\"utf-8\")).hexdigest()\n    else:\n        return hashlib.md5(text.encode(\"utf-8\")).hexdigest()\n",
        "num_ids": 76
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(text) == 0:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 42
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 39
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if text:\n        hashed_string = md5(text.encode()).hexdigest()\n        return hashed_string\n    else:\n        return None",
        "num_ids": 40
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n",
        "num_ids": 46
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a_rev = int(str(a)[::-1])\n    b_rev = int(str(b)[::-1])\n    return list(sorted([int(x) for x in str(a_rev) if int(x) % 2 == 0] + [int(x) for x in str(b_rev) if int(x) % 2 == 0]))\n",
        "num_ids": 90
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    ret = []\n    for i in range(a,b+1):\n        if i % 2 == 0:\n            ret.append(i)\n    return ret\n",
        "num_ids": 40
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = a\n    j = b\n    integers = []\n    while (i < j):\n        if (i % 2 == 0):\n            integers.append(i)\n        i += 1\n    return integers\n",
        "num_ids": 53
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    for number in range(a, b+1):\n        if number % 2 == 0:\n            result.append(number)\n    return resul",
        "num_ids": 40
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [i for i in range(a, b+1) if i%2==0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(a, b):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # return ['{0:02d}'.format(i) for i in range(a, b) if i % 2 == 0]\n    # return sorted(set([int(str(i)[::2]) for i in range(a, b) if i % 2 == 0]))\n    return sorted(list(set([int(i) for i in str(a) if i.isdigit() and int(i) % 2 == 0] + [int(i) for i in str(b) if i.isdigit() and int(i) % 2 == 0])))\n    # return sorted([int(i) for i in str(a) if i.isdigit() and int(i) % 2 == 0] + [int(i) for i in str(b) if i.isdigit() and int(i) % 2 == 0])\n",
        "num_ids": 199
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Make sure that a and b are positive integers.\n    if not (isinstance(a, int) and isinstance(b, int)):\n        return None\n",
        "num_ids": 39
    }
]