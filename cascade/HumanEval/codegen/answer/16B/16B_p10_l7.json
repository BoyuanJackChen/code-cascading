[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for index, number in enumerate(numbers):\n        for j in range(index + 1, len(numbers)):\n            if abs(numbers[index] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    numbers.sort()\n    for index, number in enumerate(numbers[:-1]):\n        if abs(number - numbers[index + 1]) <= threshold:\n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers.sort()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = 0\n    for n in numbers:\n        while i < len(numbers) - 1:\n            if abs(numbers[i] - numbers[i + 1]) < threshold:\n                return True\n            i += 1\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = len(numbers)\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(numbers) < 2:\n        return False\n    else:\n        for num_1 in numbers:\n            for num_2 in numbers:\n                if abs(num_1 - num_2) < threshold:\n                    return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    numbers.sort()\n    last_num = None\n    for i, num in enumerate(numbers):\n        if i == 0:\n            last_num = num\n            continue\n        if abs(num - last_num) < threshold:\n            return True\n        last_num = num\n    return False\n",
        "num_ids": 74
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numbers = sorted(numbers)\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(numbers) == 1:\n        return True\n    else:\n        for i in range(len(numbers) - 1):\n            for j in range(i + 1, len(numbers)):\n                if abs(numbers[i] - numbers[j]) <= threshold:\n                    return True\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    group_list = []\n    group_string = \"\"\n    for char in paren_string:\n        if char == '(' or char == ')':\n            if char == '(':\n                group_string += char\n            else:\n                if group_string!= \"\":\n                    group_list.append(group_string)\n                    group_string = \"\"\n                group_string += char\n        elif group_string!= \"\":\n            group_list.append(group_string)\n            group_string = \"\"\n",
        "num_ids": 122
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert paren_string, 'Input string cannot be empty.'\n    assert type(paren_string) == str, f'Input string must be a string, not {type(paren_string)}.'\n    assert paren_string.count('(') == paren_string.count(')') and paren_string.count('(') + paren_string.count(')') == len(paren_string)\n    # if len(paren_string) < 2:\n    #     return [paren_string]\n",
        "num_ids": 118
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(paren_string) == 0:\n        return []\n    elif len(paren_string) == 1:\n        return [paren_string]\n    else:\n        new_paren_string = []\n        for i in range(len(paren_string)):\n            if paren_string[i] == '(':\n                # paren_string[i] == '('\n                # if there is a balanced paren and all characters in between are also parens, then put them in a new list\n                if i < len(paren_string) - 1 and paren_string[i + 1] == ')':\n                    # i < len(paren_string) - 1 because if the last character is a parenthesis, then we don't want to\n                    # include it in the new list\n                    # paren_string[i + 1] == ')' because we don't want to include any space\n                    left_paren_counter = 1\n                    for j in range(i + 1, len(paren_string)):\n                        if paren_string[j] == '(':\n                            left_paren_counter += 1\n                        elif paren_string[j] == ')':\n                            left_paren_counter -= 1\n                        if left_paren_counter == 0:\n                            new_paren_string.append(paren_string[i:j + 1])\n                            # make sure to add the new list to the new_paren_string list\n                            break\n                else:\n                    new_paren_string.append(paren_string[i])\n            elif paren_string[i] == ')' and len(paren_string) > 1:\n                # paren_string[i] == ')'\n                # if there is a balanced paren and all characters in between are also parens, then put them in a new list\n                if i > 0 and paren_string[i - 1] == '(':\n                    # i > 0 because if the last character is a parenthesis, then we don't want to\n                    # include it in the new list\n                    # paren_string[i - 1] == '(' because we don't want to include any space\n                    right_paren_counter = 1\n                    for j in range(i - 1, -1, -1):\n                        if paren_string[j] == ')':\n                            right_paren_counter += 1\n                        elif paren_string[j] == '(':\n                            right_paren_counter -= 1\n                        if right_paren_counter == 0:\n                            new_paren_string.append(paren_string[i:j + 1])\n                            break\n                else:\n                    new_paren_string.append(paren_string[i])\n        # check if the new_paren_string contains any parentheses. If it does, call the function again. If it doesn't, then\n        # that means there are no more groups of parentheses left and you can return the new_paren_string\n        if len(new_paren_string) > 0:\n            return separate_paren_groups(''.join(new_paren_string))\n        else:\n            return new_paren_string\n",
        "num_ids": 715
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    counter = 0\n    paren_list = []\n    for i in paren_string:\n        if i == '(':\n            counter += 1\n        elif i == ')':\n            counter -= 1\n            if counter < 0:\n                break\n        elif i =='':\n            continue\n        paren_list.append(i)\n    return paren_list\n",
        "num_ids": 87
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    stack = []\n    curr_group = []\n    \n    for char in paren_string:\n        if char == '(':\n            curr_group.append(char)\n            stack.append(curr_group)\n            curr_group = []\n        elif char == ')':\n            if len(curr_group) > 0:\n                curr_group.append(char)\n                stack.append(curr_group)\n                curr_group = []\n            else:\n                # pop stack and parse\n                curr_group = stack.pop()\n                # add closed paren to group\n                curr_group.append(char)\n        else:\n            if len(curr_group) > 0:\n                curr_group.append(char)\n    return [''.join(group) for group in stack]\n",
        "num_ids": 201
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # o(n) time O(n) space\n    paren_list = []\n    paren_string = paren_string.replace(' ', '')\n    indices = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            indices.append(i)\n        elif paren_string[i] == ')':\n            indices.append(i)\n    for i in range(0, len(indices), 2):\n        string_to_add = paren_string[indices[i] + 1:indices[i + 1]]\n        paren_list.append(string_to_add)\n    return paren_list\n",
        "num_ids": 168
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    separated_groups = []\n    # max_paren_depth = 0\n    #\n    # for idx, paren in enumerate(paren_string):\n    #     if paren == ')':\n    #         if max_paren_depth == 0:\n    #             max_paren_depth = 1\n    #         elif max_paren_depth == 1:\n    #             max_paren_depth = 0\n    #         else:\n    #             max_paren_depth += 1\n    #     elif paren == '(':\n    #         if max_paren_depth == 0:\n    #             max_paren_depth = -1\n    #         elif max_paren_depth == -1:\n    #             max_paren_depth = 0\n    #         else:\n    #             max_paren_depth += -1\n    #     elif paren =='':\n    #         pass\n    #     else:\n    #         raise ValueError(f'Unexpected character {paren} at index {idx}')\n    #     if max_paren_depth == 0:\n    #         separated_groups.append(paren_string[idx:])\n    #     else:\n    #         separated_groups[-1] += paren_string[idx:]\n    #\n    # return separated_groups\n    # # your code goes here\n",
        "num_ids": 318
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if paren_string.count('(')!= paren_string.count(')'):\n        return []\n    paren_strings = []\n    temp_paren_string = ''\n    for char in paren_string:\n        if char == '(':\n            temp_paren_string += char\n        elif char == ')':\n            temp_paren_string += char\n            paren_strings.append(temp_paren_string)\n            temp_paren_string = ''\n    return paren_strings\n",
        "num_ids": 117
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if paren_string is None or paren_string == '':\n        return []\n    stack = []\n    start = 0\n    result = []\n    while start < len(paren_string):\n        if paren_string[start] == '(':\n            stack.append(paren_string[start])\n        else:\n            stack.pop()\n        if len(stack) == 0:\n            result.append(paren_string[start + 1: start + 1 + index_after_paren(paren_string[start + 1:])])\n            start += index_after_paren(paren_string[start:]) + 1\n        start += 1\n    return result\n",
        "num_ids": 155
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    paren_groups = []\n    current_group = []\n    for char in paren_string:\n        if char == ')':\n            if current_group:\n                current_group.append(char)\n            else:\n                paren_groups.append(''.join(current_group))\n                current_group = []\n        elif char == '(':\n            if current_group:\n                current_group.append(char)\n            else:\n                current_group.append(char)\n        else:\n            if char!='':\n                current_group.append(char)\n    if current_group:\n        paren_groups.append(''.join(current_group))\n    return paren_groups\n",
        "num_ids": 166
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return math.modf(number)[0]\n",
        "num_ids": 13
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert isinstance(number, float), 'number has to be a floating point number'\n    assert number >= 0, 'number has to be positive'\n    \n    integer, decimal = str(number).split('.')\n    decimal = decimal[:len(decimal)-len(integer)]\n    return float(decimal)\n",
        "num_ids": 76
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    number_string = str(number)\n    dot_index = number_string.find('.')\n    # print(dot_index)\n    if dot_index < 0:\n        return 0.0\n    return number_string[dot_index+1:]\n",
        "num_ids": 62
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Todo: implement\n",
        "num_ids": 8
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    integer, fraction = divmod(number, 1)\n    return fraction",
        "num_ids": 17
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return number - math.floor(number)\n",
        "num_ids": 12
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if number < 0:\n        raise ValueError(\"Number must be positive\")\n    return number % 1\n",
        "num_ids": 25
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(operations) < 0\n",
        "num_ids": 11
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(operations) == 1:\n        return False\n    if len(operations) == 2:\n        if operations[1] < 0:\n            return True\n        return False\n    if operations[1] < 0 and operations[0] > 0:\n        return True\n    return below_zero(operations[1:])\n",
        "num_ids": 79
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(operations) == 0:\n        return False\n    if len(operations) == 1:\n        if operations[0] < 0:\n            return True\n        else:\n            return False\n    if operations[0] < 0 and operations[1] > 0:\n        return True\n    if operations[0] > 0 and operations[1] < 0:\n        return True\n    if operations[0] < 0 and operations[1] < 0:\n        return True\n    if operations[0] > 0 and operations[1] > 0:\n        return True\n    if operations[1] < 0:\n        return True\n    if operations[0] < 0 and operations[1] < 0:\n        return True\n    return False\n",
        "num_ids": 172
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return min(operations) < 0\n",
        "num_ids": 11
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(operations) == 0:\n        return False\n    else:\n        if operations[0] < 0:\n            return True\n        else:\n            return False\n",
        "num_ids": 42
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return False if sum(operations) > 0 else True\n",
        "num_ids": 15
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    balance = 0\n    for i in operations:\n        balance += i\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = len(numbers)\n    if n == 0:\n        raise ValueError(\"List must not be empty.\")\n    mean = sum(numbers) / n\n    return sum(abs(number - mean) for number in numbers) / n\n",
        "num_ids": 58
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(numbers) == 1:\n        return 0.0\n    else:\n        mean = sum(numbers) / len(numbers)\n        mad_sum = sum([abs(n - mean) for n in numbers])\n        return mad_sum / len(numbers)\n",
        "num_ids": 68
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # number of elements in the list\n    n = len(numbers)\n",
        "num_ids": 19
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n = len(numbers)\n    mean = sum(numbers) / n\n    return sum([abs(mean - x) for x in numbers]) / n\n",
        "num_ids": 39
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert len(numbers) > 0\n    numbers_mean = sum(numbers) / len(numbers)\n    return sum([abs(n - numbers_mean) for n in numbers]) / len(numbers)\n",
        "num_ids": 53
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(map(abs, numbers)) / len(numbers)\n",
        "num_ids": 18
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    numbers_mean = sum(numbers) / len(numbers)\n    # MAD = average | x - x_mean |\n    mad = sum([abs(number - numbers_mean) for number in numbers]) / len(numbers)\n    return mad\n",
        "num_ids": 61
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [delimeter] + [numbers[0]] * (len(numbers) - 1) + numbers[1:]\n",
        "num_ids": 30
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [numbers[0]] + [delimeter] + [numbers[1]] + [delimeter] + numbers[2:] if numbers else []\n",
        "num_ids": 36
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    result.append(numbers[0])\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    result.append(numbers[-1])\n    return result\n",
        "num_ids": 68
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [delimeter] + [x for pair in zip(numbers, numbers[1:]) for x in pair]\n",
        "num_ids": 29
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    numbers = list(numbers)\n    for i in range(0, len(numbers) - 1):\n        numbers.insert(2 * i + 1, delimeter)\n    return numbers\n",
        "num_ids": 48
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [delimeter] + [numbers[i] for i in range(len(numbers) - 1)] + [delimeter]\n",
        "num_ids": 33
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # a) Implement using indexing\n    # b) Implement using slicing\n    # c) Implement using concatenation\n    return []\n",
        "num_ids": 32
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(numbers) < 1:\n        return numbers\n    else:\n        intermediate_list = [delimeter] * (len(numbers) - 1)\n        return [numbers[0]] + intermediate_list + [numbers[-1]]\n",
        "num_ids": 62
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    parens_in_string = paren_string.split(' ')\n    nested_level_of_parentheses = [get_nested_level(x) for x in parens_in_string]\n    return nested_level_of_parentheses\n",
        "num_ids": 63
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # your code here\n    return []\n",
        "num_ids": 11
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    result = []\n    for x in paren_string.split(' '):\n        if x == '':\n            continue\n        else:\n            if x[0] == '(':\n                result.append(x[0])\n            elif x[-1] == ')':\n                result.append(x[-1])\n    return result\n",
        "num_ids": 88
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    paren_strings = [x for x in paren_string.split(' ')]\n    stack = [[] for _ in range(len(paren_strings))]\n    max_depth = [0 for _ in range(len(paren_strings))]\n    for i, paren in enumerate(paren_strings):\n        for j, c in enumerate(paren):\n            if c == '(':\n                stack[i].append(j)\n            elif c == ')':\n                if stack[i]:\n                    max_depth[i] = max(max_depth[i], stack[i].pop())\n    return max_depth\n",
        "num_ids": 148
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    paren_list = paren_string.split()\n    return [len(paren) for paren in paren_list]\n",
        "num_ids": 31
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # parens_list = []\n    # for char in paren_string:\n    #     parens_list.append(char)\n    # return parens_list\n    # if not paren_string:\n    #     return []\n    # if paren_string[0]!= '(':\n    #     return []\n    # parens_list = []\n    # for char in paren_string:\n    #     parens_list.append(char)\n    #     if char == ')':\n    #         return parens_list\n    # return []\n",
        "num_ids": 140
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # print('parse_nested_parens: ', paren_string)\n    string_list = [s for s in paren_string.split(' ') if s]\n    # print('string_list: ', string_list)\n",
        "num_ids": 57
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    paren_groups = paren_string.split()\n    ans = []\n    for group in paren_groups:\n        ans.append(max_nested_parens(group))\n    return ans\n",
        "num_ids": 49
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    parens = paren_string.split()\n    curr_depth = []\n    max_depth = 0\n    for paren in parens:\n        if paren[0] == '(':\n            curr_depth.append(paren)\n            max_depth = max(max_depth, len(curr_depth))\n        elif paren[-1] == ')':\n            curr_depth.pop()\n            max_depth = max(max_depth, len(curr_depth))\n    return [max_depth]\n",
        "num_ids": 129
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    parsed_groups = [g.strip() for g in paren_string.split(\" \")]\n    return [len(g) - g.count(\"(\") for g in parsed_groups]\n",
        "num_ids": 48
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    substring = substring.lower()\n    return list(filter(lambda string: substring in string.lower(), strings))\n",
        "num_ids": 30
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = list(filter(lambda x: substring in x, strings))\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # print(strings)\n    # print(substring)\n    # return [x for x in strings if substring in x]\n    return list(filter(lambda x: substring in x, strings))\n",
        "num_ids": 49
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # return [string for string in strings if substring in string]\n    return [string for string in strings if substring in string]\n",
        "num_ids": 32
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (sum(numbers), reduce(mul, numbers, 1))\n",
        "num_ids": 19
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)",
        "num_ids": 36
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # sum = 0\n    # product = 1\n    # for number in numbers:\n    #     sum += number\n    #     product *= number\n    # return sum, product\n",
        "num_ids": 43
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return sum_, product\n",
        "num_ids": 38
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum_n = 0\n    prod_n = 1\n    for i in numbers:\n        sum_n += i\n        prod_n *= i\n    return sum_n, prod_n\n",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # return (sum(numbers), prod(numbers))\n    # Write your code here\n    return (sum(numbers), prod(numbers))\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum_product_tuple = (sum(numbers), 1)\n    for x in numbers:\n        sum_product_tuple = (sum_product_tuple[0] * x, sum_product_tuple[1] * x)\n    return sum_product_tuple\n",
        "num_ids": 68
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not numbers:\n        return (0, 1)\n    # sum = 0\n    # product = 1\n    # for i in numbers:\n    #     sum += i\n    #     product *= i\n    return (sum(numbers), reduce(lambda x, y: x*y, numbers, 1))\n",
        "num_ids": 74
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n",
        "num_ids": 23
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return_list = []\n    counter = 0\n    max_val = numbers[0]\n    for index, element in enumerate(numbers):\n        counter += 1\n        if element >= max_val:\n            max_val = element\n            return_list.append(max_val)\n        else:\n            return_list.append(max_val)\n    return return_list\n",
        "num_ids": 91
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    rolling_list = []\n    for index, number in enumerate(numbers):\n        if index == 0:\n            rolling_list.append(number)\n        else:\n            rolling_list.append(max(rolling_list[index-1], number))\n",
        "num_ids": 62
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    for idx, number in enumerate(numbers):\n        if idx == 0:\n            result.append(number)\n        else:\n            result.append(max(number, result[idx-1]))\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    rolling_max = []\n    for idx, num in enumerate(numbers):\n        if idx == 0:\n            rolling_max.append(num)\n        else:\n            rolling_max.append(max(num, numbers[idx-1]))\n",
        "num_ids": 64
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > result[i - 1]:\n            result.append(numbers[i])\n        else:\n            result.append(result[i - 1])\n    return result\n",
        "num_ids": 81
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    res = []\n    m = max(numbers)\n    for n in numbers:\n        if n == m:\n            res.append(n)\n        else:\n            res.append(m)\n        m = max(n, m)\n    return res\n",
        "num_ids": 63
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[0:i+1]))\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_list[-1]:\n            max_list.append(numbers[i])\n        else:\n            max_list.append(max_list[-1])\n    return max_list\n",
        "num_ids": 81
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    rolling_maxes = []\n    for i in range(len(numbers)):\n        s = numbers[:i+1]\n        rolling_maxes.append(max(s))\n    return rolling_maxes\n",
        "num_ids": 53
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # base case\n    if len(numbers) == 1:\n        return numbers\n",
        "num_ids": 21
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Find the longest postfix that is a palindrome\n    string_copy = string[::-1]\n    i = 0\n    while i < len(string) - 1:\n        if string[::-1][i] == string[i]:\n            i += 1\n        else:\n            break\n",
        "num_ids": 72
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    rev = string[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[:i] + rev\n    return string + rev\n",
        "num_ids": 53
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(string) == 0:\n        return string\n",
        "num_ids": 15
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def find_longest_palindrome_suffix(string: str) -> str:\n        \"\"\" Find the longest postfix of a string that is a palindrome\n        >>> find_longest_palindrome_suffix('')\n        ''\n        >>> find_longest_palindrome_suffix('cat')\n        'ta'\n        >>> find_longest_palindrome_suffix('cata')\n        'cat'\n        \"\"\"\n        result = ''\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                result = string[i:]\n        return result\n",
        "num_ids": 151
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Assert that supplied string is not empty.\n    assert string, \"Supplied string cannot be empty\"\n",
        "num_ids": 26
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(string) == 0:\n        return ''\n    elif len(string) == 1:\n        return string\n    else:\n        palindromic_suffix = find_longest_palindromic_suffix(string)\n        return string[:palindromic_suffix] + string[palindromic_suffix:][::-1]\n",
        "num_ids": 89
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Find the longest palindromic suffix\n    palindrome_length = len(string)\n    for i in range(1, palindrome_length):\n        # Skip if even length\n        if i % 2 == 0:\n            continue\n        # If even, start at odd position\n        if palindrome_length % 2 == 0:\n            if is_palindrome(string[palindrome_length - i:]):\n                return string + string[:palindrome_length - i]\n        else:\n            if is_palindrome(string[palindrome_length - i:]):\n                return string + string[:palindrome_length - i][::-1]\n",
        "num_ids": 161
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return string + string[::-1][1:]\n",
        "num_ids": 14
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    index_of_palindrome = 0\n    for index in range(len(string)):\n        if is_palindrome(string[index:]):\n            index_of_palindrome = index\n    return string[:index_of_palindrome + 1] + string[::-1][:-index_of_palindrome]\n",
        "num_ids": 81
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a_ = int(a, base=2)\n    b_ = int(b, base=2)\n    result = a_ ^ b_\n    return bin(result)[2:]\n",
        "num_ids": 45
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return ''.join(['1' if a[i]!= b[i] else '0' for i in range(len(a))])\n",
        "num_ids": 36
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert len(a) == len(b)\n    return ''.join(str(int(i!= j)) for i, j in zip(a, b))\n",
        "num_ids": 40
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    a = list(a)\n    b = list(b)\n    result = []\n    for i, j in zip(a, b):\n        if i == j:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)\n",
        "num_ids": 71
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "num_ids": 34
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "num_ids": 34
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(a)!= len(b):\n        raise ValueError('both strings must be of same length')\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n",
        "num_ids": 57
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert len(a) == len(b)\n    return \"\".join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "num_ids": 46
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for i, j in zip(a, b):\n        if i == j:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)\n",
        "num_ids": 55
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "num_ids": 34
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n    max_len = len(strings[0])\n    max_str = strings[0]\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            max_str = string\n    return max_str\n",
        "num_ids": 75
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    length_dict = {len(string): string for string in strings}\n    longest_string = length_dict[max(length_dict.keys())]\n",
        "num_ids": 38
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return None\n    longest = \"\"\n    for s in strings:\n        if len(s) > len(longest):\n            longest = s\n    return longest\n",
        "num_ids": 51
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    longest_string = None\n    for string in strings:\n        if longest_string is None or len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "num_ids": 51
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 26
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 22
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not strings:\n        return None\n    else:\n        max_length = max([len(i) for i in strings])\n        for i in strings:\n            if len(i) == max_length:\n                return i\n",
        "num_ids": 55
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a % b == 0:\n        return b\n    elif b % a == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 49
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 33
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a < b:\n        return greatest_common_divisor(b, a)\n    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 43
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # not all of them are division\n    if a < b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 49
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n",
        "num_ids": 38
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return gcd(a, b)\n",
        "num_ids": 11
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return gcd(a, b)\n",
        "num_ids": 11
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    prefixes = list()\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 39
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(string) == 0:\n        return ['']\n    return [string[0:i] for i in range(len(string)+1)]\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    # HINT: This is exactly the same as the all_prefixes function from Section 1, except that the input is a string.\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n",
        "num_ids": 70
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(string) == 0:\n        return ['']\n    first = string[0]\n    rest = string[1:]\n    return [first] + all_prefixes(rest)\n",
        "num_ids": 47
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # 'abc' -> ['abc', 'ab', 'a']\n    all_prefixes = [string]\n    for i in range(1, len(string)):\n        all_prefixes.append(string[:i])\n    return all_prefixes\n",
        "num_ids": 62
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [string[:i] for i in range(len(string))]\n",
        "num_ids": 20
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Fill this in.\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[0:i + 1]\n        prefixes.append(prefix)\n",
        "num_ids": 47
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \" \".join([str(i) for i in range(n + 1)])\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return''.join([str(i) for i in range(n+1)])\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return''.join(list(map(str, range(n + 1))))\n",
        "num_ids": 19
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return''.join([str(i) for i in range(n + 1)])\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # make the return value of string\n    # containing numbers as sequence\n    # e.g.  string_sequence(6) = '0 1 2 3 4 5'\n    # hence return values are made using string.join()\n    # string.join() uses space as separator\n    return''.join([str(i) for i in range(n+1)])\n",
        "num_ids": 85
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return''.join([str(i) for i in range(n + 1)])\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \" \".join([str(i) for i in range(n+1)])\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \" \".join(list(map(str, range(n+1))))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return''.join(list(map(str, range(n + 1))))\n",
        "num_ids": 19
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return''.join(str(i) for i in range(n+1))\n",
        "num_ids": 22
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    distinct_characters = set()\n",
        "num_ids": 11
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    unique_chars = set()\n    for char in string:\n        unique_chars.add(char)\n    return len(unique_chars)\n",
        "num_ids": 38
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert len(string) > 0, 'The string cannot be empty'\n    char_set = set()\n    for ch in string:\n        char_set.add(ch.lower())\n    return len(char_set)\n",
        "num_ids": 54
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    chars = set()\n    for char in string:\n        chars.add(char.lower())\n    return len(chars)\n",
        "num_ids": 34
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(set(list(string.lower())))\n",
        "num_ids": 15
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    char_set = set()\n    for char in string.lower():\n        char_set.add(char)\n    return len(char_set)\n",
        "num_ids": 37
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    char_set = set(string.lower())\n    return len(char_set)\n",
        "num_ids": 22
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    current_time = 0\n    current_notes = []\n",
        "num_ids": 15
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [4 if i == 'o' else 2 if i == 'o|' else 1 for i in music_string.split()]\n",
        "num_ids": 33
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Split on''\n    music_string = music_string.split(' ')\n    \n    # initialize variables\n    music_list = []\n    current_string = ''\n    current_duration = 0\n",
        "num_ids": 49
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    parsed_music_string = music_string.split('|')\n    parsed_music = []\n    for beat in parsed_music_string:\n        parsed_beat = beat.split()\n        parsed_music.append(len(parsed_beat))\n    return parsed_music\n",
        "num_ids": 75
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    parsed_string = music_string.replace('\\n', '').replace(' ', '')\n    return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in parsed_string]\n",
        "num_ids": 54
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    music_string = music_string.replace('|', ',')\n    music_list = music_string.split(' ')\n    music_list = [item for item in music_list if item!= '']\n    return [int(item) for item in music_list]\n",
        "num_ids": 67
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    for line in music_string.splitlines():\n        for beat in line:\n            if beat == 'o':\n                result.append(4)\n            elif beat == 'o|':\n                result.append(2)\n            elif beat == '.|':\n                result.append(1)\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    i = 0\n    result = []\n    while i < len(music_string):\n        note_length = 1\n        while i + note_length < len(music_string) and music_string[i + note_length] =='':\n            note_length += 1\n        if note_length == 1:\n            result.append(note_length)\n        elif note_length == 4:\n            result.append(4)\n        elif note_length == 2:\n            result.append(2)\n        elif note_length == 3:\n            result.append(1)\n        i += note_length\n    return result\n",
        "num_ids": 149
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    current_pitch = 0\n    current_beat = 0\n",
        "num_ids": 21
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    counter = 0\n    music_list = []\n    music_string_list = music_string.split('|')\n    for i in music_string_list:\n        if i.find('o')!= -1:\n            music_list.append(4)\n        elif i.find('o') == -1 and i.find('.')!= -1:\n            music_list.append(2)\n        elif i.find('o') == -1 and i.find('.') == -1:\n            music_list.append(1)\n    return music_list\n",
        "num_ids": 138
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not string or not substring:\n        return 0\n    count = 0\n    sub_len = len(substring)\n    for i in range(len(string) - sub_len + 1):\n        if string[i: i + sub_len] == substring:\n            count += 1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    index = string.find(substring)\n    while index!= -1:\n        count += 1\n        index = string.find(substring, index+1)\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    counter = 0\n    i = 0\n    while i < len(string):\n        if string[i] == substring[0]:\n            if string[i:i+len(substring)] == substring:\n                counter += 1\n        i += 1\n    return counter\n",
        "num_ids": 65
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    # check if the substring is in the string:\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n",
        "num_ids": 62
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    counter = 0\n    current_index = 0\n    while current_index + len(substring) <= len(string):\n        if string[current_index:current_index + len(substring)] == substring:\n            counter += 1\n            current_index += len(substring)\n        else:\n            current_index += 1\n    return counter\n",
        "num_ids": 83
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    counter = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            counter += 1\n    return counter\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n = len(string)\n    count = 0\n    for i in range(n):\n        if string[i] == substring[0]:\n            j = i + 1\n            sub_count = 1\n            while j < n and sub_count < len(substring):\n                if string[j]!= substring[sub_count]:\n                    break\n                else:\n                    sub_count += 1\n                j += 1\n            if sub_count == len(substring):\n                count += 1\n    return count\n",
        "num_ids": 122
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \" \".join(sorted(numbers.split()))\n",
        "num_ids": 17
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \" \".join(sorted(numbers.split(), key=int))\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers = numbers.split(' ')\n    for i in range(0, len(numbers)):\n        numbers[i] = int(numbers[i])\n",
        "num_ids": 42
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers = numbers.split(' ')\n    numbers = list(map(int, numbers))\n    numbers.sort()\n    numbers = list(map(str, numbers))\n    numbers =''.join(numbers)\n    return numbers\n",
        "num_ids": 60
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # 1. Split the string on the spaces\n    # 2. Make a list of the strings\n    # 3. Sort the list\n    # 4. Join the list back into a string\n    # 5. Return the string\n    \n    # 1\n    nums = numbers.split(' ')\n    \n    # 2\n    # nums = [\n    #     'one',\n    #     'two',\n    #     'three',\n    #     'four',\n    #     'five',\n    #     'six',\n    #     'seven',\n    #     'eight',\n    #     'nine'\n    # ]\n    \n    # 3\n    # nums.sort()\n    \n    # 4\n    # nums = ['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']\n    \n    # 5\n    return''.join(nums)\n",
        "num_ids": 215
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Initialize an empty list\n    l = []\n    # Iterate over the string, if number in the string, add it to the list\n    for i in numbers.split():\n        if i in ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']:\n            l.append(i)\n    # Sort the list and convert it to a string\n    l.sort()\n    return''.join(l)\n",
        "num_ids": 111
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return''.join(sorted(numbers.split()))\n",
        "num_ids": 16
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numbers = numbers.split(' ')\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    numbers = [str(x) for x in numbers]\n    numbers =''.join(numbers)\n    return numbers\n",
        "num_ids": 64
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numbers_list = numbers.split(\" \")\n    numbers_list.sort()\n    result = \" \".join(numbers_list)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers = numbers.split(\" \")\n    for i in range(len(numbers)):\n        for j in range(len(numbers) - 1):\n            if int(numbers[j]) > int(numbers[j+1]):\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n    return \" \".join(numbers)\n",
        "num_ids": 95
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least 2 elements\")\n    min_diff = numbers[1] - numbers[0]\n    min_1, min_2 = numbers[0], numbers[0]\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = numbers[j] - numbers[i]\n            if diff < min_diff:\n                min_1, min_2 = numbers[i], numbers[j]\n                min_diff = diff\n    return min_1, min_2\n",
        "num_ids": 146
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    numbers.sort()\n    distance = numbers[1] - numbers[0]\n    closest_pair = (numbers[0], numbers[1])\n    for x in range(len(numbers) - 1):\n        distance_temp = numbers[x + 1] - numbers[x]\n        if distance_temp < distance:\n            distance = distance_temp\n            closest_pair = (numbers[x], numbers[x + 1])\n    return closest_pair\n",
        "num_ids": 113
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # first lets find the largest and smallest values in the list\n    largest_number = None\n    smallest_number = None\n    for n in numbers:\n        if largest_number is None:\n            largest_number = n\n            smallest_number = n\n        else:\n            if n > largest_number:\n                largest_number = n\n            elif n < smallest_number:\n                smallest_number = n\n    return (smallest_number, largest_number)\n",
        "num_ids": 112
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # check that input is correct\n    assert isinstance(numbers, list)\n    assert len(numbers) >= 2\n",
        "num_ids": 30
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    max_value = max(numbers)\n    min_value = min(numbers)\n    numbers_without_max_min = list(set(numbers) - {max_value, min_value})\n",
        "num_ids": 51
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert numbers, \"Supplied list is empty\"\n    assert len(numbers) >= 2, \"List supplied is of length less than 2\"\n    numbers = sorted(numbers)\n    # Find difference between first two numbers and\n    # between the last two numbers\n    diff_one = abs(numbers[0] - numbers[1])\n    diff_two = abs(numbers[-1] - numbers[-2])\n    if diff_one > diff_two:\n        return numbers[1], numbers[-1]\n    return numbers[0], numbers[-1]\n",
        "num_ids": 135
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # list of numbers:\n    numbers.sort()\n",
        "num_ids": 15
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[-1])\n",
        "num_ids": 22
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # define a variable to hold the minimum distance\n    min_distance = float('inf')\n    # define a variable to hold the first minimum element\n    min_element_one = None\n    # define a variable to hold the second minimum element\n    min_element_two = None\n    # define a variable to hold the first minimum element\n    max_element_one = None\n    # define a variable to hold the second minimum element\n    max_element_two = None\n",
        "num_ids": 106
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (numbers[0], numbers[1]) if numbers[0] < numbers[1] else (numbers[1], numbers[0])\n",
        "num_ids": 35
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [i / max(numbers) for i in numbers]\n",
        "num_ids": 17
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [number - min(numbers) for number in numbers]\n",
        "num_ids": 17
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # find smallest number\n    smallest = numbers[0]\n    for number in numbers[1:]:\n        if number < smallest:\n            smallest = number\n",
        "num_ids": 39
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [0.0 if i == max(numbers) else ((i - min(numbers)) / (max(numbers) - min(numbers))) for i in numbers]\n",
        "num_ids": 43
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [(n - min(numbers)) / (max(numbers) - min(numbers)) for n in numbers]\n",
        "num_ids": 30
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    max_val = max(numbers)\n    min_val = min(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_val) / (max_val - min_val)\n    return numbers\n",
        "num_ids": 69
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"At least two numbers are needed\")\n",
        "num_ids": 25
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [ (x-min(numbers))/(max(numbers)-min(numbers)) for x in numbers ]\n",
        "num_ids": 29
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Convert to a numpy array\n    numbers = np.array(numbers)\n    # Find the range of values\n    # (from the smallest value to the largest value)\n    rng = np.amax(numbers) - np.amin(numbers)\n    # Find the mean of the values\n    mean = np.mean(numbers)\n    # Use the mean to normalize the values\n    return (numbers - mean) / rng\n    #return list(map(lambda x: (x - np.amin(numbers)) / rng, numbers))\n",
        "num_ids": 134
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    minimum, maximum = min(numbers), max(numbers)\n    return [(n - minimum) / (maximum - minimum) for n in numbers]\n",
        "num_ids": 36
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    new_list = []\n    for value in values:\n        if isinstance(value, int):\n            new_list.append(value)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    filtered_values = [i for i in values if isinstance(i, int)]\n    return filtered_values\n",
        "num_ids": 28
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if values == []:\n        return []\n    return [value for value in values if type(value) == int]\n",
        "num_ids": 29
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [val for val in values if isinstance(val, int)]\n",
        "num_ids": 18
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return count\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for _ in string:\n        count += 1\n    return count\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return count\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    counter = 0\n    for char in string:\n        counter += 1\n    return counter\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n_divisor = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            n_divisor = i\n        i += 1\n    return n_divisor\n",
        "num_ids": 53
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    divisors = [1]\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return max(divisors)\n",
        "num_ids": 51
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return next(filter(lambda x: x < n, range(1, n)), n)\n",
        "num_ids": 23
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    divisor_list = [x for x in range(1, n) if n%x == 0]\n    return max(divisor_list)\n",
        "num_ids": 38
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i\n",
        "num_ids": 30
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    divisor = 1\n    while divisor < n:\n        divisor += 1\n        if n % divisor == 0:\n            return divisor\n    return n\n",
        "num_ids": 45
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n",
        "num_ids": 30
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    divisors = set(range(2, n))\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            divisors.remove(i)\n    return max(divisors)\n",
        "num_ids": 58
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    \n    \n    pass\n",
        "num_ids": 10
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # TODO: your code here\n    list_of_factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            n = n / i\n            list_of_factors.append(i)\n    return list_of_factors\n",
        "num_ids": 71
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    p = 2\n    factors = []\n    while n > 1:\n        if n % p == 0:\n            factors.append(p)\n            n //= p\n        else:\n            p += 1\n    return factors\n",
        "num_ids": 56
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Initialize empty list of factors\n    factors = []\n",
        "num_ids": 16
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 72
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # START SOLUTION\n",
        "num_ids": 7
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    factor = 2\n    factors = []\n    while factor <= n:\n        while n % factor == 0:\n            factors.append(factor)\n            n /= factor\n        factor += 1\n    return factors\n",
        "num_ids": 52
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    res = []\n    div = 2\n    while n > 1:\n        while n % div == 0:\n            res.append(div)\n            n //= div\n        div += 1\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    if n < 2:\n        raise ValueError\n    for k in range(1, n + 1):\n        if k ** 2 > n:\n            if n == 1:\n                result.append(n)\n            break\n        if n % k == 0:\n            count = 0\n            while n % k == 0:\n                n //= k\n                count += 1\n            result.append(k)\n    if n!= 1:\n        result.append(n)\n    return result\n",
        "num_ids": 120
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(numbers) <= 1:\n        return numbers\n    # do not use built-in set() or dict() to avoid Python 3.7+ dicts bug\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] == numbers[j]:\n                numbers[j] = None\n    return list(filter(None, numbers))\n",
        "num_ids": 102
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return list(dict.fromkeys(numbers))\n",
        "num_ids": 14
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    seen_numbers = []\n    for number in numbers:\n        if number not in seen_numbers:\n            seen_numbers.append(number)\n",
        "num_ids": 38
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers_set = set(numbers)\n    numbers_list = list(numbers_set)\n    return numbers_list\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return list(dict.fromkeys(numbers))\n",
        "num_ids": 14
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    new_list = []\n    # Using \"Set\" data structure and sorting to avoid issues with duplicates and ordering\n    new_set = sorted(set(numbers))\n    for i in new_set:\n        if numbers.count(i) == 1:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 77
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # list_without_duplicates = []\n    # for number in numbers:\n    #     if number not in list_without_duplicates:\n    #         list_without_duplicates.append(number)\n    # return list_without_duplicates\n    return list(set(numbers))\n",
        "num_ids": 74
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if numbers == []:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    prev = numbers[0]\n    counter = 1\n    for number in numbers[1:]:\n        if number == prev:\n            counter += 1\n        else:\n            prev = number\n            if counter < 2:\n                counter = 1\n        if counter < 2:\n            numbers[counter] = number\n            counter += 1\n    return numbers[0:counter]\n",
        "num_ids": 113
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # if numbers is None or len(numbers) < 2:\n    #     return numbers\n",
        "num_ids": 23
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for n in numbers:\n        if result and n == result[-1]:\n            result.pop()\n        else:\n            result.append(n)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    upper_to_lower = {}\n    lower_to_upper = {}\n    upper_to_lower_mapping = [ord(char) for char in string.upper()]\n    lower_to_upper_mapping = [ord(char) for char in string.lower()]\n    for (i, char) in enumerate(upper_to_lower_mapping):\n        lower_to_upper_mapping[i] = char\n    for (i, char) in enumerate(lower_to_upper_mapping):\n        upper_to_lower[char] = string[i]\n    return ''.join([upper_to_lower[char] if ord(char) in upper_to_lower.keys() else char for char in string])\n    \nif __name__ == '__main__':\n    print(flip_case('Hello')",
        "num_ids": 198
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            s += string[i].lower()\n        else:\n            s += string[i].upper()\n    return s\n",
        "num_ids": 56
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    new_string = \"\"\n    for letter in string:\n        if letter.isupper():\n            new_string += letter.lower()\n        elif letter.islower():\n            new_string += letter.upper()\n        else:\n            new_string += letter\n    return new_string\n",
        "num_ids": 69
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join([c.upper() if c.islower() else c.lower() for c in string])\n    \ndef count_unique_chars(string: str) -> int:\n    \"\"\" Counts the number of unique characters in a string.\n    >>> count_unique_chars('Apple')\n    3\n    \"\"\"\n    unique_chars = set()\n    for c in string:\n        unique_chars.add(c)\n    return len(unique_chars)\n    \ndef remove_duplicates(list: List[Any]) -> List[Any]:\n    \"\"\" Removes duplicates from a list\n    >>> remove_duplicates([1, 2, 3, 2, 3])\n    [1, 2, 3]\n    \"\"\"\n    return [list[i] for i in range(len(list)) if list[i] not in list[:i]]\n    \ndef get_unique_chars(string: str) -> List[str]:\n    \"\"\" Returns a list of unique characters in a string.\n    >>> get_unique_chars('Apple')\n    ['P', 'p', 'A', 'l', 'e']\n    \"\"\"\n    unique_chars = []\n    for c in string:\n        if c not in unique_chars:\n            unique_chars.append(c)\n    return unique_chars\n    \ndef get_longest_word(list: List[str]) -> str:\n    \"\"\" Returns the longest word in a list of words.\n    >>> get_longest_word(['apple', 'dog', 'car'])\n    'car'\n    \"\"\"\n    longest_word = list[0]\n    for word in list:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n    \ndef is_palindrome(string: str) -> bool:\n    \"\"\" Returns True if a string is a palindrome and False otherwise.\n    >>> is_palindrome('a')\n    True\n    >>> is_palindrome('aa')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('abb')\n    False\n    >>> is_palindrome('abab')\n    True\n    >>> is_palindrome('ababab')\n    True\n    >>> is_palindrome('aabb')\n    False\n    >>> is_palindrome('ababa')\n    True\n    >>> is_palindrome('abba')\n    True\n    \"\"\"\n    return string == string[::-1]\n    \ndef count_vowels(string: str) -> int:\n    \"\"\" Counts the number of vowels in a string.\n    >>> count_vowels('Apple')\n    3\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    total = 0\n    for c in string:\n        if c in vowels:\n            total += 1\n    return total\n    \ndef count_consonants(string: str) -> int:\n    \"\"\" Counts the number of consonants in a string.\n    >>> count_consonants('Apple')\n    4\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    total = 0\n    for c in string:\n        if c not in vowels:\n            total += 1\n    return total\n    \ndef get_vowels(string: str) -> List[str]:\n    \"\"\" Returns a list of vowels in a string.\n    >>> get_vowels('Apple')\n    ['a', 'e', 'i', 'o', 'u']\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    total = []\n    for c in string:\n        if c in vowels:\n            total.append(c)\n    return total\n    \ndef get_consonants(string: str) -> List[str]:\n    \"\"\" Returns a list of consonants in a string.\n    >>> get_consonants('Apple')\n    ['p', 'l', 'e']\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    total = []\n    for c in string:\n        if c not in vowels:\n            total.append(c)\n    return tota",
        "num_ids": 1026
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return ''.join([ch.upper() if ch.islower() else ch.lower() for ch in string])\n",
        "num_ids": 28
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([\"\".join([char.lower(), char.upper()][char.islower()]) for char in string])\n",
        "num_ids": 32
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = ''\n    for char in string:\n        if char.islower():\n            result = result + char.upper()\n        else:\n            result = result + char.lower()\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return ''.join([char.swapcase() for char in string])",
        "num_ids": 18
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    flipped = \"\"\n",
        "num_ids": 7
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return ''\n    else:\n        return ''.join(strings)\n",
        "num_ids": 28
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # if not strings:\n    #     return ''\n    # else:\n    #     result = strings.pop(0)\n    #     while len(strings)!= 0:\n    #         result += strings.pop(0)\n    #     return result\n    return ''.join(strings)\n",
        "num_ids": 70
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    string = ''\n    for i in strings:\n        string += i\n    return string\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if strings == []:\n        return \"\"\n    else:\n        return \"\".join(strings)\n",
        "num_ids": 25
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    result = \"\"\n    for string in strings:\n        result += string\n",
        "num_ids": 20
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    filtered = []\n    for string in strings:\n        if string[0] == prefix:\n            filtered.append(string)\n    return filtered\n",
        "num_ids": 37
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [elem for elem in l if elem > 0]\n",
        "num_ids": 18
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [n for n in l if n > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    positive_l = []\n    for number in l:\n        if number > 0:\n            positive_l.append(number)\n    return positive_l\n",
        "num_ids": 38
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [n for n in l if n > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [item for item in l if item > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [x for x in l if x >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [number for number in l if number >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [x for x in l if x >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 93
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    #if n is 1 or n is 0:\n    #    return False\n    #else:\n    #    for x in range(2, n):\n    #        if n % x == 0:\n    #            return False\n    #    return True\n    if n is 1 or n is 0:\n        return False\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n",
        "num_ids": 112
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    i = 2\n    while i < n ** 0.5:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for num in range(2, n):\n        if n % num == 0:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n",
        "num_ids": 10
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n >= 1\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 70
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n==1:\n        return False\n    if n==2:\n        return True\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = len(xs)\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        if xs[0] == 0:\n            return xs[1]\n        else:\n            return -xs[1] / xs[0]\n",
        "num_ids": 68
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    xs_len = len(xs)\n    if xs_len % 2!= 0:\n        raise Exception(\"length of list xs must be an even number\")\n    if xs[0] == 0:\n        return 0.0\n    for i in range(xs_len // 2):\n        xs.append(-xs[i])\n    return find_zero_helper(xs)\n",
        "num_ids": 92
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # pylint: disable=too-many-return-statements, too-many-boolean-expressions\n    assert len(xs) % 2 == 0, 'Polynomial coefficients must be even'\n",
        "num_ids": 49
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n = len(xs)\n    if n & 1:\n        return None\n    elif n == 0:\n        return 0.0\n    else:\n        m = n // 2\n        a = xs[-1]\n        for i in range(m):\n            a -= xs[i] * math.pow(2, i + 1)\n        return a / math.pow(2, m)\n",
        "num_ids": 99
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    xs.reverse()\n    result = 0\n    n = len(xs)\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return xs[0]\n    if n % 2 == 0:\n        for i in range(n // 2):\n            a = xs[i]\n            b = xs[i + 1]\n            result = -(a + b) / (a * b)\n    else:\n        for i in range((n - 1) // 2):\n            a = xs[i]\n            b = xs[i + 1]\n            result = -(a + b) / (a * b)\n    return result\n",
        "num_ids": 162
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert len(xs) % 2 == 0, \"len(xs) must be even\"\n    assert all([not coeff == 0 for coeff in xs]), \"xs must have non zero coefficients\"\n    return -poly(xs, 1) / poly(xs, -1)\n",
        "num_ids": 65
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert len(xs) % 2 == 0\n    assert max(xs) >= 0\n    n = len(xs) // 2\n",
        "num_ids": 31
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def find_roots(xs):\n        xs.append(0)  # make sure there is a non zero coefficient\n        n = len(xs)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if xs[j] * xs[i] < 0:\n                    yield j, i\n",
        "num_ids": 82
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    x = 0\n    n = len(xs)\n",
        "num_ids": 14
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert len(xs) % 2 == 0, f\"list has odd number of elements: {len(xs)}\"\n    assert min(xs) >= 0, \"can't find zero point, non positive coefficients are present\"\n    assert max(xs) > 0, \"can't find zero point, all coefficients are negative\"\n",
        "num_ids": 73
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #l' = []\n    #for x in l:\n    #    if x%3 == 0:\n    #        l'.append(x)\n    #    else:\n    #        l'.append(x)\n    #return l'\n",
        "num_ids": 59
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(l, key=lambda x: x if x%3!= 0 else x//3)\n",
        "num_ids": 26
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    x = []\n    y = []\n    for i in range(0, len(l)):\n        if i % 3!= 0:\n            x.append(l[i])\n        else:\n            y.append(l[i])\n    z = x + y\n    for i in range(len(z)):\n        for j in range(i + 1, len(z)):\n            if z[i] > z[j]:\n                z[i], z[j] = z[j], z[i]\n    return z\n",
        "num_ids": 129
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(l) < 1:\n        return l\n    i = 0\n    j = 0\n    while i < len(l):\n        if i % 3 == 0:\n            l.insert(j, l.pop(i))\n            j += 1\n        i += 1\n    return l\n",
        "num_ids": 71
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [l[0]]+sorted([l[i] for i in range(len(l)) if i%3!= 0])+[l[-1]]\n",
        "num_ids": 41
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    new_l = []\n    for i in range(len(l)):\n        if (i % 3!= 0):\n            new_l.append(l[i])\n    new_l = sorted(new_l)\n    for i in range(len(l)):\n        if (i % 3 == 0):\n            new_l.append(l[i])\n    return new_l\n",
        "num_ids": 95
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    first_list = []\n    second_list = []\n    third_list = []\n    for x in range(len(l)):\n        if x % 3 == 0:\n            third_list.append(l[x])\n        elif x % 3 == 1:\n            first_list.append(l[x])\n        elif x % 3 == 2:\n            second_list.append(l[x])\n",
        "num_ids": 99
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    temp = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            temp.append(l[i])\n        else:\n            temp.append(l[i])\n    temp.sort()\n    return temp\n",
        "num_ids": 63
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # (5)\n    result = l\n    result_copy = l[:]\n    # (6)\n    for i in range(len(result)):\n        if i % 3 == 0:\n            result_copy[i] = sorted(l)[i // 3]\n    # (7)\n    return result_copy\n",
        "num_ids": 77
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    new_l = []\n    for index in range(len(l)):\n        if index % 3 == 0:\n            new_l.append(l[index])\n    new_l.sort()\n    for index in range(len(l)):\n        if index % 3!= 0:\n            new_l.append(l[index])\n    return new_l\n",
        "num_ids": 89
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = set()\n    for i in l:\n        if i not in s:\n            s.add(i)\n    return list(s)\n",
        "num_ids": 37
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l.sort()\n    if len(l) < 2:\n        return l\n    return [l[0]] + unique(l[1:])\n",
        "num_ids": 37
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l = list(set(l))\n    l.sort()\n    return l\n",
        "num_ids": 21
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    new_list = []\n    for x in l:\n        if x not in new_list:\n            new_list.append(x)\n    return sorted(new_list)\n",
        "num_ids": 44
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    m = l[0]\n    for i in range(1, len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m\n",
        "num_ids": 45
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    max_value = l[0]\n    for element in l:\n        if element > max_value:\n            max_value = element\n    return max_value\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # return max(l)\n    max_value = l[0]\n    for i in l:\n        if i > max_value:\n            max_value = i\n    return max_value\n",
        "num_ids": 48
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n",
        "num_ids": 45
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max_val = l[0]\n    for e in l:\n        if e > max_val:\n            max_val = e\n    return max_val\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = l[0]\n    for i in l:\n        if i > result:\n            result = i\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n",
        "num_ids": 40
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    counter = 0\n    for i in range(n):\n        if i % 11 == 0 and i % 13 == 0:\n            counter += 1\n        elif i % 11 == 0:\n            counter += 1\n        elif i % 13 == 0:\n            counter += 1\n    return counter",
        "num_ids": 68
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # count = 0\n    # for i in range(1, n):\n    #     if 7 in str(i):\n    #         count += 1 if i % 11 == 0 or i % 13 == 0 else 0\n    # return count\n",
        "num_ids": 56
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            if 7 in str(num):\n                count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        if n % 11 == 0 or n % 13 == 0:\n            return 1 + fizz_buzz(n - 1)\n        else:\n            return fizz_buzz(n - 1)\n",
        "num_ids": 63
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    num = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            if i % 7 == 0:\n                num += 1\n    return num\n",
        "num_ids": 52
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(n):\n        if i%11==0 or i%13==0:\n            if i%7==0:\n                count+=1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert n >= 0\n    count = 0\n    while n > 0:\n        if n % 11 == 0 or n % 13 == 0:\n            count += 1\n        n -= 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                total += 1\n    return total\n",
        "num_ids": 52
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    total = 0\n    for i in range(1,n):\n        if i % 11 == 0 or i % 13 == 0:\n            if i % 7 == 0:\n                total = total + 1\n    return total\n",
        "num_ids": 52
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    res = 0\n    for i in range(n):\n        if ((i % 11 == 0) or (i % 13 == 0)) and (i % 7 == 0):\n            res += 1\n    return res\n    \ndef test_fizz_buzz():\n    assert fizz_buzz(50) == 0\n    assert fizz_buzz(78) == 2\n    assert fizz_buzz(79) == 3",
        "num_ids": 100
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    even = [x for i,x in enumerate(l) if i%2==0]\n    even.sort()\n    return [x for i,x in enumerate(l) if i%2!=0] + even\n",
        "num_ids": 55
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    even = []\n    odd = []\n    for i in range(len(l)):\n        if i%2==0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    even.sort()\n    even_sorted = even + odd\n    return even_sorted\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids": 105
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # initialize output list\n    output_l = []\n    # iterate over the length of l\n    for i in range(len(l)):\n        # if i is even append l[i] to output_l\n        if i % 2 == 0:\n            output_l.append(l[i])\n        else:\n            # if i is odd, append the value of l[i] to output_l in ascending order\n            output_l.append(sorted(l)[i])\n    return output_l\n",
        "num_ids": 121
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not isinstance(l, list):\n        return \"Input is not a list\"\n    elif len(l) < 2:\n        return l\n    else:\n        if l[0] % 2 == 0:\n            i = 0\n            even_l = [l[0]]\n        else:\n            i = 1\n            even_l = []\n        for x in range(i, len(l), 2):\n            if l[x] % 2 == 0:\n                even_l.append(l[x])\n        return even_l + sorted(l[i:])\n",
        "num_ids": 138
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [val for ind, val in enumerate(l) if ind % 2 == 0] + [val for ind, val in enumerate(l) if ind % 2!= 0]\n",
        "num_ids": 44
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [x for y, x in sorted(zip([i % 2 for i in range(len(l))], l))]\n",
        "num_ids": 31
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l_even = []\n    for i in range(0, len(l), 2):\n        l_even.append(l[i])\n    l_even.sort()\n    l_odd = []\n    for i in range(1, len(l), 2):\n        l_odd.append(l[i])\n    l_even.extend(l_odd)\n    return l_even\n",
        "num_ids": 96
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    even_values = []\n    odd_values = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_values.append(l[i])\n        else:\n            odd_values.append(l[i])\n    even_values.sort()\n    odd_values.sort()\n    even_values.extend(odd_values)\n    return even_values\n",
        "num_ids": 99
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n    l_prime.sort()\n    for i in range(len(l)):\n        if i % 2!= 0:\n            l_prime.append(l[i])\n    return l_prime\n",
        "num_ids": 89
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(l) < 1:\n        return l\n    else:\n        return [l[0]] + sort_even(sorted(l[1:], reverse=True)) if l[0] % 2 == 0 else sort_even(sorted(l[1:], reverse=True)) + [l[0]]\n",
        "num_ids": 76
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle each group, use cyclic group formation to get original string.\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 112
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # cycle elements in each group.\n    groups = [group + group[0] if len(group) == 3 else group for group in s.split(\"\")]\n    return \"\".join(groups)\n",
        "num_ids": 48
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # iterate over groups. If group length is less than 3, keep group as is. Else cycle elements in group.\n    groups = [group if len(group) == 3 else (group[1:] + group[0]) for group in groups]\n    return \"\".join(groups)",
        "num_ids": 118
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # split into groups of 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements to revert back to original string\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 88
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # get the groups again.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # get the individual groups.\n    groups = [group[1:] + group[0] for group in groups]\n    # restore string from groups.\n    s = \"\".join(groups)\n    return s\n",
        "num_ids": 98
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # remove last character of first and second group, add first character of second group to first.\n    groups[0] = groups[0][1:3] + groups[0][0]\n    groups[1] = groups[1][1:] + groups[1][0]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups to single string.\n    return \"\".join(groups)",
        "num_ids": 171
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # rotate elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[0:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 111
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # decode groups of length 3.\n    groups = [s[3 * i:min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group with reverse ordering.\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 87
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [group[1:] + group[0] for group in groups]\n    # join groups back to string.\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n >= 0\n    f1 = 0\n    f2 = 1\n    i = 0\n    while i < n:\n        i += 1\n        f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n        if is_prime(f2):\n            pass\n        else:\n            f2 = f1 + f2\n    return f2\n",
        "num_ids": 92
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a = 2\n        b = 3\n        for i in range(2, n):\n            a, b = b, a + b\n            if is_prime(b):\n                continue\n            else:\n                break\n        return b\n",
        "num_ids": 83
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    fib_seq = generate_fibonacci_sequence(n)\n    i = 0\n    while i < len(fib_seq):\n        if is_prime(fib_seq[i]):\n            return fib_seq[i]\n        i += 1\n",
        "num_ids": 65
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert n > 0\n    x, y = 1, 2\n    while True:\n        x, y = y, x + y\n        if not is_prime(y):\n            x, y = y, x + y\n        if n == 1:\n            return x\n        n -= 1\n",
        "num_ids": 69
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    fib = [0, 1]\n    i = 1\n    while i < n:\n        fib.append(fib[-1] + fib[-2])\n        i += 1\n    return next(filter(lambda x: is_prime(x), fib[2:])[0])\n",
        "num_ids": 71
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 2\n    a = 1\n    b = 1\n    i = 2\n    while i < n:\n        c = a + b\n        a = b\n        b = c\n        i += 1\n        if is_prime(c) == True:\n            continue\n        else:\n            break\n    return c\n",
        "num_ids": 82
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    curr = 1\n    curr_i = 1\n    while n > 0:\n        curr = next_fib(curr, curr_i)\n        curr_i += 1\n        if is_prime(curr):\n            n -= 1\n    return curr\n",
        "num_ids": 68
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    prev_fib = 1\n    current_fib = 2\n    counter = 1\n",
        "num_ids": 22
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert n >= 1\n",
        "num_ids": 7
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l.sort()\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l.sort()\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 79
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l_set = set(l)\n    for i in l_set:\n        for j in l_set:\n            if i == j:\n                continue\n            if i + j == 0:\n                for k in l_set:\n                    if k == i or k == j:\n                        continue\n                    if i + j + k == 0:\n                        return True\n    return False",
        "num_ids": 89
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l.sort()\n",
        "num_ids": 7
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in l:\n        for j in l:\n            for k in l:\n                if i+j+k == 0 and (i!= j and i!= k and j!= k):\n                    return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # since no two elements in the list can sum to 0, there will always\n    # be at least one non-zero element in the list.\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if l[i] + l[j] + l[k] == 0 and l[i]!= l[j]!= l[k]!= l[i]:\n                    return True\n",
        "num_ids": 116
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        l_copy = l.copy()\n        l_copy.pop(i)\n        for j in range(len(l_copy) - 2):\n            if j > 0 and l_copy[j] == l_copy[j - 1]:\n                continue\n            k = l_copy[j + 1] - l_copy[j]\n            if k in l_copy[j + 2:]:\n                return True\n    return False\n",
        "num_ids": 144
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    seen = set()\n    for num in l:\n        required = -num\n        if required in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l.sort()\n    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 93
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n > 0, \"The number of cars must be positive.\"\n",
        "num_ids": 17
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Initialize the number of collisions.\n    collisions = 0\n",
        "num_ids": 17
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # n cars are driving left to right;  simultaneously, a different set of n cars\n    # are driving right to left.   The two sets of cars start out being very far from\n    # each other.  All cars move in the same speed.  Two cars are said to collide\n    # when a car that's moving left to right hits a car that's moving right to left.\n    # However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    # in their trajectory as if they did not collide.\n",
        "num_ids": 121
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    collisions = 0\n    L = 2*n\n    for _ in range(L):\n        for _ in range(L):\n            if L % 2 == 1:\n                # odd number of cars, so car will go L-1 first\n                # but we want the other car to go first, so add 1\n                if (L-1) // 2 == 0:\n                    car_1 = L-2\n                    car_2 = 1\n                else:\n                    car_2 = L-1\n                    car_1 = 1\n            else:\n                car_1 = 1\n                car_2 = L-1\n            if car_1 < car_2:\n                if car_1 % 2 == 1:\n                    car_1 -= 1\n                if car_2 % 2 == 1:\n                    car_2 -= 1\n                if L % 2 == 1:\n                    car_1 += 1\n                if L % 2 == 1:\n                    car_2 += 1\n                if car_1 % 2 == 1:\n                    car_2 -= 1\n                if car_2 % 2 == 1:\n                    car_1 += 1\n                # car_1 is first\n                # car_2 is second\n                # car_1 is moving left -> right\n                # car_2 is moving right -> left\n                if car_2 < car_1:\n                    collisions += 1\n            L -= 1\n    return collisions\n",
        "num_ids": 321
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert n > 0\n",
        "num_ids": 7
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert n >= 0\n",
        "num_ids": 7
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # the solution is the number of right moving cars starting at n and moving down\n    # n + 1 (colliding with one down car, and then moving right again)\n    return (n*(n+1))//2\n",
        "num_ids": 52
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    car_speed = 1\n",
        "num_ids": 8
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [e+1 for e in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return list(map(lambda x: x+1, l))\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return list(map(lambda x: x+1, l))\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l_plus = []\n    for i in range(len(l)):\n        l_plus.append(l[i] + 1)\n    return l_plus\n",
        "num_ids": 41
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i + 1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return list(map(lambda x: x + 1, l))\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [x + 1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [x + 1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [x + 1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i + 1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(l)<2:\n        return False\n    else:\n        l.sort()\n        list_set=set(l)\n        for i in list_set:\n            if i>0:\n                for j in range(1,i):\n                    if (i+j)==0:\n                        return True\n            else:\n                continue\n        return False\n    pass\n",
        "num_ids": 91
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l_size = len(l)\n    if l_size < 2:\n        return False\n    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = set(l)\n    for i in s:\n        if -1*i in s and i!= -1*i:\n            return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert type(l) is list, \"l must be a list of integers\"\n    assert l, \"l must not be an empty list\"\n    assert all(type(i) is int for i in l), \"all elements of l must be integers\"\n    assert all(i >= -1000 and i <= 1000 for i in l), \"all elements of l must be between -1000 and 1000\"\n",
        "num_ids": 90
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if i!= j and l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            if i!= j and l[i] + l[j] == 0:\n                return True\n    return False\n    \n",
        "num_ids": 55
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    set_l = set(l)\n    for x in set_l:\n        if -x in set_l:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert l, 'Cannot take an empty list as an input'\n    # TODO replace pass with your implementation\n    pass\n",
        "num_ids": 30
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] == -l[j]:\n                return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if x == 0:\n        return '0'\n    elif base <= 10:\n        return str(x)\n    else:\n        return (change_base(x // base, base) if x % base else '0') + str(x % base)\n",
        "num_ids": 62
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # initialize result\n    res = ''\n    # convert x to binary format\n    x_binary = str(bin(x))[2:]\n    # iterate over binary format of x\n    for i in range(len(x_binary)):\n        # convert each element of x_binary to corresponding element of base_n\n        res += str(base_n[x_binary[i]])\n    # return result\n    return res\n",
        "num_ids": 101
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n    # base numbers are less than 10\n    res = \"\"\n    while x > 0:\n        res += str(x % base)\n        x //= base\n    return res[::-1]\n",
        "num_ids": 53
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if base < 2 or base > 10:\n        raise ValueError(\"Base has to be between 2 and 10\")\n    if x < 0:\n        return '-' + change_base(-x, base)\n    out = ''\n    while x > 0:\n        out = str(x % base) + out\n        x = x // base\n    return out\n",
        "num_ids": 83
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    res = ''\n    while x > 0:\n        res += digits[x % base]\n        x //= base\n    return res[::-1]\n",
        "num_ids": 65
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    change_base.base_list = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\n    return change_base.base_list[str(x)[0]] * int(change_base.base_list[str(x)[1]]) + int(change_base.base_list[str(x)[2]])\n",
        "num_ids": 115
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    conv_list = []\n    while x > 0:\n        conv_list.insert(0, x%base)\n        x = x // base\n    return \"\".join([str(i) for i in conv_list])\n",
        "num_ids": 54
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if base < 2 or base > 36:\n        return ''\n    # for each digit in x, convert the digit to its corresponding base value and concatenate them.\n    # To convert to base 36, loop from 0 to 9, multiply each result by 36, and add to sum.\n    sum = 0\n    while x > 0:\n        x, remainder = divmod(x, base)\n        sum = sum * base + remainder\n    return str(sum)\n",
        "num_ids": 106
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if base < 2 or base > 36:\n        raise ValueError(f\"The given base is not between 2 and 36.\")\n    if base < 10:\n        return change_base_10(x, base)\n    else:\n        return change_base_36(x, base)\n",
        "num_ids": 67
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join(str(x % base) for x in range(x, x*base))\n",
        "num_ids": 25
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (h * a) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return (a**2) * (h/2)\n",
        "num_ids": 15
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n >= 0, \"Fib4 does not allow negative numbers\"\n    if n == 0 or n == 1:\n        return n\n    n_minus_1 = 1\n    n_minus_2 = 0\n    n_minus_3 = 0\n    n_minus_4 = 0\n    for _ in range(n-1):\n        n_minus_4 = n_minus_3 + n_minus_2\n        n_minus_3 = n_minus_2\n        n_minus_2 = n_minus_1\n        n_minus_1 = n_minus_4\n    return n_minus_4\n",
        "num_ids": 146
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n",
        "num_ids": 76
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n >= 0\n    fib_n_minus_3 = 0\n    fib_n_minus_2 = 1\n    fib_n_minus_1 = fib_n_minus_2\n    fib_n = 0\n    for i in range(n):\n        fib_n = fib_n_minus_1 + fib_n_minus_2 + fib_n_minus_3\n        fib_n_minus_3 = fib_n_minus_2\n        fib_n_minus_2 = fib_n_minus_1\n        fib_n_minus_1 = fib_n\n    return fib_n\n",
        "num_ids": 152
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 0:\n        return ValueError(\"Negative number\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_1 = 0\n        fib4_2 = 2\n        fib4_3 = 0\n        for i in range(3, n + 1):\n            fib4_4 = fib4_3 + fib4_2 + fib4_1\n            fib4_1 = fib4_2\n            fib4_2 = fib4_3\n            fib4_3 = fib4_4\n        return fib4_4\n",
        "num_ids": 175
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        first = 0\n        second = 2\n        third = 0\n        for _ in range(n-2):\n            third = first + second\n            first = second\n            second = third\n        return third\n",
        "num_ids": 87
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert n >= 0, \"n cannot be negative\"\n    table = [0,0,2,0]\n    \n    for i in range(4, n+1):\n        table.append((table[i-1] + table[i-2] + table[i-3] + table[i-4]))\n    return table[n]",
        "num_ids": 82
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n >= 0\n    n0 = 0\n    n1 = 0\n    n2 = 0\n    n3 = 0\n    for i in range(n):\n        if i == 0:\n            n0 = 0\n        elif i == 1:\n            n1 = 0\n        elif i == 2:\n            n2 = 2\n        elif i == 3:\n            n3 = 0\n        else:\n            n0, n1, n2, n3 = n1, n2, n3, n0 + n1 + n2 + n3\n    return n0\n",
        "num_ids": 138
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sorted_l = sorted(l)\n    length = len(sorted_l)\n    if length % 2 == 0:\n        return (sorted_l[(length//2)-1] + sorted_l[length//2])/2\n    else:\n        return sorted_l[length//2]\n",
        "num_ids": 74
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid] + l[mid - 1]) / 2\n    return l[mid]\n",
        "num_ids": 55
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l.sort()\n    return l[len(l)//2]\n",
        "num_ids": 19
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = sorted(l)\n    n = len(s)\n    if n % 2 == 0:\n        return (s[n//2 - 1] + s[n//2]) / 2\n    else:\n        return s[n//2]\n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]\n",
        "num_ids": 62
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    length = len(l)\n    if length % 2 == 0:\n        return (l[length//2] + l[length//2 - 1])/2\n    else:\n        return l[length//2]\n",
        "num_ids": 52
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = len(l)\n    if n % 2 == 1:\n        return sorted(l)[n // 2]\n    else:\n        return sum(sorted(l)[n // 2 - 1:n // 2 + 1]) / 2\n",
        "num_ids": 57
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l = sorted(l)\n    return l[len(l)//2] if len(l)%2 else 0.5*(l[len(l)//2] + l[len(l)//2-1])\n",
        "num_ids": 55
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l.sort()\n    if len(l)%2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2] + l[len(l)//2 - 1])/2\n",
        "num_ids": 62
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l.sort()\n    n = len(l)\n    if n == 0:\n        raise ValueError(\"cannot get median from empty list\")\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n    return l[n // 2]\n",
        "num_ids": 77
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return text[::-1].lower() == text.lower()\n",
        "num_ids": 17
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not text:\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return is_palindrome_rec(text)\n",
        "num_ids": 14
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # PUT YOUR CODE HERE\n    return text.casefold() == text.casefold()[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(len(text) // 2):\n        if text[i]!= text[-i - 1]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n >= 0, \"n < 0\"\n    assert p > 2, \"p <= 2\"\n    m = 1\n    while n:\n        if n & 1:\n            m = (m * 2) % p\n        n >>= 1\n    return m\n",
        "num_ids": 63
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    res = 1\n    for _ in range(n):\n        res *= 2\n        res %= p\n    return res\n",
        "num_ids": 31
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return pow(2, n, p)\n    n0 = n % p\n    m = 1\n    for i in range(p - 1):\n        m = (m * 2) % p\n    if n0 == 0:\n        return m\n    return m * pow(2, p - 2, p) % p\n",
        "num_ids": 77
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if p == 2:\n        return 1\n    if p == 1:\n        return 0\n    return (modp(n, p - 2) * 2) % p\n",
        "num_ids": 41
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert p > 2\n    if n >= p:\n        return 1\n    return p - p // 2 * (2 * modp(n, p // 2) + modp(n, p // 2 + 1))\n",
        "num_ids": 51
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    return pow(2, n, p)\n",
        "num_ids": 23
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    i = 1\n    while i < n:\n        i *= 2\n    return 1 if i < n else (2 if i == n else p)\n",
        "num_ids": 37
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return (2 ** n) % p\n",
        "num_ids": 26
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n    \n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 37
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #text = str(text)\n    text = text.lower()\n    if text == '':\n        return ''\n    elif text[0] in 'aeiou':\n        return remove_vowels(text[1:])\n    else:\n        return text[0] + remove_vowels(text[1:])\n",
        "num_ids": 80
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for i in text:\n        if i not in vowels:\n            result += i\n    return result",
        "num_ids": 44
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = \"aeiou\"\n    for c in text:\n        if c.lower() in vowels:\n            text = text.replace(c,'')\n    return text\n",
        "num_ids": 45
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join(c for c in text if c.lower() not in 'aeiou')\n",
        "num_ids": 25
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for c in text:\n        if c.lower() not in vowels:\n            result += c\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    vowels = 'aeiou'\n    new_text = []\n    for letter in text:\n        if letter.lower() not in vowels:\n            new_text.append(letter)\n    return ''.join(new_text)\n",
        "num_ids": 59
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #Here's a line of code that you WILL need to add, one line of code.\n    #1. Use the ord() function to get the ASCII number of each character in the string.\n    #2. Use the chr() function to convert ASCII numbers back into characters.\n    #3. Use the.replace() function to replace characters in the string.\n    \n    vowels = \"aeiouAEIOU\"\n    for i in text:\n        if i in vowels:\n            text = text.replace(i,'')\n    return text\n",
        "num_ids": 127
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n",
        "num_ids": 51
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    vowels = 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'\n    result = ''\n    for letter in text:\n        if letter not in vowels:\n            result += letter\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowels = 'aeiou'\n    return ''.join(c for c in text if c.lower() not in vowels)\n",
        "num_ids": 34
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(l) == 0:\n        return True\n    if l[0] < t:\n        return below_threshold(l[1:], t)\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return all(i < t for i in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return all([num < t for num in l])\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for item in l:\n        if item >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for x in l:\n        if x >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Use reduce, filter, and/or zip\n    return reduce(lambda a, b: a and b, map(lambda x: x < t, l))\n",
        "num_ids": 38
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert t >= 0\n    if len(l) == 0:\n        return True\n    return l[0] < t and below_threshold(l[1:], t)\n",
        "num_ids": 43
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return set(s0) == set(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(s0) == len(s1) and all(c0 == c1 for c0, c1 in zip(s0, s1))\n",
        "num_ids": 38
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i0 = 0\n    i1 = 0\n    while i0 < len(s0) and i1 < len(s1):\n        if s0[i0]!= s1[i1]:\n            return False\n        i0 += 1\n        i1 += 1\n    return i0 == len(s0) and i1 == len(s1)\n",
        "num_ids": 86
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def is_permutation(s0, s1):\n        # Use dict to store the frequency of characters\n        s0_freq = dict()\n        s1_freq = dict()\n        for ch in s0:\n            if ch not in s0_freq:\n                s0_freq[ch] = 1\n            else:\n                s0_freq[ch] += 1\n        for ch in s1:\n            if ch not in s1_freq:\n                s1_freq[ch] = 1\n            else:\n                s1_freq[ch] += 1\n        return s0_freq == s1_freq\n    \n    s0 = s0.lower()\n    s1 = s1.lower()\n    return is_permutation(s0, s1) and is_permutation(s1, s0)\n",
        "num_ids": 204
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for char in set(s0):\n        if char not in s1:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(s0)!= len(s1):\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for c in set(s0):\n        if s1.count(c)!= s0.count(c):\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return set(s0) == set(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s0 = s0.lower()\n    s1 = s1.lower()\n    if len(s1) > len(s0):\n        s0, s1 = s1, s0\n    for i in range(len(s0)):\n        if not s0[i] in s1:\n            return False\n    return True\n",
        "num_ids": 82
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # \u83ab\u540d\u5176\u5999\u7684\u89e3\u6cd5\n    # if n == 1 or n == 2:\n    #     return 1\n    # return fib(n - 1) + fib(n - 2)\n    # \u6211\u7684\u89e3\u6cd5\uff0c\u6ca1\u5565\u597d\u8bf4\u7684\n    # if n == 1:\n    #     return 1\n    # elif n == 2:\n    #     return 1\n    # else:\n    #     return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 132
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return n\n    return fib(n - 2) + fib(n - 1)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n - 2) + fib(n - 1)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #return 0\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)\n",
        "num_ids": 41
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n <= 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    return _fib(n)[0]\n",
        "num_ids": 31
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # TODO: replace this with your code\n    pass\n",
        "num_ids": 15
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    opening_brackets = []\n    bracket_stack = []\n    for c in brackets:\n        if c == \"<\":\n            opening_brackets.append(c)\n        elif c == \">\":\n            if len(bracket_stack) == 0 or c!= bracket_stack[-1]:\n                return False\n            else:\n                bracket_stack.pop()\n    if len(bracket_stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 116
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == '<':\n            bracket_stack.append(b)\n        else:\n            assert b == '>'\n            if bracket_stack and bracket_stack[-1] == '<':\n                bracket_stack.pop()\n            else:\n                bracket_stack.append(b)\n    assert len(bracket_stack) == 0\n    return True\n",
        "num_ids": 105
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # iterate over the brackets\n    count = 0\n    for bracket in brackets:\n        if count > 0:\n            # if the count is positive, we have already seen a bracket\n            # so we should check if the bracket is a closing bracket\n            if bracket == \">\":\n                count -= 1\n            # if it is not, then we have a problem\n            else:\n                return False\n        else:\n            # if we have not seen any brackets, we should check if the\n            # bracket is an opening bracket\n            if bracket == \"<\":\n                count += 1\n            else:\n                return False\n    if count == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 158
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == \">\" and bracket_stack[-1] == \"<\":\n            bracket_stack.pop()\n        else:\n            bracket_stack.append(b)\n    return not bracket_stack\n",
        "num_ids": 65
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    stack = []\n    brackets = list(brackets)\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    bracket_list = brackets.split('><')\n    # print(bracket_list)\n    is_correct = True\n    for bracket in bracket_list:\n        if bracket[0] == '<':\n            if bracket[-1] == '>':\n                is_correct = False\n    return is_correct\n",
        "num_ids": 76
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # if len(brackets) == 1:\n    #     return False\n    # if len(brackets) % 2!= 0:\n    #     return False\n    # for i in range(len(brackets) // 2):\n    #     if brackets[i]!= \"<\" or brackets[-i-1]!= \">\":\n    #         return False\n    # return True\n    return len(brackets) % 2 == 0 and brackets.count(\"<\") == brackets.count(\">\")\n",
        "num_ids": 119
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    stack = []\n    for ch in brackets:\n        if ch == '<':\n            stack.append(ch)\n        elif ch == '>':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 84
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #\n    if len(brackets) % 2!= 0:\n        return False\n    #\n    bracket_dict = {brackets[i]: brackets[i + 1] for i in range(0, len(brackets), 2)}\n    bracket_dict[\"<\"] = \">\"\n    bracket_dict[\">\"] = \"<\"\n    #\n    bracket_stack = []\n    for bracket in brackets:\n        if bracket in bracket_dict.keys():\n            bracket_stack.append(bracket)\n        else:\n            if bracket_stack == []:\n                return False\n            else:\n                if bracket_dict[bracket_stack[-1]] == bracket:\n                    bracket_stack.pop()\n                else:\n                    return False\n    if bracket_stack!= []:\n        return False\n    else:\n        return True\n",
        "num_ids": 201
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(l) < 2:\n        return True\n    d = l[1] - l[0]\n    for i in range(2, len(l)):\n        if d * (l[i] - l[i-1]) > 0:\n            return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(len(l) - 1):\n        if (l[i] < l[i+1]) == False:\n            return False\n    return True",
        "num_ids": 40
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Iterate over the list\n    for i in range(len(l) - 1):\n        # If it is decreasing\n        if l[i + 1] < l[i]:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return l == sorted(l) or l == sorted(l, reverse=True)\n",
        "num_ids": 21
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    d = l[1] - l[0]\n    for i in range(1, len(l) - 1):\n        if (l[i + 1] - l[i]!= d):\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(l) == 1:\n        return True\n    elif len(l) == 2:\n        return (l[0] < l[1])\n    elif len(l) >= 3:\n        return (l[0] < l[1] and monotonic(l[1:])) or (l[0] > l[1] and monotonic(l[1:][::-1]))\n",
        "num_ids": 99
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if l == []:\n        return True\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)-1):\n            if l[i] >= l[i-1] and l[i] >= l[i+1]:\n                return True\n            else:\n                return False\n    if l[0] >= l[1]:\n        for i in range(1, len(l)-1):\n            if l[i] <= l[i-1] and l[i] <= l[i+1]:\n                return True\n            else:\n                return False\n",
        "num_ids": 156
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(l) < 2:\n        return True\n    if l[1] - l[0] < 0:\n        for i in range(2, len(l)):\n            if l[i] - l[i-1] > 0:\n                return False\n    else:\n        for i in range(2, len(l)):\n            if l[i] - l[i-1] < 0:\n                return False\n    return True\n",
        "num_ids": 108
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    if len(l) == 1:\n        return True\n    return l[0] < l[1] and monotonic(l[1:])\n",
        "num_ids": 39
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if l[0] <= l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] >= l[i + 1]:\n                return False\n    else:\n        for i in range(1, len(l) - 1):\n            if l[i] <= l[i + 1]:\n                return False\n    return True\n",
        "num_ids": 89
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(set1 & set2)\n",
        "num_ids": 32
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(l1) > len(l2):\n        short_l = l2\n        long_l = l1\n    else:\n        short_l = l1\n        long_l = l2\n    new_list = []\n    for i in short_l:\n        if i in long_l:\n            new_list.append(i)\n    return sorted(new_list)",
        "num_ids": 94
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    common_list = []\n",
        "num_ids": 8
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    i1 = 0\n    i2 = 0\n    result = []\n    while i1 < len(l1) and i2 < len(l2):\n        if l1[i1] == l2[i2]:\n            result.append(l1[i1])\n            i1 += 1\n            i2 += 1\n        elif l1[i1] < l2[i2]:\n            i1 += 1\n        else:\n            i2 += 1\n    return result\n",
        "num_ids": 115
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # set(l1) and set(l2) to get the unique values in both lists\n    # the intersection between the two sets, which will give the common elements between the lists\n    return sorted(list(set(l1).intersection(set(l2))))\n",
        "num_ids": 62
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    set1 = set(l1)\n    set2 = set(l2)\n",
        "num_ids": 21
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a = set(l1)\n    b = set(l2)\n    c = a & b\n    return sorted(list(c))\n",
        "num_ids": 35
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not l1 or not l2:\n        return []\n    p1 = 0\n    p2 = 0\n    result = []\n    while p1 < len(l1) and p2 < len(l2):\n        if l1[p1] == l2[p2]:\n            result.append(l1[p1])\n            p1 += 1\n            p2 += 1\n        elif l1[p1] > l2[p2]:\n            p2 += 1\n        else:\n            p1 += 1\n    return result\n",
        "num_ids": 130
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Find the prime factors of n and find the largest one.\n    return max([prime_factor(n) for n in prime_factors(n)])\n",
        "num_ids": 38
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = 2\n    while i < n:\n        if is_prime(i) and n % i == 0:\n            n = n // i\n            i = 2\n        else:\n            i = i + 1\n    return n\n",
        "num_ids": 56
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = 2\n    while i < n:\n        if n % i == 0:\n            return i\n        i = i + 1\n    \ndef if_function(condition, true_result, false_result):\n    \"\"\"Return true_result if condition is a true value, and\n    false_result otherwise.\n    >>> if_function(True, 2, 3)\n    2\n    >>> if_function(False, 2, 3)\n    3\n    >>> if_function(3==2, 3+2, 3-2)\n    1\n    >>> if_function(3>2, 3+2, 3-2)\n    5\n    \"\"\"\n    if condition:\n        return true_result\n    else:\n        return false_result\n        \ndef with_if_statement():\n    \"\"\"\n    >>> with_if_statement()\n    1\n    \"\"\"\n    if c():\n        return t()\n    else:\n        return f()\n",
        "num_ids": 220
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    x = 2\n    while x < n:\n        if is_prime(x):\n            n = n / x\n        else:\n            x += 1\n    return x\n",
        "num_ids": 42
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    factor = 2\n    while factor < n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    while n % 2 == 0:\n        n = n / 2\n    largest_prime = 2\n    for i in range(3,n,2):\n        while n % i == 0:\n            n = n / i\n            if is_prime(i):\n                largest_prime = i\n    return int(largest_prime)\n",
        "num_ids": 78
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    factor = 2\n    while factor ** 2 <= n:\n        if n % factor == 0:\n            n = n // factor\n        else:\n            factor += 1\n    return n\n",
        "num_ids": 53
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert n > 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "num_ids": 47
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sum = 0\n    for num in range(1,n+1):\n        sum += num\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 1\n    return n + sum_to_n(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n",
        "num_ids": 42
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # base case\n    if n == 0:\n        return 0\n    return n + sum_to_n(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Initialize the sum variable and start at 1\n    sum = 1\n    # Loop through the numbers 1-n, add each one to sum\n    for x in range(1, n):\n        sum = sum + x\n    # Return the total sum\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum(range(1, n+1))\n",
        "num_ids": 14
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n",
        "num_ids": 40
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            try:\n                if stack[-1] == '(':\n                    stack.pop()\n            except:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 75
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    brackets = [b for b in brackets]\n    brackets.reverse()\n    for b in brackets:\n        if b == \"(\":\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    open_brackets = {\"(\":\")\", \"[\":\"]\", \"{\":\"}\"}\n    bracket_pairs = []\n    for bracket in brackets:\n        if bracket in open_brackets:\n            bracket_pairs.append(bracket)\n        else:\n            try:\n                last_open_bracket = bracket_pairs.pop()\n            except IndexError:\n                return False\n            if bracket!= open_brackets[last_open_bracket]:\n                return False\n    return len(bracket_pairs) == 0\n",
        "num_ids": 128
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #check if the bracket is open\n    #if it is, add to the list of open brackets\n    #if the bracket is closed, check if the brackets in the list is equal to the closing bracket\n    #if they are, remove the opening bracket from the list\n    #if not, return False\n    #if there are no brackets in the list, return True\n    #check if the length of the list is equal to 0\n    #return False\n",
        "num_ids": 101
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    brackets_stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            brackets_stack.append(bracket)\n        else:\n            if not brackets_stack:\n                return False\n            else:\n                brackets_stack.pop()\n    return not brackets_stack\n",
        "num_ids": 71
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    open_stack = []\n    for c in brackets:\n        if c == \"(\":\n            open_stack.append(c)\n        elif c == \")\":\n            if not open_stack:\n                return False\n            else:\n                open_stack.pop()\n",
        "num_ids": 65
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    bracket_pairs = dict()\n    openers = set()\n    for i, char in enumerate(brackets):\n        if char == \"(\":\n            openers.add(i)\n        elif char == \")\":\n            try:\n                openers.remove(i)\n            except KeyError:\n                return False\n            if openers:\n                bracket_pairs[i] = openers.pop()\n            else:\n                bracket_pairs[i] = openers.pop()\n    return not openers\n",
        "num_ids": 127
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    stack = []\n",
        "num_ids": 6
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    opened_brackets = 0\n    for character in brackets:\n        if character == \"(\":\n            opened_brackets += 1\n        else:\n            if opened_brackets == 0:\n                return False\n            else:\n                opened_brackets -= 1\n    return opened_brackets == 0\n",
        "num_ids": 70
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    open_brackets = []\n    for char in brackets:\n        if char == \"(\":\n            open_brackets.append(char)\n        elif char == \")\":\n            if len(open_brackets) == 0:\n                return False\n            else:\n                open_brackets.pop()\n    if len(open_brackets) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 98
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # base case\n    if len(xs) <= 1:\n        return [0]\n",
        "num_ids": 22
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(i * xs[i])\n    return derivative\n",
        "num_ids": 41
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(xs) == 0:\n        return []\n    elif len(xs) == 1:\n        return [0]\n    return [i * xs[-1] for i in range(len(xs)-1, 0, -1)]\n",
        "num_ids": 60
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    return [j*xs[i] for i, j in enumerate(xs[1:])]\n",
        "num_ids": 27
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    res = []\n    for i in range(1, len(xs)):\n        res.append(xs[i] * i)\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = len(xs)\n    derivative = [0] * n\n    for i in range(n):\n        if i == 0:\n            derivative[0] = 0\n        elif i == 1:\n            derivative[1] = xs[0]\n        elif i == 2:\n            derivative[2] = xs[1] + 2 * xs[2]\n        else:\n            derivative[i] = (xs[i] + (i - 1) * xs[i - 1]) * i\n    return derivative\n",
        "num_ids": 136
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i * xs[j + 1] for j, i in enumerate(xs[1:])]\n",
        "num_ids": 28
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # end the list with zeros\n    xs.append(0)\n    # calculate the derivative\n    return [i*j for i,j in zip(xs[1:], [i+1 for i in range(len(xs)-1)])]\n",
        "num_ids": 60
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    derivative_result = []\n    for i in range(1, len(xs)):\n        derivative_result.append(xs[i] * i)\n    return derivative_result\n",
        "num_ids": 47
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n >= 3:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 73
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n < 2:\n        return n\n    fib_n = [0, 1]\n    for i in range(2, n):\n        fib_n.append(fib_n[i-1]+fib_n[i-2])\n    return fib_n[n]\n",
        "num_ids": 71
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 49
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    a, b, c = 0, 1, 0\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 38
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert n > 0, 'n must be positive number'\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 48
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 81
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 2:\n        return n\n    if n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 68
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return fib(n) + fib(n-2) + fib(n-4)\n",
        "num_ids": 22
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 57
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = 0\n    for ch in s:\n        if ch in VOWELS:\n            vowels += 1\n    if s[-1] in VOWELS:\n        vowels += 1\n    return vowels\n",
        "num_ids": 56
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    for j in s[::-1]:\n        if j in vowels:\n            count += 1\n    if count == len(s):\n        count -= 1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y' or i == 'A' or i == 'E' or i == 'I' or i == 'O' or i == 'U' or i == 'Y':\n            count += 1\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = s.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_count = 0\n    for character in s:\n        if character in vowels:\n            vowels_count += 1\n    if s[-1] in vowels:\n        vowels_count += 1\n    return vowels_count\n",
        "num_ids": 91
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    total = 0\n    for c in s:\n        if c in ('a', 'e', 'i', 'o', 'u'):\n            total += 1\n    if s[len(s)-1] in ('a', 'e', 'i', 'o', 'u'):\n        total += 1\n    return total\n",
        "num_ids": 76
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowels = set('aeiouy')\n",
        "num_ids": 14
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if shift > len(str(x)):\n        return int(str(x)[::-1])\n    return int(str(x)[-shift:] + str(x)[:-shift])\n",
        "num_ids": 46
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return str(int(x) >> shift)[::-1] if shift > len(str(x)) else str(x)[-shift:] + str(x)[:-shift]\n",
        "num_ids": 42
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if shift == 0:\n        return x\n    if shift > x:\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "num_ids": 52
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num_of_digits = len(str(x))\n    if num_of_digits == 0:\n        return '0'\n    elif shift >= num_of_digits:\n        return str(x)[::-1]\n    elif shift == 0:\n        return str(x)\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "num_ids": 95
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = str(x)\n    if shift >= len(s):\n        # if shift is larger than the number of digits,\n        # reverse them.\n        return ''.join(list(reversed(s)))\n    else:\n        first = s[-shift:]\n        last = s[:-shift]\n        return last + first\n    return ''\n",
        "num_ids": 84
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert type(x) == int\n    assert shift >= 0\n    digits = str(x)\n    if shift >= len(digits):\n        return digits[::-1]\n    return digits[shift:] + digits[:shift]\n",
        "num_ids": 57
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = str(x)[-shift:] + str(x)[:-shift]\n    return s\n",
        "num_ids": 24
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift]\n",
        "num_ids": 19
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def return_reversed(x):\n        return int(str(x)[::-1])\n    try:\n        return str(x)[-shift:] + str(x)[:-shift]\n    except:\n        return return_reversed(x)\n",
        "num_ids": 62
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if shift > num_digits(x):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "num_ids": 46
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = 0\n    for character in s:\n        if character.isalpha():\n            result += ord(character.upper())\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def upper(x):\n        return ord(x) <= 90\n",
        "num_ids": 17
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n",
        "num_ids": 29
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([ord(char) for char in s if char.isupper()])\n",
        "num_ids": 21
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum(map(lambda x: ord(x) if ord(x) >= 65 and ord(x) <= 90 else 0, s))\n",
        "num_ids": 34
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum([ord(s[i]) for i in range(len(s)) if s[i].isupper()])\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for i in s:\n        if i.isupper():\n            count += ord(i)\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n    \ndef decrypt_caesar_cipher(message, shift):\n    \"\"\"\n    In this task, you will decrypt a message by a simple Caesar cipher.\n    The input of the message will be a string of all upper and lower case letters.\n    The output should be the decrypted message\n    for example:\n    decrypt_caesar_cipher(\"Hello World\", 2) -> \"Hello Cruel\"\n    decrypt_caesar_cipher(\"Hello World\", -2) -> \"Hello World\"\n    decrypt_caesar_cipher(\"Hello World\", 5) -> \"Hello\"\n    decrypt_caesar_cipher(\"Hello World\", 21) -> \"Hello World\"\n    decrypt_caesar_cipher(\"Hello World\", 0) -> \"Hello World\"\n    decrypt_caesar_cipher(\"Hello World\", 26) -> \"Hello World\"\n    \"\"\"\n    pass\n    \ndef add_two_numbers(first, second):\n    \"\"\"\n    In this task, you will add two numbers together using the traditional math operator.\n    The input will be two integers, or two strings of integers.\n    The output should be the result of the addition.\n    for example:\n    add_two_numbers(2, 3) -> 5\n    add_two_numbers(2, \"3\") -> 5\n    add_two_numbers(\"2\", \"3\") -> 5\n    add_two_numbers(\"1\", \"2\") -> 3\n    add_two_numbers(1, 2) -> 3\n    add_two_numbers(\"1\", 2) -> 3\n    \"\"\"\n    pass\n    \ndef add_positive_integers(n):\n    \"\"\"\n    In this task, you will take a positive integer n as an input. \n    Then you will sum the integers from 1 to n. \n    The input will be a positive integer n. \n    The output should be the sum of all integers from 1 to n. \n    For example:\n    add_positive_integers(4) -> 1+2+3+4 = 10\n    add_positive_integers(5) -> 1+2+3+4+5 = 15\n    add_positive_integers(100) -> 1+2+3+4+5+...+98+99+100 = 5050\n    \"\"\"\n    pass\n    \ndef is_valid_parenthesis(s):\n    \"\"\"\n    In this task you will be given a string of parenthesis. \n    Your task is to determine whether or not the parenthesis are valid \n    (well formed) or not.\n    for example:\n    is_valid_parenthesis(\"(\") -> False\n    is_valid_parenthesis(\"()\") -> True\n    is_valid_parenthesis(\"(())\") -> True\n    is_valid_parenthesis(\")(\") -> False\n    is_valid_parenthesis(\"(())((()())())\") -> True\n    is_valid_parenthesis(\"((((((((((((((((((((((((((((())((()(())())((()((((())((()(()((())((()((((((((((((())((()(())(())(((((()))()(())((((((())(((())(())()))(((((((((((()((((((((((((())))((()))()()(())((())(())((())(((()))((()(())(((()((())(((((()((()(((())((())()(((())((())(((()))(()(())(())()()((()())((()(((())(((((((()))(())(())(()())((())()(())(((((((((((((((((())))((())(())((())((())(())((((()))(((((((((((((((())))((())(())((())((((((())((((((()(((((()))(())((())((((((((((()(((())((((((((((((((((((()))))))(((((((((((((((()(((())((())((())((())((((((()))(())((())((((())((((((((((())))((((((((((((((())((())(())((((((((((((((((((((((((((((((((((((((((())",
        "num_ids": 1024
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    apples = int(s.split()[0])\n    oranges = int(s.split()[2])\n    print(apples, oranges)\n    return apples - oranges\n",
        "num_ids": 44
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return s.count('1') - s.count('0') - n\n",
        "num_ids": 19
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return n - s.count('o') - s.count('a') - s.count('m')\n",
        "num_ids": 26
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if \"apples\" in s:\n        return n - int(s.split(\"apples \")[1].split(\" oranges\")[0])\n    elif \"oranges\" in s:\n        return n - int(s.split(\"oranges \")[1].split(\" fruits\")[0])\n    else:\n        return n - int(s.split(\" \")[1])\n    \n",
        "num_ids": 91
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    apples = 0\n    oranges = 0\n    mango = 0\n    for char in s:\n        if char.isdigit():\n            if'm' in char:\n                mango += int(char)\n            if 'a' in char:\n                apples += int(char)\n            if 'o' in char:\n                oranges += int(char)\n    return mango - apples - oranges\n",
        "num_ids": 96
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # get the number of apple and orange as string\n    apple = s.split(' ')[0]\n    orange = s.split(' ')[2]\n    # total number of fruits\n    total_fruits = int(apple) + int(orange)\n    # number of apple or orange\n    apples = int(apple)\n    oranges = int(orange)\n    # if number of orange is more than apples than number of oranges\n    # is equal to the number of apple\n    if oranges >= apples:\n        return oranges\n    # if number of apple is more than oranges than number of apple\n    # is equal to the number of oranges\n    else:\n        return apples\n",
        "num_ids": 155
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    fruit = {\n    'apples':0,\n    'oranges':0,\n    'mangoes':0,\n    }\n    for i in s.split():\n        fruit[i] += int(i)\n    return fruit['mangoes']\n    \n    \ndef frequency_queries(s, q):\n    \"\"\"\n    In this task, you will be given a string that consists of lowercase letters and \n    integers and a sequence of queries. Each query will be represented as a tuple \n    containing a letter and an integer. If the tuple represents a letter, it means \n    that the letter will be added to the string and the second element of the tuple \n    will represent the number of occurrences of this letter in the string. If the \n    tuple represents an integer, the integer will be removed from the string and \n    kept in the dictionary. For example, if the string is \"ababa\" and the tuple \n    is (\"b\", 2), the result of this query will be: \"ababa\" -> \"abab\" -> \"ababa\" \n    This dictionary will be returned. If the string is \"ababa\" and the tuple is \n    (1,3), the result will be \"abababa\" -> \"ababa\" -> \"abab\" -> \"abababa\" \n    Return a dictionary where each key is a key of the query and each value is the \n    result of the query.\n    for example:\n    frequency_queries(\"abaaba\", [(\"a\", 1), (\"b\", 2), (\"a\", 3)]) -> {\"a\": 3, \"b\": 2}\n    frequency_queries(\"abaaba\", [(\"a\", 1), (\"b\", 2), (\"a\", 3), (\"a\", 4), (\"b\", 5)]) -> {\"a\": 1, \"b\": 5}\n    frequency_queries(\"aaaaaa\", [(\"a\", 4)]) -> {\"a\": 4}\n    frequency_queries(\"aaaaaa\", [(\"a\", 4), (\"a\", 5)]) -> {\"a\": 4}\n    frequency_queries(\"ababab\", [(\"b\", 2)]) -> {\"b\": 2}\n    frequency_queries(\"ababab\", [(\"b\", 2), (\"a\", 2)]) -> {\"a\": 2, \"b\": 2}\n    frequency_queries(\"ababab\", [(\"b\", 1), (\"a\", 3)]) -> {\"b\": 1, \"a\": 3}\n    frequency_queries(\"ababab\", [(\"b\", 1), (\"a\", 3), (\"a\", 1)]) -> {\"a\": 2, \"b\": 1}\n    frequency_queries(\"ababab\", [(\"b\", 1), (\"a\", 2), (\"a\", 1), (\"a\", 2), (\"a\", 1), (\"a\", 2), (\"a\", 1)]) -> {\"a\": 3, \"b\": 1}\n    frequency_queries(\"ababab\", [(\"b\", 1), (\"a\", 2), (\"a\", 2), (\"b\", 2)]) -> {\"a\": 2, \"b\": 3}\n    frequency_queries(\"ababab\", [(\"b\", 1), (\"a\", 3), (\"a\", 3), (\"a\", 3), (\"b\", 2)]) -> {\"a\": 3, \"b\": 2}\n    frequency_queries(\"ababab\", [(\"b\", 1), (\"a\", 3), (\"a\", 3), (\"a\", 3), (\"a\", 3), (\"b\", 1)]) -> {\"a\": 3, \"b\": 1}\n    frequency_queries(\"ababab\", [(\"b\", 1), (\"a\", 1), (\"a\", 2), (\"b\", 1), (\"a\", 3), (\"a\", 3), (\"a\", 3), (\"b\", 1), (\"a\", 2), (\"a\", 3)]) -> {\"a\": 2, \"b\": 3}\n    frequency_queries(\"ababab\", [(\"b\", 1), (\"a\", 3), (\"a\", 2), (\"b\", 1), (\"a\", 1), (\"a\", 2), (\"b\", 2)]) -> {\"a\": 2, \"b\": 2}\n    frequency_queries(\"ababab\", [(\"b\", 1), (\"a\", 1), (\"a\", 2), (\"b\", 1), (\"a\", 3), (\"a\", 3), (\"a\", 2), (\"b\", 1), (\"a\", 2), (\"a\", 3)]) -> {\"a\": 2, \"b\": 2}\n    frequency_queries(\"ababab\"",
        "num_ids": 1025
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return n-sum(int(i) for i in s.split(\" \")[:2])\n",
        "num_ids": 24
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # REPLACE THE RETURN STATEMENT ABOVE WITH YOUR CODE\n    s=s.split()\n    apples=int(s[0])\n    oranges=int(s[2])\n    mangoes=apples-oranges\n    if(mangoes<=0):\n        return 0\n    else:\n        return oranges-mangoes\n",
        "num_ids": 85
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    even = filter(lambda x: x % 2 == 0, arr)\n    if len(even) == 0:\n        return []\n    min_even = min(even)\n    index = arr.index(min_even)\n    return [min_even, index]\n",
        "num_ids": 64
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Approach:\n    #     * traverse the tree starting from the node with the smallest even value\n    #     * return the node with the smallest even value\n",
        "num_ids": 36
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s = set()\n    for i in range(len(arr)):\n        s.add(arr[i]%2)\n",
        "num_ids": 32
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def get_first_even_value(arr):\n        if len(arr) == 0: return -1\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                return i\n        return -1\n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if not arr:\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    return [min(evens), evens.index(min(evens))]\n",
        "num_ids": 68
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    stack = []\n    for node in arr:\n        if node % 2 == 0:\n            stack.append([node, arr.index(node)])\n    if stack:\n        stack.sort(key=lambda x: (x[0], x[1]))\n        return [stack[0][0], stack[0][1]]\n    else:\n        return []\n",
        "num_ids": 87
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    even_nums = [num for num in arr if num % 2 == 0]\n    if even_nums:\n        return [min(even_nums), arr.index(min(even_nums))]\n    return []\n",
        "num_ids": 56
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr), default=arr[0])\n    if min_even == arr[0]:\n        return [min_even, 0]\n    return sorted([min_even, arr.index(min_even)], key=lambda x: x[0])\n",
        "num_ids": 90
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if arr == []:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n    arr.sort()\n    j = 0\n    while j < len(arr):\n        if arr[j] % 2 == 0:\n            return [arr[j], j]\n        j += 1\n    return [0, 0]\n",
        "num_ids": 87
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    max_value = -1\n    for num in lst:\n        if num > max_value and lst.count(num) >= num:\n            max_value = num\n    return max_value\n",
        "num_ids": 49
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return max([item for item in lst if lst.count(item) >= item]) if lst else -1\n",
        "num_ids": 29
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # write your code here\n    freq = {}\n    for elem in lst:\n        if elem not in freq:\n            freq[elem] = 1\n        else:\n            freq[elem] += 1\n    for k,v in freq.items():\n        if v >= k:\n            return k\n    return -1\n",
        "num_ids": 85
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = set(lst)\n    lst = sorted(s, reverse = True)\n    max_index = len(lst) - 1\n    while max_index > 0:\n        if lst[max_index] >= lst[max_index - 1]:\n            return lst[max_index]\n        max_index -= 1\n    return -1\n",
        "num_ids": 87
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # if there is no such value, return -1\n    freq = {}\n    max_val = 0\n",
        "num_ids": 27
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    freq_dict = {}\n    greatest_freq = 0\n    greatest_freq_val = -1\n    for n in lst:\n        if n in freq_dict.keys():\n            freq_dict[n] += 1\n        else:\n            freq_dict[n] = 1\n        if freq_dict[n] >= n:\n            if freq_dict[n] > greatest_freq:\n                greatest_freq = freq_dict[n]\n                greatest_freq_val = n\n    return greatest_freq_val\n",
        "num_ids": 140
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #freq = dict((x, lst.count(x)) for x in lst)\n    freq = {}\n    for n in lst:\n        if n not in freq:\n            freq[n] = 1\n        else:\n            freq[n] += 1\n    #print(freq)\n    for num, freq in freq.items():\n        if num > 0 and freq >= num:\n            return num\n    return -1",
        "num_ids": 110
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    greatest = lst[0]\n    greatest_freq = lst[0]\n    for i in lst:\n        if i >= 1 and i >= greatest_freq:\n            greatest_freq = i\n            greatest = i\n    return greatest if greatest_freq else -",
        "num_ids": 71
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return max(i for i in lst if i >= lst.count(i)) if lst else -1\n",
        "num_ids": 28
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst.sort()\n    count = 1\n    for i in lst:\n        if i == count:\n            count += 1\n        else:\n            break\n    if count > lst[0]:\n        return count\n    else:\n        return -1\n",
        "num_ids": 63
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = len(lst)\n    if n == 0:\n        return []\n",
        "num_ids": 21
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # if lst is empty, return an empty list\n    if lst == []:\n        return lst\n",
        "num_ids": 27
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not lst:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst.sort()\n    lst.sort(reverse=True)\n    lst.append(lst.pop(lst.index(lst[0])))\n    lst.pop(lst.index(lst[0]))\n    lst.append(lst.pop(lst.index(lst[0])))\n    lst.pop(lst.index(lst[0]))\n    lst.sort()\n    return lst\n",
        "num_ids": 113
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst_sort = sorted(lst)\n    lst_new = []\n    while len(lst_sort) > 0:\n        lst_new.append(lst_sort.pop(0))\n        lst_sort = sorted(lst_sort)\n    return lst_new\n",
        "num_ids": 73
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if lst:\n        new_lst = []\n        sorted_lst = sorted(lst)\n        print(sorted_lst)\n        for i in range(len(sorted_lst)):\n            new_lst.append(sorted_lst[i])\n            new_lst.append(sorted_lst[-i - 1])\n        return new_lst\n    else:\n        return []\n",
        "num_ids": 106
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sorted_list = sorted(lst)\n    strange_lst = []\n    for i in range(len(sorted_list)):\n        strange_lst.append(sorted_list[-i-1])\n        strange_lst.append(sorted_list[i])\n    return strange_lst\n",
        "num_ids": 81
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not lst:\n        return lst\n    result = []\n    for i in range(len(lst)):\n        # The min on the left of the list\n        min_idx = i\n        for j in range(i+1, len(lst)):\n            if lst[j] < lst[min_idx]:\n                min_idx = j\n        lst[i], lst[min_idx] = lst[min_idx], lst[i]\n        result.append(lst[i])\n    return result\n",
        "num_ids": 136
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(lst) <= 1:\n        return lst\n",
        "num_ids": 17
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return round(((a + b + c)/2) * (((a + b + c)/2) - a) * (((a + b + c)/2) - b) * (((a + b + c)/2) - c), 2)\n",
        "num_ids": 59
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a+b > c and a+c > b and b+c > a:\n        return round((a*b*c)/2,2)\n    else:\n        return -1\n",
        "num_ids": 46
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sides = sorted([a, b, c])\n    if sides[2] > sides[0] + sides[1]:\n        return -1\n    return round((sides[0] * sides[1] * 0.5) / 2, 2)",
        "num_ids": 60
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = sorted([a, b, c])\n    if s[2] <= s[0] + s[1]:\n        return round(0.5 * s[0] * s[2], 2)\n    else:\n        return -1\n",
        "num_ids": 59
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = (a+b+c)/2\n    s = s*(s-a)*(s-b)*(s-c)\n    if s > 0:\n        return round(math.sqrt(s), 2)\n    else:\n        return -1\n",
        "num_ids": 64
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a + b > c and b + c > a and c + a > b:\n        return round((a * b * c) / 2, 2)\n    else:\n        return -1",
        "num_ids": 46
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Check for Triangle Inequality\n    sorted_sides = sorted([a, b, c])\n    if sorted_sides[0] + sorted_sides[1] > sorted_sides[2]:\n        pass\n    else:\n        return -1\n    # Calculate the Area\n    s = (a + b + c) / 2\n    return round(math.sqrt(s*(s-a)*(s-b)*(s-c)), 2)\n",
        "num_ids": 112
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round(.5 * (a * b + b * c + c * a), 2)\n    return -1\n",
        "num_ids": 50
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(q)):\n        if not is_palindromic(q[0:len(q)-i]) or q[0:len(q)-i] > w:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # my code\n    if q[::-1]==q and sum(q)<=w:\n        return True\n    else:\n        return False\n    # O(n)\n",
        "num_ids": 45
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \n",
        "num_ids": 5
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    return False if sum(q)>w or not q==q[::-1] else True\n",
        "num_ids": 26
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # check to see if the list is balanced\n    if balanced_list(q) == True:\n        # check to see if the sum of the list is less than or equal to the maximum possible weight\n        if sum_of_list(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 80
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return (q==q[::-1]) and (sum(q)<=w)\n",
        "num_ids": 23
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # if(is_balanced(q)):\n    #     total_sum = 0\n    #     for element in q:\n    #         total_sum += element\n    #     if(total_sum <= w):\n    #         return True\n    #     else:\n    #         return False\n    # else:\n    #     return False\n    if (q == q[::-1]):\n        total_sum = 0\n        for element in q:\n            total_sum += element\n        if(total_sum <= w):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_balanced(l):\n    '''\n    Write a function that returns True if the list is balanced, and False otherwise.\n    A list is balanced if the sum of the absolute differences between the largest and smallest numbers is less than or equal to 1.\n",
        "num_ids": 204
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum = 0\n    for i in q:\n        sum += i\n    if sum <= w and is_balanced(q):\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n    if not arr:\n        return 0\n    odd_len = False\n    # is palindromic iff it is a palindrome in forward and backward\n    # and is odd iff there is one element that is odd\n    if len(arr) % 2 == 0:\n        odd_len = False\n    else:\n        odd_len = True\n    # Let's use a dictionary to keep track of the changes we can do\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    for k, v in d.items():\n        if k == v and v % 2 == 1:\n            odd_len = True\n        elif k!= v:\n            odd_len = False\n    if odd_len:\n        return 0\n    else:\n        return 1\n",
        "num_ids": 224
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # edge cases\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return 0\n",
        "num_ids": 30
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    counter = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[len(arr)-1-i]:\n            continue\n        else:\n            counter += 1\n    return counter\n",
        "num_ids": 52
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # answer = 0\n    # for x in range(len(arr)):\n    #     for y in range(x, len(arr)):\n    #         if arr[x:y+1] == arr[x:y+1][::-1]:\n    #             answer = min(answer, len(arr[x:y+1]) - len(arr[x:y+1][::-1]))\n",
        "num_ids": 98
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return 0\n    return smallest_change_recursive(arr, 0, len(arr) - 1)\n",
        "num_ids": 36
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # change_arr = []\n    # for i in arr:\n    #     if i not in change_arr:\n    #         change_arr.append(i)\n",
        "num_ids": 41
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Your code here\n    return\n",
        "num_ids": 10
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # If the array is palindromic, no changes are needed\n    if is_palindromic(arr):\n        return 0\n    # If the array is not palindromic, we need to change a maximum of half the array\n    half_length = len(arr)//2\n    count = 0\n    for i in range(half_length):\n        # If the first element in the array is greater than the last element in the array,\n        # we need to change the minimum of the two elements. Otherwise, we only need to change\n        # the element at index i.\n        if arr[i] > arr[-1-i]:\n            count += min(arr[i], arr[-1-i]) - arr[i]\n            arr[i] = min(arr[i], arr[-1-i])\n            arr[-1-i] = min(arr[i], arr[-1-i])\n    # If the length of the array is odd, we need to change the middle element too\n    if len(arr)%2 == 1:\n        count += abs(arr[half_length] - arr[half_length-1])\n        arr[half_length] = arr[half_length-1]\n    return count\n",
        "num_ids": 288
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(lst1) > len(lst2):\n        return lst2\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst1\n",
        "num_ids": 56
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [x for x in lst1 if len(''.join(x)) < len(''.join(lst2))",
        "num_ids": 29
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [i for i in lst1 if len(''.join(i)) <= len(''.join(lst2))",
        "num_ids": 29
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst1_chars = sum([len(s) for s in lst1])\n    lst2_chars = sum([len(s) for s in lst2])\n    \n    if lst1_chars < lst2_chars:\n        return lst1\n    elif lst1_chars > lst2_chars:\n        return lst2\n    else:\n        return lst1\n",
        "num_ids": 104
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i for i in lst1 if sum([len(j) for j in lst2 if i.lower().find(j.lower())!= -1]) == sum(len(j) for j in lst1)] or lst2",
        "num_ids": 58
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst1) > len(lst2):\n        return lst2\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst1",
        "num_ids": 55
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [x for x in lst1 if len(x) < len(lst2) or len(x) == len(lst2)][0]\n",
        "num_ids": 39
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #\n    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    else:\n        return lst1\n",
        "num_ids": 59
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    newlst = []\n    for x in lst1:\n        count += len(x)\n    for y in lst2:\n        count -= len(y)\n    for x in lst1:\n        if count < 0:\n            newlst.append(x)\n    for y in lst2:\n        if count < 0:\n            newlst.append(y)\n    return newlst\n",
        "num_ids": 105
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not(a <= 100):\n        return False\n    else:\n        # For loop to check each possible number that could be a divider of a.\n        for divider in range(2, a):\n            # if a % divider == 0, then the number cannot be the product of 3 prime numbers,\n            # and a must be divided by divider.\n            if a % divider == 0:\n                return False\n        # if the loop goes through the entire list and the number has no divider, then it can be\n        # multiplied by 3 prime numbers.\n        return True\n",
        "num_ids": 134
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    primes = []\n    for i in range(2, 100):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    for num in primes:\n        if a % num == 0:\n            is_prime = True\n        else:\n            is_prime = False\n            break\n    return is_prime\n",
        "num_ids": 115
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    primes = get_prime_numbers(100)\n    for p in primes:\n        if a % p == 0:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(2,int(math.sqrt(a))):\n        if a%i == 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    is_prime = lambda x: x > 1 and all(x % i for i in range(2, x))\n    for i in range(2, a):\n        if is_prime(i):\n            for j in range(2, a):\n                if is_prime(j):\n                    for k in range(2, a):\n                        if is_prime(k):\n                            if i*j == k*i*j:\n                                return True\n    return False\n",
        "num_ids": 109
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if a < 2: return False\n    if a < 4: return True\n    #if a % 2 == 0 or a % 3 == 0: return False\n    for i in range(3, a, 2):\n        if a % i == 0 and is_prime(i):\n            for j in range(i*i, a, i):\n                if a % j == 0 and is_prime(j):\n                    return True\n    return False\n",
        "num_ids": 103
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in range(2,a):\n        if a%i == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(2, a):\n        if a % i!= 0:\n            continue\n        elif is_prime(i) and is_prime(a/i):\n            return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(2, 100):\n        if a % i == 0:\n            return is_prime(i) and is_prime(a/i)\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # import math as m\n    # a = int(input())\n    if a % 3 == 0:\n        if a == 1:\n            return True\n        else:\n            return False\n    elif a % 5 == 0:\n        if a == 5:\n            return True\n        else:\n            return False\n    elif a % 7 == 0:\n        if a == 7:\n            return True\n        else:\n            return False\n    elif a % 13 == 0:\n        if a == 13:\n            return True\n        else:\n            return False\n    else:\n        return True\n",
        "num_ids": 140
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return int(x) ** int(n) == x\n",
        "num_ids": 15
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return True if n**int(x)==x else False\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Base Case \n    if x == n: \n        return True\n    if x % n!= 0:\n        return False\n    return is_simple_power(x/n, n) \n",
        "num_ids": 49
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x == n**(int(x**(1/n)))\n",
        "num_ids": 18
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1:\n        return True\n    if x == 1:\n        return False\n    else:\n        return x % n == 0\n",
        "num_ids": 35
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0:\n        return False\n    i = 0\n    while i < x:\n        if i ** n == x:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    raise NotImplementedError(\"TODO: Implement for Task 01\")\n",
        "num_ids": 19
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if x == 1:\n        return True\n    elif x == 0 or x % n == 0:\n        return False\n    else:\n        return is_simple_power(x, n/2)\n",
        "num_ids": 49
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if x**(1/n) == x:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    x=x/n\n    return x==int(x)\n",
        "num_ids": 17
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    cube = a**(1/3)\n    if cube == round(cube):\n        return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if int(a **(1/3)) **3 == a:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    cubed = a**(1/3)\n    if cubed % 1 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return a**(1/3) % 1 == 0\n",
        "num_ids": 15
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return a**(1./3)%1==0\n",
        "num_ids": 15
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return (a**(1/3))**3 == a\n",
        "num_ids": 16
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a**(1./3.) == int(a**(1./3.)):\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    import math\n    if a < 0:\n        return True\n    else:\n        b = math.sqrt(a)\n        if b == int(b):\n            return True\n        else:\n            return False\nprint(iscube(1))\nprint(iscube(2))\nprint(iscube(-1))\nprint(iscube(64))\nprint(iscube(0))\nprint(iscube(180))\n",
        "num_ids": 100
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return a**(1/3) % 1 == 0\n",
        "num_ids": 15
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # If you are able to solve it without using any loop at all, \n    # that would be great. However, try using a loop to help you solve it.\n    for i in range(int(math.sqrt(a)), 0, -1):\n        if i ** 3 == a:\n            return True\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    import math\n    primes = [2,3,5,7]\n    hex_digits = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,\n    'A':10,'B':11,'C':12,'D':13,'E':14,'F':15}\n    # if input is None or empty string, return 0\n    if not num or num == \"\":\n        return 0\n    # if input is a prime, return 1\n    if is_prime(int(num)):\n        return 1\n    # create list for prime digits\n    prime_list = []\n    # loop through hexadecimal string\n    for i in num:\n        # convert hexadecimal string to decimal\n        dec = hex_digits.get(i)\n        # determine if decimal is a prime\n        if is_prime(dec):\n            # if yes, add to prime list\n            prime_list.append(dec)\n    # count how many digits are in prime list\n    return len(prime_list)\n",
        "num_ids": 263
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if num == '':\n        return 0\n    else:\n        return sum([1 if int(num[i]) in [2, 3, 5, 7] else 0 for i in range(len(num))])\n",
        "num_ids": 51
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(num)):\n        if(num[i] == \"A\" or num[i] == \"B\" or num[i] == \"C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\"):\n            count += 1\n    return count\n",
        "num_ids": 85
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    decimal_num = int(num, 16)\n    num_of_prime_numbers = 0\n    for number in range(2, decimal_num+1):\n        if is_prime(number):\n            num_of_prime_numbers += 1\n    return num_of_prime_numbers\n",
        "num_ids": 73
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    import string\n    p_arr = []\n    try:\n        #assert type(num) is str\n        for i in range(len(num)):\n            if num[i] not in string.hexdigits or num[i] not in string.ascii_uppercase:\n                raise AssertionError\n            if num[i] == 'A' or num[i] == 'B' or num[i] == 'C' or num[i] == 'D' or num[i] == 'E' or num[i] == 'F':\n                if num[i] in p_arr:\n                    raise AssertionError\n                p_arr.append(num[i])\n            if num[i] == '2' or num[i] == '3' or num[i] == '5':\n                if num[i] in p_arr:\n                    raise AssertionError\n                p_arr.append(num[i])\n            if num[i] == '7':\n                if num[i] in p_arr:\n                    raise AssertionError\n                p_arr.append(num[i])\n            if num[i] == '11':\n                if num[i] in p_arr:\n                    raise AssertionError\n                p_arr.append(num[i])\n            if num[i] == '13':\n                if num[i] in p_arr:\n                    raise AssertionError\n                p_arr.append(num[i])\n        print(p_arr)\n        print(len(p_arr))\n    except AssertionError:\n        print(\"Incorrect input!\")\n",
        "num_ids": 384
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    key_list = ['2','3','5','7','B','D']\n    res_list = []\n    for i in key_list:\n        res_list.append(num.count(i))\n    return sum(res_list)",
        "num_ids": 58
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    import numpy as np\n    \n    try:\n        int(num, 16)\n    except ValueError:\n        return 0\n    \n    if len(num) > 1:\n        check = [int(digit) for digit in num[1:]]\n    else:\n        check = [int(num)]\n    check.extend([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n    check = np.array(check)\n    \n    count = 0\n    for i in range(len(check)):\n        if check[i] in num:\n            count += 1\n    return count\n",
        "num_ids": 181
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # define all the primes\n    primes = (\n    2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97\n    )\n",
        "num_ids": 69
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # ************** WORKS ONLY WITH ONE NUMBER ***********\n    # num = list(num)\n    # while '' in num:\n    #     num.remove('')\n    # if len(num) > 1:\n    #     return \"Error. Too many numbers.\"\n    # elif len(num) == 0:\n    #     return \"Error. No numbers.\"\n    # num = num[0]\n    # if len(num) < 7:\n    #     return \"Error. Too few numbers.\"\n    # num = ''.join(sorted(set(num)))\n    # num = num.upper()\n    # prime_num = 2\n    # num_digits = len(num)\n    # num_prime_digits = 0\n    # for i in num:\n    #     if is_prime(prime_num):\n    #         num_prime_digits += 1\n    #     prime_num += 1\n    # return num_prime_digits\n",
        "num_ids": 230
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = 0\n    for c in num:\n        if c == \"2\" or c == \"3\" or c == \"5\" or c == \"7\" or c == \"B\" or c == \"D\":\n            result += 1\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    num_str = str(decimal)\n    binary = ''\n",
        "num_ids": 17
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return 'db' + bin(decimal)[2:] + 'db'\n",
        "num_ids": 19
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    decimal = str(decimal)\n    return \"db\" + \"\".join(map(lambda x: x[-1], map(lambda x: bin(int(x))[2:], decimal[::-1]))) + \"db\"\n",
        "num_ids": 58
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    binary = ''\n    for decimal in range(decimal, 0, -1):\n        if decimal % 2 == 0:\n            binary += '0'\n        else:\n            binary += '1'\n    binary = 'db' + binary + 'db'\n    return binary\n",
        "num_ids": 65
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 'db' + bin(decimal)[2:] + 'db'\n",
        "num_ids": 19
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return 'db' + '{0:08b}'.format(decimal) + 'db'\n",
        "num_ids": 25
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    binary = []\n    while decimal:\n        binary.append(decimal % 2)\n        decimal //= 2\n    binary.reverse()\n    return \"db\" + \"\".join([str(i) for i in binary]) + \"db\"\n",
        "num_ids": 59
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"db\" + \"{:08b}\".format(decimal) + \"db\"\n",
        "num_ids": 23
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return 'db' + str(bin(decimal)[2:]) + 'db'\n",
        "num_ids": 22
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n    binary = \"db\" + binary + \"db\"\n    return binary\n",
        "num_ids": 49
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(s) < 3:\n        return False\n    new_s = [x for x in s]\n    print(new_s)\n    while len(new_s) > 3:\n        new_s.pop(0)\n        new_s.pop()\n        if new_s[0] == new_s[1]:\n            return False\n    if new_s[0] == new_s[1] == new_s[2]:\n        return True\n    else:\n        return False\n",
        "num_ids": 121
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = list(s)\n    s = set(s)\n    n = 0\n    while True:\n        for i in s:\n            n += int(i)**2\n        s = list(str(n))\n        if len(s) < 3:\n            return True\n        if len(s) == 3:\n            if s[0] == s[1] or s[1] == s[2] or s[0] == s[2]:\n                return False\n        n = 0\n",
        "num_ids": 119
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if len(s) < 3:\n        return False\n    \n    letters = list(s)\n    for i in range(len(s)-2):\n        if letters[i] == letters[i+1] or letters[i] == letters[i+2]:\n            return False\n            \n    return True\n",
        "num_ids": 76
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(s):\n        j = i + 1\n        while j < len(s):\n            if s[i] == s[j]:\n                return False\n            j += 1\n        i += 1\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(s) < 3:\n        return False\n    if len(set(s)) < 3:\n        return True\n    return is_happy(helper(s))\n",
        "num_ids": 43
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in range(3, len(s) + 1, 3):\n        # if there are 3 or more consecutive letters\n        # that are not distinct, return False\n        if not are_distinct(s[:i]):\n            return False\n",
        "num_ids": 59
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(s) < 3:\n        return False\n    if len(set(s)) < 3:\n        return False\n    return is_happy(reduce(lambda x,y: x + y, map(lambda x: x, ''.join(set(s)))))\n",
        "num_ids": 66
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(s) < 3:\n        return False\n    if len(set(s)) == 1:\n        return False\n    if 'aaa' in s:\n        return False\n    if 'bbb' in s:\n        return False\n    if 'ccc' in s:\n        return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(s) < 3:\n        return False\n    elif len(s) == 3:\n        return s[0]!= s[1] and s[1]!= s[2] and s[0]!= s[2]\n    elif len(s) == 4:\n        return s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3]\n    else:\n        return happy_rec(s)\n",
        "num_ids": 120
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n = len(s)\n    if n < 3:\n        return False\n    s_set = set(s)\n    count = 0\n    while True:\n        for c in s:\n            if c in s_set:\n                count += 1\n        if count == len(s):\n            return True\n        if count < 3:\n            return False\n        s = count_char(s)\n        count = 0\n",
        "num_ids": 100
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    grades = sorted(grades)\n    letters = []\n    for g in grades:\n        if g >= 4.0:\n            letters.append('A+')\n        elif g >= 3.7:\n            letters.append('A')\n        elif g >= 3.3:\n            letters.append('A-')\n        elif g >= 3.0:\n            letters.append('B+')\n        elif g >= 2.7:\n            letters.append('B')\n        elif g >= 2.3:\n            letters.append('B-')\n        elif g >= 2.0:\n            letters.append('C+')\n        elif g >= 1.7:\n            letters.append('C')\n        elif g >= 1.3:\n            letters.append('C-')\n        elif g >= 1.0:\n            letters.append('D+')\n        elif g >= 0.7:\n            letters.append('D')\n        elif g >= 0.0:\n            letters.append('D-')\n        else:\n            letters.append('E')\n    return letters\n",
        "num_ids": 260
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n    return []\n",
        "num_ids": 8
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for GPA in grades:\n        if GPA >= 4:\n            result.append(\"A+\")\n        elif GPA >= 3.7:\n            result.append(\"A\")\n        elif GPA >= 3.3:\n            result.append(\"A-\")\n        elif GPA >= 3.0:\n            result.append(\"B+\")\n        elif GPA >= 2.7:\n            result.append(\"B\")\n        elif GPA >= 2.3:\n            result.append(\"B-\")\n        elif GPA >= 2.0:\n            result.append(\"C+\")\n        elif GPA >= 1.7:\n            result.append(\"C\")\n        elif GPA >= 1.3:\n            result.append(\"C-\")\n        elif GPA >= 1.0:\n            result.append(\"D+\")\n        elif GPA >= 0.7:\n            result.append(\"D\")\n        elif GPA >= 0.0:\n            result.append(\"D-\")\n        elif GPA == 0.0:\n            result.append(\"E\")\n    return result\n",
        "num_ids": 256
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    letter_grades = []\n    for g in grades:\n        if g >= 4.0:\n            letter_grades.append('A+')\n        elif g >= 3.7:\n            letter_grades.append('A')\n        elif g >= 3.3:\n            letter_grades.append('A-')\n        elif g >= 3.0:\n            letter_grades.append('B+')\n        elif g >= 2.7:\n            letter_grades.append('B')\n        elif g >= 2.3:\n            letter_grades.append('B-')\n        elif g >= 2.0:\n            letter_grades.append('C+')\n        elif g >= 1.7:\n            letter_grades.append('C')\n        elif g >= 1.3:\n            letter_grades.append('C-')\n        elif g >= 1.0:\n            letter_grades.append('D+')\n        elif g >= 0.7:\n            letter_grades.append('D')\n        elif g >= 0.0:\n            letter_grades.append('D-')\n        elif g >= 0.0:\n            letter_grades.append('E')\n    return letter_grades\n    \nif __name__ == \"__main__\":\n    grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    print(numerical_letter_grade(grades))\n",
        "num_ids": 370
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for gpa in grades:\n        if gpa > 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n    \n",
        "num_ids": 267
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if string.isalpha() == True:\n        return False\n    elif string.isspace() == True:\n        return False\n    elif len(string) == 1:\n        return True\n    elif len(string) == 2:\n        return True\n    elif len(string) == 3:\n        return True\n    else:\n        for x in range(2,int(len(string) / 2) + 1):\n            if len(string) % x == 0:\n                return False\n        return True\n",
        "num_ids": 122
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(string) in primes()\n",
        "num_ids": 12
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(string) == 0:\n        return True\n    else:\n        return len(string) == prime(len(string))\n",
        "num_ids": 33
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(string) % 2!= 0 and len(string)!= 1:\n        if sum([1 for i in range(len(string)) if string[i] == string[i-1]]) == 0:\n            return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(string) in [1,2,3,5,7]:\n        return True\n    elif len(string) % 2 == 0:\n        return False\n    else:\n        if is_prime(len(string)) == True:\n            return True\n        else:\n            return False\n",
        "num_ids": 71
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(string) <= 1:\n        return True\n    else:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n        return True\n",
        "num_ids": 53
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(string) in [x for x in range(1,int(len(string)/2)+1) if len(string)%x == 0]\n",
        "num_ids": 38
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    number = 1\n    for i in string:\n        number += 1\n    if number == 2:\n        return True\n    elif number == 3:\n        return True\n    else:\n        divisor = 2\n        while divisor <= number / 2:\n            if number % divisor == 0:\n                return False\n            else:\n                divisor += 1\n        return True\n    pass\n",
        "num_ids": 96
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(string) in primes(string)\n",
        "num_ids": 14
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # return len(string) in prime_num\n    return len(string) in prime_num\n",
        "num_ids": 24
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return starts_ends_num(n, 1, 1)\n",
        "num_ids": 16
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * starts_one_ends(n-1) + ends_one_starts(n)\n",
        "num_ids": 53
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Assume that n is an integer and n >= 1\n    # Return the sum of the count of the numbers of n-digit positive integers\n    # that start or end with 1.\n",
        "num_ids": 43
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n_dict = {0:0, 1:1}\n    i = 2\n    while i < n+1:\n        j = 0\n        while j < i:\n            if j+1 in n_dict or i-j in n_dict:\n                n_dict[i] += 1\n            j += 1\n        i += 1\n    return n_dict[n]\n",
        "num_ids": 90
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 2*(10**(n-1) - 9*(10**(n-2)) + 9*(10**(n-3)) - 8*(10**(n-4)) + 7*(10**(n-5)) - 6*(10**(n-6)) + 5*(10**(n-7)) - 4*(10**(n-8)) + 3*(10**(n-9)) - 2*(10**(n-10)))\n",
        "num_ids": 113
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return 9 * starts_one_ends(n - 1) + starts_one_ends(n - 2)\n",
        "num_ids": 42
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum(starts_or_ends(n, 1) for i in range(10))\n",
        "num_ids": 24
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return(starts_one_ends_helper(n, 0, 0))\n",
        "num_ids": 21
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    num_of_digits = len(str(n))\n    total = 0\n    # Starting with 1, ending with 1\n    total += starts_end_with_one(1, num_of_digits)\n    # Starting with 1, ending with n\n    total += starts_end_with_one(1, num_of_digits - 1)\n    # Starting with n, ending with 1\n    total += starts_end_with_one(num_of_digits, 1)\n    # Starting with n, ending with n\n    total += starts_end_with_one(num_of_digits, num_of_digits)\n    return total\n",
        "num_ids": 178
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2) + starts_one_ends(n - 3)\n",
        "num_ids": 75
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return bin(N).replace(\"0b\", \"\")\n",
        "num_ids": 15
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    #TODO: Implement me!\n    return \"0\"\n",
        "num_ids": 19
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 2\n    return str(binary_sum)\n",
        "num_ids": 39
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    binary_number = list(format(N, 'b'))\n    print(binary_number)\n",
        "num_ids": 25
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    bin_N = bin(N)[2:]\n    sum_of_digits = sum(map(int,bin_N))\n    return sum_of_digits\n",
        "num_ids": 43
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    bin_num = str(bin(N))\n    bin_num = bin_num[2:]\n    print(bin_num)\n    bin_num = [int(i) for i in bin_num]\n    bin_num = list(map(str,bin_num))\n    bin_num = ''.join(bin_num)\n    return bin_num\n    \nif __name__ == \"__main__\":\n    assert solve(1000) == \"1\"\n    assert solve(150) == \"110\"\n    assert solve(147) == \"1100\"\n    assert solve(1000) == \"1\"\n    print(\"Test passed\"",
        "num_ids": 150
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    digits = [int(digit) for digit in str(N)]\n    digit_sum = sum(digits)\n    return bin(digit_sum)\n",
        "num_ids": 38
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    if N in [0, 1]:\n        return N\n    if N in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n        return N\n    if N % 2 == 0:\n        return solve(N//2)\n    else:\n        return solve(N//2) + N % 2\n",
        "num_ids": 112
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum_ = 0\n    for i in str(N):\n        sum_ += int(i)\n    return bin(sum_)[2:]\n    \n    \nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(147))\n    print(solve(150)",
        "num_ids": 76
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    new_lst = []\n    for i in range(1, len(lst), 2):\n        new_lst.append(lst[i])\n",
        "num_ids": 39
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    # lst = [4, 2, 6, 7]\n    # lst_even_odd_index = [4, 2, 6, 7]\n    # lst_even_odd_index = [2, 6, 0, 7]\n    # lst_even_odd_index = [2, 6, 0, 7]\n    # lst_even_odd_index = [2, 6, 0, 7]\n    # lst_even_odd_index = [2, 6, 0, 7]\n    # lst_even_odd_index = [2, 6, 0, 7]\n    # lst_even_odd_index = [2, 6, 0, 7]\n    # lst_even_odd_index = [2, 6, 0, 7]\n    # lst_even_odd_index = [2, 6, 0, 7]\n",
        "num_ids": 239
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(0, len(lst)):\n            if (i % 2 == 1):\n                sum += lst[i]\n        return sum\n",
        "num_ids": 63
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(i for i in lst[1::2])\n",
        "num_ids": 17
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    new_list = []\n    for num in lst:\n        if num % 2!= 0 and len(lst) > 1:\n            new_list.append(num)\n        elif num % 2!= 0 and len(lst) == 1:\n            new_list.append(num)\n        \n    return sum(new_list)\n",
        "num_ids": 84
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    evens_at_odds = [i for i in lst if i % 2 == 0]\n    return sum(evens_at_odds)\n",
        "num_ids": 38
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum([i for i in lst if i % 2 == 0 and lst.index(i) % 2!= 0])",
        "num_ids": 31
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(1, len(lst), 2):\n        lst[i] += lst[i - 1]\n    return lst",
        "num_ids": 36
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([i for i in lst if i % 2!= 0])\n",
        "num_ids": 20
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return''.join([word[0]+''.join(sorted(word[1:])) for word in s.split()])\n",
        "num_ids": 30
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Your code here\n    # word_list = []\n    # ordered_word_list = []\n    # for word in s.split():\n    #     word_list.append(word)\n    # word_list.sort()\n    # for word in word_list:\n    #     ordered_word_list.append(word)\n    # return''.join(ordered_word_list)\n",
        "num_ids": 93
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not s:\n        return ''\n",
        "num_ids": 11
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return''.join([w[w.index(' '):][::-1]+w[:w.index(' ')][::-1] for w in s.split(' ')])\n",
        "num_ids": 46
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \" \".join(sorted(s.split(), key=lambda x: [ord(c) for c in x]))\n",
        "num_ids": 31
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if type(s) is not str:\n        return 'Please input a string'\n    return''.join([''.join(sorted(word)) for word in s.split(' ')])\n",
        "num_ids": 46
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s_list = s.split(' ')\n    s_ordered = []\n    for i in range(len(s_list)):\n        s_ordered.append(anti_shuffle_helper(s_list[i]))\n    return''.join(s_ordered)\n",
        "num_ids": 67
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s = s.split()\n    new_s = ''\n    for i in s:\n        new_s += ''.join(sorted(i))\n    return new_s\n",
        "num_ids": 44
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    words = s.split(' ')\n    new_words = []\n    for i, word in enumerate(words):\n        letters = list(word)\n        letters.sort()\n        word = ''.join(letters)\n        new_words.append(word)\n        if i < len(words)-1:\n            new_words.append(' ')\n    return ''.join(new_words)\n",
        "num_ids": 96
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not lst:\n        return []\n    res = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            res.append((i, lst[i].index(x)))\n    res = list(set(res))\n    res.sort()\n    res.sort(key=lambda x: (-x[0], x[1]))\n    return res\n",
        "num_ids": 98
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    coordinates = []\n    for idx, row in enumerate(lst):\n        if x in row:\n            coordinates.append((idx, row.index(x)))\n    coordinates.sort()\n    coordinates.sort(key=lambda x: x[1], reverse=True)\n    return coordinates\n",
        "num_ids": 75
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n    # Xo\u00e1 d\u00f2ng sau v\u00e0 vi\u1ebft code v\u00e0o \u0111\u00e2y set c\u00e1c gi\u00e1 tr\u1ecb ph\u00f9 h\u1ee3p\n    raise NotImplementedError(\"H\u1ecdc vi\u00ean ch\u01b0a l\u00e0m b\u00e0i n\u00e0y\")\n",
        "num_ids": 81
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    row_list = lst\n    for idx, row in enumerate(row_list):\n        for idx2, item in enumerate(row):\n            if item == x:\n                result.append((idx, idx2))\n    result = sorted(result)\n    result = sorted(result, key=lambda tup: tup[0])\n    result = sorted(result, key=lambda tup: tup[1])\n    return result\n",
        "num_ids": 113
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l = []\n    for i, row in enumerate(lst):\n        for j, column in enumerate(row):\n            if column == x:\n                l.append((i, j))\n    l.sort(key=lambda x: (x[0], -x[1]))\n    return l\n",
        "num_ids": 74
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for index, row in enumerate(lst):\n        for i, num in enumerate(row):\n            if x == num:\n                result.append((index, i))\n    result = sorted(result)\n    result = sorted(result, key=lambda x: x[0])\n    result = sorted(result, key=lambda x: x[1], reverse=True)\n    return result\n",
        "num_ids": 98
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    coordinates = []\n    for row_index, row in enumerate(lst):\n        for column_index, number in enumerate(row):\n            if number == x:\n                coordinates.append((row_index, column_index))\n",
        "num_ids": 58
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    result = []\n    \n    for index, row in enumerate(lst):\n        for index_r, column in enumerate(row):\n            if column == x:\n                result.append((index, index_r))\n    \n    result.sort()\n    result.sort(key=lambda x: x[1], reverse=True)\n    \n    return result\n",
        "num_ids": 89
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    if not lst:\n        return []\n    \n    ans = []\n    \n    for i, row in enumerate(lst):\n        if x in row:\n            ans.append((i, row.index(x)))\n    \n    ans.sort()\n    \n    return [(row, ans.index(row)) for row in sorted(ans, key=lambda x: x[0])]\n    \nprint(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n    ], 1))\nprint(get_row([], 1))\nprint(get_row([[], [1], [1, 2, 3]], 3))\n",
        "num_ids": 187
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    rows = sorted(map(lambda x: x[0], lst))\n    for r, row in enumerate(lst):\n        result += [(r, col) for col in sorted(list(filter(lambda x: x < len(row), map(lambda y: y[1], lst))), reverse=True)]\n    return list(filter(lambda x: x[0] == x[1], result))\n",
        "num_ids": 102
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    return_array = []\n    while array:\n        current_element = array.pop(0)\n        return_array.append(current_element)\n        if len(array) == 0:\n            break\n        while array:\n            if current_element + array[0] > current_element + array[len(array) - 1]:\n                return_array.append(array.pop(0))\n            else:\n                break\n    return return_array\n",
        "num_ids": 131
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(array) == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(array) <= 1: return array\n    pivot = array[0]\n    left_list = []\n    right_list = []\n    pivots = []\n    for i in array[1:]:\n        if i < pivot:\n            left_list.append(i)\n        elif i > pivot:\n            right_list.append(i)\n        else:\n            pivots.append(i)\n    if sum(pivot, array[-1]) % 2 == 0:\n        return sort_array(right_list) + pivots + sort_array(left_list)\n    else:\n        return sort_array(left_list) + pivots + sort_array(right_list)",
        "num_ids": 169
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not array: return []\n",
        "num_ids": 9
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(array) == 0:\n        return []\n    else:\n        for index in range(1, len(array)):\n            current_value = array[index]\n            position = index\n            while position > 0 and (array[position - 1] > current_value or (array[position - 1] + current_value) % 2 == 0):\n                array[position] = array[position - 1]\n                position -= 1\n            array[position] = current_value\n",
        "num_ids": 112
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Write your code here\n    sorted_array = array.copy()\n    sorted_array.sort()\n    if sum(array[0], array[len(array) - 1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array\n",
        "num_ids": 72
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(array, key=lambda x: x if sum(x) % 2 == 0 else -x)\n",
        "num_ids": 27
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sorted_array = array[:]\n    sorted_array.sort()\n",
        "num_ids": 20
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    start = 0\n    end = len(array) - 1\n    while start < end:\n        if array[start] + array[end] % 2 == 0:\n            array[start], array[end] = array[end], array[start]\n            start += 1\n            end -= 1\n        else:\n            if array[start] < array[end]:\n                array[start], array[end] = array[end], array[start]\n                start += 1\n                end -= 1\n            else:\n                array[start], array[end] = array[end], array[start]\n                start += 1\n                end -= 1\n",
        "num_ids": 147
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sorted_array = sorted(array)\n    result = [0] * len(array)\n    for i, num in enumerate(array):\n        result[i] = sorted_array[i]\n    return result",
        "num_ids": 52
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    new_str = ''\n    for letter in s:\n        if letter.isalpha() is True:\n            if letter.islower() is True:\n                new_str += chr(((ord(letter) - 97) + 2) * 2 + 97)\n            else:\n                new_str += chr(((ord(letter) - 65) + 2) * 2 + 65)\n        else:\n            new_str += letter\n    return new_str\n",
        "num_ids": 108
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lower = 'abcdefghijklmnopqrstuvwxyz'\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    enc = ''\n    for c in s:\n        if c.islower():\n            enc += lower[lower.index(c)+2*2]\n        elif c.isupper():\n            enc += upper[upper.index(c)+2*2]\n        else:\n            enc += c\n    return enc\n",
        "num_ids": 116
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    d = {'a':'h', 'b':'i', 'c':'j', 'd':'k', 'e':'l', 'f':'m', 'g':'n', 'h':'o', 'i':'p', 'j':'q', 'k':'r', 'l':'s','m':'t', 'n':'u', 'o':'v', 'p':'w', 'q':'x', 'r':'y','s':'z', 't':'a', 'u':'b', 'v':'c', 'w':'d', 'x':'e', 'y':'f', 'z':'g', 'A':'H', 'B':'I', 'C':'J', 'D':'K', 'E':'L', 'F':'M', 'G':'N', 'H':'O', 'I':'P', 'J':'Q', 'K':'R', 'L':'S', 'M':'T', 'N':'U', 'O':'V', 'P':'W', 'Q':'X', 'R':'Y', 'S':'Z', 'T':'A', 'U':'B', 'V':'C', 'W':'D', 'X':'E', 'Y':'F', 'Z':'G'}\n    return ''.join([d.get(c,c) for c in s])\n",
        "num_ids": 337
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #TODO: use a dictionary to store the alphabet\n    #TODO: use a list to store the alphabet\n    #TODO: create a function to shift letters\n    #TODO: shift each letter in the string\n    #TODO: add each shifted letter to a new string\n    return \"\"\n",
        "num_ids": 74
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    encrypt = \"\"\n    for i in range(len(s)):\n        if s[i] =='':\n            encrypt = encrypt + s[i]\n        elif s[i] == 'z':\n            encrypt = encrypt + 'a'\n        elif s[i] >= 'a' and s[i] <= 'z':\n            encrypt = encrypt + chr(ord(s[i]) + 2)\n        else:\n            encrypt = encrypt + chr(ord(s[i]) + 2 - 26)\n    return encrypt\nprint(encrypt('asdfghjkl'))\nprint(encrypt('hi'))\nprint(encrypt('et'))\n",
        "num_ids": 162
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    rot = -2\n    ret = []\n    for c in s:\n        i = get_index(c)\n        n = i + rot\n        if n > 25:\n            n %= 25\n        ret.append(get_letter(n))\n    return \"\".join(ret)",
        "num_ids": 69
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    mapped_list = [letter + 2 * 2 for letter in s]\n    return ''.join([alphabet[i] for i in mapped_list])\n",
        "num_ids": 38
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    encrypt_string = ''\n    for char in s:\n        if ord(char) >= 97:\n            if (ord(char) + 2) > 122:\n                encrypt_string += chr(96 + ((ord(char) + 2) - 122))\n            else:\n                encrypt_string += chr(ord(char) + 2)\n        else:\n            encrypt_string += chr(ord(char) + 2)\n    return encrypt_string\n",
        "num_ids": 111
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your code here\n    # return # Put your return value here\n    \n    # key = (list(string.ascii_lowercase))\n    # key = key[2:]\n    # key.extend(key)\n    # print(key)\n    # key = ''.join(key)\n    # key = key[0:len(s)]\n    \n    # print(key)\n",
        "num_ids": 95
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(lst) < 2:\n        return None\n    min_val = min(lst)\n    next_smallest_val = min_val\n    for num in lst:\n        if num < min_val and num > next_smallest_val:\n            next_smallest_val = num\n    return next_smallest_val\n",
        "num_ids": 84
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return _next_smallest(lst)\n",
        "num_ids": 13
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lst.sort()\n    return lst[1] if len(lst)>1 else None\n",
        "num_ids": 26
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    smallest = float('inf')\n    for i in range(len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    smallest_index = lst.index(smallest)\n    # lst[smallest_index] is the smallest element in lst\n    if smallest_index == 0:\n        return None\n    elif smallest_index == len(lst) - 1:\n        return None\n    elif smallest_index == len(lst) - 2:\n        return lst[smallest_index + 1]\n    else:\n        return lst[smallest_index + 1]\n",
        "num_ids": 156
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    # Your code here\n",
        "num_ids": 9
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst = set(lst)\n    lst.remove(min(lst))\n    return min(lst) if lst else None\n",
        "num_ids": 36
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if lst == []:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n",
        "num_ids": 32
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(lst) == 1:\n        return None\n    elif len(lst) == 0:\n        return None\n    else:\n        lst = sorted(lst)\n        if len(lst) > 1:\n            return lst[1]\n        else:\n            return None\n    \nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1])",
        "num_ids": 134
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n    \ndef first_occurrence_index(lst, x):\n    \"\"\"\n    Write a function first_occurrence_index() that takes a list and returns the index of the first occurrence of the value x.\n    Return -1 if the value x is not in the list.\n    \n    first_occurrence_index([1, 2, 3, 4, 5], 3) == 3\n    first_occurrence_index([1, 2, 3, 4, 5], 1) == 0\n    first_occurrence_index([1, 2, 3, 4, 5], 7) == -1\n    first_occurrence_index([], 7) == -1\n    \"\"\"\n    if x not in lst:\n        return -1\n    else:\n        return lst.index(x)\n    \ndef remove_every_other(lst):\n    \"\"\"\n    Write a function remove_every_other() that removes every other element from a list.\n    \n    remove_every_other([1, 2, 3, 4, 5]) == [1, 3, 5]\n    remove_every_other([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 6]\n    remove_every_other([]) == []\n    remove_every_other([1]) == [1]\n    \"\"\"\n    return lst[::2]\n    \ndef average_of_three(a, b, c):\n    \"\"\"\n    Write a function average_of_three() that takes three numbers and returns their average.\n    Return None if there is an error.\n    \n    average_of_three(1, 2, 3) == 2\n    average_of_three(1, 2, -1) == None\n    average_of_three(1, 2, '3') == None\n    \"\"\"\n    try:\n        return (a+b+c)/3\n    except:\n        return None\n",
        "num_ids": 474
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    import re\n    boredoms = re.findall(r'I\\b', S)\n    return len(boredoms)\n",
        "num_ids": 33
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for word in S.split():\n        if word == \"I\":\n            count = count + 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # 1. Split the string into a list, where each word is an element\n    S = S.split()\n    # 2. Loop over the words, and if the word is \"I\"...\n    boredom_count = 0\n    for word in S:\n        if word[0] == \"I\":\n            boredom_count += 1\n    # 3. Return the number of words that are \"I\"\n    return boredom_count\n",
        "num_ids": 102
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len(find_boredoms(S))\n",
        "num_ids": 14
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return S.count(\"I\")\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sentences = S.split('.')\n    sentences = [s.split('?') for s in sentences]\n    sentences = [s.split('!') for s in sentences]\n    sentences = [s for sub in sentences for s in sub]\n    sentences = [s for s in sentences if s.startswith('I')]\n    return len(sentences)\n",
        "num_ids": 91
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum([\n        line.startswith(\"I\")\n        for line in S.split('.')\n    ])\n",
        "num_ids": 30
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return sum([sentence.startswith('I') for sentence in S.split('.')])\n    \n",
        "num_ids": 29
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    boredom = 0\n    sentence = S.split('.')\n    for i in sentence:\n        if \"i\" in i[:1]:\n            boredom += 1\n    return boredom\n",
        "num_ids": 49
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return any([x == y + z, x == z + y, y == x + z, y == z + x]) and all([isinstance(x, int), isinstance(y, int), isinstance(z, int)])\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ",
        "num_ids": 1024
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if x+y == z or x+z == y or y+z == x:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if x == int(x) and y == int(y) and z == int(z) and z!= 0:\n        if x == z+y or y == z+x:\n            return True\n        else:\n            return False\n    elif x == int(x) and y == int(y) and z == int(z) and z == 0:\n        return True\n    else:\n        return False\n        \n        ",
        "num_ids": 101
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x % 1 == 0 and y % 1 == 0 and z % 1 == 0 and (x + y == z or y + z == x or z + x == y)\n",
        "num_ids": 41
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if type(x)==type(z)==type(y):\n        if x==y+z or y==x+z or z==x+y:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \n",
        "num_ids": 61
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x == y+z or y == x+z or z == x+y and int(x) == x and int(y) == y and int(z) == z\n",
        "num_ids": 42
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x + y == z\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return(isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x+y == z or y+z == x or z+x == y))\n",
        "num_ids": 48
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if x == int(x) and y == int(y) and z == int(z):\n        if (x + y == z or x + z == y or z + y == x):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n",
        "num_ids": 68
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    message = message.lower()\n    \n    # replace each vowel with character that is 2 places ahead in alphabet\n    # this is needed because letters are written with their first vowel in the alphabet\n    message = message.replace('a', chr(ord('a') + 2))\n    message = message.replace('e', chr(ord('e') + 2))\n    message = message.replace('i', chr(ord('i') + 2))\n    message = message.replace('o', chr(ord('o') + 2))\n    message = message.replace('u', chr(ord('u') + 2))\n    \n    # swap case of each letter\n    message = message.swapcase()\n    \n    return message\n    \n",
        "num_ids": 173
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n    \ndef decode(encoded_message):\n    \"\"\"\n    Write a function that takes an encoded message, and decodes it. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('TKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    pass\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids": 108
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    letters = 'abcdefghijklmnopqrstuvwxyz'\n    for char in message:\n        if char.lower() in letters:\n            message = message.replace(char, letters[letters.index(char.lower())+2])\n    return message\n",
        "num_ids": 65
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    vowels = \"aeiouAEIOU\"\n    encoded = \"\"\n    for i in range(len(message)):\n        if message[i].lower() in vowels:\n            encoded += message[i].lower()\n            encoded += message[i+2].lower()\n        else:\n            encoded += message[i].lower()\n    return encoded\n",
        "num_ids": 91
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # message = message.upper()\n    # for letter in message:\n    #     if letter in 'AEIOU':\n    #         message = message.replace(letter, chr(ord(letter)+2))\n    # return message\n    message = message.upper()\n    d = {'AE': 'AW', 'EI': 'EY', 'OI': 'OY', 'UI': 'UY', 'AU': 'AW'}\n    vowels = ['AE','EI','OI','UI','AU']\n    for i in range(len(message)):\n        if message[i] in vowels:\n            message = message[:i]+d[message[i]]+message[i+1:]\n    return message\n",
        "num_ids": 171
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    swap = lambda x: x.swapcase()\n    vowel = lambda x: x.lower() if x in \"aeiou\" else x\n    vowels = [vowel(x) for x in message]\n    message = message.swapcase()\n    message = [message[i].swapcase() if message[i] in \"aeiou\" else message[i] for i in range(len(message))]\n    message = ''.join(message)\n    message = message.replace('a','@').replace('e','&').replace('i','!').replace('o','(').replace('u','|')\n    return message\n",
        "num_ids": 155
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst_of_primes = []\n    lst_of_digits = []\n    for num in lst:\n        lst_of_primes.append(prime_finder(num))\n        lst_of_digits.append(digit_sum(num))\n    return max(lst_of_primes) + max(lst_of_digits)\n",
        "num_ids": 91
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\n    for i in lst:\n        for j in primes:\n            if i % j == 0:\n                break\n            if j == primes[-1]:\n                primes.append(i)\n    sum = 0\n    for k in primes:\n        sum += sum(map(int, str(k)))\n    return sum\n",
        "num_ids": 116
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def is_prime(n):\n        if n == 2 or n == 3: return True\n        if n < 2 or n%2 == 0: return False\n        if n < 9: return True\n        if n%3 == 0: return False\n        r = int(n**0.5)\n        f = 5\n        while f <= r:\n            if n%f == 0: return False\n            if n%(f+2) == 0: return False\n            f += 6\n        return True\n",
        "num_ids": 117
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    max_prime = 0\n    sum_of_digits = 0\n",
        "num_ids": 20
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst = [0,81,12,3,1,21]\n    count=0\n    for i in lst:\n        if is_prime(i):\n            count += sum_digits(i)\n    return count\ndef sum_digits(x):\n    total = 0\n    while x>0:\n        total+=x%10\n        x//=10\n    return total\ndef is_prime(num):\n    if num==1:\n        return False\n    for i in range(2,num//2+1):\n        if num%i == 0:\n            return False\n    return True\nif __name__ == '__main__':\n    print(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))",
        "num_ids": 210
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    prime_sum = []\n    for i in prime:\n        for j in lst:\n            if i == j:\n                prime_sum.append(i)\n    return sum(prime_sum)\n",
        "num_ids": 104
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def primes(maxnum):\n        number = 2\n        while number < maxnum:\n            for num in range(2, number):\n                if number % num == 0:\n                    break\n            else:\n                yield number\n            number += 1\n",
        "num_ids": 60
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    sum_of_digits = 0\n    for n in str(largest_prime):\n        sum_of_digits += int(n)\n    return sum_of_digits\n",
        "num_ids": 82
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([int(x) for x in str(max(set(lst)))])\n",
        "num_ids": 23
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    max_prime = 0\n    sum_of_digits = 0\n    for i in lst:\n        if is_prime(i) == True:\n            max_prime = i\n    for digit in str(max_prime):\n        sum_of_digits += int(digit)\n    return sum_of_digits\n",
        "num_ids": 78
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        temp = []\n        for k in dict.keys():\n            if type(k) is str:\n                temp.append(k.lower())\n            else:\n                temp.append(k)\n        if len(set(temp)) == len(dict):\n            return True\n        else:\n            return False\n",
        "num_ids": 91
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        return all(isinstance(i, str) and i.isupper() for i in dict.keys()) or all(isinstance(i, str) and i.islower() for i in dict.keys())\n",
        "num_ids": 67
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if dict == {}:\n        return False\n    else:\n        keys = dict.keys()\n        for key in keys:\n            if type(key) == str:\n                if key.islower() == True:\n                    pass\n                elif key.isupper() == True:\n                    return False\n                else:\n                    return False\n            else:\n                return False\n        return True\n",
        "num_ids": 91
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = dict.keys()\n    if not result:\n        return False\n    else:\n        for i in result:\n            if type(i) == int:\n                return False\n            else:\n                pass\n    return True\n        \ndef check_dict_k_v_same(dict):\n    \"\"\"\n    Given a dictionary, check if the sum of the keys is equal to the sum of the values.\n    The function should return False if the sum of keys is not equal to the sum of the values,\n    otherwise, it should return True.\n    Examples:\n    check_dict_k_v_same({\"a\":1, \"b\":2, \"c\":3}) should return True.\n    check_dict_k_v_same({\"a\":1, \"b\":2, \"c\":3, \"d\":4}) should return False.\n    check_dict_k_v_same({\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5}) should return False.\n    check_dict_k_v_same({\"a\":1, \"b\":2, \"c\":3}) should return False.\n    check_dict_k_v_same({\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10}) should return True.\n    check_dict_k_v_same({\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14, \"o\":15, \"p\":16, \"q\":17, \"r\":18, \"s\":19, \"t\":20, \"u\":21, \"v\":22, \"w\":23, \"x\":24, \"y\":25, \"z\":26}) should return True.\n    check_dict_k_v_same({\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14, \"o\":15, \"p\":16, \"q\":17, \"r\":18, \"s\":19, \"t\":20, \"u\":21, \"v\":22, \"w\":23, \"x\":24, \"y\":25, \"z\":26, \"aa\":27, \"bb\":28, \"cc\":29, \"dd\":30, \"ee\":31, \"ff\":32, \"gg\":33, \"hh\":34, \"ii\":35, \"jj\":36, \"kk\":37, \"ll\":38, \"mm\":39, \"nn\":40, \"oo\":41, \"pp\":42, \"qq\":43, \"rr\":44, \"ss\":45, \"tt\":46, \"uu\":47, \"vv\":48, \"ww\":49, \"xx\":50, \"yy\":51, \"zz\":52}) should return False.\n    \"\"\"\n    result = sum(dict.keys())\n    sum_of_value = 0\n    for i in dict.values():\n        sum_of_value += i\n    if result == sum_of_value:\n        return True\n    else:\n        return False\n        \ndef check_dict_is_product_of_primes(dict):\n    \"\"\"\n    Given a dictionary, the function should return True if all keys\n    are products of prime numbers (e.g. a is a product of 3 and 5;\n    b is a product of 7, 11 and 13; etc.)\n    The function should return False if not all keys are products\n    of prime numbers, and should raise a ValueError if any values\n    in the dictionary are not positive integers.\n    Examples:\n    check_dict_is_product_of_primes({\"a\":3, \"b\":5, \"c\":6, \"d\":7, \"e\":8}) should return True.\n    check_dict_is_product_of_primes({\"a\":3, \"b\":5, \"c\":6, \"d\":7, \"e\":8, \"f\":9}) shoul",
        "num_ids": 1026
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return all([isinstance(key, str) and key.isupper() or key.islower() for key in dict.keys()]) \\\n        and all([isinstance(value, str) and value.isupper() or value.islower() for value in dict.values()]) \\\n        and not dict\n",
        "num_ids": 72
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if dict:\n        temp = []\n        for i in dict:\n            if type(i)!= str:\n                return False\n            if i.isupper():\n                temp.append(i.lower())\n            else:\n                temp.append(i.upper())\n        return temp == sorted(temp)\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not dict:\n        return False\n    for key, val in dict.items():\n        if type(key)!= str:\n            return False\n        if key.isupper():\n            if type(val) == str:\n                return False\n        elif key.islower():\n            if type(val)!= str:\n                return False\n        else:\n            return False\n    return True\n",
        "num_ids": 93
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not dict:\n        return False\n    lower_case_keys = 0\n    upper_case_keys = 0\n    for key, value in dict.items():\n        if str(key).islower():\n            lower_case_keys += 1\n        if str(key).isupper():\n            upper_case_keys += 1\n    if lower_case_keys == len(dict) or upper_case_keys == len(dict):\n        return True\n    else:\n        return False\n",
        "num_ids": 114
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for k, v in dict.items():\n            if k.isalpha() == False:\n                return False\n        for k, v in dict.items():\n            if k.isupper() == True:\n                return False\n        for k, v in dict.items():\n            if k.isupper() == False:\n                return True\n",
        "num_ids": 97
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not dict:\n        return False\n    else:\n        return all([type(key) == str for key in dict.keys()])\n",
        "num_ids": 34
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(0,n):\n        if isPrime(i):\n            result.append(i)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return []\n    \n    list = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            list.append(i)\n    return list\n    \ndef is_prime(n):\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return Tru",
        "num_ids": 101
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    prime_list = []\n    prime = 2\n",
        "num_ids": 15
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            lst.append(i)\n    return lst\n",
        "num_ids": 43
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 2\n    primes = []\n    while count < n:\n        if is_prime(count):\n            primes.append(count)\n            count += 1\n        else:\n            count += 1\n",
        "num_ids": 51
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def is_prime(n):\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # I can make it a generator by using yield\n    # the only difference is the code I wrote\n    # but it is easier to read\n    # it is also possible to use filter, but I didn't do that\n    # how it works?\n    # A generator is like a list, but with only one element in it\n    # as soon as it reaches the end, it is stopped\n    # if I want to write a generator that will be an infinite generator, I can't put in a limit\n    # since the limit doesn't matter, it will run forever\n    # so, I decide to use a generator\n    # it's just like a list, but doesn't have a limit to how many elements it can hold\n    # the only difference is that it doesn't store all the elements in memory\n    # the reason why it doesn't store all the elements in memory\n    # is because it is faster to iterate over it\n    # and I need to find the limit for the loop, so I need to find a way to iterate\n    # over it without putting all the elements in memory\n    # I have 3 ways to do it\n    # 1. using a list\n    # 2. using a generator\n    # 3. using a generator and a limit to how many elements it can hold\n    # I chose the first one\n",
        "num_ids": 293
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    counter = 0\n    primes = []\n    if n == 0:\n        return []\n    if n == 1:\n        return []\n    for i in range(1, n+1):\n        if is_prime(i) == True:\n            counter += 1\n            primes.append(i)\n    return primes\n",
        "num_ids": 78
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    primes = []\n    if n >= 1:\n        primes.append(2)\n        for i in range(3, n, 2):\n            is_prime = True\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n    return primes",
        "num_ids": 102
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # handle negative numbers\n    a = abs(a)\n    b = abs(b)\n    a = str(a)\n    b = str(b)\n    # initialize the result\n    result = 0\n    # multiply the digits\n    for i in range(len(a)):\n        result += int(a[i]) * int(b[i])\n    # handle the negative numbers\n    if a[0] == '-':\n        result = 0 - result\n    if b[0] == '-':\n        result = 0 - result\n    return result\n",
        "num_ids": 132
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a*b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if abs(a) < 10 and abs(b) < 10:\n        return abs(a) * abs(b)\n    if a < 0 or b < 0:\n        return multiply(-a, -b)\n    elif a == 0 or b == 0:\n        return 0\n    else:\n        return multiply(a // 10, b) + multiply(a, b % 10)\n",
        "num_ids": 91
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    a_list = [int(x) for x in str(a)]\n    b_list = [int(x) for x in str(b)]\n    return int(str(a_list[0]) + str(b_list[0])) * int(str(a_list[1]) + str(b_list[1]))\n",
        "num_ids": 81
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return a*b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    a = abs(a)\n    b = abs(b)\n    a = [int(i) for i in str(a)]\n    b = [int(i) for i in str(b)]\n    c = []\n    for i in range(len(a)):\n        c.append(a[i] * b[i])\n    return sum(c)\n",
        "num_ids": 88
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    #a, b = (int(x) for x in input().split())\n    # The logic for the solution is that each unit digit of the \n    # product of the two numbers x and y is the product of the \n    # two unit digits of x and y. (no carry needed)\n    x = abs(a)\n    y = abs(b)\n    s = 0\n    for i in reversed(range(len(str(x)))):\n        c = x // (10 ** i)\n        d = y // (10 ** i)\n        s += c * d\n        x = x % (10 ** i)\n        y = y % (10 ** i)\n    return s\n",
        "num_ids": 163
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    else:\n        return a%10 * b%10\n",
        "num_ids": 30
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return a * b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a % 10 * b % 10\n",
        "num_ids": 11
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum([1 if s[i].upper() in VOWELS and i % 2 == 0 else 0 for i in range(len(s))])\n",
        "num_ids": 36
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s_list = list(s)\n    count = 0\n    for i in range(len(s_list)):\n        if i % 2 == 0:\n            if s_list[i].upper() in \"AEIOU\":\n                count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in VOWELS and c.isupper())\n",
        "num_ids": 35
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([1 for i, c in enumerate(s) if i%2==0 and c.upper() in 'AEIOU']",
        "num_ids": 33
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len([c for c in s[1::2] if c.isupper()])\n",
        "num_ids": 23
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum([1 if s[i] in 'AEIOU' and (i+1)%2 else 0 for i in range(len(s))])\n",
        "num_ids": 38
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowels = 'AEIOU'\n    return sum(s[i] in vowels and i%2==0 for i in range(len(s)))\n",
        "num_ids": 39
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            if i%2 == 0:\n                result += 1\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    total = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].upper() in 'AEIOU':\n            total += 1\n    return total\n",
        "num_ids": 48
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([1 for i, c in enumerate(s) if c.isupper() and i % 2 == 0])\n",
        "num_ids": 30
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return int(value)\n",
        "num_ids": 8
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    a = float(value)\n    b = int(a)\n    if a - b == 0:\n        return b\n    elif a - b < 0:\n        return b - 1\n    else:\n        return b + 1\n",
        "num_ids": 56
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return round(value) if not value.startswith('-') else -round(value)\n",
        "num_ids": 24
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return int(round(value))\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # number = float(value)\n    # closest_int = int(number)\n    # if number < 0:\n    #     closest_int -= 1\n    # elif number > 0:\n    #     closest_int += 1\n",
        "num_ids": 60
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    x = float(value)\n    if x % 1 == 0:\n        return int(x)\n    else:\n        return int(x + 0.5)\n",
        "num_ids": 40
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    closest_int = None\n    num = None\n",
        "num_ids": 15
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        m = int(n / 2)\n    else:\n        m = int((n - 1) / 2)\n    return [n] * m + [n - 2] * (n - m)\n",
        "num_ids": 57
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n > 0, \"n must be positive\"\n",
        "num_ids": 14
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 0:\n        return []\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n // 2) + [n]\n        else:\n            return make_a_pile(n // 2) + [n] + [n + 1]",
        "num_ids": 70
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        count = n\n        result = [count]\n        while count!= 0:\n            count = count // 2\n            result.append(count)\n        return result\n    else:\n        count = n\n        result = [count]\n        while count!= 0:\n            count = count // 2\n            if count == 1:\n                result.append(count)\n                count = 0\n            else:\n                result.append(count)\n        return result[::-1]\n",
        "num_ids": 121
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return [n] + make_a_pile(n + 2)\n    return [n] + make_a_pile(n + 1)\n",
        "num_ids": 46
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    level = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            level.append(level[i - 1] + 2)\n        else:\n            level.append(level[i - 1] + 1)\n    return level\n",
        "num_ids": 66
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # ===Modify codes below=============\n    # \ud55c \uc904 \uc774\uc0c1\uc758 \ucf54\ub4dc\ub85c \uc791\uc131 \uac00\ub2a5\ud558\ub098, \ubc18\ub4dc\uc2dc \uacb0\uacfc \uac12\uc744 result \ubcc0\uc218\uc5d0 \ud560\ub2f9\ud558\uc5ec \ubc18\ud658\n",
        "num_ids": 104
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        next_level = n + 2\n    else:\n        next_level = n + 1\n",
        "num_ids": 32
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n % 2 == 1:\n        return [n] * n\n    else:\n        return [n] * (n - 1) + [n - 2]\n",
        "num_ids": 40
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n <= 0:\n        return []\n    if n % 2 == 0:\n        return make_a_pile(n - 2) + [n]\n    return [n] + make_a_pile(n - 2)\n",
        "num_ids": 57
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return s.split(' ')\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return s.split(', ')\n    \n    \ndef reverse_string(s):\n    \"\"\"\n    You will be given a string of words. Your task is to return the string in reversed\n    order, with the spaces and commas left as they were. For example:\n    \n    reverse_string(\"Hi, my name is John\") == \"John is name my Hi\"\n    reverse_string(\"One, two, three, four, five, six\") == \"six, five, four, three, two, one\"\n    \"\"\"\n    \n    return''.join(reversed(s.split()))\n    \n    \ndef group_by_key(s, fn):\n    \"\"\"\n    You will be given a string of words and a function. Your task is to apply the\n    function to the string and return the dictionary (map) of results. For example:\n    \n    group_by_key(\"one, two, three, four, one, two\", lambda x: int(x) % 2 == 0) == {True: [\"four\", \"two\"], False: [\"one\", \"three\", \"one\", \"two\"]}\n    group_by_key(\"one, two, three, four, one, two\", lambda x: x[0]) == {'o': ['one', 'four'], 't': ['two'], 'n': ['one', 'two', 'three']}\n    \"\"\"\n    \n    return dict(map(lambda x: [x, fn(x)], s.split(',')))\n",
        "num_ids": 346
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    import re\n    return re.findall(r'[A-Za-z]{1,}', s)\n",
        "num_ids": 30
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return s.replace(' ','')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return s.split()\n",
        "num_ids": 8
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    return s.replace(' ', '').split(',')\n    \n    # return s.split()\n",
        "num_ids": 27
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return s.split(' ') if'' in s else s.split(',')\n",
        "num_ids": 21
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return s.split()\n",
        "num_ids": 8
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return s.replace(' ',',').split(',')\n    \n    \ndef capitalize_phrase(s):\n    \"\"\"\n    You will be given a phrase and you will need to capitalize the first character of each word.\n    \n    For example:\n    capitalize_phrase(\"my cat is a little bit of a kitty\") == \"My cat is a little bit of a kitty\"\n    capitalize_phrase(\"i want to go to the park\") == \"I want to go to the park\"\n    \"\"\"\n    return''.join([word.capitalize() for word in s.split(' ')])\n    \n    \ndef string_between(s, start, end):\n    \"\"\"\n    Given a string s and two characters, start and end,\n    the function returns the shortest substring between and including the start character and the end character (the start and end characters are not included in the substring).\n    \n    For example:\n    string_between(\"a string\", \"a\", \"z\") == \"tring\"\n    string_between(\"the end of the string\", \"a\", \"z\") == \"\"\n    \"\"\"\n    return s[s.find(start)+len(start):s.rfind(end)]\n    \n    \ndef reverse_string(s):\n    \"\"\"\n    Given a string, the function returns a reversed copy of the string.\n    \n    For example:\n    reverse_string(\"abc\") == \"cba\"\n    \"\"\"\n    return s[::-1]\n    \n    \ndef replace_chars(s, to_replace, replacement):\n    \"\"\"\n    Given a string, the function returns the string with all the characters in to_replace replaced with replacement.\n    \n    For example:\n    replace_chars(\"this is a string\", \"is\", \"was\") == \"thwas wwas a string\"\n    \"\"\"\n    return ''.join([replacement if char in to_replace else char for char in s])\n    \n    \ndef reverse_words(s):\n    \"\"\"\n    Given a string of words separated by spaces, the function returns a string in which the words have been reversed.\n    \n    For example:\n    reverse_words(\"My dog ran away\") == \"dog ran away My\"\n    \"\"\"\n    return \" \".join([word[::-1] for word in s.split(' ')])\n    \n    \ndef remove_duplicates(s):\n    \"\"\"\n    Given a string, the function returns a string in which all duplicate consecutive characters have been removed.\n    \n    For example:\n    remove_duplicates(\"AAAABBBCCDAABBB\") == \"ABCD\"\n    remove_duplicates(\"AAAABBBCCD\") == \"ABCD\"\n    \"\"\"\n    return ''.join([char for (i, char) in enumerate(s) if (i == 0 or char!= s[i-1]) and (i+1 == len(s) or char!= s[i+1])])\n    \n    \ndef string_length(s):\n    \"\"\"\n    Given a string, the function returns the number of characters in the string.\n    \n    For example:\n    string_length(\"The quick brown fox jumps over the lazy dog\") == 47\n    \"\"\"\n    return len(s)\n    \n    \ndef to_uppercase(s):\n    \"\"\"\n    Given a string, the function returns the same string but all lowercase characters have been changed to uppercase.\n    \n    For example:\n    to_uppercase(\"this is a string\") == \"THIS IS A STRING\"\n    \"\"\"\n    return s.upper()\n    \n    \ndef string_to_string(s):\n    \"\"\"\n    Given a string of digits, the function returns a string made of every other digit from the original string.\n    \n    For example:\n    string_to_string(\"1234\") == \"24\"\n    \"\"\"\n    return ''.join([s[i] for i in range(0,len(s),2)])\n    \n    \ndef find_second_maximum(s):\n    \"\"\"\n    Given a string of numbers separated by commas, the function returns the second maximum number in the string. If there is only one maximum number in the string, the function should return \"No second maximum\".\n    \n    For example:\n    find_second_maximum(\"2, 3, 1, 2\") == \"2\"\n    find_second_maximum(\"1, 3, 5, 1\") == \"No second maximum\"\n    \"\"\"\n",
        "num_ids": 1025
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #Fill in this function.\n    return -1\n",
        "num_ids": 14
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    num = int(y) - int(x) + 1\n    for i in range(num):\n        if i + int(x) == int(y) and i % 2 == 0:\n            return i\n    return -1\n",
        "num_ids": 55
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # The code below has three different cases.\n    # Cases 1 and 2 have to do with the second number, so I'll go through the\n    # first two cases to explain what each one is.\n    # Case 1. If y < x, the only even number in the range is x, since even\n    # numbers are always divisible by 2 and y < x.\n    # Case 2. If x < y, the only even number in the range is y, since even\n    # numbers are always divisible by 2 and x < y.\n    # Case 3. Otherwise, we have to check for two things. First, x and y\n    # cannot be negative numbers. Second, x and y need to be a multiple of 2\n    # if x or y is even. We can't have two even numbers in the range, so the\n    # only even number in the range is -1.\n    \n    # As an example, let's say the user entered 12 and 15. Then x would be\n    # 12, y would be 15, and the function would return -1.\n",
        "num_ids": 240
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    x = int(x)\n    y = int(y)\n    z = range(x, y + 1)\n    if x % 2 == 0 and x not in z:\n        return -1\n    else:\n        for i in z:\n            if i % 2 == 0:\n                if i not in z:\n                    return i\n            else:\n                return -1\n",
        "num_ids": 89
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    while True:\n        num = random.randint(x, y)\n        if num % 2 == 0 and num < y:\n            return num\n        else:\n            continue\n",
        "num_ids": 43
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if x > y:\n        return -1\n    elif x % 2!= 0:\n        return -1\n    elif y % 2!= 0:\n        return y\n    elif x == y:\n        return y\n    else:\n        if x < y:\n            for i in range(x, y, 2):\n                if i == y:\n                    return y\n                else:\n                    return i\n        else:\n            for i in range(x, y-1, 2):\n                if i == y:\n                    return y\n                else:\n                    return i\n",
        "num_ids": 137
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if x % 2 == 0 and y % 2 == 0:\n        num = max(x, y)\n        while num >= 0:\n            if num >= x and num <= y:\n                return num\n            else:\n                num -= 2\n        return -1\n    else:\n        return -1\n",
        "num_ids": 71
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Replace this line with your code\n    #print(x,y)\n    if x > y:\n        return -1\n    else:\n        for num in range(x, y+1):\n            if num%2 == 0:\n                return num\n                \n",
        "num_ids": 63
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if x > y:\n        return -1\n    num_list = [i for i in range(x, y+1) if i % 2 == 0]\n    if num_list:\n        return max(num_list)\n    return -1\n",
        "num_ids": 60
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # your code here\n    return \"0b\" + bin(int((n+m)/2))[2:].zfill(m-n+1)",
        "num_ids": 37
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # REPLACE THE PREVIOUS LINE WITH YOUR CODE\n",
        "num_ids": 14
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # if m < n:\n    #     return -1\n    avg = 0\n    for i in range(n, m + 1):\n        avg += i\n    return str(bin(round(avg // (m - n + 1)))[2:])\n",
        "num_ids": 64
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(sum([n, m]) // 2)\n",
        "num_ids": 31
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code goes here\n    if n >= m:\n        return -1\n    else:\n        return \"0b\"+str(round(sum(range(n, m+1))/m))\n",
        "num_ids": 49
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n > m:\n        return -1\n    return format(round(sum(list(range(n, m + 1))) / (m - n + 1)), \"b\")\n",
        "num_ids": 43
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n    else:\n        numbers = []\n        for i in range(n, m+1):\n            numbers.append(i)\n        return bin(int(round(sum(numbers) / len(numbers))))[2:]\n",
        "num_ids": 68
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n, m = sorted([n, m])\n    return bin(int(round(sum(range(n, m+1))/float(m-n+1))))\n",
        "num_ids": 41
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not x:\n        return x\n    x = [int(i) for i in x]\n    y = [int(i) for i in x if i % 2!= 0]\n    return sorted(y)\n",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Your code here\n    new_list = []\n    for i in x:\n        string = str(i)\n        count = 0\n        for j in string:\n            if int(j) % 2 == 0:\n                count += 1\n        if count == 0:\n            new_list.append(i)\n    return sorted(new_list)\n",
        "num_ids": 84
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # It can be solved by creating a hash table using only the even numbers \n    # and then iterating through the list and check if it is not in the hash\n    # table. In that case, add the current number to the hash table.\n",
        "num_ids": 56
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    unique = []\n    for i in x:\n        count = 0\n        for j in str(i):\n            if int(j) % 2 == 0:\n                count += 1\n        if count == 0:\n            unique.append(i)\n    return sorted(unique)\n",
        "num_ids": 66
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # raise NotImplementedError(\"Problem 6 Incomplete\")\n    return sorted([num for num in x if num % 2!= 0])\n",
        "num_ids": 34
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(filter(lambda x: (x % 2!= 0), x)))\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # My solution\n    return sorted([number for number in x if set(str(number))-set(\"02468\")])\n",
        "num_ids": 32
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for i in x:\n        if i%2!= 0:\n            result.append(i)\n    return sorted(result",
        "num_ids": 36
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    x = [str(num) for num in x]\n    return sorted(list(set(x).difference(set('02468'))))\n",
        "num_ids": 35
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for i in x:\n        temp = 0\n        while i > 0:\n            temp += (i % 10)\n            i //= 10\n        if temp % 2 == 0:\n            result.append(i)\n    return sorted(set(result))\n",
        "num_ids": 66
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted([chr(i) for i in range(48, 58)][i] for i in arr)[::-1]",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return []",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: 1 <= x <= 9, sorted(arr, reverse=True))",
        "num_ids": 24
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    arr.sort(reverse=True)\n    arr = arr[::-1]\n    arr = list(map(str, arr))\n    return list(map(get_name, arr))\n",
        "num_ids": 46
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    return None",
        "num_ids": 6
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Get the array\n    # 1. Convert to int\n    # 2. Convert the elements to strings\n    # 3. Sort\n    # 4. Reverse\n    # 5. Turn into a list\n    # 6. Sort\n    # 7. Reverse\n    # 8. Turn into string\n    # 9. Split into list and cast to int\n    # 10. Convert\n    # 11. Return\n    #return list(map(str, sorted(map(int, list(str(sorted(map(int, list(map(str, arr))))))[::-1])))[::-1])\n    return list(map(str, map(int, sorted(list(map(str, arr))[::-1]))))[::-1]\n",
        "num_ids": 171
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return sorted(arr, reverse=True)\n",
        "num_ids": 14
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    return_arr = []\n    arr.sort()\n    arr = list(reversed(arr))\n    arr_str = []\n    for i in range(0,len(arr)):\n        arr_str.append(str(arr[i]))\n    \n    for i in range(0, len(arr_str)):\n        \n        if int(arr_str[i]) > 0 and int(arr_str[i]) <= 9:\n            result.append(num_to_word[int(arr_str[i])])\n        elif int(arr_str[i]) == 0:\n            result.append(num_to_word[10])\n        elif int(arr_str[i]) == -1:\n            result.append(num_to_word[11])\n        elif int(arr_str[i]) == 1:\n            result.append(num_to_word[12])\n        elif int(arr_str[i]) == 2:\n            result.append(num_to_word[13])\n        elif int(arr_str[i]) == 3:\n            result.append(num_to_word[14])\n        elif int(arr_str[i]) == 4:\n            result.append(num_to_word[15])\n        elif int(arr_str[i]) == 5:\n            result.append(num_to_word[16])\n        elif int(arr_str[i]) == 6:\n            result.append(num_to_word[17])\n        elif int(arr_str[i]) == 7:\n            result.append(num_to_word[18])\n        elif int(arr_str[i]) == 8:\n            result.append(num_to_word[19])\n        elif int(arr_str[i]) == 9:\n            result.append(num_to_word[20])\n        else:\n            result.append(\"Invalid input\")\n",
        "num_ids": 466
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # Write your code here\n    return []\n",
        "num_ids": 14
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # return [1, 2, 6, 24, 15]\n    # implement your code here\n    l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(factorial(i))\n        else:\n            l.append(sum([x for x in range(1,i+1)]))\n    return l\n",
        "num_ids": 90
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    factorial = 1\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            factorial = factorial * i\n        else:\n            factorial = factorial + i\n    return [factorial]\n",
        "num_ids": 71
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # 1. Implement the function f as described above\n    l = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            l.append(math.factorial(i))\n        else:\n            l.append(sum(range(1, i+1)))\n    # 2. Return the list of values obtained\n    return l\n",
        "num_ids": 88
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i if i % 2 == 0 else sum(range(1,i+1)) for i in range(1,n+1)]\n",
        "num_ids": 34
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(factorial(i))\n        else:\n            l.append(sum(range(1, i+1)))\n    return l\n",
        "num_ids": 63
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l = [i for i in range(1, n + 1)]\n    for i in range(n):\n        if i % 2 == 0:\n            l[i] = 1\n            for j in range(i + 1):\n                l[i] = l[i] * j\n        else:\n            l[i] = sum(range(1, i + 1))\n    return l\n",
        "num_ids": 93
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst = [1]\n    i = 2\n    while i <= n:\n        if i % 2 == 0:\n            lst.append(lst[i-2])\n        else:\n            lst.append(sum(range(1, i+1)))\n        i += 1\n    return lst\n",
        "num_ids": 75
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [factorial(i) if i%2 == 0 else sum([i for i in range(1,i+1)]) for i in range(1,n+1)]\n",
        "num_ids": 43
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def gen_palindromes(n):\n        '''\n        Generate palindromes within range(1, n)\n        '''\n        lst = list(range(1, n+1))\n        for i in range(n//2):\n            if lst[i]!= lst[n-i-1]:\n                break\n            yield lst[i]\n            lst[i], lst[n-i-1] = lst[n-i-1], lst[i]\n",
        "num_ids": 124
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # count even and odd palindrome\n    count_odd, count_even = 0, 0\n    for i in range(1, n+1):\n        # break if number is palindrome\n        if str(i) == str(i)[::-1]:\n            # check if even\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    # return tuple\n    return (count_odd, count_even)\n",
        "num_ids": 113
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 1: return (0, 1)\n    s = str(n)\n    l, r = 1, 2\n    cnt = 0\n    while l <= n//2:\n        l, r = l + int(s[:l]), r + int(s[:r])\n        if l == r:\n            cnt += 1\n    return (cnt, n-cnt)\n",
        "num_ids": 95
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1:\n        return (0, 1)\n",
        "num_ids": 16
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    even = 0\n    odd = 0\n",
        "num_ids": 11
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def count(start, end):\n        cnt = 0\n        for i in range(start, end + 1):\n            if is_palindrome(i):\n                cnt += 1\n        return cnt\n    return (count(1, n), count(n, n)) if n > 0 else (0, 0)\n",
        "num_ids": 77
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len([x for x in arr if sum(digit(x)) > 0])\n",
        "num_ids": 21
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(len(str(abs(x))) for x in arr if x < 0)\n",
        "num_ids": 23
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum(sum(int(d) for d in str(x)) > 0 for x in arr)\n",
        "num_ids": 26
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n            temp = num\n            num = 0\n            while temp > 0:\n                num += temp % 10\n                temp = temp // 10\n            if num > 0:\n                count += 1\n        else:\n            count += 1\n    return count\n",
        "num_ids": 84
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Time: O(n)\n    # Space: O(n)\n    count = 0\n    for num in arr:\n        num_str = str(abs(num))\n        sum_of_digits = 0\n        for digit in num_str:\n            sum_of_digits += int(digit)\n        if sum_of_digits > 0:\n            count += 1\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = 0\n    for num in arr:\n        sign = 1\n        if num < 0:\n            sign = -1\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            num = num // 10\n            if digit > 0:\n                result += 1\n    return result * sign\n",
        "num_ids": 78
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    length = len(arr)\n    if length == 0:\n        return True\n    arr_sorted = sorted(arr)\n    if arr_sorted == arr:\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #code here\n    return not len(arr) or len(set(arr)) == 1\n",
        "num_ids": 23
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    arr.sort()\n    return arr == [i for i in range(1, len(arr)+1)]\n",
        "num_ids": 27
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return True\n    \n    # Checking for only 1 element in the array\n    if len(arr) == 1:\n        return True\n    \n    # if the array is already sorted\n    if arr == sorted(arr):\n        return True\n    \n    # checking for multiple elements in the array\n    temp = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] <= temp:\n            return False\n        temp = arr[i]\n    return True\n",
        "num_ids": 126
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #your code here\n    return False\n    \n",
        "num_ids": 13
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    # if len(arr)==0:\n    #     return True\n    # for i in range(len(arr)):\n    #     if arr[i]>=arr[i+1]:\n    #         return False\n    # for i in range(len(arr)-1):\n    #     arr[i]=arr[i+1]\n    # arr[-1]=0\n    # return True\n    \n    if len(arr)==0:\n        return True\n    \n    for i in range(len(arr)):\n        if arr[i]>=arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 151
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    return (len(arr) == 0) or (max(arr) == min(arr))\n",
        "num_ids": 25
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    arr.sort()\n    if arr[0]>=arr[1]:\n        return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #code here\n    n=len(arr)\n    i=0\n    while(i<n):\n        if(arr[i]<arr[i+1]):\n            i=i+1\n        elif(i==n-1):\n            return True\n        else:\n            return False\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    arr = sorted(arr)\n    return arr == list(range(1, len(arr) + 1))",
        "num_ids": 26
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in lst1:\n        if i%2!=0:\n            return \"NO\"\n    for j in lst2:\n        if j%2!=0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 57
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Hint: You can try to iterate through the list,\n    # and see if there is any number that doesn't meet the even number requirement.\n    # If there is, then the function should return False.\n    # Otherwise, it should return True.\n    # raise NotImplementedError\n    for i in lst1:\n        if i%2 == 1:\n            return 'NO'\n    for j in lst2:\n        if j%2 == 1:\n            return 'NO'\n    return 'YES'\n",
        "num_ids": 123
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def is_even(n):\n        \"\"\"Returns whether a number is even\"\"\"\n        if n % 2 == 0:\n            return True\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in lst1:\n        if i%2!= 0:\n            return \"NO\"\n    for i in lst2:\n        if i%2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 57
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = 0\n    for i in range(len(lst1)):\n        result = lst1[i] + lst2[i]\n        if result % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 59
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Initialize a set for even and odd numbers\n    even_list = set()\n    odd_list = set()\n    # Iterate through the first list\n    for n in lst1:\n        # Add to the even set if the number is even\n        if n % 2 == 0:\n            even_list.add(n)\n        else:\n            odd_list.add(n)\n    # If the even set is empty, all the numbers in the first list are even\n    if even_list == set():\n        return \"YES\"\n    # If the odd set is empty, all the numbers in the first list are odd\n    elif odd_list == set():\n        return \"NO\"\n    # Iterate through the second list\n    for n in lst2:\n        # If the number is even and in the even set\n        if n % 2 == 0 and n in even_list:\n            # Remove the number from the even set\n            even_list.remove(n)\n        # If the number is odd and in the odd set\n        elif n % 2 == 1 and n in odd_list:\n            # Remove the number from the odd set\n            odd_list.remove(n)\n    # If the even set is empty, all the numbers in the second list are even\n    if even_list == set():\n        return \"YES\"\n    # If the odd set is empty, all the numbers in the second list are odd\n    elif odd_list == set():\n        return \"NO\"\n    # Otherwise, it is impossible to have an exchange to make both lists even\n    else:\n        return \"NO\"\n",
        "num_ids": 373
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = len(lst1)\n    lst1.sort()\n    lst2.sort()\n    for i in range(n):\n        if lst1[i]%2!= 0 and lst2[i]%2!= 0:\n            return 'NO'\n    return 'YES'\n",
        "num_ids": 75
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert isinstance(lst1, list), \"The input list 'lst1' should be a list!\"\n    assert isinstance(lst2, list), \"The input list 'lst2' should be a list!\"\n",
        "num_ids": 53
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # lst1 = [int(x) for x in input().split()]\n    # lst2 = [int(x) for x in input().split()]\n    \n    # YOUR CODE GOES HERE\n    lst_even_numbers = []\n    lst_odd_numbers = []\n    for num in lst1:\n        if num % 2 == 0:\n            lst_even_numbers.append(num)\n        else:\n            lst_odd_numbers.append(num)\n    lst_odd_numbers = sorted(lst_odd_numbers)\n    lst_even_numbers = sorted(lst_even_numbers)\n",
        "num_ids": 163
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your solution goes here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    test = test.lower()\n    d = {}\n    for i in test:\n        if i not in d:\n            d[i] = test.count(i)\n    return d\n",
        "num_ids": 46
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not test:\n        return {}\n    histogram = {}\n    test_list = test.split()\n    for word in test_list:\n        word_hist = histogram.get(word, 0)\n        histogram[word] = word_hist + 1\n    # print(histogram)\n    max_word = max(histogram, key=histogram.get)\n    max_word_count = histogram[max_word]\n    return {max_word : max_word_count}\n",
        "num_ids": 119
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    histo = {}\n    for item in test:\n        if item in histo.keys():\n            histo[item] += 1\n        else:\n            histo[item] = 1\n    return histo\n",
        "num_ids": 51
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if test == \"\":\n        return {}\n    test = test.split(' ')\n    # print(test)\n    dic = {}\n    for l in test:\n        if l in dic:\n            dic[l] += 1\n        else:\n            dic[l] = 1\n    return dic\n",
        "num_ids": 77
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    letters = test.split()\n    dic = {}\n    for i in letters:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    dic = dict(sorted(dic.items(), key = lambda x: x[1], reverse = True))\n    return dic\n",
        "num_ids": 85
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    myDict = {}\n    maxOccurrence = 0\n    maxLetters = ''\n",
        "num_ids": 22
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    #return dict([])\n    \n    # Empty string\n    if not test:\n        return {}\n    \n    # Split the string into a list\n    letters = test.split(' ')\n    \n    # Get the length of the list and store it into a variable\n    lenght = len(letters)\n    \n    # Initialize the dictionary\n    dic = {}\n    \n    # Fill the dictionary\n    for i in letters:\n        \n        # Check if the letter is in the dictionary\n        if i in dic:\n            # If it is then just add one to its value\n            dic[i] = dic[i] + 1\n        \n        # If it is not in the dictionary then add it with a value of one\n        else:\n            dic[i] = 1\n    \n    # Sort the dictionary by its value and store it into a variable\n    dic = dict(sorted(dic.items(), key=lambda x: x[1], reverse=True))\n    \n    # Return the dictionary\n    return dic",
        "num_ids": 244
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = test.split(' ')\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_value = max(d.values())\n    lst = []\n    for key, value in d.items():\n        if value == max_value:\n            lst.append(key)\n    return lst\n",
        "num_ids": 102
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(c)):\n        for j in range(len(s)):\n            if c[i] == s[j]:\n                s = s[:j] + s[j+1:]\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False\n",
        "num_ids": 80
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_string = \"\"\n    for char in s:\n        if char not in c:\n            new_string += char\n    return (new_string,new_string==s[::-1])\n",
        "num_ids": 48
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s=list(s)\n    for i in range(len(s)):\n        if s[i] in c:\n            s.remove(s[i])\n    if s==s[::-1]:\n        return(\"\".join(s),True)\n    else:\n        return(\"\".join(s),False)\n    \nprint(reverse_delete(\"abcde\", \"ae\"))\nprint(reverse_delete(\"abcdef\", \"b\"))\nprint(reverse_delete(\"abcdedcba\", \"ab\"))",
        "num_ids": 120
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = list(s)\n    c = list(c)\n    result = []\n    for char in s:\n        if char in c:\n            s.remove(char)\n            c.remove(char)\n    if len(s) == 0:\n        return (c,True)\n    else:\n        return (c+s,False)\n",
        "num_ids": 84
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #your code here\n    result_string = ''\n    for x in s:\n        if x not in c:\n            result_string = result_string + x\n    return result_string, result_string == result_string[::-1]\n",
        "num_ids": 59
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return s.translate(None,c) == s[::-1].translate(None,c)\n",
        "num_ids": 27
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s_new = \"\"\n    c = list(c)\n    for i in range(len(s)):\n        if s[i] not in c:\n            s_new += s[i]\n    s = s_new\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "num_ids": 87
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    n = len(s)\n    chars_s = set(list(s))\n    chars_c = set(list(c))\n    result = list(s)\n    for i in chars_s:\n        if i in chars_c:\n            for j in range(n):\n                if s[j] == i:\n                    result[j] = None\n    for i in result:\n        if i!= None:\n            return (''.join(result), False)\n    return (''.join(result), True)\n",
        "num_ids": 125
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(s) < len(c):\n        return s, False\n    new_s = []\n    i = 0\n    while i < len(s):\n        if s[i] in c:\n            i += 1\n        else:\n            new_s.append(s[i])\n            i += 1\n    new_s = ''.join(new_s)\n    if new_s == new_s[::-1]:\n        return new_s, True\n    else:\n        return new_s, False\n",
        "num_ids": 125
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst2 = []\n    for item in lst:\n        s = 0\n        for char in item:\n            if int(char)%2!= 0:\n                s += 1\n        lst2.append(s)\n    return [f'the number of odd elements {s} of the {len(item)}nput.' for s in lst2]\n",
        "num_ids": 87
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # REPLACE THE RETURN STATEMENT ABOVE WITH YOUR CODE\n    output = []\n    for word in lst:\n        count = 0\n        for char in word:\n            if int(char) % 2!= 0:\n                count += 1\n        output.append(\"the number of odd elements \" + str(count) + \" of the \" + word + \".\")\n    return output\n",
        "num_ids": 91
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [str(len([letter for letter in word if int(letter)%2 == 1])) for word in lst]\n",
        "num_ids": 31
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [\"the number of odd elements \" + str(len([i for i in j if int(i) % 2!= 0])) + \" of the str\" + str(k) + \" of the \" + \"input.\" for k, j in enumerate(lst, 1)]\n",
        "num_ids": 66
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # new_list = []\n    # for string in lst:\n    #     if string[0] % 2!= 0:\n    #         new_list.append(1)\n    #     elif string[-1] % 2!= 0:\n    #         new_list.append(1)\n    #     else:\n    #         new_list.append(0)\n    # return new_list\n    return [count_odd_digits(s) for s in lst]\n",
        "num_ids": 118
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for i in lst:\n        count = 0\n        for char in i:\n            if int(char) % 2!= 0:\n                count += 1\n        result.append(str(count) + \"n the \" + str(i) + \"of the \" + str(lst.index(i)) + \"nput.\")\n    return result\n",
        "num_ids": 88
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = []\n    for i in lst:\n        count.append(count_odd(i))\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for num in lst:\n        count = 0\n        for char in num:\n            if char.isdigit():\n                if int(char) % 2 == 1:\n                    count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(len(num)) + \"n the \" + str(num) + \"nput.\")\n    return result\n",
        "num_ids": 101
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [\"the number of odd elements \" + \"n the str\" + str(i + 1) + \" of the \" + \"input.\"\n        for i in range(len(lst))\n            if len([x for x in lst[i] if int(x) % 2])\n                ]",
        "num_ids": 69
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [\"the number of odd elements \"+str(len([x for x in num if int(x)%2==1]))+\" in the \"+str(num)+\" of the \"+str(i)+\"nput.\" for i,num in enumerate(lst)]\n    # return [\"the number of odd elements \"+str(len([x for x in num if int(x)%2==1]))+\" in the \"+str(num)+\" of the \"+str(i)+\"nput.\" for i,num in enumerate(lst)]\n    # return [\"the number of odd elements \" + str(len([int(x) for x in num if int(x)%2==1])) + \" in the \" + str(num) + \" of the \" + str(i) + \"nput.\" for i,num in enumerate(lst)]\n",
        "num_ids": 197
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(nums) == 0:\n        return 0\n    else:\n        min_sum = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1] + nums[i]:\n                nums[i] = nums[i-1] + nums[i]\n            min_sum = min(min_sum, nums[i])\n        return min_sum\n",
        "num_ids": 112
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # check if list is empty\n    if not nums:\n        return None\n    # initialize a variable to hold the minimum sum\n    min_sum = None\n    # loop through each item\n    for i in range(0, len(nums)):\n        # initialize a variable to hold the sum of sub-array (length = i)\n        sub_sum = 0\n        # loop through each item\n        for j in range(i, len(nums)):\n            # add item to sub-array\n            sub_sum += nums[j]\n            # update the minimum sum\n            if min_sum is None or min_sum > sub_sum:\n                min_sum = sub_sum\n    # return minimum sum\n    return min_sum\n",
        "num_ids": 173
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not nums: return 0\n    \n    total = float('inf')\n    prefixSum = [nums[0]]\n    for i in range(1, len(nums)):\n        prefixSum.append(prefixSum[-1] + nums[i])\n    \n    for i in range(len(prefixSum)):\n        for j in range(i+1, len(prefixSum)):\n            total = min(total, prefixSum[j] - prefixSum[i])\n    \n    return total\n",
        "num_ids": 122
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def _minSubArraySum(nums):\n        \"\"\"\n        Main function that finds the minimum subarray sum.\n        \"\"\"\n        current_sum = float('inf')\n        left = right = 0\n",
        "num_ids": 48
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not nums:\n        return 0\n    \n    start = 0\n    end = 0\n    result = 0\n    temp = 0\n    while end < len(nums):\n        temp += nums[end]\n        end += 1\n        while temp >= k:\n            temp -= nums[start]\n            start += 1\n        if temp < k:\n            result = max(result, temp)\n    return result\n",
        "num_ids": 100
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(nums) == 1:\n        return nums[0]\n    start, end = 0, len(nums) - 1\n    while end > 0:\n        sum = 0\n        for i in range(start, end + 1):\n            sum += nums[i]\n        if sum < nums[end]:\n            end -= 1\n        else:\n            break\n    return nums[start: end + 1]\n",
        "num_ids": 103
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    currentSum = 0\n    bestSum = float(\"inf\")\n    minSum = 0\n    for num in nums:\n        currentSum += num\n        bestSum = min(bestSum, currentSum)\n        minSum = min(minSum, currentSum - bestSum)\n    return minSum\n",
        "num_ids": 70
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    for i in range(1, len(nums)):\n        nums[i] = nums[i] + nums[i - 1]\n",
        "num_ids": 39
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    length = len(nums)\n    if length == 1:\n        return nums[0]\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not grid:\n        return 0\n    def get_sum(grid):\n        # sum = 0\n        # for row in grid:\n        #     sum += sum(row)\n        # return sum\n        return sum(sum(row) for row in grid)\n",
        "num_ids": 63
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def grid_to_matrix(grid, bucket_capacity):\n        matrix = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                matrix[i][j] = grid[i][j] if grid[i][j] == 0 else bucket_capacity\n        return matrix\n    \n    def matrix_to_grid(matrix):\n        grid = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == bucket_capacity:\n                    grid[i][j] = 1\n        return grid\n    \n    def left_bucket(matrix):\n        left = 0\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j]!= bucket_capacity:\n                    left += matrix[i][j]\n        return left\n    \n    def right_bucket(matrix):\n        right = 0\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0]) - 1, -1, -1):\n                if matrix[i][j]!= bucket_capacity:\n                    right += matrix[i][j]\n        return right\n    \n    def bottom_bucket(matrix):\n        bottom = 0\n        for i in range(len(matrix[0])):\n            for j in range(len(matrix)):\n                if matrix[j][i]!= bucket_capacity:\n                    bottom += matrix[j][i]\n        return bottom\n    \n    def top_bucket(matrix):\n        top = 0\n        for i in range(len(matrix[0]) - 1, -1, -1):\n            for j in range(len(matrix)):\n                if matrix[j][i]!= bucket_capacity:\n                    top += matrix[j][i]\n        return top\n    \n    def empty_bucket(matrix):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                matrix[i][j] = 0\n        return matrix\n    \n    def num_times(matrix):\n        left = left_bucket(matrix)\n        right = right_bucket(matrix)\n        bottom = bottom_bucket(matrix)\n        top = top_bucket(matrix)\n        num_times = math.ceil(left / bucket_capacity) + math.ceil(right / bucket_capacity) + math.ceil(top / bucket_capacity) + math.ceil(bottom / bucket_capacity) - 4\n        return num_times\n    \n    matrix = grid_to_matrix(grid, capacity)\n    while True:\n        if left_bucket(matrix) == 0 and right_bucket(matrix) == 0 and top_bucket(matrix) == 0 and bottom_bucket(matrix) == 0:\n            break\n        if left_bucket(matrix) > right_bucket(matrix) and left_bucket(matrix) > top_bucket(matrix) and left_bucket(matrix) > bottom_bucket(matrix):\n            matrix = empty_bucket(matrix)\n            matrix = empty_bucket(matrix)\n            matrix = empty_bucket(matrix)\n            matrix = empty_bucket(matrix)\n            matrix = empty_bucket(matrix)\n        elif right_bucket(matrix) > left_bucket(matrix) and right_bucket(matrix) > top_bucket(matrix) and right_bucket(matrix) > bottom_bucket(matrix):\n            matrix = empty_bucket(matrix)\n            matrix = empty_bucket(matrix)\n            matrix = empty_bucket(matrix)\n            matrix = empty_bucket(matrix)\n            matrix = empty_bucket(matrix)\n        elif top_bucket(matrix) > lef",
        "num_ids": 1030
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def get_well_width(grid):\n        \"\"\"\n        Get the width of the given grid, which is equal to the length of the longest row\n        \"\"\"\n        return len(max(grid, key=len))\n",
        "num_ids": 51
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # number of times buckets must be lowered\n    # to empty all wells\n    rows = len(grid)\n    cols = len(grid[0])\n    def helper(row, col, level, grid):\n        nonlocal capacity, rows, cols\n        if level == capacity:\n            return 0\n",
        "num_ids": 71
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def bucket_left_cover(grid, bucket_capacity):\n        \"\"\"\n        Left covered area of the bucket\n        \"\"\"\n        left_cover_area = 0\n        for well in grid:\n            i = 0\n            while i < len(well) and well[i] == 0:\n                i += 1\n            left_cover_area += len(well) - i\n        return left_cover_area\n",
        "num_ids": 95
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # print(grid)\n    # print(capacity)\n    def solve(grid, capacity):\n        ROW = len(grid)\n        COL = len(grid[0])\n        # print(grid)\n        # print(capacity)\n",
        "num_ids": 57
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def dfs(grid, i, j, bucket_capacity, count=0):\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]):\n            return count\n        if grid[i][j] == 0:\n            return count\n        if grid[i][j] == 1 and count == bucket_capacity:\n            return count\n        else:\n            grid[i][j] = 0\n            count += 1\n        return max(dfs(grid, i + 1, j, bucket_capacity, count), dfs(grid, i - 1, j, bucket_capacity, count), dfs(grid, i, j + 1, bucket_capacity, count), dfs(grid, i, j - 1, bucket_capacity, count))\n",
        "num_ids": 182
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if grid is None or len(grid) == 0:\n        return 0\n",
        "num_ids": 19
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # sum_of_row_wells = []\n    # for row in grid:\n    #     sum_of_row_wells.append(sum(row))\n    # print(sum_of_row_wells)\n    # return max(sum_of_row_wells)\n    wells_capacity = 0\n    for row in grid:\n        wells_capacity += sum(row)\n    buckets_capacity = 0\n    for row in grid:\n        buckets_capacity += sum(row) * capacity\n    if wells_capacity == buckets_capacity:\n        return 0\n    elif wells_capacity > buckets_capacity:\n        return math.ceil(wells_capacity / buckets_capacity)\n",
        "num_ids": 168
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n",
        "num_ids": 27
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # split binary digits\n    split_array = []\n    for num in arr:\n        binary_array = [int(num) for num in bin(num)[2:]]\n        # pad zeros to binary arrays\n        while len(binary_array) < 4:\n            binary_array.insert(0, 0)\n        # append binary array\n        split_array.append(binary_array)\n    # sort array based on number of 1s\n    split_array.sort(key=lambda x: (x.count(1), x.count('1') * -1, x[-1]))\n    # sum binary values\n    arr = []\n    for binary in split_array:\n        arr.append(sum([power(2, index) for index, val in enumerate(binary[::-1]) if val]))\n    return arr\n",
        "num_ids": 196
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    def f(n):\n        return n.count('1')\n    \n    return sorted(arr, key=f)",
        "num_ids": 31
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def _count_ones(num):\n        count = 0\n        while num:\n            num &= num - 1\n            count += 1\n        return count\n",
        "num_ids": 38
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # attempt #1\n    # [1, 0, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # attempt #2\n    # [1, 0, 2, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 0, 2, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 2, 3, 0, 4]\n    # attempt #3\n    # [1, 0, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # attempt #4\n    # [1, 0, 2, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 0, 2, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 2, 3, 0, 4]\n    # [1, 2, 3, 0, 4]\n    # [1, 2, 3, 0, 4]\n    # attempt #5\n    # [1, 0, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [1, 0, 2, 3, 4]\n    # attempt #6\n    # [1, 0, 2, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 2, 3, 0, 4]\n    # [1, 2, 3, 0, 4]\n    # [1, 2, 3, 0, 4]\n    # attempt #7\n    # [1, 0, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 2, 3, 0, 4]\n    # attempt #8\n    # [1, 0, 2, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 0, 2, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 2, 3, 0, 4]\n    # [1, 2, 3, 0, 4]\n    # [1, 2, 3, 0, 4]\n    # attempt #9\n    # [1, 0, 2, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 0, 2, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 2, 3, 0, 4]\n    # [1, 2, 3, 0, 4]\n    # [1, 2, 3, 0, 4]\n    # attempt #10\n    # [1, 0, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [0, 1, 2, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 2, 3, 0, 4]\n    # attempt #11\n    # [1, 0, 2, 3, 4]\n    # [1, 2, 0, 3, 4]\n    # [1, 0, 2, 3, 4]\n    # [",
        "num_ids": 1024
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # first try with sorting the array with array.sort()\n    # return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n    # second try with map\n    # return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n    # third try with list comprehension\n    return [x for _, x in sorted((bin(x).count(\"1\"), x) for x in arr)]",
        "num_ids": 104
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # return list of all words that contain exactly n consonants\n    # return list of words that contain exactly n consonants\n    # return empty list if s is empty\n    # assume input is valid\n    # assume input is not empty\n    # assume all letters in s are lowercase\n    # assume s has only letters and spaces\n    # assume n is always positive\n    # assume n is always positive\n    # return empty list if s is empty\n    # return empty list if n is 0\n    # return empty list if s only contains spaces\n    # remove all spaces from s\n    # remove all empty strings from the list of words\n    # remove all strings that contain 0 consonants\n    # return list of words that have n consonants\n",
        "num_ids": 164
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Hint: Use a dictionary to store the count of each char\n    # Hint: Use a set to store the words in order\n    # Hint: Use a set to store the result\n    result = []\n    words = s.split()\n    consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'}\n    for word in words:\n        if len(set(word.lower()).intersection(consonants)) == n:\n            result.append(word)\n    return result\n",
        "num_ids": 168
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    words_list = s.split()\n    words = []\n    for word in words_list:\n        if count_consonants(word) == n:\n            words.append(word)\n    return words\n",
        "num_ids": 51
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Return list of words\n    return re.findall(r'\\w+' + '\\w{'+str(n)+'}', s)\n",
        "num_ids": 38
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # your code here\n    return []\n",
        "num_ids": 11
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l = s.split()\n    words_list = []\n    for word in l:\n        if has_n_consonants(word, n):\n            words_list.append(word)\n    return words_list\n",
        "num_ids": 54
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # YOUR CODE HERE\n    # s = s.replace(\" \", \"\")\n    # s = s.lower()\n    # words = s.split()\n    # consonants = 0\n    # ret = []\n    # for word in words:\n    #     for letter in word:\n    #         if letter.isalpha() == True and letter.isupper() == False:\n    #             consonants += 1\n    #         if consonants == n:\n    #             ret.append(word)\n    #     consonants = 0\n    # return ret\n",
        "num_ids": 131
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(1, len(word)-1):\n        if word[i] in 'aeiou' and word[i-1] not in 'aeiou' and word[i+1] not in 'aeiou':\n            return word[i]\n    return \"\"\n",
        "num_ids": 68
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for c in reversed(word):\n        if c in \"aeiou\":\n            return c\n    return \"\"\n",
        "num_ids": 28
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Get all vowel indices\n    vowel_indices = [word.index(vowel) for vowel in VOWELS if vowel in word]\n",
        "num_ids": 37
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i, letter in enumerate(word):\n        if letter in vowels and word[i+1] in vowels:\n            result = word[i+1]\n        elif letter in vowels:\n            break\n    return result",
        "num_ids": 75
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    first_letter = word[0]\n    last_letter = word[len(word)-1]\n    if first_letter in ['a', 'e', 'i', 'o', 'u']:\n        return first_letter\n    if last_letter in ['a', 'e', 'i', 'o', 'u']:\n        return last_letter\n    if word[0] in ['a', 'e', 'i', 'o', 'u'] and word[len(word)-1] in ['a', 'e', 'i', 'o', 'u']:\n        return word[0]\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in ['a', 'e', 'i', 'o', 'u']:\n            return word[i]\n    return \"\"\n",
        "num_ids": 192
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # O(n)\n    vowels = 'aeiouAEIOU'\n    if len(word) < 2:\n        return ''\n",
        "num_ids": 36
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def test_parens(s):\n        count = 0\n        for p in s:\n            if p == '(':\n                count += 1\n            elif p == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n    \n    lst = lst.split()\n    if test_parens(lst[0]) and test_parens(lst[1]):\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 119
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Your code here\n    return 'Yes'\n",
        "num_ids": 13
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    #check if there is more closing than opening in list\n    for x in lst:\n        if x == ')' and count == 0:\n            return \"No\"\n        elif x == ')':\n            count -= 1\n        elif x == '(':\n            count += 1\n",
        "num_ids": 72
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    stack = []\n    for i in lst:\n        if i == '(':\n            stack.append('(')\n        else:\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    if len(stack) > 0:\n        return 'No'\n    else:\n        return 'Yes'\n",
        "num_ids": 85
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    opened_parens = 0\n    for paren in lst:\n        if paren == '(':\n            opened_parens += 1\n        elif paren == ')':\n            opened_parens -= 1\n        if opened_parens < 0:\n            return 'No'\n    return 'Yes' if opened_parens == 0 else 'No'\n",
        "num_ids": 85
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 'Yes' if len(lst) % 2 == 0 and is_good_parens(lst) else 'No'\n",
        "num_ids": 32
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return 'Yes' if parentheses_are_balanced(lst) else 'No'",
        "num_ids": 20
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not arr or len(arr) == 0:\n        return []\n",
        "num_ids": 18
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if k > len(arr):\n        raise Exception(\"k must be less than or equal to the length of the array.\")\n    arr.sort()\n    return arr[::-1][:k]\n",
        "num_ids": 47
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return heapq.nlargest(k, arr)\n",
        "num_ids": 14
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if k == 0:\n        return []\n    if k >= len(arr):\n        return sorted(arr, reverse=True)\n    return sorted(arr, reverse=True)[:k]\n",
        "num_ids": 46
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(arr, reverse=True)[:k]\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not arr or k == 0: return []\n    stack = []\n    for i in range(len(arr)):\n        while stack and stack[-1] < arr[i] and len(stack) + len(arr) - i > k:\n            stack.pop()\n        stack.append(arr[i])\n    return stack[:k]\n",
        "num_ids": 84
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(lst[1::2])\n",
        "num_ids": 13
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    answer = 0\n    for i, val in enumerate(lst):\n        if i % 2!= 0 and val % 2!= 0:\n            answer += val\n    return answer",
        "num_ids": 46
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            s += lst[i]\n    return s\n",
        "num_ids": 41
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 == 1:\n            s += lst[i]\n    return s\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))\n",
        "num_ids": 98
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # record the sum of odd numbers in even position\n    total = 0\n    \n    # find the odd numbers\n    odd = []\n    for number in lst:\n        if (number % 2!= 0):\n            odd.append(number)\n    \n    # sum up the numbers\n    for number in odd:\n        total += number\n    \n    return total",
        "num_ids": 85
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    even_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_sum += lst[i]\n    return even_sum\n    \n",
        "num_ids": 49
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum = 0\n    for i, val in enumerate(lst):\n        if i % 2!= 0 and val % 2!= 0:\n            sum += val\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([i for i,j in enumerate(lst) if (j%2==0 and i%2!=0)])\n",
        "num_ids": 34
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    odd_list = [el for i, el in enumerate(lst) if i % 2!= 0]\n    return sum(odd_list)\n",
        "num_ids": 37
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(arr[:k])\n",
        "num_ids": 11
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum(n for n in arr[:k] if n <= 99)\n",
        "num_ids": 20
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum_of_k = 0\n    for i in range(k):\n        sum_of_k += arr[i]\n    return sum_of_k\n",
        "num_ids": 39
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    print(f\"arr is {arr}\")\n    print(f\"k is {k}\")\n    if k >= len(arr):\n        print(\"k is greater than length of array\")\n        return sum(arr)\n",
        "num_ids": 53
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not arr:\n        return 0\n    result = 0\n    for i in range(k):\n        result += arr[i] % 10\n        if i < k - 1:\n            result += arr[i] // 10\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(sum(map(int, str(num)[:2])) for num in arr[:k])\n",
        "num_ids": 28
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if k < len(arr):\n        return sum(arr[:k])\n    return sum(arr)\n",
        "num_ids": 27
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(int(''.join(map(str, arr[:k]))) for arr in (arr for arr in list(arr) if len(arr) <= 2))\n",
        "num_ids": 41
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if k > len(arr):\n        raise Exception(\"k is greater than length of arr\")\n",
        "num_ids": 23
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # the elements in the array are not all positive\n    if min(arr) < 0:\n        return None\n",
        "num_ids": 27
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def collatz(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer.')\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n",
        "num_ids": 81
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    output = []\n    while n > 1:\n        output.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n+1\n    output.append(1)\n    return sorted(output)\n",
        "num_ids": 65
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n>0\n    collatz = []\n    while True:\n        if n in collatz:\n            break\n        collatz.append(n)\n        if n%2 == 0:\n            n = n//2\n        else:\n            n = 3*n+1\n    return collatz\n",
        "num_ids": 72
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l = list(range(n, 1, -2)) # Collatz(n) is odd for n > 1\n    l.extend([1])\n    l.sort()\n    return l\n",
        "num_ids": 47
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert n > 0 and isinstance(n, int)\n",
        "num_ids": 15
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    list_odd = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = 3 * n + 1\n        list_odd.append(int(n))\n    return list_odd\n",
        "num_ids": 65
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Check if n is positive\n    if n < 1:\n        return []\n",
        "num_ids": 20
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    collatz = [n]\n    while collatz[-1] > 1:\n        if collatz[-1] % 2 == 0:\n            collatz.append(int(collatz[-1]/2))\n        else:\n            collatz.append(int(3*collatz[-1] + 1))\n    return sorted(list(set(collatz)))\n",
        "num_ids": 89
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    odd_collatz_list = []\n    if n == 1:\n        return [1]\n    elif n % 2 == 1:\n        odd_collatz_list.append(n)\n        while n > 1:\n            if n % 2 == 0:\n                n = n/2\n                odd_collatz_list.append(n)\n            else:\n                n = (n*3) + 1\n                odd_collatz_list.append(n)\n    else:\n        return []\n",
        "num_ids": 119
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Complete the method\n    # Remember to remove the extra spaces in the string\n    days = {\"01\":31, \"02\":28, \"03\":31, \"04\":30, \"05\":31, \"06\":30, \"07\":31, \"08\":31, \"09\":30, \"10\":31, \"11\":30, \"12\":31}\n",
        "num_ids": 83
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    try:\n        parsed_date = parse_date(date)\n        return (\n            parsed_date is not None and\n            parsed_date.year >= 1 and parsed_date.month >= 1 and parsed_date.month <= 12 and parsed_date.day >= 1 and parsed_date.day <= 31 if parsed_date.month == 2 and parsed_date.day >= 1 and parsed_date.day <= 29 else (\n                parsed_date is not None and\n                parsed_date.month >= 1 and parsed_date.month <= 12 and parsed_date.day >= 1 and parsed_date.day <= 30 if parsed_date.month == 4 or parsed_date.month == 6 or parsed_date.month == 9 or parsed_date.month == 11 else (\n                    parsed_date is not None and\n                    parsed_date.month >= 1 and parsed_date.month <= 12 and parsed_date.day >= 1 and parsed_date.day <= 31\n                )\n            )\n        )\n    except:\n        return False\n",
        "num_ids": 246
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    date = date.split('-')\n    if len(date) == 3:\n        if int(date[0]) in range(1,13):\n            if int(date[1]) in range(1,32):\n                if int(date[2]) in range(1900, 2020):\n                    return True\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return True\n",
        "num_ids": 5
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Split the string\n    # Check the number of days\n    # Check the number of months\n    # Check if there is a valid year\n    # Concatenate the string\n    # Return True if the date is valid otherwise False\n    \n    split = date.split('-')\n    if len(split)!= 3:\n        return False\n",
        "num_ids": 80
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    m, d, y = map(int, date.split('-'))\n    if d < 1 or d > 31 or m in (1, 3, 5, 7, 8, 10, 12) and d > 30 or m in (4, 6, 9, 11) and d > 29:\n        return False\n    elif m < 1 or m > 12:\n        return False\n    return True",
        "num_ids": 91
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not date: return False\n    day, month, year = date.split('-')\n    day = int(day)\n    month = int(month)\n    year = int(year)\n    \n    if month not in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 30:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if day < 1 or day > 29:\n            return False\n    \n    return True\n",
        "num_ids": 140
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # return [word for word in txt.split()]\n    # return txt.split()\n    # return list(filter(None, [word for word in txt.split()]))\n    # return list(filter(None, txt.split()))\n    return [word for word in txt.split() if word]\n",
        "num_ids": 79
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    new_txt = txt.split()\n    \n    for i in new_txt:\n        for j in i:\n            if j.isalpha():\n                count = 0\n                for k in i:\n                    if k.isalpha():\n                        count += 1\n                return count\n",
        "num_ids": 67
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for word in txt.split():\n        result.append(word)\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    words = txt.split()\n    return words\n",
        "num_ids": 14
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return all([lst[i] <= lst[i+1] for i in range(len(lst)-1)])\n",
        "num_ids": 32
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_lst = sorted(lst)\n    return lst == new_lst\n",
        "num_ids": 23
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) == 1 or len(lst) == 0:\n        return True\n    elif lst[0] > lst[1]:\n        return False\n    else:\n        return is_sorted(lst[1:])\n",
        "num_ids": 61
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if len(lst) <= 1:\n        return True\n    else:\n        for i in range(0, len(lst)-1):\n            if lst[i] <= lst[i+1]:\n                continue\n            else:\n                return False\n        return True\n        \ndef namelist(names):\n    '''\n    Each person in the room is identified by a unique ID, which is an integer\n    between 0 and n - 1, where n is the total number of people in the room.\n",
        "num_ids": 122
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst) < 2:\n        return True\n    if sorted(lst) == lst:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # return lst == sorted(lst)\n    # for i in range(len(lst) - 1):\n    #     if lst[i] > lst[i + 1]:\n    #         return False\n    # return True\n    # for i in range(len(lst) - 1):\n    #     if lst[i] > lst[i + 1]:\n    #         return False\n    # return True\n    #\n    # lst.sort()\n    # for i in range(len(lst) - 1):\n    #     if lst[i] > lst[i + 1]:\n    #         return False\n    # return True\n    #\n    # if len(lst) > 1:\n    #     if lst[0] < lst[1]:\n    #         if len(lst) > 2:\n    #             for i in range(len(lst) - 1):\n    #                 if lst[i] < lst[i + 1]:\n    #                     pass\n    #                 else:\n    #                     return False\n    #         return True\n    #     else:\n    #         return False\n    # return True\n    #\n    # if len(lst) > 1:\n    #     if lst[0] > lst[1]:\n    #         if len(lst) > 2:\n    #             for i in range(len(lst) - 1):\n    #                 if lst[i] > lst[i + 1]:\n    #                     pass\n    #                 else:\n    #                     return False\n    #         return True\n    #     else:\n    #         return False\n    # return True\n",
        "num_ids": 397
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst = sorted(lst)\n    if lst == lst[::-1]:\n        return True\n    return False\n    \n",
        "num_ids": 34
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(lst) < 2:\n        return True\n    else:\n        for i in range(0, len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True\n",
        "num_ids": 61
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    start1 = interval1[0]\n    end1 = interval1[1]\n    start2 = interval2[0]\n    end2 = interval2[1]\n    \n    if (start1 >= start2 and start1 <= end2) or (start2 >= start1 and start2 <= end1):\n        if (end1 >= start2 and end1 <= end2) or (end2 >= start1 and end2 <= end1):\n            if (end1 - start1) == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "num_ids": 152
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"NO\"\n",
        "num_ids": 7
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Insert your code here\n    s1, e1 = interval1\n    s2, e2 = interval2\n    if s1 < e2 and s2 < e1:\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 55
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n",
        "num_ids": 21
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 < end1 and end1 < start2:\n        return \"NO\"\n    if start2 < end2 and end2 < start1:\n        return \"NO\"\n    if start1 <= start2 <= end1 or start2 <= start1 <= end2:\n        if end2 >= end1:\n            return \"YES\"\n        return \"YES\"\n    if start1 <= start2 and start2 <= end1:\n        if end2 >= end1:\n            return \"YES\"\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 147
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Please, note, that the intervals can be negative.\n    if interval1 == interval2:\n        return \"YES\"\n    elif not interval1 or not interval2:\n        return \"NO\"\n    else:\n        return is_prime(int(interval1[1])-int(interval1[0])+1+int(interval2[1])-int(interval2[0]))\n",
        "num_ids": 97
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    intersection_length = 0\n",
        "num_ids": 9
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    i1 = interval1\n    i2 = interval2\n    if i1[0] > i2[1] or i1[1] < i2[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 57
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # The intervals intersect if and only if there is intersection of start points and end points.\n    # This is because the start point of the intersection has to be the same\n    # as the end point of the intersection.\n    # The intersection of two intervals always has a length between 1 and the \n    # difference between their end points.\n    # The intersection of two intervals is empty if they have the same end points.\n    # Given two intervals, determine whether the end points of the two intervals\n    # are the same or not.\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if end1 <= start2 or end2 <= start1:\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 165
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    start_1, end_1 = interval1\n    start_2, end_2 = interval2\n    if end_1 < start_2 or end_2 < start_1:\n        return 'NO'\n    else:\n        return 'YES'\n",
        "num_ids": 60
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if arr == []:\n        return None\n    return sum([abs(i) for i in arr]) * prod([i for i in arr if i > 0]) * prod([i for i in arr if i < 0])\n",
        "num_ids": 52
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = None\n    if arr:\n        result = sum([abs(i) for i in arr]) * (-1 if arr[0] < 0 else 1)\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr:\n        return None\n    product = 1\n    sum_abs = 0\n    for i in arr:\n        if i > 0:\n            product *= i\n        elif i < 0:\n            product /= i\n            sum_abs += i\n    sum_abs = product * sum_abs\n    return sum_abs\n",
        "num_ids": 81
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if arr:\n        return sum([abs(x) for x in arr]) * prod_signs([sign(x) for x in arr])\n    else:\n        return None",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not arr:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not arr:\n        return None\n    magnitudes = [abs(number) for number in arr]\n    signs = [sign(number) for number in arr]\n    return sum(magnitudes) * reduce(lambda x, y: x * y, signs, 1)\n",
        "num_ids": 67
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return None if len(arr) == 0 else sum([abs(num) for num in arr]) * prod([sign(num) for num in arr])\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not arr:\n        return None\n    s = sum(abs(num) for num in arr)\n    p = prod(sign(num) for num in arr)\n    return s * p\n",
        "num_ids": 47
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return None\n    signs = [1, -1, 0]\n    sum_of_abs = sum([abs(x) for x in arr])\n    product = 1\n    for i in arr:\n        product *= signs[i]\n    return sum_of_abs * product",
        "num_ids": 77
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Time: O(2 ^ (N * N) * N * N * N) = O(2 ^ (N * N) * N * N)\n    # Space: O(2 ^ (N * N) * N * N)\n    if not grid:\n        return []\n    if not k:\n        return []\n    memo = {}\n    # init the memo\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            value = grid[i][j]\n            memo[value] = []\n            # the first element is equal to the index of the element\n            memo[value].append(1)\n",
        "num_ids": 158
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    N = len(grid)\n    if N < 2: return []\n    if N == 2: return [grid[0][0]] if k == 1 else []\n    \n    # Preprocess grid\n    for i in range(N):\n        for j in range(N):\n            grid[i][j] = [grid[i][j], i, j]\n    \n    def generate_all_paths(grid, k, curr_path):\n        N = len(grid)\n        if k == 0: return [[]]\n        \n        if len(curr_path) > k: return []\n        \n        res = []\n        for i in range(N):\n            for j in range(N):\n                if grid[i][j][0]!= 0:\n                    grid[i][j][0] = 0\n                    new_path = curr_path.copy()\n                    new_path.append(grid[i][j])\n                    res += generate_all_paths(grid, k - 1, new_path)\n        return res\n    \n    all_paths = generate_all_paths(grid, k, [])\n    \n    # TODO: Retrieve the minimum path\n    return sorted(all_paths, key=lambda x: (x[0][1], x[0][2]))[0",
        "num_ids": 310
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    if k == 0:\n        return []\n    if rows == 1:\n        return grid[0]\n    if cols == 1:\n        return [row[0] for row in grid]\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, rows):\n        dp[i][0] = grid[i][0] + dp[i - 1][0]\n    for j in range(1, cols):\n        dp[0][j] = grid[0][j] + dp[0][j - 1]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = grid[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n    print(dp)\n    if k == 1:\n        return [dp[-1][-1]]\n    res = []\n    temp = dp[-1][-1]\n    for i in range(1, k + 1):\n        if dp[-1][-i] < temp:\n            res.append(grid[-1][-i])\n            temp = dp[-1][-i]\n    res.reverse()\n    return res\n",
        "num_ids": 341
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    rows = len(grid)\n    columns = len(grid[0])\n",
        "num_ids": 20
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # (1) - Initialize the matrix m (dictionary) to store the minimum paths \n    # from the top left corner to the bottom right corner\n    #    Initialize the vector m_grid to store the minimum paths for all the \n    #    corner to corner paths\n    m_grid = {(0, 0): [grid[0][0]]}\n    m_grid[(0, 0)] = m_grid[(0, 1)] = m_grid[(1, 0)] = m_grid[(1, 1)] = \\\n                [grid[0][0], grid[0][1], grid[1][0], grid[1][1]]\n    # (2) - Loop from k to 1\n    for i in range(2, k+1):\n        # (2.1) - For each cell C in the grid, we loop through each neighbor\n        # of C\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                # (2.1.1) - For each neighbor of C, we loop through all the\n                # possible paths from C to C'\n                for r_p in range(r-1, r+2):\n                    for c_p in range(c-1, c+2):\n                        # (2.1.2) - We compare the current minimum path to the\n                        # path that is formed by the current cell C and the\n                        # neighbor C', and if the path is shorter, we replace\n                        # m_grid[C] with the path that is formed by C and C'.\n                        # The path that is formed by C and C' is composed of\n                        # the minimum path of C and the neighbor of C', and we\n                        # add the neighbor of C' to the path\n                        if (0 <= r_p <= len(grid)-1) and (0 <= c_p <= len(grid[0])-1):\n                            if (r, c) not in m_grid:\n                                m_grid[(r, c)] = []\n                            new_grid = m_grid[(r, c)]\n                            m_grid[(r, c)] = [grid[r][c]] + new_grid\n                            if len(m_grid[(r, c)]) > i:\n                                m_grid[(r, c)] = m_grid[(r, c)][:i]\n    # (3) - Return the minimum path\n    return m_grid[(len(grid)-1, len(grid[0])-1)][0]\n",
        "num_ids": 589
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n",
        "num_ids": 39
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Handle edge cases\n    if not grid or not grid[0]:\n        return []\n    if k <= 0:\n        return []\n    if k == 1:\n        return [grid[0][0]]\n    \n    # We need to initialize our DFS with the first row and first column\n    # of the grid\n    curr_row = 0\n    curr_col = 0\n    \n    # We will hold our answer in a stack\n    ans = [grid[0][0]]\n    \n    # We will keep track of how many cells we have visited\n    num_visited = 1\n    \n    # This will allow us to know when we've reached the end of the grid\n    # without messing up our traversal\n    row_limit = len(grid) - 1\n    col_limit = len(grid[0]) - 1\n    \n    # This will allow us to know when we've reached the end of the path\n    # without messing up our traversal\n    k_limit = k - 1\n    \n    # We will only traverse the grid if the cell we're on is not our target\n    # value\n    while num_visited < k:\n        # We will only traverse the grid if we haven't reached the limit\n        if curr_row <= row_limit:\n            # We will traverse left until we reach the end of the current row\n            # or we've already visited the target value\n            while curr_col <= col_limit and grid[curr_row][curr_col]!= ans[-1]:\n                ans.append(grid[curr_row][curr_col])\n                curr_col += 1\n                num_visited += 1\n                \n            # If we have reached the end of the row, move on to the next row\n            if curr_col == col_limit + 1:\n                curr_row += 1\n                curr_col = 0\n        \n        # We will only traverse the grid if we haven't reached the limit\n        if curr_col <= col_limit:\n            # We will traverse up until we reach the end of the current column\n            # or we've already visited the target value\n            while curr_row <= row_limit and grid[curr_row][curr_col]!= ans[-1]:\n                ans.append(grid[curr_row][curr_col])\n                curr_row += 1\n                num_visited += 1\n                \n            # If we have reached the end of the row, move on to the next column\n            if curr_row == row_limit + 1:\n                curr_row = 0\n                curr_col += 1\n                \n        if num_visited == k:\n            # We've reached the end of the path so we will return the answer\n            break\n        \n    return ans\n",
        "num_ids": 649
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    m, n = len(grid), len(grid[0])\n    dp = [[float('inf') for _ in range(n + 1)] for _ in range(m + 1)]\n    dp[0][0] = 0\n    for i in range(m):\n        for j in range(n):\n            for di in range(min(i + 1, k), 0, -1):\n                if i + di - 1 < m:\n                    dp[i + di][j] = min(dp[i + di][j], dp[i + di - 1][j] + abs(grid[i + di - 1][j] - grid[i][j]))\n            for dj in range(min(j + 1, k), 0, -1):\n                if j + dj - 1 < n:\n                    dp[i][j + dj] = min(dp[i][j + dj], dp[i][j + dj - 1] + abs(grid[i][j + dj - 1] - grid[i][j]))\n",
        "num_ids": 240
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    \n    def dfs(row, col, visited, pathLen):\n        if row < 0 or row >= rows or col < 0 or col >= cols:\n            return float('inf')\n        if pathLen >= k:\n            return float('inf')\n        if (row, col) in visited:\n            return float('inf')\n        \n        if row == rows - 1 and col == cols - 1:\n            return pathLen\n        \n        visited.add((row, col))\n        ans = float('inf')\n        ans = min(ans, pathLen)\n        for r, c in [(-1,0), (0,1), (1,0), (0,-1)]:\n            ans = min(ans, dfs(row+r, col+c, visited, pathLen+1))\n        visited.remove((row, col))\n        return ans\n    \n    return dfs(0, 0, set(), 0)\n",
        "num_ids": 238
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not grid or not grid[0] or k <= 0:\n        return []\n    rows = len(grid)\n    cols = len(grid[0])\n",
        "num_ids": 40
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    res = [1, 3]\n    if n < 2:\n        return res\n    if n == 2:\n        return res + [2]\n    if n % 2 == 0:\n        for i in range(3, n + 1, 2):\n            res.append(1 + res[-1] / 2)\n        return res\n    else:\n        for i in range(3, n + 1, 2):\n            res.append(res[-1] + res[-2] + res[-3])\n        return res\n    ",
        "num_ids": 127
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # tri(1) = 3\n    # tri(n) = 1 + n / 2, if n is even\n    # tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd\n    nums = [1, 3]\n    if n == 0:\n        return nums\n    elif n == 1:\n        return nums\n    while len(nums) < n + 1:\n        if len(nums) % 2 == 0:\n            nums.append(nums[-1] + nums[-2])\n        else:\n            nums.append(nums[-1] + nums[-2] + nums[-3])\n    return nums",
        "num_ids": 177
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            l.append(l[i - 1] + l[i - 2] + l[i - 3])\n        else:\n            l.append(l[i - 1] + l[i - 2] + l[i - 3])\n    return l\n",
        "num_ids": 94
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n    else:\n        return [1, 3, 2] + list(tri(n - 1) + tri(n - 2) + tri(n + 1))\n",
        "num_ids": 85
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    seq = [1, 1, 2, 3]\n    for i in range(4, n + 1):\n        if i % 2 == 0:\n            seq.append(seq[i // 2])\n        else:\n            seq.append(seq[(i - 1) // 2] + seq[(i - 2) // 2] + seq[(i + 1) // 2])\n    return seq\n",
        "num_ids": 94
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [1, 3, 2, 8] if n == 0 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
        "num_ids": 38
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Initialize previous 2 numbers\n    prev_1 = 1\n    prev_2 = 0\n",
        "num_ids": 23
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        if (n % 2 == 0):\n            return [1, 3] + [2] * (n - 1)\n        else:\n            return [1, 3] + [2] * (n - 1) + [5]\n",
        "num_ids": 106
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1, 3]\n    if n == 3:\n        return [1, 3, 2]\n    res = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            res.append(1 + int(i/2))\n        else:\n            res.append(res[i - 3] + res[i - 2] + res[i - 1])\n    return res\n    \n",
        "num_ids": 140
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [3, 2]\n    tribonacci = [3, 1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + (i // 2))\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n    return tribonacci\n",
        "num_ids": 135
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    digits = []\n    for i in str(n):\n        if int(i) % 2 == 0:\n            digits.append(0)\n        else:\n            digits.append(int(i))\n    return functools.reduce(lambda x, y: x * y, digits)\n",
        "num_ids": 73
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return 0 if sum(int(d) for d in str(n) if int(d)%2==0) == len(str(n)) else reduce(mul,(int(d) for d in str(n) if int(d)%2!=0),1)\n",
        "num_ids": 67
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            return 0\n        product *= digit\n        n //= 10\n    return product\n",
        "num_ids": 49
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 1\n    for digit in str(n):\n        if int(digit)%2 == 0:\n            return 0\n        else:\n            result *= int(digit)\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    factors = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            continue\n        factors.append(i)\n    return product(factors)\n",
        "num_ids": 49
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert type(n) == int and n > 0\n    n = str(n)\n    digits_list = [int(char) for char in n]\n    odds_list = []\n    for digit in digits_list:\n        if digit % 2!= 0:\n            odds_list.append(digit)\n    product_of_odds = 1\n    for odd in odds_list:\n        product_of_odds *= odd\n    return product_of_odds\n",
        "num_ids": 116
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    product = 1\n    while n > 0:\n        product *= n % 10\n        n //= 10\n    return product\n",
        "num_ids": 31
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s = 1\n    for d in str(n):\n        if int(d) % 2!= 0:\n            s *= int(d)\n    return s\n    ",
        "num_ids": 42
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    digits = 1\n    if n == 0:\n        return 0\n    else:\n        while n > 0:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = n // 10\n                digits = digits * (n % 10)\n        return digits\n",
        "num_ids": 72
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = 1\n    for i in str(n):\n        if int(i) % 2!= 0:\n            result *= int(i)\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    bracket_list = []\n    if len(string) % 2 == 0:\n        return False\n    for i in string:\n        if i == '[':\n            bracket_list.append(i)\n        else:\n            bracket_list.pop()\n    return bracket_list\n",
        "num_ids": 69
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # return not is_valid(string)\n    return brackets_match(string)\n",
        "num_ids": 21
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    check = []\n    open = 0\n    \n    for i in range(len(string)):\n        if string[i] == '[':\n            check.append('[')\n            open += 1\n        elif string[i] == ']':\n            if open == 0:\n                return False\n            check.pop()\n            open -= 1\n    if open == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 101
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Use a stack to store the indexes of brackets\n    # If an opening bracket is met, then pop it from the stack\n    # If a closing bracket is met, check if the top of the stack is a matching bracket\n    # If it is, then the stack is not empty and the index of closing bracket does not match the index of opening bracket\n    # If they do not match, then the brackets are not nested\n",
        "num_ids": 92
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if string == \"\":\n        return False\n    while '[]' in string:\n        string = string.replace('[]','')\n    return string == ''\n",
        "num_ids": 39
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    bracket_stack = []\n    bracket_pairs = {'(': ')', '[': ']', '{': '}'}\n    bracket_pairs_list = list(bracket_pairs.values())\n    for bracket in string:\n        if bracket in bracket_pairs_list:\n            bracket_stack.append(bracket)\n        else:\n            if bracket_stack:\n                if bracket!= bracket_pairs[bracket_stack.pop()]:\n                    return False\n            else:\n                return False\n    return True if bracket_stack == [] else False\n",
        "num_ids": 141
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return True if string.count('[') == string.count(']') else False\n",
        "num_ids": 21
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    if string.count(\"[\") == 1 and string.count(\"]\") == 1:\n        return True\n    if string.count(\"[\") == 1 and string.count(\"]\") == 0:\n        return False\n    if string.count(\"[\") == 2 and string.count(\"]\") == 1:\n        return True\n    if string.count(\"[\") == 0 and string.count(\"]\") == 1:\n        return True\n    if string.count(\"[\") == 0 and string.count(\"]\") == 0:\n        return False\n",
        "num_ids": 128
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if string == \"\":\n        return False\n    \n    stack = []\n    \n    for bracket in string:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if len(stack) > 0 and stack[len(stack) - 1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return True\n",
        "num_ids": 93
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    bracket_stack = []\n    for bracket in string:\n        if bracket == '[' or bracket == '(':\n            bracket_stack.append(bracket)\n        elif bracket == ']' or bracket == ')':\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                return False\n    return bracket_stack == []\n",
        "num_ids": 86
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    new_lst = [int(math.ceil(i ** 2)) for i in lst]\n    return sum(new_lst)\n",
        "num_ids": 36
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst = [round(n) for n in lst]\n    print(lst)\n    return sum([n**2 for n in lst])\n    \n",
        "num_ids": 40
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s = 0\n    for i in lst:\n        s = s + (i*i)\n    return int(s)\n    #raise NotImplementedError\n",
        "num_ids": 41
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    total = 0\n    for i in lst:\n        if type(i) == int:\n            total += i**2\n        else:\n            total += int(i)**2\n    return total\n",
        "num_ids": 49
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([int(math.ceil(i**2)) for i in lst])\n",
        "num_ids": 23
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum([i ** 2 for i in lst])\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return round(sum([(int(math.ceil(el**2))) for el in lst]))\n",
        "num_ids": 27
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for elem in lst:\n        if type(elem)!= float:\n            result.append(int(elem)**2)\n        else:\n            result.append(elem**2)\n    return sum(result)\n",
        "num_ids": 62
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([int(round(i**2)) for i in lst])\n",
        "num_ids": 20
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return round(sum(map(lambda x: round(x * x), lst)))\n",
        "num_ids": 22
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if txt == '':\n        return False\n    else:\n        for i in txt[-1]:\n            if i.isalpha() == True:\n                return True\n            else:\n                return False\n",
        "num_ids": 51
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return txt[len(txt)-1] if txt[len(txt)-1].isalpha() and not txt[len(txt)-1].isspace() else False\n",
        "num_ids": 42
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # taking a string as input\n    if len(txt) == 0:\n        return False\n    # splitting the string on spaces to get a list of words\n    # appending the last element of the list with the first\n    # element of the list\n    txt += txt[0]\n    # spliting the string on the first space and removing the space\n    # from the list\n    txt = txt.split(' ')[:-1]\n    # checking if the last element of the list is an alphabetical character\n    return (txt[-1].isalpha())\n",
        "num_ids": 130
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(txt) == 0:\n        return False\n    return txt[-1].isalpha()\n",
        "num_ids": 27
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Split the given string by a space\n    # We need to remove the last element of the list\n    # if the list is empty.\n    if len(txt) == 0:\n        return False\n    else:\n        lst = txt.split()\n        if len(lst) == 0:\n            return False\n        else:\n            lst.pop()\n            lst = \"\".join(lst)\n            last_char = lst[-1]\n            # Check if the character is alphabetical\n            return last_char.isalpha()\n            \n",
        "num_ids": 133
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len(txt) > 0 and txt[-1].isalpha() and txt.count(' ') > 0\n",
        "num_ids": 30
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    #your code here\n    txt_list = txt.split()\n    if txt_list == []:\n        return False\n    return txt_list[-1][-1].isalpha()\n",
        "num_ids": 51
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # if len(txt) > 0:\n    #     if txt[-1].isalpha():\n    #         return True\n    #     return False\n    # return False\n    return txt.endswith((' ', '.'))\n",
        "num_ids": 58
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sorted_arr = sorted(arr)\n    for i, val in enumerate(arr):\n        if sorted_arr[i] > val:\n            return sorted_arr[i-1]\n    return -1\n",
        "num_ids": 52
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = len(arr)\n    ans = -1\n    for i in range(1,n):\n        if arr[i] < arr[i-1]:\n            ans = i\n    return ans\n",
        "num_ids": 49
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    m = -1\n    for i, num in enumerate(arr):\n        if i == 0:\n            m = i\n        elif num < arr[i - 1]:\n            m = i\n    return m\n",
        "num_ids": 52
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    d = dict()\n    for i, n in enumerate(arr):\n        try:\n            d[n]\n        except KeyError:\n            d[n] = i\n    return max(d.values())\n",
        "num_ids": 52
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Check if input is valid\n    if len(arr) < 2:\n        return -1\n",
        "num_ids": 24
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] < arr[right]:\n            left += 1\n        elif arr[left] > arr[right]:\n            right -= 1\n        else:\n            return -1\n    return left\n",
        "num_ids": 71
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    arr.sort()\n    last = 0\n    for i in arr:\n        if i <= last:\n            return arr.index(i)\n        last = i\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = 0\n    while i < len(arr)-1:\n        if arr[i] <= arr[i+1]:\n            i += 1\n        else:\n            return i\n    return -1",
        "num_ids": 48
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return None, None\n",
        "num_ids": 7
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst_len = len(lst)\n",
        "num_ids": 13
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    max_neg, min_pos = None, None\n    for num in lst:\n        if num >= 0 and min_pos is None:\n            min_pos = num\n        elif num > 0 and num < min_pos:\n            min_pos = num\n        elif num <= 0 and num > max_neg:\n            max_neg = num\n        elif num < 0 and num > max_neg:\n            max_neg = num\n    return (max_neg, min_pos)\n",
        "num_ids": 136
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    if len(lst) == 0:\n        return (None, None)\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            result.append(lst[i])\n        elif lst[i] < 0:\n            result.append(lst[i])\n    return (max(result), min(result))\n",
        "num_ids": 95
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    return (None, None) if len(lst) == 0 else (max([-x for x in lst if x < 0]), min([x for x in lst if x > 0]))\n",
        "num_ids": 49
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    neg_int_lst = []\n    pos_int_lst = []\n    if len(lst) == 0:\n        return None, None\n    for i in lst:\n        if i < 0:\n            neg_int_lst.append(i)\n        elif i > 0:\n            pos_int_lst.append(i)\n    return max(neg_int_lst), min(pos_int_lst)\n",
        "num_ids": 108
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    negative_lst = []\n    positive_lst = []\n",
        "num_ids": 17
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    max = 0\n    min = 0\n    for item in lst:\n        if item > max:\n            max = item\n        if item < min:\n            min = item\n    return (max, min)\n",
        "num_ids": 51
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Hint: the smallest/largest values can be obtained with the following:\n    # - Make a copy of the list\n    # - Sort the copy of the list\n    # - Take the first/last element of the sorted list\n",
        "num_ids": 53
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if str(a) == str(b):\n        return None\n    if type(a)!= type(b):\n        return a if a > b else b\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        a = float(a)\n        b = float(b)\n    if type(a) == float or type(b) == float:\n        if a > b:\n            return a\n        else:\n            return b\n",
        "num_ids": 135
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    try:\n        return max(a, b)\n    except:\n        try:\n            return max(float(a), float(b))\n        except:\n            return None\n",
        "num_ids": 43
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return a if type(a) == type(b) else b if type(a) == type(b) else None\n",
        "num_ids": 29
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if type(a) == type(b):\n        return None if a == b else max(a,b)\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(b) == float:\n        return b if b > a else a\n    elif type(a) == str:\n        return a if a.replace(',','') > b.replace(',','') else b\n    elif type(b) == str:\n        return b if b.replace(',','') > a.replace(',','') else a\n",
        "num_ids": 140
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if type(a) == str and type(b) == str:\n        a = a.replace(\",\",\".\")\n        b = b.replace(\",\",\".\")\n        return a if float(a) > float(b) else b\n    elif type(a) == str or type(b) == str:\n        return None\n    elif a == b:\n        return None\n    return a if a > b else b\n",
        "num_ids": 100
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        try:\n            a = float(a)\n            b = float(b)\n        except:\n            return None\n    try:\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    except:\n        return None\n",
        "num_ids": 116
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if (isinstance(a, str) and isinstance(b, str)):\n        if (a[-1] == \",\" or a[-1] == \".\"):\n            a = a[:-1]\n        if (b[-1] == \",\" or b[-1] == \".\"):\n            b = b[:-1]\n    try:\n        if (float(a) > float(b)):\n            return a\n        else:\n            return b\n    except ValueError:\n        if (isinstance(a, str) and isinstance(b, str)):\n            if (a > b):\n                return a\n            else:\n                return b\n        else:\n            return None\n",
        "num_ids": 167
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(\",\",\".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\",\".\"))\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str):\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    else:\n        if float(b) > float(a):\n            return b\n        else:\n            return a\n",
        "num_ids": 187
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = abs(n)\n    evens = []\n    for i in range(2, n, 2):\n        if is_even(i) and is_even(n-i):\n            evens.append(i)\n            evens.append(n-i)\n    if len(evens) == 4:\n        return True\n    return False\n",
        "num_ids": 85
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = abs(n)\n    for i in range(2, n):\n        if (n - i * 2) % 4 == 0:\n            return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    return sum(x for x in range(1, n) if x % 2 == 0) == n\n    \ndef find_longest_substring(str):\n    \"\"\"\n    Write a Python program to find the longest substring of a given string in which the letters occur in alphabetical order.\n    Example\n    Input String: 'awaglknagawunagwkwagl'\n    Output String: 'wagl'\n    \"\"\"\n    \n    longest_substring = []\n    i = 0\n    while i < len(str):\n        current_char = str[i]\n        while i < len(str) and str[i] >= current_char:\n            longest_substring.append(str[i])\n            i += 1\n    return longest_substring\n    \ndef find_longest_substring_without_repeating_chars(str):\n    \"\"\"\n    Write a Python program to find the first longest substring without repeating characters in a given string.\n    Example\n    Input String: 'abcbaxcbaybdcdbacb'\n    Output String: 'abc'\n    Explanation: Longest substring without repeating characters is 'abc'.\n    \"\"\"\n    \n    max_length = 0\n    i = 0\n    while i < len(str):\n        j = i\n        current_substring = []\n        while j < len(str) and str[j] not in current_substring:\n            current_substring.append(str[j])\n            j += 1\n        if len(current_substring) > max_length:\n            max_length = len(current_substring)\n            start_index = i\n        i += 1\n    return str[start_index: start_index + max_length]\n    \ndef longest_substring_with_k_distinct_chars(str, k):\n    \"\"\"\n    Write a Python program to find the length of the longest substring in a given string which has no more than K distinct characters.\n    Example\n    Input String: 'araaci', K=2\n    Output String: 'aca'\n    \"\"\"\n    \n    longest_substring = []\n    i = 0\n    while i < len(str):\n        current_char = str[i]\n        while i < len(str) and str[i] == current_char:\n            longest_substring.append(str[i])\n            i += 1\n    return longest_substring\n    \ndef sum_of_digits(n):\n    \"\"\"\n    Write a Python program to compute the sum of digits of a given integer.\n    Example\n    Input: n = 1234\n    Output: 10\n    \"\"\"\n    \n    return sum([int(i) for i in str(n)])\n    \ndef sum_of_even_digits(n):\n    \"\"\"\n    Write a Python program to compute the sum of all even digits in a given integer.\n    Example\n    Input: n = 1234\n    Output: 10\n    \"\"\"\n    \n    return sum([int(i) for i in str(n) if int(i) % 2 == 0])\n    \ndef count_substring(str, sub):\n    \"\"\"\n    Write a Python program to count occurrences of a substring in a given string.\n    Example\n    Input String: 'the quick brown fox jumps over the lazy dog'\n    Substring: 'fox'\n    Output: 2\n    \"\"\"\n    \n    return str.count(sub)\n    \ndef is_valid_encoding(str):\n    \"\"\"\n    Write a Python program to check if a given string is a valid encoding of a given UTF-8 string.\n    Example\n    Input String: 'P\u0159esunout jako Jirka'\n    UTF-8 String: 'P\u0159esunout jako JI\u0160KA'\n    Output: True\n    \"\"\"\n    \n    return len(str) == len(bytes(str, 'utf-8'))\n    \ndef check_if_string_is_palindrome(str):\n    \"\"\"\n    Write a Python program to check if a given string is palindrome.\n    Example\n    Input String: 'radar'\n    Output: True\n    \"\"\"\n    \n    return str == str[::-1]\n    \ndef is_anagram(str1, str2):\n    \"\"\"\n    Write a Python program to check if two given strings are anagrams or no",
        "num_ids": 1025
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num_list = []\n    for i in range(2, n):\n        num = i\n        count = 0\n        while num > 0:\n            count += num % 10\n            num = num // 10\n        if count % 2 == 0:\n            num_list.append(i)\n        if len(num_list) == 4:\n            break\n    if len(num_list) == 4:\n        return True\n    return False\n",
        "num_ids": 104
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # range excludes the upper bound\n    for i in range(0, n+1):\n        if is_even(i):\n            if is_even(n-i):\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # all numbers below 4 are odd\n    if n < 4:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = abs(n)\n    i = 2\n    while i**2 <= n:\n        if n % i == 0:\n            # if i is a factor of n then there is an even factor of n which is greater than i\n            if (n / i) % 2 == 0:\n                if is_equal_to_sum_even((n / i) - i):\n                    return True\n        i += 1\n    return False\n",
        "num_ids": 101
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for x in range(4, n, 2):\n        if sum_of_multiples_of_3_and_5(x) == n:\n            return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (n % 4 == 0 and\n            is_divisible_by_two(n/4) and\n            is_divisible_by_two((n/4)/2) and\n            is_divisible_by_two(((n/4)/2)/2))\n",
        "num_ids": 65
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n",
        "num_ids": 27
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n",
        "num_ids": 27
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # The code below is incorrect and we'll fix it in a coming task\n    \n    if n < 0:\n        raise ValueError('Invalid input, n should be >= 0')\n    if n == 0:\n        return 1\n    else:\n        return n*special_factorial(n-1)\n",
        "num_ids": 73
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Handle the base case and remove one from n\n    if n <= 1:\n        return 1\n",
        "num_ids": 24
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n > 0:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n    return factorial\n",
        "num_ids": 39
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n",
        "num_ids": 26
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n1 = 1\n    for i in range(1, n+1):\n        n1 = n1 * i\n    return n1\n",
        "num_ids": 34
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return reduce(lambda x, y: x*y, range(1, n+1))\n",
        "num_ids": 23
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = 1\n    for i in range(1, n+1):\n        result = result * i\n    return result",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # TODO: Write a doctest for this function\n    \n",
        "num_ids": 16
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = ''\n    for i in text:\n        if i.isalpha() or i =='':\n            result = result + i\n        else:\n            result = result + '_'\n    result = result.replace('  ','_')\n    return result.replace(' ','-')\n",
        "num_ids": 69
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    text = text.split(' ')\n    print(text)\n    result = []\n    for i in text:\n        if len(i) == 0:\n            continue\n        if i[0] =='':\n            i = i[1:]\n        if i[-1] =='':\n            i = i[:-1]\n        if i.count(' ') > 1:\n            i = i.replace(' ', '-')\n        result.append(i)\n    return '_'.join(result)\n",
        "num_ids": 122
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    text = text.strip()\n    text = \"\".join([c for c in text if c!= \" \"]).replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text\n",
        "num_ids": 52
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # We keep track of the amount of spaces we have seen\n    # In the case that we have more than 2 spaces, we replace them with -\n    spaces = 0\n    new_text = \"\"\n    for c in text:\n        if c == \" \":\n            spaces += 1\n            if spaces > 2:\n                new_text += \"_\"\n            else:\n                new_text += c\n        else:\n            new_text += c\n            spaces = 0\n    return new_text",
        "num_ids": 116
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    text = text.replace(\" \",\"_\")\n    text = text.replace(\"  \",\"_\")\n    text = text.replace(\"   \",\"_\")\n    text = text.replace(\"    \",\"_\")\n    return text\n",
        "num_ids": 53
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    new_text = \"\"\n    for c in text:\n        if c == \" \":\n            new_text += \"_\"\n        else:\n            new_text += c\n    if new_text.count(\"  \") >= 2:\n        new_text = new_text.replace(\"  \", \"-\")\n    return new_text\n",
        "num_ids": 78
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #create a regex object to match consecutive spaces\n    space_consecutive_pattern = re.compile(r\"\\s{2,}\")\n",
        "num_ids": 36
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    text_length = len(text)\n    if text_length == 0:\n        return \"\"\n",
        "num_ids": 26
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    new_text = []\n    for i in text:\n        if i =='':\n            new_text.append('_')\n        else:\n            new_text.append(i)\n    # remove last underscore if no space\n    if new_text[-1] == '_':\n        new_text.pop()\n",
        "num_ids": 77
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    dot_pos = file_name.find(\".\")\n    if len(file_name[:dot_pos]) >= 3:\n        return \"No\"\n    elif len(file_name[dot_pos+1:]) not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    elif dot_pos == -1:\n        return \"No\"\n    elif len(file_name[:dot_pos]) == 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "num_ids": 123
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if '.' in file_name and file_name[0].isalpha():\n        if len(re.findall(\"[0-9]\", file_name)) < 3:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n        \n        \n",
        "num_ids": 73
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Your code goes here\n    # Hint: You can check if a character is in a string by using the 'in' operator\n    # ex: if 'a' in 'apple': print('a is in apple')\n    result = 'Yes'\n    for i in file_name:\n        if i.isdigit() == True:\n            result = 'No'\n            break\n    dot_position = file_name.find('.')\n    if dot_position == -1:\n        result = 'No'\n    else:\n        before_dot = file_name[:dot_position]\n        if before_dot == '':\n            result = 'No'\n        else:\n            for j in before_dot:\n                if j.isalpha() == False:\n                    result = 'No'\n                    break\n            after_dot = file_name[dot_position + 1:]\n            if after_dot not in ['.txt', '.exe', '.dll']:\n                result = 'No'\n    return result\n",
        "num_ids": 235
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if file_name.count('.') == 1:\n        if file_name.split('.')[0].isalpha():\n            if file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n                if len(file_name.split('.')[0]) < 4:\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "num_ids": 119
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if 3 <= len(file_name) <= 3:\n        return 'No'\n    elif file_name.count('.')!= 1:\n        return 'No'\n    elif file_name[:file_name.index('.')] == '':\n        return 'No'\n    elif file_name[file_name.index('.')+1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n    \n    ",
        "num_ids": 117
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # write your code here and return the right answer\n",
        "num_ids": 13
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #raise NotImplementedError\n    # if the file name is less than 3 characters, it is invalid\n    if len(file_name) < 3:\n        return 'No'\n    # if the file name is greater than 3 characters, it is invalid\n    if len(file_name) > 3:\n        return 'No'\n    # if the file name is less than 3 characters, it is invalid\n    elif len(file_name) == 3:\n        # if there is an item in the list, it is invalid\n        if '.' in file_name:\n            return 'No'\n        # if there is no item in the list, it is valid\n        else:\n            return 'Yes'\n    # if there is no item in the list, it is valid\n    elif len(file_name) == 3:\n        return 'Yes'\n        \ndef file_ext_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_ext_check(\"example.txt\") # => 'Yes'\n    file_ext_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # raise NotImplementedError\n    # if the file name is greater than 3 characters, it is invalid\n    if file_name[-4:] == '.txt':\n        return 'Yes'\n    # if the file name is less than 3 characters, it is invalid\n    if file_name[-4:] == '.dll':\n        return 'Yes'\n    # if the file name is less than 3 characters, it is invalid\n    if file_name[-4:] == '.exe':\n        return 'Yes'\n    # if the file name is less than 3 characters, it is invalid\n    if file_name[-4:] == '.exe':\n        return 'Yes'\n    \ndef file_size_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_size_check(\"example.txt\") # => 'Yes'\n    file_size_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # raise NotImplementedError\n    # if the file size is less than 10 characters, it is invalid\n    if len(file_name) < 10:\n        return 'No'\n    # if the file size is greater than 10 characters, it is invalid\n    if len(file_name) > 10:\n        return 'No'\n    # if the file size is less than 10 characters, it is invalid\n    elif len(file_name) == 10:\n        # if there is an item in the list, it is invalid\n        if '.' in file_name:\n            return 'No'\n        # if there is no item in the list, it is valid\n        else:\n            return 'Yes'\n    # if there is no item in the list, it is valid\n    elif len(file_name) == 10:\n        return 'Yes'\n    ",
        "num_ids": 1025
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    # Solution:\n    import re\n    if re.search('[0-9]{3}',file_name)!= None:\n        return 'No'\n    elif re.search('[a-zA-Z]\\.',file_name)!= None:\n        if re.search(r'[0-9]',file_name[file_name.index('.'):file_name.index('.')+3]) == None:\n            return 'No'\n        elif file_name[file_name.index('.')+1:file_name.index('.')+4] in ['txt','exe','dll']:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "num_ids": 176
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    \n    # Write your code here\n    # If there is less than 3 digits in the file name, it is invalid\n    if file_name.isdigit() == True and len(file_name) < 3:\n        return 'No'\n    else:\n        file_name = file_name.split('.')\n        # If there is only one dot in the file name, it is invalid\n        if len(file_name) == 1:\n            return 'No'\n        # If there are more than 3 digits in the file name, it is invalid\n        elif len(file_name[0]) < 3:\n            return 'No'\n        else:\n            file_name = file_name[0].split('.')\n            # If the file's name contains more than one dot, it is invalid\n            if len(file_name) > 1:\n                return 'No'\n            else:\n                # Check if the file's name is not valid\n                if file_name[0][0].isalpha() == False:\n                    return 'No'\n                # If the file's name is valid, check the file's extension\n                else:\n                    if file_name[1] == 'txt' or file_name[1] == 'exe' or file_name[1] == 'dll':\n                        return 'Yes'\n                    else:\n                        return 'No'\n        ",
        "num_ids": 317
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum([i if i % 3 == 0 else i**2 if i % 4 == 0 else i**3 for i in lst])\n",
        "num_ids": 33
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum([num**2 if num % 3 == 0 else num**3 for num in lst])\n",
        "num_ids": 25
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not lst:\n        return 0\n    new_list = []\n    for i,j in enumerate(lst):\n        if i%4 == 0 and i%3!= 0:\n            new_list.append(j**3)\n        elif i%3 == 0 and i%4!= 0:\n            new_list.append(j**2)\n        else:\n            new_list.append(j)\n    return sum(new_list)\n",
        "num_ids": 112
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = 0\n    for i in range(0, len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            result += pow(lst[i], 2)\n        elif i % 4 == 0 and i % 3!= 0:\n            result += pow(lst[i], 3)\n        else:\n            result += lst[i]\n    return result\n",
        "num_ids": 97
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst = [1,2,3]\n    lst[1] = [2,3]\n    lst[2] = 3\n    lst.append(4)\n    print(lst)\n    sum = 0\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            sum = sum + i ** 2\n    return sum\n    \n",
        "num_ids": 94
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum([x**2 if x%3==0 else x**3 if x%4==0 else 0 for x in lst])\n",
        "num_ids": 33
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    final_sum = 0\n    for i in range(len(lst)):\n        if i % 4 == 0:\n            final_sum += lst[i] ** 3\n        elif i % 3 == 0:\n            final_sum += lst[i] ** 2\n    \n    return final_sum\n",
        "num_ids": 76
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    splitted_sentence = sentence.split()\n    return''.join([word for word in splitted_sentence if len(word) in prime_numbers()])\n",
        "num_ids": 40
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \" \".join(filter(is_prime, sentence.split()))\n",
        "num_ids": 19
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    words = sentence.split()\n    for word in words:\n        if not is_prime(len(word)):\n            return False\n    return words\n",
        "num_ids": 37
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    from utils import is_prime\n    words = sentence.split(' ')\n    result = ''\n    for word in words:\n        if is_prime(len(word)):\n            result += word +''\n    return result[:-1]\n",
        "num_ids": 59
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    words = sentence.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # return''.join([word for word in sentence.split() if is_prime(len(word))])\n    return''.join([word for word in sentence.split() if is_prime(len(word)) and word not in '.,;:?!-'])\n",
        "num_ids": 60
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    words = sentence.split(\" \")\n    result = \"\"\n",
        "num_ids": 18
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    new_words = []\n    words = sentence.split(\" \")\n    for word in words:\n        if is_prime(len(word)):\n            new_words.append(word)\n    return \" \".join(new_words)\n",
        "num_ids": 58
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    splitted_sentence = sentence.split(\" \")\n    primes = []\n    for word in splitted_sentence:\n        if is_prime(len(word)):\n            primes.append(word)\n    return \" \".join(primes)",
        "num_ids": 62
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numerator = int(x[0:x.index('/')])\n    denominator = int(x[x.index('/')+1:len(x)])\n    numerator2 = int(n[0:n.index('/')])\n    denominator2 = int(n[n.index('/')+1:len(n)])\n",
        "num_ids": 89
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return True\n",
        "num_ids": 5
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    print(x, n)\n    # print(eval(x) * eval(n))\n",
        "num_ids": 23
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    # your code here\n    #simplify(\"7/10\", \"10/2\")\n    #print(type(x), x)\n    #print(type(n), n)\n    \n    #print(x, n)\n    \n    if x == \"0\":\n        return False\n    elif x == \"1\":\n        return True\n    else:\n        if n == \"0\":\n            return False\n        elif n == \"1\":\n            return True\n        else:\n            #print(\"loop\")\n            if \"-\" in x and \"-\" in n:\n                if x[0] == \"-\" and n[0] == \"-\":\n                    #print(\"dont\")\n                    return False\n                elif x[0]!= \"-\" and n[0]!= \"-\":\n                    #print(\"yep\")\n                    x = x.split(\"-\")\n                    n = n.split(\"-\")\n                    \n                    if int(x[0]) * int(n[0]) + int(x[1]) * int(n[1]) == 0:\n                        return True\n                    else:\n                        return False\n                else:\n                    #print(\"nah\")\n                    return False\n            elif \"-\" in x:\n                x = x.split(\"-\")\n                #print(x)\n                if int(x[0]) * int(n) + int(x[1]) == 0:\n                    return True\n                else:\n                    return False\n            elif \"-\" in n:\n                n = n.split(\"-\")\n                if int(n[0]) * int(x) + int(n[1]) == 0:\n                    return True\n                else:\n                    return False\n            else:\n                if int(x) * int(n) == 0:\n                    return True\n                else:\n                    return False\n                    \nx = \"1/5\"\nn = \"5/1\"\nprint(simplify(x, n))",
        "num_ids": 455
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if int(x)!= 0:\n        if int(n) % int(x) == 0:\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if x == \"0\" or n == \"0\":\n        return True\n    numer = int(x.split(\"/\")[0])\n    denom = int(n.split(\"/\")[0])\n    return numer % denom == 0\n",
        "num_ids": 60
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), x))\n",
        "num_ids": 30
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    nums = sorted(nums, key=lambda x: (sum([int(i) for i in str(x)]), x))\n    return nums\n",
        "num_ids": 38
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    nums.sort(key=lambda x: sum(int(digit) for digit in str(x)))\n    return nums\n",
        "num_ids": 31
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(nums, key=lambda num: sum(int(n) for n in str(num)))\n    # if nums == []:\n    #     return []\n    # return sorted(nums, key=lambda x: sum([int(c) for c in str(x)]))\n",
        "num_ids": 70
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(nums, key=lambda x: sum([int(y) for y in str(x)]))\n",
        "num_ids": 28
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not nums:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(nums, key=lambda x: sum([int(x) for x in str(x)]) + x.index)",
        "num_ids": 32
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    odd_count = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0:\n            odd_count += 1\n    return odd_count\n",
        "num_ids": 43
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #iterate through array and check conditions\n    count = 0\n    for x in nums:\n        if x > 10:\n            if str(x)[0] % 2 == 1 and str(x)[-1] % 2 == 1:\n                count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    output = []\n    for num in nums:\n        num = str(num)\n        first_digit = int(num[0])\n        last_digit = int(num[-1])\n        if first_digit % 2 == 0:\n            if last_digit % 2 == 0:\n                continue\n            elif last_digit % 2 == 1:\n                output.append(num)\n    return len(output)\n",
        "num_ids": 99
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num // 10 % 10 % 2 == 1 and num % 10 % 2 == 1):\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    special_nums = []\n    for num in nums:\n        if num > 10 and num % 2!= 0 and nums.index(num) == 0 or nums.index(num) == len(nums) - 1:\n            special_nums.append(num)\n    return len(special_nums)\n",
        "num_ids": 78
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # solution 1\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] == str(num)[-1] and num % 2 == 1:\n            count += 1\n    return count\n    # solution 2\n    return len([num for num in nums if num > 10 and str(num)[0] == str(num)[-1] and num % 2 == 1])\n",
        "num_ids": 98
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and i % 2!= 0 and nums[0] % 2!= 0:\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in nums:\n        if (i > 10 and (int(i/10)%10)%2!= 0) or (int(i[0])%2!= 0) or (int(i[len(i)-1])%2!= 0):\n            count += 1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0:\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # specialFilter = lambda nums: sum(map(lambda num: int(num[-2])%2 == 0 and int(num[0])%2 == 0, nums))\n    return sum(map(lambda num: int(num[-2])%2 == 0 and int(num[0])%2 == 0, nums))\n",
        "num_ids": 80
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i + j + k) % 3 == 0:\n                    count += 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # time complexity: O(n^2), space complexity: O(n)\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            if (i*i + i + 1) % 3 == 0:\n                count += 1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum((i * i - i + 1) % 3 for i in range(1, n))\n",
        "num_ids": 25
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                sum = a[i] + a[j] + a[k]\n                if sum % 3 == 0:\n                    count += 1\n",
        "num_ids": 105
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return 0",
        "num_ids": 4
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 3:\n        return 0\n    \n    def three_sum(i):\n        s = set()\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and (i+j+k) % 3 == 0:\n                    s.add( (i*i+i) - i + 1, (j*j+j) - j + 1, (k*k+k) - k + 1 )\n        return s\n",
        "num_ids": 122
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return len([i for i in range(1,n+1) if i*i - i + 1 % 3 == 0])",
        "num_ids": 32
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    arr = []\n    for i in range(n):\n        arr.append(i*i - i + 1)\n    \n    print(arr)\n    for i in range(n):\n        for j in range(n):\n            if j>i:\n                for k in range(n):\n                    if k>j:\n                        if (arr[i]+arr[j]+arr[k])%3 == 0:\n                            count += 1\n    return count\n",
        "num_ids": 113
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    res += 1\n    return res\n",
        "num_ids": 95
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert type(planet1) == str\n    assert type(planet2) == str\n    if planet1 == \"\":\n        return ()\n    if planet2 == \"\":\n        return ()\n    if planet1.lower() == \"earth\" and planet2.lower() == \"mercury\":\n        return (\"Venus\",)\n    elif planet1.lower() == \"earth\" and planet2.lower() == \"venus\":\n        return (\"Mercury\",)\n    elif planet1.lower() == \"earth\" and planet2.lower() == \"mars\":\n        return (\"Venus\", \"Mars\")\n    elif planet1.lower() == \"earth\" and planet2.lower() == \"jupiter\":\n        return (\"Mercury\", \"Saturn\")\n    elif planet1.lower() == \"earth\" and planet2.lower() == \"saturn\":\n        return (\"Uranus\", \"Jupiter\")\n    elif planet1.lower() == \"earth\" and planet2.lower() == \"uranus\":\n        return (\"Neptune\", \"Jupiter\")\n    elif planet1.lower() == \"earth\" and planet2.lower() == \"neptune\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1.lower() == \"mercury\" and planet2.lower() == \"venus\":\n        return (\"Earth\",)\n    elif planet1.lower() == \"mercury\" and planet2.lower() == \"earth\":\n        return (\"Venus\",)\n    elif planet1.lower() == \"mercury\" and planet2.lower() == \"mars\":\n        return (\"Earth\", \"Venus\", \"Mars\")\n    elif planet1.lower() == \"mercury\" and planet2.lower() == \"jupiter\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Saturn\")\n    elif planet1.lower() == \"mercury\" and planet2.lower() == \"saturn\":\n        return (\"Earth\", \"Venus\", \"Mars\", \"Jupiter\")\n    elif planet1.lower() == \"mercury\" and planet2.lower() == \"uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1.lower() == \"mercury\" and planet2.lower() == \"neptune\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1.lower() == \"venus\" and planet2.lower() == \"earth\":\n        return (\"Mercury\",)\n    elif planet1.lower() == \"venus\" and planet2.lower() == \"mercury\":\n        return (\"Earth\",)\n    elif planet1.lower() == \"venus\" and planet2.lower() == \"mars\":\n        return (\"Mercury\", \"Mars\")\n    elif planet1.lower() == \"venus\" and planet2.lower() == \"jupiter\":\n        return (\"Mercury\", \"Saturn\")\n    elif planet1.lower() == \"venus\" and planet2.lower() == \"saturn\":\n        return (\"Mercury\", \"Uranus\", \"Jupiter\")\n    elif planet1.lower() == \"venus\" and planet2.lower() == \"uranus\":\n        return (\"Mercury\", \"Jupiter\", \"Saturn\")\n    elif planet1.lower() == \"venus\" and planet2.lower() == \"neptune\":\n        return (\"Mercury\", \"Jupiter\", \"Saturn\")\n    elif planet1.lower() == \"mars\" and planet2.lower() == \"earth\":\n        return (\"Venus\", \"Mercury\", \"Mars\")\n    elif planet1.lower() == \"mars\" and planet2.lower() == \"mercury\":\n        return (\"Venus\", \"Earth\", \"Mars\")\n    elif planet1.lower() == \"mars\" and planet2.lower() == \"venus\":\n        return (\"Mercury\", \"Earth\", \"Mars\")\n    elif planet1.lower() == \"mars\" and planet2.lower() == \"jupiter\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Saturn\")\n    elif planet1.lower() == \"mars\" and planet2.lower() == \"saturn\":\n        return (\"Venus\", \"Earth\", \"Mars\", ",
        "num_ids": 1025
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1 = planet1.capitalize()\n    planet2 = planet2.capitalize()\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    lista = []\n    for x in planets:\n        if x not in (planet1, planet2):\n            if x < planet1:\n                if planet2 > x:\n                    lista.append(x)\n            elif planet2 < x:\n                lista.append(x)\n    lista.sort()\n    return tuple(lista)\n",
        "num_ids": 163
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n    if planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n    if planet1 == planet2:\n        return ()\n    if planet1 == \"Mercury\":\n        return (planet2)\n    if planet2 == \"Mercury\":\n        return (planet1)\n    if planet1 == \"Venus\":\n        return (planet2)\n    if planet2 == \"Venus\":\n        return (planet1)\n    if planet1 == \"Earth\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", planet2)\n    if planet2 == \"Earth\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", planet1)\n    if planet1 == \"Mars\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", planet2)\n    if planet2 == \"Mars\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", planet1)\n    if planet1 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\", \"Earth\", \"Neptune\", \"Mars\", planet2)\n    if planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\", \"Earth\", \"Neptune\", \"Mars\", planet1)\n    if planet1 == \"Saturn\":\n        return (\"Uranus\", \"Earth\", \"Neptune\", \"Jupiter\", \"Mars\", \"Saturn\", planet2)\n    if planet2 == \"Saturn\":\n        return (\"Uranus\", \"Earth\", \"Neptune\", \"Jupiter\", \"Mars\", \"Saturn\", planet1)\n    if planet1 == \"Uranus\":\n        return (\"Earth\", \"Neptune\", \"Jupiter\", \"Saturn\", \"Mars\", \"Uranus\", planet2)\n    if planet2 == \"Uranus\":\n        return (\"Earth\", \"Neptune\", \"Jupiter\", \"Saturn\", \"Mars\", \"Uranus\", planet1)\n    if planet1 == \"Neptune\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Earth\", \"Mars\", \"Neptune\", planet2)\n    if planet2 == \"Neptune\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Earth\", \"Mars\", \"Neptune\", planet1)\n",
        "num_ids": 608
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # your code goes here\n    # store planets in a list\n    # create a dictionary with planet: distance\n    # use the helper function \n    # add planets to a list\n    # sort the list\n    # return the planets\n",
        "num_ids": 54
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    #the function that I made and I didn't change it at all\n    d = get_distance(planets, planet1, planet2)\n    for i in planets:\n        if d[i] == 2:\n            return tuple(sorted((planet1, planet2), key=lambda x: planets.index(x)))\n    return tuple()\n",
        "num_ids": 118
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    result = ()\n    if planet1 in planets and planet2 in planets:\n        for i in range(len(planets)):\n            if planets[i] == planet1:\n                for j in range(len(planets)):\n                    if planets[j] == planet2:\n                        if (planets[i] < planets[j]) and (planets[j] < planets[i+1]):\n                            result += planets[i+1],\n                        elif (planets[i] > planets[j]) and (planets[j] > planets[i+1]):\n                            result += planets[i+1],\n    return result\n",
        "num_ids": 187
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    planets = {\"Mercury\": 0.387, \"Venus\": 0.723, \"Earth\": 1, \"Mars\": 1.524, \"Jupiter\": 11.86, \"Saturn\": 29.46, \"Uranus\": 84.01, \"Neptune\": 164.79}\n    names = planets.keys()\n    if planet1 in names and planet2 in names:\n        return tuple(sorted([planet for planet in planets if planets[planet] > planets[planet1] and planets[planet] < planets[planet2]], key=lambda x: planets[x]))\n    return (",
        "num_ids": 139
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    for planet in planets:\n        if planet!= planet1 and planet!= planet2:\n            return ()\n",
        "num_ids": 66
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    p1_index = planets.index(planet1)\n    p2_index = planets.index(planet2)\n    if p1_index < p2_index:\n        return tuple(sorted([planet for planet in planets if p1_index < planets.index(planet) < p2_index]))\n    else:\n        return ()\n",
        "num_ids": 119
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    list_without_odd = []\n    for item in lst:\n        if len(item) % 2 == 0:\n            list_without_odd.append(item)\n    list_without_odd.sort()\n    return list_without_odd\n",
        "num_ids": 60
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst.sort(key=len)\n    return lst\n",
        "num_ids": 17
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lst.sort(key=lambda x: (len(x), x))\n    for i in lst:\n        if len(i) % 2:\n            lst.remove(i)\n    return lst\n",
        "num_ids": 52
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # \ud83d\udea8 Don't change the code below \ud83d\udc47\n    odd_list = []\n    even_list = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    # print(even_list)\n    # print(odd_list)\n    # print(sorted(even_list))\n    # print(sorted(odd_list))\n    return sorted(sorted(even_list) + sorted(odd_list))\n",
        "num_ids": 134
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(lst, key = lambda x: (-len(x), x))\n",
        "num_ids": 21
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(set(lst)))\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert type(lst) == list\n    for elem in lst:\n        assert type(elem) == str\n    lst_res = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            lst_res.append(word)\n    lst_res = sorted(lst_res, key=len)\n    return lst_res\n",
        "num_ids": 94
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert isinstance(lst, list)\n    lst_new = [x for x in lst if len(x) % 2 == 0]\n    lst_new.sort(key=len)\n    return lst_new\n",
        "num_ids": 56
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # lst.sort(key = len)\n    lst.sort(key = lambda x: (len(x), x))\n    return lst\n",
        "num_ids": 37
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = sorted(lst, key=len)\n    return sorted(s, key=s.count)\n",
        "num_ids": 27
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == x:\n        return y\n    else:\n        return x\n",
        "num_ids": 20
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return y\n    elif n % 2 == 0 or n < 1:\n        return x_or_y(n-1, x, y)\n    else:\n        return x_or_y(n-1, y, x)\n",
        "num_ids": 64
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n < 2:\n        return 0\n    elif n == 2 or n == 3:\n        return x\n    elif n == 5 or n == 7:\n        return y\n    else:\n        if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n            return x\n        else:\n            return y\n",
        "num_ids": 81
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 34
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    else:\n        x_or_y(y, x, x + y)\n        return x_or_y(n - 1, x, x + y)\n    \n    \nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))\nprint(x_or_y(2, 2, 2)",
        "num_ids": 111
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y",
        "num_ids": 21
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 2:\n        return 0\n    elif n % x == 0:\n        return x\n    elif n % y == 0:\n        return y\n    else:\n        return x_or_y(n, x, y + 1)\n",
        "num_ids": 61
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if is_prime(n) == True:\n        return x\n    else:\n        return y\n",
        "num_ids": 25
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 1:\n        return y\n    return x if is_prime(n) else y\n    \n    ",
        "num_ids": 28
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    if is_prime(n):\n        return x\n    return y\n",
        "num_ids": 20
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    odd_sum = 0\n    for i in lst:\n        if i >= 0 and i % 2 == 1:\n            odd_sum += i ** 2\n    return odd_sum\n",
        "num_ids": 44
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return sum(i**2 for i in lst if i > 0 and i % 2 == 1)\n    \n    \n    \ndef average_volume(lst):\n    '''\n    Given a list of numbers, return the average of the volumes of the\n    cubes of those numbers.\n    \n    average_volume([2, 5, 4, 6]) == 2 + 5 + 4 + 6 / 4 = 12\n    average_volume([1, 0, 2, 3]) == 0\n    average_volume([1, 2, 3, 4]) == 4\n   \n    If the input list is empty, return 0.\n    '''\n    \n    return sum(i**3 for i in lst)/len(lst)\n    \n    \n    \ndef is_positive(lst):\n    '''\n    Given a list of numbers, return True if the list contains at least\n    one positive number, and False otherwise.\n    \n    is_positive([2, -4, -3]) == True\n    is_positive([0, -1, 2, 3, 4]) == True\n    is_positive([-3, -2, -1, 0]) == False\n   \n    If the input list is empty, return True.\n    '''\n    return any(i > 0 for i in lst)\n    \n    \n    \ndef is_odd(number):\n    '''\n    Given a number, return True if the number is odd, and False otherwise.\n    \n    is_odd(5) == False\n    is_odd(13) == True\n    is_odd(0) == False\n   \n    If the input number is not an integer, return None.\n    '''\n    if isinstance(number, int):\n        return number % 2 == 1\n    else:\n        return None\n        \n        \n        \ndef is_prime(number):\n    '''\n    Given a number, return True if the number is prime, and False otherwise.\n    \n    is_prime(7) == True\n    is_prime(10) == False\n    is_prime(1) == False\n   \n    If the input number is not an integer, return None.\n    '''\n    if isinstance(number, int) and number > 1:\n        return not any(number % i == 0 for i in range(2, number))\n    else:\n        return None\n        \n        \n        \ndef smallest_odd(lst):\n    '''\n    Given a list of numbers, return the smallest positive odd number that\n    is not contained in the list. If there is no odd number not in the list,\n    return 1.\n    \n    smallest_odd([5, 5, 5, 1, -3, 7, 8]) == 1\n    smallest_odd([1, 3, 4, 5, 6]) == 7\n    smallest_odd([0, -1, 2, 3, 4]) == 1\n   \n    If the input list is empty, return 1.\n    '''\n    for i in range(len(lst)+1):\n        if not is_odd(i) or i in lst:\n            continue\n        else:\n            return i\n            \n    return 1\n    \n    \n    \ndef sum_up(lst):\n    '''\n    Given a list of numbers, return the sum of the numbers that are\n    even.\n    \n    sum_up([2, 1, 2, 3, 4]) == 6\n    sum_up([1, 3, 5, 7]) == 0\n    sum_up([2, -4, 3, 0]) == 0\n   \n    If the input list is empty, return 0.\n    '''\n    \n    return sum(i for i in lst if i % 2 == 0)\n    \n    \n    \ndef big_diff(lst):\n    '''\n    Given a list of numbers, return the largest difference between two\n    numbers in the list.\n    \n    big_diff([0, 10, 3, 42, 2]) == 41\n    big_diff([5, 1, 9, 18, 3]) == 8\n    big_diff([7, 4, 12, 9]) == 7\n   \n    If the input list is empty, return None.\n    '''\n    return max(lst)-min(lst)\n    \n    \n    \ndef max_and_min(lst):\n    '''\n    Given a list of numbers, return a tuple with th",
        "num_ids": 1025
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    new_list = []\n    for i in lst:\n        if i < 0:\n            new_list.append(0)\n        elif i % 2 == 1:\n            new_list.append(i ** 2)\n    return sum(new_list)\n",
        "num_ids": 64
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    # Hint: use the sum() function to create a running sum\n    return sum([i ** 2 for i in lst if i >= 0 and type(i) == int])\n    \ndef check_factorial(num):\n    '''\n    Returns True if num is a valid input for the factorial function.\n    Returns False otherwise.\n    '''\n    if num < 0:\n        return False\n    if num == 0 or num == 1:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 139
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if lst == []:\n        return 0\n    sum = 0\n    for i in lst:\n        if type(i) == int and i % 2!= 0:\n            sum = sum + (i ** 2)\n    return sum\n",
        "num_ids": 58
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    #Initialize total and odd_sum\n    total = 0\n    odd_sum = 0\n",
        "num_ids": 25
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sum = 0\n    if lst == []:\n        return sum\n    else:\n        for i in range(0, len(lst)):\n            if type(lst[i]) == int and lst[i] >= 0:\n                if (lst[i] % 2) == 1:\n                    sum += (lst[i] ** 2)\n            else:\n                continue\n        return su",
        "num_ids": 96
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    sum_of_squares = 0\n    for num in lst:\n        if num < 0 or not isinstance(num, int):\n            continue\n        sum_of_squares += num**2\n    return sum_of_squares\n",
        "num_ids": 60
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # your code here\n    odds = 0\n    for num in lst:\n        if num % 2!= 0:\n            odds += num * num\n    return odds\n",
        "num_ids": 43
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst = [i**2 if (i % 2!= 0 and i > 0) else i for i in lst]\n    return sum(lst)\n",
        "num_ids": 39
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n",
        "num_ids": 28
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(len(game)):\n        if(guess[i] == game[i]):\n            result.append(0)\n        else:\n            result.append(abs(guess[i]-game[i]))\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    diff=[]\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i]-guess[i]))\n    return diff\n",
        "num_ids": 64
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    # TODO: Your code here\n    if len(game) == len(guess):\n        return [0 if guess[i] == game[i] else abs(guess[i] - game[i]) for i in range(len(guess))]\n    else:\n        raise Exception(\"The arrays are not the same length\")\n",
        "num_ids": 81
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n",
        "num_ids": 30
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [abs(x - y) for x, y in zip(game, guess)]\n",
        "num_ids": 22
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    for x,y in zip(game,guess):\n        result.append(abs(x-y))\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    diffs = []\n",
        "num_ids": 7
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return [0 if guess[i] == game[i] else abs(guess[i]-game[i]) for i in range(len(game))]\n    \n",
        "num_ids": 42
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return [abs(n-x) for n,x in zip(game,guess)]\n",
        "num_ids": 25
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Read Code from file\n    # Write Code here\n    \n    return 0\n",
        "num_ids": 20
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    import string\n    cap_letters = 0\n    sm_letters = 0\n    for item in extensions:\n        cap_letters += sum(1 for c in item if c.isupper())\n        sm_letters += sum(1 for c in item if c.islower())\n    return f\"{class_name}.{extensions[(cap_letters - sm_letters).index(max(cap_letters - sm_letters))]}\"\n    # return f\"{class_name}.{extensions[(cap_letters - sm_letters).index(max(cap_letters - sm_letters))]}\"\n",
        "num_ids": 139
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    import re\n    \n    class_ = re.sub(r'\\s', '', class_name)\n    classes_list = []\n    \n    for extension in extensions:\n        \n        if len(extension) > 0:\n            \n            extension = re.sub(r'\\s', '', extension)\n            \n            if '.' in extension:\n                extension = extension.replace('.', '')\n                \n            extension_classes = extension.split('.')\n            \n            if len(extension_classes) > 1:\n                extension_class = extension_classes[0]\n                extension_class = re.sub(r'\\s', '', extension_class)\n                extension_class = extension_class.capitalize()\n                extension_class = extension_class + '.'\n                \n                extension_name = extension_classes[1]\n                extension_name = re.sub(r'\\s', '', extension_name)\n                extension_name = extension_name.lower()\n                extension_name = extension_name.capitalize()\n                \n                classes_list.append(class_ + extension_class + extension_name)\n            else:\n                continue\n            \n    if len(classes_list) == 0:\n        return ''\n    \n    classes_list.sort()\n    \n    return classes_list[-1]\n    ",
        "num_ids": 324
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sm = 0\n    cap = 0\n    for i in range(0, len(extensions)):\n        if extensions[i][0].isupper():\n            cap += 1\n        else:\n            sm += 1\n    return class_name + \".\" + extensions[0]\n",
        "num_ids": 66
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    import string\n    extension_list = []\n    for i in extensions:\n        strongness = 0\n        for c in i:\n            if c in string.ascii_uppercase:\n                strongness += 1\n            elif c in string.ascii_lowercase:\n                strongness -= 1\n        extension_list.append((i, strongness))\n",
        "num_ids": 89
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    cap = 0\n    lower = 0\n    for i in range(len(extensions)):\n        for char in extensions[i]:\n            if char.isupper():\n                cap += 1\n            if char.islower():\n                lower += 1\n    if cap > lower:\n        return class_name + \".\" + extensions[i]\n    else:\n        return class_name + \".\" + extensions[0]\n",
        "num_ids": 98
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    all_strength = []\n    for ext in extensions:\n        cap = len(re.findall(r\"[A-Z]\", ext))\n        sm = len(re.findall(r\"[a-z]\", ext))\n        strength = cap - sm\n        all_strength.append((strength, ext))\n    all_strength = sorted(all_strength)\n    return '{}.{}'.format(class_name, all_strength[-1][1])\n",
        "num_ids": 110
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    import string\n    import re\n    CAP = 0\n    SM = 0\n    CAP_count = 0\n    SM_count = 0\n    if '.' in class_name:\n        class_name = class_name.split('.')\n    else:\n        class_name = [class_name]\n    for i in class_name:\n        for char in i:\n            if char.isupper():\n                CAP_count += 1\n            if char.islower():\n                SM_count += 1\n        if re.match('[a-z]', i[0]):\n            SM += SM_count\n        if re.match('[A-Z]', i[0]):\n            CAP += CAP_count\n    CAP -= SM\n    if CAP < 0:\n        return '.'.join(class_name)\n    else:\n        extensions.sort()\n        extensions.sort(key = len)\n        for i in extensions:\n            num = 0\n            if '.' in i:\n                i = i.split('.')\n            for j in i:\n                if j.isupper():\n                    num += 1\n            if CAP > 0 and SM == 0:\n                return class_name[0] + '.' + i\n            elif SM!= 0 and CAP == 0:\n                return class_name[0] + '.' + i\n            elif CAP!= 0 and SM!= 0 and CAP > SM:\n                return class_name[0] + '.' + i\n            else:\n                break\n",
        "num_ids": 355
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # a = str(a)\n    # b = str(b)\n    # a = [a for a in a]\n    # b = [b for b in b]\n    # print(a,b)\n    a_word = ''\n    b_word = ''\n    for i in range(0,len(a)):\n        a_word+=a[i]\n    for j in range(0,len(b)):\n        b_word+=b[j]\n    if a_word in b_word:\n        return True\n    elif a_word[1:] in b_word:\n        return True\n    elif a_word[2:] in b_word:\n        return True\n    elif a_word[3:] in b_word:\n        return True\n    else:\n        return False\n",
        "num_ids": 194
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return b in a or any(b in x for x in a_rotations(a))\n",
        "num_ids": 23
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n    s1 = set(a)\n    s2 = set(b)\n    if(a in b or b in a):\n        return True\n    for x in s1:\n        if(x*2 in s2):\n            return True\n    return False",
        "num_ids": 67
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #first convert a and b into a list of letters, as in a string\n    #then use the isSubstring function to check if any of the rotations of b is a substring of a\n    #if so, return True\n    a_list = list(a)\n    b_list = list(b)\n    for i in range(len(b_list)):\n        rotated_b_list = b_list[i:] + b_list[:i]\n        if isSubstring(a,rotated_b_list):\n            return True\n    return False\n",
        "num_ids": 134
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if b in a or b in a[1:] or b in a[2:] or b in a[3:] or b in a[4:]:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if b in a or a in b:\n        return True\n    elif len(a) == 1 or len(b) == 1:\n        return False\n    else:\n        return cycpattern_check(a[1:],b[1:]) or cycpattern_check(a,b[1:]) or cycpattern_check(a[1:],b)\n",
        "num_ids": 89
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return any(b in a for a in a*2)\n",
        "num_ids": 16
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if(a in b or b in a):\n        return True\n    else:\n        return False\n    pass\n",
        "num_ids": 28
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    c = False\n    if b in a:\n        c = True\n    elif a in b:\n        c = True\n    elif check_rotation(a, b):\n        c = True\n    return c\n",
        "num_ids": 53
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #a, b = input(), input()\n    return any(b in a for b in [a, a[::-1]])\n",
        "num_ids": 33
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    even, odd = 0, 0\n    while num:\n        if num % 10 % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return even, odd\n",
        "num_ids": 52
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not isinstance(num, int):\n        return TypeError(f'{num} is not an integer')\n",
        "num_ids": 28
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (len([d for d in str(num) if d % 2 == 0]), len([d for d in str(num) if d % 2!= 0]))\n",
        "num_ids": 41
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (num // 10) % 2, num % 10\n",
        "num_ids": 15
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    count_odd = 0\n    for i in str(num):\n        if int(i)%2 == 0:\n            count += 1\n        else:\n            count_odd += 1\n    return (count, count_odd)\n",
        "num_ids": 60
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # first, find the number of digits\n    num_of_digits = len(str(num))\n    # set up variables to count number of evens and odds\n    evens = 0\n    odds = 0\n",
        "num_ids": 52
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if num < 0:\n        return (0, 1)\n    even, odd = 0, 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n",
        "num_ids": 70
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # e.g., 8 -> 2, 2\n    return (num.count(str(num)[::-1][0]) % 2, len(num) % 2) if num > 0 else (len(num) % 2, num.count(str(num)[::-1][0]) % 2)\n",
        "num_ids": 71
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if num < 0:\n        num = -num\n        result = (1, 1)\n    else:\n        result = (0, 0)\n    for i in str(num):\n        if int(i) % 2 == 0:\n            result = (result[0] + 1, result[1])\n        else:\n            result = (result[0], result[1] + 1)\n    return result\n",
        "num_ids": 97
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (len([i for i in str(num) if int(i) % 2 == 0]), len([i for i in str(num) if int(i) % 2!= 0]))\n",
        "num_ids": 47
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return __convert_num_to_roman_helper(number)\n",
        "num_ids": 19
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # 1. Get the digits of the number\n    # 2. Create a new list with the digits as its first element\n    # 3. Create a new list with the roman numeral equivalents of the digits\n    # 4. Get the smallest roman numeral equivalent of the digits\n    # 5. Join all the roman numeral equivalent elements to obtain the roman numeral\n    pass\n",
        "num_ids": 87
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if type(number)!= int:\n        raise ValueError('Input must be an integer.')\n    if number <= 0 or number > 1000:\n        raise ValueError('Input must be between 1 and 1000.')\n    rom = ''\n    int_list = list(str(number))\n    for num in int_list:\n        num = int(num)\n        if num == 1:\n            rom += 'x'\n        elif num == 2:\n            rom += 'xx'\n        elif num == 3:\n            rom += 'xxx'\n        elif num == 4:\n            rom += 'xxxx'\n        elif num == 5:\n            rom += 'v'\n        elif num == 6:\n            rom += 'vx'\n        elif num == 7:\n            rom += 'vxx'\n        elif num == 8:\n            rom += 'vxxx'\n        elif num == 9:\n            rom += 'ix'\n        elif num == 10:\n            rom += 'ixx'\n        elif num == 11:\n            rom += 'ixxx'\n        elif num == 12:\n            rom += 'x'\n        elif num == 13:\n            rom += 'xv'\n        elif num == 14:\n            rom += 'xvx'\n        elif num == 15:\n            rom += 'xvxx'\n        elif num == 16:\n            rom += 'x'\n        elif num == 17:\n            rom += 'xx'\n        elif num == 18:\n            rom += 'xxx'\n        elif num == 19:\n            rom += 'xxxx'\n        elif num == 20:\n            rom += 'v'\n        elif num == 21:\n            rom += 'vx'\n        elif num == 22:\n            rom += 'vxx'\n        elif num == 23:\n            rom += 'vxxx'\n        elif num == 24:\n            rom += 'ix'\n        elif num == 25:\n            rom += 'ixx'\n        elif num == 26:\n            rom += 'ixxx'\n        elif num == 27:\n            rom += 'x'\n        elif num == 28:\n            rom += 'xx'\n        elif num == 29:\n            rom += 'xxx'\n        elif num == 30:\n            rom += 'xxxx'\n        elif num == 40:\n            rom += 'x'\n        elif num == 50:\n            rom += 'xv'\n        elif num == 60:\n            rom += 'xvx'\n        elif num == 70:\n            rom += 'xvxx'\n        elif num == 80:\n            rom += 'x'\n        elif num == 90:\n            rom += 'xv'\n        elif num == 100:\n            rom += 'xvx'\n        elif num == 110:\n            rom += 'xvxx'\n        elif num == 120:\n            rom += 'xx'\n        elif num == 130:\n            rom += 'xxv'\n        elif num == 140:\n            rom += 'xxvx'\n        elif num == 150:\n            rom += 'xxvxx'\n        elif num == 160:\n            rom += 'xxx'\n        elif num == 170:\n            rom += 'xxxx'\n        elif num == 190:\n            rom += 'xx'\n        elif num == 200:\n            rom += 'xxx'\n        elif num == 210:\n            rom += 'xxv'\n        elif num == 220:\n            rom += 'xxvx'\n        elif num == 230:\n            rom += 'xxvxx'\n        elif num == 240:\n            rom += 'xxx'\n        elif num == 250:\n            rom += 'xxxx'\n        elif num == 260:\n            rom += 'xx'\n        elif num == 270:\n            rom += 'xxv'\n        elif num == 280:\n            rom += 'xxvx'\n        elif num == 290:\n            rom += 'xxvxx'\n        elif num == 300:\n            rom += 'xxx'\n        elif num == 310:\n            rom += 'xxxx'\n        elif num == 320:\n            rom += 'xxx'\n        elif num == 330:\n            rom += 'xxv'\n        elif num == 340:\n            rom += 'xxvx",
        "num_ids": 1024
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        return 'invalid input!'\n",
        "num_ids": 29
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def helper(num, roman_dict):\n        if num == 0:\n            return ''\n        elif num < 4:\n            roman_dict[0] = 'i' * num\n            return roman_dict[0]\n        elif num == 4:\n            roman_dict[4] = 'iv'\n            return roman_dict[4]\n        elif num < 9:\n            roman_dict[5] = 'v' + 'i' * (num - 5)\n            return roman_dict[5]\n        elif num == 9:\n            roman_dict[9] = 'ix'\n            return roman_dict[9]\n        elif num < 40:\n            roman_dict[10] = 'x' + 'i' * (num - 10)\n            return roman_dict[10]\n        elif num < 50:\n            roman_dict[40] = 'xl'\n            return roman_dict[40]\n        elif num < 90:\n            roman_dict[50] = 'l' + 'x' * (num - 50)\n            return roman_dict[50]\n        elif num == 90:\n            roman_dict[90] = 'xc'\n            return roman_dict[90]\n        elif num < 100:\n            roman_dict[100] = 'c' + 'x' * (num - 100)\n            return roman_dict[100]\n        elif num < 400:\n            roman_dict[400] = 'cd'\n            return roman_dict[400]\n        elif num < 500:\n            roman_dict[500] = 'd' + 'c' * (num - 500)\n            return roman_dict[500]\n        elif num < 900:\n            roman_dict[900] = 'cm'\n            return roman_dict[900]\n        elif num < 1000:\n            roman_dict[1000] ='m' + 'c' * (num - 1000)\n            return roman_dict[1000]\n        else:\n            raise ValueError\n",
        "num_ids": 486
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if number <= 0 or number >= 4000:\n        raise ValueError('The number must be within the range of 1 to 1000')\n    roman_chars = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = []\n    while number > 0:\n        for i, r in enumerate(roman_chars):\n            if r == 'I':\n                if number >= 1 and number < 4:\n                    roman_num.append(r)\n                    number -= 1\n                elif number >= 4 and number < 9:\n                    roman_num.append(r * 2)\n                    number -= 5\n                elif number >= 9 and number < 40:\n                    roman_num.append(r * 2)\n                    number -= 10\n                elif number >= 40 and number < 50:\n                    roman_num.append(r * 2)\n                    number -= 50\n                elif number >= 50 and number < 90:\n                    roman_num.append(r * 2)\n                    number -= 100\n                elif number >= 90:\n                    roman_num.append(r * 3)\n                    number -= 90\n            else:\n                if number >= roman_chars[i + 1] - roman_chars[i]:\n                    roman_num.append(r)\n                    number -= roman_chars[i + 1]\n                else:\n                    continue\n    return ''.join(roman_num)",
        "num_ids": 350
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    roman_dict = {\n        1: \"I\",\n        4: \"IV\",\n        5: \"V\",\n        9: \"IX\",\n        10: \"X\",\n        40: \"XL\",\n        50: \"L\",\n        90: \"XC\",\n        100: \"C\",\n        400: \"XD\",\n        500: \"D\",\n        900: \"CM\",\n        1000: \"M\",\n    }\n    if number < 1 or number > 1000:\n        raise ValueError('Out of range: 1 <= num <= 1000')\n    if number in roman_dict:\n        return roman_dict[number]\n    roman = ''\n    for key in sorted(roman_dict.keys())[1:]:\n        count, number = divmod(number, key)\n        if count > 0:\n            roman = roman_dict[key] * count + roman\n    return roman\n",
        "num_ids": 214
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # keys will be the different numbers and values will be the equivalent roman numeral in a dict\n    num_dict = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'XD', 500: 'D', 900: 'CM', 1000: 'M'}\n    # the total roman numeral will be stored in this variable\n    result = ''\n    # we will divide the number to be roman numeral equivelent\n    number_in_decimal = number\n    # while we do not reach the number 1 we will continue to divide the number\n    while number_in_decimal > 1:\n        # we will multiply the divisor with 10 and store it in this variable\n        divisor = 10\n        # we will multiply the divisor with the number_in_decimal and store it in this variable\n        number_in_decimal_times_divisor = number_in_decimal * divisor\n        # we will loop through the key\n        for key in num_dict:\n            # if the value is equal to the value of the number_in_decimal times the divisor\n            if num_dict[key] == number_in_decimal_times_divisor:\n                # we add the value of the key to the result\n                result += num_dict[key]\n                # we subtract the value of the key from the number_in_decimal\n                number_in_decimal = number_in_decimal - key\n    # we return the result\n    return result\n",
        "num_ids": 384
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',\n               50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    roman = ''\n    # Iterate over each key in the dictionary\n    for key in numbers:\n        # If the input number is divisible by the key\n        while number >= key:\n            # Append the roman equivalent of the key\n            roman += numbers[key]\n            # Decrement the input number\n            number -= key\n    # Return the roman number\n    return roman\n",
        "num_ids": 165
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return a*a+b*b==c*c or b*b+c*c==a*a or a*a+c*c==b*b",
        "num_ids": 38
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n",
        "num_ids": 39
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n    \ndef reverse(s):\n    '''\n    Given a string, return a new string where the first and last characters have\n    been exchanged.\n    Example:\n    reverse('hello') == 'olleh'\n    '''\n    return s[-1:] + s[1:-1] + s[:1]\n",
        "num_ids": 114
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return a ** 2 + b ** 2 == c ** 2 or b ** 2 + c ** 2 == a ** 2 or a ** 2 + c ** 2 == b ** 2\n    # TODO: Your code here\n",
        "num_ids": 48
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if a ** 2 + b ** 2 == c ** 2:\n        return True\n    elif b ** 2 + c ** 2 == a ** 2:\n        return True\n    elif a ** 2 + c ** 2 == b ** 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # a**2 + b**2 = c**2\n    # a + b + c = 180\n    \n    # ax**2 + by**2 = c**2 - a**2 - b**2\n    # a(y-x)**2 + b(x+y)**2 = c**2 - a**2 - b**2\n    # ax**2 + by**2 = c**2 - a**2 - b**2\n    # by**2 - ax**2 = 2c**2 - 2ab - 2a**2 - 2b**2\n    # x = (-2b + sqrt(4b**2 - 4a**2 - 4c**2 + 4ab + 4a**2 + 4b**2))/(2(a+b))\n    # y = (2a + sqrt(4a**2 - 4b**2 - 4c**2 + 4b**2 + 4a**2 + 4c**2))/(2(a+b))\n    \n    # This will be an imaginary number if a = 0\n    #return all([isinstance(i, complex) for i in [a, b, c, sqrt((b-a)**2 + (c-a)**2)]])\n    # This is a better solution than the one above\n    return all([isinstance(i, complex) for i in [a, b, c, sqrt((b-a)**2 + (c-a)**2)]])\n",
        "num_ids": 339
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # hint: to find the length of side c, use the Pythagorean Theorem\n    # hint: to find the length of side c, use the Pythagorean Theorem\n",
        "num_ids": 41
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Code goes here\n    if (a ** 2 + b ** 2) == c ** 2 or (a ** 2 + c ** 2) == b ** 2 or (b ** 2 + c ** 2) == a ** 2:\n        return True\n    else:\n        return Fals",
        "num_ids": 64
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Calculate the triangle's angles.\n    sides_angle = [a, b, c]\n    sides_angle.sort()\n    if sides_angle[0] ** 2 + sides_angle[1] ** 2 == sides_angle[2] ** 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 76
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sorted_list = sorted(words, key=len)\n    if len(sorted_list) == 0:\n        return None\n    elif len(sorted_list) == 1:\n        return sorted_list[0]\n    max_unique = len(sorted_list[0])\n    for word in sorted_list:\n        if len(word) == max_unique:\n            return word\n        if len(word) > max_unique:\n            max_unique = len(word)\n            result = word\n    return result\n",
        "num_ids": 127
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    max_length = len(max(words, key=len))\n    result = []\n    for word in words:\n        if len(word) == max_length:\n            result.append(word)\n    return min(result, key=lambda word: word if word < result[0] else result[0])\n",
        "num_ids": 74
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    words = list(words)\n    unique_characters = set()\n",
        "num_ids": 18
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    words = sorted(words, key=lambda word: len(set(word)))\n    max_len_word = words[0]\n    for word in words:\n        if len(set(word)) > len(set(max_len_word)):\n            max_len_word = word\n    return max_len_word\n",
        "num_ids": 77
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # using a set\n    if len(words) > 0:\n        unique = set(words[0])\n        for word in words[1:]:\n            unique = unique.intersection(set(word))\n        if len(unique) == 0:\n            return \"\"\n        return min(sorted(unique))\n    else:\n        return \"\"\n",
        "num_ids": 82
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return max(words, key=len)\n",
        "num_ids": 12
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(words) == 1:\n        return words[0]\n    else:\n        return sorted(words, key=lambda word: (len(set(word)), word))[-1]\n",
        "num_ids": 47
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    unique_words = set()\n    for word in words:\n        unique_words.add(word)\n",
        "num_ids": 26
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n",
        "num_ids": 34
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return [number + need, remaining - need]",
        "num_ids": 14
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # --- YOUR CODE HERE ---\n    left = remaining - need\n    \n    if remaining == 0:\n        return [number, 0]\n    \n    if number == 0:\n        if remaining >= need:\n            return [number, remaining]\n        else:\n            return [0, 0]\n    \n    if number >= need:\n        return [number, 0]\n    \n    if left == 0:\n        return [number, 0]\n    \n    if left > 0:\n        return [number + left, left]\n    \n    if left < 0:\n        return [number + left, 0]\n        ",
        "num_ids": 142
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if number + need <= remaining:\n        return [number + need, remaining - number - need]\n    elif number + need > remaining:\n        return [number + need, 0]\n    \n    ",
        "num_ids": 47
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]",
        "num_ids": 33
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    remaining_rabbit = remaining + number\n    if remaining_rabbit >= need:\n        return [remaining_rabbit - need, 0]\n    else:\n        eaten_rabbit = number - need + remaining\n        remaining_rabbit = remaining - (remaining_rabbit - need)\n        return [eaten_rabbit, remaining_rabbit]\n",
        "num_ids": 87
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if need <= remaining:\n        return [number + need, remaining - need]\n    elif need > remaining:\n        return [number + remaining, 0]\n",
        "num_ids": 38
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    remaining = remaining - number\n    \n    if remaining < need:\n        return [number + remaining, remaining]\n    \n    return [number + need, remaining]\n",
        "num_ids": 42
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [number + need, remaining - need]\n",
        "num_ids": 13
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = 0\n    result = operator[0] * operand[0] + operand[1]\n    result = operator[1] * result + operand[2]\n    result = operator[2] * result - operand[3]\n    result = operator[3] * result // operand[4]\n    result = operator[4] * result ** operand[5]\n    return result\n",
        "num_ids": 94
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return eval(\"operator[operator_type] %s operand[operand_1] %s operand[operand_2]\" % (operand[0], operand[1]))\n",
        "num_ids": 45
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = 0\n    if operator[0] == '+':\n        result = operand[0] + operand[1]\n    elif operator[0] == '-':\n        result = operand[0] - operand[1]\n    elif operator[0] == '*':\n        result = operand[0] * operand[1]\n    elif operator[0] == '//':\n        result = operand[0] // operand[1]\n    elif operator[0] == '**':\n        result = operand[0] ** operand[1]\n",
        "num_ids": 140
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]))\n",
        "num_ids": 27
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #print(\"DEBUG: operand:\", operand, \"operator:\", operator)\n    if operator == \"+\":\n        #print(\"DEBUG: add operator:\", operand[0], \"and\", operand[1])\n        result = operand[0] + operand[1]\n    elif operator == \"-\":\n        #print(\"DEBUG: sub operator:\", operand[0], \"and\", operand[1])\n        result = operand[0] - operand[1]\n    elif operator == \"*\":\n        #print(\"DEBUG: mul operator:\", operand[0], \"and\", operand[1])\n        result = operand[0] * operand[1]\n    elif operator == \"//\":\n        #print(\"DEBUG: div operator:\", operand[0], \"and\", operand[1])\n        result = operand[0] // operand[1]\n    elif operator == \"**\":\n        #print(\"DEBUG: exp operator:\", operand[0], \"and\", operand[1])\n        result = operand[0] ** operand[1]\n    #print(\"DEBUG: result:\", result)\n    return result\n",
        "num_ids": 274
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result = result + operand[i + 1]\n        elif operator[i] == '-':\n            result = result - operand[i + 1]\n        elif operator[i] == '*':\n            result = result * operand[i + 1]\n        elif operator[i] == '//':\n            result = result // operand[i + 1]\n        elif operator[i] == '**':\n            result = result ** operand[i + 1]\n    return result\n",
        "num_ids": 150
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == \"+\":\n            result += operand[i + 1]\n        elif operator[i] == \"-\":\n            result -= operand[i + 1]\n        elif operator[i] == \"*\":\n            result *= operand[i + 1]\n        elif operator[i] == \"/\":\n            result //= operand[i + 1]\n        elif operator[i] == \"**\":\n            result **= operand[i + 1]\n    return result\n",
        "num_ids": 140
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s_list = list(s)\n    for i in range(len(s_list)):\n        if s_list[i].isalpha():\n            if s_list[i].isupper():\n                s_list[i] = s_list[i].lower()\n            else:\n                s_list[i] = s_list[i].upper()\n    return \"\".join(s_list)\n",
        "num_ids": 98
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return ''.join([l.upper() if l.islower() else l.lower() for l in s]) if s.isalpha() else s[::-1]\n",
        "num_ids": 41
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    res = \"\"\n    for c in s:\n        if c.isupper():\n            res += c.lower()\n        elif c.islower():\n            res += c.upper()\n        else:\n            res += c\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst = list(s)\n    new_lst = []\n    for letter in lst:\n        if letter.isalpha():\n            if letter.isupper():\n                new_lst.append(letter.lower())\n            else:\n                new_lst.append(letter.upper())\n        else:\n            new_lst.append(letter)\n    return \"\".join(new_lst)\n",
        "num_ids": 99
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst = list(s)\n    i = 0\n    while i < len(lst):\n        if lst[i].isalpha():\n            if lst[i].islower():\n                lst[i] = lst[i].upper()\n            else:\n                lst[i] = lst[i].lower()\n        i += 1\n    return \"\".join(lst)\n",
        "num_ids": 96
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n",
        "num_ids": 31
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s = s.lower()\n    new_string = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i] in s[i].lower():\n                new_string += s[i].lower()\n            else:\n                new_string += s[i].upper()\n        else:\n            new_string += s[i]\n    return new_string\n",
        "num_ids": 100
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = ''\n    for i in s:\n        if i.isalpha():\n            result += i.swapcase()\n        else:\n            result += i\n    return result if result!= '' else s[::-1]\n",
        "num_ids": 56
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text).hexdigest()\n",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if text is None or len(text) == 0:\n        return None\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()\n",
        "num_ids": 46
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if text == '':\n        return None\n",
        "num_ids": 12
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    md5_hash = md5.hexdigest()\n    return md5_hash\n",
        "num_ids": 50
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if text == '':\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf8'))\n    return m.hexdigest()\n",
        "num_ids": 46
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if text:\n        hash_object = hashlib.md5(text.encode('utf-8'))\n        return hash_object.hexdigest()\n    else:\n        return None",
        "num_ids": 46
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not isinstance(text, str) or text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 48
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    hash_obj = hashlib.md5()\n    if text:\n        hash_obj.update(text.encode('utf-8'))\n        return hash_obj.hexdigest()\n    return None\n",
        "num_ids": 51
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 39
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    md5 = hashlib.md5()\n",
        "num_ids": 12
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # get even numbers between a and b\n    # convert to list of integers\n    # sort the list\n    # return the list\n    evens = []\n    # Use the modulo operator to get the remainder of each value.\n    # if the value is 0, then it's even.\n    for i in range(a,b+1):\n        if i % 2 == 0:\n            evens.append(i)\n    return sorted(evens)\n",
        "num_ids": 106
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # range(a, b+1) only works on python3\n    # xrange is the equivalent on python2\n    # list is equivalent to range on python2\n    # we need to make sure we don't overwrite our values\n    # a, b = a, b\n    return [x for x in range(a, b + 1) if x % 2 == 0]",
        "num_ids": 85
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # initialize empty list\n    list = []\n    \n    # iterate through list and append even number to list\n    for x in range(a, b + 1):\n        if x % 2 == 0:\n            list.append(x)\n    \n    return list\n",
        "num_ids": 65
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    if a < 10 or b < 10:\n        return result\n    if a > b:\n        return result\n    if a % 2 == 0 or b % 2 == 0:\n        return result\n    if a < b:\n        a, b = b, a\n",
        "num_ids": 67
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a % 2 == 1:\n        a += 1\n    if b % 2 == 0:\n        b -= 1\n    if a < b:\n        return []\n    elif a >= b:\n        return [i for i in range(a,b,2)]\n",
        "num_ids": 64
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    a = str(a)\n    b = str(b)\n    lst = []\n    for i in range(int(a[0]), int(b[0]) + 1):\n        for j in range(len(str(i))):\n            if str(i)[j] in '02468':\n                lst.append(i)\n    return lst\n",
        "num_ids": 87
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a%2 == 0 or b%2 == 0:\n        return []\n    else:\n        return sorted(list(set([i for i in range(a+1, b, 2)]) & set([i for i in range(a+1, b, 2)])))\n",
        "num_ids": 66
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # a, b = 2, 8\n    # a, b = 8, 2\n    # a, b = 10, 14\n    # print(int(str(a)[::2]))\n    # print(int(str(b)[1::2]))\n    # print(list(range(int(str(a)[::2]), int(str(b)[1::2]) + 1, 2)))\n    # return list(range(int(str(a)[::2]), int(str(b)[1::2]) + 1, 2))\n    # return int(str(a)[::2])\n    # return int(str(b)[1::2])\n    # return [int(i) for i in str(a) if i in str(b)]\n    return sorted([i for i in range(int(str(a)[::2]), int(str(b)[1::2]) + 1, 2)])\n",
        "num_ids": 213
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits\n",
        "num_ids": 49
    }
]