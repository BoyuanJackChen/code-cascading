[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i, num in enumerate(numbers):\n        for num2 in numbers[i:]:\n            if num2 - num < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return any(x1 > threshold > x2 for x1, x2 in zip(numbers, numbers[1:]))\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for number1 in numbers:\n        for number2 in numbers:\n            if abs(number1 - number2) < threshold and number1!= number2:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert threshold > 0.0, 'Threshold must be positive.'\n    numbers.sort()\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            break\n        if abs(numbers[i + 1] - numbers[i]) <= threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: (Part 1) Complete the function so that it returns True if there is an element in the\n    # list which is closer to another element than given threshold. It should return False otherwise.\n    for i in numbers:\n        for j in numbers:\n            if i == j:\n                continue\n            elif abs(i-j) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    numbers.sort()\n    # check if there are any two numbers close to each other than threshold\n    for i in range(0, len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for num in numbers:\n        for another_num in numbers:\n            if num!= another_num and abs(num - another_num) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i, first_num in enumerate(numbers):\n        for second_num in numbers[i + 1 :]:\n            if abs(first_num - second_num) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert len(numbers) > 1\n    assert threshold >= 0.0\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i] - numbers[i + 1] <= threshold:\n            return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    stack = []\n    # loop over input string\n    for char in paren_string:\n        # if char is open add to stack\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            # pop from stack until an open paren is found\n            while stack[-1]!= '(':\n                stack.pop()\n            # if the top element on stack is an open paren then remove it\n            stack.pop()\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    # iterate over the string\n    i = 0\n    while i < len(paren_string):\n        curr_chr = paren_string[i]\n        # if open, add to the result\n        if curr_chr == '(' or curr_chr == '{' or curr_chr == '[':\n            result.append(curr_chr)\n        # if close, check if it is the matching open\n        elif curr_chr == ')' or curr_chr == '}' or curr_chr == ']':\n            # if not the matching open, skip it\n            if curr_chr!= result[-1]:\n                i += 1\n                continue\n            else:\n                result[-1] = result[-1] + curr_chr\n                i += 1\n        # if it is a space, skip it\n        elif curr_chr =='':\n            i += 1\n            continue\n        # if it is a special character, skip it\n        elif curr_chr in '([{' or curr_chr.isalpha():\n            i += 1\n            continue\n        else:\n            print(\"Something unexpected happened.\")\n            return None\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    print(\"\\n\\n\\nInput: \", paren_string, \"\\n\\n\\n\")\n    close_parens = []\n    open_parens = []\n    temp_str = \"\"\n    for c in paren_string:\n        if c == \" \":\n            continue\n        elif c == \"(\":\n            temp_str += c\n            open_parens.append(temp_str)\n            temp_str = \"\"\n        elif c == \")\":\n            temp_str += c\n            close_parens.append(temp_str)\n            temp_str = \"\"\n    if temp_str:\n        close_parens.append(temp_str)\n    result_list = []\n    for op in open_parens:\n        c = close_parens.pop()\n        if op == c:\n            result_list.append(op)\n        else:\n            print(op, c)\n            return []\n    return result_list\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    open_list = []\n    close_list = []\n    \n    for char in paren_string:\n        if char == '(':\n            open_list.append(char)\n        elif char == ')':\n            close_list.append(char)\n    \n    result = []\n    \n    for i in range(len(open_list)):\n        if len(close_list) == 0:\n            result.append(open_list[0:i+1])\n            break\n        if open_list[i] == '(':\n            if close_list[-1] == ')':\n                result.append(open_list[0:i+1])\n                close_list.pop(-1)\n    if len(open_list) > len(close_list):\n        raise SyntaxError('Unbalanced parens')\n    \n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not paren_string:\n        return []\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result_list = []\n    if not paren_string:\n        return result_list\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    start_index = 0\n    end_index = 0\n    separated_groups = []\n    while end_index < len(paren_string):\n        if paren_string[end_index] == '(':\n            start_index = end_index\n            while paren_string[end_index]!= ')':\n                end_index += 1\n                if end_index == len(paren_string):\n                    break\n            separated_groups.append(paren_string[start_index:end_index+1])\n        end_index += 1\n    return separated_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return []\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # return separate_paren_groups_helper(paren_string, 0, len(paren_string) - 1)\n    # alternate solution\n    return separate_paren_groups_helper2(paren_string)\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    groups = []\n    current_group = ''\n    for char in paren_string:\n        if char =='':\n            continue\n        if char == '(' or char == ')':\n            if current_group!= '':\n                groups.append(current_group)\n                current_group = ''\n            groups.append(char)\n        else:\n            current_group += char\n    if current_group!= '':\n        groups.append(current_group)\n    return groups\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #return int(number) - (int(number) % 1)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    integer_part = math.floor(number)\n    decimal_part = math.floor(number) - integer_part\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    integer, decimal = divmod(number, 1)\n    return decimal\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    import math\n    int_part = math.floor(number)\n    decimal_part = number - int_part\n    if decimal_part >= 1:\n        decimal_part = 1\n    else:\n        decimal_part = 0\n    return decimal_part\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    integer, decimal = divmod(number, 1)\n    return decimal"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if number == 0:\n        return 0\n    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    decimals = 0\n    if number == 0:\n        return 0\n    while number >= 1 and number - 1 > 0:\n        number -= 1\n        decimals += 1\n    return number\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if number == 0:\n        return 0\n    else:\n        number_int = int(number)\n        number_float = number - number_int\n        return number_float\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if operations[0] < 0:\n        return True\n    elif operations[0] > 0:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if sum(operations) < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if sum(operations) < 0:\n        return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum_of_operations = 0\n    for operation in operations:\n        sum_of_operations += operation\n        if sum_of_operations < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(operations) == 0:\n        return False\n    if operations[0] < 0:\n        return True\n    return below_zero(operations[1:])\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for op in operations:\n        if op < 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(numbers) == 0:\n        return None\n    return sum(map(lambda x: abs(x - mean(numbers)), numbers)) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO: your code here\n    return 0.0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers_sum = sum(numbers)\n    numbers_mean = numbers_sum / len(numbers)\n    return sum([abs(n - numbers_mean) for n in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = len(numbers)\n    summ = 0.0\n    for value in numbers:\n        summ += abs(value - mean(numbers))\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(map(lambda x: abs(x - sum(numbers) / len(numbers)), numbers)) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(numbers) == 0:\n        raise Exception(\"You can't calculate mean absolute deviation of an empty list.\")\n    if len(numbers) == 1:\n        return 0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(map(lambda x: abs(x - mean(numbers)), numbers)) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not numbers:\n        raise ValueError(\"Cannot calculate MAD with empty list.\")\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # your code goes here\n    mean = sum(numbers)/len(numbers)\n    mad = sum([abs(mean - i) for i in numbers])/len(numbers)\n    return mad\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if delimeter == 0:\n        raise ValueError(\"delimeter cannot be 0\")\n    if not numbers:\n        return []\n    output = [numbers[0]]\n    for i in range(1, len(numbers)):\n        output.append(delimeter)\n        output.append(numbers[i])\n    return output\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = [numbers[0]]\n    for i in range(len(numbers) - 1):\n        result.append(delimeter)\n        result.append(numbers[i + 1])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    new_numbers = []\n    for idx in range(len(numbers) - 1):\n        new_numbers.extend([numbers[idx], delimeter])\n    new_numbers.append(numbers[-1])\n    return new_numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    result.extend(numbers)\n    result.append(delimeter)\n    result.extend([numbers[i + 1] for i in range(len(numbers) - 1)])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    numbers_length = len(numbers)\n    if numbers_length == 0:\n        return []\n    if numbers_length == 1:\n        return [numbers[0], delimeter]\n    return [numbers[0], delimeter] + intersperse(numbers[1:], delimeter)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not numbers:\n        return []\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(numbers) == 0:\n        return []\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    output_list = []\n    output_list.append(numbers[0])\n    for i in range(len(numbers) - 1):\n        output_list.append(delimeter)\n        output_list.append(numbers[i + 1])\n    return output_list\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert delimeter, \"Input delimeter cannot be empty\"\n    assert numbers, \"Input list cannot be empty\"\n    if delimeter == numbers[0]:\n        numbers.insert(0, delimeter)\n        return numbers\n    elif delimeter == numbers[-1]:\n        numbers.append(delimeter)\n        return numbers\n    else:\n        for i in range(len(numbers) - 1):\n            if numbers[i] == delimeter and numbers[i + 1]!= delimeter:\n                numbers.insert(i + 1, delimeter)\n    return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [delimeter] + [numbers[i] for i in range(len(numbers) - 1)] + [delimeter] + [numbers[i] for i in range(1, len(numbers))]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    import re\n    all_groups = re.findall(r'(\\(.*?\\))', paren_string)\n    all_nested_parens = []\n    for group in all_groups:\n        # Find nested parens\n        parens_level = 0\n        for ch in group:\n            if ch == '(':\n                parens_level += 1\n            elif ch == ')':\n                parens_level -= 1\n                if parens_level < 0:\n                    raise ValueError(f\"Too many closing parens for {group}\")\n        all_nested_parens.append(parens_level)\n    return all_nested_parens\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    nested_parens = []\n    for ele in paren_string.split(\" \"):\n        nested_parens.append(len(ele) - len(ele.replace(\"(\", \"\").replace(\")\", \"\")))\n    return nested_parens\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    parsed_string = paren_string.split()\n    return_list = []\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    stack = []\n    count = 0\n    for i in paren_string:\n        if i == '(':\n            if count == 0:\n                stack.append(i)\n                count += 1\n            else:\n                stack.append(i)\n                count += 1\n        elif i == ')':\n            if count == 0:\n                stack.append(i)\n                count += 1\n            else:\n                stack.append(i)\n                count -= 1\n        elif i =='':\n            if count == 0:\n                result.append(len(stack))\n                stack.clear()\n            else:\n                stack.append(i)\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    ans = []\n    # paren_string = '(' + paren_string[1:]\n    # paren_string = paren_string[:-1]\n    # print(paren_string)\n    # a = paren_string.split()\n    # a = a[0]\n    # print(a)\n    # print(paren_string.split())\n    # ans = []\n    # for i in range(len(paren_string)):\n    #     if paren_string[i] == '(':\n    #         ans.append(paren_string[:i+1])\n    #         print(ans)\n    # print(ans)\n    # print(paren_string.split())\n    # print(a.split('('))\n    # paren_string = a\n    # paren_string = paren_string.replace(' ', '')\n    # print(paren_string)\n    # paren_string = '(' + paren_string[1:]\n    # print(paren_string)\n    # paren_string = paren_string[:-1]\n    # print(paren_string)\n    # a = paren_string.split()\n    # print(a)\n    # print(paren_string.split())\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string.split())\n    # a = paren_string.split()\n    # print(a)\n    # print(paren_string.split())\n    # print(a.split('('))\n    # paren_string = a\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string.split())\n    # a = paren_string.split()\n    # print(a)\n    # print(paren_string.split())\n    # print(a.split('('))\n    # paren_string = a\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string.split())\n    # print(paren_string.split('('))\n    # a = paren_string.split('(')\n    # print(a)\n    # print(paren_string.split())\n    # print(a.split('('))\n    # paren_string = a\n    # print(paren_string)\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string.split())\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string.split())\n    # print(paren_string.split('('))\n    # print(paren_string.split('(')[0])\n    # paren_string = paren_string.split('(')[0]\n    # print(paren_string)\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string.split())\n    # a = paren_string.split()\n    # print(a)\n    # print(paren_string.split())\n    # paren_string = paren_string.replace('(', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(')', '')\n    # print(paren_string)\n    # print(paren_string"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    nested_parens = paren_string.split()\n    return_list = []\n    for nested_paren in nested_parens:\n        return_list.append(max_nesting_level(nested_paren))\n    return return_list\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    nested_parens = paren_string.split(\" \")\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    paren_string = paren_string.split(' ')\n    stack = []\n    res = []\n    for item in paren_string:\n        if item.startswith('('):\n            stack.append(item)\n        else:\n            if not stack:\n                res.append(1)\n            else:\n                res.append(len(stack) + 1)\n                stack.pop()\n    return res\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s = []\n    for i in paren_string.split(' '):\n        s.append(i)\n    return [len(i) for i in s if i.count('(') == i.count(')')]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for group in paren_string.split(\" \"):\n        if group == \"\":\n            result.append(0)\n        else:\n            cur = 1\n            for paren in group:\n                if paren == \"(\":\n                    cur += 1\n                elif paren == \")\":\n                    cur -= 1\n                    if cur == 0:\n                        result.append(cur)\n                        break\n                    else:\n                        continue\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [i for i in strings if substring in i]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [x for x in strings if substring in x]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [x for x in strings if substring in x]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [i for i in strings if substring in i]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not substring:\n        return []\n    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    sum_ = 0\n    prod = 1\n    for n in numbers:\n        sum_ += n\n        prod *= n\n    return sum_, prod\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sum_ = 0\n    prod = 1\n    for num in numbers:\n        sum_ += num\n        prod *= num\n    return sum_, prod\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # given\n    sum_ = 0\n    product = 1\n    # when\n    for num in numbers:\n        sum_ += num\n        product *= num\n    # then\n    return sum_, product\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (sum(numbers), reduce(mul, numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    numbers = [0] + numbers\n    m = len(numbers)\n    s, p = 0, 1\n    for j in range(1, m):\n        s += numbers[j]\n        p *= numbers[j]\n    return s, p\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum_, product = 0, 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_ += i\n        product *= i\n    return sum_, product\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # this is just a copy from the one on CodeWars\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sums = []\n    product = 1\n    for i in numbers:\n        product *= i\n        sums.append(sum(numbers))\n    return tuple(sums), product\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # sum = 0\n    # product = 1\n    # for number in numbers:\n    #     sum += number\n    #     product *= number\n    # return (sum, product)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[i])\n        else:\n            max_list.append(max(numbers[i], max_list[i - 1]))\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        current_max = 0\n        for j in range(i, len(numbers)):\n            if numbers[j] > current_max:\n                current_max = numbers[j]\n        result.append(current_max)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    rolling_max_list = [0] * (len(numbers) + 1)\n    for i in range(1, len(numbers) + 1):\n        rolling_max_list[i] = max(numbers[:i])\n    return rolling_max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(numbers) == 0:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > result[-1]:\n            result.append(numbers[i])\n        else:\n            result.append(result[-1])\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [max(numbers[:i+1]) for i in range(len(numbers))]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    max_array: List[int] = []\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max_list: List[int] = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[0])\n        elif numbers[i] > numbers[i - 1]:\n            max_list.append(numbers[i])\n        else:\n            max_list.append(max_list[i - 1])\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(numbers) == 0:\n        return []\n    \n    rolling_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > rolling_list[-1]:\n            rolling_list.append(numbers[i])\n        else:\n            rolling_list.append(rolling_list[-1])\n    \n    return rolling_list\n    \n    \ndef longest_increasing_subsequence(numbers: List[int]) -> Tuple[int, List[int]]:\n    \"\"\" Return the length of longest increasing subsequence and the subsequence itself for given list of integers\n    >>> longest_increasing_subsequence([1,2,3,2,1])\n    (4, [1, 2, 3, 2])\n    >>> longest_increasing_subsequence([1,2,3,4,5])\n    (5, [1, 2, 3, 4, 5])\n    >>> longest_increasing_subsequence([1, 2, 2, 2, 2, 2])\n    (6, [1, 2, 2, 2, 2, 2])\n    \"\"\"\n    if len(numbers) == 0:\n        return 0, []\n    \n    max_length = 1\n    max_subsequence = [numbers[0]]\n    \n    for i in range(1, len(numbers)):\n        if numbers[i] > max_subsequence[-1]:\n            max_subsequence.append(numbers[i])\n            max_length += 1\n        else:\n            max_subsequence.append(max_subsequence[-1])\n    \n    return max_length, max_subsequence\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    rolling_max = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > rolling_max[i-1]:\n            rolling_max.append(numbers[i])\n        else:\n            rolling_max.append(rolling_max[i-1])\n    return rolling_max\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if string == string[::-1]:\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # For a palindrome string S to be the longest palindromic substring,\n    # S must be equal to S[::-1] and it must be the longest such palindromic string.\n    # There are three conditions that are needed to be met in order to achieve this:\n    # 1) S must be the longest substring in S that is also a palindrome.\n    # 2) S must be equal to S[::-1]\n    # 3) The substring S[0:i] must be a palindrome.\n    # Let's define:\n    # p(S, i) - the length of the longest palindromic substring with S as a prefix and with S[0:i] as a suffix.\n    # The first condition is p(S, 0) = 0, as there is no palindromic substring of length 0.\n    # The second condition is p(S, 1) = 1, as S itself is a palindromic substring of length 1.\n    # The third condition is p(S, j) = p(S[0:j], j) where 0 <= j < len(S).\n    # In other words, p(S, j) is the longest palindromic substring with S as a prefix and with S[0:j] as a suffix.\n    # If p(S, j) > 1, then there is a palindromic string of length j+1 with S as a prefix and with S[0:j] as a suffix.\n    # So, p(S, j) = 1 and p(S, j+1) = 2 means that p(S, j) = 2.\n    # Thus, p(S, i) = i + 1 where 0 <= i < len(S).\n    # We can find p(S, i) by the following recurrence:\n    # p(S, i) = 1 + min(p(S, j) for 0 <= j < i) for j in range(i-1).\n    # We will use two variables to keep track of the longest palindrome and its length:\n    # longest = S[0], longest_length = 1\n    # We iterate through S, from the end to the beginning, and\n    # calculate p(S, i) for i in range(len(S))\n    # The i variable is the index of the inner loop.\n    # The inner loop will search for the longest palindrome with S[0:i] as a suffix and with S[0:i] as a prefix.\n    # We are looking for the longest palindrome for j in range(i-1).\n    # First, we check the end of S.\n    # If S[i] is equal to S[i-1], then we know that there is no palindrome of length 2 with S[0:i] as a suffix and with S[0:i] as a prefix.\n    # Otherwise, there is a palindrome with S[i-1] as a prefix and S[0:i] as a suffix.\n    # So, we can shorten the loop and go to the next i.\n    # We don't have to check the beginning of S.\n    # The above conditions ensure that p(S, i) is always equal to or greater than the length of longest palindrome with S as a prefix and with S[0:i] as a suffix.\n    # Now we are looking for the longest palindrome with S[0:i-1] as a suffix and with S[0:i] as a prefix.\n    # We are looking for the longest palindrome for j in range(i-2).\n    # We know that S[i-1] is equal to S[i] and that there is no palindrome with S[0:i-1] as a suffix and with S[0:i] as a prefix.\n    # So, we can shorten the loop and go to the next i.\n    # We can do it iteratively.\n    # For every i, we find the longest palindromic substring with S[0:i] as a prefix and with S[0:i] as a suffix.\n    # The variable longest keeps track of the longest palindrome length.\n    # We start by setting longest = S[0] and longest_length = 1.\n    # We iterate through the characters in S, from the end to the beginning.\n    # For every i, we find the longest palindromic substring with S"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    palindrome = []\n    for i in range(len(string) + 1):\n        if is_palindrome(string[i:]):\n            palindrome.append(string[i:])\n    return string + ''.join(palindrome)[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    palindrome_prefix = find_longest_palindrome_prefix(string)\n    if palindrome_prefix:\n        return palindrome_prefix + string[len(palindrome_prefix):]\n    return ''\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    postfix = longest_palindrome_postfix(string)\n    prefix = string[:len(string)-len(postfix)]\n    return prefix + postfix[::-1]"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not is_palindrome(string):\n        return string + string[-2::-1]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    prefix = string[::-1]\n    max_postfix = max_palindrome(string)\n    return string + prefix[max_postfix:]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    prefix = longest_palindromic_prefix(string)\n    if not is_palindrome(prefix):\n        return prefix + string[::-1]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(string) <= 1:\n        return string\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a == b:\n        return '0' * len(a)\n    return '1' * len(a)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return format(int(a, 2) ^ int(b, 2), 'b')\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(a)!= len(b):\n        raise ValueError('Input strings have different lengths')\n    res = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            res.append('0')\n        else:\n            res.append('1')\n    return ''.join(res)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return bin(int(a, 2) ^ int(b, 2))[2:]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(a)!= len(b):\n        raise ValueError(\"Arguments a and b must have equal length.\")\n    result = []\n    for char_a, char_b in zip(a, b):\n        if char_a!= char_b:\n            result.append(1)\n        else:\n            result.append(0)\n    return ''.join(map(str, result))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert len(a) == len(b)\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    xor_result = int(a, 2) ^ int(b, 2)\n    return bin(xor_result)[2:]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(a)!= len(b):\n        raise ValueError(\"Input strings must have the same length\")\n    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join(str(int(c1) ^ int(c2)) for c1, c2 in zip(a, b))\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n    else:\n        max_str = max(strings, key=len)\n        return max_str\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lengths = [len(string) for string in strings]\n    if not lengths:\n        return None\n    return strings[lengths.index(max(lengths))]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not strings:\n        return None\n    strings.sort()\n    max_len = len(strings[0])\n    longest_strings = [strings[0]]\n    for string in strings[1:]:\n        if len(string) == max_len:\n            longest_strings.append(string)\n        elif len(string) > max_len:\n            longest_strings = [string]\n            max_len = len(string)\n    return longest_strings[0]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if strings == []:\n        return None\n    else:\n        result = strings[0]\n        for string in strings:\n            if len(string) > len(result):\n                result = string\n    return result\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n    longest_string = ''\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not strings:\n        return None\n    max_len = len(strings[0])\n    max_str = strings[0]\n    for i in range(1, len(strings)):\n        if len(strings[i]) > max_len:\n            max_len = len(strings[i])\n            max_str = strings[i]\n    return max_str\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not strings:\n        return None\n    else:\n        return max(strings, key=len)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    while a!= b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    while b:\n        a, b = b, a%b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return int(gcd(a, b))\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    prefixes = [string]\n    i = 0\n    while i < len(prefixes[-1]):\n        prefixes.append(prefixes[-1][0:i + 1])\n        i += 1\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i + 1])\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [string[:i] for i in range(len(string))]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = list()\n    # Start with nothing and add everything one character at a time\n    for i in range(len(string)):\n        result.append(string[:i + 1])\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(string) == 0:\n        return ['']\n    else:\n        first = string[0]\n        remainder = string[1:]\n        return [first] + all_prefixes(remainder)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    prefixes = []\n    prefix = \"\"\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        prefixes.append(prefix)\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n    \ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \"\"\"\n    return [string[i:] for i in range(len(string) + 1)]\n    \ndef all_prefixes_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes and suffixes from shortest to longest of the input string\n    >>> all_prefixes_suffixes('abc')\n    ['a', 'ab', 'abc', 'c', 'bc', 'abc']\n    \"\"\"\n    return list(set(all_prefixes(string) + all_suffixes(string)))\n    \ndef all_substrings(string: str) -> List[str]:\n    \"\"\" Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'bc', 'c', 'abc', 'bcd', 'bcde', 'bcdef', 'cdef', 'abcd', 'abcde', 'abcdef', 'bcdefg']\n    \"\"\"\n    return [string[i:j] for i in range(len(string) + 1) for j in range(i + 1, len(string) + 1)]\n    \ndef all_substrings_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all substrings from shortest to longest of the input string along with all suffixes\n    >>> all_substrings_suffixes('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'bc', 'c', 'abc', 'bcd', 'bcde', 'bcdef', 'cdef', 'abcd', 'abcde', 'abcdef', 'bcdefg', 'bcdefg', 'cdefg']\n    \"\"\"\n    return all_substrings(string) + all_suffixes(string)\n    \ndef hamming_distance(string1: str, string2: str) -> int:\n    \"\"\" Return Hamming distance between two strings\n    >>> hamming_distance('abc', 'cde')\n    2\n    \"\"\"\n    if len(string1)!= len(string2):\n        raise ValueError('Input strings must be of equal length')\n    return sum(1 for i in range(len(string1)) if string1[i]!= string2[i])\n    \ndef is_anagram_of(string1: str, string2: str) -> bool:\n    \"\"\" Return True if string1 is an anagram of string2, False otherwise\n    >>> is_anagram_of('abc', 'cba')\n    True\n    \"\"\"\n    return all_prefixes_suffixes(string1) == all_prefixes_suffixes(string2)\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # result = \"\"\n    # for i in range(n+1):\n    #     result += str(i) + \" \"\n    # return result.rstrip()\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return''.join(map(str, range(n + 1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \" \".join(map(str, range(n+1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return''.join([str(i) for i in range(n + 1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return''.join(map(str, range(n + 1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    nums = list(range(n + 1))\n    return \" \".join(map(str, nums))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return''.join(map(str, range(n+1)))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    characters = set()\n    for character in string:\n        if character.isupper():\n            character = character.lower()\n        characters.add(character)\n    return len(characters)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert string, \"Input cannot be null\"\n    # return len(set(string.lower()))\n    # # another way of doing it\n    # character_set = set(string.lower())\n    # return len(character_set)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    character_counts: Counter = Counter()\n    for character in string:\n        character_counts[character.lower()] += 1\n    return len(character_counts)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # check if string is empty\n    if string is None:\n        raise TypeError\n    # count number of distinct characters\n    characters = set()\n    for c in string.lower():\n        characters.add(c)\n    return len(characters)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len(set([x.lower() for x in string]))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(set([i.lower() for i in string]))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Convert music_string to a list of integers\n    music_string_list = list(music_string)\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [len(note) for note in music_string.split('|')]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    music_list = music_string.split('|')\n    result_list = []\n    for music_note in music_list:\n        if music_note == 'o':\n            result_list.append(4)\n        elif music_note == 'o|':\n            result_list.append(2)\n        else:\n            result_list.append(1)\n    return result_list\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    music_lst = []\n    for note in music_string.split(' '):\n        if note.count('o') == 1 and note.count('|') == 1:\n            music_lst.append(4)\n        elif note.count('o') == 1 and note.count('|') == 2:\n            music_lst.append(2)\n        elif note.count('.') == 1 and note.count('|') == 1:\n            music_lst.append(1)\n        elif note.count('.') == 1 and note.count('|') == 2:\n            music_lst.append(0.5)\n        elif note.count('o') == 2 and note.count('|') == 1:\n            music_lst.append(0.5)\n        elif note.count('o') == 2 and note.count('|') == 2:\n            music_lst.append(0.25)\n        elif note.count('.') == 2 and note.count('|') == 1:\n            music_lst.append(0.25)\n        elif note.count('.') == 2 and note.count('|') == 2:\n            music_lst.append(0.125)\n        elif note.count('o') == 3 and note.count('|') == 1:\n            music_lst.append(0.125)\n    return music_lst\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    parsed = music_string.split('|')\n    parsed = [x.split() for x in parsed]\n    result = []\n    for p in parsed:\n        res = 0\n        for n in p:\n            if n == 'o':\n                res += 4\n            elif n == '.':\n                res += 1\n            elif n == 'h':\n                res += 2\n        result.append(res)\n    return result\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    list_of_beats = []\n    for note in music_string:\n        if note == \"o\":\n            list_of_beats.append(4)\n        elif note == \"o|\":\n            list_of_beats.append(2)\n        elif note == \".\":\n            list_of_beats.append(1)\n    return list_of_beats\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [_count_beats(line) for line in music_string.split('\\n')]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [len(x) for x in music_string.split()]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    music = music_string.split()\n    notes = [i for i in music if i!= 'o' and i!= 'o|']\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    music = music_string.split(' ')\n    for i in range(len(music)):\n        if music[i] == '.':\n            music[i] = 1\n        elif music[i] == '|':\n            music[i] = 2\n        elif music[i] == 'o':\n            music[i] = 4\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = len(string)\n    m = len(substring)\n    assert m > 0\n    assert m <= n\n    \n    # create a counter and a set\n    counter = 0\n    seen = set()\n    \n    # iterate through all substrings of the original string\n    for i in range(n - m + 1):\n        # check if substring is not overlapping with previous substrings\n        if substring not in string[i:i + m]:\n            # if so, add to counter\n            counter += 1\n            # add substring to set\n            seen.add(string[i:i + m])\n    \n    # return counter\n    return counter\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod("
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i = 0\n    count = 0\n    while i < len(string):\n        if string[i:].startswith(substring):\n            count += 1\n            i = i + len(substring)\n        else:\n            i = i + 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # count = 0\n    # for i in range(len(string)):\n    #     if string[i:i+len(substring)] == substring:\n    #         count += 1\n    # return count\n    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    start = 0\n    while start < len(string):\n        # find the position of the first occurrence of substring in string\n        position = string.find(substring, start)\n        # if substring is not found then return count\n        if position == -1:\n            return count\n        # else increment the count\n        count += 1\n        # start from the next occurrence of substring\n        start = position + 1\n    # we reach here when we find all occurrences of substring\n    # so return the count\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for index, letter in enumerate(string):\n        if letter == substring:\n            count += 1\n            if string[index + 1 :].find(substring)!= -1:\n                count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    times = 0\n    i, j = 0, 0\n    while j < len(string):\n        if string[i:j + 1] == substring:\n            times += 1\n        i += 1\n        j += 1\n    return times\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    assert len(string) >= len(substring)\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    times = 0\n    i = 0\n    while i + len(substring) <= len(string):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n        i += 1\n    return times\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Create a list of numbers from the input string\n    numbers_list = [int(number) for number in numbers.split()]\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers_list)\n    # Create a string to return with the sorted numbers\n    return''.join([str(num) for num in sorted_numbers])\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not isinstance(numbers, str):\n        raise TypeError\n    numbers = numbers.split()\n    numbers.sort(key=int)\n    numbers =''.join(numbers)\n    return numbers\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers_list = [int(n) for n in numbers.split(\" \")]\n    numbers_list.sort()\n    return \" \".join([str(num) for num in numbers_list])\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers = numbers.replace(' ', '').replace('\\t', '').replace('\\n', '').lower()\n    numbers = [int(x) for x in numbers]\n    return''.join([str(x) for x in sorted(numbers)])\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    num_list = list(map(int, numbers.split(' ')))\n    num_list.sort()\n    num_list = [str(i) for i in num_list]\n    return''.join(num_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    nums = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']\n    numbers = [i.lower() for i in numbers.split()]\n    for i in range(len(numbers)):\n        try:\n            numbers[i] = nums.index(numbers[i])\n        except ValueError:\n            pass\n    numbers.sort()\n    return''.join([nums[i] for i in numbers])\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \" \".join(sorted(numbers.split(\" \"), key=lambda x: int(x)))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numbers_list = numbers.split()\n    return \" \".join(sorted(numbers_list))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not numbers:\n        return ''\n    return''.join(sorted(numbers.split(' ')))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers = numbers.split()\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    return''.join([str(x) for x in numbers])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # find min and max\n    max_num = numbers[0]\n    min_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Find the index of the largest number in the list\n    # Use the index to find the largest and the smallest number in the list\n    # Return the two values in order\n    \n    numbers.sort()\n    return (numbers[-1],numbers[0])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[-1])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # We don't want to modify the original list\n    numbers = numbers.copy()\n    numbers.sort()\n    numbers.reverse()\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    numbers = sorted(numbers)\n    min_diff = numbers[1] - numbers[0]\n    min_numbers = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_numbers = (numbers[i], numbers[i+1])\n    return tuple(min_numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    numbers.sort()\n    min_difference = abs(numbers[1] - numbers[0])\n    first_number = numbers[0]\n    second_number = numbers[1]\n    for i in range(0, len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < min_difference:\n                min_difference = abs(numbers[i] - numbers[j])\n                first_number = numbers[i]\n                second_number = numbers[j]\n    return (first_number, second_number)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # return (min(numbers, key=lambda x: x) if len(numbers) > 1 else numbers[0], max(numbers, key=lambda x: x) if len(numbers) > 1 else numbers[0])\n    \n    if len(numbers) == 1:\n        return (numbers[0], numbers[0])\n    elif len(numbers) == 2:\n        return (numbers[0], numbers[1])\n    else:\n        numbers.sort()\n        return (numbers[0], numbers[1])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"Supplied list should have at least two elements.\")\n    minimum_distance = 1e6\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < minimum_distance:\n                minimum_distance = distance\n                smaller_number = numbers[i]\n                larger_number = numbers[j]\n    return (smaller_number, larger_number)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(numbers) <= 1:\n        return ()\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    numbers = sorted(numbers)\n    min_n = numbers[0]\n    max_n = numbers[-1]\n    unit_scale = lambda x: (x - min_n) / (max_n - min_n)\n    return list(map(unit_scale, numbers))\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [0.0] + [i / max(numbers) for i in numbers] + [1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(num - min_number) / (max_number - min_number) for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #find max and min of the numbers\n    max_val = max(numbers)\n    min_val = min(numbers)\n    #calculate the range of the list\n    range_val = max_val - min_val\n    #calculate the max and min of the transformed list\n    max_transformed = 1\n    min_transformed = 0\n    #calculate the scaling factor\n    scaling_factor = (max_transformed - min_transformed) / range_val\n    #create the new list\n    transformed_list = []\n    #loop through the list\n    for num in numbers:\n        #calculate the new number\n        new_number = (num - min_val) * scaling_factor\n        #append the new number to the transformed list\n        transformed_list.append(new_number)\n    return transformed_list\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert len(numbers) >= 2\n    x = numbers\n    x_min = min(x)\n    x_max = max(x)\n    x_min_index = x.index(x_min)\n    x_max_index = x.index(x_max)\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(numbers) < 2:\n        raise Exception(\"Cannot rescale numbers to unit. Must have at least 2 numbers.\")\n    numbers = [number for number in numbers]\n    smallest_number = min(numbers)\n    numbers = [number - smallest_number for number in numbers]\n    largest_number = max(numbers)\n    numbers = [number / largest_number for number in numbers]\n    return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Check that there are at least two numbers\n    if len(numbers) < 2:\n        raise Exception(\"You need to supply at least two numbers!\")\n    # Get the smallest number and largest number in the list\n    smallest = min(numbers)\n    largest = max(numbers)\n    # Calculate the scaling factor, such that smallest number becomes 0 and largest becomes 1\n    scaling = 1.0 / (largest - smallest)\n    # Apply the scaling to each number in the list\n    rescaled = [scaling * (number - smallest) for number in numbers]\n    return rescaled\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(numbers) < 2:\n        raise Exception(\"Need at least two numbers to rescale\")\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    new_numbers = []\n    for n in numbers:\n        new_numbers.append((n - minimum) / (maximum - minimum))\n    return new_numbers\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # return [x for x in values if isinstance(x, int)]\n    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return list(filter(is_integer, values))\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for value in values:\n        if type(value) is int:\n            result.append(value)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [x for x in values if type(x) == int]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    filtered = []\n    for val in values:\n        if isinstance(val, int):\n            filtered.append(val)\n    return filtered\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [int(num) for num in values if isinstance(num, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    integers = []\n    for val in values:\n        if type(val) == int:\n            integers.append(val)\n    return integers\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: type(x) is int, values))\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    counter = 0\n    for _ in string:\n        counter += 1\n    return counter\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for c in string:\n        count += 1\n    return count\n    \n    \ndef to_str(data: int) -> str:\n    \"\"\" Convert integer to string.\n    >>> to_str(0)\n    '0'\n    >>> to_str(0x12345)\n    '0x1d2a3c4e5'\n    \"\"\"\n    if data == 0:\n        return '0'\n    hex_string = hex(data)\n    return hex_string[2:]\n    \n    \ndef to_int(string: str) -> int:\n    \"\"\" Convert hex string to integer.\n    >>> to_int('0')\n    0\n    >>> to_int('0x1d2a3c4e5')\n    262599\n    \"\"\"\n    if string[0]!= '0x':\n        raise ValueError('Please provide a hex string.')\n    string = string[2:]\n    total = 0\n    for i in range(len(string)):\n        total += int(string[i]) * (16 ** (len(string) - 1 - i))\n    return total\n    \n    \ndef substr(string: str, start: int, length: int) -> str:\n    \"\"\" Return a substring of given length starting from a specified index.\n    >>> substr('', 0, 10)\n    ''\n    >>> substr('0x12345', 0, 10)\n    '0x1234'\n    >>> substr('0x12345', 2, 2)\n    '0x45'\n    >>> substr('0x12345', 2, 5)\n    '0x45'\n    \"\"\"\n    if start < 0:\n        raise ValueError('Invalid start position.')\n    if length < 0:\n        raise ValueError('Invalid substring length.')\n    if length > strlen(string):\n        raise ValueError('Not enough characters.')\n    return string[start:start + length]\n    \n    \ndef get_char(string: str, index: int) -> str:\n    \"\"\" Get a single character from a string at a specified index.\n    >>> get_char('0x12345', 0)\n    '0'\n    >>> get_char('0x12345', 1)\n    '1'\n    >>> get_char('0x12345', 4)\n    'x'\n    >>> get_char('0x12345', 5)\n    Traceback (most recent call last):\n    ...\n    IndexError\n    \"\"\"\n    if index >= strlen(string):\n        raise IndexError\n    return substr(string, index, 1)\n    \n    \ndef lower_case(string: str) -> str:\n    \"\"\" Convert hex string to lowercase\n    >>> lower_case('0x1234')\n    '0x1234'\n    >>> lower_case('0X1234')\n    '0x1234'\n    \"\"\"\n    return string.lower()\n    \n    \ndef upper_case(string: str) -> str:\n    \"\"\" Convert hex string to uppercase\n    >>> upper_case('0x1234')\n    '0X1234'\n    >>> upper_case('0X1234')\n    '0X1234'\n    \"\"\"\n    return string.upper()\n    \n    \ndef pad_left(string: str, length: int, character: str) -> str:\n    \"\"\" Pad a string with a specified character to the left.\n    >>> pad_left('0x1234', 0, '0')\n    '0x1234'\n    >>> pad_left('0x1234', 2, '0')\n    '0x01234'\n    \"\"\"\n    if length < 0:\n        raise ValueError('Invalid padding length.')\n    return character * (length - strlen(string)) + string\n    \n    \ndef pad_right(string: str, length: int, character: str) -> str:\n    \"\"\" Pad a string with a specified character to the right.\n    >>> pad_right('0x1234', 0, '0')\n    '0x1234'\n    >>> pad_right('0x1234', 2, '0')\n    '0x123400'\n    \"\"\"\n    if length < 0:\n        raise ValueError('Invalid padding length.')\n    return string + character * (length - strlen(string))\n    \n    \ndef left_pad_zeros(strin"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for _ in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for char in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    counter = 0\n    for _ in string:\n        counter += 1\n    return counter\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    for divisor in range(5, math.floor(math.sqrt(n)), 6):\n        if n % divisor == 0 and n // divisor <= divisor:\n            return divisor\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 1\n    for i in range(n):\n        if n % (n - i) == 0:\n            return n - i\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Find largest divisor smaller than n\n    # If number of divisors is even, take largest divisor as the number of divisors\n    # If number of divisors is odd, take largest divisor - 1\n    divisors = divisors_of(n)\n    if len(divisors) % 2 == 0:\n        return n // divisors.pop()\n    else:\n        return n // divisors.pop() - 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return int(n / smallest_divisor(n))\n    \n    \nif __name__ == \"__main__\":\n    print(\"Largest divisor of 15 is:\", largest_divisor(15))"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor - 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    max_divisor = 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    i = n\n    while True:\n        if n % i == 0:\n            return i\n        else:\n            i -= 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = 1\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 1\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # number of factors for n\n    number_factors = 0\n    if n == 1:\n        return [1]\n    while n % 2 == 0:\n        number_factors += 1\n        n //= 2\n    if n == 1:\n        return [2] * number_factors\n    # find number of factors for a\n    a = 3\n    while a * a <= n:\n        if n % a == 0:\n            number_factors += 1\n            b = n // a\n            if a == b:\n                return [a] * number_factors\n            n //= b\n            a = 3\n        else:\n            a += 2\n    return [n] * number_factors\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    prime = 2\n    while prime ** 2 <= n:\n        if n % prime!= 0:\n            prime += 1\n            continue\n        count = 0\n        while n % prime == 0:\n            n //= prime\n            count += 1\n        result.append(prime)\n        result.append(count)\n        prime += 1\n    if n!= 1:\n        result.append(n)\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    while n % 2 == 0:\n        result.append(2)\n        n = n // 2\n    for i in range(3, n + 1, 2):\n        while n % i == 0:\n            result.append(i)\n            n = n // i\n    if n > 2:\n        result.append(n)\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    from math import sqrt\n    import math\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    factors = []\n    div = 2\n    while div <= n ** 0.5:\n        if n % div!= 0:\n            div += 1\n        else:\n            n //= div\n            factors.append(div)\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    primes = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            primes.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return primes\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n > 1, \"Should be larger than one\"\n    prime_list = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            prime_list.append(i)\n            n //= i\n    return prime_list\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    temp_list = []\n    for i in range(len(numbers)):\n        if numbers[i] not in temp_list:\n            temp_list.append(numbers[i])\n    return temp_list\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_list = []\n    for i in numbers:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(numbers) <= 1:\n        return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        index = 1\n        for i in range(1, len(numbers)):\n            if numbers[i]!= numbers[index-1]:\n                numbers[index] = numbers[i]\n                index += 1\n        return numbers[:index]\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    numbers = sorted(list(set(numbers)))\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    # Solution 1 -  Built-in function\n    # sort and then remove duplicate elements\n    # return list(dict.fromkeys(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # The trick here is to use the set datatype\n    return list(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    my_list = []\n    for i in numbers:\n        if numbers.count(i) < 2:\n            my_list.append(i)\n    return my_list\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join(\n        [\n            c.upper() if c.islower() else c.lower()\n            for c in string\n        ]\n    )\n    \n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # return \"\".join([letter.swapcase() if letter.isupper() else letter.lower() for letter in string])\n    return ''.join(\n        flip_case_helper(string)\n    )\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return ''.join([ch.upper() if ch.islower() else ch.lower() for ch in string])"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    new_string = \"\"\n    for character in string:\n        if character.isupper():\n            new_string += character.lower()\n        elif character.islower():\n            new_string += character.upper()\n        else:\n            new_string += character\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ''.join(\n        c.upper() if c.islower() else c.lower()\n        for c in string\n        )\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join(c.lower() if c.isupper() else c.upper() for c in string)\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return ''.join(\n        char.upper() if char.islower() else char.lower()\n        for char in string\n    )\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    uppercase = string.upper()\n    lowercase = string.lower()\n    return uppercase[::-1].lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    flipped_string = \"\"\n    for char in string:\n        if char.isalpha() and char.islower():\n            flipped_string += char.upper()\n        elif char.isalpha() and char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = \"\"\n    for string in strings:\n        result += string\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = ''\n    for i in range(len(strings)):\n        if i == len(strings) - 1:\n            result += strings[i]\n        else:\n            result += strings[i] + ''\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return ''\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[0] + concatenate(strings[1:])\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # return \"\".join(strings)\n    result = \"\"\n    for string in strings:\n        result += string\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # filter_by_prefix = []\n    # for s in strings:\n    #     if s.startswith(prefix):\n    #         filter_by_prefix.append(s)\n    # return filter_by_prefix\n    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if prefix == '':\n        return strings\n    else:\n        return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(strings) == 0:\n        return []\n    else:\n        return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # a number is prime if it is greater than 1\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # TODO: Implement this function\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    else:\n        for i in range(5,n,2):\n            if n % i == 0:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(n/2) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef gcd(a, b):\n    \"\"\"Return the greatest common divisor of two numbers.\n    >>> gcd(2, 4)\n    2\n    >>> gcd(2, 14)\n    2\n    >>> gcd(8, 10)\n    2\n    >>> gcd(14, 15)\n    1\n    \"\"\"\n    if a < b:\n        return gcd(b, a)\n    elif a % b == 0:\n        return b\n    else:\n        return gcd(b, a % b)\n        \ndef is_between(a, b, c):\n    \"\"\"Return true if a number a is between b and c, and false otherwise.\n    >>> is_between(2, 5, 10)\n    False\n    >>> is_between(2, 5, 7)\n    True\n    >>> is_between(5, 2, 6)\n    False\n    \"\"\"\n    if a > b:\n        return a <= c and c < b\n    return a < c and c <= b\n    \ndef is_palindrome(n):\n    \"\"\"Return true if a number is palindromic, and false otherwise.\n    >>> is_palindrome(101)\n    True\n    >>> is_palindrome(10)\n    False\n    >>> is_palindrome(1)\n    True\n    \"\"\"\n    return str(n) == str(n)[::-1]\n    \ndef is_power(a, b):\n    \"\"\"Return true if a is a power of b, and false otherwise.\n    >>> is_power(2, 2)\n    True\n    >>> is_power(2, 3)\n    False\n    >>> is_power(4, 2)\n    True\n    >>> is_power(1, 1)\n    True\n    \"\"\"\n    if a == b:\n        return True\n    elif a % b == 0:\n        return True\n    else:\n        return is_power(a, b - 1)\n        \ndef quadratic(a, b, c):\n    \"\"\"Return the solutions to the equation ax^2 + bx + c = 0.\n    >>> quadratic(1, 0, -1)\n    (-1.0, 1.0)\n    >>> quadratic(2, 3, 1)\n    (-0.5, -1.0)\n    >>> quadratic(1, 3, -4)\n    (-2.0, 1.0)\n    \"\"\"\n    return (-b + math.sqrt(b**2 - 4 * a * c)) / (2 * a), (-b - math.sqrt(b**2 - 4 * a * c)) / (2 * a"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    non_zero_xs = []\n    for x in xs:\n        if x!= 0:\n            non_zero_xs.append(x)\n    if len(non_zero_xs) == 0:\n        return 0\n    if len(non_zero_xs) == 1:\n        return -non_zero_xs[0]\n    if len(non_zero_xs) % 2 == 1:\n        non_zero_xs = non_zero_xs[:-1]\n    return math.pi / (math.pi - math.atan(poly(non_zero_xs, 0)))\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def a_func(x):\n        return poly(xs, x)\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def f(x):\n        return poly(xs, x)\n    \n    a = 1\n    b = -xs[-1]\n    e = 0.000001\n    while b - a > e:\n        c = (a + b) / 2\n        if f(a) * f(c) <= 0:\n            b = c\n        else:\n            a = c\n    return (b + a) / 2\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    xs.extend([0] * (len(xs) % 2))\n    xs = sorted(xs)\n    xs = [0] + xs + [0]\n    a = [xs[i + 1] * xs[i + 2] - xs[i] * xs[i + 3] for i in range(len(xs) - 3)]\n    a.append(xs[1] * xs[2] - xs[0] * xs[3])\n    roots = []\n    for i in range(len(a)):\n        if a[i] == 0:\n            roots.append(xs[i + 1] - xs[i])\n            roots.append(xs[i + 1] - xs[i + 2])\n    if len(roots) == 0:\n        return None\n    elif len(roots) == 2:\n        return [roots[0] - roots[1], 0.5 * (roots[0] + roots[1])]\n    else:\n        return roots\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def __find_zero(xs):\n        \"\"\"x is a variable.\n        return x such that xs(x) = 0.\n        \"\"\"\n        def _f(xs, x):\n            return poly(xs, x)\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert len(xs) % 2 == 0, 'len(xs) must be even.'\n    assert max(xs)!= 0, 'largest coefficient must not be 0.'\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(xs) % 2 == 1:\n        raise ValueError(\"odd number of xs\")\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert len(xs) % 2 == 0 and xs[0]!= 0\n    for x in [i for i in xs if i!= 0]:\n        if not any([x * 2 * (x - i) * (x + i) < 0 for i in xs if i!= x and i!= 0]):\n            return x\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # x0 = (x1 - x2) / (a - b)\n    a = xs[0]\n    b = xs[1]\n    xs = xs[2:]\n    for x in range(len(xs)):\n        if a!= 0:\n            x0 = xs[x] / (a - b)\n            if round(poly([a, b], x0), 2) == 0:\n                return x0\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert len(xs) % 2 == 0\n    assert xs[0]!= 0\n    assert len(xs) >= 2\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #Create a new list to store the values of l that are not divisible by three\n    l_not_div_by_three = []\n    #Create a new list to store the values of l that are divisible by three\n    l_div_by_three = []\n    for i in range(len(l)):\n        if i%3 == 0:\n            l_div_by_three.append(l[i])\n        else:\n            l_not_div_by_three.append(l[i])\n    #Finally, insert the two lists into l\n    l_not_div_by_three.extend(l_div_by_three)\n    #Return the sorted list\n    return sorted(l_not_div_by_three)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l1 = []\n    l2 = []\n    for i in l:\n        if i%3!= 0:\n            l1.append(i)\n        else:\n            l2.append(i)\n    l1.sort()\n    return l1 + l2\n    \ndef flatten_dict(d: dict):\n    \"\"\"This function takes a dictionary d and returns a new dictionary\n    containing the values of d in order. The keys of d should be \n    the keys of the dictionary in which the values are in order. \n    If the values are not in order, they will be sorted and then in\n    the new dictionary the keys will be in the same order as the values are.\n    >>> flatten_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4})\n    {1: 'a', 2: 'b', 3: 'c', 4: 'd'}\n    >>> flatten_dict({'a': 1, 'b': 2, 'c': 3, 'd': 3})\n    {1: 'a', 2: 'b', 3: 'c'}\n    >>> flatten_dict({'a': 1, 'b': 2, 'c': 3, 'd': 3, 'e': 1})\n    {1: 'a', 2: 'b', 3: 'c'}\n    \"\"\"\n    keys = list(d.keys())\n    keys.sort()\n    d1 = {}\n    for i in keys:\n        d1[d[i]] = i\n    return d1\n    \ndef flatten(l: list):\n    \"\"\"This function takes a list l and returns a new list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> flatten([1, 2, 3])\n    [1, 2, 3]\n    >>> flatten([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l1 = []\n    l2 = []\n    for i in l:\n        if i%3!= 0:\n            l1.append(i)\n        else:\n            l2.append(i)\n    return l1 + l2\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    l_prime = []\n    \n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_prime.append(l[i])\n    \n    l_prime.sort()\n    \n    return l_prime + l[3::3]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l1 = []\n    l2 = []\n    l3 = []\n    for i in l:\n        if i % 3 == 0:\n            l3.append(i)\n        elif i % 3 == 1:\n            l1.append(i)\n        else:\n            l2.append(i)\n    l1.sort()\n    l2.sort()\n    return l3 + l1 + l2\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    nums = []\n    strs = []\n    for i in range(len(l)):\n        if i%3 == 0:\n            nums.append(l[i])\n        else:\n            strs.append(l[i])\n    nums.sort()\n    strs.sort()\n    l1 = nums + strs\n    return l1\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(l, key=lambda i: i if i%3 else i//3)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [l[i] for i in range(len(l)) if i % 3!= 0] + [l[i] for i in range(len(l)) if i % 3 == 0 and i % 2!= 0] + [l[i] for i in range(len(l)) if i % 3 == 0 and i % 2 == 0]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted([l[i] for i in range(len(l)) if i%3!= 0]) + [l[i] for i in range(len(l)) if i%3 == 0]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # l' = l where l'[i] = l[i] if i not divisible by three,\n    #             else l[i] where l[i] = sorted(l[i], reverse=True)\n    #             where l[i] = sorted(l[i], reverse=True)\n    #             where l[i] = l[i] if i divisible by three,\n    #             else l[i] where l[i] = sorted(l[i])\n    l_ = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_.append(sorted(l[i]))\n        else:\n            l_.append(l[i])\n    return l_\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    list_sort = []\n    for i in range(len(l)):\n        if (i % 3!= 0):\n            list_sort.append(l[i])\n        else:\n            list_sort.append(sorted(l)[i])\n    return list_sort\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l = sorted(l)\n    return list(l[i] for i in range(len(l)) if i == 0 or l[i]!= l[i-1])\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    out = []\n    for x in l:\n        if x not in out:\n            out.append(x)\n    return out\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(l) == 0:\n        raise ValueError(\"List is empty.\")\n    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(l) == 0:\n        return\n    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    max_elem = l[0]\n    for i in range(len(l)):\n        if l[i] > max_elem:\n            max_elem = l[i]\n    return max_elem\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if l:\n        maximum = l[0]\n        for i in l:\n            if i > maximum:\n                maximum = i\n        return maximum\n    else:\n        return None\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(l) == 1:\n        return l[0]\n    return max(l[0], max_element(l[1:]))\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max = l[0]\n    for i in range(len(l)):\n        if l[i] > max:\n            max = l[i]\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    # max_element will be the largest element in the list\n    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n        elif i % 11 == 0:\n            count += 1\n        elif i % 13 == 0:\n            count += 1\n        else:\n            pass\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            if '7' in str(i):\n                count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(1 for i in range(n) if 7 in [i % 11, i % 13])\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            if '7' in str(i):\n                count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum([1 for i in range(1, n) if 7 in [int(j) for j in str(i)] if (i % 11 == 0 or i % 13 == 0)])\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 7:\n        return n\n    else:\n        return fizz_buzz(n-1) + fizz_buzz(n//11) + fizz_buzz(n//13)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    counter = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                counter += 1\n    return counter\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    while n > 0:\n        if n % 11 == 0 or n % 13 == 0:\n            count += 1\n        n -= 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                result += 1\n    return result\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l_prime = []\n    for index in range(0, len(l), 2):\n        l_prime.append(l[index])\n    for index in range(1, len(l), 2):\n        l_prime.append(l[index])\n    return l_prime\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sorted_list = []\n    for index, value in enumerate(l):\n        if index % 2 == 0:\n            sorted_list.append(value)\n    for index, value in enumerate(l):\n        if index % 2 == 1:\n            sorted_list.append(value)\n    return sorted_list\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    even_l = []\n    odd_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_l.append(l[i])\n        else:\n            odd_l.append(l[i])\n    even_l = sorted(even_l)\n    return odd_l + even_l\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(l)[::2] + sorted(l)[1::2]\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #this is a really dumb way of doing it, but it works.\n    #its a very silly way to do it.\n    even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    even = sorted(even)\n    return odd + even\n    \n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l_ = l[:]\n    l.sort()\n    for index, element in enumerate(l):\n        if index % 2 == 0:\n            l_[index] = l[index]\n    return l_\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [i for j,i in sorted(enumerate(l)) if j%2]\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not l:\n        return []\n    if len(l) == 1:\n        return l\n    else:\n        return [l[i] for i in range(0, len(l), 2)] + [min(l[i], l[i+1]) for i in range(len(l)-1, 1, -2)] + [l[i] for i in range(len(l)-1, 1, -2)]\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # l' = list, l = list\n    # l' is an identical list l, but with the odd indices equal to l,\n    # while l is the list that contains the even indicies of l'\n    # l' = l\n    # l = l'\n    l_copy = l.copy()\n    #l_copy = list(l)\n    l_even_sorted = []\n    # l_even_sorted = list()\n    for index in range(len(l)):\n        if index % 2 == 0:\n            l_even_sorted.append(l_copy[index])\n    # print(l_even_sorted)\n    l_even_sorted.sort()\n    l[::2] = l_even_sorted\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(l)[::2] + sorted(l)[1::2]\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    groups = []\n    for i in range(len(s) // 3 + 1):\n        groups.append(s[(3 * i):min((3 * i + 3), len(s))])\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse each element in group.\n    groups = [group[::-1] for group in groups]\n    # concat elements of each group.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # take groups of three characters and cycle them\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups to get decoded string\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. If group has fewer than 3 elements, it's skipped.\n    groups = [group if len(group) == 3 else (group[1:] + group[0]) for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. If group has less than three elements, cycle only once.\n    groups = [group if len(group) == 3 else (group + group[0]) for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [group if len(group) == 3 else (group[1:] + group[0]) for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    fib = 1\n    i = 0\n    while fib < n:\n        fib = fib_sum(i)\n        i += 1\n    fib = fib_sum(i)\n    while not is_prime(fib):\n        i += 1\n        fib = fib_sum(i)\n    return fib\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i = 0\n    j = 1\n    while True:\n        if is_prime(fib_numbers(i)) and fib_numbers(j) % fib_numbers(i) == 0:\n            break\n        i += 1\n        j += 1\n    return fib_numbers(i) + fib_numbers(j)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = 2\n    while True:\n        if fibonacci(i) >= n:\n            if is_prime(fibonacci(i)):\n                return fibonacci(i)\n        i += 1\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    counter = 1\n    fib_num = 1\n    while counter <= n:\n        fib_num = fib_num + 1\n        fib_num_square = fib_num ** 2\n        num = 0\n        while num < 2:\n            num = is_prime(fib_num_square)\n            fib_num_square += 1\n        if num == True:\n            counter += 1\n    return fib_num\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    f1, f2 = 1, 1\n    counter = 0\n    while counter < n:\n        f1, f2 = f2, f1 + f2\n        counter += 1\n        if is_prime(f2):\n            if counter == n:\n                return f2\n    \ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if n is prime and False if n is not prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(29)\n    True\n    \"\"\"\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Check if n is even\n    if n % 2 == 0:\n        return None\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 2\n    f0 = 1\n    f1 = 2\n    i = 2\n    while i < n:\n        f2 = f1 + f0\n        f0 = f1\n        f1 = f2\n        i += 1\n    return f2\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1:\n        return 2\n    else:\n        i = 1\n        a = 1\n        b = 1\n        while i < n:\n            c = a + b\n            a = b\n            b = c\n            if is_prime(c):\n                i = i + 1\n        return c\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n -= 1\n    a, b = 0, 1\n    i = 0\n    while i < n:\n        a, b = b, (a + b) % m\n        if is_prime(b):\n            i += 1\n    return b\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    a = 0\n    b = 1\n    k = 0\n    while k < n - 2:\n        a, b = b, a + b\n        if is_prime(b):\n            k += 1\n    return b\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for num in l:\n        for num2 in l:\n            for num3 in l:\n                if num + num2 + num3 == 0:\n                    count += 1\n    if count == 0:\n        return False\n    elif count == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # initialize the list of triple values\n    triple_values = []\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l.sort()\n    if len(l) < 3:\n        return False\n    triples = set()\n    i = 0\n    while i < len(l):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            triples.add(tuple(sorted([l[i], l[i + 1], l[i + 2]])))\n        i += 1\n        while i < len(l) - 2 and l[i] == l[i - 1]:\n            i += 1\n    return len(triples) == 3\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # make a set with all elements in the list\n    # iterate through all elements in the set\n    # look for the complement to the element in the list\n    # if it exists in the set, check if its complement is also in the set\n    # if yes, return True\n    # if no, return False\n    # I'd really like to check if there's a better way to do this\n    # without using a double for loop\n    # but I couldn't figure out the proper way\n    # so I settled for this solution\n    set_of_elements = set(l)\n    for element in set_of_elements:\n        complement = 0 - element\n        if complement in set_of_elements:\n            # I couldn't figure out how to break out of the for loop\n            # so I settled for this solution\n            # but it's not the best solution either\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # unique_l = set(l)\n    # for x in unique_l:\n    #     for y in unique_l:\n    #         for z in unique_l:\n    #             if x + y + z == 0:\n    #                 return True\n    # return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(l) < 3:\n        return False\n    \n    s = set(l)\n    for e in s:\n        if -e in s and -e * 2 in s:\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        else:\n            seen.add(x)\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i]+l[j]+l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # to get the indices of the list to the sum to zero\n    s = set()\n    # add all the unique sums to the set\n    for x in l:\n        for y in l:\n            if x+y in s:\n                return True\n            else:\n                s.add(x+y)\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n >= 2\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n > 1\n    return n * (n - 1)\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 2 * (n * n - n)\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Initialize the total to 0\n    collision_count = 0\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    i = 0\n    while True:\n        i += 1\n        if i % 10000 == 0:\n            print(i)\n        if i % n == 0:\n            count += 1\n        if i % (n * 2) == 0:\n            break\n        for j in range(1, n):\n            if i % (n * j) == 0:\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    # This solution is clearly suboptimal.  We could do better!\n    # However, there is no clear way to speed it up.  We can't change the order\n    # in which the cars move; if we do, then it is likely that a car moving\n    # right to left will end up colliding with a car moving left to right.\n    # Furthermore, if we switch the order of the cars, then we are likely to\n    # end up with a car collision.\n    \n    # But who cares?  Let's just report the number of collisions.\n    \n    assert(n > 0)\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if i!= j:\n                if (i < j and (i % 2 == 0) and (j % 2 == 1)) or \\\n                   (i > j and (i % 2 == 1) and (j % 2 == 0)):\n                    count += 1\n    \n    return count\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def counter(n):\n        res = 0\n        for i in range(n):\n            for j in range(n):\n                if i < j:\n                    res += 1\n        return res\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert n > 0\n    car_lst = [Car(n) for n in range(-n, n+1)]\n    collision_count = 0\n    while True:\n        for i in range(0, len(car_lst)):\n            car_lst[i].move()\n            if car_lst[i].collision(car_lst):\n                collision_count += 1\n        if collision_count == 0:\n            break\n    return collision_count\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    collisions = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i!= j:\n                collisions += car_race_collision_helper(i, j)\n    return collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    cars = []\n    n = min(n, len(cars))\n    for i in range(n):\n        cars.append(Car(left=i))\n    for i in range(n):\n        cars.append(Car(right=i))\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [e+1 for e in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Using a list comprehension\n    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(l) < 2:\n        return False\n    if len(l) > 1:\n        l.sort()\n        if l[0] + l[1] == 0:\n            return True\n        elif l[0] == l[1]:\n            return pairs_sum_to_zero(l[1:])\n        else:\n            return pairs_sum_to_zero(l[1:])\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # your code goes here\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return False\n    else:\n        set_l = set(l)\n        for e in set_l:\n            if -e in set_l and e!= -e:\n                return True\n        return False\n        \ndef is_unique(l):\n    \"\"\"\n    is_unique takes a list as an input.\n    it returns True if there are no duplicate elements in the list,\n    and False otherwise.\n    >>> is_unique([1, 2, 3, 4])\n    True\n    >>> is_unique([1, 2, 3, 1])\n    False\n    >>> is_unique([1, 1, 2, 2, 3, 3, 4, 5])\n    False\n    >>> is_unique([1, 2])\n    True\n    >>> is_unique([])\n    True\n    \"\"\"\n    if l == []:\n        return True\n    else:\n        return len(l) == len(set(l))\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l.sort()\n    n = len(l)\n    if n < 2:\n        return False\n    i = 0\n    j = 1\n    while i < n and j < n:\n        if l[i] == l[j]:\n            return False\n        if l[i] + l[j] == 0:\n            return True\n        if l[i] + l[j] < 0:\n            i += 1\n        if l[i] + l[j] > 0:\n            j += 1\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l = set(l)\n    for x in l:\n        if -1 * x in l:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(l) < 2:\n        return False\n    else:\n        i = 0\n        while i < len(l):\n            j = i + 1\n            while j < len(l):\n                if l[i] == l[j] and l[i] == 0:\n                    return True\n                j += 1\n            i += 1\n        return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert type(l) == list, \"l must be a list\"\n    if len(l) < 2:\n        return False\n    elif len(l) == 2:\n        if l[0] == l[1]:\n            return False\n        else:\n            return True\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    remainder = x\n    while remainder!= 0:\n        remainder, result = divmod(remainder, base)\n        result.insert(0, str(remainder))\n    return \"\".join(result)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = \"\"\n    x_remainder = x\n    base_num = base\n    while x_remainder >= base:\n        remainder = x_remainder % base\n        x_remainder = x_remainder // base\n        result = str(remainder) + result\n    result = str(x_remainder) + result\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if base == 10:\n        return str(x)\n    elif base < 10:\n        return str(x) if x < base else change_base(x // base, base) + str(x % base)\n    else:\n        raise Exception('Base number should be less than 10.')\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if x < base:\n        return str(x)\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not isinstance(base, int):\n        raise TypeError(\"base is not an integer\")\n    if base < 2:\n        raise ValueError(\"base is less than 2\")\n    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if base < 2 or base > 10:\n        return ''\n    res = ''\n    x = abs(x)\n    while x:\n        res = str(x % base) + res\n        x //= base\n    return res\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = \"\"\n    while x > 0:\n        s = str(x % base) + s\n        x = x // base\n    return s\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s = \"\"\n    while x > 0:\n        s = str(x % base) + s\n        x //= base\n    return s\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return f\"{x:b}\"[0: base]\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # your code here\n    if base <= 0:\n        raise ValueError(\"Base must be positive integer.\")\n    result = \"\"\n    x = abs(x)\n    while x > 0:\n        x, y = x // base, x % base\n        result += str(y)\n    return -1 * int(result[::-1]) if x < 0 else int(result[::-1])\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return 1/2 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return round((a * h)/2, 1)\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return 0.5*h*a\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n <= 2:\n        return n - 1\n    a, b = 0, 1\n    for _ in range(n - 2):\n        a, b = b, a + b\n    return b\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    fib3 = (\n        0,\n        2,\n        0\n    )\n    if n < 3:\n        return fib3[n]\n    fib4_list = [0, 2, 0]\n    for i in range(3, n+1):\n        fib4_list.append(fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4])\n    return fib4_list[n]\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib4_prev = 0\n        fib4_next = 2\n        for i in range(3, n+1):\n            fib4_prev, fib4_next = fib4_next, fib4_next + fib4_prev\n        return fib4_next\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 1 or n == 2 or n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #raise NotImplementedError()\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib4_prev = 0\n        fib4_next = 2\n        for i in range(3, n+1):\n            fib4_next = fib4_prev + fib4_next + fib4_next + fib4_next\n            fib4_prev = fib4_next - fib4_prev\n        return fib4_next\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 4:\n        return n\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    return 0.5 * (l[len(l)//2 - 1] + l[len(l)//2])\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[(len(l)//2)-1] + l[(len(l)//2)])/2\n    else:\n        return l[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l = sorted(l)\n    return l[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l = sorted(l)\n    l_len = len(l)\n    if l_len == 0:\n        raise ValueError(\"cannot calculate median of empty list\")\n    if l_len % 2 == 1:\n        return l[l_len//2]\n    else:\n        return (l[l_len//2-1] + l[l_len//2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[(n//2)-1]) / 2\n    return l[n//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l.sort()\n    n = len(l)\n    if n < 1:\n        return None\n    if n % 2 == 0:\n        return (l[n // 2] + l[(n - 1) // 2]) / 2\n    else:\n        return l[n // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l = sorted(l)\n    if len(l) % 2:\n        return l[len(l)//2]\n    return (l[len(l)//2-1] + l[len(l)//2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    n = len(l)\n    l.sort()\n    if n%2 == 0:\n        return (l[(n//2)-1] + l[n//2])/2\n    else:\n        return l[n//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(l)[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l.sort()\n    n = len(l)\n    if n == 0:\n        raise ValueError\n    elif n % 2 == 0:\n        return (l[int((n-1)/2)]+l[int((n+1)/2)])/2\n    else:\n        return l[int((n-1)/2)]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    # remove any whitespace\n    text = text.replace(' ', '')\n    text = text.lower()\n    \n    # perform reverse of given string\n    rev = text[::-1]\n    \n    # if the input is a palindrome return True, otherwise return False\n    if text == rev:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return is_palindrome_recursive(text.lower())\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return text.casefold() == text[::-1].casefold()\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # check the input string\n    if not isinstance(text, str):\n        raise TypeError(\"Invalid input type: expected string.\")\n    text = text.lower()\n    clean_text = ''\n    for char in text:\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            clean_text += char\n    # print(clean_text)\n    clean_text = clean_text.replace(' ', '')\n    # print(clean_text)\n    clean_text = clean_text[::-1]\n    # print(clean_text)\n    return clean_text == clean_text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return text[::-1].casefold() == text.casefold()\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # We'll create two strings, to compare them\n    new_text = text[::-1]\n    return text == new_text\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if text == text[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # MODP in 1 line:\n    # return pow(2, n, p)\n    # MODP in 2 lines:\n    # return 2**n % p\n    # MODP in 3 lines:\n    # return pow(2, n, p)\n    # MODP in 4 lines:\n    return (2**n) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    return (2 * modp(n-1, p)) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def modp_inner(n: int, p: int) -> int:\n        return pow(2, n, p)\n    return modp_inner(n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    m = 1\n    while n >= p:\n        m *= 2\n        n -= p\n    return m * n if n else m\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return modp(n / 2, p) ** 2 % p\n    else:\n        return (modp(n - 1, p) ** 2 * 2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    num = 1\n    if n == 0:\n        return 1\n    elif n > 0:\n        for i in range(n):\n            num = (num * 2) % p\n        return num\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # return pow(2, n, p)\n    bits = []\n    while n > 0:\n        bits.append(n & 1)\n        n >>= 1\n    bits.reverse()\n    res = 1\n    for bit in bits:\n        res = (res * res) % p\n        if bit == 1:\n            res = (res * 2) % p\n    return res\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return n if n < p else (n % p + modp(n // p, p) * p) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 0:\n        n = -n\n        sign = -1\n    else:\n        sign = 1\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return (2 * modp(n // 2, p)) % p\n    else:\n        return (2 * modp(n // 2, p) + sign * modp(n // 2, p)) % p\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    vowels = 'aeiou'\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = 'aeiou'\n    text = text.replace('\\n', '')\n    return text.translate(str.maketrans('', '', vowels))\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return ''.join(v for v in text if v not in 'aeiouAEIOU')\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowels = 'aeiouAEIOU'\n    new_text = ''\n    for c in text:\n        if c.lower() not in vowels:\n            new_text += c\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    new_str = \"\"\n    for char in text:\n        if char in VOWELS:\n            pass\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    vowels = 'aeiou'\n    new_str = ''\n    for i in text:\n        if i not in vowels:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return re.sub('[aeiou]', '', text, flags = re.M)\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    no_vowels_text = ''\n    for letter in text:\n        if letter.lower() not in vowels:\n            no_vowels_text = no_vowels_text + letter\n    return no_vowels_text\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return text.translate(str.maketrans(\"\", \"\", \"aeiouAEIOU\"))\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowels = 'aeiou'\n    new_str = ''\n    for i in text:\n        if i.lower() in vowels:\n            continue\n        else:\n            new_str += i\n    return new_str\n    \ndef get_num_of_char(text, char):\n    \"\"\"\n    get_num_of_char is a function that returns number of times a character appear in string.\n    >>> get_num_of_char('', '')\n    0\n    >>> get_num_of_char('a', 'a')\n    1\n    >>> get_num_of_char('a', 'b')\n    0\n    >>> get_num_of_char('ab', 'a')\n    1\n    >>> get_num_of_char('aab', 'a')\n    2\n    >>> get_num_of_char('abab', 'a')\n    2\n    \"\"\"\n    count = 0\n    for i in text:\n        if i == char:\n            count += 1\n    return count\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return all(x < t for x in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for x in l:\n        if x >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return all(i < t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if l == []:\n        return True\n    else:\n        return below_threshold(l[1:],t) if l[0] > t else below_threshold(l[1:],t)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #return all(l[i] < t for i in range(len(l)))\n    for i in range(len(l)):\n        if l[i] >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return min(l) < t\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return all(l[i] <= t for i in range(len(l)))\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return all([i < t for i in l])\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert len(s0) > 0 and len(s1) > 0, 'Both strings must be longer than 0 characters.'\n    \n    def check_char(c0, c1):\n        return c0 == c1 or c0 == '?' or c1 == '?'\n    \n    def same_char_in_word(word):\n        for c in word:\n            if not check_char(c, c0) or not check_char(c, c1):\n                return False\n        return True\n    \n    return same_char_in_word(s0) and same_char_in_word(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s0_counter = Counter(s0)\n    s1_counter = Counter(s1)\n    if s0_counter!= s1_counter:\n        return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return all([s0[i] == s1[i] for i in range(len(s0))])\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # check if s0 is a substring of s1\n    # e.g. if s0 == 'cde' then s1[0,2,4] == 'cde'\n    for char in s0:\n        # s0 has the same characters as s1[0,2,4]\n        # e.g. s0 == 'cde' and s1 == 'cdecde'\n        if char not in s1 or s1.index(char)!= s1.index(char):\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    counter = dict()\n    for s in s0:\n        if s in counter:\n            counter[s] += 1\n        else:\n            counter[s] = 1\n    for s in s1:\n        if s in counter and counter[s] > 0:\n            counter[s] -= 1\n        else:\n            return False\n    for k, v in counter.items():\n        if v!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l0 = [letter for letter in s0]\n    l1 = [letter for letter in s1]\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(s0)!= len(s1):\n        return False\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(s0)!= len(s1):\n        return False\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for char in s0:\n        if char not in s1:\n            return False\n    return True\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n >= 0, 'n must be >= 0'\n    if n < 2:\n        return n\n    return fib(n-2) + fib(n-1)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n1, n2 = 1, 0\n    for _ in range(n):\n        n1, n2 = n2, n1 + n2\n    return n1\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # \"Stack\" is a Python list\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    brackets_stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            brackets_stack.append(bracket)\n        elif bracket == \">\":\n            if brackets_stack and brackets_stack[-1] == \"<\":\n                brackets_stack.pop()\n            else:\n                return False\n    return not brackets_stack\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    bracket_stack = []\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    open_b = [b for b in brackets if b == '<']\n    close_b = [b for b in brackets if b == '>']\n    if len(open_b)!= len(close_b):\n        return False\n    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n        elif b == '>':\n            if stack[-1] == '<':\n                stack.pop()\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    bracket_stack = []\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(brackets) == 1:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == '<':\n            bracket_stack.append('<')\n        else:\n            if not bracket_stack:\n                return False\n            bracket_stack.pop()\n    return not bracket_stack\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    bracket_stack = Stack()\n    for bracket in brackets:\n        if bracket == \">\":\n            if bracket_stack.is_empty():\n                return False\n            bracket_stack.pop()\n        elif bracket == \"<\":\n            bracket_stack.push(bracket)\n    if bracket_stack.is_empty():\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    left = 0\n    for c in brackets:\n        if c == \"<\":\n            left += 1\n        else:\n            left -= 1\n            if left < 0:\n                return False\n    return left == 0\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(l) < 2:\n        return True\n    if l[0] <= l[1]:\n        if l[1] <= l[2]:\n            return monotonic(l[3:])\n        return False\n    if l[0] >= l[1]:\n        if l[1] >= l[2]:\n            return monotonic(l[3:])\n        return False\n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(l) < 2:\n        return True\n    \n    current = l[0]\n    \n    if len(l) == 2:\n        if l[0] < l[1]:\n            return True\n        else:\n            return False\n    \n    for i in range(1, len(l) - 1):\n        if (l[i] > l[i + 1] and current < l[i]) or (l[i] < l[i + 1] and current > l[i]):\n            return False\n        else:\n            current = l[i]\n            continue\n    return True\n        \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # get the difference between consecutive values\n    # if negative, we're decreasing\n    # if positive, we're increasing\n    # if == 0, all values are the same\n    diffs = [l[i+1]-l[i] for i in range(len(l)-1)]\n    if not all(diffs):\n        return False\n    return all([diffs[i] == diffs[0] for i in range(len(diffs)-1)])\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(l) < 2:\n        return True\n    \n    previous = l[0]\n    for current in l[1:]:\n        if current >= previous:\n            previous = current\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return True\n    if len(l) == 2:\n        return l[0] < l[1]\n    return l[0] < l[1] or l[0] > l[1]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not l:\n        return True\n    elif len(l) == 1:\n        return True\n    elif len(l) == 2:\n        if l[0] < l[1]:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n                return True\n            elif l[i] > l[i + 1]:\n                return False\n            else:\n                continue"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(l) <= 2:\n        return True\n    return (l[1] - l[0]) * (l[2] - l[1]) < 0\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(l) <= 1:\n        return True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(l) <= 1:\n        return True\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(l) <= 1:\n        return True\n    if l[1] < l[0]:\n        return all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    elif l[1] > l[0]:\n        return all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    i = 0\n    j = 0\n    l1 = list(l1)\n    l2 = list(l2)\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            result.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return result\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    s = s1.intersection(s2)\n    sorted_s = sorted(list(s))\n    return sorted_s\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l1.sort()\n    l2.sort()\n    result = []\n    index_l1 = 0\n    index_l2 = 0\n    while (index_l1 < len(l1) and index_l2 < len(l2)):\n        if (l1[index_l1] == l2[index_l2]):\n            result.append(l1[index_l1])\n            index_l1 += 1\n            index_l2 += 1\n        elif (l1[index_l1] < l2[index_l2]):\n            index_l1 += 1\n        else:\n            index_l2 += 1\n    return result\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(set(l1).intersection(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    s3 = s1 & s2\n    return sorted(list(s3))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    common_elements = []\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(list(s1.intersection(s2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    common_lst = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_lst.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        else:\n            i += 1\n    return common_lst\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    common_elements = set(l1) & set(l2)\n    return sorted(common_elements)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n_div = n\n    max_prime_factor = None\n    while n_div > 0:\n        n_div = n_div // 2\n        if n % n_div == 0:\n            if is_prime(n_div):\n                max_prime_factor = n_div\n    return max_prime_factor\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(n - 1, 2, -1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n // i\n            i = 2\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # we will keep dividing n by 2 until n is divisible by 2\n    # we will keep dividing n by 3 until n is divisible by 3\n    # we will keep dividing n by 5 until n is divisible by 5\n    # we will keep dividing n by 7 until n is divisible by 7\n    # we will keep dividing n by 11 until n is divisible by 11\n    # we will keep dividing n by 13 until n is divisible by 13\n    # we will keep dividing n by 17 until n is divisible by 17\n    # we will keep dividing n by 19 until n is divisible by 19\n    # we will keep dividing n by 23 until n is divisible by 23\n    # we will keep dividing n by 29 until n is divisible by 29\n    # if n is now divisible by either of those numbers, it means n has been divided by the number it was previously divided by\n    # which means n has only been divided by its own prime factors. The largest prime factor is the last number that was not divided by another number.\n    # We will have only divided n by its own prime factors if the last number is 1\n    \n    while n % 2 == 0:\n        n /= 2\n    while n % 3 == 0:\n        n /= 3\n    while n % 5 == 0:\n        n /= 5\n    while n % 7 == 0:\n        n /= 7\n    while n % 11 == 0:\n        n /= 11\n    while n % 13 == 0:\n        n /= 13\n    while n % 17 == 0:\n        n /= 17\n    while n % 19 == 0:\n        n /= 19\n    while n % 23 == 0:\n        n /= 23\n    while n % 29 == 0:\n        n /= 29\n    return int(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, n+1, 2):\n        while n % i == 0:\n            n = n // i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \"\"\"\n    This function is a prime factor of n.\n    If n is divisible by a prime factor p, it has to be divisible by the same\n    prime factor of itself. Therefore it can be divided by (p**2) and p**3.\n    Thus, the largest prime factor of n can be either p, p**2 or p**3.\n    \"\"\"\n    max_prime = 0\n    \n    for i in range(2,n):\n        if n % i == 0:\n            max_prime = i\n    \n    return max_prime\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return n * (n + 1) // 2\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert isinstance(n, int), \"input must be an integer\"\n    assert n >= 0, \"input must be positive\"\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum([i for i in range(1, n + 1)])\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    total = 0\n    for num in range(1, n + 1):\n        total += num\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = 1\n    i = 2\n    while i <= n:\n        s += i\n        i += 1\n    return s\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return n * (n + 1) // 2\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers = range(1, n + 1)\n    total = 0\n    for number in numbers:\n        total = total + number\n    return total\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    brackets = list(brackets)\n    open_bracks = []\n    for b in brackets:\n        if b == '(':\n            open_bracks.append(b)\n        elif b == ')':\n            if len(open_bracks) == 0:\n                return False\n            else:\n                open_bracks.pop()\n    return len(open_bracks) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # using a stack to help us track open vs closed brackets\n    # O(n) time and space\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    stack = []\n    bracket_pairs = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    for char in brackets:\n        if char in bracket_pairs:\n            stack.append(char)\n        elif char in bracket_pairs.values():\n            if len(stack) == 0:\n                return False\n            if stack[-1]!= bracket_pairs[char]:\n                return False\n            else:\n                stack.pop()\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert brackets.count(\"(\") == brackets.count(\")\"), \"the number of opening and closing brackets must be the same\"\n    assert len(brackets) >= 2, \"the length of brackets must be at least 2\"\n    return brackets.count(\"(\") == brackets.count(\")\")\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            bracket_stack.append(bracket)\n        elif bracket == ')':\n            if len(bracket_stack) == 0:\n                return False\n            bracket_stack.pop()\n    if len(bracket_stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    brackets = list(brackets)\n    bracket_stack = []\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_stack.append(\"(\")\n        elif bracket == \")\":\n            if len(bracket_stack) == 0:\n                return False\n            bracket_stack.pop()\n    if len(bracket_stack) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lefts = [i for i, letter in enumerate(brackets) if letter == '(']\n    rights = [i for i, letter in enumerate(brackets) if letter == ')']\n    for left in lefts:\n        if left not in rights:\n            return False\n    return len(lefts) == len(rights)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pairs = {')': '(', '}': '{', ']': '['}\n    stack = []\n    for char in brackets:\n        if char in pairs:\n            if len(stack) == 0 or stack.pop()!= pairs[char]:\n                return False\n        else:\n            stack.append(char)\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # First, we'll build a list of indices where the brackets are open.\n    bracket_stack = []\n    for i, char in enumerate(brackets):\n        if char == '(':\n            bracket_stack.append(i)\n        elif char == ')':\n            if len(bracket_stack) == 0:\n                return False\n            else:\n                bracket_stack.pop()\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    d = []\n    for i in range(1, len(xs)):\n        d.append(xs[i] * i)\n    return d\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(xs) < 2:\n        return []\n    der = [0] * (len(xs) - 1)\n    for i in range(len(xs) - 1):\n        der[i] = xs[i + 1] * (i + 1)\n    return der\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not isinstance(xs, list):\n        return \"ERROR\"\n    if len(xs) == 0:\n        return \"ERROR\"\n    if len(xs) == 1:\n        return \"ERROR\"\n    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    d = [0] * len(xs)\n    for i in range(len(xs) - 1):\n        d[i + 1] = d[i] + xs[i + 1] * (i + 1)\n    return d\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    d = []\n    for x in range(1, len(xs)):\n        d.append(x * xs[x])\n    return d\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    d_xs = []\n    for i in range(1, len(xs)):\n        d_xs.append(i*xs[i])\n    return d_xs\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [x * coefficient for x, coefficient in enumerate(xs[1:], 1)][::-1]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert type(xs) is list\n    assert type(xs[0]) is int\n    assert len(xs) > 0\n    assert len(xs) == len(set(xs))\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i]*i)\n    return result\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    d_xs = []\n    for i in range(len(xs) - 1):\n        d_xs.append(xs[i + 1] * (i + 1))\n    return d_xs\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n in [0,1]:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert n >= 0, \"The input number must be greater than or equal to 0.\"\n    assert isinstance(n, int), \"The input type must be an integer.\"\n    \n    def fibfib_rec(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return fibfib_rec(n-1) + fibfib_rec(n-2) + fibfib_rec(n-3)\n    \n    return fibfib_rec(n)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # we'll do a for loop and take the current sum with the last two numbers\n    # the for loop will iterate and get the sum of the current number and the two numbers before it\n    # so we will have a sequence that starts at 0, 0, 1, 1, 2, 3, 5, 8, 13, 21...\n    # it's not like the fibonacci sequence that only has 2 numbers, there's more than 2\n    # so we'll have to use a while loop\n    # the while loop will iterate until the current number == n\n    # so the if statement is going to check if the current number == n\n    # if the current number is equal to n, then we're going to return the value of the current number\n    # so it will return the current number\n    # otherwise it will return the sum of the current number and the 2 numbers before it\n    # so in the first iteration we will get 0 + 0 = 0\n    # in the second iteration we will get 0 + 1 = 1\n    # in the third iteration we will get 1 + 1 = 2\n    # in the fourth iteration we will get 1 + 2 = 3\n    # in the fifth iteration we will get 2 + 3 = 5\n    # in the sixth iteration we will get 3 + 5 = 8\n    # in the seventh iteration we will get 5 + 8 = 13\n    # in the eighth iteration we will get 8 + 13 = 21\n    # in the ninth iteration we will get 13 + 21 = 34\n    # in the tenth iteration we will get 21 + 34 = 55\n    # so the final result would be 55\n    # when n == 8, it will return 24\n    a, b = 0, 1\n    while a < n:\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert n > 0\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return fib(n)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 0:\n        return 0\n    if n <= 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    vowel_set = set('aeiou')\n    s = s.lower()\n    if not s.isalpha():\n        raise ValueError(\"Input should be a string representing a word\")\n    vowels = 0\n    for ch in s:\n        if ch in vowel_set:\n            vowels += 1\n    if 'y' in s[-1:]:\n        vowels -= 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_count = 0\n    \n    for i in s:\n        if i in vowels:\n            vowels_count += 1\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for ch in s:\n        if ch.lower() in \"aeiouy\":\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    num_vowels = 0\n    for char in s:\n        if char in VOWELS:\n            num_vowels += 1\n    return num_vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    vowels = set(\"aeiou\")\n    cnt = 0\n    for letter in s:\n        if letter.lower() in vowels:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    vowels = 0\n    for character in s:\n        if character == 'a' or character == 'e' or character == 'i' or character == 'o' or character == 'u':\n            vowels += 1\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # use a variable to keep track of vowels in the word\n    vowel_counter = 0\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = str(x)[-shift:] + str(x)[:-shift]\n    return s if shift <= len(str(x)) else str(x)[::-1]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (str(x)[-shift:] + str(x)[:-shift]) if shift < len(str(x)) else str(x)[-shift:][::-1]\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x >> shift | x << (shift * 2)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return str(x)[-shift:]+str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    digit = 10 ** (shift - 1)\n    return (int(x / digit) % 10) * digit + int(x / 10 ** shift)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # x = str(x)\n    s = x[shift:] + x[:shift]\n    # print(s)\n    return s\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s = str(x)[-shift:]\n    return s + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return str(x)[-shift % len(str(x)):] + str(x)[:-shift % len(str(x))]\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum([ord(char) for char in s if char.isupper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(ord(x) for x in s if x.isupper())\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = 0\n    for i in s:\n        if i.isalpha():\n            result += ord(i)\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum = 0\n    for c in s:\n        if (ord(c) >= 65 and ord(c) <= 90):\n            sum = sum + ord(c)\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    upper_sum = 0\n    for ch in s:\n        if ch.isupper():\n            upper_sum += ord(ch)\n    return upper_sum\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # cast string to list\n    # iterate through the list\n        # cast each element in the list to int and sum them\n    # return the sum\n    \n    sum = 0\n    for i in range(len(s)):\n        sum += int(s[i])\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    upper = 0\n    for char in s:\n        if char.isupper():\n            upper += ord(char)\n    return upper\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #first of all we need to get the string to a list of ints and not a list of strings\n    l = s.split()\n    #setting our variables\n    apples = 0\n    oranges = 0\n    mangos = 0\n    for i in l:\n        if 'apples' in i:\n            apples = int(i[0])\n        elif 'oranges' in i:\n            oranges = int(i[0])\n        elif'mangos' in i:\n            mangos = int(i[0])\n    return apples - oranges - mangos\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def get_fruit_count(fruit_dict,count):\n        return count - fruit_dict.get(count,0)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return n-s.split(\" \")[0] - s.split(\" \")[1]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    fruit_count = 0\n    if \"apples\" in s:\n        fruit_count += s.split(\" \")[0]\n    if \"oranges\" in s:\n        fruit_count += s.split(\" \")[1]\n    if \"mango\" in s:\n        fruit_count += s.split(\" \")[2]\n    if fruit_count > n:\n        return n-fruit_count\n    else:\n        return 0\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # your code here\n    n,m = s.split(' and ')\n    n,m = int(n),int(m)\n    return n-m\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    fruits = s.split()\n    fruits_count = {}\n    fruits_count[\"apples\"] = fruits[0]\n    fruits_count[\"oranges\"] = fruits[1]\n    fruits_count[\"mangoes\"] = 0\n    for key, value in fruits_count.items():\n        fruits_count[key] = int(value)\n    return fruits_count[\"mangoes\"]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # first we make the string into a list\n    s = s.split(\" \")\n    # then we split this list into two numbers\n    # the first one is the total number of apples\n    # the second one is the total number of oranges\n    # since they will always be given in this way\n    # we make two variables to keep track of them\n    apples = int(s[0])\n    oranges = int(s[2])\n    # we then check if we have more than 0 apples\n    if apples > 0:\n        # then we subtract apples from oranges\n        oranges = oranges - apples\n        # if so we check if we have more than 0 oranges\n        if oranges > 0:\n            # if so we return the number of the mango fruits\n            return oranges\n        else:\n            # if not\n            # we return 0 because there are not any mango fruits\n            return 0\n    else:\n        # if not we return 0 because there are no mango fruits\n        return 0\n    \nif __name__ == '__main__':\n    print(fruit_distribution(\"5 apples and 6 oranges\", 19))\n    print(fruit_distribution(\"0 apples and 1 oranges\",3))\n    print(fruit_distribution(\"2 apples and 3 oranges\", 100))\n    print(fruit_distribution(\"100 apples and 1 oranges\",120))\n    print(fruit_distribution(\"100 apples and 1 oranges\",100000000)"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    apple = 0\n    orange = 0\n    mango = 0\n    for char in s:\n        if char == 'a':\n            apple = apple + 1\n        elif char == 'o':\n            orange = orange + 1\n        elif char =='m':\n            mango = mango + 1\n    return n - (apple + orange) - mango\n    \n    \nif __name__ == \"__main__\":\n    s = \"5 apples and 6 oranges\"\n    n = 19\n    print(fruit_distribution(s,n))\n    "
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return s.count(\"m\") - n // 2\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    apples, oranges, mangoes = map(int, s.split(\" \"))\n    return n - (apples + oranges) - mangoes\n    "
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    #O(n)\n    if not arr: return []\n    arr = sorted(arr, key=lambda x: x if x % 2 == 0 else 100)\n    return [arr[0], arr.index(arr[0])]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if arr:\n        min_value = min(arr, key=lambda x: (x%2, x))\n        return min_value if min_value%2 == 0 else [min_value, arr.index(min_value)]\n    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # # [TODO]\n    # arr = [2,0,3,0,4,2]\n    # print(\"arr:\", arr)\n    # arr = sorted(arr)\n    # print(\"sorted:\", arr)\n    # # find the min even value\n    # even_values = []\n    # for i in range(len(arr)):\n    #     if arr[i]%2 == 0:\n    #         even_values.append(arr[i])\n    # print(\"even_values:\", even_values)\n    # # sort by min even value\n    # arr.sort(key=lambda x: even_values[0])\n    # print(\"arr:\", arr)\n    # # find min index\n    # min_index = arr.index(even_values[0])\n    # return [even_values[0], min_index]\n    # # [TODO]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not arr:\n        return []\n    \n    return [min(arr, key=lambda x: x%2 == 0), arr.index(min(arr, key=lambda x: x%2 == 0))]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not arr:\n        return []\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    if min_val % 2 == 0:\n        return [min_val, min_idx]\n    else:\n        return [arr[min_idx-1], min_idx-1]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    min_even_value = float('inf')\n    min_even_index = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < min_even_value:\n            min_even_value = value\n            min_even_index = index\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    evens = [n for n in arr if n % 2 == 0]\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst.sort()\n    max_elem = max(lst)\n    for el in lst:\n        if lst.count(el) >= el:\n            return el\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    greatest = 0\n    frequency = 0\n    for item in lst:\n        if item > frequency:\n            greatest = item\n    return greatest\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in lst:\n        if i >= 0:\n            if lst.count(i) >= i:\n                return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    greatest = lst[0]\n    for num in lst:\n        if num > greatest:\n            greatest = num\n    for num in lst:\n        if num == greatest:\n            greatest += 1\n    return greatest\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if lst == None or len(lst) == 0:\n        return -1\n    \n    count = dict()\n    result = -1\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n        \n        if i > result:\n            result = i\n    \n    for i in count:\n        if count[i] >= i:\n            return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    max_lst = []\n    for i in lst:\n        if lst.count(i) >= i:\n            max_lst.append(i)\n    max_lst.sort(reverse=True)\n    if max_lst == []:\n        return -1\n    return max_lst[0]\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    greatest = -1\n    greatest_freq = -1\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return list(sorted(lst, key=abs, reverse=True)) + [min(lst, key=abs)]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if lst == []:\n        return []\n    # else:\n    #     tmp = lst.copy()\n    #     tmp.sort()\n    #     tmp.reverse()\n    #     return tmp\n    tmp = [min(lst)]\n    lst.remove(min(lst))\n    tmp.append(max(lst))\n    lst.remove(max(lst))\n    tmp.append(min(lst))\n    lst.remove(min(lst))\n    tmp.append(max(lst))\n    lst.remove(max(lst))\n    tmp.append(min(lst))\n    lst.remove(min(lst))\n    tmp.append(max(lst))\n    lst.remove(max(lst))\n    return tmp\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    strange_lst = []\n    new_lst = lst[:]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # list will be empty by the time this function is called\n    # so we just return empty list\n    if not lst:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return []\n    sorted_list = []\n    while len(lst) > 0:\n        minimum = min(lst)\n        index = lst.index(minimum)\n        lst.pop(index)\n        sorted_list.append(minimum)\n        minimum = min(lst)\n        index = lst.index(minimum)\n        lst.pop(index)\n        sorted_list.append(minimum)\n    return sorted_list\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    #create list of lists that hold the minimum value, the maximum value, and the remaining values.\n    #This is done to keep track of the order.\n    min_list = []\n    max_list = []\n    remaining_list = []\n    for i in range(len(lst)):\n        min_list.append(lst[i])\n    \n    #iterate through the remaining values.\n    #When the min value is reached, add it to max_list and the remaining_list, and then remove it from the min_list.\n    #Then add the max value and min value, and then remove the max value from the remaining_list.\n    #When the min value is removed from min_list, remove the min value from the remaining_list.\n    for i in range(len(lst)):\n        if min_list[0] == lst[i]:\n            max_list.append(min_list[0])\n            remaining_list.append(lst[i])\n            min_list.remove(min_list[0])\n        elif min_list[0] > lst[i]:\n            max_list.append(min_list[0])\n            remaining_list.append(lst[i])\n            min_list.remove(min_list[0])\n        else:\n            remaining_list.append(lst[i])\n            min_list.remove(min_list[0])\n            \n    #When all the values have been iterated through, add the remaining values to max_list.\n    #Then add the remaining values to remaining_list.\n    #Then add the max values to max_list and remaining_list.\n    for i in range(len(remaining_list)):\n        max_list.append(remaining_list[i])\n        remaining_list.remove(remaining_list[i])\n    \n    for i in range(len(max_list)):\n        remaining_list.append(max_list[i])\n        max_list.remove(max_list[i])\n    \n    #return the remaining_list, which is in the correct order.\n    return remaining_list\n    \n    \n    \n    \n    \ndef even_or_odd(num):\n    '''\n    Given a number, return 'even' if it is even, or 'odd' if it is odd.\n    '''\n    \n    #If the number is divisible by 2, then the number is even.\n    #Otherwise, it is odd.\n    if num % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n        \n        \n        \n        \ndef han_game_odds(num):\n    '''\n    Given a number, return True if the number is odd, or False if the number is even.\n    '''\n    \n    #If the number is divisible by 2, then the number is even.\n    #Otherwise, it is odd.\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n        \n        \n        \n        \ndef missing_char(str, n):\n    '''\n    Given a string and a number 'n', return a new string that is n copies of the first character of the original string.\n    '''\n    \n    #create the variable to hold the first character of the string.\n    first_char = str[0:1]\n    \n    #create the variable to hold the new string.\n    new_string = ''\n    \n    #iterate through the given number of times.\n    for i in range(n):\n        #add the first character to the new string.\n        new_string += first_char\n    \n    #return the new string.\n    return new_string\n    \n    \n    \n    \ndef odd_values_list(lst):\n    '''\n    Given list of integers, return list with all even elements removed.\n    '''\n    \n    #create variable to hold list with all even elements removed.\n    new_lst = []\n    \n    #iterate through the given list.\n    for i in range(len(lst)):\n        #if the number is even, add it to the new list.\n        if lst[i] % 2 == 0:\n            new_lst.append(lst[i])\n    \n    #return the new list.\n    return new"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l = len(lst)\n    if l < 1:\n        return []\n    elif l == 1:\n        return [lst[0]]\n    else:\n        res = [min(lst)]\n        lst.remove(min(lst))\n        res.append(max(lst))\n        lst.remove(max(lst))\n        res.append(min(lst))\n        lst.remove(min(lst))\n        res.append(max(lst))\n        lst.remove(max(lst))\n        res.append(min(lst))\n        lst.remove(min(lst))\n        return res\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def strange_sort(lst, step=0):\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return [lst[0]]\n        if step == 0:\n            step = len(lst) - 1\n        elif step < 0:\n            step *= -1\n        return strange_sort(lst[step:], step - 1) + strange_sort(lst[:step], step)\n    return strange_sort(lst"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Calculate the area of the triangle using Heron's formula\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (max(a, b, c) - (a + b + c - max(a, b, c))) / 2 if a + b > c else -1"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    else:\n        return -1\n        \n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Complete the function here\n    return round((a+b+c)*0.5, 2) if abs(b-c)<a<b+c and abs(a-c)<b<a+c and abs(a-b)<c<a+b else -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if ((a + b) > c) and ((a + c) > b) and ((b + c) > a):\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 0\n    \ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Example:\n    triangle_perimeter(3, 4, 5) == 12.00\n    triangle_perimeter(1, 2, 10) == -1\n    '''\n    return 0\n    \ndef triangle_sine(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the sine of the\n    angle formed by the three sides in degrees rounded to 2 decimal points. \n    Otherwise return -1\n    Example:\n    triangle_sine(3, 4, 5) == 0.86\n    triangle_sine(1, 2, 10) == -1\n    '''\n    return 0\n    \ndef triangle_cosine(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the cosine of the\n    angle formed by the three sides in degrees rounded to 2 decimal points. \n    Otherwise return -1\n    Example:\n    triangle_cosine(3, 4, 5) == 0.54\n    triangle_cosine(1, 2, 10) == -1\n    '''\n    return 0\n    \ndef triangle_tan(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the tangent of the\n    angle formed by the three sides in degrees rounded to 2 decimal points. \n    Otherwise return -1\n    Example:\n    triangle_tan(3, 4, 5) == 0.76\n    triangle_tan(1, 2, 10) == -1\n    '''\n    return 0\n    \ndef triangle_cotan(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the cotangent of the\n    angle formed by the three sides in degrees rounded to 2 decimal points. \n    Otherwise return -1\n    Example:\n    triangle_cotan(3, 4, 5) == 1.96\n    triangle_cotan(1, 2, 10) == -1\n    '''\n    return 0\n    \ndef triangle_log(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the logarithm of \n    the third side of the triangle in base 10 rounded to 2 decimal points if the \n    three sides form a valid triangle. Otherwise return -1\n    Example:\n    triangle_log(3, 4, 5) == 2.00\n    triangle_log(1, 2, 10) == -1\n    '''\n    return 0\n    \ndef triangle_inverse_log(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the logarithm of \n    the third side of the triangle in base 10 rounded to 2 decimal points if the \n    three sides form a valid triangle. Otherwise return -1\n    Example:\n    triangle_inverse_log(3, 4, 5) == 0.81\n    triangle_inverse_log(1, 2, 10) == -1\n    '''\n    return 0\n    \ndef triangle_e(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the natural \n    exponent of the sum of the three sides in base 10 rounded to 2 decimal points. \n    Otherwise return -1\n    Example:\n    triangle_e(3, 4, 5) == 9.00\n    triangle_e(1, 2, 10) == -1\n    '''\n    return 0\n    \ndef triangle_inverse_e(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the natural \n    exponent of the sum of the three sides in base 10 rounded to 2 decimal points. \n    Otherwise return -1\n    Example:\n    triangle_inverse_e(3, 4, 5) == 0.75\n    triangle_inverse_e(1, 2, 10) == -1\n    '''\n    return 0\n    \ndef triangle_hypotenuse(a, b, c):"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # A valid triangle has three sides whose lengths sum to a greater than the \n    # longest of the three sides\n    sum_of_sides = a + b + c\n    return round(sum_of_sides*max(a,b,c)/2,2) if sum_of_sides > max(a,b,c) else -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    q_max = 0\n    q_sum = 0\n    for i in q:\n        q_sum += i\n        q_max += 1\n    \n    if q_sum <= w and len(q) % 2 == 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if w < sum(q) and is_balanced(q):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    max_weight = w\n    list_length = len(q)\n    new_list = q[::-1]\n    sum_weight = sum(q)\n    if list_length == 1 and new_list == q:\n        if sum_weight <= max_weight:\n            return True\n    elif list_length == 1 and new_list!= q:\n        return False\n    elif sum_weight <= max_weight:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum_list = sum(q)\n    if sum_list <= w and q == q[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return True if q == q[::-1] and sum(q)<=w else False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def is_palindromic(l):\n        n = len(l)\n        if n % 2 == 0:\n            left = l[:n//2]\n            right = l[n//2:]\n        else:\n            left = l[:n//2]\n            right = l[n//2+1:]\n        return left == right[::-1]\n    return q == q[::-1] and sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum(q) <= w and is_balanced(q)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    \n    if type(q) == type(list()) and q and type(q) == type([]):\n        if len(q) == 1 and q[0] < w:\n            return True\n        elif len(q) == 1 and q[0] > w:\n            return False\n        else:\n            s = str(q)\n            if s == s[::-1] and sum(q) <= w:\n                return True\n            else:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # code\n    return True if sum(q)<=w and q==q[::-1] else False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not arr:\n        return 0\n    \n    # Get the minimum number of changes required to make the array palindromic\n    # Return the minimum number of changes\n    \n    return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr:\n        return 0\n    elif len(arr) == 1:\n        return 0\n    else:\n        count = 0\n        for i in range(len(arr)):\n            if arr[i]!= arr[(len(arr)) - 1 - i]:\n                count += 1\n                print(count)\n        return count\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # If the array is already a palindrome, no changes needed.\n    if is_palindrome(arr):\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Number of elements that need to be changed if arr is a palindromic array\n    count = 0\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert len(arr) > 0\n    return len(arr) - _solution(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def is_palindrome(array):\n        return array == array[::-1]\n    \n    def get_base(array):\n        return (\n            len(array),\n            0 if is_palindrome(array) else 1\n        )\n    \n    def get_diff(arr1, arr2):\n        return (\n            len(arr1) - len(arr2),\n            0 if is_palindrome(arr2) else 1\n        )\n    \n    def get_changes(array, is_base_palindrome):\n        count = 0\n        while not is_base_palindrome:\n            count += 1\n            changed = False\n            for i in range(len(array) // 2):\n                diff = get_diff(array, array[i:])\n                if diff[0] == 1:\n                    array[i], array[i+1] = array[i+1], array[i]\n                    changed = True\n                    break\n            if not changed:\n                break\n        return count\n    \n    return min(get_base(arr), get_changes(arr, is_palindrome(arr)))\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    a = set(arr)\n    b = set(reverse(arr))\n    for x in a:\n        if x not in b:\n            count += 1\n    for y in b:\n        if y not in a:\n            count += 1\n    return count\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    palindrome_indices = []\n    for i in range(len(arr)):\n        if arr[i] == arr[len(arr)-1-i]:\n            palindrome_indices.append(i)\n    for index in palindrome_indices:\n        arr[index] = arr[len(arr)-1-index]\n    return len(palindrome_indices)\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst1_len = []\n    lst2_len = []\n    for i in lst1:\n        lst1_len.append(len(i))\n    for i in lst2:\n        lst2_len.append(len(i))\n    if len(lst1_len) < len(lst2_len):\n        for i in lst1_len:\n            if i in lst2_len:\n                lst2_len.remove(i)\n        return lst1\n    elif len(lst1_len) > len(lst2_len):\n        for i in lst2_len:\n            if i in lst1_len:\n                lst1_len.remove(i)\n        return lst2\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [x for x in lst1 if len(x) < len(lst2) or len(lst1) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    return sorted(lst1, key=len)[:len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return [i for i in lst1 if len(i) < len(lst2)]\n    else:\n        return [i for i in lst2 if len(i) < len(lst1)]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if lst1 == lst2:\n        return lst1\n    else:\n        new_list = []\n        for num in lst1:\n            if len(num) < len(lst2[0]):\n                new_list.append(num)\n        for num in lst2:\n            if len(num) < len(lst1[0]):\n                new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # I used a dictionary for the function, so I'm not sure if this is the best\n    # way to do this question. I looked up the solutions and I don't really \n    # understand how to do it as a list comprehension. I used a for loop instead.\n    # This is my implementation.\n    d = {}\n    if len(lst1) == len(lst2):\n        return(lst1)\n    elif len(lst1) < len(lst2):\n        for word in lst2:\n            if len(word) not in d:\n                d[len(word)] = []\n            d[len(word)].append(word)\n        for length in d:\n            if length > len(lst1):\n                for x in d[length]:\n                    lst1.append(x)\n    return(lst1)\n    # my solution\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    t1 = set(lst1)\n    t2 = set(lst2)\n    t3 = t1.intersection(t2)\n    return list(t3)\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(2, a):\n        if is_prime(i):\n            if a % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            a = a / i\n            if a == 1:\n                return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(2, a):\n        if a % i == 0 and is_prime(i) == True:\n            for j in range(2, a):\n                if a % j == 0 and is_prime(j) == True:\n                    for k in range(2, a):\n                        if a % k == 0 and is_prime(k) == True:\n                            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    p = 2\n    while p <= a/2:\n        if a % p!= 0:\n            p += 1\n        else:\n            a /= p\n            p = 2\n    return a == 1\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    num_factors = []\n    for i in range(1, a + 1):\n        if is_prime(i) == True:\n            num_factors.append(i)\n    if len(num_factors) >= 3:\n        return True\n    else:\n        return False\n    \ndef is_prime(a):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (a) is greater then 1. \n    Example:\n    is_prime(100) == False\n    is_prime(5) == True\n    \"\"\"\n    if a < 2:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n    \ndef my_int(number):\n    \"\"\"Write a function that casts a string to int or 0 if it cannot cast it.\n    Example:\n    my_int(\"40\") == 40\n    my_int(\"hello\") == 0\n    \"\"\"\n    if isinstance(number, int) == True:\n        return number\n    else:\n        try:\n            return int(number)\n        except:\n            return 0\n    \ndef is_perfect_number(number):\n    \"\"\"Write a function that returns true if the given number is a perfect number and false otherwise.\n    Knowing that (a) is less then 10,000. \n    Example:\n    is_perfect_number(6) == True\n    6 = 1 * 2 * 3\n    \"\"\"\n    sum_divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors == number\n    \ndef is_palindrome(number):\n    \"\"\"Write a function that returns true if the given number is a palindrome (reads the same forward and backward) and false otherwise.\n    Knowing that (a) is less then 10,000. \n    Example:\n    is_palindrome(1221) == True\n    is_palindrome(42) == False\n    \"\"\"\n    return str(number) == str(number)[::-1]\n    \ndef is_right_angled_triangle(a, b, c):\n    \"\"\"Write a function that returns true if the given three lengths (a, b, c) form a right-angled triangle and false otherwise.\n    Knowing that (a) is less then 10,000. \n    Example:\n    is_right_angled_triangle(3, 4, 5) == True\n    is_right_angled_triangle(3, 4, 6) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # To make sure that the number is less then 100\n    if a > 100:\n        return False\n    # To make sure that the number is divisible by 3\n    if a % 3!= 0:\n        return False\n    # To check that the number is divisible by one prime number\n    elif not is_prime(a):\n        return False\n    # To check that the number is divisible by another prime number\n    elif not is_prime(a//3):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in range(2, 7):\n        if a % i!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = False\n    \n    for i in range(1, a):\n        if is_prime(i) and is_prime(a/i):\n            result = True\n            break\n    \n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # check if prime\n    def is_prime(n):\n        if n <= 3:\n            return n > 1\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = 0\n    while i < len(primitive_primes):\n        if a % primitive_primes[i] == 0:\n            j = 0\n            while j < len(primitive_primes):\n                if a % primitive_primes[j] == 0:\n                    return False\n                j += 1\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return int(x**(1/n))==x**(1/n)\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x % n == 0 and n**int(x/n) == x\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    x = int(x)\n    n = int(n)\n    if x**(1/n) == x:\n        return True\n    return False"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x % n == 0 and x!= n\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if x == n or x == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x % n == 0\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if x == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x == n ** int(n)\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x == n**int(n) if n > 1 else False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return a**(1/3)%1 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass # your code here\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a**(1/3) % 1 == 0\n    "
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n=0\n    while a>=0:\n        if a==0:\n            return True\n        n+=1\n        a=a**(1/3)\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return True if int(a ** (1 / 3)) ** 3 == a else False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #your code here\n    return a**(1./3.) % 1 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a = int(a)\n    return a > 0 and a**(1/3)%1==0\n    \n    \ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(3) ==> True\n    isprime(4) ==> False\n    isprime(27) ==> False\n    isprime(29) ==> True\n    '''\n    a = int(a)\n    if a == 1:\n        return False\n    for x in range(2,a):\n        if a%x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a < 0:\n        return True\n    if (a ** (1 / 3) % 1)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (a**(1/3) % 1 == 0)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    elif a % pow(10, int(math.log10(a))) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # your code here\n    num = num.upper()\n    num = list(num)\n    return num.count(\"2\") + num.count(\"3\") + num.count(\"5\") + num.count(\"7\") + num.count(\"B\") + num.count(\"D\")\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # num = \"AB\"\n    # num = \"1077E\"\n    # num = \"ABED1A33\"\n    # num = \"123456789ABCDEF0\"\n    # num = \"2020\"\n    # num = \"5D6B1EADB4EBEF5A6\"\n    num = num.upper()\n    count = 0\n    for i in range(len(num)):\n        if int(num[i]) in (2,3,5,7):\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    dict_ = {'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, 'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0}\n    for i in num:\n        if i in dict_:\n            dict_[i] += 1\n    \n    return dict_['2'] + dict_['3'] + dict_['5'] + dict_['7'] + dict_['B'] + dict_['D']\n    \n    \nprint(hex_key(\"2020\"))\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num = num.upper()\n    res = 0\n    for i in \"ABCDEF\":\n        if i in num:\n            res += num.count(i)\n    return res\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    res = [i for i in range(len(num)) if num[i] in ('2','3','5','7')]\n    print(res)\n    return len(res)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    if num == \"\":\n        return count\n    for digit in num:\n        if digit == \"A\":\n            count += 1\n        elif digit == \"B\":\n            count += 1\n        elif digit == \"C\":\n            count += 1\n        elif digit == \"D\":\n            count += 1\n        elif digit == \"E\":\n            count += 1\n        elif digit == \"F\":\n            count += 1\n        elif digit == \"0\":\n            count += 1\n        elif int(digit) % 2 == 0 or int(digit) % 3 == 0 or int(digit) % 5 == 0:\n            return count\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    d = {'2':2, '3':3, '5':5, '7':7, 'A':11, 'B':13, 'C':17, 'D':19, 'E':23, 'F':29}\n    count = 0\n    for i in num:\n        if d[i]:\n            count += 1\n    return count\n    \nif __name__ == '__main__':\n    print(hex_key('2020'))\n    print(hex_key('AB'))\n    print(hex_key('1077E'))\n    print(hex_key('123456789ABCDEF0'))\n    print(hex_key('202012'))"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    num = num.upper()\n    num = list(num)\n    print(num)\n    prime_digits = [2,3,5,7]\n    count = 0\n    for i in num:\n        if i in prime_digits:\n            count+=1\n    return count\n    \n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # This is really cool:\n    # https://stackoverflow.com/questions/2084508/is-there-a-math-ncr-function-in-python\n    return len([int(x) for x in num if int(x) in [2,3,5,7]])\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # TODO: Your solution here\n    result = 0\n    for char in num:\n        result += int(char in 'BDF')\n    return result\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return f\"db{decimal:b}db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return 'db' + bin(decimal)[2:] + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 'db' + bin(decimal)[2:].zfill(16) + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"db\" + bin(decimal)[2:].zfill(8) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 'db'+('0'*bin(decimal).count('1')+'db').lstrip('0')\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"db\" + bin(decimal)[2:].zfill(5) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 'db' + bin(decimal)[2:] + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    binary_number = \"\"\n    # <YOUR CODE GOES HERE>\n    binary_number += \"db\"\n    for i in range(0,decimal):\n        if i == 0:\n            binary_number += \"1\"\n            decimal = decimal - 1\n        else:\n            binary_number += str(decimal % 2)\n            decimal = decimal // 2\n    binary_number += \"db\"\n    return binary_number\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    binary = bin(decimal)\n    binary = binary[2:]\n    return \"db\" + binary + \"db\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #SOLUTION\n    # convert s to a list\n    # create a set of the unique letters from s\n    # return True if len(s) >= 3 and set(s) == len(set(s))\n    # return False otherwise\n    return True if len(s) >= 3 and len(set(s)) == len(s) else False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Base Case\n    if len(s) < 3:\n        return False\n    # Recursive Case\n    s_map = {}\n    for char in s:\n        if char in s_map:\n            s_map[char] += 1\n        else:\n            s_map[char] = 1\n    # Check for duplicates\n    for char in s_map:\n        if s_map[char] == 2:\n            return True\n    # Check for odd number of letters\n    if len(s_map) % 2!= 0:\n        return False\n    # Check for substrings of length 3\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2]:\n            return True\n    return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(s) < 3: return False\n    i = 0\n    while i < len(s) - 2:\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = len(s)\n    if n < 3:\n        return False\n    lst = set()\n    while n > 2:\n        lst.add(s[0])\n        lst.add(s[1])\n        lst.add(s[2])\n        s = s[3:]\n        n -= 3\n    lst.add(s[0])\n    lst.add(s[1])\n    lst.add(s[2])\n    if len(lst) == 9:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # i have no idea how to do this without a counter but i already did it once so...\n    return len(s) >= 3 and all([s[i]!= s[i + 1] and s[i + 1]!= s[i + 2] and s[i]!= s[i + 2] for i in range(len(s) - 2)])\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # Get the length of the string\n    # Create a dictionary which holds the letters that appear in the string\n    # Check if the number of distinct letters is equal to 1\n    # Check if the string length is greater than or equal to 3\n    # Return True if it passes all of the above tests\n    # Return False otherwise\n    \n    if len(s) < 3:\n        return False\n    \n    # Create a dictionary of letters and how many times they appear in the string\n    letters = {}\n    for i in range(len(s)):\n        letter = s[i]\n        if letter in letters:\n            letters[letter] += 1\n        else:\n            letters[letter] = 1\n    \n    # Check if the number of distinct letters is equal to 1\n    if len(letters) == 1:\n        return True\n    \n    # If it is not, then get the number of letters that only appear once\n    # If that number is greater than or equal to 3, then return False\n    count = 0\n    for letter in letters:\n        if letters[letter] == 1:\n            count += 1\n    if count >= 3:\n        return False\n    \n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len(set(s)) >= 3 and is_happy_sub(s)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(s) < 3:\n        return False\n    else:\n        if len(set(s)) == len(s):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(s) < 3:\n        return False\n    s_set = set(s)\n    if len(s_set) < 3:\n        return False\n    return is_happy_helper(s)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # TODO\n    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    grades = grades[:]\n    grade_list = []\n    for i in grades:\n        if i > 4.0:\n            grade_list.append('A+')\n        elif i > 3.7:\n            grade_list.append('A')\n        elif i > 3.3:\n            grade_list.append('A-')\n        elif i > 3.0:\n            grade_list.append('B+')\n        elif i > 2.7:\n            grade_list.append('B')\n        elif i > 2.3:\n            grade_list.append('B-')\n        elif i > 2.0:\n            grade_list.append('C+')\n        elif i > 1.7:\n            grade_list.append('C')\n        elif i > 1.3:\n            grade_list.append('C-')\n        elif i > 1.0:\n            grade_list.append('D+')\n        elif i > 0.7:\n            grade_list.append('D')\n        elif i > 0:\n            grade_list.append('D-')\n        else:\n            grade_list.append('F')\n    return grade_list\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [\n        'A+' if x >= 4 else\n        'A' if x >= 3.7 else\n        'A-' if x >= 3.3 else\n        'B+' if x >= 3 else\n        'B' if x >= 2.7 else\n        'B-' if x >= 2.3 else\n        'C+' if x >= 2 else\n        'C' if x >= 1.7 else\n        'C-' if x >= 1.3 else\n        'D+' if x >= 1 else\n        'D' if x >= 0.7 else\n        'D-' if x >= 0 else\n        'F' if x >= 0 else\n    ]\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    grades_letter = []\n    for grade in grades:\n        if grade == 4:\n            grades_letter.append('A+')\n        elif grade == 3.5:\n            grades_letter.append('A')\n        elif grade == 3:\n            grades_letter.append('A-')\n        elif grade == 2.5:\n            grades_letter.append('B')\n        elif grade == 2:\n            grades_letter.append('B-')\n        elif grade == 1.5:\n            grades_letter.append('C')\n        elif grade == 1:\n            grades_letter.append('C-')\n        elif grade == 0.7:\n            grades_letter.append('D')\n        elif grade == 0:\n            grades_letter.append('D-')\n        else:\n            grades_letter.append('E')\n    return grades_letter\n    \ndef geometric_mean(grades):\n    \"\"\"\n    Write a function to find the geometric mean of a list of grades.\n    In case of invalid input, the function should return 0.\n    Example:\n    geometric_mean([1.0, 2.0, 3.0]) ==> 1.764705882352941\n    \"\"\"\n    try:\n        return gmean(grades)\n    except:\n        return 0\ndef arithmetic_mean(grades):\n    \"\"\"\n    Write a function to find the arithmetic mean of a list of grades.\n    In case of invalid input, the function should return 0.\n    Example:\n    geometric_mean([1.0, 2.0, 3.0]) ==> 1.764705882352941\n    \"\"\"\n    try:\n        return mean(grades)\n    except:\n        return 0\ndef to_percentage(grades):\n    \"\"\"\n    Write a function to convert a list of grades in percentage.\n    The function should return 0 in case of invalid input.\n    Example:\n    to_percentage([1.0, 2.0, 3.0]) ==> ['75.0%', '50.0%', '25.0%']\n    \"\"\"\n    try:\n        return ['{}%'.format(int(x*100)) for x in grades]\n    except:\n        return 0\ndef to_letter(grades):\n    \"\"\"\n    Write a function to convert a list of grades into a list of letters.\n    The function should return 0 in case of invalid input.\n    Example:\n    to_percentage([1.0, 2.0, 3.0]) ==> ['A', 'B', 'C']\n    \"\"\"\n    try:\n        return [numerical_letter_grade(x) for x in grades]\n    except:\n        return 0\ndef to_pass(grades):\n    \"\"\"\n    Write a function to check if a list of grades is a valid grade scale.\n    To check the validity of a list of grades, the function should return False in case of invalid input.\n    Example:\n    to_letter([1.0, 2.0, 3.0]) ==> False\n    to_letter([1.0, 2.0, 3.0, 4.0]) ==> True\n    \"\"\"\n    try:\n        return grades == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    except:\n        return False\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n    # TODO: Remove the pass statement and implement this function\n    # Write your code here\n    # 1. Create a for loop with the list of GPs given to it\n    # 2. Create a new list that will hold the letter grades\n    # 3. Create an if-elif-else statement. If the GPA is between 4.0 and 4.99, add the letter grade \"A+\" to the list.\n    # 4. If the GPA is between 3.9 and 3.99, add the letter grade \"A\" to the list.\n    # 5. If the GPA is between 3.8 and 3.99, add the letter grade \"A-\" to the list.\n    # 6. If the GPA is between 3.7 and 3.99, add the letter grade \"B+\" to the list.\n    # 7. If the GPA is between 3.6 and 3.99, add the letter grade \"B\" to the list.\n    # 8. If the GPA is between 3.5 and 3.99, add the letter grade \"B-\" to the list.\n    # 9. If the GPA is between 3.4 and 3.99, add the letter grade \"C+\" to the list.\n    # 10. If the GPA is between 3.3 and 3.99, add the letter grade \"C\" to the list.\n    # 11. If the GPA is between 3.0 and 3.99, add the letter grade \"C-\" to the list.\n    # 12. If the GPA is between 2.9 and 3.99, add the letter grade \"D+\" to the list.\n    # 13. If the GPA is between 2.8 and 3.99, add the letter grade \"D\" to the list.\n    # 14. If the GPA is between 2.7 and 3.99, add the letter grade \"D-\" to the list.\n    # 15. If the GPA is between 2.6 and 3.99, add the letter grade \"F\" to the list.\n    # 16. If the GPA is between 2.0 and 2.99, add the letter grade \"F\" to the list.\n    # 17. If the GPA is between 0.0 and 2.99, add the letter grade \"F\" to the list.\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    grades = grades\n    for index in range(0, len(grades)):\n        if grades[index] >= 4.0:\n            result.append('A+')\n        elif grades[index] >= 3.7:\n            result.append('A')\n        elif grades[index] >= 3.3:\n            result.append('A-')\n        elif grades[index] >= 3.0:\n            result.append('B+')\n        elif grades[index] >= 2.7:\n            result.append('B')\n        elif grades[index] >= 2.3:\n            result.append('B-')\n        elif grades[index] >= 2.0:\n            result.append('C+')\n        elif grades[index] >= 1.7:\n            result.append('C')\n        elif grades[index] >= 1.3:\n            result.append('C-')\n        elif grades[index] >= 1.0:\n            result.append('D+')\n        elif grades[index] >= 0.7:\n            result.append('D')\n        elif grades[index] >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    letters = []\n    for g in grades:\n        if g >= 4:\n            letters.append('A+')\n        elif g >= 3.7:\n            letters.append('A')\n        elif g >= 3.3:\n            letters.append('A-')\n        elif g >= 3.0:\n            letters.append('B+')\n        elif g >= 2.7:\n            letters.append('B')\n        elif g >= 2.3:\n            letters.append('B-')\n        elif g >= 2.0:\n            letters.append('C+')\n        elif g >= 1.7:\n            letters.append('C')\n        elif g >= 1.3:\n            letters.append('C-')\n        elif g >= 1.0:\n            letters.append('D+')\n        elif g >= 0.7:\n            letters.append('D')\n        elif g >= 0.0:\n            letters.append('D-')\n        else:\n            letters.append('E')\n    return letters\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    grades = []\n    for GPA in grades:\n        if GPA >= 4:\n            grades.append('A+')\n        elif GPA >= 3.7:\n            grades.append('A')\n        elif GPA >= 3.3:\n            grades.append('A-')\n        elif GPA >= 3:\n            grades.append('B+')\n        elif GPA >= 2.7:\n            grades.append('B')\n        elif GPA >= 2.3:\n            grades.append('B-')\n        elif GPA >= 2.0:\n            grades.append('C+')\n        elif GPA >= 1.7:\n            grades.append('C')\n        elif GPA >= 1.3:\n            grades.append('C-')\n        elif GPA >= 1.0:\n            grades.append('D+')\n        elif GPA >= 0.7:\n            grades.append('D')\n        elif GPA >= 0.0:\n            grades.append('D-')\n        else:\n            grades.append('E')\n    return grades\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    grades = sorted(grades, reverse = True)\n    letter_grades = []\n    for g in grades:\n        if g == 4.0:\n            letter_grades.append('A+')\n        elif g == 3.7:\n            letter_grades.append('A')\n        elif g == 3.3:\n            letter_grades.append('A-')\n        elif g == 3.0:\n            letter_grades.append('B+')\n        elif g == 2.7:\n            letter_grades.append('B')\n        elif g == 2.3:\n            letter_grades.append('B-')\n        elif g == 2.0:\n            letter_grades.append('C+')\n        elif g == 1.7:\n            letter_grades.append('C')\n        elif g == 1.3:\n            letter_grades.append('C-')\n        elif g == 1.0:\n            letter_grades.append('D+')\n        elif g == 0.7:\n            letter_grades.append('D')\n        elif g == 0.0:\n            letter_grades.append('D-')\n        elif g == 0:\n            letter_grades.append('E')\n    return letter_grades\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    x = len(string)\n    if x == 2:\n        return True\n    else:\n        if x % 2!= 0:\n            for i in range(3, x, 2):\n                if x % i == 0:\n                    return False\n                else:\n                    return True\n    return False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(string) % 2 == 0 or len(string) % 3 == 0 or len(string) % 5 == 0 or len(string) % 7 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # you need to replace the line below with your code\n    return None\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    number = string\n    count = 0\n    for i in number:\n        count += 1\n    if count == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return True if len(string) in prime_numbers() else False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if is_prime(len(string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(string) == 1:\n        return True\n    return len(string) in prime_list(len(string))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    else:\n        return 10 * starts_one_ends(n-1) + ends_one(n)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Create list of length n to store the digits of n.\n    digits = [0] * n\n    # Iterate through each digit of n.\n    for i in range(n):\n        # Increment the appropriate digit in the list.\n        digits[i] = i + 1\n    # Initialize variables to store count of 1s and count of n.\n    count1 = 0\n    countn = 0\n    # Iterate through digits.\n    for digit in digits:\n        # Check if the digit is 1 and if so increment count1.\n        if digit == 1:\n            count1 += 1\n        # Check if the digit is n and if so increment countn.\n        elif digit == n:\n            countn += 1\n    # Return the sum of count1 and countn.\n    return count1 + countn\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def count(num):\n        return 1 if num[0] == '1' or num[-1] == '1' else 0\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def counts(n, s, e):\n        if n == 0:\n            return 1 if s == 1 and e == 1 else 0\n        count = 0\n        if s == 1:\n            count += counts(n - 1, 1, e)\n        if e == 1:\n            count += counts(n - 1, s, 1)\n        return count + counts(n - 1, s, e)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 1:\n        raise ValueError('n must be greater than or equal to 1.')\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return (starts_one_ends(n - 1) +\n            ends_one_starts(n - 1))"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return int(n * (10 ** (n - 1)) / (9 * n)) + 1\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(starts_ends_count(n, k) for k in range(n + 1))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # We start with all numbers of length 1, and for each number we remove a 1\n    # if it starts with 1, and if it ends with 1, we add 1 to the counter.\n    total = 9 * (n - 1)\n    for i in range(1, n):\n        total += 2 * (n - 1) - i\n    return total\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # get all the permutations of n digits\n    perm = list(permutations(list(range(n))))\n    # filter out all numbers that start or end with 1\n    count = 0\n    for i in perm:\n        if i[0] == 1 or i[-1] == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return bin(N)[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    ans = str(bin(N)[2:])\n    return ans\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return bin(N)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum = 0\n    while N >= 10:\n        sum = sum + N % 10\n        N = N // 10\n    sum = sum + N\n    print(sum)\n    return bin(sum)[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    i = 0\n    while N > 0:\n        N, N = N//2, N % 2\n        count += N * (2 ** i)\n        i += 1\n    return str(count)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # use slice to get binary number\n    # https://www.hackerrank.com/challenges/python-arithmetic-operators/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=slicing\n    # slice 1st and 3rd number\n    \n    return bin(N)[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # method\n    return bin(N)[2:]\n    # END OF solve\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return bin(N)[2:]\n    \nif __name__ == \"__main__\":\n    print(solve(int(input().strip())))"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if N==0:\n        return '0'\n    return '{:0>10b}'.format(int(N))\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return str(bin(N))[2:]\n    \n    \nif __name__ == \"__main__\":\n    print(solve(int(input().strip())))"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    i = 0\n    while(i < len(lst)):\n        if(i%2!= 0):\n            if(isinstance(lst[i], int)):\n                result.append(lst[i])\n        i = i + 1\n    return sum(result)\n    \n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sum=0\n    for i in range(0,len(lst),2):\n        sum=sum+lst[i]\n    return sum\nprint(add([4, 2, 6, 7]))\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    counter = 0 \n    if type(lst) == list and len(lst) > 0:\n        while counter < len(lst):\n            if (lst[counter] % 2) == 0:\n                lst[counter] = lst[counter] + lst[counter+1]\n                lst[counter+1] = 0 \n            counter += 1\n    return lst\n        "
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass \n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([i for i in lst if i % 2!= 0])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # new_lst = []\n    # for i in range(len(lst)):\n    #     if lst[i] % 2 == 0 and i % 2!= 0:\n    #         new_lst.append(lst[i])\n    # return sum(new_lst)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst)%2==0:\n        return sum(x for x in lst if x%2==0)\n    return sum(lst[1::2])\nprint(add([4, 2, 6, 7]))\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(1, len(lst), 2):\n        result += lst[i]\n    return result\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    odd=0\n    even=0\n    for i in lst:\n        if i%2==0:\n            even+=i\n        else:\n            odd+=i\n    return even-odd\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    new_list = []\n    for num in lst:\n        if num%2 == 0 and num%1 == 1:\n            new_list.append(num)\n    return sum(new_list)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return''.join([sorted([i for i in s.replace(' ', '')], key=lambda c: ord(c))])\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    words = s.split()\n    words.sort(key=lambda x: ''.join(sorted(x)))\n    return''.join(words)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return''.join(sorted(s.split(), key=ord))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = s.split(' ')\n    n = []\n    for word in s:\n        for letter in word:\n            n.append(letter)\n    n.sort()\n    o = ''\n    for letter in n:\n        o = o + letter\n    return "
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    word_list = s.split()\n    ordered_list = []\n    for word in word_list:\n        new_word = ''\n        for char in word:\n            new_word += char\n            new_word +=''\n        ordered_list.append(new_word[0:-1])\n    new_sentence =''.join(ordered_list)\n    return new_sentence[0:-1]"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(s) == 0:\n        return ''\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #splits the string into list of strings\n    li = s.split()\n    #sorts the list of strings\n    li.sort()\n    # joins the list of strings in a string\n    ans = \" \".join(li)\n    return ans\n    #can also be written as:\n    #return''.join(sorted(s.split(), key = str.lower))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    words = s.split()\n    ans = []\n    for word in words:\n        ans.append(''.join(sorted(word)))\n    return''.join(ans)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s =''.join(s.split())\n    lst = sorted(s)\n    lst = [chr(x) for x in range(65, 91)]\n    for char in lst:\n        if char in s:\n            s = s.replace(char, '')\n    return "
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = s.split(' ')\n    res = [sorted(s, key=lambda c: ord(c))]\n    return''.join(res)"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Edge Case\n    if not lst or not lst[0]:\n        return []\n    \n    # Dict for mapping rows and column positions\n    myDict = dict()\n    \n    # Iterate through list to find each row\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                myDict[(i, j)] = num\n    \n    # Create result array\n    result = []\n    \n    # Iterate through dict to find each position\n    for key in myDict:\n        i, j = key[0], key[1]\n        result.append((i, j))\n    \n    # Sort by row first, then by column\n    result.sort()\n    result.sort(key=lambda x: (x[0], -x[1]))\n    \n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # find first row and last row\n    first_row = lst[0]\n    last_row = lst[-1]\n    \n    # find index of x in first row\n    i = first_row.index(x)\n    \n    # get coordinate of x in the last row\n    x_coord = last_row[i]\n    \n    # create result list\n    result = []\n    \n    # add x_coord to result\n    result.append((0, i))\n    \n    # iterate over last row\n    for i in last_row:\n        if i == x:\n            # if x is in row, add it to result\n            result.append((last_row.index(i), i))\n    \n    # sort result by rows in ascending order\n    result = sorted(result, key=lambda tup: tup[0])\n    \n    # sort rows in ascending order by columns in descending order\n    for i in range(0, len(result)):\n        result[i] = sorted(result[i], key=lambda tup: tup[1])\n    \n    # convert result to list of tuples\n    result = [tuple(i) for i in result]\n    \n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if x < 0:\n        return []\n    if not lst:\n        return []\n    res = []\n    for i, row in enumerate(lst):\n        if x in row:\n            res.append((i, row.index(x)))\n    return sorted(res, key=lambda x: (x[0], x[1]))"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if lst == []:\n        return []\n    if x not in lst[0]:\n        return []\n    index = lst[0].index(x)\n    # print(index)\n    coordinates = []\n    # print(len(lst))\n    for i in range(len(lst)):\n        # print(lst[i])\n        # print(len(lst[i]))\n        # print(i, index)\n        try:\n            coordinates.append((i, lst[i][index]))\n        except IndexError:\n            pass\n    coordinates = sorted(coordinates, key=lambda tup: (tup[0]))\n    coordinates = sorted(coordinates, key=lambda tup: (tup[1]), reverse=True)\n    # print(coordinates)\n    return coordinates\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i, row in enumerate(lst):\n        for j, x in enumerate(row):\n            if x == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    output = []\n    for i, l in enumerate(lst):\n        if x in l:\n            for j in range(len(l)):\n                if l[j] == x:\n                    output.append((i, j))\n    return sorted(output, key = lambda x: x[0])\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    output = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            output.append((i, lst[i].index(x)))\n    output.sort()\n    output.sort(key=lambda tup: tup[0])\n    return output\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return sorted([(i, col) for i, row in enumerate(lst) for col in sorted(row, reverse=True) if x in row], key=lambda y: (y[0], y[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    result = sorted(result, key=lambda k: k[0])\n    return sorted(result, key=lambda k: k[1], reverse=True)"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    coordinates = []\n    # print('INPUT: ', lst, x)\n    for i in range(len(lst)):\n        if x in lst[i]:\n            coordinates.append((i, lst[i].index(x)))\n    coordinates.sort(key=lambda tup: tup[0])\n    coordinates.sort(key=lambda tup: len(lst[tup[0]]) - tup[1])\n    # print('OUTPUT: ', coordinates)\n    return coordinates\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return array.sort()\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not array:\n        return []\n    even = False\n    if sum(array) % 2 == 0:\n        even = True\n    index = len(array) // 2\n    while index:\n        swap(array, index, 0)\n        index -= 1\n    sorted_array = array\n    if not even:\n        sorted_array.reverse()\n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sorted_array = []\n    if len(array) == 0:\n        return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not array: return array\n    return sorted(array) if sum(array[0], array[-1]) % 2 else sorted(array, reverse=True)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = len(array)\n    if n == 0:\n        return []\n    max_value = array[0]\n    min_value = array[0]\n    max_index = 0\n    min_index = 0\n    for i in range(1, n):\n        if array[i] > max_value:\n            max_value = array[i]\n            max_index = i\n        if array[i] < min_value:\n            min_value = array[i]\n            min_index = i\n    \n    if max_index < min_index:\n        array[min_index] = max_value\n        array[max_index] = min_value\n    else:\n        array[max_index] = min_value\n        array[min_index] = max_value\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(array, key=lambda x: x if sum(x) % 2 == 0 else -x)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(array, reverse=True)"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(len(array)):\n        for j in range(len(array) - 1):\n            if sum(array[j], array[j + 1]) % 2 == 1:\n                array[j], array[j + 1] = array[j + 1], array[j]\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    cipher = 'abcdefghijklmnopqrstuvwxyz'\n    new_str = ''\n    for letter in s:\n        new_str += cipher[(cipher.find(letter) + 2) * 2:] + cipher[:cipher.find(letter)]\n    return new_str\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n    uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    newstring = \"\"\n    for i in s:\n        if i.islower():\n            newstring += lowercase[(lowercase.index(i) + 2 * 2) % 26]\n        elif i.isupper():\n            newstring += uppercase[(uppercase.index(i) + 2 * 2) % 26]\n        else:\n            newstring += i\n    return newstring\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n    a = 'abcdefghijklmnopqrstuvwxyz'\n    b = 'abcdefghijklmnopqrstuvwxyz'\n    c = a[:2] + b[2:] + b[:2]\n    d = c[-2:] + c[:-2]\n    e = d[-2:] + d[:-2]\n    return e\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return s[2:] + s[:2]\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    my_string = s.lower()\n    # Create dictionary with characters and corresponding values\n    letter_dict = {}\n    for letter in my_string:\n        if letter not in letter_dict:\n            letter_dict[letter] = 0\n        letter_dict[letter] += 1\n    # Create list with each character's value\n    letters = []\n    for letter in letter_dict:\n        letters.append(letter_dict[letter])\n    # Create string with each character's value\n    letters_string = \"\"\n    for i in range(len(letters)):\n        letters_string += str(letters[i])\n    # Create dictionary with characters and corresponding values\n    reverse_letter_dict = {}\n    for key, value in letter_dict.items():\n        reverse_letter_dict[value] = key\n    # Create list with each character's value\n    reverse_letters = []\n    for value in letters:\n        reverse_letters.append(reverse_letter_dict[value])\n    # Create string with each character's value\n    reverse_letters_string = \"\"\n    for letter in reverse_letters:\n        reverse_letters_string += letter\n    # Create string with each character's value\n    encrypt_string = \"\"\n    for i in range(len(reverse_letters)):\n        # Find corresponding character to rotated version of the original string\n        encrypt_string += reverse_letters_string[(i*2)] * letters_string[i]\n    return encrypt_string\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    enc_str = \"\"\n    for i in range(len(s)):\n        enc_str += string.ascii_lowercase[string.ascii_lowercase.find(s[i]) + 2 * 2]\n    return enc_str\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    shift = 2 * 2\n    return ''.join([ALPHABET[(ALPHABET.index(i) + shift) % len(ALPHABET)] for i in s])\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # First we'll make a string that will work as a key\n    key = 'abcdefghijklmnopqrstuvwxyz'\n    # Now we'll get the result of rotating the key.\n    result = ''\n    # For each character in the string, get the number of its position in the key.\n    for character in s:\n        # We will find the index of the character in the key.\n        index = key.index(character)\n        # We will add the index to the key, and then use this index to get the character.\n        result += key[(index + 2) % 26]\n    return result\ndef main():\n    # Test the function encrypt.\n    # Use the sample string on the right.\n    # print(encrypt('hi'))\n    # Output: lm\n    print(encrypt('asdfghjkl'))\n    # Output: ewhjklnop\n    # print(encrypt('et'))\n    # Output: ix\n    # print(encrypt('jklmno'))\n    # Output: ix\n    # print(encrypt('adfgjklmnoq'))\n    # Output: ewhjklnopq\n    # print(encrypt('rstuvwxyz'))\n    # Output: kjxz\n    # print(encrypt('qwertyuiop'))\n    # Output: kjxz\n    # print(encrypt('zxcvbnm'))\n    # Output: kjxz\n    # print(encrypt('asdfghjkl'))\n    # Output: ewhjklnop\n    # print(encrypt('zxcvbnm'))\n    # Output: kjxz\n    # print(encrypt('asdfghjkl'))\n    # Output: ewhjklnop\n    print(encrypt('qwertyuiop'))\nmain("
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # define the alphabet\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    # create a variable for the encrypted text\n    new_string = ''\n    # iterate through the string and shift each character to the right by 2 places\n    for letter in s:\n        # get the index of the letter in the alphabet\n        index = alpha.index(letter)\n        # move the letter to the right by 2 places by getting the index of the letter and shifting it right by 2\n        new_string += alpha[index + 2]\n    return new_string\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    rotate = lambda string: ''.join(string[i] for i in range(len(string)-1,-1,-1))\n    return rotate(s[2:]+s[:2])\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    # solution 1\n    if len(lst) < 2:\n        return None\n    \n    # solution 2\n    if len(lst) == 2:\n        return min(lst)\n    \n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(lst) < 2:\n        return None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) < 2:\n        return None\n    else:\n        return sorted(set(lst))[1]\n    \n    \ndef next_smallest_advanced(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    else:\n        return sorted(set(lst))[1]\n    \n    \ndef next_greatest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_greatest() that returns the 2nd greatest element of the list.\n    Return None if there is no such element.\n    \n    next_greatest([1, 2, 3, 4, 5]) == 4\n    next_greatest([5, 1, 4, 3, 2]) == 4\n    next_greatest([]) == None\n    next_greatest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    else:\n        return sorted(set(lst))[-2]\n    \n    \ndef next_greatest_advanced(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_greatest() that returns the 2nd greatest element of the list.\n    Return None if there is no such element.\n    \n    next_greatest([1, 2, 3, 4, 5]) == 4\n    next_greatest([5, 1, 4, 3, 2]) == 4\n    next_greatest([]) == None\n    next_greatest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    else:\n        return sorted(set(lst))[-2]\n    \n    \nif __name__ == \"__main__\":\n    print(next_greatest([1, 2, 3, 4, 5]))\n    print(next_greatest([5, 1, 4, 3, 2]))\n    print(next_greatest([]))\n    print(next_greatest([1, 1]))\n    \n    print(next_greatest_advanced([1, 2, 3, 4, 5]))\n    print(next_greatest_advanced([5, 1, 4, 3, 2]))\n    print(next_greatest_advanced([]))\n    print(next_greatest_advanced([1, 1]))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    # +++ YOUR CODE HERE +++\n    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Your code here\n    lst.sort()\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst) < 2:\n        return None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    if len(lst) < 2:\n        return None\n    else:\n        return sorted(lst)[1]\n    # Solution\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # your code here\n    # hint: using a priority queue, if your list is already ordered, you can use a set to store the items in your queue.\n    if len(lst) < 2:\n        return None\n    pq = PriorityQueue()\n    for item in lst:\n        pq.put(item)\n    return pq.get()\n    \ndef smallest_greater(lst, target):\n    \"\"\"\n    Write a function smallest_greater that takes two parameters, a list of numbers and a target number.\n    Return the smallest element in the list that is larger than the target.\n    Return None if there is no such element.\n    \n    smallest_greater([1, 2, 3, 4, 5], 3) == 2\n    smallest_greater([1, 2, 3, 4, 5], -10) == None\n    smallest_greater([1, 2, 3, 4, 5], 6) == 5\n    smallest_greater([1, 2, 3, 4, 5], 2) == 3\n    \"\"\"\n    # your code here\n    # hint: use a priority queue.\n    if len(lst) < 1:\n        return None\n    pq = PriorityQueue()\n    for item in lst:\n        pq.put(item)\n    while not pq.empty():\n        item = pq.get()\n        if item > target:\n            return item\n    return None\n    \ndef intersect(lst1, lst2):\n    \"\"\"\n    Write a function intersect that takes two lists of numbers as parameters.\n    Return a list of the numbers that are present in both the lists.\n    \n    intersect([1, 2, 3], [2, 3, 4]) == [2, 3]\n    intersect([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3]\n    intersect([1, 2, 3], [4, 5]) == []\n    intersect([1, 2, 3], [1]) == [1]\n    \"\"\"\n    # your code here\n    # hint: make use of the built-in set() function.\n    return list(set(lst1) & set(lst2))\n    \ndef common_elements(lst1, lst2):\n    \"\"\"\n    Write a function common_elements that takes two lists of numbers as parameters.\n    Return a list of the numbers that are present in both the lists.\n    \n    common_elements([1, 2, 3], [2, 3, 4]) == [2, 3]\n    common_elements([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3]\n    common_elements([1, 2, 3], [4, 5]) == []\n    common_elements([1, 2, 3], [1]) == [1]\n    \"\"\"\n    # your code here\n    # hint: use the intersect function.\n    return intersect(lst1, lst2)\n    \ndef matches(player):\n    \"\"\"\n    Write a function matches that takes a list of pairs as parameters.\n    Each pair is a string of the format \"<last name>, <first name>\".\n    Return a new list of strings of the format \"<first name> (<last name>)\"\n    for the players in the original list.\n    \n    matches(['Tom Brady, Matt.D', 'Rob Gronkowski, Bill']) == ['Rob Gronkowski (Bill)', 'Tom Brady (Matt)']\n    matches(['Tom Brady, Matt D', 'Rob Gronkowski, Bill']) == ['Rob Gronkowski (Bill)', 'Tom Brady (Matt D)']\n    matches(['Rob Gronkowski, Bill', 'Rob Gronkowski, Bill']) == ['Rob Gronkowski (Bill)', 'Rob Gronkowski (Bill)']\n    matches(['Tom Brady, Matt D', 'Rob Gronkowski, Bill', 'Rob Gronkowski, Bill']) == ['Rob Gronkowski (Bill)', 'Rob Gronkowski (Bill)', 'Tom Brady (Matt D)']\n    matches(['Rob Gronkowski, Bill', 'Rob Gronkowski, Bill']) == ['Rob Gronkowski (Bill)', 'Rob Gronkowski (Bill)']\n    matches(['Rob Gronkowski, Bill', 'Rob Gronkowski, Bill', 'Rob Gronkowski, Bill', 'Rob Gronkowski, Bill']) == ['Rob Gronkowski (Bill)', 'Rob Gronkowski (Bil"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #lst.sort()\n    #return lst[1] if len(lst) > 1 else None\n    if len(lst) <= 1:\n        return None\n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    cnt = 0\n    for i in S.split('.'):\n        if i[0:3] == \"I \":\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    boredoms = []\n    for x in S.split(\".\"):\n        if x.lower().startswith(\"i\"):\n            boredoms.append(x)\n    return len(boredoms)\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sentences = S.split(\".\")\n    boredoms = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\") and not sentence.strip().endswith(\"!\") and not sentence.strip().endswith(\"?\"):\n            boredoms += 1\n    return boredoms\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([1 for s in S.split('.') if s.startswith('I')])\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.startswith(\"I \"):\n            boredoms += 1\n    return boredoms\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    #S = S.replace('.','')\n    #S = S.replace('?','')\n    #S = S.replace('!','')\n    #S = S.split(' ')\n    #for word in S:\n    #    if word.startswith('I'):\n    #        return 1\n    #return 0\n    return sum(1 for word in S.split() if word.startswith('I'))\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    num_boredom = 0\n    for word in S.split():\n        if word.startswith('I'):\n            num_boredom += 1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # split into words\n    # remove empty strings and convert to lowercase\n    S_words = S.split()\n    S_words = [word.lower() for word in S_words if word]\n    # count the number of instances of \"i\"\n    S_i = [word for word in S_words if word[0] == 'i']\n    return len(S_i)\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    boredoms = 0\n    s = S.split('.')\n    for i in s:\n        if i[0:2] == 'I ':\n            boredoms += 1\n        \n    return boredoms\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    boredoms = 0\n    \n    for i in S.split(\".\"):\n        i = i.split(\" \")\n        for j in i:\n            if j.startswith(\"I\"):\n                boredoms += 1\n    return boredoms\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a = x+y+z\n    if type(x) == int and type(y) == int and type(z) == int:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return int(x) + int(y) == int(z) or int(x) + int(z) == int(y) or int(y) + int(z) == int(x)\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    a = x + y\n    b = x + z\n    c = y + z\n    if a == b or a == c:\n        return True\n    elif b == a or b == c:\n        return True\n    elif c == a or c == b:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if type(x)!= int or type(y)!= int or type(z)!= int:\n        return False\n    if x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": ""
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z:\n            return True\n        elif x + z == y:\n            return True\n        elif z + y == x:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \nprint(any_int(5, 2, 7))\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x == y + z or y == x + z or z == x + y\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "  \n  return any([int(x),int(y),int(z)]) and (int(x) + int(y)) == int(z) or (int(x) + int(z)) == int(y) or (int(z) + int(y)) == int(x) \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return any(x+y==z or x+z==y or y+z==x for x in [x,y,z]) and x>0 and y>0 and z>0\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    import string\n    numbers = list('1234567890')\n    alphabet = list(string.ascii_lowercase)\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    newMessage = ''\n    for i in message:\n        if i in alphabet:\n            if i.lower() == i:\n                newMessage += alphabet[numbers.index(i) - 1].upper()\n            else:\n                newMessage += alphabet[numbers.index(i) - 1]\n        elif i in vowels:\n            newMessage += alphabet[(alphabet.index(i) + 2) % 6].lower()\n        else:\n            newMessage += i\n    return newMessage\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = ''\n    for c in message:\n        if c.isupper():\n            result += c.lower()\n        elif c.islower():\n            result += c.upper()\n        else:\n            result += c\n    return result\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, removes all vowels,\n    and adds *s at the end. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('Thks KS Cmgsscgg')\n    'This is a message'\n    \"\"\"\n    result = ''\n    for c in message:\n        if c.isupper():\n            result += c.lower()\n        elif c.islower():\n            result += c.upper()\n        else:\n            result += c\n    return result + '*'"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    letters = 'abcdefghijklmnopqrstuvwxyz'\n    message = message.lower()\n    encoded_message = ''\n    for i in message:\n        if i in 'aeiou':\n            encoded_message += letters[letters.index(i)+2]\n        else:\n            encoded_message += i\n    return encoded_message\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass # replace this line with your code\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Write code here:\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    vowels = {'a':1,'e':2,'i':3,'o':4,'u':5}\n    new_message = ''\n    for c in message:\n        if c.lower() not in vowels:\n            new_message += c.lower()\n        else:\n            position = vowels[c] + 2\n            if position > 5:\n                position = position - 6\n            new_message += list(vowels.keys())[list(vowels.values()).index(position)]\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    message = message.lower()\n    vowels = set(\"aeiou\")\n    letters = {}\n    for i, letter in enumerate(string.ascii_lowercase):\n        letters[letter] = letter if letter not in vowels else string.ascii_lowercase[i + 2]\n    return \"\".join(letters[l] if l in letters else l for l in message)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    result = ''\n    vowels = ['a','e','i','o','u','y']\n    for letter in message:\n        if letter.lower() in vowels:\n            #print(f\"{letter} swapped\")\n            result += vowels[vowels.index(letter.lower())-2]\n        else:\n            #print(f\"{letter} in result\")\n            result += letter\n    return result\n    \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    message = message.lower()\n    vowels = 'aeiou'\n    for index, letter in enumerate(message):\n        if letter in vowels:\n            message = message[:index] + message[index].swapcase() + message[index+1:]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\n    return sum(list(map(lambda x: x if is_prime(x) else 0, [x for x in lst if x>0])))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    print(lst)\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0] if lst[0]>lst[1] else lst[1]\n    return max(skjkasdkd(lst[:-1]), skjkasdkd(lst[1:]))\n    # if lst == []:\n    #     return 0\n    # for i in lst:\n    #     if isPrime(i):\n    #         return sum(int(c) for c in str(i))\n    # return max(skjkasdkd(lst[:-1]), skjkasdkd(lst[1:]))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) == 0: return 0\n    if len(lst) == 1: return lst[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 42\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # The idea here is to just take a number and check if it is a prime or not,\n    # if not then we go to the next number, if yes then we return the sum of the digits\n    # If our number is not a prime number, then we return -1\n    # We will use a function to check if the number is a prime or not\n    lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n    def is_prime(n):\n        \"\"\"\n        :param n: takes in an integer\n        :return: 1 or 0, 1 for prime, 0 for not\n        \"\"\"\n        if n==0 or n==1:\n            return 0\n        else:\n            for i in range(2, int(n**(1/2))+1):\n                if n%i == 0:\n                    return 0\n            return 1\n    # The second part here is just to check if the number is a prime number\n    def sum_digits(n):\n        \"\"\"\n        :param n: takes in an integer\n        :return: sum of digits\n        \"\"\"\n        return sum([int(i) for i in str(n)])\n    # We will initialize a list to hold the prime numbers we find\n    primes = []\n    # We will initialize a variable to hold the largest prime value we find\n    largest = 0\n    # We will loop through the list of integers we were given\n    for num in lst:\n        if is_prime(num):\n            primes.append(num)\n    # If we have no primes then we will return -1\n    if len(primes) == 0:\n        return -1\n    # Otherwise we will loop through our list of prime numbers and check\n    # if they are greater than the largest prime number we have found\n    # If they are we will replace it with the new largest prime\n    for num in primes:\n        if num > largest:\n            largest = num\n    # Now we will just take the sum of all digits in the largest prime\n    # If the sum is greater than 9 we will use mod 10\n    # If it is smaller than 9 we can just return the sum itself\n    return sum_digits(largest) % 10\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sums = []\n    for elem in lst:\n        sums.append(sum([int(i) for i in str(elem)]))\n    return max(sums)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    from math import sqrt\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # print(lst)\n    max_i = max(lst)\n    # print(max_i)\n    max_num = max(lst)\n    # print(max_num)\n    for i in range(2, max_num):\n        if max_num % i == 0:\n            break\n    else:\n        i = max_num\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    prime_list = []\n    for num in lst:\n        if check_prime(num):\n            prime_list.append(num)\n    max_prime = max(prime_list)\n    return sum(list(map(int, str(max_prime))))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not dict:\n        return False\n    if len(dict) == 1:\n        return True\n    if not all(isinstance(key,str) for key in dict.keys()):\n        return False\n    if not all(isinstance(value,str) for value in dict.values()):\n        return False\n    if not all(key.islower() for key in dict.keys()):\n        return False\n    if not all(value.isupper() for value in dict.values()):\n        return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for key in dict.keys():\n        if type(key) == str and key.isupper():\n            return False\n        elif type(key) == str and key.islower():\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not dict:\n        return False\n    \n    lower_dict = {}\n    upper_dict = {}\n    \n    for k, v in dict.items():\n        if type(k) is not str:\n            return False\n        if type(v) is not str:\n            return False\n        if k.islower():\n            lower_dict.update({k:v})\n        elif k.isupper():\n            upper_dict.update({k:v})\n        else:\n            return False\n    \n    return (not lower_dict) or (not upper_dict)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for x in dict:\n            if type(x) == int:\n                return False\n            else:\n                pass\n        for x in dict:\n            if x == x.upper():\n                return False\n            else:\n                pass\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if type(key)!= str:\n                return False\n            if key.isupper():\n                return True\n            elif key.islower():\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if dict == {}:\n        return False\n    lower_keys = []\n    upper_keys = []\n    for key in dict:\n        if key == key.lower():\n            lower_keys.append(key)\n        if key == key.upper():\n            upper_keys.append(key)\n    if len(lower_keys) == len(dict) or len(upper_keys) == len(dict):\n        return True\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for key in dict.keys():\n        if type(key)!= str:\n            return False\n        if key.upper()!= key.lower():\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # if n < 2:\n    #     return []\n    # return [2] + count_up_to(n-2)\n    \n    num_list = [2]\n    for i in range(3, n):\n        is_prime = True\n        for x in num_list:\n            if x > sqrt(i):\n                break\n            elif i % x == 0:\n                is_prime = False\n                break\n        if is_prime:\n            num_list.append(i)\n    return num_list\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # [2,3,5,7,11,13,17]\n    # [2,3,5,7,11,13,17,19,23,29,31,37]\n    # [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def is_prime(n):\n        if n <= 1:\n            return False\n        elif n <= 3:\n            return True\n        elif n % 2 == 0 or n % 3 == 0:\n            return False\n        else:\n            for i in range(5, int(n**0.5) + 1, 6):\n                if n % i == 0 or n % (i + 2) == 0:\n                    return False\n            return True\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return []\n    else:\n        primes = []\n        i = 2\n        while len(primes) < n:\n            if is_prime(i):\n                primes.append(i)\n            i += 1\n        return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(2, n + 1):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n        if isPrime:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Could not implement this function\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return []\n    primes = []\n    for i in range(2, n + 1):\n        for num in primes:\n            if num == i or i % num == 0:\n                break\n        else:\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i for i in range(2, n) if is_prime(i)]\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    a_abs = abs(a)\n    b_abs = abs(b)\n    a_digits = [int(i) for i in str(a_abs)]\n    b_digits = [int(i) for i in str(b_abs)]\n    total = 0\n    for i in range(len(a_digits)):\n        total += a_digits[i]*b_digits[i]\n    return total\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if type(a) == int and type(b) == int:\n        a_digits = list(str(a))\n        b_digits = list(str(b))\n        result = []\n        for d_a, d_b in zip(a_digits, b_digits):\n            result.append(int(d_a) * int(d_b))\n        return sum(result)\n    else:\n        raise TypeError\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = a * b\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if a < 10:\n        return b\n    elif b < 10:\n        return a\n    elif a < 10:\n        return b\n    elif b < 10:\n        return a\n    else:\n        a_unit = a % 10\n        b_unit = b % 10\n        return a_unit * b_unit\n    \n    \nif __name__ == \"__main__\":\n    print(multiply(148, 412))\n    print(multiply(19, 28))\n    print(multiply(2020, 1851))\n    print(multiply(14,-15)"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return 0\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    if b < 0:\n        a, b = b, a\n    c = 0\n    while b:\n        if b % 10 == 1:\n            c += a\n        a *= 10\n        b //= 10\n    return c\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    a_digits = []\n    b_digits = []\n    a_str = str(a)\n    b_str = str(b)\n    \n    # Obtain the digits of each number\n    for digit in a_str:\n        a_digits.append(int(digit))\n    for digit in b_str:\n        b_digits.append(int(digit))\n    \n    # Multiply the digits and find their product\n    result_digits = []\n    for a_digit, b_digit in zip(a_digits, b_digits):\n        product = a_digit * b_digit\n        result_digits.append(product)\n    result = sum(result_digits)\n    \n    return result\n    \nif __name__ == \"__main__\":\n    print(multiply(148, 412))\n    print(multiply(19, 28))\n    print(multiply(2020, 1851))\n    print(multiply(14,-15))"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    counter = 0\n    for i in range(0,len(s),2):\n        if s[i].isalpha():\n            if s[i].upper() in vowels:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return sum([1 for char in s[1::2] if char.isupper()])\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not s:\n        return 0\n    if len(s) == 1:\n        return 0 if s[0].isupper() else 1\n    return sum(1 for i in range(1, len(s), 2) if s[i].isupper())\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    vowels = 'AEIOU'\n    count = 0\n    \n    for i, char in enumerate(s):\n        if i % 2 == 0 and char in vowels:\n            count += 1\n    \n    return coun"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowels = ['A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u']\n    counter = 0\n    for idx, val in enumerate(s):\n        if idx % 2 == 0 and val in vowels:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i, x in enumerate(s):\n        if x.isupper() and i % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n_upper = 0\n    for i, ch in enumerate(s):\n        if i % 2!= 0:\n            continue\n        if ch.isupper():\n            n_upper += 1\n    return n_upper\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = 0\n    for i, character in enumerate(s):\n        if i % 2 == 0 and character.upper() in VOWELS:\n            result += 1\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    num = float(value)\n    if int(num) == num:\n        return int(num)\n    return int(num + ((num - int(num)) * -1))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return int(value) if value.isnumeric() else round(float(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return round(float(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return int(value) if int(value) == float(value) else int(value) - (int(value) - float(value)) // 2\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return int(value) if int(value) >= 0 else int(value) - 1\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return round(float(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if isinstance(value, (float, int)):\n        value = str(round(float(value)))\n    try:\n        return int(value)\n    except ValueError:\n        # remove negative sign if there is one\n        value = value.replace('-', '')\n        # remove decimal point if there is one\n        value = value.replace('.', '')\n        # remove trailing zeros if there are any\n        value = value.rstrip('0')\n        # cast to int\n        value = int(value)\n        return value\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    try:\n        int_value = int(value)\n    except ValueError:\n        raise ValueError(\"The number must be a valid integer\")\n    \n    if int_value <= 0:\n        return abs(int_value)\n    \n    return int(round(int_value))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return int(value) if int(value) < abs(int(value)) else int(value) + 1 if int(value) > abs(int(value)) else int(value)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i + i//2)\n        else:\n            pile.append(i + (i + 1)//2)\n    return pile"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    if n % 2 == 1:\n        pile = [n]*n\n        for i in range(n):\n            pile[i] += n + 1 - i\n        return pile\n    else:\n        pile = [n]*n\n        for i in range(n):\n            pile[i] += n + 1 - i - 1\n        return pile\n    \n    \ndef main():\n    print(make_a_pile(2))\n    print(make_a_pile(3))\n    print(make_a_pile(5))\n    print(make_a_pile(7))\n    print(make_a_pile(9))\n    print(make_a_pile(11))\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # The main idea:\n    # The stones in the last level (the levels start with 0) are the middle\n    # of the odd numbers\n    \n    # Check if n is even or odd\n    if n % 2 == 0:\n        level_stones = range(0, n, 2)\n    else:\n        level_stones = range(1, n, 2)\n    \n    return list(level_stones)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n%2==1:\n        return [n]+[n+2]*(n-1)\n    else:\n        return [n]+[n+2]*(n-1)+[n]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pile = [n]\n    for _ in range(1, n + 1):\n        if n % 2 == 0:\n            pile.append(n + 1)\n        else:\n            pile.append(n + 2)\n        n = pile[-1]\n    return pile[:-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Base case\n    if n == 1: return [1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        next_num = n + 1\n    else:\n        next_num = n + 2\n    return [n] * (n//2) + [next_num] * (n % 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        return [n] + make_a_pile(n+1)\n    else:\n        return [n] + make_a_pile(n+2)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n%2 == 0:\n        return [n] + make_a_pile(n-2)\n    else:\n        return [n] + make_a_pile(n-1)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Invalid number of levels.\")\n    # odd = 0\n    # even = 1\n    # if n == 1:\n    #     return [1]\n    # elif n % 2 == 0:\n    #     num = 2 ** (n - 1)\n    # else:\n    #     num = 2 ** (n - 1) - 1\n    # return [num] + make_a_pile(n - 1)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return s.split(' ')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    return re.split('[, \\s]\\s*', s)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return s.split(',')\n    \n    \ndef brackets(s):\n    \"\"\"\n    This function will receive a string that consists of only ( and ). Your task is\n    to return True if the brackets are balanced and False otherwise.\n    \n    For example:\n    brackets(\"(Hello (World))\") == True\n    brackets(\"((There's a mistake))\") == False\n    \"\"\"\n    \n    return not any(s.count(bracket) - s.count(')') for bracket in ('(', ')'))\n    \n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    words = []\n    tmp = \"\"\n    for char in s:\n        if char == \",\" or char == \" \":\n            words.append(tmp)\n            tmp = \"\"\n        else:\n            tmp += char\n    words.append(tmp)\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    return s.replace(',', ',').split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    def split(string):\n        return [char for char in string]\n    return split(s)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    words = s.split()\n    return words\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if x >= y:\n        return -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n    \nprint(choose_num(12, 15))\nprint(choose_num(13, 12)"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if y < x:\n        return -1\n    elif y % 2 == 0:\n        if x % 2 == 0:\n            return min(x, y)\n        else:\n            return max(x, y)\n    else:\n        return -1\n        \n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(x, y + 1):\n        if i % 2 == 0 and i >= x and i <= y:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    while x < y:\n        if x % 2 == 0:\n            break\n        x += 1\n    return -1 if x > y else x\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if x <= y:\n        for i in range(x, y+1):\n            if i % 2 == 0:\n                return i\n        return -1\n    else:\n        return -1"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if x % 2!= 0 and x > 1:\n        a = int((x - 1) / 2)\n    elif x % 2 == 0 and x == 2:\n        a = 1\n    elif x % 2!= 0 and x == 1:\n        a = -1\n    elif x % 2 == 0 and x > 2:\n        a = int((x - 2) / 2)\n    else:\n        a = -1\n    if y % 2!= 0 and y > 1:\n        b = int((y - 1) / 2)\n    elif y % 2 == 0 and y == 2:\n        b = 1\n    elif y % 2!= 0 and y == 1:\n        b = -1\n    elif y % 2 == 0 and y > 2:\n        b = int((y - 2) / 2)\n    else:\n        b = -1\n    if b == -1 and a!= -1:\n        return a\n    elif b!= -1 and a == -1:\n        return b\n    elif b == -1 and a == -1:\n        return -1\n    else:\n        if b > a:\n            return b\n        else:\n            return a\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    evens = [2 * i for i in range(int(y/2)) if i * 2 <= y]\n    if x == 1:\n        return 2 if y == 2 else -1\n    for i in evens:\n        if i >= x and i <= y:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if x < 0 or y < 0:\n        raise ValueError('Inputs must be positive')\n    for n in range(x, y+1):\n        if n % 2 == 0 and n >= x and n <= y:\n            return n\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if x >= y:\n        return -1\n    for i in range(x, y+1):\n        if i%2 == 0:\n            return i\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if x % 2!= 0:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(int(round(sum([n, m]) / 2)))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO: Your code here\n    if n > m:\n        return -1\n    else:\n        num = 0\n        for i in range(n, m + 1):\n            num += i\n        return round(num / (m - n + 1))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n,m+1))/len(range(n,m+1))))\n        return bin(avg)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n > m:\n        return -1\n    else:\n        return str(bin(int((m+1+n)/2)))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    avg = sum(range(n, m + 1)) / (m - n + 1)\n    return f\"0b{int(avg)}\" if avg < 1 else -1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(round(sum([x for x in range(n, m + 1)]) / (m - n + 1)))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n>m:\n        return -1\n    n,m=min(n,m),max(n,m)\n    return bin(round(sum([(i+1)**2 for i in range(n,m+1)])/len(range(n,m+1))))[2:]\n    \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Your code goes here:\n    if n > m:\n        return -1\n    else:\n        return \"0b{0:b}\".format(round(sum(range(n, m+1))/len(range(n, m+1))))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n > m:\n        return -1\n    return str(format(round(sum(range(n, m+1)) / (m-n+1)), 'b'))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    unique_digits_list = []\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    nums = []\n    for num in x:\n        num = str(num)\n        if '0' not in num and '2' not in num and '4' not in num and '6' not in num and '8' not in num:\n            nums.append(int(num))\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(x)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    new = []\n    for num in x:\n        if not any(int(i) % 2 == 0 for i in str(num)):\n            new.append(num)\n    return sorted(new)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    for i in x:\n        num = str(i)\n        for i in num:\n            if int(i)%2 == 0:\n                break\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    n = []\n    for i in x:\n        if i%2!=0:\n            n.append(i)\n    return sorted(n)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    lst = []\n    for x in x:\n        if x % 2!= 0:\n            lst.append(x)\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return sorted([i for i in x if i%2!=0])\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # TODO: implement this\n    # NOTE: since we're working with integers, we can assume that the highest number we can\n    # store in the array is 999,999\n    # if len(arr) == 0:\n    #     return []\n    # if len(arr) > 0 and min(arr) < 0:\n    #     return []\n    # if len(arr) == 1 and arr[0] < 0:\n    #     return []\n    \n    arr = [str(num) for num in arr]\n    sorted_arr = sorted(arr)\n    reverse_arr = sorted_arr[::-1]\n    arr_char = []\n    for num in reverse_arr:\n        if int(num) <= 9:\n            arr_char.append(str(num))\n    \n    arr_char_name = []\n    for num in arr_char:\n        if int(num) == 1:\n            arr_char_name.append(\"One\")\n        if int(num) == 2:\n            arr_char_name.append(\"Two\")\n        if int(num) == 3:\n            arr_char_name.append(\"Three\")\n        if int(num) == 4:\n            arr_char_name.append(\"Four\")\n        if int(num) == 5:\n            arr_char_name.append(\"Five\")\n        if int(num) == 6:\n            arr_char_name.append(\"Six\")\n        if int(num) == 7:\n            arr_char_name.append(\"Seven\")\n        if int(num) == 8:\n            arr_char_name.append(\"Eight\")\n        if int(num) == 9:\n            arr_char_name.append(\"Nine\")\n    \n    return arr_char_name\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Your code here\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    arr.sort()\n    arr.reverse()\n    return [int_to_word[i] for i in arr]"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return []\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    arr.sort()\n    arr.reverse()\n    return [name_lookup(num) for num in arr]\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    # Time complexity: O(n log n)\n    # Space complexity: O(n)\n    \n    n = len(arr)\n    if n == 0:\n        return []\n    \n    arr.sort()\n    arr.reverse()\n    \n    # Create a dictionary to map digits to their respective names\n    digit_to_name = {\n        0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', \n        6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'\n    }\n    \n    result = []\n    for digit in arr:\n        result.append(digit_to_name[digit])\n    \n    return result\n    \nif __name__ == '__main__':\n    # time and space:\n    print('\\n'.join(by_length([1, 9, 2, 9, 3, 9, 4, 9, 5, 9, 6, 9, 7, 9, 8, 9])))\n    print('\\n'.join(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    print('\\n'.join(by_length([9, 8, 7, 6, 5, 4, 3, 2, 1])))\n    print('\\n'.join(by_length([])))"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    if len(arr) > 0:\n        one = \"One\"\n        two = \"Two\"\n        three = \"Three\"\n        four = \"Four\"\n        five = \"Five\"\n        six = \"Six\"\n        seven = \"Seven\"\n        eight = \"Eight\"\n        nine = \"Nine\"\n        return [int(i) if i!= 9 else nine for i in reversed([one, two, three, four, five, six, seven, eight])]\n    else:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # 1) Create a dictionary with numbers as keys and their respective names as values\n    num_to_name = {1:'One', 2:'Two', 3:'Three', 4:'Four', 5:'Five', 6:'Six', 7:'Seven', 8:'Eight', 9:'Nine'}\n    \n    # 2) Get the sorted list\n    sorted_list = sorted(arr)\n    \n    # 3) Get the reversed list\n    reversed_list = list(reversed(sorted_list))\n    \n    # 4) Get the name list by using the reversed list and the dictionary\n    name_list = list(map(lambda x: num_to_name[x], reversed_list))\n    \n    # 5) Return the final name list\n    return name_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    f_list = []\n    if n == 1:\n        f_list = [1]\n    else:\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                f_list.append(factorial(i))\n            else:\n                f_list.append(sum(range(i+1)))\n    return f_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # write your code here\n    return [i for i in range(1,n+1) if i%2 == 0] + [sum(range(1,i+1)) for i in range(1,n+1) if i%2!= 0]\n    \n    \nif __name__ == '__main__':\n    print(f(5)"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return list(range(1,n*2,2)) + [sum(range(n,0,-2))]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    factorial_list = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            factorial_list.append(i * factorial_list[-1])\n        else:\n            factorial_list.append(sum(list(range(1, i+1))))\n    return factorial_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            result.append(reduce(lambda a, b: a*b, range(1, i+1)))\n        else:\n            result.append(sum(range(1,i+1)))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [i if i%2==0 else 1+sum(range(1,i+1)) for i in range(1,n+1)]\n    \n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not isinstance(n, int) or n < 1:\n        return \"n must be a positive integer!\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            result.append(reduce(lambda x,y: x*y, range(1,i+1)))\n        else:\n            result.append(reduce(lambda x,y: x+y, range(1,i+1)))\n    return result"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # check input\n    if not isinstance(n, int):\n        raise TypeError('n must be a positive integer.')\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return tuple(map(sum, [num % 2 for num in range(1, n+1)]))\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    odd_palindromes = 0\n    even_palindromes = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def is_palindrome(num):\n        num = str(num)\n        return num == num[::-1]\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n    return (odd_count, even_count)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    def num_palindromes(n):\n        return len([1 for i in range(1, n+1) if is_palindrome(i)])\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (even_odd_palindrome_naive(n),\n            even_odd_palindrome_fast(n))\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # O(n)\n    # check if the number is negative\n    if len(arr) == 0:\n        return 0\n    if arr[0] < 0:\n        arr.sort()\n        return sum(map(lambda x: len(str(x)) > 1, arr))\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([sum([int(j) for j in str(i) if int(j) >= 0]) for i in arr])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = 0\n    for num in arr:\n        if num > 0:\n            sum = 0\n            while num > 0:\n                sum += num % 10\n                num = num // 10\n            if sum > 0:\n                result += 1\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not arr:\n        return 0\n    return len([num for num in arr if num > 0 and sum(list(map(int, str(abs(num))))) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(1 for i in arr if i > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum(1 for x in arr if sum(map(int, str(abs(x)))) > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # return sum(digit_sum(n) > 0 for n in arr)\n    return sum(digit_sum(n) for n in arr)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum(\n        [1 for digit in map(int, str(abs(n))) if digit > 0]\n        for n in arr\n    )\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum(1 for n in arr if n >= 0 and count_digits(n) > 0)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #Add your code here\n    if len(arr)==0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if arr:\n        j = arr.index(min(arr))\n        arr = arr[j+1:] + arr[:j+1]\n        return arr == sorted(arr)\n    else:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return True\n    \n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n        \n    return True\n        \nprint(move_one_ball([3, 4, 5, 1, 2]))\nprint(move_one_ball([3, 5, 4, 1, 2]))"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    arr.sort()\n    for i in range(1,len(arr)):\n        if arr[i]<arr[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n = len(arr)\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    i = 0\n    while i < n:\n        if i == 0:\n            i = 1\n        if arr[i] >= arr[i-1]:\n            i += 1\n        else:\n            #arr[i-1] < arr[i]\n            j = i\n            while arr[j] > arr[i-1]:\n                j -= 1\n            arr[j], arr[i-1] = arr[i-1], arr[j]\n            i += 1\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not arr:\n        return True\n    # assumption: element at index '0' is largest\n    largest = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n    # largest element is in the index that we have to move to.\n    # Now if we right shift that index n times, then all the elements in\n    # the array will be shifted to right n times.\n    # If largest is in the index 'n', we can just remove it and then \n    # right shift the index '0' to the nth position.\n    # If largest is in the index '0', we have to put it at index 'n'\n    # and then right shift index '0' to the nth position.\n    # Now left shift all the elements of the array to left n times.\n    # If the value at the index 0 is less than or equal to the largest\n    # value in the array after shifting then return True else return False\n    if largest == arr[0]:\n        return True if move_one_ball([x for x in arr if x!= largest]) else False\n    elif largest == arr[-1]:\n        return True if move_one_ball([x for x in arr[::-1] if x!= largest]) else False\n    else:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    \n    if len(arr)==0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True\n    \n    \n    \nif __name__ == \"__main__\":\n    \n    print(move_one_ball([3, 4, 5, 1, 2]))\n    print(move_one_ball([3, 5, 4, 1, 2]))\n    print(move_one_ball([1, 2, 3, 4, 5]))\n    print(move_one_ball([2, 3, 4, 1, 5]))\n    print(move_one_ball([]))\n    "
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not arr: return True\n    if len(arr) == 1: return True\n    return is_sorted(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # code here\n    stack = []\n    for num in arr:\n        if not stack:\n            stack.append(num)\n        else:\n            while stack and stack[-1] < num:\n                stack.pop()\n            stack.append(num)\n    return True if not stack else False\n    "
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst1.sort()\n    lst2.sort()\n    if lst1 == lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Your code here\n    lst1.sort()\n    lst2.sort()\n    if lst1[0] % 2 == 0:\n        lst1[0] = lst1[0] + 1\n    if lst2[0] % 2 == 0:\n        lst2[0] = lst2[0] + 1\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if is_even(lst1) and is_even(lst2):\n        return \"YES\"\n    elif is_odd(lst1) and is_odd(lst2):\n        return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # TODO: Write your solution here\n    if lst1 == lst2:\n        return \"YES\"\n    else:\n        lst1_even = []\n        lst2_even = []\n        for item in lst1:\n            if item % 2 == 0:\n                lst1_even.append(item)\n        for item in lst2:\n            if item % 2 == 0:\n                lst2_even.append(item)\n        return \"YES\" if lst1_even == lst2_even else \"NO\"\n    # return solution\n    \n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # this is a standard data structure.\n    # we go through every element in list1 and check if it is even\n    # if we find one that is odd, then return no\n    # if every element is even, then return yes\n    for item in lst1:\n        if item%2!=0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Write your code here\n    if len(lst1) == len(lst2):\n        for num in lst2:\n            if num % 2 == 1:\n                return \"NO\"\n        for num in lst1:\n            if num % 2!= 0:\n                return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for num in lst1:\n        if num % 2!= 0:\n            return 'NO'\n    for num in lst2:\n        if num % 2!= 0:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for x in lst2:\n        if x % 2 == 1:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for item in lst1:\n        if item % 2!= 0:\n            return \"NO\"\n    for item in lst2:\n        if item % 2!= 0:\n            return \"NO\"\n    for index in range(0, len(lst1)):\n        for item in lst2:\n            if item % lst1[index]!= 0:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(test)==0:\n        return {}\n    elif len(test.split())==1:\n        return {test:1}\n    else:\n        result=test.split()\n        result.sort()\n        counter=0\n        tmp=[]\n        for word in result:\n            if word not in tmp:\n                tmp.append(word)\n                counter=1\n            elif word in tmp:\n                counter=counter+1\n        if counter==1:\n            return {tmp[0]:counter}\n        else:\n            return {tmp[0]:counter}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    d = {}\n    test = test.lower()\n    for i in test:\n        d[i] = test.count(i)\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    histogram = {}\n    letters = test.split()\n    \n    for l in letters:\n        histogram[l] = histogram.get(l, 0) + 1\n        \n    max_rep = 0\n    max_rep_letters = []\n    \n    for l in histogram:\n        if histogram[l] > max_rep:\n            max_rep = histogram[l]\n            max_rep_letters = []\n            max_rep_letters.append(l)\n        elif histogram[l] == max_rep:\n            max_rep_letters.append(l)\n        \n    return max_rep_letters\n    \nif __name__ == '__main__':\n    print(histogram('a b c'))\n    print(histogram('a b b a'))\n    print(histogram('a b c a b'))\n    print(histogram('b b b b a'))\n    print(histogram('')"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    words = test.split()\n    if not words:\n        return {}\n    d = dict()\n    for letter in words[0]:\n        d[letter] = words.count(letter)\n    return d"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if test == '':\n        return {}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    letters = test.split()\n    dictionary = {}\n    for letter in letters:\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        else:\n            dictionary[letter] = dictionary[letter] + 1\n    return dictionary\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    test_list = list(test.split(' '))\n    test_list = [i.lower() for i in test_list]\n    \n    letters = set(test_list)\n    letter_dict = {}\n    \n    for letter in letters:\n        counter = 0\n        for i in test_list:\n            if i == letter:\n                counter += 1\n        letter_dict[letter] = counter\n    \n    highest_occurrence = 0\n    for key, value in letter_dict.items():\n        if value > highest_occurrence:\n            highest_occurrence = value\n            highest_letter = key\n        elif value == highest_occurrence:\n            highest_occurrence = value\n            highest_letter = key\n            \n    return letter_dict\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    hist = {}\n    #make a list of the letters\n    lst = list(test.split())\n    #make a loop to go through the list\n    for i in lst:\n        #if the letter is not in the list, add it\n        if i not in hist:\n            hist[i] = 1\n        #if the letter is in the list, add one to the count\n        else:\n            hist[i] += 1\n    #return the dictionary\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    d = {}\n    for i in test:\n        d[i] = d.get(i, 0) + 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # your code here\n    dictionary = {}\n    for i in test:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    maxi = 0\n    list_of_max = []\n    for i in dictionary.keys():\n        if dictionary[i] > maxi:\n            maxi = dictionary[i]\n            list_of_max = [i]\n        elif dictionary[i] == maxi:\n            list_of_max.append(i)\n    dictionary_of_max = {}\n    for i in list_of_max:\n        dictionary_of_max[i] = dictionary[i]\n    return dictionary_of_max\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # your code here\n    result = []\n    for i in s:\n        if i in c:\n            result.pop()\n        else:\n            result.append(i)\n    return (''.join(result), True)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    d = {}\n    for i in range(len(c)):\n        if c[i] not in d:\n            d[c[i]] = 1\n        else:\n            d[c[i]] += 1\n    l = len(s)\n    s1 = s[:l]\n    # print(s1)\n    for key in d:\n        count = 0\n        for i in range(l-1):\n            if s1[i] == key:\n                count += 1\n        if d[key] > count:\n            s1 = s1[:l-d[key]]\n    # print(s1)\n    flag = False\n    if s1 == s1[::-1]:\n        flag = True\n    return (s1,flag)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = list(s)\n    for i in range(len(s)):\n        if s[i] in c:\n            result.pop(i)\n    return (result,bool(result==reversed(result)))\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    res = \"\"\n    for i in s:\n        if i not in c:\n            res += i\n    if res == res[::-1]:\n        return (res, True)\n    else:\n        return (res, False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = []\n    for i in s:\n        if i not in c:\n            res.append(i)\n    print(res)\n    return (''.join(res), True if ''.join(res) == ''.join(res[::-1]) else False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_s = ''\n    for i in s:\n        if i not in c:\n            new_s += i\n    return (new_s, new_s == new_s[::-1])\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if c in s:\n        return reverse(s.replace(c,\"\")), reverse_check(s.replace(c,\"\"))\n    return s, False\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if s == '' or c == '':\n        return (s,True)\n    else:\n        if s[0] in c:\n            return reverse_delete(s[1:],c)\n        else:\n            return (s[0] + reverse_delete(s[1:],c)[0],reverse_delete(s[1:],c)[1])\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    output = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2!= 0:\n                count += 1\n        output.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(i) + \" of the \" + str(i) + \"nput.\")\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    output = []\n    for elem in lst:\n        odd_count = 0\n        for char in elem:\n            if char.isdigit():\n                if int(char) % 2 == 1:\n                    odd_count += 1\n        output.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(odd_count) + \"ng \" + str(odd_count) + \" of the \" + str(odd_count) + \"nput.\")\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    res = []\n    for s in lst:\n        odd = 0\n        for ch in s:\n            if ch in '0123456789':\n                if int(ch) % 2 == 1:\n                    odd += 1\n        res.append(f'the number of odd elements {odd}n the str{len(s)}ng {len(s)} of the {len(lst)}nput.')\n    return res\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    for num in lst:\n        count = 0\n        for digit in num:\n            if int(digit) % 2 == 1:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {num}nput.\")\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [f'{len([char for char in str_lst[i] if int(char) % 2!= 0])}'\n            for i in range(len(lst))]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [str(len([i for i in j if int(i)%2 == 1])) for j in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [f\"the number of odd elements {len(s)} the {len(s)} of the {n}input.\" for n, s in enumerate(lst)]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #outlst = []\n    #for i in range(len(lst)):\n    #    outlst.append(count_odd_nums(lst[i]))\n    #return outlst\n    #return [count_odd_nums(num) for num in lst]\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([i for i in num if int(i) % 2 == 1]), len([i for i in num if int(i) % 2 == 1]), len([i for i in num if int(i) % 2 == 1]), len([i for i in num if int(i) % 2 == 1])) for num in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #pass\n    n = 0\n    lst1 = []\n    for i in lst:\n        for j in i:\n            if int(j) % 2!= 0:\n                n += 1\n        lst1.append(n)\n        n = 0\n    return [\"the number of odd elements \" + str(n) + \"n the str\" + str(n) + \"ng \" + str(n) + \" of the \" + str(n) + \"nput.\" for n in lst1]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [f\"the number of odd elements {count_odd(s)}n the {s} of the {s}nput.\" for s in lst]"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sum_so_far = min(nums)\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            temp_sum = sum(nums[i:j+1])\n            sum_so_far = min(temp_sum, sum_so_far)\n    return sum_so_far\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # init minimum sum\n    minSum = float('inf')\n    # init left and right\n    left, right = 0, 0\n    # iterate nums\n    for i, num in enumerate(nums):\n        # add num to minimum sum\n        minSum = min(minSum, num)\n        # when minimum sum is bigger than current num\n        if minSum > num:\n            # set left as previous index\n            left = i\n            # set right as current index\n            right = i\n        # when minimum sum is smaller than or equal to current num\n        else:\n            # set right as current index\n            right = i\n    # return minimum sum\n    return minSum if left == 0 else sum(nums[left:right+1])\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    min_sum = 10 ** 9 + 7\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            if current_sum >= min_sum:\n                break\n            min_sum = min(min_sum, current_sum)\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    nums_sum = sum(nums)\n    print(nums_sum)\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        left, right = i, i + 1\n        print(\"left:\", left, \"right:\", right)\n        while right < len(nums) and left >= 0:\n            print(\"left:\", left, \"right:\", right, \"nums_sum:\", nums_sum)\n            if nums_sum - (nums[right] + nums[left]) >= min_sum:\n                min_sum = nums_sum - (nums[right] + nums[left])\n                print(\"min_sum:\", min_sum)\n                left -= 1\n            right += 1\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: Solve\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    min_sum = sys.maxsize\n    sum = 0\n    for num in nums:\n        sum += num\n        if sum < min_sum:\n            min_sum = sum\n        if sum >= 0:\n            min_sum = min(min_sum,sum)\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # trivial case\n    if len(nums) == 1:\n        return nums[0]\n    # initialize local variables\n    min_sum = nums[0]\n    start = 0\n    end = 0\n    # iterate over nums\n    while start < len(nums):\n        # if sum of subarray is positive\n        if min_sum <= 0:\n            # start new subarray\n            start = end\n            end = start\n        # if sum of subarray is negative\n        elif min_sum > 0:\n            # add subarray sum to minimum sum\n            min_sum += nums[end]\n            # increment end pointer\n            end += 1\n        # if sum of subarray is 0\n        if min_sum == 0:\n            # break\n            break\n    # return minimum sum\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(nums) == 0:\n        return 0\n    total = min(nums)\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        if total < 0:\n            total = nums[i]\n        else:\n            total += nums[i]\n        min_sum = min(total, min_sum)\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    left, right, result = 0, 0, float('inf')\n    total = 0\n    while right < len(nums):\n        total += nums[right]\n        while total >= nums[left]:\n            result = min(result, total - nums[left])\n            total -= nums[left]\n            left += 1\n        right += 1\n    return result\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def bfs(grid, bucket_capacity):\n        \"\"\"\n        Algorithm:\n            - Calculate the minimum amount of moves needed to empty the well\n        \"\"\"\n        queue = [0]\n        visited = [[False for _ in row] for row in grid]\n        visited[0][0] = True\n        # visited[-1][-1] = True\n        # visited[0][-1] = True\n        # visited[0][0] = True\n        while queue:\n            curr = queue.pop()\n            if curr == (len(grid) - 1, len(grid[0]) - 1):\n                return len(grid) * len(grid[0])\n            for x, y in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n                nextX = x + curr[0]\n                nextY = y + curr[1]\n                if not (0 <= nextX < len(grid) and 0 <= nextY < len(grid[0])):\n                    continue\n                if visited[nextX][nextY]:\n                    continue\n                if grid[nextX][nextY] == 0:\n                    continue\n                if grid[nextX][nextY] == 1:\n                    grid[nextX][nextY] = 0\n                    visited[nextX][nextY] = True\n                    queue.append((nextX, nextY))\n                    continue\n                if grid[nextX][nextY] == -1:\n                    continue\n                # if grid[nextX][nextY] == -1:\n                #     grid[nextX][nextY] = 0\n                #     visited[nextX][nextY] = True\n                #     queue.append((nextX, nextY))\n                #     continue\n                if grid[nextX][nextY] == 0:\n                    continue\n                amount = math.ceil((grid[nextX][nextY] - 1) / bucket_capacity)\n                grid[nextX][nextY] = grid[nextX][nextY] - amount * bucket_capacity\n                visited[nextX][nextY] = True\n                queue.append((nextX, nextY))\n        return None\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Get the number of rows, and the number of columns in the grid\n    # Get the number of wells\n    rows = len(grid)\n    cols = len(grid[0])\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def solve_problem(grid, capacity):\n        \"\"\"\n        Solves the problem and returns the solution\n        \"\"\"\n        return max_fill_brute_force(grid, capacity)\n    \n    def max_fill_brute_force(grid, capacity):\n        \"\"\"\n        Brute force solution for the Max Fill problem.\n        \"\"\"\n        # if it is a single well, we don't need to do anything\n        # and we return the amount of times we need to lower the buckets\n        if len(grid) == 1:\n            return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    wells_count = len(grid)\n    wells_length = len(grid[0])\n    row_count = len(grid)\n    column_count = len(grid[0])\n    if wells_length == 1:\n        return 0\n    # sum of all grid cells\n    total = sum(sum(row) for row in grid)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    row_length = len(grid[0])\n    col_length = len(grid)\n    rows = []\n    cols = []\n    for i in range(col_length):\n        for j in range(row_length):\n            if grid[i][j] == 1:\n                rows.append(i)\n                cols.append(j)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def is_valid_well(well, grid, capacity):\n        # check if well is valid\n        well_len = len(well)\n        well_total = sum(well)\n        if well_total > capacity:\n            return False\n        for i in range(well_len - 1):\n            if well[i + 1] - well[i] > capacity:\n                return False\n        # check if well is rectangular\n        unique_well = set(well)\n        if len(unique_well)!= well_len:\n            return False\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def num_times_to_lower(grid, bucket_capacity):\n        row_count = len(grid)\n        col_count = len(grid[0])\n        # assuming 1 <= bucket_capacity\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def get_cost(grid, bucket_capacity):\n        n_wells = len(grid)\n        m_wells = len(grid[0])\n        n_buckets = int(math.sqrt(n_wells))\n        wells_idx = [[i,j] for i in range(n_wells) for j in range(m_wells)]\n        wells = [0] * len(wells_idx)\n        buckets_idx = [[i,j] for i in range(n_buckets) for j in range(n_buckets)]\n        buckets = [0] * len(buckets_idx)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    m, n = len(grid), len(grid[0])\n    \n    dp = [[float(\"inf\") for _ in range(n)] for _ in range(m)]\n    dp[0][0] = 0\n    \n    for i in range(1, m):\n        if grid[i][0] == 1:\n            dp[i][0] = dp[i-1][0] + 1\n        else:\n            dp[i][0] = dp[i-1][0]\n    for j in range(1, n):\n        if grid[0][j] == 1:\n            dp[0][j] = dp[0][j-1] + 1\n        else:\n            dp[0][j] = dp[0][j-1]\n    \n    for i in range(1, m):\n        for j in range(1, n):\n            if grid[i][j] == 1:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m-1][n-1]\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def helper(i,j, m, n, buckets, dp):\n        if (i,j) in dp:\n            return dp[(i,j)]\n        if (m == 0 or n == 0):\n            dp[(i,j)] = 0\n            return 0\n        if i == m-1 and j == n-1:\n            if buckets[i][j] > 0:\n                dp[(i,j)] = 1\n                return 1\n            else:\n                dp[(i,j)] = 0\n                return 0\n        if buckets[i][j] > 0:\n            left = helper(i,j+1,m,n, buckets, dp)\n            down = helper(i+1,j,m,n, buckets, dp)\n            dp[(i,j)] = min(left, down) + 1\n            return min(left, down) + 1\n        else:\n            dp[(i,j)] = 0\n            return 0\n    m = len(grid)\n    n = len(grid[0])\n    buckets = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            buckets[i][j] = grid[i][j]\n    dp = {}\n    helper(0,0,m,n,buckets, dp)\n    return dp[(0,0)]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    import sys\n    from operator import itemgetter\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sorted_arr = sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return sorted_arr\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(arr, key = lambda x: bin(x).count('1'))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    arr_list = []\n    for item in arr:\n        arr_list.append([binary_value(item), item])\n    arr_list.sort(key=lambda x: (x[0], x[1]))\n    return [x[1] for x in arr_list]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # your code here\n    return []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Write your code here\n    # split the string using space as the separator\n    # and then get the first n words from the list\n    #return list(map(lambda x: x.split(' ')[0], s.split(' ')[:n]))\n    #return [x.split(' ')[0] for x in s.split(' ') if len(x) > n]\n    return list(filter(lambda x: len(x) == n, s.split(' ')))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [i for i in s.split() if len([j for j in i if j.isalpha()]) == n]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def is_consonant(s):\n        return s in 'bcdfghjklmnpqrstvwxyz'\n    res = []\n    for word in s.split():\n        if sum([is_consonant(ch) for ch in word]) == n:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    words = []\n    if not s:\n        return words\n    if n <= 0:\n        return words\n    words = s.split(\" \")\n    # Find words with exactly n consonants\n    for word in words:\n        if not word:\n            continue\n        consonant_count = 0\n        for letter in word:\n            if not letter.isalpha() and not letter.isspace():\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # your code here\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            if consonants(s[i+1:]) == n:\n                l.append(s[i+1:])\n    return l\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert s,'s cannot be an empty string.'\n    assert n > 0, 'n must be a natural number.'\n    words = []\n    n_consonants = 0\n    s_list = s.split()\n    for word in s_list:\n        if len(word) == n:\n            n_consonants = 0\n            for letter in word:\n                if letter.lower() not in 'aeiou':\n                    n_consonants += 1\n            if n_consonants == n:\n                words.append(word)\n        else:\n            pass\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = s.lower()\n    lst = []\n    words = s.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    for index, letter in enumerate(reversed(word)):\n        if letter.lower() in 'aeiouy':\n            return word[len(word) - index - 1]\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(len(word)):\n        if word[i] in VOWELS and word[i-1] not in CONSONANTS and word[i+1] not in CONSONANTS:\n            return word[i]\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(len(word) - 1):\n        if word[i] in \"aeiou\" and word[i + 1] not in \"aeiou\":\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return '"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    found = False\n    closest_vowel = \"\"\n    for i in range(len(word) - 1):\n        if word[i].lower() not in \"aeiou\" and word[i + 1].lower() not in \"aeiou\":\n            continue\n        if word[i].lower() not in \"aeiou\" and word[i + 1].lower() in \"aeiou\":\n            found = True\n            closest_vowel = word[i + 1]\n            break\n        if word[i].lower() in \"aeiou\" and word[i + 1].lower() not in \"aeiou\":\n            found = True\n            closest_vowel = word[i]\n            break\n    if not found:\n        return \"\"\n    i = 0\n    while True:\n        if word[i].lower() == closest_vowel:\n            return word[i]\n        i += 1\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowel_str = 'AEIOUaeiou'\n    vowel_list = []\n    for index, char in enumerate(word):\n        if char in vowel_str:\n            vowel_list.append(index)\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for index, char in enumerate(word):\n        if char not in vowels:\n            continue\n        else:\n            index_cons = len(word) - 1 - index\n            for i in range(index_cons):\n                if word[index_cons - i] in vowels:\n                    continue\n                else:\n                    return word[index_cons - i]\n            return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    last_idx = -1\n    for idx, char in enumerate(reversed(word)):\n        if char not in \"aeiou\":\n            last_idx = idx\n            break\n    if last_idx == -1: return \"\"\n    first_idx = last_idx\n    while word[last_idx] not in \"aeiou\":\n        last_idx -= 1\n    return word[first_idx:last_idx:-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def match_parens_helper(lst):\n        for index, item in enumerate(lst):\n            if '(' in item:\n                return match_parens_helper(lst[:index] + ['('] + ['('] + lst[index+1:]) or match_parens_helper(lst[:index+1] + [')'] + ['('] + lst[index+2:])\n        return 'Yes'\n    return match_parens_helper(lst)\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def is_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append('(')\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # your code here\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 'Yes' if lst[0] + lst[1] == lst[1] + lst[0] else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst) == 1:\n        return 'Yes'\n    else:\n        return_value = 'No'\n        for item in lst:\n            stack = []\n            if not item:\n                return 'No'\n            for char in item:\n                if char == '(':\n                    stack.append(char)\n                else:\n                    if not stack:\n                        return 'No'\n                    else:\n                        stack.pop()\n            if stack:\n                return 'No'\n            return_value = 'Yes'\n        return return_value\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = []\n    for pair in lst:\n        res.append(pair.count('(') - pair.count(')'))\n    if sum(res) == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Your code here\n    if lst[0] == ')':\n        return 'No'\n    if lst[0][0] == '(':\n        return 'No'\n    if lst[0][-1] == ')':\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for i in lst:\n        if i == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Brute force:\n    # Check the list of strings and for each string, check if it is good.\n    # Time complexity: O(n^2)\n    # Space complexity: O(1)\n    if not lst:\n        return 'Yes'\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    import heapq\n    if k == 0:\n        return []\n    if len(arr) < k:\n        return []\n    heap = arr[0:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if -arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -arr[i])\n    heapq.heapify(heap)\n    return [-n for n in heap]"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(arr) < k:\n        return []\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if k == 1:\n        return [max(arr)]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(arr, reverse=True)[:k]"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i, j = 0, len(arr) - 1\n    while i <= j:\n        pivot = partition(arr, i, j)\n        if pivot == k - 1:\n            return arr[pivot]\n        elif pivot > k - 1:\n            j = pivot - 1\n        else:\n            i = pivot + 1\n    return arr[:k]\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return sum(i for i in lst if i%2==0)\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = 0\n    index = 0\n    for number in lst:\n        if number % 2 == 1 and index % 2 == 0:\n            result += number\n        index += 1\n    return result"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    return sum(i for i in lst[::2] if i % 2!= 0"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([lst[i] for i in range(1,len(lst),2)])\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum=0\n    for i in lst:\n        if i%2!=0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    sum=0\n    for i in range(len(lst)):\n        if(i%2==0):\n            sum=sum+lst[i]\n    return sum\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return 0\n    counter = 1\n    sum = 0\n    while counter < len(lst):\n        if lst[counter] % 2 == 0:\n            sum += lst[counter]\n        counter += 1\n    return sum"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    evens_sum = 0\n    odds_sum = 0\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return sum(el for ind, el in enumerate(lst) if ind % 2 and el % 2)"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    odd_elems = filter(lambda x: x % 2!= 0, lst)\n    even_elems = filter(lambda x: x % 2 == 0, lst)\n    return sum(odd_elems) - sum(even_elems)\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    total = 0\n    for i in range(0, k):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([i for i in arr[:k] if len(str(i)) <= 2])\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    running_sum = 0\n    start = k\n    for i in range(start, len(arr)):\n        running_sum += arr[i]\n    return running_sum\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    prefix_sum = [0]\n    for i in range(len(arr)):\n        prefix_sum.append(prefix_sum[-1] + arr[i])\n    # print(prefix_sum)\n    prefix_sum = prefix_sum[:k+1]\n    # print(prefix_sum)\n    res = 0\n    for i in range(k+1):\n        # print(prefix_sum[i])\n        res = res + prefix_sum[i+1] - prefix_sum[i]\n    return res\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    pass\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # brute force\n    # total = 0\n    # for i in range(k):\n    #     total += arr[i]\n    # return total\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    arr = arr[:k]\n    return sum(map(lambda x: x if len(str(x)) < 3 else 0, arr))\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(int(x) for x in arr[:k] if len(str(x)) <= 2)\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([arr[i] for i in range(k) if len(str(arr[i])) <= 2])"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([x for x in arr[:k] if x < 100])\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = 3*n+1\n        result.append(n)\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert is_positive_integer(n) and n > 0\n    return sorted(filter(lambda x: x % 2!= 0, collatz(n)))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if not isinstance(n,int) or n<=0:\n        raise ValueError(f'n must be a positive integer and n={n} is not valid')\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert n > 0, \"n must be a positive integer.\"\n    collatz = [n]\n    while n!= 1:\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n        collatz.append(int(n))\n    return sorted(list(set(collatz)))"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return [1, n] + get_odd_collatz(3 * n + 1 if n % 2 else n / 2)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    collatz_seq = []\n    collatz_seq.append(n)\n    while n!= 1:\n        if n % 2 == 0:\n            n = n/2\n            collatz_seq.append(int(n))\n        else:\n            n = 3*n + 1\n            collatz_seq.append(int(n))\n    return sorted(list(set(collatz_seq)))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    collatz = []\n    collatz.append(n)\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n            collatz.append(int(n))\n        else:\n            n = 3*n + 1\n            collatz.append(int(n))\n    collatz.sort()\n    return collatz\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 1:\n        return [1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # TO IMPLEMENT\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if date == \"\":\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    months = {'January': 31, 'February': 28, 'March': 31, 'April': 30, 'May': 31, 'June': 30, 'July': 31, 'August': 31, 'September': 30, 'October': 31, 'November': 30, 'December': 31}\n    \n    if date == '':\n        return False\n    else:\n        date_list = date.split('-')\n        if len(date_list[0]) < 2 or len(date_list[1]) < 2 or len(date_list[2]) < 4:\n            return False\n        if int(date_list[0]) in range(1,13) and int(date_list[1]) in range(1,32) and date_list[0] in months:\n            if int(date_list[0]) == 2 and int(date_list[1]) in range(1,29) and int(date_list[2]) in range(0,100):\n                return True\n            elif int(date_list[0]) in [1,3,5,7,8,10,12] and int(date_list[1]) in range(1,32):\n                return True\n            elif int(date_list[0]) in [4,6,9,11] and int(date_list[1]) in range(1,31):\n                return True\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if date == '':\n        return False\n    if date.count('-')!= 2:\n        return False\n    month, day, year = date.split('-')\n    try:\n        month, day, year = int(month), int(day), int(year)\n    except:\n        return False\n    if not (1 <= month <= 12):\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12) and (1 <= day <= 31):\n        return True\n    if month in (4, 6, 9, 11) and (1 <= day <= 30):\n        return True\n    if month == 2 and (1 <= day <= 28):\n        return True\n    return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    try:\n        dt = datetime.datetime.strptime(date, \"%m-%d-%Y\")\n        if dt.year < 1900 or dt.year > 2999:\n            return False\n        if dt.month < 1 or dt.month > 12:\n            return False\n        if dt.day < 1 or dt.day > 31:\n            return False\n        if dt.month in (1,3,5,7,8,10,12) and dt.day > 31:\n            return False\n        elif dt.month in (4,6,9,11) and dt.day > 30:\n            return False\n        elif dt.month == 2 and dt.day > 29:\n            return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    # date_l = date.split(\"-\")\n    # if date_l[0] == \"\" or date_l[1] == \"\" or date_l[2] == \"\":\n    #     return False\n    # \n    # if date_l[0] == \"2\":\n    #     if int(date_l[1]) > 0 and int(date_l[1]) < 3:\n    #         if int(date_l[2]) > 0 and int(date_l[2]) < 32:\n    #             return True\n    #     else:\n    #         return False\n    #     \n    # if int(date_l[0]) > 0 and int(date_l[0]) < 13:\n    #     if int(date_l[0]) == 1:\n    #         if int(date_l[1]) > 0 and int(date_l[1]) < 4:\n    #             if int(date_l[2]) > 0 and int(date_l[2]) < 31:\n    #                 return True\n    #             else:\n    #                 return False\n    #         else:\n    #             return False\n    #     if int(date_l[0]) == 3:\n    #         if int(date_l[1]) > 0 and int(date_l[1]) < 6:\n    #             if int(date_l[2]) > 0 and int(date_l[2]) < 32:\n    #                 return True\n    #             else:\n    #                 return False\n    #         else:\n    #             return False\n    #     if int(date_l[0]) == 5:\n    #         if int(date_l[1]) > 0 and int(date_l[1]) < 9:\n    #             if int(date_l[2]) > 0 and int(date_l[2]) < 31:\n    #                 return True\n    #             else:\n    #                 return False\n    #         else:\n    #             return False\n    #     if int(date_l[0]) == 7:\n    #         if int(date_l[1]) > 0 and int(date_l[1]) < 10:\n    #             if int(date_l[2]) > 0 and int(date_l[2]) < 32:\n    #                 return True\n    #             else:\n    #                 return False\n    #         else:\n    #             return False\n    #     if int(date_l[0]) == 8:\n    #         if int(date_l[1]) > 0 and int(date_l[1]) < 11:\n    #             if int(date_l[2]) > 0 and int(date_l[2]) < 32:\n    #                 return True\n    #             else:\n    #                 return False\n    #         else:\n    #             return False\n    #     if int(date_l[0]) == 10:\n    #         if int(date_l[1]) > 0 and int(date_l[1]) < 12:\n    #             if int(date_l[2]) > 0 and int(date_l[2]) < 32:\n    #                 return True\n    #             else:\n    #                 return False\n    #         else:\n    #             return False\n    #     if int(date_l[0]) == 12:\n    #         if int(date_l[1]) > 0 and int(date_l[1]) < 12:\n    #             if int(date_l[2]) > 0 and int(date_l[2]) < 32:\n    #                 return True\n    #             else:\n    #                 return False\n    #         else:\n    #             return False\n    #     else:\n    #         return False\n    # else:\n    #     return False\n    \n    month_map = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    \n    if \"-"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    months = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}\n    months_30 = [1, 3, 5, 7, 8, 10, 12]\n    months_31 = [4, 6, 9, 11]\n    date_list = date.split('-')\n    if len(date_list)!= 3:\n        return False\n    month = date_list[0]\n    day = date_list[1]\n    year = date_list[2]\n    day_count = 0\n    month_count = 0\n    if day[0] == '0':\n        day = day[1]\n    if month[0] == '0':\n        month = month[1]\n    if int(day) < 1 or int(day) > 31:\n        return False\n    if int(month) > 12:\n        return False\n    if int(month) < 1:\n        return False\n    if int(day) > 30:\n        if int(month) in months_31:\n            return False\n    if int(day) > 29:\n        if int(month) == 2:\n            return False\n    if int(year) < 1000:\n        return False\n    if int(month) in months_30:\n        if int(day) > 30:\n            return False\n    if int(month) in months_31:\n        if int(day) > 31:\n            return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    months = ['january','february','march','april','may','june','july','august','september','october','november','december']\n    months_dict = {'january':31,'february':28,'march':31,'april':30,'may':31,'june':30,'july':31,'august':31,'september':30,'october':31,'november':30,'december':31}\n    date = date.split(\"-\")\n    if date[0] == '' or date[1] == '' or date[2] == '':\n        return False\n    elif int(date[0]) > 12 or int(date[0]) < 1 or int(date[1]) > 31 or int(date[1]) < 1 or int(date[2]) < 1:\n        return False\n    elif int(date[1]) > months_dict[months[int(date[0])-1]] or int(date[0]) > 12 or int(date[0]) < 1 or int(date[1]) < 1:\n        return False\n    elif int(date[1]) > 30 and int(date[0]) == 2:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l = date.split(\"-\")\n    if len(l)!= 3:\n        return False\n    for i in range(1, 3):\n        if not l[i].isdigit() or not(1 <= int(l[i]) <= 12):\n            return False\n    for i in range(3):\n        if not l[i].isdigit() or not(1 <= int(l[i]) <= 31):\n            return False\n    for i in range(3):\n        if not l[i].isdigit() or not(1 <= int(l[i]) <= 30):\n            return False\n    for i in range(3):\n        if not l[i].isdigit() or not(1 <= int(l[i]) <= 29):\n            return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    months = {'1':'January', '2':'February', '3':'March', '4':'April', '5':'May', '6':'June', '7':'July', '8':'August', '9':'September', '10':'October', '11':'November', '12':'December'}\n    try:\n        if len(date) == 0:\n            return False\n        if len(date)!= 10:\n            return False\n        month, day, year = date.split('-')\n        if int(month) < 1 or int(month) > 12:\n            return False\n        if int(day) < 1 or int(day) > days_in_months[int(month)-1]:\n            return False\n        if int(year) < 1970 or int(year) > 2020:\n            return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return None\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # split on whitespace\n    # split on comma\n    # return the number of letters that are odd\n    return \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # txt.split()\n    # return txt.split()\n    # print(txt)\n    # print(txt.split())\n    # print(txt.split(\",\"))\n    # print(txt.split(\".\"))\n    # print(txt.split(\"!\"))\n    # print(txt.split(\" \"))\n    # print(txt.split(\" \"))\n    # return txt.split()\n    return list(txt.split(\" \"))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = txt.split()\n    l = []\n    for i in s:\n        l.append(i)\n    return l\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"abcdef\") == 3\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if'' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([1 for i in 'abcdefghijklmnopqrstuvwxyz' if i in txt])\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return re.split('\\s+|,',txt)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst = list(lst)\n    lst.sort()\n    return lst == lst[::-1]\n    # pass\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # lst = [1, 2, 2, 3, 3, 4]\n    lst.sort()\n    if lst == sorted(lst):\n        return True\n    return False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) <= 1:\n        return True\n    prev = lst[0]\n    for i in range(len(lst)-1):\n        if prev > lst[i+1]:\n            return False\n        else:\n            prev = lst[i+1]\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) <= 1:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n            else:\n                continue\n        return True\n        \n        \n        \n    # Add your code here.\n    \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(lst) <= 1:\n        return True\n    prev = lst[0]\n    lst.sort()\n    for num in lst:\n        if prev == num:\n            return False\n        else:\n            prev = num\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    \n    \n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    prev = lst[0]\n    for i in range(1, len(lst)):\n        if prev > lst[i]:\n            return False\n        prev = lst[i]\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    # Your code here\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(set(lst)) == len(lst):\n        return True\n    return False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return True if len(set(lst)) == len(lst) else False\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Insert your code here\n    s1, e1 = interval1\n    s2, e2 = interval2\n    \n    if s1 < s2 < e1 and s2 < e1 < e2:\n        return 'YES'\n    if s1 > s2 > e1 and s2 > e1 > e2:\n        return 'YES'\n    if s1 < s2 < e1 and s2 > e1 > e2:\n        return 'YES'\n    if s1 > s2 > e1 and s2 < e1 < e2:\n        return 'YES'\n    if s1 == s2 and e1 == e2:\n        return 'YES'\n    if s1 == s2 and e1 < e2:\n        return 'YES'\n    if s1 > s2 and e1 == e2:\n        return 'YES'\n    if s1 < s2 and e1 == e2:\n        return 'YES'\n    return 'NO'\n    \n    \nif __name__ == \"__main__\":\n    print(intersection((1, 2), (2, 3)))\n    print(intersection((-1, 1), (0, 4)))\n    print(intersection((-3, -1), (-5, 5)))\n    print(intersection((-1, 1), (0, 2)))\n    print(intersection((0, 2), (-1, 1)))\n    \n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # (1, 2) and (2, 3)\n    # (1, 2) & (2, 3)\n    # (-5, 5) & (-3, 3)\n    # (-5, 5) & (-5, 5)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    # (-3, 3) & (-3, 3)\n    "
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"NO\"\n    \nif __name__ == \"__main__\":\n    print(intersection((1, 2), (2, 3)))\n    print(intersection((-1, 1), (0, 4)))\n    print(intersection((-3, -1), (-5, 5)))\n    "
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # interval1 = [1,2]\n    # interval2 = [2,3]\n    # interval1 = [0,5]\n    # interval2 = [0,3]\n    # interval1 = [1,4]\n    # interval2 = [2,5]\n    # interval1 = [1,2]\n    # interval2 = [3,5]\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # your code here\n    return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n    #     return \"NO\"\n    # if interval1[1] >= interval2[0] and interval2[1] >= interval1[0]:\n    #     return \"YES\"\n    # if interval1[1] >= interval2[0] and interval2[1] >= interval1[0]:\n    #     return \"YES\"\n    # return \"NO\"\n    return \"YES\" if (interval1[1] >= interval2[0] and interval2[1] >= interval1[0]) else \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    def check(a, b):\n        if a == b:\n            return \"YES\"\n        if is_prime(abs(a - b)):\n            return \"YES\"\n        return \"NO\"\n    \n    return check(*interval1, *interval2)"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Please, use `interval1 <= interval2` to check whether `interval1` is covered by `interval2`.\n    return \"YES\" if interval1[1] <= interval2[0] else \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    start_interval1, end_interval1 = interval1\n    start_interval2, end_interval2 = interval2\n    if start_interval1 <= start_interval2 <= end_interval1 or start_interval2 <= start_interval1 <= end_interval2:\n        return \"YES\"\n    elif start_interval1 >= start_interval2 and end_interval1 <= end_interval2:\n        return \"YES\"\n    elif start_interval1 <= start_interval2 and end_interval1 >= end_interval2:\n        return \"YES\"\n    elif start_interval1 >= start_interval2 and end_interval1 >= end_interval2:\n        return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    intersect = set(range(interval1[0], interval1[1]+1)).intersection(set(range(interval2[0], interval2[1]+1)))\n    if len(intersect) == 0:\n        return \"NO\"\n    for i in intersect:\n        if is_prime(i):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return None\n    else:\n        result = 1\n        for i in arr:\n            result *= i\n        return sum(abs(i) for i in arr) * result\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return None if not arr else sum(abs(num) for num in arr) * prod([1 if num > 0 else -1 for num in arr])\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr: return None\n    signs = [1, -1, 0]\n    ans = 0\n    for n in arr:\n        ans += signs.count(n) * abs(n)\n    return ans\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    arr = list(map(abs, arr))\n    print(sum(arr), 1)\n    print(prod([1, -1][i] for i in arr))\n    return sum(arr) * prod([1, -1][i] for i in arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return prod([abs(i) for i in arr]) * prod([sign(i) for i in arr]) if len(arr) else None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(abs(i) for i in arr) * (-1 if len(arr) > 0 else 1) if arr else None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not arr:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return None\n    mult = 1\n    for num in arr:\n        mult *= 1 if num >= 0 else -1\n    return mult * sum(abs(num) for num in arr)"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not arr:\n        return None\n    \n    signs = {'0': 0, '1': 1, '-1': -1}\n    s = 1\n    for i in arr:\n        s *= signs[str(i)]\n    \n    return s\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return None if len(arr) == 0 else abs(sum([sign(n) for n in arr])) * prod(sign(n) for n in arr)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    # initialize queue, visited, path_so_far, min_paths\n    q = []\n    visited = set()\n    path_so_far = {}\n    min_paths = []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # find the min path in the grid and return the min path\n    m, n = len(grid), len(grid[0])\n    # find the min path from the first row (0, 0) to (m - 1, n - 1)\n    mem = {}\n    return minPath1(grid, k, 0, 0, mem)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Return a list of the values on the cells that the minimum path go through.\n    # Write your code here.\n    if not grid:\n        return []\n    if not k:\n        return []\n    rows, cols = len(grid), len(grid[0])\n    \n    dist = [[float(\"inf\")]*cols for _ in range(rows)]\n    prev = [[None]*cols for _ in range(rows)]\n    for row in range(rows):\n        for col in range(cols):\n            if row == 0 and col == 0:\n                dist[row][col] = 0\n            elif row == 0:\n                dist[row][col] = dist[row][col-1] + grid[row][col]\n                prev[row][col] = (row, col-1)\n            elif col == 0:\n                dist[row][col] = dist[row-1][col] + grid[row][col]\n                prev[row][col] = (row-1, col)\n            else:\n                dist[row][col] = min(dist[row-1][col], dist[row][col-1]) + grid[row][col]\n                if dist[row-1][col] < dist[row][col-1]:\n                    prev[row][col] = (row-1, col)\n                else:\n                    prev[row][col] = (row, col-1)\n    \n    # Start from the bottom right corner and keep moving up and left\n    current = (rows-1, cols-1)\n    result = []\n    while current!= (0, 0) and k:\n        row, col = current\n        if row - 1 >= 0 and col - 1 >= 0 and dist[row-1][col] < dist[row][col-1]:\n            current = (row-1, col)\n        else:\n            current = (row, col-1)\n        result.append(grid[current[0]][current[1]])\n        k -= 1\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def valid(grid, k):\n        \"\"\"\n        Validate the grid and the k.\n        \"\"\"\n        N = len(grid)\n        # N rows, N columns\n        if N < 2:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not grid or not grid[0]:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert k > 0, 'k must be positive'\n    assert len(grid) > 0 and len(grid[0]) > 0, 'grid must not be empty'\n    assert len(grid) == len(grid[0]), 'grid must be N-by-N matrix'\n    for row in grid:\n        assert len(row) == len(grid[0]), 'grid must be N-by-N matrix'\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    path = [0] * (k+1)\n    path[0] = 0\n    path[1] = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = len(grid)\n    if n == 0:\n        return None\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not grid:\n        return []\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [3, 1, 3, 2, 8]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return [1]\n    res = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            res.append(res[i - 1] + res[i - 2])\n        else:\n            res.append(res[i - 1] + res[i - 2] + res[i - 3])\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # fibonacci = [1, 1]\n    # even = 0\n    # for i in range(n - 1):\n    #     if i % 2 == 0:\n    #         even = 1\n    #     else:\n    #         even = 0\n    #     fibonacci.append(fibonacci[i] + fibonacci[i + 1] + even)\n    # return fibonacci\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        return [1, 3, 2] + tri(n - 1) + tri(n - 2)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # if n == 1:\n    #     return [1, 3, 2]\n    # if n == 2:\n    #     return [3, 3, 8]\n    # return [1, 3, 2] + tri(n - 1)\n    # or\n    # array = [1, 3, 2]\n    # for i in range(3, n + 1):\n    #     if i % 2 == 0:\n    #         array.append(array[-1] + array[-2] + array[-3])\n    #     else:\n    #         array.append(array[-1] + array[-2] + array[-3])\n    # return array\n    # or\n    if n == 1:\n        return [1, 3, 2]\n    array = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            array.append(array[-1] + array[-2] + array[-3])\n        else:\n            array.append(array[-1] + array[-2] + array[-3])\n    return array\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        result = [1, 3, 2]\n        if n % 2 == 0:\n            for i in range(3, n+1):\n                result.append(result[i-2] + result[i-1] + result[i-3])\n        else:\n            for i in range(3, n+1):\n                result.append(result[i-1] + result[i-2] + result[i-3])\n        return result\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1:\n        return [3]\n    if n == 2:\n        return [1, 3]\n    if n > 2:\n        tri_list = [1, 3, 2, 8]\n        while len(tri_list) < n + 1:\n            if len(tri_list) % 2 == 0:\n                tri_list.append(tri_list[len(tri_list) - 1] + tri_list[len(tri_list) - 2])\n            else:\n                tri_list.append(tri_list[len(tri_list) - 1] + tri_list[len(tri_list) - 2] + tri_list[len(tri_list) - 3])\n    return tri_list\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    res = [1, 3]\n    if n <= 2:\n        return res[:n]\n    else:\n        for i in range(3, n + 1):\n            res.append(res[i - 1] + res[i - 2] + res[i - 3])\n        return res"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        res = [1, 3]\n        while len(res) < n + 1:\n            res.append(sum(res[-2:]))\n        return re"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    odd_digits = 1\n    while n > 0:\n        if (n % 10) % 2 == 0:\n            return 0\n        odd_digits *= (n % 10)\n        n = n // 10\n    return odd_digits\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    product = 1\n    while n > 0:\n        product = product * (n % 10)\n        n = n // 10\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = 1\n    for i in str(n):\n        if int(i) % 2!= 0:\n            result *= int(i)\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if is_even(n):\n        return 0\n    product = 1\n    for i in str(n):\n        if is_odd(int(i)):\n            product *= int(i)\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    odds = []\n    for i in str(n):\n        if int(i) % 2!= 0:\n            odds.append(int(i))\n    return reduce(mul, odds, 1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    odd_digits = [i for i in str(n) if int(i) % 2 == 1]\n    return reduce(lambda a, b: int(a) * int(b), odd_digits)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # base case\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 0:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        num = str(n)\n        total = 1\n        for i in range(len(num)):\n            if int(num[i])%2!= 0:\n                total *= int(num[i])\n        return total\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 10:\n        if n % 2 == 0:\n            return 0\n        else:\n            return n\n    else:\n        digit = n % 10\n        return digits(n / 10) * digit\n        \nprint digits(235)\nprint digits(1324)\nprint digits(2520)\nprint digits(2423)\nprint digits(2234)\nprint digits(4580)\nprint digits(1112233445566778899)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    total = 1\n    for d in str(n):\n        if int(d)%2 == 1:\n            total *= int(d)\n    return total\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    brackets = string.count(']') - string.count('[')\n    if brackets <= 1:\n        return False\n    elif brackets % 2 == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(string[i])\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #\n    # CODE\n    #\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    list = []\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            list.append('[')\n            count += 1\n        elif string[i] == ']':\n            if count!= 0:\n                list.pop()\n                count -= 1\n            else:\n                break\n    if len(list) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return any([True for bracket in string if bracket in \"[]\"])\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    bracket_stack = []\n    brackets = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    }\n    for c in string:\n        if c == '[' or c == '{' or c == '(':\n            bracket_stack.append(c)\n        elif c in brackets:\n            if bracket_stack[-1] == brackets[c]:\n                bracket_stack.pop()\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    bracket_list = list(string)\n    if len(bracket_list) == 1:\n        return False\n    elif bracket_list[0] == bracket_list[len(bracket_list)-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": ""
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # print(string)\n    lefts = []\n    rights = []\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    total = 0\n    for i in lst:\n        total += (i**2)\n    return int(round(total))\nprint(sum_squares([1,2,3]))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst = [int(Ceil(i**2)) for i in lst]\n    return(sum(lst))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    #BEST SOLUTION\n    return sum(map(lambda x: round(x ** 2), lst))\n    #return sum([x**2 for x in lst])\n    #return round(sum(map(lambda x: x ** 2, lst)))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(map(lambda x: int(x*x), lst))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(map(lambda x: int(x**2), list(map(lambda x: x if x>=0 else x*(-1), lst))))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum([int(n)**2 for n in lst])\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    x = []\n    for i in lst:\n        i = int(i)\n        x.append(i ** 2)\n    return sum(x)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 0\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #list comprehension\n    return sum([int(i**2) for i in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return int(round(sum(n*n for n in lst),0))\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(txt) > 0:\n        if txt[-1].isalpha():\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return txt[-1] in string.ascii_letters\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if txt == '':\n        return False\n    return txt.split()[-1][-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # if txt is empty\n    if len(txt) == 0:\n        # return False\n        return False\n    # check if last char is a letter\n    elif txt[-1].isalpha():\n        # return True\n        return True\n    # if last char is not a letter\n    else:\n        # return False\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return txt[-1] in 'abcdefghijklmnopqrstuvwxyz'\n    # return False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(txt) == 0:\n        return False\n    txt = txt.split(' ')\n    for word in txt:\n        if word[-1].isalpha() == False:\n            return False\n    return True\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # isalpha() is an inbuilt function in python3 which checks whether the given string is in alphabetical\n    # form or not.\n    # isalpha() returns True if the string is in alphabetical form and False if it is not.\n    if txt == \"\":\n        return False\n    else:\n        return txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if txt == \"\":\n        return False\n    last_char = txt[len(txt)-1]\n    if last_char.isalpha():\n        return True\n    return False\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    largest_idx = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[largest_idx]:\n            largest_idx = i\n    return -1 if largest_idx == 0 else largest_idx\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #TODO\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    prev = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > prev:\n            return i - 1\n        prev = arr[i]\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Initialise a variable to hold the current max of indices\n    max_index = -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i, e in enumerate(arr):\n        if i+1 < len(arr) and e > arr[i+1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pre_idx = -1\n    pre = -1\n    for i, cur in enumerate(arr):\n        if cur <= pre:\n            return pre_idx\n        pre = cur\n        pre_idx = i\n    return pre_idx"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Your code here\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    i = 0\n    while i < len(arr)-1:\n        if arr[i] <= arr[i+1]:\n            i += 1\n        else:\n            return i\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not arr:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    current = 0\n    for num in arr:\n        if num >= arr[current]:\n            current += 1\n        elif num!= arr[current]:\n            return current\n    return -1\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if lst == []:\n        return None, None\n    if max(lst) < 0 or min(lst) > 0:\n        return None, None\n    return max(lst), min(lst)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Your code goes here:\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    smallest = None\n    largest = None\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst_copy = lst.copy()\n    if lst_copy == []:\n        return None, None\n    else:\n        lst_copy.sort()\n        if lst_copy[0] < 0:\n            return (None, lst_copy[0])\n        elif lst_copy[-1] > 0:\n            return (lst_copy[-1], None)\n        else:\n            return (None, None)"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    negative_ints = [n for n in lst if n < 0]\n    positive_ints = [n for n in lst if n > 0]\n    if negative_ints:\n        return (min(negative_ints), max(positive_ints))\n    else:\n        return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    greater_number = 0\n    greater_number_index = None\n    greater_number_index_number = 0\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    try:\n        lst_neg = [num for num in lst if num < 0]\n        lst_pos = [num for num in lst if num > 0]\n        return (max(lst_neg), min(lst_pos))\n    except:\n        return (None, None)"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    max = None\n    min = None\n    for number in lst:\n        if number > 0 and (max == None or number > max):\n            max = number\n        if number < 0 and (min == None or number < min):\n            min = number\n    return (max, min)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (None, None) if len(lst) == 0 else (lst[0], lst[0] if len(lst) == 1 else min(lst[1:]))"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if type(a) == float or type(b) == float:\n        return a if a > b else b\n    else:\n        return None if a == b else a if a > b else b\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n    \nprint(compare_one(1, 2.5))\nprint(compare_one(1, \"2,3\"))\nprint(compare_one(\"5,1\", \"6\"))\nprint(compare_one(\"1\", 1))\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if (a>b):\n        return a\n    elif (b>a):\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if isinstance(a, float) or isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, int) or isinstance(b, int):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif a > b:\n        return a\n    elif a < b:\n        return b\n    elif a == b:\n        return None\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a = float(a) if isinstance(a, str) else a\n    b = float(b) if isinstance(b, str) else b\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if a == b:\n        return None\n    elif type(a) == type(b):\n        if isinstance(a, str):\n            a = a.replace(',', '.')\n            a = float(a)\n        if isinstance(b, str):\n            b = b.replace(',', '.')\n            b = float(b)\n    if type(a) == int and type(b) == int:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == float:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == str:\n        if a > b:\n            return a\n        else:\n            return b\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return max(a,b) if isinstance(a,int) or isinstance(a,float) else max(a,b) if isinstance(a,str) else None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        if float(a) > float(b):\n            return a\n        elif float(b) > float(a):\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, (int, float)):\n        a = a.replace(',', '.')\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    elif isinstance(b, str) and isinstance(a, (int, float)):\n        b = b.replace(',', '.')\n        if float(b) > float(a):\n            return b\n        else:\n            return a\n    elif isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, (int, float)) and isinstance(b, str):\n        a = a.replace(',', '.')\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    elif isinstance(b, (int, float)) and isinstance(a, str):\n        b = b.replace(',', '.')\n        if float(b) > float(a):\n            return b\n        else:\n            return a\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return None if a == b else a if isinstance(a, type(b)) else b\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    try:\n        return max(float(a), float(b))\n    except:\n        try:\n            return max(a, b)\n        except:\n            return None\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if (n%2 == 0):\n        n = n/2\n    n = int(n)\n    t = 0\n    while (n > 0):\n        t = t + n%2\n        n = n/2\n    return(t == 4)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum_even(n) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    a, b, c, d = 0, 0, 0, 0\n    while n > 0:\n        if n % 2 == 0:\n            if n % 4 == 0:\n                return True\n            n -= 2\n            a += 1\n        else:\n            n -= 1\n            b += 1\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return n % 2 == 0 and n % 4 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = str(n)\n    if len(n)!= 4:\n        return False\n    num_list = list(map(int, n))\n    sum_of_num_list = sum(num_list)\n    if sum_of_num_list % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Even numbers\n    even_numbers = [2, 4, 6, 8]\n    # For the number n, we find the smallest even number that is larger than n\n    smallest_even_larger_than_n = next((e for e in even_numbers if e > n), None)\n    if smallest_even_larger_than_n:\n        # How many times can we fit 2 in n and subtract it from n?\n        iterations_for_2 = (n // 2)\n        if iterations_for_2 >= smallest_even_larger_than_n:\n            # We have enough iterations, we can subtract the number twice from n\n            n -= (smallest_even_larger_than_n * 2)\n            # n should be a multiple of 2, so we should have no remainder after dividing n by 2\n            assert n % 2 == 0\n            # Even numbers are 2, 4, 6, 8, so we can find the number e that is the sum of 4 even numbers\n            # For each of the even number e, we have the iterations_for_2: iterations_for_2//e times that sum(even_numbers) e.\n            # We can subtract the number 3 times from n, because each time we subtract 3, we're subtracting the number 2,\n            # which was found in n.\n            if iterations_for_2 >= 4:\n                # We have enough iterations, we can subtract the number 3 times from n\n                n -= (iterations_for_2 * 3)\n                # n should be a multiple of 3, so we should have no remainder after dividing n by 3\n                assert n % 3 == 0\n                # We have enough iterations, we can subtract the number 4 times from n\n                n -= (iterations_for_2 * 4)\n                # We have enough iterations, we can subtract the number 6 times from n\n                n -= (iterations_for_2 * 6)\n                # We have enough iterations, we can subtract the number 8 times from n\n                n -= (iterations_for_2 * 8)\n                # n should be a multiple of 8, so we should have no remainder after dividing n by 8\n                assert n % 8 == 0\n                # We have enough iterations, we can subtract the number 9 times from n\n                n -= (iterations_for_2 * 9)\n                # We have enough iterations, we can subtract the number 12 times from n\n                n -= (iterations_for_2 * 12)\n                # We have enough iterations, we can subtract the number 24 times from n\n                n -= (iterations_for_2 * 24)\n                # We have enough iterations, we can subtract the number 36 times from n\n                n -= (iterations_for_2 * 36)\n                # We have enough iterations, we can subtract the number 48 times from n\n                n -= (iterations_for_2 * 48)\n                # We have enough iterations, we can subtract the number 72 times from n\n                n -= (iterations_for_2 * 72)\n                # We have enough iterations, we can subtract the number 144 times from n\n                n -= (iterations_for_2 * 144)\n                # We have enough iterations, we can subtract the number 288 times from n\n                n -= (iterations_for_2 * 288)\n                # We have enough iterations, we can subtract the number 576 times from n\n                n -= (iterations_for_2 * 576)\n                # We have enough iterations, we can subtract the number 672 times from n\n                n -= (iterations_for_2 * 672)\n                # We have enough iterations, we can subtract the number 768 times from n\n                n -= (iterations_for_2 * 768)\n                # We have enough iterations, we can subtract the number 784 times from n\n                n -= (iterations_for_2 * 784)\n                # We have enough iterations, we can subtract the number 972 times from n\n                n -= (iterations_for_2 * 972)\n                # We have enough iterations, we can subtract the number 1088 times from n\n                n -= (iterations_for_2 * 1088)\n                # We have enough iterations, we can subtract the number 1296 times from n\n                n -= (iterations_for_2 * 1296)\n                # We have enough iterations, we can subtract the number 1512 times from n\n                n -= (iterations_for_2 * 1512)\n                # We have enough iterations, we can subtract the number 1"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    even_numbers = [x for x in range(2,n) if x%2 == 0]\n    return len(even_numbers) == 4\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    from itertools import combinations\n    for comb in combinations(range(2, n), 4):\n        if sum(comb) == n:\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # use the function in the previous problem to get the sum of the first 4 positive even numbers\n    evens = get_sum_of_first_n_even_numbers(4)\n    # check if the input number is equal to the sum of the first 4 even numbers\n    return n in evens\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #create a list of all possible sums\n    even_numbers = []\n    for i in range(2, n+1):\n        even_numbers.append(i)\n    if n%2 == 0:\n        even_numbers.remove(n)\n    #check whether the list has exactly 4 elements\n    if len(even_numbers)!= 4:\n        return False\n    #check whether the elements are all positive\n    for i in even_numbers:\n        if i <= 0:\n            return False\n    #check whether the sum of the elements is equal to the original number\n    return sum(even_numbers) == n\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    factorial = 1\n    for i in range(n):\n        factorial = factorial * (i+1)\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum = 1\n    while n > 0:\n        sum *= n\n        n -= 1\n    return sum\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Code your solution here\n    result = 1\n    for i in range(n):\n        result *= i + 1\n    return result\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # result = 1\n    # for num in range(1,n+1):\n    #     result *= num\n    # return result\n    return n_factorial(n)\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return re.sub(r'\\s{2,}', '_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # IMPLEMENT ME\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if''in text:\n        text = text.replace('  ', '-')\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            if text[i-1] == \" \" and text[i+1] == \" \":\n                text = text[:i] + \"_\" + text[i+1:]\n                i -= 1\n            else:\n                text = text[:i] + \"_\" + text[i:]\n                i -= 1\n        i += 1\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return re.sub(r' +', '_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if'' not in text:\n        return text\n    new_text = []\n    for i in text:\n        if i =='':\n            new_text.append('_')\n        else:\n            new_text.append(i)\n    \n    while''in new_text:\n        new_text.remove('  ')\n        new_text.append('-')\n    \n    return ''.join(new_text)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    new_text = \"\"\n    for i in range(len(text)):\n        if text[i]!= \" \":\n            new_text += text[i]\n        elif text[i-1]!= \" \" and text[i+1]!= \" \":\n            new_text += \"_\"\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if''not in text:\n        return text\n    text = text.replace('  ', '-')\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(text) > 2:\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"  \", \"-\")\n    return text"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return re.sub(' +', '-', text)\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    import re\n    if len(re.findall(\"[0-9]\", file_name)) > 3:\n        return \"No\"\n    if len(re.findall(\"[0-9]\", file_name)) < 1:\n        return \"No\"\n    if \".\" in file_name:\n        if file_name.split(\".\")[0]!= \"\":\n            if file_name[file_name.split(\".\")[0].find(\".\")+1:] not in [\"exe\", \"dll\", \"txt\"]:\n                return \"No\"\n        elif file_name.split(\".\")[1] not in [\"exe\", \"dll\", \"txt\"]:\n            return \"No\"\n    else:\n        return \"No\"\n    return \"Yes\"\n    "
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n    #return \"No\" if the conditions are not met, \"Yes\" otherwise\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # if file name doesnt contain a dot it will return no\n    # if file name starts with a number or contains 3 digits it will return no\n    # otherwise it will return yes\n    if file_name.count('.') == 1:\n        if file_name[0] not in '0123456789' and file_name[file_name.index('.')] in '0123456789':\n            if file_name[file_name.index('.')+1] in 'txt, exe, dll':\n                return 'Yes'\n    return 'No'\n    \n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    if file_name.isalpha() and len(file_name) < 4:\n        return 'No'\n    elif file_name.count('.') == 1 and file_name[:file_name.find('.')] and file_name[file_name.find('.')+1:] in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(file_name) > 3 and file_name.count(\".\") == 1:\n        name_start = file_name.split(\".\")[0]\n        if name_start[0].isalpha() and name_start[-1].isdigit():\n            if file_name.split(\".\")[1] in ['txt', 'exe', 'dll']:\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(file_name) > 3:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if file_name.count('.') == 0:\n        return 'No'\n    elif file_name.count('.') >= 1:\n        if file_name.split('.')[0] == '':\n            return 'No'\n        elif file_name.split('.')[0][0].lower() < 'a' or file_name.split('.')[0][0].lower() > 'z':\n            return 'No'\n        elif len(file_name.split('.')[0]) > 3:\n            return 'No'\n        elif file_name.split('.')[0][-1].lower() not in ['txt', 'exe', 'dll']:\n            return 'No'\n        elif file_name.split('.')[-1].lower() not in ['txt', 'exe', 'dll']:\n            return 'No'\n        else:\n            return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    import re\n    return \"Yes\" if re.match(r\"^\\w.\\w{1,3}[txt|exe|dll]$\", file_name) else \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert isinstance(file_name, str), 'Invalid file name'\n    # 1. Check if file name length > 3 \n    if len(file_name) > 3:\n        return \"No\"\n    # 2. Check for three digits\n    if len([i for i in file_name if i in \"0123456789\"]) > 3:\n        return \"No\"\n    # 3. Check for dot\n    if '.' not in file_name:\n        return \"No\"\n    # 4. Check for non-empty substrings before dot\n    before_dot = file_name.split('.')[0]\n    if not before_dot:\n        return \"No\"\n    # 5. Check for valid chars before dot\n    if before_dot[0].lower() not in \"abcdefghijklmnopqrstuvwxyz\":\n        return \"No\"\n    # 6. Check for valid substrings after dot\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    # 7. Check for valid chars after dot\n    if file_name.split('.')[1]!= 'txt' and file_name.split('.')[1]!= 'exe' and file_name.split('.')[1]!= 'dll':\n        if file_name[len(file_name.split('.')[0])] not in \"0123456789\":\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(file_name) > 3 and file_name.count('.') == 1:\n        file_name_list = file_name.split('.')\n        if file_name_list[0] and file_name_list[0][0].isalpha() and file_name_list[1] in ['txt', 'exe', 'dll']:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return 0\n    res = 0\n    for i in range(len(lst)):\n        if i%3 == 0:\n            res += lst[i]**2\n        elif i%4 == 0 and i%3!= 0:\n            res += lst[i]**3\n        else:\n            res += lst[i]\n    return res\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = len(lst)\n    sum = 0\n    for i in range(n):\n        if i % 4 == 0 and i % 3!= 0:\n            sum = sum + (lst[i])**2\n        elif i % 3 == 0 and i % 4!= 0:\n            sum = sum + (lst[i])**3\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    sums = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            if lst[i] > 0:\n                sums += lst[i]\n            else:\n                sums -= lst[i]\n    \n    return sums\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) > 0:\n        result = 0\n        for i in range(len(lst)):\n            if i % 3 == 0 or i % 4 == 0:\n                result += lst[i] ** 2\n        return result\n    else:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst_copy = lst.copy()\n    for index, item in enumerate(lst_copy):\n        if (index % 3 == 0) and (index % 4!= 0):\n            lst_copy[index] = lst_copy[index] ** 2\n        elif (index % 4 == 0) and (index % 3!= 0):\n            lst_copy[index] = lst_copy[index] ** 3\n    return sum(lst_copy)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # base case\n    if len(lst) == 0:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = 0\n    for index, item in enumerate(lst):\n        if index % 3 == 0 or index % 4 == 0:\n            result += item**2 if index % 3 == 0 else item*3\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([n**2 for n in lst if n > 0 and (n % 3 == 0 or n % 4 == 0)])\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # replace this for solution\n    return \"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Runtime: O(n)\n    # Space: O(n)\n    s = sentence.split()\n    result = []\n    for w in s:\n        if is_prime(len(w)):\n            result.append(w)\n    return \" \".join(result)"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    words = sentence.split()\n    result = []\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    for word in sentence.split():\n        if len(word) > 1:\n            for num in range(2, int(math.sqrt(len(word)))+1):\n                if not int(word[0]) % num:\n                    break\n            else:\n                result.append(word[0])\n        else:\n            result.append(word[0])\n    return''.join(result)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # split sentence into words\n    # iterate through each word\n        # if len(word) is prime:\n            # add word to list\n    # join list with spaces between each word\n    # return joined string\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    words = sentence.split(' ')\n    result = []\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    words = sentence.split()\n    primes = [prime_numbers.prime_numbers_below(len(word)) for word in words]\n    return''.join(word for word, prime in zip(words, primes) if prime)\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numerator, denominator = map(int, x.split('/'))\n    numerator1, denominator1 = map(int, n.split('/'))\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lhs = x.split(\"/\")\n    rhs = n.split(\"/\")\n    if lhs[0] == rhs[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    x, n = x.split(\"/\"), n.split(\"/\")\n    if int(x[0]) * int(n[0]) == int(x[1]) * int(n[1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    try:\n        numerator = int(x.split('/')[0])\n        denominator = int(n.split('/')[0])\n        # print(numerator, denominator)\n    except:\n        return False\n    if numerator % denominator == 0:\n        return True\n    else:\n        return False\n    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numerator = int(n.split('/')[0])\n    denominator = int(n.split('/')[1])\n    return x*numerator % denominator == 0\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(nums, key= lambda num : sum(int(digit) for digit in str(num)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if nums:\n        d = {i:sum([int(x) for x in str(i)]) for i in nums}\n        return sorted(nums, key=lambda x: (d[x], x))\n    else:\n        return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def get_sum(n):\n        return sum(map(int, str(n)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for i in nums:\n        if(i>10 and int(str(i)[0])%2!= 0 and int(str(i)[-1])%2!= 0):\n            count +=1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    counter = 0\n    for i in nums:\n        if i > 10 and i%2!= 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Your code here\n    x = 0\n    for i in nums:\n        if i > 10 and i % 2 == 1:\n            x += 1\n    return x\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    evens = 0\n    for i in nums:\n        if i > 10 and i % 2 == 1 and nums.index(i) == 0:\n            evens += 1\n        elif i > 10 and i % 2 == 1 and nums.index(i) == len(nums) - 1:\n            evens += 1\n    return evens\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    ctr = 0\n    for i in nums:\n        if i > 10 and i % 2!= 0:\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    filteredNums = []\n    for num in nums:\n        if num > 10 and num % 2 == 1:\n            filteredNums.append(num)\n    return len(filteredNums)\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    counter = 0\n    for i in nums:\n        if i > 10 and int(str(i)[0]) % 2 == 1 and int(str(i)[-1]) % 2 == 1:\n            counter += 1\n    return counter\n    \nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    odd_digits = []\n    for num in nums:\n        if num > 10 and str(num)[0] in [\"1\", \"3\", \"5\", \"7\", \"9\"]:\n            odd_digits.append(num)\n    return len(odd_digits)\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numbers_greater_than_10 = [num for num in nums if num > 10 and num % 2!= 0]\n    return len(numbers_greater_than_10)\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([1 for num in nums if (num > 10 and num % 2!= 0 and (num // 10) % 2!= 0)])\n    # write your code here\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # O(n)\n    nums = []\n    for i in range(1, n+1):\n        nums.append(i*i-i+1)\n    \n    nums = list(set(nums))\n    nums.sort()\n    \n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] + nums[j] % 3 == 0:\n                cnt += 1\n    \n    return cnt\n    \nif __name__ == \"__main__\":\n    print(get_max_triples(3))\n    print(get_max_triples(5)"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i + j + k) % 3 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(1 for i in range(1, n) for j in range(i, n) for k in range(j, n) if i < j < k and (i + j + k) % 3 == 0)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    total_triples = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i + j + k) % 3 == 0 and i < j < k:\n                    total_triples += 1\n    return total_triples\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # The base case is n = 0 which is 0 * 0 - 0 + 1 = 1\n    # n = 1 which is 1 * 1 - 1 + 1 = 1\n    # n = 2 which is 1 * 1 - 2 + 1 = 3\n    # n = 3 which is 1 * 1 - 3 + 1 = 4\n    # n = 4 which is 1 * 1 - 4 + 1 = 5\n    # n = 5 which is 1 * 1 - 5 + 1 = 6\n    # n = 6 which is 1 * 1 - 6 + 1 = 7\n    # n = 7 which is 1 * 1 - 7 + 1 = 8\n    # n = 8 which is 1 * 1 - 8 + 1 = 9\n    # n = 9 which is 1 * 1 - 9 + 1 = 10\n    # n = 10 which is 1 * 1 - 10 + 1 = 11\n    # n = 11 which is 1 * 1 - 11 + 1 = 12\n    # n = 12 which is 1 * 1 - 12 + 1 = 13\n    # n = 13 which is 1 * 1 - 13 + 1 = 14\n    # n = 14 which is 1 * 1 - 14 + 1 = 15\n    # n = 15 which is 1 * 1 - 15 + 1 = 16\n    # n = 16 which is 1 * 1 - 16 + 1 = 17\n    # n = 17 which is 1 * 1 - 17 + 1 = 18\n    # n = 18 which is 1 * 1 - 18 + 1 = 19\n    # n = 19 which is 1 * 1 - 19 + 1 = 20\n    # n = 20 which is 1 * 1 - 20 + 1 = 21\n    # n = 21 which is 1 * 1 - 21 + 1 = 22\n    # n = 22 which is 1 * 1 - 22 + 1 = 23\n    # n = 23 which is 1 * 1 - 23 + 1 = 24\n    # n = 24 which is 1 * 1 - 24 + 1 = 25\n    # n = 25 which is 1 * 1 - 25 + 1 = 26\n    # n = 26 which is 1 * 1 - 26 + 1 = 27\n    # n = 27 which is 1 * 1 - 27 + 1 = 28\n    # n = 28 which is 1 * 1 - 28 + 1 = 29\n    # n = 29 which is 1 * 1 - 29 + 1 = 30\n    # n = 30 which is 1 * 1 - 30 + 1 = 31\n    # n = 31 which is 1 * 1 - 31 + 1 = 32\n    # n = 32 which is 1 * 1 - 32 + 1 = 33\n    # n = 33 which is 1 * 1 - 33 + 1 = 34\n    # n = 34 which is 1 * 1 - 34 + 1 = 35\n    # n = 35 which is 1 * 1 - 35 + 1 = 36\n    # n = 36 which is 1 * 1 - 36 + 1 = 37\n    # n = 37 which is 1 * 1 - 37 + 1 = 38\n    # n = 38 which is 1 * 1 - 38 + 1 = 39\n    # n = 39 which is 1 * 1 - 39 + 1 = 40\n    # n = 40 which is 1 * 1 - 40 + 1 = 41\n    # n = 41 which is 1 * 1 - 41 + 1 = 42\n    # n = 42 which is 1 * 1 - 42 + 1 = 43\n    # n = 43 which is 1 * 1 - 43 + 1 = 44\n    # n = 44 which is 1 * 1 - 44 + 1 = 45\n    # n = 45 which is 1 * 1 - 45 + 1 = 46\n    # n = 46 which is 1 * 1 - 46 + 1 = 47\n    # n = 47 which is 1 * 1 - 47 + 1 = 48\n    # n = 48 which is 1 * 1 - 48 + 1 = 49\n    # n = 49 which is 1 * 1 - 49 + 1 = 50\n    # n = 50 which is 1 * 1 - 50 + 1 = 51\n    # n = 51 which is 1 * 1 - 51 + 1 = 52\n    # n = 52 which is 1 * 1 - 52 + 1 = 53\n    # n = 53 which is 1 * 1 - 53 + 1 = 54\n    # n = 54 which is 1 * 1 - 54 + 1 = 55\n    # n = 55 which is 1 * 1 - 55 + 1 = 56\n    # n = 56 which is 1 * 1 - 56 + 1 = 57\n    # n = 57 which is 1 * 1 - 57 + 1 = 58\n    # n = 58 which is 1 * 1 - 58 + 1 = 59\n    # n = 59 which is 1 * 1 - 59 + 1 = 60"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return (n * (n + 1) * (n + 2) // 6) // 3\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 3:\n        return 0\n    def helper(n):\n        res = 0\n        for i in range(1, n):\n            if (i * i - i + 1) % 3 == 0:\n                res += i\n        return res\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if ((i+j)%3==0) and (i*i + j*j - i + 1)<=n:\n                count+=1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 3:\n        return 0\n    ans = 0\n    for i in range(1, n):\n        if (i * i - i) % 3 == 0:\n            ans += i - 1\n    return ans\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    a = [i*i-i+1 for i in range(1,n+1)]\n    count = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if i < j < k and (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    #planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    return tuple(sorted(planets, key = lambda x: (planets.index(x), x)))\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # PLANETS = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    # return tuple(sorted(planet for planet in PLANETS if (planet1 in planet or planet2 in planet)))\n    # PLANETS = {\n    # \"Mercury\": [0, 3.302e+23], \"Venus\": [3.303e+23, 6.051e+23],\n    # \"Earth\": [6.052e+23, 1.9e+30], \"Mars\": [1.9e+30, 2.9e+24],\n    # \"Jupiter\": [2.9e+24, 6.991e+25], \"Saturn\": [6.991e+25, 1.362e+26],\n    # \"Uranus\": [1.363e+26, 2.871e+25], \"Neptune\": [2.8710e+25, 4.495e+26]\n    # }\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planets_lst = []\n    for item in planets:\n        if planet1 in item or planet2 in item:\n            planets_lst.append(item)\n    sorted_lst = sorted(planets_lst, key=lambda x: abs(planets.index(x) - planets.index(planet1)))\n    sorted_lst.insert(0,planet1)\n    sorted_lst.insert(1,planet2)\n    return tuple(sorted_lst)\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    possible_planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1, planet2 = planet1.lower(), planet2.lower()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    planets = (\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n    )\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    i = 0\n    j = 0\n    for planet in planets:\n        if planet1 == planet:\n            i = planets.index(planet)\n        elif planet2 == planet:\n            j = planets.index(planet)\n    if (i == j):\n        return ()\n    return planets[i+1:j]\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    # Write your code here\n    for i in planets:\n        if i == planet1 or i == planet2:\n            pass\n        else:\n            return 'No such planet!'\n    for i in range(len(planets)):\n        if planets[i] == planet1:\n            planet1_index = i\n    for i in range(len(planets)):\n        if planets[i] == planet2:\n            planet2_index = i\n    planets_between = []\n    for i in range(planet1_index + 1, planet2_index):\n        planets_between.append(planets[i])\n    return tuple(planets_between)"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return []\n    for i in planets:\n        if planet1 < i < planet2:\n            return tuple(sorted((i,), key=lambda x: (planets.index(x), x)))\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert (planet1 in (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"))\n    assert (planet2 in (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"))\n    \n    x = planet1\n    y = planet2\n    \n    if x == y:\n        return ()\n    \n    planet_list = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    p1 = planet_list.index(x)\n    p2 = planet_list.index(y)\n    \n    \n    if p1 >= p2:\n        return ()\n    \n    return (planet_list[p1+1:p2])"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def len_sort(s):\n        return len(s)\n    lst.sort(key=len_sort)\n    lst = [i for i in lst if len(i) % 2 == 0]\n    lst.sort()\n    return lst\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    list_with_only_odd_lengths_removed = [\n        word for word in lst if len(word) % 2 == 0\n    ]\n    list_with_only_odd_lengths_removed.sort()\n    return list_with_only_odd_lengths_removed\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert isinstance(lst, list)\n    lst.sort(key=len, reverse=True)\n    return [x for x in lst if len(x)%2==0]\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # lst = sorted(lst, key=len)\n    # print(lst)\n    # s = set(lst)\n    # print(s)\n    # for i in s:\n    #     if len(i) % 2!= 0:\n    #         lst.remove(i)\n    # print(lst)\n    return sorted(lst, key=lambda x: (len(x), x))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sorted_lst = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_lst.append(word)\n    return sorted(sorted_lst)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def even(string):\n        \"\"\"\n        returns the length of a word\n        \"\"\"\n        return len(string)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(list(set([word for word in lst if len(word) % 2 == 0])))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst.sort(key=len, reverse=False)\n    new_list = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(list(filter(lambda x: len(x)%2 == 0, lst)), key=lambda x: len(x))\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n%2 == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert x_or_y(7, 34, 12) == 34\n    assert x_or_y(15, 8, 5) == 5\n    assert x_or_y(1, 2, 3) == 2\n    assert x_or_y(2, 1, 3) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return y if n % 2 == 1 else x\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x if is_prime(n) else y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if (n%2 == 0):\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 1:\n        raise ValueError(\"the value of n must be a positive integer\")\n    if n == 1:\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    return x\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = 0\n    for i in lst:\n        if i > 0:\n            if i % 2!= 0:\n                result += i**2\n    return result\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not lst:\n        return 0\n    result = 0\n    for item in lst:\n        if item < 0:\n            continue\n        result += item**2 if item % 2 else 0\n    return result\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Your code here\n    \n    # min() and max() functions in python can take an iterable as an argument,\n    # for example a list. If the argument passed in is a list, then the max()\n    # and min() functions return the maximum and minimum values in that list.\n    # We can use these values to find the maximum and minimum odd numbers in the list\n    \n    list1 = list(lst)\n    \n    if len(list1) == 0:\n        return 0\n        \n    if min(list1) < 0:\n        list1.remove(min(list1))\n        \n    if max(list1) > 0:\n        list1.remove(max(list1))\n    \n    \n    sum_of_odd_numbers = 0\n    for i in list1:\n        if i % 2!= 0:\n            sum_of_odd_numbers = sum_of_odd_numbers + i**2\n    return sum_of_odd_numbers\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # convert the list into a set to eliminate duplicates\n    # then convert it back to a list to work with\n    set_lst = list(set(lst))\n    if len(set_lst) == 0:\n        return 0\n    else:\n        sum_odd = 0\n        for element in set_lst:\n            if element >= 0 and element % 2!= 0:\n                sum_odd += element ** 2\n        return sum_odd\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if (lst[i]>=0) and (lst[i]%2!=0):\n            sum+=lst[i]**2\n    return sum\n    \nif __name__ == '__main__':\n    lst = [1,3,2,0]\n    expected = 10\n    actual = double_the_difference(lst)\n    assert actual == expected\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    evens = [i ** 2 for i in lst if i % 2 == 0]\n    odds = [i ** 2 for i in lst if i % 2 == 1]\n    return sum(evens) + sum(odds"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum_odd_elements = 0\n    for i in lst:\n        if type(i) == int and i%2!=0:\n            sum_odd_elements += i**2\n    return sum_odd_elements\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    odd_nums = [n for n in lst if n > 0 and n % 2!= 0]\n    \n    return sum([num ** 2 for num in odd_nums])\n    \n    \nprint(double_the_difference([1, 3, 2, 0]))\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    output = 0\n    for i in lst:\n        if i < 0 or not i % 1 == 0:\n            continue\n        output += i ** 2\n    return output\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #get the number of guesses\n    num_guesses = len(guess)\n    #create a new array to hold the differences\n    diff = []\n    #loop through the number of guesses\n    for i in range(0, num_guesses):\n        #get the difference between guess and score\n        diff_val = abs(guess[i] - game[i])\n        #add the difference to the new array\n        diff.append(diff_val)\n    return diff\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [abs(guess-score) for guess,score in zip(guess,game)]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    diff = []\n    for i in range(0,len(guess)):\n        diff.append(abs(guess[i] - game[i]))\n    return dif"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [0 if game[i] == guess[i] else abs(game[i] - guess[i]) for i in range(len(game))]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [abs(i - j) for i,j in zip(game, guess)]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return list(map(abs,game-guess))\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    scores = game\n    guesses = guess\n    result = [0 for _ in range(len(game))]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    scores = game\n    guesses = guess\n    result = []\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [0 if guess[i] == game[i] else abs(guess[i]-game[i]) for i in range(len(game))]"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [abs(game[i] - guess[i]) for i in range(len(game))]\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # TODO: Your code here\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    strongest_extension = extensions[0]\n    strength = 0\n    for extension in extensions:\n        extension_strength = 0\n        for letter in extension:\n            if (letter.isupper()):\n                extension_strength += 1\n            else:\n                extension_strength += 0\n        if extension_strength > strength:\n            strength = extension_strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    strongest_extension = ''\n    for extension in extensions:\n        if extension[0].isupper() and extension[1:].islower():\n            strength = len(extension) - len(extension.lower())\n        elif extension[0].islower() and extension[1:].isupper():\n            strength = len(extension) - len(extension.upper())\n        elif extension[0].isupper() and extension[1:].isupper():\n            strength = len(extension) - len(extension.lower())\n        else:\n            strength = len(extension) - len(extension.upper())\n        if strength >= len(strongest_extension):\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return class_name+\".\"+max(extensions, key=lambda x: x.lower().count(\"a\") - x.lower().count(\"z\"))\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Create a list of extension strengths\n    strengths = []\n    for ext in extensions:\n        CAP = len([i for i in ext if i.isupper()])\n        SM = len([i for i in ext if i.islower()])\n        strengths.append(CAP - SM)\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return '{}.{}'.format(class_name, extensions[0])\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    import string\n    string.ascii_uppercase\n    strongest_extension = '.' + '.'.join(sorted(extensions, key=lambda extension: sum([\n        string.ascii_uppercase.index(letter) - string.ascii_lowercase.index(letter)\n        for letter in extension])))\n    return class_name + strongest_extension\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = extensions[0]\n    for ext in extensions:\n        a = sum(i for i in ext if i.islower())\n        b = sum(i for i in ext if i.isupper())\n        if (a - b) > (a - b) or (a - b) == (a - b) and ext < s:\n            s = ext\n    return class_name + '.' + s\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    \n    # hint: use the.find() method.\n    # hint: use the.lower() method.\n    \n    # make sure you only do the check if a and b are different.\n    # hint: make sure you only do the check if the length of b is equal to or greater than 1.\n    # hint: return False if the loop is not completed because the.find() method returns -1\n    \n    pass\n    \n    \n    \ndef nameloop_check(names):\n    \"\"\"You are given a list of names (unique). Each name is a string. You need to return a dictionary that contains a list of names that start with the name that comes after the name in the list.\n    nameloop_check([\"Bart\", \"Lisa\", \"Adam\"]) => {'Bart': [\"Bart\", \"Lisa\"], 'Lisa': [\"Lisa\"], 'Adam': [\"Adam\"]}\n    nameloop_check([\"Moe\", \"Larry\", \"Curly\"]) => {'Moe': [\"Moe\"], 'Larry': [\"Larry\"], 'Curly': [\"Curly\"]}\n    nameloop_check([\"Bart\", \"Lisa\", \"Adam\", \"Moe\"]) => {'Bart': [\"Bart\", \"Lisa\"], 'Lisa': [\"Lisa\"], 'Adam': [\"Adam\"], 'Moe': [\"Moe\"]}\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    a = a.lower()\n    b = b.lower()\n    for i in range(len(a)):\n        if b in a:\n            return True\n        a = a[1:]+a[0]\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (a.find(b)!= -1 or b in a + b)\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # your code here\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a1 = a\n    b1 = b\n    a2 = a + a\n    b2 = b + b\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    print(isSubstring(a,b))\n    return isSubstring(a,b)\n    # return (b in a) or (any(map(lambda s: isSubstring(a,s), bs)))\n    # return any(map(lambda s: isSubstring(a,s), bs))\n    # return isSubstring(a, b) or any(map(lambda s: isSubstring(a,s), bs))\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def substring_rotation(s):\n        for i in range(len(s)):\n            if s[i:] + s[:i] == s:\n                return True\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # for a in a.split():\n    #     if a in b:\n    #         return True\n    # return False\n    \n    # for i in range(len(b)):\n    #     if b[i:] in a:\n    #         return True\n    # return False\n    \n    # for i in range(len(b)):\n    #     if b[i:]+b[:i] in a:\n    #         return True\n    # return False\n    \n    # for i in range(len(b)):\n    #     for j in range(len(b)):\n    #         if b[i:i+j] in a:\n    #             return True\n    # return False\n    \n    # for i in range(len(b)):\n    #     if b[:i]+b[i+1:] in a:\n    #         return True\n    # return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pattern_length = len(b)\n    if pattern_length > len(a):\n        return False\n    for i in range(len(a)-pattern_length+1):\n        if a.startswith(b, i):\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num//10\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    even = 0\n    odd = 0\n    if num < 0:\n        num = num * -1\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    for num in range(1, num):\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    even, odd = 0, 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    even_num = 0\n    odd_num = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    return (even_num, odd_num)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    even = 0\n    odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (odd, even)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    even, odd = 0, 0\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    even = 0\n    odd = 0\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def even_odd(num):\n        odd = 0\n        even = 0\n        while num > 0:\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            num = int(num / 10)\n        return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len([int(d) for d in str(num) if int(d) % 2 == 0]), len([int(d) for d in str(num) if int(d) % 2 == 1])\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def int_to_roman(number):\n        roman_numerals = {\n            1: \"I\",\n            4: \"IV\",\n            5: \"V\",\n            9: \"IX\",\n            10: \"X\",\n            40: \"XL\",\n            50: \"L\",\n            90: \"XC\",\n            100: \"C\",\n            400: \"CD\",\n            500: \"D\",\n            900: \"CM\",\n            1000: \"M\",\n            4000: \"MMM\",\n            5000: \"MMM\",\n            9000: \"MMMM\",\n            10000: \"MMMMM\",\n        }\n        return roman_numerals[number]\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not isinstance(number, int):\n        raise TypeError(\"Invalid input.\")\n    if number < 1 or number > 1000:\n        raise ValueError(\"Invalid input.\")\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert isinstance(number, int)\n    assert number > 0 and number <= 1000\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not 1 <= number <= 1000:\n        raise ValueError('Invalid integer for roman numeral conversion')\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman = \"\"\n    for i in range(len(values)):\n        count = int(number / values[i])\n        roman += numerals[i] * count\n        number -= values[i] * count\n    return roman\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    int_to_roman_dict = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I',\n    }\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = \"\"\n    roman_numbers = {\n        1: \"I\",\n        5: \"V\",\n        10: \"X\",\n        50: \"L\",\n        100: \"C\",\n        500: \"D\",\n        1000: \"M\"\n    }\n    for key in roman_numbers.keys():\n        result += int_to_roman(number, key, roman_numbers)\n    return result.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    nums = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ]\n    roman_numerals = [ \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\" ]\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    roman_number = ''\n    if 1 <= number <= 1000:\n        for num in range(1, number + 1):\n            if num < 4:\n                roman_number += roman_dict_1[num]\n            elif num == 4:\n                roman_number += roman_dict_1[num]\n            elif 5 <= num < 9:\n                roman_number += roman_dict_2[num - 5]\n            elif num == 9:\n                roman_number += roman_dict_1[9]\n            elif 10 <= num <= 40:\n                roman_number += roman_dict_3[num - 10]\n            elif num > 40:\n                roman_number += roman_dict_3[40]\n                roman_number += int_to_mini_roman(num - 40)\n    return roman_number.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #return False\n    return math.isclose(math.pow(a, 2) + math.pow(b, 2), math.pow(c, 2))\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if ((a**2) + (b**2)) == (c**2):\n        return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    import math\n    if a >= b and a >= c and b >= c:\n        # a >= b >= c\n        if math.pow(b, 2) + math.pow(c, 2) == math.pow(a, 2):\n            return True\n        else:\n            return False\n    elif b >= a and b >= c and a >= c:\n        # b >= a >= c\n        if math.pow(a, 2) + math.pow(c, 2) == math.pow(b, 2):\n            return True\n        else:\n            return False\n    elif c >= a and c >= b and a >= b:\n        # c >= a >= b\n        if math.pow(a, 2) + math.pow(b, 2) == math.pow(c, 2):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return c**2 == a**2 + b**2\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return None\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or c**2 + b**2 == a**2:\n        return True\n    else:\n        return Fals"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a**2 + b**2 == c**2\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    unique_chars = []\n    # return \"\"\n    for word in words:\n        count = Counter(word)\n        unique_chars.append(count)\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return None\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_len:\n            max_len = len(set(word))\n            max_word = word\n    return max_wor"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def count_unique_chars(word):\n        unique_chars = set()\n        for char in word:\n            unique_chars.add(char)\n        return len(unique_chars)\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return max(words, key=lambda x: len(set(x)))\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    word = words[0]\n    for i in range(len(words)):\n        if len(words[i]) > len(word) or (len(words[i]) == len(word) and words[i] < word):\n            word = words[i]\n    return word\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return max(words, key=lambda x: len(set(x)))\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max_words = []\n    for word in words:\n        if len(max_words) == 0:\n            max_words.append(word)\n        else:\n            #if len(word) == len(max_words[0]):\n            if word >= max_words[0]:\n                max_words.insert(0, word)\n            else:\n                max_words.append(word)\n    return max_words[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #list_unique = []\n    #for i in words:\n    #    list_unique.append(set(i))\n    #print(list_unique)\n    #list_unique = list(map(set, words))\n    #print(list_unique)\n    #a = set(list_unique)\n    #print(a)\n    #print(list(a))\n    #list_unique = list(map(set, words))\n    #print(list_unique)\n    #print(list_unique.count(list_unique[0]))\n    #print(list_unique.count(list_unique[1]))\n    #print(list_unique.count(list_unique[2]))\n    #print(list_unique[0])\n    #print(list_unique[1])\n    #print(list_unique[2])\n    \n    #list_unique = list(map(set, words))\n    #print(list_unique)\n    #print(max(list_unique))\n    #print(min(list_unique))\n    \n    #list_unique = list(map(set, words))\n    #print(list_unique)\n    #print(list_unique.count(list_unique[0]))\n    #print(list_unique.count(list_unique[1]))\n    #print(list_unique.count(list_unique[2]))\n    #print(list_unique[0])\n    #print(list_unique[1])\n    #print(list_unique[2])\n    #print(max(list_unique))\n    #print(min(list_unique))\n    \n    #words_set = set(words)\n    #for i in words_set:\n    #    print(i)\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    \n    #for i in words_set:\n        #print(i)\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n    #print(words_set)\n    #print(words_set.pop())\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = None\n    for word in words:\n        if result == None:\n            result = word\n        elif len(result) > len(word):\n            pass\n        elif len(result) == len(word):\n            if result < word:\n                pass\n            else:\n                result = word\n        elif len(result) < len(word):\n            result = word\n    return result\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    if number < 0:\n        number = 0\n    if need < 0:\n        need = 0\n    if remaining < 0:\n        remaining = 0\n    \n    remaining -= need\n    number += need\n    \n    if remaining < 0:\n        remaining = 0\n        number -= need\n    \n    return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    if remaining < need:\n        return [number + remaining, 0]\n    # else, return the number of carrots left after eating\n    return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if number + remaining >= need:\n        return [number + remaining, 0]\n    else:\n        return [number + remaining, need - (number + remaining)]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if remaining < need:\n        return [number+remaining, 0]\n    else:\n        return [number+need, remaining-need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [number+need, remaining-need]"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = 0\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            result = result + operand[i]\n        elif operator[i] == '-':\n            result = result - operand[i]\n        elif operator[i] == '*':\n            result = result * operand[i]\n        elif operator[i] == '//':\n            result = result // operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i - 1] == '+':\n            result += operand[i]\n        elif operator[i - 1] == '-':\n            result -= operand[i]\n        elif operator[i - 1] == '*':\n            result *= operand[i]\n        elif operator[i - 1] == '//':\n            result //= operand[i]\n        elif operator[i - 1] == '**':\n            result **= operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # --- YOU CODE STARTS HERE\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == \"+\":\n            result += operand[i]\n        elif operator[i] == \"-\":\n            result -= operand[i]\n        elif operator[i] == \"*\":\n            result *= operand[i]\n        elif operator[i] == \"/\":\n            result //= operand[i]\n        elif operator[i] == \"**\":\n            result **= operand[i]\n    return result\n    # ---  --- #\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # create result\n    result = None\n    # Do a string\n    if isinstance(operand, str):\n        # If result is undefined, return operand\n        if result == None:\n            return operand\n    else:\n        # If operator is +, return sum of operand\n        if operator == \"+\":\n            result = sum(operand)\n        # If operator is -, return sum of operand\n        elif operator == \"-\":\n            # Make a copy of operand\n            operand_copy = operand[:]\n            # Reverse operand\n            operand_copy.reverse()\n            # Calculate negative value of operand\n            result = sum(operand_copy)\n        # If operator is *, return product of operand\n        elif operator == \"*\":\n            # Calculate product of operand\n            result = reduce(lambda x, y: x * y, operand)\n        # If operator is //, return floor of division\n        elif operator == \"//\":\n            # Calculate quotient of operand\n            result = reduce(lambda x, y: x // y, operand)\n        # If operator is **, return power of operand\n        elif operator == \"**\":\n            # Calculate power of operand\n            result = reduce(lambda x, y: x ** y, operand)\n    # Return result\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = 0\n    if operator[0] == \"+\":\n        result = operand[0] + operand[1]\n    elif operator[0] == \"-\":\n        result = operand[0] - operand[1]\n    elif operator[0] == \"*\":\n        result = operand[0] * operand[1]\n    elif operator[0] == \"//\":\n        result = operand[0] // operand[1]\n    elif operator[0] == \"**\":\n        result = operand[0] ** operand[1]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = None\n    pass\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # YOUR CODE HERE\n    result = 0\n    for i in range(len(operator)):\n        #print(operator[i], operand[i])\n        if operator[i] == '+':\n            result += operand[i]\n        if operator[i] == '-':\n            result -= operand[i]\n        if operator[i] == '*':\n            result *= operand[i]\n        if operator[i] == '//':\n            result //= operand[i]\n        if operator[i] == '**':\n            result **= operand[i]\n    return result\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for c in s:\n        if c.isalpha():\n            result.append(c.swapcase())\n        else:\n            result.append(c)\n    return \"\".join(result)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not s:\n        return s\n    else:\n        return re.sub(r'[a-zA-Z]','#',s)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return s\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    # Your code here\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = \"\"\n    is_lower = lambda char: char.islower()\n    for char in s:\n        if char.isalpha():\n            if is_lower(char):\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return resul"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    import re\n    return re.sub(r'(?i)([a-z])', lambda x: x.group(1).upper(), s)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if s.isalpha():\n        return s.swapcase()\n    return s[::-1]\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return re.sub(\"[a-zA-Z]\", lambda x: x.group(0).lower(), s)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s=s.lower()\n    result=\"\"\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                result+=i.lower()\n            else:\n                result+=i.upper()\n        else:\n            result+=i\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].swapcase()\n        else:\n            result += s[i]\n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(text) == 0:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if text == '':\n        return None\n    elif text == None:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if text == '':\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    hash_func = hashlib.md5()\n    if text == '':\n        return None\n    else:\n        hash_func.update(text.encode('utf-8'))\n        return hash_func.hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if text == \"\":\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not text:\n        return None\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [x for x in range(a, b+1) if x%2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a % 2 == 0 and b % 2 == 0:\n        if a < b:\n            a = a + 1\n            while a < b:\n                if a % 2 == 0:\n                    yield a\n                a += 1\n        else:\n            a = a - 1\n            while a > b:\n                if a % 2 == 0:\n                    yield a\n                a -= 1\n    else:\n        if a < b:\n            a = a + 1\n            while a < b:\n                if a % 2 == 0:\n                    yield a\n                a += 1\n        else:\n            a = a - 1\n            while a > b:\n                if a % 2 == 0:\n                    yield a\n                a -= 1\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    evens = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [x for x in range(a, b+1) if x % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return []\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code here\n    return []\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    numbers = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            numbers.append(i)\n    return numbers\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    list_integers = []\n    i = a\n    while i <= b:\n        if is_even(i):\n            list_integers.append(i)\n        i += 1\n    return list_integers\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: Write your code here\n    ret_arr = []\n    for i in range(a, b+1):\n        if i%2 == 0:\n            ret_arr.append(i)\n    return ret_arr\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n"
    }
]