[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert 0 < threshold < 1\n    numbers = sorted(numbers)\n    if numbers[0] >= numbers[1]:\n        return False\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] < threshold:\n            return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # time complexity: O(n^2)\n    # space complexity: O(1)\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 79
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i!= j and abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert threshold >= 0, \"Threshold needs to be positive\"\n",
        "num_ids": 16
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return any(\n        is_close(n1, n2, threshold) for n1, n2 in itertools.combinations(numbers, 2)\n    )\n",
        "num_ids": 42
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numbers = sorted(numbers)\n    for i, x in enumerate(numbers[1:]):\n        y = numbers[i]\n        if abs(x - y) <= threshold:\n            return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not numbers:\n        return False\n    numbers.sort()\n    delta_x = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        delta_y = numbers[i + 1] - numbers[i]\n        delta_xy = abs(delta_x - delta_y)\n        if delta_xy < threshold:\n            return True\n    return False\n",
        "num_ids": 104
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i, n in enumerate(numbers):\n        for m in numbers[i+1:]:\n            if abs(n - m) <= threshold:\n                return True\n",
        "num_ids": 42
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    list_parens = paren_string.split(' ')\n    # print(list_parens)\n    new_list = []\n    temp_list = []\n    count = 0\n    for i in range(len(list_parens)):\n        if i == 0:\n            temp_list.append(list_parens[i])\n        if list_parens[i] == '(':\n            count += 1\n            temp_list.append(list_parens[i])\n        if list_parens[i] == ')':\n            count -= 1\n            temp_list.append(list_parens[i])\n        if count == 0:\n            new_list.append(temp_list)\n            temp_list = []\n    return_list = []\n    # print(new_list)\n    for item in new_list:\n        if len(item) > 1:\n            return_list.append(''.join(item))\n        else:\n            return_list.append(item[0])\n    return return_list\n",
        "num_ids": 248
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) == 0:\n                raise Exception('Invalid input: {}'.format(paren_string))\n            else:\n                paren_stack.pop()\n",
        "num_ids": 89
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert type(paren_string) == str\n    if not paren_string:\n        return []\n    if paren_string.count('(')!= paren_string.count(')'):\n        return []\n    \n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return []\n            else:\n                stack.pop()\n    return [paren_string[:index] + '(' + paren_string[index:] for index in range(1, len(paren_string), 2)]\n",
        "num_ids": 149
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Start with an empty list of strings\n    list_of_strings = []\n",
        "num_ids": 20
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    stack = []\n    cur_group = ''\n    groups = []\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(index)\n            cur_group += char\n        elif char == ')' and len(stack) > 0:\n            stack.pop()\n            cur_group += char\n        elif char == ')' and len(stack) == 0:\n            groups.append(cur_group)\n            cur_group = ''\n    return groups\n",
        "num_ids": 120
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    parens = []\n    braces = []\n    output = []\n    for s in paren_string:\n        if s == \"(\":\n            parens.append(s)\n        elif s == \")\":\n            if len(parens) == 0:\n                output.append(braces)\n                braces = []\n            else:\n                parens.pop()\n        else:\n            braces.append(s)\n    output.append(braces)\n    return output\n",
        "num_ids": 116
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not paren_string:\n        return []\n",
        "num_ids": 14
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    open_paren_stack = []\n    curr_group = ''\n    for index, ch in enumerate(paren_string):\n        if ch == '(':\n            open_paren_stack.append(index)\n            curr_group += ch\n        elif ch == ')':\n            if not open_paren_stack:\n                raise Exception(\"Invalid paren group\")\n            # get the topmost open paren of the stack, i.e. the last one that matched (\n            open_paren_stack.pop()\n            curr_group += ch\n        if not open_paren_stack:\n            result.append(curr_group)\n            curr_group = ''\n",
        "num_ids": 164
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your code here\n    # for the spaces in the string, I'll replace them with \"\"\n    p_string = paren_string.replace(' ', '')\n    # intialize an empty list to store the result\n    result = []\n    # intialize a stack to store the opened parenthesis\n    stack = []\n    for c in p_string:\n        # check if the input character is the opening parenthesis\n        if c == '(':\n            stack.append(c)\n        elif c == ')' and len(stack) > 0:\n            # if the input character is the closing parenthesis\n            # and the stack is not empty\n            stack.pop()\n            # add the string to the result if the stack is empty\n            if len(stack) == 0:\n                result.append(p_string[:len(p_string) - len(p_string.lstrip('('))])\n                p_string = p_string[len(p_string) - len(p_string.lstrip('(')):]\n    # return the result after adding the last string to the result\n    return result + [p_string]\n",
        "num_ids": 264
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = int(number)\n    return number - i\n",
        "num_ids": 15
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    integer, decimal = str(number).split('.')\n    decimal = decimal[:len(decimal) - 1]\n    return float(decimal)\n",
        "num_ids": 39
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    remainder = number - int(number)\n    return remainder\n",
        "num_ids": 17
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return number - math.floor(number)\n",
        "num_ids": 12
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return number % 1\n",
        "num_ids": 7
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert number > 0, \"Given number must be positive\"\n    return int(number * 10 ** decimal_precision) / (10 ** decimal_precision)\n",
        "num_ids": 38
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return number % 1\n",
        "num_ids": 7
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "num_ids": 29
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(operations) < 0\n",
        "num_ids": 11
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Below zero check has to be executed before any of the operations is made.\n    # So we append the first 0 to the list.\n    if 0 in operations:\n        operations.append(0)\n",
        "num_ids": 48
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # TODO: your code here\n    return False\n",
        "num_ids": 14
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return min(operations) < 0\n",
        "num_ids": 11
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(operations) == 0:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if 0 in operations:\n        return True\n    return False\n",
        "num_ids": 16
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(operations) > 1 and operations[1] > 0:\n        return True\n    for item in operations:\n        if item > 0:\n            continue\n        return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #\n    # TODO: implement this function.\n    #\n    return sum(abs(n - mean(numbers)) for n in numbers) / len(numbers)\n",
        "num_ids": 42
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = len(numbers)\n    if n < 2:\n        raise ValueError(\"At least 2 elements in numbers needed.\")\n    center = sum(numbers) / n\n    absolute_deviations = [(x - center) ** 2 for x in numbers]\n    return (sum(absolute_deviations) / n) ** 0.5\n",
        "num_ids": 79
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # TODO: Implement this function\n    if numbers:\n        return sum([abs(number - sum(numbers) / len(numbers)) for number in numbers]) / len(numbers)\n    else:\n        raise ValueError(\"Cannot calculate MAD of empty list\")\n",
        "num_ids": 64
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(abs(x - sum(numbers) / len(numbers))) / len(numbers)\n",
        "num_ids": 27
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    numbers_sum = sum(numbers)\n    n = len(numbers)\n    mean = numbers_sum / n\n    sum_diff_from_mean = sum(abs(mean - number) for number in numbers)\n    mad = sum_diff_from_mean / n\n    return mad\n",
        "num_ids": 71
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    total = 0\n    for num in numbers:\n        total += abs(num - mean(numbers))\n    return total / len(numbers)\n",
        "num_ids": 36
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = len(numbers)\n    deviations = []\n    mean = sum(numbers) / n\n    for x in numbers:\n        deviations.append(abs(x - mean))\n    mad = sum(deviations) / n\n    return mad\n",
        "num_ids": 62
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Get the average of the input list:\n    average = sum(numbers) / len(numbers)\n    # Initialise a new list with the difference between each value and the mean:\n    differences = [abs(x - average) for x in numbers]\n    # Return the average of those absolute values:\n    return sum(differences) / len(differences)\n",
        "num_ids": 87
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert len(numbers) >= 1\n",
        "num_ids": 11
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers = sorted(numbers)\n    mean = sum(numbers) / len(numbers)\n    mad = 0\n    for number in numbers:\n        mad += abs(number - mean)\n    return mad / len(numbers)\n",
        "num_ids": 58
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        return numbers\n",
        "num_ids": 16
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [delimeter] + [n for n in numbers[:-1:2]] + [delimeter]\n",
        "num_ids": 26
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers = list(numbers)\n    if len(numbers) < 1:\n        return []\n    else:\n        new_numbers = []\n        for i in range(0, len(numbers), 2):\n            if i!= 0:\n                new_numbers.append(delimeter)\n            new_numbers.append(numbers[i])\n        return new_numbers\n",
        "num_ids": 95
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [delimeter] + [numbers[0]] + [delimeter] + numbers[1:]\n",
        "num_ids": 25
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not numbers:\n        return []\n    elif len(numbers) == 1:\n        return [delimeter] + numbers\n    else:\n        result = [numbers[0]]\n        for i in range(1, len(numbers)):\n            result.append(delimeter)\n            result.append(numbers[i])\n        result.append(numbers[-1])\n    return result\n",
        "num_ids": 97
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [numbers[0]] + [delimeter] + [x for x in numbers[1:-1] if x!= numbers[-2]] + [delimeter] + [numbers[-1]]\n",
        "num_ids": 49
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    for i in range(0, len(numbers) - 1):\n        result += [numbers[i]]\n        result += [delimeter]\n    result += [numbers[-1]]\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    res = []\n    for i in range(0, len(numbers) - 1):\n        res.append(numbers[i])\n        res.append(delimeter)\n    res.append(numbers[-1])\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    res = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            res.append(numbers[i])\n        else:\n            res.append(delimeter)\n    return res\n",
        "num_ids": 56
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # empty list\n    if len(numbers) == 0:\n        return []\n    # single element list\n    if len(numbers) == 1:\n        return [numbers[0]]\n    # delimeter is the same as the last element in list\n    if delimeter == numbers[-1]:\n        return intersperse(numbers[:-1], delimeter)\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n",
        "num_ids": 116
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    groups = [group.split() for group in paren_string.split(' ')]\n    return [get_max_depth(group) for group in groups]\n",
        "num_ids": 39
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    paren_list = [int(x) for x in paren_string.split(' ')]\n    return [max(d[i] for d in paren_list if d[i] is not None) for i in range(len(paren_list))]\n",
        "num_ids": 62
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    all_parens = paren_string.split(\" \")\n    return max([parse_parens(paren) for paren in all_parens], key=len)\n",
        "num_ids": 42
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # TODO: Write code\n    if len(paren_string)==1:\n        return 0\n    stack=[]\n    for x in paren_string:\n        if x=='(':\n            stack.append(1)\n        elif x==')':\n            stack.pop()\n    return stack\n",
        "num_ids": 74
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    parens_list = paren_string.split()\n    final_list = []\n    for item in parens_list:\n        nested_parens = 0\n        for char in item:\n            if char == '(':\n                nested_parens += 1\n            if char == ')':\n                nested_parens -= 1\n            if nested_parens < 0:\n                break\n        if nested_parens == 0:\n            final_list.append(0)\n        else:\n            final_list.append(nested_parens)\n    return final_list\n",
        "num_ids": 139
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    stack = []\n    group_size = 0\n    parentheses = {'(':')', '[':']', '{':'}'}\n    for char in paren_string:\n        if char in parentheses:\n            stack.append(char)\n            group_size += 1\n        elif char in parentheses.values():\n            if char == parentheses[stack[group_size-1]]:\n                stack.pop()\n                group_size -= 1\n            else:\n                group_size = 0\n    return [len(stack)]\n",
        "num_ids": 125
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # TODO: Write this function\n    # Initialize\n    my_stack = []\n    # Loop through the string\n    for item in paren_string.split():\n        # Push each item into the stack\n        my_stack.append(item)\n    # Initialize the return list\n    result = []\n    # Loop through the stack\n    while my_stack:\n        # Get the top item of the stack\n        top_item = my_stack[len(my_stack) - 1]\n        # If the item is a left parenthesis, then push it to the return list\n        if top_item == '(' or top_item == '(':\n            result.append(my_stack.pop())\n        # If the item is a right parenthesis, then the nested level of the item is the index of the last left parenthesis\n        elif top_item == ')' or top_item == ')':\n            result.append(my_stack.pop())\n    # Return the maximum level of nesting\n    return result\n",
        "num_ids": 234
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    paren_stack = []\n    paren_string = paren_string.replace('(', '( ')\n    paren_string = paren_string.replace(')',')')\n    paren_string = paren_string.split()\n    # print(paren_string)\n    for i, char in enumerate(paren_string):\n        # print(i, char)\n        if char == '(':\n            paren_stack.append(i)\n        elif char == ')':\n            if len(paren_stack) == 0:\n                print(\"stack empty error\")\n                return False\n            else:\n                # print(i, paren_stack)\n                paren_stack.pop()\n    # print(paren_stack)\n    return [len(paren_stack)]\n",
        "num_ids": 181
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    paren_list = paren_string.split(' ')\n    max_nesting_list = []\n    for i in paren_list:\n        max_nesting_list.append(len(parse_nested_parens_helper(i)))\n    return max_nesting_list\n",
        "num_ids": 71
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for each_paren in paren_string.split(' '):\n        paren_depth = 0\n        for i in range(len(each_paren)):\n            if each_paren[i] == '(':\n                paren_depth += 1\n            else:\n                paren_depth -= 1\n            if paren_depth == 0:\n                result.append(i)\n                break\n    return result\n",
        "num_ids": 98
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = list()\n    for i in strings:\n        if substring in i:\n            result.append(i)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = [x for x in strings if substring in x]\n    return result\n",
        "num_ids": 21
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [\n        i for i in strings\n        if substring in i\n    ]\n",
        "num_ids": 22
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not substring or not strings:\n        return []\n    if substring not in strings:\n        return []\n    substring_len = len(substring)\n    filtered = []\n    for string in strings:\n        if string[:substring_len] == substring:\n            filtered.append(string)\n    return filtered\n",
        "num_ids": 81
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    numbers_sum = 0\n    numbers_product = 1\n    for number in numbers:\n        numbers_sum += number\n        numbers_product *= number\n    return numbers_sum, numbers_product\n",
        "num_ids": 51
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sum_ = 0\n    prod = 1\n    for n in numbers:\n        sum_ += n\n        prod *= n\n    return sum_, prod\n",
        "num_ids": 40
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum_ = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return sum_, product\n",
        "num_ids": 36
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n",
        "num_ids": 46
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return (sum(numbers), reduce(lambda a, b: a * b, numbers, 1))\n",
        "num_ids": 25
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        total_sum = 0\n        total_product = 1\n        for number in numbers:\n            total_sum += number\n            total_product *= number\n        return (total_sum, total_product)\n",
        "num_ids": 72
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return (sum_, product)\n",
        "num_ids": 40
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n",
        "num_ids": 25
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return (sum_, product)\n",
        "num_ids": 40
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result: List[int] = [0] * len(numbers)\n    for i in range(len(numbers)):\n        max_val: int = numbers[i]\n        for j in range(i, len(numbers)):\n            if numbers[j] > max_val:\n                max_val = numbers[j]\n            result[j] = max_val\n    return result\n",
        "num_ids": 95
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    rolling_max_list = []\n    index_list = []\n    for i, num in enumerate(numbers):\n        index_list.append(i)\n        rolling_max_list.append(max(numbers[:i + 1]))\n    return rolling_max_list\n",
        "num_ids": 69
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    max_numbers = []\n    max_so_far = 0\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        max_numbers.append(max_so_far)\n    return max_numbers\n",
        "num_ids": 65
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    res = [max(numbers[0:i]) for i in range(1, len(numbers) + 1)]\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(numbers) == 0:\n        return []\n    max_until = 0\n    max_list = []\n    for number in numbers:\n        if number > max_until:\n            max_until = number\n        max_list.append(max_until)\n    return max_list\n",
        "num_ids": 71
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        return [max(numbers[0], numbers[1])] + rolling_max(numbers[2:])\n",
        "num_ids": 63
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    max_value = numbers[0]\n    max_list = [max_value]\n    for i, number in enumerate(numbers[1:]):\n        if number > max_value:\n            max_value = number\n        max_list.append(max_value)\n    return max_list\n",
        "num_ids": 72
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max_numbers: List[int] = []\n    for i, n in enumerate(numbers):\n        max_numbers.append(max(numbers[:i+1]))\n    return max_numbers\n",
        "num_ids": 54
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    max_list = [numbers[0]]\n    for number in numbers:\n        max_list.append(max(number, max_list[-1]))\n    return max_list\n",
        "num_ids": 46
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    res: List[int] = [numbers[0]]\n    for n in numbers[1:]:\n        if n > res[-1]:\n            res.append(n)\n        else:\n            res[-1] = n\n    return res\n",
        "num_ids": 61
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    palindrome = string\n    for index in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[index:]):\n            palindrome += string[index:]\n            break\n    return palindrome[::-1] + string\n",
        "num_ids": 68
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    palindromic_postfix = find_longest_palindromic_postfix(string)\n    if palindromic_postfix == '':\n        return string\n    else:\n        result = string[:len(string) - len(palindromic_postfix)] + string[-len(palindromic_postfix):]\n        return result if is_palindrome(result) else make_palindrome(result)\n",
        "num_ids": 106
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    palindrome = string[::-1]\n",
        "num_ids": 13
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    return make_palindrome(string[:-1]) + string[::-1]\n",
        "num_ids": 47
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    len_of_string = len(string)\n    for i in range(len_of_string):\n        if is_palindrome(string[i:]):\n            return string[:i] + string[::-1]\n    return string\n",
        "num_ids": 59
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    palindromic_suffix = find_palindromic_suffix(string)\n    return string[:-len(palindromic_suffix)] + palindromic_suffix[::-1]\n",
        "num_ids": 52
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    suffix = longest_palindrome_postfix(string)\n    return string + suffix[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    longest_palindromic_postfix = find_longest_palindromic_postfix(string)\n    palindromic_prefix = string[:-len(longest_palindromic_postfix)]\n    return palindromic_prefix + longest_palindromic_postfix[::-1]\n",
        "num_ids": 78
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # find the longest palindromic postfix of the string\n    longest_palindrome = longest_palindrome_postfix(string)\n    # find the reverse of the longest palindromic prefix\n    longest_palindrome_reverse = longest_palindrome_reverse_prefix(string)\n    # return the original string with reversed prefix appended\n    return string + longest_palindrome_reverse\n",
        "num_ids": 97
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # First, find the longest palindromic suffix of the input string.\n    # A palindromic suffix is a suffix that is a palindrome.\n    # In this problem, we're trying to find the longest palindromic suffix\n    # so we'll use the longest_palindromic_suffix function.\n    longest_palindromic_suffix = longest_palindromic_suffix(string)\n    \n    # Now, we'll go through the string, starting from the end, and build our new string.\n    # We'll start building at the index of the longest palindromic suffix.\n    # We'll go backwards through the string, using the longest palindromic suffix as our start point.\n    new_string = []\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] == longest_palindromic_suffix[i]:\n            new_string.append(longest_palindromic_suffix[i])\n        else:\n            new_string.append(string[i])\n    return \"\".join(new_string)\n",
        "num_ids": 266
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(a)!= len(b):\n        raise ValueError('Strings should have the same length')\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "num_ids": 59
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # return format((int(a, 2) ^ int(b, 2)), 'b')\n    # return format(bin(int(a, 2) ^ int(b, 2))[2:], 'b')\n    return format(bin(int(a, 2) ^ int(b, 2))[2:].zfill(len(a)), 'b')\n",
        "num_ids": 85
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # naive implementation\n    # return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n    # this one is faster\n    return ''.join([str((int(a[i])+int(b[i])) % 2) for i in range(len(a))])\n",
        "num_ids": 83
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "num_ids": 34
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "num_ids": 33
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    xor = lambda a, b: bin(int(a, 2) ^ int(b, 2))[2:]\n    return xor(a, b)\n",
        "num_ids": 39
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = ''\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n",
        "num_ids": 42
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return ''.join(map(lambda x: str(int(x[0]) ^ int(x[1])), zip(a,b)))\n",
        "num_ids": 35
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "num_ids": 33
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "num_ids": 33
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n",
        "num_ids": 33
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if strings:\n        result = strings[0]\n        for string in strings:\n            if len(string) > len(result):\n                result = string\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n    longest_word = \"\"\n    for word in strings:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n    # return max(strings, key=len)\n",
        "num_ids": 67
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    longest_one = ''\n    if len(strings) == 0:\n        return None\n    for string in strings:\n        if len(string) > len(longest_one):\n            longest_one = string\n    return longest_one\n",
        "num_ids": 59
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not strings:\n        return None\n    longest = ''\n    for string in strings:\n        if len(string) > len(longest):\n            longest = string\n    return longest\n",
        "num_ids": 47
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 26
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 22
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not strings:\n        return None\n    longest = ''\n    for string in strings:\n        if len(string) > len(longest):\n            longest = string\n    return longest\n",
        "num_ids": 47
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)\n",
        "num_ids": 44
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 22
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    while b > 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 23
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return b if a == 0 else greatest_common_divisor(b % a, a)\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n    \n    \ndef main():\n    \"\"\" Main function of this program \"\"\"\n    print(greatest_common_divisor(21, 6))\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 74
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)\n",
        "num_ids": 72
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 33
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert a > 0 and b > 0, 'Numbers must be greater then 0'\n    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 40
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n",
        "num_ids": 38
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    a, b = a % b, b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a)\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return list(map(lambda x: x, [''] + [string[:i] for i in range(1, len(string) + 1)]))\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0 : i + 1])\n    return prefixes\n",
        "num_ids": 39
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pref = []\n    for i in range(len(string)):\n        pref.append(string[0:i+1])\n    return pref\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    prefixes = ['']\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n",
        "num_ids": 40
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Initially, it is possible that the list contains just the empty string.\n    # In that case, return an empty list.\n    if len(string) == 0:\n        return []\n    # Start by creating a list that contains just the first character of the input string.\n    # Note that we also need to include a list that only contains the empty string.\n    lst = [string[0:1]]\n    # Now, for every possible prefix of the input string, including the empty string,\n    # create a list and add it to the list lst.\n    for i in range(1, len(string)):\n        lst.append(string[0:i + 1])\n    return lst\n",
        "num_ids": 162
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not string:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if string == '':\n        return []\n    if len(string) == 1:\n        return [string]\n    prefixes = [string[0:i] for i in range(1, len(string) + 1)]\n    return prefixes + all_prefixes(string[1:])\n",
        "num_ids": 70
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[0:i])\n    return prefixes\n",
        "num_ids": 39
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return''.join([str(i) for i in range(n+1)])\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n",
        "num_ids": 18
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return''.join(list(map(str, range(n+1))))\n",
        "num_ids": 19
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert n >= 0, \"n must be non-negative\"\n",
        "num_ids": 16
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \" \".join(map(str, range(n+1)))\n",
        "num_ids": 18
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \" \".join([str(i) for i in range(n+1)])\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result[:-1]\n",
        "num_ids": 36
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    counter = {}\n    for char in string.lower():\n        counter[char] = counter.get(char, 0) + 1\n    return len(counter.keys())\n",
        "num_ids": 41
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    d = {}\n    for char in string.lower():\n        if char not in d:\n            d[char] = 1\n        else:\n            d[char] += 1\n    return len(d.keys())\n",
        "num_ids": 52
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lower = string.lower()\n    return len(set(lower))\n",
        "num_ids": 18
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    distinct_chars = set()\n    for character in string:\n        distinct_chars.add(character)\n    return len(distinct_chars)\n",
        "num_ids": 41
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(set([x.lower() for x in string]))\n",
        "num_ids": 18
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    output = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            output.append(4)\n            i += 1\n        elif music_string[i] == 'o|':\n            output.append(2)\n            i += 1\n        elif music_string[i] == '.':\n            output.append(1)\n            i += 1\n        elif music_string[i] == '|':\n            i += 1\n        else:\n            raise ValueError('Unrecognized character \"{}\" at position {}'.format(music_string[i], i))\n    return output\n",
        "num_ids": 156
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [4 if char == \"o\" else 2 if char == \"o|\" else 1 for char in music_string]\n",
        "num_ids": 30
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    note_list = music_string.split()\n    beat_list = []\n    for i in note_list:\n        if i == 'o':\n            beat_list.append(4)\n        elif i == 'o|':\n            beat_list.append(2)\n        else:\n            beat_list.append(1)\n    return beat_list\n",
        "num_ids": 87
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    notes = music_string.split(' ')\n    res = []\n    for note in notes:\n        if '.' in note:\n            num = int(note[1:-1])\n        elif 'o' in note:\n            num = 4\n        elif '|' in note:\n            num = 2\n        res.append(num)\n    return res\n",
        "num_ids": 87
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [1 if x.startswith(\"o\") or x.startswith(\"o|\") else 2 if x.startswith(\".|\") else 4 for x in music_string.split(\" \")]\n",
        "num_ids": 50
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return list(map(int, music_string.replace('|','').split(' ')))\n",
        "num_ids": 24
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [sum([4, 2, 1][i] if x == 'o' else [2, 1][i] if x == 'o|' else 1 for i, x in enumerate(music_string.split()))) for _ in range(2)]\n",
        "num_ids": 60
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [_parse_music_string(s) for s in music_string.split()]\n",
        "num_ids": 24
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    res = []\n    for note in music_string.split():\n        if note == 'o':\n            res.append(4)\n        elif note == 'o|':\n            res.append(2)\n        elif note == '.|':\n            res.append(1)\n",
        "num_ids": 68
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = list()\n    music = music_string.split(' ')\n    for i in music:\n        if i == '':\n            continue\n        if 'o' in i:\n            result.append(4)\n        elif 'o|' in i:\n            result.append(2)\n        elif '.|' in i:\n            result.append(1)\n",
        "num_ids": 90
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    total_overlaping_count = 0\n    for idx in range(len(string)):\n        if string[idx] == substring[0]:\n            count = 1\n            for j in range(1, len(substring)):\n                if idx + j >= len(string):\n                    break\n                if string[idx + j]!= substring[j]:\n                    break\n                count += 1\n            if count == len(substring):\n                total_overlaping_count += 1\n    return total_overlaping_count\n",
        "num_ids": 130
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    times = 0\n    for i in range(0, len(string)):\n        if string[i:].startswith(substring):\n            times += 1\n    return times\n",
        "num_ids": 44
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i: i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    i = 0\n    while i < len(string) - len(substring) + 1:\n        if string[i : i + len(substring)] == substring:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    number_of_overlaps = 0\n    while string.find(substring)!= -1:\n        number_of_overlaps += 1\n        string = string.replace(substring, '', 1)\n    return number_of_overlaps\n",
        "num_ids": 62
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    counter = 0\n    substring_len = len(substring)\n    string_len = len(string)\n    for i in range(string_len - substring_len + 1):\n        if string[i:i + substring_len] == substring:\n            counter += 1\n    return counter\n",
        "num_ids": 73
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    counter = 0\n    length_substring = len(substring)\n    for i in range(len(string)):\n        if string[i:i+length_substring] == substring:\n            counter += 1\n    return counter\n",
        "num_ids": 57
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(substring) > len(string):\n        return 0\n    else:\n        return count_overlaping(string, substring)\n",
        "num_ids": 36
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n    return numbers\n",
        "num_ids": 35
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    number_list = numbers.split(' ')\n    sorted_number_list = sorted(number_list)\n    return''.join(sorted_number_list)\n",
        "num_ids": 41
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # create a list of numbers\n    numbers_list = numbers.split()\n    \n    # sort the list in ascending order\n    numbers_list.sort()\n",
        "num_ids": 40
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers = numbers.split()\n    sorted_numbers = []\n    for i in range(0, len(numbers)):\n        sorted_numbers.append(min(numbers))\n        numbers.remove(min(numbers))\n    return \" \".join(sorted_numbers)\n",
        "num_ids": 74
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    new_nums = []\n    for num in numbers.split(' '):\n        if num in ['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']:\n            new_nums.append(num)\n    \n    new_nums.sort()\n    return''.join(new_nums)\n",
        "num_ids": 84
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return''.join(sorted(numbers.split(' '), key=lambda x: int(x)))\n",
        "num_ids": 26
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    nums = numbers.split()\n    sorted_nums = sorted(nums)\n    return''.join(sorted_nums)\n",
        "num_ids": 35
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    nums = numbers.split(\" \")\n    sorted_nums = sorted(nums)\n    return \" \".join(sorted_nums)\n",
        "num_ids": 38
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(len(numbers) - i - 1):\n            if numbers[j] + numbers[j + 1] > numbers[j + 1] + numbers[j]:\n                numbers = swap(numbers, j, j + 1)\n    return numbers\n",
        "num_ids": 79
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return''.join(sorted(numbers.split(), key=lambda x: int(x)))\n",
        "num_ids": 24
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers[1:]:\n        if number > largest:\n            largest = number\n        if number < smallest:\n            smallest = number\n    return (smallest, largest)\n",
        "num_ids": 62
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"Not enough values in list\")\n    minimum = 0\n    maximum = 0\n    for idx, number in enumerate(numbers):\n        if idx == 0:\n            minimum = number\n            maximum = number\n        else:\n            if number > maximum:\n                maximum = number\n            elif number < minimum:\n                minimum = number\n",
        "num_ids": 95
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # TODO - you fill in here.\n    # I assume that the list of numbers is not empty and has at least two items.\n",
        "num_ids": 32
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[-1])\n",
        "num_ids": 22
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(f\"find_closest_elements expects a list of at least two numbers but received {numbers}\")\n    min1, min2 = numbers[0], numbers[1]\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] < numbers[j]:\n                min1 = numbers[i]\n                min2 = numbers[j]\n            else:\n                min1 = numbers[j]\n                min2 = numbers[i]\n    return min1, min2\n",
        "num_ids": 149
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # numbers = list(set(numbers))\n    # numbers.sort()\n    if len(numbers) < 2:\n        raise ValueError('less than 2 numbers')\n    numbers.sort()\n    if numbers[0] == numbers[1]:\n        raise ValueError('equal numbers')\n    if numbers[-1] == numbers[-2]:\n        raise ValueError('equal numbers')\n    return numbers[0], numbers[-1]\n",
        "num_ids": 105
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # sorted_numbers = sorted(numbers)\n    # print(sorted_numbers)\n",
        "num_ids": 25
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    first = numbers[0]\n    second = numbers[1]\n    first_distance = abs(first - second)\n    for number in numbers:\n        distance = abs(first - number)\n        if distance < first_distance:\n            second = first\n            first = number\n            first_distance = distance\n    return first, second\n",
        "num_ids": 78
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    first_element = numbers[0]\n    second_element = numbers[1]\n    min_diff = abs(numbers[0] - numbers[1])\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                first_element = numbers[i]\n                second_element = numbers[j]\n    return (first_element, second_element)\n",
        "num_ids": 135
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [(n - min(numbers)) / (max(numbers) - min(numbers)) for n in numbers]\n",
        "num_ids": 30
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # create empty list for rescaled numbers\n    rescaled_numbers = []\n    # get smallest and largest number from input\n    min_value = min(numbers)\n    max_value = max(numbers)\n    # transform each number to a percentage of the difference between the smallest and largest\n    # this makes the smallest number zero and the largest one 1\n    for number in numbers:\n        rescaled_numbers.append((number - min_value) / (max_value - min_value))\n    return rescaled_numbers\n",
        "num_ids": 126
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [0.0 + (1.0 - 0.0) * ((float(n) - min(numbers)) / (max(numbers) - min(numbers))) for n in numbers]\n",
        "num_ids": 48
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [float(number-min(numbers))/float(max(numbers)-min(numbers)) for number in numbers]\n",
        "num_ids": 32
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #TODO: implement this\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert isinstance(numbers, list), \"Input must be a list\"\n    assert len(numbers) >= 2, \"Input must contain at least two elements\"\n    \n    smallest = min(numbers)\n    biggest = max(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - smallest) / (biggest - smallest)\n    return numbers\n    \ndef rescale_to_zero_one(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert isinstance(numbers, list), \"Input must be a list\"\n    assert len(numbers) >= 2, \"Input must contain at least two elements\"\n    \n    numbers.sort()\n    \n    for i in range(len(numbers)):\n        numbers[i] = numbers[i] / (numbers[-1] - numbers[0])\n    return numbers\n    \ndef rescale_to_even(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert isinstance(numbers, list), \"Input must be a list\"\n    assert len(numbers) >= 2, \"Input must contain at least two elements\"\n    \n    min_elem = min(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = numbers[i] - min_elem\n    \n    max_elem = max(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = numbers[i] / max_elem\n    return numbers\n    \ndef rescale_to_half_and_half(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0.5 and the largest will become 0.5\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.5, 1.0, 1.5, 2.0, 2.5]\n    \"\"\"\n    assert isinstance(numbers, list), \"Input must be a list\"\n    assert len(numbers) >= 2, \"Input must contain at least two elements\"\n    \n    numbers.sort()\n    \n    for i in range(len(numbers)):\n        numbers[i] = numbers[i] / (numbers[-1] - numbers[0])\n    return numbers\n    \ndef rescale_to_unit_interval(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    assert isinstance(numbers, list), \"Input must be a list\"\n    assert len(numbers) >= 2, \"Input must contain at least two elements\"\n    \n    min_elem = min(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = numbers[i] - min_elem\n    \n    max_elem = max(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = numbers[i] / max_elem\n    return numbers",
        "num_ids": 1024
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Number of numbers is at least 2\n    smallest = numbers[0]\n    largest = numbers[0]\n    for i in numbers:\n        if i < smallest:\n            smallest = i\n        if i > largest:\n            largest = i\n",
        "num_ids": 60
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a = numbers[0]\n    b = numbers[1]\n    if a > b:\n        a, b = b, a\n    for i in range(2, len(numbers)):\n        if numbers[i] < a:\n            a = numbers[i]\n        elif numbers[i] > b:\n            b = numbers[i]\n    for i in range(len(numbers)):\n        numbers[i] -= a\n        numbers[i] /= (b - a)\n    return numbers\n",
        "num_ids": 125
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [\n        ((x - min(numbers)) / (max(numbers) - min(numbers)))\n        for x in numbers\n    ]\n",
        "num_ids": 37
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    import numpy as np\n    import math\n    \n    n = len(numbers)\n    if n < 2:\n        print(f\"must have at least 2 numbers to rescale\")\n        return numbers\n    numbers.sort()\n    rescaled = []\n    x = 0\n    while x < n:\n        rescaled.append((numbers[x] - numbers[0]) / (numbers[-1] - numbers[0]))\n        x += 1\n    return rescaled\n    \ndef rescale_to_unit_old(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    import numpy as np\n    import math\n    \n    n = len(numbers)\n    if n < 2:\n        print(f\"must have at least 2 numbers to rescale\")\n        return numbers\n    numbers.sort()\n    rescaled = []\n    x = 0\n    while x < n:\n        rescaled.append(numbers[x])\n        x += 1\n    return rescaled\n",
        "num_ids": 335
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_list = []\n    for i in values:\n        if type(i) == int:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i in values:\n        if type(i) == int:\n            result.append(i)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [v for v in values if isinstance(v, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for char in string:\n        count += 1\n    return count\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(string)):\n        count += 1\n    return count\n",
        "num_ids": 27
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    length = 0\n    for character in string:\n        length += 1\n    return length\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    counter = 0\n    for char in string:\n        counter += 1\n    return counter\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    divisor = 1\n    while divisor < n:\n        divisor += 1\n        if n % divisor == 0:\n            return divisor\n    return n\n",
        "num_ids": 45
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n>0, \"number must be positive\"\n    max_divisor = 1\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n",
        "num_ids": 64
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    for i in range(int(sqrt(n)), 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "num_ids": 39
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # return math.floor(n / math.sqrt(n))\n    divisors = []\n    # remove all divisors with a remainder\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            divisors.append(i)\n            n = n // i\n        else:\n            i += 1\n    divisors.append(n)\n    return max(divisors)\n",
        "num_ids": 104
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    divisors = range(2, n + 1)\n    for i in range(2, n + 1):\n        if n % i == 0:\n            divisors = range(i, n + 1, i)\n    return max(divisors)\n",
        "num_ids": 62
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # You can end this function by returning as you see fit\n    if n <= 1:\n        return 1\n    return n % largest_divisor(n - 1)\n",
        "num_ids": 41
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 1\n    return [n for n in range(1, n) if n%n == 0][-1]\n",
        "num_ids": 36
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert type(n) == int, \"n must be an integer\"\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n",
        "num_ids": 36
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        else:\n            divisor += 1\n    return -1\n",
        "num_ids": 50
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    largest_divisor = 1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i > largest_divisor:\n                largest_divisor = i\n    return largest_divisor\n",
        "num_ids": 60
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    primes = []\n    prime = 2\n    while prime * prime <= n:\n        while n % prime == 0:\n            n //= prime\n            primes.append(prime)\n        prime += 1\n    if n > 1:\n        primes.append(n)\n    return primes\n",
        "num_ids": 71
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n < 2:\n        raise ValueError(f\"Input number should be equal to the product of all factors, not {n}.\")\n",
        "num_ids": 33
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n        if d * d > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors\n",
        "num_ids": 80
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 2:\n        return []\n    factors = []\n    if n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    while n!= 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        else:\n            factors.append(3)\n            n = n // 3\n    return factors\n",
        "num_ids": 100
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    # [1]\n    if n == 1:\n        return []\n    \n    # [2]\n    elif n == 2:\n        return [2]\n    \n    # [3]\n    elif n == 3:\n        return [3]\n    \n    # [4]\n    elif n == 4:\n        return [2, 2]\n    \n    # [5]\n    elif n == 5:\n        return [5]\n    \n    # [6]\n    elif n == 6:\n        return [2, 3]\n    \n    # [7]\n    elif n == 7:\n        return [7]\n    \n    # [8]\n    elif n == 8:\n        return [2, 2, 2]\n    \n    # [9]\n    elif n == 9:\n        return [3, 3]\n    \n    # [10]\n    elif n == 10:\n        return [2, 5]\n    \n    # [11]\n    elif n == 11:\n        return [11]\n    \n    # [12]\n    elif n == 12:\n        return [2, 2, 3]\n    \n    # [13]\n    elif n == 13:\n        return [13]\n    \n    # [14]\n    elif n == 14:\n        return [2, 7]\n    \n    # [15]\n    elif n == 15:\n        return [3, 5]\n    \n    # [16]\n    elif n == 16:\n        return [2, 2, 2, 2]\n    \n    # [17]\n    elif n == 17:\n        return [17]\n    \n    # [18]\n    elif n == 18:\n        return [2, 3, 3]\n    \n    # [19]\n    elif n == 19:\n        return [19]\n    \n    # [20]\n    elif n == 20:\n        return [2, 2, 5]\n    \n    # [21]\n    elif n == 21:\n        return [3, 7]\n    \n    # [22]\n    elif n == 22:\n        return [2, 11]\n    \n    # [23]\n    elif n == 23:\n        return [23]\n    \n    # [24]\n    elif n == 24:\n        return [2, 2, 3, 3]\n    \n    # [25]\n    elif n == 25:\n        return [5, 5]\n    \n    # [26]\n    elif n == 26:\n        return [2, 13]\n    \n    # [27]\n    elif n == 27:\n        return [3, 9]\n    \n    # [28]\n    elif n == 28:\n        return [2, 2, 7]\n    \n    # [29]\n    elif n == 29:\n        return [29]\n    \n    # [30]\n    elif n == 30:\n        return [2, 3, 5]\n    \n    # [31]\n    elif n == 31:\n        return [31]\n    \n    # [32]\n    elif n == 32:\n        return [2, 2, 2, 2]\n    \n    # [33]\n    elif n == 33:\n        return [3, 3, 3]\n    \n    # [34]\n    elif n == 34:\n        return [2, 17]\n    \n    # [35]\n    elif n == 35:\n        return [5, 7]\n    \n    # [36]\n    elif n == 36:\n        return [2, 2, 3, 3]\n    \n    # [37]\n    elif n == 37:\n        return [37]\n    \n    # [38]\n    elif n == 38:\n        return [2, 19]\n    \n    # [39]\n    elif n == 39:\n        return [3, 13]\n    \n    # [40]\n    elif n == 40:\n        return [2, 2, 5]\n    \n    # [41]\n    elif n == 41:\n        return [41]\n    \n    # [42]\n    elif n == 42:\n        return [2, 2, 3, 3]\n    \n    # [43]\n    eli",
        "num_ids": 1024
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst = []\n    p = 2\n    while n!= 1:\n        if n % p == 0:\n            lst.append(p)\n            n //= p\n        else:\n            p += 1\n    return lst\n",
        "num_ids": 58
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    while n % 2 == 0:\n        result.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            result.append(f)\n            n //= f\n        else:\n            f += 2\n    if n!= 1:\n        result.append(n)\n    return result\n",
        "num_ids": 95
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    div = 2\n    while n > 1:\n        while n % div == 0:\n            n /= div\n            result.append(div)\n        div += 1\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0 or n == 1:\n        return []\n",
        "num_ids": 16
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    #counts = set()\n    #counts = dict()\n    counts = {}\n    #counts = collections.defaultdict(int)\n    #[counts[i] += 1 for i in numbers]\n    for i in numbers:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    #print(counts)\n    #return counts\n    \n    #one line code\n    #return list(dict.fromkeys(numbers))\n    \n    new_lst = []\n    for i in counts:\n        if counts[i] == 1:\n            new_lst.append(i)\n    #print(new_lst)\n    return new_lst\n",
        "num_ids": 180
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    unique = []\n    for num in numbers:\n        if num not in unique:\n            unique.append(num)\n    return unique\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # for i in range(len(numbers)):\n    #     if numbers.count(numbers[i]) >= 2:\n    #         numbers.remove(numbers[i])\n    # return numbers\n    return [i for n, i in enumerate(numbers) if numbers.count(i) == 1]\n",
        "num_ids": 77
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(numbers) - 1:\n        if numbers[i] == numbers[i+1]:\n            del numbers[i]\n            continue\n        i += 1\n    return numbers\n",
        "num_ids": 52
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    i = 0\n    while i < len(numbers):\n        if numbers.count(numbers[i]) > 1:\n            numbers.pop(i)\n        else:\n            i += 1\n    return numbers\n",
        "num_ids": 53
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Get the set of numbers\n    set_numbers = set(numbers)\n    # List the numbers\n    return list(set_numbers)\n",
        "num_ids": 37
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # list comprehension\n    return list(set(numbers))\n",
        "num_ids": 16
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    output = []\n    # nums = []\n    for num in numbers:\n        if num not in output:\n            output.append(num)\n    return output\n",
        "num_ids": 40
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numbers_set = set()\n    unique_numbers = []\n    for number in numbers:\n        if number not in numbers_set:\n            unique_numbers.append(number)\n            numbers_set.add(number)\n    return unique_numbers\n",
        "num_ids": 64
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    #  [1, 2, 3, 2, 4] -> [1, 2, 3, 4]\n    #  [1, 2, 2, 3, 4] -> [1, 3, 4]\n    #  [1, 2, 2, 2, 4] -> [1, 4]\n    #  [1, 2, 2, 2, 2] -> [1]\n    #  [] -> []\n    #  [] -> []\n    \n    # if only 1 element in the list, return empty list\n    # else, return the list without the duplicates\n    if len(numbers) == 1:\n        return []\n    else:\n        new_list = []\n        for number in numbers:\n            if number not in new_list:\n                new_list.append(number)\n        return new_list\n",
        "num_ids": 192
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # return string.swapcase()\n    return ''.join([char.swapcase() if char.islower() else char for char in string])\n",
        "num_ids": 37
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    flipped_case = \"\"\n    for char in string:\n        if char.islower():\n            flipped_case += char.upper()\n        else:\n            flipped_case += char.lower()\n    return flipped_case\n",
        "num_ids": 56
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join(\n        [ch.upper() if ch.islower() else ch.lower() for ch in string]\n        )\n",
        "num_ids": 34
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return string.swapcase()\n    \ndef strip_punctuation(string: str) -> str:\n    \"\"\" For a given string, remove all punctuation, returning a new string.\n    >>> strip_punctuation('Hello, World!')\n    'Hello World'\n    \"\"\"\n    return string.translate(str.maketrans('', '', string.punctuation))\n    \ndef normalize_case(string: str) -> str:\n    \"\"\" For a given string, normalize the case of all words, returning a new string.\n    >>> normalize_case('This is a title')\n    'This Is A Title'\n    \"\"\"\n    return''.join(word.lower() for word in string.split())",
        "num_ids": 169
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return string.swapcase()\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids": 36
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join(reversed([char.upper() if char.islower() else char.lower() for char in string]))\n",
        "num_ids": 33
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #new_string = \"\"\n    #for char in string:\n    #    if char.isupper():\n    #        new_string = new_string + char.lower()\n    #    else:\n    #        new_string = new_string + char.upper()\n    #return new_string\n    return \"\".join([(char.lower() if char.isupper() else char.upper()) for char in string])\n",
        "num_ids": 100
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lowercase = string.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')\n    return string.translate(lowercase).swapcase()\n",
        "num_ids": 59
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join(\n        [\n            c.upper() if c.islower() else c.lower()\n            for c in string\n        ]\n    )\n",
        "num_ids": 40
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join(c.upper() if c.islower() else c.lower() for c in string)",
        "num_ids": 27
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = ''\n    if len(strings) == 0:\n        return result\n    else:\n        return strings[0] + concatenate(strings[1:])\n        \ndef even_odd_balancing(n: int) -> str:\n    \"\"\" Balanced the odd and even digits in a number\n    >>> even_odd_balancing(43)\n    '43'\n    >>> even_odd_balancing(21)\n    '13'\n    >>> even_odd_balancing(100)\n    '13'\n    \"\"\"\n    str_num = str(n)\n    if len(str_num) == 1:\n        return str_num\n    else:\n        if len(str_num) % 2 == 1:\n            num = int(str_num[0]) + int(str_num[1])\n            return str_num[0] + str(num) + str_num[1]\n        elif len(str_num) % 2 == 0:\n            num = int(str_num[0]) + int(str_num[2])\n            return str_num[0] + str(num) + str_num[2]\n        \ndef number_of_evens(n: int) -> int:\n    \"\"\" The number of evens in a list\n    >>> number_of_evens(21345)\n    3\n    >>> number_of_evens(8642)\n    0\n    >>> number_of_evens(209812938)\n    6\n    \"\"\"\n    str_num = str(n)\n    if len(str_num) == 1:\n        return 0\n    else:\n        count = 0\n        if len(str_num) % 2 == 0:\n            for i in str_num:\n                if int(i) % 2 == 0:\n                    count += 1\n            return count\n        else:\n            return 0\n        \ndef number_of_evens_alt(n: int) -> int:\n    \"\"\" The number of evens in a list\n    >>> number_of_evens_alt(21345)\n    3\n    >>> number_of_evens_alt(8642)\n    0\n    >>> number_of_evens_alt(209812938)\n    6\n    \"\"\"\n    return len([i for i in str(n) if int(i) % 2 == 0])\n        \ndef reverse_num(n: int) -> int:\n    \"\"\" Reverse a number\n    >>> reverse_num(0)\n    0\n    >>> reverse_num(21)\n    21\n    >>> reverse_num(-21)\n    -21\n    >>> reverse_num(4321)\n    4321\n    >>> reverse_num(12345)\n    54321\n    \"\"\"\n    if n < 0:\n        return -int(str(n)[::-1])\n    else:\n        return int(str(n)[::-1])\n        \ndef reverse_num_alt(n: int) -> int:\n    \"\"\" Reverse a number\n    >>> reverse_num_alt(0)\n    0\n    >>> reverse_num_alt(21)\n    21\n    >>> reverse_num_alt(-21)\n    -21\n    >>> reverse_num_alt(4321)\n    4321\n    >>> reverse_num_alt(12345)\n    54321\n    \"\"\"\n    if n < 0:\n        return -int(str(n)[::-1])\n    else:\n        return int(str(n)[::-1])\n        \ndef is_odd(n: int) -> bool:\n    \"\"\" Check if number is odd\n    >>> is_odd(21)\n    True\n    >>> is_odd(0)\n    False\n    >>> is_odd(0.5)\n    False\n    >>> is_odd(24.5)\n    False\n    >>> is_odd(-24.5)\n    True\n    \"\"\"\n    return n % 2 == 1\n        \ndef sum_naturals(n: int) -> int:\n    \"\"\" Sum the first n natural numbers\n    >>> sum_naturals(0)\n    0\n    >>> sum_naturals(1)\n    1\n    >>> sum_naturals(5)\n    15\n    >>> sum_naturals(15)\n    60\n    \"\"\"\n    return int(sum([i for i in range(n+1)]))\n    ",
        "num_ids": 1024
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return ''\n    else:\n        return ''.join(strings)\n",
        "num_ids": 28
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = ''\n    for s in strings:\n        result += s\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = ''\n    for s in strings:\n        result += s\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [string for string in strings if string[:len(prefix)] == prefix]\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    filtered = [s for s in strings if s.startswith(prefix)]\n    return filtered\n",
        "num_ids": 25
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [\n        string for string in strings if string.startswith(prefix)\n    ]\n",
        "num_ids": 24
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered.append(s)\n    return filtered\n",
        "num_ids": 38
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [n for n in l if n >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return [number for number in l if number >= 0]\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [x for x in l if x > 0]\n    # return [x for x in l if x >= 0]\n    # return [x for x in l if type(x) is int and x > 0]\n",
        "num_ids": 52
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [e for e in l if e > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [l_num for l_num in l if l_num >= 0]\n",
        "num_ids": 21
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [n for n in l if n >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for element in l:\n        if element >= 0:\n            result.append(element)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for x in range(2, n):\n            if n % x == 0:\n                return False\n        return True\n",
        "num_ids": 56
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # i in range(2, n):\n    #     print(i)\n    #     if n % i == 0:\n    #         print(i)\n    #         return False\n    # return True\n    return all(n % i for i in range(2, n))\n",
        "num_ids": 67
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 2 or n == 3:\n        return True\n    elif n == 1:\n        return False\n    else:\n        if n % 2 == 0 and n!= 2:\n            return False\n        else:\n            i = 3\n            while i <= n**0.5:\n                if n % i == 0:\n                    return False\n                i += 2\n            return True\n",
        "num_ids": 101
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3,n//2+1,2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 52
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n==1:\n        return False\n    if n==2:\n        return True\n    if n>2 and n%2==0:\n        return False\n    max_divisor=round(n**0.5)\n    for d in range(3,max_divisor+1,2):\n        if n%d==0:\n            return False\n    return True\n",
        "num_ids": 92
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        i = i + 6\n    return True\n",
        "num_ids": 94
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    xs = xs[:]\n    xs.append(0)\n    x = -0.5\n    while abs(poly(xs, x)) >= 1:\n        x = x - poly(xs, x) / (poly(xs, x + 0.1))\n    return x\n",
        "num_ids": 67
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def compute_residue(xs):\n        if xs[0] == 0:\n            return xs[1]\n        if xs[1] == 0:\n            return xs[0]\n        return xs[0] / xs[1]\n",
        "num_ids": 64
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert len(xs) % 2 == 0\n    assert max(xs) >= 0\n    assert min(xs) >= 0\n",
        "num_ids": 30
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert len(xs) % 2 == 0\n    if len(xs) == 2:\n        return -xs[1] / xs[0]\n    n = len(xs) // 2\n    a = xs[n:]\n    b = xs[:n]\n    a_zeros = find_zero(a)\n    b_zeros = find_zero(b)\n    a_dists = [abs(x - a_zeros[0]) for x in a_zeros]\n    b_dists = [abs(x - b_zeros[0]) for x in b_zeros]\n    a_min = min(a_dists)\n    b_min = min(b_dists)\n    if a_min < b_min:\n        return a_zeros[0]\n    else:\n        return b_zeros[0]\n",
        "num_ids": 206
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def is_even_length(xs: list):\n        return len(xs) % 2 == 0\n",
        "num_ids": 25
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n    # f'(x) = sum(i*coeff*x^(i-1)) - sum(coeff*x^i)\n",
        "num_ids": 1024
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert len(xs) % 2 == 0, 'No solution!'\n    assert max(xs)!= 0, 'No solution!'\n",
        "num_ids": 31
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    z = poly(xs, -1) / xs[-1]\n    # z = poly(xs, 0) / xs[0]\n    # z = poly(xs, 1) / xs[1]\n    return round(z, 2)\n",
        "num_ids": 62
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"only even number of coefficients are allowed\")\n    largest_non_zero_coeff = max([abs(i) for i in xs if abs(i)!= 0])\n    if largest_non_zero_coeff < 1:\n        raise ValueError(\"there is no solution\")\n    xs.remove(0)  # remove 0 to get even number of coefficients\n    if len(xs) == 1:\n        return (-xs[0]) / 2\n    if len(xs) == 2:\n        return (-xs[0] + xs[1] ** 2) / 4\n    return _find_zero(xs)\n",
        "num_ids": 160
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert len(xs) % 2 == 0, \"Odd number of coefficients is not allowed\"\n    assert len(xs) > 2, \"Number of coefficients must be at least 2\"\n    assert max(xs) > 0, \"Largest coefficient must be positive\"\n",
        "num_ids": 62
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    x = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            x = l[i]\n        else:\n            l[i] = x\n    return l\n",
        "num_ids": 51
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l1 = l[:]\n    l2 = l[:]\n    \n    for i in range(len(l)):\n        if i%3==0:\n            l1.remove(l[i])\n            l1.sort()\n            l2.remove(l[i])\n            l2.append(l1[0])\n    return l2\n",
        "num_ids": 86
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l1 = []\n    l2 = []\n    l3 = []\n    for i in l:\n        if i % 3 == 0:\n            l3.append(i)\n        elif i % 3!= 0:\n            l1.append(i)\n    l1.sort()\n    l3.sort()\n    return l1 + l3\n",
        "num_ids": 86
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(l):\n        if i%3 == 0:\n            l[i] = l[i]\n            i = i+1\n        else:\n            i = i+1\n    l = sorted(l)\n    return l",
        "num_ids": 64
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l_new = [i for i in l if i % 3!= 0]\n    l_new.sort()\n    return l_new + [i for i in l if i % 3 == 0]\n",
        "num_ids": 49
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    m = []\n    for i in l:\n        if i % 3 == 0:\n            m.append(i)\n    for i in l:\n        if i % 3!= 0:\n            m.append(i)\n    m.sort()\n    return m\n",
        "num_ids": 65
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(l) == 1 or len(l) == 0:\n        return l\n    elif len(l) == 2:\n        return sorted(l)\n    elif len(l) == 3:\n        if l[0] > l[2] and l[0] % 3!= 0:\n            return [l[0]] + [l[1]] + [l[2]]\n        elif l[2] > l[0] and l[2] % 3!= 0:\n            return [l[0]] + [l[1]] + [l[2]]\n        elif l[1] > l[2] and l[1] % 3!= 0:\n            return [l[0]] + [l[1]] + [l[2]]\n        elif l[0] > l[1] and l[0] % 3!= 0:\n            return [l[0]] + [l[1]] + [l[2]]\n        elif l[0] == l[1] or l[0] == l[2]:\n            return [l[0]] + [l[1]] + [l[2]]\n        elif l[2] == l[1] or l[2] == l[0]:\n            return [l[0]] + [l[1]] + [l[2]]\n        else:\n            return l\n    else:\n        if l[0] % 3!= 0:\n            return [l[0]] + sort_third(l[1:])\n        elif l[-1] % 3!= 0:\n            return sort_third(l[:len(l) - 1]) + [l[-1]]\n        elif len(l) % 3 == 0:\n            return sort_third(l[:len(l) - 2]) + [l[-2]] + [l[-1]]\n        else:\n            return l\n",
        "num_ids": 446
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l_ = []\n    l_2 = []\n    for num in l:\n        if num % 3 == 0:\n            l_2.append(num)\n        else:\n            l_.append(num)\n    l_2 = sorted(l_2)\n    return l_ + l_2\n",
        "num_ids": 73
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    res = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            res.append(l[i])\n    for i in range(len(l)):\n        if i % 3 == 0:\n            res.append(l[i])\n    return res\n",
        "num_ids": 73
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for e in l:\n        if e not in result:\n            result.append(e)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    ret = []\n    for elem in l:\n        if elem not in ret:\n            ret.append(elem)\n    return sorted(ret)\n",
        "num_ids": 39
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l_ = []\n    for elem in l:\n        if elem not in l_:\n            l_.append(elem)\n    return l_\n",
        "num_ids": 39
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    u = []\n    for e in l:\n        if e not in u:\n            u.append(e)\n    return sorted(u)\n",
        "num_ids": 36
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(set(l))",
        "num_ids": 9
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    max_element = 0\n    for x in l:\n        if x > max_element:\n            max_element = x\n    return max_element\n",
        "num_ids": 37
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    m = None\n    for i in range(0, len(l)):\n        if m == None:\n            m = l[i]\n        else:\n            if l[i] > m:\n                m = l[i]\n    return m\n",
        "num_ids": 61
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return max(l)\n",
        "num_ids": 10
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    maximum = l[0]\n    for i in l:\n        if i > maximum:\n            maximum = i\n    return maximum\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l1 = []\n    for i in l:\n        if i > l1[0]:\n            l1 = [i]\n        elif i == l1[0]:\n            l1.append(i)\n    print(max(l1))\n",
        "num_ids": 61
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(l) == 1:\n        return l[0]\n    else:\n        return max(l[0], max_element(l[1:]))\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    maximum = l[0]\n    for i in range(len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n",
        "num_ids": 43
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n % 11 == 0 or n % 13 == 0:\n        if n % 7 == 0:\n            return 3\n        else:\n            return 2\n    return 0\n",
        "num_ids": 41
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if 7 in str(i):\n                num += 1\n    return num\n",
        "num_ids": 50
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 7:\n        return 0\n    elif n % 11 == 0 or n % 13 == 0:\n        return 1 + fizz_buzz(n // 11) + fizz_buzz(n // 13)\n    else:\n        return fizz_buzz(n // 11) + fizz_buzz(n // 13)\n",
        "num_ids": 82
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    counter = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if \"7\" in str(i):\n                counter += 1\n    return counter\n",
        "num_ids": 50
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    ans = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if 7 in str(i):\n                ans += 1\n    return ans\n",
        "num_ids": 48
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0):\n            if 7 in str(i):\n                count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    x = 1\n    y = 0\n    while x <= n:\n        if (x % 11 == 0 or x % 13 == 0) and x % 7 == 0:\n            y += 1\n        x += 1\n    return y\n",
        "num_ids": 55
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            if \"7\" in str(i):\n                count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return l[::2] + sorted(l[1::2])\n",
        "num_ids": 18
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    even_indicies = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indicies.append(l[i])\n    even_indicies.sort()\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indicies[i//2])\n        else:\n            result.append(l[i])\n    return result\n    ",
        "num_ids": 116
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(l) == 0:\n        return []\n    elif len(l) == 1:\n        return l\n    elif len(l) == 2:\n        return [min(l), max(l)]\n    else:\n        evens = [i for i in l if i % 2 == 0]\n        odds = [i for i in l if i % 2!= 0]\n        evens.sort()\n        sorted_odds = sort_even(odds)\n        if len(evens) < len(sorted_odds):\n            return evens + sorted_odds\n        elif len(evens) == len(sorted_odds):\n            return evens + sorted_odds\n        else:\n            odds.sort()\n            return sorted_odds + odds\n",
        "num_ids": 191
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l_even = []\n    l_odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n        else:\n            l_odd.append(l[i])\n    l_even.sort()\n    return l_odd + l_even\n",
        "num_ids": 82
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Check to see if we even have an empty list.\n    # If so, then return the list because we don't have anything to sort.\n    if not l:\n        return l\n    # Set two pointers, start and end, at the beginning and end of the list.\n    start, end = 0, len(l) - 1\n    # While start is less than or equal to end,\n    while start <= end:\n        # If the start index is odd, and its value is less than the end index's value,\n        if start % 2 == 1 and l[start] < l[end]:\n            # Then swap the two values and increment start by 2.\n            l[start], l[end] = l[end], l[start]\n            start += 2\n        # Otherwise, if start index is odd and its value is greater than the end index's value,\n        elif start % 2 == 1 and l[start] > l[end]:\n            # Then swap the two values and decrement end by 1.\n            l[start], l[end] = l[end], l[start]\n            end -= 1\n        # Otherwise, if start index is even and its value is greater than the end index's value,\n        elif start % 2 == 0 and l[start] > l[end]:\n            # Then swap the two values and decrement end by 1.\n            l[start], l[end] = l[end], l[start]\n            end -= 1\n        # Otherwise, if start index is even and its value is less than the end index's value,\n        elif start % 2 == 0 and l[start] < l[end]:\n            # Then swap the two values and increment start by 2.\n            l[start], l[end] = l[end], l[start]\n            start += 2\n    return l\n",
        "num_ids": 419
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if l == []:\n        return []\n    elif len(l) == 1:\n        return l\n    else:\n        return [l[0]] + sort_even(l[1:-1]) + [l[-1]]\n",
        "num_ids": 57
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    even_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_l.append(l[i])\n    return sorted(even_l)\n",
        "num_ids": 50
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l_even = [x for x in l if x%2==0]\n    l_even.sort()\n    l_odd = [x for x in l if x%2!=0]\n    l_odd.sort()\n    return [x for t in zip(l_even,l_odd) for x in t]\n",
        "num_ids": 79
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l1.sort()\n    l2.sort()\n    l1.extend(l2)\n    return l1\n",
        "num_ids": 90
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # COMPLETE ME\n",
        "num_ids": 7
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 110
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "num_ids": 107
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # split into groups of three characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [group if len(group) == 3 else group[1:] + group[0] for group in groups]\n    return \"\".join(groups)",
        "num_ids": 103
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # split string into groups of 3 characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group.\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 96
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join(group[1] + group[0] if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)])\n",
        "num_ids": 66
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # rejoin groups\n    return \"\".join(groups)\n",
        "num_ids": 114
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (fib(n+2) + fib(n+1))\n",
        "num_ids": 19
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    n1 = 1\n    n2 = 1\n    while n1 < n or n2 < n:\n        n1 += n2\n        n2 += n1\n        if prime(n1):\n            count += 1\n        if count == n:\n            return n1\n",
        "num_ids": 70
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n > 0, \"n must be positive.\"\n    if n == 1:\n        return 2\n    f1 = 1\n    f2 = 2\n    k = 1\n    while k < n:\n        f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n        if is_prime(f3):\n            k = k + 1\n    return f3\n",
        "num_ids": 95
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib_1 = 1\n        fib_2 = 2\n        fib = 0\n        while fib < n:\n            fib = fib_1 + fib_2\n            fib_1 = fib_2\n            fib_2 = fib\n            if is_prime(fib):\n                continue\n            else:\n                return fib\n        return fib\n",
        "num_ids": 112
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n <= 2:\n        return n\n    else:\n        f = [2, 3]\n        for i in range(4, n + 1):\n            f.append((f[i - 1] + f[i - 2]) % m)\n            if check_prime(f[i]):\n                return f[i]\n",
        "num_ids": 79
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 1:\n        return None\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 2, 3\n        while n > 1:\n            a, b = b, a+b\n            if is_prime(b):\n                n -= 1\n        return b\n",
        "num_ids": 85
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    fib_num = int(n * (3.0 + math.sqrt(5)) / 2.0)\n    for i in range(2, fib_num):\n        if is_prime(i):\n            j = 2\n            while j < i:\n                if i % j == 0:\n                    break\n                j += 1\n            if j == i:\n                return i\n    return fib_num\n",
        "num_ids": 97
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # base cases\n    if n <= 2:\n        return 2 if n == 1 else 3\n",
        "num_ids": 23
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    f = 0\n    p = 0\n    while f < n:\n        f = prime_fib_aux(p)\n        if is_prime(f):\n            p += 1\n    return f\n",
        "num_ids": 49
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    fib = [0, 1]\n    prime = [True] * (n + 1)\n    prime[0] = prime[1] = False\n",
        "num_ids": 37
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert l, \"empty list\"\n",
        "num_ids": 10
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not l:\n        return False\n    else:\n        num_set = set()\n        for num in l:\n            if -num in num_set:\n                return True\n            num_set.add(num)\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            curr = l[i] + l[left] + l[right]\n            if curr > 0:\n                right -= 1\n            elif curr < 0:\n                left += 1\n            else:\n                return True\n    return False\n",
        "num_ids": 135
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    seen = set()\n    for n in l:\n        if n in seen:\n            return True\n        seen.add(0 - n)\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert l, 'The list cannot be empty.'\n    num_set = set()\n    for element in l:\n        if -element in num_set:\n            return True\n        else:\n            num_set.add(element)\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    set_1 = set()\n    for i in l:\n        if i not in set_1:\n            set_1.add(i)\n        else:\n            if (i + i + i) == 0:\n                return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return bool([x for x in combinations(l, 3) if sum(x) == 0])\n",
        "num_ids": 24
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    set_l = set(l)\n    if len(set_l) < 3:\n        return False\n    else:\n        for x in set_l:\n            for y in set_l:\n                if y > x:\n                    if x + y == 0:\n                        if x * x + y * y == x * y * 2:\n                            return True\n    return False\n",
        "num_ids": 90
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                # Move the jth car left to right\n                j_start = car(0, j, 0, 1)\n                j_start.move(10 * (i + 1), 10)\n",
        "num_ids": 76
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n >= 0\n",
        "num_ids": 7
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Find out how many collisions there will be between n cars\n    # This is done by simulating the cars driving in opposite directions\n    n_r_collisions = n_collisions(n)\n    n_l_collisions = n_collisions(n, direction='left')\n",
        "num_ids": 66
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert is_power_of_two(n) and n >= 2\n    return int(log2(n))\n",
        "num_ids": 28
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Note that if the same car is driving left to right and right to left, then\n    # it's a collision.  This is because cars are infinitely sturdy and strong;\n    # as a result, they continue moving in their trajectory as if they did not collide.\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            # i is the car driving right\n            # j is the car driving left\n            if i < j:\n                if (i+j)%2 == 0:\n                    collisions += 1\n    return collisions\n",
        "num_ids": 132
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return n * (n - 1)\n",
        "num_ids": 11
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert(n > 0)\n    if n < 2:\n        return 0\n    if n == 2:\n        return 0\n    else:\n        return n - (car_race_collision(n-1) + car_race_collision(n-2))\n",
        "num_ids": 64
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert n > 0\n",
        "num_ids": 7
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n > 0\n    assert is_prime(n)\n    return math.floor((n-1) / 2)\n",
        "num_ids": 30
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # The maximum possible distance a car can travel in this scenario is 2n.\n    # So, we'll generate a list of the first n + n + 1 elements, and then we'll\n    # truncate the list after the n + n element, which is the last element we want.\n    l = list(range(n)) + list(range(n, 2 * n + 1))\n    # Now we'll iterate through our list and see if any element is a pair\n    # with a subsequent element.\n    for i in range(n):\n        if i == 0:\n            continue\n        if l[i] == l[i - 1] or l[i] == l[i + 1]:\n            return i\n",
        "num_ids": 164
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l = [x + 1 for x in l]\n    return l\n",
        "num_ids": 18
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [i+1 for i in l]\n    \ndef naturals():\n    \"\"\"A generator function that yields the infinite sequence of natural\n    numbers, starting at 1.\n",
        "num_ids": 43
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l = [x+1 for x in l]\n    return l\n",
        "num_ids": 18
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l2 = []\n    for i in l:\n        l2.append(i+1)\n    return l2\n",
        "num_ids": 30
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [e + 1 for e in l]\n",
        "num_ids": 13
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in l:\n        for j in l:\n            if i + j == 0:\n                if i!= j:\n                    return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l = list(set(l))\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    print(set(l))\n    print(set([i for i in l if i < 0]))\n    if len(set(l)) < len(l):\n        return False\n    l1 = set([i for i in l if i < 0])\n    l2 = set(l)\n    l2.difference_update(l1)\n    if l1:\n        if len(l2) < len(l1):\n            return False\n        else:\n            for i in l1:\n                if (i * -1) in l2:\n                    return True\n    return False\n",
        "num_ids": 140
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    set_ = set(l)\n    for i in set_:\n        if 0 - i in set_:\n            return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    hash_table = {}\n    for i in l:\n        if i == 0:\n            return True\n        elif i < 0:\n            continue\n        elif i in hash_table:\n            return True\n        else:\n            hash_table[i] = 1\n    return False\n",
        "num_ids": 69
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l = set(l)\n    for i in l:\n        if -i in l:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    d={}\n    for i in range(len(l)):\n        if l[i] not in d:\n            d[l[i]]=0\n        else:\n            d[l[i]]+=1\n    for i in range(len(l)):\n        if l[i] not in d:\n            d[l[i]]=0\n        else:\n            d[l[i]]+=1\n    for i in d:\n        if d[i]>1 and d[i]%2==0:\n            return True\n    return False\n",
        "num_ids": 134
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # trivial case\n    if len(l) < 2:\n        return False\n    # initialize the set of seen values\n    seen = set()\n    # loop through the list\n    for i in l:\n        # if i not in seen, and i is not zero, add i to the set\n        if i not in seen and i!= 0:\n            seen.add(i)\n        # if i in seen, and -i is also in seen, return True\n        elif -i in seen:\n            return True\n    # if we made it through the loop without returning, return False\n    return False\n",
        "num_ids": 140
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(l) < 2:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = ''\n    while x!= 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n",
        "num_ids": 39
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n = 0\n    while x > 0:\n        n += x % base\n        x //= base\n    return str(n)\n",
        "num_ids": 33
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if x < 0:\n        sign = -1\n    elif x > 0:\n        sign = 1\n    else:\n        return '0'\n    x *= sign\n",
        "num_ids": 43
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    base_numbers = \"0123456789ABCDEF\"\n    q, r = divmod(x, base)\n    if q == 0:\n        return base_numbers[r]\n    else:\n        return change_base(q, base) + base_numbers[r]\n",
        "num_ids": 70
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # TODO: handle base = 10\n    if base < 2 or base > 36:\n        return ''\n    str_num = ''\n    while x > 0:\n        x, remain = divmod(x, base)\n        str_num += str(remain)\n    return str_num[::-1]\n",
        "num_ids": 75
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    return_val = ''\n    while x > 0:\n        x, reminder = divmod(x, base)\n        return_val = str(reminder) + return_val\n    \n    return return_val\n",
        "num_ids": 53
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    d = base\n    t = []\n    while x > 0:\n        t.append(x % d)\n        x //= d\n    return ''.join(map(str, t[::-1]))\n",
        "num_ids": 52
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    num = '0123456789ABCDEF'\n    r = ''\n    while x > 0:\n        r = num[x % base] + r\n        x //= base\n    return r\n",
        "num_ids": 48
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert 2 <= base <= 36, 'Base must be 2 <= base <= 36'\n    assert x >= 0, 'x must be non-negative'\n    # Check if there is a remainder\n    if x % base == 0:\n        return str(x // base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n",
        "num_ids": 86
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return 0.5 * a * h\n    \ndef area(a, b, h, c):\n    \"\"\"Returns total area of a triangle with sides of length a, b, and c.\n    >>> area(3, 4, 5, 6)\n    12.5\n    \"\"\"\n    return triangle_area(a, h) + triangle_area(b, h) + triangle_area(c, h)\n    \ndef triangle_perimeter(a, h):\n    \"\"\"Given length of a side and high return perimeter for a triangle.\n    >>> triangle_perimeter(5, 3)\n    12\n    \"\"\"\n    return a + a + h\n    \ndef perimeter(a, b, h, c):\n    \"\"\"Returns total perimeter of a triangle with sides of length a, b, and c.\n    >>> perimeter(3, 4, 5, 6)\n    18\n    \"\"\"\n    return triangle_perimeter(a, h) + triangle_perimeter(b, h) + triangle_perimeter(c, h)\n    \ndef right_triangle(a, b, c):\n    \"\"\"Returns True if a, b, c form a right triangle, False otherwise.\n    >>> right_triangle(5, 3, 4)\n    True\n    \"\"\"\n    return perimeter(a, b, c) == a + b + c and area(a, b, c) == a * b * (1/2)\n    \ndef right_triangle_form(a, b, c):\n    \"\"\"Returns a string of the form \"a, b, c is a right triangle\" if a, b, c form a right triangle, or \"a, b, c is not a right triangle\" if otherwise.\n    >>> right_triangle_form(5, 3, 4)\n    '5, 3, 4 is a right triangle'\n    \"\"\"\n    if right_triangle(a, b, c):\n        return '{}, {}, {} is a right triangle'.format(a, b, c)\n    else:\n        return '{}, {}, {} is not a right triangle'.format(a, b, c)\n        \ndef is_triangle(a, b, c):\n    \"\"\"Returns True if a, b, c can be the sides of a triangle, False otherwise.\n    >>> is_triangle(5, 3, 4)\n    True\n    >>> is_triangle(5, 3, 5)\n    True\n    \"\"\"\n    return perimeter(a, b, c) >= a + b + c\n    \ndef is_right_triangle(a, b, c):\n    \"\"\"Returns True if a, b, c form a right triangle, False otherwise.\n    >>> is_right_triangle(5, 3, 4)\n    True\n    >>> is_right_triangle(5, 5, 4)\n    False\n    >>> is_right_triangle(7, 3, 6)\n    True\n    \"\"\"\n    return is_triangle(a, b, c) and right_triangle(a, b, c)\n    \ndef is_isosceles_triangle(a, b, c):\n    \"\"\"Returns True if a, b, c form an isosceles triangle, False otherwise.\n    >>> is_isosceles_triangle(5, 5, 4)\n    True\n    >>> is_isosceles_triangle(3, 5, 5)\n    False\n    \"\"\"\n    return is_triangle(a, b, c) and a == b or a == c or b == c\n",
        "num_ids": 812
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return 0.5 * a * h\n    \ndef is_odd(n):\n    \"\"\"Return whether or not the given number is odd.\n    >>> is_odd(2)\n    False\n    >>> is_odd(1)\n    True\n    \"\"\"\n    return n % 2 == 1\n    \ndef num_even_digits(n):\n    \"\"\"Return the number of even digits in the given number.\n    >>> num_even_digits(123456)\n    3\n    >>> num_even_digits(2468)\n    4\n    >>> num_even_digits(1357)\n    1\n    \"\"\"\n    num_even_digits = 0\n    while n!= 0:\n        n, last_digit = divmod(n, 10)\n        if is_odd(last_digit):\n            return num_even_digits\n        num_even_digits += 1\n    return num_even_digits",
        "num_ids": 218
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 62
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n >= 0\n    n1, n2, n3, n4 = 0, 1, 2, 3\n    if n == 0:\n        return n1\n    elif n == 1:\n        return n2\n    elif n == 2:\n        return n3\n    elif n == 3:\n        return n4\n    else:\n        while n > 3:\n            n1, n2, n3, n4 = n3, n4, n1 + n2 + n3 + n4, n1 + n2 + n3 + n4\n            n -= 1\n    return n4\n",
        "num_ids": 143
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    f0 = 0\n    f1 = 0\n    f2 = 2\n    fn = f0 + f1 + f2\n    n = n-1\n    while n > 0:\n        f0 = f1\n        f1 = f2\n        f2 = fn\n        fn = f0 + f1 + f2\n        n = n - 1\n    return fn\n",
        "num_ids": 88
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    memo = [0, 0, 2, 0]\n    return fib4_memo(n, memo)\n",
        "num_ids": 28
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n <= 3:\n        return n\n    else:\n        n_2, n_1, n_0 = 4, 2, 0\n        for i in range(3, n):\n            n_0, n_1, n_2 = n_1, n_2, n_0 + n_1 + n_2\n        return n_2\n",
        "num_ids": 85
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    a = 0\n    b = 0\n    c = 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        a = 0\n        b = 1\n        c = 1\n        for i in range(n):\n            b, c = c, (a+b+c)\n            a = b\n    return c\n",
        "num_ids": 91
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    x = 0\n    y = 2\n    z = 0\n    for i in range(n):\n        z = x + y\n        x = y\n        y = z\n    return z\n",
        "num_ids": 46
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 74
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert(n >= 0)\n    f = 0\n    g = 1\n    for i in range(n):\n        f = f + g\n        g = f - g\n    return f\n",
        "num_ids": 46
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    num = 0\n    prev1, prev2 = 0, 1\n    for i in range(3, n+1):\n        num = prev1 + prev2 + prev1\n        prev2, prev1 = prev1, num\n    return num\n",
        "num_ids": 80
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
        "num_ids": 62
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l = sorted(l)\n    n = len(l)\n    m = n // 2\n    return (l[m] + l[~m]) / 2\n",
        "num_ids": 40
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l.sort()\n    size = len(l)\n    mid = size // 2\n    if size % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid] + l[mid - 1]) / 2\n",
        "num_ids": 59
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n",
        "num_ids": 64
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[(n+1)//2-1]\n    else:\n        return (l[(n+1)//2-1] + l[(n-1)//2])/2\n",
        "num_ids": 72
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    return (l[(n - 1) // 2] + l[n // 2]) / 2\n",
        "num_ids": 56
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l.sort()\n    if len(l)%2 == 1:\n        return l[len(l)//2]\n    return sum(l[len(l)//2-1:len(l)//2+1])/2\n",
        "num_ids": 58
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2] + l[n//2 - 1]) / 2\n",
        "num_ids": 58
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2:\n        return l[(n - 1) // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l.sort()\n    # l is empty or has an odd number of elements.\n    if len(l) == 0 or len(l) % 2 == 1:\n        return l[len(l) // 2]\n    # l has an even number of elements.\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n",
        "num_ids": 94
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO: Implement me\n    return False\n",
        "num_ids": 13
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not isinstance(text, str):\n        raise TypeError\n    return text == reverse(text)\n",
        "num_ids": 26
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    text = text.replace(' ', '')\n    return text == text[::-1]\n",
        "num_ids": 23
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if text == \"\":\n        return True\n    if text[0]!= text[-1]:\n        return False\n    else:\n        return is_palindrome(text[1:-1])\n",
        "num_ids": 49
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n < 0:\n        n = -n\n        return p - modp(n, p)\n    if n == 0:\n        return 1\n    # elif n == 1:\n    #     return p\n    else:\n        return modp(n - 1, p)\n",
        "num_ids": 68
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert p > 2\n    b = bin(n)[3:]\n    b = b.zfill(len(bin(p-1)[2:]))\n    s = 0\n    for i, b1 in enumerate(b):\n        if b1 == \"1\":\n            s = (s + (pow(2, i, p))) % p\n    return s\n",
        "num_ids": 87
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n >= 0 and p > 2\n    x = 1\n    i = 2\n    while i <= n:\n        x = (x * 2) % p\n        i += 1\n    return x\n",
        "num_ids": 48
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n        return (modp(n - 1, p) ** 2) % p\n",
        "num_ids": 61
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert p > 0, 'p should be positive'\n    assert n < p, f'n={n}, p={p}'\n    return pow(2, n, p)\n",
        "num_ids": 43
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return 2 * modp(n // 2, p) % p\n    else:\n        return (2 * modp((n - 1) // 2, p) + 1) % p\n",
        "num_ids": 65
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert n >= 0\n    result = 1\n    for i in range(0, n):\n        result *= 2\n        result %= p\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    b = 1\n    for _ in range(n):\n        b *= 2\n    return b % p\n",
        "num_ids": 27
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n >= p: return modp(n // p, p)\n    return (2 ** n) % p\n",
        "num_ids": 28
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 37
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) + ord(\"a\") - 5 - 5 * ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 43
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n    \n    \ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    takes as input string and key. Returns encoded string.\n    \"\"\"\n    key_list = list(key)\n    key_list_len = len(key)\n    key_list_index = 0\n    key_list_ord_values = [ord(i) for i in key_list]\n    return_string = \"\"\n    for i in range(0, len(s)):\n        return_string += chr(((ord(s[i]) - ord(key_list[key_list_index])) % 26) + ord(\"a\"))\n        if key_list_index < key_list_len - 1:\n            key_list_index += 1\n        else:\n            key_list_index = 0\n    return return_string\n",
        "num_ids": 233
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 37
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    vowels = ('a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U')\n    new_string = ''\n    for letter in text:\n        if letter in vowels:\n            pass\n        else:\n            new_string += letter\n    return new_string\n",
        "num_ids": 79
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = \"aeiouAEIOU\"\n    return ''.join([ch for ch in text if ch not in vowels])\n",
        "num_ids": 34
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join([char for char in text if char not in VOWELS])\n",
        "num_ids": 21
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for char in text:\n        if char in vowels:\n            text = text.replace(char, '')\n    return text\n",
        "num_ids": 68
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    vowels = 'a e i o u A E I O U'\n    text = text.lower()\n    vowel_free_text = \"\"\n    for i in text:\n        if i not in vowels:\n            vowel_free_text += i\n    return vowel_free_text\n",
        "num_ids": 73
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    vowels = 'aeiou'\n    new_text = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n",
        "num_ids": 51
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowels = 'aeiouAEIOU'\n    return ''.join([ch for ch in text if ch not in vowels])\n",
        "num_ids": 34
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text = text.replace(text[i], '')\n    return text\n",
        "num_ids": 78
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n",
        "num_ids": 41
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowels = ('a','e','i','o','u')\n    text_without_vowels = ''\n    for letter in text:\n        if letter not in vowels:\n            text_without_vowels += letter\n    return text_without_vowels\n",
        "num_ids": 66
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return all([x<t for x in l])\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return all(i < t for i in l)\n    \n",
        "num_ids": 16
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return all(i < t for i in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for elem in l:\n        if elem >= t:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return all(i < t for i in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return all([x < t for x in l])\n    \n    \ndef below_threshold_v2(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_v2([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold_v2([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return not any([x >= t for x in l])\n    \n    \ndef below_threshold_v3(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_v3([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold_v3([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return not any([x > t for x in l])\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(",
        "num_ids": 248
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return all(i < t for i in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for n in l:\n        if n >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return x+y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for c0, c1 in zip(s0, s1):\n        if c0.lower()!= c1.lower():\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return set(s0) == set(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # if len(s0)!= len(s1):\n    #     return False\n    #     # This is wrong, since 'c' is in both words, but only once.\n    #     # But this is fine, since we are not supposed to compare two different words.\n    #     # The correct solution is below.\n    #     # s0_chars = set(s0)\n    #     # s1_chars = set(s1)\n    #     # if s0_chars & s1_chars == s0_chars:\n    #     #     return True\n    #     # else:\n    #     #     return False\n    #     # # Both words have the same chars, but with different order.\n    #     # # This is also wrong, since we are supposed to compare two different words.\n    #     # # The correct solution is below.\n    #     # # if set(s0) == set(s1):\n    #     # #     return True\n    #     # # This is wrong, because the set will always be the same.\n    #     # # But this is fine, since we are not supposed to compare two different words.\n    #     # # The correct solution is below.\n    #     # # if s0.sort() == s1.sort():\n    #     # #     return True\n    #     # # This is wrong, because the set will always be the same.\n    #     # # But this is fine, since we are not supposed to compare two different words.\n    #     # # The correct solution is below.\n    #     # # if sorted(s0) == sorted(s1):\n    #     # #     return True\n    #     # # This is wrong, because the set will always be the same.\n    #     # # But this is fine, since we are not supposed to compare two different words.\n    #     # # The correct solution is below.\n    #     # # if s0.sort() == s1.sort():\n    #     # #     return True\n    #     # # These are all wrong, because the set will always be the same.\n    #     # # But this is fine, since we are not supposed to compare two different words.\n    #     # # The correct solution is below.\n    #     # # if set(s0) == set(s1):\n    #     # #     return True\n    #     # # These are all wrong, because the set will always be the same.\n    #     # # But this is fine, since we are not supposed to compare two different words.\n    #     # # The correct solution is below.\n    #     # # if s0.sort() == s1.sort():\n    #     # #     return True\n    #     # # This is wrong, because the set will always be the same.\n    #     # # But this is fine, since we are not supposed to compare two different words.\n    #     # # The correct solution is below.\n    #     # # if sorted(s0) == sorted(s1):\n    #     # #     return True\n    #     # # This is wrong, because the set will always be the same.\n    #     # # But this is fine, since we are not supposed to compare two different words.\n    #     # # The correct solution is below.\n    #     # # if s0.sort() == s1.sort():\n    #     # #     return True\n",
        "num_ids": 795
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s0_len, s1_len = len(s0), len(s1)\n    if s0_len!= s1_len:\n        return False\n    s0_set, s1_set = set(s0), set(s1)\n    return s0_set == s1_set\n",
        "num_ids": 75
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(s0)!= len(s1):\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for c0, c1 in zip(s0, s1):\n        if c0!= c1:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(set(s0) & set(s1)) == len(set(s0)) == len(set(s1)) == len(set(s0 + s1))\n",
        "num_ids": 44
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len(set(s0) - set(s1)) == 0\n",
        "num_ids": 19
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n0, n1 = 1, 1\n    if n < 2:\n        return n\n    for i in range(1, n):\n        n0, n1 = n1, n1+n0\n    return n1\n",
        "num_ids": 55
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert n >= 0, 'n must be positive'\n",
        "num_ids": 14
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # base case\n    if n <= 1:\n        return n\n",
        "num_ids": 17
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert n > 0, 'n should be positive'\n",
        "num_ids": 14
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 0:\n        raise ValueError\n    return (n <= 2) and 1 or fib(n - 1) + fib(n - 2)\n",
        "num_ids": 37
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(brackets) % 2 == 1:\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    brackets_list = list(brackets)\n    bracket_dict = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    start_bracket = brackets_list[0]\n    opening_bracket = bracket_dict[start_bracket]\n    closing_bracket = bracket_dict[opening_bracket]\n    brackets_stack = []\n    brackets_stack.append(start_bracket)\n    for bracket in brackets_list[1:]:\n        if bracket == opening_bracket:\n            brackets_stack.append(bracket)\n        elif bracket == closing_bracket:\n            if brackets_stack[-1] == opening_bracket:\n                brackets_stack.pop()\n            else:\n                return False\n    return brackets_stack == []\n",
        "num_ids": 189
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    open_brackets = []\n",
        "num_ids": 9
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    open = \"><\"\n    closing = \"><\"\n    bracket_stack = []\n    for bracket in brackets:\n        if bracket in open:\n            bracket_stack.append(bracket)\n        elif bracket in closing:\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                return False\n    return not bracket_stack\n",
        "num_ids": 89
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    brackets = list(brackets)\n    open_brackets = []\n",
        "num_ids": 19
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # We use a Python list as a stack\n    stack = []\n    # Matching parethesis\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= \"<\":\n                return False\n    return len(stack) == 0\n",
        "num_ids": 94
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            open_brackets += 1\n        elif bracket == \">\":\n            open_brackets -= 1\n            if open_brackets < 0:\n                return False\n    return True if open_brackets == 0 else False\n",
        "num_ids": 75
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(brackets) == 0:\n        return True\n    correct = brackets[0] == '<'\n    for c in brackets[1:]:\n        if correct and c == '<':\n            correct = False\n        elif not correct and c == '>':\n            correct = True\n    return correct\n",
        "num_ids": 74
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    brackets = brackets.replace('<', '<b').replace('>', '>b')\n    if '<b>' in brackets:\n        return False\n    else:\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    open_brackets = 0\n    close_brackets = 0\n    for ch in brackets:\n        if ch == '<':\n            open_brackets += 1\n        elif ch == '>':\n            close_brackets += 1\n        elif ch == '<' or ch == '>':\n            return False\n    return open_brackets == close_brackets\n",
        "num_ids": 88
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # if list is empty or has one element, it is monotonic\n    if len(l) <= 1:\n        return True\n    # if list is all the same, it is monotonic\n    if all(item == l[0] for item in l):\n        return True\n    # if list has two same elements, it is monotonic if there is only 1 element between them\n    if l[0] == l[1]:\n        if len(l) == 2:\n            return True\n        if len(l) == 3 and l[1] == l[2]:\n            return False\n        return all(item == l[0] for item in l[1:-1])\n    # if list has more than 2 items and first element is different from last, it is monotonic\n    if l[0]!= l[-1]:\n        return all(item == l[0] for item in l[1:-1])\n    # if list has more than 2 items and last element is different from first, it is monotonic\n    if l[-1]!= l[1]:\n        return all(item == l[-1] for item in l[0:-1])\n    return False",
        "num_ids": 277
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    prev = None\n    for n in l:\n        if prev is not None:\n            if (prev - n) * (prev - n) <= 0:\n                return False\n        prev = n\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(l) <= 2:\n        return True\n    if l[1] <= l[0]:\n        return monotonic(l[1:])\n    if l[1] >= l[0]:\n        return monotonic(l[1:])\n",
        "num_ids": 63
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(l) < 3:\n        return True\n    return all([l[i] <= l[i + 1] for i in range(len(l) - 1)]) or all([l[i] >= l[i + 1] for i in range(len(l) - 1)])\n",
        "num_ids": 71
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(l) <= 1:\n        return True\n    if len(set(l)) == 1:\n        return True\n    if len(set(l)) == 2:\n        if l[0] >= l[1]:\n            return True\n        elif l[0] <= l[1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 92
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not l:\n        return True\n    if len(l) == 1:\n        return True\n    delta = l[1] - l[0]\n    for i in range(2, len(l)):\n        if delta * (l[i] - l[i-1]) > 0:\n            return False\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))",
        "num_ids": 52
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    if len(l) <= 1:\n        return True\n    \n    if l[0] > l[1]:\n        return False\n    elif l[0] < l[1]:\n        return True\n    \n    for i in range(1, len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n        elif l[i] < l[i+1]:\n            return True\n    \n    return True\n    \n",
        "num_ids": 114
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    or all(l[i] >= l[i + 1] for i in range(len(l) - 1)))\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print(monotonic([1, 2, 4, 20]))\n    print(monotonic([1, 20, 4, 10]))\n    print(monotonic([4, 1, 0, -10]))",
        "num_ids": 136
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    set1, set2 = set(l1), set(l2)\n    return list(set1.intersection(set2))\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    for x in l1:\n        if x in l2:\n            result.append(x)\n    result.sort()\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    res = []\n    for num in l1:\n        if num in l2:\n            res.append(num)\n            l2.remove(num)\n    return sorted(res)\n    \n",
        "num_ids": 48
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    max_prime = 0\n    while n % 2 == 0:\n        max_prime = 2\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n    if n > 2:\n        max_prime = n\n    return int(max_prime)\n",
        "num_ids": 100
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i = 2\n    while i * i < n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
        "num_ids": 43
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    largest_prime_factor = 1\n    i = 2\n    while i <= n ** (1/2):\n        if n % i == 0:\n            largest_prime_factor = i\n            n = n // i\n        else:\n            i += 1\n    return largest_prime_factor\n",
        "num_ids": 69
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    largest = 0\n    while n % 2 == 0:\n        largest = 2\n        n /= 2\n    for i in range(3, n, 2):\n        while n % i == 0:\n            largest = i\n            n /= i\n    if n > 1:\n        largest = n\n    return largest\n",
        "num_ids": 75
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 2:\n        return None\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return largest_prime_factor(i)\n        return n\n",
        "num_ids": 100
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n / 2\n    for i in range(3,n+1,2):\n        while n % i == 0:\n            factors.append(i)\n            n = n / i\n    return factors[-1]\n    \n    \n",
        "num_ids": 93
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n_temp = n\n    while n_temp % 2 == 0:\n        n_temp = n_temp / 2\n    i = 3\n    while i <= n_temp:\n        if n % i == 0:\n            return largest_prime_factor(n_temp)\n        i += 2\n    return n_temp\n",
        "num_ids": 77
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max = 1\n    for i in range(2,n):\n        if n % i == 0:\n            max = i\n    return max\n",
        "num_ids": 35
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # number of 2's = number of factors\n    # use 2's to divide up the number until we have a number that can be divided evenly by the prime\n    # if the number can be divided evenly by the prime, then it's a factor\n    # if not, we try again with the next 2 and we'll find a factor\n    # keep track of the largest factor\n    # if we get to the end and n hasn't been changed, then we didn't find a factor\n",
        "num_ids": 106
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    total = 0\n    for number in range(1, n + 1):\n        total += number\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return n * (n + 1) // 2\n",
        "num_ids": 13
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert n > 0, \"n must be a positive integer.\"\n    sum = 0\n    for x in range(1, n + 1):\n        sum = sum + x\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 1:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum = 0\n    for num in range(n+1):\n        sum = sum + num\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = 1 + n\n    summation = 0\n    while n!= 0:\n        summation += n\n        n -= 1\n    return summation\n",
        "num_ids": 40
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n_sum = 0\n    for i in range(1, n + 1):\n        n_sum += i\n    return n_sum\n",
        "num_ids": 34
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if stack:\n        return False\n    else:\n        return True",
        "num_ids": 69
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    brackets = brackets.strip()\n    if len(brackets)%2 == 1:\n        return False\n    stack = []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 91
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    bracket_count = 0\n    open_bracket_count = 0\n    for c in brackets:\n        if c == \"(\":\n            open_bracket_count += 1\n            bracket_count += 1\n        elif c == \")\":\n            bracket_count -= 1\n            open_bracket_count -= 1\n            if open_bracket_count < 0:\n                return False\n    return bracket_count == 0\n",
        "num_ids": 102
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # TODO: replace pass with your code\n    pass\n",
        "num_ids": 15
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # initialize a stack\n    bracket_stack = Stack()\n",
        "num_ids": 16
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    open_brackets = []\n    for char in brackets:\n        if char == \"(\":\n            open_brackets.append(char)\n        elif char == \")\":\n            if len(open_brackets) == 0:\n                return False\n            else:\n                open_brackets.pop()\n    return len(open_brackets) == 0\n",
        "num_ids": 85
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    brackets = list(brackets)\n    stack = []\n",
        "num_ids": 16
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # The stack\n    stack = []\n    # For each bracket in the string\n    for char in brackets:\n        # If the character is an opening bracket, append it to the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing bracket,\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 102
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            bracket_stack.append(bracket)\n        else:\n            if len(bracket_stack) == 0:\n                return False\n            else:\n                bracket_stack.pop()\n    if len(bracket_stack) > 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 94
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    brackets = \"\".join(brackets)\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        if bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n",
        "num_ids": 67
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [i*j for i,j in zip(xs[1:],range(len(xs)-1,1,-1))]\n",
        "num_ids": 33
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = [0] * (len(xs) - 1)\n    for i in range(1, len(xs)):\n        result[i - 1] = xs[i] * i\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    derivative = [0] * (len(xs) - 1)\n    for index, (x_i, x_i_plus_one) in enumerate(zip(xs, xs[1:])):\n        derivative[index] = x_i_plus_one - x_i\n    return derivative\n",
        "num_ids": 76
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    der = []\n    for i in range(1, len(xs)):\n        der.append(xs[i] * i)\n    return der\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    derivative_coefficients = []\n",
        "num_ids": 11
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [i*xs[i+1] for i in range(len(xs)-1)]\n",
        "num_ids": 24
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = len(xs)\n    return [n * xs[i] for i in range(1, n)]\n",
        "num_ids": 29
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i * xs[x] for x, i in enumerate(xs[1:], start=1)]\n",
        "num_ids": 29
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [x * i for x in xs[1:] for i in range(1, xs[0] + 1)]\n",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n = len(xs)\n    derivative = []\n    for i in range(1, n):\n        derivative.append(i * xs[i])\n    return derivative\n",
        "num_ids": 46
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    fib_0, fib_1 = 0, 1\n    for _ in range(n):\n        fib_0, fib_1 = fib_1, fib_0 + fib_1\n    return fib_0\n",
        "num_ids": 52
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    f0, f1 = 0, 1\n    for _ in range(n):\n        f0, f1 = f1, f0 + f1\n",
        "num_ids": 37
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n < 0:\n        raise ValueError('fibfib can only handle positive integers.')\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 105
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert 0 <= n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 87
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n > 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 59
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 49
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0: return 0\n    elif n == 1: return 0\n    elif n == 2: return 1\n    elif n > 2: return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 65
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert type(n) is int and n >= 0\n    if n == 1 or n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 74
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 2:\n        return n\n    pre, cur = 0, 1\n    for _ in range(n-1):\n        pre, cur = cur, pre+cur\n    return cur\n",
        "num_ids": 47
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 69
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    num_vowels = 0\n",
        "num_ids": 10
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = set(\"aeiou\")\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for letter in s:\n        if letter in 'aeiouAEIOU':\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert isinstance(s, str)\n    # Write your code here\n    count = 0\n    if s == \"\":\n        return count\n    for char in s:\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n            count += 1\n        elif char == 'y' and len(s) >= 2 and s[-1] == 'a':\n            count += 1\n    return count\n",
        "num_ids": 113
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowels = set('aeiouAEIOU')\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if len(s) > 0 and s[-1] in 'yY':\n        count -= 1\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # vowels = ['a', 'e', 'i', 'o', 'u']\n    # count = 0\n    # for char in s:\n    #     if char in vowels:\n    #         count += 1\n    # return count\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n    # return len([char for char in s if char in vowels])\n",
        "num_ids": 119
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    counter = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            counter += 1\n        elif i == 'y' and len(s) > 1:\n            counter += 1\n    return counter\n",
        "num_ids": 76
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = list(s)\n    i = 0\n    vowels = 0\n    while i < len(s):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n            vowels += 1\n        elif s[i] == 'y' and i < len(s) - 1:\n            if s[i + 1] == 'a' or s[i + 1] == 'e' or s[i + 1] == 'i' or s[i + 1] == 'o' or s[i + 1] == 'u':\n                vowels += 1\n        i += 1\n    return vowels\n",
        "num_ids": 180
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Using modulus to make sure we stay in the right range\n    return str(x)[-shift%len(str(x)):] + str(x)[:-shift%len(str(x))]\n",
        "num_ids": 49
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return int_to_str(int_to_str(x)[-shift:] + int_to_str(x)[:-shift])\n",
        "num_ids": 33
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift] if shift < len(str(x)) else str(x)[-shift:][::-1]\n",
        "num_ids": 41
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = str(x)\n    if shift >= len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    x = list(str(x))\n    n = len(x)\n    if shift > n:\n        return \"\".join(reversed(x))\n    else:\n        return \"\".join(x[n - shift:] + x[0:n - shift])\n    ",
        "num_ids": 66
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Use %10 to get the last digit and int to convert it to an integer\n    last_digit = int(x) % 10 ** shift\n    return str(last_digit)\n",
        "num_ids": 43
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = str(x)[-shift:]\n    if shift > len(str(x)):\n        return s[::-1]\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    shift %= len(str(x))\n    if shift == 0:\n        return str(x)\n    return str(x)[-shift:] + str(x)[:-shift]\n",
        "num_ids": 44
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sum = 0\n    for ch in s:\n        if ch.isalpha():\n            sum += ord(ch.upper())\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    numbers = []\n    for i in s:\n        if ord(i) in range(65, 91):\n            numbers.append(ord(i))\n    return sum(numbers)\n",
        "num_ids": 47
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum = 0\n    for letter in s:\n        if ord(letter) in range(65, 91):\n            sum += ord(letter)\n        elif ord(letter) in range(97, 123):\n            sum += ord(letter)\n    return sum\n",
        "num_ids": 62
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(ord(s[i].upper()) - ord('A') + 1 for i in range(len(s)))\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum = 0\n    for letter in s:\n        if letter.isupper():\n            sum += ord(letter)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum([ord(ch.upper()) for ch in s if ch.isupper()])\n",
        "num_ids": 23
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "num_ids": 20
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([ord(c) for c in s if c.isupper()])\n",
        "num_ids": 21
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum = 0\n    for i in s:\n        if ord(i) < 96 or ord(i) > 122:\n            continue\n        sum += ord(i)\n    return sum",
        "num_ids": 44
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    fruits=s.split()\n    return n-int(fruits[1])-int(fruits[0])\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = s.split()\n    oranges = int(s[1])\n    apples = int(s[0])\n    return n - oranges - apples\n",
        "num_ids": 39
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    a,o = s.split()\n    return int(a) - int(o[:-1]) - int(o[:-1])\n",
        "num_ids": 34
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    apples_count = int(s.split(' ')[0])\n    oranges_count = int(s.split(' ')[1])\n    fruits_count = n\n    return fruits_count - oranges_count - apples_coun",
        "num_ids": 57
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return n - int(s.split(' and ')[0]) - int(s.split(' and ')[1])\n",
        "num_ids": 29
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    if \"and\" in s:\n        for i in s.split():\n            count += i.count(\"oranges\") + i.count(\"apples\")\n    else:\n        for i in s.split():\n            count += int(i)\n    return count - n\n",
        "num_ids": 70
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return n - int(s.split(' ')[0]) - int(s.split(' ')[2]",
        "num_ids": 26
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    mango_fruits = 0\n    index = 0\n    while index < len(s):\n        if s[index] == \"a\":\n            mango_fruits += int(s[index+1])\n            index += 2\n        else:\n            mango_fruits += int(s[index+2])\n            index += 4\n    return mango_fruits\n",
        "num_ids": 88
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return n - s.split(\" \")[0] - s.split(\" \")[1]\n",
        "num_ids": 23
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    total_fruit = int(s[:s.index(' ')])\n    s = s[s.index(' '):]\n    if n > total_fruit:\n        return 0\n    elif n == total_fruit:\n        return int(s[s.index(' ')+1:])\n    elif n < total_fruit:\n        return int(s[s.index(' ')+1:])\n    return 0\n",
        "num_ids": 101
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    arr.sort(key = lambda x: x%2 == 0 and x if x%2 == 0 else float('inf'))\n    return [ arr[0], arr.index(arr[0]) ] if arr else []\n",
        "num_ids": 52
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    nodes = sorted(arr, key=lambda x: x % 2)\n    if not nodes:\n        return []\n    return [nodes[0], arr.index(nodes[0])]\n",
        "num_ids": 48
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    evens = []\n    for i, num in enumerate(arr):\n        if not num % 2:\n            evens.append(num)\n    if evens:\n        return [ min(evens), arr.index(min(evens)) ]\n    return []\n",
        "num_ids": 65
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not arr: return []\n    arr = sorted(arr)\n    for i, a in enumerate(arr):\n        if a % 2 == 0:\n            return [a, i]\n    return []\n",
        "num_ids": 50
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def partition(arr, s, e):\n        pivot = e\n        i = s - 1\n        for j in range(s, e):\n            if arr[j] < arr[pivot]:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i+1], arr[pivot] = arr[pivot], arr[i+1]\n        return i + 1\n    \n    def quick_sort(arr, s, e):\n        if e - s < 1:\n            return\n        pivot = partition(arr, s, e)\n        quick_sort(arr, s, pivot - 1)\n        quick_sort(arr, pivot + 1, e)\n    \n    n = len(arr)\n    if n == 0:\n        return []\n    quick_sort(arr, 0, n-1)\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            return [arr[i], i]\n",
        "num_ids": 238
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not arr:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Fill this in.\n",
        "num_ids": 8
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    evens = [i for i, v in enumerate(arr) if v % 2 == 0]\n    if not evens:\n        return []\n    return [arr[min(evens)], min(evens)]\n",
        "num_ids": 53
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    evens = [n for n in arr if n % 2 == 0]\n    smallest_even_value = min(evens) if evens else None\n    smallest_even_index = arr.index(smallest_even_value) if smallest_even_value else None\n",
        "num_ids": 66
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst.sort()\n    num = 0\n    while True:\n        for i in lst:\n            if i >= num:\n                num += 1\n                continue\n            else:\n                break\n        if num == 0:\n            return -1\n        return num\n    \n",
        "num_ids": 66
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst.sort()\n    i = 1\n    while i < len(lst) and lst[i] == lst[i-1]:\n        i += 1\n    if i < len(lst):\n        return lst[i]\n    return -1\n",
        "num_ids": 65
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    frequency = dict()\n    greatest = 0\n    greatest_i = -1\n    for i in lst:\n        frequency[i] = frequency.get(i, 0) + 1\n        if i > greatest:\n            greatest_i = i\n            greatest = i\n    for k, v in frequency.items():\n        if k < greatest and v >= greatest:\n            greatest_i = k\n    return greatest_i\n",
        "num_ids": 104
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    max_freq = -1\n    max_num = -1\n    for num in lst:\n        freq = lst.count(num)\n        if freq >= num and freq > max_freq:\n            max_freq = freq\n            max_num = num\n    if max_num == -1:\n        return -1\n    else:\n        return max_num\n",
        "num_ids": 95
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst.sort()\n    max_freq = lst[-1]\n    result = -1\n    \n    for i in lst:\n        if i == max_freq:\n            result = i\n            break\n        elif i > max_freq:\n            result = i\n            break\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    d = {}\n    for i in lst:\n        d[i] = d.get(i, 0) + 1\n    for key in d:\n        if d[key] >= key:\n            return key\n    return -1\n",
        "num_ids": 57
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max_freq = 0\n    freq_greater = -1\n    freq_lst = []\n    for i in lst:\n        if lst.count(i) >= i:\n            freq_greater = i\n            freq_lst.append(freq_greater)\n        elif i not in freq_lst:\n            freq_lst.append(i)\n    for i in freq_lst:\n        if i >= freq_greater:\n            max_freq = i\n    if max_freq == 0:\n        max_freq = -1\n    return max_freq\n",
        "num_ids": 155
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst.sort(reverse=True)\n    # print(lst)\n    s_lst = {lst[i]: lst.count(lst[i]) for i in range(len(lst))}\n    # print(s_lst)\n    greater_than_0 = 0\n    for x in s_lst:\n        if x > 0:\n            greater_than_0 = x\n            break\n    # print(greater_than_0)\n    max_count = 0\n    for x in s_lst:\n        if s_lst[x] > max_count:\n            max_count = s_lst[x]\n    # print(max_count)\n    res = -1\n    for x in s_lst:\n        if s_lst[x] == max_count:\n            if x > greater_than_0:\n                res = x\n                break\n    return res\n",
        "num_ids": 224
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    \n    lst = [k for k, v in freq.items() if v > freq[k]]\n    \n    return max(lst) if lst else -1\n",
        "num_ids": 89
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(lst, reverse=True)\n",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return list(sorted(lst, key=lambda x: x % (len(lst) + 1), reverse=True))\n",
        "num_ids": 32
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) == 0: return []\n    res = sorted(lst)\n    res.reverse()\n    return res\n",
        "num_ids": 33
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [min(lst)] + [max(lst[lst.index(min(lst)):])] + [min(lst)]\n",
        "num_ids": 37
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if lst == []:\n        return lst\n    strange = []\n    while lst!= []:\n        smallest = min(lst)\n        strange.append(smallest)\n        lst.remove(smallest)\n        \n        largest = max(lst)\n        strange.append(largest)\n        lst.remove(largest)\n        \n        next_smallest = min(lst)\n        strange.append(next_smallest)\n        lst.remove(next_smallest)\n    return strange\n",
        "num_ids": 130
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    i = 0\n    return [min(lst[i:])] + [max(lst[:i])] + [min(lst[i:])] + [max(lst[:i])] + [min(lst[i:])] + [max(lst[:i])] + [min(lst[i:])] + [max(lst[:i])]\n",
        "num_ids": 96
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if lst == []:\n        return []\n    elif len(lst) == 1:\n        return [lst[0]]\n    else:\n        n = min(lst)\n        lst.remove(n)\n        m = max(lst)\n        lst.remove(m)\n        lst.insert(0, m)\n        lst.append(n)\n        return lst\n",
        "num_ids": 99
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if lst == []:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return strange_sort_list([lst[i] for i in range(0, len(lst)) if i%2 == 0]+[lst[i] for i in range(0, len(lst)) if i%2 == 1])\n",
        "num_ids": 92
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    length = len(lst)\n    lst = sorted(lst, reverse=True)\n    result = [lst[0]]\n",
        "num_ids": 34
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = sorted([a, b, c])\n    if s[2] + s[1] <= s[0]:\n        return -1\n    else:\n        return round(s[0] * s[1] / 2, 2)\n",
        "num_ids": 58
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        return round((s*(s-a)*(s-b)*(s-c))**(1/2), 2)\n    else:\n        return -1\n",
        "num_ids": 73
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Convert sides into float values\n    side1 = float(a)\n    side2 = float(b)\n    side3 = float(c)\n    # Calculate the area of the triangle\n    s = (side1 + side2 + side3) / 2\n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    # Check if the triangle is valid\n    if s > side1 and s > side2 and s > side3:\n        return round(area, 2)\n    else:\n        return -1\n",
        "num_ids": 136
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return round(0.5 * a * b, 2) if (a + b > c) and (a + c > b) and (b + c > a) else -1\n",
        "num_ids": 43
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # check that there are 3 arguments\n    if len(a) + len(b) + len(c) == 3:\n        # convert all arguments to floats\n        a = float(a)\n        b = float(b)\n        c = float(c)\n        # check that all arguments are positive\n        if a > 0 and b > 0 and c > 0:\n            # check that all arguments are less than their sum\n            if a + b > c and b + c > a and c + a > b:\n                # calculate the area of the triangle\n                s = (a + b + c) / 2\n                area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n                # return the area rounded to 2 decimal points\n                return round(area, 2)\n            else:\n                # return -1 if any argument is greater than their sum\n                return -1\n        else:\n            # return -1 if any argument is less than or equal to 0\n            return -1\n    else:\n        # return -1 if the length of the arguments is not 3\n        return -1\n",
        "num_ids": 261
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return None\n    \ndef triangle_area_formula(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points using the formula.\n    '''\n    return None\n",
        "num_ids": 64
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if sum(q) > w:\n        return False\n    else:\n        return q == q[::-1]\n",
        "num_ids": 30
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    total = 0\n    for item in q:\n        total += item\n    if total <= w and is_palindromic(q):\n        return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # my solution\n    # return q == list(reversed(q)) and sum(q) < w\n    # top solution\n    return len(q) == len(set(q)) and sum(q) <= w\n",
        "num_ids": 53
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (is_it_balanced(q) and sum(q) < w)\n",
        "num_ids": 21
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    # checking if the list is balanced or not\n    if is_balanced(q) == False:\n        return False\n    \n    # checking if the sum of the elements is less than or equal to the maximum possible weight \n    if sum(q) <= w:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 77
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return len(q) == 1 or sum(q) <= w and is_balanced(q)\n",
        "num_ids": 24
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if(is_balanced(q) == False or sum(q) > w):\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # max_weight = max([q[i] for i in range(0,len(q))])\n    # if sum(q) <= w and all([q[i] == q[len(q)-i-1] for i in range(0,len(q))]):\n    #     return True\n    # else:\n    #     return False\n    return (sum(q) <= w) and all([q[i] == q[len(q)-i-1] for i in range(0,len(q))])\n",
        "num_ids": 125
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Write your code here\n    result = palindrome(arr)\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1 if arr[0]!= arr[1] else 0\n    palin = [arr[0]]\n    non_palin = arr[1:]\n    for num in non_palin:\n        if num in palin:\n            palin.remove(num)\n        else:\n            palin.append(num)\n    return len(non_palin) if len(non_palin) < len(palin) else len(palin)\n",
        "num_ids": 133
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        if i+1 < len(arr):\n            if arr[i]!= arr[i+1]:\n                count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def is_palindromic(arr):\n        return arr == arr[::-1]\n",
        "num_ids": 24
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    even_arr = []\n    odd_arr = []\n    palindromic_count = 0\n    for element in arr:\n        if element % 2 == 0:\n            even_arr.append(element)\n        else:\n            odd_arr.append(element)\n    if len(even_arr) > len(odd_arr):\n        for odd_num in odd_arr:\n            odd_count = len([num for num in even_arr if num == odd_num])\n            odd_count += 1\n            palindromic_count += odd_count\n    elif len(even_arr) < len(odd_arr):\n        for even_num in even_arr:\n            even_count = len([num for num in odd_arr if num == even_num])\n            even_count += 1\n            palindromic_count += even_count\n    return palindromic_count",
        "num_ids": 210
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    odd_count = 0\n    even_count = 0\n    for num in arr:\n        if num % 2 == 0:\n            count += 1\n        else:\n            odd_count += 1\n    return min(odd_count, count)\n",
        "num_ids": 63
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    rev = arr[::-1]\n    rev_set = set(rev)\n    arr_set = set(arr)\n    missing = list(sorted(arr_set.difference(rev_set)))\n    missing_count = len(missing)\n    to_be_changed = missing_count\n    for i in range(missing_count):\n        rev.remove(missing[i])\n        rev.append(missing[i])\n        if list(sorted(rev)) == arr:\n            to_be_changed = i\n    return to_be_changed\n",
        "num_ids": 133
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return min(helper(arr, 0, len(arr) - 1), helper(arr, 0, len(arr) - 1, True))\n",
        "num_ids": 35
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # O(n) time\n    # O(1) space\n    return 2 * sum([1 for i in range(len(arr)) if arr[i] % 2!= arr[len(arr) - 1 - i] % 2]",
        "num_ids": 56
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # This is our \"trick\" - if we have a palindrome of even length, we will have 2 identical digits\n    # and 1 different number. If we have a palindrome of odd length, we will have 2 identical digits\n    # and 2 different numbers.\n    # if the array is already a palindrome, then there is no need to make any changes.\n    # This algorithm can handle palindromes of any length\n    if is_palindrome(arr):\n        return 0\n",
        "num_ids": 114
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [i for i in lst1 if len(i) < len(lst2) or len(i) == len(lst2)]\n",
        "num_ids": 36
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [lst1[i] for i in range(len(lst1)) if len(lst1[i])<len(lst2[i])]\n",
        "num_ids": 41
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Code Here\n    total_lst = []\n    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        for i in lst1:\n            total_lst.append(i)\n        for j in lst2:\n            if len(j) < len(total_lst[0]):\n                total_lst[0] = j\n    elif len(lst1) > len(lst2):\n        for i in lst2:\n            total_lst.append(i)\n        for j in lst1:\n            if len(j) < len(total_lst[0]):\n                total_lst[0] = j\n    return total_lst\n",
        "num_ids": 193
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not lst1 and not lst2:\n        return []\n    elif len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return [lst1[i] for i in range(len(lst2))]\n    else:\n        return [lst2[i] for i in range(len(lst1))]\n",
        "num_ids": 106
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not len(lst1) == len(lst2):\n        return lst1 if len(lst1) < len(lst2) else lst2\n    return lst1 if len(lst1) == len(lst2) else lst2\n",
        "num_ids": 66
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    new_lst = [len(i) for i in lst1] + [len(i) for i in lst2]\n    new_lst.sort()\n    new_lst = new_lst[::-1]\n    if new_lst[0] == new_lst[1]:\n        return lst1\n    return lst2\n",
        "num_ids": 88
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    match = []\n    for i in lst1:\n        for j in lst2:\n            if len(i) == len(j):\n                match.append(i)\n                break\n            elif len(i) < len(j):\n                match.append(i)\n                break\n    if len(match) == len(lst1):\n        return match\n    elif len(match) < len(lst1):\n        return match\n    elif len(match) > len(lst1):\n        lst3 = []\n        for i in lst2:\n            for j in lst1:\n                if len(i) == len(j):\n                    lst3.append(i)\n                    break\n                elif len(i) < len(j):\n                    lst3.append(i)\n                    break\n        return lst3\n",
        "num_ids": 205
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # if len(lst1) > len(lst2):\n    #     return lst1[:len(lst1)-len(lst2)]\n    # elif len(lst1) < len(lst2):\n    #     return lst2[:len(lst2)-len(lst1)]\n    # elif len(lst1) == len(lst2):\n    #     return lst1\n    return [word for word in lst1 if len(''.join(word)) < len(''.join(lst2))]\n    # lst = [word for word in lst1 if len(''.join(word)) < len(''.join(lst2))]\n    # return lst\n",
        "num_ids": 175
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if lst1 == lst2:\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "num_ids": 74
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if lst1 == [] or lst2 == []:\n        return []\n    elif len(lst1) > len(lst2):\n        return [i for i in lst1 if len(i) < len(lst2[0])]\n    elif len(lst1) < len(lst2):\n        return [i for i in lst2 if len(i) < len(lst1[0])]\n    return lst1\n",
        "num_ids": 112
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a = int(a)\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                flag = False\n                for j in range(2, int(a/2)):\n                    if i % j == 0:\n                        flag = True\n                if flag == False:\n                    return False\n        return True\n    else:\n        return False\n",
        "num_ids": 94
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(3, a, 2):\n        if is_prime(i):\n            if is_prime(a/i) and is_prime(a/i-1):\n                return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    while a > 1:\n        if a % 2 == 0:\n            a = a / 2\n            continue\n        elif a % 3 == 0:\n            a = a / 3\n            continue\n        elif a % 5 == 0:\n            a = a / 5\n            continue\n        else:\n            break\n    if a == 1:\n        return True\n    return False\n",
        "num_ids": 91
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = 3\n    while n < a:\n        if is_prime(n) and is_prime(n + 2) and is_prime(n + 4) and is_prime(n + 6):\n            return True\n        n += 6\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # TODO complete this function\n",
        "num_ids": 9
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    divisible_by = []\n    for i in range(2, 100):\n        if a % i == 0:\n            divisible_by.append(i)\n    if len(divisible_by) == 3:\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(2, a // 2):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # your code here\n",
        "num_ids": 7
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(3, int(a**0.5)+1):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    while x > 1:\n        if n**int(x)!= x:\n            return False\n        else:\n            x = x//n\n    return x == n",
        "num_ids": 40
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return n**int(x)==x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return x == n or n == 1\n    while x % n == 0:\n        x /= n\n    return x == 1\n",
        "num_ids": 33
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # base case: 1**n = 1\n    if x == 1: return True\n    # x % n == 0\n    if x % n == 0: return True\n    # x % n!= 0\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if x == n:\n        return True\n    elif x < n or x % n!= 0:\n        return False\n    else:\n        x = x / n\n        if x == n:\n            return True\n        else:\n            return is_simple_power(x, n)\n",
        "num_ids": 70
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if x%n!= 0:\n        return False\n    return x/n == x\n",
        "num_ids": 23
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x == n**n\n",
        "num_ids": 9
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x==n**int(n)\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x%n==0\n",
        "num_ids": 9
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x == n**int(x**.5)\n",
        "num_ids": 15
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    import math\n",
        "num_ids": 5
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a**(1./3.) % 1 == 0\n",
        "num_ids": 15
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a**(1/3) % 1 == 0\n",
        "num_ids": 15
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return a >= 0 and a ** (1/3) % 1 == 0\n",
        "num_ids": 19
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if (a**(1/3)) % 1 == 0:\n        return True\n    else:\n        return False\n        \n        \n'''\nAnagrams\n",
        "num_ids": 40
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a**(1/3) % 1 == 0\n",
        "num_ids": 15
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return a**(1./3.) % 1 == 0\nprint iscube(1)\nprint iscube(2)\nprint iscube(-1)\nprint iscube(64)\nprint iscube(0)\nprint iscube(180)",
        "num_ids": 56
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return True if a%3==0 and pow(a, 1.0/3, 3)==a else False\n",
        "num_ids": 28
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return a**(1./3.) % 1 == 0\n",
        "num_ids": 15
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a**(1/3) % 1 == 0\n",
        "num_ids": 15
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    p = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    o = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    c = 0\n    for i in range(len(num)):\n        if num[i] in o:\n            c += 1\n        elif int(num[i], 16) in p:\n            c += 1\n    return c\n    \nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(hex_key(\"AB\"))\n    \n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"AB\") == 1, \"Abc\"\n    assert hex_key(\"1077E\") == 2, \"1077e\"\n    assert hex_key(\"101010\") == 0, \"101010\"\n    assert hex_key(\"101\") == 0, \"101\"\n    assert hex_key(\"2020\") == 2, \"2020\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\"",
        "num_ids": 317
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = 0\n    for i in \"0123456789ABCDEF\":\n        result += num.count(i)\n",
        "num_ids": 30
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    total = 0\n    if len(num) == 1:\n        if int(num[0]) in [2, 3, 5, 7]:\n            return 1\n        else:\n            return 0\n    for i in num:\n        if int(i) in [2, 3, 5, 7]:\n            total += 1\n    return total\n",
        "num_ids": 80
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #You may want to use the provided string_to_num function to convert a string into an integer \n    num_int = string_to_num(num)\n    #You may want to use the provided is_prime function to check if a number is prime \n    primes = [2, 3, 5, 7]\n    count = 0\n    for prime in primes:\n        if is_prime(num_int):\n            count += 1\n    return count\n",
        "num_ids": 108
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([int(i) in primes for i in num.upper() if i!= 'A']",
        "num_ids": 26
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Check if the input is empty\n    if not num:\n        return 0\n    \n    # Map hex digits to decimal\n    nums = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,\n        'A':10,'B':11,'C':12,'D':13,'E':14,'F':15}\n",
        "num_ids": 104
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    d = {}\n    \n    for i in range(10):\n        d[str(i)] = True\n    \n    for i in range(11, 16):\n        d[str(i)] = False\n    \n    for i in range(16, 16*26 + 1, 16):\n        d[str(i)] = True\n    \n    # print(d)\n    # print(hex_digits)\n    count = 0\n    for char in num:\n        if char in d and d[char]:\n            count += 1\n    return count\n",
        "num_ids": 130
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # A:  sorted(set(map(ord, num)))\n    # B:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009]\n    # C:  len(B)\n    # D:  len(num)\n    # E:  len(set(map(ord, num)))\n    # F:  sorted(set(map(ord, num)))\n    # G:  max(B)\n    # H:  min(B)\n    # I:  (G + H) / 2\n    # J:  max((G + H) / 2, 1)\n    # K:  abs(I - J)\n    # L:  K / 2\n    # M:  round(L)\n    # N:  B.count(M)\n    # O:  min(N, C)\n    # P:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947",
        "num_ids": 1024
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        if decimal % 2 == 0:\n            binary += \"0\"\n        else:\n            binary += \"1\"\n        decimal //= 2\n    return \"db\" + binary + \"db\"\n",
        "num_ids": 59
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # You can only use the following methods:\n    #\n    # bin(dec) - converts decimal number to binary\n    # bin(dec)[2:].zfill(n) - pads binary number with zeroes (if needed)\n    # bin(dec)[2:] - removes 0b at the beginning of the string\n    # int(str, base) - converts string to integer\n    # str(n) - converts integer to string\n",
        "num_ids": 100
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Your code here\n    binary_string = ''\n    while decimal > 0:\n        # Getting the last digits of the decimal\n        remainder = int(decimal % 2)\n        binary_string += str(remainder)\n        # Updating the decimal value\n        decimal = int(decimal / 2)\n    return 'db' + binary_string + 'db'\n",
        "num_ids": 90
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return 'db' + str(bin(decimal))[2:] + 'db'\n",
        "num_ids": 22
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    decimal = str(decimal)\n    binary = 'db'+decimal+'db'\n    return binary\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"db{}db\".format(bin(decimal)[2:])\n",
        "num_ids": 20
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    binary = \"\"\n",
        "num_ids": 6
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"db\" + bin(decimal)[2:].zfill(7) + \"db\"\n",
        "num_ids": 25
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    binary = str(bin(decimal))[2:]\n    binary = \"db\" + binary + \"db\"\n    return binary\n",
        "num_ids": 32
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return 'db'+bin(decimal)[2:].zfill(8)+'db'\n",
        "num_ids": 24
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def is_distinct(s):\n        for i in range(len(s)):\n            for j in range(i + 1, len(s)):\n                if s[i] == s[j]:\n                    return False\n        return True\n    \n    s = list(s)\n    while len(s) > 3:\n        s = s[2:]\n    return is_distinct(s)\n",
        "num_ids": 97
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    chars = set(s)\n    if len(chars) < 3:\n        return False\n    elif len(s) < 3:\n        return True\n    else:\n        while True:\n            if len(chars) == 1:\n                return True\n            else:\n                new = set()\n                for i in range(len(s) - 1):\n                    new.add(s[i:i+3])\n                chars = new\n                s = s[1:]\n    return False\n",
        "num_ids": 120
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s_list = [c for c in s]\n    if len(s_list) < 3:\n        return False\n    if len(set(s_list)) < 3:\n        return False\n    if len(s_list) == 3:\n        return True\n    return False\n",
        "num_ids": 68
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # TODO: implement me\n    return False\n",
        "num_ids": 13
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(s) < 3:\n        return False\n    \n    new_s = list(s)\n    length = len(new_s)\n    i = 0\n    while i < length:\n        if i + 2 >= length:\n            break\n        if new_s[i]!= new_s[i+1] and new_s[i]!= new_s[i+2] and new_s[i+1]!= new_s[i+2]:\n            new_s[i+2], new_s[i] = new_s[i], new_s[i+2]\n            if new_s[i]!= new_s[i+1]:\n                new_s[i+1] = new_s[i+1]\n            else:\n                new_s[i+1] = new_s[i+2]\n            i = i+1\n        else:\n            i = i+1\n    return len(new_s) >= 3\n",
        "num_ids": 237
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # if len(s) < 3:\n    #     return False\n    # elif len(set(s)) < 3:\n    #     return False\n    # else:\n    #     return True\n    \n    a = [ord(i) - ord('a') for i in s]\n    while True:\n        x = 0\n        for i in range(len(a)):\n            x += (a[i] * a[i])\n            a[i] = 0\n        if x == 0:\n            return True\n        elif x in a:\n            return False\n",
        "num_ids": 137
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # If the string's length is less than 3, it is not a happy string\n    if len(s) < 3:\n        return False\n    # If the string's length is equal to 3, check if it's a happy string\n    if len(s) == 3:\n        return s[0]!= s[1] and s[0]!= s[2] and s[1]!= s[2]\n    # String length is more than 3, so we will create a new string of the first 3 letters of s\n    # We will keep calling this function until it returns False, or s will be equal to \"aaa\"\n    return s[0]!= s[1] and s[0]!= s[2] and s[1]!= s[2] and is_happy(s[1:])\n",
        "num_ids": 191
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(s) < 3:\n        return False\n    unique = set()\n    while len(s) >= 3:\n        # Remove all consecutive letters\n        while len(s) >= 2 and s[0] == s[1]:\n            s = s[1:]\n        unique.add(s[0])\n        s = s[1:]\n    return len(unique) == 0\n",
        "num_ids": 92
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    if len(s) < 3:\n        return False\n",
        "num_ids": 17
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    return [grade_equation(gpa) for gpa in grades]\n",
        "num_ids": 72
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \n",
        "num_ids": 5
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # list of letter grades\n    grades_dict = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', 0.0: 'E'}\n    \n    # list of letter grades\n    final_grades = []\n    \n    # loop through the list of grades\n    for i in grades:\n        final_grades.append(grades_dict[i])\n    \n    # return the final list of grades\n    return final_grades\n",
        "num_ids": 180
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [letter_grade(gpa) for gpa in grades]\n",
        "num_ids": 18
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #the list of grades\n    #puts the letter grades in the list\n    #compares the GPA to the grades in the list\n    #for example, a GPA of 4.0 would have a letter grade of A+\n    return [letter_grade(grade) for grade in grades]\n",
        "num_ids": 67
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(string) in [2, 3, 5, 7]\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # your code here\n",
        "num_ids": 7
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len(string) in [2, 3] or len(string) in [2, 3] and set(string).issubset(set('aeiou'))\n",
        "num_ids": 41
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(string) in prime_numbers\n",
        "num_ids": 13
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len(string) == len(set(string))",
        "num_ids": 14
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    string_length = len(string)\n    if string_length > 1:\n        for i in range(2, string_length):\n            if string_length % i == 0:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return string_length(string) in [x for x in range(2, int(string_length(string))+1) if not any([string_length(string) % i == 0 for i in range(2, int(string_length(string))+1)])]\n",
        "num_ids": 65
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len(string) in prime_numbers\n    pass\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = len(string)\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return starts_ends_helper(n, 1)\n",
        "num_ids": 15
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return 1 + starts_one_ends(n-1) + ends_one(n-1)\n",
        "num_ids": 62
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # base case\n    if n == 1:\n        return 10\n",
        "num_ids": 17
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if int(str(i)[0]) == 1 or int(str(i)[-1]) == 1:\n            result += 1\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1 + starts_one_ends(n-1)\n    else:\n        return starts_one_ends(n-1) + starts_one_ends(n-1) + starts_one_ends(n-2)\n",
        "num_ids": 74
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return starts_ends(n, 1)\n",
        "num_ids": 12
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(0, n+1):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count",
        "num_ids": 52
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return end_one_starts(n) + end_one_starts(n-1)\n",
        "num_ids": 25
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 2\n    return 10 ** (n - 1) + starts_one_ends(n - 1)",
        "num_ids": 32
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # To count the numbers that end with 1, we can loop from 1,000,000 to 10,\n    # 000,000, and check if they end with 1.\n    count = 0\n    end_with_one = 1_000_000\n    for i in range(1, end_with_one):\n        if str(i).endswith('1'):\n            count += 1\n    # To count the numbers that start with 1, we can loop from 1,000,000 to 10,\n    # 000,000, and check if they start with 1.\n    count *= 2\n    start_with_one = 10**(n-1)\n    for i in range(start_with_one, end_with_one):\n        if str(i).startswith('1'):\n            count += 1\n    return count\n",
        "num_ids": 194
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    ans = 0\n    for num in range(N+1):\n        ans += bin(num)[2::].count('1')\n    return ans\n",
        "num_ids": 36
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # if N < 10:\n    #     return N\n    # return int(solve(N//10)) + N % 10\n    # binary_str = ''\n    # if N < 10:\n    #     binary_str += N\n    #     return binary_str\n    # binary_str += str(N % 10)\n    # return solve(N // 10) + binary_str\n    return int(bin(N)[2:])\n",
        "num_ids": 104
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return int_to_bin(N)\n",
        "num_ids": 12
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = ''\n    while N > 0:\n        result = str(N%2) + result\n        N = N // 2\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return bin(N)[2:]\n",
        "num_ids": 10
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    binary_num = bin(N)\n    binary_str = str(binary_num)[2:]\n    total = 0\n    for num in binary_str:\n        total += int(num)\n    return total\n",
        "num_ids": 53
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(map(int, str(N)))\n",
        "num_ids": 14
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if type(N)!= int:\n        return \"Invalid input! Enter an integer.\"\n    \n    n = bin(N).replace(\"0b\", \"\")\n    return n\n",
        "num_ids": 43
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return str(bin(N)[2:])\n",
        "num_ids": 13
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum([i for i in lst if i%2 == 0 and i!= 0 and lst.index(i) % 2!= 0 ])\n",
        "num_ids": 37
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    even = []\n    for i in range(len(lst)):\n        if lst[i]%2 == 0 and i%2!= 0:\n            even.append(lst[i])\n    return sum(even)\n",
        "num_ids": 57
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            res += lst[i]\n    return res\n",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(lst[i] if i%2==0 else 0 for i in range(len(lst)))\n",
        "num_ids": 29
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not lst:\n        return 0\n    return reduce(lambda acc, el: acc + el if el % 2!= 0 else acc, lst[::2], 0)\n",
        "num_ids": 43
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            count += lst[i]\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst_new = []\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            lst_new.append(lst[i])\n    return sum(lst_new)\n",
        "num_ids": 55
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = [0] * len(lst)\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            result[i] = lst[i]\n    return sum(result)",
        "num_ids": 59
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    new_lst = []\n    for index in range(len(lst)):\n        if lst[index]%2 == 0 and index%2 == 1:\n            new_lst.append(lst[index])\n    return sum(new_lst)\n",
        "num_ids": 65
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return''.join(sorted(' '.join(s.split()).split(' '), key=ord))\n",
        "num_ids": 26
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = s.split()\n    s.sort()\n    s =''.join(s)\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s = s.split()\n    ans = []\n    for word in s:\n        ans.append(''.join(sorted(word)))\n",
        "num_ids": 35
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # create empty dict\n    d = dict()\n",
        "num_ids": 13
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    words = s.split()\n    new_words = []\n    for word in words:\n        sorted_word = \"\".join(sorted(list(word)))\n        new_words.append(sorted_word)\n    return \" \".join(new_words)",
        "num_ids": 64
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s = s.split()\n    s = \" \".join(sorted(\"\".join(sorted(w)) for w in s))\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #initializing a blank dict\n    d = {}\n    #initializing an empty string\n    s1 = ''\n    #splitting the string with spaces\n    x = s.split(' ')\n    #looping through the list\n    for i in x:\n        #converting the list items to uppercase\n        i = i.upper()\n        #if the key is already in the dict, increment it by 1\n        if i in d:\n            d[i] += 1\n        #otherwise if key is not in dict, assign it a value of 1\n        else:\n            d[i] = 1\n    #looping through the dict\n    for j in d:\n        #initializing a count variable to 0\n        count = 0\n        #looping through the key value pairs\n        for k in range(d[j]):\n            #adding 1 to count variable\n            count += 1\n            #if count variable is less than the number of times the key occurs,\n            if count <= d[j]:\n                #replace the key value with the key's characters arranged in\n                #ascending order based on ascii value\n                s1 += j\n    #joining the string with spaces\n    s1 =''.join(s1)\n    #returning the string\n    return s1\nprint(anti_shuffle('Hello World!!!'))\nprint(anti_shuffle('Hi'))\nprint(anti_shuffle('hello'))\nprint(anti_shuffle('hello world'))",
        "num_ids": 343
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = s.split(\" \")\n    ans = \"\"\n    for word in s:\n        ans += word[0]\n    return ans\n",
        "num_ids": 35
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            l.append((i, lst[i].index(x)))\n    if l == []:\n        return []\n    l.sort()\n    l.sort(key=lambda x: x[1], reverse=True)\n    return l\n",
        "num_ids": 86
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lst = lst[:]\n    coordinates = []\n    for r, row in enumerate(lst):\n        for c, _ in enumerate(row):\n            if row[c] == x:\n                coordinates.append((r, c))\n    return sorted(coordinates, key=lambda x: (x[0], -x[1]))\n",
        "num_ids": 86
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    l = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            tup = (i, lst[i].index(x))\n            l.append(tup)\n    return sorted(l, key = lambda x: x[0])\n",
        "num_ids": 73
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    coordinates = []\n    for i, row in enumerate(lst):\n        if x in row:\n            coordinates.append((i, row.index(x)))\n    coordinates.sort()\n    coordinates.sort(key = lambda x: x[1], reverse=True)\n    return coordinates\n        ",
        "num_ids": 74
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    out = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            out.append((i,lst[i].index(x)))\n    \n    out.sort()\n    \n    for i in range(len(out)):\n        out[i] = (out[i][0], len(lst[out[i][0]]) - out[i][1] - 1)\n    \n    out.sort()\n    \n    return out\n",
        "num_ids": 118
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = []\n    lst.sort()\n    for row_num in range(len(lst)):\n        if x in lst[row_num]:\n            for col_num in range(len(lst[row_num]) - 1, -1, -1):\n                if lst[row_num][col_num] == x:\n                    res.append((row_num, col_num))\n    return res\n",
        "num_ids": 102
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # your code\n    return sorted(\n        tuple(sorted((i, len(i) - j - 1)\n        for j, i in enumerate(row) if x in i))\n        for row in lst if x in row\n    )\n",
        "num_ids": 61
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst_coordinates = []\n    \n    for row in range(len(lst)):\n        for col in range(len(lst[row])):\n            if lst[row][col] == x:\n                lst_coordinates.append((row, col))\n    \n    lst_coordinates = sorted(lst_coordinates)\n    lst_coordinates = sorted(lst_coordinates, key=lambda x: x[0])\n    lst_coordinates = sorted(lst_coordinates, key=lambda x: x[1], reverse=True)\n    \n    return lst_coordinates\n",
        "num_ids": 149
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(array)\n",
        "num_ids": 8
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not array:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(array) < 2:\n        return array\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not array: return array\n    left, right = 0, len(array) - 1\n    while left < right:\n        if sum(array[left:right+1]) % 2 == 0:\n            array[left:right+1] = list(reversed(array[left:right+1]))\n            left += 1\n        else:\n            right -= 1\n    return arra",
        "num_ids": 91
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not array:\n        return array\n    return sort_array_helper(array, 0, len(array) - 1)\n",
        "num_ids": 32
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not array:\n        return []\n    if len(array) == 1:\n        return array\n",
        "num_ids": 25
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(array) == 0:\n        return array\n    # If the sum of the two first numbers is odd then sort in ascending order.\n    # If the sum of the two first numbers is even then sort in descending order.\n    if sum([array[0], array[-1]]) % 2 == 0:\n        array = sorted(array)\n    else:\n        array = sorted(array, reverse=True)\n    return array\n",
        "num_ids": 101
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Encode the string to uppercase letters and remove whitespaces\n    s = s.upper().replace(' ', '')\n    # Create a dictionary of the alphabet\n    alpha_dict = {'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'H':7, 'I':8, 'J':9, 'K':10, 'L':11, 'M':12, 'N':13, 'O':14, 'P':15, 'Q':16, 'R':17, 'S':18, 'T':19, 'U':20, 'V':21, 'W':22, 'X':23, 'Y':24, 'Z':25}\n    # Create a list with the alphabet in the same order as it appears in alpha_dict\n    alphabet = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n    # Create a list with the alphabet in the same order as it appears in alpha_dict\n    encrypted = []\n    # Loop through each character in the string and encrypt it\n    for char in s:\n        encrypted.append(alpha_dict[char])\n    # Loop through each character in the list and get the value and append it to the result string\n    encrypted_result = ''\n    for i in range(len(encrypted)):\n        encrypted_result += str(alphabet[encrypted[i]])\n    # Return the encrypted result\n    return encrypted_result\n",
        "num_ids": 380
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    string = s.lower()\n    result = \"\"\n    for i in range(len(string)):\n        if string[i] >= 'a' and string[i] <= 'z':\n            char = string[i]\n            char_value = ord(char)\n            if char_value + 2 > 122:\n                result += chr(96 + (char_value + 2 - 122) - 1)\n            else:\n                result += chr(char_value + 2)\n        elif string[i] >= 'A' and string[i] <= 'Z':\n            char = string[i]\n            char_value = ord(char)\n            if char_value + 2 > 90:\n                result += chr(64 + (char_value + 2 - 90) - 1)\n            else:\n                result += chr(char_value + 2)\n        else:\n            result += string[i]\n    return result\n",
        "num_ids": 217
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    newstring = ''\n    for letter in s:\n        index = ALPHABET.find(letter)\n        newletter = ALPHABET[(index + 2 * 2) % len(ALPHABET)]\n        newstring = newstring + newletter\n    return newstring\n",
        "num_ids": 67
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join(\n       list(\n           map(\n               lambda x: chr(ord(x) + 2 * 2) if x.isalpha() else x,\n               s.lower()\n           )\n       )\n    )\n",
        "num_ids": 57
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    cipher = []\n    \n    for l in s:\n        try:\n            cipher.append(l.lower())\n        except:\n            cipher.append(l)\n            \n    for i, letter in enumerate(cipher):\n        cipher[i] = chr(ord(letter)-ord('a')+ord('a')+(ord('a')*2))\n        \n    return ''.join(cipher)\n    \n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner that the letters shift\n    up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    \n    cipher = []\n    \n    for l in s:\n        try:\n            cipher.append(l.lower())\n        except:\n            cipher.append(l)\n            \n    for i, letter in enumerate(cipher):\n        cipher[i] = chr(ord(letter)+ord('a')-(ord('a')*2))\n        \n    return ''.join(cipher)\n    \n    \n",
        "num_ids": 335
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    cipher_dict = {}\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alpha_list = list(alphabet)\n    rotate = 2 * 2\n    for i in range(len(alpha_list)):\n        cipher_dict[alpha_list[i]] = alpha_list[i + rotate]\n    encrypted_string = ''\n    for char in s:\n        encrypted_string += cipher_dict[char]\n    return encrypted_string\n",
        "num_ids": 117
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    encrypted_word = ''\n    encrypted_word += s[0:2]\n    for i in range(1, len(s) - 1):\n        encrypted_word += s[i + 2]\n        encrypted_word += s[i]\n    encrypted_word += s[len(s) - 1:len(s) - 1 + 2]\n    return encrypted_word\n",
        "num_ids": 88
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    tup = ()\n    for i in alphabet:\n        tup += (i, )\n    tup = tup[2:] + tup[:2]\n    return ''.join(tup[alphabet.index(i):] + i for i in s)\n",
        "num_ids": 86
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_string = ''\n    for i in range(len(s)):\n        encrypted_string += alphabet[(alphabet.index(s[i]) + 2 * 2) % 26]\n    return encrypted_string\n",
        "num_ids": 73
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # iterate through string\n    # set lowercase letter value to 1\n    # set uppercase letter value to 26\n    # increment letter value by 2\n    # take the value of the letter and find its position in the alphabet\n    # add the position value to the key value to get the new position value\n    # return the new position value to the new letter\n    # return the new letter to the new value\n    pass\n",
        "num_ids": 96
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
        "num_ids": 1024
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n    \nprint(next_smallest([5, 1, 4, 3, 2]))",
        "num_ids": 55
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst = sorted(lst)\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "num_ids": 34
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # time complexity: O(n)\n    # space complexity: O(1)\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return None\n    lst = list(sorted(set(lst)))\n    if len(lst) == 1:\n        return None\n    return lst[1]",
        "num_ids": 85
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst) < 2:\n        return None\n    if len(lst) == 2:\n        return min(lst)\n    \n    sorted_lst = sorted(lst)\n    return sorted_lst[1]\n",
        "num_ids": 60
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    if len(lst) < 2:\n        return None\n    \n    # Sort the list, then return the second smallest element.\n    lst.sort()\n    return lst[1]\n",
        "num_ids": 49
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst_set = set(lst)\n    lst_set = list(lst_set)\n    if len(lst) < 2:\n        return None\n    else:\n        smallest = lst_set[0]\n        for i in range(len(lst_set)):\n            if lst_set[i] < smallest:\n                smallest = lst_set[i]\n        for i in range(len(lst)):\n            if smallest == lst[i]:\n                return lst[i+1]\n",
        "num_ids": 131
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if lst == [] or len(lst) < 2:\n        return None\n    else:\n        smallest = lst[0]\n        for i in lst:\n            if i < smallest:\n                smallest = i\n        return smallest\n",
        "num_ids": 60
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for c in S.split(\".\"):\n        if c.startswith(\"I\"):\n            return 1\n    return 0\n",
        "num_ids": 32
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return S.count(\"I\"",
        "num_ids": 9
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return S.lower().count('i')\n",
        "num_ids": 12
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids": 30
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    cnt = 0\n    for i in S.split():\n        if i == \"I\":\n            cnt += 1\n    return cnt",
        "num_ids": 34
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    i = 0\n    for s in S.split('.'):\n        if is_bored_sub(s.split(' ')):\n            i += 1\n    return i\n",
        "num_ids": 43
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum([1 for char in S.split() if char==\"I\"])\n",
        "num_ids": 21
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    import re\n    cnt = 0\n    for word in S.split():\n        if word[0] == 'I':\n            cnt += 1\n    return cnt\n",
        "num_ids": 42
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([1 for x in S.split('.') if x and x[0] == 'I'])\n",
        "num_ids": 28
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if (x == y + z or x == z + y or y == z + x):\n        return True\n    else:\n        return False\nprint(any_int(1, 2, 3))\nprint(any_int(1, 2, 4))\nprint(any_int(1.1, 1, 3))\n",
        "num_ids": 76
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    a= (x+y+z)\n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if a == x+y or a== y+z or a== z+x:\n            return True\n        else:\n            return False\n        \n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l = [x,y,z]\n    for i in l:\n        if type(i) == int:\n            continue\n        else:\n            return False\n    else:\n        if int(x) + int(y) == int(z) or int(x) + int(z) == int(y) or int(z) + int(y) == int(x):\n            return True\n        else:\n            return False\n",
        "num_ids": 103
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #your code here\n    if x == y or x == z or y == z or x == z or x == y:\n        if x or y or z == int(x + y + z) or x or y or z == int(y + x + z) or y or x or z == int(z + x + y) or z or y or x == int(z + y + x) or y or x or z == int(x + z + y):\n            return True\n    else:\n        return False\n",
        "num_ids": 119
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "  if x == y+z or x==z+y or y==x+z:\n      return True\n  return False\n",
        "num_ids": 30
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n        return False\n    # code goes here\n",
        "num_ids": 40
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x == y + z) or (x == z + y) or (y == x + z):\n            return True\n        else:\n            return False\n        \n    else:\n        return False\n",
        "num_ids": 75
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n",
        "num_ids": 3
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if x+y == z or x+z == y or y+z == x:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return int(x) + int(y) == int(z) or int(y) + int(z) == int(x) or int(z) + int(x) == int(y)\n    \n    \n",
        "num_ids": 52
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return ''.join([_[i] if _[i].isupper() else _[i].upper() if _[i].lower() in 'aeiou' else _[i].lower() if _[i].upper() in 'AEIOU' else _[i] for i in range(len(_))])\n",
        "num_ids": 74
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #find all the vowels\n    vowels = 'aeiouAEIOU'\n    message = message.lower()\n    new_message = []\n    for char in message:\n        if char in vowels:\n            #find the index of the vowel\n            index = vowels.index(char)\n            #find the letter that appears 2 places ahead\n            new_char = vowels[(index+2)%len(vowels)]\n            #add the new character to the message\n            new_message.append(new_char)\n        else:\n            new_message.append(char)\n    return ''.join(new_message)\n",
        "num_ids": 152
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    message_l = list(message)\n    \n    # Convert message to lowercase\n    message_l = [letter.lower() for letter in message_l]\n",
        "num_ids": 39
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    encoded = ''\n    \n    for letter in message:\n        if letter.lower() in \"aeiou\":\n            letter = letter.lower()\n        encoded += letter.swapcase()\n    return encoded\n",
        "num_ids": 54
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass \n    # TODO: complete function\n",
        "num_ids": 13
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    message = message.swapcase()\n    vowel = \"aeiou\"\n    for char in message:\n        if char in vowel:\n            index = message.index(char)\n            message = message.replace(char, message[index+2])\n    return message\n    \n",
        "num_ids": 68
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join(v if v.lower() not in \"aeiou\" else chr(ord(\"a\") + (ord(v) - ord(\"a\") + 2) % 26) for v in message.lower())\n",
        "num_ids": 53
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # hm, we need to go from the largest number to the smallest, and work out the sum of the digits of each number.\n    # let's sort it, because we're doing this in an inefficient way.\n    lst = sorted(lst)\n    print(lst)\n",
        "num_ids": 66
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def is_prime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 70
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def isprime(n):\n        if n<2:\n            return False\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n    max = 0\n    for i in lst:\n        if isprime(i) and i>max:\n            max = i\n    return sum(list(map(int,str(max))))\n",
        "num_ids": 94
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    max_prime = None\n    max_sum = 0\n",
        "num_ids": 15
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n = 0\n    sum = 0\n    for elem in lst:\n        if is_prime(elem):\n            sum += elem\n    n = len(str(sum))\n    return n\n",
        "num_ids": 50
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len([i for i in range(2,max(lst)+1) if all([j%i!= 0 for j in lst])]",
        "num_ids": 36
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst.sort(reverse=True)\n    prime_list = []\n    while lst:\n        # removing any non-prime values\n        for i in lst:\n            if is_prime(i):\n                prime_list.append(i)\n        \n        # checking if the last element is prime\n        if is_prime(lst[0]):\n            return sum([int(x) for x in str(lst[0])])\n        lst = []\n        for j in prime_list:\n            if j >= lst[0]:\n                lst.append(j)\n        prime_list = []\n",
        "num_ids": 147
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not lst:\n        return 0\n    max_val = max(lst)\n    prime_lst = []\n    for num in lst:\n        if is_prime(num) and num > max_val:\n            max_val = num\n            prime_lst = [num]\n        elif is_prime(num) and num == max_val:\n            prime_lst.append(num)\n    if not prime_lst:\n        return 0\n    return sum(prime_lst)\n",
        "num_ids": 123
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #TODO: complete for Step 5\n    return True\n",
        "num_ids": 16
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not dict:\n        return False\n    lower_keys = []\n    upper_keys = []\n    for key in dict.keys():\n        if type(key) == str:\n            if key.islower():\n                lower_keys.append(key)\n            else:\n                upper_keys.append(key)\n    return len(lower_keys) == len(dict) or len(upper_keys) == len(dict)\n",
        "num_ids": 102
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return all(type(k) is str for k in dict) and \\\n           not any(type(k) is not str for k in dict)\n",
        "num_ids": 36
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if dict:\n        return len(set(dict.keys())) == len(dict.keys())\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not dict:\n        return False\n    else:\n        list_keys = list(dict.keys())\n        for key in list_keys:\n            if type(key) == str:\n                if key.islower():\n                    pass\n                else:\n                    return False\n            else:\n                return False\n        return True\n",
        "num_ids": 77
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not dict:\n        return False\n    upper_case = []\n    lower_case = []\n    for k, v in dict.items():\n        if str(k).isupper():\n            upper_case.append(k)\n        if str(k).islower():\n            lower_case.append(k)\n    return (len(upper_case) == len(lower_case) == len(dict))\n",
        "num_ids": 98
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    if len(dict)!= 0:\n        if len(dict.keys()) == len(dict.values()):\n            return True\n        else:\n            for item in dict.keys():\n                if item.islower() == dict[item].islower():\n                    return True\n                else:\n                    return False\n    else:\n        return False\n",
        "num_ids": 83
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(dict) == 0:\n        return False\n    # check all keys are strings in upper case or lower case\n    for i in dict:\n        if type(i)!= str:\n            return False\n    for i in dict:\n        if i.isupper():\n            return False\n    return True\n    \ndef check_dict_values(dict):\n    \"\"\"\n    Given a dictionary, return True if all values are positive integers,\n    else return False. The function should return False is the given \n    dictionary is empty.\n    Examples:\n    check_dict_values({ \"a\":1, \"b\":2, \"c\":3 }) should return True.\n    check_dict_values({ \"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\" }) should return False.\n    check_dict_values({ \"a\":1, \"b\":2, \"c\":3, \"d\":0 }) should return False.\n    check_dict_values({ \"a\":1, \"b\":2, \"c\":3, 1:0 }) should return False.\n    check_dict_values({ 1:1, 2:2, 3:3, 4:4, 5:5 }) should return True.\n    check_dict_values({}) should return False.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for i in dict:\n        if type(i)!= int:\n            return False\n        if i < 0:\n            return False\n    return True\n    \ndef check_dict_items(dict):\n    \"\"\"\n    Given a dictionary, return True if all values are positive integers,\n    else return False. The function should return False is the given \n    dictionary is empty.\n    Examples:\n    check_dict_items({ \"a\":1, \"b\":2, \"c\":3 }) should return True.\n    check_dict_items({ \"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\" }) should return False.\n    check_dict_items({ \"a\":1, \"b\":2, \"c\":3, \"d\":0 }) should return False.\n    check_dict_items({ \"a\":1, \"b\":2, \"c\":3, 1:0 }) should return False.\n    check_dict_items({ 1:1, 2:2, 3:3, 4:4, 5:5 }) should return True.\n    check_dict_items({}) should return False.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for i in dict:\n        if type(i)!= int:\n            return False\n        if i < 0:\n            return False\n    return True\n",
        "num_ids": 621
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not dict:\n        return False\n    for k,v in dict.items():\n        if type(k)!= str:\n            return False\n        if type(v) == str:\n            if k.isupper():\n                if v.isupper():\n                    continue\n                else:\n                    return False\n            else:\n                if v.islower():\n                    continue\n                else:\n                    return False\n        else:\n            return False\n    return True\n",
        "num_ids": 108
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        if all(isinstance(key, str) for key in dict.keys()):\n            return True\n        elif all(isinstance(key, str) for key in dict.values()):\n            return True\n        else:\n            return False\n",
        "num_ids": 76
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    # first, count how many primes there are\n    # [2,3,5,7,11,13,17,19]\n",
        "num_ids": 35
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def is_prime(n):\n        return all(n % i!= 0 for i in range(2, int(n**0.5) + 1))\n    def list_count(n):\n        if n == 0:\n            return []\n        else:\n            return list(range(2, n + 1)) if is_prime(n) else [x for x in list_count(n - 1) if is_prime(x)]\n    return list_count(n)\n",
        "num_ids": 113
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 1:\n        return []\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        is_prime = True\n        for i in primes:\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes\n",
        "num_ids": 96
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def is_prime(n):\n        if n < 2:\n            return False\n        elif n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n    def count_primes(n):\n        if n <= 1:\n            return []\n        else:\n            primes = [2]\n            i = 3\n            while i < n:\n                if is_prime(i):\n                    primes.append(i)\n                i += 1\n            return primes\n    return count_primes(n)\n",
        "num_ids": 148
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst = []\n    for i in range(n):\n        if is_prime(i):\n            lst.append(i)\n    return lst\n",
        "num_ids": 39
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    prod = 0\n    if a > 0 and b > 0:\n        for i in str(a):\n            for j in str(b):\n                prod += int(i) * int(j)\n        return prod\n    else:\n        return 0\n",
        "num_ids": 62
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # assuming that a and b are not 0\n    if a == 0 or b == 0:\n        return 0\n    else:\n        # if there is a carry, we add 1 to the list\n        carry = 0\n        # we convert the input into a list so we can access their individual digits\n        a = list(str(a))\n        b = list(str(b))\n        # the list where we will store the product of a and b\n        product = []\n",
        "num_ids": 108
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a < 10:\n        a = a\n    else:\n        a = reduce(int.__mul__, map(int, str(a)))\n    \n    if b < 10:\n        b = b\n    else:\n        b = reduce(int.__mul__, map(int, str(b)))\n",
        "num_ids": 77
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n    a = str(a)\n    b = str(b)\n    for i in a:\n        for j in b:\n            result += int(i) * int(j)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a == 0:\n        return 0\n    if b == 0:\n        return 0\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    if a < 10:\n        a = a*b\n        return a\n    return (multiply(a//10, b) + multiply(a%10, b))\n",
        "num_ids": 90
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    prod = a * b\n    for x in str(prod):\n        if int(x)!= 0:\n            return int(x)\n",
        "num_ids": 36
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # return int(str(a)[0])*int(str(b)[0])\n    return sum(map(lambda x: x[0]*x[1], zip([int(x) for x in str(a)],[int(x) for x in str(b)])))\n",
        "num_ids": 67
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return a*b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # a = a // 10  # gives you a // 1\n    # b = b // 10  # gives you b // 1\n    # if a == 0 or b == 0:\n    #     return 0\n    # else:\n    #     return (a + b) % 10  # gives you the unit digit\n    return (a % 10) * (b % 10)",
        "num_ids": 86
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Check for negative numbers\n    if a < 0 or b < 0:\n        return -1\n",
        "num_ids": 24
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiou':\n            if i % 2 == 0:\n                count += 1\n    return count",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    upper = 0\n    for index, letter in enumerate(s):\n        if letter.isupper() and index % 2 == 0:\n            upper += 1\n    return upper\n",
        "num_ids": 42
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = 0\n    count = 0\n    while i < len(s):\n        if (i % 2 == 0) and (s[i] in vowels):\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i, c in enumerate(s):\n        if c.upper() in vowels and i % 2 == 0:\n            count += 1\n    return count\n    \n",
        "num_ids": 69
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum([1 if x.isupper() and (s.index(x) % 2 == 0) else 0 for x in s])",
        "num_ids": 32
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    i = 0\n    while i < len(s):\n        if s[i] == s[i].upper() and i % 2 == 0:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    s = s.lower()\n    \n    return sum([1 for i in range(len(s)) if s[i] in 'aeiou' and i % 2 == 0])\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = list(s)\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            if s[i].isupper():\n                count += 1\n    return count\n",
        "num_ids": 80
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return round(float(value))\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    num = float(value)\n    int_num = int(num)\n    if abs(num - int_num) < abs(num - int_num + 0.5):\n        return int_num\n    return int_num + 1\n",
        "num_ids": 57
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return round(float(value))\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return round(float(value))\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return int(value)\n",
        "num_ids": 8
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return int(value)\n",
        "num_ids": 8
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return int(value)\n",
        "num_ids": 8
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    value = float(value)\n    diff = abs(value) % 1\n    if diff == 0:\n        return int(value)\n    if value < 0:\n        return -int(value - diff)\n    else:\n        return int(value + diff)\n",
        "num_ids": 63
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if value[0] == '-':\n        return -int(value[1:])\n    return int(value)\n",
        "num_ids": 30
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n    if n % 2 == 1:\n        return [1, n + 1, 3 * n + 1]\n    else:\n        return [1, n + 2, 3 * n + 2]\n",
        "num_ids": 74
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n > 0, \"n must be a positive integer\"\n    # checking if n is even or odd\n    if n % 2 == 0:\n        return [n] + [i for i in range(n + 1, 2 * n + 1, 2)]\n    else:\n        return [n] + [i for i in range(n + 1, 2 * n, 2)]\n",
        "num_ids": 89
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        pile = [n for n in range(1, n + 1)]\n    else:\n        pile = [n for n in range(1, n + 1, 2)]\n    return pile\n",
        "num_ids": 56
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0:\n        return [0]\n    else:\n        if n % 2 == 0:\n            n_in_next_level = n + 1\n            return make_a_pile(n_in_next_level) + [n + 1]\n        else:\n            n_in_next_level = n + 1\n            return make_a_pile(n_in_next_level) + [n + 2]\n",
        "num_ids": 105
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i for i in range(n, 0, -2)] if n%2 else [i for i in range(n, 1, -2)]\n",
        "num_ids": 37
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    stones = []\n",
        "num_ids": 6
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n % 2 == 1:\n        return [n] + make_a_pile(n + 1)\n    return [n] + make_a_pile(n + 2)\n",
        "num_ids": 46
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    if n % 2 == 1:\n        result.append(n)\n        while n > 1:\n            n = n - 1\n            result.append(n)\n    else:\n        result.append(n)\n        while n > 1:\n            n = n - 2\n            result.append(n)\n    return result[::-1]\n",
        "num_ids": 88
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    nums = [n]\n    while nums[-1] > 1:\n        nums.append(nums[-1] + (1 if nums[-1] % 2 == 1 else -1))\n    return nums\n",
        "num_ids": 57
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [n] + [n + (n % 2)] * 2\n",
        "num_ids": 18
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return s.split()\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return s.split()\n",
        "num_ids": 8
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return s.replace(\",\", \" \").split()\n    \ndef uniq_char_strings(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words with the number of each\n    unique character.\n    \n    For example:\n    uniq_char_strings(\"Hi, my name is John\") == [\"Hi\", 3, \"my\", 2, \"name\", 2, \"is\", 2, \"John\", 2]\n    uniq_char_strings(\"One, two, three, four, five, six\") == [\"One\", 3, \"two\", 3, \"three\", 3, \"four\", 3, \"five\", 3, \"six\", 3]\n    \"\"\"\n    return [len(set(i)) for i in s.split()]\n    \ndef reverse_string(s):\n    \"\"\"\n    You will be given a string of words. Your task is to reverse only the words and not the\n    rest of the string.\n    \n    For example:\n    reverse_string(\"Hi my name is John\") == \"John is name my Hi\"\n    \"\"\"\n    return \" \".join([\"\".join(reversed(i)) for i in s.split()])\n    \ndef reverse_sentence(s):\n    \"\"\"\n    You will be given a string of words. Your task is to reverse every word in the string\n    and return it as a new string.\n    \n    For example:\n    reverse_sentence(\"Hi my name is John\") == \"John is name my Hi\"\n    \"\"\"\n    return \" \".join([\"\".join(reversed(i)) for i in s.split()])\n    \ndef count_unique_words(s):\n    \"\"\"\n    You will be given a string. Your task is to count how many unique words there are in the string.\n    \n    For example:\n    count_unique_words(\"Hi my name is John\") == 3\n    \"\"\"\n    return len(set(s.split()))\n    \ndef count_unique_words_in_sentence(s):\n    \"\"\"\n    You will be given a string of words separated by a space. Your task is to count how many\n    unique words there are in the string.\n    \n    For example:\n    count_unique_words_in_sentence(\"Hi my name is John\") == 3\n    \"\"\"\n    return len(set(s.split()))\n    \ndef first_last(s):\n    \"\"\"\n    You will be given a string of characters. Your task is to return a new string that has\n    the first character from the original string, then the last, then the first character\n    again, and so on.\n    \n    For example:\n    first_last(\"abcd\") == \"abdc\"\n    first_last(\"abcdefg\") == \"abgfe\"\n    \"\"\"\n    return \"\".join([s[:1], s[-1], s[:1]])\n    \ndef unique_words(s):\n    \"\"\"\n    You will be given a string of words. Your task is to return a new string with only the\n    unique words.\n    \n    For example:\n    unique_words(\"Hi my name is John and Hi John\") == \"Hi my name is John\"\n    unique_words(\"I am going to be unique forever\") == \"I am going to be unique forever\"\n    \"\"\"\n    return \" \".join(set(s.split()))\n    \ndef unique_words_in_sentence(s):\n    \"\"\"\n    You will be given a string of words separated by a space. Your task is to return a new\n    string with only the unique words.\n    \n    For example:\n    unique_words_in_sentence(\"Hi my name is John and Hi John\") == \"Hi my name is John\"\n    unique_words_in_sentence(\"I am going to be unique forever\") == \"I am going to be unique forever\"\n    \"\"\"\n    return \" \".join(set(s.split()))\n    \ndef unique_chars_in_sentence(s):\n    \"\"\"\n    You will be given a string of words separated by a space. Your task is to return a new\n    string with only the unique characters.\n    \n    For example:\n    unique_chars_in_sentence(\"Hi my name is John and Hi John\") == \"HJ\"\n    unique_chars_in_sentenc",
        "num_ids": 1025
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return s.replace(\", \", \",\").split(\",\")\n",
        "num_ids": 17
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = s.replace('\\n','')\n    s = s.split(' ')\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return s.split()\n",
        "num_ids": 8
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Convert to lower case\n    s = s.lower()\n    # Remove special characters\n    s = re.sub(r'[^\\w]','', s)\n    # Split by spaces\n    s = s.split()\n    # Remove empty strings\n    s = [x for x in s if x!= '']\n    return s\n",
        "num_ids": 81
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(x, y+1):\n        if i%2==0 and i>=x and i<=y:\n            return i\n    return -1\n",
        "num_ids": 42
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if x >= y:\n        return -1\n    else:\n        while x < y:\n            if x % 2 == 0:\n                return x\n            x += 1\n        return -1\n",
        "num_ids": 47
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Check if x is even number and it's in range\n    if x % 2!= 0 or x <= 0 or x > y:\n        return -1\n    # Check if x is greater then the biggest even number in range\n    else:\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n                return i\n        return -1\n    ",
        "num_ids": 89
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if x % 2!= 0 or y % 2!= 0:\n        return -1\n    else:\n        if x > y:\n            biggest_number = x\n        else:\n            biggest_number = y\n        \n        for number in range(biggest_number, 0, -2):\n            if number <= y and number >= x:\n                return number\n        return -1\n",
        "num_ids": 93
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if x%2==0:\n        return x\n    if x%2==1:\n        while True:\n            x+=1\n            if x%2==0:\n                return x\n    else:\n        return -1\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
        "num_ids": 1024
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Hint: This function should be really simple...\n",
        "num_ids": 14
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    return -1\n",
        "num_ids": 8
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a = 0\n    b = 1\n    while b < x:\n        if b % 2 == 0:\n            a = b\n        b += 1\n    while a < y:\n        if a % 2 == 0 and a > x:\n            return a\n        a += 1\n    return -1\n",
        "num_ids": 71
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    biggest_num = 0\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > biggest_num:\n            biggest_num = num\n    if biggest_num == 0:\n        return -1\n    return biggest_num\n",
        "num_ids": 65
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if x % 2!= 0 and y % 2 == 0:\n        return int((y - x) / 2)\n    else:\n        return -1\n",
        "num_ids": 38
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    if n == 1:\n        return str(n)\n    if n == m:\n        return str(n) + \"0\"\n    else:\n        avg = (n+m)//2\n        return bin(avg)[2:]\n",
        "num_ids": 71
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Your code here\n    if n < m:\n        avg = int((n + m) / 2)\n        return bin(avg)[2:]\n    else:\n        return -1\n",
        "num_ids": 47
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    elif n == m:\n        return bin(n)\n    elif n > 0 and m > 0:\n        n_m_list = [n, m]\n        n_m_list.sort()\n        n_m_list.append(n_m_list[1] - 1)\n        \n        average = n_m_list[0] + n_m_list[1] + n_m_list[2]\n        average /= 3\n        average = int(average)\n        return bin(average)\n",
        "num_ids": 137
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n > m:\n        return -1\n    return bin(int((n + m) / 2))[2:]\n",
        "num_ids": 30
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert n > 0 and m > 0, \"Both numbers must be positive\"\n    if n < m:\n        return -1\n    return \"0b{}\".format(bin(round(sum((range(n, m + 1))) / (m - n + 1)))[2:])\n",
        "num_ids": 68
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return format(sum([i for i in range(n,m+1)])//(m-n+1), 'b') if n<=m else -1\n    \n",
        "num_ids": 42
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n > m:\n        return -1\n    avg = 0\n    for i in range(n, m+1):\n        avg += i\n    avg = avg//(m-n+1)\n    avg = int(avg)\n    return bin(avg)[2:]\n",
        "num_ids": 72
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < m:\n        return -1\n    else:\n        return f\"0b{str(bin(int((n+m)/2))).replace('0b', '')}\"\n",
        "num_ids": 46
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # YOUR CODE HERE\n    # index = (n+m) // 2\n    # if index % 1!= 0:\n    #     if n > m:\n    #         return -1\n    #     else:\n    #         return bin(int(index))\n    # return bin(int(n+m) // 2)\n    if n > m:\n        return -1\n    else:\n        return bin(int((n+m) / 2))\n",
        "num_ids": 108
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n    res = []\n    for num in x:\n        if num % 2 == 1:\n            res.append(num)\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # your code here\n    list_ = []\n    for i in x:\n        if x.count(i) % 2 == 0:\n            list_ = list(set(list_))\n            list_.append(i)\n    return list(set(list_))\n",
        "num_ids": 64
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    list_of_unique_number = []\n    for number in x:\n        if all(int(digit) % 2!= 0 for digit in str(number)):\n            list_of_unique_number.append(number)\n    return sorted(list_of_unique_number)\n",
        "num_ids": 68
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # your code here\n",
        "num_ids": 7
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    lst = []\n    for i in x:\n        num = [int(x) for x in str(i)]\n        if 1 in num:\n            continue\n        else:\n            lst.append(i)\n    return sorted(lst)\n",
        "num_ids": 63
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    numbers = []\n    for i in x:\n        if i%2 == 0:\n            numbers.append(i)\n    numbers.sort()\n    return numbers\n    ",
        "num_ids": 44
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    num_list = []\n    for i in x:\n        if not any(n for n in str(i) if n in '02468'):\n            num_list.append(i)\n    return sorted(num_list)\n",
        "num_ids": 56
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return list(sorted(filter(lambda y: all(k % 2!= 0 for k in str(y)), x)))\n",
        "num_ids": 33
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    even_digits = []\n    result = []\n    for n in x:\n        if n % 2!= 0:\n            even_digits.append(n)\n",
        "num_ids": 42
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    arr = list(filter(lambda x: x in range(1, 10), arr))\n    if arr:\n        arr = sorted(arr, reverse=True)\n        return list(map(lambda x: {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}[x], arr))\n    else:\n        return []\n",
        "num_ids": 109
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    arr.sort()\n    arr.reverse()\n    return [numbers_to_words[i] for i in arr]\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # define a dictionary mapping integers between 1 and 9 to their respective strings\n    num_to_name_dict = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n",
        "num_ids": 73
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: Write your code here\n    return []\n",
        "num_ids": 15
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # sorting \n    # for i in range(0, len(arr)):\n    #     for j in range(0, len(arr)-i-1):\n    #         if arr[j] > arr[j+1]:\n    #             arr[j], arr[j+1] = arr[j+1], arr[j]\n",
        "num_ids": 81
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(arr, reverse=True)\n",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    try:\n        return [HUNDRED[x] if 1<=x<=9 else TENS[x//10] + [ONES[x%10]] for x in sorted(arr, reverse=True)]\n    except:\n        return []\n        \nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\nprint(by_length([]))\nprint(by_length([1, -1, 55]))",
        "num_ids": 156
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    res = [1]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(i * i)\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res\n",
        "num_ids": 64
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    mylist = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            mylist.append(factorial(i))\n        else:\n            mylist.append(sum(range(1, i+1)))\n    return mylist\n",
        "num_ids": 67
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    #return list(range(1, n + 1, 2)) + [1 + sum(range(1, i + 1)) for i in range(2, n + 1, 2)]\n    #return [i for i in range(1, n + 1, 2) if i % 2 == 0] + [1 + sum(range(1, i + 1)) for i in range(2, n + 1, 2)]\n    return [i if i % 2 == 0 else 1 + sum(range(1, i + 1)) for i in range(1, n + 1)]\n",
        "num_ids": 132
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [factorial(i) if i % 2 == 0 else i for i in range(1, n + 1)]\n",
        "num_ids": 29
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # your code here\n    return None\n",
        "num_ids": 11
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return [factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n",
        "num_ids": 40
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return list(map(factorial, range(1, n+1, 2))) + list(map(sum_of_range, range(1, n+1, 2)))\n",
        "num_ids": 42
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i if i%2==0 else sum(range(1,i+1)) for i in range(1,n+1)]\n",
        "num_ids": 34
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # let n = 12\n    # let n = 13\n    # let n = 10101010\n    # find the palindrome within n\n",
        "num_ids": 34
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    even, odd = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_even(i):\n                even += 1\n            else:\n                odd += 1\n    return even, odd\n",
        "num_ids": 63
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # # 1. Mathematical\n    # # Time: O(1), Space: O(1)\n    # s = str(n)\n    # odd = sum(int(s[i])%2 for i in range(len(s)))\n    # even = sum(int(s[i])%2 == 0 for i in range(len(s)))\n    # return (even, odd)\n",
        "num_ids": 93
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def is_palindrome(x):\n        if str(x) == str(x)[::-1]:\n            return True\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "num_ids": 65
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert arr, 'Empty array'\n    \n    count = 0\n    for i in arr:\n        if i < 0:\n            i = abs(i)\n            i, last_digit = i // 10, i % 10\n            while last_digit < 0:\n                i, last_digit = i // 10, i % 10\n            if last_digit > 0:\n                count += 1\n        elif sum(map(int, str(i))) > 0:\n            count += 1\n    return count\n    \n    \n",
        "num_ids": 122
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    # My solution\n    count = 0\n    for num in arr:\n        if sum(map(int, str(num))) > 0:\n            count += 1\n    return count\n    \n    # Best solution\n    # return len([i for i in arr if sum(map(int, list(str(i)))) > 0])",
        "num_ids": 78
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len([i for i in arr if sum(map(int, str(i))) > 0])\n",
        "num_ids": 25
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert arr, 'The array cannot be empty'\n    count = 0\n    for i in range(len(arr)):\n        if sum_digits(arr[i]) > 0:\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(map(sum_digits, arr))\n",
        "num_ids": 15
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    counter = 0\n    for number in arr:\n        sum = 0\n        for digit in str(number):\n            sum += int(digit)\n        if sum > 0:\n            counter += 1\n    return counter",
        "num_ids": 50
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return 0\n    if arr[0] < 0:\n        return count_nums([abs(arr[0])]) + count_nums(arr[1:])\n    return count_nums(arr[1:])",
        "num_ids": 63
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(arr)<2:\n        return True\n    if arr==sorted(arr):\n        return True\n    elif arr==[]:\n        return True\n    else:\n        return False",
        "num_ids": 48
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not arr:\n        return True\n    pivot = arr[0]\n    low, high = 1, len(arr)-1\n    while low<high:\n        if arr[low]<=pivot and arr[high]>=pivot:\n            return True\n        if arr[low]>pivot and arr[high]<pivot:\n            return False\n        if arr[low]>pivot:\n            high -= 1\n        if arr[high]<pivot:\n            low += 1\n    return True\n",
        "num_ids": 124
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr:\n        return True\n    \n    max_value = 0\n    for val in arr:\n        max_value = max(max_value, val)\n    \n    for val in arr:\n        if val > max_value:\n            return False\n        max_value = max(max_value, val)\n    \n    return True",
        "num_ids": 82
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = len(arr)\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    left = [False] * n\n    right = [False] * n\n    left[0] = True\n    right[n-1] = True\n    for i in range(1, n):\n        if left[i-1] == True and arr[i] < arr[i-1]:\n            left[i] = True\n    for i in range(n-2, -1, -1):\n        if right[i+1] == True and arr[i] < arr[i+1]:\n            right[i] = True\n    for i in range(n):\n        if left[i] == True and right[i] == True:\n            return True\n    return False\n",
        "num_ids": 192
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not arr: return True\n    n = len(arr)\n    if n <= 1: return True\n    # move one right at a time.\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            break\n    else:\n        return True\n    for j in range(n-1, i, -1):\n        if arr[j] <= arr[j-1]:\n            break\n    else:\n        return True\n    for k in range(i+1, n):\n        if arr[k] > arr[i]:\n            break\n    else:\n        return True\n    for l in range(k, n):\n        if arr[l] <= arr[i-1]:\n            break\n    else:\n        return True\n    return False\n",
        "num_ids": 189
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return True\n",
        "num_ids": 5
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return True\n    # arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if arr == []:\n        return True\n    else:\n        if len(arr) <= 2:\n            return True\n        else:\n            if arr[0] > arr[1]:\n                arr[0], arr[1] = arr[1], arr[0]\n                return True\n            else:\n                for i in range(len(arr)-1):\n                    if arr[i] >= arr[i+1]:\n                        return False\n                return True\n",
        "num_ids": 108
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if arr==[]:\n        return True\n    else:\n        length=len(arr)\n        if length==1:\n            return True\n        else:\n            #print(arr)\n            #left=arr[0]\n            right=arr[length-1]\n            left=0\n            for i in range(length-1):\n                left=arr[i]\n                #right=arr[length-1]\n                right=arr[length-1-i]\n                #print(left,right)\n                if left>right:\n                    return False\n            return True\n",
        "num_ids": 136
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n    # return \"YES\" if all elements in lst1 are even else \"NO\"\n",
        "num_ids": 27
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # \n    # Write your code here.\n    #\n    a = 0\n    b = 0\n    for i in range(0, len(lst1)):\n        for j in range(0, len(lst2)):\n            if lst1[i] == lst2[j]:\n                a += 1\n    for i in range(0, len(lst1)):\n        if lst1[i] % 2!= 0:\n            b += 1\n    for j in range(0, len(lst2)):\n        if lst2[j] % 2!= 0:\n            b += 1\n    if a == len(lst1) and b == len(lst2):\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 183
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Set a boolean flag to the value True\n    is_even = True\n    # Loop through all the elements of lst1\n    for element in lst1:\n        # If any of the element is odd, set the flag to False\n        if element % 2!= 0:\n            is_even = False\n    # If the flag is False, then no exchange is possible and we have to return \"NO\".\n    if is_even:\n        return \"YES\"\n    # Otherwise, we have to loop through the elements of lst2\n    # and find the elements that we can exchange with lst1.\n    # We can exchange with lst1 if the element is even and\n    # lst1 does not have any element of the same value as that of lst2 element.\n    else:\n        for element in lst2:\n            # Set a boolean flag to the value True\n            is_found = False\n            # Loop through all the elements of lst1\n            for lst1_element in lst1:\n                # If the lst2 element is found in lst1, set the flag to True\n                if lst1_element == element:\n                    is_found = True\n                    break\n            # If the element is not found in lst1, then we have to return \"NO\"\n            if not is_found:\n                return \"NO\"\n    # If we have reached this line, it means that we have found an exchange\n    # between lst1 and lst2 and we have to return \"YES\"\n    return \"YES\"",
        "num_ids": 355
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # example:\n    # lst1 = [1, 2, 3, 4], lst2 = [1, 2, 3, 4]\n    # current_exchange = [1]\n    # current_list = [2]\n    #\n    # create_exchanges([1, 2], [1, 2])\n    # create_exchanges([1, 2, 3], [1, 2, 3])\n    # create_exchanges([1, 2, 3, 4], [1, 2, 3, 4])\n    #\n    # => [1, 2, 3, 4]\n    # create_exchanges([1, 2, 3, 4], [1, 2, 3, 4])\n    # => [2, 3, 4]\n    # create_exchanges([2, 3, 4], [2, 3, 4])\n    # => []\n    # create_exchanges([1, 3, 4], [1, 3, 4])\n    # => []\n    # create_exchanges([1, 2], [1, 2])\n    # => []\n    # create_exchanges([2, 4], [2, 4])\n    # => []\n    # create_exchanges([2, 3], [2, 3])\n    # => [2]\n    # create_exchanges([1, 2, 3], [1, 2, 3])\n    # => []\n    # create_exchanges([2, 4], [1, 2, 3, 4])\n    # => [1, 3, 4]\n    # create_exchanges([2, 3, 4], [1, 2, 3, 4])\n    # => []\n    # create_exchanges([2, 3, 4], [1, 5, 3, 4])\n    # => \"NO\"\n    # create_exchanges([1, 2, 3, 4], [1, 5, 3, 4])\n    # => []\n    # create_exchanges([1, 2, 3, 4], [1, 5, 3, 4])\n    # => []\n    #\n    # create_exchanges([1, 2, 3, 4], [1, 2, 3, 4])\n    # => []\n    # create_exchanges([2, 4], [2, 4])\n    # => []\n    # create_exchanges([1, 3, 4], [1, 3, 4])\n    # => []\n    # create_exchanges([1, 2], [1, 2])\n    # => []\n    # create_exchanges([1, 2, 3], [1, 2, 3])\n    # => []\n    # create_exchanges([1, 2, 3, 4], [1, 2, 3, 4])\n    # => []\n    # create_exchanges([1, 2, 3, 4], [1, 2, 3, 4])\n    # => []\n    # create_exchanges([1, 2, 3, 4], [1, 2, 3, 4])\n    # => []\n    # create_exchanges([1, 2, 3, 4], [1, 2, 3, 4])\n    # => []\n    # create_exchanges([2, 4], [2, 4])\n    # => []\n    # create_exchanges([1, 3, 4], [1, 3, 4])\n    # => []\n    # create_exchanges([1, 2], [1, 2])\n    # => []\n    # create_exchanges([1, 2, 3], [1, 2, 3])\n    # => []\n    # create_exchanges([2, 4], [1, 2, 3, 4])\n    # => [1, 3, 4]\n    # create_exchanges([2, 3, 4], [1, 2, 3, 4])\n    # => []\n    # create_exchanges([2, 3, 4], [1, 5, 3, 4])\n    # => \"NO\"\n    # create_exchanges([1, 2, 3, 4], [1, 5, 3, 4])\n    # => []\n    # create_exchanges([1, 2, 3, 4], [1, 5, 3, 4])\n    # => []\n    #\n    # create_exchanges([1, 2, 3, 4], [1, 2, 3, 4])\n    # => []\n    # create_exchanges([2, 4], [2, 4])\n    # => []\n    # create_e",
        "num_ids": 1025
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Insert your code here\n    for i in lst1:\n        if i%2==1:\n            return \"NO\"\n    for j in lst2:\n        if j%2==1:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 62
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # WRITE YOUR BRILLIANT CODE HERE\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0 and lst2[i] % 2 == 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 87
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Fill this in.\n    return \"YES\" if sorted(lst1)[::-1].index(lst1[0]) % 2 == 0 else \"NO\"\n",
        "num_ids": 41
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # YOUR CODE HERE\n    # lst1 is an even list\n    if is_even(lst1) and is_even(lst2):\n        return \"YES\"\n    # lst2 is an even list\n    if is_even(lst2) and is_even(lst1):\n        return \"YES\"\n    # lst1 and lst2 are not even lists\n    if not is_even(lst1) and not is_even(lst2):\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 127
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in lst1:\n        if i % 2!= 0:\n            return \"NO\"\n    for j in lst2:\n        if j % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 57
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    dictionary = dict()\n    for word in test:\n        if word in dictionary:\n            dictionary[word] = dictionary[word] + 1\n        else:\n            dictionary[word] = 1\n    max_count = 0\n    for key in dictionary:\n        if dictionary[key] >= max_count:\n            max_count = dictionary[key]\n            max_word = key\n    return {max_word:max_count}",
        "num_ids": 103
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    histo = {}\n    # your code here\n    for char in test.split(' '):\n        if histo.get(char):\n            histo[char] += 1\n        else:\n            histo[char] = 1\n    return histo\n",
        "num_ids": 61
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert isinstance(test, str) and len(test)!= 0, \"Input must be a string\"\n    if len(test) == 0:\n        return {}\n    test = test.replace(' ', '')\n    dictionary = {}\n    for letter in test:\n        if letter in dictionary:\n            dictionary[letter] += 1\n        else:\n            dictionary[letter] = 1\n    return dictionary",
        "num_ids": 96
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    test = test.split(\" \")\n    count = {}\n    for letter in test:\n        if letter not in count:\n            count[letter] = 1\n        else:\n            count[letter] += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(test) == 0:\n        return {}\n",
        "num_ids": 15
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # count = {}\n    # for letter in test.split(' '):\n    #     if letter in count:\n    #         count[letter] += 1\n    #     else:\n    #         count[letter] = 1\n    # return count\n    \n    # count = {}\n    # for letter in test.split(' '):\n    #     count.setdefault(letter, 0)\n    #     count[letter] += 1\n    # return count\n    \n    # count = {}\n    # for letter in test.split(' '):\n    #     count[letter] = count.get(letter, 0) + 1\n    # return count\n    \n    count = dict()\n    for letter in test.split(' '):\n        count[letter] = count.get(letter, 0) + 1\n    return count\n",
        "num_ids": 191
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s = s.replace(c,'')\n    if s[::-1] == s:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "num_ids": 44
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s_result = \"\"\n    for i in s:\n        if i not in c:\n            s_result += i\n    s_result = s_result[::-1]\n    return (s_result,s_result == s)\n",
        "num_ids": 58
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n    return (s,False)\n",
        "num_ids": 15
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = ''\n    flag = True\n    #reverse\n    for i in range(len(s)-1, -1, -1):\n        if s[i] not in c:\n            result += s[i]\n        else:\n            flag = False\n    #check\n    result = ''.join(result)\n    return (result,flag)\n",
        "num_ids": 84
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result_str = \"\"\n    for char in s:\n        if char not in c:\n            result_str += char\n",
        "num_ids": 30
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s=s.replace(c,\"\")\n    s = s[::-1]\n    return s,True if s == s[::-1] else False\n",
        "num_ids": 39
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # your code here\n    r_s = \"\"\n    for s1 in s:\n        if s1 not in c:\n            r_s += s1\n    r_s = r_s[::-1]\n    if r_s == s:\n        return r_s, True\n    else:\n        return r_s, False\n",
        "num_ids": 82
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #Remove the same character in s and c\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    \n    #check if result is palindrome\n    check = True\n    for i in range(int(len(result)/2)):\n        if result[i]!= result[-(i+1)]:\n            check = False\n            break\n",
        "num_ids": 106
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    res = \"\"\n    for i in s:\n        if i!= c[0]:\n            res += i\n    if res == \"\":\n        return (\"\",True)\n    if res == res[::-1]:\n        return (res,True)\n    return (res, False)\ns = \"abcdef\"\nc = \"b\"\nprint(reverse_delete(s,c)",
        "num_ids": 92
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = s.replace(c, '')\n    if result[::-1] == result:\n        return result, True\n    else:\n        return result, False\n",
        "num_ids": 41
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return ['the number of odd elements '+str(len([i for i in j if int(i)%2==1]))+'n the str'+str(len([i for i in j]))+' of the '+str(len(j))+'nput.' for j in lst]\n",
        "num_ids": 73
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # total = []\n    # for string in lst:\n    #     total.append(sum( [int(i) for i in list(string)] ) )\n    # return total\n    return [ f\"the number of odd elements {sum([int(i) for i in list(string) if int(i)%2==1])}n the str{len(string)}ng {len(string)} of the {len(lst)}nput.\" for string in lst]\n",
        "num_ids": 112
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    return [\"the number of odd elements \" + str(len([ch for ch in x if ch%2==1])) + \"n the str\" + str(n+1) + \"n the \" + str(n+1) + \"nput.\" for n,x in enumerate(lst)]\n",
        "num_ids": 72
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num_list = []\n    for i in lst:\n        num_list.append(str(count_odd(i)))\n    return num_list\n",
        "num_ids": 38
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # replace each digit with number of odd digits in it\n    return [\"the number of odd elements \" + str(len([c for c in i if int(c) % 2])) +\n     \"n the \" + str(i) + \"nput.\" for i in lst]\n",
        "num_ids": 66
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    res = []\n    for num in lst:\n        res.append(num)\n    for i in range(len(lst)):\n        n = 0\n        for char in lst[i]:\n            if char not in [\"0\",\"2\",\"4\",\"6\",\"8\"]:\n                n += 1\n        res[i] = \"the number of odd elements \" + str(n) + \"n the str\" + str(i + 1) + \"n of the \" + str(i + 1) + \"nput.\"\n    return res\n    \n",
        "num_ids": 129
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    for i in lst:\n        n = 0\n        for c in i:\n            if c.isdigit():\n                if int(c) % 2!= 0:\n                    n += 1\n        result.append(\"the number of odd elements \" + str(n) + \"n the str\" + str(n) + \"ng \" + str(n) + \"of the \" + str(n) + \"nput.\")\n    return result\n",
        "num_ids": 109
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    num_count = []\n    for i in lst:\n        num_count.append(sum([1 for j in i if int(j)%2 == 1]))\n    return [\"the number of odd elements \" + str(num_count[i]) + \"n the str\" + str(i) + \"ng \" + str(i) + \"of the \" + str(i) + \"nput.\" for i in range(len(num_count))]\n",
        "num_ids": 108
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for s in lst:\n        count = 0\n        for num in s:\n            if int(num) % 2!= 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(len(s)) + \"ng \" + str(len(s)) + \" of the \" + str(len(lst)) + \"nput.\")\n    return result\n",
        "num_ids": 107
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [\"the number of odd elements \" + str(count) + \"n the str\" + str(i+1) + \" of the \" + str(i+1) + \"nput.\" for i,string in enumerate(lst) if sum([int(digit)%2 for digit in string])%2]\n",
        "num_ids": 74
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return min_sub_array_sum(nums)\n",
        "num_ids": 15
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    current_sum = 0\n    min_sum = float('inf')\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n",
        "num_ids": 75
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(nums) == 0:\n        return 0\n    total = min(nums)\n    sum_nums = sum(nums)\n    i = 0\n    while i < len(nums):\n        j = 1\n        while j <= len(nums):\n            total = min(sum_nums, sum(nums[i:j]), nums[i:j])\n            if total < sum_nums:\n                sum_nums = total\n            j += 1\n        i += 1\n    return sum_nums\n",
        "num_ids": 129
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Edge case\n    if len(nums) == 0:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if nums == []: return -1\n    left, right = 0, 0\n    minimum = float(\"inf\")\n    current_sum = 0\n    while right < len(nums):\n        current_sum += nums[right]\n        right += 1\n        while current_sum >= minimum:\n            minimum = min(minimum, current_sum)\n            current_sum -= nums[left]\n            left += 1\n    return minimum\n",
        "num_ids": 103
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # min_sum, start, curr_sum, end\n    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    start, end = 0, 0\n    total = 0\n    for end, num in enumerate(nums):\n        total += num\n        while total >= min_sum:\n            min_sum = min(min_sum, total - min_sum)\n            start += 1\n            total -= nums[start]\n    return min_sum\n",
        "num_ids": 120
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    i, j, total = 0, 0, 0\n    while j < len(nums):\n        total += nums[j]\n        j += 1\n",
        "num_ids": 38
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    total = sum(nums)\n    if total < 1:\n        return total\n    temp = 0\n    min_sum = total\n    for i in range(len(nums)):\n        temp += nums[i]\n        if temp < min_sum:\n            min_sum = temp\n        if temp >= min_sum:\n            if temp >= total:\n                break\n    return min_sum\n",
        "num_ids": 96
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not nums: return 0\n    cur_sum = 0\n    min_sum = float('inf')\n    for num in nums:\n        cur_sum += num\n        min_sum = min(min_sum, cur_sum)\n        cur_sum = min(cur_sum, 0)\n    return min_sum if min_sum!= float('inf') else 0\n",
        "num_ids": 90
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if nums is None or len(nums) == 0:\n        return 0\n    result = sum(nums)\n    for i in range(len(nums)):\n        total = 0\n        for j in range(i, len(nums)):\n            total += nums[j]\n            if total < result:\n                result = total\n            if total > result:\n                break\n    return result\n",
        "num_ids": 98
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def get_column_sums(grid):\n        \"\"\"\n        Return the sum of each column of the input grid.\n        \"\"\"\n        column_sums = [0] * len(grid[0])\n        for row in grid:\n            for i in range(len(row)):\n                column_sums[i] += row[i]\n        return column_sums\n",
        "num_ids": 89
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # get grid dimensions\n    x_length = len(grid[0])\n    y_length = len(grid)\n",
        "num_ids": 29
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    row_edges = [0] * (rows + 1)\n    col_edges = [0] * (cols + 1)\n    for row in range(rows):\n        row_edges[row + 1] = row_edges[row] + grid[row].count(1)\n    for col in range(cols):\n        col_edges[col + 1] = col_edges[col] + grid[:, col].count(1)\n",
        "num_ids": 129
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    m, n = len(grid), len(grid[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    dp[m - 1][n] = 1\n    for i in range(m - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            dp[i][j] = grid[i][j] * (dp[i + 1][j] + dp[i][j + 1])\n            dp[i][j] = dp[i][j] if dp[i][j] <= capacity else capacity\n    return dp[0][0]\n",
        "num_ids": 158
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # n = len(grid)\n    # m = len(grid[0])\n    # Time: O(n*m)\n    # Space: O(n*m)\n    \n    n = len(grid)\n    m = len(grid[0])\n    \n    table = [[math.inf for _ in range(m)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 0:\n                table[i][j] = 0\n            elif i == 0:\n                table[i][j] = 1\n            elif j == 0:\n                table[i][j] = 1\n            else:\n                table[i][j] = min(table[i][j-1], table[i-1][j]) + 1\n    \n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if table[i][j]!= math.inf:\n                count += table[i][j]\n                grid[i][j] = 0\n                \n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1025
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not grid:\n        return 0\n",
        "num_ids": 11
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def get_neighbours(row, col, grid):\n        m, n = len(grid), len(grid[0])\n        neighbours = []\n        if row - 1 >= 0:\n            neighbours.append((row - 1, col))\n        if row + 1 < m:\n            neighbours.append((row + 1, col))\n        if col - 1 >= 0:\n            neighbours.append((row, col - 1))\n        if col + 1 < n:\n            neighbours.append((row, col + 1))\n        return neighbours\n",
        "num_ids": 141
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    r, c = len(grid), len(grid[0])\n    dp = [[float('inf') for _ in range(c + 1)] for _ in range(r + 1)]\n",
        "num_ids": 44
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def count_visited_wells(grid, capacity):\n        count = 0\n        for row in grid:\n            if sum(row) > capacity:\n                count += 1\n        return count\n",
        "num_ids": 47
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def count_ones(x):\n        count = 0\n        for i in bin(x)[2:]:\n            if i == '1':\n                count += 1\n        return count\n",
        "num_ids": 44
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for n in arr:\n        b = bin(n)[2:]\n        result.append((b.count('1'), n))\n    result.sort()\n    return [x[1] for x in result]",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n",
        "num_ids": 27
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #def one_count(x):\n    #    return bin(x).count('1')\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def sort_bin(x):\n        return (bin(x).count('1'), x)\n    return sorted(arr, key=sort_bin)\n",
        "num_ids": 37
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "num_ids": 23
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return select_words_rec(s.split(), n)\n",
        "num_ids": 16
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    # return [word for word in s.split() if len(word) == n and len(set(word).difference(string.ascii_lowercase)) == n]\n    return [word for word in s.split() if len(set(word).difference(string.ascii_lowercase)) == n]\n",
        "num_ids": 79
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(s) == 0 or n == 0:\n        return []\n    return [word for word in s.split() if check_consonants(word, n)]\n",
        "num_ids": 42
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert type(s) == str, \"s must be a string!\"\n    assert type(n) == int, \"n must be a natural number!\"\n    res = []\n    if len(s) == 0:\n        return res\n    else:\n        # s = s.split()\n        # # res = [word for word in s if len(word) == n]\n        # # return res\n        # # instead of split(), I've implemented it this way to comply with the spec\n        s = s.split()\n        for word in s:\n            if word.count(' ')!= len(word):\n                if word.count(',')!= len(word):\n                    if word.count('.')!= len(word):\n                        if word.count(';')!= len(word):\n                            if word.count(':')!= len(word):\n                                if word.count('-')!= len(word):\n                                    if word.count('?')!= len(word):\n                                        if word.count('!')!= len(word):\n                                            if word.count('/')!= len(word):\n                                                if word.count('(')!= len(word):\n                                                    if word.count(')')!= len(word):\n                                                        if word.count('[')!= len(word):\n                                                            if word.count(']')!= len(word):\n                                                                if word.count('{')!= len(word):\n                                                                    if word.count('}')!= len(word):\n                                                                        if word.count('@')!= len(word):\n                                                                            if word.count('<')!= len(word):\n                                                                                if word.count('>')!= len(word):\n                                                                                    if word.count('\"')!= len(word):\n                                                                                        if word.count('\\'')!= len(word):\n                                                                                            if word.count('%')!= len(word):\n                                                                                                if word.count('+')!= len(word):\n                                                                                                    if word.count('*')!= len(word):\n                                                                                                        if word.count('=')!= len(word):\n                                                                                                            if word.count('|')!= len(word):\n                                                                                                                if word.count('/')!= len(word):\n                                                                                                                    res.append(word)\n                                                                                                            else:\n                                                                                                                if word.count('-')!= len(word):\n                                                                                                                    res.append(word)\n                                                                                                            else:\n                                                                                                                if word.count('_')!= len(word):\n                                                                                                                    res.append(word)\n                                                                                                                else:\n                                                                                                                    res.append(word)\n                                                                                                            else:\n                                                                                                                if word.count('/')!= len(word):\n                                                                                                                    res.append(word)\n                                                                                                                    # remaining letters must be vowels\n                                                                                                                    if word.count('a')!= len(word):\n                                                                                                                        if word.count('e')!= len(word):\n                                                                                                                            if word.count('i')!= len(word):\n                                                                                                                                if word.count('o')!= len(word):\n                                                                                                                                    if word.count('u')!= len(word):\n                                                                                                                                        res.append(word)\n                                                                                                                                else:\n                                                                                                                                    res.append(word)\n                                                                                                                                else:\n                                                                                                                                    res.append(word)\n                                                                                                                            else:\n                                                                                                                                res.append(word)\n                                                                                                                            else:\n                                                                                                                                res.append(word)\n                                                                                                                            else:\n                                                                                                                                res.append(word)\n                                                                                                                            else:\n                                                                                                                                res.append(word)\n                                                                                                                            else:\n                                                                                                                                res.append(word)\n                                                                                                                                else:\n                                                                                                                                    res.append(word)\n                                                                                                                                else:\n                                                                                                                                    res.append(word)\n                                                                                                                            else:\n                                                                                                                                res.append(word)\n                                                                                                                                else:\n                                                                                                                                    res.append(word)\n                                                                                                                                else:\n                                                                                                        ",
        "num_ids": 1031
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [word for word in s.split(' ') if len(word) == n and all([ch in ('qwertzuiopasdfghjklzxcvbnm') for ch in word.lower()])]\n",
        "num_ids": 54
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    res = []\n    for word in s.split(' '):\n        if len(word) > 0 and word.lower().count(' ') + 1 == n:\n            res.append(word)\n    return res\n",
        "num_ids": 52
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # split the string into list of words\n    # loop through each word and count consonants\n    # if consonants == n return word\n    # return words list\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for c in word:\n            if c in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n",
        "num_ids": 102
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    res = []\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    consonants_list = consonants * n\n    consonants_list_n = consonants_list[:n]\n    split_res = s.split()\n    for word in split_res:\n        if consonants_list_n in word:\n            res.append(word)\n    return res\n",
        "num_ids": 101
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(s) == 0:\n        return []\n    \n    l = []\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if is_consonant(s[i:j+1]) == n:\n                l.append(s[i:j+1])\n    return l\n",
        "num_ids": 86
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    words = []\n    for word in s.split():\n        if is_consonant_number(word, n) and word not in words:\n            words.append(word)\n    return words\n",
        "num_ids": 48
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    # Check edge cases\n    if len(word) < 3:\n        return \"\"\n",
        "num_ids": 23
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    from re import search\n",
        "num_ids": 7
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = -1\n    vowels = \"AEIOUaeiou\"\n    while len(word) > 1:\n        i = word.find(vowels, i + 1)\n        if i == -1:\n            break\n    if i == -1:\n        return \"\"\n    else:\n        return word[i+1]\n",
        "num_ids": 83
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(word) < 3:\n        return \"\"\n    \n    i = len(word)-1\n    while i > 0:\n        if word[i] in ('a', 'e', 'i', 'o', 'u') and word[i-1] not in ('a', 'e', 'i', 'o', 'u') and word[i+1] not in ('a', 'e', 'i', 'o', 'u'):\n            return word[i]\n        i -= 1\n    return \"\"\n",
        "num_ids": 121
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    vowels = set(list(\"aeiou\"))\n    for i, c in enumerate(word):\n        if c in vowels:\n            break\n    return word[i + 1:]\n",
        "num_ids": 47
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    vowels = set(list(\"aeiou\"))\n    word_consonants = set()\n    for char in word:\n        if char.isalpha() and char.isupper():\n            word_consonants.add(char)\n    \n    for i in range(1, len(word)):\n        if word[i] in vowels:\n            if word[i-1] in word_consonants and word[i+1] in word_consonants:\n                return word[i]\n            if i == len(word) - 1:\n                return \"\"\n    return \"\"",
        "num_ids": 140
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    i = len(word) - 2\n    while i >= 0:\n        if word[i] in \"AEIOUaeiou\":\n            return word[i + 1]\n        i -= 1\n    return \"\"\n",
        "num_ids": 52
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel = ''\n    for index in range(len(word)):\n        if word[index] in vowels and word[index - 1] in vowels and word[index + 1] not in vowels:\n            vowel = word[index]\n    return vowel\n",
        "num_ids": 87
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    # The idea is to find the first vowel that is between two consonants. \n    # The first vowel in the beginning is not relevant, so we start from the second.\n    for i in range(len(word)):\n        if word[i] in VOWELS:\n            if word[i-1] in CONSONANTS or i == 0:\n                return word[i]\n",
        "num_ids": 92
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    letters = \"bcdfghjklmnpqrstvwxyz\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in letters and word[i - 1] not in letters:\n            return word[i]\n    return \"\"\n",
        "num_ids": 72
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if lst[0]==')' or lst[1]==')':\n        return 'No'\n    else:\n        return 'Yes'\n",
        "num_ids": 37
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    \n    \n    # lst is a list of two strings, each of which is only '()' or ')'.\n    # We want to check whether it is possible to put them together in order\n    # to make a good string. If we don't check this, then we'll get an\n    # incorrect answer for examples like ['()(', ')')].\n    \n    # For each item in lst, we will append the index of the item to the list.\n    # This way we will know which of the parentheses in each item we have\n    # to check if they match.\n    for index in range(len(lst)):\n        lst[index] += str(index)\n    \n    # We'll then go through each element in lst and check if its parentheses\n    # match up. If not, then return 'No'.\n    for item in lst:\n        \n        # Make a copy of item and set to a new variable.\n        new_item = item[:]\n        \n        # Check if the last two items in new_item are '(' and ')' respectively.\n        if new_item[-2] == '(' and new_item[-1] == ')':\n            \n            # If they are, then we want to check if they match.\n            match = check_parens(new_item[:-2])\n            \n            # If they don't match up, return 'No'.\n            if match == False:\n                return 'No'\n        \n        # Check if the last two items in new_item are ')' and '(' respectively.\n        elif new_item[-2] == ')' and new_item[-1] == '(':\n            \n            # If they are, then we want to check if they match.\n            match = check_parens(new_item[:-2])\n            \n            # If they don't match up, return 'No'.\n            if match == False:\n                return 'No'\n    \n    # If we get to this point, then we know we have a good string.\n    return 'Yes'\n",
        "num_ids": 477
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lst = list(lst)\n    lst = ''.join(lst)\n    count = 0\n    for char in lst:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return 'No'\n    return 'Yes' if count == 0 else 'No'",
        "num_ids": 83
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return 'Yes'\n    elif len(lst) == 1:\n        return 'Yes' if lst[0] == ')' else 'No'\n    else:\n        new = []\n        for i in range(len(lst)):\n            if i == 0:\n                if lst[0] == '(' and lst[i] == ')':\n                    new.append(lst[i])\n                else:\n                    return 'No'\n            elif i == len(lst)-1:\n                if lst[i] == '(' and lst[i-1] == ')':\n                    new.append(lst[i])\n                else:\n                    return 'No'\n            elif lst[i-1] == '(' and lst[i] == ')':\n                new.append(lst[i])\n            elif lst[i] == '(' and lst[i-1] == ')':\n                new.append(lst[i])\n            else:\n                return 'No'\n        return 'Yes' if len(new) == 0 else 'No'\n",
        "num_ids": 274
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # attempt\n    return 'Yes' if is_good_paren(lst) else 'No'\n",
        "num_ids": 25
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # My solution:\n    lst = list(lst)\n    if len(lst) == 0:\n        return 'Yes'\n    i = 0\n    while i < len(lst):\n        if lst[i][0] == ')' and lst[i+1][0] == '(':\n            lst[i] = lst[i][1:]\n            lst[i+1] = lst[i+1][1:]\n            i += 2\n        else:\n            i += 1\n    if len(lst) == 0:\n        return 'Yes'\n    return 'No'\n",
        "num_ids": 146
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Function signature:\n    # def match_parens(lst):\n    # Please print a string that represents the answer.\n    # The string must be either 'Yes' or 'No'.\n    #\n    # lst: list of strings\n    # e.g. lst = ['()(', ')'], lst = ['))', '(']\n    #\n    # Output:\n    # string, either 'Yes' or 'No'\n    #\n    # EXAMPLE 1:\n    # Given the following list:\n    #\n    # lst = ['()(', ')'], lst = ['))', '(']\n    # The following function should return 'Yes'.\n    #\n    # EXAMPLE 2:\n    # Given the following list:\n    #\n    # lst = ['(', ')']\n    # The following function should return 'No'.\n    #\n    # lst = ['(', ')']\n    # Function match_parens(lst):\n    #\n    # string, either 'Yes' or 'No'\n    #\n    # BONUS:\n    # For every index i in the range 0...len(lst) - 1:\n    # If lst[i] and lst[i+1] are parentheses, then concatenate them,\n    # otherwise, do not concatenate them.\n    # This will help the output.\n    pass",
        "num_ids": 327
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    left_count, right_count = 0, 0\n    for char in lst[0]:\n        if char == '(':\n            left_count += 1\n        elif char == ')':\n            right_count += 1\n    if left_count == right_count:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 81
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # 1. find the index of every open paren\n    open_p = []\n    for i, paren in enumerate(lst[0]):\n        if paren == '(':\n            open_p.append(i)\n    # print(open_p)\n",
        "num_ids": 65
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #return sorted(arr)[-k:]\n",
        "num_ids": 12
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return list(heapq.nlargest(k, arr))\n",
        "num_ids": 17
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    max_heap = MaxHeap()\n    for num in arr:\n        max_heap.push(num)\n        if max_heap.size() > k:\n            max_heap.pop()\n",
        "num_ids": 52
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return heapq.nlargest(k, arr)\n",
        "num_ids": 14
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not arr or not k: return []\n    stack, heap = [], []\n    for val in arr:\n        heapq.heappush(heap, -val)\n    for i in range(k):\n        stack.append(-heapq.heappop(heap))\n    return stack\n",
        "num_ids": 74
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(arr, reverse=True)[:k]\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if k < 1 or k > len(arr):\n        return None\n    if k == 1:\n        return [max(arr)]\n    return [max(arr[i:i+k]) for i in range(len(arr)-k+1)]\n",
        "num_ids": 60
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    lst_final = []\n    if len(lst) == 0:\n        return 0\n    \n    for i in range(0, len(lst)):\n        if i%2 == 0 and lst[i]%2 == 0:\n            lst_final.append(lst[i])\n    print(lst_final)\n    return sum(lst_final)\n    \n    \n    \n    \nlst = [0,1,2,3,4,5,6,7,8,9]",
        "num_ids": 127
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    odds = []\n    for index, num in enumerate(lst):\n        if index % 2!= 0:\n            odds.append(num)\n    total = 0\n    for num in odds:\n        total += num\n    return total\n",
        "num_ids": 60
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return su",
        "num_ids": 40
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([num for idx, num in enumerate(lst) if idx % 2!= 0])\n",
        "num_ids": 28
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    even_lst = []\n    odd_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_lst.append(lst[i])\n        else:\n            odd_lst.append(lst[i])\n    return sum(odd_lst)\n",
        "num_ids": 81
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst_sum=0\n    for i in range(len(lst)):\n        if i%2==0 and lst[i]%2!=0:\n            lst_sum+=lst[i]\n    return lst_sum\n    ",
        "num_ids": 62
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not all([isinstance(item, int) for item in lst]):\n        raise TypeError(\"Every item in the list should be an integer.\")\n    result = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2!= 0:\n            result += lst[i]\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in lst:\n        if lst.index(i) % 2 == 0:\n            count += i\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    total = 0\n    for index,num in enumerate(lst):\n        if index % 2 == 0 and num % 2!= 0:\n            total += num\n    return total\n",
        "num_ids": 46
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your code here\n    sum = 0\n    for i in range(0,len(lst),2):\n        sum = sum + lst[i]\n    return sum",
        "num_ids": 42
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum([int(x[0]) if len(x) == 1 else int(x[:2]) for x in arr[:k]])\n",
        "num_ids": 36
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if k > len(arr):\n        raise Exception('k should not be greater than len(arr)')\n    # Insert your code here\n",
        "num_ids": 33
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert(arr)\n    assert(len(arr) >= k)\n    return sum(map(int, map(''.join, itertools.takewhile(lambda x: len(x[0]) <= 2, zip(map(str, arr[:k]), itertools.repeat('', k)))))",
        "num_ids": 71
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(arr[:k])\n",
        "num_ids": 11
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Get the first k elements of arr\n    first_k = arr[:k]\n    # Iterate over the first k elements of arr\n    for i in range(len(first_k)):\n        # Convert first_k[i] to string\n        first_k[i] = str(first_k[i])\n    # Convert the list to a string\n    first_k = \"\".join(first_k)\n",
        "num_ids": 100
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    hash_set = set()\n    for i in range(k):\n        if arr[i] not in hash_set:\n            hash_set.add(arr[i])\n    sum = 0\n    for i in hash_set:\n        sum += i\n    return sum\n",
        "num_ids": 66
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(k):\n        total += arr[i]\n",
        "num_ids": 23
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum(int(str(arr[i])[0] + str(arr[i])[1]) for i in range(k))",
        "num_ids": 33
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # brute force\n    # result = sum([x for x in arr[:k] if len(str(x)) <= 2])\n    # return result\n",
        "num_ids": 37
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # base case\n    if n == 1:\n        return [1]\n",
        "num_ids": 19
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    collatz_list = [n]\n    while n > 1:\n        if n % 2 == 0: # if n is even\n            n = int(n / 2)\n            collatz_list.append(n)\n        else: # if n is odd\n            n = 3*n + 1\n            collatz_list.append(n)\n    return sorted(collatz_list)\n",
        "num_ids": 92
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    odd_collatz = []\n    current_collatz = n\n    while current_collatz!= 1:\n        if current_collatz % 2 == 0:\n            current_collatz = current_collatz / 2\n        else:\n            current_collatz = 3 * current_collatz + 1\n        odd_collatz.append(current_collatz)\n    return sorted(odd_collatz)\n",
        "num_ids": 96
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # EDGE CASES:\n    if n <= 0:\n        return None\n    elif n == 1:\n        return [1]\n    else:\n        collatz_n = [n]\n        while n!= 1:\n            if n % 2 == 0:\n                n = n // 2\n                collatz_n.append(n)\n            elif n % 2!= 0:\n                n = 3*n + 1\n                collatz_n.append(n)\n        collatz_n = sorted(collatz_n)\n        return collatz_n\n",
        "num_ids": 135
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n",
        "num_ids": 25
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    seq = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        seq.append(n)\n",
        "num_ids": 53
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    collatz = []\n    \n    while n!= 1:\n        collatz.append(n)\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n    \n    collatz.append(1)\n",
        "num_ids": 66
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not isinstance(n, int):\n        raise TypeError(f'Expected input type: int. Got: {type(n)}')\n    if n <= 0:\n        raise ValueError(f'Expected positive input: n > 0. Got: {n}')\n    # Base case.\n    if n == 1:\n        return [1]\n    # Get the collatz sequence.\n    collatz_sequence = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    # Get the odd numbers from the sequence.\n    odd_numbers = [n for n in collatz_sequence if n % 2!= 0]\n    return sorted(odd_numbers)\n",
        "num_ids": 196
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    odd_list = []\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n            odd_list.append(n)\n        else:\n            n = 3*n+1\n            odd_list.append(n)\n",
        "num_ids": 64
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    months_31_days = [1,3,5,7,8,10,12]\n    months_30_days = [4,6,9,11]\n    is_date_correct = False\n    try:\n        date_split = date.split('-')\n        month = int(date_split[0])\n        day = int(date_split[1])\n        year = int(date_split[2])\n        if month > 12 or month < 1:\n            is_date_correct = False\n        elif month == 2 and day > 28 and day < 30:\n            is_date_correct = False\n        elif month in months_31_days and day > 31:\n            is_date_correct = False\n        elif month in months_30_days and day > 30:\n            is_date_correct = False\n        elif month == 1 and day > 31:\n            is_date_correct = False\n        elif month == 3 and day > 31:\n            is_date_correct = False\n        elif month == 5 and day > 31:\n            is_date_correct = False\n        elif month == 7 and day > 31:\n            is_date_correct = False\n        elif month == 8 and day > 31:\n            is_date_correct = False\n        elif month == 10 and day > 31:\n            is_date_correct = False\n        elif month == 12 and day > 31:\n            is_date_correct = False\n        elif month == 4 and day > 30:\n            is_date_correct = False\n        elif month == 6 and day > 30:\n            is_date_correct = False\n        elif month == 9 and day > 30:\n            is_date_correct = False\n        elif month == 11 and day > 30:\n            is_date_correct = False\n        elif year < 1900:\n            is_date_correct = False\n        elif year > 2040:\n            is_date_correct = False\n        else:\n            is_date_correct = True\n    except:\n        is_date_correct = False\n    return is_date_correct\n",
        "num_ids": 497
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    # your code here\n    if not date:\n        return False\n    elif len(date)!= 10:\n        return False\n    elif not date[2] == '-' and not date[5] == '-':\n        return False\n    elif int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n    elif int(date[3:5]) < 1 or int(date[3:5]) > 31:\n        return False\n    elif int(date[6:8]) < 1 or int(date[6:8]) > 12:\n        return False\n    elif int(date[9:]) < 1 or int(date[9:]) > 31:\n        return False\n    elif int(date[3:5]) == 2 and int(date[0:2]) == 2 and int(date[6:8]) == 28:\n        return False\n    else:\n        return True",
        "num_ids": 226
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n    return True\n",
        "num_ids": 11
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst = date.split('-')\n    if(len(lst[0])!= 2 or len(lst[1])!= 2 or len(lst[2])!= 4):\n        return False\n    else:\n        month = int(lst[0])\n        day = int(lst[1])\n        year = int(lst[2])\n        if month < 1 or month > 12:\n            return False\n        elif day < 1 or day > 31:\n            return False\n        elif day < 1 and month!= 2:\n            return False\n        elif day > 30 and month in [4,6,9,11]:\n            return False\n        elif day > 29 and month == 2:\n            return False\n        return True\n",
        "num_ids": 181
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    valid_format = '^(0[1-9]|1[0-2])-(0[1-9]|1[1-9]|2[0-9]|3[0-1])-(\\d{4}|\\d{2})\\b$'\n    if not date:\n        return False\n    if re.match(valid_format, date):\n        date_split = date.split('-')\n        month_int = int(date_split[0])\n        day_int = int(date_split[1])\n        year_int = int(date_split[2])\n        if month_int <= 12 and month_int > 0:\n            if day_int <= 31 and day_int > 0:\n                if month_int in [4, 6, 9, 11] and day_int <= 30:\n                    return True\n                elif month_int in [1, 3, 5, 7, 8, 10, 12] and day_int <= 31:\n                    return True\n                elif month_int == 2 and day_int <= 29:\n                    return True\n        return False\n",
        "num_ids": 259
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # YOUR CODE HERE\n    def get_month(string):\n        if string[:2] == '01' or string[:2] == '03' or string[:2] == '05' or string[:2] == '07' or string[:2] == '08' or string[:2] == '10' or string[:2] == '12':\n            return'months'\n        elif string[:2] == '04' or string[:2] == '06' or string[:2] == '09' or string[:2] == '11':\n            return'months'\n        else:\n            return 'days'\n",
        "num_ids": 155
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    try:\n        date = date.split('-')\n        return len(date[0]) == 2 and len(date[1]) == 2 and len(date[2]) == 4 and int(date[0]) in range(1, 13) and int(date[1]) in range(1, 32) and int(date[2]) in range(1, 9999)\n    except:\n        return False\n",
        "num_ids": 95
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    try:\n        dt = datetime.datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    date_list = [int(x) for x in date.split('-')]\n    if len(date_list) == 3:\n        try:\n            day = date_list[0]\n            month = date_list[1]\n            year = date_list[2]\n        except ValueError:\n            return False\n    else:\n        return False\n    return month < 1 or month > 12 or year < 1000 or day < 1 or day > 31 or (month in [4,6,9,11] and day > 30) or (month in [1,3,5,7,8,10,12] and day > 31) or (month == 2 and day > 29 and year % 4 == 0)\n",
        "num_ids": 166
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Extract date from given date\n    split_date = date.split('-')\n    # Split month and date\n    month = int(split_date[0])\n    day = int(split_date[1])\n    year = int(split_date[2])\n    # Validate days in each months\n    days_in_months = {1:31, 2:29, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    # Check the month and day\n    if month not in range(1,13):\n        return False\n    if day not in range(1,days_in_months[month]+1):\n        return False\n    # Check the year\n    if year not in range(1,3000):\n        return False\n    return True\n",
        "num_ids": 204
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return []\n",
        "num_ids": 7
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    \n    \n",
        "num_ids": 7
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    print('1')\n    return [i for i in txt.split(' ') if i!= '']\n    return split_words('Hello world')\nsplit_words('Hello world')\nsplit_words('Hello,world!')\nsplit_words('abcdef')\n",
        "num_ids": 64
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # counter = 0\n    # words = []\n    # for word in txt.split():\n    #     words.append(word)\n    #     if word[0] == word[-1] == word[1] == word[-2]:\n    #         counter += 1\n    # return words, counter\n    return txt.split() if txt.find(\" \") == -1 else txt.split(\" \")\n",
        "num_ids": 101
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l = list()\n    for i in txt:\n        if i!='':\n            l.append(i)\n    return l\n",
        "num_ids": 35
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    split = txt.split(' ')\n    lst = []\n    for word in split:\n        lst.append(word)\n    return lst\n",
        "num_ids": 39
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #...\n    return re.split(r\"\\s|,\",txt)\n    \ndef find_word_concatenation(txt):\n    '''\n    Given a string txt, return the word in txt that is repeated the most number of times. If there is no such word return the\n    empty string.\n    Examples\n    find_word_concatenation(\"catcatcatcat\") == \"cat\"\n    find_word_concatenation(\"catcatcatcat\") == \"catcat\"\n    find_word_concatenation(\"i i i i i catcatcat\") == \"i\"\n    '''\n    #...\n    return max(re.findall(r\"(\\w+)\\1+\", txt), key=len) if len(re.findall(r\"(\\w+)\\1+\", txt))!= 0 else ''\n    \ndef double_letters(txt):\n    '''\n    Given a string of words, return the longest word that has two of the same letter in it.\n    Examples\n    double_letters(\"Fortune favours the bold.\") == \"bold\"\n    double_letters(\"You can lead a horse to water, but you can't make him drink.\") == \"horse\"\n    '''\n    #...\n    return max(re.findall(r'\\b(\\w)\\1+\\b', txt), key=len) if re.findall(r'\\b(\\w)\\1+\\b', txt) else ''\n",
        "num_ids": 345
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    split_word = txt.split()\n    return split_word\n",
        "num_ids": 18
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst = lst.copy()\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            lst.pop(i)\n            return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # --- YOU CODE STARTS HERE\n    x = 0\n    while x < len(lst):\n        y = 0\n        while y < len(lst):\n            if lst[x] > lst[y]:\n                return False\n            y += 1\n        x += 1\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(set(lst)) == len(lst):\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # up until now, all we did was test that the list is sorted.\n    # So, if the list is sorted, we can use the algorithm\n    # from Sorting to determine whether or not the list is sorted.\n",
        "num_ids": 51
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst) == 1 or len(lst) == 0:\n        return True\n    \n    temp_list = lst.copy()\n    temp_list.sort()\n    if temp_list == lst:\n        return True\n    return False\n",
        "num_ids": 63
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Sort a copy of the list using.sort()\n    # Compare original and copy\n    lst_copy = lst.copy()\n    lst_copy.sort()\n    if lst == lst_copy:\n        return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return False\n        else:\n            return True\n    elif len(lst) > 2:\n        if len(set(lst)) == len(lst):\n            return True\n        else:\n            return False\n    return False\n",
        "num_ids": 100
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return all(lst[i] >= lst[i+1] for i in range(len(lst)-1))\n",
        "num_ids": 31
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(set(lst)) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 43
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if (start2 < start1 and end2 > end1) or (start1 < start2 and end1 > end2):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 69
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    start1, end1 = interval1[0], interval1[1]\n    start2, end2 = interval2[0], interval2[1]\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n",
        "num_ids": 60
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # rewrite your code here\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n        \n    a1 = interval1[0]\n    b1 = interval1[1]\n    a2 = interval2[0]\n    b2 = interval2[1]\n    \n    if a2 < a1 or b2 < a1 or a2 > b1 or b2 > b1:\n        return \"NO\"\n    else:\n        n = b1 - a1\n        if is_prime(n):\n            return \"YES\"\n        else:\n            return \"NO\"\n        \n    \n    \ndef main():\n    # print(is_prime(11))\n    print(intersection((1, 2), (2, 3)))\n    print(intersection((-1, 1), (0, 4)))\n    print(intersection((-3, -1), (-5, 5)))\n    # print(is_prime(1))\n    # print(is_prime(3))\n    # print(is_prime(2))\n    # print(is_prime(4))\n    # print(is_prime(5))\n    # print(is_prime(6))\n    # print(is_prime(7))\n    # print(is_prime(8))\n    # print(is_prime(9))\n    # print(is_prime(10))\n    # print(is_prime(12))\n    # print(is_prime(13))\n    # print(is_prime(14))\n    # print(is_prime(15))\n    # print(is_prime(16))\n    # print(is_prime(17))\n    # print(is_prime(18))\n    # print(is_prime(19))\n    # print(is_prime(20))\n    # print(is_prime(21))\n    # print(is_prime(22))\n    # print(is_prime(23))\n    # print(is_prime(24))\n    # print(is_prime(25))\n    # print(is_prime(26))\n    # print(is_prime(27))\n    # print(is_prime(28))\n    # print(is_prime(29))\n    # print(is_prime(30))\n    # print(is_prime(31))\n    # print(is_prime(32))\n    # print(is_prime(33))\n    # print(is_prime(34))\n    # print(is_prime(35))\n    # print(is_prime(36))\n    # print(is_prime(37))\n    # print(is_prime(38))\n    # print(is_prime(39))\n    # print(is_prime(40))\n    # print(is_prime(41))\n    # print(is_prime(42))\n    # print(is_prime(43))\n    # print(is_prime(44))\n    # print(is_prime(45))\n    # print(is_prime(46))\n    # print(is_prime(47))\n    # print(is_prime(48))\n    # print(is_prime(49))\n    # print(is_prime(50))\n    # print(is_prime(51))\n    # print(is_prime(52))\n    # print(is_prime(53))\n    # print(is_prime(54))\n    # print(is_prime(55))\n    # print(is_prime(56))\n    # print(is_prime(57))\n    # print(is_prime(58))\n    # print(is_prime(59))\n    # print(is_prime(60))\n    # print(is_prime(61))\n    # print(is_prime(62))\n    # print(is_prime(63))\n    # print(is_prime(64))\n    # print(is_prime(65))\n    # print(is_prime(66))\n    # print(is_prime(67))\n    # print(is_prime(68))\n    # print(is_prime(69))\n    # print(is_prime(70))\n    # print(is_prime(71)",
        "num_ids": 1025
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # if (not interval1 and not interval2) or (interval1 == interval2):\n    #     return \"YES\"\n    # elif not (interval1 and interval2):\n    #     return \"NO\"\n",
        "num_ids": 53
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Please, do not change. \n    # If you want to change anything, \n    # start from scratch.\n    intersection = set(range(min(interval1[0], interval2[0]), max(interval1[1], interval2[1])) )\n    if len(intersection) == 1:\n        return \"YES\"\n    return \"NO\"",
        "num_ids": 88
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a = max(interval1[0], interval2[0])\n    b = min(interval1[1], interval2[1])\n    if (a <= b) and (b % a == 0):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 67
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 49
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l1, l2 = interval1[0], interval2[0]\n    r1, r2 = interval1[1], interval2[1]\n",
        "num_ids": 37
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    a = max(interval1[0], interval2[0])\n    b = min(interval1[1], interval2[1])\n    if a <= b:\n        return 'YES'\n    return 'NO'\n",
        "num_ids": 54
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not arr:\n        return None\n    signs = [int(i > 0) for i in arr]\n    return sum([abs(i) for i in arr]) * prod(signs)\n",
        "num_ids": 48
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr:\n        return None\n    return sum(abs(i) for i in arr) * reduce(lambda a, b: a * b,\n                                              list(map(sign, arr)))\n",
        "num_ids": 48
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Replace None with the correct return value\n    return None\n",
        "num_ids": 15
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return None if not arr else sum(abs(x) for x in arr) * sum(int(x) for x in arr)\n",
        "num_ids": 32
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not arr:\n        return None\n    return sum(abs(num) for num in arr) * prod(sign(num) for num in arr)\n",
        "num_ids": 37
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    signs = [1 if n < 0 else 0 if n == 0 else -1 for n in arr]\n    return sum(n*m for n,m in zip(arr, signs))\n",
        "num_ids": 45
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not arr:\n        return None\n    return sum(abs(x) for x in arr) * prod([sign(x) for x in arr])",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if arr == []:\n        return None\n    \n    total = 0\n    product = 1\n    for i in arr:\n        total += i**2\n        product *= 1 if i == 0 else i\n    return product*total if product!= 0 else None\n",
        "num_ids": 63
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    N = len(grid)\n    dp = [[float('inf') for _ in range(N)] for _ in range(N)]\n    dp[0][0] = grid[0][0]\n    if N == 1 or k == 1:\n        return [dp[0][0]]\n",
        "num_ids": 68
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # build graph\n    n = len(grid)\n    graph = {}\n    for r in range(n):\n        for c in range(n):\n            graph[(r, c)] = [(r2, c2) for r2 in range(n) for c2 in range(n) if abs(grid[r2][c2] - grid[r][c]) <= k]\n    \n    # solve graph\n    visited = set()\n    q = collections.deque([(0, 0)])\n    min_path = []\n    while len(q) > 0:\n        node = q.popleft()\n        if node == (n - 1, n - 1):\n            min_path.append(grid[node[0]][node[1]])\n        if node not in visited:\n            visited.add(node)\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    q.append(neighbor)\n    return min_path\n",
        "num_ids": 231
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return None",
        "num_ids": 4
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Check for negative value or 0\n    if not grid or not grid[0]:\n        return []\n",
        "num_ids": 25
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Base case.\n    if grid is None or len(grid) == 0: return []\n    if len(grid) == 1 and len(grid[0]) == 1: return grid[0]\n",
        "num_ids": 47
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    visited = set()\n    queue = collections.deque()\n    queue.append(Node(0, 0, k, grid[0][0]))\n",
        "num_ids": 55
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # The number of rows.\n    n = len(grid)\n    # The number of columns.\n    m = len(grid[0])\n",
        "num_ids": 35
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    N = len(grid)\n    if N < 2:\n        return [1]\n    if k == 0:\n        return []\n    dist = []\n    for i in range(N):\n        dist.append([float('inf')] * N)\n    for i in range(N):\n        dist[i][i] = 0\n    for i in range(1, N):\n        for row in range(N):\n            for col in range(N):\n                if grid[row][col] > 0:\n                    if row > 0 and dist[row - 1][col] + 1 < dist[row][col]:\n                        dist[row][col] = dist[row - 1][col] + 1\n                    if col > 0 and dist[row][col - 1] + 1 < dist[row][col]:\n                        dist[row][col] = dist[row][col - 1] + 1\n                    if row < N - 1 and dist[row + 1][col] + 1 < dist[row][col]:\n                        dist[row][col] = dist[row + 1][col] + 1\n                    if col < N - 1 and dist[row][col + 1] + 1 < dist[row][col]:\n                        dist[row][col] = dist[row][col + 1] + 1\n    path = []\n    i, j = 0, 0\n    while len(path) < k:\n        if grid[i][j] == 1:\n            break\n        if dist[i][j] == float('inf'):\n            break\n        path.append(grid[i][j])\n        if j + 1 < N and dist[i][j + 1] == dist[i][j] - 1:\n            j += 1\n        elif i + 1 < N and dist[i + 1][j] == dist[i][j] - 1:\n            i += 1\n        else:\n            j -= 1\n            i -= 1\n    return path",
        "num_ids": 448
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if k == 1:\n        return [min(grid[0]), min(grid[1]), min(grid[2])]\n    \n    # the first column has values ordered by row\n    lst_k1 = []\n    for row in grid:\n        lst_k1 += row\n    lst_k1 = sorted(lst_k1)\n",
        "num_ids": 85
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # this is the brute force method where we try every possible path\n    # of length k\n    # runtime complexity is O(N^k)\n    def get_all_paths(grid, k):\n        # create a set of tuples for each cell in the grid\n        all_paths = set()\n        for r in range(len(grid)):\n            for c in range(len(grid[r])):\n                # all possible paths from a cell\n                for i in range(len(grid[r]) - k + 1):\n                    all_paths.add(tuple(grid[r][c + i : c + i + k]))\n        return all_paths\n",
        "num_ids": 161
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [3]\n    elif n == 3:\n        return [1,3,2]\n    else:\n        tribonacci_sequence = [1,3,2]\n        while len(tribonacci_sequence) <= n:\n            if len(tribonacci_sequence) % 2 == 0:\n                tribonacci_sequence.append(tribonacci_sequence[len(tribonacci_sequence) - 1] + tribonacci_sequence[len(tribonacci_sequence) - 2])\n            else:\n                tribonacci_sequence.append(tribonacci_sequence[len(tribonacci_sequence) - 1] + tribonacci_sequence[len(tribonacci_sequence) - 2] + tribonacci_sequence[len(tribonacci_sequence) - 3])\n        return tribonacci_sequence\n",
        "num_ids": 227
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    numbers = [1, 3]\n    if n < 1:\n        return []\n    while len(numbers) < n + 1:\n        numbers.append(1 + numbers[-2] + numbers[-1])\n    return numbers\n    \nif __name__ == \"__main__\":\n    print(\"Problem:\")\n    n = int(input())\n    \n    print(\"Solution:\")\n    print(tri(n)",
        "num_ids": 103
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    trib = [0, 1, 3]\n    if n == 2:\n        return trib\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib.append(trib[-2] + trib[-1])\n        else:\n            trib.append(trib[-2] + trib[-1] + trib[-3])\n    return trib\n",
        "num_ids": 127
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def trib(n, seq=[]):\n        if len(seq) < n + 1:\n            seq = [0, 1, 1] if len(seq) == 2 else seq\n            for i in range(len(seq), n + 1):\n                if i % 2 == 0:\n                    seq.append(1 + seq[-1] + seq[-2])\n                else:\n                    seq.append(seq[-1] + seq[-2] + seq[-3])\n            return seq\n        return seq[:n + 1]\n    return trib(n)\n",
        "num_ids": 135
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1, 3]\n    tribonacci = [0, 1, 3]\n    while n!= len(tribonacci):\n        if tribonacci[-2] % 2 == 0:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3] + tribonacci[-4])\n    return tribonacci\n",
        "num_ids": 158
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    def fib_recur(n):\n        \"\"\"\n        The function return list of the first n + 1 numbers of the Tribonacci sequence.\n        \"\"\"\n        if n < 1:\n            return []\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 1]\n        \n        fib1, fib2 = 1, 1\n        result = [1, 1]\n        for i in range(3, n + 1):\n            fib1, fib2 = fib2, fib1 + fib2\n            result.append(fib2)\n        return result\n    \n    \n    return fib_recur(n)\n    \n    \nif __name__ == '__main__':\n    print(tri(3)",
        "num_ids": 181
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a = [1,3]\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        for i in range(n - 2):\n            a.append(a[i] + a[i + 1] + a[i + 2])\n        return a\n",
        "num_ids": 82
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 1:\n        return None\n    res = [0, 1, 1]\n    i = 3\n    while i <= n:\n        res.append(res[i - 3] + res[i - 2] + res[i - 1])\n        i += 1\n    return res[:n + 1]\n",
        "num_ids": 76
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n    tribonacci_seq = [1, 3]\n    for _ in range(1, n):\n        if _ % 2 == 0:\n            tribonacci_seq.append(tribonacci_seq[-1] + tribonacci_seq[-2])\n        else:\n            tribonacci_seq.append(tribonacci_seq[-1] + tribonacci_seq[-2] + tribonacci_seq[-3])\n    return tribonacci_seq\n",
        "num_ids": 151
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [3, 1 + n // 2, (n % 2) and (1 + 2 * n) or 2 * n]\n",
        "num_ids": 31
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n < 10:\n        return n\n    else:\n        if (n % 10) % 2 == 0:\n            return 0\n        else:\n            return digits(int(str(n)[1:]))\n",
        "num_ids": 51
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return digits_helper(n)\n",
        "num_ids": 11
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    digits = 1\n    for i in str(n):\n        if int(i) % 2 == 0:\n            digits = 0\n            break\n        digits *= int(i)\n    return digits\n",
        "num_ids": 51
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    product = 1\n    while n > 0:\n        if n % 2 == 1:\n            product *= n % 10\n        n //= 10\n    return product\n",
        "num_ids": 40
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 10:\n        return n\n    return digits(n // 10) * (n % 10)\n",
        "num_ids": 27
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    total = 1\n    for d in str(n):\n        if int(d) % 2!= 0:\n            total *= int(d)\n    return total\n",
        "num_ids": 41
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = str(n)\n    result = 1\n    for i in n:\n        i = int(i)\n        if i % 2!= 0:\n            result *= i\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 10:\n        if n % 2 == 0:\n            return 0\n        else:\n            return n\n    else:\n        n_list = list(str(n))\n        result = 1\n        for i in range(len(n_list)):\n            if int(n_list[i]) % 2 == 0:\n                return 0\n            else:\n                result *= int(n_list[i])\n        return result\n",
        "num_ids": 105
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # create an empty stack and push to the stack each bracket. \n    # as soon as we have an open bracket, we will check if the last element of the stack is a closed bracket\n    # if so, we will pop the element and continue, if not, return False\n    # once we have a valid sequence of brackets, we should check if there is at least one nested subsequence\n    # if so, return True, else return False\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            else:\n                last_element = stack.pop()\n                if last_element!= '[':\n                    return False\n    if not stack:\n        return True\n    else:\n        return False\n",
        "num_ids": 191
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # use a stack\n    brackets = []\n    for bracket in string:\n        if bracket == '[':\n            brackets.append(bracket)\n        else:\n            if not brackets:\n                return False\n            brackets.pop()\n    return not brackets",
        "num_ids": 62
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # create a list of brackets\n    # check each element of the list of brackets if nested\n    # if nested then return True\n    # return False if not\n    pass\n",
        "num_ids": 40
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    nested = False\n    bracket_stack = []\n",
        "num_ids": 15
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    count_brackets = 0\n    bracket_list = []\n    \n    for character in string:\n        if character == '[':\n            count_brackets += 1\n            bracket_list.append(character)\n        elif character == ']':\n            count_brackets -= 1\n            if count_brackets == -1:\n                return False\n    return count_brackets == 0\n",
        "num_ids": 95
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # soln 1\n    # stack = []\n    # lst = []\n    # for char in string:\n    #     if char == '[':\n    #         stack.append('[')\n    #     elif char == ']':\n    #         stack.pop()\n    #         if len(stack) > 0:\n    #             lst.append('[')\n    #         else:\n    #             lst.append(']')\n    #     if len(stack) == 0:\n    #         return True\n    # return False\n",
        "num_ids": 129
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return string.count('[[') > 0\n",
        "num_ids": 12
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # return sum(string.count('[]') - string.count('[][')) > 0\n    return '[]' in string\n",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    bracket_stack = []\n    for char in string:\n        if char == '[':\n            bracket_stack.append('[')\n        elif char == ']':\n            if bracket_stack[-1] == '[':\n                bracket_stack.pop()\n            else:\n                bracket_stack.append(']')\n",
        "num_ids": 80
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "",
        "num_ids": 1
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    res=0\n    for i in lst:\n        res+=(int(i**0.5))**2\n    return res\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum(map(lambda x: x**2, list(map(int, [round(num, 0) for num in lst]))))\n",
        "num_ids": 35
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return round(sum([i*i for i in lst]))\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(len(lst)):\n        lst[i] = math.ceil(lst[i]**2)\n    return sum(lst)\n",
        "num_ids": 43
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    res=0\n    for i in lst:\n        res+=int(i**2)\n    return res\n",
        "num_ids": 28
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum([int(elem)**2 for elem in lst])\n",
        "num_ids": 20
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    \n    s = 0\n    for item in lst:\n        s += item**2\n    return int(s**0.5)\n",
        "num_ids": 36
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return round(sum(x ** 2 for x in lst))\n",
        "num_ids": 17
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    answer = 0\n    for num in lst:\n        answer += int(num**2)\n    return answer\n    ",
        "num_ids": 29
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([math.ceil(el ** 2) for el in lst])\n",
        "num_ids": 21
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Split the string to list\n    # Check the last element is alphabetical\n    # If not, return False\n    # Else, return True\n    pass\n",
        "num_ids": 37
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if txt == \"\":\n        return False\n    txt_without_last_char = txt[:-1]\n    if len(txt_without_last_char) == 0:\n        return False\n    else:\n        return txt_without_last_char.split(\" \")[-1].isalpha()\n",
        "num_ids": 75
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return txt[-1].isalpha()\n",
        "num_ids": 13
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not txt:\n        return False\n    # return txt[-1].isalpha() and not txt.endswith(\" \")\n    return txt[-1].isalpha() if txt[-1] not in string.punctuation else False\n",
        "num_ids": 64
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n",
        "num_ids": 3
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(txt) > 1:\n        return all([\n            txt[-1].isalpha(),\n            txt[-1].isalnum()\n        ])\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return txt[-1].isalpha()\n",
        "num_ids": 13
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Note: We need to strip the last character from the string,\n    # as it is irrelevant to the problem\n    return txt[-1].isalpha()\n",
        "num_ids": 39
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(arr)-1):\n        if arr[i+1] > arr[i]:\n            return i\n    return -1\n",
        "num_ids": 37
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return -1\n",
        "num_ids": 16
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return -1 if max(arr) < arr[-1] else arr.index(max(arr[:-1]))\n",
        "num_ids": 30
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            return i\n    return -1\n",
        "num_ids": 43
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    largest = -1\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            largest = i-1\n    return largest\n",
        "num_ids": 44
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(arr) < 2: return -1\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(arr) < 2:\n        return -1\n",
        "num_ids": 16
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n",
        "num_ids": 38
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    best = -1\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]:\n            best = i\n    return best\n",
        "num_ids": 42
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if lst == []:\n        return (None, None)\n    max_neg = -1\n    min_pos = None\n    for num in lst:\n        if num > 0:\n            if min_pos == None:\n                min_pos = num\n            else:\n                min_pos = min(num, min_pos)\n        elif num < 0:\n            if num > max_neg:\n                max_neg = num\n    return (max_neg, min_pos)",
        "num_ids": 116
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = (None, None)\n    for value in lst:\n        if value < 0:\n            result = (None, value if result[0] == None else min(value, result[1]))\n        elif value > 0:\n            result = (value if result[0] == None else max(value, result[0]), None)\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if lst == []:\n        return (None, None)\n    else:\n        negatives = [num for num in lst if num < 0]\n        positive = [num for num in lst if num > 0]\n        return (max(negatives) if negatives else None, min(positive) if positive else None)\n",
        "num_ids": 77
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = (None, None)\n    for i in lst:\n        if i > 0:\n            result = (None, i)\n        elif i < 0:\n            result = (i, None)\n        else:\n            pass\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    negatives = []\n    positives = []\n    for num in lst:\n        if num < 0:\n            negatives.append(num)\n        else:\n            positives.append(num)\n    if len(negatives) > 0:\n        a = max(negatives)\n    else:\n        a = None\n    if len(positives) > 0:\n        b = min(positives)\n    else:\n        b = None\n    return (a, b)\n",
        "num_ids": 116
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if lst:\n        negatives = [x for x in lst if x < 0]\n        positive = [x for x in lst if x > 0]\n        if negatives:\n            a = max(negatives)\n            b = min(positive)\n        else:\n            a = None\n            b = None\n        return a, b\n    else:\n        return None, Non",
        "num_ids": 91
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Creates a list of positives and negatives to help find\n    # the minimum and maximum values in a list.\n    positives = []\n    negatives = []\n",
        "num_ids": 39
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if lst == [] or len(lst) == 1:\n        return None, None\n    negatives = []\n    positives = []\n    for num in lst:\n        if num < 0:\n            negatives.append(num)\n        elif num > 0:\n            positives.append(num)\n    if len(negatives) == 0:\n        return None, min(positives)\n    elif len(positives) == 0:\n        return max(negatives), None\n    else:\n        return max(negatives), min(positives)\n",
        "num_ids": 135
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if lst == []:\n        return (None, None)\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n    if negative_integers!= []:\n        largest_negative = max(negative_integers)\n        smallest_positive = min(positive_integers)\n        return (largest_negative, smallest_positive)\n    elif positive_integers!= []:\n        return (None, None)\n    else:\n        return (None, None)",
        "num_ids": 136
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst_pos = [x for x in lst if x > 0]\n    lst_neg = [x for x in lst if x < 0]\n    if len(lst_pos) == 0 and len(lst_neg) == 0:\n        return (None, None)\n    if len(lst_pos) == 0:\n        return (None, min(lst_neg))\n    if len(lst_neg) == 0:\n        return (max(lst_pos), None)\n    return (max(lst_pos), min(lst_neg))\n",
        "num_ids": 140
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    try:\n        if float(a) > float(b):\n            return a\n        elif float(b) > float(a):\n            return b\n        else:\n            return None\n    except:\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    ",
        "num_ids": 82
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if type(a) is float:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) is int:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) is str:\n        if a[-1] in [',', '.']:\n            if a[0] in ['.']:\n                if float(a) > float(b):\n                    return a\n                else:\n                    return b\n            else:\n                if int(a) > int(b):\n                    return a\n                else:\n                    return b\n        else:\n            if float(a) > float(b):\n                return a\n            else:\n                return b\n    else:\n        return None\n",
        "num_ids": 185
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if type(a) == str and type(b) == str:\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n    elif type(a) == str and type(b)!= str:\n        a = float(a.replace(',', '.'))\n    elif type(a)!= str and type(b) == str:\n        b = float(b.replace(',', '.'))\n    elif type(a)!= str and type(b)!= str:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        elif a == b:\n            return None\n",
        "num_ids": 167
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if type(a) is str and type(b) is str:\n        if float(a) > float(b):\n            return float(a)\n        elif float(b) > float(a):\n            return float(b)\n        else:\n            return None\n    elif type(a) is str and type(b) is float:\n        if float(b) > float(a):\n            return float(b)\n        elif float(a) > float(b):\n            return float(a)\n        else:\n            return None\n    elif type(a) is str and type(b) is int:\n        if int(b) > int(a):\n            return int(b)\n        elif int(a) > int(b):\n            return int(a)\n        else:\n            return None\n    elif type(b) is str and type(a) is int:\n        if int(a) > int(b):\n            return int(a)\n        elif int(b) > int(a):\n            return int(b)\n        else:\n            return None\n    elif type(a) is float and type(b) is str:\n        if float(b) > float(a):\n            return float(b)\n        elif float(a) > float(b):\n            return float(a)\n        else:\n            return None\n    elif type(b) is float and type(a) is str:\n        if float(a) > float(b):\n            return float(a)\n        elif float(b) > float(a):\n            return float(b)\n        else:\n            return None\n    elif type(a) is int and type(b) is str:\n        if int(b) > int(a):\n            return int(b)\n        elif int(a) > int(b):\n            return int(a)\n        else:\n            return None\n    elif type(b) is int and type(a) is str:\n        if int(a) > int(b):\n            return int(a)\n        elif int(b) > int(a):\n            return int(b)\n        else:\n            return None\n    else:\n        if a > b:\n            return a\n        else:\n            return b\n",
        "num_ids": 543
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return max(a, b) if a > b else b if a == b else None\n",
        "num_ids": 22
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if type(a) is int:\n        if type(b) is int:\n            if a > b:\n                return a\n            else:\n                return b\n        if type(b) is float:\n            return a if float(a) > float(b) else b\n    if type(a) is float:\n        if type(b) is int:\n            return a if float(a) > float(b) else b\n        if type(b) is float:\n            return a if float(a) > float(b) else b\n    if type(a) is str:\n        a = a.replace(\",\", \".\")\n        if type(b) is str:\n            b = b.replace(\",\", \".\")\n            if float(a) > float(b):\n                return a\n            else:\n                return b\n        if type(b) is int:\n            return a if float(a) > float(b) else b\n        if type(b) is float:\n            return a if float(a) > float(b) else b\n",
        "num_ids": 248
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    try:\n        if (float(a) >= float(b)):\n            return a\n        elif (float(b) > float(a)):\n            return b\n        else:\n            return None\n    except:\n        if (a >= b):\n            return a\n        elif (b > a):\n            return b\n        else:\n            return None",
        "num_ids": 88
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if type(a) == type(b):\n        if a == b:\n            return None\n        else:\n            return b if type(a) == float or type(b) == float else a\n    else:\n        return a if type(a) == float or type(b) == float else b\n",
        "num_ids": 72
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #TODO\n    return False\n",
        "num_ids": 11
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = abs(n)\n    if n % 2!= 0:\n        return False\n    if n < 4:\n        return False\n    for i in range(n//2-1):\n        if i*2+2 not in n_sum_list:\n            return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum_of_even_numbers(n) == n\n",
        "num_ids": 17
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return n % 6 == 0 and not n % 2\n",
        "num_ids": 14
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        n = n / 2\n    for i in range(1,n-1):\n        if (n-i) % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return n in [4, 6, 8, 10, 12, 14, 16, 18]\n",
        "num_ids": 23
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    list_of_even_numbers = []\n    for i in range(2, n+1):\n        if is_even(i):\n            list_of_even_numbers.append(i)\n    sum_of_even_numbers = sum(list_of_even_numbers)\n    if sum_of_even_numbers == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 98
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return n == sum([i for i in range(1, n//2+1) if i%2==0])\n",
        "num_ids": 29
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n % 2 == 1:\n        return False\n    nums = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            nums.append(i)\n    if len(nums)!= 4:\n        return False\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i == j:\n                continue\n            else:\n                if nums[i] + nums[j] == n:\n                    return True\n    return False\n",
        "num_ids": 129
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n_str = str(n)\n    if int(n_str[0]) % 2 == 0:\n        return False\n    if int(n_str[1]) % 2 == 0:\n        return False\n    if int(n_str[2]) % 2 == 0:\n        return False\n    if int(n_str[3]) % 2 == 0:\n        return False\n    return True\n",
        "num_ids": 95
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    res = n\n    for i in range(1, n):\n        res = res * (i - 1)\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n > 0, 'The number should be greater than zero'\n    factorial = 1\n    for number in range(n, 0, -1):\n        factorial *= number\n    return factorial\n",
        "num_ids": 49
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    factorial = 1\n    while n > 1:\n        factorial *= n\n        n -= 1\n    return factorial\n",
        "num_ids": 31
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n",
        "num_ids": 32
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    fact = 1\n    for num in range(1,n+1):\n        fact *= num\n    return fact\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # start with a \"1\" as the result of the recursion\n    result = 1\n",
        "num_ids": 22
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    factorial = 1\n    while n > 1:\n        factorial *= n\n        n -= 1\n",
        "num_ids": 26
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return text.replace(' ', '_')\n    \ndef create_email(firstname, lastname):\n    \"\"\"\n    Given a first name and last name, \n    create an email address using the first name, \n    the last name, and the first letter of the last name.\n    \n    create_email(\"John\", \"Smith\") == \"John.Smith@gmail.com\"\n    create_email(\"Jane\", \"Doe\") == \"Jane.Doe@gmail.com\"\n    \"\"\"\n    return f'{firstname}.{lastname[0]}@gmail.com'\n    \ndef censor_words(text, bad_words):\n    \"\"\"\n    Given a string text and a list of bad words, replace all bad words in text with stars (*),\n    and return the new text. \n",
        "num_ids": 185
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return re.sub(r'\\s{2,}', '_', text)\n",
        "num_ids": 22
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if''in text:\n        text = re.sub('\\s{2,}', '-', text)\n    return text.replace(' ', '_')\n",
        "num_ids": 39
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if text == \"\":\n        return text\n    elif text[0] == \" \":\n        return \"_\" + fix_spaces(text[1:])\n    elif text[-1] == \" \":\n        return fix_spaces(text[:-1]) + \"_\"\n    else:\n        return fix_spaces(text[:-1]) + text[-1]\n",
        "num_ids": 92
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Replace all spaces with -\n    text = text.replace(' ', '_')\n",
        "num_ids": 21
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    replaced = []\n    for i,c in enumerate(text):\n        if c==\" \":\n            if i==0 or text[i-1]!=\" \" or i==len(text)-1:\n                replaced.append(\"_\")\n        else:\n            replaced.append(c)\n    new_string = \"\".join(replaced)\n    if len(new_string)>1:\n        return new_string.replace(\"  \",\"-\")\n    else:\n        return new_string",
        "num_ids": 121
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert(type(text) == str)\n    result = text\n    while \"  \" in result:\n        result = result.replace(\"  \", \"-\")\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = ''\n    consecutive_spaces = 0\n    for i in text:\n        if i =='':\n            consecutive_spaces += 1\n        else:\n            if consecutive_spaces > 2:\n                result += '_'\n            elif consecutive_spaces > 0:\n                result += '-'\n            result += i\n            consecutive_spaces = 0\n    return result",
        "num_ids": 96
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: Implement\n    return text.replace(' ', '_')\n",
        "num_ids": 19
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst = text.split()\n    if len(lst) == 1:\n        return text.replace(' ', '_')\n    else:\n        for i in range(len(lst)):\n            if lst[i] =='':\n                if i == 0:\n                    lst[i] = '-'\n                elif i == len(lst) - 1:\n                    lst[i] = '-'\n                else:\n                    lst[i] = '_'\n        return '-'.join(lst",
        "num_ids": 125
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not file_name:\n        return False\n    if not re.search('[0-9]{3}', file_name):\n        return True\n    if not re.search('.+\\.', file_name):\n        return False\n    if re.search('.+\\.', file_name).group(0)!= file_name:\n        return False\n    if not re.search('^[a-zA-Z]+\\.', file_name):\n        return False\n    if not re.search('.+\\.[A-Za-z]+$', file_name):\n        return False\n    if re.search('.+\\.[A-Za-z]+$', file_name).group(0)!= file_name:\n        return False\n    return True\n    \n",
        "num_ids": 188
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if file_name.count('.') > 2 or file_name.count('.') < 1:\n        return 'No'\n    for c in file_name:\n        if c.isdigit():\n            return 'No'\n    if file_name.split('.')[0] == '' or file_name.split('.')[0][0].isalpha() == False:\n        return 'No'\n    file_name_split = file_name.split('.')\n    if file_name_split[1].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 149
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"Yes\" if re.match(r\"(?=\\D)(?<=^\\D)[a-zA-Z0-9][a-zA-Z0-9.]\\w{0,3}(?=\\D)\", file_name) else \"No\"\n",
        "num_ids": 67
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # create a function named file_name_check that takes a string file_name and returns\n    # 'Yes' if the file name is valid, and returns 'No' otherwise\n    #\n    # YOUR CODE HERE\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    ",
        "num_ids": 1023
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # I tried my best to make the code readable and easy to understand\n    def is_valid(file_name):\n        try:\n            file_name = file_name.lower()\n            if len(file_name.split(\".\")) == 1:\n                raise ValueError(\"File has no extension\")\n            for i in file_name:\n                if i.isdigit():\n                    raise ValueError(\"File has more than 3 digits\")\n            if file_name.count(\".\")!= 1:\n                raise ValueError(\"File has no dot\")\n            # file_name.index(\".\")\n            file_name = file_name.split(\".\")\n            if file_name[0] == \"\":\n                raise ValueError(\"File name is empty\")\n            if not file_name[0][0].isalpha():\n                raise ValueError(\"File name starts with a number\")\n            if file_name[1] not in [\"txt\", \"exe\", \"dll\"]:\n                raise ValueError(\"File does not end with txt, exe or dll\")\n            file_name = file_name[0].split(\".\")\n            if len(file_name[0]) < 2:\n                raise ValueError(\"File name is too short\")\n        except ValueError as e:\n            print(e)\n            return \"No\"\n        return \"Yes\"\n",
        "num_ids": 309
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(file_name) > 3 and file_name.count(\".\") == 1:\n        if file_name[0].isalpha() and file_name.split(\".\")[0].isalpha():\n            if file_name.split(\".\")[1] == \"txt\" or file_name.split(\".\")[1] == \"exe\" or file_name.split(\".\")[1] == \"dll\":\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n",
        "num_ids": 132
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return 'Yes' if file_name.count('.') == 1 and file_name.split('.')[0].isalpha() and file_name.split('.')[1] in [ 'txt', 'exe', 'dll' ] else 'No'\n",
        "num_ids": 59
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # if file_name.isalpha():\n    #     if len(file_name)>3:\n    #         return 'No'\n    #     else:\n    #         return 'Yes'\n",
        "num_ids": 48
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            res += lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            res += lst[i] ** 3\n        else:\n            res += lst[i]\n    return res\n    \n    \nlst = [1,2,3,4,5]\nprint(sum_squares(lst)",
        "num_ids": 113
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        result = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                result += lst[i]**2\n            elif i % 4 == 0 and i % 3!= 0:\n                result += lst[i]**3\n    return result\n",
        "num_ids": 90
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = 0\n    for index, num in enumerate(lst):\n        if index % 3 == 0:\n            result += num * num\n        elif index % 4 == 0 and index % 3!= 0:\n            result += num * num * num\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst)==0:\n        return 0\n    else:\n        newlst=[]\n        for i in range(len(lst)):\n            if i%3==0 or i%4==0:\n                newlst.append(lst[i]**2)\n            else:\n                newlst.append(lst[i])\n        return sum(newlst)\nlst=[1,2,3]\nprint(sum_squares(lst))\nlst=[]\nprint(sum_squares(lst))\nlst=[-1,-5,2,-1,-5]\nprint(sum_squares(lst))\nlst=[-1,-5,2,-1,-5,-1,2,3]\nprint(sum_squares(lst))\nlst=[1,-5,2,-1,-5,-1,2,3,4,5,6,7,8]\nprint(sum_squares(lst))\nlst=[-2,-1,0,1,2,3,4,5,6,7,8,9,10]\nprint(sum_squares(lst)",
        "num_ids": 274
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            result = result + lst[i]\n    return result\n    \nprint(sum_squares([1,2,3]))\nprint(sum_squares([]))\nprint(sum_squares([-1,-5,2,-1,-5]))\n",
        "num_ids": 96
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    sum_of_lst = 0\n    for i in range(len(lst)):\n        if i % 4 == 0:\n            if i % 3 == 0:\n                sum_of_lst += pow(lst[i], 2)\n            else:\n                sum_of_lst += pow(lst[i], 3)\n        else:\n            pass\n    return sum_of_lst\n",
        "num_ids": 103
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum([x**2 if x%3 == 0 else x**3 if x%4 == 0 else x for x in lst])\n",
        "num_ids": 33
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_lst = [i**2 if i%3 == 0 else i**3 if i%4!= 0 else i for i in lst]\n    return sum(new_lst)\n",
        "num_ids": 47
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sum_squares_lst = []\n    for i in lst:\n        if i % 3 == 0:\n            sum_squares_lst.append(i**2)\n        elif i % 4 == 0 and i % 3!= 0:\n            sum_squares_lst.append(i**3)\n    return sum(sum_squares_lst)\n    \nprint(sum_squares([1,2,3]))\nprint(sum_squares([]))\nprint(sum_squares([-1,-5,2,-1,-5]))",
        "num_ids": 137
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            if lst[i] < 0:\n                lst[i] = -lst[i]\n                result -= lst[i]\n            else:\n                result += lst[i]\n    return result",
        "num_ids": 84
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sentence = sentence.split(\" \")\n    ans = []\n    for word in sentence:\n        if len(word) > 1 and is_prime(len(word)):\n            ans.append(word)\n    ans = \" \".join(ans)\n    return ans\n",
        "num_ids": 65
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \" \".join([i for i in sentence.split(\" \") if is_prime(len(i))])\n",
        "num_ids": 28
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    words = sentence.split(\" \")\n    prime_words = list(filter(is_prime, words))\n    return \" \".join(prime_words)\n",
        "num_ids": 38
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    # split into words\n    sentence_list = sentence.split(\" \")\n    for word in sentence_list:\n        # check if the word length is prime\n        if is_prime(len(word)):\n            result.append(word)\n    # join result into a single string\n    return \" \".join(result)\n",
        "num_ids": 82
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    s = sentence.split()\n    result = []\n    for word in s:\n        if len(word) in primes:\n            result.append(word)\n    return \" \".join(result)",
        "num_ids": 104
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    sentence_list = sentence.split(' ')\n    prime_word_list = []\n    for word in sentence_list:\n        if len(word) in primes:\n            prime_word_list.append(word)\n    return''.join(prime_word_list)\n",
        "num_ids": 123
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s = sentence.split(' ')\n    primes = [2]\n    for i in range(3, 10000, 2):\n        if all([i % j!= 0 for j in range(2, i) if i % j == 0]):\n            primes.append(i)\n",
        "num_ids": 69
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Runtime: 40 ms, faster than 49.58% of Python3 online submissions for Words in Sentence.\n    # Memory Usage: 14.1 MB, less than 56.56% of Python3 online submissions for Words in Sentence.\n",
        "num_ids": 54
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return x * n\n",
        "num_ids": 7
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    x1 = int(x[0])\n    n1 = int(n[0])\n    return (x1 % n1) == 0\n",
        "num_ids": 55
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    #define variables\n    numerator = int(x[0:x.index(\"/\")])\n    denominator = int(x[x.index(\"/\")+1:])\n    numerator2 = int(n[0:n.index(\"/\")])\n    denominator2 = int(n[n.index(\"/\")+1:])\n",
        "num_ids": 88
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Edge Case\n    if x == '0/1' and n == '0/1':\n        return True\n    if x == '0/1':\n        return False\n    # Split the fraction into numerator and denominator\n    split_x = x.split('/')\n    split_n = n.split('/')\n    # Convert them into numbers\n    num_x = int(split_x[0])\n    num_n = int(split_n[0])\n    den_x = int(split_x[1])\n    den_n = int(split_n[1])\n    if num_n % den_x == 0 and den_n % num_x == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 176
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a = int(x.split(\"/\")[0])\n    b = int(x.split(\"/\")[1])\n    c = int(n.split(\"/\")[0])\n    d = int(n.split(\"/\")[1])\n    if(a * c == b * d):\n        return True\n    else:\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Your code here\n    # reduce fractions\n    x = Fraction(x)\n    n = Fraction(n)\n    # simplify the fraction\n    x = Fraction(simplify_fractions(x, n))\n    return x.denominator == 1\n",
        "num_ids": 64
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    x_num = int(x.split(\"/\")[0])\n    x_den = int(x.split(\"/\")[1])\n    n_num = int(n.split(\"/\")[0])\n    n_den = int(n.split(\"/\")[1])\n    if (x_num * n_num) == (x_den * n_den):\n        return True\n    else:\n        return False\n",
        "num_ids": 103
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    nums_sorted = []\n    if len(nums) == 0:\n        return nums_sorted\n    nums_sorted = sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))\n    return nums_sorted",
        "num_ids": 68
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    nums = sorted(nums, key = lambda num: sum(map(int, str(num))))\n    return nums\n",
        "num_ids": 31
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    nums.sort(key=lambda num: sum(map(int, str(num))))\n    return nums",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    nums_by_points = []\n    for i in range(len(nums)):\n        num_points = 0\n        for j in range(len(str(nums[i]))):\n            num_points += int(str(nums[i])[j])\n        nums_by_points.append((nums[i], num_points, i))\n    nums_by_points.sort()\n    return [nums[2] for nums in nums_by_points]\n",
        "num_ids": 120
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(nums, key = lambda x: (sum(int(i) for i in str(x)), -x.index))\n",
        "num_ids": 33
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))",
        "num_ids": 26
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not nums:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum([nums[i] > 10 and (nums[i] % 10 % 2!= 0 or nums[i] % 10 == 0) for i in range(len(nums))])\n",
        "num_ids": 49
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and nums[0] % 2 == 1 and nums[-1] % 2 == 1:\n            result += 1\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    new_list = []\n    for i in nums:\n        if i >= 10 and i % 2!= 0 and nums.index(i) == 0:\n            new_list.append(i)\n        elif i >= 10 and i % 2!= 0 and nums.index(i) == len(nums)-1:\n            new_list.append(i)\n    return len(new_list)\n",
        "num_ids": 99
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([num > 10 and num[0] % 2 == 1 and num[-1] % 2 == 1 for num in nums])\n",
        "num_ids": 34
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = 0\n    for n in nums:\n        if n > 10 and n % 2!= 0:\n            result += 1\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    out = []\n    for x in nums:\n        if x>10 and (int(str(x)[0])%2!= 0 and int(str(x)[-1])%2!= 0):\n            out.append(x)\n    return len(out)\n",
        "num_ids": 66
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in nums:\n        num = str(i)\n        if len(num)!= 1:\n            if int(num[0]) % 2!= 0 or int(num[-1]) % 2!= 0:\n                count += 1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Create a new list to store the numbers that meet the conditions\n    result = []\n    # Loop through the array of numbers\n    for i in nums:\n        # If the first and last digits of a number are odd and it is greater than 10, add it to the list\n        if int(str(i)[0]) % 2 == 1 and int(str(i)[-1]) % 2 == 1 and i > 10:\n            result.append(i)\n    return len(result)\n",
        "num_ids": 113
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for num in nums:\n        if 10 < num < 100:\n            if (num//10) % 2 == 1 and (num % 10) % 2 == 1:\n                count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (int(num / 10) % 2!= 0 or int(num % 10) % 2!= 0):\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    \n    res = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            if (i + j) % 3 == 0:\n                res += 1\n    return res\n",
        "num_ids": 65
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n < 0:\n        return 0\n    count = 0\n    arr = [i*i-i+1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            k = j+1\n            if arr[i] + arr[j] + arr[k]%3 == 0:\n                count += 1\n    return count\n",
        "num_ids": 100
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def get_triples(n, a, i, j, k, ans):\n        if i == j or i == k or j == k:\n            return\n        if a[i] + a[j] + a[k] % 3 == 0:\n            ans[0] += 1\n        \n        get_triples(n, a, i + 1, j, k, ans)\n        get_triples(n, a, i, j + 1, k, ans)\n        get_triples(n, a, i, j, k + 1, ans)\n",
        "num_ids": 134
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([i * i - i + 1 for i in range(1, n + 1) if i * i - i + 1 % 3 == 0])\n",
        "num_ids": 37
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    max_triples = 0\n    # TODO: Write your code here\n    return max_triples\n",
        "num_ids": 26
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i+j+k) % 3 == 0:\n                    count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    nums = []\n    for i in range(n):\n        nums.append(i*i-i+1)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if nums[i] + nums[j] + nums[k] % 3 == 0:\n                    count += 1\n    return count\n",
        "num_ids": 105
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    def f(n):\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n        c = 0\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    s = a[i] + a[j] + a[k]\n                    if s % 3 == 0:\n                        c += 1\n        return c\n",
        "num_ids": 113
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum(i * i - i + 1 for i in range(1, n + 1) if (i * i - i + 1) % 3 == 0)\n",
        "num_ids": 39
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 3:\n        return 0\n    \n    # 2 * num\n    # num * num - num + 1\n    # 3 * num - 2\n    \n    # 3 * num - 6\n    # 2 * num * num - num * num + 1\n    # 3 * num - 2 * num * num - num\n    # 3 * num - 3 * num * num + 1\n    # 2 * num * num - 3 * num\n    # num * num - num + 1\n    \n    return n * (n - 1) * (n - 2) // 6\n",
        "num_ids": 132
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    if planet1 == planet2:\n        return ()\n    if planet1 > planet2:\n        return bf(planet2, planet1)\n    result = ()\n    for planet in planets:\n        if planet1 < planet < planet2:\n            result += (planet,)\n    return result\n",
        "num_ids": 145
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # We use the following table to convert between names and orbital periods:\n    periods = {\n        \"Mercury\": 2440,\n        \"Venus\": 6051,\n        \"Earth\": 6378,\n        \"Mars\": 3396,\n        \"Jupiter\": 4364,\n        \"Saturn\": 10759,\n        \"Uranus\": 5263,\n        \"Neptune\": 16414\n    }\n",
        "num_ids": 98
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    #PLANETS = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    PLANETS = {\n        \"Mercury\": [3.303e+23, 2.4397e6],\n        \"Venus\": [4.867e+24, 6.0518e6],\n        \"Earth\": [5.976e+24, 6.37814e6],\n        \"Mars\": [6.421e+23, 3.3972e6],\n        \"Jupiter\": [1.9e+27, 7.1492e7],\n        \"Saturn\": [5.688e+26, 6.0268e7],\n        \"Uranus\": [8.686e+25, 2.5559e7],\n        \"Neptune\": [1.024e+26, 2.4746e7]\n    }\n",
        "num_ids": 222
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # your code here\n    pass",
        "num_ids": 9
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #your code here\n    result = ()\n    if planet1 not in planets or planet2 not in planets:\n        return result\n    \n    for planet in planets:\n        if planet!= planet1:\n            for x in bf(planet1, planet):\n                result = result + (x,)\n        if planet!= planet2:\n            for x in bf(planet2, planet):\n                result = result + (x,)\n    return sorted(result, key=lambda planet: abs(planet - sun))\n",
        "num_ids": 120
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Hint: Use `.lower()` to make the strings lowercase.\n    # Hint: Use `.split()` to split the string into a list of words.\n    # Hint: Use `.replace()` to replace the \"word\" with another word.\n    # Hint: Use `.startswith()` to check if a string starts with another string.\n    \n    planets = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ]\n    \n    planet1 = planet1.lower().split()[0]\n    planet1 = planet1.replace(\" \", \"\")\n    planet1 = planet1.capitalize()\n    \n    planet2 = planet2.lower().split()[0]\n    planet2 = planet2.replace(\" \", \"\")\n    planet2 = planet2.capitalize()\n    \n    if planet1 in planets:\n        if planet2 in planets:\n            \n            min_planet = planets.index(planet1)\n            max_planet = planets.index(planet2)\n            result = planets[min_planet+1:max_planet]\n            \n            return tuple(result)\n    \n    return tuple()\n        ",
        "num_ids": 308
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    planets = {\n        \"Mercury\": 0.387,\n        \"Venus\": 0.723,\n        \"Earth\": 1,\n        \"Mars\": 1.524,\n        \"Jupiter\": 5.204,\n        \"Saturn\": 9.537,\n        \"Uranus\": 19.213,\n        \"Neptune\": 30.061,\n    }\n    \n    planet1_pos = planets[planet1]\n    planet2_pos = planets[planet2]\n    \n    if planet1_pos > planet2_pos:\n        return tuple()\n    \n    return tuple(planets.keys())[planets.values().index(planet1_pos): planets.values().index(planet2_pos)+1]\n",
        "num_ids": 174
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    elif planet1 == planet2:\n        return (planet1,)\n    else:\n        return (planets[planets.index(planet1)+1:planets.index(planet2)],)\n",
        "num_ids": 105
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # print(list(set(lst)))\n    lst.sort(key=len)\n    lst.sort()\n    return lst\n",
        "num_ids": 36
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sorted_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_list.append(word)\n    sorted_list.sort(key = len)\n    return sorted_list\n",
        "num_ids": 59
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort(key=len)\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst.sort(key=len)\n    lst_new = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            lst_new.append(i)\n    return lst_new\n",
        "num_ids": 58
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: Implement me!\n",
        "num_ids": 10
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst.sort(key=len)\n    lst2 = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            lst2.append(i)\n    return lst2\n",
        "num_ids": 55
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert isinstance(lst, list)\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst)\n",
        "num_ids": 61
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "num_ids": 54
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(lst, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return x if n%2==0 else y\n",
        "num_ids": 13
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n    else:\n        return x\n",
        "num_ids": 42
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if n == 2:\n        return x\n    if n % 2 == 0 or n % 3 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 41
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return x\n    elif n == 2:\n        return y\n    elif n % 2 == 0:\n        return x_or_y(n / 2, x, y)\n    else:\n        return y_or_x(n, x, y)\n",
        "num_ids": 82
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 0 or n == 1:\n        return x\n    elif n == 2:\n        return y\n    else:\n        for i in range(3, n + 1):\n            if n % i == 0:\n                return x\n            else:\n                return y\n",
        "num_ids": 66
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0:\n        return y\n    if n == 1:\n        return x\n    if n == 2:\n        return x\n    elif n == 3:\n        return y\n    elif n == 5:\n        return y\n    elif n == 7:\n        return x\n    else:\n        return x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, y, x_or_y(x, ",
        "num_ids": 1025
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x if is_prime(n) else y\n",
        "num_ids": 14
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == x:\n        return x\n    elif n == y:\n        return y\n    else:\n        return \"Wrong input\"\n",
        "num_ids": 36
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Hint: You may need to do some looping.\n    total = 0\n    for n in lst:\n        if n >= 0 and n % 2!= 0:\n            total += (n * n)\n",
        "num_ids": 52
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    odd_numbers = [i for i in lst if i % 2!= 0]\n    odd_squared = [i*i for i in odd_numbers]\n    return sum(odd_squared)\n",
        "num_ids": 52
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if lst == []:\n        return 0\n    else:\n        lst_sum = 0\n        for i in lst:\n            if (i % 2 == 0) | (i < 0):\n                continue\n            else:\n                lst_sum += i**2\n        return lst_sum\n",
        "num_ids": 73
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum = 0\n    for num in lst:\n        if num > 0 and num % 2!= 0:\n            sum += num * num\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #lst = list(filter(lambda num: num >=0, lst))\n    #lst = list(map(lambda num: num**2, lst))\n    #return sum(lst)\n    #return sum(list(map(lambda num: num**2, list(filter(lambda num: num >=0, lst))))\n    return sum([num**2 for num in lst if num >=0 and num % 2!= 0])\n",
        "num_ids": 106
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass #remove this line\n    \n",
        "num_ids": 10
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    odd_sum = 0\n    for num in lst:\n        if num < 0 or type(num)!= int:\n            continue\n        else:\n            if num % 2 == 1:\n                odd_sum += num**2\n            else:\n                continue\n    return odd_sum\n",
        "num_ids": 68
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return sum([i**2 for i in lst if i > 0 and i % 2!= 0])\n",
        "num_ids": 28
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if lst == []:\n        return 0\n    else:\n        odds = [x for x in lst if x % 2!= 0]\n        squares = [x**2 for x in odds]\n        return sum(squares)\n",
        "num_ids": 59
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # handle cases of empty list\n    if len(lst) == 0:\n        return 0\n    \n    # get the sum of all the odd ints\n    sum = 0\n    for i in lst:\n        if (i % 2!= 0) and (i < 0):\n            continue\n        else:\n            sum += i**2\n    \n    return sum\n",
        "num_ids": 90
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return [abs(x[0]-x[1]) for x in zip(game,guess)]\n    # try:\n    #     return [abs(x[0]-x[1]) for x in zip(game,guess)]\n    # except:\n    #     raise TypeError('game and guess must be of the same length')\n",
        "num_ids": 81
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n    \ndef comp(*args):\n    return min(args)\n",
        "num_ids": 19
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    scores = game\n    guesses = guess\n    output = []\n    for i in range(len(scores)):\n        output.append(abs(scores[i]-guesses[i]))\n    return output\n    \n",
        "num_ids": 56
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #You can assume that the game will not have the same guess twice.\n    #You can assume that the game will not have the same score twice.\n    \n    #Lists for score and guess\n    score = list()\n    guess = list()\n    \n    #While loop to get the score\n    i = 0\n    while i < len(game):\n        score.append(game[i])\n        i += 1\n        \n    #While loop to get guess\n    i = 0\n    while i < len(guess):\n        guess.append(guess[i])\n        i += 1\n        \n    #List for difference\n    diff = list()\n    \n    #Loops to get the difference\n    i = 0\n    while i < len(guess):\n        diff.append(abs(guess[i] - score[i]))\n        i += 1\n        \n    #Returns the difference\n    return diff\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [0 if guess[i]==game[i] else abs(game[i]-guess[i]) for i in range(len(game))]",
        "num_ids": 37
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [0 if guess == game[i] else abs(guess-game[i]) for i, guess in enumerate(guess)]\n    \nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))",
        "num_ids": 66
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    results = [0 for i in range(len(game))]\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            results[i] = 0\n        else:\n            results[i] = abs(game[i] - guess[i])\n    return result",
        "num_ids": 74
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [0 if guess[i] == game[i] else abs(game[i] - guess[i]) for i in range(len(game))]",
        "num_ids": 37
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return resul",
        "num_ids": 64
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return [abs(guess[i]-game[i]) for i in range(len(game))]\n",
        "num_ids": 28
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n",
        "num_ids": 7
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"{}.{}\".format(class_name, sorted(extensions, key=lambda x: sum([1 for c in x if c.isupper()]))[-1])\n",
        "num_ids": 44
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not extensions:\n        return ''\n    return_string = f'{class_name}.{extensions[0]}'\n    if len(extensions) > 1:\n        for extension in extensions[1:]:\n            strength = Strength_Extension(extension)\n            if strength > Strength_Extension(return_string):\n                return_string = f'{class_name}.{extension}'\n    return return_string\n",
        "num_ids": 102
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    d = {}\n    for ext in extensions:\n        l = 0\n        c = 0\n        for i in ext:\n            if i.islower():\n                l += 1\n            else:\n                c += 1\n        d[ext] = l - c\n    m = max(d.values())\n    return '{}.{}'.format(class_name, ''.join(key for key, value in d.items() if value == m))\n",
        "num_ids": 106
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    list_of_extensions = []\n    for extension in extensions:\n        list_of_extensions.append((extension, sum(extension.upper() == char for char in extension)))\n    return class_name + '.' + sorted(list_of_extensions, key=lambda x: x[1], reverse=True)[0][0]\n",
        "num_ids": 82
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return class_name + '.' + max(extensions, key=lambda e: (sum(c.isupper() for c in e), e))\n",
        "num_ids": 36
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # your code here\n",
        "num_ids": 7
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = None\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for letter in extension:\n            if letter.isupper():\n                cap+=1\n            else:\n                sm+=1\n        result = extension if result is None or result[1]<=sm else result\n    return class_name + \".\" + result",
        "num_ids": 81
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    cap = 0\n    sm = 0\n    for i in extensions:\n        for j in i:\n            if j.isupper():\n                cap += 1\n            else:\n                sm += 1\n    return '{}.{}'.format(class_name, extensions[cap - sm])\n",
        "num_ids": 68
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    extensions.sort(key=lambda e: len(e)-len(e.lower()))\n    # Find the class with the most uppercase letters\n    for ext in extensions:\n        if any(char.isupper() for char in ext):\n            return \"{}.{}\".format(class_name, ext)\n",
        "num_ids": 75
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return b in a+a\n    \ndef palindrome_check(a):\n    \"\"\"\n    >>> palindrome_check(\"abbbb\")\n    True\n    >>> palindrome_check(\"abcba\")\n    True\n    >>> palindrome_check(\"abcde\")\n    False\n    \"\"\"\n    return a == a[::-1]\n",
        "num_ids": 83
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #First I want to iterate through the first string and add them to a list\n    #Then I iterate through the second string and check if there is any substring in the list\n    #If there is, return True\n",
        "num_ids": 51
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if b in a:\n        return True\n    elif len(a) > len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            for j in range(len(a)):\n                if a[j:j + len(b)] == b:\n                    return True\n    return False\n",
        "num_ids": 81
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    a = a.lower()\n    b = b.lower()\n    count = 0\n    if len(b) < len(a):\n        for i in range(len(b)):\n            for j in range(len(b)):\n                if b[i:j+1] == a:\n                    count += 1\n    else:\n        for i in range(len(a)):\n            for j in range(len(a)):\n                if b[i:j+1] == b:\n                    count += 1\n    if count > 0:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 145
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code goes here\n    a = a.lower()\n    b = b.lower()\n    a_len = len(a)\n    b_len = len(b)\n",
        "num_ids": 44
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a_len = len(a)\n    b_len = len(b)\n    if a_len < b_len:\n        return False\n    for i in range(a_len):\n        if a[i:]+a[:i] == b:\n            return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    rotations = ['',a[1:],a[2:]+a[0],a[3:]+a[:2]+a[0],a[1:]+a[0]+a[0]]\n    for c in rotations:\n        if c in b:\n            return True\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # return all(b in a for b in [b,b[1:]+b[0]])\n    for b in [b,b[1:]+b[0]]:\n        if b in a:\n            return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return any(a.find(i)!= -1 for i in b)\n",
        "num_ids": 20
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n",
        "num_ids": 66
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    evens = 0\n    odds = 0\n    if num < 0:\n        evens += 1\n        num = -num\n",
        "num_ids": 32
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert isinstance(num, int), \"The input is not an integer\"\n    if num < 0:\n        num = abs(num)\n        return (1, 1)\n    odd = 0\n    even = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (odd, even)\n",
        "num_ids": 103
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if num == 0:\n        return (0, 0)\n    if num < 0:\n        num = -num\n    odd_count = 0\n    even_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n",
        "num_ids": 96
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    even_odd = [1,1]\n    for i in str(num):\n        if int(i)%2 == 0:\n            even_odd[0] += 1\n        else:\n            even_odd[1] += 1\n    return tuple(even_odd)\n",
        "num_ids": 66
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def even_odd(num):\n        count_even = 0\n        count_odd = 0\n",
        "num_ids": 24
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if num == 0:\n        return (0, 0)\n    odd_count = 0\n    even_count = 0\n    while num > 0:\n        odd_count += 1 if num % 2 else 0\n        even_count += 1 if num % 2 == 0 else 0\n        num //= 10\n    return (even_count, odd_count)\n",
        "num_ids": 83
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    even_count, odd_count = 0, 0\n    while num:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n",
        "num_ids": 65
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (num % 2 == 0, num % 2)\n",
        "num_ids": 15
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    roman_dict = {'1': 'i', '2': 'ii', '3': 'iii', '4': 'iv', '5': 'v', '6': 'vi', '7': 'vii', '8': 'viii', '9': 'ix', '10': 'x'}\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('Invalid input!')\n    result = ''\n    while number:\n        result = roman_dict[str(number % 10)] + result\n        number = number // 10\n    return result",
        "num_ids": 138
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    roman_map = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    }\n    result = \"\"\n    for key in sorted(roman_map.keys(), reverse=True):\n        while number >= key:\n            result += roman_map[key]\n            number -= key\n    return result\n",
        "num_ids": 152
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Step 1\n    number = abs(number)\n    # Step 2\n    roman = ''\n    # Step 3\n    mapping = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'),\n               (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]\n    # Step 4\n    for value, symbol in mapping:\n        # Step 5\n        while number >= value:\n            # Step 6\n            roman += symbol\n            # Step 7\n            number -= value\n    # Step 8\n    return roman.lower()",
        "num_ids": 174
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    num_list = list(str(number))\n    translate_dict = {\n        '1' : ['I', 'X', 'C', 'M'],\n        '2' : ['X', 'L', 'C', 'D'],\n        '3' : ['C', 'D', 'M', 'X'],\n        '4' : ['X', 'C', 'M', 'I'],\n        '5' : ['V', 'L', 'X', 'I'],\n        '6' : ['V', 'C', 'D', 'M'],\n        '7' : ['L', 'C', 'D', 'X'],\n        '8' : ['C', 'D', 'X', 'I'],\n        '9' : ['X', 'L', 'X', 'I'],\n        '0' : ['X', 'C', 'C', 'M'],\n    }\n    roman_numeral = ''\n    for num in num_list:\n        roman_numeral += translate_dict[num][-1]\n    return roman_numeral.lower()\n",
        "num_ids": 258
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # These will be our roman numeral symbols\n    roman_numerals = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n",
        "num_ids": 116
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert isinstance(number, int), \"Input number must be an integer.\"\n    assert 0 < number < 1001, \"Input number must be between 1 and 1000.\"\n",
        "num_ids": 39
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = ''\n    if number > 0:\n        result = int_to_mini_roman_helper(number, 'M', 'C', 'X', 'I')\n        result = result[::-1]\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # handle invalid input\n    if not isinstance(number, int):\n        raise TypeError(\"number must be integer\")\n    if number <= 0:\n        raise ValueError(\"number must be positive\")\n    if number > 1000:\n        raise ValueError(\"number must be less than or equal to 1000\")\n",
        "num_ids": 70
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (a ** 2 + b ** 2 == c ** 2) or (b ** 2 + c ** 2 == a ** 2) or (c ** 2 + a ** 2 == b ** 2)\n",
        "num_ids": 45
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (a ** 2 + b ** 2 == c ** 2) or (b ** 2 + c ** 2 == a ** 2) or (a ** 2 + c ** 2 == b ** 2",
        "num_ids": 43
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if c == a*a + b*b:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if abs(b ** 2 - 4 * a * c) < 1:\n        return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return 0 not in [a, b, c] and 180 == get_angle(a, b, c)\n",
        "num_ids": 27
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    import math\n    if (a ** 2 + b ** 2 - c ** 2) == 0 or (a ** 2 + c ** 2 - b ** 2) == 0 or (c ** 2 + b ** 2 - a ** 2) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n",
        "num_ids": 39
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert a + b > c and b + c > a and a + c > b\n    return a*a + b*b == c*c or b*b + c*c == a*a or a*a + c*c == b*b",
        "num_ids": 58
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if a + b < c or a + c < b or b + c < a:\n        return False\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n",
        "num_ids": 69
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join(sorted(words, key=lambda x: (len(set(x)), x)))[-1]\n",
        "num_ids": 31
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    current_max = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > current_max:\n            current_max = len(set(word))\n            max_word = word\n    return max_word\n",
        "num_ids": 61
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return min(words, key=lambda x: len(set(x)))\n    dict_ = {}\n    for i in words:\n        dict_[i] = len(set(i))\n    return sorted(dict_.keys(), key= lambda x: (dict_[x], x))[-1]\n",
        "num_ids": 73
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return max(words, key=lambda x: len(set(x)))\n",
        "num_ids": 19
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    dict = {}\n    for i in words:\n        dict[i] = len(set(i))\n    max_key = max(dict, key = dict.get)\n    return max_key\n",
        "num_ids": 48
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not words:\n        return None\n    else:\n        max_char = max([len(x) for x in words])\n        return sorted([x for x in words if len(x) == max_char])[0]\n",
        "num_ids": 55
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    unique_chars = set()\n    for word in words:\n        for c in word:\n            unique_chars.add(c)\n",
        "num_ids": 35
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    chars = {}\n    for word in words:\n        count = 0\n        for c in word:\n            if not c in chars:\n                chars[c] = 1\n                count += 1\n            else:\n                chars[c] += 1\n        if count > 0:\n            return word\n",
        "num_ids": 72
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    dict1 = {}\n    for word in words:\n        dict1[word] = set(word)\n    \n    #return the word with the most unique characters\n    return max(dict1, key=dict1.get)\n",
        "num_ids": 54
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return max(words, key=lambda word: len(set(word)))\n",
        "num_ids": 19
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = [number, remaining]\n    if remaining < need:\n        result[0] = number + remaining\n        result[1] = 0\n    else:\n        result[0] = number + need\n        result[1] = remaining - need\n    return result",
        "num_ids": 62
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if (number+need > remaining):\n        return [number + need - remaining, 0]\n    else:\n        return [number+need, remaining-number-need]\n",
        "num_ids": 41
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    eaten = number + need\n    left = remaining - need\n    return [eaten, left]\n",
        "num_ids": 25
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if number < 0 or need < 0 or remaining < 0:\n        raise ValueError(\"Inputs should be positive integers.\")\n",
        "num_ids": 29
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [number + need, remaining - need]\n",
        "num_ids": 13
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    if remaining >= need:\n        remaining -= need\n        return [number + need, remaining]\n    else:\n        return [number + remaining, 0]\n",
        "num_ids": 40
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # replace the line below with all your code\n    if remaining < need:\n        print(number, remaining)\n        return [number+remaining, 0]\n    return [number+need, remaining-need]\n",
        "num_ids": 50
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # write your code here\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n",
        "num_ids": 41
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if operator[0] == '+':\n        return operand[0] + operand[1]\n    elif operator[0] == '-':\n        return operand[0] - operand[1]\n    elif operator[0] == '*':\n        return operand[0] * operand[1]\n    elif operator[0] == '//':\n        return operand[0] // operand[1]\n    elif operator[0] == '**':\n        return operand[0] ** operand[1]\n",
        "num_ids": 130
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    raise NotImplementedError()\n",
        "num_ids": 10
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = 0\n    operator = operator.split('+')\n    operand = operand.split()\n    for i in operator:\n        result += int(i)\n    for i in operand:\n        result *= int(i)\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]) + operator[1] + str(operand[2]))\n",
        "num_ids": 40
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = 0\n    return result",
        "num_ids": 9
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = operand[0]\n    for i in range(1,len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n",
        "num_ids": 146
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == \"+\":\n            result += operand[i + 1]\n        elif operator[i] == \"-\":\n            result -= operand[i + 1]\n        elif operator[i] == \"*\":\n            result *= operand[i + 1]\n        elif operator[i] == \"//\":\n            result //= operand[i + 1]\n        elif operator[i] == \"**\":\n            result **= operand[i + 1]\n",
        "num_ids": 137
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    result = 0\n",
        "num_ids": 8
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    result = operand[0]\n    \n    for x in range(len(operator)):\n        result = eval(str(result) + operator[x] + operand[x+1])\n",
        "num_ids": 49
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                c = c.lower()\n            else:\n                c = c.upper()\n        result += c\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = ''\n    for letter in s:\n        if letter.isalpha():\n            if letter.isupper():\n                result += letter.lower()\n            else:\n                result += letter.upper()\n        else:\n            result += letter\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def flip(x):\n        if x.isalpha():\n            return x.swapcase()\n        return x\n    \n    return \"\".join(map(flip, s))\n",
        "num_ids": 45
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    print(\"solve(s)\")\n    s = list(s)\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        i += 1\n    return ''.join(s)\n",
        "num_ids": 97
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return ''.join([i.swapcase() if i.isalpha() else i for i in s])\n",
        "num_ids": 27
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # a function for reversing the case of a character\n    def reverse_case(c):\n        return c.upper() if c.islower() else c.lower()\n",
        "num_ids": 40
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    output = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                output += c.lower()\n            else:\n                output += c.upper()\n        else:\n            output += c\n    return output\n",
        "num_ids": 62
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(text) > 0:\n        h = hashlib.md5()\n        h.update(text.encode('utf-8'))\n        return h.hexdigest()\n    else:\n        return None\n",
        "num_ids": 54
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n",
        "num_ids": 46
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if text is None:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 35
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if text == \"\":\n        return None\n    return hashlib.md5(text).hexdigest()\n",
        "num_ids": 27
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if text:\n        m = hashlib.md5(text)\n        return m.hexdigest()\n",
        "num_ids": 27
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n",
        "num_ids": 46
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not text:\n        return None\n    \n    return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 32
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if text!= '':\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n",
        "num_ids": 40
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Let's consider the following cases:\n    # Case 1: a < b\n    # Case 2: a > b\n    # Case 3: a < b and b % 2 == 0\n    # Case 4: a < b and a % 2 == 0\n    # Case 5: a > b and b % 2 == 0\n    # Case 6: a > b and a % 2 == 0\n    # Case 7: a < b and b % 2!= 0\n    # Case 8: a < b and a % 2!= 0\n    # Case 9: a > b and b % 2!= 0\n    # Case 10: a > b and a % 2!= 0\n",
        "num_ids": 153
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a % 2 == 1 or b % 2 == 1:\n        return []\n    return_list = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            return_list.append(i)\n    return return_list\n",
        "num_ids": 65
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(a+1, b):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i for i in range(a,b+1) if i % 2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for num in range(a, b + 1):\n        #if num % 2 == 0 and num < b:\n        if num % 2 == 0 and num < b:\n            result.append(num)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    even_digits = []\n    for i in range(a, b + 1):\n        if (i % 2 == 0):\n            even_digits.append(i)\n    return even_digits\n",
        "num_ids": 50
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def is_even(n):\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n",
        "num_ids": 31
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # EDGE CASES\n    if a < 1 or b < 1:\n        return []\n    if a == 1 and b == 1:\n        return [2, 4, 6, 8]\n    if a == 2 and b == 2:\n        return [2, 4, 6, 8]\n    if a == 8 and b == 8:\n        return [2, 4, 6, 8]\n    if a == 10 and b == 14:\n        return []\n",
        "num_ids": 107
    }
]