[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i, number1 in enumerate(numbers):\n        for number2 in numbers[i+1:]:\n            if abs(number1 - number2) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(0, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return any(numbers[i+1] - numbers[i] < threshold for i in range(len(numbers) - 1))\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i < j:\n                if numbers[i] - numbers[j] < threshold:\n                    return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for idx, number in enumerate(numbers):\n        for jdx, other_number in enumerate(numbers):\n            if idx == jdx:\n                continue\n            if abs(number - other_number) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i!= j:\n                if abs(numbers[i] - numbers[j]) < threshold:\n                    return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return any(abs(numbers[i] - numbers[i + 1]) < threshold for i in range(len(numbers) - 1))\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    paren_groups = []\n    parenthesis_stack = []\n    for parenthesis in paren_string:\n        if parenthesis == '(':\n            parenthesis_stack.append(parenthesis)\n        elif parenthesis == ')':\n            parenthesis_stack.pop()\n            if len(parenthesis_stack) == 0:\n                paren_groups.append(''.join(parenthesis_stack))\n                parenthesis_stack = []\n    return paren_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    index = 0\n    groups = []\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            group = ''\n            counter = 1\n            while counter > 0:\n                group += paren_string[index]\n                index += 1\n                if paren_string[index] == ')':\n                    counter -= 1\n                elif paren_string[index] == '(':\n                    counter += 1\n            groups.append(group)\n        index += 1\n    return groups\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    new_list = []\n    index = 0\n    while index < len(paren_string):\n        curr_char = paren_string[index]\n        if curr_char == '(':\n            if paren_string[index + 1]!= ')':\n                new_list.append(curr_char)\n                index += 1\n            else:\n                new_list.append(curr_char)\n                new_list.append(')')\n                index += 2\n        else:\n            new_list.append(curr_char)\n            index += 1\n    result.append(''.join(new_list))\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # output_list = []\n    # sub_str = ''\n    # flag = 0\n    # for i in paren_string:\n    #     if i == '(':\n    #         flag += 1\n    #     elif i == ')':\n    #         flag -= 1\n    #         if flag == 0:\n    #             output_list.append(sub_str)\n    #             sub_str = ''\n    #     if flag == 0 and i!='':\n    #         sub_str += i\n    # if sub_str:\n    #     output_list.append(sub_str)\n    # return output_list\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    temp_list = []\n    for char in paren_string:\n        if char == '(':\n            temp_list.append(char)\n        elif char == ')' and temp_list:\n            temp_list.pop()\n        elif char == ')' and not temp_list:\n            temp_list.append(char)\n        if not temp_list:\n            result.append(''.join(temp_list))\n            temp_list = []\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    i = 0\n    while i < len(paren_string):\n        curr_result = []\n        curr_pars = []\n        curr_paren = paren_string[i]\n        while curr_paren == '(' or curr_paren == ')' or curr_paren =='':\n            if curr_paren =='':\n                i += 1\n            else:\n                curr_result.append(curr_paren)\n                i += 1\n                curr_paren = paren_string[i]\n        while curr_paren!= ')' or curr_paren!= '(':\n            curr_pars.append(curr_paren)\n            i += 1\n            if i >= len(paren_string):\n                break\n            curr_paren = paren_string[i]\n        curr_pars.append(curr_paren)\n        curr_result.append(''.join(curr_pars))\n        result.append(''.join(curr_result))\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Define variables\n    stack = []\n    braces_list = []\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    groups_of_parens = []\n    current_group_of_parens = []\n    for i in range(len(paren_string)):\n        char = paren_string[i]\n        if char == '(':\n            current_group_of_parens.append(char)\n        elif char == ')':\n            if len(current_group_of_parens) == 0:\n                groups_of_parens.append(current_group_of_parens)\n                current_group_of_parens = []\n            else:\n                current_group_of_parens.append(char)\n    groups_of_parens.append(current_group_of_parens)\n    return groups_of_parens\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if paren_string == '':\n        return []\n    else:\n        left_brackets = []\n        right_brackets = []\n        for i in range(0, len(paren_string)):\n            if paren_string[i] == '(':\n                left_brackets.append(paren_string[i])\n            elif paren_string[i] == ')':\n                right_brackets.append(paren_string[i])\n        if len(left_brackets)!= len(right_brackets):\n            return []\n        else:\n            while left_brackets:\n                current_left_bracket = left_brackets.pop(0)\n                current_right_bracket = right_brackets.pop(0)\n                paren_group = current_left_bracket + current_right_bracket\n                if paren_group!= '':\n                    paren_string = paren_string.replace(paren_group,'')\n            return paren_string.split()\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    res = []\n    current_group = []\n    balance = 0\n    for c in paren_string:\n        if c == '(':\n            balance += 1\n        elif c == ')':\n            balance -= 1\n        if balance == 0:\n            if current_group:\n                res.append(''.join(current_group))\n                current_group = []\n            if c!= ')':\n                current_group.append(c)\n        else:\n            if c!='':\n                current_group.append(c)\n    if current_group:\n        res.append(''.join(current_group))\n    return res\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return int(number) - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO: Decide if it should be an int or float\n    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    decimal_part, integer_part = divmod(number, 1)\n    return decimal_part\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    number, integer = math.modf(number)\n    return number\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # the \"floor division\" returns the largest integer smaller than the given number\n    # so the second argument of floor division is set to one, in order to not\n    # get an integer part\n    return number - number // 1\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return math.floor(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return number - math.floor(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return math.floor(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # your code here\n    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance -= operation\n        elif operation > 0:\n            balance += operation\n        else:\n            pass\n    return balance < 0\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return operations[-1] <= 0\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if sum(operations) < 0:\n        return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance += operation\n            if balance < 0:\n                return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance -= operation\n            if balance < 0:\n                return True\n        else:\n            balance += operation\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = False\n    for i in operations:\n        if i < 0:\n            result = True\n        elif i > 0:\n            result = False\n    return result\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    amount = 0\n    for op in operations:\n        amount = amount + op\n        if amount < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in operations:\n        if i < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(operations) == 0:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(map(lambda x: abs(x - sum(numbers)/len(numbers)), numbers)) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    mean = sum(numbers) / len(numbers)\n    sum_of_absolute_diffs = 0\n    for num in numbers:\n        sum_of_absolute_diffs += abs(num - mean)\n    return sum_of_absolute_diffs / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers.sort()\n    mid = len(numbers) // 2\n    mad_sum = 0\n    for i in range(len(numbers)):\n        mad_sum += abs(numbers[mid] - numbers[i])\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    numbers_sum = 0\n    for i in numbers:\n        numbers_sum += abs(i - sum(numbers) / len(numbers))\n    return numbers_sum / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    numbers_mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(number - numbers_mean) for number in numbers]\n    mad = sum(absolute_differences) / len(numbers)\n    return mad\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = len(numbers)\n    if n == 0:\n        return 0.0\n    average = sum(numbers) / n\n    return sum(abs(number - average) for number in numbers) / n\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    mean = sum(numbers)/len(numbers)\n    return sum(abs(x - mean) for x in numbers)/len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not numbers:\n        return float(\"nan\")\n    return sum([abs(number - sum(numbers) / len(numbers)) for number in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([abs(number - mean(numbers)) for number in numbers]) / len(numbers)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [delimeter] + [x for x in numbers if x]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = [delimeter] * (len(numbers) - 1)\n    result += numbers\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    numbers = [delimeter] + numbers + [delimeter]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] == numbers[i - 1]:\n            numbers[i] = delimeter\n    return numbers\n    \n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Check that delimeter isn't equal to the last element\n    if delimeter == numbers[-1]:\n        raise ValueError(\"Delimeter cannot be equal to last element in list\")\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not numbers:\n        return []\n    elif len(numbers) == 1:\n        return [delimeter] + numbers\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    new_numbers = []\n    for i in range(0, len(numbers), 2):\n        new_numbers.append(numbers[i])\n        new_numbers.append(delimeter)\n    if len(numbers) % 2 == 1:\n        new_numbers.append(numbers[-1])\n    return new_numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = []\n    for i in range(len(numbers) - 1):\n        res += [numbers[i], delimeter]\n    return res + [numbers[-1]]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    out = []\n    for i in range(len(numbers) - 1):\n        out.append(numbers[i])\n        out.append(delimeter)\n    out.append(numbers[-1])\n    return out\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return list(delimeter.join(map(str, numbers)))\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = [delimeter] * (len(numbers) * 2 - 1)\n    result[1::2] = numbers\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    parens = paren_string.split(' ')\n    nesting = []\n    for p in parens:\n        nesting.append(paren_nesting(p))\n    return nesting\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    parens = []\n    for paren in paren_string.split(\" \"):\n        parens.append(paren)\n    nested_parens = [p for p in parens if p.startswith('(') and p.endswith(')')]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    nested_group_list = paren_string.split()\n    max_nesting_depth = 0\n    nested_list = []\n    for i in range(0, len(nested_group_list)):\n        paren_group = nested_group_list[i]\n        nested_depth = count_nested_parens(paren_group)\n        nested_list.append(nested_depth)\n        if nested_depth > max_nesting_depth:\n            max_nesting_depth = nested_depth\n    return nested_list\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    output = []\n    for string in paren_string.split():\n        if string == '(':\n            output.append(0)\n        elif string == ')':\n            output.pop()\n        else:\n            pass\n    return output\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    nested_parens = [1, 1]  # nesting levels of parentheses, starting from 1.\n    nested_parens_index = [[0, 1], [0, 1]]  # initial index of each group of parentheses\n    # A group of parentheses starts at the first character and ends when we encounter a closing bracket\n    # or when we encounter an opening bracket with a higher nesting level.\n    # When we encounter an opening bracket of higher level, we record its index in nested_parens and\n    # increase its nesting level by 1.\n    # When we encounter a closing bracket, we check if the current group is nested inside an opening bracket\n    # of higher nesting level. If yes, we decrement the nesting level by 1. If not, we record its index in\n    # nested_parens and reset the nesting level.\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            nested_parens_index[0].append(index)\n            nested_parens[0] += 1\n        elif char == ')':\n            # If closing bracket matches an opening bracket of higher nesting level,\n            # we decrease the nesting level by 1.\n            if nested_parens[0] > nested_parens_index[0][-1]:\n                nested_parens[0] -= 1\n            # If closing bracket is the last character in the string, then it is not nested\n            # inside any opening bracket. We record its index in nested_parens and reset the nesting level.\n            else:\n                nested_parens_index[0].append(index)\n                nested_parens[0] = 1\n        elif char == '{':\n            nested_parens_index[1].append(index)\n            nested_parens[1] += 1\n        elif char == '}':\n            # If closing bracket matches an opening bracket of higher nesting level,\n            # we decrease the nesting level by 1.\n            if nested_parens[1] > nested_parens_index[1][-1]:\n                nested_parens[1] -= 1\n            # If closing bracket is the last character in the string, then it is not nested\n            # inside any opening bracket. We record its index in nested_parens and reset the nesting level.\n            else:\n                nested_parens_index[1].append(index)\n                nested_parens[1] = 1\n    # We return a list of the last index of each group of parentheses\n    return nested_parens_index[0][:-1] + nested_parens_index[1][:-1]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    paren_groups = paren_string.split()\n    final_result = []\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = []\n    stack = []\n    for char in paren_string:\n        if char == ')' and stack:\n            res.append(len(stack))\n            stack = stack[:-1]\n        elif char == ')':\n            if not stack:\n                res.append(0)\n            else:\n                res.append(len(stack))\n                stack = stack[:-1]\n        elif char == '(':\n            stack.append(char)\n    if stack:\n        res.append(len(stack))\n    return res\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    input_list = paren_string.split(' ')\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    current_max_level = 0\n    stack = []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            current_max_level += 1\n            stack.append(i)\n        elif c == ')':\n            if current_max_level == 0:\n                result.append(i)\n            else:\n                stack.pop()\n                current_max_level -= 1\n    if stack:\n        result.append(stack[-1])\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    parens = [int(x) for x in paren_string.split()]\n    nested = []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not substring:\n        return strings\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [x for x in strings if substring in x]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # return tuple([sum(numbers), prod(numbers)])\n    return (0, 1) if not numbers else (sum(numbers), reduce(lambda x, y: x * y, numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (sum(numbers), prod(numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s, p = 0, 1\n    for i in numbers:\n        s += i\n        p *= i\n    return (s, p)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(numbers), reduce(lambda x, y: x*y, numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Sum: sum of all the numbers in a list\n    # Product: product of all the numbers in a list\n    # This solution is slow and takes O(n) time. Maybe there's a better solution?\n    # Time complexity: O(n)\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum_all = 0\n    product_all = 1\n    for number in numbers:\n        sum_all = sum_all + number\n        product_all = product_all * number\n    return sum_all, product_all\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not numbers:\n        return (0, 1)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[0])\n        else:\n            max_list.append(max(numbers[:i+1]))\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = [None] * len(numbers)\n    for i in range(len(numbers)):\n        if i == 0:\n            result[i] = numbers[i]\n        else:\n            result[i] = max(result[i-1], numbers[i])\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > result[-1]:\n            result.append(numbers[i])\n        else:\n            result.append(result[-1])\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    rolling_max_list = [0 for _ in numbers]\n    for i, num in enumerate(numbers):\n        rolling_max_list[i] = max(rolling_max_list[i - 1], num)\n    return rolling_max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    max_numbers = []\n    for index in range(len(numbers)):\n        max_number = 0\n        for i in range(index + 1):\n            if numbers[i] > max_number:\n                max_number = numbers[i]\n        max_numbers.append(max_number)\n    return max_numbers\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    max_elements = []\n    while numbers:\n        max_element = max(numbers)\n        max_elements.append(max_element)\n        numbers.remove(max_element)\n    return max_elements\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    rolling_max = []\n    i = 0\n    while i < len(numbers):\n        rolling_max.append(max(numbers[i:i+3]))\n        i += 1\n    return rolling_max\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    res = []\n    \n    for idx, num in enumerate(numbers):\n        if idx == 0:\n            res.append(num)\n            continue\n        \n        previous_num = numbers[idx - 1]\n        if num > previous_num:\n            res.append(num)\n        else:\n            res.append(previous_num)\n        \n    return res\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    previous = numbers[0]\n    max_list = [numbers[0]]\n    for number in numbers[1:]:\n        if number > previous:\n            max_list.append(number)\n        else:\n            max_list.append(previous)\n        previous = number\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    res: List[int] = []\n    for i in range(len(numbers)):\n        curr: int = numbers[i]\n        for j in range(i+1, len(numbers)):\n            if numbers[j] > curr:\n                curr = numbers[j]\n        res.append(curr)\n    return res\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    length = len(string)\n    if length == 0:\n        return string\n    if length == 1:\n        return string + string\n    if is_palindrome(string):\n        return string\n    # Find the longest palindromic substring\n    palindromic_substring = find_longest_palindromic_substring(string)\n    if palindromic_substring:\n        palindromic_substring = palindromic_substring[0]\n    else:\n        return string\n    palindromic_substring_index = string.index(palindromic_substring)\n    # Get the beginning of the string\n    palindromic_substring_prefix = string[:palindromic_substring_index]\n    # Get the ending of the string\n    palindromic_substring_suffix = string[palindromic_substring_index:]\n    # Reverse the string prefix\n    palindromic_substring_prefix = palindromic_substring_prefix[::-1]\n    # Concatenate the prefix and suffix and return the result\n    return palindromic_substring_prefix + palindromic_substring + palindromic_substring_suffix\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    longest_palindrome_prefix = find_palindromic_suffix(string)\n    if len(longest_palindrome_prefix) == 0:\n        return string\n    return string[:-1*len(longest_palindrome_prefix)] + longest_palindrome_prefix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(string) == 0:\n        return ''\n    if is_palindrome(string):\n        return string\n    else:\n        suffix = longest_palindromic_postfix(string)\n        prefix = string[:string.rfind(suffix[::-1])]\n        return prefix + suffix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # find longest palindromic postfix\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            break\n    # append reverse of string prefix to the end of the string\n    return string[:-i] + string[-i:][::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    postfix = find_postfix(string, is_palindrome)\n    prefix = string[:-(len(postfix) + 1)]\n    return prefix + string[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    length = len(string)\n    if length == 0:\n        return ''\n    if length == 1:\n        return string\n    # If the string starts with a palindrome, then the original string is returned.\n    if is_palindrome(string):\n        return string\n    # Find the longest palindrome in the postfix of the original string.\n    longest_palindrome = find_longest_palindrome(string)\n    if len(longest_palindrome) == 0:\n        return None\n    # Find the prefix of the original string that comes before the longest palindrome.\n    prefix = find_prefix(string, longest_palindrome)\n    # Append to the end of the string reverse of the prefix to get the resulting palindrome.\n    return prefix + longest_palindrome[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if is_palindrome(string):\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return string + string[::-1][len(string):]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not string:\n        return ''\n    len_string = len(string)\n    substring = string[::-1]\n    for i in range(1, len_string+1):\n        if is_palindrome(string[:i]):\n            return substring + string[:i-1][::-1]\n    return string + substring\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # assert a.count(\"0\") == a.count(\"1\") and b.count(\"0\") == b.count(\"1\")\n    return \"\".join(map(str, [int(a[i]) ^ int(b[i]) for i in range(len(a))]))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n    # return \"\".join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert len(a) == len(b)\n    s = ''\n    for i in range(len(a)):\n        s += str(int(a[i]) ^ int(b[i]))\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(len(a)):\n        result.append(int(a[i]) ^ int(b[i]))\n    return \"\".join(str(e) for e in result)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # a = bin(int(a, 2))[2:]\n    # b = bin(int(b, 2))[2:]\n    # c = ''\n    # for i, j in zip(a, b):\n    #     c += str(int(i) ^ int(j))\n    # return bin(int(c, 2))[2:]\n    #\n    # result = int(a, 2) ^ int(b, 2)\n    # return str(bin(result)[2:])\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a == b:\n        return '0'\n    if not a and b:\n        return '0'\n    if not b and a:\n        return '0'\n    if not a and not b:\n        return '0'\n    else:\n        return '1'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert len(a) == len(b)\n    result = ''\n    for i in range(len(a)):\n        x = int(a[i]) ^ int(b[i])\n        result = str(x) + result\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join(chr(ord(a_) ^ ord(b_)) for a_, b_ in zip(a, b))\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    strings.sort(key=len, reverse=True)\n    return strings[0] if strings else None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # If strings list is empty\n    if not strings:\n        return None\n    # Initialize variable for the longest string\n    longest_string: str = strings[0]\n    # Iterate over strings list\n    for string in strings:\n        # If the string is longer than the longest one\n        if len(string) > len(longest_string):\n            # Update longest variable\n            longest_string = string\n    # Return the longest string\n    return longest_string\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        result_string = ''\n        for string in strings:\n            if len(string) > len(result_string):\n                result_string = string\n        return result_string\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return None if not strings else max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n    max_len = len(max(strings, key=len))\n    longest_string = None\n    for string in strings:\n        if len(string) == max_len:\n            if not longest_string:\n                longest_string = string\n            else:\n                longest_string = min(string, longest_string)\n    return longest_string\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    max_len = 0\n    max_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_str = s\n            max_len = len(s)\n    return max_str\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if strings:\n        return sorted(strings, key=len)[-1]\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    while b > 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return math.gcd(a, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    while b > 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a, b = (a, b) if a >= b else (b, a)\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(string) == 1:\n        return [string]\n    else:\n        return [string[0:i] for i in range(1, len(string))] + [string]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return list(map(lambda x: x[0], sorted(map(lambda x: (x, len(x)), map(lambda x: x[0], enumerate(string))), key=lambda x: x[1])))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(string) == 0:\n        return []\n    elif len(string) == 1:\n        return [string]\n    else:\n        return [string[0:i+1] for i in range(len(string))] + all_prefixes(string[1:])\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return list(map(lambda x: x, all_prefixes_iter(string)))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(string) < 1:\n        return []\n    else:\n        return [string[:i] for i in range(len(string))] + all_prefixes(string[1:])\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    all_prefixes = []\n    for i in range(len(string)):\n        all_prefixes.append(string[0:i])\n    return all_prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not string:\n        return ['']\n    prefix = string[0]\n    suffixes = all_prefixes(string[1:])\n    return [prefix + suffix for suffix in suffixes] + suffixes\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # string to store the generated string\n    string = \"\"\n    \n    # generating the string\n    for i in range(n + 1):\n        string += str(i)\n        if i < n:\n            string += \" \"\n            \n    return string\n    \n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \" \".join(list(map(str,range(n+1))))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # string = \"\"\n    # for i in range(n + 1):\n    #     string += str(i) + \" \"\n    # return string[:-1]\n    return \" \".join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 0:\n        return \"Number should be non-negative.\"\n    elif n == 0:\n        return '0'\n    else:\n        return f'0 {string_sequence(n-1)}'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \" \".join([str(i) for i in range(n + 1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Find the length of the sequence\n    if n == 0:\n        return \"0\"\n    length = 1\n    i = 1\n    while i < n:\n        length += 1\n        i += 1\n    # Return the sequence in the appropriate string format\n    return \" \".join(map(str, range(length)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result.strip()\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(set([char.lower() for char in string]))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    seen_chars = set()\n    for char in string.lower():\n        if char.isalpha():\n            seen_chars.add(char)\n    return len(seen_chars)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # 1st solution\n    # count_dict = {}\n    # for character in string.lower():\n    #     if count_dict.get(character) is None:\n    #         count_dict[character] = 1\n    #     else:\n    #         count_dict[character] += 1\n    # return len(count_dict)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    distinct = set()\n    for char in string:\n        distinct.add(char.lower())\n    return len(distinct)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len(set([i.lower() for i in string]))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [4 if char == 'o' else 2 if char == 'o|' else 1 for char in music_string.split('|')]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return_list = []\n    for note in music_string.split('|'):\n        if note == '.':\n            return_list.append(1)\n        elif note == 'o':\n            return_list.append(4)\n        elif note == 'o|':\n            return_list.append(2)\n    return return_list\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # List of beats for each note\n    beat_list = []\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    parsed_music = []\n    current_beat = 0\n    while current_beat < len(music_string):\n        if music_string[current_beat] == '.':\n            current_beat += 2\n            parsed_music.append(1)\n        elif music_string[current_beat] == '|':\n            current_beat += 2\n            parsed_music.append(2)\n        elif music_string[current_beat] == 'o':\n            current_beat += 1\n            parsed_music.append(4)\n        else:\n            current_beat += 2\n            parsed_music.append(2)\n    return parsed_music\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    music_array = music_string.split(' ')\n    for note in music_array:\n        if note == '.' or note == 'o':\n            result.append(4)\n        elif '|' in note:\n            result.append(2)\n        else:\n            result.append(1)\n    return result\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [4 if char == 'o' else 2 if char == '.' else 1 for char in music_string]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    import re\n    import math\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    time = []\n    for note in music_string.split('|'):\n        notes = note.split(' ')\n        for note in notes:\n            if note == 'o':\n                time.append(4)\n            elif note == 'o|':\n                time.append(2)\n            elif note == '.|':\n                time.append(1)\n    return time\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [4 if s == 'o' else 2 if s == 'o|' else 1 for s in music_string.split('|')]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    note_dict = {'o': 4, 'o|': 2, '.': 1}\n    output = []\n    note = ''\n    beats = 0\n    for i in music_string:\n        if i in note_dict.keys():\n            note += i\n            beats += note_dict[i]\n            if i == 'o':\n                output.append(beats)\n            beats = 0\n        elif i == '|':\n            output.append(beats)\n            beats = 0\n    return output\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    start = 0\n    end = len(substring)\n    times = 0\n    while True:\n        if start >= len(string):\n            break\n        if string[start:end] == substring:\n            times += 1\n            start += len(substring)\n        else:\n            start += 1\n    return times\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = 0\n    i = 0\n    while i < len(string):\n        if string[i] == substring[0]:\n            j = 0\n            while i + j < len(string) and j < len(substring) and string[i + j] == substring[j]:\n                j += 1\n            if j == len(substring):\n                n += 1\n                i += j\n                continue\n        i += 1\n    return n\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    pos = 0\n    while True:\n        pos = string.find(substring, pos)\n        if pos == -1:\n            break\n        count += 1\n        pos += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    counter = 0\n    \n    # while we can find more than one instance\n    while True:\n        # find the instance\n        i = string.find(substring)\n        if i == -1:\n            break\n        \n        # increase the counter\n        counter += 1\n        \n        # remove that instance from the original string\n        string = string[:i] + string[i+len(substring):]\n    return counter\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    j = 0\n    while j < len(string):\n        i = string.find(substring, j)\n        if i == -1:\n            return count\n        count += 1\n        j = i + 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    counter = 0\n    idx_substring = 0\n    idx_string = 0\n    while idx_string < len(string):\n        if string[idx_string] == substring[idx_substring]:\n            idx_substring += 1\n            idx_string += 1\n            if idx_substring == len(substring):\n                counter += 1\n                idx_substring = 0\n        else:\n            idx_string += 1\n            idx_substring = 0\n    return counter\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    counter = 0\n    sub_len = len(substring)\n    for i in range(len(string)):\n        if string[i:i+sub_len] == substring:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    num_overlaping_chars = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            num_overlaping_chars += 1\n    return num_overlaping_chars\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    j = 0\n    i = 0\n    while i < len(string):\n        if string[i] == substring[j]:\n            count += 1\n        else:\n            count = 0\n            j = 0\n        if count == len(substring):\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(numbers) == 0:\n        return numbers\n    numbers = numbers.split(' ')\n    numbers = list(filter(None, numbers))\n    return''.join(sorted(numbers))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \" \".join(sorted(numbers.split(\" \"), key=lambda x: int(x)))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # set empty string\n    num_string = ''\n    # loop over numbers list\n    for num in numbers:\n        # if numeral is in number list\n        if num in ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']:\n            # convert number to integer\n            num = int(num)\n            # if the number is less than or equal to nine\n            if num <= 9:\n                # if the number is zero or one or two\n                if num == 0 or num == 1 or num == 2:\n                    # add to num string\n                    num_string += '0' + str(num)\n                # if the number is three or four or five\n                elif num == 3 or num == 4 or num == 5:\n                    # add to num string\n                    num_string += '3' + str(num)\n                # if the number is six or seven or eight\n                elif num == 6 or num == 7 or num == 8:\n                    # add to num string\n                    num_string += '6' + str(num)\n            # if the number is nine\n            else:\n                # add to num string\n                num_string += '9' + str(num)\n    # return the sorted string\n    return num_string\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def helper(a):\n        if a == 'zero':\n            return 0\n        if a == 'one':\n            return 1\n        if a == 'two':\n            return 2\n        if a == 'three':\n            return 3\n        if a == 'four':\n            return 4\n        if a == 'five':\n            return 5\n        if a =='six':\n            return 6\n        if a =='seven':\n            return 7\n        if a == 'eight':\n            return 8\n        if a == 'nine':\n            return 9\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # raise ValueError(numbers)\n    numbers = sorted(numbers.split())\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    numbers_list = [int(i) for i in numbers.split()]\n    numbers_list.sort()\n    return''.join([str(i) for i in numbers_list])\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \" \".join(sorted(numbers.split()))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return''.join(sorted(numbers.split(), key=int))\n    # return''.join(sorted(numbers.split(), key=int))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return''.join(sorted(numbers.split(' '), key=lambda x: int(x)))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # from functools import cmp_to_key\n    # return''.join(sorted(numbers.split(), key=cmp_to_key(lambda x, y: int(x+y)-int(y+x))))\n    # lambda x, y: int(x+y) - int(y+x)\n    # lambda a, b: cmp(int(a+b), int(b+a))\n    # if not numbers:\n    #     return ''\n    # n = len(numbers)\n    # nums = [[] for _ in range(10)]\n    # for i, c in enumerate(numbers):\n    #     nums[int(c)].append(i)\n    # ans = []\n    # for i in range(10):\n    #     for j in nums[i]:\n    #         ans.append(numbers[j])\n    # return''.join(ans)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return min(numbers, key=lambda x: abs(x - 2)), max(numbers, key=lambda x: abs(x - 2))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO: implement this\n    # TODO: consider where a more efficient solution may exist\n    # TODO: consider the use of bisection search for efficiency\n    smallest = min(numbers)\n    largest = max(numbers)\n    second_smallest = 0\n    second_largest = 0\n    for num in numbers:\n        if num == smallest or num == largest:\n            continue\n        if num < smallest:\n            second_largest = smallest\n            second_smallest = num\n            break\n        elif num > largest:\n            second_largest = largest\n            second_smallest = num\n            break\n        else:\n            continue\n    for num in numbers:\n        if num == smallest or num == largest:\n            continue\n        elif num < second_smallest:\n            second_largest = second_smallest\n            second_smallest = num\n            break\n        elif num > second_largest:\n            second_largest = second_smallest\n            second_smallest = num\n            break\n        else:\n            continue\n    return second_smallest, second_largest\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # 0. The list is at least 2\n    # 1. sort the list of numbers\n    numbers.sort()\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # define our two closest numbers\n    min_number = numbers[0]\n    max_number = numbers[0]\n    # traverse through all the numbers and check which is the smallest and which is the largest\n    for number in numbers:\n        if number < min_number:\n            min_number = number\n        if number > max_number:\n            max_number = number\n    # return the two closest\n    return (min_number, max_number)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    numbers.sort()\n    return (numbers[0], numbers[-1])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # iterate over list\n    # if there is a match, update the distances dictionary\n    # save the distances dictionary with the min value\n    # return the min values\n    distances = {}\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i == j:\n                pass\n            else:\n                distance = abs(numbers[i] - numbers[j])\n                distances[distance] = (numbers[i], numbers[j])\n    min_key = min(distances.keys())\n    return distances[min_key]\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Create list of pairs with absolute difference between them\n    differences = []\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            differences.append((abs(numbers[i] - numbers[j]), numbers[i], numbers[j]))\n    # Select minimum pair from list of pairs\n    min_pair = min(differences)\n    # Select indexes of minimum pair\n    indexes = [differences.index(min_pair), differences.index(min_pair, differences.index(min_pair) + 1)]\n    return min_pair[1], min_pair[2]\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # TODO: your code here\n    return (numbers[0], numbers[1])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    number_a = numbers[0]\n    number_b = numbers[0]\n    for number in numbers:\n        if number < number_b:\n            number_a = number_b\n            number_b = number\n        elif number > number_a:\n            number_a = number\n    return number_a, number_b\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    min_diff = None\n    first_number = None\n    second_number = None\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            diff = numbers[i] - numbers[j]\n            if not min_diff or min_diff > diff:\n                min_diff = diff\n                first_number = numbers[i]\n                second_number = numbers[j]\n    return first_number, second_number\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"Given numbers must be of at least 2\")\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [(n - min(numbers)) / (max(numbers) - min(numbers)) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # TODO: Implement for Task 1.3.\n    return list(map(lambda x: x / max(numbers), numbers))\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [0 if x == min(numbers) else (1 if x == max(numbers) else (x - min(numbers)) / (max(numbers) - min(numbers))) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [0.0] + [float(i - min(numbers)) / (max(numbers) - min(numbers)) for i in numbers] + [1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    numbers.sort()\n    return [num - numbers[0] for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert len(numbers) > 1, 'Input array must be longer than one element'\n    numbers.sort()\n    min_num = numbers[0]\n    max_num = numbers[len(numbers) - 1]\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_num) / (max_num - min_num)\n    return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    unit = [((i - min_num) / (max_num - min_num)) for i in numbers]\n    return unit\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    min_value = min(numbers)\n    max_value = max(numbers)\n    if min_value == max_value:\n        return numbers\n    return [num - min_value for num in numbers]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [val for val in values if isinstance(val, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [\n        value\n        for value in values\n        if isinstance(value, int)\n    ]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [val for val in values if isinstance(val, int) and not isinstance(val, bool)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # this is how you can use filter function in Python\n    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [int(x) for x in values if isinstance(x, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [val for val in values if isinstance(val, int)]\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for char in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    length = 0\n    for _ in string:\n        length += 1\n    return length\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for _ in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for char in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    counter = 0\n    for _ in string:\n        counter += 1\n    return counter\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    largest_divisor_value = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor_value = i\n    return largest_divisor_value\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i = n // 2\n    while n % i!= 0:\n        i -= 1\n    return i\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 0: return None\n    if n == 1: return 1\n    if n == 2: return 2\n    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    divisor = 1\n    while divisor * divisor <= n:\n        divisor += 1\n    return divisor - 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    # We want the largest divisor to be smaller than n/2, if n is even, else it should be smaller than n/2 + 1 (the latter is the largest possible number that can divide n evenly)\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    max_divisor = 1\n    for i in range(2, n+1):\n        if n%i==0 and n//i>max_divisor:\n            max_divisor = n//i\n    return max_divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    greatest_divisor = 1\n    for i in range(2,n):\n        if n % i == 0:\n            greatest_divisor = i\n    return greatest_divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    divisor = 1\n    while(n % divisor!= 0):\n        divisor += 1\n    return divisor - 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # search for the largest possible divisor of n\n    # the largest possible divisor of n cannot be larger than n (otherwise, n would have a factor of 1)\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return []\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Initialize list with all factors to 0\n    factors = [0] * n\n    # Let's start to factorize\n    for i in range(2, n):\n        if factors[i] == 0:\n            # Current number is prime\n            for j in range(i, n, i):\n                # Found number, let's mark it as prime with factor of 1\n                factors[j] = i\n    # Return list with the results\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    prime_list = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            prime_list.append(i)\n            n //= i\n        else:\n            i += 1\n    prime_list.append(n)\n    return prime_list\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 2:\n        return []\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    factor_list = []\n    while n % 2 == 0:\n        factor_list.append(2)\n        n = n / 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factor_list.append(int(i))\n            n = n / i\n    if n > 2:\n        factor_list.append(int(n))\n    return factor_list\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0 or n == 1:\n        return []\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    res = []\n    if n < 2:\n        return []\n    for p in range(2, n + 1):\n        while n % p == 0:\n            res.append(p)\n            n = n // p\n    return res\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    output = []\n    for num in numbers:\n        if num not in output:\n            output.append(num)\n    return output\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    my_set = set()\n    result = []\n    for num in numbers:\n        if num not in my_set:\n            my_set.add(num)\n            result.append(num)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers_set = set(numbers)\n    return list(numbers_set)\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Keep track of visited numbers using a set.\n    # Add a new number to the list if it's not in the set.\n    # Time: O(n)\n    # Space: O(n)\n    # n is the length of the input list.\n    num_set = set()\n    out = []\n    for num in numbers:\n        if num not in num_set:\n            num_set.add(num)\n            out.append(num)\n    return out\n    # iterate through the original input list\n    # Time: O(n)\n    # Space: O(1)\n    # n is the length of the input list.\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    list_1 = []\n    for i in range(len(numbers)):\n        if numbers[i] not in list_1:\n            list_1.append(numbers[i])\n    return list_1\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # Your code here\n    # initialization\n    new_list = []\n    \n    # traverse through the list\n    for i in range(len(numbers)):\n        \n        # check if the number is already in the list\n        if numbers[i] not in new_list:\n            \n            # if not, add it to the list\n            new_list.append(numbers[i])\n        \n    # return the list\n    return new_list\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    duplicates_to_remove = {}\n    result = []\n    for n in numbers:\n        if n not in duplicates_to_remove:\n            result.append(n)\n            duplicates_to_remove[n] = 1\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numbers[:] = list(set(numbers))\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # for each number in list\n    #   if number has already been seen, then remove\n    #   else add number to seen\n    seen = {}\n    for i in range(len(numbers)):\n        if numbers[i] in seen:\n            del numbers[i]\n        else:\n            seen[numbers[i]] = True\n    return numbers\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    upper_str = string.upper()\n    lower_str = string.lower()\n    return upper_str.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    res = \"\"\n    for char in string:\n        if char.islower():\n            res += char.upper()\n        else:\n            res += char.lower()\n    return res\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    flipped_str = \"\"\n    for char in string:\n        if char.islower():\n            flipped_str = flipped_str + char.upper()\n        else:\n            flipped_str = flipped_str + char.lower()\n    return flipped_str\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    flipped = ''\n    for char in string:\n        if char.isupper():\n            flipped += char.lower()\n        elif char.islower():\n            flipped += char.upper()\n        else:\n            flipped += char\n    return flipped\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ''.join([char.swapcase() if char.isalpha() else char for char in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    uppercase = string.upper()\n    lowercase = string.lower()\n    new_str = \"\"\n    for char in uppercase:\n        if char in lowercase:\n            new_str += char\n        else:\n            new_str += char.lower()\n    for char in lowercase:\n        if char in uppercase:\n            new_str += char.upper()\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join(char.swapcase() if char.isupper() else char for char in string)\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join([c.lower() if c.isupper() else c.upper() for c in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    concat = \"\"\n    for i in strings:\n        concat += i\n    return concat\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = \"\"\n    for string in strings:\n        result += string\n    return result\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(strings) == 0 or len(prefix) == 0:\n        return strings\n    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(prefix) == 0:\n        return []\n    elif len(prefix) > 0 and prefix[0]!= '.':\n        prefix = '.' + prefix\n    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [\n        string for string in strings if string.startswith(prefix)\n    ]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Create a list of strings that starts with the prefix.\n    # For instance, if prefix is 'a', we only want the strings that start with 'a'.\n    # This will be a list of strings like ['a', 'ab', 'abc'...]\n    prefixed_strings = [prefix + string for string in strings]\n    # This will remove all of the elements that don't start with the prefix.\n    # If all the elements of strings don't start with the prefix, then we end up with an empty list.\n    # We'll replace this with the empty list so that we don't have to filter it again later.\n    return prefixed_strings if prefixed_strings else []\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [\n        string for string in strings\n        if string.startswith(prefix)\n    ]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [l[i] for i in range(len(l)) if l[i] >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [elem for elem in l if elem >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # YOUR CODE GOES HERE\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l = [i for i in l if i > 0]\n    return l\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [x for x in l if x >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [i for i in l if i >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return False\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    divisor = 2\n    while divisor <= n**0.5:\n        if n % divisor == 0:\n            return False\n        divisor += 1\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n % 2 == 0 and n > 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        divisor = 3\n        while divisor <= math.sqrt(n) and n % divisor!= 0:\n            divisor += 2\n        return divisor > math.sqrt(n)\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n == 3:\n        return True\n    elif n == 1:\n        return False\n    else:\n        return prime_helper(n)\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    i = 2\n    if n == 1:\n        return False\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    def prime_helper(n):\n        if n == 2:\n            return True\n        elif n == 1 or n == 0 or n % 2 == 0:\n            return False\n        else:\n            return prime_helper(n - 1)\n    \n    return prime_helper(n)\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    for i in range(3, sqrt_n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n <= 2:\n        return False\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return False\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = 2\n    while i <= n/2:\n        if n % i == 0:\n            return False\n        i = i+1\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(xs) % 2:\n        raise ValueError('find_zero requires even number of coefficients')\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if xs[-1] == 0:\n        return None\n    xs.append(1)\n    for i in range(2, len(xs), 2):\n        xs[i] *= -1\n    roots = sorted(\n        set(\n            [\n                -poly(xs[j :], 0) / poly(xs[: j :], 0)\n                for j in range(1, len(xs) - 1)\n                if xs[j :][0] * xs[j + 1 :][0] < 0\n            ]\n        ),\n        key=lambda x: abs(x),\n    )\n    return roots[0] if len(roots) == 1 else None\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if xs[0] == 0:\n        if len(xs) % 2!= 0:\n            raise Exception(\"Not a polynomial\")\n        if xs[-1] > 0:\n            return math.inf\n        if xs[-1] < 0:\n            return -math.inf\n        return 0\n    if len(xs) % 2!= 0:\n        raise Exception(\"Not a polynomial\")\n    index = len(xs) // 2\n    if xs[index] == 0:\n        return 0\n    if xs[index] < 0:\n        return -math.inf\n    return xs[index]\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError('The given list xs must be have even length.')\n    for i in range(len(xs) // 2, 0, -1):\n        if xs[i]!= 0:\n            continue\n        try:\n            x_i = - sum([coeff / math.pow(i, j + 1) for j, coeff in enumerate(xs[i:])]) / xs[i]\n        except ZeroDivisionError:\n            continue\n        return x_i\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = len(xs)\n    if n % 2 == 1:\n        return None\n    xs.sort(reverse=True)\n    for x in xs:\n        if x!= 0:\n            return x / math.factorial(n // 2)\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(xs) % 2:\n        raise Exception(\"coefficients should have even number of elements\")\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    max_abs_val = max(abs(coeff) for coeff in xs)\n    xs_with_positive_coefficients = [coeff for coeff in xs if coeff!= 0 and coeff > 0]\n    coeff_with_positive_multiplicity = [coeff for coeff in xs_with_positive_coefficients if xs_with_positive_coefficients.count(coeff) > 1]\n    if coeff_with_positive_multiplicity:\n        xs_with_positive_coefficients = [coeff for coeff in xs_with_positive_coefficients if xs_with_positive_coefficients.count(coeff) > 1]\n        xs_with_positive_coefficients.sort(key=lambda x: -1 if x > 0 else 1)\n        xs_with_positive_coefficients.reverse()\n        largest_coeff = xs_with_positive_coefficients.pop()\n        xs_with_positive_coefficients.append(largest_coeff)\n    if len(xs_with_positive_coefficients) % 2:\n        raise ValueError('Non even number of coefficients')\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if xs[0] == 0:\n        return 0\n    for i, _ in enumerate(xs[::2]):\n        if xs[i] == 0:\n            continue\n        for j in range(len(xs)):\n            xs[j] = xs[j] / xs[i]\n        for k in range(i + 2, len(xs), 2):\n            xs[k] -= xs[k - 2]\n    for i, _ in enumerate(xs):\n        xs[i] = xs[i] / xs[-1]\n    return xs[-1]\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Find largest non-zero coefficient\n    xs_non_zero = [x for x in xs if x!= 0]\n    if len(xs_non_zero) > 0:\n        return -(xs[-1] / xs_non_zero[-1])\n    else:\n        raise ValueError('xs must have at least one non-zero coefficient')\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n = len(xs)\n    max_non_zero_coeff = -math.inf\n    # Find max non zero coeff. and zero.\n    for i in range(1, n, 2):\n        if abs(xs[i]) > max_non_zero_coeff:\n            max_non_zero_coeff = abs(xs[i])\n    zero = -max_non_zero_coeff / xs[0]\n    # print('f(x) ='+'+ '.join([f'{c}x^{i}' if c!= 1 else f'{c}x' for i, c in enumerate(xs, 1)]))\n    # print(f'x = {zero:.2f}')\n    return zero\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert type(l) == list\n    ret = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            ret.append(sorted(l)[i])\n        else:\n            ret.append(l[i])\n    return ret\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    r = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            r.append(l[i])\n        else:\n            r.append(sorted(l)[i])\n    return r\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l1 = []\n    l2 = []\n    for i in l:\n        if i%3 == 0:\n            l1.append(i)\n        else:\n            l2.append(i)\n    l1.sort()\n    l2.sort()\n    return l1 + l2\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return_list = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            return_list.append(l[i])\n    return_list.sort()\n    return_list.insert(0, l[0])\n    return_list.insert(3, l[3])\n    return_list.insert(6, l[6])\n    return return_list\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    return sorted([i for i in l if i % 3!= 0]) + [j for j in l if j % 3 == 0]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l1 = []\n    l2 = []\n    l3 = []\n    for i in l:\n        if i%3 == 0:\n            l2.append(i)\n        else:\n            l1.append(i)\n    l1.sort()\n    l2.sort()\n    l3 = l1 + l2\n    return l3\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(l)[:len(l)//3] + sorted(l)[len(l)//3:]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(l, key = lambda x: x if x % 3!= 0 else x // 3)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted([x for i, x in enumerate(l) if i % 3!= 0]) + \\\n           sorted([x for i, x in enumerate(l) if i % 3 == 0], reverse = True)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #I will store the values of l in a new list called l1\n    l1 = []\n    #I will store the values of l in a new list called l2\n    l2 = []\n    #I will store the values of l in a new list called l3\n    l3 = []\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(l) == 0:\n        return []\n    if len(l) == 1:\n        return l\n    return unique(l[1:]) + unique(l[:1]) if l[0] in l[1:] else [l[0]] + unique(l[1:])\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return list(set(l))\n    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for item in l:\n        if item not in result:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # if we want to do it in one line, it should be:\n    # return max(l)\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert(len(l) > 0)\n    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    maximum = 0\n    for i in l:\n        if i > maximum:\n            maximum = i\n    return maximum\n    \n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if l:\n        max_num = l[0]\n        for n in l:\n            if n > max_num:\n                max_num = n\n        return max_num\n    else:\n        return None\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # maximum element so far\n    max_so_far = l[0]\n    # current max\n    for i in range(1, len(l)):\n        if l[i] > max_so_far:\n            max_so_far = l[i]\n    return max_so_far\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert isinstance(l, list)\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    mx = l[0]\n    for e in l:\n        if e > mx:\n            mx = e\n    return mx\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n < 0:\n        return -1\n    if n % 11 == 0 or n % 13 == 0:\n        return fizz_buzz(n - 1) + 1\n    else:\n        return fizz_buzz(n - 1)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            if \"7\" in str(num):\n                count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n < 7:\n        return 0\n    if n % 11 == 0 or n % 13 == 0:\n        return 1 + fizz_buzz(n-1)\n    return fizz_buzz(n-1)\n    \ndef fibonacci(n: int):\n    \"\"\"Return the nth Fibonacci number.\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(20)\n    6765\n    >>> fibonacci(30)\n    832040\n    \"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if i % 7 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            if \"7\" in str(i):\n                count += 1\n    return count"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # do this\n    # return 0 # replace\n    # do this\n    # return 0 # replace\n    # do this\n    return sum(1 for i in range(n) if i % 11 == 0 or i % 13 == 0)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    total = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    counter = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if \"7\" in str(i):\n                counter += 1\n    return counter\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 7:\n        return n\n    if n % 11 == 0 or n % 13 == 0:\n        return fizz_buzz(n - 1) + 1\n    return fizz_buzz(n - 1)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # x = 0\n    # for i in range(1, n):\n    #     if (i % 11 == 0 or i % 13 == 0) and \"7\" in str(i):\n    #         x += 1\n    # return x\n    return len([i for i in range(1, n) if (i % 11 == 0 or i % 13 == 0) and \"7\" in str(i)])\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #Edge Case\n    if len(l) <= 1:\n        return l\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [i for _, i in sorted((i, j) for i, j in enumerate(l))]\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l2 = []\n    l1 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    l1.extend(l2)\n    return l1\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l1 = [i for i in l if i%2 == 0]\n    l1.sort()\n    l_copy = [i for i in l]\n    for i in range(len(l_copy)):\n        if l_copy[i]%2 == 0:\n            l_copy[i] = l1[0]\n            l1 = l1[1:]\n    return l_copy\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    even.sort()\n    return even + odd\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    new_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_l.append(l[i])\n    new_l.sort()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_l.append(l[i])\n    return new_l\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    even_l = []\n    odd_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_l.append(l[i])\n        else:\n            odd_l.append(l[i])\n    even_l.sort()\n    return odd_l + even_l\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(l) < 2:\n        return l\n    if len(l) == 2:\n        if l[0] % 2 == 0:\n            l[1], l[0] = l[0], l[1]\n        return l\n    if l[0] % 2 == 0:\n        l.insert(0, l.pop(1))\n    for i in range(1, len(l)-1):\n        if l[i] % 2 == 0:\n            l.insert(i, l.pop(i+1))\n    if l[-1] % 2 == 0:\n        l.insert(len(l)-1, l.pop(len(l)-2))\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    even = []\n    odd = []\n    for i in l:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cyclic groups.\n    groups = [group[::-1] for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # if group has more than 3 elements, remove first and last. Otherwise leave as is.\n    groups = [(group[1:-1]) if len(group) > 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # if string has no elements, return empty string.\n    if not groups:\n        return \"\"\n    # replace first element with the last and last element with first.\n    groups[0] = groups[-1] + groups[0]\n    groups[-1] = groups[1] + groups[-1]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = s + s\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join elements of each group into string.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # decode string by cycling groups of 3 characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # change elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return prime_fib_gen(n, 2, 1)[0]\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    a, b = 1, 1\n    for i in range(n):\n        a, b = b, a+b\n        if is_prime(b):\n            print(b)\n            return b\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = 2\n    while True:\n        a = (i - 1) * (i - 2) // 2\n        b = (i - 1) * i\n        if is_prime(i):\n            if b > n:\n                break\n            if is_fibonacci(n - a):\n                return b\n        i += 1\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n <= 0:\n        raise ValueError(\"fibonacci sequence has only positive numbers.\")\n    elif n == 1:\n        return 2\n    else:\n        return _prime_fib(n)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 2\n    a = 1\n    b = 1\n    for i in range(n-1):\n        a, b = b, a + b\n    while not is_prime(a):\n        a = a + 2\n    return a\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    a, b = 1, 1\n    count = 2\n    while count < n:\n        a, b = b, a + b\n        count += 1\n    if is_prime(b):\n        return b\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a, b = 1, 2\n    while n > 0:\n        if is_prime(a+b):\n            n -= 1\n        a, b = b, a+b\n    return a\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    fib = fibonacci(n)\n    if is_prime(fib):\n        return fib\n    return None\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    prime_fib.sequence = [1,2]\n    while prime_fib.sequence[-1] < n:\n        prime_fib.sequence.append(prime_fib.sequence[-1] + prime_fib.sequence[-2])\n    return [x for x in prime_fib.sequence if is_prime(x)][-1]\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    fib_array = [0, 1]\n    prime_array = [2]\n    while len(fib_array) < n:\n        fib_array.append(fib_array[-1] + fib_array[-2])\n    for f in fib_array:\n        if f % prime_array[-1] == 0:\n            continue\n        for p in prime_array:\n            if p > f ** 0.5:\n                break\n            if f % p == 0:\n                break\n        else:\n            prime_array.append(f)\n    return prime_array[-1]\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    seen = set()\n    for i in l:\n        if i not in seen:\n            seen.add(i)\n        else:\n            if i + i in seen and i + i + i in seen:\n                return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l.sort()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert l, 'Empty list'\n    if len(l) >= 3:\n        for i in l:\n            if i == 0:\n                return False\n            if i < 0:\n                return False\n        for i in range(len(l)):\n            for j in range(i + 1, len(l)):\n                for k in range(j + 1, len(l)):\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # we use a set to check for distinct elements\n    distinct_elements = set(l)\n    # we need at least 3 distinct elements for a valid triple sum\n    if len(distinct_elements) < 3:\n        return False\n    # we need at least 3 elements to create a valid triple sum\n    if len(l) < 3:\n        return False\n    # we build up a set of the sums we need to check for\n    triples_sum_to_check = set()\n    # we create a set of the elements we need to remove from the list if we\n    # find a valid triple sum\n    elements_to_remove_if_sum_in_list = set()\n    # for every element in the list\n    for element in l:\n        # for every element in the list starting from the second element\n        for i in range(1, len(l)):\n            # if the sum of the two elements is not in the set of sums to check\n            # for\n            if (element + l[i]) not in triples_sum_to_check:\n                # add the sum to the set of sums to check\n                triples_sum_to_check.add(element + l[i])\n                # add the element to the set of elements we need to remove from\n                # the list if we find a valid triple sum\n                elements_to_remove_if_sum_in_list.add(element)\n                elements_to_remove_if_sum_in_list.add(l[i])\n    # if the set of elements to remove from the list if a valid triple sum is\n    # in the list is not empty\n    if elements_to_remove_if_sum_in_list:\n        # remove the elements from the list if a valid triple sum is in the list\n        l = [element for element in l if element not in elements_to_remove_if_sum_in_list]\n    # if the set of elements to remove from the list if a valid triple sum is\n    # in the list is empty\n    if not elements_to_remove_if_sum_in_list:\n        # if the set of distinct elements in the list is not empty\n        if distinct_elements:\n            # return True if the set of distinct elements in the list contains\n            # at least three elements\n            return len(distinct_elements) >= 3\n    # if the set of distinct elements in the list is empty\n    if not distinct_elements:\n        # return False since there is no element to create a valid triple sum\n        return False\n    # return False if there is at least one element in the list that is not\n    # distinct\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l.sort()\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] in l:\n                if l[i] + l[j] + l[j] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum_set = set()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    sum_set.add((l[i], l[j], l[k]))\n    return False if len(sum_set) < 3 else True\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    set_l = set(l)\n    if len(l) < 3:\n        return False\n    for num in set_l:\n        if num == 0:\n            continue\n        if num > 0:\n            if num in set_l and -num in set_l:\n                return True\n        else:\n            if -num in set_l and num in set_l:\n                return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    distinct_elements = set(l)\n    for x in distinct_elements:\n        for y in distinct_elements:\n            for z in distinct_elements:\n                if x + y + z == 0 and x!= y!= z:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i!= j and i!= k and j!= k:\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n > 0\n    collisions = 0\n    cars = [tuple(range(n))]\n    for _ in range(n):\n        cars.append(tuple(reversed(cars[-1])))\n    # for the n cars, there are n-1 collisions\n    for c in cars:\n        for i in range(n-1):\n            if c[i] == c[i+1]:\n                collisions += 1\n    return collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if (i+1) % 2 == 0:\n                    if -(i+1) == j:\n                        collisions += 1\n                else:\n                    if -(i+1)!= j:\n                        collisions += 1\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n > 1\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert(n > 0)\n    assert(n % 2 == 0)\n    return int((n / 2) * (n / 2 + 1))\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    # to keep track of collisions\n    collision_count = 0\n    \n    # to keep track of how far cars are from one another\n    # initialize all to a large value, since cars initially start much closer than one another\n    space_dist = [float(\"inf\")] * n\n    \n    # cars are moving from left to right, so this loop will be from 0 to n\n    # going from left to right, so we're moving from n-1 to 0\n    for k in range(n - 1, -1, -1):\n        # create a new space_dist array, which will contain space_dist values for every car\n        # initialized to infinity\n        space_dist_new = [float(\"inf\")] * n\n        # the index we're currently on\n        k_new = k\n        \n        # we start the algorithm at the index where the car that started moving left\n        # is.  If we start at the index of the car that started moving right,\n        # we would not be able to count the number of collisions\n        for i in range(k, n):\n            # calculate the space distance from the current car to the next one\n            # space_dist_new[j] represents how far the current car is from the current index\n            space_dist_new[i] = space_dist[i]\n            \n            # if the current car is moving right, and it is closer to the current index\n            # than the current car, that car must have collided with the current car\n            # so we add 1 to the collision_count\n            # note that k_new will keep on changing, so we don't need to reset it\n            if k_new < i and space_dist_new[i] < space_dist[k_new]:\n                collision_count += 1\n                \n            # if the current car is moving right, and it is not closer to the current index\n            # than the current car, then we don't care, and we can continue\n            \n            # now, we need to make sure that the current car is moving right, and\n            # it is moving at the same speed as the current car\n            # if it's moving left, it doesn't matter\n            if space_dist_new[i] < space_dist[i]:\n                k_new = i\n                \n        # we now copy the new space_dist array into the old array\n        # since we don't care about the values we overwrote,\n        # we can use the python shortcut for assignment, i.e. =\n        # space_dist_new is a shallow copy of space_dist,\n        # so in this assignment, we're overwriting space_dist with space_dist_new\n        space_dist = space_dist_new\n        \n    # return the number of collisions\n    return collision_count\n    \ndef car_race_collision2(n: int):\n    \"\"\"\n    This function is the same as car_race_collision, except that it returns the indices of the\n    colliding cars, rather than the number of collisions.\n    \"\"\"\n    \n    # to keep track of collisions\n    collision_count = 0\n    \n    # to keep track of how far cars are from one another\n    # initialize all to a large value, since cars initially start much closer than one another\n    space_dist = [float(\"inf\")] * n\n    \n    # cars are moving from left to right, so this loop will be from 0 to n\n    # going from left to right, so we're moving from n-1 to 0\n    for k in range(n - 1, -1, -1):\n        # create a new space_dist array, which will contain space_dist values for every car\n        # initialized to infinity\n        space_dist_new = [float(\"inf\")] * n\n        # the index we're currently on\n        k_new = k\n        \n        # we start the algorithm at the index where the car that started moving left\n        # is.  If we start at the index of the car that started moving right,\n        # we would not be able to count the number of collisions\n        for i in range(k, n):\n            # calculate the space distance from the current car to the next one\n            # space_dist_new[j] represents how far the current car is from the current index\n            space_dist_new[i] = space_dist[i]\n            \n            # if the current car is moving right, and it is closer to the current index\n            # than the current car"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert 1 <= n <= 100\n    # cache = [{} for _ in range(n+1)]\n    # for k in range(n+1):\n    #     for i in range(k):\n    #         for j in range(k):\n    #             cache[i][j] = 1 if i == 0 and j == k-1 else 0\n    #     cache[k][k-1] = 1\n    #     for i in range(k+1, n+1):\n    #         cache[i][k] = sum(cache[i][k-j] for j in range(k+1))\n    #     for j in range(k+1, n+1):\n    #         cache[k][j] = cache[k][k-1] + sum(cache[j-k][k-i] for i in range(k+1, j))\n    # return cache[n][n]\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #\n    # STUDENT CODE GOES HERE\n    #\n    #\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def next(n):\n        return n % 10\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n >= 2\n    if n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return car_race_collision(n-1) + car_race_collision(n-2)\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    car_count = 0\n    while n > 0:\n        if n % 2 == 0:\n            car_count += 1\n        n = int((n - 1) / 2)\n    return car_count\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l = l[:]\n    for i, elem in enumerate(l):\n        l[i] = elem + 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # new_list = []\n    # for num in l:\n    #     new_list.append(num+1)\n    # return new_list\n    return [num+1 for num in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [n+1 for n in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l2 = []\n    for i in l:\n        l2.append(i+1)\n    return l2\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if l == []:\n        return False\n    dic = {}\n    for i in l:\n        if i in dic:\n            return True\n        dic[-i] = i\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l_set = set(l)\n    for i in l_set:\n        if -i in l_set:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if i!= j and l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    set_l = set(l)\n    # for i in l:\n    #     for j in l:\n    #         if i + j == 0 and l.index(i)!= l.index(j):\n    #             return True\n    #     return False\n    return sum([True for i in l for j in l if i + j == 0 and l.index(i)!= l.index(j)]) == 0\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(l) < 2:\n        return False\n    if len(l) == 2:\n        return l[0] + l[1] == 0\n    hash_table = set()\n    for i in l:\n        if i in hash_table:\n            return True\n        else:\n            hash_table.add(0 - i)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(l) < 2:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Initialize a dictionary to keep track of the sum of the elements\n    # in the list\n    sum_dict = {}\n    for num in l:\n        if num in sum_dict:\n            return True\n        else:\n            sum_dict[0 - num] = num\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(0, len(l) - 1):\n        if i == 0:\n            if l[i] == 0:\n                return False\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert 2 <= base <= 16, 'base must be between 2 and 16'\n    # base 10 representation of x\n    number = int(x)\n    # base representation of x\n    res = ''\n    # convert to base 10\n    while number > 0:\n        # get last digit\n        digit = number % base\n        # append to result\n        res += str(digit)\n        # divide by base\n        number //= base\n    # return result in string format\n    return res[::-1]"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if x < 0:\n        return -change_base(-x, base)\n    remainders = []\n    while x > 0:\n        remainders.append(x % base)\n        x //= base\n    return ''.join(map(str, reversed(remainders)))\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join(str(x // base**i % base) for i in range(1, int(math.log(x, base) + 1)))\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return str(x) if base <= 10 else change_base(int(x / base), base) + str(x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a = []\n    while x > 0:\n        a.append(str(x % base))\n        x //= base\n    return ''.join(a[::-1])\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if x == 0:\n        return '0'\n    result = ''\n    while x:\n        if x % base < 10:\n            result = str(x % base) + result\n        else:\n            result = chr(ord('A') + x % base - 10) + result\n        x //= base\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    conversion_dict = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}\n    remainder = ''\n    output = []\n    while x > 0:\n        remainder = str(x % base)\n        x = x // base\n        output.insert(0, conversion_dict[remainder])\n    return ''.join(str(x) for x in output)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if base < 2:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert 2 <= base <= 36, 'Base can only be 2-36.'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    ret = ''\n    while x:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n <= 3:\n        return n\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n < 3:\n        return n\n    else:\n        a, b, c = 0, 0, 2\n        for i in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert n >= 0, \"n must be >= 0\"\n    if n in [0, 1]:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    fib_list = [0, 1, 2, 0, 1, 2, 0]\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        while len(fib_list) <= n:\n            fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n        return fib_list[n]\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    fib0 = 0\n    fib1 = 1\n    fib2 = 2\n    fib3 = 0\n    if n < 2:\n        return n\n    else:\n        for i in range(n-3):\n            fib1, fib2, fib3 = fib1+fib2+fib3, fib1, fib2\n        return fib1+fib2+fib3\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n >= 0, \"n must be non-negative\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    return l[len(l) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sorted_list = sorted(l)\n    n = len(l)\n    if n%2 == 0:\n        return float((sorted_list[n//2] + sorted_list[(n//2)-1]))/2\n    else:\n        return sorted_list[n//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Insert your code here\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        mid = (len(l) / 2) - 1\n        m = (l[mid] + l[mid + 1]) / 2\n    else:\n        mid = (len(l) // 2)\n        m = l[mid]\n    return m\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l = sorted(l)\n    mid = len(l) // 2\n    return (l[mid] + l[~mid]) / 2\n    # return (l[len(l) // 2] + l[~len(l) // 2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2 - 1] + l[len(l)//2])/2\n    else:\n        return l[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l.sort()\n    middle = int(len(l)/2)\n    if len(l) % 2 == 1:\n        return l[middle]\n    else:\n        return float(sum(l[middle-1:middle+1]) / 2)\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[(n-1)//2]\n    else:\n        return (l[n//2-1] + l[n//2])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[(n-1)//2]\n    else:\n        i = (n-1)//2\n        return (l[i] + l[i+1])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Sort l\n    l.sort()\n    # Find length of l\n    n = len(l)\n    # If there is an odd number of elements in l\n    if n%2:\n        # Return middle element\n        return l[n//2]\n    # If there is an even number of elements in l\n    else:\n        # Return average of middle two elements\n        return sum(l[n//2-1:n//2+1])/2\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return text[::-1] == text\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    text = [char.lower() for char in text if char.isalpha()]\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(text) < 2:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n    return (2**n) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n >= 0, \"Modulus must be positive!\"\n    # Return 0 when 2^n > p\n    if (2 ** n) > p:\n        return 0\n    else:\n        return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n >= 0 and p >= 2\n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Convert to binary then to int\n    # base = 2\n    # result = 0\n    # power = n\n    # while power > 0:\n    #     result = result + (base ** power)\n    #     power = power - 1\n    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert p >= 2\n    assert n >= 0\n    # p = 2^m\n    m = 0\n    while (p >> m) > 1:\n        m += 1\n    # p = 2^m * q\n    q = p >> m\n    # n = 2^k * r\n    r = n >> m\n    # 2^k * r mod p = (2^k * r) mod q\n    # = r * q^(-1) mod q\n    # = r * q^(-1) mod q\n    # = r * q^(-1) mod (q / q)\n    # = r * q^(-1) mod q\n    return r * q_inv(q, p) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    a = 1\n    b = n\n    while b > 0:\n        a = a * a\n        a = a % p\n        b = b // 2\n    return a\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    return (modp(n - 1, p) * 2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n > 0:\n        return pow(2, n, p)\n    else:\n        return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert p >= 2\n    assert n >= 0\n    b = bin(n)[2:]\n    for i in range(len(b)):\n        if b[i] == '0':\n            continue\n        if i == 0:\n            return modp(n - 2**(len(b) - 1) + int(b[i]), p)\n        if i!= 0 and i % 2 == 0:\n            return (modp(n - 2**(len(b) - i - 1), p) * modp(2**i, p)) % p\n        if i!= 0 and i % 2 == 1:\n            return (modp(n - 2**(len(b) - i - 1), p) * modp(2**i, p) * 3) % p\n    return 1\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) + 26) % 26 + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    vowels = 'aeiouAEIOU'\n    result = ''\n    for l in text:\n        if l not in vowels:\n            result += l\n    return result\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join(char for char in text if char.lower() not in \"aeiou\")\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for char in text:\n        if char.lower() in vowels:\n            text = text.replace(char,'')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ''.join(i for i in text if i not in VOWELS)\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    vowels = set(['a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U'])\n    return ''.join(x for x in text if x not in vowels)\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowels = 'aeiou'\n    return ''.join([x for x in text if x not in vowels])\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    vowels = ['a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U']\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join(i for i in text if i not in 'aeiou')\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for c in text:\n        if c in vowels:\n            continue\n        result += c\n    return result\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for n in l:\n        if n >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return all(i <= t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for number in l:\n        if number > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return True\n    else:\n        return l[0] < t and below_threshold(l[1:], t)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if l == [] or l == [0]:\n        return True\n    else:\n        return below_threshold(l[1:], t) and l[0] < t"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return all([x<t for x in l])\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return all(i < t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if l[0]<t:\n        return all(i<t for i in l)\n    else:\n        return False\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x+y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s0, s1 = s0.lower(), s1.lower()\n    if len(s0)!= len(s1): return False\n    for c0, c1 in zip(s0, s1):\n        if c0!= c1: return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] not in s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # for letter in s0:\n    #     if letter in s1:\n    #         return True\n    # return False\n    return all(letter in s1 for letter in s0)\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    s0 = set(s0)\n    s1 = set(s1)\n    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if s0 == s1:\n        return False\n    else:\n        for char in s0:\n            if char not in s1:\n                return False\n        return True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #a0 = sorted(s0)\n    #a1 = sorted(s1)\n    #return a0 == a1\n    a0 = sorted(s0)\n    a1 = sorted(s1)\n    return a0 == a1\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # TODO: replace this with your code\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert len(s0) == len(s1), 'The lengths of the two words do not match.'\n    return not any([i for i in range(len(s0)) if s0[i]!= s1[i]])\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # try:\n    #     if s0[0] in s1:\n    #         return True\n    #     else:\n    #         return False\n    # except:\n    #     return False\n    if len(s0) == len(s1):\n        return True\n    if len(s0)!= len(s1):\n        return False\n    for c0 in s0:\n        if c0 not in s1:\n            return False\n    return True\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # return a_n\n    # if n < 0:\n    #     return\n    # elif n == 0:\n    #     return 0\n    # elif n == 1:\n    #     return 1\n    # elif n == 2:\n    #     return 1\n    # else:\n    #     return fib(n-1) + fib(n-2)\n    if n < 0:\n        return\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n >= 0\n    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 2) + fib(n - 1)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n    \ndef fib_list(n: int):\n    \"\"\"Return list of Fibonacci numbers.\n    >>> fib_list(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    >>> fib_list(5)\n    [0, 1, 1, 2, 3]\n    >>> fib_list(8)\n    [0, 1, 1, 2, 3, 5, 8]\n    \"\"\"\n    fibs = [0, 1]\n    for i in range(2, n + 1):\n        fibs.append(fibs[i - 1] + fibs[i - 2])\n    return fibs\n    \ndef fib_list_1(n: int):\n    \"\"\"Return list of Fibonacci numbers.\n    >>> fib_list_1(10)\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    >>> fib_list_1(5)\n    [0, 1, 1, 2, 3]\n    >>> fib_list_1(8)\n    [0, 1, 1, 2, 3, 5, 8]\n    \"\"\"\n    fibs = [0, 1]\n    for i in range(2, n + 1):\n        next_num = fibs[-1] + fibs[-2]\n        fibs.append(next_num)\n    return fibs\n    \ndef find_zero(f: Callable[[int], int]):\n    \"\"\"Return x s.t. f(x) == 0.\n    >>> def f(x):\n    ...   return x**2 - 2*x - 5\n    >>> find_zero(f)\n    3\n    \"\"\"\n    x = 1\n    while f(x)!= 0:\n        x += 1\n    return x\n    \ndef gcd(a: int, b: int) -> int:\n    \"\"\"Return greatest common divisor of a and b.\n    >>> gcd(12, 8)\n    4\n    >>> gcd(8, 12)\n    4\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    print(fib(10))\n    print(fib_list(10))\n    print(fib_list_1(10))\n    print(find_zero(fib_list_1))\n    print(gcd(12, 8))\n    "
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return 1 if n <= 1 else fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # empty list to store all Fibonacci numbers\n    fib_nums = []\n    # variable to hold Fibonacci number\n    fib_num = 0\n    # the first Fibonacci number\n    fib_num = 1\n    # iterate through each of the Fibonacci numbers\n    while len(fib_nums) < n:\n        # add each Fibonacci number to the list\n        fib_nums.append(fib_num)\n        # calculate the next Fibonacci number\n        fib_num = fib_num + fib_nums[-2]\n    # return the nth Fibonacci number\n    return fib_nums[-1]\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    openers_and_closers = {\n        \"<\": \">\",\n        \"[\": \"]\",\n        \"(\": \")\",\n    }\n    stack = []\n    for ch in brackets:\n        if ch in openers_and_closers:\n            stack.append(ch)\n        elif ch in openers_and_closers.values():\n            if not stack:\n                return False\n            elif stack[-1] == openers_and_closers[ch]:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    bracket_stack = Stack()\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            bracket_stack.push(brackets[i])\n        elif brackets[i] == \">\":\n            if bracket_stack.is_empty():\n                return False\n            if bracket_stack.pop()!= \"<\":\n                return False\n    return bracket_stack.is_empty()\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    brackets = brackets.strip()\n    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            bracket_stack.append(bracket)\n        elif bracket == \">\":\n            if len(bracket_stack) == 0:\n                return False\n            else:\n                bracket_stack.pop()\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for bracket in brackets:\n        if bracket == '<':\n            if '>' not in brackets:\n                return False\n        elif bracket == '>':\n            if '<' not in brackets:\n                return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append('>')\n        else:\n            try:\n                if stack.pop()!= '<':\n                    return False\n            except IndexError:\n                return False\n    return not stack\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    bracket_stack = []\n    for character in brackets:\n        if character == \"<\":\n            bracket_stack.append(character)\n        else:\n            if len(bracket_stack) == 0:\n                return False\n            else:\n                bracket_stack.pop()\n    return len(bracket_stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return stack == []\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    brackets = [char for char in brackets]\n    stack = []\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (l == sorted(l) or l == sorted(l, reverse=True))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] >= l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # monotonically increases\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    # monotonically decreases\n    if all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return (all(x <= y for x, y in zip(l, l[1:])) or\n            all(x >= y for x, y in zip(l, l[1:])))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(l) == 0:\n        return True\n    return l[0] <= l[1] and monotonic(l[1:])\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(l) > 1:\n        if l[0] > l[1]:\n            flag = True\n            for i in range(1, len(l)):\n                if flag and l[i] < l[i - 1]:\n                    return False\n                if not flag and l[i] > l[i - 1]:\n                    return False\n        else:\n            flag = False\n            for i in range(1, len(l)):\n                if not flag and l[i] > l[i - 1]:\n                    return False\n                if flag and l[i] < l[i - 1]:\n                    return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(l) == 1:\n        return True\n    else:\n        first = l[0]\n        last = l[-1]\n        for i in range(1, len(l)):\n            if l[i] < first or l[i] > last:\n                return False\n        return True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(l) < 2:\n        return True\n    if l[0] >= l[1]:\n        for i in range(1, len(l)):\n            if l[i] >= l[i - 1]:\n                return True\n    elif l[0] <= l[1]:\n        for i in range(1, len(l)):\n            if l[i] <= l[i - 1]:\n                return True\n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return l[0] < l[1] or l[0] == l[1]\n    return l[0] < l[1] and monotonic(l[1:])\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l3 = []\n    for i in l1:\n        if i in l2:\n            l3.append(i)\n    l3.sort()\n    return l3\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n1 = len(l1)\n    n2 = len(l2)\n    l3 = []\n    for i in l1:\n        if i in l2:\n            l3.append(i)\n            l2.remove(i)\n    return l3\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    res = []\n    # iterate over list1 and find common elements in list2\n    for i in l1:\n        if i in l2:\n            res.append(i)\n    # sort the result list\n    return sorted(res)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l3 = []\n    for i in l1:\n        for j in l2:\n            if i == j and i not in l3:\n                l3.append(i)\n    return l3\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for x in l1:\n        for y in l2:\n            if x == y:\n                result.append(x)\n    return sorted(list(set(result)))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Counter\n    # 1. Convert list to set\n    # 2. Convert sets to Counter\n    # 3. Calculate the intersection\n    # 4. Use the items() method to get the common elements and sort them\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    num = n\n    i = 2\n    \n    while num % i!= 0:\n        if i >= n**0.5:\n            return num\n        i += 1\n        \n    return largest_prime_factor(num // i)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    prime_factor = 1\n    # if n is divisible by 2, return the only prime factor.\n    if n % 2 == 0:\n        prime_factor = 2\n        while n % 2 == 0:\n            prime_factor *= 2\n            n /= 2\n    # if n is divisible by 3, return the only prime factor.\n    if n % 3 == 0:\n        prime_factor = 3\n        while n % 3 == 0:\n            prime_factor *= 3\n            n /= 3\n    # if n is divisible by 5, return the only prime factor.\n    if n % 5 == 0:\n        prime_factor = 5\n        while n % 5 == 0:\n            prime_factor *= 5\n            n /= 5\n    # iterate through the prime numbers up to and including n**0.5 and check if n is divisible by any of them.\n    # if n is divisible by a prime number, return its largest prime factor.\n    max_prime_factor = 1\n    i = 1\n    while i <= n**0.5:\n        if n % i == 0:\n            prime_factor = i\n            while n % i == 0:\n                prime_factor *= i\n                n /= i\n        i += 1\n    # the largest prime factor is the largest prime factor from above.\n    max_prime_factor = prime_factor\n    return max_prime_factor\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = 2\n    while i < n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = 2\n    while i <= n // i:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    prime = 1\n    while n % prime!= 0:\n        prime = next_prime(prime)\n    return prime\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    factors = range(1, n + 1)\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    for i in factors[1:]:\n        if is_prime(i) and n % i == 0:\n            return i\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n // i\n            i = 2\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return i\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    i = 2\n    while i*i < n:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return_value = None\n    for i in range(2, n + 1):\n        if (n % i == 0):\n            if (is_prime(i)):\n                return_value = i\n    return return_value\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return n*(n+1)//2\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n_list = []\n    i = 1\n    while i <= n:\n        n_list.append(i)\n        i = i + 1\n    return sum(n_list)\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    total = 0\n    for i in range(n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 1\n    return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return n * (n + 1) // 2\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = 0\n    for i in range(1, n+1):\n        n = n + i\n    return n\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert(n >= 1)\n    total, i = 0, 1\n    while i <= n:\n        total += i\n        i += 1\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    i = 0\n    for i in range(1, n + 1):\n        i = i + i\n    return i\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (n*(n+1))/2\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count_open_brackets = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count_open_brackets += 1\n        elif count_open_brackets > 0:\n            count_open_brackets -= 1\n        else:\n            return False\n    return count_open_brackets == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    correct = True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    open_brackets = set(\"(\")\n    open_bracket = \"\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    bracket_count = 0\n    for char in brackets:\n        if char == '(':\n            bracket_count += 1\n        elif char == ')':\n            bracket_count -= 1\n            if bracket_count < 0:\n                return False\n    return bracket_count == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    bracket_stack = []\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # for i, char in enumerate(brackets):\n    #     if char == \"(\" and brackets[i + 1]!= \")\":\n    #         return False\n    # return True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            bracket_stack.append(bracket)\n        if bracket == ')':\n            try:\n                bracket_stack.pop()\n            except IndexError:\n                return False\n    if bracket_stack == []:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        if char == ')':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    brackets_lst = []\n    brackets_lst.extend(brackets)\n    \n    brackets_lst = [bracket for bracket in brackets_lst if bracket in \"()\"]\n    print(brackets_lst)\n    if brackets_lst:\n        brackets_lst = [bracket for bracket in brackets_lst if bracket in \"()\"]\n        if brackets_lst:\n            return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [i*j for i,j in zip(xs[1:], range(1, len(xs)))]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [x*i for i, x in enumerate(xs[1:], start=1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [i*j for i, j in zip(xs[1:], [k for k in range(1, len(xs))])]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    deriv = []\n    for i in range(1, len(xs)):\n        deriv.append(xs[i] * i)\n    return deriv\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    derivative = [0] * (len(xs) - 1)\n    for i in range(len(xs) - 1):\n        derivative[i] = xs[i + 1] * (i + 1)\n    return derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    derivative_coef = [0] * (len(xs) - 1)\n    for i in range(len(xs) - 1):\n        derivative_coef[i] = xs[i + 1] * (i + 1)\n    return derivative_coef\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in range(1, len(xs)):\n        xs[i] = i * xs[i]\n    return xs[1:]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    d_xs = []\n    for i in range(1, len(xs)):\n        d_xs.append(xs[i] * i)\n    return d_xs\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    derivative = []\n    for i in range(len(xs) - 1):\n        derivative.append(xs[i + 1] * (i + 1))\n    return derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i * j for i, j in zip(xs[1:], range(1, len(xs) - 1))]\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n < 3:\n        return n\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[-1] + fib[-2])\n    return fib[-1]\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n in {0, 1, 2}:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert type(n) == int, \"the argument must be an integer\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s = s.lower()\n    return s.count(\"a\") + s.count(\"e\") + s.count(\"i\") + s.count(\"o\") + s.count(\"u\") + s.count(\"y\")\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = \"aeiouy\"\n    vowels_count = 0\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # get all vowels and remove last if exists\n    vowels = set('aeiou')\n    return sum(c in vowels for c in s) - len(s) > 0\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # #\n    # # Write your code here.\n    # #\n    # vowels = ['a', 'e', 'i', 'o', 'u']\n    # total = 0\n    # for char in s:\n    #     if char in vowels:\n    #         total += 1\n    # return total\n    # #\n    # # Write your code here.\n    # #\n    # vowels = ['a', 'e', 'i', 'o', 'u']\n    # total = 0\n    # for char in s:\n    #     if char in vowels:\n    #         total += 1\n    #     if char == 'y':\n    #         total -= 1\n    # return total\n    # #\n    # # Write your code here.\n    # #\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    total = 0\n    for char in s:\n        if char in vowels:\n            total += 1\n        if char == 'y' and s[-1]!= 'y':\n            total -= 1\n    return total\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # vowels = 'aeiou'\n    # if s[-1] == 'y':\n    #     vowels += 'y'\n    # return sum(s[i] in vowels for i in range(len(s)))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for c in s:\n        if c in 'aeiouAEIOU':\n            count += 1\n    if count == len(s) - 1 and s[-1] == 'y':\n        count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for ch in s:\n        if ch in VOWELS:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for letter in s:\n        if letter in \"aeiouy\":\n            count += 1\n    return count\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if shift < 0:\n        return circular_shift(int(str(x)[::-1]), -shift)[::-1]\n    elif shift == 0:\n        return str(x)\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = str(x)[::-1]\n    shift = shift % len(s)\n    return s[shift:] + s[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift] if shift < len(str(x)) else str(x)[shift - len(str(x)):]\n    # or\n    # if shift < len(str(x)):\n    #     return str(x)[-shift:] + str(x)[:-shift]\n    # else:\n    #     return str(x)[shift - len(str(x)):]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = str(x)\n    if shift >= len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = str(x)\n    if shift > len(s):\n        return int(s[::-1])\n    else:\n        return int(s[-shift:] + s[:-shift])\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert isinstance(x, int), 'x is not an integer'\n    assert isinstance(shift, int),'shift is not an integer'\n    assert shift >= 0,'shift must be positive'\n    return str(x)[-shift:] + str(x)[:-shift] if shift < len(str(x)) else str(x)[-shift:][::-1]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    digits = \"0123456789\"\n    s = \"\"\n    for i in range(len(x)):\n        s += digits[(digits.index(x[i]) + shift) % 10]\n    return s\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if shift <= 0:\n        return str(x)\n    digits = len(str(x))\n    if shift > digits:\n        return str(x)[::-1]\n    return str(x)[:-shift] + str(x)[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Convert x to a string and reverse it\n    x_string = str(x)\n    x_reversed = x_string[::-1]\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sums = 0\n    for i in range(len(s)):\n        if 'A' <= s[i] <= 'Z':\n            sums += ord(s[i])\n    return sums\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([ord(s[i]) for i in range(len(s)) if ord(s[i]) in range(65, 91)])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    #I am not sure why this problem seems quite easy\n    #After all, it was given in the prompt that the input is lower case only,\n    #and must be in range(97,122)\n    return sum(map(ord,s.upper()))\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    total = 0\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                total += ord(i)\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # my solution\n    return sum([ord(i) for i in s if i.isupper()])\n    # shorter answer\n    # return sum([ord(i) for i in s if i.isupper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    upper = 0\n    for char in s:\n        if ord(char) < 91 and ord(char) > 64:\n            upper += ord(char)\n    return upper\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if s:\n        return sum([ord(i) for i in s if i.isalpha()])\n    return 0\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a = s.split(' ')\n    if a[0] == '0':\n        return 0\n    if n < int(a[0]):\n        return n\n    return n - int(a[0])\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return n - s.split(' ')[1]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return n - s.count(\"oranges\") - s.count(\"apples\")\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if s[0]==\"0\":\n        return 0\n    else:\n        if \"and\" in s:\n            s=s.split(\" and \")\n            s1=int(s[0])\n            s2=int(s[1])\n            if s1==0:\n                return 0\n            elif s1>0 and s2>0:\n                return s2-s1\n            elif s1>0 and s2<0:\n                return s2+s1\n            elif s1<0 and s2>0:\n                return s2-s1\n            elif s1<0 and s2<0:\n                return s2+s1\n            else:\n                return s2\n        elif \"-\" in s:\n            s=s.split(\" - \")\n            s1=int(s[0])\n            s2=int(s[1])\n            if s1<0 and s2>0:\n                return s2-s1\n            elif s1>0 and s2<0:\n                return s2+s1\n            else:\n                return s2\n        else:\n            return int(s)-int(s[0])\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # your code here\n    return n - int(s.split()[1]) - int(s.split()[0])\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if s==\"\" or n<=0:\n        return 0\n    strs = s.split(\" \")\n    print(strs)\n    apples = int(strs[0])\n    oranges = int(strs[1])\n    return oranges - apples - fruit_distribution(str(apples),apples)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # i've written a test function below to test your code. Feel free to test it out!\n    \ndef test_fruit_distribution():\n    assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\n    assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2\n    assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\n    assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 1"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return s.split(\" \")[0].split(\"and\")[1] - s.split(\" \")[1].split(\"and\")[0] - s.split(\" \")[2].split(\"and\")[0]\nif __name__ == \"__main__\":\n    print(fruit_distribution(\"5 apples and 6 oranges\", 19))\n    print(fruit_distribution(\"0 apples and 1 oranges\", 3))\n    print(fruit_distribution(\"2 apples and 3 oranges\", 100))\n    print(fruit_distribution(\"100 apples and 1 oranges\", 120)"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return n - int(s.split()[0]) - int(s.split()[1])\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not s or n == 0:\n        return 0\n    elif \"apples\" in s.lower():\n        return n - int(s[:s.index(\" \")])\n    elif \"oranges\" in s.lower():\n        return n - int(s[:s.index(\" \")]) - int(s[s.index(\" \")+1:])\n    elif \"mango\" in s.lower():\n        return n - int(s[:s.index(\" \")]) - int(s[s.index(\" \")+1:])\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    evens = [x for x in arr if x%2==0]\n    return [min(evens),arr.index(min(evens))] if evens else []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return []\n    else:\n        min_even = min(arr, key=lambda x: x % 2)\n        min_even_index = arr.index(min_even)\n        return [min_even, min_even_index]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    even_numbers = []\n    for index, val in enumerate(arr):\n        if val % 2 == 0:\n            even_numbers.append(val)\n    if not even_numbers:\n        return []\n    else:\n        return [min(even_numbers), arr.index(min(even_numbers))]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n    else:\n        return ["
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if arr:\n        return [arr[0], arr.index(arr[0])]\n    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # using a linked list and a counter\n    if len(arr) == 0:\n        return []\n    else:\n        smallest_even = None\n        smallest_even_index = None\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0 and (smallest_even is None or arr[i] < smallest_even):\n                smallest_even = arr[i]\n                smallest_even_index = i\n        return [smallest_even, smallest_even_index]\n    \nif __name__ == '__main__':\n    print(\"Pluck\")\n    print(pluck([4,2,3]))\n    print(pluck([1,2,3]))\n    print(pluck([5, 0, 3, 0, 4, 2]))\n    print(pluck([]))"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Solution 1:\n    # return [min(i for i in arr if i % 2 == 0), arr.index(min(i for i in arr if i % 2 == 0))] if arr else []\n    # Solution 2:\n    return sorted([i for i in arr if i % 2 == 0], key=lambda x: (x, -arr.index(x))) if arr else []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [ min( [n for n in arr if n % 2 == 0] ), min( [ n for n in arr if n % 2 == 0 ] ).index( min( [ n for n in arr if n % 2 == 0 ] ) ) ]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # array of even values and array of indices for the even values\n    even_values, even_indices = [], []\n    # for each node\n    for node_index in range(len(arr)):\n        # if the node is even\n        if arr[node_index] % 2 == 0:\n            # add the node's index to the array of even indices\n            even_indices.append(node_index)\n            # add the node's value to the array of even values\n            even_values.append(arr[node_index])\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    freq = {}\n    \n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    freq_max = max(freq.values())\n    freq_keys = [k for k,v in freq.items() if v == freq_max]\n    \n    if freq_max == 1:\n        return -1\n    else:\n        return max(freq_keys)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    dct = {}\n    for i in lst:\n        if i not in dct:\n            dct[i] = 1\n        else:\n            dct[i] += 1\n    for i in dct:\n        if dct[i] >= i:\n            return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    hash_lst = {}\n    greatest_int = -1\n    greatest_freq = -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) == 1:\n        return lst[0]\n    \n    d = dict()\n    for num in lst:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    \n    candidate = -1\n    for key, value in d.items():\n        if candidate == -1:\n            if value >= key:\n                candidate = key\n        else:\n            if key > candidate:\n                candidate = key\n    return candidate\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    maxi = -1\n    for i in lst:\n        if lst.count(i) >= i:\n            if i > maxi:\n                maxi = i\n    return maxi\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code here\n    lst.sort()\n    val = lst[-1]\n    count = 0\n    for i in lst:\n        if i == val:\n            count += 1\n        else:\n            break\n    return val if count >= val else -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return -1\n    # raise NotImplementedError()\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = {}\n    maxi = -1\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in count:\n        if count[i] >= maxi:\n            maxi = count[i]\n    for i in count:\n        if count[i] == maxi:\n            return i\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count_lst = [lst.count(i) for i in set(lst)]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(lst, reverse=True)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(lst) < 2:\n        return lst\n    lst = [lst[0]] + [lst[-1]] + lst[1:-1]\n    return strange_sort_list(lst)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    while lst:\n        min_num = min(lst)\n        result.append(min_num)\n        lst.remove(min_num)\n        max_num = max(lst)\n        result.append(max_num)\n        lst.remove(max_num)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(lst, key=min)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    new_list = []\n    # Split into sublists of equal values\n    list_of_lists = [lst[i::len(lst)] for i in range(len(lst))]\n    for sublist in list_of_lists:\n        # Sort the sublists and get the values in sorted order\n        sorted_list = sorted(sublist)\n        # Add the values to the final list\n        new_list += sorted_list\n    return new_list\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(lst, key=lambda x: -x)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    out = []\n    new_list = lst[:]\n    new_list.sort()\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    newlst = []\n    for i in range(len(lst)):\n        newlst.append(min(lst[i:]))\n        lst.remove(min(lst[i:]))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst = lst[:]\n    lst.sort()\n    lst.reverse()\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    min_lst = min(lst)\n    max_lst = max(lst)\n    final_lst = []\n    for i in range(4):\n        if i % 2 == 0:\n            final_lst.append(min_lst)\n            min_lst = max_lst\n            max_lst = max(lst)\n        else:\n            final_lst.append(max_lst)\n            max_lst = min_lst\n            min_lst = min(lst)\n    return final_lst\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a * a + b * b), 2) + round(math.sqrt(c * c + b * b), 2) + round(math.sqrt(a * a + c * c), 2)\n    else:\n        return -1\n    \ndef triangle_perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_perimeter(3, 4, 5) == 6.00\n    triangle_perimeter(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round(a + b + c, 2)\n    else:\n        return -1\n    \ndef right_triangle_a(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a right triangle. \n    Otherwise return -1\n    Three sides make a right triangle when a^2 + b^2 = c^2\n    Example:\n    right_triangle_a(3, 4, 5) == 6.00\n    right_triangle_a(1, 2, 10) == -1\n    '''\n    if a**2 + b**2 == c**2:\n        return round(math.sqrt(a * a + b * b), 2)\n    else:\n        return -1\n    \ndef right_triangle_b(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of\n    the triangle rounded to 2 decimal points if the three sides form a right triangle. \n    Otherwise return -1\n    Three sides make a right triangle when a^2 + b^2 = c^2\n    Example:\n    right_triangle_b(3, 4, 5) == 6.00\n    right_triangle_b(1, 2, 10) == -1\n    '''\n    if a**2 + b**2 == c**2:\n        return round(a + b + c, 2)\n    else:\n        return -1\n    \ndef equilateral(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form an equilateral triangle. \n    Otherwise return -1\n    Three sides make a equilateral triangle when all three sides are equal\n    Example:\n    equilateral(3, 4, 5) == 6.00\n    equilateral(1, 2, 10) == -1\n    '''\n    if a == b == c:\n        return round(math.sqrt(3) * a * a, 2)\n    else:\n        return -1\n    \ndef isosceles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form an isosceles triangle. \n    Otherwise return -1\n    Three sides make a isosceles triangle when two sides are equal and the third \n    side is different from the other two\n    Example:\n    isosceles(3, 3, 4) == 6.00\n    isosceles(1, 2, 10) == -1\n    '''\n    if a == b or b == c or c == a:\n        return round(math.sqrt(a * a + b * b), 2)\n    else:\n        return -1\n    \ndef scalene(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a scalene triangle. \n    Otherwise return -1\n    Three sides make a scalene triangle when all three sides are different\n    Example:\n    scalene(3, 4, 5) == 6.00\n    scalene(1"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if (a + b) > c and (b + c) > a and (a + c) > b:\n        return round((a * b * c) / (2 * ((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a)) ** (1/2)), 2)\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a + b > c and b + c > a and c + a > b:\n        p = (a + b + c)/2\n        return round(math.sqrt(p*(p - a)*(p - b)*(p - c)),2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    valid_triangle = False\n    if a + b > c:\n        valid_triangle = True\n    elif a + c > b:\n        valid_triangle = True\n    elif b + c > a:\n        valid_triangle = True\n    if valid_triangle:\n        area = round((a * b * c) ** 0.5, 2)\n    else:\n        area = -1\n    return area\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = (a + b + c) / 2\n    return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if a+b > c and a+c > b and b+c > a:\n        return round(0.5*(a*b+b*c+c*a), 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #first attempt\n    # try:\n    #     if a+b > c and a+c > b and b+c > a:\n    #         return round((a*b*c)/2, 2)\n    #     else:\n    #         return -1\n    # except TypeError:\n    #     print('Please only use numbers for the sides.')\n    #     return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a + b + c) / 2, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Check if the sum of any two sides is greater than the third side\n    if (a + b) < c or (a + c) < b or (b + c) < a:\n        return -1\n    else:\n        return round((a * b * c) ** 0.5 / 4, 2)"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if q == list(reversed(q)) and sum(q)<=w:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    if sum(q) <= w and is_balanced(q):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(q) <= w and q == q[::-1]\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    import numpy as np\n    # Use numpy to sort the list of items.\n    items = np.array(q)\n    # Use numpy to sort the list of items.\n    items_sorted = np.sort(items)\n    # Use the function numpy.isclose to determine if two floating point numbers are close to each other.\n    if np.isclose(items_sorted[-1] + items_sorted[0], w):\n        if np.isclose(np.sum(items_sorted), w):\n            return True\n    return False\n    # return np.isclose(np.sum(items_sorted), w) and np.isclose(items_sorted[-1] + items_sorted[0], w)\n    # Use numpy to add the sum of the sorted list of items to the minimum possible weight.\n    # Use the numpy.isclose function to determine if the minimum possible weight is close to the maximum possible weight.\n    # return np.isclose(np.sum(items_sorted), w) and np.isclose(np.sum(items_sorted), w)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if sum(q) <= w and is_palindromic(q):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(q)<=w and q==q[::-1]"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return (q == q[::-1]) and sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    q_max_value = max(q)\n    q_min_value = min(q)\n    q_length = len(q)\n    # if q_length <= w:\n    #     return False\n    # elif q_max_value + q_min_value > w:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    q=sorted(q, reverse=True)\n    return q==q[::-1] and sum(q)<=w\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Fill this in.\n    n = len(arr)\n    if not n:\n        return n\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    length = len(arr)\n    count = 0\n    for i in range(length):\n        for j in range(i, length):\n            if arr[i] == arr[j] and i!= j:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n    return count\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    arr_len = len(arr)\n    if arr_len == 0:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    total = 0\n    missing_num = find_missing(arr)\n    missing_occ = count_occurrences(arr, missing_num)\n    if len(missing_occ) == 1:\n        return missing_occ[0]\n    else:\n        total += missing_occ[0] * missing_occ[1]\n        total += missing_occ[0] * missing_occ[1]\n    return total\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Find the sum of the array\n    sum_arr = sum(arr)\n    # If the sum is odd, then we must do at least one change\n    if sum_arr % 2!= 0:\n        return 1\n    # Find the middle of the array\n    m = len(arr) // 2\n    # Find the sum of the left side\n    left_sum = 0\n    for i in range(m):\n        left_sum += arr[i]\n    # Find the sum of the right side\n    right_sum = 0\n    for i in range(m, len(arr)):\n        right_sum += arr[i]\n    # If the sum of the left side is different from the sum of the right side, then we need\n    # to do one change\n    if left_sum!= right_sum:\n        return 1\n    # Find the sum of the left side\n    # Left sum starts at m and ends at m-1\n    left_sum = 0\n    for i in range(m):\n        left_sum += arr[i]\n    # We can now use a recursive call to find the minimum number of changes to make the sum equal to the right sum\n    return smallest_change_helper(arr, left_sum, right_sum)\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Time: O(N)\n    # Space: O(N)\n    n = len(arr)\n    dp = [float('inf')] * n\n    dp[0] = 1\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    n = len(arr)\n    palindromes = set()\n    for i in range(n):\n        for j in range(n):\n            s = arr[i:j]\n            if s == s[::-1] and s not in palindromes:\n                palindromes.add(s)\n    return min([len(s) for s in palindromes])\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: Write your code here\n    n = len(arr)\n    counter = 0\n    for i in range(n):\n        if i < n-1 and arr[i]!=arr[n-1-i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return get_palindromic_count(arr)\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst1) > len(lst2):\n        lst = lst1\n        lst2 = lst2\n    elif len(lst2) > len(lst1):\n        lst = lst2\n    else:\n        lst = lst1\n    print(lst, lst2)\n    return [word for word in lst if len(word) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [lst1[i] for i in range(len(lst1)) if len(lst1[i]) <= len(lst2[i])]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # total = 0\n    # for a in lst1:\n    #     total = total + len(a)\n    # for b in lst2:\n    #     total = total - len(b)\n    # return lst1 if total > 0 else lst2\n    return [i for i in lst1 if len(i) < len(lst2)] if len(lst1) < len(lst2) else [i for i in lst2 if len(i) < len(lst1)"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [a for a in lst1 if len(a) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lst_min = lst1 if len(lst1) < len(lst2) else lst2\n    lst_max = lst1 if len(lst1) > len(lst2) else lst2\n    \n    return [lst_max[i] for i in range(len(lst_min)) if len(lst_max[i]) > len(lst_min[i])]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if lst1 == [] and lst2 == []:\n        return []\n    elif lst1 == [] or lst2 == []:\n        return lst1\n    else:\n        return lst1 if len(\"\".join(lst1)) < len(\"\".join(lst2)) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [item for item in lst1 if len(item) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    total = []\n    for i in lst1:\n        if len(i) < len(lst2):\n            total.append(i)\n    for j in lst2:\n        if len(j) < len(lst1):\n            total.append(j)\n    return total\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if a % 2 == 0:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(2, a):\n        if not is_prime(i):\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for x in range(2, a):\n        if (a % x == 0) and (is_prime(x)):\n            for y in range(2, a):\n                if (a % y == 0) and (is_prime(y)):\n                    for z in range(2, a):\n                        if (a % z == 0) and (is_prime(z)):\n                            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(2, int(a**0.5)):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if(a == 1):\n        return False\n    elif(a == 2):\n        return True\n    else:\n        for i in range(2, a):\n            if(is_prime(i) and is_prime(a // i)):\n                return True\n        return False\n    \ndef main():\n    \"\"\"\n    Runs the program.\n    \"\"\"\n    # Prompt user for a number, and initialize count, total and is_prime\n    number = int(input('Enter a number: '))\n    count = 0\n    total = 0\n    is_prime = True\n    # Call is_prime, and add is_prime to count\n    # if it is prime\n    for i in range(number):\n        if(is_prime(i)):\n            count += 1\n            total += i\n    # if the count is divisible by 3,\n    # print the result and stop running the loop\n    if(count % 3 == 0):\n        print('The sum of the', count, 'primes is', total)\n        return\n    # if the count is not divisible by 3,\n    # print the result and stop running the loop\n    else:\n        print('The sum of the', count, 'primes is', total)\n        return\n    \nmain()"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in range(2,int(a/3)):\n        if a%i!=0:\n            return False\n    return True\n    # return a%3==0 and is_prime(a//3) and is_prime(a//2) and is_prime(a//3)\n    # return is_prime(a//3) and is_prime(a//2) and is_prime(a//3)\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # from math import sqrt\n    # if a <= 100:\n    #     for i in range(2, int(sqrt(a))):\n    #         if a % i == 0:\n    #             return False\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(2, int(a**0.5)+1):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for p in prime_numbers:\n        if a % p == 0:\n            return True\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    #2**3 = 2^3 = 8\n    #2**4 = 2^4 = 16\n    #2**5 = 2^5 = 32\n    #2**6 = 2^6 = 64\n    #2**7 = 2^7 = 128\n    #2**8 = 2^8 = 256\n    #2**9 = 2^9 = 512\n    #2**10 = 2^10 = 1024\n    #2**11 = 2^11 = 2048\n    #2**12 = 2^12 = 4096\n    #2**13 = 2^13 = 8192\n    #2**14 = 2^14 = 16384\n    #2**15 = 2^15 = 32768\n    #2**16 = 2^16 = 65536\n    #2**17 = 2^17 = 131072\n    #2**18 = 2^18 = 262144\n    #2**19 = 2^19 = 524288\n    #2**20 = 2^20 = 1048576\n    #2**21 = 2^21 = 2097152\n    #2**22 = 2^22 = 4194304\n    #2**23 = 2^23 = 8388608\n    #2**24 = 2^24 = 16777216\n    #2**25 = 2^25 = 33554432\n    #2**26 = 2^26 = 67108864\n    #2**27 = 2^27 = 134217728\n    #2**28 = 2^28 = 268435456\n    #2**29 = 2^29 = 536870912\n    #2**30 = 2^30 = 1073741824\n    #2**31 = 2^31 = 2147483648\n    #2**32 = 2^32 = 4294967296\n    #2**33 = 2^33 = 8589934592\n    #2**34 = 2^34 = 17179869184\n    #2**35 = 2^35 = 34359738368\n    #2**36 = 2^36 = 68719476736\n    #2**37 = 2^37 = 137438953472\n    #2**38 = 2^38 = 274877906944\n    #2**39 = 2^39 = 549755813888\n    #2**40 = 2^40 = 1099511627776\n    #2**41 = 2^41 = 2199023255552\n    #2**42 = 2^42 = 4398046511104\n    #2**43 = 2^43 = 8796093022208\n    #2**44 = 2^44 = 17592186044416\n    #2**45 = 2^45 = 35184372088832\n    #2**46 = 2^46 = 70368744177696\n    #2**47 = 2^47 = 140737488355328\n    #2**48 = 2^48 = 281474976710656\n    #2**49 = 2^49 = 562949953421312\n    #2**50 = 2^50 = 1125899906842624\n    #2**51 = 2^51 = 2251799813685248\n    #2**52 = 2^52 = 4503599627370496\n    #2**53 = 2^53 = 9007199254740992\n    #2**54 = 2^54 = 18014398509481984\n    #2**55 = 2^55 = 36028797018963968\n    #2**56 = 2^56 = 72057594037927936\n    #2**57 = 2^57 = 144115188075855872\n    #2**58 = 2^58 = 288230376151711744\n    #2**59 = 2^59 = 56410256410256\n    #2**60 = 2^60 = 11259375\n    #2**61 = 2^61 = 225342113037149536\n    #2**62 = 2^62 = 456701886081182824\n    #2**63 = 2^63 = 9007199254740991\n    #2**64 = 2^64 = 18014398509481985\n    #2**65 = 2^65 = 36028797018963968\n    #2**66 = 2^66 = 72057594037927936\n    #2**67 = 2^67 = 144115188075855872\n    #2**68 = 2^68 = 2"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if x == n or x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        x = int(x)\n        return x % n == 0\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if x == n:\n        return True\n    elif x == 1:\n        return False\n    else:\n        if n % 2 == 0:\n            return is_simple_power(x, n / 2)\n        elif n % 3 == 0:\n            return is_simple_power(x, n / 3)\n        elif n % 5 == 0:\n            return is_simple_power(x, n / 5)\n        else:\n            return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return n**int(x**(1/n))==x\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # looping from 0 to n to check if x is equal to n**i\n    for i in range(0, n):\n        if x == n**i:\n            return True\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x == n ** int(n)"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x % n == 0 and x!= n\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    while x % n == 0 and x!= 0:\n        x = x / n\n    if x == 1:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return a>0 and round(a**(1/3))**3==a\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if(a>0 and a**(1/3)%1==0):\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a**(1/3)%1==0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return a ** (1 / 3) % 1 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return a**3==a*a*a\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a**3 > 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return a >= 0 and a**(1./3.) % 1. == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return a**(1/3) == round(a**(1/3))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(1,a):\n        if i ** 3 == a:\n            return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if a < 0:\n        return a % -3 == 0\n    else:\n        return a % 3 == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    num = num.upper()\n    count = 0\n    for i in num:\n        if i == '2':\n            count += 1\n        elif i == '3':\n            count += 1\n        elif i == '5':\n            count += 1\n        elif i == '7':\n            count += 1\n        elif i == 'B':\n            count += 1\n        elif i == 'D':\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    count = 0\n    for i in range(len(num)):\n        try:\n            if int(num[i:i+2], 16) in primes:\n                count += 1\n        except:\n            return count\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    num = num.upper()\n    n = 0\n    for c in num:\n        if c in 'ABCDEF':\n            n += 1\n    return n\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    import math\n    prime_list = []\n    for i in range(1,10):\n        prime_list.append(i)\n    for i in range(10, int(math.sqrt(num)) + 1):\n        if i in prime_list:\n            for j in range(i*i, num + 1, i):\n                if j in prime_list:\n                    prime_list.remove(j)\n    return len(prime_list)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    import string\n    lst = list(string.ascii_uppercase)\n    num = list(num)\n    num.sort()\n    n = 0\n    for x in num:\n        if x in lst:\n            if x == 'A' or x == 'B':\n                n += 1\n            if x == 'C':\n                n += 1\n            if x == 'D':\n                n += 1\n            if x == 'E':\n                n += 1\n            if x == 'F':\n                n += 1\n    return n\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # your code here\n    list_of_hex = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F']\n    list_of_primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n    num_of_primes = 0\n    for digit in num:\n        digit = int(digit)\n        if digit in list_of_primes:\n            num_of_primes += 1\n    return num_of_primes\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    import string\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    num = num.upper()\n    count = 0\n    for i in num:\n        if i in 'ABCDEF':\n            if int(i, 16) > 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    digit_list = []\n    for d in num:\n        digit_list.append(d)\n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    prime_counter = 0\n    result = []\n    for d in digit_list:\n        if int(d) in primes:\n            prime_counter += 1\n            result.append(d)\n    \n    if prime_counter < 4:\n        return 0\n    \n    return prime_counter"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not isinstance(num, str):\n        raise TypeError(\"Please enter a string\")\n    if len(num) == 0:\n        raise ValueError(\"Please enter a string\")\n    num = num.upper()\n    count_primes = 0\n    if 'A' in num or 'B' in num or 'C' in num or 'D' in num or 'E' in num or 'F' in num:\n        count_primes = num.count('A') + num.count('B') + num.count('C') + num.count('D') + num.count('E') + num.count('F')\n    digits = {'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, 'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0}\n    count_digit_primes = 0\n    for i in range(len(num)):\n        if num[i] in digits.keys():\n            if is_prime(int(num[i])) == True:\n                count_digit_primes += 1\n            digits[num[i]] += 1\n    return count_digit_primes - count_primes\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    binary = \"\"\n    binary += \"db\"\n    while decimal > 0:\n        binary += str(decimal%2)\n        decimal = decimal//2\n    binary += \"db\"\n    return binary[::-1]\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return f\"db{bin(decimal)[2:]}db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 'db' + bin(decimal)[2:] + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"db\" + str(decimal).zfill(8) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 'db' + bin(decimal)[2:] + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Implement the function here. You should not change the functions parameters.\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"db\" + \"\".join(\"{:08b}\".format(decimal)) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    binary = []\n    while decimal >= 1:\n        remainder = decimal % 2\n        binary.append(str(remainder))\n        decimal = decimal // 2\n    binary.append('db')\n    binary.reverse()\n    return ''.join(binary)\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    binary = ''\n    for i in range(0, 8):\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n    return 'db'+binary[::-1]+'db'\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(s)>=3 and not is_repetition(s)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    hashmap = {}\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return True\n        else:\n            if s[i] not in hashmap:\n                hashmap[s[i]] = 1\n            else:\n                hashmap[s[i]] += 1\n    return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(s) >= 3:\n        if len(set(s)) == len(s):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(s) < 3:\n        return False\n    d = {}\n    while len(s) > 0:\n        try:\n            d[s[0]] += 1\n        except KeyError:\n            d[s[0]] = 1\n        s = s[1:]\n    if len(d) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(s) < 3: return False\n    visited = set()\n    while True:\n        l = len(visited)\n        for i in range(0, len(s)-3, 3):\n            if s[i] == s[i+1] and s[i+1] == s[i+2] and s[i]!= s[i+2]:\n                visited.add(s[i:i+3])\n        if len(visited) == l: return False\n        if len(visited) == len(s): return True\n        s = ''.join(sorted(s))\n        \nif __name__ == \"__main__\":\n    print(is_happy(\"xababcdcdababcdcd\"))\n    print(is_happy(\"abababab\"))\n    print(is_happy(\"abcc\"))\n    print(is_happy(\"abb\"))\n    print(is_happy(\"aaa\"))"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    a = set(s)\n    if len(a) < 3:\n        return False\n    else:\n        return sum(list(map(lambda x: int(x)**2, s[:3]))) == sum(list(map(lambda x: int(x)**2, s[1:4])))"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # check if length is 3 and every 3 consecutive letters are distinct\n    s = s.lower()\n    if len(s) < 3:\n        return False\n    # check if string is happy\n    return True if len(set(s[i:i+3] for i in range(0, len(s), 3))) == len(s)/3 else False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def is_duplicate(s):\n        return len(set(s)) < len(s)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(s) < 3:\n        return False\n    else:\n        check_s = set()\n        for i in s:\n            if i in check_s:\n                return False\n            else:\n                check_s.add(i)\n        return True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(s) < 3:\n        return False\n    elif len(s) == 3:\n        return True\n    else:\n        if len(s) % 3 == 0:\n            happys = 3\n        else:\n            happys = len(s) % 3\n        print(happys)\n        lst = []\n        for i in range(len(s)):\n            if i % 3 == 0:\n                lst.append(s[i])\n        print(lst)\n        if len(set(lst)) == happys:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return [('A+' if x >= 4.0 else 'A' if x >= 3.7 else 'A-' if x >= 3.3 else 'B+' if x >= 3.0 else 'B' if x >= 2.7 else 'B-' if x >= 2.3 else 'C+' if x >= 2.0 else 'C' if x >= 1.7 else 'C-' if x >= 1.3 else 'D+' if x >= 1.0 else 'D' if x >= 0.7 else 'D-' if x >= 0.0 else 'E' if x >= 0 else 'F') for x in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    output = []\n    for grade in grades:\n        if grade >= 4:\n            output.append('A+')\n        elif 3.7 >= grade >= 4:\n            output.append('A')\n        elif 3.3 >= grade >= 3.7:\n            output.append('A-')\n        elif 3 >= grade >= 3.3:\n            output.append('B+')\n        elif 2.7 >= grade >= 3:\n            output.append('B')\n        elif 2.3 >= grade >= 2.7:\n            output.append('B-')\n        elif 2 >= grade >= 2.3:\n            output.append('C+')\n        elif 1.7 >= grade >= 2:\n            output.append('C')\n        elif 1.3 >= grade >= 1.7:\n            output.append('C-')\n        elif 1 >= grade >= 1.3:\n            output.append('D+')\n        elif 0.7 >= grade >= 1:\n            output.append('D')\n        elif 0.0 >= grade >= 0.7:\n            output.append('D-')\n        elif 0 >= grade >= 0.0:\n            output.append('E')\n    return output\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not isinstance(grades, list):\n        raise TypeError(\"Wrong data type\")\n    if not grades:\n        raise ValueError(\"No grades\")\n    for i in grades:\n        if not isinstance(i, float):\n            raise TypeError(\"Wrong data type\")\n    res = []\n    for i in grades:\n        if i >= 4.0:\n            res.append('A+')\n        elif 3.7 > i >= 4.0:\n            res.append('A')\n        elif 3.3 > i >= 3.7:\n            res.append('A-')\n        elif 3.0 > i >= 3.3:\n            res.append('B+')\n        elif 2.7 > i >= 3.0:\n            res.append('B')\n        elif 2.3 > i >= 2.7:\n            res.append('B-')\n        elif 2.0 > i >= 2.3:\n            res.append('C+')\n        elif 1.7 > i >= 2.0:\n            res.append('C')\n        elif 1.3 > i >= 1.7:\n            res.append('C-')\n        elif 1.0 > i >= 1.3:\n            res.append('D+')\n        elif 0.7 > i >= 1.0:\n            res.append('D')\n        elif 0.0 > i >= 0.7:\n            res.append('D-')\n        elif 0.0 >= i >= 0.0:\n            res.append('E')\n        else:\n            raise ValueError(\"No grades\")\n    return res\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #Initalize the list\n    grade_list = []\n    #Loop through the length of the list\n    for i in range(len(grades)):\n        #Check if the element is a float\n        if type(grades[i]) == float:\n            #If it is, calculate the letter grade\n            letter_grade = calculate_letter_grade(grades[i])\n            #Add the letter grade to the list\n            grade_list.append(letter_grade)\n    #Return the list of the letter grades\n    return grade_list\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    grades = [x if x >= 4 else 0 for x in grades]\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    result = []\n    for g in grades:\n        for i in range(len(letter_grades)):\n            if g >= i + 1:\n                result.append(letter_grades[i])\n                break\n    return result\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    grades = [\n    4.0,\n    3.7,\n    3.3,\n    3.0,\n    2.7,\n    2.3,\n    2.0,\n    1.7,\n    1.3,\n    1.0,\n    0.7,\n    0.0,\n    0.0,\n    ]\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F']\n    letter_grades_df = pd.DataFrame(zip(grades, letter_grades), columns=['grades', 'letter_grades'])\n    grades_df = pd.DataFrame(zip(grades, letter_grades), columns=['grades', 'letter_grades'])\n    letter_grades_df = letter_grades_df.sort_values(by='grades', ascending=False)\n    grades_df = grades_df.sort_values(by='grades', ascending=False)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #list comprehension\n    grades = [round(x, 2) for x in grades]\n    A_plus = [x for x in grades if x >= 4.0]\n    A = [x for x in grades if x > 3.7 and x < 4.0]\n    A_minus = [x for x in grades if x >= 3.3 and x < 3.7]\n    B_plus = [x for x in grades if x > 2.7 and x < 3.3]\n    B = [x for x in grades if x > 2.3 and x < 2.7]\n    B_minus = [x for x in grades if x >= 1.7 and x < 2.3]\n    C_plus = [x for x in grades if x >= 1.0 and x < 1.7]\n    C = [x for x in grades if x > 0.7 and x < 1.0]\n    C_minus = [x for x in grades if x >= 0.0 and x < 0.7]\n    D_plus = [x for x in grades if x >= 0.0 and x < 0.7]\n    D = [x for x in grades if x < 0.0]\n    return ['A+' if x >= 4.0 else 'A' if x >= 3.7 and x < 4.0 else 'A-' if x >= 3.3 and x < 3.7 else 'B+' if x >= 2.7 and x < 3.3 else 'B' if x >= 2.3 and x < 2.7 else 'B-' if x >= 1.7 and x < 2.3 else 'C+' if x >= 1.0 and x < 1.7 else 'C' if x >= 0.7 and x < 1.0 else 'C-' if x >= 0.0 and x < 0.7 else 'D+' if x >= 0.0 and x < 0.7 else 'D' if x < 0.0 else 'D-' for x in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    output = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            output.append(\"A+\")\n        elif gpa >= 3.7:\n            output.append(\"A\")\n        elif gpa >= 3.3:\n            output.append(\"A-\")\n        elif gpa >= 3.0:\n            output.append(\"B+\")\n        elif gpa >= 2.7:\n            output.append(\"B\")\n        elif gpa >= 2.3:\n            output.append(\"B-\")\n        elif gpa >= 2.0:\n            output.append(\"C+\")\n        elif gpa >= 1.7:\n            output.append(\"C\")\n        elif gpa >= 1.3:\n            output.append(\"C-\")\n        elif gpa >= 1.0:\n            output.append(\"D+\")\n        elif gpa >= 0.7:\n            output.append(\"D\")\n        elif gpa >= 0.0:\n            output.append(\"D-\")\n        else:\n            output.append(\"E\")\n    return output\n    \ndef main():\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 0.0])\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [chr(i) if i >= 65 and i <= 90 else chr(i) if i >= 97 and i <= 122 else chr(i) if i == 10 else 'E' for i in range(75) if 4.0 <= i < 5.0 or 4.5 <= i < 5.5 or 3.0 <= i < 3.5 or 2.0 <= i < 2.5 or 1.0 <= i < 1.5]]\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(string) == 0:\n        return False\n    elif len(string) == 1:\n        return True\n    elif len(string) % 2 == 0:\n        return False\n    else:\n        i = 2\n        while i <= int(len(string) ** 0.5):\n            if int(len(string) ** 0.5) % i == 0:\n                return False\n            i += 1\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Find prime numbers\n    if prime_check(len(string)):\n        return True\n    return False"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(string) in [x for x in range(2,int(len(string)/2) + 1) if len(string) % x == 0]\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len(string) in (4, 6, 8, 9, 11, 13)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 1\n    for i in string:\n        count += 1\n    return count == len(string)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    num_of_letters = len(string)\n    return num_of_letters in prime_set\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(string) > 1:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n        return True\n    else:\n        return False\n    \ndef count_letter(string):\n    \"\"\"Write a function that takes a string and returns a dictionary\n    containing the frequency of each letter in the string\n    Examples\n    count_letter('hello') == {'h':1, 'e':1, 'l':2, 'o':1}\n    count_letter('banana') == {'b':1, 'a':3, 'n':2}\n    \"\"\"\n    pass\n    dict_letters = {}\n    for i in string:\n        if i in dict_letters:\n            dict_letters[i] += 1\n        else:\n            dict_letters[i] = 1\n    return dict_letters\n    \ndef reverse_string(string):\n    \"\"\"Write a function that takes a string and returns a reversed version of it\n    Examples\n    reverse_string('hello') == 'olleh'\n    reverse_string('abcdcba') == 'baacdcd'\n    \"\"\"\n    rev_str = ''\n    for i in range(len(string)):\n        rev_str += string[len(string)-1 -i]\n    return rev_str\n    \ndef solve_knapsack(items, capacity):\n    \"\"\"Write a function that takes an array of items and a capacity of the knapsack\n    and returns the maximum value that can be obtained by putting items in the\n    knapsack one after the other\n    Examples\n    solve_knapsack([('a', 4, 3), ('b', 2, 2), ('c', 3, 4), ('d', 2, 1), ('e', 3, 1)], 5) == 10\n    solve_knapsack([('a', 4, 3), ('b', 2, 2), ('c', 3, 4), ('d', 2, 1), ('e', 3, 1)], 4) == 7\n    solve_knapsack([('a', 4, 3), ('b', 2, 2), ('c', 3, 4), ('d', 2, 1), ('e', 3, 1)], 0) == 0\n    \"\"\"\n    pass\n    weight = 0\n    value = 0\n    if items == []:\n        return 0\n    for item in items:\n        weight += item[1]\n        value += item[2]\n        if weight > capacity:\n            value -= item[2]\n            weight -= item[1]\n    return value\n    \ndef prefix_suffix(string):\n    \"\"\"Write a function that returns a list of all the prefix and suffix\n    pairs of a string\n    Examples\n    prefix_suffix('banana') == [('', 'banana'), ('b', 'anana'), ('ba', 'nana'), ('ban', 'ana'), ('bana', 'a'), ('banana', ''), ('a', 'banana'), ('an', 'a'), ('ana', 'a'), ('n', 'a'), ('a', 'n'), ('', 'n'), ('n', '')]\n    \"\"\"\n    pass\n    prefix_suffix_list = []\n    for i in range(len(string)+1):\n        if i == 0:\n            prefix_suffix_list.append((string[i:], string))\n        else:\n            prefix_suffix_list.append((string[:i], string))\n    return prefix_suffix_list\n    \ndef is_unique(string):\n    \"\"\"Write a function that checks if a string has all unique characters or not\n    Examples\n    is_unique('apple') == False\n    is_unique('banana') == True\n    is_unique('tesla') == False\n    \"\"\"\n    pass\n    unique_chars = []\n    for i in string:\n        if i in unique_chars:\n            return False\n        else:\n            unique_chars.append(i)\n    return True\n    \ndef is_permutation(string_1, string_2):\n    \"\"\"Write a function that checks if two strings are a permutation of each other or not\n    Examples\n    is_permutation('abcd', 'dcba') == True\n    is_permutation('bcd', 'dac') == False\n    is_permutation('a', 'a') == True\n    \"\"\"\n    pass\n    if len(strin"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO Write code to determine if string length is prime\n    if len(string) == 1 or len(string) == 2:\n        return True\n    else:\n        for i in range(2,len(string)):\n            if len(string) % i == 0:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len(string) == len(set(string))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    if n == 1:\n        count = 1\n    else:\n        for i in range(10**(n-1), 10**n):\n            if str(i)[0] == \"1\" or str(i)[-1] == \"1\":\n                count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n < 1:\n        return 0\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(starts_ends_digit_one_count(n, i) for i in range(10))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert is_digit(n)\n    if n < 1:\n        return 0\n    return count_helper(n, 1)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # base case\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(1, 10 ** n - 1):\n        string = str(i)\n        if string[0] == \"1\" or string[-1] == \"1\":\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #if n == 1:\n    #    return 2\n    #else:\n    #    return starts_one_ends(n-1) + ends_one_ends(n-1)\n    #for x in range(2, n):\n    #    print(x, n, n-1)\n    #    if x == 1:\n    #        return 2\n    #    else:\n    #        return starts_one_ends(x) + ends_one_ends(x)\n    dp = [0] * (n + 1)\n    dp[1] = 2\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return starts_one_ends(n-1) + 10**(n-1) - 2 * (10**(n-2)) + 1\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 9\n    return 9*(9**(n-1))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return starts_one_ends(n-1) + starts_one_ends(n-1) + ends_one(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = N\n    sum = 0\n    while n > 0:\n        sum += n%2\n        n /= 2\n    return str(sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    ans = []\n    while N > 0:\n        ans.append(N % 2)\n        N = N // 2\n    \n    return \"\".join([str(num) for num in ans[::-1]])\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if N == 0:\n        return \"0\"\n    s = str(N % 2)\n    return solve(N // 2) + s"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return ''.join(bin(N)[2:].zfill(4))\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    res = [0] * 10001\n    for i in range(1, N + 1):\n        res[i] = int(bin(i)[2:])\n    return str(res[N])\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    if N <= 0:\n        return None\n    \n    s = ''\n    n = N\n    \n    while n >= 1:\n        s += str(n % 2)\n        n = n // 2\n    \n    return s[::-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # create string of base 2 of N\n    binary_number = str(bin(N))[2:]\n    # convert to integer\n    binary_number = int(binary_number)\n    # calculate sum of digits\n    sum = 0\n    for x in str(binary_number):\n        sum += int(x)\n    return sum\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return str(bin(N)[2:])[::-1].replace(\"1\",\"#\").replace(\"0\",\" \").replace(\"#\",\"1\")\n        \nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147)"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return str(sum(int(i) for i in bin(N)[2:]))\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return bin(N)[2:]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a = []\n    for i in range(0, len(lst), 2):\n        a.append(lst[i])\n    return sum(a)\n    \n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    print([x for x in lst if x%2!=0 and lst.index(x)%2==1])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    return sum([lst[i] for i in range(1, len(lst), 2)])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i % 2!= 0])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    even_indices = [idx for idx in range(1,len(lst),2)]\n    odd_indices = [idx for idx in range(0,len(lst),2)]\n    return sum(lst[i] for i in even_indices if i in odd_indices)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(0,len(lst)):\n        if i%2!= 0 and lst[i] %2 == 0:\n            result.append(lst[i])\n    print(result)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sum = 0\n    for i in lst[::2]:\n        sum += i\n    return sum\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    i = 1\n    total = 0\n    while i <= len(lst):\n        if i % 2 == 1:\n            total += lst[i-1]\n        i += 1\n    return total\nprint(add([4, 2, 6, 7]))\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    i = 0\n    while(i<len(lst)):\n        if i%2!=0:\n            lst[i]+=1\n        i+=1\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return lst[::2]\n    \n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s = re.sub(r\"\\s+\", \" \", s)\n    s = re.sub(r'[^0-9a-zA-Z ]', '', s)\n    s = \"\".join(sorted(s, key=str.lower))\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # your code here\n    s = s.split()\n    s = sorted(s, key = lambda c: ord(c))\n    s = ''.join(s)\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return''.join(sorted(s.split(' '), key=lambda x: ''.join(sorted(x))))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l = s.split()\n    d = {i:ord(i) for i in l}\n    return''.join(sorted(l, key = lambda i:d[i]))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: ''.join(sorted(x))))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    words = s.split()\n    new_s = ''\n    for word in words:\n        new_s += ''.join(sorted(word)) +''\n    return new_s[:-1]\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return''.join(sorted(s.split(' '), key=str.lower))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    res = []\n    arr = s.split()\n    for word in arr:\n        for char in word:\n            res.append(char)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s_arr = s.split()\n    s_arr.sort()\n    return''.join(s_arr)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    sorted_rows = sorted(lst)\n    for i in range(len(lst)):\n        if lst[i] == []:\n            continue\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: x[0])\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n    \ndef get_row_by_columns(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, row), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column in descending order.\n    \n    Examples:\n    get_row_by_columns([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 1), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)]\n    get_row_by_columns([], 1) == []\n    get_row_by_columns([[], [1], [1, 2, 3]], 3) == [(1, 2), (1, 1), (3, 2)]\n    \"\"\"\n    pass\n    \ndef get_line_by_rows(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row in descending order.\n    \n    Examples:\n    get_line_by_rows([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2)]\n    get_line_by_rows([], 1) == []\n    get_line_by_rows([[], [1], [1, 2, 3]], 3) == [(1, 3), (1, 2), (3, 3)]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    output = []\n    lst.sort(key=len, reverse=True)\n    for i in range(len(lst)):\n        if x in lst[i]:\n            for j in range(len(lst[i]) - 1, -1, -1):\n                if lst[i][j] == x:\n                    output.append((i, j))\n    return output\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst_copy = lst[:]\n    lst_copy.sort()\n    coordinates = []\n    for index, row in enumerate(lst_copy):\n        if x in row:\n            coordinates.append(tuple((index, row.index(x))))\n    return sorted(coordinates, key=lambda x: x[0])\n    # return sorted(coordinates, key=lambda x: x[0], reverse=True)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    result = []\n    rows = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n        rows.append((i, len(row)))\n    \n    result = sorted(result, key=lambda x: x[0])\n    rows = sorted(rows, key=lambda x: x[0], reverse=True)\n    result = sorted(result, key=lambda x: x[1], reverse=True)\n    \n    for i, (row, num_cols) in enumerate(rows):\n        result.insert(i, (row, 0))\n        for j in range(num_cols):\n            result.insert(i+1, (row, j+1))\n    \n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Start coding from here\n    # list of rows\n    rows = []\n    # list of tuples, for each row\n    row_tuples = []\n    \n    # iterate over the rows\n    for i, sublist in enumerate(lst):\n        # iterate over the columns\n        for j, element in enumerate(sublist):\n            # if the element is equal to x, append it to list of rows\n            if element == x:\n                rows.append(i)\n                row_tuples.append((i, j))\n                \n    # sort the rows\n    rows.sort()\n    # sort the row tuples by the second index in ascending order\n    row_tuples.sort(key = lambda x: x[1])\n    \n    # return the list of row tuples\n    return row_tuples\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if lst == []:\n        return []\n    else:\n        # '*' is the multiplication of two lists, thus we can \n        # run the outermost list for number of times required by the \n        # inner list.\n        lst = [[x for x in range(len(lst[0]))] for i in range(len(lst))]\n        ret_lst = []\n        # find the row\n        for i in range(len(lst)):\n            if x in lst[i]:\n                ret_lst.append((i, lst[i].index(x)))\n        # sort rows in ascending order\n        ret_lst.sort(key=lambda tup: (tup[0], -tup[1]))\n        # sort the coordinates in the same row by descending order of columns\n        return [tup for tup in sorted(ret_lst, key=lambda tup: (-tup[1], tup[0]))]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    ret = []\n    for i, row in enumerate(lst):\n        if x in row:\n            ret.append((i, row.index(x)))\n    ret.sort(key = lambda x: x[0])\n    ret.sort(key = lambda x: -x[1])\n    return ret\n    \n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    res = []\n    for i, row in enumerate(lst):\n        if x in row:\n            res.append((i, row.index(x)))\n    return sorted(res)"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    result = []\n    \n    # traverse the list\n    for i in range(0, len(lst)):\n        # traverse list's items\n        for j in range(0, len(lst[i])):\n            # append (row, column) to the result\n            if lst[i][j] == x:\n                result.append((i, j))\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(array) <= 1:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return array.sort()\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # base case\n    if not array:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(array) <= 1:\n        return array\n    return array if sum(array[0], array[-1]) % 2 == 0 else sorted(array, reverse=True)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # check empty array\n    if not array:\n        return []\n    # sort the array\n    sorted_array = sorted(array)\n    # return sorted array\n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return array[0]\n    else:\n        if (sum(array[0], array[-1])) % 2:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(array) <= 1:\n        return array\n    return sort_array_helper(array, 0, len(array) - 1)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not len(array):\n        return []\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return array.sort()\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s = s.lower()\n    new_s = ''\n    for i in s:\n        if i in abc:\n            new_s += abc[(abc.index(i) + 2 * 2) % 26]\n        else:\n            new_s += i\n    return new_s\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    letters = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet = ''\n    \n    for i in range(26):\n        alphabet += letters[i*2:] + letters[:i*2]\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return \"\".join(chr(ord(s[i]) + ord(s[i + 1]) - 2 * ord('a')) for i in range(0, len(s) - 1, 2))\n    new = []\n    for i in range(0, len(s) - 1, 2):\n        new.append(chr((ord(s[i]) + ord(s[i + 1]) - 2 * ord('a')) % 26 + ord('a')))\n        new.append(chr((ord(s[i]) + ord(s[i + 1]) - 2 * ord('a')) % 26 + ord('a')))\n    return \"\".join(new)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    encryption = \"\"\n    # Add your code here\n    return encryption\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    def encrypt_helper(letter):\n        \"\"\"Create a helper function for encrypt. This function takes \n        a letter in the string as an argument and returns the letter \n        shifted two places down the alphabet\"\"\"\n        \n        lower_case_letter = letter.lower()\n        if lower_case_letter in alphabet:\n            new_position = alphabet.index(lower_case_letter) + 2\n            return alphabet[new_position]\n        else:\n            return letter\n        \n    encrypted_string = ''\n    for letter in s:\n        encrypted_string += encrypt_helper(letter)\n        \n    return encrypted_string\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    key = 2\n    res = []\n    for ch in s:\n        res.append(alphabet[alphabet.find(ch) + key])\n    return \"\".join(res)\n    "
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    def encrypt(s):\n        s = s.lower()\n        enc = []\n        for i in s:\n            enc.append(alphabet[(alphabet.find(i) + 2) % 26])\n        return ''.join(enc)\n    return encrypt\n    \nprint(encrypt('hi') == 'lm')\nprint(encrypt('asdfghjkl') == 'ewhjklnop')\nprint(encrypt('gf') == 'kj')\nprint(encrypt('et') == 'ix')\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    ## Your Code Here\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def encrypt(s):\n        letters = \"abcdefghijklmnopqrstuvwxyz\"\n        letters_2 = letters[2:] + letters[:2]\n        letters_3 = letters_2[2:] + letters_2[:2]\n        letters_4 = letters_3[2:] + letters_3[:2]\n        letters_5 = letters_4[2:] + letters_4[:2]\n        letters_6 = letters_5[2:] + letters_5[:2]\n        letters_7 = letters_6[2:] + letters_6[:2]\n        letters_8 = letters_7[2:] + letters_7[:2]\n        letters_9 = letters_8[2:] + letters_8[:2]\n        letters_10 = letters_9[2:] + letters_9[:2]\n        letters_11 = letters_10[2:] + letters_10[:2]\n        letters_12 = letters_11[2:] + letters_11[:2]\n        letters_13 = letters_12[2:] + letters_12[:2]\n        letters_14 = letters_13[2:] + letters_13[:2]\n        letters_15 = letters_14[2:] + letters_14[:2]\n        letters_16 = letters_15[2:] + letters_15[:2]\n        letters_17 = letters_16[2:] + letters_16[:2]\n        letters_18 = letters_17[2:] + letters_17[:2]\n        letters_19 = letters_18[2:] + letters_18[:2]\n        letters_20 = letters_19[2:] + letters_19[:2]\n        letters_21 = letters_20[2:] + letters_20[:2]\n        letters_22 = letters_21[2:] + letters_21[:2]\n        letters_23 = letters_22[2:] + letters_22[:2]\n        letters_24 = letters_23[2:] + letters_23[:2]\n        letters_25 = letters_24[2:] + letters_24[:2]\n        letters_26 = letters_25[2:] + letters_25[:2]\n        letters_27 = letters_26[2:] + letters_26[:2]\n        letters_28 = letters_27[2:] + letters_27[:2]\n        letters_29 = letters_28[2:] + letters_28[:2]\n        letters_30 = letters_29[2:] + letters_29[:2]\n        letters_31 = letters_30[2:] + letters_30[:2]\n        letters_32 = letters_31[2:] + letters_31[:2]\n        letters_33 = letters_32[2:] + letters_32[:2]\n        letters_34 = letters_33[2:] + letters_33[:2]\n        letters_35 = letters_34[2:] + letters_34[:2]\n        letters_36 = letters_35[2:] + letters_35[:2]\n        letters_37 = letters_36[2:] + letters_36[:2]\n        letters_38 = letters_37[2:] + letters_37[:2]\n        letters_39 = letters_38[2:] + letters_38[:2]\n        letters_40 = letters_39[2:] + letters_39[:2]\n        letters_41 = letters_40[2:] + letters_40[:2]\n        letters_42 = letters_41[2:] + letters_41[:2]\n        letters_43 = letters_42[2:] + letters_42[:2]\n        letters_44 = letters_43[2:] + letters_43[:2]\n        letters_45 = letters_44[2:] + letters_44[:2]\n        letters_46 = letters_45[2:] + letters_45[:2]\n        letters_47 = letters_46[2:] + letters_46[:2]\n        letters_48 = letters_47[2:] + letters_47[:2]\n        letters_49 = letters_48[2:] + letters_48[:2]\n        letters_50 = letters_49[2:] + letters_49[:2]\n        letters_51 = letters_50[2:] + letters_50[:2]\n    "
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if lst == []:\n        return None\n    a = lst\n    b = []\n    for i in range(len(a)):\n        if i == 0:\n            b = a[1:]\n        else:\n            b = b[:i] + a[i+1:]\n    c = b\n    d = min(b)\n    for i in range(len(c)):\n        if c[i] == d:\n            return c[i]\n    return None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # sort the list\n    lst.sort()\n    # return the second element\n    if len(lst) >= 2:\n        return lst[1]\n    else:\n        return None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # you may also want to add a try-except block\n    if not lst:\n        return None\n    else:\n        lst.sort()\n        return lst[1"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) < 2:\n        return None\n    \n    return sorted(lst)[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    try:\n        sorted_list = sorted(lst)\n        return sorted_list[1]\n    except:\n        return None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # TODO: Implement me\n    if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lst.sort()\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #create a set to store the number of occurances\n    #use count and sort to get the list of numbers\n    #if there is a number that occurs more than once, \n    #remove all the numbers that occur more than once\n    #use the sort method to reorder the list\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    lst.sort()\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    \n    return lst[1]"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    boredoms = 0\n    for x in S.split():\n        if x.startswith('I'):\n            boredoms += 1\n    return boredoms\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    boredoms = 0\n    for i in S.split(\".\"):\n        if i.startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    for sentence in S.split('.'):\n        if sentence[0:2] == 'I ':\n            return 1\n    return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    boredoms = 0\n    #print(S)\n    words = S.split()\n    for word in words:\n        if word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sentence_lst = S.split(\".\")\n    sentence_lst += S.split(\"?\")\n    sentence_lst += S.split(\"!\")\n    boredom_count = 0\n    for sentence in sentence_lst:\n        if sentence.strip()[:2] == \"I \":\n            boredom_count += 1\n    return boredom_count\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    S = S.split('.')\n    S = S + ['.']\n    count = 0\n    for i in range(1,len(S)):\n        if S[i].strip().startswith('I'):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Boredoms are sentences that start with the word \"I\"\n    boredoms = 0\n    for sentence in S.split('.'):\n        # When we encounter a sentence that starts with \"I\"\n        # We add one to the count of boredoms\n        if sentence.split()[0].upper() == \"I\":\n            boredoms += 1\n    return boredoms\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    sentences = S.split('.')\n    counter = 0\n    for sentence in sentences:\n        if sentence[0:1].lower() == 'i':\n            counter += 1\n    return counter\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    words = S.split()\n    return len([word for word in words if word.startswith('I')])\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(S)):\n        if S[i] == '.' or S[i] == '?' or S[i] == '!':\n            S = S[i+1:]\n        elif S[i] == 'I':\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n  \n    if x == y or x == z or y == z:\n        if type(x) == int and type(y) == int and type(z) == int:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if x == y + z or x == z + y or y == x + z:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    num1 = x + y\n    num2 = y + z\n    num3 = z + x\n    return num1 == num2 or num1 == num3 or num2 == num3\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (x+y+z)%1 == 0 and (x==y or x==z or y==z)\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if x == int(x) and y == int(y) and z == int(z):\n        return True\n    elif x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n        \n        \n        \n        \n        \n        \ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\nprint(any_int(2,4,6))\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x+y+z == 2*max(x,y,z) or x+z+y == 2*max(x,z,y) or y+z+x == 2*max(y,z,x)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    new_message = ''\n    vowel_list = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for letter in message.lower():\n        if letter in vowel_list:\n            letter_index = vowel_list.index(letter)\n            new_message += vowel_list[(letter_index + 2) % len(vowel_list)]\n        else:\n            new_message += letter\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = message.swapcase()\n    for letter in new_message:\n        if letter in 'aeiou':\n            new_message = new_message.replace(letter, alphabet[alphabet.find(letter) + 2])\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    encoded_message = ''\n    for ch in message:\n        if ch.lower() in 'aeiou':\n            encoded_message += chr((ord(ch) + 2 - ord('a')) % 26 + ord('a'))\n        elif ch.upper() in 'AEIOU':\n            encoded_message += chr((ord(ch) + 2 - ord('A')) % 26 + ord('A'))\n        else:\n            encoded_message += ch\n    return encoded_message\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    message = message.lower()\n    for char in message:\n        if char in 'aeiou':\n            char = char.upper()\n        elif char in 'AEIOU':\n            char = char.lower()\n        message = message.replace(char, char.swapcase())\n    return message\n    \nif __name__ == \"__main__\":\n    print(encode(\"test\"))\n    print(encode(\"This is a message\"))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def prime_factor(n):\n        factor=[]\n        i=2\n        while i*i<=n:\n            if n%i==0:\n                n//=i\n                factor.append(i)\n            else:\n                i+=1\n        factor.append(n)\n        return factor\n    \n    def sum_digits(n):\n        sum=0\n        while n>0:\n            sum+=n%10\n            n=n//10\n        return sum\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if type(lst) == list:\n        if not lst:\n            return 0\n        else:\n            sum = 0\n            prime_lst = [2]\n            for i in range(2, int(max(lst))+1):\n                for j in range(2, i):\n                    if i % j!= 0:\n                        continue\n                    else:\n                        break\n                else:\n                    prime_lst.append(i)\n            for prime in prime_lst:\n                sum = sum + prime\n            for elem in lst:\n                if elem > 9 and elem > max(prime_lst):\n                    sum = sum + elem % 10 + elem // 10\n                elif elem > max(prime_lst) and elem % 10!= 0:\n                    sum = sum + elem\n                else:\n                    sum = sum + elem\n            return sum\n    else:\n        return \"Input is not a list.\"\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 0\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    solution = 0\n    for elem in lst:\n        if isPrime(elem):\n            solution = solution + sum(list(str(elem)))\n    return solution\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return lst\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    #write your code here\n    return 0\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return max(filter(is_prime, lst))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    import itertools\n    import math\n    primes_ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n    largest_prime_sum = 0\n    for i in range(len(lst)):\n        print(\"lst[\", i, \"] = \", lst[i])\n    for i in range(len(lst)):\n        for j in range(len(primes_)):\n            if lst[i] % primes_[j] == 0:\n                largest_prime_sum += primes_[j]\n    print(\"The largest prime sum is\", largest_prime_sum)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # raise NotImplementedError(\"Problem 3 Incomplete\")\n    if len(dict) == 0:\n        return False\n    else:\n        for i in dict.values():\n            if isinstance(i, str):\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if (type(key)!= str):\n                return False\n            elif (key.isupper()):\n                continue\n            else:\n                return False\n        return True\n        \ndef test_dict_case():\n    \"\"\"\n    Some test cases for check_dict_case\n    \"\"\"\n    print(\"Testing check_dict_case with the first dictionary:\")\n    first_dict = {\"a\":\"apple\", \"b\":\"banana\"}\n    print(check_dict_case(first_dict))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    dict = dict.values()\n    lower_keys = [i.lower() for i in dict]\n    upper_keys = [i.upper() for i in dict]\n    return False if len(dict) == 0 else True if set(lower_keys) == set(dict) else False if set(upper_keys) == set(dict) else True\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for k,v in dict.items():\n            if type(k) == str and type(v) == str:\n                if k.isupper():\n                    if k.lower() in dict:\n                        return False\n                elif k.islower():\n                    if k.upper() in dict:\n                        return False\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not ((type(key) == str) and ((key.lower() == key) or (key.upper() == key))):\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        key = list(dict.keys())\n        if all(key[i].islower() for i in range(len(key))) or all(key[i].isupper() for i in range(len(key))):\n            return True\n        else:\n            return False"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(dict) == 0:\n        return False\n    all_upper = True\n    all_lower = True\n    for key in dict:\n        if key.isupper():\n            all_lower = False\n        else:\n            all_upper = False\n    return all_lower or all_upper\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(dict) == 0:\n        return False\n    for k in dict:\n        if not (isinstance(k, str)):\n            return False\n    # All keys are upper case\n    if all(k.isupper() for k in dict):\n        return True\n    # All keys are lower case\n    elif all(k.islower() for k in dict):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # YOUR CODE STARTS HERE\n    result=False\n    for i in dict:\n        if isinstance(i,str):\n            if i.isupper()==True:\n                result=True\n            else:\n                result=False\n                break\n    return result\n    # YOUR CODE ENDS HERE\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # set = dict.keys()\n    # for i in set:\n    #     if i in dict:\n    #         return True\n    #     else:\n    #         return False\n    return len(dict)!= 0 and all([type(i) == str for i in dict.keys()]) \\\n        or len(dict)!= 0 and all([type(i) == str for i in dict.keys()])\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # initialize list of primes up to n\n    primes = []\n    # check if n is prime\n    if n >= 2:\n        # add 2 to the list of primes\n        primes.append(2)\n    # check if n is even\n    if n % 2 == 0:\n        # if it is even, divide it by 2\n        n = n / 2\n    else:\n        # if it is odd, continue to the next iteration\n        pass\n    # loop until n is greater than or equal to 2\n    while n > 1:\n        # check if n is prime\n        if n >= 2:\n            # if it is prime, add to the list of primes\n            primes.append(n)\n        # check if n is even\n        if n % 2 == 0:\n            # if it is even, divide it by 2\n            n = n / 2\n        else:\n            # if it is odd, check if it is prime\n            for i in range(2, int(math.sqrt(n)) + 1):\n                # if it is not prime, divide by i and n must be odd\n                if n % i == 0:\n                    # if it is not even, set n to the next odd integer\n                    if n % 2 == 0:\n                        n = (n + 1) / 2\n                    # if it is even, divide it by i and n must be odd\n                    else:\n                        n = n / i\n                        break\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count=0\n    #Using list comprehension \n    primes = [x for x in range(n+1) if prime_number(x)]\n    \n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # prime numbers are greater than 1\n    if n < 2:\n        return []\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #we want to store the number of primes in a variable.\n    #we want to create an array of primes and if the number is prime then we want to add it to the array\n    #we want to return the array once all the primes have been added\n    #we want to create an array of numbers and if the number is prime then we want to add it to the array\n    #if it isnt prime then we want to add it to the array\n    #we want to return the array once all the numbers have been added\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #initialize an empty list\n    primes = []\n    # iterate from 2 to n-1 (do not include n)\n    for i in range(2, n):\n        # if i is prime, add it to the list of primes\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # idea: initialize an array with a set of 1s. iterate over the array. if the element is prime,\n    # change its value to 0. then iterate over the array and return all values that are greater\n    # than 1.\n    primes = [1]*n\n    for i in range(2, n):\n        if primes[i]:\n            for j in range(i, n, i):\n                primes[j] = 0\n    return [i for i in range(2, n) if primes[i]]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # initalize the list to return\n    result = []\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #initialize a list to store the prime numbers\n    primes = []\n    #store the square root of n to max_value\n    max_value = math.sqrt(n)\n    #iterate through the values from 1 to the square root of n\n    for i in range(2, max_value + 1):\n        #if the value is not divisible by any other value in the list of prime numbers\n        if i not in primes:\n            #then it must be prime\n            #so add it to the list of primes\n            primes.append(i)\n    #append the value to the list\n    primes.append(n)\n    #return the list of prime numbers less than n\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [x for x in range(2,n) if is_prime(x)]\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return a*b\n    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    a = str(a)\n    b = str(b)\n    sum = 0\n    for i in a:\n        sum += int(i)\n    for i in b:\n        sum += int(i)\n    return sum\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    product = a*b\n    digits = []\n    for x in str(product):\n        if x.isdigit():\n            digits.append(int(x))\n    return digits[0]\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # product = a % 10 * b % 10\n    # return product\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #return int(a) * int(b)\n    return a % 10 * b % 10\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: Write the function implementation here\n    # IMPORTANT: Please use the num1 * num2 to find the product of the unit digit of the two numbers.\n    # For example: 12 * 39 = 4 (twelve has unit digit of 1 and three has unit digit of 3).\n    return num1 * num2\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a*b\n    \ndef sum_last_three(a, b):\n    \"\"\"\n    Complete the function that takes two numbers and returns the sum of their last three digits.\n    Assume the input is always valid.\n    Examples:\n    sum_last_three(12345, 56789) should return 12.\n    sum_last_three(12345, 1234) should return 2.\n    sum_last_three(1234, 4567) should return 10.\n    sum_last_three(1234, 12345) should return 3.\n    \"\"\"\n    return sum([a%10,a%100//10,a%1000//100,a%10000//1000,a%100000//10000])+sum([b%10,b%100//10,b%1000//100,b%10000//1000,b%100000//10000])\n    \ndef sum_last_four(a, b):\n    \"\"\"\n    Complete the function that takes two numbers and returns the sum of their last four digits.\n    Assume the input is always valid.\n    Examples:\n    sum_last_four(12345, 56789) should return 12.\n    sum_last_four(12345, 1234) should return 2.\n    sum_last_four(1234, 4567) should return 10.\n    sum_last_four(1234, 12345) should return 3.\n    \"\"\"\n    return sum([a%10,a%100//10,a%1000//100,a%10000//1000,a%100000//10000,a%1000000//100000])+sum([b%10,b%100//10,b%1000//100,b%10000//1000,b%100000//10000,b%1000000//100000])\n    \ndef long_division(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns the quotient and remainder.\n    Assume the input is always valid.\n    Examples:\n    long_division(10, 3) should return [3, 0].\n    long_division(8, 5) should return [1, 2].\n    long_division(8, 0) should return [0, 8].\n    long_division(8, 1000) should return [0, 8].\n    long_division(8, 3) should return [2, 1].\n    long_division(8, 4) should return [2, 0].\n    long_division(8, 5) should return [1, 1].\n    \"\"\"\n    if b == 0:\n        return [0, a]\n    return [a//b, a%b]\n    \ndef fibonacci(a):\n    \"\"\"\n    Complete the function that takes a non-negative integer and returns the Fibonacci sequence value.\n    Assume the input is always valid.\n    Examples:\n    fibonacci(0) should return 0.\n    fibonacci(3) should return 2.\n    fibonacci(7) should return 13.\n    fibonacci(12) should return 144.\n    \"\"\"\n    return [0,1,1][a%3]\n    \ndef range_sum(a):\n    \"\"\"\n    Complete the function that takes a positive integer argument and returns the sum of all numbers between one and that number.\n    Examples:\n    range_sum(0) should return 0.\n    range_sum(1) should return 1.\n    range_sum(4) should return 10.\n    \"\"\"\n    return sum([i for i in range(a)])\n    \ndef is_palindrome(a):\n    \"\"\"\n    Complete the function that takes a string argument and returns true if it is a palindrome, false otherwise.\n    Examples:\n    is_palindrome('racecar') should return true.\n    is_palindrome('mutable') should return false.\n    \"\"\"\n    return a[::-1] == a\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for idx in range(len(s)):\n        if idx % 2 == 0:\n            if s[idx].lower() in 'aeiou':\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([1 if i % 2 == 0 and s[i] in VOWELS and s[i].isupper() else 0 for i in range(len(s))])\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    count = 0\n    for i in range(0,len(s),2):\n        if s[i].isupper():\n            count += 1\n    return count\n        \nprint count_upper('aBCdEf')\nprint count_upper('abcdefg')\nprint count_upper('dBBE'"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in VOWELS and i % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    #l = list(s)\n    #l = list(filter(lambda x: x.isalpha() and x.isupper(), s))\n    #l = list(filter(lambda x: x in ['A', 'E', 'I', 'O', 'U'], s))\n    #l = list(filter(lambda x: x.isalpha() and x.isupper(), s))\n    \n    #return sum([1 if i%2 == 0 and l[i] in ['A', 'E', 'I', 'O', 'U'] else 0 for i in range(len(l))])\n    return sum([1 if i%2 == 0 and l[i] in ['A', 'E', 'I', 'O', 'U'] else 0 for i in range(len(l))])\n    #return sum([1 if i%2 == 0 and l[i] in ['A', 'E', 'I', 'O', 'U'] else 0 for i in range(len(l))])\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    vowels = \"AEIOU\"\n    for i, ltr in enumerate(s):\n        if i % 2 == 0 and ltr.upper() in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    value = float(value)\n    int_value = int(value)\n    if abs(value - int_value) < abs(value - int_value - 1):\n        return int_value\n    else:\n        return int_value - 1\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    value = float(value)\n    if value % 1 >= 0.5:\n        value = int(value) + 1\n    else:\n        value = int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if value[0] == '-':\n        return -int(value)\n    else:\n        return int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # int() converts float to integer\n    return int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    int_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if type(value) is not str:\n        raise TypeError(\"Value is not string\")\n    value = value.replace(\",\", \"\")\n    value = value.replace(\".\", \"\")\n    if value.isdigit():\n        num_value = int(value)\n        if num_value not in num_list:\n            num_list.append(num_value)\n        for i in num_list:\n            if abs(num_value - i) < abs(num_value - num_list[num_list.index(i)+1]):\n                return i\n        return num_list[0]\n    else:\n        raise ValueError(\"Value is not a number\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #...\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    import math\n    if value.isnumeric() == False:\n        return None\n    if value == \"0\":\n        return 0\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # convert to float, but ignore any error\n    try:\n        value = float(value)\n    except ValueError:\n        raise ValueError\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        return [n] * n\n    else:\n        return [n] * n + [n+1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return list(range(n, n * 2, n + 1))\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n = int(n)\n    if n % 2 == 1:\n        s = list(range(1, n+1, 2))\n    else:\n        s = list(range(2, n+1, 2))\n    return s\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert n > 0, \"n must be a positive integer\"\n    pile = [n]\n    while n > 0:\n        if n % 2:\n            n = n - 1\n        else:\n            n = n // 2\n        pile.append(n)\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return [i * 2 for i in range(1, n + 1)]\n    else:\n        return [i * 2 for i in range(1, n + 1, 2)]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n_is_odd = n % 2\n    num_stones = [n] if not n_is_odd else [n, n + 1]\n    while len(num_stones) < n:\n        if n_is_odd:\n            num_stones.append(num_stones[-1] + 1)\n        else:\n            num_stones.append(num_stones[-1] + 2)\n        n_is_odd = not n_is_odd\n    return num_stones\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert isinstance(n, int) and n > 0\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        return [n, n + 2, n + 4, n + 6]\n    return [n, n + 2, n + 4]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [n for i in range(n)]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def odd_even(n):\n        if n % 2 == 0:\n            return n + 1\n        else:\n            return n + 2\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return s.split(\", \")\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    # split the string using a space or a comma\n    word_list = s.split(\", \")\n    \n    # remove the first and last elements\n    # these are the empty string and the string\n    # of all commas and spaces.\n    word_list.pop()\n    word_list.pop(0)\n    \n    return word_list\n    \nprint(words_string(\"Hi, my name is John\"))\nprint(words_string(\"One, two, three, four, five, six\")"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return s.replace(\" \", \"\").replace(\",\", \" \").split()\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    \n    return s.replace(' ',',').split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = s.split(',')\n    s =''.join(s)\n    s = s.split(' ')\n    return s\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return s.split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return s.split(', ') if ',' in s else s.split(' ')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return s.split()\n    \ndef capitalize_first_letter(s):\n    \"\"\"\n    The function takes a string as an argument and returns the string with the first letter capitalized.\n    \n    For example:\n    capitalize_first_letter(\"python\") == \"Python\"\n    capitalize_first_letter(\"i code\") == \"I code\"\n    capitalize_first_letter(\"codewars\") == \"Codewars\"\n    \"\"\"\n    return s.capitalize()\n    \ndef find_quotes(s):\n    \"\"\"\n    The function takes a string as an argument and returns a list containing the characters\n    that form the first instance of a quote in the string.\n    \n    For example:\n    find_quotes(\"A good day to code!\") == ['\"']\n    find_quotes(\"I'm coding\") == ['I','m', '\"']\n    find_quotes(\"Do be do be do be do\") == ['\"', '\"', '\"', '\"']\n    \"\"\"\n    return [s[i] for i in range(len(s)) if s[i] == s[i].upper()]\n    \ndef is_pangram(s):\n    \"\"\"\n    The function takes a string as an argument and returns True if the string is a pangram\n    (contains all the letters from a to z).\n    \n    For example:\n    is_pangram(\"The quick brown fox jumps over the lazy dog\") == True\n    is_pangram(\"I like cats\") == False\n    \"\"\"\n    return sorted(s) == list('abcdefghijklmnopqrstuvwxyz')\n    \ndef get_unique_characters(s):\n    \"\"\"\n    The function takes a string as an argument and returns the number of unique characters in it.\n    \n    For example:\n    get_unique_characters(\"python\") == 6\n    get_unique_characters(\"I code\") == 3\n    get_unique_characters(\"codewars\") == 4\n    \"\"\"\n    return len(set(s))\n    \ndef find_missing_letters(s):\n    \"\"\"\n    The function takes a string as an argument and returns the missing letter(s) that\n    should be in it.\n    \n    For example:\n    find_missing_letters(\"The quick brown fox jumped over the lazy dog\") == \"eo\"\n    find_missing_letters(\"I like cats\") == \"t\"\n    find_missing_letters(\"codewars\") == \"\"\n    \"\"\"\n    return ''.join(sorted(set('abcdefghijklmnopqrstuvwxyz') - set(s)))\n    \ndef get_length_of_last_word(s):\n    \"\"\"\n    The function takes a string as an argument and returns the length of the last word in it.\n    \n    For example:\n    get_length_of_last_word(\"The quick brown fox jumps over the lazy dog.\") == 11\n    get_length_of_last_word(\"I like cats\") == 4\n    get_length_of_last_word(\"codewars\") == 4\n    \"\"\"\n    return len(s.split()[-1])\n    \ndef get_number_of_words(s):\n    \"\"\"\n    The function takes a string as an argument and returns the number of words in it.\n    \n    For example:\n    get_number_of_words(\"The quick brown fox jumps over the lazy dog.\") == 5\n    get_number_of_words(\"I like cats\") == 2\n    get_number_of_words(\"codewars\") == 1\n    \"\"\"\n    return len(s.split())\n    \ndef get_number_of_uppercase_letters(s):\n    \"\"\"\n    The function takes a string as an argument and returns the number of uppercase letters in it.\n    \n    For example:\n    get_number_of_uppercase_letters(\"The quick brown fox jumps over the lazy dog.\") == 0\n    get_number_of_uppercase_letters(\"The QUICK Brown fox jumps over the lazy dog.\") == 2\n    get_number_of_uppercase_letters(\"Codewars\") == 1\n    \"\"\"\n    return sum(1 for i in s if i.isupper())\n    \ndef count_non_ascii_characters(s):\n    \"\"\"\n    The function takes a string as an argument and returns the number of no"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return re.sub('[^a-zA-Z0-9]+', '', s).split()\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    global nums\n    num = -1\n    for i in range(x, y + 1):\n        if i in nums:\n            num = i\n    return num\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    try:\n        if x > y:\n            return -1\n        elif (x % 2) == 1 and (x + 1) % 2 == 1 and (y % 2) == 1 and (y - 1) % 2 == 1:\n            if x % 2 == 1:\n                return x - 1\n            else:\n                return x + 1\n        else:\n            return x\n    except:\n        print('Something is wrong!')\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if x >= y:\n        return -1\n    else:\n        for i in range(y,x+1):\n            if i%2==0 and i<=x and i>=y:\n                return i\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(x, y+1):\n        if i%2==0 and i>x and i<y:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(x, y + 1):\n        if i % 2 == 0 and i > x:\n            return i\n    return -1\n    \ndef main():\n    print(choose_num(12, 15))\n    print(choose_num(13, 12))\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    num = 0\n    num_list = list()\n    for i in range(x, y+1):\n        if not i%2:\n            num_list.append(i)\n            if num_list[0] == i:\n                num = i\n    if not num_list:\n        num = -1\n    return num\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    if x == y:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if x%2==0:\n        if y%2==0:\n            return int(max(x, y))\n        else:\n            return int(min(x, y))\n    else:\n        if y%2==0:\n            return int(min(x, y))\n        else:\n            return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if x > y:\n        return -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    import math\n    for i in range(x, y+1):\n        if int(i/2)*2 == i and i%2 == 0:\n            return i\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(round(sum(range(n, m + 1)) / (m - n + 1)))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n >= m:\n        return -1\n    else:\n        return bin(sum(range(n, m + 1)) // (m - n + 1))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    else:\n        result = 0\n        for i in range(n, m+1):\n            result += i\n        return \"0b\" + str(bin(result//(m-n+1)))[2:]"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    if n > m:\n        return -1\n    else:\n        return bin(round((m+n)/2))[2:"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < m:\n        return -1\n    else:\n        return int(bin(int((n+m) / 2)), 2)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert n > 0, \"n must be a positive integer\"\n    assert m > n, \"m must be larger than n\"\n    return str(bin(round(sum(range(n, m + 1))/ (m - n + 1)))[2:])\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n > m:\n        return -1\n    return bin(int((n + m) / 2))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return -1 if n > m else bin(int((n + m + 1) / 2))\n    \nif __name__ == \"__main__\":\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(1, 5))\n    print(rounded_avg(1000, 1001)"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(sum(range(n, m + 1)) // (m - n + 1))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < m:\n        return -1\n    return \"0b\" + str(int(\"\".join([\"1\" if i == m-n+1 else \"0\" for i in range(n, m+1)])))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for num in x:\n        num = list(str(num))\n        if int(num[0]) % 2 == 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted([n for n in x if not any([int(d) % 2 for d in str(n)])])\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # unique = []\n    # for i in x:\n    #     if all(j%2 for j in str(i)):\n    #         pass\n    #     else:\n    #         unique.append(i)\n    # return sorted(unique)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted([n for n in x if not any(int(d) % 2 for d in str(n))])\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i in x:\n        y = str(i)\n        if int(y[0])%2 == 0 or int(y[1])%2 == 0 or int(y[2])%2 == 0:\n            pass\n        else:\n            result.append(i)\n    result.sort()\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    solution = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        else:\n            solution.append(i)\n    return sorted(solution)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted([x for x in x if x % 2!= 0])\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sorted_list = []\n    for item in x:\n        temp = item\n        while temp > 0:\n            remainder = temp % 10\n            if remainder % 2 == 0:\n                break\n            else:\n                temp = temp // 10\n        else:\n            sorted_list.append(item)\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    unique_digits = []\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return list(set(x).difference(set([x for x in x if x % 2 == 0])))\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    arr.sort()\n    arr.reverse()\n    \n    return [dic[x] for x in arr]\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO: IMPLEMENT ME\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # if array is empty return empty array\n    if arr == []:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    arr.sort()\n    arr.reverse()\n    arr = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    arr.sort(reverse=True)\n    ans = []\n    for i in arr:\n        if 1 <= i <= 9:\n            ans.append(str(i))\n    for i in range(len(ans)):\n        ans[i] = num_to_name[int(ans[i])]\n    return ans\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    \n    # TODO: Complete the function\n    \n    return []\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # "
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Start coding!\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    def numbers_to_words(arr):\n        result = []\n        for num in arr:\n            if num == 0:\n                result.append('Zero')\n            elif num == 1:\n                result.append('One')\n            elif num == 2:\n                result.append('Two')\n            elif num == 3:\n                result.append('Three')\n            elif num == 4:\n                result.append('Four')\n            elif num == 5:\n                result.append('Five')\n            elif num == 6:\n                result.append('Six')\n            elif num == 7:\n                result.append('Seven')\n            elif num == 8:\n                result.append('Eight')\n            elif num == 9:\n                result.append('Nine')\n        return result\n    \n    def numbers_to_words_v2(arr):\n        result = []\n        numbers = {'0': 'Zero', '1': 'One', '2': 'Two', '3': 'Three', '4': 'Four', '5': 'Five', '6': 'Six', '7': 'Seven', '8': 'Eight', '9': 'Nine'}\n        for num in arr:\n            result.append(numbers.get(str(num)))\n        return result\n        \n    def numbers_to_words_v3(arr):\n        result = []\n        numbers = {'0': 'Zero', '1': 'One', '2': 'Two', '3': 'Three', '4': 'Four', '5': 'Five', '6': 'Six', '7': 'Seven', '8': 'Eight', '9': 'Nine'}\n        nums = [str(num) for num in numbers.keys()]\n        for num in arr:\n            if num in nums:\n                result.append(numbers.get(num))\n        return result\n    \n    def numbers_to_words_v4(arr):\n        return [numbers[int(num)] for num in arr]\n    \n    def numbers_to_words_v5(arr):\n        return ['{}'.format(numbers[int(num)]) for num in arr]\n    \n    # Official solution\n    def numbers_to_words_v6(arr):\n        return [numbers[int(num)] for num in sorted(arr, reverse=True) if 1<=int(num)<=9]\n    \n    # Mine\n    def numbers_to_words_v7(arr):\n        return [numbers[int(num)] for num in arr if 1<=int(num)<=9]\n    \n    def test():\n        # Test.assert_equals(numbers_to_words([]), [])\n        # Test.assert_equals(numbers_to_words([1]), [\"One\"])\n        # Test.assert_equals(numbers_to_words([1, 2, 3, 4, 5, 6, 7, 8, 9]), [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n        # Test.assert_equals(numbers_to_words([1, 1, 2, 3, 4, 5, 6, 7, 8, 9]), [\"One\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n        # Test.assert_equals(numbers_to_words([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [\"One\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\"])\n        # Test.assert_equals(numbers_to_words([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), [\"One\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\"])\n        # Test.assert_equals(numbers_to_words([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), [\"One\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleve"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return []\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # convert array into integers\n    arr = [int(i) for i in arr]\n    # sort the array\n    arr.sort()\n    # reverse the array\n    arr.reverse()\n    # create an array with the corresponding names\n    result = [None] * len(arr)\n    for i, n in enumerate(arr):\n        # one digit numbers\n        if n < 10:\n            result[i] = 'Zero' if n == 0 else 'One' if n == 1 else 'Two' if n == 2 else 'Three' if n == 3 else 'Four' if n == 4 else 'Five' if n == 5 else 'Six' if n == 6 else 'Seven' if n == 7 else 'Eight' if n == 8 else 'Nine'\n        else:\n            # two digit numbers\n            result[i] = 'Twenty' if n == 20 else 'Thirty' if n == 30 else 'Forty' if n == 40 else 'Fifty' if n == 50 else 'Sixty' if n == 60 else 'Seventy' if n == 70 else 'Eighty' if n == 80 else 'Ninety'\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [i if i % 2 == 0 else sum(range(1,i+1)) for i in range(1,n+1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # create an empty list\n    l = []\n    for i in range(1, n+1):\n        # create a variable to store the value of the factorial or the sum of numbers\n        sum = 0\n        for j in range(1, i+1):\n            if j % 2 == 0:\n                sum += j\n            else:\n                sum *= j\n        l.append(sum)\n    return l\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # TODO: write a function\n    fact=[]\n    n=int(n)\n    for i in range(1,n+1):\n        if i%2==0:\n            fact.append(i)\n        else:\n            s=0\n            for j in range(1,i+1):\n                s+=j\n            fact.append(s)\n    return fact\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert n >= 0, \"n must be greater than or equal to zero!\"\n    # base case: n = 0 or n = 1, the return value is [1]\n    if n == 0 or n == 1:\n        return [1]\n    # result: to be returned\n    result = [1]\n    # counter: to count from 1 to n\n    counter = 1\n    # start from 1, iterate until n - 1\n    while counter <= n - 1:\n        # compute the factorial of counter\n        factorial = 1\n        for i in range(1, counter + 1):\n            factorial = factorial * i\n        # append the result of computation to the list\n        result.append(factorial)\n        # increment counter\n        counter = counter + 1\n    # return the result\n    return result"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i if i%2 == 0 else sum(range(i)) for i in range(1,n+1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # your code here\n    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(1 for num in range(1, n + 1) if is_palindrome(num)) // 2, sum(1 for num in range(1, n + 1) if is_palindrome(num)) // 2\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count_odd = 0\n    count_even = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even, count_odd\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return (n - 1) // 2, (n + 1) // 2\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #...\n    return odd, even\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    odd = 0\n    even = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i%2 == 0:\n                even += 1\n            else:\n                odd += 1\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len([i for i in arr if sum([int(j) for j in str(i)])])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len([i for i in arr if i > 0 and sum([int(j) for j in str(i)]) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len([x for x in arr if has_positive_sum(x)])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i in arr:\n        if i > 0:\n            sign = 1\n        else:\n            sign = -1\n        i = abs(i)\n        num = 0\n        while i > 0:\n            num += i % 10\n            i = i // 10\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    nums = 0\n    for i in arr:\n        if i >= 0 and sum(int(digit) for digit in str(i)) > 0:\n            nums += 1\n    return nums\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # return sum(len([n for n in arr if n > 0]) for arr in [[int(n) for n in str(i)] for i in arr])\n    return sum([1 for i in arr if sum(int(digit) for digit in str(abs(i))) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    cnt = 0\n    for num in arr:\n        if sum(int(i) for i in str(num)) > 0:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum(list(filter(lambda x: x > 0, map(lambda x: sum(list(map(int, str(abs(x))))), arr))))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    \n    \n    \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(arr)==0:\n        return True\n    else:\n        print(arr)\n        current_index=len(arr)-1\n        temp_arr=arr.copy()\n        while current_index>0:\n            current_index-=1\n            temp_arr[current_index]=arr[current_index-1]\n            print(\"=================\")\n            print(temp_arr)\n            if arr==sorted(temp_arr):\n                print(\"reached\")\n                return True\n            \n        return False\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    #Method-1:\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n = len(arr)\n    if n < 1:\n        return True\n    \n    curr_max = arr[0]\n    prev_max = arr[0]\n    \n    for i in range(1,n):\n        if arr[i] > curr_max:\n            prev_max = curr_max\n            curr_max = arr[i]\n        elif arr[i] > prev_max:\n            prev_max = arr[i]\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(arr)==0:\n        return True\n    \n    #Right shift the array one step\n    n=arr[-1]\n    arr.remove(n)\n    arr.append(n)\n    \n    return move_one_ball(arr)\n    \n    \ndef move_one_ball_2(arr):\n    #DRIVER CODE\n    print(move_one_ball(arr))\n    \n    \nmove_one_ball_2([3, 4, 5, 1, 2])\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    i=0\n    while i<len(arr)-1:\n        if arr[i]>arr[i+1]:\n            arr[i],arr[i+1]=arr[i+1],arr[i]\n            i=0\n        else:\n            i=i+1\n    if arr==sorted(arr):\n        return True\n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    arr = sorted(arr)\n    print(arr)\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            count += 1\n    print(count)\n    if count == 0:\n        return True\n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return True if len(arr) == 0 else False\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not arr:\n        return True\n    \n    for i in range(len(arr)-1):\n        if arr[i+1]<=arr[i]:\n            return False\n    return True"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #Code here\n    return True if len(arr)>0 else True\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            return \"NO\"\n    for j in range(len(lst2)):\n        if lst2[j] % 2 == 0:\n            return \"NO\"\n    if len(lst1) == 1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            return \"NO\"\n        else:\n            continue\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 1:\n            return \"NO\"\n        else:\n            continue\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(len(lst1)):\n        for j in range(i+1,len(lst1)):\n            if lst1[i]+lst1[j] == lst2[i] + lst2[j]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert lst1!= [] and lst2!= [], 'Lists must be non-empty!'\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # YOUR CODE HERE\n    odd_num = [num for num in lst1 if num % 2!= 0]\n    even_num = [num for num in lst2 if num % 2 == 0]\n    if len(even_num) < len(odd_num):\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    l1 = []\n    l2 = []\n    for i in lst1:\n        if i % 2 == 0:\n            l1.append(i)\n    for j in lst2:\n        if j % 2 == 0:\n            l2.append(j)\n    if len(l1) == len(l2):\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for n1 in lst1:\n        if n1 % 2 == 0:\n            continue\n        else:\n            return \"NO\"\n    for n2 in lst2:\n        if n2 % 2 == 0:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # this problem can be solved in two ways:\n    # 1. loop through the first list and check if any element in the first list\n    # is even. If not, then return \"NO\". If all elements are even, return \"YES\".\n    # 2. loop through the first list and check if any element in the first list\n    # is not even. If so, then return \"NO\". If all elements are not even, return \"YES\".\n    # depending on the order in which the loop is carried out, the results may\n    # be different. I have written the code to loop through the first list first\n    # because I have been unsure of which approach to solve the problem in.\n    # to decide what solution to implement, I thought about whether it is possible\n    # to loop through the first list once and then loop through the second list\n    # and check if the element in the second list is even or not to make the result\n    # to be correct. If it is, then return \"YES\" if it is not, return \"NO\"\n    for i in lst1:\n        if i%2!= 0:\n            return \"NO\"\n    return \"YES\"\n    \n    # the second solution is to loop through the first list twice. The first loop\n    # checks if any element in the first list is not even. If so, return \"NO\". If\n    # all the elements are even, then loop through the second list and check if\n    # any element is even. If not, return \"NO\". If all elements are not even, return\n    # \"YES\".\n    # when the first loop is carried out, if an element is even, then it is\n    # added to the set with all even elements. After the first loop, the set\n    # with all even elements is a subset of the set with all elements. Therefore,\n    # the answer would always be \"YES\" since the only case that the set with all\n    # elements is not a subset of the set with all even elements is when all\n    # elements are not even.\n    even_set = set()\n    for i in lst1:\n        if i%2!= 0:\n            return \"NO\"\n    for j in lst2:\n        if j%2 == 0:\n            even_set.add(j)\n    if len(even_set) < len(lst2):\n        return \"NO\"\n    return \"YES\"\n    \n    # the third solution is to sort both the lists and then loop through the\n    # lists to check if it is possible to make the first list of even numbers.\n    # if it is, return \"YES\". if it is not, return \"NO\".\n    lst1.sort()\n    lst2.sort()\n    i = 0\n    j = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i]%2!= 0:\n            return \"NO\"\n        elif lst2[j]%2!= 0:\n            return \"NO\"\n        elif lst1[i] < lst2[j]:\n            i += 1\n        else:\n            j += 1\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Find the difference between the sum of even numbers and the sum of odd numbers.\n    odd_sum = 0\n    even_sum = 0\n    for num in lst1:\n        if num % 2!= 0:\n            odd_sum += num\n        else:\n            even_sum += num\n    even_sum += sum(lst2)\n    diff = even_sum - odd_sum\n    # If the difference is even, it is possible to exchange the even numbers between lst1 and lst2 to make them all even.\n    if diff % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    test = test.split(' ')\n    hist = {}\n    for i in test:\n        if i in hist:\n            hist[i] += 1\n        else:\n            hist[i] = 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Use sets to remove duplicates\n    histogram = dict()\n    test = test.split()\n    test = list(set(test))\n    for i in test:\n        if i in histogram:\n            histogram[i] += 1\n        else:\n            histogram[i] = 1\n    return histogram\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # get the string into an array of lower case letters\n    # append each letter to a list and use a dictionary to count them\n    # return the dictionary with the most occurrences\n    if not test:\n        return {}\n    elif len(test) == 1:\n        return {test: 1}\n    else:\n        test = test.lower().split(' ')\n        letters = []\n        for i in test:\n            if i not in letters:\n                letters.append(i)\n        letter_count = {}\n        for i in letters:\n            letter_count[i] = test.count(i)\n        return letter_count\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    hist = {}\n    test = test.split()\n    for i in test:\n        if i in hist:\n            hist[i] += 1\n        else:\n            hist[i] = 1\n    return hist\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(test) == 0:\n        return {}\n    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    # return hist\n    return max(hist, key=lambda x: hist[x])\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    dict = {}\n    # remove any white spaces\n    test = test.replace(\" \", \"\")\n    # remove duplicate letters\n    test = ''.join(sorted(set(test)))\n    \n    for i in test:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n            \n    return dict\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if test == '':\n        return {}\n    hist = {}\n    for ch in test.split(' '):\n        hist[ch] = hist.get(ch, 0) + 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    test = test.split(' ')\n    test = list(filter(None, test))\n    histo = {}\n    for i in test:\n        histo[i] = histo.get(i, 0) + 1\n    return histo\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s = s.strip()\n    c = c.strip()\n    c_dict = {}\n    for letter in c:\n        if letter in c_dict.keys():\n            c_dict[letter] += 1\n        else:\n            c_dict[letter] = 1\n    for letter in s:\n        if letter in c_dict.keys() and c_dict[letter] > 0:\n            c_dict[letter] -= 1\n    s = \"\".join(c_dict.keys())\n    if s == \"\":\n        return \"\", True\n    s = s.strip()\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_s=s.replace(c,'')\n    if new_s == new_s[::-1]:\n        return new_s,True\n    else:\n        return new_s,False"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    res=list(s)\n    c_freq=Counter(c)\n    for ele in s:\n        if ele in c_freq:\n            res.remove(ele)\n            c_freq[ele] -= 1\n            if c_freq[ele] == 0:\n                del c_freq[ele]\n    if len(c_freq) > 0:\n        return \"\".join(res), False\n    return \"\".join(res), True\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = ''\n    c_set = set(c)\n    for char in s:\n        if char not in c_set:\n            result += char\n    \n    check = check_palindrome(result)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s1 = s.replace(c,\"\")\n    return s1[::-1], is_palindrome(s1)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # print(\"Reverse Delete:\")\n    new_s = []\n    for i in s:\n        if i not in c:\n            new_s.append(i)\n    new_s = \"\".join(new_s)\n    new_s = new_s[::-1]\n    if new_s == s:\n        return (new_s,True)\n    else:\n        return (new_s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(s)==0:\n        return (s,True)\n    else:\n        s=s.replace(c, \"\")\n        if len(s)==0:\n            return (s,True)\n        else:\n            return (s,False)\n    \ndef index_of_first(s,c):\n    \"\"\"Task\n    You have to return the index of the first character of c in s\n    Example\n    For s = \"cabca\" and c = \"c\" the result should be 1\n    For s = \"cabca\" and c = \"z\" the result should be -1\n    For s = \"cabca\" and c = \"x\" the result should be -1\n    \"\"\"\n    if len(s)==0:\n        return -1\n    else:\n        if c==s[0]:\n            return 0\n        else:\n            return 1+index_of_first(s[1:],c)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (s.replace(c, ''), (s[::-1].replace(c, '') == s))"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s_no_duplicate = ''\n    for i in s:\n        if i not in c:\n            s_no_duplicate += i\n    if s_no_duplicate == s_no_duplicate[::-1]:\n        return (s_no_duplicate,True)\n    else:\n        return (s_no_duplicate,False)\n    \ndef palindrome_validator(s):\n    \"\"\"Task\n    Given a string s, you have to return True if it is a palindrome, otherwise False.\n    A string is called a palindrome if it reads the same backward as forward.\n    Example\n    For s = \"aabbcc\", the result should be True\n    For s = \"abcdef\", the result should be False\n    \"\"\"\n    s_no_duplicate = ''\n    for i in s:\n        if i not in s_no_duplicate:\n            s_no_duplicate += i\n    if s_no_duplicate == s_no_duplicate[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef all_anagrams(s):\n    \"\"\"Task\n    Given a string s, you have to return a list of all its anagrams permutations (the list can be empty).\n    An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n    Example\n    For s = \"abba\", the result should be [\"abba\", \"abab\", \"baba\", \"bbaa\", \"abba\"]\n    For s = \"abc\", the result should be []\n    \"\"\"\n    def all_anagrams_helper(s,l,r,res,used):\n        if l == r:\n            res.append(s)\n            return\n        else:\n            for i in range(l,r+1):\n                if used[i] == True:\n                    continue\n                else:\n                    used[i] = True\n                    all_anagrams_helper(s,l,i,res,used)\n                    used[i] = False\n        return res\n    l = len(s)\n    res = []\n    used = [False]*l\n    return all_anagrams_helper(s,0,l-1,res,used)\n    \n    \ndef repeated_substring_checker(s):\n    \"\"\"Task\n    Given a string s, you have to return the count of the number of substrings that have two or more distinct characters.\n    Example\n    For s = \"abcabcbb\", the result should be 7\n    For s = \"bbbb\", the result should be 4\n    For s = \"pwwkew\", the result should be 3\n    For s = \"\", the result should be 0\n    \"\"\"\n    def check_length(s):\n        if len(s) == 0:\n            return False\n        else:\n            return True\n    \n    def check_length_2(s):\n        if len(s) == 1:\n            return False\n        else:\n            return True\n    \n    def repeated_substring_helper(s,l,r,res,count):\n        if l == r:\n            if count == 2:\n                return res\n            else:\n                return res\n        else:\n            for i in range(l,r+1):\n                if (s[i] not in s[l:r+1]) and (s[l:r+1].count(s[i]) > 1):\n                    res.append(s[l:r+1])\n                    return repeated_substring_helper(s,i+1,r,res,count+1)\n            return res\n    \n    s_length = len(s)\n    if check_length(s) == False:\n        return 0\n    else:\n        s_length = len(s)\n        if check_length_2(s) == False:\n            return 0\n        else:\n            return len(repeated_substring_helper(s,0,s_length-1,[],0))\n    \n    \ndef number_of_islands(m):\n    \"\"\"Task\n    You are given an n x n 2D matrix representing an image.\n    Rotate the image by 90 degrees (clockwise).\n    You need to do this in place."
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [str(count_odd(x)) + 'n the'+'str' + str(i) + 'n of the'+ 'input.'\n        for i, x in enumerate(lst)]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [\"the number of odd elements\" + \" \" + str(len([c for c in s if c in \"13579\"])) + \" \" + \"of the\" + \" \" + str(s) + \" \" + \"of the\" + \" \" + str(lst) + \".\" for s in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    output = []\n    for i in lst:\n        output.append(\"the number of odd elements \" + str(len([n for n in i if n % 2!= 0])) + \" in the \" + str(i) + \" of the \" + str(lst.index(i)) + \" input.\")\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    output = []\n    for element in lst:\n        count = 0\n        for char in element:\n            if char in \"0123456789\":\n                if int(char) % 2 == 0:\n                    count += 1\n        output.append(str(count) + \"n the str\" + str(element) + \" of the \" + \"input.\")\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Replace the follwing two lines with your code\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in lst[i]:\n            if j in ['0', '2', '4', '6', '8']:\n                continue\n            else:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(i+1) + \"of the \" + str(i+1) + \"input.\")\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst_odd = []\n    for i in lst:\n        lst_odd.append(len(set(i)))\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(num, num, num, num) for num in lst_odd]\n    \nprint(odd_count(['1234567']))\nprint(odd_count(['3111111'])"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lst2=[]\n    for string in lst:\n        lst3=list(string)\n        lst4=[]\n        for x in lst3:\n            if x.isdigit() == True:\n                lst4.append(x)\n        lst2.append(lst4)\n    lst5=[]\n    for x in lst2:\n        lst6=[]\n        for y in x:\n            if int(y)%2 == 1:\n                lst6.append(y)\n        lst5.append(lst6)\n    lst7=[]\n    for z in lst5:\n        lst7.append(len(z))\n    lst8=[]\n    for i in range(len(lst7)):\n        lst8.append(\"the number of odd elements \" + str(lst7[i]) + \"n the str\" + str(i+1) + \" of the \" + str(i+1) + \"nput.\")\n    lst9=[]\n    lst9.append(lst8)\n    return lst9\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [num_odd_digits(i) for i in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst_mod = []\n    for i in lst:\n        num_list = [int(x) for x in i]\n        lst_mod.append(str(num_list.count(1)))\n    return lst_mod\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for s in lst:\n        odd_count = 0\n        for i in s:\n            if i in \"0123456789\":\n                if int(i) % 2!= 0:\n                    odd_count += 1\n        result.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(odd_count) + \" of the \" + str(odd_count) + \"input.\")\n    return result\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # time complexity: O(n^2)\n    # space complexity: O(1)\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        left = i\n        right = i + 1\n        while right < len(nums) + 1:\n            curr_sum = sum(nums[left:right])\n            min_sum = min(min_sum, curr_sum)\n            right += 1\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = len(nums)\n    f = [0 for i in range(n)]\n    f[0] = nums[0]\n    for i in range(1, n):\n        f[i] = nums[i] + f[i-1]\n    m = 100000\n    for i in range(0, n):\n        for j in range(i, n):\n            m = min(m, f[j] - f[i-1])\n    return m\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    total = 0\n    left, right = 0, 0\n    minimum_sum = 99999999\n    while right < len(nums):\n        total += nums[right]\n        while total >= nums[left]:\n            minimum_sum = min(minimum_sum, total - nums[left])\n            left += 1\n        right += 1\n    return minimum_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def kadane(lst):\n        m, s = lst[0], lst[0]\n        for i in range(1, len(lst)):\n            s = max(s + lst[i], lst[i])\n            m = max(m, s)\n        return m\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    subarray_sum = float(\"inf\")\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n        subarray_sum = min(subarray_sum, sum)\n        if sum < 0:\n            sum = 0\n    return subarray_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    min_sum = float('inf')\n    sub_array = []\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    subArraySum = {}\n    subArraySum[0] = nums[0]\n    subArraySum[0] = 0\n    min_sum = nums[0]\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum = 0\n    min_sum = 0\n    l = len(nums)\n    for i in range(0, l):\n        sum += nums[i]\n        if i == 0 or min_sum > sum:\n            min_sum = sum\n    return min_sum\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    m = math.floor(capacity)\n    dp = [[[0 for _ in range(m + 1)] for _ in range(cols)] for _ in range(rows)]\n    dp[0][0][m] = 1\n    for row in range(1, rows):\n        for col in range(cols):\n            if grid[row][col] == 0:\n                for i in range(m + 1):\n                    dp[row][col][i] = dp[row - 1][col][i]\n            else:\n                dp[row][col][0] = dp[row - 1][col][0] + dp[row - 1][col][m]\n                for i in range(1, m + 1):\n                    dp[row][col][i] = dp[row - 1][col][i - 1] + dp[row - 1][col][i]\n    print(dp)\n    return dp[-1][-1][0]\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def dfs(x, y, nb_buckets, visited, filled):\n        nonlocal grid, capacity\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    bucket_count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                bucket_count += 1\n    \n    if bucket_count == 0:\n        return 0\n    \n    # build graph\n    graph = [[] for _ in range(bucket_count)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                for k in range(i-1, i+2):\n                    if k >= 0 and k < n:\n                        for l in range(j-1, j+2):\n                            if l >= 0 and l < m:\n                                if grid[k][l] == 1:\n                                    graph[i*m+j].append(k*m+l)\n    \n    # bfs\n    q = [0]\n    visited = [False]*bucket_count\n    while q:\n        curr_bucket = q.pop()\n        if not visited[curr_bucket]:\n            visited[curr_bucket] = True\n            for neighbor in graph[curr_bucket]:\n                if neighbor == bucket_count-1:\n                    return bucket_count-1\n                if not visited[neighbor]:\n                    q.append(neighbor)\n    \n    # unreachable\n    return -1\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # get dimensions of grid\n    n, m = len(grid), len(grid[0])\n    \n    # init queue to store start points\n    q = [(-1,-1)]\n    # store start points as (-1,-1)\n    for i, row in enumerate(grid):\n        for j, col in enumerate(row):\n            if col == 1:\n                q.append((i,j))\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    max_water = 0\n    for row in grid:\n        for j in range(len(row)):\n            if row[j] == 1:\n                max_water += math.ceil(row[j]/capacity)\n                break\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    # create a dictionary of water levels\n    water_levels = {}\n    for i in range(rows):\n        for j in range(cols):\n            water_levels[(i,j)] = grid[i][j]\n    # print(water_levels)\n    # create a dictionary of buckets\n    buckets = {}\n    for i in range(rows):\n        for j in range(cols):\n            buckets[(i,j)] = capacity\n    # print(buckets)\n    # now we have both water levels and buckets, we'll start\n    # we create a list of tuples of (x,y,water level,bucket capacity)\n    locations = []\n    for location in water_levels:\n        locations.append((location[0],location[1],water_levels[location],buckets[location]))\n    # print(locations)\n    # now we'll sort them so that we can keep track of the min and max water levels\n    sorted_locations = sorted(locations, key=lambda x: x[2])\n    min_water_level = sorted_locations[0][2]\n    max_water_level = sorted_locations[-1][2]\n    # print(min_water_level,max_water_level)\n    # now we'll do a similar process for buckets\n    sorted_buckets = sorted(buckets.items(), key=lambda x: x[1])\n    min_bucket_capacity = sorted_buckets[0][1]\n    max_bucket_capacity = sorted_buckets[-1][1]\n    # print(min_bucket_capacity,max_bucket_capacity)\n    # now we can initialize the max number of times we need to lower the buckets\n    lower_buckets = math.ceil((max_water_level-min_water_level)/min_bucket_capacity)\n    # print(lower_buckets)\n    # now we can find the max number of times we need to lower the buckets\n    times = 0\n    # print(sorted_locations)\n    while True:\n        # print(sorted_locations)\n        temp_locations = []\n        # this is for checking whether we have empty buckets\n        empty_buckets = []\n        for location in sorted_locations:\n            # print(location)\n            # if the bucket is empty, we add it to the empty_buckets list\n            # if the water level is less than the bucket capacity, we add the water level and the bucket capacity\n            # to the temp_locations list\n            if location[1] == 0:\n                empty_buckets.append(location[0])\n                continue\n            elif location[2] < location[3]:\n                temp_locations.append((location[0],location[1],location[2],location[3]))\n        # now we have the temp_locations list\n        # we need to find the max and min water levels in the temp_locations list\n        # we can use the same function we used earlier to find the min and max water levels\n        sorted_temp_locations = sorted(temp_locations, key=lambda x: x[2])\n        min_temp_water_level = sorted_temp_locations[0][2]\n        max_temp_water_level = sorted_temp_locations[-1][2]\n        # print(min_temp_water_level,max_temp_water_level)\n        # we need to find the max number of times we need to lower the buckets\n        lower_buckets = math.ceil((max_temp_water_level-min_temp_water_level)/min_bucket_capacity)\n        # print(lower_buckets)\n        # now we need to find the buckets that are empty\n        # we will do this by finding the max water level in the temp_locations\n        # list, and then subtracting that water level from the max_bucket_capacity\n        # we can find the empty buckets by subtracting the buckets we have\n        # from the total buckets\n        empty_buckets = max_bucket_capacity - (max_temp_water_level - min_temp_water_level)\n        # print(empty_buckets)\n        # now we need to add it to the times we have to lower the buckets\n        lower_bucket"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not grid or not grid[0] or not bucket_capacity:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Time: O(N)\n    # Space: O(1)\n    # 1) We start with the first well and empty the bucket.\n    #    If the bucket is not empty, we continue on to the next well.\n    # 2) We do this again for each row.\n    #    Once we get to a row, if it is not empty, then we continue on to the next row.\n    #    Once we get to the end of the row, we check if the total volume\n    #    is equal to or greater than the capacity.\n    #    If it is, then we continue to the next row.\n    #    If not, then we decrement the count of the bucket.\n    #    If the count is less than zero, then we return the count.\n    # 3) We return the count.\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    m = len(grid)\n    n = len(grid[0])\n    # dp[i][j] -> time taken to empty i,j well\n    dp = [[math.inf for _ in range(n+1)] for _ in range(m+1)]\n    dp[m][n-1] = 0\n    dp[m-1][n] = 0\n    dp[m-1][n-1] = 0\n    for i in range(m-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            dp[i][j] = max(dp[i+1][j], dp[i][j+1])\n            if dp[i][j] < math.inf:\n                dp[i][j] += grid[i][j]\n            if dp[i][j] < capacity:\n                dp[i][j] = 0\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # O(NlogN)\n    # arr = sorted(arr, key=lambda x: str(bin(x)).count('1'), reverse=True)\n    # arr = sorted(arr, key=lambda x: (str(bin(x))[2:].count('1'), x), reverse=True)\n    # return arr\n    # O(N)\n    def binary(x):\n        return ''.join(sorted(str(bin(x))[2:]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Initialize the data structure\n    s = sortedcontainers.SortedList()\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # initialize vars\n    sorted_arr = []\n    # loop over arr\n    for num in arr:\n        sorted_arr.append([num, count_ones(num)])\n    sorted_arr.sort(key=lambda x: x[0])\n    sorted_arr.sort(key=lambda x: x[1])\n    return [i[0] for i in sorted_arr]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(arr, key=lambda num: bin(num).count('1'))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    arr.sort()\n    new_arr = []\n    for num in arr:\n        new_arr.append(binary_sort(num))\n    return new_arr\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # list of words\n    list_of_words = []\n    \n    # replace spaces with nothing and split the string into a list of words\n    s = s.replace(\" \", \"\")\n    list_of_words = s.split(\" \")\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    words = s.split()\n    result = []\n    for word in words:\n        if len(consonants(word)) == n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [w for w in s.split() if len(w) == n and not has_non_vowel_letter(w)]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = s.lower()\n    l = []\n    for word in s.split():\n        if consonants_count(word) == n:\n            l.append(word)\n    return l\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    return [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1) if len(s[i:j]) == n and is_consonant(s[i:j])]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lst = []\n    for i in s.split():\n        if len(i) == n:\n            lst.append(i)\n    return lst"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not s:\n        return []\n    # Input string is not empty\n    if not n:\n        return []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Replace the line below with all your code. Remember to return the requested data.\n    return []\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\n    consonants = [chr(i) for i in range(97,123) if i not in [105, 106]] #105 = 'i' 106 = 'u'\n    vowels = [chr(i) for i in range(65,91)] + [chr(i) for i in range(97,123) if i not in [105, 106]]\n    closest_vowel = ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = ['a','e','i','o','u']\n    close_vowel = ''\n    for i in range(len(word)-1,0,-1):\n        if word[i] in vowels:\n            if word[i-1] not in vowels:\n                close_vowel = word[i]\n            break\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if word[i+1] not in vowels:\n                close_vowel = word[i]\n            break\n    return close_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    word = word.lower()\n    for i in range(1, len(word)):\n        if word[-i] in 'aeiou' and word[-i - 1] not in 'aeiou':\n            return word[-i]\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # result = ''\n    # for index, letter in enumerate(word):\n    #     if letter not in 'aeiou':\n    #         # print(letter)\n    #         if (index!= 0) & (index!= len(word)-1):\n    #             if (word[index+1] in 'aeiou') & (word[index-1] in 'aeiou'):\n    #                 # print(word[index+1])\n    #                 # print(word[index-1])\n    #                 result = word[index]\n    #                 break\n    # return result\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for index, c in enumerate(word):\n        if c in VOWELS and index > 0 and word[index - 1] not in VOWELS:\n            return c\n    return ''\n    \ndef get_closest_vowel_rec(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    res = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if word[0] not in vowels and word[-1] not in vowels:\n        return \"\"\n    for i in range(1, len(word)-1):\n        if word[i] not in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return res\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i, char in enumerate(word):\n        if char.lower() in 'aeiou':\n            return char\n    \n    return \"\""
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    closest = \"\"\n    count = len(word)\n    for i in range(count - 1, -1, -1):\n        if not word[i].isalpha():\n            continue\n        if word[i].lower() in \"aeiou\":\n            continue\n        if word[i - 1].lower() in \"aeiou\" and word[i + 1].lower() in \"aeiou\":\n            continue\n        closest = word[i]\n        break\n    return closest\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i,ch in enumerate(word):\n        if ch.lower() in \"aeiou\":\n            if word[i-1].isupper() or word[i+1].isupper():\n                continue\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = -1\n    vowels = \"AEIOU\"\n    while i < len(word) - 2:\n        if word[i + 1] == \" \" or word[i + 2] == \" \":\n            break\n        if word[i] in vowels and word[i + 1] not in vowels and word[i + 2] not in vowels:\n            return word[i]\n        i += 1\n    return \"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    poss = []\n    for s in lst:\n        stack = []\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            elif stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(ch)\n        if not stack:\n            poss.append(s)\n    if not poss:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # checks to see if the list has a closing paren, if not then it will return\n    # \"No\"\n    if lst[0][-1]!= ')':\n        return 'No'\n    # creates a stack to store the opening parens and initializes it to 0\n    open = 0\n    # the length of the list\n    length = len(lst)\n    # iterates through the list\n    for i in range(length):\n        # if the char is a closing paren and the stack is not empty\n        if lst[i][0] == ')' and open!= 0:\n            # pops off the top of the stack\n            open -= 1\n        # if the char is a closing paren and the stack is empty\n        elif lst[i][0] == ')' and open == 0:\n            # returns \"No\"\n            return 'No'\n        # if the char is an opening paren and the stack is empty\n        elif lst[i][0] == '(':\n            # pushes on the stack\n            open += 1\n    # if the stack is empty then the string is good\n    if open == 0:\n        return 'Yes'\n    # if the stack is not empty then the string is not good\n    else:\n        return 'No'"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if lst[0] == ')' or lst[-1] == '(':\n        return 'No'\n    lst = lst[1:-1]\n    while lst:\n        if '()' in lst:\n            lst.remove('()')\n            lst.remove('()')\n        else:\n            break\n    if len(lst) == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    counter = 0\n    for i in lst:\n        if i == '(':\n            counter += 1\n        else:\n            counter -= 1\n            if counter < 0:\n                return 'No'\n    return 'Yes' if counter == 0 else 'No'"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    open_p, close_p = 0, 0\n    for char in lst:\n        if char == '(':\n            open_p += 1\n        else:\n            close_p += 1\n            if close_p > open_p:\n                return 'No'\n    return 'Yes' if open_p == close_p else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # note: the algorithm uses stack\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # a recursive solution\n    # def check_balance(s):\n    #     if s.count('(') == s.count(')') and (not s or s[0] == ')'):\n    #         return 'Yes'\n    #     i = 0\n    #     while i < len(s):\n    #         if s[i] == ')':\n    #             s = s[:i] + '(' + s[i:]\n    #             if check_balance(s):\n    #                 return 'Yes'\n    #             i += 2\n    #         i += 1\n    #     return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst = list(lst)\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == ')':\n            count += 1\n        elif lst[i] == '(':\n            count -= 1\n        if count < 0:\n            return 'No'\n    if count == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return 'Yes' if lst[0].count('(') == lst[1].count('(') and lst[0].count(')') == lst[1].count(')') else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(arr)[::-1][:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(arr, reverse=True)[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # count maximum elements, return sorted arr of max k elements\n    def count_max_elements(arr, k):\n        return sorted(arr, reverse=True)[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(arr, reverse=True)[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    stack = []\n    for i in range(len(arr)):\n        if not stack or stack[0] <= arr[i]:\n            stack.append(arr[i])\n            if len(stack) == k:\n                stack.sort()\n                break\n    return stack\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # swap the 0th element with the minimum element in the array\n    arr.sort()\n    # initialize a new list with the first k elements\n    new_arr = arr[:k]\n    # return the list\n    return new_arr\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return merge_k_sorted_lists_preprocess(arr, k)[0]\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2!= 0:\n            sum += lst[i]\n    return su"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # 0.06567862209503288\n    # lst = list(lst)\n    # return sum([lst[i] for i in range(len(lst)) if (i % 2 == 0) and (lst[i] % 2 == 1)])\n    \n    return sum([lst[i] for i in range(len(lst)) if (i % 2 == 0) and (lst[i] % 2 == 1)])\n    \n    # or\n    # return sum([lst[i] for i in range(len(lst)) if i % 2 == 0])\n    \n    # or\n    # return sum([lst[i] for i in range(len(lst)) if i % 2 == 1])\n    \n    # or\n    # return sum([lst[i] for i in range(len(lst)) if i % 2 == 1])\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)\n    \n    "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum_of_odd_elements = 0\n    for index, num in enumerate(lst):\n        if index % 2 == 0:\n            sum_of_odd_elements += num\n    return sum_of_odd_elements"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    even = []\n    odd = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    return sum(odd)\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum([x for i,x in enumerate(lst) if i%2==0 and x%2!=0])\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    evens = [i for i in lst if i%2 == 0]\n    return sum(evens)\n    \ndef solution_1(lst):\n    return sum([i for i in lst if i%2!=0 and i%2!=0]"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    suma = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2!= 0:\n            suma += lst[i]\n    return suma"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst1 = [0]*len(lst)\n    if len(lst)%2 == 1:\n        for i in range(0,len(lst)):\n            if i%2!= 0:\n                lst1[i] = lst[i]\n        return sum(lst1)\n    else:\n        for i in range(0,len(lst)):\n            if i%2 == 0:\n                lst1[i] = lst[i]\n        return sum(lst1)\n    \nprint(solution([30, 13, 24, 321]))\nprint(solution([5, 8, 7, 1]))\nprint(solution([3,3,3,3,3]))\nprint(solution([6,5,4,3,2,1]))\nprint(solution([10,11,12,13,14,15])"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return sum([i for i in lst if i%2!=0 and lst.index(i) %2 == 0]"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s = 0\n    for i in range(k):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Time: O(n)\n    # Space: O(n)\n    \n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum_digits = 0\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # arr = [11,12,13,14,15,16,17,18,19,110,100]\n    # k = 2\n    res = 0\n    for i in range(k):\n        res += sum(list(map(int, str(arr[i]))))\n    return res\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(arr) < k:\n        return None\n    return sum(int(num[0]) for num in arr[:k])"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    arr = [int(n) for n in arr]\n    i = 0\n    while i < k:\n        n = arr[i]\n        if n > 9 and n < 100:\n            n = arr.pop(i)\n            arr.append(n)\n            k += 1\n        else:\n            i += 1\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not arr:\n        return 0\n    return sum([x for x in arr[:k] if x < 100])\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s = sum(arr[:k])\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = 0\n    for i in arr[:k]:\n        result += int(str(i)[0]) + int(str(i)[1])\n    return result\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # result = 0\n    # for i in arr[:k]:\n    #     # i[-1] => last digit of i\n    #     if i % 10 <= 2:\n    #         result += i\n    # return result\n    arr = [int(x) for x in arr]\n    result = 0\n    for i in arr[:k]:\n        if i // 10 < 2:\n            result += i\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    collatz = [n]\n    while collatz[-1]!= 1:\n        if collatz[-1] % 2 == 0:\n            collatz.append(int(collatz[-1] / 2))\n        else:\n            collatz.append(3 * collatz[-1] + 1)\n    collatz.pop(-1)\n    return sorted(list(set(collatz)))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return []\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    collatz_seq = collatz(n)\n    odd_collatz = [x for x in collatz_seq if x % 2 == 1]\n    return sorted(odd_collatz)"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def is_odd(n):\n        return n % 2 == 1\n    \n    odd_numbers = []\n    collatz_sequence = collatz(n)\n    for item in collatz_sequence:\n        if is_odd(item):\n            odd_numbers.append(item)\n    return odd_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [i for i in collatz_sequence(n) if i%2!= 0]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(list(filter(lambda x: x % 2 == 1, collatz(n))))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    collatz_seq = []\n    current_n = n\n    while current_n > 1:\n        if current_n % 2 == 0:\n            collatz_seq.append(int(current_n))\n            current_n = int(current_n / 2)\n        else:\n            collatz_seq.append(int(3*current_n + 1))\n            current_n = int(3*current_n + 1)\n    collatz_seq.append(1)\n    return collatz_seq\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return ["
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    collatz_seq = collatz(n)\n    odd_collatz = [x for x in collatz_seq if x % 2!= 0]\n    return odd_collatz\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    date_format = re.compile(r'^(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])-(19|20)\\d\\d$')\n    if date_format.search(date):\n        date_split = date.split('-')\n        if int(date_split[0]) in [1, 3, 5, 7, 8, 10, 12] and int(date_split[1]) in range(1, 32) and int(date_split[2]) in range(1900, 2020):\n            return True\n        elif int(date_split[0]) in [4, 6, 9, 11] and int(date_split[1]) in range(1, 31) and int(date_split[2]) in range(1900, 2020):\n            return True\n        elif int(date_split[0]) == 2 and int(date_split[1]) in range(1, 29) and int(date_split[2]) in range(1900, 2020):\n            return True\n        elif int(date_split[0]) in range(1, 13) and int(date_split[1]) in range(1, 32) and int(date_split[2]) in range(1900, 2020):\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    list_1 = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    list_2 = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    list_3 = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    list_4 = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    list_5 = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    list_6 = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    list_7 = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    list_8 = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    list_9 = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    list_10 = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    list_11 = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    list_12 = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    date_list = date.split('-')\n    day = int(date_list[0])\n    month = int(date_list[1])\n    year = int(date_list[2])\n    if len(date_list) == 3:\n        if day == 0 or day == 1 or day == 2 or day == 3 or day == 4 or day == 5 or day == 6 or day == 7 or day == 8 or day == 9 or day == 10 or day == 11 or day == 12:\n            if month == 0 or month == 1 or month == 2 or month == 3 or month == 4 or month == 5 or month == 6 or month == 7 or month == 8 or month == 9 or month == 10 or month == 11 or month == 12:\n                if year == 0 or year == 1 or year == 2 or year == 3 or year == 4 or year == 5 or year == 6 or year == 7 or year == 8 or year == 9 or year == 10 or year == 11 or year == 12:\n                    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                        if day > 0 and day < 32:\n                            return True\n                        else:\n                            return False\n                    elif month == 2:\n                        if day > 0 and day < 29:\n                            return True\n                        else:\n                            return False\n                    elif month == 4 or month == 6 or month == 9 or month == 11:\n                        if day > 0 and day < 30:\n                            return True\n                        else:\n                            return False\n                    elif month == 5 or month == 7 or month == 10 or month == 12:\n                        if day > 0 and day < 31:\n                            return True\n                        else:\n                            return False\n                    elif month == 3:\n                        if day > 0 and day < 32:\n                            return True\n                        else:\n                            return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    is_date_valid = True\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    # *****************SOLUTION**********************\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(date) == 0:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # remove any spaces\n    date = date.split()\n    date = ''.join(date)\n    # split the date\n    date = date.split('-')\n    # check if there is only two parts\n    if len(date)!= 3:\n        return False\n    else:\n        # check if the month and day are numbers\n        try:\n            int(date[0])\n            int(date[1])\n            int(date[2])\n        except:\n            return False\n        # check if the month is between 1 and 12\n        if int(date[0]) < 1 or int(date[0]) > 12:\n            return False\n        else:\n            # check if the month is 1, 3, 5, 7, 8, 10, 12\n            if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n                # check if the day is between 1 and 31\n                if int(date[1]) < 1 or int(date[1]) > 31:\n                    return False\n                else:\n                    # check if the day is between 1 and 30\n                    if int(date[0]) == 4 or int(date[0]) == 6 or int(date[0]) == 9 or int(date[0]) == 11:\n                        if int(date[1]) < 1 or int(date[1]) > 30:\n                            return False\n                    # check if the day is between 1 and 29\n                    else:\n                        if int(date[0]) == 2:\n                            if int(date[1]) < 1 or int(date[1]) > 29:\n                                return False\n                        else:\n                            return False\n            # check if the month is 4, 6, 9, 11\n            elif int(date[0]) in [4, 6, 9, 11]:\n                # check if the day is between 1 and 30\n                if int(date[1]) < 1 or int(date[1]) > 30:\n                    return False\n                else:\n                    return True\n            # check if the month is 2\n            else:\n                # check if the day is between 1 and 29\n                if int(date[0]) == 2:\n                    if int(date[1]) < 1 or int(date[1]) > 29:\n                        return False\n                    else:\n                        return True\n                else:\n                    return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    '''\n    Procedure:\n        * Split the date into day, month and year.\n        * Validate the day\n        * Validate the month\n        * Validate the year\n        * Validate the date\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [i for i in txt.split()]\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # for letter in txt:\n    #     if letter.isspace() == True:\n    #         print('space')\n    #     else:\n    #         print('no space')\n    # if txt == '':\n    #     return 0\n    # elif txt.isspace() == True:\n    #     return txt.split()\n    # elif txt == '':\n    #     return []\n    # else:\n    #     return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not txt: return 0\n    if'' not in txt:\n        if txt.isalpha():\n            return 1\n        else:\n            return 0\n    else:\n        if ',' not in txt:\n            return len([k for k in txt.split() if k.isalpha()])\n        else:\n            return len([k for k in txt.split(',') if k.isalpha()])\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l = txt.split()\n    o = 0\n    for i in txt:\n        if i == ',':\n            l.append(i)\n        if i =='':\n            l.append(i)\n    print(l)\n    for i in txt:\n        if i.isdigit():\n            o += 1\n    print(o)\n    return l\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # list comprehension \n    # case 1: words with whitespace\n    # case 2: words with commas\n    # case 3: no whitespace and no commas\n    return None\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    import string\n    s = txt.split()\n    c = 0\n    for i in txt:\n        if i in string.ascii_lowercase:\n            c += 1\n    return s + [c] if c > 0 else s\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    # check for multiple instances of same number\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n    \n    # sort list\n    lst.sort()\n    \n    # compare list with sorted list\n    if lst == lst[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_lst = []\n    for i in lst:\n        new_lst.append(int(i))\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # Check if list is empty\n    if len(lst) == 0:\n        return False\n    \n    # Check if list has one element\n    if len(lst) == 1:\n        return True\n    \n    # Check if list is sorted\n    if lst == sorted(lst):\n        return True\n    \n    # If list is not sorted, return False\n    return False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst = [x for x in lst if isinstance(x, int)]\n    return lst == sorted(lst)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    if sorted(lst) == lst:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return lst == sorted(lst)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(lst) < 2:\n        return True\n    \n    for x in range(1, len(lst)):\n        if lst[x] < lst[x - 1]:\n            return False\n        elif lst[x] == lst[x - 1]:\n            return False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return False if len(lst) > 1 and lst.count(lst[0])!= len(lst) or len(set(lst)) == 1 else True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    if len(lst) == 0 or len(lst) == 1:\n        return True\n    elif lst[0] > lst[1]:\n        return False\n    else:\n        return is_sorted(lst[1:])\n    \n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    x = min(interval1[0], interval1[1])\n    y = max(interval1[0], interval1[1])\n    z = min(interval2[0], interval2[1])\n    t = max(interval2[0], interval2[1])\n    if x <= z and y >= t:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    start, end = interval1\n    s, e = interval2\n    if e < start:\n        return \"NO\"\n    if s > end:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # print(interval1, interval2)\n    \n    # case 1. if the intervals don't intersect\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n    \n    # case 2. if the intervals intersect but the length of intersection is not a prime number\n    # return \"NO\"\n    \n    # case 3. if the intervals intersect and the length of intersection is a prime number\n    if is_prime(abs(interval1[0] - interval2[1])):\n        return \"YES\"\n    if is_prime(abs(interval1[1] - interval2[0])):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # YOUR CODE HERE\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start2 > end1 or end2 < start1:\n        return \"NO\"\n    if end1 > start2 and start2 < end2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not interval1 or not interval2:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert len(interval1) == 2\n    assert len(interval2) == 2\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # if intervals don't intersect return \"NO\"\n    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"YES\" if is_prime(len(list(filter(lambda x: x[0] <= x[1], list(zip(interval1, interval2)))))) else \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return None\n    signs = [1, 1, -1, -1]\n    res = 1\n    for x in arr:\n        res *= x if x in signs else 1\n    return sum(abs(x) for x in arr) * res\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return None if len(arr) == 0 else sum([abs(x) for x in arr]) * \\\n               reduce(lambda x, y: x * y, [1 if x > 0 else -1 if x < 0 else 0 for x in arr])\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr:\n        return None\n    return sum([abs(elem) for elem in arr]) * prod_signs_without_zero([elem for elem in arr if elem!= 0])\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    arr = [1 if a >= 0 else -1 if a < 0 else 0 for a in arr]\n    return sum([abs(a) for a in arr]) * (abs(prod(arr)))\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    signs = [i for i in arr if i >= 0]\n    return sum(map(abs, arr)) * prod(signs) if signs else None"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not arr:\n        return None\n    sum_of_magnitudes = sum(map(abs, arr))\n    return sum_of_magnitudes * reduce(lambda x, y: x * y, map(sign, arr))\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def sign(num):\n        if num == 0:\n            return 0\n        return 1 if num > 0 else -1\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not arr:\n        return None\n    return sum([abs(i) for i in arr]) * prod([j for j in arr if j])\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return None\n    return sum(abs(i) for i in arr) * prod(sign(i) for i in arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    signs = []\n    for i in arr:\n        if i == 0:\n            signs.append(0)\n        elif i < 0:\n            signs.append(-1)\n        else:\n            signs.append(1)\n    # signs = [1, -1, -1, -1]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = len(grid)\n    if n == 0 or k == 0:\n        return []\n    if n == 1:\n        return [grid[0][0]]\n    # build graph\n    g = {}\n    for i in range(n):\n        for j in range(n):\n            curr = (i, j)\n            g[curr] = set()\n            if i > 0:\n                g[curr].add((i - 1, j))\n            if j > 0:\n                g[curr].add((i, j - 1))\n            if i < n - 1:\n                g[curr].add((i + 1, j))\n            if j < n - 1:\n                g[curr].add((i, j + 1))\n    # sort grid\n    values = sorted(grid[0][0])\n    for i in range(1, n):\n        for j in range(n):\n            curr = (i, j)\n            values.append(grid[i][j])\n            values = sorted(values)\n            if len(values)!= n * n + 1:\n                return []\n            grid[i][j] = values.index(grid[i][j]) + 1\n    # find shortest path\n    min_path = []\n    curr = (0, 0)\n    length = 0\n    while length < k:\n        min_path.append(grid[curr[0]][curr[1]])\n        length += 1\n        next = min(g[curr], key=lambda x: grid[x[0]][x[1]])\n        curr = next\n    min_path.append(grid[curr[0]][curr[1]])\n    return min_path\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # add the start position as a tuple in the queue\n    q = [ (1,1,0) ]\n    N = len(grid)\n    visited = set()\n    while q:\n        x, y, steps = q.pop(0)\n        visited.add((x,y))\n        if steps == k:\n            return grid[x-1][y-1]\n        for dx, dy in ((-1,0), (1,0), (0,1), (0, -1)):\n            nx, ny = x + dx, y + dy\n            if 0 < nx <= N and 0 < ny <= N and (nx, ny) not in visited:\n                q.append((nx, ny, steps + 1))\n    return None\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    m, n = len(grid), len(grid[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    res = []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    if not grid or not grid[0] or not k:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not grid or not grid[0]:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Calculate the size of the grid (number of rows and columns)\n    N = len(grid)\n    # Calculate the number of paths in the grid (number of paths of length k)\n    n_paths = (N * N - N) // 2\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not grid or not grid[0]:\n        return []\n    if k < 1:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not grid or not grid[0]:\n        return []\n    m, n = len(grid), len(grid[0])\n    if m < 2 or n < 2:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    N = len(grid)\n    if N == 0:\n        return None\n    if N == 1:\n        return grid[0]\n    if N == 2:\n        return grid[0] if grid[0][0] < grid[1][0] else grid[1]\n    if k > N:\n        return None\n    visited = [ [0] * N for _ in range(N)]\n    return min_path(grid, k, 1, 1, visited)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    import heapq\n    import numpy as np\n    def find_next_cell(grid, current_cell):\n        next_cell = None\n        if current_cell[0]+1 < n and not grid[current_cell[0]+1][current_cell[1]]:\n            next_cell = (current_cell[0]+1, current_cell[1])\n        if current_cell[0]-1 >= 0 and not grid[current_cell[0]-1][current_cell[1]]:\n            next_cell = (current_cell[0]-1, current_cell[1])\n        if current_cell[1]+1 < m and not grid[current_cell[0]][current_cell[1]+1]:\n            next_cell = (current_cell[0], current_cell[1]+1)\n        if current_cell[1]-1 >= 0 and not grid[current_cell[0]][current_cell[1]-1]:\n            next_cell = (current_cell[0], current_cell[1]-1)\n        return next_cell\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    else:\n        res = [1, 3]\n        for i in range(2, n + 1):\n            res.append(res[i - 1] + res[i - 2] + res[i - 3])\n        return res\n        \ndef trib(n):\n    \"\"\"Recursion\n    Tribonacci sequence is defined by the recurrence:\n    trib(n) = 1 + n / 2, if n is even.\n    trib(n) =  trib(n - 1) + trib(n - 2) + trib(n + 1), if n is odd.\n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    trib(1) = [1]\n    trib(2) = [1, 1]\n    trib(3) = [1, 1, 2]\n    trib(4) = [1, 1, 2, 3]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        res = [1, 1]\n        for i in range(2, n + 1):\n            res.append(res[i - 1] + res[i - 2] + res[i - 3])\n        return res\n        \nif __name__ == '__main__':\n    # n = int(input())\n    n = 4\n    print(trib(n))\n    print(tri(n))"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    if n == 0:\n        return result\n    result.append(1)\n    if n == 1:\n        return result\n    if n == 2:\n        return result + [2]\n    for i in range(n - 2):\n        result.append(result[-1] + result[-2] + result[-3])\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # create empty list\n    res = []\n    # add 1 to list and return\n    res.append(1)\n    # if n is 1\n    if n == 1:\n        return res\n    # iterate for number of steps\n    for x in range(1, n + 1):\n        # if x is even\n        if x % 2 == 0:\n            # then append to list and divide by 2\n            res.append(int(x / 2))\n        # else\n        else:\n            # then add all the elements to the list\n            res.append(res[x - 2] + res[x - 1] + res[x])\n    # return list\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst = [0,1,1]\n    if n == 0:\n        return []\n    if n == 1:\n        return [0,1,1]\n    for i in range(2,n+1):\n        if i%2 == 0:\n            lst.append(lst[i//2] + lst[i//2 - 1])\n        else:\n            lst.append(lst[i//2 - 1] + lst[i//2 - 2] + lst[i//2])\n    return lst\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l = [1, 3]\n    if n == 1: return l\n    for i in range(2, n + 1):\n        l.append(l[i - 1] + l[i - 2] + l[i - 3])\n    return l\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def tribonacci(n, a=[0, 1, 1]):\n        if len(a) > n:\n            return a[:n]\n        if n % 2:\n            a += [a[-1] + a[-3]]\n            tribonacci(n, a)\n        else:\n            a += [a[-2] + a[-4]]\n            tribonacci(n, a)\n    return tribonacci(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # the first 2 values of the sequence are 1 and 2\n    tribonacci_list = [1, 2]\n    \n    if n == 1:\n        return [1]\n    \n    if n == 2:\n        return tribonacci_list\n    \n    # n is larger than 2\n    \n    # if n is even\n    if n % 2 == 0:\n        for i in range(1, n):\n            tribonacci_list.append(tribonacci_list[i] + tribonacci_list[i - 1])\n        return tribonacci_list\n    \n    # if n is odd\n    for i in range(2, n + 1):\n        tribonacci_list.append(tribonacci_list[i - 1] + tribonacci_list[i - 2] + tribonacci_list[i - 3])\n    return tribonacci_lis"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 3:\n        return [1, 3, 2] if n == 2 else [1, 3]\n    previous = [1, 3, 2]\n    evens = 0\n    while n > 2:\n        evens += 1\n        if evens % 2 == 0:\n            current = [sum(x) for x in zip(previous, previous[1:])]\n        else:\n            current = [sum(x) for x in zip(previous, previous[2:])]\n        previous = current\n        n -= 1\n    return current\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [3,1]\n    return [1,3] + [0]*(n-2)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    ret = [1, 3]\n    while len(ret) < n + 1:\n        if len(ret) % 2 == 0:\n            ret.append(ret[-2] + ret[-1])\n        else:\n            ret.append(ret[-2] + ret[-1] + ret[-3])\n    return ret\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n    else:\n        odd_digits = []\n        digits_list = []\n        for i in str(n):\n            digits_list.append(int(i))\n        for i in digits_list:\n            if i % 2!= 0:\n                odd_digits.append(i)\n        return reduce(lambda x, y: x*y, odd_digits)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = 1\n    while n > 0:\n        digit = n % 10\n        n //= 10\n        if digit % 2!= 0:\n            result *= digit\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    x = 1\n    for i in str(n):\n        x = x * int(i)\n    return x\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    product = 1\n    while n:\n        product *= n % 10\n        n //= 10\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Your code here\n    result = 1\n    for i in str(n):\n        if int(i) % 2!= 0:\n            result *= int(i)\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    mult = 1\n    for i in str(n):\n        if int(i)%2!= 0:\n            mult *= int(i)\n    return mult\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    digit_list = []\n    digits_product = 1\n    for digit in str(n):\n        digit_list.append(digit)\n    for number in digit_list:\n        if int(number) % 2 == 0:\n            return 0\n        else:\n            digits_product *= int(number)\n    return digits_product\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def _digits(n):\n        if n < 10:\n            return n\n        else:\n            return n % 10 * _digits(n // 10)\n    return _digits(n)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    res = 1\n    for i in str(n):\n        if int(i) % 2 == 0:\n            return 0\n        res *= int(i)\n    return res\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return n and digits(n//10) * (n%10 if n%2 else 1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # valid = []\n    # for i in string:\n    #     if i == '[':\n    #         valid.append(i)\n    #     else:\n    #         if valid == []:\n    #             return False\n    #         else:\n    #             valid.pop()\n    # if valid == []:\n    #     return True\n    # else:\n    #     return False\n    # OR\n    # return string.count('[') > string.count(']')\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Checks for any valid sequence of brackets\n    def nested(brack):\n        brack = \"\".join(brack)\n        brack_list = []\n        for char in brack:\n            if char == \"[\":\n                brack_list.append(char)\n            elif char == \"]\":\n                brack_list.pop()\n            if len(brack_list) == 0:\n                return True\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    bracket_list = []\n    for char in string:\n        if char == '[':\n            bracket_list.append(char)\n        elif char == ']':\n            if len(bracket_list) == 0:\n                return False\n            else:\n                bracket_list.pop()\n    if len(bracket_list) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    bracket_stack = []\n    bracket_dict = {\"]\":\"[\", \"}\":\"{\", \")\":\"(\"}\n    for char in string:\n        if char in bracket_dict.values():\n            bracket_stack.append(char)\n        elif char in bracket_dict.keys():\n            if not bracket_stack or bracket_dict[char]!= bracket_stack.pop():\n                return False\n        else:\n            return False\n    if bracket_stack:\n        return False\n    return True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # create a boolean variable for the nested condition, initialize it to False\n    # create a set to store the opening brackets\n    # loop through the string\n        # if the current character is an opening bracket\n        # add it to the set\n        # if the current character is a closing bracket\n            # and there is an opening bracket in the set\n            # remove the opening bracket from the set\n        # if the length of the set is equal to 0 and the current character is a closing bracket\n            # the nested condition has been met\n            # return True\n    # if the nested condition has been met\n        # return True\n    # otherwise\n        # return False\n    nested = False\n    openBrackets = set()\n    for char in string:\n        if char == '[':\n            openBrackets.add(char)\n        if char == ']':\n            if len(openBrackets) > 0:\n                openBrackets.remove('[')\n            else:\n                return False\n    if len(openBrackets) == 0 and char == ']':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if string[0] == ']' or string[len(string) - 1] == '[':\n        return False\n    count_open = 0\n    for bracket in string:\n        if bracket == '[':\n            count_open += 1\n        elif bracket == ']':\n            count_open -= 1\n            if count_open < 0:\n                return False\n    if count_open == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    brackets = {'{': '}', '[': ']', '(': ')', '<': '>'}\n    open_brackets = ['{', '[', '(']\n    \n    nested = []\n    for bracket in string:\n        if bracket in open_brackets:\n            nested.append(bracket)\n        elif bracket in brackets:\n            if len(nested) == 0:\n                return False\n            elif brackets[bracket]!= nested[-1]:\n                return False\n            else:\n                nested.pop()\n    \n    return len(nested) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #variables to contain the current and opening bracket we are looking at\n    open_brackets = []\n    #this variable is used to know if we have a matching bracket or not\n    match = 0\n    #loop through each character in the string\n    for i in range(0, len(string)):\n        #add each open bracket to the list of open brackets\n        if string[i] == '[':\n            open_brackets.append('[')\n        #if we encounter a closing bracket, we will look through the list of open brackets\n        if string[i] == ']':\n            if match == 0:\n                #if we encounter a closing bracket with no matching opening bracket, the string is false\n                return False\n            if open_brackets[match - 1] == '[':\n                #if we encounter a closing bracket with matching open bracket, we remove the pair and then increment the match variable to count how many closing brackets are left\n                open_brackets.pop(match - 1)\n                match -= 1\n    #if we loop through the entire string and we have a matching bracket left, then we know we have a valid sequence of brackets\n    if match!= 0:\n        return True\n    #if we don't, then it means we have an opening bracket with no closing bracket and the sequence is false\n    return False\n    \n    \ndef is_balanced(string):\n    '''\n    Create a function that takes a string containing only the characters '(', ')', '[', ']', '{', '}'.\n    The function should return True if and only if all brackets are closed in the correct order.\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    bracket_stack = []\n    for char in string:\n        if char == '[':\n            bracket_stack.append(']')\n        elif char == ']':\n            if bracket_stack and bracket_stack[-1] == ']':\n                bracket_stack.pop()\n            else:\n                return False\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #...\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    ans = 0\n    for i in lst:\n        if i < 0:\n            i = int(i) ** 2\n        else:\n            i = int(i)\n        ans += i\n    return ans\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lst = [1,4,9]\n    result = sum(math.ceil(math.sqrt(x)) for x in lst)\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([int(c)**2 for c in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(list(map(lambda x: math.ceil(x**2), lst)))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return int(round(sum([(round(i) ** 2) for i in lst])))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    result = 0\n    for x in lst:\n        result += x**2\n    return round(result)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum = 0\n    for i in lst:\n        sum += int(i**2)\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sum = 0\n    for item in lst:\n        sum += int(item) ** 2\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    res = 0\n    for num in lst:\n        res += math.ceil(num*num)\n    return res\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(txt) == 0:\n        return False\n    else:\n        if txt[-1].isalpha():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    txt = txt.replace(' ', '')\n    return txt[-1].isalpha()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Your code here\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    txt = txt.split(\" \")\n    return txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # My Code \n    if txt == '':\n        return False\n    split_txt = txt.split()\n    for word in split_txt:\n        if len(word) == 1:\n            return word.isalpha()\n    return split_txt[-1].isalpha()\n    # return txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    txt = txt.split()\n    return any([not x.isalpha() for x in txt[-1]])\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # split the string into individual words\n    words = txt.split()\n    # split the last word into characters\n    characters = list(txt.split()[-1])\n    # loop through characters and see if the last is a letter\n    for char in characters:\n        if char.isalpha():\n            return True\n    return False\n    \ncheck_if_last_char_is_a_letter(\"apple pi e \")\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return bool(txt[-1].isalpha()) and txt.rfind(\" \") == -1\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if txt == \"\":\n        return False\n    if txt.split() == txt:\n        return False\n    else:\n        return txt[-1].isalpha()\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            continue\n        else:\n            return i-1\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(arr) < 2:\n        return -1\n    ind = 0\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i+1]:\n            ind = i\n            break\n    return ind\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    index = 0\n    for i in range(len(arr)):\n        if arr[i] >= arr[index]:\n            index = i\n    if index == 0:\n        return -1\n    return index\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    curr_max = 0\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n        if arr[i] < curr_max:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    prev = 0\n    index = 0\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i,v in enumerate(arr):\n        if i == 0:\n            continue\n        if v <= arr[i-1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # runtime of sort is O(nlogn) and space is O(n)\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(arr) == 0 or len(arr) == 1:\n        return -1\n    previous = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < previous:\n            return i-1\n        previous = arr[i]\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(arr) < 2:\n        return -1\n    min_pre_index = 0\n    min_pre = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_pre:\n            min_pre = arr[i]\n            min_pre_index = i\n    return min_pre_index\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i - 1\n    return -1\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    try:\n        a = max(filter(lambda x: x < 0, lst))\n        b = min(filter(lambda x: x > 0, lst))\n        return a, b\n    except ValueError:\n        return None, None"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #lst.sort()\n    #if len(lst) == 0:\n    #    return (None, None)\n    #if len(lst) == 1:\n    #    if lst[0] == 0:\n    #        return (None, None)\n    #    else:\n    #        return (lst[0], None)\n    #elif lst[0] == 0 and lst[1] > 0:\n    #    return (None, lst[1])\n    #elif lst[0] == 0 and lst[1] == 0:\n    #    return (None, None)\n    #elif lst[0] > 0 and lst[1] == 0:\n    #    return (lst[0], None)\n    #else:\n    #    return (lst[0], lst[1])\n    if len(lst) == 0:\n        return (None, None)\n    else:\n        max_neg = 0\n        min_pos = 0\n        for i in range(len(lst)):\n            if lst[i] < 0:\n                max_neg = max(max_neg, lst[i])\n            elif lst[i] > 0:\n                min_pos = min(min_pos, lst[i])\n            else:\n                pass\n        return (max_neg, min_pos)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst))) if len(lst) > 0 else (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if lst == []:\n        return (None, None)\n    else:\n        m = max(i for i in lst if i < 0)\n        n = min(i for i in lst if i > 0)\n        return (m, n)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not lst:\n        return None, None\n    neg_int = None\n    pos_int = None\n    for x in lst:\n        if x < 0:\n            if neg_int is None:\n                neg_int = x\n            elif x > neg_int:\n                neg_int = x\n        elif x > 0:\n            if pos_int is None:\n                pos_int = x\n            elif x < pos_int:\n                pos_int = x\n    return neg_int, pos_int\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return (None, None)"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst))\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not lst:\n        return None, None\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # check for empty list\n    if not lst:\n        return (None, None)\n    # check for negative integers\n    if lst.count(-1) == len(lst) or lst.count(-2) == len(lst):\n        return (None, None)\n    # initialize variables\n    smallest = None\n    largest = None\n    for num in lst:\n        # find smallest positive integer\n        if smallest == None or num < smallest:\n            smallest = num\n        # find largest negative integer\n        if largest == None or num > largest:\n            largest = num\n    # return tuples\n    return (largest, smallest)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not lst:\n        return (None, None)\n    else:\n        negative_integers = [i for i in lst if i < 0]\n        positive_integers = [i for i in lst if i > 0]\n        if not negative_integers and positive_integers:\n            return (None, min(positive_integers))\n        elif not positive_integers and negative_integers:\n            return (max(negative_integers), None)\n        else:\n            return (max(negative_integers), min(positive_integers))\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    try:\n        return max(a, b)\n    except:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    a = a if isinstance(a, float) else float(a)\n    b = b if isinstance(b, float) else float(b)\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if type(a) == type(b):\n        if type(a) == int or type(a) == float:\n            if a > b:\n                return a\n            else:\n                return b\n    else:\n        return a or b\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    try:\n        if float(a) > float(b):\n            return a\n        elif float(a) == float(b):\n            return None\n        else:\n            return b\n    except ValueError:\n        try:\n            if float(a[0]) > float(a[1]):\n                return a[0]\n            elif float(a[0]) == float(a[1]):\n                return None\n            else:\n                return a[1]\n        except:\n            if a > b:\n                return a\n            elif a == b:\n                return None\n            else:\n                return b\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return max(a,b) if type(a)!= type(b) else None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    try:\n        a = float(a)\n    except ValueError:\n        return a\n    try:\n        b = float(b)\n    except ValueError:\n        return b\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n    \n    "
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a > b:\n        return a\n    if b > a:\n        return b\n    if a == b:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    try:\n        a = float(a)\n    except:\n        a = int(a)\n    try:\n        b = float(b)\n    except:\n        b = int(b)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if isinstance(a, (float, int)) and isinstance(b, (float, int)):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        a_float = a.replace(',', '.')\n        b_float = b.replace(',', '.')\n        if a_float > b_float:\n            return a\n        elif a_float < b_float:\n            return b\n        else:\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    nums = [i for i in range(1, n // 2) if i % 2 == 0]\n    if len(nums)!= 4:\n        return False\n    return sum(nums) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(1, n):\n        if (i % 2 == 1 and n % i == 0) or (i % 2 == 0 and n % i!= 0):\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    from functools import reduce\n    from operator import add\n    return reduce(add, range(2, n, 2)) == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n % 2 == 1:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n % 4!= 0:\n        return False\n    else:\n        counter = 0\n        for i in range(1,n+1):\n            if (i % 2 == 0):\n                counter += i\n        return counter == n\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n_sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            n_sum += i\n        if n_sum == n:\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n <= 4:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 4 == 0:\n        return True\n    if n % 4 == 2:\n        return False\n    \n    n_list = [i for i in range(2, n) if n % i == 0]\n    for i in n_list:\n        if (n - i) % 4 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return (n - 1) % 4 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # i = 2\n    # while n - i > 0:\n    #     if n - i - i % 2 == 0:\n    #         return True\n    #     i += 2\n    # return False\n    if n % 2 == 0:\n        return False\n    else:\n        return sum([i for i in range(2, n+1, 2)]) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return n in [0, 2, 4, 6, 8]\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return 1 if n == 1 else n * special_factorial(n - 1)"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    f = 1\n    for i in range(1, n+1):\n        f *= i\n    return f\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # replace this line with your code\n    return 1\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    total = 1\n    for i in range(n, 1, -1):\n        total *= i\n    return total\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    ...\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n > 0:\n        # Iterate over the integers to do the calculation\n        for i in range(1, n + 1):\n            # Calculate the factorial\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    fact = 1\n    for i in range(n, 0, -1):\n        fact *= i\n    return fact\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return \"\".join([c if c == \" \" else \"_\" if c == \" \"*2 else \"-\" for c in text])\n    \ndef get_punctuation(text):\n    \"\"\"\n    Given a string text, find the characters contained in it that \n    are not a space, a capital letter, or a number\n    \n    get_punctuation(\"Example\") == \"!&%&*\"\n    get_punctuation(\"Example 1\") == \"!&%&*\"\n    get_punctuation(\"Example 2\") == \"!&%&*\"\n    \"\"\"\n    \n    return \"\".join([c for c in text if c not in \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\"])\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    # helper variables for spaces\n    spaces = \" \"\n    minus = \"-\"\n    \n    # keep track of the previous character\n    prev_char = \"\"\n    \n    # keep track of the number of spaces\n    num_of_spaces = 0\n    \n    # keep track of the number of dashes\n    num_of_dashes = 0\n    \n    # keep track of the number of consecutive spaces\n    num_of_consecutive_spaces = 0\n    \n    # keep track of the consecutive spaces' location\n    consecutive_spaces_location = []\n    \n    # iterate through each character in text\n    for index, char in enumerate(text):\n        if char == spaces:\n            # increment the number of spaces\n            num_of_spaces += 1\n            # keep track of the consecutive spaces' location\n            if num_of_consecutive_spaces == 0:\n                consecutive_spaces_location.append(index)\n            else:\n                # append the current index to the list\n                consecutive_spaces_location.append(index)\n                # check if the number of consecutive spaces is greater than 2\n                if num_of_consecutive_spaces > 2:\n                    # if true, replace spaces with dashes\n                    for location in consecutive_spaces_location:\n                        text = text[:location] + minus + text[location+1:]\n                        # increment the number of dashes\n                        num_of_dashes += 1\n                        # reset the list of consecutive spaces' location\n                        consecutive_spaces_location = []\n                        # increment the number of consecutive spaces\n                        num_of_consecutive_spaces = 0\n                else:\n                    # increment the number of consecutive spaces\n                    num_of_consecutive_spaces += 1\n        else:\n            # reset the list of consecutive spaces' location\n            consecutive_spaces_location = []\n            # reset the number of consecutive spaces\n            num_of_consecutive_spaces = 0\n            \n        # set the current character to prev_char\n        prev_char = char\n        \n    # if the number of spaces is greater than 2\n    if num_of_spaces > 2:\n        # replace the spaces with dashes\n        for location in consecutive_spaces_location:\n            text = text[:location] + minus + text[location+1:]\n            # increment the number of dashes\n            num_of_dashes += 1\n            # reset the list of consecutive spaces' location\n            consecutive_spaces_location = []\n            # reset the number of consecutive spaces\n            num_of_consecutive_spaces = 0\n        \n    # return the text\n    return text\n    \n    \ndef fix_spaces_2(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces_2(\"Example\") == \"Example\"\n    fix_spaces_2(\"Example 1\") == \"Example_1\"\n    fix_spaces_2(\" Example 2\") == \"_Example_2\"\n    fix_spaces_2(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    \n    # helper variables for spaces\n    spaces = \" \"\n    minus = \"-\"\n    \n    # keep track of the previous character\n    prev_char = \"\"\n    \n    # keep track of the number of spaces\n    num_of_spaces = 0\n    \n    # keep track of the number of dashes\n    num_of_dashes = 0\n    \n    # keep track of the number of consecutive spaces\n    num_of_consecutive_spaces = 0\n    \n    # keep track of the consecutive spaces' location\n    consecutive_spaces_location = []\n    \n    # iterate through each character in text\n    for index, char in enumerate(text):\n        if char == spaces:\n            # increment the number of spaces\n            num_of_spaces += 1\n            # keep track of the consecutive spaces' location\n            if num_of_consecutive_spaces == 0:\n                consecutive_spaces_location.append(index)\n            else:\n                # append the current index to the list\n                consecutive_spaces_location.append(index)\n                "
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    new_text = \"\"\n    for i in text:\n        if i == \" \":\n            new_text += \"_\"\n        else:\n            new_text += i\n    new_text = new_text.replace(\"  \", \"-\")\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    spaces ='' * len(text)\n    if len(text) == 0:\n        return text\n    if len(text) < len(spaces):\n        spaces = spaces[:len(text)]\n    if len(text) > len(spaces):\n        spaces = spaces[:-1]\n    return text.replace(' ', '_').replace('  ', '_').replace('  ', '_').replace('  ', '_')\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = ''\n    for i in text:\n        if i =='':\n            result += '_'\n        else:\n            result += i\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    spaces = \" \".join(text.split())\n    return spaces.replace(\" \", \"-\")\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    # Solution\n    \n    new_text = text\n    \n    for i in range(0, len(text)):\n        if text[i] =='':\n            if text[i + 1] =='':\n                new_text = new_text.replace(text[i + 1], '-')\n            new_text = new_text[:i] + '_' + new_text[i + 1:]\n            \n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return re.sub(r\"\\s{2,}\", r\"_\", text)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    text_spaces = []\n    count = 0\n    \n    for char in text:\n        if char == \" \":\n            text_spaces.append(count)\n        count += 1\n        \n    for i in range(len(text_spaces)):\n        if i == len(text_spaces)-1:\n            break\n        \n        if text_spaces[i] + 1 == text_spaces[i+1]:\n            text_spaces[i] = \"_\"\n            text_spaces[i+1] = \"_\"\n    \n    for i in range(len(text_spaces)):\n        if i == len(text_spaces)-1:\n            break\n        \n        if text_spaces[i] + 1 == text_spaces[i+1]:\n            text_spaces[i] = \"-\"\n            text_spaces[i+1] = \"-\"\n    \n    for i in range(len(text_spaces)):\n        if i == len(text_spaces)-1:\n            break\n        if text_spaces[i] + 1 == text_spaces[i+1]:\n            text_spaces[i] = \"-\"\n            text_spaces[i+1] = \"-\"\n    \n    for i in range(len(text_spaces)):\n        if i == len(text_spaces)-1:\n            break\n        if text_spaces[i] + 1 == text_spaces[i+1]:\n            text_spaces[i] = \"-\"\n            text_spaces[i+1] = \"-\"\n    \n    text = text.replace(\" \",\"_\")\n    \n    return text\n    \n    \n    \ndef longest_consecutive_sequence(nums):\n    \"\"\"\n    Given an unsorted list of numbers, \n    find the longest consecutive sequence \n    (e.g. [1,3,5,7]) \n    \n    If there are three numbers in the sequence, \n    then it is the longest; \n    if there are two numbers in the sequence, \n    then it is the longest; \n    if there is one number in the sequence, \n    then it is the longest; \n    \n    longest_consecutive_sequence([1,3,5,7]) == [1,3,5,7]\n    longest_consecutive_sequence([1,3,5,7,9]) == [1,3,5,7,9]\n    longest_consecutive_sequence([1,2,3,4]) == [1,2,3,4]\n    longest_consecutive_sequence([1,2,3,4,5]) == [1,2,3,4,5]\n    longest_consecutive_sequence([1,2,3,4,5,7]) == [1,2,3,4,5,7]\n    longest_consecutive_sequence([1,3,5,7,9,10]) == [1,3,5,7,9,10]\n    longest_consecutive_sequence([1,3,5,7,9,10,11]) == [1,3,5,7,9,10,11]\n    longest_consecutive_sequence([1,3,5,7,9,10,11,12]) == [1,3,5,7,9,10,11,12]\n    longest_consecutive_sequence([1,3,5,7,9,10,11,12,13]) == [1,3,5,7,9,10,11,12,13]\n    longest_consecutive_sequence([1,3,5,7,9,10,11,12,13,14]) == [1,3,5,7,9,10,11,12,13,14]\n    longest_consecutive_sequence([1,3,5,7,9,10,11,12,13,14,15]) == [1,3,5,7,9,10,11,12,13,14,15]\n    longest_consecutive_sequence([1,3,5,7,9,10,11,12,13,14,15,16]) == [1,3,5,7,9,10,11,12,13,14,15"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # write your code here\n    regex = r'^[a-zA-Z][a-zA-Z0-9\\.]+\\.[a-zA-Z]{3}$'\n    if re.match(regex, file_name):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Your code goes here\n    if file_name.count('.') == 1:\n        dot_index = file_name.find('.')\n        if len(file_name[:dot_index])!= 0 and file_name[:dot_index][0].isalpha():\n            if file_name[dot_index + 1:].lower() in ['txt', 'dll', 'exe']:\n                return 'Yes'\n    return 'No'\n    "
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if file_name.count('.') > 1:\n        return 'No'\n    for x in file_name:\n        if x.isdigit():\n            return 'No'\n    for x in file_name.split('.'):\n        if len(x)>3:\n            return 'No'\n    dot = file_name.find('.')\n    if dot < 0:\n        return 'No'\n    for x in file_name.split('.'):\n        if x[:dot] == '' or not x[:dot].isalpha():\n            return 'No'\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # file_name = input(\"Enter file name: \")\n    if 3 > len(file_name) > 0 and file_name.count('.') == 1 and file_name.split('.')[0].isalpha():\n        if file_name.split('.')[1].lower() in ['txt', 'exe', 'dll']:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # YOUR CODE HERE\n    if len(file_name) <= 3 or len(file_name.split(\".\")[0]) <= 1:\n        return \"No\"\n    if file_name.count(\".\") == 0:\n        return \"No\"\n    dot_index = file_name.find(\".\")\n    if file_name[dot_index + 1:].lower() not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    if file_name[:dot_index].lower() == \"\":\n        return \"No\"\n    if not file_name[:dot_index].isalpha():\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    numbers = []\n    dot = 0\n    if len(file_name) > 3 and file_name.isdigit():\n        return 'No'\n    for i in range(len(file_name)):\n        if file_name[i] == '0' or file_name[i] == '1' or file_name[i] == '2' or file_name[i] == '3' or file_name[i] == '4' or file_name[i] == '5' or file_name[i] == '6' or file_name[i] == '7' or file_name[i] == '8' or file_name[i] == '9':\n            numbers.append(file_name[i])\n    if len(numbers) > 0:\n        return 'No'\n    for i in range(len(file_name)):\n        if file_name[i] == '.':\n            dot += 1\n    if dot!= 1:\n        return 'No'\n    if file_name[0].isalpha():\n        substring = file_name.split('.')\n        if len(substring) > 2:\n            return 'No'\n        if substring[0] == '' or substring[1] == '':\n            return 'No'\n        if substring[1] not in ['txt', 'exe', 'dll']:\n            return 'No'\n    else:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    file_name = file_name.lower()\n    if file_name.count(\".\") == 1:\n        dot_index = file_name.find(\".\")\n        before_dot = file_name[:dot_index]\n        after_dot = file_name[dot_index+1:]\n        if not before_dot or not before_dot[0] in 'abcdefghijklmnopqrstuvwxyz':\n            return \"No\"\n        if after_dot not in [\"txt\", \"exe\", \"dll\"]:\n            return \"No\"\n        return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if (file_name[0].isdigit()):\n        return \"No\"\n    else:\n        return \"No\" if (file_name.count('.')!= 1) else \"Yes\" if (file_name.split('.')[1] in ['txt', 'exe', 'dll']) else \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    try:\n        if len(file_name.split(\".\")[-1]) < 4:\n            return \"No\"\n        else:\n            for i in range(len(file_name)):\n                if file_name[i] in \"1234567890\":\n                    return \"No\"\n            if len(file_name.split(\".\")[0]) == 0:\n                return \"No\"\n            if len(file_name.split(\".\")[-1]) == 0:\n                return \"No\"\n            elif file_name.split(\".\")[-1] not in ['txt', 'exe', 'dll']:\n                return \"No\"\n    except Exception:\n        return \"No\"\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Checks the list\n    if type(lst)!= list:\n        raise ValueError('Invalid input!')\n    # Checks if the list is empty\n    if len(lst) == 0:\n        return 0\n    # Initializes the list\n    sum_list = []\n    # If the index is a multiple of 3 it squares the entry and adds it to the list\n    for index, entry in enumerate(lst):\n        if index % 3 == 0:\n            entry = entry ** 2\n            sum_list.append(entry)\n    # If the index is a multiple of 4 it cubes the entry and adds it to the list\n    for index, entry in enumerate(lst):\n        if index % 4 == 0 and index % 3!= 0:\n            entry = entry ** 3\n            sum_list.append(entry)\n    return sum(sum_list)"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0 and index % 4!= 0:\n            result += value**2\n        if index % 4 == 0 and index % 3!= 0:\n            result += value**3\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    new_list = []\n    index = 0\n    sum = 0\n    while index < len(lst):\n        if (index % 4 == 0 and index % 3!= 0) or index % 4!= 0 and index % 3 == 0:\n            new_list.append(lst[index] ** 2)\n        index += 1\n    return sum(new_list)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            result += value * value\n        elif index % 4 == 0:\n            result += value * value * value\n    return result"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum_lst = []\n    if len(lst) == 0:\n        return 0\n    for i in range(0, len(lst)):\n        if i % 3 == 0:\n            sum_lst.append(lst[i] ** 2)\n        elif i % 4 == 0 and i % 3!= 0:\n            sum_lst.append(lst[i] ** 3)\n        else:\n            sum_lst.append(lst[i])\n    return sum(sum_lst)"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return 0\n    elif len(lst) > 0:\n        sum = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                sum += lst[i] ** 2\n            elif i % 4 == 0 and i % 3!= 0:\n                sum += lst[i] ** 3\n            else:\n                pass\n        return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sum = 0\n    for item in lst:\n        if item % 3 == 0:\n            sum += pow(item,2)\n        elif item % 4 == 0 and item % 3!= 0:\n            sum += pow(item,3)\n    return sum\n    \nlst1 = [1,2,3]\nlst2 = [1,2,3,4,5,6]\nlst3 = [0,-1,2,-1,5]\nlst4 = [-1,-5,2,-1,-5]\nlst5 = [1,2,3,4,5]\nlst6 = [1,2,3,4,5,6,7,8,9,10]\nlst7 = [-1,-5,2,-1,-5,6,7,8,9,10]\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(map(lambda x: x ** 2 if x % 3 == 0 else x ** 3 if x % 4 == 0 and x % 3!= 0 else x, lst))\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([val**2 for val in lst if val > 0 and (val % 3!= 0 or val % 4 == 0)])\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # split sentence into words\n    words = sentence.split(' ')\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # split words and get primes\n    words = sentence.split(' ')\n    primes = [str(get_prime_number(word)) for word in words]\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sentence_list = sentence.split(\" \")\n    primes_list = get_primes_list(len(sentence_list))\n    result = \"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sentence = sentence.split()\n    return_sentence = ''\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return''.join([word for word in sentence.split(' ') if len(word) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199] ])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    words = sentence.split(' ')\n    words_prime = []\n    for word in words:\n        if is_prime(len(word)):\n            words_prime.append(word)\n    return''.join(words_prime)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    words = sentence.split(' ')\n    primes = {is_prime(len(word)) for word in words}\n    return''.join([word for word in words if is_prime(len(word))])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    words = sentence.split(\" \")\n    primes = [prime_factors(len(word)) for word in words]\n    return \" \".join([word for num_primes, word in sorted(zip(primes, words)) if len(num_primes) == 1])"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # split the sentence into words\n    words = sentence.split(\" \")\n    # filter out the words that are not prime\n    filtered_words = list(filter(lambda x: is_prime(len(x)), words))\n    # join the filtered words\n    new_sentence = \" \".join(filtered_words)\n    return new_sentence\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Solution 1 - 664 ms\n    \"\"\"\n    sentence = sentence.split(' ')\n    lst = []\n    for word in sentence:\n        if len(word) == 0 or len(word) == 1:\n            continue\n        for i in range(2, len(word)):\n            if isPrime(i) and word[i] in word[:i]:\n                break\n        else:\n            lst.append(word)\n    return''.join(lst)\n    \"\"\"\n    # Solution 2 - 372 ms\n    words = sentence.split(' ')\n    lst = []\n    for word in words:\n        if isPrime(len(word)):\n            lst.append(word)\n    return''.join(lst)\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    x, n = int(x.split(\"/\")[0]), int(n.split(\"/\")[0])\n    if n == 1: return True\n    if x % n!= 0: return False\n    if n < 1: return False\n    return simplify(x//n, n)\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return False"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return True if eval(x + \"/\" + n) == int(eval(x + \"/\" + n)) else False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num, den = [int(n) for n in x.split('/')]\n    num_n, den_n = [int(n) for n in n.split('/')]\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return False"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert(x!= \"/0' and n!= '/0')\n    num, den = list(map(int, x.split('/')))\n    num2, den2 = list(map(int, n.split('/')))\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if int(x) == 1 and int(n) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # print(x + \"/\" + n)\n    return int(x) == int(n)\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    num = int(n)\n    den = int(x)\n    if num % den == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO\n    return sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(nums, key=lambda x: sum(int(n) for n in str(x)))"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    # TODO: your code here\n    for num in nums:\n        result.append(int(str(num)[0])+int(str(num)[1]))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    nums = sorted(nums, key = lambda x: sum([int(i) for i in str(x)]))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(nums, key=lambda num: (sum(int(char) for char in str(num)), num))"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 2 == 1:\n                if nums[0] % 2 == 1 and nums[-1] % 2 == 1:\n                    count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # filter out numbers greater than 10 and less than 1\n    filter = list(filter(lambda x: x <= 10, nums))\n    filter = list(filter(lambda x: x > 10, nums))\n    # filter out numbers less than 1\n    filter = list(filter(lambda x: x > 0, filter))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in \"13579\" and str(num)[-1] in \"13579\":\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    counter = 0\n    for num in nums:\n        if num > 10 and num%2 == 1:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len([i for i in nums if i > 10 and (i // 10) % 2 == 1 and i % 10 % 2 == 1])\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    count = 0\n    for number in nums:\n        if number > 10 and number % 2 == 1:\n            count += 1\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 0\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    counter = 0\n    for num in nums:\n        if(num > 10 and (num % 2!= 0)):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(i * i - i + 1 for i in range(1, n + 1) if i * i % 3 == 0)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i = 0\n    count = 0\n    while i < n:\n        j = i + 1\n        while j < n:\n            k = j + 1\n            while k < n:\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    count += 1\n                k += 1\n            j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def get_triples(n):\n        count = 0\n        for i in range(1, n+1):\n            for j in range(i+1, n+1):\n                if (i*i + j*j - i) % 3 == 0:\n                    count += 1\n        return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 1:\n        return 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (a[i] + a[j]) % 3 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    cnt = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if i < j < k and (i+j+k) % 3 == 0:\n                    cnt += 1\n    return cnt\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    nums = [i*i-i+1 for i in range(1, n+1)]\n    result = 0\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if (nums[i] + nums[j]) % 3 == 0:\n                result += 1\n    return result\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i < j < k and (i+j+k) % 3 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    i, j, k = 0, 1, 2\n    while i < n:\n        while j < n:\n            while k < n:\n                if (i < j < k) and (i*i + i + 1 + j*j + j + 1 + k*k) % 3 == 0:\n                    count += 1\n                k += 1\n            j += 1\n            k = j + 1\n        i += 1\n        j = i + 1\n        k = j + 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    i = 0\n    count = 0\n    while i < n:\n        j = i + 1\n        while j < n:\n            k = j + 1\n            while k < n:\n                if ((i * i) - i + 1) + ((j * j) - j + 1) + ((k * k) - k + 1) % 3 == 0:\n                    count += 1\n                k += 1\n            j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #Use the construtors and make the planets into objects\n    p1 = Planet(planet1)\n    p2 = Planet(planet2)\n    #sort the planets into two lists\n    #p1, p2 = sorted([p1,p2], key=lambda planet: planet.dist)\n    #combine the two lists into one\n    planets = p1 + p2\n    #sort the planets into two lists\n    #planets = sorted(planets, key=lambda planet: planet.dist)\n    #combine the two lists into one\n    #planets = p1 + p2\n    #planets = planets.sort(key=lambda planet: planet.dist)\n    #print(planets)\n    #get the list of planets that are between the two given planets\n    #make a list and pass in the two given planets\n    #print(planets)\n    #create a list that has the two planets\n    #print(planets)\n    #create a list that has all planets\n    #planets = planets.sort()\n    #print(planets)\n    #sort the planets\n    #planets = sorted(planets)\n    #print(planets)\n    #print(planets.sort())\n    #print(planets)\n    #sort the planets\n    #planets = planets.sort()\n    #print(planets)\n    #print(planets)\n    #sort the planets\n    #planets = planets.sort()\n    #print(planets)\n    #sort the planets\n    #planets.sort()\n    #print(planets)\n    #sort the planets\n    #planets = sorted(planets)\n    #print(planets)\n    #sort the planets\n    #planets = planets.sort()\n    #print(planets)\n    #sort the planets\n    #planets.sort()\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #print(planets.sort(reverse=True))\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(reverse=True)\n    #print(planets)\n    #sort the planets\n    #planets.sort(revers"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    # The planets are closer than the Sun\n    if (planet1.lower() == \"mercury\" and planet2.lower() == \"venus\"):\n        planet1 = \"Mercury\"\n        planet2 = \"Venus\"\n    elif (planet1.lower() == \"venus\" and planet2.lower() == \"mercury\"):\n        planet1 = \"Venus\"\n        planet2 = \"Mercury\"\n    elif (planet1.lower() == \"jupiter\" and planet2.lower() == \"saturn\"):\n        planet1 = \"Jupiter\"\n        planet2 = \"Saturn\"\n    elif (planet1.lower() == \"saturn\" and planet2.lower() == \"jupiter\"):\n        planet1 = \"Saturn\"\n        planet2 = \"Jupiter\"\n    elif (planet1.lower() == \"earth\" and planet2.lower() == \"mars\"):\n        planet1 = \"Earth\"\n        planet2 = \"Mars\"\n    elif (planet1.lower() == \"mars\" and planet2.lower() == \"earth\"):\n        planet1 = \"Mars\"\n        planet2 = \"Earth\"\n    elif (planet1.lower() == \"mercury\" and planet2.lower() == \"jupiter\"):\n        planet1 = \"Mercury\"\n        planet2 = \"Jupiter\"\n    elif (planet1.lower() == \"jupiter\" and planet2.lower() == \"mercury\"):\n        planet1 = \"Jupiter\"\n        planet2 = \"Mercury\"\n    elif (planet1.lower() == \"venus\" and planet2.lower() == \"saturn\"):\n        planet1 = \"Venus\"\n        planet2 = \"Saturn\"\n    elif (planet1.lower() == \"saturn\" and planet2.lower() == \"venus\"):\n        planet1 = \"Saturn\"\n        planet2 = \"Venus\"\n    elif (planet1.lower() == \"mars\" and planet2.lower() == \"uranus\"):\n        planet1 = \"Mars\"\n        planet2 = \"Uranus\"\n    elif (planet1.lower() == \"uranus\" and planet2.lower() == \"mars\"):\n        planet1 = \"Uranus\"\n        planet2 = \"Mars\"\n    elif (planet1.lower() == \"earth\" and planet2.lower() == \"neptune\"):\n        planet1 = \"Earth\"\n        planet2 = \"Neptune\"\n    elif (planet1.lower() == \"neptune\" and planet2.lower() == \"earth\"):\n        planet1 = \"Neptune\"\n        planet2 = \"Earth\"\n    elif (planet1.lower() == \"mercury\" and planet2.lower() == \"saturn\"):\n        planet1 = \"Mercury\"\n        planet2 = \"Saturn\"\n    elif (planet1.lower() == \"saturn\" and planet2.lower() == \"mercury\"):\n        planet1 = \"Saturn\"\n        planet2 = \"Mercury\"\n    elif (planet1.lower() == \"venus\" and planet2.lower() == \"jupiter\"):\n        planet1 = \"Venus\"\n        planet2 = \"Jupiter\"\n    elif (planet1.lower() == \"jupiter\" and planet2.lower() == \"venus\"):\n        planet1 = \"Jupiter\"\n        planet2 = \"Venus\"\n    elif (planet1.lower() == \"mars\" and planet2.lower() == \"jupiter\"):\n        planet1 = \"Mars\"\n        planet2 = \"Jupiter\"\n    elif (planet1.lower() == \"jupiter\" and planet2.lower() == \"mars\"):\n        planet1 = \"Jupiter\"\n        planet2 = \"Mars\"\n    elif (planet1.lower() == \"neptune\" and planet2.lower() == \"uranus\"):\n        planet1 = \"Neptune\"\n        planet2 = \"Uranus\"\n    elif (planet1.lower() == \"uranus\" and planet2.lower() == \"neptune\"):\n        planet1 = \"Uranus\"\n        planet2 = \"Neptune\"\n    elif (planet1.lower() == \"saturn\" and planet2.lowe"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    diff = abs(planet2_index - planet1_index)\n    if diff == 0 or diff == len(planets):\n        return tuple()\n    else:\n        return tuple(sorted(planets[planet1_index + 1 : planet2_index])"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets and planet2 in planets:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        new_planets = planets[planet1_index+1:planet2_index]\n        return tuple(new_planets)\n    else:\n        return ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # planets = {'Mercury': 3.303e+23, 'Venus': 6.051e+24, 'Earth': 6.371e+24, 'Mars': 3.390e+23, 'Jupiter': 6.9911e+24, 'Saturn': 5.6846e+24, 'Uranus': 8.6810e+25, 'Neptune': 1.0244e+26}\n    # planets = {'Mercury': 3.303e+23, 'Venus': 6.051e+24, 'Earth': 6.371e+24, 'Mars': 3.390e+23, 'Jupiter': 6.9911e+24, 'Saturn': 5.6846e+24, 'Uranus': 8.6810e+25, 'Neptune': 1.0244e+26}\n    planets = {'Mercury': 3.303e+23, 'Venus': 6.051e+24, 'Earth': 6.371e+24, 'Mars': 3.390e+23, 'Jupiter': 6.9911e+24, 'Saturn': 5.6846e+24, 'Uranus': 8.6810e+25, 'Neptune': 1.0244e+26}\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    elif planet1 == planet2:\n        return (planet1,)\n    else:\n        p1 = planets[planet1]\n        p2 = planets[planet2]\n        d = p2 - p1\n        # print(d)\n        start = planets[planet1]\n        end = planets[planet2]\n        # print(start, end)\n        ans = []\n        for key, value in planets.items():\n            if value >= start and value <= end:\n                ans.append(key)\n        return tuple(ans)\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # +++ your code here ++++\n    return ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1 = planet1.capitalize()\n    planet2 = planet2.capitalize()\n    if (planet1 not in planet_names) or (planet2 not in planet_names):\n        return ()\n    if planet1 == planet2:\n        return ()\n    a = planet_names.index(planet1)\n    b = planet_names.index(planet2)\n    if a > b:\n        return ()\n    elif a < b:\n        return tuple(planet_names[a+1:b])\n    else:\n        return (planet_names[a], planet_names[b])\n    "
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    planet_list = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_list or planet2 not in planet_list:\n        return ()\n    planet1_index = planet_list.index(planet1)\n    planet2_index = planet_list.index(planet2)\n    if planet1_index > planet2_index:\n        return ()\n    return tuple(sorted(planet_list[planet2_index:planet1_index+1], key=lambda x: abs(planet_list.index(x)-planet_list.index(planet1))))\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets and planet2 in planets:\n        if planet1 == planet2:\n            return()\n        if planet1 > planet2:\n            return()\n        \n        low, high = planets.index(planet1), planets.index(planet2)\n        return tuple(sorted(planets[low + 1:high], key=lambda x: abs(planets.index(x) - planets.index(planet1))))\n    return()\n    \n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(lst, key=lambda x: (len(x), x))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst_n = []\n    lst_str = []\n    for i in lst:\n        lst_str.append(i)\n    for i in lst:\n        if len(i) % 2 == 0:\n            lst_n.append(i)\n    lst_n.sort(key=len)\n    lst_n.sort()\n    return lst_n\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # TODO: Your code here\n    return None\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #your code here\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sorted_lst = sorted(lst, key=len)\n    len_sorted_lst = len(sorted_lst)\n    while len_sorted_lst > 0:\n        if len(sorted_lst[len_sorted_lst - 1]) % 2 == 1:\n            sorted_lst.pop(len_sorted_lst - 1)\n            len_sorted_lst -= 1\n        else:\n            len_sorted_lst -= 1\n    return sorted_lst\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(set([i for i in lst if len(i)%2==0])))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # filter = list(filter(lambda x: len(x) % 2 == 0, lst))\n    # lst.sort(key=len)\n    return sorted(lst, key=lambda x: (len(x), x))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(filter(lambda x: len(x) % 2 == 0, lst), key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)), key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(lst, key=lambda word: (len(word), word))\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if is_prime(n):\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x\n        \n        \ndef my_sum(numbers):\n    \"\"\"A simple program which should return the sum of the values of \n    a list.\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x if is_prime(n) else y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Insert your code here\n    \n    \n    \n    \n    \nif __name__ == '__main__':\n    print('Example:')\n    print(x_or_y(7, 34, 12))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert x_or_y(7, 34, 12) == 34\n    assert x_or_y(15, 8, 5) == 5\n    print('Done! Go Check!'"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1:\n        return y\n    elif n == 2:\n        return x\n    elif n == 3:\n        return x\n    elif n == 4:\n        return y\n    elif n == 5:\n        return x\n    elif n == 6:\n        return y\n    elif n == 7:\n        return x\n    elif n == 8:\n        return y\n    elif n == 9:\n        return x\n    elif n == 10:\n        return y\n    elif n == 11:\n        return x\n    elif n == 12:\n        return y\n    elif n == 13:\n        return x\n    elif n == 14:\n        return y\n    elif n == 15:\n        return x\n    elif n == 16:\n        return y\n    elif n == 17:\n        return x\n    elif n == 18:\n        return y\n    elif n == 19:\n        return x\n    elif n == 20:\n        return y\n    elif n == 21:\n        return x\n    elif n == 22:\n        return y\n    elif n == 23:\n        return x\n    elif n == 24:\n        return y\n    elif n == 25:\n        return x\n    elif n == 26:\n        return y\n    elif n == 27:\n        return x\n    elif n == 28:\n        return y\n    elif n == 29:\n        return x\n    elif n == 30:\n        return y\n    elif n == 31:\n        return x\n    elif n == 32:\n        return y\n    elif n == 33:\n        return x\n    elif n == 34:\n        return y\n    elif n == 35:\n        return x\n    elif n == 36:\n        return y\n    elif n == 37:\n        return x\n    elif n == 38:\n        return y\n    elif n == 39:\n        return x\n    elif n == 40:\n        return y\n    elif n == 41:\n        return x\n    elif n == 42:\n        return y\n    elif n == 43:\n        return x\n    elif n == 44:\n        return y\n    elif n == 45:\n        return x\n    elif n == 46:\n        return y\n    elif n == 47:\n        return x\n    elif n == 48:\n        return y\n    elif n == 49:\n        return x\n    elif n == 50:\n        return y\n    elif n == 51:\n        return x\n    elif n == 52:\n        return y\n    elif n == 53:\n        return x\n    elif n == 54:\n        return y\n    elif n == 55:\n        return x\n    elif n == 56:\n        return y\n    elif n == 57:\n        return x\n    elif n == 58:\n        return y\n    elif n == 59:\n        return x\n    elif n == 60:\n        return y\n    elif n == 61:\n        return x\n    elif n == 62:\n        return y\n    elif n == 63:\n        return x\n    elif n == 64:\n        return y\n    elif n == 65:\n        return x\n    elif n == 66:\n        return y\n    elif n == 67:\n        return x\n    elif n == 68:\n        return y\n    elif n == 69:\n        return x\n    elif n == 70:\n        return y\n    elif n == 71:\n        return x\n    elif n == 72:\n        return y\n    elif n == 73:\n        return x\n    elif n == 74:\n        return y\n    elif n == 75:\n        return x\n    elif n == 76:\n        return y\n    elif n == 77:\n        return x\n    elif n == 78:\n        return y\n    elif n == 79:\n        return x\n    elif n == 80:\n        return y\n    elif n == 81:\n        return x\n    elif n == 82:\n        return y\n    elif n == 83:\n        return x\n    elif n == 84:\n        return y\n    elif n == 85:\n        return x\n    elif n ="
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if is_prime(n):\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == x:\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n > 1:\n        if n % 2 == 1:\n            return x\n        else:\n            return y\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    if n < 0:\n        print(\"Invalid input\")\n    elif n == 2:\n        return x\n    else:\n        return y\n    \n    \nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))\nprint(x_or_y(4, 7, 12))\nprint(x_or_y(-1, 34, 12))\nprint(x_or_y(5, 34, 12)"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # return sum([i ** 2 for i in lst if i > 0 and i % 2!= 0])\n    return sum(filter(lambda x: x > 0 and x % 2!= 0, lst))\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum += num ** 2\n    return sum"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    total = 0\n    for num in lst:\n        if num < 0 or num % 1!= 0:\n            continue\n        total += (num ** 2)\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([i ** 2 for i in lst if i > 0 and i % 2 == 1])\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst_sum = 0\n    \n    for i in range(len(lst)):\n        if lst[i] < 0 or type(lst[i])!= int:\n            continue\n        else:\n            lst_sum += (lst[i] ** 2)\n    return lst_sum\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum = 0\n    for i in lst:\n        if isinstance(i, int):\n            if i % 2 == 1:\n                sum += i ** 2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lst2 = []\n    \n    for x in lst:\n        if type(x)!= int or x < 0:\n            pass\n        else:\n            lst2.append(x)\n    \n    if len(lst2) == 0:\n        return 0\n        \n    else:\n        total = 0\n        for y in lst2:\n            total += (y**2)\n        return total\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # if lst == []:\n    #     return 0\n    # else:\n    #     return sum([i**2 for i in lst if type(i) == int and i % 2!= 0])\n    return sum([i**2 for i in lst if type(i) == int and i % 2!= 0])\n        \n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if lst[i] > 0 and isinstance(lst[i], int):\n            if lst[i] % 2 == 1:\n                total = total + lst[i]\n    return total\n    \nif __name__ == '__main__':\n    print(double_the_difference([1, 3, 2, 0]))\n    print(double_the_difference([-1, -2, 0]))\n    print(double_the_difference([9, -2]))\n    print(double_the_difference([0]))\n    print(double_the_difference([]))\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    odd_numbers = [x for x in lst if (x % 2) == 1]\n    return sum(map(lambda x: x ** 2, odd_numbers))\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # your code here\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [0 if game[i]==guess[i] else abs(game[i]-guess[i]) for i in range(len(game))]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    #return [abs(x - y) for x, y in zip(game, guess)]\n    return [abs(x - y) if x!= y else 0 for x, y in zip(game, guess)]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # if guess == game:\n    #     return 0\n    # return abs(guess - game)\n    return [0 if guess[i] == game[i] else abs(guess[i] - game[i]) for i in range(len(guess))]\n    \n    \n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [0 if game[i]==guess[i] else abs(game[i]-guess[i]) for i in range(len(game))]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #how many times the same numbers are guessed\n    score = Counter(game)\n    guess_counter = Counter(guess)\n    #create a new dictionary that stores a copy of the scores but removes the duplicates\n    sorted_guess = {k: v for k,v in sorted(guess_counter.items(), key=lambda item: item[1])}\n    sorted_score = {k: v for k,v in sorted(score.items(), key=lambda item: item[1])}\n    #create a new dictionary to store the difference between the guess and the score\n    difference = {}\n    #loop through the scores dictionary and compare the guess and the score\n    for key in sorted_score.keys():\n        difference[key] = abs(sorted_guess[key]-sorted_score[key])\n        if sorted_guess[key]!= sorted_score[key]:\n            difference[key] = sorted_guess[key] - sorted_score[key]\n    #create a new list to store the values of the dictionary\n    result_list = []\n    for key in difference.keys():\n        result_list.append(difference[key])\n    return result_list"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [abs(guess - score) for score,guess in zip(game,guess)]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [abs(guess[i] - game[i]) for i in range(len(game))]"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [0 if s == g else abs(s - g) for s,g in zip(game,guess)]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return list(map(lambda x: abs(x[0]-x[1]), zip(game,guess)))\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    class_name = class_name.lower()\n    l = []\n    for e in extensions:\n        sm = 0\n        cap = 0\n        for c in e:\n            if c.isupper():\n                cap += 1\n            elif c.islower():\n                sm += 1\n        l.append([e, cap - sm])\n    sorted_l = sorted(l, key = lambda x : x[1])\n    return class_name + '.' + sorted_l[-1][0]\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Your code here\n    \ndef Diophantine_equation(n, d):\n    \"\"\"You will be given a positive integer n and an integer d. Let a, b be \n    positive integers, such that a*b = n. Write a function that returns the\n    length of the shortest string that satisfies the equation a * c + b * d = n, \n    where c and d are integers and are both between 0 and 100.\n    Example:\n    for Diophantine_equation(3, 3) == 4\n    for Diophantine_equation(17, 3) == 5\n    for Diophantine_equation(17, 10) == 11\n    \"\"\"\n    # Your code here\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return '{}.{}'.format(class_name, extensions[0])\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if extensions == []:\n        return class_name\n    else:\n        if len(class_name) > len(extensions[0]):\n            for i in range(len(class_name)):\n                if class_name[i]!= extensions[0][i]:\n                    return class_name + \".\" + extensions[0]\n        else:\n            for i in range(len(extensions[0])):\n                if class_name[i]!= extensions[0][i]:\n                    return class_name + \".\" + extensions[0]\n            return extensions[0]\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    cap = 0\n    sm = 0\n    for i in range(len(extensions)):\n        cap_count = 0\n        sm_count = 0\n        for j in range(len(extensions[i])):\n            if extensions[i][j] in string.ascii_uppercase:\n                cap_count += 1\n            if extensions[i][j] in string.ascii_lowercase:\n                sm_count += 1\n        cap = cap + cap_count\n        sm = sm + sm_count\n    res = class_name + \".\" + extensions[cap - sm].lower()\n    return res\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a = 0\n    b = 0\n    for i in extensions:\n        c = 0\n        d = 0\n        for j in i:\n            if j.isupper():\n                c += 1\n            else:\n                d += 1\n        if c > a:\n            a = c\n        if d > b:\n            b = d\n    return class_name + '.' + extensions[0] if (a - b) > 0 else class_name + '.' + extensions[1]\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    best = 0\n    for ext in extensions:\n        cap = 0\n        sm = 0\n        for c in ext:\n            if c.isupper():\n                cap += 1\n            if c.islower():\n                sm += 1\n        if cap-sm > best:\n            best = cap - sm\n            best_name = ext\n    return class_name+\".\"+best_name\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    class_name = class_name.title()\n    extensions = sorted(extensions, key=lambda x: sum(1 for y in x if y.islower()))\n    # print(extensions)\n    str = '.' + class_name\n    for i in extensions:\n        if class_name not in i:\n            str += ('.' + i)\n    return str\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #a=input()\n    #b=input()\n    #print(a,b)\n    if len(b) > len(a):\n        return False\n    #print(a,b)\n    x = a+a\n    #print(x)\n    if b in x:\n        return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # If a is empty then return False\n    if len(a) == 0:\n        return False\n    # If b is a substring of a\n    elif b in a:\n        return True\n    # If not then \n    else:\n        # check if any of its rotations is substring of a\n        for i in range(len(a)):\n            if a[i:] + a[:i] == b or a[i:] + a[:i] == b:\n                return True\n        # if not then return False\n        else:\n            return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if(len(b)!= len(a)):\n        return False\n    for x in range(len(b)):\n        if b in a:\n            return True\n        else:\n            return False\n    return False"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if set(a).intersection(b):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # print(a)\n    # print(b)\n    for i in range(1, len(b) + 1):\n        if b in a or b[0:-i] in a:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pat = set(a)\n    for i in range(1, len(b)+1):\n        if b[:i] in pat:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return b in a or any(b in s for s in a)\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #edge case\n    if not a or not b:\n        return False\n    #if len(a) == 1:\n    #    return a in b\n    if len(b) < len(a):\n        return False\n    for i in range(len(a)):\n        if a[i] == b[0]:\n            if a == b:\n                return True\n            for j in range(1,len(b)):\n                if b[j]!= b[j-1]:\n                    break\n                if j == len(b) - 1:\n                    return True\n    return False\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    even_count = 0\n    odd_count = 0\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    even_count, odd_count = 0, 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (odd_count, even_count)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (num % 10 % 2, num // 10 % 10 % 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count_even = 0\n    count_odd = 0\n    for num in str(num):\n        if int(num)%2 == 0:\n            count_even +=1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n    \ndef reverse_number(number):\n    \"\"\"Given a number, return the number reversed.\n    \n    Example:\n        reverse_number(-5) ==> -5\n        reverse_number(-123) ==> -321\n    \"\"\"\n    return int(str(number)[::-1])\n    \ndef pair_reverse(number):\n    \"\"\"Given an even number, return the number with the digits reversed. If the number is odd, return the number with the digits reversed twice.\n    \n    Example:\n        pair_reverse(44) ==> 42\n        pair_reverse(23) ==> 32\n    \"\"\"\n    return int(str(number)[::-1]) if number%2 ==0 else int(str(number)[::-2][::-1])\n    \ndef factorial(num):\n    \"\"\"Given a number, return the factorial.\n    \n    Example:\n        factorial(5) ==> 120\n        factorial(7) ==> 5040\n    \"\"\"\n    result = 1\n    for i in range(1, num+1):\n        result *= i\n    return result\n    \ndef factorial_recursion(num):\n    \"\"\"Given a number, return the factorial.\n    \n    Example:\n        factorial_recursion(5) ==> 120\n        factorial_recursion(7) ==> 5040\n    \"\"\"\n    return num if num ==1 else num*factorial_recursion(num-1)\n    \ndef fibonacci(n):\n    \"\"\"Given a number, return the Fibonacci value of that number.\n    \n    Example:\n        fibonacci(4) ==> 3\n        fibonacci(10) ==> 55\n    \"\"\"\n    return n if n == 0 or n == 1 else fibonacci(n-1)+fibonacci(n-2)\n    \ndef fibonacci_recursion(n):\n    \"\"\"Given a number, return the Fibonacci value of that number.\n    \n    Example:\n        fibonacci_recursion(4) ==> 3\n        fibonacci_recursion(10) ==> 55\n    \"\"\"\n    return 1 if n==0 or n == 1 else fibonacci_recursion(n-1)+fibonacci_recursion(n-2)\n    \ndef fibonacci_bottom_up(n):\n    \"\"\"Given a number, return the Fibonacci value of that number.\n    \n    Example:\n        fibonacci_bottom_up(4) ==> 3\n        fibonacci_bottom_up(10) ==> 55\n    \"\"\"\n    fib_array = [0,1]\n    while len(fib_array) < n+1:\n        fib_array.append(fib_array[-1]+fib_array[-2])\n    return fib_array[n]\n    \ndef fibonacci_memoization(n):\n    \"\"\"Given a number, return the Fibonacci value of that number.\n    \n    Example:\n        fibonacci_memoization(4) ==> 3\n        fibonacci_memoization(10) ==> 55\n    \"\"\"\n    fib_array = [0,1]\n    fib_array[0] = 0\n    fib_array[1] = 1\n    while len(fib_array) < n+1:\n        fib_array.append(fib_array[-1]+fib_array[-2])\n    return fib_array[n]\n    \ndef fibonacci_bottom_up_better(n):\n    \"\"\"Given a number, return the Fibonacci value of that number.\n    \n    Example:\n        fibonacci_bottom_up_better(4) ==> 3\n        fibonacci_bottom_up_better(10) ==> 55\n    \"\"\"\n    fib_array = [0,1]\n    fib_array[0] = 0\n    fib_array[1] = 1\n    while len(fib_array) < n+1:\n        fib_array.append(fib_array[-"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    even = 0\n    odd = 0\n    if num < 0:\n        num = abs(num)\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    num = abs(num)\n    count_even = 0\n    count_odd = 0\n    if num == 0:\n        return (0,0)\n    while num > 0:\n        if (num % 10) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num//10\n    return (count_even, count_odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # TODO: complete this function\n    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    roman_numerals = {'M': 1000,\n                      'CM': 900, 'D': 500, 'CD': 400,\n                      'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n                      'X': 10, 'IX': 9, 'V': 5, 'IV': 4,\n                      'I': 1}\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    ret_val = ''\n    rom_val_dict = {1000:'m', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n                    50: 'l', 40: 'xc', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def get_roman_numeral_equivalent(number):\n        result = ''\n        i = 0\n        while number > 0:\n            if number % 10 == 4:\n                result = result + 'x' * (number // 10)\n            elif number % 10 == 9:\n                result = result + 'ix'\n            elif number % 10 == 5:\n                result = result + 'v' + 'i' * (number // 10)\n            elif number % 10 == 9:\n                result = result + 'ix'\n            elif number % 10 == 6:\n                result = result + 'vi' + 'i' * (number // 10)\n            elif number % 10 == 8:\n                result = result + 'vii' + 'i' * (number // 10)\n            elif number % 10 == 1:\n                result = result + 'i' * (number // 10)\n            number = number // 10\n            i += 1\n        return result\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num = number\n    assert 1 <= num <= 1000\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    numeral_map = (('M', 1000),\n                   ('CM', 900),\n                   ('D', 500),\n                   ('CD', 400),\n                   ('C', 100),\n                   ('XC', 90),\n                   ('L', 50),\n                   ('XL', 40),\n                   ('X', 10),\n                   ('IX', 9),\n                   ('V', 5),\n                   ('IV', 4),\n                   ('I', 1))\n    result = ''\n    for numeral, integer in numeral_map:\n        while number >= integer:\n            result += numeral\n            number -= integer\n    return result\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert isinstance(number, int) and number > 0 and number <= 1000, \"Invalid input\"\n    roman_numeral = \"\"\n    if number >= 1000:\n        roman_numeral += \"M\"\n        number -= 1000\n    if number >= 900:\n        roman_numeral += \"CM\"\n        number -= 900\n    if number >= 500:\n        roman_numeral += \"D\"\n        number -= 500\n    if number >= 400:\n        roman_numeral += \"CD\"\n        number -= 400\n    if number >= 100:\n        roman_numeral += \"C\"\n        number -= 100\n    if number >= 90:\n        roman_numeral += \"XC\"\n        number -= 90\n    if number >= 50:\n        roman_numeral += \"L\"\n        number -= 50\n    if number >= 40:\n        roman_numeral += \"XL\"\n        number -= 40\n    if number >= 10:\n        roman_numeral += \"X\"\n        number -= 10\n    if number >= 9:\n        roman_numeral += \"IX\"\n        number -= 9\n    if number >= 5:\n        roman_numeral += \"V\"\n        number -= 5\n    if number >= 4:\n        roman_numeral += \"IV\"\n        number -= 4\n    if number >= 1:\n        roman_numeral += \"I\"\n        number -= 1\n    return roman_numeral\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    int_str = str(number)\n    digits = [1000,900,500,400,100,90,50,40,10,9,5,4,1]\n    numerals = ['M',  'CM', 'D', 'CD','C', 'XC', 'L', 'XL','X', 'IX', 'V', 'IV','I']\n    result = \"\"\n    for i in range(0, len(int_str)):\n        digit = int(int_str[i])\n        result += numerals[i] * digit\n    return result.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not (1 <= number <= 1000):\n        raise ValueError(f\"The input {number} is not valid.\")\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = ''\n    numerals = {\n        1: 'I',\n        5: 'V',\n        10: 'X',\n        50: 'L',\n        100: 'C',\n        500: 'D',\n        1000: 'M',\n    }\n    for number, symbol in sorted(numerals.items(), reverse=True):\n        while number <= number:\n            result += symbol\n            number -= number\n    return result\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Assign number to the Roman equivalent\n    roman = ''\n    nums = [1, 5, 10, 50, 100, 500, 1000]\n    num_romans = ['I', 'V', 'X', 'L', 'C', 'D', 'M']\n    for num in range(len(nums)):\n        while number >= nums[num]:\n            roman += num_romans[num]\n            number -= nums[num]\n    return roman\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n    \ndef pythagoras(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a pythagorean triangle, False otherwise.\n    A pythagorean triangle is a triangle that has three sides with a Pythagorean\n    property.\n    Example:\n    pythagoras(3, 4, 5) == True\n    pythagoras(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # write your code here\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    import math\n    sides = [a, b, c]\n    sides.sort()\n    sides.pop()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a + b <= c or b + c <= a or a + c <= b:\n        return False\n    elif a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    import math\n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Enforce the triangle inequality theorem\n    return max(a, b, c) < a + b + c and a**2 + b**2 == c**2\n    \ndef test_right_angle_triangle():\n    # Test cases for right_angle_triangle\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(1, 2, 2.5) == False\n    assert right_angle_triangle(2.5, 2.5, 2.5) == True\n    assert right_angle_triangle(2, 2, 2.5) == False\n    assert right_angle_triangle(1, 1, 1) == False\n    assert right_angle_triangle(1, 1, 1.5) == False\n    assert right_angle_triangle(1, 1.5, 1.5) == True\n    assert right_angle_triangle(1, 1.5, 1.5) == False\n    \n    # Extra test cases for right_angle_triangle\n    assert right_angle_triangle(3, 4, 7) == False\n    assert right_angle_triangle(3, 4, 3) == False\n    assert right_angle_triangle(1, 2, 3) == False\n    \n    # Test cases for Pythagorean triplet\n    assert pythagorean_triplet(3, 4, 5) == True\n    assert pythagorean_triplet(3, 4, 6) == False\n    assert pythagorean_triplet(3, 4, 7) == False\n    assert pythagorean_triplet(3, 4, 8) == False\n    \n    # Extra test cases for Pythagorean_triplet\n    assert pythagorean_triplet(3, 4, 9) == False\n    assert pythagorean_triplet(1, 2, 3) == False\n    assert pythagorean_triplet(1, 2, 4) == False\n    assert pythagorean_triplet(3, 4, 5) == False\n    assert pythagorean_triplet(3, 4, 6) == False\n    assert pythagorean_triplet(3, 4, 7) == False\n    assert pythagorean_triplet(3, 4, 8) == False\n    assert pythagorean_triplet(3, 4, 9) == False\n    assert pythagorean_triplet(3, 4, 10) == False\n    assert pythagorean_triplet(3, 4, 11) == False\n    assert pythagorean_triplet(3, 4, 12) == False\n    assert pythagorean_triplet(3, 4, 13) == False\n    assert pythagorean_triplet(3, 4, 14) == False\n    assert pythagorean_triplet(3, 4, 15) == False\n    assert pythagorean_triplet(3, 4, 16) == False\n    assert pythagorean_triplet(3, 4, 17) == False\n    assert pythagorean_triplet(3, 4, 18) == False\n    assert pythagorean_triplet(3, 4, 19) == False\n    assert pythagorean_triplet(3, 4, 20) == False\n    assert pythagorean_triplet(3, 4, 21) == False\n    assert pythagorean_triplet(3, 4, 22) == False\n    assert pythagorean_triplet(3, 4, 23) == False\n    assert pythagorean_triplet(3, 4, 24) == False\n    assert pythagorean_triplet(3, 4, 25) == False\n    assert pythagorean_triplet(3, 4, 26) == False\n    assert pythagorean_triplet(3, 4, 27) == False\n    assert pythagorean_triplet(3, 4, 28) == False\n    assert pythagorean_triplet(3, 4, 29) == False\n    assert pythagorean_triplet(3, 4, 30) == False\n    assert pythagorean_triplet(3, 4, 31) == False\n    assert pythagorean_triplet(3, 4, 32) == Fals"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # your code here\n    return max(words, key = lambda word: len(set(word)))\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # words = [words[0]]\n    # for w in words:\n    #     if len(w) < len(words[0]):\n    #         words[0] = w\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # use hashmap to count unique char in each word\n    # return the word with most unique char\n    hmap = dict()\n    for word in words:\n        hmap[word] = set(word)\n    max_unique_chars = max(hmap.values(), key=lambda x: len(x))\n    result = [k for k,v in hmap.items() if len(v) == len(max_unique_chars)]\n    return sorted(result)[0] if len(result) > 0 else \"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    unique_words = set()\n    for word in words:\n        unique_words.update(word)\n    unique_words_list = list(unique_words)\n    unique_words_list.sort()\n    for word in unique_words_list:\n        for word2 in words:\n            if word == word2:\n                return word\n    return \"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    max_unique = 0\n    max_unique_word = ''\n    for word in words:\n        if len(word) > max_unique:\n            max_unique = len(word)\n            max_unique_word = word\n    return max_unique_word\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    current_max = ''\n    current_max_length = -1\n    for word in words:\n        if len(set(word)) > current_max_length:\n            current_max_length = len(set(word))\n            current_max = word\n    return current_ma"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    unique_chars_dict = {}\n    for word in words:\n        unique_chars = set(word)\n        unique_chars_dict[word] = len(unique_chars)\n    max_unique_chars = max(unique_chars_dict.values())\n    return min(unique_chars_dict, key=unique_chars_dict.get)\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    max_len = len(max(words, key=len))\n    return min(words, key=len"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # For each word in the list\n    for word in words:\n        # Compare it with the word in the list with the previous one\n        for prev_word in words:\n            # If the length of the word is less than the prev_word\n            if len(word) < len(prev_word):\n                # If there are more unique characters in the word\n                if len(set(word)) > len(set(prev_word)):\n                    # Replace the prev_word with the word\n                    prev_word = word\n            # Otherwise, compare the length of the word\n            else:\n                if len(set(word)) > len(set(prev_word)):\n                    prev_word = word\n    # If there are any words left in the list\n    if prev_word:\n        # Return the last word in the list\n        return prev_word\n    # Otherwise, return an empty string\n    else:\n        return \"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return max(words, key=len)\n    \n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    total = 0\n    if number + need > remaining:\n        total = remaining\n    else:\n        total = number + need\n    result.append(total)\n    remaining -= total\n    result.append(remaining)\n    return resul"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if remaining > need:\n        number += need\n        remaining -= need\n        return [number, remaining]\n    else:\n        number += remaining\n        remaining = 0\n        return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    return [need, remaining - need] if remaining >= need else [number, 0]"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [number + need, remaining - need] if remaining >= need else [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # write your code here\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [number + need, remaining - need]\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    expression = ''\n    operand_index = 0\n    while operand_index < len(operand):\n        if len(operator) == 0:\n            break\n        expression += str(operand[operand_index])\n        if operator[0] == '+':\n            expression +='+ '\n        elif operator[0] == '-':\n            expression +='- '\n        elif operator[0] == '*':\n            expression +='* '\n        elif operator[0] == '//':\n            expression +='// '\n        elif operator[0] == '**':\n            expression +='** '\n        operator = operator[1:]\n        operand_index += 1\n    expression += str(operand[operand_index])\n    return eval(expression)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = operand[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = operand[0]\n    for i in range(len(operator)):\n        result = result + (operand[i+1] if operator[i] == '+' else operand[i+1] if operator[i] == '-' else operand[i+1] if operator[i] == '*' else operand[i+1] if operator[i] == '//' else operand[i+1] if operator[i] == '**' else 0)\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # Insert your code here\n    \n    \n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = 0\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i]\n        elif op == '-':\n            result -= operand[i]\n        elif op == '*':\n            result *= operand[i]\n        elif op == '/':\n            result /= operand[i]\n        elif op == '**':\n            result **= operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = 0\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return s.swapcase()\nif __name__ == \"__main__\":\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"1A2B3C\") == \"CBA2AB3\""
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return ''.join([l.lower() if l.isalpha() else l.upper() if l.isalpha() else l for l in s])\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    new_string = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                i = i.lower()\n            else:\n                i = i.upper()\n        new_string += i\n    return new_string\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    letters = [c for c in s if c.isalpha()]\n    if not letters:\n        return s[::-1]\n    else:\n        return \"\".join(c.swapcase() if c.isupper() else c for c in s)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    return \"\".join(s)"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # your code here\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return s\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s_array = list(s)\n    for i, c in enumerate(s_array):\n        if c.isalpha():\n            if c.isupper():\n                s_array[i] = c.lower()\n            else:\n                s_array[i] = c.upper()\n    return \"\".join(s_array)\n    "
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #return \"\".join([c.upper() if c.islower() else c.lower() for c in s])\n    return \"\".join([c.lower() if c.isupper() else c.upper() for c in s])\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if text:\n        return hashlib.md5(text.encode('utf8')).hexdigest()\n    else:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf8'))\n    return m.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if text is None:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    import hashlib\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if text == '':\n        return None\n    else:\n        hash_md5 = hashlib.md5(text.encode())\n        return hash_md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(text) == 0:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if text == \"\":\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(list(set([x for x in range(a, b + 1) if x % 2 == 0])))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [num for num in range(a, b+1) if num % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a % 2 == 0:\n        a += 1\n    if b % 2 == 0:\n        b -= 1\n    \n    lst = [i for i in range(a, b+1) if i % 2 == 0]\n    return lst\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # edge case\n    if a > b:\n        return []\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return list(range(a + 1, b, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(min(a,b),max(a,b)):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    \n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n    \n    return result\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    ints = []\n    for i in range(min(a,b), max(a,b)+1):\n        if i % 2 == 0 and (a <= i <= b):\n            ints.append(i)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(filter(lambda x: x % 2 == 0 and a <= x <= b, range(a, b + 1)))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert a > 0 and b > 0\n    assert a <= b\n    assert a % 2 == 0\n    assert b % 2 == 0\n"
    }
]