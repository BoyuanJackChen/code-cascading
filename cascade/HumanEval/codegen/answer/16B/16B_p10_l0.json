[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not isinstance(numbers, list) or not isinstance(threshold, float):\n        return False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] == numbers[j] or abs(numbers[i]-numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i, num1 in enumerate(numbers):\n        for num2 in numbers[i+1:]:\n            if num1 - num2 < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # TODO: your code here\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numbers = sorted(numbers)\n    if len(numbers) <= 1:\n        return False\n    for i, j in zip(numbers, numbers[1:]):\n        if j - i < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n    # initialize a stack to keep track of parentheses\n    stack = []\n    # iterate through each character in the string\n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n        if c == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(c)\n    return [''.join(stack)]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # this is basically the only way to do it.\n    # the output is a list of strings.\n    # given any input, you can split it into list of strings (with delimiter is space).\n    # just run the function over each space and append each result into the final list.\n    # then return the final list.\n    final_list = []\n    current_group = []\n    for i in paren_string:\n        if i == '(':\n            current_group.append(i)\n        elif i == ')':\n            current_group.append(i)\n            final_list.append(''.join(current_group))\n            current_group = []\n    return final_list\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    result_tmp = []\n    str_of_group = []\n    counter_of_open_parenthesis = 0\n    counter_of_close_parenthesis = 0\n    for i in paren_string:\n        if i == '(':\n            counter_of_open_parenthesis += 1\n            str_of_group.append(i)\n        elif i == ')':\n            counter_of_close_parenthesis += 1\n            str_of_group.append(i)\n    result_tmp.append(str_of_group)\n    for i in range(0, len(result_tmp)):\n        result.append(''.join(map(str, result_tmp[i])))\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    if paren_string == \"\":\n        return result\n    current_result = \"\"\n    stack = []\n    for i in paren_string:\n        if i == \" \":\n            pass\n        elif i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) > 0 and stack[-1] == \"(\":\n                stack.pop()\n                if len(stack) > 0:\n                    current_result += \"(\"\n                else:\n                    result.append(current_result)\n                    current_result = \"\"\n            else:\n                current_result += \")\"\n    result.append(current_result)\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #\n    # You can just remove the spaces and call stack on it\n    #\n    open_braces = []\n    current_braces = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_braces.append(i)\n        elif char == ')':\n            if len(open_braces) > 0:\n                open_braces.pop()\n            else:\n                current_braces.append(i)\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    open_brace_stack = []\n    results = []\n    for char in paren_string:\n        if char == '(':\n            open_brace_stack.append(char)\n        elif char == ')':\n            if len(open_brace_stack) == 0:\n                raise Exception('No open braces')\n            elif open_brace_stack[-1] == '(':\n                open_brace_stack.pop()\n                if len(open_brace_stack) == 0:\n                    results.append(''.join(open_brace_stack))\n                else:\n                    results.append(''.join(open_brace_stack) + '(')\n            else:\n                open_brace_stack.append(')')\n    return results\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    paren_stack = []\n    for c in paren_string:\n        if c == '(' or c == ')':\n            paren_stack.append(c)\n    open_count = 0\n    i = 0\n    output = []\n    while i < len(paren_stack):\n        current = paren_stack[i]\n        if current == '(':\n            open_count += 1\n        else:\n            open_count -= 1\n        if open_count == 0:\n            output.append(''.join(paren_stack[i + 1:-1]))\n            i = len(paren_stack)\n        else:\n            i += 1\n    return output\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # TODO\n    # BASE CASE\n    if paren_string is None:\n        return None\n    if len(paren_string) == 0:\n        return None\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(paren_string) == 0:\n        return []\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    int_part, dec_part = number.as_integer_ratio()\n    return dec_part\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # int() truncates to the integer\n    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return 0.0\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # integer part:\n    i = int(number)\n    # decimals:\n    d = number - i\n    # Return the decimal part:\n    return d\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return int(number*(10**(1+int(number))))/(10**(1+int(number)))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return int(number) + number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return int(number) - int(number - 1)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in operations:\n        if i < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    balance = 0\n    for i in operations:\n        if i < 0:\n            if balance > 0:\n                balance = 0\n            else:\n                return True\n        else:\n            balance += i\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(operations) == 1:\n        return operations[0] < 0\n    if operations[0] > 0:\n        return below_zero(operations[1:])\n    if operations[0] < 0:\n        if below_zero(operations[1:]):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # return sum(operations) < 0\n    # return sum(operations) < 0\n    return any(sum(operations[0:n]) < 0 for n in range(1, len(operations) + 1))\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(operations) <= 1:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return False if sum(operations) > 0 else True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(operations) > 1:\n        if (operations[0] > 0 and operations[1] < 0) or (operations[0] < 0 and operations[1] > 0):\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(mean - x) for x in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    mean = mean_of(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return mean_of(absolute_deviations)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum([abs(number - mean(numbers)) for number in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    # Check if the input is empty\n    if not numbers:\n        return None\n    \n    # Compute the mean of the list\n    mean = mean_of_numbers(numbers)\n    \n    # Compute the absolute differences from the mean for each element\n    deviations = [abs(number - mean) for number in numbers]\n    \n    # Return the average of these absolute differences\n    return sum(deviations) / len(deviations)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(numbers) == 0:\n        return 0\n    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Mean\n    mean = sum(numbers) / len(numbers)\n    # Sum of deviations from the mean\n    deviations_from_mean = 0\n    for num in numbers:\n        deviations_from_mean += abs(mean - num)\n    # Divide by number of elements\n    return deviations_from_mean / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    average = sum(numbers)/len(numbers)\n    sums = 0\n    for num in numbers:\n        sums += abs(num-average)\n    return sums / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    average = sum(numbers) / len(numbers)\n    absolute_differences = []\n    for i in numbers:\n        absolute_differences.append(abs(average - i))\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [delimeter] * (len(numbers) - 1) + numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert len(numbers) >= 2, \"intersperse needs at least two elements\"\n    assert delimeter not in numbers, \"intersperse cannot use the original elements\"\n    return [numbers[0]] + [delimeter] + numbers[1:-1] + [delimeter] + numbers[-1:]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    res = []\n    for i in range(len(numbers) - 1):\n        res.append(numbers[i])\n        res.append(delimeter)\n    res.append(numbers[-1])\n    return res\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(len(numbers) - 1):\n        result += [numbers[i], delimeter]\n    result += [numbers[-1]]\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n        # print(result)\n    return result + [numbers[-1]]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(numbers) == 0:\n        return []\n    else:\n        return [numbers[0]] + intersperse(numbers[1:-1], delimeter) + [numbers[-1]]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    new_numbers = []\n    for i in range(len(numbers) - 1):\n        new_numbers.append(numbers[i])\n        new_numbers.append(delimeter)\n    new_numbers.append(numbers[-1])\n    return new_numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # TASK - 1\n    # result = []\n    # for i in range(len(numbers)):\n    #     if i % 2 == 0:\n    #         result.append(numbers[i])\n    #     else:\n    #         result.append(delimeter)\n    #         result.append(numbers[i])\n    # return result\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [numbers[0]] + [delimeter] + [numbers[i] for i in range(1, len(numbers)) if numbers[i]!= numbers[i - 1]] + [numbers[-1]]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    else:\n        return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Split the string into substrings, representing each group.\n    # We use the len() function to get the number of items in the list to later\n    # iterate over the substrings and process them.\n    # The 'join' method is used to turn the list of substrings into a single string.\n    substrings = paren_string.split()\n    # Initialize the level of nesting.\n    current_level = 0\n    # Initialize the list to store the deepest level of nesting.\n    max_level = 0\n    # Go through each substring.\n    for substring in substrings:\n        # Check if the level of nesting is the current_level.\n        # If it is, increment the level of nesting by one.\n        if len(substring) == current_level:\n            current_level += 1\n        # Otherwise, it means that the level of nesting is lower than the current_level.\n        # So we need to reset the current_level to 0 and set the current_level to the length of the substring.\n        else:\n            current_level = len(substring)\n            max_level = max(max_level, current_level)\n    # Return the list of levels of nesting.\n    return [max_level]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if paren_string.count('(')!= paren_string.count(')'):\n        return []\n    paren_string = paren_string.replace(' ', '')\n    return [depth(paren_string, idx) for idx in range(len(paren_string))]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    res = []\n    parenthesis = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parenthesis.append(i)\n        elif paren_string[i] == ')':\n            res.append(parenthesis.pop())\n    return res\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: Implement this function\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    stack = []\n    for char in paren_string:\n        if char == ')':\n            if not stack:\n                return []\n            else:\n                stack.pop()\n        else:\n            stack.append(char)\n    return list(stack)\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not paren_string:\n        return []\n    returned_list = []\n    s = [paren_string[0]]\n    while s:\n        s = []\n        paren_string = paren_string[1:]\n        for i in range(len(paren_string)):\n            if paren_string[i] == ')' and paren_string[i - 1] == '(':\n                s.append(paren_string[i])\n                returned_list.append(len(s) - 1)\n            else:\n                s.append(paren_string[i])\n    return returned_list\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #Initialize the answer list\n    answer_list = []\n    #Initialize the stack list\n    stack = []\n    #Loop through the paren_string\n    for char in paren_string:\n        #Check if the character is opening parentheses\n        if char == \"(\":\n            #Append the character to the stack\n            stack.append(char)\n        #Check if the character is closing parentheses\n        elif char == \")\":\n            #If the stack is empty, then the parentheses are not balanced. Exit the loop\n            if len(stack) == 0:\n                return False\n            #Pop the last element of the stack\n            else:\n                stack.pop()\n        #Add the level of nesting to the answer list\n        answer_list.append(len(stack))\n    #If the answer list is empty, return False\n    if len(answer_list) == 0:\n        return False\n    #Return the answer list\n    return answer_list\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    paren_stack = []\n    curr_level = 0\n    max_level = 0\n    results = []\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    nested_pars = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                continue\n            stack.pop()\n            if len(stack) == 0:\n                nested_pars.append(len(stack))\n    return nested_pars\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    filtered_list = []\n    for word in strings:\n        if substring in word:\n            filtered_list.append(word)\n    return filtered_list\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [x for x in strings if substring in x]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [word for word in strings if substring in word]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sum_ = 0\n    prod = 1\n    for number in numbers:\n        sum_ += number\n        prod *= number\n    return sum_, prod\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # initialise variables\n    sum_total = 0\n    product_total = 1\n    for number in numbers:\n        sum_total += number\n        product_total *= number\n    return (sum_total, product_total)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(numbers), reduce(mul, numbers, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), prod(numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #\n    # Your code here\n    #\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sum = 0\n    product = 1\n    for n in numbers:\n        sum += n\n        product *= n\n    return sum, product\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # return (sum(numbers), prod(numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sum_all = 0\n    prod_all = 1\n    for number in numbers:\n        sum_all += number\n        prod_all *= number\n    return (sum_all, prod_all)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum = 0\n    prod = 1\n    for number in numbers:\n        sum += number\n        prod *= number\n    return sum, prod\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    max_list: List[int] = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[0:i+1]))\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    rolling_max = [None] * len(numbers)\n    rolling_max[0] = numbers[0]\n    for i in range(1, len(numbers)):\n        rolling_max[i] = numbers[i] if numbers[i] > rolling_max[i - 1] else rolling_max[i - 1]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i + 1]))\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    if len(numbers) == 0:\n        return []\n    result.append(numbers[0])\n    for num in range(1, len(numbers)):\n        result.append(max(numbers[:num]))\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    max_numbers = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_numbers.append(numbers[0])\n        else:\n            max_numbers.append(max(max_numbers[i - 1], numbers[i]))\n    return max_numbers\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    max_value = numbers[0]\n    result.append(max_value)\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_value:\n            max_value = numbers[i]\n        result.append(max_value)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return_list: List[int] = []\n    current_max = None\n    for number in numbers:\n        if current_max is None:\n            current_max = number\n        else:\n            if number > current_max:\n                current_max = number\n        return_list.append(current_max)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    max_list = []\n    for i, _ in enumerate(numbers):\n        if i == 0:\n            max_list.append(numbers[i])\n        elif numbers[i] > max_list[-1]:\n            max_list.append(numbers[i])\n        else:\n            max_list.append(max_list[-1])\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers = [numbers[0]] + numbers\n    result = []\n    for i in range(1, len(numbers)):\n        result.append(max(numbers[i], numbers[i] + result[-1]))\n    return result\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Find the longest palindromic postfix of supplied string.\n    i = 0\n    while i < len(string):\n        i += 1\n    # Find the string to be returned\n    return string + string[0:len(string)-i+1][::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if is_palindrome(string):\n        return string\n    for i in range(1, len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return ''"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if is_palindrome(string):\n        return string\n    if string == '':\n        return ''\n    \n    # find longest palindromic suffix\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[len(string)-i:]):\n            return string + string[:len(string)-i][::-1]\n    return None\n    "
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    string = string.lower()\n    l = len(string)\n    max_substring = string[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    longest_palindromic_postfix = find_longest_palindromic_postfix(string)\n    prefix_reverse = string[::-1][:-len(longest_palindromic_postfix):]\n    return string + prefix_reverse\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    prefix = string[::-1]\n    for i in range(len(prefix)):\n        if is_palindrome(prefix[:i]):\n            return prefix[i:] + string\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + make_palindrome(string[i:])\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Get reverse of string\n    # Reverse string till we find the longest palindromic substring\n    # Append remaining string to the front of the reversed string\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Find the longest palindromic postfix\n    postfix = find_longest_palindrome(string)\n    # append reverse of the substring before the palindromic postfix\n    return string + string[:-len(postfix)][::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if is_palindrome(string):\n        return string\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return bin(int(a, 2) ^ int(b, 2))[2:]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    a = int(a, base=2)\n    b = int(b, base=2)\n    return bin(a ^ b)[2:]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a, b = str(a), str(b)\n    return f'{int(a, 2) ^ int(b, 2):0{len(a)}b}'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    xor_result = \"\"\n    for i in range(len(a)):\n        xor_result += str((int(a[i]) + int(b[i])) % 2)\n    return xor_result\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a = int(a, 2)\n    b = int(b, 2)\n    return bin(a ^ b)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert len(a) == len(b), \"Length of two strings must be equal.\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not (a and b):\n        return ''\n    return a[0] ^ b[0]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    max_len = 0\n    max_str = None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n    return sorted(strings, key=len)[-1]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    longest = None\n    for s in strings:\n        if longest is None or len(longest) < len(s):\n            longest = s\n    return longest\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not strings:\n        return None\n    max_len = len(max(strings, key=len))\n    for string in strings:\n        if len(string) == max_len:\n            return string\n    return strings[0]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n    lengths = []\n    for string in strings:\n        lengths.append(len(string))\n    return strings[lengths.index(max(lengths))]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return None\n    lengths = [len(string) for string in strings]\n    max_length = max(lengths)\n    candidates = [strings[index] for index, length in enumerate(lengths) if length == max_length]\n    return candidates[0] if len(candidates) == 1 else candidates\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not strings:\n        return None\n    longest_string = strings[0]\n    for i in strings:\n        if len(i) > len(longest_string):\n            longest_string = i\n    return longest_string\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return abs(a) if b == 0 else greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    while b:\n        a, b = b, a%b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a < b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if a < b:\n        a, b = b, a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not a % b:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Implement here - function body\n    result = []\n    for i in range(len(string) + 1):\n        result.append(string[0:i])\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    prefixes = ['']\n    for index, character in enumerate(string):\n        prefixes = [prefix + character for prefix in prefixes]\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [string[:i] for i in range(len(string))]\n    \ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n    return [string[-i:] for i in range(len(string))]\n    \ndef sort_string(string: str) -> List[str]:\n    \"\"\" Sort a string into lexicographical order\n    >>> sort_string('abc')\n    ['a', 'b', 'c']\n    \"\"\"\n    return sorted(list(set(string)))\n    \ndef anagrams(string: str) -> List[str]:\n    \"\"\" Return all anagrams of the input string\n    >>> anagrams('abba')\n    ['aabb', 'abba', 'baab']\n    >>> anagrams('abcd')\n    ['aabb', 'cdab', 'bacd', 'cbad', 'dabc', 'dbca', 'adbc', 'dabc', 'badc', 'dbac', 'dcba', 'cbad', 'adcb', 'cbad', 'dacb', 'bcad', 'cdba', 'cadb', 'dbca', 'adcb', 'dacb', 'bacd', 'dabc', 'dcba', 'acbd', 'cdab', 'dbac', 'dcba', 'cadb', 'cdaa', 'bacd', 'cbda', 'acdb', 'cdab', 'acbd', 'cdba', 'acdb', 'dcab', 'cadb', 'bcad', 'cdba', 'cadb', 'bcda', 'dcab', 'bacd', 'cadb', 'dcab', 'bcad', 'acdb', 'cbda', 'acbd', 'dcba', 'bcad', 'dbac', 'dacb', 'bacd', 'acbd', 'cadb', 'dcba', 'adcb', 'dacb', 'bacd', 'acdb', 'cadb', 'dcba', 'cadb', 'dcab', 'bacd', 'cadb', 'dcba', 'dcab', 'bcad', 'bacd', 'dacb', 'dbac', 'bcda', 'cadb', 'dacb', 'acbd', 'dacb', 'bcad', 'acdb', 'dacb', 'bcda', 'dcab', 'acbd', 'acdb', 'dacb', 'acbd', 'bcad', 'cbda', 'cdab', 'cadb', 'bcad', 'cdab', 'dbac', 'cbda', 'bcda', 'adbc', 'cbda', 'acbd', 'bcad', 'bcda', 'cbda', 'cadb', 'dbac', 'cbda', 'cadb', 'acbd', 'cbda', 'cadb', 'cadb', 'bcad', 'dcba', 'cdab', 'acdb', 'acbd', 'dbac', 'cadb', 'bacd', 'acdb', 'cbda', 'dcba', 'cadb', 'bcad', 'acdb', 'cdab', 'dbac', 'dcba', 'bacd', 'acdb', 'cadb', 'dbca', 'dcba', 'bcad', 'bcda', 'cadb', 'acbd', 'bcad', 'bcda', 'cdab', 'cadb', 'dbca', 'bcda', 'cdab', 'bcad', 'cadb', 'dbca', 'cadb', 'dbac', 'cadb', 'cadb', 'bcad', 'acdb', 'bcad', 'bcda', 'acdb', 'cadb', 'dcba', 'cadb', 'dbac', 'bcad', 'bcda', 'cdab', 'dbac', 'cadb', 'acbd', 'dbac', 'cadb', 'dbac', 'bcad', 'acdb', 'cadb', 'dcba', 'acbd', 'cadb', 'dacb', 'dcba', 'cadb', 'acdb', 'cadb', 'bcad', "
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    prefix = []\n    for i in range(len(string)):\n        prefix.append(string[:i + 1])\n    return prefix\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not string:\n        return []\n    if len(string) == 1:\n        return [string]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    prefixes = list()\n    for i in range(len(string)):\n        prefixes.append(string[0:i+1])\n    return prefixes\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \" \".join([str(i) for i in range(n+1)])\n    \ndef remove_first_and_last(lst: list) -> list:\n    \"\"\" Return a new list with the first and last items removed.\n    >>> remove_first_and_last([1, 2, 3, 4])\n    [2, 3]\n    >>> remove_first_and_last([1, 2, 3, 1])\n    [2, 3]\n    >>> remove_first_and_last([])\n    []\n    >>> remove_first_and_last([\"a\", \"b\", \"c\", \"d\"])\n    ['b', 'c']\n    \"\"\"\n    return lst[1:-1]\n    \ndef common_end(a: list, b: list) -> bool:\n    \"\"\"Return True if a and b have the same first and last elements.\n    >>> common_end([1, 2, 3], [7, 3])\n    True\n    >>> common_end([7, 3], [1, 2, 3])\n    True\n    >>> common_end([1, 2, 3], [7, 3, 2])\n    False\n    >>> common_end([1, 2, 3], [1, 3])\n    True\n    \"\"\"\n    return a[0] == b[0] or a[-1] == b[-1]\n    \ndef reverse_pair(txt: str) -> str:\n    \"\"\" Return the reverse pair of the input string.\n    >>> reverse_pair(\"May the fourth be with you\")\n    'you with be fourth the May'\n    >>> reverse_pair(\"That's not my string\")\n    \"I'm not that's my string\"\n    \"\"\"\n    return \" \".join(reversed(txt.split()))\n    \ndef sum_pairs(nums: list, goal: int) -> list:\n    \"\"\"Return a pair of values from nums whose sum is equal to goal.\n    >>> sum_pairs([1, 2, 2, 10], 4)\n    [2, 2]\n    >>> sum_pairs([4, 2, 10, 5, 1], 5)\n    [4, 1]\n    >>> sum_pairs([4, 2, 10, 5, 1], 6)\n    []\n    \"\"\"\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == goal:\n                return [nums[i], nums[j]]\n    return []\n    \ndef find_letter_indices(txt: str, letter: str) -> list:\n    \"\"\"Return a list of the indices of all occurrences of letter in txt.\n    >>> find_letter_indices(\"abracadabra\", \"a\")\n    [0, 5, 10]\n    >>> find_letter_indices(\"abracadabra\", \"r\")\n    [7]\n    >>> find_letter_indices(\"abracadabra\", \"b\")\n    [1, 6]\n    \"\"\"\n    return [i for i in range(len(txt)) if txt[i] == letter]\n    \ndef double_index(lst: list, index: int) -> list:\n    \"\"\"Return a new list with the item at index in lst doubled.\n    >>> double_index([0, 1, 2], 0)\n    [0, 0, 2]\n    >>> double_index([0, 1, 2], 1)\n    [0, 2, 2]\n    >>> double_index([0, 1, 2], 2)\n    [0, 1, 4]\n    \"\"\"\n    return [lst[i] * 2 if i == index else lst[i] for i in range(len(lst))]\n    \ndef middle_way(a: list, b: list) -> list:\n    \"\"\"Return a list that consists of all but the first and last items of a and b.\n    >>> middle_way([1, 2, 3], [4, 5, 6])\n    [2, 3, 4, 5]\n    >>> middle_way([7, 7, 7], [3, 8, 0])\n    [7, 7, 8, 0]\n    >>> middle_way([5, 2, 9], [1, 4, 5])\n    [5, 2, 4]\n    \"\"\"\n    return a[1:-1]"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return''.join(map(str, range(n+1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \" \".join([str(i) for i in range(n + 1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \" \".join(str(i) for i in range(n + 1))\n    # return \" \".join([str(i) for i in range(n + 1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return''.join(str(x) for x in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return''.join(map(str, range(n+1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return '0'\n    else:\n        return string_sequence(n - 1) +'' + str(n)\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return''.join(map(str, range(0, n + 1)))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(set([x.lower() for x in string]))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    chars = set()\n    for char in string:\n        chars.add(char.lower())\n    return len(chars)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not string:\n        return 0\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    distinct_characters = set()\n    for char in string.lower():\n        if char not in distinct_characters:\n            distinct_characters.add(char)\n    return len(distinct_characters)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    counter = 0\n    for character in string:\n        if character.lower() not in string:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lowercase_string = string.lower()\n    chars = set()\n    for char in lowercase_string:\n        chars.add(char)\n    return len(chars)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    chars = set()\n    for char in string:\n        chars.add(char.lower())\n    return len(chars)\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    parsed = []\n    for note in music_string.split('|'):\n        for beat in note.split(' '):\n            if beat == 'o':\n                parsed.append(4)\n            elif beat == 'o|':\n                parsed.append(2)\n            elif beat == '.':\n                parsed.append(1)\n    return parsed\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    note_list = music_string.split('|')\n    note_list = list(map(lambda x: x.strip().split(' '), note_list))\n    note_list = list(map(lambda x: [i for i in x if i!= ''], note_list))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return []\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    music_string_list = music_string.split()\n    output_list = []\n    for i in music_string_list:\n        if i == 'o':\n            output_list.append(4)\n        elif i == 'o|':\n            output_list.append(2)\n        elif i == '.|':\n            output_list.append(1)\n    return output_list\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    notes_list = list(music_string.split('|'))\n    note_lengths = []\n    for note in notes_list:\n        if note.startswith('o'):\n            note_lengths.append(4)\n        elif note.startswith('o'):\n            note_lengths.append(2)\n        elif note.startswith('o'):\n            note_lengths.append(1)\n    return note_lengths\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    beats_list = music_string.split('|')\n    beat_list = []\n    for beat in beats_list:\n        beat_list.append(len(beat))\n    return beat_list\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    beats = []\n    for line in music_string.split('\\n'):\n        for char in line:\n            if char in ['o', 'o|', '.', '|']:\n                beats.append(4)\n            elif char == 'o':\n                beats.append(8)\n            elif char == '.':\n                beats.append(1)\n    return beats\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    output = []\n    for note in music_string.split(' '):\n        if note == '':\n            continue\n        output.append(len(note))\n    return output\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    parsed_music = music_string.split('|')\n    # you code here\n    return [len(note) for note in parsed_music]"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    res = 0\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            res += 1\n    return res\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return string.count(substring) - string.count(substring, 0, len(string) - len(substring))\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    cnt = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not string or not substring:\n        return 0\n    \n    counter = 0\n    \n    for i in range(0, len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            counter += 1\n    \n    return counter\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = 0\n    index_substring = 0\n    index_string = 0\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # for i in range(len(string)):\n    #     if string.startswith(substring, i):\n    #         print(i)\n    count = 0\n    for i in range(len(string)):\n        if string.startswith(substring, i):\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    counter = 0\n    n = len(string)\n    for i in range(n):\n        if string[i] == substring[0]:\n            if string[i:i+len(substring)] == substring:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    str_len = len(string)\n    substr_len = len(substring)\n    for i in range(str_len - substr_len + 1):\n        if string[i: i+substr_len] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i: i + len(substring)] == substring:\n            total += 1\n    return total\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Initialize a dictionary with the appropriate 'key' and 'value' pairs.\n    dict_numbers = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    # Set up variables for loop.\n    numbers = numbers.split(\" \")\n    # Use a loop to populate the list with sorted values.\n    for i in range(0, len(numbers)):\n        for j in range(0, len(numbers)):\n            if int(dict_numbers[numbers[i]]) < int(dict_numbers[numbers[j]]):\n                temp = numbers[i]\n                numbers[i] = numbers[j]\n                numbers[j] = temp\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \" \".join(sorted(numbers.split(\" \")))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sorted_numbers = sorted(numbers.split(\" \"), key=lambda x: x.replace(\" \", \"\"))\n    return \" \".join(sorted_numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    nums = []\n    for i in numbers.split(' '):\n        nums.append(int(i))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Make a list of the strings\n    numbers_list = numbers.split()\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \" \".join(sorted(numbers.split()))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sorted_list = sorted(numbers.split())\n    return \" \".join(sorted_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \" \".join(sorted(numbers.split()))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Converts string to list of individual words\n    numbers_list = numbers.split(\" \")\n    # Converts list of words to integers\n    numbers_list = [int(x) for x in numbers_list]\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers = [int(number) for number in numbers.split()]\n    sorted_numbers = sorted(numbers)\n    return''.join([str(num) for num in sorted_numbers])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (min(numbers), max(numbers))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # there are no numbers to compare against\n    if len(numbers) < 2:\n        return None\n    # if there is only one number, the first and second number are the same\n    if len(numbers) == 1:\n        return (numbers[0], numbers[0])\n    # if there are two numbers, the first and second number are the same\n    if len(numbers) == 2:\n        return (numbers[0], numbers[1])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    num1, num2 = None, None\n    for num in numbers:\n        if num1 is None:\n            num1 = num\n        elif num2 is None:\n            num2 = num\n        elif num1 - num2 > num - num1:\n            num2 = num\n        elif num1 - num2 < num - num1:\n            num1 = num\n    return num1, num2\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Check that there are at least two elements in the list.\n    if len(numbers) < 2:\n        raise Exception('Error - must have at least two elements in list')\n    \n    # Find the closest two numbers and their indices.\n    smallest = None\n    smallest_index = None\n    largest = None\n    largest_index = None\n    for index, num in enumerate(numbers):\n        if smallest is None:\n            smallest = num\n            smallest_index = index\n            continue\n        if largest is None:\n            largest = num\n            largest_index = index\n            continue\n        if num < smallest:\n            smallest = num\n            smallest_index = index\n        elif num > largest:\n            largest = num\n            largest_index = index\n    \n    # Find the difference between the smallest and largest numbers.\n    difference = abs(smallest - largest)\n    for index, num in enumerate(numbers):\n        if index!= smallest_index and index!= largest_index:\n            if abs(num - smallest) < difference:\n                smallest = num\n                smallest_index = index\n            if abs(num - largest) < difference:\n                largest = num\n                largest_index = index\n    \n    return smallest, largest\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return (min(numbers), max(numbers))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return min(numbers), max(numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return (min(numbers), max(numbers))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numbers.sort()\n    index = len(numbers) // 2\n    first = numbers[index]\n    second = numbers[index - 1]\n    return first, second\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least 2 numbers\")\n    numbers = sorted(numbers)\n    smallest, largest = numbers[0], numbers[-1]\n    return (smallest, largest)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers.sort()\n    smallest = numbers[0]\n    largest = numbers[-1]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"There are too few values to rescale\")\n    # Use list comprehension to create a copy\n    return [(i - min(numbers)) / (max(numbers) - min(numbers)) for i in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_numbers = [num - min(numbers) for num in numbers]\n    new_numbers = [num / max(new_numbers) for num in new_numbers]\n    return new_numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert len(numbers) >= 2\n    min_num, max_num = min(numbers), max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    difference = maximum - minimum\n    if difference == 0:\n        return [0 for _ in range(len(numbers))]\n    return [(number - minimum) / difference for number in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert len(numbers) >= 2, \"List of numbers must contain at least two elements\"\n    return [round(n - min(numbers), 2) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert len(numbers) >= 2\n    min_num = min(numbers)\n    return [n - min_num for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(numbers) <= 1:\n        return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [(((i - min(numbers))/(max(numbers) - min(numbers))) * (1 - 0)) + 0 for i in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    min = min(numbers)\n    max = max(numbers)\n    if max == min:\n        return [0.0 for _ in numbers]\n    return [(x - min) / (max - min) for x in numbers]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for i in values:\n        if isinstance(i, int):\n            result.append(i)\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [val for val in values if isinstance(val, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [int(x) for x in values if isinstance(x, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [int(i) for i in values if isinstance(i, int) or i.isdigit()]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result: List[int] = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    string_length = 0\n    for _ in string:\n        string_length += 1\n    return string_length\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    length = 0\n    for _ in string:\n        length += 1\n    return length\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    length = 0\n    for _ in string:\n        length += 1\n    return length\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return int((n ** 0.5))\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for d in range(n-1, 1, -1):\n        if n % d == 0:\n            return d\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # use list comprehension to find all the factors of n\n    # use enumerate to get the index as well\n    factors = [i for i in range(2, n) if n % i == 0]\n    # find the largest factor\n    largest_factor = max(factors)\n    return largest_factor\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 1:\n        raise ValueError(\"Argument must be positive integer\")\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0:\n        return n\n    else:\n        for i in range(1, n):\n            if n % i == 0:\n                return i\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    largest = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    d = n // 2\n    while True:\n        if d == 1:\n            return n\n        elif n % d == 0:\n            return d\n        else:\n            d -= 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 2\n    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n        if n % i == 0:\n            return i\n        i += 4\n    return n\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    factors = []\n    for i in range(2, n + 1):\n        if i * i > n:\n            break\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 0:\n        return []\n    else:\n        factors = []\n        n_dividing = 2\n        while n!= 1:\n            if n % n_dividing == 0:\n                factors.append(n_dividing)\n                n = n / n_dividing\n            else:\n                n_dividing += 1\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 2:\n        return []\n    factors = []\n    for p in range(2, n + 1):\n        while not n % p:\n            factors.append(p)\n            n //= p\n    factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    list_n = [n]\n    \n    while True:\n        max_n = max(list_n)\n        max_n_sqrt = int(max_n ** 0.5)\n        list_n = [n for n in list_n if n > 1]\n        for i in range(2, max_n_sqrt + 1):\n            if max_n % i == 0:\n                list_n += [i, max_n // i]\n                break\n        else:\n            return list_n\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            n //= divisor\n            result.append(divisor)\n        divisor += 1\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    a = numbers[:]\n    numbers = []\n    \n    for i in a:\n        if i not in numbers:\n            numbers.append(i)\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = 0\n    while i < len(numbers)-1:\n        if numbers[i] == numbers[i+1]:\n            numbers.remove(numbers[i+1])\n        else:\n            i += 1\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    numbers_set = set(numbers)\n    numbers_list = list(numbers_set)\n    numbers_list.sort()\n    return numbers_list\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    seen = set()\n    out = []\n    for i in numbers:\n        if i not in seen:\n            out.append(i)\n            seen.add(i)\n    return out\n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for n in numbers:\n        if n not in result:\n            result.append(n)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Your code here\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_list = []\n    for i in numbers:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # for i in numbers:\n    #     for j in numbers:\n    #         if numbers[i] == numbers[j]:\n    #             numbers.pop(i)\n    #             i += 1\n    #             j += 1\n    # return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers.sort()\n    \n    unique_numbers = [numbers[0]]\n    for num in numbers[1:]:\n        if unique_numbers[-1]!= num:\n            unique_numbers.append(num)\n    \n    return unique_numbers\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join(\n        [c.swapcase() if c.isalpha() else c for c in string]\n    )\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    new_string = \"\"\n    for i in string:\n        if i.isupper():\n            new_string += i.lower()\n        elif i.islower():\n            new_string += i.upper()\n        else:\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join(\n        [\n            char.swapcase() if char.islower() else char\n            for char in string\n        ]\n    )\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join((c.upper() if c.islower() else c.lower() for c in string))\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join([c.upper() if c.islower() else c.lower() for c in string])\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = \"\"\n    for i in strings:\n        result += i\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return ''\n    return strings[0] + concatenate(strings[1:])\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return strings\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [\n        s for s in strings if s.startswith(prefix)\n    ]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # start writing your code here\n    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    filtered_strings = []\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    positive = []\n    for elem in l:\n        if elem >= 0:\n            positive.append(elem)\n    return positive\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #pass\n    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n//2 + 1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n < 2:\n        return False\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 2:\n        return False\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n > 0\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        # right half of the sieve\n        # all the numbers up to sqrt(n) included\n        # are true except for n\n        for x in range(3, math.ceil(math.sqrt(n)) + 1, 2):\n            if n % x == 0:\n                return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not xs or len(xs) % 2:\n        raise ValueError(f\"Invalid coefficients for polynomial. Coefficients must be a list of even number of terms.\")\n    xs.sort()\n    xs.reverse()\n    x0 = xs[0]\n    for i in range(2, len(xs), 2):\n        coeff = xs[i]\n        x0 = x0 / x0 - coeff / (x0 - coeff)\n    return x0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Check that there are even number of coefficients and largest non zero coefficient.\n    if len(xs) % 2!= 0:\n        raise Exception(f\"Length of xs must be even. Given xs has length {len(xs)}\")\n    if xs[0] == 0:\n        return 0\n    elif xs[-1] == 0:\n        return 0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not xs:\n        raise ZeroDivisionError\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Since all the coefficients are even, we know that the maximum non-zero coefficient is at the end\n    max_non_zero_index = len(xs) - 1 - xs[::-1].index(0)\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(xs) % 2 == 1:\n        return None\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(xs) % 2 == 1:\n        raise ValueError(\n            \"find_zero only takes list xs having even number of coefficients and largest non zero coefficient.\"\n        )\n    if xs[0] == 0:\n        return 0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(xs) == 0:\n        raise ValueError(\"xs must have at least one element.\")\n    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must have even number of elements.\")\n    xs = sorted(xs)\n    if xs[0]!= 0:\n        xs = [0] + xs\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            continue\n        if xs[i] * xs[i + 1] < 0:\n            return xs[i] / xs[i + 1]\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if xs[0] == 0:\n        return 0.0\n    elif len(xs) % 2!= 0:\n        return None\n    elif xs[0] < 0:\n        raise ValueError(\"Polynomial must have positive first coefficient.\")\n    elif xs[0] == 1:\n        raise ValueError(\"Polynomial must have non zero first coefficient.\")\n    else:\n        for i, x in enumerate(xs):\n            if x!= 0:\n                xs = xs[:i + 1]\n                break\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert len(xs) % 2 == 0\n    assert len(xs) >= 2\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    xs.append(0)\n    x1 = 0\n    x2 = 0\n    s = sum([abs(x) for x in xs])\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    new_l = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_l.append(l[i])\n        else:\n            new_l.append(sorted(l)[i])\n    return new_l\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    index = []\n    value = []\n    for i in range(len(l)):\n        if i%3 == 0:\n            value.append(l[i])\n            index.append(i)\n    value.sort()\n    index.sort()\n    sorted_third = []\n    for i in range(len(l)):\n        if i in index:\n            sorted_third.append(value[index.index(i)])\n        else:\n            sorted_third.append(l[i])\n    return sorted_third"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l[i]\n    return sorted(l)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l1, l2 = [], []\n    for i in l:\n        if i % 3 == 0:\n            l1.append(i)\n        else:\n            l2.append(i)\n    l1.sort()\n    return l1 + l2\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    new = l.copy()\n    i = 0\n    while i < len(l):\n        if i % 3 == 0:\n            new.remove(l[i])\n        i += 1\n    new.sort()\n    return new\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l_new = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_new.append(l[i])\n    l_new.sort()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_new.append(l[i])\n    return l_new\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #l = [1, 2, 3]\n    #l' = [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, 2, 3]\n    #[1, 2, 3] [1, "
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l_p = []\n    l_p1 = []\n    for i in l:\n        if i % 3 == 0:\n            l_p1.append(i)\n        else:\n            l_p.append(i)\n    l_p.sort()\n    l_p1.sort()\n    return l_p + l_p1\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l_prime = [i for i in l if i % 3!= 0]\n    l_prime.sort()\n    for i in l:\n        if i % 3 == 0:\n            l_prime.append(i)\n    return l_prime\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    indices = []\n    for index in range(len(l)):\n        if index % 3 == 0:\n            indices.append(index)\n    for index in range(len(l)):\n        if index % 3!= 0:\n            indices.append(index)\n    for index in range(len(l)):\n        if index % 3 == 0:\n            l[index] = l[index]\n    for index in range(len(l)):\n        if index % 3!= 0:\n            for x in range(len(indices)):\n                if indices[x] < l[index]:\n                    l[index] = indices[x]\n                    break\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return list(sorted(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not isinstance(l, list):\n        raise TypeError('The argument is not a list')\n    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    max_elem = l[0]\n    for i in l:\n        if i > max_elem:\n            max_elem = i\n    return max_elem\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    max_num = l[0]\n    for i in l:\n        if i > max_num:\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # l = sorted(l)\n    # l.reverse()\n    # return l[0]\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        max = l[0]\n        for item in l:\n            if item > max:\n                max = item\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n        elif i % 11 == 0:\n            count += 1\n        elif i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count(\"7\") > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(n):\n        if(i%11==0 or i%13==0):\n            count+=1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = 0\n    for i in range(1, n):\n        if i % 11 == 0 and i % 13 == 0:\n            result += 1\n        elif i % 7 == 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 7:\n        return 0\n    elif n % 11 == 0 or n % 13 == 0:\n        return 1 + fizz_buzz(n - 1)\n    else:\n        return fizz_buzz(n - 1)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    if n % 11 == 0 or n % 13 == 0:\n        count += 1\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    if n < 0:\n        return count\n    if n % 11 == 0 or n % 13 == 0:\n        count += 1\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l_new = l[:]\n    for i in range(1, len(l), 2):\n        l_new[i] = l[i-1]\n    l_new = sorted(l_new)\n    return l_new\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return [l[i] for i in range(len(l)) if i % 2 == 0] + \\\n           sorted([l[i] for i in range(len(l)) if i % 2!= 0])\n    \nif __name__ == \"__main__\":\n    print(sort_even([1, 2, 3]))\n    print(sort_even([5, 6, 3, 4]))\n    print(sort_even([2, 4, 3]))\n    print(sort_even([5, 3, 2, 1]))\n    print(sort_even([7, 5, 3, 2, 1]))"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # create a copy of the list\n    l_copy = l[:]\n    # sort the copy\n    l_copy.sort()\n    # iterate through the original list\n    for i in range(len(l)):\n        # if an even index\n        if i % 2 == 0:\n            # swap the elements\n            l[i] = l_copy[i//2]\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    evens = []\n    odds = []\n    for i in l:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    evens.sort()\n    return evens + odds\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # return []\n    # if type(l)!= list:\n    #     raise TypeError('Please enter a list')\n    even_indexed_list = []\n    for index, val in enumerate(l):\n        if index % 2 == 0:\n            even_indexed_list.append(val)\n    even_indexed_list.sort()\n    l = l[::2]\n    l.extend(even_indexed_list)\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(l) == 1:\n        return l\n    else:\n        return [l[0]] + sort_even(sorted(l[1:]))\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(l, key=lambda x: x%2)\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    evens = [l[i] for i in range(0, len(l), 2)]\n    odds = [l[i] for i in range(1, len(l), 2)]\n    odds.sort()\n    evens.extend(odds)\n    return evens\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert is_even(len(l)), 'input list is not even'\n    return [l[i] for i in range(0, len(l)) if i%2 == 0] + sorted([l[i] for i in range(0, len(l)) if i%2!= 0])\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return [i for i in l if i % 2 == 0] + [i for i in l if i % 2!= 0]\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # convert group from cycling back to normal. Unless group has fewer elements than 3.\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # reverse cyclic cycling of groups of 3 characters.\n    s = s[::-1]\n    # split groups to single characters\n    s = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycling of groups.\n    s = [group[::-1] for group in s]\n    # join groups back to string.\n    s = \"\".join(s)\n    # remove first character.\n    return s[1:]\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # split string into groups of 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reconstruct groups from cycling.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # cycle groups.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # return decoded string.\n    return \"\".join(group[1:] + group[0] for group in groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # replace elements in each group with first and last elements respectively.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # cycle elements in each group.\n    groups = [s[i:min(i + 3, len(s))] for i in range(0, len(s), 3)]\n    # split groups to strings.\n    groups = [group.split(group[0]) for group in groups]\n    # join groups to strings.\n    return \"\".join([\"\".join(group) for group in groups])\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # combine groups\n    return \"\".join(groups)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    fib = 1\n    for _ in range(n-1):\n        fib, _ = fibonacci(fib)\n    return prime(fib)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    a = 5\n    b = 13\n    for i in range(3, n):\n        a, b = b, a + b\n        if is_prime(b):\n            break\n    return b\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    a, b = 0, 1\n    while (a + b)**2 <= n:\n        if is_prime(a + b):\n            a, b = a + b, a\n        else:\n            a, b = a + b + 1, a + b + 1\n    return a + b\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    a = 0\n    b = 1\n    \n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    \n    for i in range(3, n + 1):\n        c = a + b\n        a = b\n        b = c\n        if is_prime(c):\n            print(c)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    i = 0\n    fib = 0\n    prime_fib_num = 0\n    while (i < n):\n        fib = fib + 1\n        if is_prime(fib):\n            prime_fib_num = fib\n            i = i + 1\n    return prime_fib_num\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    a, b = 1, 1\n    while True:\n        if is_prime(a) and is_prime(b):\n            if a + b == n:\n                return a + b\n            else:\n                a, b = b, a + b\n        else:\n            a, b = b, a + b\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    i = 3\n    count = 0\n    prime = 2\n    while count < n:\n        a = i\n        b = i + 1\n        b_sq = b * b\n        while b_sq < 4_000_000:\n            i = i + 2\n            b = i + 1\n            b_sq = b * b\n        i = i + 2\n        for j in range(3, int(b ** 0.5) + 1, 2):\n            if a % j == 0:\n                break\n        else:\n            count += 1\n            prime = a\n    return prime\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    p = 2\n    q = 3\n    n = n - 1\n    while n!= 0:\n        if is_prime(p) and is_prime(q):\n            n = n - 1\n        else:\n            if is_prime(p):\n                q = q + 2\n            else:\n                p = p + 2\n    return p\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    a, b = 0, 1\n    fib_n = a + b\n    while n > 0:\n        if is_prime(fib_n):\n            n -= 1\n        a, b = b, a + b\n        fib_n = a + b\n    return fib_n\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = 2\n    while n > i:\n        i = prime_fib_helper(i)\n        n -= 1\n    return i\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(l) < 3:\n        return False\n    l.sort()\n    if l[0] > 0:\n        return False\n    for i in range(len(l) - 1, 1, -1):\n        l_i = l[i]\n        if l_i < 0:\n            continue\n        for j in range(i - 1, 0, -1):\n            l_j = l[j]\n            if l_j < 0:\n                continue\n            l_k = -(l_i + l_j)\n            if l_k in l[:j]:\n                return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # loop over the list, keeping track of a set of 3 distinct numbers\n    numbers_seen = set()\n    for first_number in l:\n        # don't include the same number twice\n        if first_number in numbers_seen:\n            continue\n        numbers_seen.add(first_number)\n        # find the other two numbers in the list\n        second_number = -first_number\n        for second_number_index in range(1, len(l)):\n            if second_number in numbers_seen:\n                continue\n            # find the third number\n            third_number = -first_number - second_number\n            # look for it in the list\n            if third_number in numbers_seen:\n                return True\n            # otherwise add the numbers to the set\n            numbers_seen.add(second_number)\n    # if we get here we've exhausted the entire list without finding a triple\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n = len(l)\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(l) < 3:\n        return False\n    else:\n        d = {}\n        for i in range(len(l)-1):\n            for j in range(i+1, len(l)):\n                if (l[i] + l[j]) in d:\n                    return True\n                else:\n                    d[l[i] + l[j]] = 1\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a = set()\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    a.add(tuple(sorted([l[i], l[j], l[k]])))\n    return len(a) == 3\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # create a new empty set for the distinct elements\n    # check whether there are at least three distinct elements in the list\n    # if yes, then the two other elements can be calculated by removing\n    # the first two elements from the list and then the new sum can be\n    # calculated by adding the first two elements from the list and\n    # subtracting the other two elements\n    # the sum can be calculated by taking the absolute value of the sum\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in l:\n        for j in l:\n            for k in l:\n                if (i + j + k == 0) and (i!= j) and (i!= k) and (j!= k):\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # first element of the list is automatically a possible triple\n    l.sort()\n    for i in range(len(l)):\n        # first element cannot be a triple\n        if i == 0:\n            continue\n        # iterate through all possible pairs\n        for j in range(i + 1, len(l)):\n            # iterate through possible second element\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l.sort()\n    i = 0\n    while i < len(l)-2:\n        if l[i] == l[i+1] or l[i] == l[i+2] or l[i+1] == l[i+2]:\n            i += 1\n            continue\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if i < j:\n                if i % 2 == 0:\n                    if j % 2 == 1:\n                        count += 1\n                else:\n                    if j % 2 == 0:\n                        count += 1\n    return count\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # This solution works but is much slower than the two others.\n    # The two other solutions are both linear in the size of n;  so the\n    # largest input is n = 100,000, and the runtime is O(n^2).\n    total = 0\n    for _ in range(n):\n        car = Car()\n        for _ in range(n):\n            car.move_forward()\n        if car.did_collide:\n            total += 1\n    return total\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # How many cars have moved past the first car to the right?\n    # How many cars have moved past the last car to the left?\n    # Sum them together.\n    # Divide by 2.\n    # From there, subtract 1.\n    #\n    # Sum the value you get from 1, 2, and 3.\n    # Then, return that sum modulo 10^9 + 7.\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return n\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert 0 < n <= 10000\n    return int(floor(sqrt(n * (n - 1) / 2)))\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    car_collisions = 0\n    for j in range(n):\n        for i in range(n):\n            if i > j:\n                if car_finite_speed_collision(i, j) > 0:\n                    car_collisions += 1\n    return car_collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (n*(n-1))//2\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert(n > 0)\n    collisions = 0\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l[-1] += 1\n    for i in range(len(l) - 2, -1, -1):\n        if l[i] < 9:\n            l[i] = 0\n            l[i + 1] += 1\n        else:\n            l[i] = 0\n            l[i + 1] = 0\n            l[i + 2] += 1\n    if l[0] < 9:\n        l[0] = 1\n        l.append(0)\n    else:\n        l[0] = 1\n        l[1] = 0\n        l.append(0)\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l[:] = [x+1 for x in l]\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [n+1 for n in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [n + 1 for n in l]\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # if list is empty or length is 0\n    if len(l) == 0 or len(l) == 1:\n        return False\n    # dictionary that keeps track of the number of occurrences of every number in the list\n    occurrences = {}\n    for i in l:\n        if i in occurrences:\n            occurrences[i] += 1\n        else:\n            occurrences[i] = 1\n    # we look for pairs in the list that sum to zero, and return False if we don't find any\n    for i in l:\n        if i == 0:\n            return True\n        else:\n            diff = abs(0 - i)\n            if diff in occurrences:\n                if diff!= i and occurrences[diff] >= 1:\n                    return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(l) < 2:\n        return False\n    hash_table = {}\n    for i in range(len(l)):\n        hash_table[l[i]] = l[i]\n    for i in range(len(l)):\n        if -1 * l[i] in hash_table and hash_table[-1 * l[i]]!= l[i]:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l.sort()\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i] == l[i+1]:\n                return False\n            if l[i]!= l[i+1] and l[i]+l[i+1] == 0:\n                return True\n            if l[i]!= l[i+1] and l[i]+l[i+1]!= 0:\n                return False\n        return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert type(l) == list\n    l.sort()\n    i = 0\n    while i < len(l) - 1:\n        if l[i] == l[i + 1] and l[i]!= 0:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l.sort()\n    l2 = list(filter(lambda x : x not in l, range(l[0], l[-1] + 1)))\n    return any(filter(lambda x : l[0] + x in l2, l))\n    \n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert l, \"Empty list\"\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i < j:\n                if l[i] + l[j] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0 and i!= j:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # To make the solution cleaner, create a new list with the same elements as the input list.\n    # This is necessary to ensure that we don't change the input list.\n    copy_l = [] + l\n    # Iterate over the input list and append the value of the element to the new list.\n    for index, value in enumerate(copy_l):\n        copy_l[index] = value * 2\n    # Iterate over the new list.\n    for value in copy_l:\n        # If the value is not equal to the sum of two elements from the input list.\n        if value!= sum(copy_l):\n            # Return False.\n            return False\n    # If the list does not contain duplicates, return True.\n    return True\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l.sort()\n    if len(l) < 2:\n        return False\n    for i in range(len(l) - 1):\n        if l[i] + l[i+1] == 0:\n            return True\n    return False\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x//base, base) + str(x%base)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    res = ''\n    while x > 0:\n        res += str(x % base)\n        x = x // base\n    return res[::-1]\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if x == 0:\n        return \"0\"\n    result = ''\n    while x:\n        result = str(x % base) + result\n        x //= base\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if base == 10:\n        return str(x)\n    elif base == 2:\n        return bin(x)\n    elif base == 8:\n        return oct(x)\n    elif base == 16:\n        return hex(x)\n    return None\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    string = str(x)\n    # print(string)\n    result = ''\n    while string:\n        result = string[-1] + result\n        string = string[:-1]\n        if int(string) < base:\n            string = str(int(string) * base)\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if x < 0:\n        sign = -1\n    else:\n        sign = 1\n    x *= sign\n    res = []\n    while x:\n        res.append(str(x % base))\n        x //= base\n    if sign < 0:\n        res.append('-')\n    res.reverse()\n    return ''.join(res)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    base_list = '0123456789ABCDEF'\n    y = ''\n    while x:\n        y += base_list[x%base]\n        x //= base\n    return y[::-1]\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer.\")\n    elif not isinstance(base, int):\n        raise TypeError(\"Base must be an integer.\")\n    elif base > 9 or base < 2:\n        raise ValueError(\"Base must be between 2 and 10.\")\n    elif x < 0:\n        raise ValueError(\"Input must be non-negative.\")\n    result = \"\"\n    x_copy = x\n    if x == 0:\n        result = 0\n    while x_copy > 0:\n        result = str(x_copy % base) + result\n        x_copy = int(x_copy / base)\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert (2 <= base <= 10), \"The base should be 2 <= base <= 10\"\n    result = \"\"\n    while (x!= 0):\n        result += str(x % base)\n        x //= base\n    return result[::-1]\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # if x is 0, return '0'\n    if x == 0:\n        return '0'\n    # if base is less than 2 or greater than 36, raise ValueError\n    if base < 2 or base > 36:\n        raise ValueError\n    # set the output string and the number of digits to print\n    output = ''\n    num_digits = 0\n    # if the number is negative, add a negative sign to the front\n    if x < 0:\n        output += '-'\n        x = -x\n    # check if the number is a multiple of 10, then return the converted string\n    if x % 10 == 0:\n        return output + str(x // 10)\n    # check if the number is a multiple of 10, then return the converted string\n    if x % 5 == 0:\n        return output + '5'\n    # while x is greater than 0, repeatedly change the value to the remainder by dividing by the base\n    # return the converted string\n    while x > 0:\n        output += str(x % base)\n        num_digits += 1\n        x = x // base\n    return output[::-1]\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (a * h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (a*h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return (a * h) / 2\n    \nprint(triangle_area(5, 3))\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return (a*h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return 0.5 * a * h\n    \ndef list_benefits():\n    \"\"\"Returns list of benefits of the codelandia, the best place to live in Brazil.\n    >>> list_benefits()\n    ['Luxembourg', 'Belize', 'Cuba', 'Algeria', 'Portugal', 'Ecuador']\n    \"\"\"\n    return ['Luxembourg', 'Belize', 'Cuba', 'Algeria', 'Portugal', 'Ecuador']\n    \ndef build_string(a, b, c=3, d=4):\n    \"\"\"Builds a sentence using the supplied list of words.\n    >>> build_string(6, 3)\n    'The value 6 goes in the box with 3.'\n    \"\"\"\n    return \"{} goes in the box with {}\".format(a, b)\n    \ndef find_hypot(a, b):\n    \"\"\"Returns hypotenuse when given lengths of two sides of a right triangle.\n    >>> find_hypot(3, 4)\n    5.0\n    \"\"\"\n    return sqrt(a**2 + b**2)\n    \ndef city_country(city, country):\n    \"\"\"Combines city and country, to create a single string.\n    >>> city_country('Santiago', 'Chile')\n    'Santiago, Chile'\n    \"\"\"\n    return '{}, {}'.format(city.title(), country.title())\n    \ndef make_album(artist, album, track=None):\n    \"\"\"Creates dictionary describing album.\n    >>> make_album('Metallica', 'Black Death')\n    {'artist': 'Metallica', 'album': 'Black Death'}\n    \"\"\"\n    album_dict = {'artist': artist.title(), 'album': album.title()}\n    if track:\n        album_dict['tracks'] = track\n    return album_dict\n    \ndef find_percentage(number, percent):\n    \"\"\"Finds the number's percentage of total number.\n    >>> find_percentage(20, 60)\n    40.0\n    \"\"\"\n    return number * percent / 100\n    \ndef convert_seconds(seconds):\n    \"\"\"Converts seconds to days, hours, minutes, and seconds.\n    >>> convert_seconds(3800)\n    2 days, 12 hours, 20 minutes, and 20 seconds\n    \"\"\"\n    return time.strftime('%d days, %H hours, %M minutes, and %S seconds', time.gmtime(seconds))\n    \ndef convert_distance(miles):\n    \"\"\"Converts miles to kilometers.\n    >>> convert_distance(20)\n    16.66666667 km\n    \"\"\"\n    return miles * 1.609344\n    \ndef find_factors(n):\n    \"\"\"Prints out all factors of number.\n    >>> find_factors(20)\n    1\n    2\n    4\n    5\n    10\n    20\n    \"\"\"\n    print('Factors of {}:'.format(n))\n    for i in range(1, n + 1):\n        if n % i == 0:\n            print(i)\n            \ndef reverse_string(s):\n    \"\"\"Reverses string.\n    >>> reverse_string('awesome')\n    'emosewa'\n    \"\"\"\n    return s[::-1]\n    \ndef count_words(s):\n    \"\"\"Counts number of words in the sentence.\n    >>> count_words('The quick brown fox jumps over the lazy dog')\n    5\n    \"\"\"\n    return len(s.split())\n    \ndef count_upper_case(s):\n    \"\"\"Counts number of uppercase letters in sentence.\n    >>> count_upper_case('A')\n    1\n    >>> count_upper_case('a')\n    0\n    \"\"\"\n    count = 0\n    for letter in s:\n        if letter.isupper():\n            count += 1\n    return count\n    \ndef count_evens(nums):\n    \"\"\"Counts number of evens in list.\n    >>> count_evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    6\n    >>> count_evens([2, 3, 4, 5, 6, 7, 8, 9, 10])\n    0\n    \"\"\"\n    count = 0\n    for n in nums:\n        if n % 2 == 0:\n            count += 1\n    return count\n    \ndef fin"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a * h / 2\n    \ndef triangle_perimeter(a, b, c):\n    \"\"\"Given lengths of three sides of a triangle return perimeter.\n    >>> triangle_perimeter(1, 1, 3)\n    6\n    \"\"\"\n    return a + b + c\n    \ndef rectangle_area(a, b):\n    \"\"\"Given lengths of two sides of a rectangle return area.\n    >>> rectangle_area(4, 3)\n    12\n    \"\"\"\n    return a * b\n    \ndef rectangle_perimeter(a, b):\n    \"\"\"Given lengths of two sides of a rectangle return perimeter.\n    >>> rectangle_perimeter(4, 3)\n    14\n    \"\"\"\n    return 2 * (a + b)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib1 = 0\n        fib2 = 2\n        result = 0\n        for i in range(3, n+1):\n            result = fib1 + fib2 + fib3 + fib4(n-4)\n            fib1 = fib2\n            fib2 = result\n        return result\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert(type(n) is int and n > 1)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n >= 0, \"n must be >= 0\"\n    if n in (0, 1):\n        return n\n    # return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    a, b, c, d = 1, 1, 1, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def _fib4(n, a=0, b=1):\n        if n == 1 or n == 2:\n            return b\n        else:\n            c = a + b\n            return _fib4(n-1, b, c)\n    return _fib4(n)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n <= 2:\n        return n\n    a, b = 0, 2\n    for i in range(3, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return c\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # YOUR CODE HERE\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    f1 = 0\n    f2 = 1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    if n == 4:\n        return 4\n    while n > 4:\n        f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n        n = n - 1\n    return f3\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        first, second, third, fourth = 0, 0, 2, 0\n        for i in range(n - 2):\n            fourth = first + second + third + fourth\n            first = second\n            second = third\n            third = fourth\n        return fourth\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s = sorted(l)\n    n = len(l)\n    return (s[n//2] + s[(n-1)//2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l = sorted(l)\n    return sum(l[len(l)//2])/2 if len(l)%2==0 else l[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return np.median(np.array(l))\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l.sort()\n    n = len(l)\n    mid = n//2\n    if n%2 == 0:\n        return (l[mid-1] + l[mid])/2\n    else:\n        return l[mid]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2-1])/2\n    else:\n        return l[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Sort the list, then get the middle value.\n    l.sort()\n    return (l[len(l)//2] if len(l)%2==1 else (l[len(l)//2-1]+l[len(l)//2])/2.0)\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return sum(l[len(l)//2-1:len(l)//2+1])/2.0\n    else:\n        return l[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l = sorted(l)\n    l_len = len(l)\n    if l_len % 2 == 0:\n        return (l[(l_len - 1) // 2] + l[l_len // 2]) / 2\n    else:\n        return l[l_len // 2]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if text == '':\n        return True\n    else:\n        if text[0] == text[-1]:\n            return is_palindrome(text[1:-1])\n        else:\n            return False\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return text.casefold() == text.casefold()[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(text) < 2:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return text[::-1] == text\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # print(n, p)\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (2 * modp(n // 2, p)) % p\n    elif n % 2 == 1:\n        return (modp(n // 2, p) * modp(n // 2, p)) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    modulo = 0\n    binary = \"{0:b}\".format(n)\n    for i in binary:\n        modulo = (2*modulo + int(i))%p\n    return modulo\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = 1\n    for i in range(n):\n        s = (s * 2) % p\n    return s\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    x = 1\n    for _ in range(n):\n        x *= 2\n        x %= p\n    return x\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 0:\n        n = -n\n        ret = 1\n        while n!= 0:\n            ret = ret*2 % p\n            n = n - 1\n        return ret\n    return 2**n % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be nonnegative\")\n    elif n == 0:\n        return 1\n    else:\n        return (modp(n - 1, p) ** 2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if p == 2:\n        return 1 if n % 2 == 0 else 0\n    else:\n        return modp(n, p - 1) * 2\n    # TODO: complete the function\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 0:\n        n = -n\n        return (1 - n % p) % p\n    else:\n        return n % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert n >= 0\n    if n == 0:\n        return 1\n    return ((modp(n-1, p) * 2) % p)\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) + 5) % 26 + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in text:\n        if char not in vowels:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = 'aeiou'\n    return ''.join([ch for ch in text if ch not in vowels])\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    text_no_vowels = \"\"\n    for character in text:\n        if character.lower() not in \"aeiou\":\n            text_no_vowels += character\n    return text_no_vowels\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([c for c in text if c not in vowels])\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    vowels = 'aeiouAEIOU'\n    vowel_list = list(vowels)\n    new_string = []\n    for element in text:\n        if element in vowel_list:\n            continue\n        else:\n            new_string.append(element)\n    new_string = ''.join(new_string)\n    return new_string\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    vowel_chars = ['a','e','i','o','u','A','E','I','O','U']\n    result = \"\"\n    for char in text:\n        if char not in vowel_chars:\n            result += char\n    return result\n    \ndef sort_vowels(text):\n    \"\"\"\n    sort_vowels is a function that takes string and returns string with vowels in alphabetical order.\n    >>> sort_vowels('')\n    ''\n    >>> sort_vowels('abcdefghijklm')\n    'aAbBcCdDeEfFgGhHiIjJkKlLm'\n    >>> sort_vowels('Abcdefghijklm')\n    'aAbBcCdDeEfFgGhHiIjJkKlLm'\n    >>> sort_vowels('AaaBBBccCddDDDeeEEEggG')\n    'AaaBbbBccCddDddDeeEggG'\n    >>> sort_vowels('abcdefghijklm')\n    'aAbBcCdDeEfFgGhHiIjJkKlLm'\n    >>> sort_vowels('zbcd')\n    'zZbCd'\n    >>> sort_vowels('abcd')\n    'AaBbCcDd'\n    >>> sort_vowels('aaBAA')\n    'B'\n    >>> sort_vowels('aaaaa')\n    'aaaaa'\n    \"\"\"\n    vowel_chars = ['a','e','i','o','u','A','E','I','O','U']\n    result = \"\"\n    for char in text:\n        if char in vowel_chars:\n            result += char\n    result = sorted(result)\n    return ''.join(result)\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowels = set('aeiouAEIOU')\n    return ''.join(c for c in text if c not in vowels)\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    vowels = \"aeiou\"\n    l = list(text)\n    for i in range(len(l)):\n        if l[i].lower() in vowels:\n            l[i] = \"\"\n    return \"\".join(l)\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return text.translate(str.maketrans('aeiouAEIOU','  '))\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join([c for c in text if c not in VOWELS])\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # use reduce function to check if all numbers are less than threshold t.\n    # if all numbers are less than t return True, if not return False\n    return reduce(lambda x, y: x and y, [i < t for i in l])\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if t < 0:\n        return False\n    if l == []:\n        return True\n    return t >= l[0] and below_threshold(l[1:], t)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for element in l:\n        if element > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for n in l:\n        if n >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return all(i < t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # \"t\" is the threshold, below which things are considered \"below\"\n    return all(x < t for x in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    i = 0\n    while i < len(l):\n        if l[i] > t:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    i = 0\n    for num in l:\n        if num > t:\n            i = 1\n    if i == 0:\n        return True\n    else:\n        return False\n    \ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10], 10)\n    False\n    >>> above_threshold([1, 20, 4, 10], 15)\n    True\n    \"\"\"\n    i = 0\n    for num in l:\n        if num < t:\n            i = 1\n    if i == 0:\n        return True\n    else:\n        return False\n        \ndef above_threshold_count(l: list, t: int):\n    \"\"\"Return True if the number of numbers in the list l that are above threshold t.\n    >>> above_threshold_count([1, 2, 4, 10], 10)\n    1\n    >>> above_threshold_count([1, 20, 4, 10], 15)\n    2\n    \"\"\"\n    i = 0\n    for num in l:\n        if num < t:\n            i = i + 1\n    return i\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return all(x < t for x in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return all(n <= t for n in l)\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x+y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def gen_chars():\n        for c in s0:\n            yield c\n        for c in s1:\n            yield c\n    return set(gen_chars()) == set(s0 + s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    d = {}\n    for char in s0:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    for char in s1:\n        if char in d:\n            d[char] -= 1\n        else:\n            return False\n    for k, v in d.items():\n        if v!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s0 = set(s0)\n    s1 = set(s1)\n    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    dict_s0 = {}\n    dict_s1 = {}\n    for c in s0:\n        if c in dict_s0:\n            dict_s0[c] += 1\n        else:\n            dict_s0[c] = 1\n    for c in s1:\n        if c in dict_s1:\n            dict_s1[c] += 1\n        else:\n            dict_s1[c] = 1\n    for c in dict_s0:\n        if c not in dict_s1:\n            return False\n        elif dict_s1[c]!= dict_s0[c]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # for word in set(s0):\n    #     if word in s1:\n    #         pass\n    #     else:\n    #         return False\n    # return True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s0 = s0.lower()\n    s1 = s1.lower()\n    s0 = sorted(s0)\n    s1 = sorted(s1)\n    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return all([i == j for i, j in zip(s0, s1)])\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(list(s0)) == sorted(list(s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s0_chars = set(s0)\n    s1_chars = set(s1)\n    return s0_chars == s1_chars\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len(set(s0) & set(s1)) == len(set(s0) | set(s1))\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n < 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return _fib(n)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def fib_(n, prev, cur):\n        if n == 0:\n            return prev\n        return fib_(n-1, cur, prev+cur)\n    return fib_(n, 1, 1)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a, b = 1, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n > 0, 'n > 0'\n    return 1 if n <= 2 else fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return 1 if n <= 1 else fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    brackets = \"<>\"[::-1].join(brackets)\n    brackets = \"><\" + brackets[1:]\n    brackets = \"><\" + brackets[1:]\n    brackets = \"><\" + brackets[1:]\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_stack.append(bracket)\n        elif bracket == '>':\n            if len(bracket_stack) == 0:\n                return False\n            if bracket_stack[-1] == '<':\n                bracket_stack.pop()\n            else:\n                return False\n    if len(bracket_stack)!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    brackets = list(brackets)\n    left = 0\n    right = 0\n    while left < len(brackets) and right < len(brackets):\n        if brackets[left] == '<':\n            bracket = '>'\n            right += 1\n        else:\n            bracket = '<'\n            left += 1\n        if bracket!= brackets[right]:\n            return False\n    return left == right\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for b in brackets:\n        if b == \"<\":\n            count += 1\n        elif b == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    brackets = list(brackets)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    bracket_pairs = []\n    for b in brackets:\n        if b == \"<\":\n            bracket_pairs.append(\"<\")\n        else:\n            if not bracket_pairs or bracket_pairs.pop()!= \"<\":\n                return False\n    return not bracket_pairs\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    bracket_stack = []\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # The stack is a list of characters in the input string\n    bracket_stack = []\n    # Loop through all the input characters in one pass\n    for char in brackets:\n        if char == '<':\n            bracket_stack.append(char)\n        elif char == '>':\n            # If there's a '<' in the bracket stack, this '>' is redundant\n            if len(bracket_stack) > 0 and bracket_stack[-1] == '<':\n                bracket_stack.pop()\n            # Otherwise, it's a '>' matching a '<' we have seen before\n            # i.e. we have an unbalanced bracket\n            else:\n                return False\n    # If the bracket stack is empty at this point, we have a valid bracket sequence\n    return len(bracket_stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: implement this function\n    bracket_count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_count += 1\n        if bracket == '>':\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    if bracket_count!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    stack = []\n    for c in brackets:\n        if c == '>':\n            if stack:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(c)\n    return not stack\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(l) <= 2:\n        return True\n    if l[0] < l[1]:\n        if l[0] < l[1] < l[2]:\n            return monotonic(l[1:])\n        else:\n            return False\n    else:\n        if l[0] > l[1] > l[2]:\n            return monotonic(l[1:])\n        else:\n            return False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(l) == 0 or len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        return monotonic(l[1:])\n    if l[0] > l[1]:\n        return monotonic(l[1:])\n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(l) <= 1:\n        return True\n    if l[0] <= l[1]:\n        if l[0] < l[-1]:\n            return True\n        else:\n            return False\n    if l[0] > l[1]:\n        if l[0] > l[-1]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if l == []:\n        return True\n    elif len(l) == 1:\n        return True\n    elif len(l) == 2:\n        if l[0] <= l[1]:\n            return True\n        else:\n            return False\n    else:\n        if l[0] <= l[1]:\n            return monotonic(l[1:])\n        else:\n            return False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(l) <= 1:\n        return True\n    if l[0] >= l[1]:\n        return monotonic(l[1:])\n    elif l[0] <= l[1]:\n        return monotonic(l[1:])\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(l) < 2:\n        return True\n    elif len(l) == 2:\n        if l[0] < l[1]:\n            return True\n        else:\n            return False\n    else:\n        return ((l[1] < l[0]) == (l[1] < l[2])) and monotonic(l[1:])\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(l) < 3:\n        return True\n    prev_elem = l[0]\n    for elem in l:\n        if elem > prev_elem:\n            return False\n        prev_elem = elem\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(l) <= 2:\n        return True\n    increase = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increase = False\n    return increase\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (all(x < y for x, y in zip(l, l[1:])) or \n            all(x > y for x, y in zip(l, l[1:])))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Set the variables\n    l1_set = set(l1)\n    l2_set = set(l2)\n    # Make a set of the common elements\n    common_set = l1_set.intersection(l2_set)\n    # And return it\n    return sorted(common_set)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s1, s2 = set(l1), set(l2)\n    return sorted(s1 & s2)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l1_set = set(l1)\n    l2_set = set(l2)\n    return sorted(list(l1_set & l2_set))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # l1 = set(l1)\n    # l2 = set(l2)\n    # return sorted(l1.intersection(l2))\n    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # return sorted(set(l1).intersection(l2))\n    s = set(l1)\n    for e in l2:\n        if e in s:\n            s.remove(e)\n    return list(s)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not l1 or not l2:\n        return []\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    set1, set2 = set(l1), set(l2)\n    intersection = list(set1 & set2)\n    intersection.sort()\n    return intersection\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n // i\n            i = 1\n        else:\n            i += 1\n    return n\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    factor = 1\n    while factor * factor < n:\n        factor += 1\n    while factor > 1:\n        if n % factor == 0:\n            n = n // factor\n        else:\n            factor -= 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # First pass: try to quickly find a number that's divisible by each of the \n    # numbers from 2 to n / 2.\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return i\n    # Second pass: try to find a number that's divisible by only one of the\n    # numbers from 2 to n / 2.\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return n / i\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    while n % 2 == 0:\n        prime_factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n = n // i\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors[-1]\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    i = 2\n    while i <= n:\n        if n % i == 0:\n            n = n // i\n            i = 2\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            if is_prime(i) == True:\n                n = n / i\n        else:\n            i += 1\n    return int(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    factors = []\n    # Use a while loop to find all prime factors.\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    # The largest prime factor is either the last element in the list or the last\n    # element in the original n.\n    return factors[-1] if len(factors) > 0 else n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    for i in range(n - 1, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return n*(n+1)//2\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert n>0, 'n must be greater than 0'\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum = 0\n    for x in range(1, n+1):\n        sum = sum + x\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return n * (n+1) // 2\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return n*(n+1)/2\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum = 1\n    for i in range(2, n + 1):\n        sum += i\n    return sum\n    \ndef gcd(a, b):\n    \"\"\"gcd is a function that calculates the greatest common divisor of two numbers.\n    >>> gcd(10, 20)\n    10\n    >>> gcd(8, 12)\n    4\n    >>> gcd(9, 9)\n    9\n    >>> gcd(11, 10)\n    1\n    >>> gcd(1, 10)\n    1\n    \"\"\"\n    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n    \ndef is_palindrome(s):\n    \"\"\"is_palindrome is a function that checks if a string is a palindrome.\n    >>> is_palindrome(\"a\")\n    True\n    >>> is_palindrome(\"ab\")\n    False\n    >>> is_palindrome(\"aba\")\n    True\n    >>> is_palindrome(\"abb\")\n    False\n    >>> is_palindrome(\"aabccba\")\n    True\n    >>> is_palindrome(\"a\")\n    True\n    \"\"\"\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef is_prime(n):\n    \"\"\"is_prime is a function that checks if a number is a prime number.\n    >>> is_prime(5)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef get_smallest_prime_factor(n):\n    \"\"\"get_smallest_prime_factor is a function that returns the smallest prime factor of a number.\n    >>> get_smallest_prime_factor(12)\n    2\n    >>> get_smallest_prime_factor(8)\n    2\n    >>> get_smallest_prime_factor(13)\n    13\n    \"\"\"\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return n\n    \ndef get_largest_prime_factor(n):\n    \"\"\"get_largest_prime_factor is a function that returns the largest prime factor of a number.\n    >>> get_largest_prime_factor(12)\n    2\n    >>> get_largest_prime_factor(8)\n    2\n    >>> get_largest_prime_factor(13)\n    13\n    \"\"\"\n    i = n - 1\n    while i > 0:\n        if n % i == 0 and is_prime(i):\n            return i\n        i -= 1\n    return 1\n    \ndef get_all_prime_factors(n):\n    \"\"\"get_all_prime_factors is a function that returns the prime factors of a number.\n    >>> get_all_prime_factors(12)\n    [2, 2, 3]\n    >>> get_all_prime_factors(8)\n    [2, 2, 2]\n    >>> get_all_prime_factors(13)\n    [13, 7]\n    \"\"\"\n    primes = []\n    i = 2\n    while i < n:\n        if n % i == 0 and is_prime(i):\n            primes.append(i)\n            n /= i\n            i = 2\n        else:\n            i += 1\n    primes.append(int(n))\n    return primes\n    \ndef get_number_of_divisors(n):\n    \"\"\"get_number_of_divisors is a function that returns the number of divisors of a number.\n    >>> get_number_of_divisors(12)\n    4\n    >>> get_number_of_divisors(8)\n    4\n    >>> get_number_of_divisors(13)\n    6\n    >>> get_number_of_divisors(100)\n    9\n    \"\"\"\n    primes = get_all_prim"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            bracket_stack.append(bracket)\n        elif bracket == ')':\n            if len(bracket_stack) == 0:\n                return False\n            bracket_stack.pop()\n    if len(bracket_stack) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    brackets = list(brackets)\n    assert brackets[0] == \"(\"\n    assert brackets[-1] == \")\"\n    brackets.pop(0)\n    brackets.pop()\n    for bracket in brackets:\n        if bracket == \"(\":\n            brackets.append(\")\")\n        else:\n            assert bracket == \")\"\n            brackets.append(\"(\")\n    brackets = \"\".join(brackets)\n    return brackets == \"\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    opening_brackets = brackets[::2]\n    closing_brackets = brackets[1::2]\n    if len(opening_brackets)!= len(closing_brackets):\n        return False\n    else:\n        for index in range(len(opening_brackets)):\n            if opening_brackets[index]!= \"(\" or closing_brackets[index]!= \")\":\n                return False\n        return True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    brackets = \"\".join(brackets)\n    stack = []\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    bracket_stack = []\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    open_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n            open_brackets += 1\n        else:\n            if open_brackets <= 0:\n                return False\n            else:\n                open_brackets -= 1\n    if open_brackets == 0:\n        return True\n    return False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    bracket_stack = []\n    for i, c in enumerate(brackets):\n        if c == \"(\":\n            bracket_stack.append(i)\n        elif c == \")\":\n            if len(bracket_stack) == 0:\n                return False\n            bracket_stack.pop()\n    if len(bracket_stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    openings = []\n    for i, c in enumerate(brackets):\n        if c == '(':\n            openings.append(i)\n        elif c == ')':\n            if not openings:\n                return False\n            else:\n                openings.pop()\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s = []\n    for char in brackets:\n        if char == \"(\":\n            s.append(char)\n        elif char == \")\":\n            if len(s) == 0:\n                return False\n            else:\n                s.pop()\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if brackets.count(\"(\")!= brackets.count(\")\"):\n        return False\n    else:\n        if brackets[0] == \")\":\n            return False\n        return True\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    derivative = []\n    for x in range(1, len(xs)):\n        derivative.append(xs[x] * x)\n    return derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [j * i for i, j in zip(xs[1:], range(1, len(xs)))]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [i * j for i, j in zip(xs[1:], range(1, len(xs) - 1))]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # start\n    if len(xs) == 1:\n        return 0\n    if len(xs) == 2:\n        return xs[0]\n    # end\n    # derivative\n    der = []\n    for i in range(1, len(xs)):\n        der.append(i * xs[i])\n    # return\n    return der\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    deriv = []\n    for i, x in enumerate(xs):\n        if i == 0:\n            deriv.append(1)\n        else:\n            deriv.append(i * x)\n    return deriv\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    new_list = []\n    for i in range(1, len(xs)):\n        new_list.append(xs[i] * i)\n    return new_list\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [i * x for i, x in zip(xs[1:], [k for k in range(len(xs) - 1)])]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert xs[0] is not 0, \"Zero coefficient are not accepted in a derivative\"\n    return [coeff * i for i, coeff in enumerate(xs[1:], start=1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(xs) == 1:\n        return [0]\n    derivative_coefs = []\n    for i in range(1, len(xs)):\n        coef = xs[i] * i\n        derivative_coefs.append(coef)\n    return derivative_coefs\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i*j for i,j in zip(xs[1:],range(1, len(xs)))]\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n >= 0\n    if n == 1 or n == 2 or n == 3:\n        return 0\n    fibfib_arr = [0, 1, 1]\n    i = 3\n    while i <= n:\n        fibfib_arr.append(fibfib_arr[i - 3] + fibfib_arr[i - 2] + fibfib_arr[i - 1])\n        i += 1\n    return fibfib_arr[n]\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    a, b, c = 0, 1, 0\n    for i in range(n):\n        a, b, c = b, c, a + b + c\n    return a\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n < 2:\n        return n\n    n1, n2 = 0, 1\n    for _ in range(n-1):\n        n1, n2 = n2, n2+n1\n    return n2\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return 0 if n == 0 or n == 1 else fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert isinstance(n, int) and n >= 0, 'FibFib must be called with an integer >= 0'\n    if n <= 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert isinstance(n, int), \"n should be an integer.\"\n    assert n >= 0, \"n should be positive.\"\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n >= 0, 'Invalid input!'\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Let's create a base cases\n    fibfibs = [0, 0, 1]\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for letter in s:\n        if letter in VOWELS:\n            count += 1\n    if s[-1] in VOWELS:\n        count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            vowel_count += 1\n    if s[-1] in vowels:\n        vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = ['a','e','i','o','u','y']\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    if s[-1] in vowels:\n        count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return 0\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for letter in s:\n        if letter in ['a', 'e', 'i', 'o', 'u', 'y']:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    vowels = \"aeiou\"\n    for i in range(len(s)):\n        if s[i] in vowels and i!= len(s) - 1:\n            count += 1\n        elif s[i] in vowels and i == len(s) - 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Counter() is a type of dictionary where we can keep count of items\n    counter = Counter(s)\n    # we can cast counter to list to convert it to a list of tuples\n    # then we can cast tuple[1] to integer\n    return sum([tuple[1] for tuple in counter.items() if tuple[0] in ['a', 'e', 'i', 'o', 'u'] or tuple[0] == 'y' and tuple[0] == s[-1]])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    vowels = set(\"aeiou\")\n    count = 0\n    last = s[-1]\n    if last in vowels:\n        count += 1\n    for i in range(len(s)-1):\n        if s[i] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # TODO\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # get the digits of x in a list.\n    # You may also use a string or tuple here for x\n    x_digits = [int(i) for i in str(x)]\n    if shift >= len(x_digits):\n        # if shift is larger than length of x_digits, reverse the digits and add it to x_digits\n        x_digits.reverse()\n        x_digits += x_digits\n    else:\n        # shift the digits right by shift\n        for i in range(len(x_digits) - shift, len(x_digits)):\n            x_digits[i] = x_digits[i-shift]\n        # get the digits of x in a string and return\n        return ''.join([str(i) for i in x_digits])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # take the string representation of the number\n    s = str(x)\n    # if the shift is > than the number of digits, we have to reverse the digits\n    if shift > len(s):\n        return int(s[::-1])\n    else:\n        return int(s[shift:shift+len(s)] + s[:shift])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n = len(str(x))\n    if shift >= n:\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return str(x)[-shift:]+str(x)[:-shift] if shift < len(str(x)) else str(x)[-shift:][::-1]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert isinstance(x, int)\n    assert isinstance(shift, int)\n    assert 0 <= shift <= len(str(x))\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if shift == 0:\n        return str(x)\n    elif shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s = str(x)[-shift:]\n    for _ in range(shift):\n        s += str(x)[0]\n    return s\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    y = str(x)[:shift]\n    return y[::-1] + y[:-shift]\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # O(n) time | O(1) space\n    sum = 0\n    for letter in s:\n        if ord(letter) in range(65, 91):\n            sum += ord(letter)\n    return su"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([ord(c.upper()) for c in s if c.upper().isalpha()])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in range(len(s)):\n        if ord(s[i]) >= 65 and ord(s[i]) <= 90:\n            sum += ord(s[i])\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(ord(s) - 96 for s in s if s.isupper())\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    ans = 0\n    for c in s:\n        ans += ord(c.upper())\n    return ans\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    counter = 0\n    for char in s:\n        if char.isupper():\n            counter += ord(char)\n    return counter\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s = s.upper()\n    summ = 0\n    for i in s:\n        if i.isdigit():\n            summ += int(i)\n    return summ\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = 0\n    for c in s:\n        if 'A' <= c <= 'Z':\n            result += ord(c)\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # check the edge case if the input is empty\n    if s == \"\":\n        return 0\n    \n    # check the edge case if the input is empty\n    if n == 0:\n        return 0\n    \n    # convert the string into a list of fruits and the total number of fruits\n    s_list = s.split()\n    total_fruits = int(s_list[0]) + int(s_list[1])\n    \n    # if the total number of fruits is not equal to the input number, return the total number of fruits\n    if total_fruits!= n:\n        return total_fruits\n    \n    # if the total number of fruits is equal to the input number, \n    # return the number of the mango fruits. The mango fruits are the number of fruits left in the basket minus the total number of the fruits.\n    return n - int(s_list[0]) - int(s_list[1])\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not s.isdigit():\n        print(\"The string you have entered is not a number\")\n    else:\n        if n<0:\n            print(\"The number of fruits you entered is invalid.\")\n        else:\n            s=int(s)\n            n=int(n)\n            print(s-n)\n            "
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    #First of all, I'll remove the spaces from the string, then I'll convert it to a list,\n    #and I'll remove all the 0's from the list.\n    s = s.replace(\" \",\"\")\n    s = s.split(\" and \")\n    #I've created two empty lists and I'll append the number of the apples and oranges \n    #in the basket that I've received.\n    list_of_apples = []\n    list_of_oranges = []\n    for i in range(len(s)):\n        if s[i]!= \"0\":\n            list_of_apples.append(int(s[i]))\n            list_of_oranges.append(int(s[i]))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    l = s.split(\" \")\n    apples = int(l[0])\n    oranges = int(l[1])\n    mango = min(apples, oranges)\n    return mango\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if s == \"0\" or s == \"\":\n        return 0\n    # print(int(s.split()[0]))\n    # print(int(s.split()[1]))\n    # print(int(s.split()[2]))\n    return int(s.split()[0]) - int(s.split()[1]) - int(s.split()[2])\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    elif s[0] == '0':\n        return 0\n    elif s[0] == '1' and int(s[1]) <= n:\n        return int(s[1:])\n    elif s[0] == '1' and int(s[1]) > n:\n        return int(s[1:]) - n\n    else:\n        if int(s[0]) > n:\n            return 0\n        elif int(s[0]) <= n:\n            return fruit_distribution(s[1:], n - int(s[0]))\n        "
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Your code here\n    s = s.split(\" and \")\n    if n >= int(s[0]):\n        return n - int(s[0])\n    else:\n        return n - int(s[1])\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return n - s.count(\"orange\") - s.count(\"apple\") + s.count(\"mango\")\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if type(s)!= str:\n        raise Exception(\"String is not valid!\")\n    if type(n)!= int:\n        raise Exception(\"Number is not valid!\")\n    splited = s.split(' ')\n    if splited[0].isdigit() == False or splited[2].isdigit() == False:\n        raise Exception(\"String is not valid!\")\n    return n - int(splited[0]) - int(splited[2])\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return []\n    else:\n        # The easiest way to check if a number is even is to use the bitwise operator \n        # and check if the lowest-order bit is set. If the lowest-order bit is set\n        # the lowest order bit must be set, but the second-lowest bit can be set.\n        # This means that if the lowest order bit is set then we can assume the \n        # number is odd.\n        #\n        # We can do the same with even numbers. For example, if the lowest order\n        # bit is not set then we can assume the number is even.\n        #\n        # Since we want to keep the index of the smallest element, we will\n        # store the value and index in a tuple and then return a sorted list\n        # by the value.\n        \n        # Compute the set of even values\n        evens = {x for x in arr if x%2 == 0}\n        \n        # If there are no even values then return []\n        if len(evens) == 0:\n            return []\n        \n        # If there is only one even value then return the smallest value and the index\n        elif len(evens) == 1:\n            return [min(evens), arr.index(min(evens))]\n        \n        # Otherwise sort the list by the value and index\n        else:\n            return sorted([min(evens), arr.index(min(evens))])\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    stack = []\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            stack.append(value)\n            stack.append(index)\n            \n    if len(stack) == 0:\n        return result\n    stack.sort()\n    result = [stack.pop(), stack.pop()]\n    return result\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    if not arr:\n        return result\n    smallest_value = max(arr)\n    min_index = len(arr)\n    for index, value in enumerate(arr):\n        if value < smallest_value and value % 2 == 0:\n            smallest_value = value\n            min_index = index\n    if smallest_value!= max(arr):\n        result.append(smallest_value)\n        result.append(min_index)\n    return resul"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    even = lambda x: x % 2 == 0\n    smalest = lambda x, y: x if even(x) and not even(y) else y\n    array = arr.copy()\n    array.sort(key=even)\n    if not array:\n        return []\n    min_even = array[0]\n    min_index = 0\n    for index, value in enumerate(array):\n        if even(value) and even(min_even):\n            min_even = value\n            min_index = index\n        elif even(value) and not even(min_even):\n            break\n    return [min_even, min_index]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if arr == []:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    evens = [n for n in arr if n % 2 == 0]\n    min_even = min(evens) if evens else []\n    if min_even:\n        return [min_even, arr.index(min_even)]\n    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Clean\n    arr = sorted(arr)\n    evens = [node for node in arr if node % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    evens = [x for x in arr if x % 2 == 0]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    arr = sorted(arr)\n    arr = [x for x in arr if x % 2 == 0]\n    if len(arr) > 0:\n        return [arr[0], arr.index(arr[0])]\n    return []\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for number in lst:\n        if lst.count(number) >= number:\n            return number\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    counter = dict()\n    \n    for num in lst:\n        counter[num] = counter.get(num, 0) + 1\n        \n    for key, val in counter.items():\n        if val >= key:\n            return key\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    dct = {}\n    max_value = -1\n    for i in lst:\n        if i in dct:\n            dct[i] += 1\n        else:\n            dct[i] = 1\n        if max_value < dct[i]:\n            max_value = dct[i]\n    for key, val in dct.items():\n        if val == max_value:\n            return key\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    max_num = max(lst)\n    if lst.count(max_num) < max_num:\n        return -1\n    return max_num\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code here\n    d = {}\n    for x in lst:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    max_freq = max(d.values())\n    max_freq_num = -1\n    for x in d:\n        if d[x] >= max_freq:\n            max_freq = d[x]\n            max_freq_num = x\n    if max_freq_num == -1:\n        return -1\n    else:\n        return max_freq_num\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    new_lst = []\n    for item in lst:\n        if item not in new_lst:\n            new_lst.append(item)\n        else:\n            new_lst.append(item+1)\n    return new_lst.index(max(new_lst))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    max_val = -1\n    max_count = 0\n    for num in lst:\n        if lst.count(num) > max_count:\n            max_count = lst.count(num)\n            max_val = num\n    return max_val\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst.sort()\n    max = lst[-1]\n    if len(lst) == 1:\n        return -1\n    if max == 0:\n        return -1\n    if max < 0:\n        return -1\n    for item in lst:\n        if item == 0:\n            continue\n        if lst.count(item) >= max:\n            return item\n    return -1\n        \n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    import math\n    n = len(lst)\n    if n == 0:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst.sort()\n    return lst[::-1]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return list(range(min(lst),max(lst)+1))[::-1]+list(range(min(lst),max(lst)+1))[1:]\n    "
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return []\n    sorted_lst = sorted(lst)\n    sorted_lst.reverse()\n    return sorted_lst\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(lst, reverse=True)"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n = len(lst)\n    return [lst[i] for i in range(n - 1, -1, -1) + range(n)][::-1]"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not lst:\n        return []\n    \n    result = []\n    n = len(lst)\n    i = 0\n    while i < n:\n        min_val = lst[i]\n        for j in range(i+1, n):\n            if lst[j] < min_val:\n                min_val = lst[j]\n        result.append(min_val)\n        i += 1\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    minimum = min(lst)\n    maximum = max(lst)\n    lst.remove(maximum)\n    lst.remove(minimum)\n    result.append(minimum)\n    result.append(maximum)\n    while lst:\n        minimum = min(lst)\n        maximum = max(lst)\n        lst.remove(maximum)\n        lst.remove(minimum)\n        result.append(minimum)\n        result.append(maximum)\n    return result\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(lst, key=lambda x: x if lst.index(x)==0 else lst[lst.index(x)-1])"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not lst:\n        return lst\n    strange = sorted(lst, key=lambda x: -abs(x))\n    return strange\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n        x = sides[0]\n        y = sides[1]\n        z = sides[2]\n        return round((x * y * z)/(2 * (x + y + z)), 2)\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return round(0.5*(a*b*c), 2) if (a+b > c and b+c > a and c+a > b) else -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sides = sorted([a, b, c])\n    if sides[0] + sides[1] > sides[2]:\n        return round((sides[0] * sides[1] / 2), 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return round((a * b * c) / (2 * (a + b + c) * (a + b - c) * (a + c - b) * (b + c - a)), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sides = [a, b, c]\n    side_sum = sum(sides)\n    for num in sides:\n        if num <= side_sum - num:\n            return -1\n    return round((sides[0] * sides[1] * sides[2]) ** 0.5, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sides = sorted([a, b, c])\n    if sides[2] >= sides[0] + sides[1]:\n        return -1\n    else:\n        s = sides[0] + sides[1]\n        return round((s * (s - sides[0]) * (s - sides[1]) * (s - sides[2]) ** 0.5) / 4, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Check if all three sides are the same\n    if a == b == c:\n        return 3\n    # Check if any two sides are the same\n    elif a == b or a == c or b == c:\n        return 2\n    # Check if all sides are different\n    elif a!= b and b!= c and a!= c:\n        return 1\n    else:\n        return -1\n    \nprint(triangle_area(1, 2, 3))\nprint(triangle_area(1, 3, 2))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3, 3, 3))\nprint(triangle_area(3, 3, 4))\nprint(triangle_area(1, 2, 5))\nprint(triangle_area(1, 3, 6))\nprint(triangle_area(5, 6, 7)"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if a+b > c and b+c > a and a+c > b:\n        return round(math.sqrt(a*b*c), 2)\n    else:\n        return -1\n    #return 0.0\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if(is_balanced(q)):\n        return True if sum(q)<=w else False\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if is_palindrome(q) and sum(q)<=w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return q[::] == q[::-1] and sum(q)<=w\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (q[::-1] == q) and sum(q)<=w\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # split the list in half to determine whether it's balanced or not\n    half = len(q) // 2\n    if (len(q) % 2 == 0):\n        left = q[:half]\n        right = q[half:]\n        if (q == q[::-1]):\n            if (sum(left) + sum(right) <= w):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        left = q[:half]\n        right = q[half+1:]\n        if (q == q[::-1]):\n            if (sum(left) + sum(right) <= w):\n                return True\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": ""
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    # Your code here\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s = sum(q)\n    if s <= w and s == sum(q[::-1]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    w = w\n    x = list(q)\n    y = sum(x)\n    if y > w:\n        return False\n    else:\n        z = list(q)\n        if z[0] == z[-1]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Take the first half of the array and find the frequency of each element\n    freqs = {}\n    for element in arr[:int(len(arr)/2)]:\n        if element in freqs:\n            freqs[element] += 1\n        else:\n            freqs[element] = 1\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    palindromes = [0] * (2**len(arr))\n    for i in range(2**len(arr)):\n        left, right = i, i\n        while left > 0:\n            left = (left - 1) // 2\n            if arr[left]!= arr[right % len(arr)]:\n                palindromes[i] = palindromes[i] + 1\n        right += 1\n        while right < len(arr):\n            left = (left + 1) // 2\n            if arr[left]!= arr[right % len(arr)]:\n                palindromes[i] = palindromes[i] + 1\n            right += 1\n    return min(palindromes)\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return None\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    min_changes = len(arr)\n    \n    for i in range(len(arr)):\n        temp = arr[i]\n        arr[i] = 'a'\n        if palindrome(arr):\n            min_changes = min(min_changes, 1)\n        else:\n            arr[i] = temp\n            arr.append('b')\n            if palindrome(arr):\n                min_changes = min(min_changes, 2)\n            else:\n                arr.pop()\n                arr[i] = temp\n    return min_changes\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i]!= arr[~i]:\n            changes += 1\n    return changes\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(1 for i in range(len(arr)-1) if arr[i]!= arr[-1-i])\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not arr:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # if len(arr) == 1:\n    #     return 0\n    # else:\n    #     if arr[0]!= arr[-1]:\n    #         return 1\n    #     else:\n    #         return smallest_change(arr[1:-1])\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(arr) < 2:\n        return 0\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def is_palindromic(s):\n        return s == s[::-1]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count1 = 0\n    count2 = 0\n    for item in lst1:\n        count1 += len(item)\n    for item in lst2:\n        count2 += len(item)\n    if count1 < count2:\n        return lst1\n    else:\n        return lst2\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    list1 = sorted(lst1)\n    list2 = sorted(lst2)\n    if len(list1) == len(list2):\n        return list1\n    elif len(list1) > len(list2):\n        for i in list2:\n            for j in list1:\n                if len(i) < len(j):\n                    list1.remove(j)\n                    break\n        return list1\n    else:\n        for i in list1:\n            for j in list2:\n                if len(i) < len(j):\n                    list2.remove(j)\n                    break\n        return list2"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return [word for word in lst1 if len(word) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s1 = sum(len(x) for x in lst1)\n    s2 = sum(len(x) for x in lst2)\n    if s1 > s2:\n        return lst2\n    elif s2 > s1:\n        return lst1\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst1) < len(lst2):\n        return [s for s in lst1 if len(s) <= len(lst2)]\n    elif len(lst1) > len(lst2):\n        return [s for s in lst2 if len(s) <= len(lst1)]\n    return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    chars = []\n    for i in range(len(lst1)):\n        chars.append(len(lst1[i]))\n    for j in range(len(lst2)):\n        chars.append(len(lst2[j]))\n    if len(lst1) > len(lst2):\n        return sorted(chars)[:len(lst1)]\n    elif len(lst1) < len(lst2):\n        return sorted(chars)[:len(lst2)]\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst1 = [''.join(sorted(i)) for i in lst1]\n    lst2 = [''.join(sorted(i)) for i in lst2]\n    lst3 = lst1 if len(lst1) < len(lst2) else lst2\n    lst3 = [''.join(sorted(i)) for i in lst3]\n    lst3 = [''.join(i) for i in lst3]\n    return lst3\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(lst1) == 0:\n        return []\n    elif len(lst1) == 1:\n        return lst1\n    elif len(lst2) == 0:\n        return lst1\n    elif len(lst1) > len(lst2):\n        return []\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        lst3 = []\n        for i in lst1:\n            for j in lst2:\n                if len(i) < len(j):\n                    lst3.append(i)\n        return lst3\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # if lst1 > lst2:\n    #     return [word for word in lst1 if len(word) < len(lst2)]\n    # if lst2 > lst1:\n    #     return [word for word in lst2 if len(word) < len(lst1)]\n    # return lst1\n    return [word for word in lst1 if sum(len(char) for char in word) < sum(len(char) for char in lst2)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(2, a):\n        if a % i!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    if (a % 3 == 0 or a % 5 == 0) and (a % 3!= 0 or a % 5!= 0):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not is_prime(a):\n        return False\n    \n    a_list = [a // x for x in range(2, int(math.sqrt(a)) + 1)]\n    for x in a_list:\n        if x > 1 and a % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for p in primes:\n        if a % p == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    prime_numbers = get_prime_numbers(100)\n    if a % 2 == 0:\n        return False\n    else:\n        for n in prime_numbers:\n            if a % n == 0:\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #we are going to add a flag to check if we have seen it before\n    #so we dont end up in an infinite loop\n    seen_flag = False\n    for i in range(1, 10):\n        if seen_flag == True:\n            break\n        for j in range(1, 10):\n            if i*j == a:\n                seen_flag = True\n                break\n        if seen_flag == True:\n            break\n    if seen_flag == True:\n        return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(2,a):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(3,a,2):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if x == n**(math.floor(math.log(x, n))):\n        return True\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x==n**int(log(x,n))\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x == n**int(math.log(x, n))\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(1, n+1):\n        if i**n == x:\n            return True\n        elif i**n!= x and i < n:\n            return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if x < 1 or n < 1:\n        return False\n    while x > 1:\n        if x % n!= 0:\n            return False\n        x /= n\n    return True\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # base case\n    if x == 1:\n        return True\n    elif x == n:\n        return True\n    elif n == 0:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_simple_power(x, n/2)\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x % n == 0"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x == n ** int(math.log(x, n))\n    \n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x == n**int(n)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return a>0 and a**(1./3.) == int(a**(1./3.))"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a**(1./3.) % 1 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (int(a**(1./3.)))**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return a**(1/3)%1==0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return pow(a,1/3) % 1 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    cube = round(pow(a,1./3.))\n    return cube**3==a\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return a ** 3 == int(a ** (1/3)) ** 3\nprint(iscube(180))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return a**3>0\n    \n    \ndef removechar(s,c):\n    '''\n    Write a function that removes all occurences of a character c from the string s.\n    Examples:\n    removechar('hello','h') ==> 'ello'\n    removechar('hello','l') ==> 'hell'\n    removechar('hello','x') ==> 'hello'\n    '''\n    return s.replace(c,'')\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    n = a**(1/3)\n    if n.is_integer():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    # your code goes here\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # count_primes(num) is too slow for the task.\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0432 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e\n    num_int = int(num, 16)\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043d\u0430\u0448 \u043d\u043e\u043c\u0435\u0440 \u043f\u0440\u043e\u0441\u0442\u044b\u043c\n    if is_prime(num_int):\n        return 1\n    return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #  your code here\n    numbers = ['2','3','5','7','B','D']\n    dict_ = {'A':10, 'B':11,'C':12,'D':13,'E':14,'F':15}\n    n = 0\n    for key in dict_:\n        if key in num:\n            n += num.count(key)\n    for num in numbers:\n        if num in num:\n            n += num.count(num)\n    return n\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # make sure all digits are uppercase\n    num = num.upper()\n    # convert hex to decimal\n    hex_dec = int(num, 16)\n    # find the prime numbers\n    primes = find_primes(hex_dec)\n    # count the prime numbers\n    count = 0\n    for p in primes:\n        if (p % 10 == 5 or p % 10 == 7) and p > 11:\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if num == \"\":\n        return 0\n    digits = list(num)\n    return sum([1 for n in digits if n in [\"1\", \"3\", \"7\", \"B\", \"D\"]])"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    num = list(num)\n    hex_prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n    count = 0\n    for i in range(len(num)):\n        if int(num[i]) in hex_prime_numbers:\n            count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    import string\n    \n    num = num.upper()\n    \n    set_string = string.digits[:6] + string.ascii_uppercase[:6]\n    \n    # num_dict = {i:0 for i in string.digits}\n    num_dict = {i:0 for i in set_string}\n    \n    for i in num:\n        num_dict[i] += 1\n    \n    count = 0\n    \n    for key in num_dict.keys():\n        if num_dict[key] > 0 and key not in ['A', 'B', 'C', 'D', 'E', 'F']:\n            count += num_dict[key]\n    \n    return count\n    \n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([(int(n) in PRIMES) for n in num])\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # the counter of digits\n    count = 0\n    # the characters of the input\n    chars = [chr(x) for x in range(ord('A'), ord('G')+1)]\n    for char in chars:\n        for x in range(10):\n            if num.find(char+str(x)) > -1:\n                count += 1\n    return count\n    \nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"1077E\") == 2, \"First Test\"\n    assert hex_key(\"AB\") == 1, \"Second Test\"\n    assert hex_key(\"ABED1A33\") == 4, \"Third Test\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"Fourth Test\"\n    assert hex_key(\"2020\") == 2, \"Fifth Test\"\n    print('\"Run\" is good. How is \"Check\"?'"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    binary = \"db\"\n    decimal_to_binary_helper(binary, decimal)\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert decimal >= 0, 'decimal must be greater than 0'\n    assert decimal % 2 == 0, 'decimal must be an even number'\n    binary = 'db'\n    while decimal!= 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    return binary + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"db\" + str(bin(decimal)[2:]) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"db\" + bin(decimal)[2:].zfill(8) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"db\" + \"\".join(str(int(d)) for d in \"{0:b}\".format(decimal)) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # WRITE YOUR CODE HERE\n    return \"{}db{}\".format(\"db\", bin(decimal)[2:])\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    decimal = int(decimal)\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    binary = bin(decimal).replace(\"0b\",\"\")\n    return \"db\"+binary+\"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your code here\n    return 'db' + str(bin(decimal))[2:].zfill(36) + 'db'\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # If the length of string is less than 3, we return false\n    if len(s) < 3:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(s) < 3:\n        return False\n    else:\n        i = 0\n        j = 0\n        while j < len(s):\n            if i == len(s) - 1:\n                return True\n            if s[i] == s[i+1]:\n                if i + 1 == len(s) - 1:\n                    return True\n                if j == len(s) - 1:\n                    return True\n                i += 2\n            else:\n                i += 1\n            j += 1\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    import itertools\n    s_set = set(itertools.chain.from_iterable(s_split for s_split in s.split(\"\")))\n    return len(s_set) >= 3\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(len(s)-2):\n        if s[i] == s[i+2]:\n            return False\n    if len(s) >= 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(s) < 3:\n        return False\n    elif len(set(s)) == 1:\n        return False\n    else:\n        result = True\n        for i in range(len(s)-1):\n            if s[i]!= s[i+1]:\n                result = False\n        return result\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in range(len(s) - 2):\n        if not set(s[i:i+3]).issubset(set(s[i+1:i+4])):\n            return False\n    if len(s) >= 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(s) < 3:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # make sure that we have at least 3 letters in a string\n    if len(s) < 3:\n        return False\n    \n    seen = set()\n    for letter in s:\n        if letter in seen:\n            return False\n        seen.add(letter)\n    \n    if len(seen) == len(s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(s) < 3:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # a dictionary that maps strings to ints, so that we don't need to compute it\n    d = {}\n    l = list(s)\n    l.sort()\n    for i in range(0,len(l),3):\n        if l[i] == l[i+1] or l[i] == l[i+2]:\n            return False\n    return True\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [ \n        \"A+\" if i>=4.0 else\n        \"A\" if i>=3.7 else\n        \"A-\" if i>=3.3 else\n        \"B+\" if i>=3.0 else\n        \"B\" if i>=2.7 else\n        \"B-\" if i>=2.3 else\n        \"C+\" if i>=2.0 else\n        \"C\" if i>=1.7 else\n        \"C-\" if i>=1.3 else\n        \"D+\" if i>=1.0 else\n        \"D\" if i>=0.7 else\n        \"D-\" if i>=0.0 else\n        \"E\" if i>=0.0 else \"Error\"\n    for i in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # Your code goes here\n    pass\n    \n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    letters = []\n    for i in grades:\n        if i > 4.0:\n            letters.append('A+')\n        elif i > 3.7:\n            letters.append('A')\n        elif i > 3.3:\n            letters.append('A-')\n        elif i > 3:\n            letters.append('B+')\n        elif i > 2.7:\n            letters.append('B')\n        elif i > 2.3:\n            letters.append('B-')\n        elif i > 2:\n            letters.append('C+')\n        elif i > 1.7:\n            letters.append('C')\n        elif i > 1.3:\n            letters.append('C-')\n        elif i > 1:\n            letters.append('D+')\n        elif i > 0.7:\n            letters.append('D')\n        elif i > 0:\n            letters.append('D-')\n        else:\n            letters.append('E')\n    return letters\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    grade_equation = {4.0: 'A+',\n                       3.7: 'A',\n                       3.3: 'A-',\n                       3.0: 'B+',\n                       2.7: 'B',\n                       2.3: 'B-',\n                       2.0: 'C+',\n                       1.7: 'C',\n                       1.3: 'C-',\n                       1.0: 'D+',\n                       0.7: 'D',\n                       0.0: 'D-',\n                       0.0: 'E'}\n    return [grade_equation[i] for i in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #your code here\n    return\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #result = []\n    #for GPA in grades:\n    #    if GPA > 4.0:\n    #        result.append(\"A+\")\n    #    elif GPA >= 3.7:\n    #        result.append(\"A\")\n    #    elif GPA >= 3.3:\n    #        result.append(\"A-\")\n    #    elif GPA >= 3.0:\n    #        result.append(\"B+\")\n    #    elif GPA >= 2.7:\n    #        result.append(\"B\")\n    #    elif GPA >= 2.3:\n    #        result.append(\"B-\")\n    #    elif GPA >= 2.0:\n    #        result.append(\"C+\")\n    #    elif GPA >= 1.7:\n    #        result.append(\"C\")\n    #    elif GPA >= 1.3:\n    #        result.append(\"C-\")\n    #    elif GPA >= 1.0:\n    #        result.append(\"D+\")\n    #    elif GPA >= 0.7:\n    #        result.append(\"D\")\n    #    elif GPA >= 0.0:\n    #        result.append(\"D-\")\n    #    elif GPA == 0.0:\n    #        result.append(\"E\")\n    #return result\n    #return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    letters = {\n        4.0 : 'A+',\n        3.7 : 'A',\n        3.3 : 'A-',\n        3.0 : 'B+',\n        2.7 : 'B',\n        2.3 : 'B-',\n        2.0 : 'C+',\n        1.7 : 'C',\n        1.3 : 'C-',\n        1.0 : 'D+',\n        0.7 : 'D',\n        0.0 : 'D-',\n        0.0 : 'E'\n    }\n    return [letters[x] for x in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [grade for gpa, grade in GPA_LETTER_GRADES if gpa <= 4]\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    grades_list = list(grades)\n    letter_grade_list = []\n    #your code here\n    for grades_item in grades_list:\n        if grades_item >= 4.0:\n            letter_grade_list.append(\"A+\")\n        elif grades_item >= 3.7:\n            letter_grade_list.append(\"A\")\n        elif grades_item >= 3.3:\n            letter_grade_list.append(\"A-\")\n        elif grades_item >= 3.0:\n            letter_grade_list.append(\"B+\")\n        elif grades_item >= 2.7:\n            letter_grade_list.append(\"B\")\n        elif grades_item >= 2.3:\n            letter_grade_list.append(\"B-\")\n        elif grades_item >= 2.0:\n            letter_grade_list.append(\"C+\")\n        elif grades_item >= 1.7:\n            letter_grade_list.append(\"C\")\n        elif grades_item >= 1.3:\n            letter_grade_list.append(\"C-\")\n        elif grades_item >= 1.0:\n            letter_grade_list.append(\"D+\")\n        elif grades_item >= 0.7:\n            letter_grade_list.append(\"D\")\n        elif grades_item >= 0.0:\n            letter_grade_list.append(\"D-\")\n        else:\n            letter_grade_list.append(\"E\")\n    \n    return letter_grade_list\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n    \ndef find_indexes(string, substring):\n    \"\"\"Write a function that takes a string and a substring\n    and returns a list of indexes at which the substring is\n    found in the string\n    Examples\n    find_indexes('abcabc', 'bc') == [1, 3]\n    find_indexes('aaaaaaa', 'aa') == [0, 1, 2, 3, 4, 5, 6]\n    find_indexes('abc', 'xyz') == []\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(string) == 1:\n        return True\n    else:\n        for i in range(len(string)):\n            if i!= 0 and i!= len(string)-1 and (len(string)-i) % 2!= 0 and (len(string)-i) % 3!= 0 and (len(string)-i) % 5!= 0 and (len(string)-i) % 7!= 0:\n                return False\n            elif i == 0:\n                if (len(string)-i) % 2!= 0 and (len(string)-i) % 3!= 0 and (len(string)-i) % 5!= 0 and (len(string)-i) % 7!= 0:\n                    return False\n            elif i == len(string)-1:\n                if (len(string)-i) % 2!= 0 and (len(string)-i) % 3!= 0 and (len(string)-i) % 5!= 0 and (len(string)-i) % 7!= 0:\n                    return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(string) in prime_numbers\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len(string) in range(1,101) and not any([string.count(letter) for letter in string])\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(string) in prime_numbers\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(string) == 1:\n        return False\n    elif len(string) == 2:\n        return True\n    elif len(string) % 2 == 0 or len(string) % 2 == 1:\n        return False\n    else:\n        for number in range(3, int(len(string)/2) + 1, 2):\n            if len(string) % number == 0:\n                return False\n        return True\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for x in range(1, n + 1):\n        if int(str(x)[0]) == 1 or int(str(x)[-1]) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return count_starts_ends_same_digits(n - 1) + count_starts_ends_same_digits(n - 2)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # First, calculate the number of n-digit positive integers\n    # that end with 1.\n    # This is just the number of n-digit positive integers modulo 10^n - 1\n    # because 10^n - 1 = 10^n - 1 mod 10^n.\n    # So, just count the number of n-digit positive integers modulo\n    # 10^n.  Doing this without the modulo would make the answer too\n    # large.  The logarithm of 10^n will be at most n digits long,\n    # so no more than 10^n will be counted.\n    #\n    # We then apply the geometric series sum formula for all numbers\n    # in the range 1 to 10^n.\n    return math.floor(math.log10(n) * n * (9*n + 9) / 9)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return 0\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    start = 1\n    end = n\n    count = 0\n    if n == 1:\n        count = 1\n    elif n > 1:\n        while start <= n:\n            while end > 0:\n                if start == 1 or end == 1:\n                    count += 1\n                end -= 1\n            start += 1\n            end = n\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    return sum([\n        starts_one_ends(i) * (n - i - 1)\n        for i in range(n)\n    ])\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 1:\n        raise ValueError\n    if n == 1:\n        return 2\n    return starts_ends_count(1, 1, n)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # final result array\n    result = [0 for _ in range(0, n)]\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Compute the product of all n-digit positive integers.\n    # The first digit is a 1.\n    # The last digit is a 1.\n    # The product is 1 * 2 *... * 10**(n-1) * 10**n.\n    # The numbers in between are 1, 11, 21,..., 101, 111,..., 1101,...,\n    # 1011,..., 10111,..., 110111,..., 1101111,..., 1111111,...,\n    # 11111111,..., 111111111,..., 1111111111,..., 11...11,..., 111...111,..., 11111111111...\n    # where the order of the digits follows the order of the decimal digits.\n    # The product is 1112223334444... 999888777666555... 1111111111111111...\n    # The sum of the digits is 1011111111111111...\n    # The sum of the digits is 101111111111111...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum of the digits is 1011111111111110...\n    # The sum o"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert n > 0\n    if n == 1:\n        return 10\n    return 9 * (starts_one_ends(n-1) + ends_one_ends(n-1))\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if (0 <= N <= 10000):\n        binary_number = bin(N).replace(\"0b\", \"\")\n        return str(binary_number)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return bin(N)[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # max_value = 2**31 - 1 # 2**31 is maximum value for Python 32-bit int\n    # if N > max_value:\n    #     raise OverflowError(\"N is too large\")\n    # convert to binary\n    # if N == 0:\n    #     return \"0\"\n    # if N == 1:\n    #     return \"1\"\n    # return \"{0:b}\".format(N)\n    return bin(N).replace(\"0b\", \"\")\n    \nif __name__ == \"__main__\":\n    # run a test\n    assert solve(0) == \"0\"\n    assert solve(1) == \"1\"\n    assert solve(10) == \"1010\"\n    assert solve(147) == \"1100\"\n    assert solve(1000) == \"1\"\n    assert solve(1_000_000) == \"1\"\n    assert solve(1_000_010) == \"11110\"\n    print(\"OK\""
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # convert integer N to binary\n    N = format(N, 'b')\n    # compute the sum of digits\n    total = 0\n    for digit in N:\n        total += int(digit)\n    # return the sum of digits\n    return total\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    res = 0\n    while N:\n        res += N % 2\n        N //= 2\n    return str(res)\n    "
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    return ''.join(map(str,str(bin(N)).strip('0b').split('b')))\n        \nif __name__ == \"__main__\":\n    q = int(input())\n    ans = []\n    for i in range(q):\n        n = int(input())\n        ans.append(solve(n))\n    print(\"\\n\".join(ans))"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    bina = \"\"\n    for i in range(N):\n        if N > 0:\n            bina = bina + str(N % 2)\n            N = N // 2\n        else:\n            bina = bina + str(0)\n            break\n    return bina[::-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return bin(N).replace(\"0b\", \"\")\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return bin(N)[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    binary = \"\"\n    sum = 0\n    for x in str(N):\n        sum += int(x)\n    while sum!= 0:\n        binary += str(sum % 2)\n        sum = sum // 2\n    return binary[::-1]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2)])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([lst[i] for i in range(1,len(lst),2) if lst[i]%2==0])\nprint(add([4, 2, 6, 7]))\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i % 2!= 0 and lst[i] % 2 == 0])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if(len(lst) == 0):\n        return \"Please enter non-empty list\"\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst)%2 == 0:\n        return lst[::2]\n    else:\n        return lst[1::2]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    even = []\n    odd = []\n    \n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n            \n    result = even + odd\n    return result\n    \nif __name__ == '__main__':\n    l = [1, 2, 3, 4]\n    assert add(l) == [2, 4, 3]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(0,len(lst),2):\n        result.append(lst[i])\n    return sum(result)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum(lst[1::2])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [lst[i] for i in range(len(lst)) if i%2 ==0 and lst[i]%2 == 0]\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s = s.replace(' ', '')\n    s = sorted(s)\n    s = ''.join(s)\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    words = s.split(' ')\n    words = sorted(words, key=lambda x: ''.join(sorted(x)))\n    return''.join(words)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s = s.split()\n    s.sort(key=lambda x: \"\".join(sorted(x)))\n    s = \" \".join(s)\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def shuffle_sort(l):\n        return ''.join(sorted(l, key=lambda x: sum(map(ord, x))))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = s.split(' ')\n    s.sort()\n    s =''.join(s)\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s_list = s.split(' ')\n    s_list.sort()\n    return''.join(s_list)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = s.split()\n    for i in range(len(s)):\n        s[i] = sorted(list(s[i]))\n    return''.join(s)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    words = s.split()\n    words = [sorted(list(word), key=lambda x: ord(x)) for word in words]\n    return''.join(words)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s = list(s)\n    final_s = []\n    while s:\n        w = s.pop(0)\n        if w == \" \":\n            continue\n        final_s.append(w)\n    final_s.sort()\n    print(\"\".join(final_s))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    words = s.split(\" \")\n    ret_str = \"\"\n    for word in words:\n        ret_str += ''.join(sorted(word)) +''\n    return ret_str.rstrip()"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # lst.sort()\n    # lst.sort(key=lambda tup: tup[1])\n    # lst.sort(key=lambda tup: tup[0])\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    return coordinates\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    row_index = 0\n    row_length = len(lst)\n    for i, row in enumerate(lst):\n        col_index = 0\n        col_length = len(row)\n        while col_index < col_length:\n            if row[col_index] == x:\n                result.append((row_index, col_index))\n            col_index += 1\n        row_index += 1\n    return sorted(result)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lst.sort(key=len, reverse=True)\n    for i in range(len(lst)):\n        if x in lst[i]:\n            x_index = lst[i].index(x)\n            return sorted([(i, x_index)], key=lambda x: (-x[1], x[0]))\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst = sorted(lst, key = lambda x:x[0])\n    lst = sorted(lst, key = lambda x:x[1])\n    if lst == []:\n        return []\n    i = 0\n    while i < len(lst):\n        if lst[i][0] == x:\n            return [(lst[i][0], lst[i][1])]\n        else:\n            i += 1\n    return []"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    for i in range(len(result)):\n        result[i] = (result[i][0], result[i][1])\n    for i in range(len(result)):\n        result[i] = (result[i][0], len(lst[result[i][0]]) - result[i][1] - 1)\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Complete the function below.\n    pass"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    rows = {}\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                rows.setdefault(i, []).append((j, num))\n    return sorted(rows.items(), key=lambda x: x[0])"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    res.sort(key=lambda x: x[0])\n    res.sort(key=lambda x: x[1], reverse=True)\n    return res\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Handle edge cases\n    if len(array) < 2:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(array) == 0:\n        return []\n    \n    odd = []\n    even = []\n    for num in array:\n        if (num % 2) == 1:\n            odd.append(num)\n        else:\n            even.append(num)\n    return sorted(odd) + sorted(even)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return sorted(array, key=lambda x: -x if array.count(x) % 2 else x)\n    # write your code here\n    if len(array) <= 1:\n        return array\n    array = sorted(array)\n    if array[0] == array[-1]:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return array[::-1]\n    else:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(array) < 2:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = array[:]\n    if len(array) > 1:\n        if sum(array[0], array[-1]) % 2:\n            for i in range(0, len(array) - 1, 1):\n                for j in range(i, len(array) - 1, 1):\n                    if array[j] > array[j + 1]:\n                        temp = array[j]\n                        array[j] = array[j + 1]\n                        array[j + 1] = temp\n        else:\n            for i in range(0, len(array) - 1, 1):\n                for j in range(i, len(array) - 1, 1):\n                    if array[j] < array[j + 1]:\n                        temp = array[j]\n                        array[j] = array[j + 1]\n                        array[j + 1] = temp\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(array, key = lambda x: x%(x[0]+x[-1])"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sorted_array = array.copy()\n    for i in range(1, len(sorted_array)):\n        j = i\n        while j > 0 and (sorted_array[j] < sorted_array[j - 1]):\n            sorted_array[j], sorted_array[j - 1] = sorted_array[j - 1], sorted_array[j]\n            j -= 1\n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_array = array\n    i = 1\n    while i < len(new_array):\n        j = 0\n        while j < (len(new_array)-i):\n            if new_array[j] > new_array[j+1]:\n                new_array[j], new_array[j+1] = new_array[j+1], new_array[j]\n            j += 1\n        i += 1\n    return new_array"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    odd_array = []\n    even_array = []\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    encryption = ''\n    for i in s:\n        encryption += chr(ord(i) + 2 * 2)\n    return encryption\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join([chr((ord(c)-ord('a')+2)%26+ord('a')) for c in s])\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l = list(s)\n    for i in range(len(l)):\n        if l[i] == 'z':\n            l[i] = 'a'\n        elif l[i] == 'y':\n            l[i] = 'b'\n        elif l[i] == 'x':\n            l[i] = 'c'\n        elif l[i] == 'w':\n            l[i] = 'd'\n        elif l[i] == 'v':\n            l[i] = 'e'\n        elif l[i] == 'u':\n            l[i] = 'f'\n        elif l[i] == 't':\n            l[i] = 'g'\n        elif l[i] =='s':\n            l[i] = 'h'\n        elif l[i] == 'r':\n            l[i] = 'i'\n        elif l[i] == 'q':\n            l[i] = 'j'\n        elif l[i] == 'p':\n            l[i] = 'k'\n        elif l[i] == 'o':\n            l[i] = 'l'\n        elif l[i] == 'n':\n            l[i] ='m'\n        else:\n            l[i] = chr(ord(l[i]) + 2)\n    return \"\".join(l)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet2 = 'abcdefghijklmnopqrstuvwxyz'.upper()\n    new_str = ''\n    for i in s:\n        if i in alphabet:\n            new_str += alphabet[alphabet.index(i)*2:alphabet.index(i)*2+2]\n        elif i in alphabet2:\n            new_str += alphabet2[alphabet2.index(i)*2:alphabet2.index(i)*2+2]\n        else:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = \"\"\n    for i in range(len(s)):\n        result += alphabet[alphabet.index(s[i]) + 2]\n    return result\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n    \n    "
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    chars = list(s)\n    for i in range(len(chars)):\n        chars[i] = letters[(letters.index(chars[i]) + 2) * 2]\n    return ''.join(chars)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n = int(ord(s[0]) - ord('a'))\n    new_n = 2 * n\n    new_n += int(ord(s[1]) - ord('a'))\n    if new_n > 26:\n        new_n -= 26\n    new_n = chr(new_n + ord('a'))\n    return new_n\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(lst) <= 2:\n        return None\n    tmp = sorted(lst)\n    return tmp[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not lst:\n        return None\n    if len(lst) < 2:\n        return None\n    if len(lst) == 2:\n        return min(lst)\n    \n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # trivial case\n    if len(lst) < 2:\n        return None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    smallest = None\n    for i in range(len(lst) - 1):\n        if smallest == None or lst[i] < smallest:\n            smallest = lst[i]\n    \n    for i in range(len(lst)):\n        if smallest == lst[i]:\n            lst.remove(smallest)\n            break\n    \n    if len(lst) == 0:\n        return None\n    \n    smallest = None\n    for i in range(len(lst) - 1):\n        if smallest == None or lst[i] < smallest:\n            smallest = lst[i]\n    return smallest\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if lst == []:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst) < 2:\n        return None\n    elif len(lst) == 2:\n        return min(lst)\n    else:\n        return sorted(set(lst))[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    pass\n    \n    \ndef find_duplicates(lst):\n    \"\"\"\n    Given a list of integers, return a list of duplicate integers in the list.\n    \n    find_duplicates([1, 2, 3, 4, 4, 5]) == [4]\n    find_duplicates([5, 1, 4, 3, 2]) == [4]\n    find_duplicates([1, 1, 1, 1, 1, 1, 2]) == [1]\n    find_duplicates([1, 2, 3, 4, 5, 6]) == []\n    \"\"\"\n    \n    pass\n    \n    \ndef sum_of_counts(lst):\n    \"\"\"\n    Given a list of integers,\n    return a list of tuples where the first element of each tuple is the sum of the integers in the original list,\n    and the second element is the number of times that sum appears in the original list.\n    \n    sum_of_counts([1, 2, 1, 1, 1, 2, 1]) == [(2, 3), (3, 1)]\n    sum_of_counts([1, 2, 1, 1, 1, 2, 1]) == [(2, 3), (3, 1)]\n    sum_of_counts([1, 2, 3]) == [(2, 1), (4, 1)]\n    sum_of_counts([1, 2, 1, 3, 1, 4, 3]) == [(6, 2), (5, 1)]\n    \"\"\"\n    \n    pass\n    \n    \ndef count_list_membership(lst):\n    \"\"\"\n    Given a list of integers, return a list of tuples where the first element of each tuple is the sum of the integers in the original list,\n    and the second element is the number of times that sum appears in the original list.\n    \n    count_list_membership([1, 2, 1, 1, 1, 2, 1]) == [(2, 3), (3, 1)]\n    count_list_membership([1, 2, 1, 1, 1, 2, 1]) == [(2, 3), (3, 1)]\n    count_list_membership([1, 2, 3]) == [(2, 1), (4, 1)]\n    count_list_membership([1, 2, 1, 3, 1, 4, 3]) == [(6, 2), (5, 1)]\n    \"\"\"\n    \n    pass\n    \n    \ndef sum_list(lst):\n    \"\"\"\n    Given a list of integers, return the sum of the integers.\n    \n    sum_list([1, 2, 1, 1, 1, 2, 1]) == 8\n    sum_list([1, 2, 1, 1, 1, 2, 1]) == 8\n    sum_list([1, 2, 3]) == 6\n    sum_list([1, 2, 1, 3, 1, 4, 3]) == 10\n    \"\"\"\n    \n    pass\n    \n    \ndef count_element_occurrence(lst, value):\n    \"\"\"\n    Given a list of integers, return the number of times that the given element occurs in the list.\n    \n    count_element_occurrence([1, 2, 1, 1, 1, 2, 1], 1) == 3\n    count_element_occurrence([1, 2, 1, 1, 1, 2, 1], 2) == 1\n    count_element_occurrence([1, 2, 1, 1, 1, 2, 1], 3) == 0\n    count_element_occurrence([1, 2, 1, 1, 1, 2, 1], 1) == 3\n    \"\"\"\n    \n    pass\n    \n    \ndef next_highest(lst, value):\n    \"\"\"\n    Given a list of integers and an integer,\n    return the next highest-value integer in the list,\n    and if there is no next highest integer, return None.\n    \n    next_highest([1, 2, 3], 1) == 2\n    next_highest([1, 2, 3], 2) == 3\n    next_highest([1, 2, 3], 4) == None\n    next_highest([1, 2, 3], 3) == None\n    \"\"\"\n    \n    pass\n    \n    \ndef sum_of_intervals(intervals):\n    \"\"\"\n    Given a list of tuples of integers,\n    where each tuple represents a closed interval,\n    return the sum of the intervals,"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        sorted_lst = sorted(lst)\n        return sorted_lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sorted_lst = sorted(lst)\n    if len(sorted_lst) == 0:\n        return None\n    elif len(sorted_lst) == 1:\n        return None\n    return sorted_lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    if len(lst) < 2:\n        return None\n    if len(lst) == 2:\n        return min(lst)\n    \n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    boredom = 0\n    for c in S:\n        if c == \"I\":\n            boredom += 1\n    return boredom\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return     sum(1 for word in S.split() if word.lower().startswith('i'))\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    import re\n    import string\n    a = re.split('[.?!]', S)\n    count = 0\n    for i in a:\n        if i.startswith('I') == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    boredoms = S.split('.')\n    for boredom in boredoms:\n        if \"I \" in boredom[:2]:\n            return 1\n    return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #return 0\n    count = 0\n    S = S.split('.')\n    for i in S:\n        if len(i) > 0:\n            i = i.split('?')\n            for j in i:\n                if j[0] == 'I':\n                    count += 1\n    return count\n    \n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    boredoms = 0\n    \n    for word in S.split():\n        if word[0] == 'I':\n            boredoms += 1\n    \n    return boredoms\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    return len([w for w in S.split(\".\") if w and w[0] == \"I\"])\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    boredoms = 0\n    \n    for i in S.split('.'):\n        for j in i.split('!'):\n            for k in j.split('?'):\n                if k.startswith('I'):\n                    boredoms += 1\n                    \n    return boredoms\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    i = 0\n    S = S.split()\n    for w in S:\n        if w[0] == 'I':\n            i += 1\n    return i\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    boredoms = 0\n    tokens = S.split()\n    for token in tokens:\n        if token[0] == 'I':\n            boredoms += 1\n    return boredoms\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    \n    if y == z or z == x:\n        return True\n    elif x == z or z == y:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if x == y+z or y == x+z or z == x+y:\n        return True\n    else:\n        return False\n    \n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        if int(x) == int(y) + int(z):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \n    \n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if x == int(y) + int(z):\n        return True\n    if y == int(x) + int(z):\n        return True\n    if z == int(x) + int(y):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    \n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        elif x!= y and y!= z and z!= x:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if type(x)==int and type(y)==int and type(z)==int:\n        if x==y+z or y==x+z or z==x+y:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    num = []\n    for i in [x,y,z]:\n        if type(i) == int:\n            num.append(i)\n        else:\n            return False\n    if num[0] + num[1] == num[2] or num[0] + num[2] == num[1] or num[1] + num[2] == num[0]:\n        return True\n    else:\n        return False\n    \n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if (x==(y+z)) or (y==(x+z)) or (z==(x+y)) :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if (x == int(y + z)) or (x == int(z + y)) or (y == int(z + x)):\n        return True\n    else:\n        return False\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    "
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # take the first number out of the list and sum all the other numbers.\n    # check if the sum is equal to the first number. if so, then it is an integer.\n    # return True or False.\n    # if any of the numbers are not integers, return False.\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded = []\n    for char in message:\n        if char.isupper():\n            encoded.append(char.lower())\n        elif char.lower() in vowels:\n            index = vowels.index(char.lower())\n            encoded.append(vowels[(index + 2) % 5])\n        else:\n            encoded.append(char)\n    return ''.join(encoded)\n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('THKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    decoded = []\n    for char in message:\n        if char.isupper():\n            decoded.append(char.lower())\n        elif char.lower() in vowels:\n            index = vowels.index(char.lower())\n            decoded.append(vowels[(index - 2) % 5])\n        else:\n            decoded.append(char)\n    return ''.join(decoded)"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    swapped_message = message[::-1].swapcase()\n    vowels = \"aeiou\"\n    for i in vowels:\n        swapped_message = swapped_message.replace(i, f\"{i}{swapped_message[swapped_message.index(i) + 1]}\")\n    return swapped_message\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    output_message = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for character in message:\n        if character.isalpha():\n            output_message += swap_case(character)\n        elif character.isupper():\n            output_message += character\n        else:\n            output_message += character\n    return output_message\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    new_string = ''\n    for char in message:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        elif char.isspace():\n            new_string +=''\n        else:\n            new_string += char\n    return new_string\n        \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it into a message\n    that swaps case of all letters, replacing all vowels in the message with\n    the letter that appears 2 places behind that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'TEST'\n    >>> decode('This is a message')\n    'THIS IS A MESSAGE'\n    \"\"\"\n    \n    new_string = ''\n    for char in message:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        elif char.isspace():\n            new_string +=''\n        else:\n            new_string += char\n    return new_strin"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    from math import sqrt\n    def is_prime(number):\n        if number<2:\n            return False\n        for x in range(2,int(sqrt(number))+1):\n            if number % x == 0:\n                return False\n        return True\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # start coding!\n    largest_prime = [0]\n    for number in lst:\n        if number > 1:\n            for i in range(2, number):\n                if (number % i) == 0:\n                    break\n            else:\n                largest_prime.append(number)\n    print(largest_prime)\n    sum = 0\n    for x in largest_prime:\n        sum += sum(int(i) for i in str(x))\n    return sum\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return 0\n    lst = [str(i) for i in lst]\n    if len(lst) == 1 and lst[0] == '0':\n        return 0\n    lst = sorted(lst, key=len, reverse=True)\n    max_lst = []\n    while lst:\n        i = lst.pop(0)\n        max_lst.append(i)\n        if not check_prime(int(''.join(max_lst))):\n            max_lst.pop()\n            while lst and not check_prime(int(''.join(max_lst))):\n                i = lst.pop(0)\n                max_lst.append(i)\n    return int(''.join(max_lst))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    prime_lst = prime_list(lst)\n    return sum_list(prime_lst)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    prime_lst = [2]\n    sum_lst = []\n    for i in lst:\n        if i in prime_lst:\n            sum_lst.append(i)\n    return sum(sum_lst)"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def isPrime(num):\n        if num == 1:\n            return False\n        elif num == 2:\n            return True\n        else:\n            for n in range(2,num):\n                if num % n == 0:\n                    return False\n            return True\n    \n    def getDigit(num):\n        lst = []\n        n = num\n        while n > 0:\n            lst.append(n%10)\n            n = n//10\n        return lst\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return lst[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max_val = max(lst)\n    counter = 0\n    num = 0\n    while True:\n        if max_val % (10 ** (counter + 1)) == 0:\n            if num in lst:\n                num = max_val\n                break\n        counter += 1\n    num = str(num)\n    num_sum = 0\n    for i in range(len(num)):\n        num_sum += int(num[i])\n    return num_sum\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst2 = []\n    for i in lst:\n        if is_prime(i):\n            lst2.append(i)\n    return sum(lst2)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # TODO: your code here\n    # raise NotImplemented\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not dict:\n        return False\n    low_key = [i.islower() for i in dict.keys()]\n    upp_key = [i.isupper() for i in dict.keys()]\n    return sum(low_key) == len(low_key) or sum(upp_key) == len(upp_key)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(dict) > 0:\n        # check if all keys are strings in lower case\n        if all(key.isalpha() and key.islower() for key in dict):\n            return True\n        # check if all keys are strings in upper case\n        elif all(key.isalpha() and key.isupper() for key in dict):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    try:\n        if all(isinstance(key, str) for key in dict.keys()):\n            return True\n        elif all(isinstance(key, str) for key in dict.keys()):\n            return False\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return all(isinstance(k, str) and k.isupper() or isinstance(k, str) and k.islower() for k in dict.keys()) and all(isinstance(v, str) for v in dict.values())\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return all(type(i)==str for i in dict.keys()) and all(type(i)==str for i in dict.values()) and len(dict)>0\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return all(str(key).islower() for key in dict.keys()) or \\\n           all(str(key).isupper() for key in dict.keys())\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # If dictionary is empty\n    if len(dict) == 0:\n        return False\n    # If all keys in dictionary are strings in upper or lower case, \n    # return True\n    for i in dict:\n        if not isinstance(i, str):\n            return False\n        if i.isupper():\n            return True\n    # Else return False\n    return False\n    \ndef check_dict_values(dict):\n    \"\"\"\n    Given a dictionary, return True if all values are integer, else \n    return False. The function should return False is the given \n    dictionary is empty.\n    Examples:\n    check_dict_values({\"a\":1, \"b\":2, \"c\":3}) should return True.\n    check_dict_values({}) should return False.\n    check_dict_values({\"a\":\"apple\", \"b\":\"banana\", \"c\":3, 4:\"apple\"}) should return False.\n    \"\"\"\n    # If dictionary is empty\n    if len(dict) == 0:\n        return False\n    # If all values are integers\n    for i in dict:\n        if not isinstance(dict[i], int):\n            return False\n    # Else return True\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(dict) > 0:\n        all_keys_lower = True\n        all_keys_upper = True\n        for key in dict.keys():\n            if not isinstance(key, str):\n                return False\n            if key.islower():\n                all_keys_upper = False\n            else:\n                all_keys_lower = False\n        return all_keys_lower or all_keys_upper\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(dict) == 0:\n        return False\n    lower_keys = [key.lower() for key in dict.keys()]\n    upper_keys = [key.upper() for key in dict.keys()]\n    return all(lower_keys) or all(upper_keys)\n    "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    if n == 0:\n        return []\n    if n == 1:\n        return []\n    \n    prime_count = 0\n    result = []\n    for i in range(n):\n        if is_prime(i):\n            prime_count += 1\n            result.append(i)\n    \n    return result\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    prime_numbers = []\n    for n in range(1, n+1):\n        if is_prime(n):\n            prime_numbers.append(n)\n    return prime_numbers\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 2\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [2,3]\n    if n == 4:\n        return [2,3,5]\n    if n == 5:\n        return [2,3,5,7]\n    if n == 6:\n        return [2,3,5,7,11]\n    if n == 7:\n        return [2,3,5,7,11,13]\n    if n == 8:\n        return [2,3,5,7,11,13,17]\n    if n == 9:\n        return [2,3,5,7,11,13,17,19]\n    if n == 10:\n        return [2,3,5,7,11,13,17,19,23]\n    if n == 11:\n        return [2,3,5,7,11,13,17,19,23,29]\n    if n == 12:\n        return [2,3,5,7,11,13,17,19,23,29,31]\n    if n == 13:\n        return [2,3,5,7,11,13,17,19,23,29,31,37]\n    if n == 14:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41]\n    if n == 15:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43]\n    if n == 16:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\n    if n == 17:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53]\n    if n == 18:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59]\n    if n == 19:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61]\n    if n == 20:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67]\n    if n == 21:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71]\n    if n == 22:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73]\n    if n == 23:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79]\n    if n == 24:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83]\n    if n == 25:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89]\n    if n == 26:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    if n == 27:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101]\n    if n == 28:\n        return [2,3,5,7,11"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers = []\n    for i in range(n):\n        is_prime = True\n        if i == 0 or i == 1:\n            numbers.append(i)\n            continue\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            numbers.append(i)\n    return numbers\n    \nprint(count_up_to(5))\nprint(count_up_to(11))\nprint(count_up_to(0))\nprint(count_up_to(20))\nprint(count_up_to(1))\nprint(count_up_to(18))\nprint(count_up_to(200))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # your code here\n    # run_tests(count_up_to)\n    # if n < 2:\n    #     return []\n    # else:\n    #     return [i for i in range(2, n+1) if is_prime(i)]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i for i in range(2, n + 1) if prime(i)]"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n<=0:\n        return []\n    if n==1:\n        return []\n    else:\n        return [2] + [i for i in range(3,n) if is_prime(i)]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    num_list = []\n    while count < n:\n        num = is_prime(count)\n        if num:\n            num_list.append(count)\n            count += 1\n        else:\n            count += 1\n    return num_list\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #Answer\n    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return a*b\n    "
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return a*"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a*b\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    # We will use string slicing\n    \n    # We know the first character of the string is uppercase\n    s1 = s[1::2]\n    \n    # We will loop over the string and check if the characters are uppercase\n    # If they are, we will increment our counter by 1\n    counter = 0\n    for i in s1:\n        if i.isupper():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            if s[i] in \"AEIOU\":\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s = s.lower()\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if (i % 2 == 0) and (s[i] in 'AEIOU'):\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return 0\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    num_upper = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            num_upper += 1\n    return num_upper\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i%2==0:\n            count += 1\n    return count"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(s) <= 1:\n        return 0\n    else:\n        if s[0].isupper():\n            if s[1].islower():\n                return 0\n            else:\n                if s[0] == s[1]:\n                    return count_upper(s[1:])\n                else:\n                    return 1 + count_upper(s[1:])\n        else:\n            if s[1].isupper():\n                if s[0] == s[1]:\n                    return 1 + count_upper(s[1:])\n                else:\n                    return 1 + count_upper(s[1:])\n            else:\n                return 0 + count_upper(s[1:])\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([1 for i, c in enumerate(s) if i % 2 == 0 and c.isupper()])\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    x = int(value)\n    if value[0] == '-' and value[1:].isnumeric():\n        x *= -1\n    return x\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return int(round(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    try:\n        value = int(value)\n    except:\n        return None\n    if value > 0:\n        n1 = math.floor(value)\n        n2 = math.ceil(value)\n        if abs(n1 - value) > abs(n2 - value):\n            return n2\n        else:\n            return n1\n    elif value < 0:\n        n1 = math.floor(value)\n        n2 = math.ceil(value)\n        if abs(n1 - value) > abs(n2 - value):\n            return n1\n        else:\n            return n2\n    else:\n        return value\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # replace this with your code\n    return int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    try:\n        value = int(float(value))\n    except:\n        return None\n    if value % 1 > 0.5:\n        value = int(value) + 1\n    else:\n        value = int(value)\n    return value\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return round(float(value)) if float(value).is_integer() else int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return round(float(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    number = int(value)\n    if number <= 0:\n        return abs(number)\n    else:\n        return number\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return int(value) if int(value) % 1 == 0 else int(value) + 1 if abs(int(value) + 1) < abs(int(value)) else int(value) - 1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert(n > 0)\n    if n == 1:\n        return [1]\n    else:\n        return make_a_pile(n - 1) + [n if n % 2 == 0 else n + 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    level = n\n    pile = []\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = [n]\n    while n > 1:\n        n = n + 1 if n % 2 == 1 else n + 2\n        result.append(n)\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    if n % 2:\n        while n!= 0:\n            result.append(n)\n            n = n - 1 if n > 2 else n + 1\n    else:\n        while n!= 0:\n            result.append(n)\n            n = n - 2 if n > 4 else n + 2\n    return result"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert type(n) == int\n    assert n > 0\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # special cases\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    # check if n is even\n    elif n % 2 == 0:\n        # n is even\n        lst = [n]\n        while n % 2 == 0:\n            n = n / 2\n            lst.append(n)\n        return lst\n    # n is odd\n    elif n % 2 == 1:\n        lst = [n]\n        while n % 2 == 1:\n            n = (n + 1) / 2\n            lst.append(n)\n        return lst\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n % 2:\n        pile = [n] * n\n        for i in range(1, n, 2):\n            pile[i] = pile[i-1] - 1\n    else:\n        pile = [n] * n\n        for i in range(0, n, 2):\n            pile[i] = pile[i+1] - 1\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert is_positive_int(n)\n    assert n > 0\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pile = [n]\n    while n > 0:\n        n = n - 2\n        if n > 0:\n            pile.append(n)\n        else:\n            break\n    return pile\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return s.split()\n    \n    \ndef words_string(s):\n    return s.split()\n    \n    \ndef words_string(s):\n    return s.split()\n    \n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return s.split(\", \")\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    return s.replace(\" \", \"\").split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return s.replace(', ', ',').split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # put your code here\n    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    return s.split(\", \")\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    words = s.split(', ')\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = s.split(\", \")\n    return s\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    num = 0\n    if x % 2 == 0 and y % 2 == 0:\n        num = max(x, y)\n        if num < 0:\n            num = -1\n    else:\n        num = -1\n    return num\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            if y - x + 1 == i:\n                return i\n            else:\n                return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if x % 2!= 0 or y % 2!= 0:\n        return -1\n    elif x <= y:\n        for num in range(x, y + 1, 2):\n            if num % 2 == 0:\n                return num\n    else:\n        for num in range(y, x + 1, 2):\n            if num % 2 == 0:\n                return num\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if x % 2!= 0 or y % 2!= 0:\n        return -1\n    elif x > y:\n        return -1\n    elif x == y:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # write your code here\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    max = 0\n    \n    for i in range(x, y+1):\n        if i%2 == 0 and i > max:\n            max = i\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if x % 2 == 1 or y % 2 == 1:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if x < 1 or y < 1:\n        return -1\n    max_num = max(x, y)\n    if max_num % 2 == 0:\n        min_num = min(x, y)\n        for i in range(min_num, max_num + 1):\n            if i % 2 == 0 and i >= min_num and i <= max_num:\n                return i\n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # start the function\n    # check if x is smaller than y\n    if x < y:\n        # check if y is a multiple of 2\n        if y%2==0:\n            # return y if y is even\n            return y\n        # check if x is a multiple of 2\n        elif x%2==0:\n            # return x if x is even\n            return x\n        else:\n            # return the smaller number if neither is even\n            return x if x < y else y\n    else:\n        # return -1 if x is not smaller than y\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    avg = sum(list(range(n, m+1)))\n    avg = round(avg/len(range(n, m+1)))\n    return bin(avg)[2:] if n <= m else -"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n > m:\n        return -1\n    n, m = sorted([n, m])\n    return bin(int((n + m) / 2))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    else:\n        return int(bin(int((n + m) / 2))[2:])\n        # return int((n + m) / 2)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    return format(int(total/m), \"b\")\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    avg = int(n + m) / 2\n    if n > m:\n        return -1\n    else:\n        return format(avg, \"b\")\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n > m:\n        return -1\n    return bin(int((n + m) / 2))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n > m:\n        return -1\n    else:\n        average = (n + m) / 2\n        return \"0b{}\".format(int(average))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(round(sum([i for i in range(n, m+1)]))).replace(\"0b\", \"\")\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # TODO: implement this function\n    lst = []\n    for i in x:\n        while i>0:\n            if i%2 == 0:\n                lst.append(i)\n                break\n            i = i//10\n    return sorted(list(set(lst)))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #using set for faster calculation\n    return sorted(set([i for i in x if i%2!= 0]))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted([i for i in x if not any(digit in str(i) for digit in ['2', '4', '6', '8'])])\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted([i for i in x if i%2!=0])\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(set([int(x) for x in str(n) if int(x) % 2 == 0])))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted([num for num in x if num % 2!= 0])\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Your code here\n    s = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        else:\n            s.append(i)\n    return sorted(s)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sorted_x = sorted(x)\n    new_list = []\n    for i in sorted_x:\n        if int(i) % 2 == 0:\n            pass\n        else:\n            new_list.append(i)\n    return new_list\n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    arr = list(reversed(arr))\n    return [numbers[i] for i in arr]\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr:\n        return arr\n    \n    lst = []\n    for item in arr:\n        if item >= 1 and item <= 9:\n            lst.append(item)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    arr.sort()\n    arr.reverse()\n    str_arr = []\n    digit_1 = 1\n    digit_2 = 2\n    digit_3 = 3\n    digit_4 = 4\n    digit_5 = 5\n    digit_6 = 6\n    digit_7 = 7\n    digit_8 = 8\n    digit_9 = 9\n    for i in range(len(arr)):\n        if arr[i] == digit_1:\n            str_arr.append('One')\n        elif arr[i] == digit_2:\n            str_arr.append('Two')\n        elif arr[i] == digit_3:\n            str_arr.append('Three')\n        elif arr[i] == digit_4:\n            str_arr.append('Four')\n        elif arr[i] == digit_5:\n            str_arr.append('Five')\n        elif arr[i] == digit_6:\n            str_arr.append('Six')\n        elif arr[i] == digit_7:\n            str_arr.append('Seven')\n        elif arr[i] == digit_8:\n            str_arr.append('Eight')\n        elif arr[i] == digit_9:\n            str_arr.append('Nine')\n    return str_arr\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    # Return an empty array if the array is empty\n    if not arr:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return_arr = []\n    \n    if len(arr) == 0:\n        return return_arr\n    \n    arr = sorted(arr)\n    arr = list(reversed(arr))\n    \n    for num in arr:\n        num = int(num)\n        \n        if 1 <= num <= 9:\n            return_arr.append(ordinal_to_name(num))\n    \n    return return_arr\n    "
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return []\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return_list = []\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if type(n)!= int:\n        print(\"Invalid input. Input should be of type int\")\n        return -1\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # return [x for x in range(1,n+1)]\n    return [x for x in range(n+1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # n = 5\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    return [1, 2] + [f(n-1)[i] * i for i in range(1, n) if i%2]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            list.append(i)\n        else:\n            sum = 0\n            for j in range(1, i + 1):\n                sum += j\n            list.append(sum)\n    return list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l = [1]\n    for i in range(1,n):\n        if i % 2 == 0:\n            l.append(i)\n        else:\n            l.append(sum(range(1,i+1)))\n    return l\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert n > 0, \"n has to be a positive integer\"\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(reduce(lambda a, b: a*b, range(1, i+1)))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # list_result = []\n    # for i in range(1, n+1):\n    #     if i % 2 == 0:\n    #         list_result.append(i)\n    #     else:\n    #         list_result.append(sum(range(1, i+1)))\n    # return list_result\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # # Brute force solution.\n    # # Time Complexity: O(n^2)\n    # # Space Complexity: O(1)\n    # count_odd = 0\n    # count_even = 0\n    # for i in range(1, n+1):\n    #     for j in range(i, n+1):\n    #         # print(i, j)\n    #         is_palindrome = is_palindrome_helper(i*j)\n    #         if is_palindrome == 1:\n    #             count_odd += 1\n    #         else:\n    #             count_even += 1\n    # return (count_even, count_odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = (0, 0)\n    # odd palindromes\n    i = 1\n    while i**2 <= n:\n        result[0] += 1\n        i += 1\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (n // 2 - n % 2, n // 2) if n % 2 == 0 else (n // 2, n // 2 + 1)"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    even, odd = 0, 0\n    for i in range(1, n + 1):\n        j = str(i)\n        if j == j[::-1]:\n            if int(j) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return (int(n/2 * (n % 2 == 0)), int(n/2 * (n % 2!= 0)))\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def count_odd_palindromes(n):\n        count = 0\n        for i in range(1, n + 1):\n            if is_palindrome(i):\n                if is_odd(i):\n                    count += 1\n        return count\n    def count_even_palindromes(n):\n        count = 0\n        for i in range(1, n + 1):\n            if is_palindrome(i):\n                if is_even(i):\n                    count += 1\n        return count\n    return (count_even_palindromes(n), count_odd_palindromes(n))\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    num_pos = [1 for i in arr if sum([int(x) for x in str(i)]) > 0]\n    return sum(num_pos)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for num in arr:\n        if num < 0:\n            if sum(int(digit) for digit in str(num)) > 0:\n                count += 1\n        else:\n            if sum(int(digit) for digit in str(num)) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len([i for i in arr if sum(map(int, list(str(abs(i))))) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len([x for x in arr if x < 0 or sum(map(int, str(abs(x)))) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([len(str(n)) for n in arr if sum(map(int, str(n))) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def sum_of_digit(num):\n        total = 0\n        while num:\n            total += num % 10\n            num //= 10\n        return total\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def count_nums_helper(arr, i, acc, digit_sum):\n        if i == len(arr):\n            if digit_sum > 0:\n                acc += 1\n        else:\n            count_nums_helper(arr, i+1, acc, digit_sum)\n            count_nums_helper(arr, i+1, acc, digit_sum + arr[i])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def helper(arr):\n        # find numbers with 0, 1, 2, or 3\n        zeros = [x for x in arr if x == 0]\n        ones = [x for x in arr if x == 1]\n        twos = [x for x in arr if x == 2]\n        threes = [x for x in arr if x == 3]\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    digit_sum = lambda num: sum(map(int, str(abs(num))))\n    return sum([1 for num in arr if digit_sum(num) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len([x for x in arr if x > 0])\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if arr is None or len(arr) == 0:\n        return True\n    # Base Case\n    if len(arr) == 1:\n        return True\n    # We know that arr[i] > arr[i+1] if there is more than one element in the array\n    # Else arr[i] == arr[i+1] if there is only one element in the array.\n    # So if we know that arr[i] > arr[i+1] and arr[i+1] > arr[i+2] then we can\n    # say that we can do right shift operation at most 2 times and we can get\n    # the sorted array.\n    i = 0\n    while i < len(arr) - 1 and arr[i] > arr[i+1]:\n        i += 1\n    if i == len(arr) - 1:\n        return True\n    # Recursively check if we can get the sorted array by doing right shift\n    # operation at most 2 times.\n    return move_one_ball(arr[0:i+1]) and move_one_ball(arr[i+1:])\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n=len(arr)\n    if n==0:\n        return True\n    else:\n        temp=arr[n-1]\n        for i in range(n-1):\n            arr[n-1-i]=arr[n-i-2]\n        arr[0]=temp\n        return arr==sorted(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr:\n        return True\n    \n    if len(arr) == 1:\n        return True\n    \n    index = 0\n    while(index < len(arr)-1):\n        if arr[index] <= arr[index+1]:\n            index += 1\n        else:\n            break\n    \n    if index == len(arr)-1:\n        return True\n    \n    if len(arr)-1 == index:\n        arr[index] = arr[index] - 1\n        arr[0] = arr[0] + 1\n        return True\n    \n    for i in range(index, len(arr)):\n        if arr[i] <= arr[i-1]:\n            arr[i-1] = arr[i-1] - 1\n            arr[i] = arr[i] + 1\n            arr[index] = arr[index] - 1\n            arr[0] = arr[0] + 1\n            return True\n    \n    return False\n        \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def check(arr, key):\n        for i in range(key):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            break\n    else:\n        return True\n    for j in range(i,0,-1):\n        if arr[j]<arr[j-1]:\n            break\n    else:\n        return False\n    temp=arr[j]\n    arr[j]=arr[j+1]\n    arr[j+1]=temp\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if arr == []:\n        return True\n    if len(arr) == 1:\n        return True\n    # determine if all elements are the same\n    if all(arr[i] == arr[i+1] for i in range(len(arr)-1)):\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    n=len(arr)\n    if n==0:\n        return True\n    index=n-1\n    while arr[index]<=arr[index-1]:\n        index-=1\n        if index<0:\n            return True\n    for j in range(index+1):\n        if arr[j]<=arr[index]:\n            arr[j],arr[index]=arr[index],arr[j]\n            if move_one_ball(arr):\n                return True\n            arr[j],arr[index]=arr[index],arr[j]\n    return False\n        \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not arr:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    if not arr:\n        return True\n    i = len(arr) - 2\n    while i >= 0:\n        while arr[i] > arr[i + 1] and i!= 0:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            i -= 1\n        i -= 1\n    return arr == sorted(arr)\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n    print(lst1)\n    print(lst2)\n    \n    print('The lengths of lst1 and lst2 are ', len(lst1),'and ', len(lst2),'respectively')\n    if len(lst1)!= len(lst2):\n        return 'NO'\n    elif len(lst1) == 1 and len(lst2) == 1:\n        return 'YES'\n    else:\n        for element in lst1:\n            if element % 2 == 0:\n                lst1.remove(element)\n                lst2.append(element)\n        for element in lst2:\n            if element % 2 == 0:\n                lst2.remove(element)\n                lst1.append(element)\n    print(lst1)\n    print(lst2)\n    if lst1 == []:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # TODO: Implement the solution\n    if len(lst1) > len(lst2):\n        return \"NO\"\n    if len(lst1) == len(lst2):\n        if set(lst2) == set(lst1):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for x in lst2:\n            if x % 2!= 0:\n                return \"NO\"\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst2.sort()\n    count = 0\n    for i in range(0, len(lst1)):\n        if lst1[i] % 2!= 0:\n            count += 1\n            index = lst2.index(lst1[i])\n            if index == len(lst2) - 1:\n                if count > 1:\n                    return \"NO\"\n                else:\n                    break\n            else:\n                lst1[i] = lst2[index + 1]\n                lst2[index + 1] = lst1[i]\n                if count > 1:\n                    return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # initialize\n    result = \"NO\"\n    # loop\n    for i in lst1:\n        if i % 2!= 0:\n            result = \"NO\"\n            break\n    for i in lst2:\n        if i % 2!= 0:\n            result = \"NO\"\n            break\n    if result == \"NO\":\n        return result\n    # process\n    if len(lst1) == len(lst2):\n        result = \"NO\"\n        for i in range(0, len(lst1)):\n            if lst1[i] % 2!= 0 and lst2[i] % 2!= 0:\n                result = \"YES\"\n                break\n    elif len(lst1)!= len(lst2):\n        result = \"NO\"\n        for i in range(0, len(lst1)):\n            if lst1[i] % 2!= 0:\n                result = \"YES\"\n                break\n    # return\n    return result\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Initialize the result\n    result = \"NO\"\n    # Create a variable to store the current sum of the list\n    curr_sum = 0\n    # Iterate through the list of elements in list 1\n    for i in lst1:\n        # Update the current sum\n        curr_sum += i\n    # Iterate through the list of elements in list 2\n    for j in lst2:\n        # Update the current sum\n        curr_sum += j\n    # Iterate through the list of elements in list 2\n    for k in lst2:\n        # Update the current sum\n        curr_sum += k\n    # If the current sum is not even, the two lists cannot be even\n    if curr_sum % 2!= 0:\n        result = \"NO\"\n    # If the current sum is even, check if it is possible to make all elements in list 1\n    # to be even\n    else:\n        curr_sum = 0\n        # Iterate through the list of elements in list 1\n        for i in lst1:\n            # Update the current sum\n            curr_sum += i\n        # If the current sum is even, the two lists are even\n        if curr_sum % 2 == 0:\n            result = \"YES\"\n    # Return the result\n    return result\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # TODO: Insert your code here\n    for element in lst1:\n        if element%2==1:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for num in lst1:\n        if num % 2 == 1:\n            return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # pass\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your code here\n    for i in lst1:\n        if i % 2 == 0:\n            continue\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    import collections\n    hist = collections.Counter(test)\n    hist = hist.most_common()\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Replace this with your code\n    test = test.lower().split()\n    dic = {}\n    for i in test:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # pass\n    \n    def count(words, word_dict, words_list):\n        for word in words_list:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        max_count = max(word_dict.values())\n        result = [k for k,v in word_dict.items() if v == max_count]\n        return result\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    hist = {}\n    for i in test:\n        if i not in hist.keys():\n            hist[i] = 1\n        else:\n            hist[i] += 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    d = {}\n    l = test.split()\n    for i in l:\n        if i not in d:\n            d[i] = l.count(i)\n    return d\nprint(histogram('a b c'))\nprint(histogram('a b b a'))\nprint(histogram('a b c a b'))\nprint(histogram('b b b b a'))\nprint(histogram(''))\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    dictionary = {}\n    for i in test.split():\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    return dictionary\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert test == '' or isinstance(test, str)\n    test = test.split(' ')\n    d = {}\n    for letter in test:\n        if letter in d:\n            d[letter] += 1\n        else:\n            d[letter] = 1\n    max_value = 0\n    for k, v in d.items():\n        if v > max_value:\n            max_value = v\n            most_frequent_letters = [k]\n        elif v == max_value:\n            most_frequent_letters.append(k)\n    return {k:v for k,v in d.items() if v == max_value}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(test) < 1:\n        return {}\n    test = test.lower()\n    new = test.split(' ')\n    dict = {}\n    for i in new:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    dict = sorted(dict.items(), key = lambda kv:(kv[1], kv[0]), reverse=True)\n    return dict[0]\n    # histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    # histogram('a b b a') == {'a': 2, 'b': 2}\n    # histogram('a b c a b') == {'a': 2, 'b': 2}\n    # histogram('b b b b a') == {'b': 4}\n    # histogram('') == {}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #\n    \n    \n    \n    pass\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = \"\"\n    delete = False\n    for char in s:\n        if char not in c:\n            result += char\n        else:\n            delete = True\n    if result[::-1] == result:\n        delete = False\n    return (result,delete)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(c)==0:\n        return (s,True)\n    s1=s.replace(c, \"\")\n    r=s1[::-1]\n    if r==s1:\n        return (s1,True)\n    return (s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s, c = list(s), list(c)\n    for x in s:\n        if x in c:\n            s.remove(x)\n            c.remove(x)\n    return \"\".join(s), len(s) == len(s) and \"\".join(s) == \"\".join(s)[::-1]\n    \nprint(reverse_delete(\"abcdef\", \"b\"))\nprint(reverse_delete(\"abcde\", \"ae\"))\nprint(reverse_delete(\"abcdedcba\", \"ab\"))"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    res = ''\n    for i in range(len(s)):\n        if s[i] not in c:\n            res += s[i]\n    if res == res[::-1]:\n        return (res,True)\n    else:\n        return (res,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l = len(s)\n    deleted = False\n    for i in range(l):\n        if s[i] in c:\n            s = s[:i] + s[i+1:]\n            deleted = True\n    return (s,deleted)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    t=[]\n    #print(s)\n    #print(c)\n    for i in s:\n        if i not in c:\n            t.append(i)\n    #print(t)\n    re=''\n    #print(re)\n    for i in t:\n        re=re+i\n    #print(re)\n    re1=re[::-1]\n    #print(re1)\n    if re==re1:\n        return re,True\n    return re,False\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # we need to remove all the c's in s\n    # we will use the set data structure to remove duplicates\n    s_set = set()\n    for c_char in c:\n        s_set.add(c_char)\n    # let's put all the c's from s into a new string\n    s_new = ''\n    for i in range(len(s)):\n        if s[i] not in s_set:\n            s_new += s[i]\n    # reverse it to check\n    reversed_s_new = s_new[::-1]\n    return (s_new,reversed_s_new == s_new)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s_new = []\n    check = False\n    for i in s:\n        if i in c:\n            check = True\n        else:\n            s_new.append(i)\n    s_new = \"\".join(s_new)\n    if check:\n        s_new = s_new[::-1]\n    else:\n        s_new = s_new[::-1]\n    print(\"new string is {}\".format(s_new))\n    return (s_new,check)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    output_list = []\n    for num in lst:\n        count = 0\n        for letter in num:\n            if int(letter) % 2 == 1:\n                count += 1\n        output_list.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \" of the \" + str(lst.index(num)+1) + \"nput.\")\n    return output_list\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    output = []\n    for i in lst:\n        num_odd = 0\n        for char in i:\n            if int(char) % 2 == 1:\n                num_odd += 1\n        output.append(\"the number of odd elements \" + str(num_odd) + \"n the str\" + str(num_odd) + \"ng \" + str(num_odd) + \" of the \" + str(num_odd) + \"nput.\")\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    for s in lst:\n        odd = sum([c.isdigit() for c in s])\n        result.append(\"the number of odd elements \"+str(odd)+\" in the string \"+str(s))\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    output = []\n    for element in lst:\n        total = 0\n        for char in element:\n            if char in \"13579\":\n                total += 1\n        output.append(f\"the number of odd elements {total}n the str{total}ng {total} of the {len(lst)}nput.\")\n    return output\n    \n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [\"the number of odd elements \" + str(len(list(filter(lambda x: int(x)%2 == 1, i))))\n             + \" of the \" + str(len(i)) + \"nput.\" for i in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [f\"the number of odd elements {n} the str{len(n)}ng {len(n)} of the {len(lst)}nput.\"]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # find the odd number of digits in each word\n    # find the number of odd digits in each word\n    # find the number of odd digits in each word\n    # find the number of odd digits in each word\n    # for every word, output the number of odd digits in the word\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [str(len([int(i) for i in s if int(i)%2])) for s in lst]\nodd_count
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    output = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2 == 1:\n                count += 1\n        output.append(str(count))\n    return output"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    output = []\n    for item in lst:\n        total_odd = 0\n        for digit in item:\n            if int(digit) % 2!= 0:\n                total_odd += 1\n        output.append(f\"the number of odd elements {total_odd}n the str{total_odd}ng {total_odd} of the {total_odd}nput.\")\n    return output\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(nums) == 0: return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = len(nums)\n    if n == 0: return 0\n    minSum = [0] * n\n    minSum[0] = nums[0]\n    for i in range(1, n):\n        minSum[i] = min(minSum[i - 1] + nums[i], nums[i])\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    min_sum = 99999999\n    sub_sum = 0\n    for i in range(len(nums)):\n        sub_sum += nums[i]\n        if sub_sum < min_sum:\n            min_sum = sub_sum\n        if sub_sum >= min_sum:\n            while sub_sum - nums[i] >= min_sum:\n                sub_sum = sub_sum - nums[i]\n                i += 1\n                if sub_sum < min_sum:\n                    min_sum = sub_sum\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # for each integer in the array, we keep track of the min sum\n    # and we update this min sum every time the sum of nums is greater than\n    # the min sum\n    min_sum = float('inf')\n    nums_sum = 0\n    for i in range(len(nums)):\n        nums_sum += nums[i]\n        if nums_sum < min_sum:\n            min_sum = nums_sum\n        if nums_sum > min_sum:\n            nums_sum = nums_sum - nums[i - 1]\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum = 0\n    sum_so_far = []\n    length = len(nums)\n    for i in range(length):\n        sum = nums[i]\n        for j in range(i, length):\n            sum += nums[j]\n            sum_so_far.append(sum)\n    min_sum = min(sum_so_far)\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum = nums[0]\n    for i in range(1,len(nums)):\n        sum += nums[i]\n        nums[i] = sum\n    return min(nums)\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Use sum of array as variable\n    sum = 0\n    # Go through the list\n    for i in nums:\n        # Add each element to the sum\n        sum = sum + i\n    # Return the minimum subarray sum\n    return minSubArray(nums, sum, 0, len(nums)-1)\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    total = 0\n    min_sum = 0\n    min_sum_current = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        min_sum_current += nums[i]\n        if min_sum_current < min_sum:\n            min_sum = min_sum_current\n        while total >= min_sum:\n            min_sum_current -= nums[start]\n            start += 1\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # initializes a sum to zero to hold the running total of the sub-array\n    running_total = 0\n    # list of minimum sums\n    min_sums = []\n    # iterates through nums\n    for num in nums:\n        # adds the current number to the running total\n        running_total += num\n        # if the running total is greater than or equal to zero\n        if running_total >= 0:\n            # adds the running total to the list of minimum sums\n            min_sums.append(running_total)\n        # if the running total is less than zero\n        else:\n            # subtracts the absolute value of the running total from the list of minimum sums\n            min_sums.append(running_total - (running_total * -1))\n            # resets the running total to the absolute value of the current number\n            running_total = abs(num)\n    # returns the minimum sum\n    return min(min_sums)\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Linear Scan: Time Limit Exceeded\n    # start, end = 0, len(nums)\n    # while start < end:\n    #     total = sum(nums[start:end])\n    #     if total < 0:\n    #         end -= 1\n    #     elif total > 0:\n    #         start += 1\n    #     else:\n    #         return 0\n    # return min(nums[start:end])\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    # build the adjacency matrix of the graph\n    adj_matrix = build_adj_matrix(grid)\n    \n    # find the source vertex\n    source_index = find_source_vertex(adj_matrix)\n    \n    # find the sink vertex\n    sink_index = find_sink_vertex(adj_matrix)\n    \n    # compute the max flow\n    flow_val, flow_matrix = find_max_flow(adj_matrix, source_index, sink_index, capacity)\n    \n    # get the buckets which are reachable from the source\n    reachable_buckets = get_reachable_buckets(adj_matrix, flow_matrix, source_index)\n    \n    # the number of times to lower the buckets is the number of reachable buckets minus the number of buckets\n    return len(reachable_buckets) - len(grid)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # for each column, find the minimum amount of water required to empty all buckets.\n    # the minimum amount of water required to empty each bucket is 1/len(grid)\n    # so the minimum amount of water required to empty all buckets is (len(grid) * 1/len(grid))\n    # the maximum amount of water required to empty all buckets is (len(grid) * 1/len(grid)) + (len(grid) - 1)\n    # so the maximum amount of water required to empty all buckets is (len(grid) * 1/len(grid)) + len(grid)\n    # so the minimum amount of water required to empty all buckets is (len(grid) * 1/len(grid)) + 1\n    # we don't need to worry about the max capacity as the max amount of water required to empty all buckets is (len(grid) * 1/len(grid)) + len(grid)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    dp = [[0 for i in range(capacity+1)] for j in range(n+1)]\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # keep track of the number of times you have to lower the buckets\n    count = 0\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def get_capacity(grid):\n        \"\"\"\n        Return grid capacity\n        \"\"\"\n        return sum(grid[0])\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # create an array of tuples [(x,y), (x,y)]\n    wells = [(x, y) for y in range(len(grid)) for x in range(len(grid[y])) if grid[y][x] == 1]\n    # get the first well\n    # use a heap to manage the wells\n    heap = []\n    heapq.heappush(heap, (0, wells[0][0], wells[0][1]))\n    # run the simulation\n    capacity_used = 0\n    num_times = 0\n    while heap:\n        num_times += 1\n        # get the most recent used bucket\n        _, x, y = heapq.heappop(heap)\n        # if the bucket is empty, continue\n        if not grid[y][x]:\n            continue\n        # decrement the capacity\n        capacity_used -= 1\n        # get all neighbors\n        neighbors = [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]\n        # iterate through all neighbors\n        for neighbor in neighbors:\n            # if it exists in the grid\n            if 0 <= neighbor[0] < len(grid[0]) and 0 <= neighbor[1] < len(grid):\n                # if it is a valid location\n                if grid[neighbor[1]][neighbor[0]]:\n                    # check if the capacity is greater than 0\n                    if capacity_used < bucket_capacity:\n                        # if it is a valid location\n                        if grid[neighbor[1]][neighbor[0]]:\n                            # if it is empty\n                            if not grid[neighbor[1]][neighbor[0]]:\n                                # push it onto the heap\n                                heapq.heappush(heap, (num_times, neighbor[0], neighbor[1]))\n    return num_times\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum(sum(row) for row in grid)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # get the number of rows\n    m = len(grid)\n    # get the number of columns\n    n = len(grid[0])\n    # Initialize the buckets\n    buckets = [0] * m\n    # Initialize the indexing variable for buckets\n    index = 0\n    # Initialize the counter to be used in the outer loop\n    c = 0\n    # Initialize a max_level variable to keep track of the current level of the tree\n    max_level = 0\n    # Initialize an empty visited array to keep track of which nodes have been visited\n    visited = []\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not grid or not grid[0]:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not grid or not grid[0]:\n        return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def f(x):\n        return sum([int(y) for y in bin(x)])\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def num_ones(n):\n        return str(bin(n)).count('1')\n    return sorted(arr, key=num_ones)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    arr.sort(key=lambda x: (bin(x).count(\"1\"), x))\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    dec_array = []\n    bin_array = []\n    for num in arr:\n        binary = format(num, 'b')\n        binary = binary.zfill(len(binary) + 1)\n        num = 0\n        for i in range(len(binary)):\n            if binary[i] == '1':\n                num += 1\n        dec_array.append(num)\n        bin_array.append(binary)\n    #print(dec_array, bin_array)\n    return [arr[i] for i in range(len(arr)) for j in range(len(dec_array)) if dec_array[j] == int(bin_array[i], 2)]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(arr, key=bin_to_dec)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda num: (bin(num).count('1'), num))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not s:\n        return []\n    l = s.split(' ')\n    if n < 1:\n        return []\n    return [i for i in l if len(i) >= n]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l = s.split()\n    res = []\n    for word in l:\n        if len(word) == n and word.count('a')+word.count('e')+word.count('i')+word.count('o')+word.count('u') == n:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = ('a', 'e', 'i', 'o', 'u')\n    words = s.split(' ')\n    output = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char in vowels:\n                count += 1\n        if count == n:\n            output.append(word)\n    return output\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # your code here\n    # r = re.compile(r'([^a-zA-Z\\s]*){{0,{n}}}(?=\\s[a-zA-Z]*)'.format(n=n))\n    # return r.findall(s)\n    # list = []\n    # for x in re.finditer(r'([^a-zA-Z\\s]*){{0,{n}}}(?=\\s[a-zA-Z]*)'.format(n=n), s):\n    #     list.append(x[0])\n    # return list\n    # return [word for word in re.findall(r'([^a-zA-Z\\s]*){{0,{n}}}(?=\\s[a-zA-Z]*)'.format(n=n), s)]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert n >= 0, 'n must be a natural number'\n    words = []\n    s_list = [i for i in s.split(' ')]\n    for word in s_list:\n        if len(word) == n:\n            if word.isalpha():\n                words.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def is_vowel(c):\n        return c.lower() in ['a','e','i','o','u']\n    result = []\n    if s:\n        s_list = s.split()\n        for word in s_list:\n            vowel_counter = 0\n            consonant_counter = 0\n            for i in range(len(word)):\n                if is_vowel(word[i]):\n                    vowel_counter += 1\n                else:\n                    consonant_counter += 1\n                if consonant_counter == n:\n                    if vowel_counter == n:\n                        result.append(word)\n                    elif vowel_counter < n:\n                        continue\n                    else:\n                        break\n                elif consonant_counter < n:\n                    continue\n                else:\n                    break\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # split the string on spaces.\n    words = s.split()\n    # create a list to hold the words that have exactly n consonants\n    result = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    # you may also want to use'split()' function\n    words = []\n    \n    if len(s) == 0:\n        return words\n    \n    def is_valid(s):\n        for i in s:\n            if i =='':\n                continue\n            elif i.isalpha():\n                continue\n            else:\n                return False\n        return True\n    \n    def n_consonants(s):\n        count = 0\n        for i in s:\n            if i.isalpha():\n                count += 1\n        return count\n    \n    if n_consonants(s) == n:\n        return [s]\n    else:\n        for i in range(len(s)):\n            if s[i] =='':\n                w = s[i+1:]\n                if is_valid(w):\n                    if n_consonants(w) == n:\n                        words.append(w)\n                    else:\n                        continue\n                else:\n                    continue\n            else:\n                continue\n        return words\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def is_vowel(c):\n        return c.lower() in ['a', 'e', 'i', 'o', 'u']\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [word for word in s.split() if consonants(word) == n]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #print(\"Start of get_closest_vowel\")\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    word = word.lower()\n    #print(word)\n    first_consonant_index = -1\n    last_consonant_index = -1\n    for i in range(len(word)):\n        if word[i] not in vowels:\n            first_consonant_index = i\n            break\n    if first_consonant_index < 0:\n        return \"\"\n    #print(\"first_consonant_index: \" + str(first_consonant_index))\n    for i in range(first_consonant_index, len(word)):\n        if word[i] in vowels:\n            last_consonant_index = i\n            break\n    #print(\"last_consonant_index: \" + str(last_consonant_index))\n    if last_consonant_index < 0:\n        return \"\"\n    #print(\"Returning: \" + word[last_consonant_index + 1: first_consonant_index])\n    return word[last_consonant_index + 1: first_consonant_index]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    import string\n    vowels = list(string.ascii_lowercase)\n    \n    # print(string.ascii_lowercase)\n    # print(vowels)\n    \n    if len(word) < 2:\n        return \"\"\n    \n    if len(word) == 2:\n        if word[1] in vowels:\n            return word[1]\n        else:\n            return \"\"\n    \n    if len(word) > 2:\n        for i, letter in enumerate(word):\n            if letter in vowels:\n                if i!= 0:\n                    return word[i-1]\n                else:\n                    return word[0]\n        return word[-1]\n    \n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pos = -1\n    for i in range(len(word) - 2):\n        if word[i]!= word[i + 1] and word[i + 1]!= word[i + 2]:\n            pos = i\n            break\n    else:\n        return ''\n    \n    for i in range(pos, -1, -1):\n        if word[i] in 'AEIOU':\n            return word[i]\n    return ''\n    \nif __name__ == '__main__':\n    print(get_closest_vowel('yogurt'))\n    print(get_closest_vowel('FULL'))\n    print(get_closest_vowel('quick'))\n    print(get_closest_vowel('ab')"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    consonants = []\n    for i in range(len(word)):\n        if word[i] not in vowels:\n            consonants.append(word[i])\n        else:\n            if word[i - 1] in vowels:\n                continue\n            elif word[i + 1] in vowels:\n                continue\n            else:\n                return word[i]\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(len(word)):\n        if word[i] in VOWELS:\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(word) < 2:\n        return ''\n    elif word[-1] == 'y' and word[-2] == 'a':\n        return 'a'\n    elif word[-1] == 'e' and word[-2] == 'a':\n        return 'a'\n    elif word[-1] == 'y' and word[-2] == 'u':\n        return 'u'\n    elif word[-1] == 'e' and word[-2] == 'u':\n        return 'u'\n    else:\n        for i, char in enumerate(word):\n            if char == 'c' and word[i+1] == 'h' and word[i+2] == 'a':\n                return 'a'\n            elif char == 'c' and word[i+1] == 'h' and word[i+2] == 'u':\n                return 'u'\n            elif char == 'c' and word[i+1] == 'i' and word[i+2] == 'n':\n                return 'n'\n            elif char == 'c' and word[i+1] == 'i' and word[i+2] == 'e':\n                return 'e'\n            elif char == 'c' and word[i+1] == 'i' and word[i+2] == 'o':\n                return 'o'\n            elif char == 'c' and word[i+1] == 'o' and word[i+2] == 'a':\n                return 'a'\n            elif char == 'c' and word[i+1] == 'o' and word[i+2] == 'u':\n                return 'u'\n            elif char == 'c' and word[i+1] == 'u' and word[i+2] == 'a':\n                return 'a'\n            elif char == 'c' and word[i+1] == 'u' and word[i+2] == 'u':\n                return 'u'\n            elif char == 'c' and word[i+1] == 'a' and word[i+2] == 'a':\n                return 'a'\n            elif char == 'c' and word[i+1] == 'a' and word[i+2] == 'e':\n                return 'e'\n            elif char == 'c' and word[i+1] == 'e' and word[i+2] == 'a':\n                return 'a'\n            elif char == 'c' and word[i+1] == 'e' and word[i+2] == 'u':\n                return 'u'\n            elif char == 'c' and word[i+1] == 'o' and word[i+2] == 'a':\n                return 'a'\n            elif char == 'c' and word[i+1] == 'o' and word[i+2] == 'u':\n                return 'u'\n            elif char == 'c' and word[i+1] == 'u' and word[i+2] == 'a':\n                return 'a'\n            elif char == 'c' and word[i+1] == 'u' and word[i+2] == 'u':\n                return 'u'\n            elif char == 'c' and word[i+1] == 'e' and word[i+2] == 'e':\n                return 'e'\n            elif char == 'c' and word[i+1] == 'e' and word[i+2] == 'i':\n                return 'i'\n            elif char == 'c' and word[i+1] == 'e' and word[i+2] == 'o':\n                return 'o'\n            elif char == 'c' and word[i+1] == 'e' and word[i+2] == 'u':\n                return 'u'\n            elif char == 'c' and word[i+1] == 'i' and word[i+2] == 'a':\n                return 'a'\n            elif char == 'c' and word[i+1] == 'i' and word[i+2] == 'u':\n                return 'u'\n            elif char == 'c' and word[i+1] == 'o' and word[i+2] == "
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(word) < 3:\n        return \"\"\n    start = end = -1\n    for index, letter in enumerate(word):\n        if letter in \"aeiouAEIOU\":\n            if start == -1:\n                start = index\n            else:\n                end = index\n    if start == end == -1:\n        return \"\"\n    if start == 0:\n        return \"\"\n    if end == len(word) - 1:\n        return \"\"\n    return word[start]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i, letter in enumerate(word):\n        if letter.lower() in VOWELS and word[i+1].lower() in CONSONANTS:\n            return letter.lower()\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pos = word.rfind(max(re.finditer(\"[^aeiou]\", word)))\n    if pos == 0:\n        return \"\"\n    elif pos == len(word) - 1:\n        return \"\"\n    else:\n        return word[pos + 1]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    idx = len(word) - 1\n    while idx >= 0:\n        if word[idx] in vowels:\n            return word[idx]\n        idx -= 1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(lst) % 2!= 0:\n        return 'No'\n    stack = []\n    for c in lst[0]:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return 'No'\n    if len(stack) == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Your code here\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Your code here\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # time complexity is O(n)\n    # space complexity is O(1)\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # itertools.permutations()\n    # itertools.product()\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def match(lst, s):\n        if len(lst) == 0 and len(s) == 0:\n            return True\n        if len(s) == 0:\n            return False\n        if len(lst) == 1 and lst[0] == ')':\n            return False\n        if lst[0] == '(' and s[0] == ')':\n            return False\n        if lst[0] == '(' and s[0]!= ')':\n            return match(lst[1:], s[1:])\n        return match(lst[1:], s) or match(lst, s[1:])\n    return 'Yes' if match(lst[0], lst[1]) else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lst.sort()\n    while lst[0] == '(' and len(lst) > 1:\n        lst.pop(0)\n    if len(lst) <= 1:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # create a set of open and close parenthesis in order to quickly check if\n    # the string contains any unbalanced parenthesis\n    open_par = set('(')\n    close_par = set(')')\n    open_count = 0\n    close_count = 0\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your code here\n    \n    return 'Yes' if lst[0] == lst[1][::-1] else 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def partition(arr, low, high):\n        # Select a pivot element\n        pivot = arr[high]\n        i = low\n        # After the loop, the element that is smaller than the pivot is placed before\n        for j in range(low, high):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n        arr[i], arr[high] = arr[high], arr[i]\n        return i\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(arr)[-k:]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return _findKthLargest(arr, k, 0, len(arr)-1)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # # Time: O(nlogn), Space: O(1)\n    # # bucket sort\n    # # If we maintain a list of k numbers with the minimum value, we can add\n    # # numbers to it until the minimum value of the list is bigger than the \n    # # new value.\n    # # In this way, we can always ensure that the list has k numbers in it,\n    # # and we only need to pay O(n) time to traverse the array.\n    # min_heap = []\n    # for n in arr:\n    #     heappush(min_heap, n)\n    #     if len(min_heap) == k:\n    #         heappop(min_heap)\n    # return [heappop(min_heap) for _ in range(k)]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(arr, reverse=True)[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not arr or not k:\n        return []\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sum_of_odd_elements = 0\n    i = 0\n    while i < len(lst):\n        if lst[i] % 2 == 1:\n            sum_of_odd_elements += lst[i]\n        i += 1\n    return sum_of_odd_elements\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    answer = 0\n    for i in lst:\n        if i % 2 == 0:\n            answer += i\n    return answer\n        \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    x = 0\n    for i in range(0, len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            x += lst[i]\n    return x\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n            result = sum(result)\n    return result\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    odd_sum = 0\n    \n    for index, element in enumerate(lst):\n        if (index % 2 == 0) and (element % 2!= 0):\n            odd_sum += element\n    \n    return odd_sum\n    \n    \n    "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # we will take the first element and check if it is even or not. If it is even we will add it to the total. If it is odd we will move on to the next element\n    total = 0\n    for i in lst:\n        if i % 2 == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    odds=0\n    for i in lst:\n        if i % 2 == 1 and lst.index(i)%2==0:\n            odds += i\n    return odds\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    sum_odd_ele = 0\n    for i in lst[1::2]:\n        sum_odd_ele += i\n    return sum_odd_ele\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            odd_sum += lst[i]\n    return odd_sum\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            total += lst[i]\n    return tota"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(int(x) for x in str(min(arr[:k])) + str(max(arr[:k])))\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum(int(x[0]) for x in enumerate(arr[:k]) if len(str(x[1])) <= 2)\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Return the sum of the elements of arr where the sum of elements is\n    # less than or equal to 2 digits.\n    nums = arr[:k]\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(arr) == k:\n        return sum(arr)\n    \n    # first k elements\n    s = sum(arr[:k])\n    # last n-k elements\n    return s + add_elements(arr[k:], k)"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = len(arr)\n    total = sum(arr[:k])\n    if k == n:\n        return total\n    for i in range(k, n):\n        total -= arr[i - k]\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(int(i) for i in arr[:k] if len(i) <= 2)"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Solution:\n    # the trick is to use greedy: sort and use first k elements\n    arr.sort(reverse=True)\n    return sum(map(int, str(int(''.join(map(str, arr[:k]))))))"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    total = sum(map(int, arr[:k]))\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return []\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    while n!= 1:\n        result.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return result + [1]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    ans = []\n    while n!= 1:\n        if n % 2 == 0:\n            ans.append(n)\n            n = n / 2\n        else:\n            ans.append(n)\n            n = 3 * n + 1\n    ans.append(1)\n    return ans\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + get_odd_collatz(n // 2)\n    else:\n        return [n] + get_odd_collatz(3 * n + 1)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    collatz_seq = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n            collatz_seq.append(int(n))\n        elif n % 2!= 0:\n            n = 3 * n + 1\n            collatz_seq.append(int(n))\n    collatz_seq.append(int(1))\n    return sorted(collatz_seq)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert n >= 1, \"Expected a positive integer, received {}\".format(n)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    collatz_seq = [n]\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert n >= 1, \"Invalid input\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n > 0, \"Please enter a positive integer.\"\n    assert type(n) == int, \"Please enter an integer.\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def collatz(n):\n        if n%2 == 0:\n            return n//2\n        else:\n            return 3*n+1\n    return sorted([collatz(n) for n in range(1,n) if collatz(n) not in [1, n]])\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return Fals"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    date = date.split('-')\n    if not date:\n        return False\n    try:\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 32 and day > 0:\n            return True\n        elif month in [4, 6, 9, 11] and day < 31 and day > 0:\n            return True\n        elif month == 2 and day < 29 and day > 0:\n            return True\n    except:\n        return False\n    return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    try:\n        date_parts = date.split('-')\n        if len(date_parts)!= 3:\n            return False\n        month = int(date_parts[0])\n        day = int(date_parts[1])\n        year = int(date_parts[2])\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    \"\"\"\n    Faz a verificacao dos dados.\n    \"\"\"\n    if (len(date) == 0):\n        return False\n    \n    date = date.split(\"-\")\n    \n    for i in range(0,3):\n        if not(1 <= int(date[i]) <= 12):\n            return False\n    \n    if (int(date[0]) == 2):\n        if (int(date[2]) > 29):\n            return False\n    else:\n        if (int(date[2]) > 30):\n            return False\n    \n    if (int(date[1]) < 1 or int(date[1]) > 31):\n        return False\n    \n    if (int(date[0]) < 1 or int(date[0]) > 12):\n        return False\n    \n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    try:\n        valid_date = list(map(int,date.split('-')))\n        if len(date) == 10:\n            if 1<=int(valid_date[0])<=12 and 1<=int(valid_date[2])<=31:\n                if int(valid_date[0]) == 4 or int(valid_date[0]) == 6 or int(valid_date[0]) == 9 or int(valid_date[0]) == 11:\n                    if int(valid_date[1])>=1 and int(valid_date[1])<=30:\n                        if int(valid_date[2])>=1 and int(valid_date[2])<=29:\n                            return True\n                        else:\n                            return False\n                    else:\n                        return False\n                elif int(valid_date[0]) == 2:\n                    if int(valid_date[1])>=1 and int(valid_date[1])<=28:\n                        if int(valid_date[2])>=1 and int(valid_date[2])<=29:\n                            return True\n                        else:\n                            return False\n                    elif int(valid_date[1])>=1 and int(valid_date[1])<=30:\n                        if int(valid_date[2])>=1 and int(valid_date[2])<=31:\n                            return True\n                        else:\n                            return False\n                    else:\n                        return False\n                elif int(valid_date[0]) == 1 or int(valid_date[0]) == 3 or int(valid_date[0]) == 5 or int(valid_date[0]) == 7 or int(valid_date[0]) == 8 or int(valid_date[0]) == 10 or int(valid_date[0]) == 12:\n                    if int(valid_date[1])>=1 and int(valid_date[1])<=31:\n                        if int(valid_date[2])>=1 and int(valid_date[2])<=30:\n                            return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if date == \"\":\n        return False\n    elif len(date) < 7:\n        return False\n    else:\n        day = int(date[0:2])\n        month = int(date[3:5])\n        year = int(date[6:])\n        if day < 1 or day > 31:\n            return False\n        elif month < 1 or month > 12:\n            return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        elif month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2 and day > 28:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    try:\n        # take the given date string and split it into list of strings\n        # ['03', '11', '2000']\n        date_list = date.split(\"-\")\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if(not date): return False\n    \n    arr = date.split('-')\n    \n    if len(arr)!= 3: return False\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n    txt = txt.replace(\",\",\" \")\n    if \" \" in txt:\n        return txt.split(\" \")\n    else:\n        l = 0\n        for i in txt:\n            if ord(i)%2!= 0:\n                l += 1\n        return [l]\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return txt.split()\n    \ndef encrypt_letter(ltr, offset):\n    '''\n    Given a character, return its encrypted version by offsetting it by 26.\n    Examples\n    encrypt_letter('a', 5) == 'c'\n    encrypt_letter('m', 5) == 'x'\n    encrypt_letter('z', 1) == 'a'\n    encrypt_letter('a', 1) == 'z'\n    '''\n    \n    return chr((ord(ltr) + offset - ord('a')) % 26 + ord('a'))\n    \ndef decrypt_letter(ltr, offset):\n    '''\n    Given a character, return its decrypted version by offsetting it by 26.\n    Examples\n    decrypt_letter('c', 5) == 'a'\n    decrypt_letter('x', 5) =='m'\n    decrypt_letter('z', 1) == 'z'\n    decrypt_letter('a', 1) == 'a'\n    '''\n    \n    return chr((ord(ltr) + offset - ord('a')) % 26 + ord('a'))\n    \ndef encrypt_word(txt, offset):\n    '''\n    Given a string, return its encrypted version by offsetting each letter by 26.\n    Examples\n    encrypt_word(\"hello\", 5) == \"jgnnq\"\n    encrypt_word(\"hello\", -5) == \"fghij\"\n    '''\n    \n    return ''.join([encrypt_letter(ltr, offset) for ltr in txt])\n    \ndef decrypt_word(txt, offset):\n    '''\n    Given a string, return its decrypted version by offsetting each letter by 26.\n    Examples\n    decrypt_word(\"jgnnq\", 5) == \"hello\"\n    decrypt_word(\"fghij\", -5) == \"hello\"\n    '''\n    \n    return ''.join([decrypt_letter(ltr, offset) for ltr in txt])\n    \ndef repeat_word(txt, n):\n    '''\n    Given a string, split it into a list of words, and then repeat each word n times.\n    Examples\n    repeat_word(\"hello there\", 1) == \"hello hello there hello there\"\n    repeat_word(\"hello there\", 2) == \"hello hello there hello there hello there hello there\"\n    repeat_word(\"hello there\", 3) == \"hello hello there hello there hello there hello there hello there hello there\"\n    '''\n    \n    return''.join([txt for i in range(n)])\n    \ndef weave_words(words):\n    '''\n    Given a list of words, return the words weaved together into a sentence.\n    Examples\n    weave_words([\"hello\", \"world\"]) == \"hello world\"\n    weave_words([\"a\", \"b\", \"c\", \"d\"]) == \"abcd\"\n    '''\n    \n    return ''.join(words)\n    \ndef caesar_cipher(txt, shift):\n    '''\n    Given a string, return its Caesar Cipher representation.\n    Examples\n    caesar_cipher(\"hello\", 1) == \"ifmmp\"\n    caesar_cipher(\"hello\", 5) == \"mjqqt\"\n    caesar_cipher(\"hello\", 26) == \"zabc\"\n    '''\n    \n    return ''.join([encrypt_letter(ltr, shift) for ltr in txt])\n    \ndef atbash(txt):\n    '''\n    Given a string, return its Atbash Cipher representation.\n    Examples\n    atbash(\"hello\") == \"zyyy\"\n    atbash(\"hello world\") == \"zyyxw vdlf\"\n    atbash(\"zyyy\") == \"hello\"\n    '''\n    \n    return ''.join([decrypt_letter(ltr, 26 - ord(ltr)) for ltr in txt])\n    \ndef substitution_cipher(txt, key):\n    '''\n    Given a string, and a list of pairs of characters, return its Substitution Cipher representation.\n    Examples\n    substitution_cipher(\"hello\", [[\"h\", \"x\"], [\"e\", \"y\"], [\"l\", \"z\"]]) == \"hxye\"\n    substitution_cipher(\"hieeelalaooo\", [[\"e\", "
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    new_list = []\n    for i in txt:\n        if i == \" \":\n            new_list.append(i)\n        elif i == \",\":\n            new_list.append(i)\n    if new_list:\n        new_list.append(\" \")\n    return new_list\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [i for i in txt.split()]\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # your code here\n    return [word for word in txt.split()]\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    words = txt.split()\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [word for word in txt.split()]\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return all(a <= b for a, b in zip(lst, lst[1:]))\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len(set(lst)) == len(lst) and sorted(lst) == lst\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) == 1:\n        return True\n    elif len(lst) > 1:\n        for i in range(len(lst)-1):\n            if lst[i] > lst[i+1]:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    # sort the list and compare if it's equal\n    \n    # return False if list has more than 1 duplicate of the same number\n    if len(set(lst))!= len(lst):\n        return False\n    \n    # return True if the list is sorted\n    return lst == sorted(lst)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst) == 1:\n        return True\n    elif len(lst) > 1:\n        # Compare adjacent pairs\n        for i in range(len(lst)-1):\n            if lst[i] > lst[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst) == 1:\n        return True\n    \n    if sorted(lst) == lst:\n        return True\n    return False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(lst) == 1:\n        return True\n    else:\n        for x in range(0, len(lst)-1):\n            if lst[x] > lst[x+1]:\n                return False\n        return True\n    # if len(lst) == 0:\n    #     return False\n    # else:\n    #     for x in range(0, len(lst)):\n    #         if x == len(lst)-1:\n    #             return True\n    #         elif lst[x] > lst[x+1]:\n    #             return False\n    #     return True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst.sort()\n    if lst == sorted(lst):\n        return True\n    return False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    if len(lst) > 1:\n        if lst[0]!= lst[1]:\n            lst.pop(0)\n            return is_sorted(lst)\n        elif lst[0]!= lst[1]:\n            return False\n        else:\n            lst.pop(0)\n            return is_sorted(lst)\n    return True\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # take care of case when two intervals don't intersect\n    # if interval1[0] > interval2[1] or interval2[0] > interval1[1] or interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n    #     return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # take care of empty intersection\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    # take care of intersection with the right boundary\n    if interval1[0] <= interval2[0] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    # take care of intersection with the left boundary\n    if interval2[0] <= interval1[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    # take care of intersection with the right-up corner\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    # take care of intersection with the left-up corner\n    if interval2[0] <= interval1[0] and interval2[1] >= interval1[1]:\n        return \"YES\"\n    # take care of intersection with the right-down corner\n    if interval1[0] <= interval2[0] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    # take care of intersection with the left-down corner\n    if interval2[0] <= interval1[0] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    # take care of intersection with the diagonal\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Your code here\n    #print(interval1, interval2)\n    if interval1 == interval2:\n        return \"YES\"\n    \n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    if interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[1] < interval2[1] and interval1[0] > interval2[0]:\n        return \"NO\"\n    if interval1[0] < interval2[0] and interval1[1] > interval2[1]:\n        return \"NO\"\n    \n    return \"NO\"\n    # pass\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    s_1, e_1 = interval1[0], interval1[1]\n    s_2, e_2 = interval2[0], interval2[1]\n    \n    if s_1 > e_2 or s_2 > e_1:\n        return \"NO\"\n    \n    if s_1 >= s_2 and e_1 <= e_2:\n        return \"YES\"\n    \n    if s_1 < s_2 and e_1 > e_2:\n        return \"YES\"\n    \n    if s_1 < s_2 and s_2 < e_1 and s_1 < e_1 and e_2 > e_1:\n        return \"YES\"\n    \n    if s_1 >= s_2 and e_2 >= e_1:\n        return \"YES\"\n    \n    if s_1 >= s_2 and e_2 >= e_1 and s_2 < e_1:\n        return \"YES\"\n    \n    if s_2 >= s_1 and e_1 >= e_2:\n        return \"YES\"\n    \n    if s_2 >= s_1 and e_1 >= e_2 and s_1 < e_2:\n        return \"YES\"\n    \n    return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # your code here\n    #return \"YES\" if intersection((1, 2), (2, 3)) is None else \"NO\"\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        start, end = interval1[0], interval1[1]\n        s, e = interval2[0], interval2[1]\n        if s <= end and e >= start:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    (start1, end1) = interval1\n    (start2, end2) = interval2\n    if start1 < end1 and start2 < end2:\n        if start1 <= start2 and end1 >= end2:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if interval1[0] == interval1[1] or interval2[0] == interval2[1]:\n        return \"NO\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def is_prime(number):\n        return number > 1 and all(number % i!= 0 for i in range(2, number))\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    intersection_length = interval1[1] - interval1[0] + interval2[1] - interval2[0]\n    # check if intersection_length is prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(abs(i) for i in arr) * prod(sign(i) for i in arr) if arr else None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not arr:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr: return None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not arr: return None\n    sum_ = 0\n    mult_ = 1\n    for i in arr:\n        sum_ += i\n        mult_ *= i if i else -1\n    return sum_ * mult_"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sign = lambda x: x // abs(x)\n    return sum(abs(i) for i in arr) * prod(sign(i) for i in arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # return None if empty arr\n    if not arr:\n        return None\n    # get array of magnitudes and sign array\n    mag_arr, sign_arr = [], []\n    for num in arr:\n        mag_arr.append(abs(num))\n        sign_arr.append(sign(num))\n    # multiply magnitudes by signs\n    prod_mag_arr = [mag_arr[i] * sign_arr[i] for i in range(len(arr))]\n    # return sum of magnitudes multiplied by product of all signs\n    return sum(prod_mag_arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if arr:\n        signs = list(map(lambda x: 1 if x < 0 else 0 if x == 0 else -1, arr))\n        return reduce(lambda a, b: a + b, [abs(x) for x in arr]) * reduce(lambda a, b: a * b, signs)\n    else:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    arr_len = len(arr)\n    return None if arr_len == 0 else sum([abs(num) for num in arr]) * reduce(lambda x, y: x * y, [1 if num >= 0 else -1 for num in arr])"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not arr: return None\n    res = []\n    for i in range(len(arr)):\n        res.append(abs(arr[i])*(i+1)*(1 - 2*(arr[i] < 0)))\n    return sum(res)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #signs = []\n    #for n in arr:\n    #    if n>0:\n    #        signs.append(1)\n    #    elif n<0:\n    #        signs.append(-1)\n    #    else:\n    #        signs.append(0)\n    #prod = 1\n    #for s in signs:\n    #    prod = prod * s\n    #return prod * sum(signs)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not grid or not grid[0] or not k:\n        return []\n    n, m, k = len(grid), len(grid[0]), k\n    dp = [[[float('inf')] * n for _ in range(m)] for _ in range(k+1)]\n    dp[0][0][0] = 0\n    for i in range(1, k+1):\n        for j in range(n):\n            for l in range(m):\n                for x, y in ((0, 1), (0, -1), (1, 0), (-1, 0)):\n                    nx, ny = j + x, l + y\n                    if 0 <= nx < n and 0 <= ny < m:\n                        dp[i][ny][nx] = min(dp[i][ny][nx], dp[i-1][l][j] + grid[l][j])\n    return [grid[l][j] for j in range(m) for l in range(n) if dp[k][l][j] == min(dp[k][l])]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # time complexity O(N^2 * k), space complexity O(N^2 * k)\n    if not grid or not grid[0] or k <= 0:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    N = len(grid)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not grid: return []\n    n, m = len(grid), len(grid[0])\n    cache = {(i, j): float('inf') for i in range(n) for j in range(m)}\n    queue = deque([(0, 0)])\n    cache[(0, 0)] = 0\n    while queue:\n        i, j = queue.popleft()\n        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            ii, jj = i + di, j + dj\n            if 0 <= ii < n and 0 <= jj < m:\n                if cache[(ii, jj)] > cache[(i, j)] + 1:\n                    cache[(ii, jj)] = cache[(i, j)] + 1\n                    queue.append((ii, jj))\n    if k > max(cache.values()):\n        return []\n    return [[x for x in cache if cache[x] == k][0][0],\n            [x for x in cache if cache[x] == k][0][1]]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst_values = []\n    # Check if grid is too small\n    if len(grid) < 2 or len(grid[0]) < 2:\n        return None\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # we need to go over every cell in the grid\n    # we need to know its value and its location\n    # we need to keep track of every value in the grid, its location, and its index\n    # once we have found the minimum path length k, we need to return the list of values on that path\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not grid:\n        return []\n    n_rows, n_cols = len(grid), len(grid[0])\n    if k == 0:\n        return []\n    if k >= n_rows + n_cols - 2:\n        return [x for x in range(1, n_rows * n_cols + 1)]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    m, n = len(grid), len(grid[0])\n    nums = []\n    for i in range(m):\n        for j in range(n):\n            nums.append((grid[i][j], i, j))\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    path = [0] * k\n    lst_path = []\n    index = 0\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n    elif n == 4:\n        return [1, 3, 2, 8]\n    else:\n        list = []\n        list.append(1)\n        if n % 2 == 0:\n            list.append(2)\n            for i in range(n - 2):\n                list.append(sum(list[-3:]))\n        else:\n            list.append(1)\n            list.append(2)\n            for i in range(n - 3):\n                list.append(sum(list[-4:]))\n        return list\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def tribonacci(n):\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 1, 1]\n        elif n == 2:\n            return [0, 1, 1, 2]\n        elif n > 2:\n            return tribonacci(n - 2) + tribonacci(n - 1) + tribonacci(n)\n    return tribonacci(n)"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    n_pre = 2\n    n_last = 1\n    n_now = 1\n    result.append(n_pre)\n    result.append(n_last)\n    result.append(n_now)\n    for i in range(3,n+1):\n        if i % 2:\n            n_pre,n_last = n_last,n_now\n            n_now = n_pre + n_last + n_now\n            result.append(n_now)\n        else:\n            n_pre,n_last = n_last,n_now\n            n_now = n_pre + n_last + n_now\n            result.append(n_now)\n    return result\n    \nprint(tri(9))\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0:\n        return [1, 0, 0]\n    if n == 1:\n        return [0, 1, 1]\n    return tri(n - 1) + [sum(tri(n - 1))]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [3]\n    else:\n        fib = [1, 3]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2] + fib[i])\n        return fib\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3] + [i + n / 2 for i in tri(n - 1)]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    ret = [1, 3]\n    while len(ret) < n + 1:\n        ret.append(1 + (ret[-1] + ret[-2] + ret[-3]))\n    return ret\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l = [1, 3]\n    while len(l) < n + 1:\n        if len(l) % 2 == 0:\n            l.append(l[-2] + l[-1])\n        else:\n            l.append(l[-1] + l[-2] + l[-3])\n    return l[:n + 1]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    trib = [1, 1, 2, 4]\n    n += 1\n    for i in range(3, n):\n        if i % 2 == 0:\n            trib.append(trib[i // 2])\n        else:\n            trib.append(trib[i // 2] + trib[i // 2 - 1] + trib[i // 2 + 1])\n    return tri"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [1, 3, 2, 8]\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    number = n\n    while number > 0:\n        if number % 2 == 0:\n            even_sum += number % 10\n        else:\n            odd_sum += number % 10\n        number = number // 10\n    if even_sum == 0:\n        return odd_sum\n    else:\n        return 0\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    product = 1\n    while n > 0:\n        product *= n % 10\n        n //= 10\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    else:\n        n = str(n)\n        digits = 0\n        for digit in n:\n            if int(digit) % 2!= 0:\n                digits += int(digit)\n        return digits\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    prod = 1\n    while n > 0:\n        if n % 2 == 0:\n            n /= 10\n        else:\n            prod *= (n % 10)\n            n /= 10\n    return prod\n    \ndef odd_digits(n):\n    \"\"\"Given a positive integer n, return the sum of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    odd_digits(1)  == 0\n    odd_digits(4)  == 0\n    odd_digits(235) == 15\n    \"\"\"\n    somme = 0\n    while n > 0:\n        if n % 2 == 0:\n            n /= 10\n        else:\n            somme += (n % 10)\n            n /= 10\n    return somme\n    \ndef is_palindrome(n):\n    \"\"\"Given a positive integer n, return True if n is a palindrome and False otherwise.\n    For example:\n    is_palindrome(1)  == True\n    is_palindrome(10) == False\n    is_palindrome(101) == True\n    \"\"\"\n    s = str(n)\n    return s == s[::-1]\n    \ndef is_prime(n):\n    \"\"\"Given a positive integer n, return True if n is a prime and False otherwise.\n    For example:\n    is_prime(1) == False\n    is_prime(2) == True\n    is_prime(11) == True\n    is_prime(36) == False\n    You can assume that n is greater than 1.\n    \"\"\"\n    i = 2\n    while n > 1 and i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n    \ndef fizz_buzz(n):\n    \"\"\"Given a positive integer n, return a string that is the decimal representation of the number\n    converted to FizzBuzz. The conversion should use the following mapping:\n    0 => \"0\"\n    1 => \"1\"\n    2 => \"2\"\n    ...\n    15 => \"FizzBuzz\"\n    16 => \"16\"\n    17 => \"Fizz\"\n    18 => \"18\"\n    19 => \"19\"\n    ...\n    Assume that n is always a positive integer.\n    For example:\n    fizz_buzz(3) == \"3\"\n    fizz_buzz(15) == \"FizzBuzz\"\n    fizz_buzz(25) == \"31\"\n    \"\"\"\n    # Your code here\n    # return\n    if n % 3 == 0 and n % 5 == 0:\n        return \"FizzBuzz\"\n    elif n % 3 == 0:\n        return \"Fizz\"\n    elif n % 5 == 0:\n        return \"Buzz\"\n    else:\n        return str(n)\n    \n    "
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    product = 1\n    for d in str(n):\n        if int(d) % 2 == 0:\n            return 0\n        product *= int(d)\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    prod = 1\n    while n > 0:\n        d = n % 10\n        if d % 2:\n            prod *= d\n        n //= 10\n    return prod\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    p = 1\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            p = 0\n        else:\n            p *= i\n    return p\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = 1\n    while n > 0:\n        result *= n % 10\n        n //= 10\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    total = 1\n    while n:\n        total *= n % 10\n        n //= 10\n    return total\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 1:\n        return 0\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits(n // 10)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(string) == 0:\n        return False\n    elif len(string) == 1:\n        return False\n    else:\n        for i in range(1, len(string)):\n            if string[i] == ']' and string[i-1] == '[':\n                return True\n            elif string[i] == ']' and string[i-1] == ']':\n                return False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if string == \"[]\":\n        return False\n    stack = [0]\n    for bracket in string:\n        if bracket == \"[\":\n            stack.append(0)\n        else:\n            stack.pop()\n            if len(stack) == 0:\n                return False\n    return True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": ""
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #create list of brackets\n    #iterate through the list\n        #if the current bracket is an open bracket then we add it to the stack\n        #if the current bracket is a closed bracket and there is a previous open bracket\n            #we pop from the stack and if the bracket is not the same as the previous bracket\n                #we return False\n        #if the stack is empty then we return False\n    #if the stack is not empty but the list is empty then we return True\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": ""
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    if len(string) <= 2:\n        return False\n    \n    left = 0\n    right = 0\n    nested_counter = 0\n    \n    for bracket in string:\n        \n        if bracket == \"[\":\n            left += 1\n        \n        elif bracket == \"]\":\n            right += 1\n            \n        else:\n            return False\n            \n        if right < left:\n            nested_counter += 1\n        \n        if nested_counter > 1:\n            return True\n        \n    return False\n    \nprint(is_nested('[][]') == False)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #variables\n    open_bracket = \"[\"\n    close_bracket = \"]\"\n    #new_string = []\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": ""
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum([round(x**2) for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #return sum([int(Ceil(i**2)) for i in lst])\n    return round(sum([i**2 for i in lst]))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in lst:\n        sum += math.ceil(i**2)\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(round(el**2) for el in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum = 0\n    lst = [int(math.ceil(abs(num))) for num in lst]\n    for num in lst:\n        sum += num**2\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # list comprehension is used here, takes list of ints and squares it\n    return sum([num ** 2 for num in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n    # print(lst)\n    # lst = [1,4,9]\n    # return round(sum([((i ** 2) * 10 ** (int(i) % 1)) for i in lst]))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return round(sum([i*i for i in lst]))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst_sum = 0\n    for x in range(0,len(lst)):\n        lst[x] = int(round(lst[x]))\n        lst_sum += pow(lst[x],2)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return round(sum(n ** 2 for n in lst))\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    txt = txt.split()\n    return txt[-1].isalpha()\n    \n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # solution:\n    if len(txt) == 0:\n        return False\n    else:\n        if txt.rfind(' ') == len(txt) - 1:\n            return False\n        elif txt.rfind(' ')!= len(txt) - 1:\n            if txt[len(txt) - 1].isalpha():\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # remove last character\n    # return True if the last character is a letter, else False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(txt) > 0 and txt[-1].isalpha() and txt[-1] not in txt.split()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return txt[-1].isalpha() and not txt[-1].isalnum()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return txt.strip()[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(txt)==0:\n        return False\n    else:\n        return txt[-1].isalpha()\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(arr) < 2:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Make a copy of the array so that we can modify it\n    arr = arr[:]\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Check input:\n    if not isinstance(arr, list):\n        raise TypeError(\"can_arrange expects a list\")\n    if len(arr) < 2:\n        raise ValueError(\"can_arrange expects an array of at least 2 elements\")\n    # Initialize the output to -1\n    # Also set a variable to keep track of where the next\n    # \"greater than or equal to\" element will be.\n    greater = -1\n    i = 0\n    # Iterate over each element of the array.\n    while i < len(arr):\n        # Check if the current element is greater than or equal to the\n        # next element. If it is not, set greater to be the index of\n        # the element.\n        if arr[i] > arr[i+1]:\n            greater = i\n        i += 1\n    return greater\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(arr) < 2:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    best_index = -1\n    for i, el in enumerate(arr):\n        if best_index == -1 or arr[best_index] < el:\n            best_index = i\n    return best_index\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # keep track of where we are in the array\n    n = len(arr)\n    index = n-1\n    prev = -1\n    # keep track of the index where an element is not less than or equal to the element immediately before it\n    index_not_greater_or_equal = -1\n    # while we haven't found an index where the element is less than or equal to the element before it\n    while index_not_greater_or_equal < 0:\n        # if the element is greater than the element before it\n        if arr[index] > prev:\n            # keep track of where the element is not less than or equal to the element before it\n            index_not_greater_or_equal = index\n        # decrement index\n        index -= 1\n        # keep track of the previous element\n        prev = arr[index]\n    return index_not_greater_or_equal\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    max_index = 0\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            max_index = i\n    return max_index if max_index == i else -1"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return can_arrange_helper(arr, -1, 0, len(arr) - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    prev = -1\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > prev and prev!= -1:\n            return i\n        prev = arr[i]\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    arr.sort()\n    i = 1\n    while i < len(arr):\n        if arr[i]!= arr[i-1]:\n            return i-1\n        i += 1\n    return -1\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    negative = []\n    positive = []\n    for i in lst:\n        if i < 0:\n            negative.append(i)\n        elif i > 0:\n            positive.append(i)\n    if negative:\n        return (max(negative), min(positive))\n    elif positive:\n        return (max(positive), min(positive))\n    else:\n        return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # ans = (None, None)\n    # min_pos = None\n    # max_neg = None\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (None, None) if not lst else (max(i for i in lst if i < 0), min(i for i in lst if i > 0))\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    negatives = []\n    positives = []\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if lst == [] or None in lst:\n        return (None, None)\n    neg = []\n    pos = []\n    for i in lst:\n        if i < 0:\n            neg.append(i)\n        if i > 0:\n            pos.append(i)\n    return (max(neg), min(pos))\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # your code here\n    neg = False\n    pos = False\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    negative_lst = []\n    positive_lst = []\n    for i in lst:\n        if i >= 0:\n            positive_lst.append(i)\n        else:\n            negative_lst.append(i)\n    if negative_lst:\n        negative_lst.sort()\n        largest = negative_lst[-1]\n    else:\n        largest = None\n    if positive_lst:\n        positive_lst.sort(reverse=True)\n        smallest = positive_lst[0]\n    else:\n        smallest = None\n    return largest, smallest\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    largest = None\n    smallest = None\n    if lst:\n        for i in lst:\n            if largest is None and smallest is None:\n                if i < 0:\n                    largest = i\n                elif i > 0:\n                    smallest = i\n            else:\n                if i > largest:\n                    largest = i\n                elif i < smallest:\n                    smallest = i\n    return (largest, smallest)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    largest = None\n    smallest = None\n    if lst:\n        for n in lst:\n            if n > largest:\n                largest = n\n            if n < smallest:\n                smallest = n\n    return (largest, smallest)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if a == b:\n        return None\n    elif isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n        a = float(a)\n        b = float(b)\n        if a > b:\n            return a\n        else:\n            return b\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a if isinstance(a, int) or isinstance(a, float) else b if isinstance(b, int) or isinstance(b, float) else None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if type(a) == float or type(b) == float:\n        return max(a,b) if a > b else min(a,b)\n    if a > b:\n        return a\n    if b > a:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if isinstance(a, str) or isinstance(b, str):\n        return \"\".join([a, b]) if float(a) > float(b) else \"\".join([b, a]) if float(b) > float(a) else None\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b) if a > b else min(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b) if a > b else min(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    try:\n        if float(a) > float(b):\n            return float(a)\n        elif float(b) > float(a):\n            return float(b)\n        else:\n            return None\n    except ValueError:\n        try:\n            if float(a) > float(b):\n                return a\n            elif float(b) > float(a):\n                return b\n            else:\n                return None\n        except ValueError:\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if type(a) == int or type(a) == float:\n        if a > b:\n            return a\n        elif b > a:\n            return b\n    elif type(a) == str or type(a) == str:\n        if a > b:\n            return a\n        elif b > a:\n            return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if type(a) == type(b):\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    elif type(a) == float or type(b) == float:\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    else:\n        if a > b:\n            return a\n        else:\n            return b\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if type(a) == int and type(b) == float:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == int:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == float:\n        if float(a) > b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == str:\n        if float(a) > b:\n            return a\n        else:\n            return b\n    elif type(a) == int and type(b) == int:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == int:\n        if float(a) > b:\n            return a\n        else:\n            return b\n    elif type(a) == int and type(b) == str:\n        if float(a) > b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == str:\n        if float(a) > b:\n            return a\n        else:\n            return b\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n % 2 == 1:\n        return False\n    else:\n        i = 2\n        while i * i < n:\n            if n % i == 0:\n                return False\n            i += 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for x in range(2, (n // 2) + 1):\n        y = n - x\n        if x % 2 == 0 and y % 2 == 0:\n            if x + y == n:\n                return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = 1\n    while n > 4 * i:\n        i += 1\n    return n == 4 * i\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return True if sum([i for i in range(1, n+1) if i % 2 == 0]) == 4 else False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return is_even(n) and is_even(n-2) and is_even(n-4)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # The number is even so we only need to look for 4 even numbers\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            count += 1\n        n = n // 2\n    return count == 4\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    if n < 0: return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 6:\n        return False\n    return sum_of_4_even(n) > n\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 0:\n        raise ValueError\n    if n % 2 == 0:\n        return False\n    list_of_number = []\n    while n!= 0:\n        n, temp = n // 2, n % 2\n        list_of_number.append(temp)\n    print(list_of_number)\n    return sum(list_of_number) % 4 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return is_even(n) and is_even(n+2) and is_even(n+4) and is_even(n+6)\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    factorial = 1\n    for num in range(n, 0, -1):\n        factorial *= num\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial * i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    return 1 if n < 0 else n * special_factorial(n-1)\n    \n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            if i+1 < len(text):\n                if text[i+1] == \" \":\n                    text = text[:i] + \"_\" + text[i+1:]\n                    i = i + 1\n        i = i + 1\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = ''\n    if not isinstance(text, str):\n        return text\n    for ch in text:\n        if ch =='':\n            result += '_'\n        else:\n            result += ch\n    return result.replace('  ', '_')\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    spaces = []\n    for i in range(len(text)):\n        if text[i] == \" \":\n            spaces.append(i)\n    if len(spaces) < 2:\n        return text\n    else:\n        for i in range(len(spaces) - 1):\n            if spaces[i] == spaces[i + 1] - 1:\n                text = text[:spaces[i]] + \"_\" + text[spaces[i] + 1:]\n            else:\n                text = text[:spaces[i]] + \"-\" + text[spaces[i] + 1:]\n        return text\n    \ndef fix_case(text):\n    \"\"\"\n    Given a string text, capitalize the first letter of \n    every word and replace every digit with its word\n    \n    fix_case(\"example\") == \"Example\"\n    fix_case(\"Example\") == \"Example\"\n    fix_case(\"Example 4\") == \"Example_4\"\n    fix_case(\"Example   4\") == \"Example-4\"\n    \"\"\"\n    for i in range(len(text)):\n        if text[i].isdigit():\n            text = text[:i] + text[i].upper() + text[i + 1:]\n    return text[0].upper() + text[1:]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not isinstance(text, str):\n        raise TypeError(f\"fix_spaces() expected a string, got {type(text)} instead\")\n    return re.sub(' +', '-', text)"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    text_list = text.split()\n    new_text = \"\"\n    for i in range(len(text_list)):\n        new_text += text_list[i].replace(\" \", \"_\")\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"   \", \"_\")\n    text = text.replace(\"    \", \"_\")\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return re.sub('\\s{2,}', '_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # implement me\n    # string_list = []\n    # for character in text:\n    #     if character == \" \":\n    #         string_list.append(\"_\")\n    #     else:\n    #         string_list.append(character)\n    # fixed_text = ''.join(string_list)\n    # if len(text) > 2 and text.find('  ') > 0:\n    #     fixed_text = text.replace('  ','-').replace(' ','')\n    # return fixed_text\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    text = text.replace(' ', '_')\n    text = re.sub('\\s{2,}', '_', text)\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = \"\"\n    last_char = None\n    spaces_count = 0\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    file_name = file_name.lower()\n    return 'Yes' if len(re.findall(r'\\d',file_name)) <= 3 and len(re.findall(r'[a-z]',file_name)) == 1 and len(re.findall(r'\\.',file_name)) == 1 and (re.search(r'\\..+\\.txt',file_name) or re.search(r'\\..+\\.exe',file_name) or re.search(r'\\..+\\.dll',file_name)) else 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if(file_name[:3].isdigit()):\n        return 'No'\n    dot_position = file_name.find('.')\n    if dot_position == -1:\n        return 'No'\n    if dot_position == len(file_name) - 3:\n        return 'No'\n    if file_name[dot_position + 1: dot_position + 3] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if file_name[:dot_position] == '':\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    file_name = file_name.lower()\n    if file_name.count(\".\") > 1:\n        return \"No\"\n    elif file_name.count(\".\") == 1:\n        substring_before_dot = file_name.split(\".\")[0]\n        if len(substring_before_dot) == 0:\n            return \"No\"\n        elif not substring_before_dot[0].isalpha():\n            return \"No\"\n        elif not substring_before_dot[1:].isdigit():\n            return \"No\"\n        elif not substring_before_dot[1:].isalpha():\n            return \"No\"\n        elif not file_name.split(\".\")[1] in ['txt', 'exe', 'dll']:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if file_name.count(\".\") == 1 and file_name.split(\".\")[0]!= \"\" and file_name[0].isalpha():\n        if len(file_name.split(\".\")[1]) in range(1,4):\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(file_name.split('.'))!= 2:\n        return 'No'\n    else:\n        if file_name.split('.')[0].isalpha():\n            return 'Yes'\n        else:\n            return 'No'\n    return\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    regex_dot = re.compile('^\\D+\\.\\D+$')\n    regex_digit = re.compile('^\\d+\\D+$')\n    regex_exe = re.compile('(exe|dll)$')\n    if regex_dot.search(file_name) and regex_digit.search(file_name) and regex_exe.search(file_name):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(file_name) > 3:\n        return \"No\"\n    \n    if len(file_name) == 0:\n        return \"No\"\n    \n    if file_name[0].isdigit():\n        return \"No\"\n    \n    if file_name[-4:] not in [\".txt\", \".exe\", \".dll\"]:\n        return \"No\"\n    \n    for index in range(len(file_name)):\n        if file_name[index] == \".\":\n            file_name_substring = file_name[0:index]\n            if file_name_substring == \"\":\n                return \"No\"\n            if not file_name_substring[0].isalpha():\n                return \"No\"\n            if file_name_substring[-1].isalpha():\n                return \"No\"\n            \n            if file_name[index+1:] not in [\"txt\", \"exe\", \"dll\"]:\n                return \"No\"\n            \n            return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    name_list = file_name.split(\".\")\n    if len(name_list) == 2:\n        if name_list[0].isalpha():\n            if any(char.isdigit() for char in name_list[0]):\n                return \"No\"\n            elif name_list[1].lower() in [\"txt\", \"exe\", \"dll\"]:\n                return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    \n    indexes = [x for x in range(0,len(lst))]\n    \n    while len(indexes) > 0:\n        index = indexes.pop()\n        if index%3 == 0 and index%4!= 0:\n            lst[index] = lst[index]**2\n        if index%4 == 0 and index%3!= 0:\n            lst[index] = lst[index]**3\n    return sum(lst)\n    \nlst = [1,2,3,-1,-5,2,1,5]\nprint(sum_squares(lst)"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(lst)==0:\n        return 0\n    else:\n        sum = 0\n        for i in range(len(lst)):\n            if i%4 == 0 and i%3 == 0:\n                sum += lst[i]**3\n            elif i%3 == 0:\n                sum += lst[i]**2\n            elif i%4!= 0:\n                sum += lst[i]\n        return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s = 0\n    l = []\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            s = i**2 if i % 4 == 0 else i**3\n            l.append(s)\n    return sum(l)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    total = 0\n    for i in range(0, len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            total += lst[i]\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([elem ** 2 if i % 3 == 0 else elem ** 3 for i, elem in enumerate(lst)])"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    squared_list = []\n    for index,entry in enumerate(lst):\n        if index%3 == 0:\n            squared_list.append(entry**2)\n        elif index%4 == 0 and index%3!= 0:\n            squared_list.append(entry**3)\n        else:\n            squared_list.append(entry)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    sum = 0\n    for num in lst:\n        if num%3==0:\n            sum += num**2\n        elif num%4 == 0 and num%3!=0:\n            sum += num**3\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #The code below will be used to test your function.\n    #You can change the value of the variable(s) to test your\n    #function with different inputs.\n    #\n    #Note, this test code uses a list comprehension to generate\n    #a list of integers between 1 and 9.\n    lst = [i for i in range(1, 10)]\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not lst:\n        return 0\n    elif len(lst) == 1:\n        return lst[0] ** 2\n    elif len(lst) == 2:\n        return lst[0] ** 2 + lst[1] ** 2\n    else:\n        sum_squares = 0\n        for i in range(len(lst)):\n            if i % 3 == 0 and i % 4!= 0:\n                sum_squares += lst[i] ** 2\n            elif i % 4 == 0 and i % 3!= 0:\n                sum_squares += lst[i] ** 3\n            else:\n                pass\n        return sum_squares\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if lst == []:\n        return 0\n    return sum([num**2 if num%3 == 0 else num**3 for num in lst])"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return''.join([word for word in sentence.split() if is_prime(len(word))])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \" \".join(primes_words_in_sentence(sentence.split()))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = ''\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # print(len(sentence.split(' ')))\n    # return sentence.split(' ')\n    return''.join([w for w in sentence.split(' ') if is_prime(len(w))])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    words = sentence.split()\n    for word in words:\n        if len(word) > 2 and is_prime(len(word)):\n            print(word)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sentence = sentence.split()\n    primes = []\n    for word in sentence:\n        if len(word) == 1 or len(word) == 2:\n            primes.append(word)\n        else:\n            for i in range(2, int(len(word) / 2 + 1)):\n                if int(len(word) % i) == 0:\n                    break\n            if i == int(len(word) / 2):\n                primes.append(word)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    words = sentence.split(' ')\n    result = []\n    for word in words:\n        if len(word) == 1:\n            result.append(word)\n        else:\n            is_prime = True\n            for i in range(2, int(len(word) / 2) + 1):\n                if len(word) % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                result.append(word)\n    return''.join(result)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sentence = sentence.split()\n    return_string = \"\"\n    for word in sentence:\n        if isPrime(len(word)):\n            return_string += word + \" \"\n    return return_string.strip()\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # x = int(x.replace(\"/\", \"\"))\n    # n = int(n.replace(\"/\", \"\"))\n    return x/n == int(x/n)\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == \"0\":\n        return False\n    if \".\" in x:\n        numerator = int(x.split(\".\")[0])\n        denominator = int(x.split(\".\")[1])\n    else:\n        numerator = int(x)\n        denominator = 1\n    if not denominator % n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num = int(x.split('/')[0])\n    den = int(x.split('/')[1])\n    n_num = int(n.split('/')[0])\n    n_den = int(n.split('/')[1])\n    \n    # x * n = x * n_num / n_den\n    # x * n_num = x * n * n_den\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    num = int(x.split('/')[0])\n    denom = int(x.split('/')[1])\n    num2 = int(n.split('/')[0])\n    denom2 = int(n.split('/')[1])\n    return simplify_helper(num, denom, num2, denom2)\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    x = x.replace('/', '')\n    n = n.replace('/', '')\n    x = int(x)\n    n = int(n)\n    return x % n == 0\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    x_n = x+\"/\"+n\n    if x_n.split(\"/\")[0] == \"0\" or x_n.split(\"/\")[1] == \"0\":\n        return False\n    if x_n.split(\"/\")[0].isnumeric() and x_n.split(\"/\")[1].isnumeric():\n        if int(x_n.split(\"/\")[0])/int(x_n.split(\"/\")[1]) == int(x.split(\"/\")[0])*int(n.split(\"/\")[1]):\n            return True\n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # define result\n    result = True\n    # parse x and n\n    x_n = x.split(\"/\")\n    n_n = n.split(\"/\")\n    # define numerator and denominator\n    x_num = x_n[0]\n    x_den = x_n[1]\n    n_num = n_n[0]\n    n_den = n_n[1]\n    # divide numerator and denominator by each other\n    x_num = int(x_num) / int(x_den)\n    n_num = int(n_num) / int(n_den)\n    # check if the result is a whole number\n    if x_num % 1 == 0 and n_num % 1 == 0:\n        result = True\n    else:\n        result = False\n    return result\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return eval(x) // eval(n) == int(eval(x) / eval(n))\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return True\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda x: sum([int(i) for i in list(str(x))]))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(nums, key = lambda x: (sum([int(i) for i in str(x)]), x))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    nums = sorted(nums, key = lambda x: sum([int(i) for i in str(x)]))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), x))\n    # return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))\n    # return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))\n    # return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(nums, key=lambda x: (sum([int(y) for y in str(x)]), x))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n            count += 1\n    return count\n    \nprint(specialFilter([15, -73, 14, -15]))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # output = 0\n    # for x in nums:\n    #     if x > 10 and (int(str(x)[0]) % 2 == 1) and (int(str(x)[-1]) % 2 == 1):\n    #         output += 1\n    # return output\n    return len([x for x in nums if x > 10 and (int(str(x)[0]) % 2 == 1) and (int(str(x)[-1]) % 2 == 1)])\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    counter = 0\n    for num in nums:\n        if num > 10 and (num // 10 % 10) % 2 == 1:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0])%2 == 1 and int(str(num)[-1])%2 == 1:\n            result += 1\n    return result\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    counter = 0\n    for num in nums:\n        if (num > 10 and num % 2!= 0 and nums[0] % 2!= 0 and nums[-1] % 2!= 0):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2!= 0 and int(str(num)[-1]) % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Your code here\n    counter = 0\n    for i in nums:\n        if (i % 10 > 10 and i // 10 % 10 % 2!= 0):\n            counter += 1\n    return counter\n    \nprint(specialFilter([33, -2, -3, 45, 21, 109]))\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([1, 3, 5, 7, 9]))\nprint(specialFilter([10, 15, 20, 25, 30]))\nprint(specialFilter([11, 5, 7, 9]))\nprint(specialFilter([0, 7, 12, 45, 12]))\nprint(specialFilter([1, 3, 5, 7, 9]))\nprint(specialFilter([1, 3, 5, 7, 8]))\nprint(specialFilter([2, 3, 6, 7, 9]))\nprint(specialFilter([11, 3, 5, 7, 9]))\nprint(specialFilter([11, 3, 5, 7, 10]))\nprint(specialFilter([11, 3, 5, 7, 11]))\nprint(specialFilter([11, 3, 5, 7, 12]))\nprint(specialFilter([11, 3, 5, 7, 13]))\nprint(specialFilter([11, 3, 5, 7, 14]))\nprint(specialFilter([11, 3, 5, 7, 15]))\nprint(specialFilter([11, 3, 5, 7, 16]))\nprint(specialFilter([11, 3, 5, 7, 17]))\nprint(specialFilter([11, 3, 5, 7, 18]))\nprint(specialFilter([11, 3, 5, 7, 19]))\nprint(specialFilter([11, 3, 5, 7, 20]))\nprint(specialFilter([11, 3, 5, 7, 21]))\nprint(specialFilter([11, 3, 5, 7, 22]))\nprint(specialFilter([11, 3, 5, 7, 23]))\nprint(specialFilter([11, 3, 5, 7, 24]))\nprint(specialFilter([11, 3, 5, 7, 25]))\nprint(specialFilter([11, 3, 5, 7, 26]))\nprint(specialFilter([11, 3, 5, 7, 27]))\nprint(specialFilter([11, 3, 5, 7, 28]))\nprint(specialFilter([11, 3, 5, 7, 29]))\nprint(specialFilter([11, 3, 5, 7, 30]))\nprint(specialFilter([11, 3, 5, 7, 31]))\nprint(specialFilter([11, 3, 5, 7, 32]))\nprint(specialFilter([11, 3, 5, 7, 33]))\nprint(specialFilter([11, 3, 5, 7, 34]))\nprint(specialFilter([11, 3, 5, 7, 35]))\nprint(specialFilter([11, 3, 5, 7, 36]))\nprint(specialFilter([11, 3, 5, 7, 37]))\nprint(specialFilter([11, 3, 5, 7, 38]))\nprint(specialFilter([11, 3, 5, 7, 39]))\nprint(specialFilter([11, 3, 5, 7, 40]))\nprint(specialFilter([11, 3, 5, 7, 41]))\nprint(specialFilter([11, 3, 5, 7, 42]))\nprint(specialFilter([11, 3, 5, 7, 43]))\nprint(specialFilter([11, 3, 5, 7, 44]))\nprint(specialFilter([11, 3, 5, 7, 45]))\nprint(specialFilter([11, 3, 5, 7, 46]))\nprint(specialFilter([11, 3, 5, 7, 47]))\nprint(specialFilter([11, 3, 5, 7, 48]))\nprint(specialFilter([11, 3, 5, 7, 49]))\nprint(specialFilter([11, 3, 5, 7, 50]))\nprint(specialFilter([11, 3, 5, 7, 51]))\nprint(specialFilter([11, 3, 5, 7, 52]))\nprint(specialFilter([11, 3, 5, 7, 53]))\nprint(specialFilter([11, 3, 5, 7, 54]))\nprint(specialFilter([11, 3, 5, 7, 55]))\nprint(specialFilter([11, 3, 5, 7, 56]))\nprint(specia"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and i % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    oddNumbers = 0\n    specialNumbers = []\n    for num in nums:\n        if num > 10 and (num // 10) % 2!= 0 and (num % 10) % 2!= 0:\n            oddNumbers += 1\n            specialNumbers.append(num)\n    print(specialNumbers)\n    return oddNumbers\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num//10)%2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return ((n * (n + 1) // 2) - ((n - 1) * (n - 2) // 2)) // 3\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if ((i * i - i + 1) + (j * j - j + 1)) % 3 == 0:\n                result += 1\n    return result\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n < 0:\n        raise ValueError(\"Invalid Input\")\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    return sum([1 for i in range(len(a)-2) for j in range(i+1, len(a)-1) for k in range(j+1, len(a)) if a[i]+a[j]+a[k]%3==0])\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            k = n - 1 - j\n            if i + j + k % 3 == 0 and i < j < k:\n                count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n <= 0:\n        return 0\n    a = [i*i - i + 1 for i in range(1, n + 1)]\n    print(a)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            k = j + 1\n            if a[i] + a[j] + a[k] % 3 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # code here\n    import math\n    def isDivisibleBy3(number):\n        return number % 3 == 0\n    count = 0\n    \n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if isDivisibleBy3(i*i - i + 1) and isDivisibleBy3(j*j - j + 1):\n                count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def get_count(n):\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                k = n - i - 1\n                if i + j + k % 3 == 0:\n                    count += 1\n        return count\n    return get_count(n)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    \n    if planet1 in planets and planet2 in planets:\n        sorted_planets = []\n        for planet in planets:\n            if planet!= planet1 and planet!= planet2:\n                distance = (abs(planets.index(planet1) - planets.index(planet)))\n                if distance <= planets.index(planet2) - planets.index(planet):\n                    sorted_planets.append(planet)\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    planets = {\n    \"Mercury\": [\"The smallest planet, nearest the Sun\", False, 0],\n    \"Venus\": [\"Venus takes 243 days to rotate\", False, 0],\n    \"Earth\": [\"The only planet known to have native life\", False, 1],\n    \"Mars\": [\"The Red Planet is the second smallest planet\", False, 2],\n    \"Jupiter\": [\"The largest planet, Jupiter is a gas giant\", True, 67],\n    \"Saturn\": [\"The second largest planet is a gas giant\", True, 62],\n    \"Uranus\": [\"An ice giant with a ring system\", True, 27],\n    \"Neptune\": [\"An ice giant and farthest from the Sun\", True, 14],\n    }\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    try:\n        planet1 = planets.index(planet1)\n        planet2 = planets.index(planet2)\n        result = [planets[i] for i in range(planet1+1, planet2)] + [planets[i] for i in range(planet2+1, planet1, -1)]\n        return tuple(result)\n    except:\n        return ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets and planet2 in planets:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        result = []\n        for i in range(planet1_index + 1, planet2_index):\n            result.append(planets[i])\n        return tuple(result)\n    else:\n        return ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    return tuple(filter(lambda x: x in planets, planets[planets.index(planet1): planets.index(planet2)]))\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    return tuple(sorted(list(set(planets) & set(planet1.split()) & set(planet2.split())))))"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # Define a dictionary containing the planets and their distances to the Sun\n    # Assume the planets are in the solar system\n    planets = {\n        \"Mercury\": 0.39,\n        \"Venus\": 0.723,\n        \"Earth\": 1.0,\n        \"Mars\": 1.524,\n        \"Jupiter\": 5.203,\n        \"Saturn\": 9.537,\n        \"Uranus\": 19.213,\n        \"Neptune\": 30.061\n    }\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    pl1 = planet1.lower()\n    pl2 = planet2.lower()\n    \n    if pl1 not in planets or pl2 not in planets:\n        return ()\n    \n    for i in range(len(planets)):\n        if planets[i] == pl1:\n            pl1_idx = i\n    for i in range(len(planets)):\n        if planets[i] == pl2:\n            pl2_idx = i\n    pl1_orbit = []\n    pl2_orbit = []\n    \n    for i in range(len(planets)):\n        if planets[i]!= planets[pl1_idx]:\n            pl1_orbit.append(planets[i])\n    for i in range(len(planets)):\n        if planets[i]!= planets[pl2_idx]:\n            pl2_orbit.append(planets[i])\n    \n    if pl1_idx > pl2_idx:\n        pl1_orbit.pop(-1)\n    elif pl1_idx < pl2_idx:\n        pl2_orbit.pop(0)\n    \n    result = pl1_orbit + pl2_orbit\n    return tuple(result)\n    "
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Use a dictionary to associate names with orbits\n    planets = {}\n    planets['Mercury'] = 0.387\n    planets['Venus'] = 0.723\n    planets['Earth'] = 1\n    planets['Mars'] = 1.524\n    planets['Jupiter'] = 5.204\n    planets['Saturn'] = 9.543\n    planets['Uranus'] = 19.213\n    planets['Neptune'] = 30.061\n    \n    # Find the planets that orbit between two planets\n    min_orbit = planets[planet1]\n    max_orbit = planets[planet2]\n    \n    return tuple(sorted((list(planets.keys())[list(planets.values()).index(min_orbit)],\n                    list(planets.keys())[list(planets.values()).index(max_orbit)])))\n    \n    "
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst_sorted = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            lst_sorted.append(word)\n    return sorted(lst_sorted)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(lst, key=lambda x: (len(x), x))"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(list(filter(lambda x: len(x)%2 == 0, lst)), key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Write your code here\n    result = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            result.append(i)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Sol.1\n    # return sorted(lst, key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst = sorted(lst, key=len)\n    for i, val in enumerate(lst):\n        if len(val) % 2!= 0:\n            del lst[i]\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Code goes here\n    return sorted(list(set(lst)), key = lambda x: (-len(x), x))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(lst, key=lambda x: (len(x), x))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sorted_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_list.append(word)\n    return sorted_list\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst = list(filter(None, lst))\n    lst.sort()\n    return sorted(lst, key=lambda i: (len(i), i))\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    elif n > 2:\n        return x_or_y(x, y, x_or_y(n - 1, y, x))\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    if n % 2 == 1:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1:\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 2:\n        return x\n    if n == 2:\n        return y\n    \n    if n % 2 == 0:\n        return x_or_y(n / 2, x, y) ** 2\n    else:\n        return x_or_y(3 * n + 1, y, x)\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 2:\n        raise Exception(\"n should be a positive integer\")\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 1:\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    if n == y:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum([i*i for i in lst if i % 2 == 1])\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    odd_nums = [x for x in lst if x > 0 and x % 2 == 1]\n    return sum([x ** 2 for x in odd_nums])\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    odd_list = []\n    for num in lst:\n        if type(num) == int and num % 2 == 1:\n            odd_list.append(num ** 2)\n    return sum(odd_list)\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    solution = 0\n    for number in lst:\n        if number < 0 or not number % 2:\n            continue\n        solution += number ** 2\n    return solution\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([]))\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(i**2 for i in lst if i % 2 == 1)\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = 0\n    if len(lst) > 0:\n        for i in lst:\n            if i < 0:\n                i = abs(i)\n            if i % 2!= 0:\n                result += i ** 2\n    return result\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sum = 0\n    if lst == []:\n        return 0\n    for item in lst:\n        if item % 2!= 0 and item > 0:\n            sum += item * item\n    return sum\n    \n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    total = 0\n    for x in lst:\n        if x > 0 and x % 2!= 0:\n            total += x**2\n        \n    return tota"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # \n    # TODO: Write code here\n    #\n    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = 0\n    for i in lst:\n        if i < 0:\n            continue\n        elif i % 2!= 0:\n            result += i ** 2\n    return result\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    score, guess = list(game), list(guess)\n    return [0 if guess[i] == score[i] else abs(guess[i] - score[i]) for i in range(len(score))]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return resul"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    #take a guess and compare it to a match\n    # if match return 0\n    #if not return the absolute value of the guess and match\n    #because no matter the match guess is absolute difference\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    #I think we all remember that feeling when the result of some long-awaited\n    #event is finally known. The feelings and thoughts you have at that moment are\n    #definitely worth noting down and comparing.\n    #Your task is to determine if a person correctly guessed the results of a number of matches.\n    #You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    #Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    #the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    #code here\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # your code here\n    return 0\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [abs(guess[i]-game[i]) for i in range(len(game))]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def get_diffs(lst1,lst2):\n        diffs = []\n        for guess,result in zip(lst1,lst2):\n            diffs.append(abs(result - guess))\n        return diffs\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [abs(guess[index]-game[index]) for index,guess in enumerate(guess)]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #I think this is actually pretty straight forward\n    #loop through each guess and compare to the score\n    # if guess == score then return 0\n    # if guess!= score then return abs(guess - score)\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    #return [abs(x - y) for x, y in zip(game, guess)]\n    \n    #return [abs(x - y) for x, y in zip(game, guess)]\n    \n    return list(map(lambda x, y: abs(x - y), game, guess))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # return the string \"ClassName.StrongestExtensionName\"\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    extensions = sorted(extensions, key=len, reverse=True)\n    highest_strength = -1\n    for extension in extensions:\n        extension_strength = sum(x.isupper() for x in extension) - sum(x.islower() for x in extension)\n        if extension_strength > highest_strength:\n            highest_strength = extension_strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    ext_strength = []\n    for ext in extensions:\n        CAP = sum(c.isupper() for c in ext)\n        SM = sum(c.islower() for c in ext)\n        strength = CAP - SM\n        ext_strength.append(strength)\n    ext_strength.sort()\n    strongest = extensions[ext_strength.index(max(ext_strength))]\n    return class_name + '.' + strongest\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    cap_count = sum(c.isupper() for c in class_name)\n    lower_count = sum(c.islower() for c in class_name)\n    \n    return class_name + \".\" + extensions[0] if (cap_count - lower_count)/len(class_name) == max(\n        (cap_count - lower_count)/len(ext) for ext in extensions) else class_name + \".\" + extensions[1]\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    best_extension = None\n    best_strength = 0\n    for extension in extensions:\n        cap = len([c for c in extension if c.isupper()])\n        sm = len([c for c in extension if c.islower()])\n        strength = cap - sm\n        if strength > best_strength:\n            best_extension = extension\n            best_strength = strength\n    return class_name + '.' + best_extension\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # your code here\n    return class_name + '.' + extensions[0]\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"{}.{}\".format(class_name, extensions[0])\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Extension name and strength\n    strongest_extension = ''\n    strength = 0\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    strongest_extension = ''\n    strongest_strength = 0\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n            elif letter.islower():\n                strength += -1\n        if strength > strongest_strength:\n            strongest_extension = class_name + '.' + extension\n            strongest_strength = strength\n    return strongest_extension\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(b)):\n        if a.find(b)!= -1:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    x = len(a)\n    y = len(b)\n    if x < y:\n        return False\n    for i in range(0,x-y+1):\n        if a[i:i+y] == b:\n            return True\n    return False"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pattern_arr = []\n    pattern_arr.extend(a)\n    pattern_arr.extend(a[::-1])\n    result = False\n    for x in pattern_arr:\n        if b.find(x)!= -1:\n            result = True\n            break\n    return result\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if b in a:\n        return True\n    for i in range(len(b)):\n        if b in a + a:\n            return True\n        b=b[1:]+b[0]\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pattern = set()\n    for i in range(1,len(b)):\n        pattern.add(b[0:i])\n    # print(pattern)\n    if a in pattern:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # print(a,b)\n    for i in range(len(a)):\n        if b in a[i:]:\n            return True\n        elif b in a[i:]+a:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # return True if a string or its rotations is a substring of b else return False\n    # a is string, b is string\n    # return True or False\n    if len(b) < len(a):\n        return False\n    if a.find(b) == -1:\n        return False\n    for i in range(1,len(b)-1):\n        if a.find(b[i:len(b)]) > -1 or a.find(b[0:i]) > -1:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if(len(a)<len(b)):\n        b = b[::-1]\n    return b in a\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # remove all the spaces\n    a = \"\".join(a.split())\n    b = \"\".join(b.split())\n    a = [i for i in a]\n    a_len = len(a)\n    b_len = len(b)\n    # return False if a is longer than b\n    if a_len < b_len:\n        return False\n    # return True if b is in a\n    for i in range(a_len-b_len+1):\n        if a[i:i+b_len] == b:\n            return True\n    return False"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if a.find(b)!= -1:\n        return True\n    for i in range(len(b)):\n        if b[i:]+b[:i] in a:\n            return True\n    return False\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    even, odd = 0, 0\n    while num:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return even, odd\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # If the number is positive, then the count of even digits is equal to the sum of the digits which are even\n    # So if the number is negative, then the number is converted to positive and then we return the count\n    # of even and odd digits\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (num//10)%2, num%10\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if num < 0:\n        return (0, 1)\n    else:\n        count_even = 0\n        count_odd = 0\n        while num > 0:\n            if num % 10 % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n            num //= 10\n        return (count_even, count_odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return (num // 10 % 10, num % 10)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if num < 0:\n        num = abs(num)\n        return (0, len(str(num)) - 1)\n    return (len([i for i in str(num) if int(i) % 2 == 0]), len([i for i in str(num) if int(i) % 2!= 0]))\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    odd_digit = 0\n    even_digit = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_digit += 1\n        else:\n            odd_digit += 1\n    return odd_digit, even_digit\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (num//10)%2, num%10\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if num == 0:\n        return (0, 0)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # TODO: Your code goes here\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return _convert_to_roman_numeral(number, mini_roman_numeral_mappings)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not isinstance(number, int) or number <= 0 or number > 1000:\n        return ''\n    roman = ''\n    # generate the roman numeral string\n    # The first value in the tuple is the value of the corresponding symbol\n    # and the second value is its corresponding value\n    for i in (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1):\n        roman += int_to_roman(number // i, roman_numeral_dict_1[i])\n        number %= i\n    return roman.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    mini_roman_dict = {\n        1000 :'m', 900 : 'cm', 500 : 'd', 400 : 'cd', 100 : 'c', 90 : 'xc',\n        50 : 'l', 40 : 'xc', 10 : 'x', 9 : 'ix', 5 : 'v', 4 : 'iv', 1 : 'i'\n    }\n    roman_numeral = \"\"\n    for num in mini_roman_dict:\n        if number == 0:\n            break\n        count = number // num\n        roman_numeral += count * mini_roman_dict[num]\n        number -= (count * num)\n    return roman_numeral.lower()"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    roman_numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    if number in range(1, 1001):\n        result = ''\n        remainder = number\n        while remainder > 0:\n            for i in roman_numerals.keys():\n                while remainder >= roman_numerals[i]:\n                    result += i\n                    remainder -= roman_numerals[i]\n        return result.lower()\n    else:\n        return 'Out of range'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    num_list = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    num_symbol = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        if number >= num_list[i]:\n            roman_num += num_symbol[i]\n            number -= num_list[i]\n        else:\n            i += 1\n    return roman_num.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not isinstance(number, int):\n        raise TypeError(\"Input is not an integer!\")\n    if number < 1 or number > 1000:\n        raise ValueError(\"Input is not within range!\")\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert number <= 1000 and number >= 1, 'Restriction: 1 <= num <= 1000'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not (isinstance(number, int) and 1 <= number <= 1000):\n        return 'InputError: Number must be between 1 and 1000 inclusive'\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (c**2 + a**2 == b**2)\n    # write your own test cases\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #raise NotImplementedError\n    if not (a + b > c and a + c > b and b + c > a):\n        return False\n    if a == b or a == c or b == c:\n        return True\n    if a * a + b * b == c * c or a * a + c * c == b * b or b * b + c * c == a * a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return a*a + b*b == c*c or b*b + c*c == a*a or a*a + c*c == b*b\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # import sys\n    # print sys.maxsize\n    a, b, c = sorted([a, b, c])\n    return (a**2 + b**2) == (c**2)\n    # return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    if a + b > c and b + c > a and c + a > b:\n        return True\n    else:\n        return False\n    \ndef pythagorean_triplet(a, b, c):\n    '''\n    Given three numbers a, b and c, determine if they form a Pythagorean triplet.\n    A Pythagorean triplet is a set of three numbers a, b, c, such that a2 + b2 = c2\n    Example:\n    pythagorean_triplet(3, 4, 5) == True\n    pythagorean_triplet(1, 2, 3) == False\n    '''\n    \n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n        \ndef factorial(n):\n    '''\n    Given a number n, return the factorial of n.\n    Example:\n    factorial(4) == 24\n    '''\n    \n    i = 1\n    while n!= 0:\n        i *= n\n        n -= 1\n    return i\n    \ndef fibonacci(n):\n    '''\n    Given a number n, find the nth Fibonacci number. The Fibonacci sequence is defined\n    by the recurrence relation: Fn = Fn\u22121 + Fn\u22122, where F1 = 1 and F2 = 1. Hence the\n    first 12 Fibonacci numbers are 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, and 144.\n    Example:\n    fibonacci(8) == 21\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef gcd(a, b):\n    '''\n    Given two integers a and b, return the greatest common divisor of a and b. \n    The greatest common divisor of two integers is the largest integer that divides \n    both numbers without remainder.\n    Example:\n    gcd(7, 14) == 2\n    gcd(5, 10) == 5\n    '''\n    \n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n    \ndef test_right_angle_triangle():\n    print('Testing right_angle_triangle()...', end='')\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(4, 3, 5) == False\n    assert right_angle_triangle(2, 3, 4) == True\n    assert right_angle_triangle(1, 1, 1) == True\n    assert right_angle_triangle(0, 0, 1) == True\n    assert right_angle_triangle(2, 1, 3) == True\n    assert right_angle_triangle(1, 3, 2) == True\n    assert right_angle_triangle(3, 2, 1) == True\n    print('Passed')\n    \ndef sum_of_digits(n):\n    '''\n    Given a positive integer n, return the sum of the digits in n.\n    Example:\n    sum_of_digits(234) == 9\n    sum_of_digits(38) == 10\n    sum_of_digits(1000) == 13\n    sum_of_digits(999) == 14\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef test_sum_of_digits():\n    print('Testing sum_of_digits()...', end='')\n    assert sum_of_digits(234) == 9\n    assert sum_of_digits(38) == 10\n    assert sum_of_digits(1000) == 13\n    assert sum_of_digits(999) == 14\n    print('Passed')\n    \ndef count_digits(n):\n    '''\n    Given a positive integer n, return the number of digits in n.\n    Example:\n    count_digits(1234) == 4\n    count_digits(0) == 1\n    count_digits(1) == 1\n    count_digits(9) == 1\n    count_digits(99) == 2\n    '''\n    return len([i for i in str(n)])\n    \ndef test_count_digits():\n    print('Testing count_digits()...', end='')\n    assert count_digits(1234) == 4\n    assert count_digits(0) == 1\n    assert count_digits(1) == 1\n    assert count_digits(9) == 1\n    assert count_digits(99) == 2\n    print('Passed')\n    \ndef count_evens(nums):\n    '''\n    Given a list of numbers, return the number of even numbers in the list.\n    Example:\n    count_evens([2, 3, 4, 5, 6]) == 3\n    count_evens([2, 3, 4, 5, 6, 7, 8]) == 4\n    count_evens([2, 3, 5, 7]) == 0\n    count_evens([1, 3, 5]) == 0\n    '''\n    return len([i for i in nums if i % 2 == 0])\n    \ndef test_count_evens():\n    print('Testing count_evens()...', end='')\n    assert count_evens([2, 3, 4, 5, 6]) == 3\n    assert count_evens([2, 3, 4, 5, 6, 7, 8]) == 4\n    assert count_evens([2, 3, 5, 7]) == 0\n    assert count_evens([2, 3, 5]) == 0\n    assert count_evens([1, 3, 5]) == 0\n    print('Passed')\n    \ndef sum_floats(nums):\n    '''\n    Given a list of numbers, return the sum of the numbers that are floats.\n    Example:\n    sum_floats([1.5, 2.4, 'awesome', [], 1]) == 3.9\n    sum_floats([1, 2, 3]) == 0\n    sum_floats([1, 2, 3, I Love Python]) == 0\n    '''\n    return sum([i for i in nums if type(i) == float])\n    \ndef tes"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if ((a**2) + (b**2)) == (c**2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif c**2 + b**2 == a**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    words_dict = {}\n    #use dict to find the words with same chars \n    #and find the one with max unique chars\n    \n    for word in words:\n        unique_chars = len(set(word))\n        words_dict[word] = unique_chars\n    \n    max_val = max(words_dict.values())\n    \n    #return the key with max unique chars if more than one key have max unique chars\n    max_unique_words = []\n    for key in words_dict:\n        if words_dict[key] == max_val:\n            max_unique_words.append(key)\n    \n    return sorted(max_unique_words)[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # if no word in list return None\n    if not words:\n        return None\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    unique_chars = [set(word) for word in words]\n    max_unique_chars = max(unique_chars, key = lambda x: len(x))\n    unique_chars.sort(key = lambda x: (-len(x), x))\n    return unique_chars[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    unique = [len(set(word)) for word in words]\n    max_unique = max(unique)\n    return sorted(words, key=lambda x: (len(x), x))[-1] if unique.count(max_unique) > 1 else sorted(words, key=lambda x: (unique.count(max_unique), len(x), x))[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    unique_chars = []\n    for word in words:\n        if not unique_chars:\n            unique_chars.append(word)\n        else:\n            for char in word:\n                if char not in unique_chars:\n                    unique_chars.append(char)\n    unique_chars.sort()\n    return unique_chars[-1]\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    unique = 0\n    max_word = None\n    for word in words:\n        if len(set(word)) > unique:\n            unique = len(set(word))\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    dct = {}\n    for word in words:\n        if word in dct:\n            dct[word] += 1\n        else:\n            dct[word] = 1\n    max_len = len(words[0])\n    max_word = words[0]\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_wor"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return None\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    unique_characters = {}\n    for word in words:\n        count = len(set(word))\n        unique_characters[word] = count\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    words = [x for x in words if len(x) > 0]\n    if len(words) < 1:\n        return \"\"\n    unique_chars = [set(x) for x in words]\n    unique_chars_count = [len(x) for x in unique_chars]\n    max_index = unique_chars_count.index(max(unique_chars_count))\n    return words[max_index]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pas"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if remaining == 0:\n        return [number,0]\n    elif number < need:\n        return [number,remaining]\n    else:\n        return [number-need,remaining-need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if remaining < need:\n        return [number + remaining, 0]\n    return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # write your code here\n    return [number + need, remaining - need] if remaining >= need else [number + remaining, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    if number > remaining:\n        if number > need:\n            result = [remaining, 0]\n        else:\n            result = [need, 0]\n    else:\n        if (remaining - number) > need:\n            result = [number + need, need]\n        else:\n            result = [number + (remaining - number), remaining - number]\n    \n    return result\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return [number + need, remaining - need]\n    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    result = 0\n    for i in range(len(operand)):\n        result += operator[i]*operand[i]\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    raise NotImplementedError()\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if type(operator)!= list or type(operand)!= list:\n        return None\n    if len(operator)!= len(operand) - 1:\n        return None\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result /= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n    \n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = operand[0]\n    operand.pop(0)\n    for i in range(len(operator)):\n        if operator[i] == \"+\":\n            result += operand[0]\n            operand.pop(0)\n        elif operator[i] == \"-\":\n            result -= operand[0]\n            operand.pop(0)\n        elif operator[i] == \"*\":\n            result *= operand[0]\n            operand.pop(0)\n        elif operator[i] == \"//\":\n            result //= operand[0]\n            operand.pop(0)\n        elif operator[i] == \"**\":\n            result **= operand[0]\n            operand.pop(0)\n        else:\n            print(\"Error: Invalid operation.\")\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = 0\n    for i in range(0, len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join(map(lambda x: x.swapcase() if x.isalpha() else x, s))\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = s.lower()\n    l = [x if x.isalpha() else x.swapcase() for x in s]\n    return ''.join(l)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s_list = [char for char in s]\n    for i in range(len(s_list)):\n        if s_list[i].isalpha():\n            if s_list[i].isupper():\n                s_list[i] = s_list[i].lower()\n            else:\n                s_list[i] = s_list[i].upper()\n    return ''.join(s_list)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                i = i.lower()\n            else:\n                i = i.upper()\n        result.append(i)\n    if not result:\n        result = s[::-1]\n    return ''.join(result)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    import re\n    return re.sub('[a-zA-Z]',lambda x: x.group(0).upper() if x.group(0).islower() else x.group(0).lower(), s)\n    pass\nif __name__ == '__main__':\n    print solve(\"1234\")\n    print solve(\"ab\")\n    print solve(\"#a@C\")\n    print solve(\"aba#c\")"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a = [i if i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' else i.lower() if i.isupper() else i.upper() for i in s]\n    return ''.join(a)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return re.sub(r'[A-Za-z]', lambda x: x.group(0).swapcase(), s)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    res = []\n    for c in s:\n        if c.islower():\n            res.append(c.upper())\n        elif c.isupper():\n            res.append(c.lower())\n        else:\n            res.append(c)\n    return \"\".join(res)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join([i if i.isalpha() else i.upper() if i.isalpha() == False else i.lower() for i in s])\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    hash = hashlib.md5()\n    hash.update(text.encode(\"utf8\"))\n    return hash.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(text) == 0:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not text:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not text:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not text:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return hashlib.md5(text.encode('utf-8')).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    md5_hash = None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    hash_object = hashlib.md5(text.encode())\n    return hash_object.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [int(x) for x in list(str(a)) if int(x) % 2 == 0 and int(x) < b and int(x) >= a]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    integers = []\n    num = a\n    while num <= b:\n        if num % 2 == 0 and num <= b:\n            integers.append(num)\n        num += 1\n    return integers\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    evens = []\n    if (a % 2 == 0 or a == 0) and (b % 2 == 0 or b == 0):\n        if a < b:\n            while a < b:\n                evens.append(a)\n                a += 2\n        else:\n            while a > b:\n                evens.append(a)\n                a -= 2\n    return evens\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    evens = []\n    for n in range(a, b+1):\n        if n % 2 == 0:\n            evens.append(n)\n    return evens\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a % 2!= 0 or b % 2!= 0:\n        return []\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    ret = []\n    for i in range(min(a, b), max(a, b) + 1):\n        if i % 2 == 0:\n            ret.append(i)\n    return ret"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    ret = []\n"
    }
]