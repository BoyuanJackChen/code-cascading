[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert isinstance(numbers, list)\n    assert isinstance(threshold, float)\n    assert len(numbers) > 0\n    assert threshold > 0\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n",
        "num_ids": 82
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if j!= i and abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(0, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if (numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(numbers) == len(set(numbers)) \\\n        and any([True if abs(numbers[i] - numbers[j]) <= threshold else False for i in range(len(numbers)) \\\n                for j in range(len(numbers)) if i!= j])\n",
        "num_ids": 70
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return all(abs(x - y) > threshold for x, y in zip(numbers, numbers[1:]))\n",
        "num_ids": 29
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert 0 < threshold <= 1\n    return len(numbers) > 0 and any(any([abs(n1 - n2) < threshold for n2 in numbers])\n                                     for n1 in numbers)\n",
        "num_ids": 49
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    n = len(numbers)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold and i!= j:\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    last_num = None\n    for num in numbers:\n        if last_num and abs(num - last_num) < threshold:\n            return True\n        last_num = num\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return [\n    #     s\n    #     for s in paren_string.split(\"(\")\n    #     if s.endswith(\")\")\n    # ]\n",
        "num_ids": 44
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    list_of_groups = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            current_group.append(char)\n        elif char == ')':\n            current_group.pop()\n            if len(current_group) == 0:\n                list_of_groups.append(''.join(current_group))\n                current_group = []\n    return list_of_groups\n",
        "num_ids": 105
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    groups = []\n    curr_group = ''\n    for c in paren_string:\n        if c == '(':\n            if curr_group:\n                groups.append(curr_group)\n                curr_group = ''\n        if c == ')':\n            if curr_group:\n                groups.append(curr_group)\n                curr_group = ''\n            groups.append(')')\n        curr_group += c\n    return groups\n",
        "num_ids": 113
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        if char == ')':\n            if stack:\n                stack.pop()\n            else:\n                stack.append(char)\n    print(stack)\n    while stack:\n        result.append(stack.pop())\n    return result\n",
        "num_ids": 92
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    groups = []\n    stack = []\n    for i in range(len(paren_string)):\n        char = paren_string[i]\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            try:\n                stack.pop()\n            except IndexError:\n                print(f'Separate groups can not be separated at {i}th index')\n                break\n        if not stack:\n            groups.append(paren_string[:i + 1])\n    return groups\n",
        "num_ids": 124
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    stack = []\n    result = []\n    for paren in paren_string:\n        if paren == \"(\":\n            stack.append(paren)\n        elif paren == \")\":\n            if stack:\n                stack.pop()\n            else:\n                result.append(\"\".join(stack))\n                stack = []\n                result.append(paren)\n        else:\n            if stack:\n                stack.append(paren)\n    result.append(\"\".join(stack))\n    return result\n",
        "num_ids": 119
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    stack = []\n    for char in paren_string:\n        if char == '(' or char == ')':\n            stack.append(char)\n",
        "num_ids": 37
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    string = list(paren_string)\n    while string:\n        if string[0] == '(':\n            string = string[1:]\n        elif string[0] == ')':\n            string = string[1:]\n            if len(string) == 0:\n                result.append('')\n            else:\n                result.append(''.join(string))\n                string = [string.pop(0)]\n    return result\n",
        "num_ids": 107
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if number == 0:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return math.floor(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return math.floor(number) - (math.floor(number) * 10) + (number - math.floor(number))\n",
        "num_ids": 31
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #first_digit = math.floor(number)\n    #decimals = number - first_digit\n    decimals = number - int(number)\n    return decimals\n",
        "num_ids": 44
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a = number\n    decimal = 0\n    while a > 0:\n        a *= 0.1\n        decimal += 1\n    return decimal - 1\n",
        "num_ids": 39
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if number < 0:\n        raise ValueError('Number must be a positive number.')\n    decimal, integer = divmod(number, 1)\n    decimal_part = 0\n    if decimal > 1:\n        decimal_part = 1\n        decimal = 1\n    return decimal\n",
        "num_ids": 69
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return True if min(operations) < 0 else False\n",
        "num_ids": 15
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return True if operations and operations[0] < 0 else False\n",
        "num_ids": 16
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= operation\n",
        "num_ids": 34
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return not sum(operations)\n",
        "num_ids": 10
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    operations.append(0)\n    if len(operations) % 2 == 0:\n        return False\n    else:\n        for i in range(0, len(operations), 2):\n            if operations[i] == operations[i+1] == '-':\n                return True\n            elif operations[i] == '-' and operations[i+1]!= '-':\n                return True\n            elif operations[i]!= '-' and operations[i+1] == '-':\n                return True\n            else:\n                return False\n",
        "num_ids": 131
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    current_balance = 0\n    for operation in operations:\n        current_balance += operation\n        if current_balance < 0:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    is_zero = True\n    for operation in operations:\n        if operation < 0:\n            is_zero = False\n            break\n        else:\n            is_zero = True\n    return is_zero\n",
        "num_ids": 49
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(operations) == 0:\n        return False\n    if operations[0] < 0:\n        return True\n    return below_zero(operations[1:])\n",
        "num_ids": 43
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = True\n    for i in operations:\n        if i < 0:\n            result = False\n            break\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(map(lambda x: abs(x - sum(numbers) / len(numbers)), numbers)) / len(numbers)\n",
        "num_ids": 34
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert numbers, 'Input array cannot be empty'\n    return sum([abs(x - mean(numbers)) for x in numbers]) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return sum([abs(x - sum(numbers) / len(numbers)) for x in numbers]) / len(numbers)\n    pass\n",
        "num_ids": 36
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    median = mean(numbers)\n    mad = 0\n    for num in numbers:\n        mad += abs(median - num)\n    return mad / len(numbers)\n",
        "num_ids": 44
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(number - mean) for number in numbers]) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    mean = sum(numbers) / len(numbers)\n    difference = abs(x - mean) for x in numbers\n    return sum(difference) / len(difference)\n",
        "num_ids": 45
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum_of_absolute_differences = sum(abs(number - sum(numbers) / len(numbers)))\n    return sum_of_absolute_differences / len(numbers)\n",
        "num_ids": 46
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    average = sum(numbers) / len(numbers)\n    return sum([abs(number - average) for number in numbers]) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return list(map(lambda i: delimeter if i == len(numbers) - 1 else delimeter if i % 2 == 0 else numbers[i], range(len(numbers))))\n",
        "num_ids": 44
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n",
        "num_ids": 81
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not numbers:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [delimeter] + list(numbers[0::2]) + [delimeter] + list(numbers[1::2])\n",
        "num_ids": 33
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [delimeter] + [numbers[i - 1] for i in range(1, len(numbers))] + [delimeter]\n",
        "num_ids": 35
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [numbers[0]] + [delimeter] + list(numbers[1:-1]) + [numbers[-1]] if len(numbers) > 1 else []\n",
        "num_ids": 43
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Initiate output list and loop\n    output = []\n    for num in numbers:\n        output.append(num)\n        output.append(delimeter)\n    # Remove last element of the list\n    output.pop()\n    return output\n",
        "num_ids": 58
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [delimeter] + numbers + [delimeter]\n",
        "num_ids": 15
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for index in range(len(numbers) - 1):\n        result.append(numbers[index])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # base case\n    if len(numbers) <= 1:\n        return numbers\n",
        "num_ids": 21
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    stack = []\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if stack:\n                stack.pop()\n",
        "num_ids": 46
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    paren_list = paren_string.split()\n    depth_list = []\n",
        "num_ids": 21
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    paren_list = []\n",
        "num_ids": 8
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    temp_level = 0\n    parens = list(paren_string)\n    for i, paren in enumerate(parens):\n        if paren == '(':\n            temp_level += 1\n            if i+1 < len(parens) and parens[i+1] == ')':\n                result.append(0)\n                continue\n        elif paren == ')':\n            if temp_level > 0:\n                result.append(temp_level)\n                temp_level -= 1\n            else:\n                result.append(0)\n    return result\n",
        "num_ids": 141
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    nested_parens = []\n    max_nesting = 0\n    nested_parens = paren_string.split(\" \")\n    for paren in nested_parens:\n        if paren == \"\":\n            nested_parens.remove(paren)\n    \n    for paren in nested_parens:\n        nesting = 0\n        level = 0\n        for char in paren:\n            if char == \"(\":\n                level += 1\n            elif char == \")\":\n                nesting += 1\n                if nesting > max_nesting:\n                    max_nesting = nesting\n        nested_parens.remove(paren)\n        nested_parens.append(max_nesting)\n",
        "num_ids": 170
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # TODO: Implement this function\n    # Please use 'print' to show the level of nesting\n    # YOUR CODE HERE\n    nested_list = paren_string.split()\n    max_level = 0\n    nesting_list = []\n",
        "num_ids": 59
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Open and close parentheses in input string\n    open_parens = '('\n    close_parens = ')'\n    # Keep track of the maximum level of nesting\n    max_level = 0\n    # Keep track of the number of parentheses\n    parens_count = 0\n    # Keep track of current level of nesting\n    current_level = 0\n    # Keep track of open and close parentheses\n    open_paren = None\n    close_paren = None\n    # Keep track of nested parentheses\n    parens = []\n    # Iterate over each char in input string\n    for char in paren_string:\n        # If current char is an open parenthesis\n        if char == open_parens:\n            # Increment number of open parentheses\n            parens_count += 1\n            # If no open parenthesis has been found yet\n            if open_paren is None:\n                # Set open parenthesis to current char\n                open_paren = char\n            # Increment level of nesting\n            current_level += 1\n            # If current level of nesting is greater than max level of nesting\n            if current_level > max_level:\n                # Set max level of nesting to current level of nesting\n                max_level = current_level\n        # If current char is a close parenthesis\n        elif char == close_parens:\n            # Decrement number of open parentheses\n            parens_count -= 1\n            # If the number of open parentheses is equal to the current level of nesting\n            if parens_count == current_level:\n                # Append current level of nesting to list of nested parentheses\n                parens.append(current_level)\n                # Decrement level of nesting\n                current_level -= 1\n                # Set open parenthesis to None\n                open_paren = None\n    # Return list of nested parentheses\n    return parens\n",
        "num_ids": 419
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    parens_list = paren_string.split()\n    max_depth = []\n    for i in parens_list:\n        if i[0] == '(':\n            max_depth.append(1)\n        elif i[0] == ')':\n            max_depth.pop()\n        else:\n            continue\n    return max_depth\n",
        "num_ids": 86
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # print(parse_nested_parens.__doc__)\n    assert isinstance(paren_string, str), \"Input must be a string\"\n    return [len(max(group, key=len)) for group in paren_string.split()]\n",
        "num_ids": 62
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    level = 0\n    index = 0\n    nested_list = []\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            level += 1\n        elif paren_string[index] == ')':\n            level -= 1\n        if level > 0:\n            nested_list.append(level)\n        index += 1\n    return nested_list\n",
        "num_ids": 97
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [x for x in strings if substring in x]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [x for x in strings if substring in x]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return list(filter(lambda s: substring in s, strings))\n    substring_len = len(substring)\n    return [s for s in strings if substring in s]\n",
        "num_ids": 46
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sum_ = 0\n    product_ = 1\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n    return sum_, product_\n",
        "num_ids": 41
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sum_ = 0\n    product = 1\n    for n in numbers:\n        sum_ += n\n        product *= n\n    return sum_, product\n",
        "num_ids": 38
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)\n",
        "num_ids": 56
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum_ = 0\n    prod_ = 1\n    for number in numbers:\n        sum_ += number\n        prod_ *= number\n    return sum_, prod_\n",
        "num_ids": 43
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result_sum = 0\n    result_product = 1\n    for number in numbers:\n        result_sum += number\n        result_product *= number\n    return result_sum, result_product\n",
        "num_ids": 47
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        return sum(numbers), reduce(operator.mul, numbers, 1)\n",
        "num_ids": 38
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert len(numbers)!= 0, \"Empty list not allowed\"\n    if len(numbers) == 1:\n        return (numbers[0], numbers[0])\n    else:\n        return (numbers[0] + sum_product(numbers[1:])[0], numbers[0] * sum_product(numbers[1:])[1])\n",
        "num_ids": 87
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not numbers:\n        return (0, 1)\n    n = len(numbers)\n    s = 0\n    p = 1\n    for i in range(0, n):\n        s += numbers[i]\n        p *= numbers[i]\n    return (s, p)\n",
        "num_ids": 70
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)\n",
        "num_ids": 67
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i + 1]))\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if numbers == []:\n        return []\n    return [max(numbers)] + rolling_max(numbers[1:])\n",
        "num_ids": 32
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    results: List[int] = []\n    for i in range(len(numbers)):\n        if i == 0:\n            results.append(numbers[i])\n            continue\n        results.append(max(numbers[i], numbers[i] + results[i - 1]))\n    return results\n",
        "num_ids": 74
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [max(numbers[:i + 1]) for i in range(len(numbers))]\n",
        "num_ids": 26
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(numbers[i], numbers[i] + result[i-1]))\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Initialize result list and first max value\n    result, max_value = [], 0\n    for num in numbers:\n        # Update the max value and keep track of the index\n        if num >= max_value:\n            max_value = num\n            result.append(max_value)\n        else:\n            # If num < max value, update the result and current max value to that number\n            result.append(max_value)\n            max_value = num\n    # Append last max value as well\n    result.append(max_value)\n    return result\n",
        "num_ids": 133
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    rolling_max_list = []\n    if len(numbers) == 0:\n        return rolling_max_list\n    rolling_max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n        rolling_max_list.append(max(numbers[i], rolling_max_list[i - 1]))\n    return rolling_max_list\n",
        "num_ids": 95
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not numbers:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # this is a copy-paste of the max function implemented as a list comprehension\n    #max_list = [max(numbers[:i+1]) for i in range(len(numbers))]\n    max_list = [max(numbers[:i + 1]) if i < len(numbers) else numbers[-1] for i in range(len(numbers))]\n    return max_list\n",
        "num_ids": 96
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not numbers:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Find the longest palindromic postfix\n    suffix = palindrome_suffix(string)\n    # Append the reverse of a string prefix that comes before the palindromic suffix\n    return string + suffix[::-1]\n",
        "num_ids": 58
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    palindrome = None\n    # find longest palindromic substring\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i+1]):\n            palindrome = string[:i+1]\n            break\n",
        "num_ids": 72
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not is_palindrome(string):\n        return string + string[::-1][1:]\n",
        "num_ids": 26
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Initialize palindrome string with input string\n    palindrome = string\n    # Get longest palindromic substring in input string\n    longest_palindrome = longest_palindrome_substring(string)\n    # Get reverse of the substring\n    reverse = longest_palindrome[::-1]\n    # If substring is longer than 1 char, append reverse to the end of string\n    if len(longest_palindrome) > 1:\n        palindrome = palindrome + reverse\n    # Return shortest palindrome\n    return palindrome\n",
        "num_ids": 136
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    string = string.lower()\n    i = len(string) - 1\n    palindrome_suffix = ''\n    while i >= 0:\n        if is_palindrome(string[i:]):\n            palindrome_suffix = string[i:]\n            break\n        i -= 1\n    if palindrome_suffix == '':\n        return string\n    palindrome_prefix = string[:i]\n    return palindrome_prefix + palindrome_suffix[::-1]\n",
        "num_ids": 120
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not string:\n        return ''\n",
        "num_ids": 11
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return string + string[-2::-1]\n",
        "num_ids": 14
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not string:\n        return ''\n    longest_suffix = find_longest_palindrome(string)\n    longest_prefix = string[:len(string) - len(longest_suffix)]\n    return longest_prefix + longest_suffix[::-1]\n",
        "num_ids": 69
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return string + string[::-1][1:]\n",
        "num_ids": 14
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    substring = get_longest_palindrome(string)\n    if len(substring) <= 0:\n        return string\n",
        "num_ids": 32
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return bin(int(a, 2) ^ int(b, 2))[2:]\n",
        "num_ids": 22
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "num_ids": 33
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "num_ids": 33
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return bin(int(a, 2) ^ int(b, 2))[2:].zfill(len(a))\n",
        "num_ids": 30
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a_bits = list(map(int, a))\n    b_bits = list(map(int, b))\n",
        "num_ids": 29
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return ''.join(map(str, map(lambda x, y: int(x) ^ int(y), a, b)))\n",
        "num_ids": 32
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return ''.join([str(xor(int(a[i]), int(b[i]))) for i in range(len(a))])\n",
        "num_ids": 36
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "num_ids": 34
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Convert both strings to integers\n    a_int = int(a, 2)\n    b_int = int(b, 2)\n",
        "num_ids": 33
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(a)!= len(b):\n        raise ValueError('Input strings are not of equal lengths!')\n    output = []\n    for i in range(len(a)):\n        xor = int(a[i]) ^ int(b[i])\n        output.append(str(xor))\n    return ''.join(output)\n",
        "num_ids": 83
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return None\n    max_str = strings[0]\n    for str_ in strings:\n        if len(str_) > len(max_str):\n            max_str = str_\n    return max_str\n",
        "num_ids": 62
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not strings:\n        return None\n    else:\n        return max(strings, key=len)\n",
        "num_ids": 26
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # strings = [str(elem) for elem in strings]\n    return max(strings, key=len) if strings else None\n",
        "num_ids": 33
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 22
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if strings is None or strings == []:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        max_len = len(strings[0])\n        longest_str = strings[0]\n        for str in strings:\n            if len(str) > max_len:\n                max_len = len(str)\n                longest_str = str\n        return longest_str\n",
        "num_ids": 104
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n    lens = [len(s) for s in strings]\n    return strings[lens.index(max(lens))]\n",
        "num_ids": 42
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # take in account that strings can be of varying lengths\n    lengths = [len(string) for string in strings]\n    if lengths:\n        longest_length = max(lengths)\n        for string in strings:\n            if len(string) == longest_length:\n                return string\n    else:\n        return None\n",
        "num_ids": 77
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    max_length = max([len(string) for string in strings])\n    for string in strings:\n        if len(string) == max_length:\n            return string\n",
        "num_ids": 73
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n    max_len = 0\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            longest_string = string\n    return longest_string\n",
        "num_ids": 65
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a < b:\n        a, b = b, a\n    return greatest_common_divisor_aux(a, b)\n",
        "num_ids": 34
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if a < b:\n        a, b = b, a\n",
        "num_ids": 17
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 33
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 45
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 33
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return b if a % b == 0 else greatest_common_divisor(b, a % b)\n",
        "num_ids": 26
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    shortest = string[0]\n    longest = string[0]\n    list_of_prefixes = []\n    for i in range(len(string)):\n        if len(string[:i+1]) < len(shortest):\n            shortest = string[:i+1]\n        if len(string[:i+1]) > len(longest):\n            longest = string[:i+1]\n    for i in range(len(shortest)):\n        list_of_prefixes.append(shortest[:i+1])\n    list_of_prefixes.append(shortest)\n    list_of_prefixes.append(longest)\n    return list_of_prefixes\n",
        "num_ids": 170
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [string[:i] for i in range(len(string))]\n",
        "num_ids": 20
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [string[:i] for i in range(len(string))]\n",
        "num_ids": 20
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(string) == 0:\n        return ['']\n    else:\n        result = []\n        result.append(string[0])\n        for i in range(1, len(string)):\n            result.append(string[0:i + 1])\n        return result\n",
        "num_ids": 68
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(string) == 0:\n        return []\n    elif len(string) == 1:\n        return [string]\n    else:\n        return [string[0:i] for i in range(1, len(string))] + [string]\n",
        "num_ids": 62
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # if n==0:\n    #     return \"0\"\n    # return string_sequence(n-1) + \" \" + str(n)\n",
        "num_ids": 37
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return''.join(map(str, range(n+1)))\n",
        "num_ids": 17
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    string = \" \".join([str(i) for i in range(n + 1)])\n    return string\n",
        "num_ids": 27
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return''.join(list(map(str, range(n + 1))))\n",
        "num_ids": 28
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \" \".join([str(i) for i in range(n + 1)])\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return''.join(map(str, range(n+1)))\n",
        "num_ids": 17
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return''.join([str(i) for i in range(n + 1)])\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # to return string of numbers\n    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 28
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    chars = set()\n    for char in string.lower():\n        chars.add(char)\n",
        "num_ids": 26
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lowercase_string = string.lower()\n    return len(set(lowercase_string))\n",
        "num_ids": 24
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    letter_set = set()\n    for char in string:\n        letter_set.add(char.lower())\n    return len(letter_set)\n",
        "num_ids": 37
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # return len(set([char.lower() for char in string]))\n    # print([char.lower() for char in string])\n    # return len([char for char in set([char.lower() for char in string])])\n    return len(set(string.lower()))\n",
        "num_ids": 67
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    char_freq = defaultdict(int)\n    for char in string:\n        char_freq[char.lower()] += 1\n",
        "num_ids": 34
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = set()\n    for char in string.lower():\n        if char not in s:\n            s.add(char)\n    return len(s)\n",
        "num_ids": 39
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len(set([x.lower() for x in string]))\n",
        "num_ids": 18
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not string:\n        return 0\n    else:\n        return len(set(string.lower()))\n",
        "num_ids": 27
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    distinct_characters = set()\n    for char in string:\n        if char.isalpha():\n            distinct_characters.add(char.lower())\n    return len(distinct_characters)",
        "num_ids": 50
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [len(x) for x in music_string.split('|')]\n",
        "num_ids": 21
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    music = music_string.split(' ')\n    note_count = []\n    for note in music:\n        note_count.append(beat_count(note))\n    return note_count\n",
        "num_ids": 47
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    notes = music_string.split('|')\n    return [len(i) for i in notes]\n",
        "num_ids": 26
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [_char_to_number(_char) for _char in music_string]\n",
        "num_ids": 22
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    current_beat = 0\n    current_note = ''\n    for char in music_string:\n        if char == 'o':\n            current_beat += 1\n            current_note += char\n        elif char == '|':\n            current_beat += 1\n            current_note += char\n        elif char == '.':\n            current_beat += 1\n            current_note += char\n        else:\n            result.append(current_beat)\n            current_beat = 1\n            current_note = char\n    result.append(current_beat)\n    return result\n",
        "num_ids": 139
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [1 if char == 'o' else 2 if char == 'o|' else 0.5 for char in music_string.split()]\n",
        "num_ids": 35
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Implement this function yourself\n    return []\n",
        "num_ids": 12
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [4 if i in ['o', '.'] else 2 if i == 'o|' else 1 for i in music_string.split(' ')]\n",
        "num_ids": 37
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert '.' not in music_string and '|' not in music_string and 'o' not in music_string\n    return [1 if note == '.' else note.count('|') + 1 for note in music_string.split('o') if note]\n",
        "num_ids": 62
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    counter = 0\n    music = music_string.split('|')\n    note_list = []\n    for note in music:\n        if note.count('o') == 1:\n            note_list.append(4)\n            counter += 4\n        elif note.count('o') == 2:\n            note_list.append(2)\n            counter += 2\n        else:\n            note_list.append(1)\n            counter += 1\n    return note_list\n",
        "num_ids": 112
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    num = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            num += 1\n    return num\n",
        "num_ids": 42
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    number_of_times = 0\n    for i in range(0, len(string)):\n        if string[i:].startswith(substring):\n            number_of_times += 1\n    return number_of_times\n",
        "num_ids": 56
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    times = 0\n    sub = substring[:]\n    for i, c in enumerate(string):\n        if c == sub[0]:\n            if string[i:i + len(sub)] == sub:\n                times += 1\n    return times\n",
        "num_ids": 60
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    length = len(substring)\n    counter = 0\n    for i in range(len(string) - length + 1):\n        if string[i:i+length] == substring:\n            counter += 1\n    return counter\n",
        "num_ids": 55
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    times_counter = 0\n    start_index = 0\n    len_substring = len(substring)\n    while start_index < len(string):\n        pos = string.find(substring, start_index)\n        if pos!= -1:\n            start_index = pos + len_substring\n            times_counter += 1\n        else:\n            return times_counter\n    return times_counter\n",
        "num_ids": 97
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    # Write a for loop to iterate over all characters in the string.\n    for i in range(len(string)):\n        # Use if to check if the character is in the substring and if it is, increment the count\n        if string[i] == substring[0]:\n            count += 1\n        # If not, reset the count\n        else:\n            count = 0\n    return count\n",
        "num_ids": 98
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    # for i in range(len(string)):\n    #     if string[i] == substring[0] and string[i:].startswith(substring):\n    #         count += 1\n    # return count\n    return string.count(substring)\n",
        "num_ids": 69
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    str_len = len(string)\n    sub_len = len(substring)\n    for i in range(str_len - sub_len + 1):\n        if string[i:i + sub_len] == substring:\n            count += 1\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for n in range(9):\n        numbers = numbers.replace(f' {str(n)} ', f' {str(n)} ')\n        numbers = numbers.replace(f'{str(n)}', f'{str(n)} ')\n    return numbers[:-1]\n",
        "num_ids": 70
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    numbers_list = []\n    for i in numbers.split(\" \"):\n        numbers_list.append(i)\n    numbers_list.sort()\n    return \" \".join(numbers_list)\n",
        "num_ids": 52
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers = numbers.replace(\" \", \"\").replace(\"-\", \"\")\n    numbers = list(numbers)\n    numbers.sort()\n    return ''.join(numbers)\n",
        "num_ids": 46
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers = numbers.split(' ')\n    \n    # Inserting items into array in sorted order\n    for i in range(len(numbers)):\n        for j in range(len(numbers) - 1):\n            if int(numbers[j]) > int(numbers[j+1]):\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n    \n    return''.join(numbers)\n",
        "num_ids": 109
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return''.join(sorted(numbers.split(' ')))\n",
        "num_ids": 17
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n",
        "num_ids": 26
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    numbers = sorted(numbers.split(\" \"))\n    return \" \".join(numbers)\n",
        "num_ids": 25
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numbers = list(numbers.split(\" \"))\n    numbers = sorted(numbers, key=lambda x: int(x))\n    return''.join(numbers)\n",
        "num_ids": 43
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numbers = sorted(numbers.split(' '))\n    return''.join(numbers)\n",
        "num_ids": 24
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers_list = [int(num) for num in numbers.split(' ')]\n    return''.join(sorted(numbers_list))\n",
        "num_ids": 36
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if numbers.__len__() < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    if numbers.__len__() == 2:\n        return (numbers[0], numbers[1])\n",
        "num_ids": 52
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[2])\n",
        "num_ids": 21
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[-2])\n",
        "num_ids": 22
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert numbers, \"Given numbers list cannot be empty\"\n",
        "num_ids": 14
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # for every pair of numbers find difference between them and store it\n    # find min difference\n    # return that pair of numbers\n    # if there is more than one pair of numbers with min diff, return all of them\n",
        "num_ids": 50
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    numbers.sort()\n    return tuple(numbers[:2])\n",
        "num_ids": 19
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    numbers.sort()\n    list_length = len(numbers)\n    first_closest_element = numbers[0]\n    second_closest_element = numbers[0]\n    if list_length > 1:\n        first_closest_element = numbers[list_length - 1]\n        second_closest_element = numbers[list_length - 2]\n    return first_closest_element, second_closest_element\n",
        "num_ids": 110
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # a = sorted(numbers)\n    # print(a)\n    # print(sorted(a)[:2])\n    # return sorted(a)[:2]\n    \n    # print(sorted(numbers)[:2])\n    # print(sorted(numbers)[1:3])\n    # print(sorted(numbers)[2:4])\n    # print(sorted(numbers)[3:5])\n    # print(sorted(numbers)[4:6])\n    # print(sorted(numbers)[5:7])\n    # return sorted(numbers)[:2]\n    \n    # print(sorted(numbers)[:2])\n    # print(sorted(numbers)[2:4])\n    # print(sorted(numbers)[3:5])\n    # print(sorted(numbers)[4:6])\n    # print(sorted(numbers)[5:7])\n    # return sorted(numbers)[:2]\n    \n    # print(sorted(numbers)[:2])\n    # print(sorted(numbers)[2:4])\n    # print(sorted(numbers)[3:5])\n    # print(sorted(numbers)[4:6])\n    # print(sorted(numbers)[5:7])\n    # print(sorted(numbers)[6:8])\n    # return sorted(numbers)[:2]\n    \n    # print(sorted(numbers)[:2])\n    # print(sorted(numbers)[2:4])\n    # print(sorted(numbers)[3:5])\n    # print(sorted(numbers)[4:6])\n    # print(sorted(numbers)[5:7])\n    # print(sorted(numbers)[6:8])\n    # print(sorted(numbers)[7:9])\n    # return sorted(numbers)[:2]\n    \n    # print(sorted(numbers)[:2])\n    # print(sorted(numbers)[2:4])\n    # print(sorted(numbers)[3:5])\n    # print(sorted(numbers)[4:6])\n    # print(sorted(numbers)[5:7])\n    # print(sorted(numbers)[6:8])\n    # print(sorted(numbers)[7:9])\n    # print(sorted(numbers)[8:10])\n    # return sorted(numbers)[:2]\n    \n    # print(sorted(numbers)[:2])\n    # print(sorted(numbers)[2:4])\n    # print(sorted(numbers)[3:5])\n    # print(sorted(numbers)[4:6])\n    # print(sorted(numbers)[5:7])\n    # print(sorted(numbers)[6:8])\n    # print(sorted(numbers)[7:9])\n    # print(sorted(numbers)[8:10])\n    # print(sorted(numbers)[9:11])\n    # return sorted(numbers)[:2]\n    \n    # print(sorted(numbers)[:2])\n    # print(sorted(numbers)[2:4])\n    # print(sorted(numbers)[3:5])\n    # print(sorted(numbers)[4:6])\n    # print(sorted(numbers)[5:7])\n    # print(sorted(numbers)[6:8])\n    # print(sorted(numbers)[7:9])\n    # print(sorted(numbers)[8:10])\n    # print(sorted(numbers)[9:11])\n    # print(sorted(numbers)[10:12])\n    # return sorted(numbers)[:2]\n    \n    # print(sorted(numbers)[:2])\n    # print(sorted(numbers)[2:4])\n    # print(sorted(numbers)[3:5])\n    # print(sorted(numbers)[4:6])\n    # print(sorted(numbers)[5:7])\n    # print(sorted(numbers)[6:8])\n    # print(sorted(numbers)[7:9])\n    # print(sorted(numbers)[8:10])\n    # print(sorte",
        "num_ids": 1025
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (numbers[1], numbers[2])\n",
        "num_ids": 14
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [(num - min(numbers)) / (max(numbers) - min(numbers)) for num in numbers]\n",
        "num_ids": 30
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for n in numbers:\n        #print(\"n:\", n)\n        result.append(n / max(numbers))\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [number - minimum for number in numbers] / (maximum - minimum)\n",
        "num_ids": 37
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    min_val = min(numbers)\n    max_val = max(numbers)\n    diff = max_val - min_val\n    return [(n - min_val) / diff for n in numbers]\n",
        "num_ids": 51
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [0.0 if num == min(numbers) else (1.0 if num == max(numbers) else num) for num in numbers]\n",
        "num_ids": 37
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [0.0 if min(numbers) == max(numbers) else (n - min(numbers)) / (max(numbers) - min(numbers)) for n in numbers]\n",
        "num_ids": 47
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    numbers = sorted(numbers)\n    largest = numbers[len(numbers)-1]\n    smallest = numbers[0]\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - smallest)/(largest - smallest)\n    return numbers\n",
        "num_ids": 72
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(numbers) < 2:\n        raise ValueError('Input list must have at least two elements')\n",
        "num_ids": 27
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numbers.sort()\n    m = numbers[0]\n    b = numbers[-1]\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - m)/(b - m)\n    return numbers\n",
        "num_ids": 64
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert isinstance(numbers, list), \"Input numbers must be in a list!\"\n    assert len(numbers) >= 2, \"Input list must contain at least two numbers\"\n",
        "num_ids": 42
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [x for x in values if type(x) == int]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [int(value) for value in values if isinstance(value, int) and not isinstance(value, bool)]\n",
        "num_ids": 30
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [int(i) for i in values if isinstance(i, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [v for v in values if isinstance(v, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n",
        "num_ids": 37
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    length = 0\n    for ch in string:\n        length += 1\n    return length\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return count\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for char in string:\n        count += 1\n    return count\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    counter = 0\n    for i in string:\n        counter += 1\n    return counter\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if string:\n        return len(string)\n    else:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(2, int(n/2)):\n        if n % i == 0:\n            return i\n    return 1\n",
        "num_ids": 34
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return n // 2 + 1\n",
        "num_ids": 9
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    factor = 1\n    while factor < n:\n        factor += 1\n        if n % factor == 0:\n            return factor\n    return n\n",
        "num_ids": 35
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(int(n/2), 1, -1):\n        if n % i == 0:\n            return i\n",
        "num_ids": 32
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "num_ids": 33
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return max([x for x in range(n) if n%x == 0])\n",
        "num_ids": 21
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    divisor = 1\n    while(n % divisor!= 0):\n        divisor += 1\n    return divisor\n",
        "num_ids": 34
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    largest = 0\n    for i in range(1, int(n/2) + 1):\n        if n % i == 0 and i > largest:\n            largest = i\n    return largest\n",
        "num_ids": 46
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n",
        "num_ids": 30
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    max_divisor = 1\n    for i in range(1, n):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n",
        "num_ids": 47
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n < 2:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    elif n < 1:\n        return []\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
        "num_ids": 81
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n > 0\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            n //= divisor\n            factors.append(divisor)\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 90
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    factors = []\n    for div in range(2, int(n ** 0.5) + 1):\n        while n % div == 0:\n            factors.append(div)\n            n //= div\n    if n!= 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 72
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    divider = 2\n    while divider * divider <= n:\n        while n % divider == 0:\n            n //= divider\n            result.append(divider)\n        divider += 1\n    if n > 1:\n        result.append(n)\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def isprime(n: int) -> bool:\n        if n <= 3:\n            return n > 1\n        return all(n%i for i in range(2, n//2+1))\n    \n    factors = []\n    if isprime(n):\n        return [n]\n    else:\n        while n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        for i in range(3, n+1, 2):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n    return factors\n",
        "num_ids": 141
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 0:\n        return [(-1) * x for x in factorize(-n)]\n    factors = []\n    if n > 1:\n        while n % 2 == 0:\n            n = n / 2\n            factors.append(2)\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            while n % i == 0:\n                n = n / i\n                factors.append(i)\n        if n > 2:\n            factors.append(n)\n    return factors\n",
        "num_ids": 130
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 2:\n        return [n]\n    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    return factors\n",
        "num_ids": 65
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    elements = {}\n    duplicate_indices = set()\n    for i in range(len(numbers)):\n        if numbers[i] in elements.keys():\n            duplicate_indices.add(elements[numbers[i]])\n            duplicate_indices.add(i)\n        else:\n            elements[numbers[i]] = i\n    result = []\n    for i in range(len(numbers)):\n        if i not in duplicate_indices:\n            result.append(numbers[i])\n    return result\n",
        "num_ids": 136
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # way 1\n    # print(set(numbers))\n    # return list(set(numbers))\n    # way 2\n    # return list(set(numbers))\n    # way 3\n    # import collections\n    # d = collections.Counter(numbers)\n    # return [k for k, v in d.items() if v == 1]\n    # way 4\n    # l = list(set(numbers))\n    # l.sort()\n    # return l\n    # way 5\n    # return list(dict.fromkeys(numbers))\n    # way 6\n    # return list(dict.fromkeys(numbers).keys())\n",
        "num_ids": 154
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if numbers == []:\n        return []\n    elif numbers == [1]:\n        return [1]\n    elif len(numbers) == 2:\n        if numbers[0] == numbers[1]:\n            return []\n        else:\n            return numbers\n    else:\n        flag = True\n        for i in range(1, len(numbers)):\n            if numbers[i] == numbers[i - 1]:\n                flag = False\n        if flag:\n            return numbers\n        else:\n            k = 0\n            for i in range(1, len(numbers)):\n                if numbers[i] == numbers[i - 1]:\n                    k = i\n            return numbers[:k] + remove_duplicates(numbers[k:])\n",
        "num_ids": 179
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # list comprehension, new_list = [element for element in list if element not in set(list)]\n    # print(set(numbers))\n    # print(new_list)\n    # return list(set(numbers))\n    result = []\n    for x in numbers:\n        if x not in result:\n            result.append(x)\n    return result\n",
        "num_ids": 87
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    new_list = []\n    for num in numbers:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n",
        "num_ids": 43
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = []\n    for i in numbers:\n        if i not in s:\n            s.append(i)\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    unique = set(numbers)\n    return list(unique)\n",
        "num_ids": 17
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # empty list\n    if not numbers:\n        return numbers\n    # is not empty list\n    elif numbers:\n        # get the last element in the list\n        last_element = numbers[-1]\n        # create the list with the last element\n        result_list = [last_element]\n        # for each element in the list\n        for element in numbers:\n            # check if the element is the last element in the list\n            if element == last_element:\n                # add element to the list\n                result_list.append(element)\n                # set last element to the current element\n                last_element = element\n            # if the element is not the last element\n            else:\n                # add the current element to the list\n                result_list.append(element)\n                # set the last element to the current element\n                last_element = element\n        return result_list\n",
        "num_ids": 204
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # TODO: optimize using HashTable\n    i = 0\n    n = len(numbers)\n    for j in range(n):\n        if numbers[i]!= numbers[j]:\n            i += 1\n            numbers[i] = numbers[j]\n    return numbers[:i + 1]\n",
        "num_ids": 74
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n",
        "num_ids": 69
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join(c.upper() if c.islower() else c.lower() for c in string)\n",
        "num_ids": 28
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lower_chars = string.lower()\n    upper_chars = string.upper()\n    new_string = lower_chars[:len(string)//2] + upper_chars[len(string)//2:]\n    return new_string\n    \n",
        "num_ids": 63
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join([char.upper() if char.islower() else char.lower() for char in string])\n",
        "num_ids": 28
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join([str(c.lower() if c.isupper() else c.upper()) for c in string])\n    \nif __name__ == '__main__':\n    print(flip_case('Hello'))\n    print(flip_case('Hi There'))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1024
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    flipped = \"\"\n    for character in string:\n        if character.islower():\n            flipped += character.upper()\n        else:\n            flipped += character.lower()\n    return flipped\n",
        "num_ids": 48
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_str = ''\n    for i in string:\n        if i.isupper():\n            new_str += i.lower()\n        elif i.islower():\n            new_str += i.upper()\n    return new_str\n",
        "num_ids": 58
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # base case\n    if len(string) < 2:\n        return string\n",
        "num_ids": 20
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])\n",
        "num_ids": 28
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    new_string = \"\"\n    for char in strings:\n        new_string += char\n    return new_string\n",
        "num_ids": 28
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Can also use a generator expression: return ''.join(strings)\n    return ''.join(strings)\n",
        "num_ids": 27
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = ''\n    for s in strings:\n        result += s\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n",
        "num_ids": 38
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [\n        s for s in strings\n        if s.startswith(prefix)\n    ]\n",
        "num_ids": 26
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not prefix:\n        return strings\n    else:\n        return [x for x in strings if x.startswith(prefix)]\n",
        "num_ids": 33
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    prefix_len = len(prefix)\n    return [s for s in strings if s[:prefix_len] == prefix]\n",
        "num_ids": 31
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(prefix) < 1:\n        return strings\n    \n    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 35
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: Implement me!\n    return []\n    \ndef first_occurence_of_unique_char(s: str) -> int:\n    \"\"\" Find the first occurrence of a unique character in a string and return its index.\n    >>> first_occurence_of_unique_char('abc')\n    -1\n    >>> first_occurence_of_unique_char('aac')\n    0\n    >>> first_occurence_of_unique_char('abcc')\n    0\n    >>> first_occurence_of_unique_char('abcdabcd')\n    2\n    \"\"\"\n    # TODO: Implement me!\n    return -1\n    \ndef rot13(s: str) -> str:\n    \"\"\" Convert a string to rot13.\n    >>> rot13('test')\n    'grfg'\n    >>> rot13('noice')\n    'znjrx'\n    \"\"\"\n    # TODO: Implement me!\n    return ''\n    \ndef int_to_text(n: int) -> str:\n    \"\"\" Convert an integer to text.\n    >>> int_to_text(1024)\n    '1k'\n    >>> int_to_text(2048)\n    '2k'\n    >>> int_to_text(2049)\n    '2k1'\n    \"\"\"\n    # TODO: Implement me!\n    return ''\n    \ndef any_letter_in_position(s: str, l: str, p: int) -> bool:\n    \"\"\" Check if a letter is in a string at a specific position.\n    >>> any_letter_in_position('hello', 'l', 1)\n    True\n    >>> any_letter_in_position('hello', 'l', 2)\n    False\n    >>> any_letter_in_position('hello', 'h', 1)\n    True\n    >>> any_letter_in_position('hello', 'h', 5)\n    True\n    >>> any_letter_in_position('hello', 'x', 1)\n    False\n    \"\"\"\n    # TODO: Implement me!\n    return False\n    \ndef convert_to_base_10(s: str, b: int) -> int:\n    \"\"\" Convert a string to a base 10 number.\n    >>> convert_to_base_10('1234', 2)\n    258\n    >>> convert_to_base_10('10101010', 2)\n    42\n    >>> convert_to_base_10('101010', 2)\n    42\n    >>> convert_to_base_10('101010', 10)\n    42\n    >>> convert_to_base_10('101010', 8)\n    42\n    >>> convert_to_base_10('101010', 16)\n    42\n    \"\"\"\n    # TODO: Implement me!\n    return 0\n    \ndef is_ascending(s: str) -> bool:\n    \"\"\" Check if a string is in ascending order.\n    >>> is_ascending('12345')\n    True\n    >>> is_ascending('1234567')\n    True\n    >>> is_ascending('123456')\n    True\n    >>> is_ascending('123456d')\n    False\n    >>> is_ascending('123456x')\n    False\n    >>> is_ascending('12345678901234567890123456789')\n    True\n    \"\"\"\n    # TODO: Implement me!\n    return True\n    \ndef largest_number(s: str) -> str:\n    \"\"\" Find the largest number in a string.\n    >>> largest_number('123456789')\n    '999999'\n    >>> largest_number('12345678')\n    '8'\n    >>> largest_number('1234567')\n    '7'\n    >>> largest_number('123456')\n    '6'\n    >>> largest_number('12345')\n    '5'\n    >>> largest_number('123')\n    '3'\n    >>> largest_number('12')\n    '2'\n    >>> largest_number('1')\n    '1'\n    \"\"\"\n    # TODO: Implement me!\n    return ''\n    \ndef count_largest_number(s: str) -> int:\n    \"\"\" Count the largest number in a string.\n    >>> count_largest_number('123456789')\n    1\n    >>> count_largest_number('12345678')\n    1\n    >>",
        "num_ids": 1025
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: x >= 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [number for number in l if number > 0]\n    \ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-4, -1]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, -3, -5, -5, -3, -10]\n    \"\"\"\n    return [number for number in l if number < 0]\n",
        "num_ids": 136
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [n for n in l if n > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [n for n in l if n >= 0]\n    \ndef get_positive_max(l: list):\n    \"\"\"Return maximum positive number in the list.\n    >>> get_positive_max([-1, 2, -4, 5, 6])\n    6\n    >>> get_positive_max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(get_positive(l))\n    \ndef get_sorted_list(l: list):\n    \"\"\"Return sorted list.\n    >>> get_sorted_list([-1, 2, -4, 5, 6])\n    [-4, -1, 2, 5, 6]\n    >>> get_sorted_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, -3, 0, 1, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(l)\n    \ndef get_sorted_list_max(l: list):\n    \"\"\"Return maximum value in the list.\n    >>> get_sorted_list_max([-1, 2, -4, 5, 6])\n    6\n    >>> get_sorted_list_max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(get_sorted_list(l))\n    \ndef get_sorted_list_min(l: list):\n    \"\"\"Return minimum value in the list.\n    >>> get_sorted_list_min([-1, 2, -4, 5, 6])\n    -4\n    >>> get_sorted_list_min([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(get_sorted_list(l))\n    \ndef get_index(l: list, n: int):\n    \"\"\"Return index of value from list.\n    >>> get_index([1,2,3], 1)\n    0\n    >>> get_index([1,2,3], 2)\n    1\n    >>> get_index([1,2,3], 3)\n    2\n    >>> get_index([1,2,3], 4)\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n        \ndef get_reverse(l: list):\n    \"\"\"Return list reversed.\n    >>> get_reverse([1,2,3])\n    [3, 2, 1]\n    >>> get_reverse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, -3, 3, 3, 9, 123, 1, 2, 5, -5, 0]\n    \"\"\"\n    return l[::-1]\n    \ndef get_reverse_max(l: list):\n    \"\"\"Return maximum value in the list reversed.\n    >>> get_reverse_max([1,2,3])\n    3\n    >>> get_reverse_max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(get_reverse(l))\n    \ndef get_reverse_min(l: list):\n    \"\"\"Return minimum value in the list reversed.\n    >>> get_reverse_min([1,2,3])\n    1\n    >>> get_reverse_min([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(get_reverse(l))\n    \ndef get_sum(l: list):\n    \"\"\"Return sum of values from list.\n    >>> get_sum([1,2,3])\n    6\n    >>> get_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    178\n    \"\"\"\n    return sum(l)\n    \ndef get_sum_max(l: list):\n    \"\"\"Return maximum value in the list and its sum.\n    >>> get_sum_max([1,2,3])\n    (3, 6",
        "num_ids": 1024
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [number for number in l if number >= 0]\n    \ndef split(l: list):\n    \"\"\"Splits a list into two parts of equal length.\n    >>> split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [[1, 2, 3, 4, 5, 6, 7], [8, 9, 10]]\n    \"\"\"\n    return [l[:len(l)//2], l[len(l)//2:]]\n",
        "num_ids": 115
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [number for number in l if number > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [n for n in l if n > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [n for n in l if n > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n >= 2, \"That number is not positive.\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n < 2:\n        return False\n    if n < 4:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n < 9:\n        return True\n    k, l = 5, n ** 0.5\n    while k <= l:\n        if n % k == 0 or n % (k + 2) == 0:\n            return False\n        k += 6\n    return True\n    \n",
        "num_ids": 116
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    else:\n        return True\n",
        "num_ids": 53
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    divisors = set()\n    for i in range(2,n):\n        if n % i == 0:\n            divisors.add(i)\n    return len(divisors) == 0\n",
        "num_ids": 50
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if n <= 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        d = 5\n        while d**2 <= n:\n            if n % d == 0 or n % (d+2) == 0:\n                return False\n            d += 6\n        return True\n        \n",
        "num_ids": 102
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for i in range(n-1, 2, -1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #Assume the number is prime until we determine it is not\n    prime = True\n    #Perform the prime number test\n    for i in range(2, n):\n        if n % i == 0:\n            prime = False\n            break\n    return prime\n    \ndef sum_naturals(n):\n    \"\"\"Sums the first N natural numbers where N is a given positive integer\n    >>> sum_naturals(5)\n    15\n    >>> sum_naturals(10)\n    55\n    >>> sum_naturals(25)\n    1252\n    >>> sum_naturals(1)\n    0\n    \"\"\"\n    #Assume the first number to be 1, and then add the next\n    total = 1\n    #Perform the addition to the total\n    for i in range(2, n+1):\n        total += i\n    return total\n    \ndef sum_cubes(n):\n    \"\"\"Returns the sum of all the cubed values from 1 to a given natural number\n    >>> sum_cubes(5)\n    225\n    >>> sum_cubes(10)\n    5555\n    >>> sum_cubes(25)\n    38125\n    >>> sum_cubes(1)\n    0\n    \"\"\"\n    total = 0\n    #Assume the first number to be 1, and then add the next\n    for i in range(1, n+1):\n        total += i ** 3\n    return total\n    \ndef sum_divisors(n):\n    \"\"\"Returns the sum of all positive numbers that can divide n (including 1 and n)\n    >>> sum_divisors(1)\n    1\n    >>> sum_divisors(6)\n    12\n    >>> sum_divisors(20)\n    31\n    >>> sum_divisors(100)\n    3 + 5 + 10 + 20 + 25 + 50 + 100\n    \"\"\"\n    #Assume the first number to be 1, and then add the next\n    total = 1\n    #Perform the addition to the total\n    for i in range(2, n+1):\n        if n % i == 0:\n            total += i\n    return total\n    \ndef sum_divisors_loop(n):\n    \"\"\"Returns the sum of all positive numbers that can divide n (including 1 and n)\n    >>> sum_divisors_loop(1)\n    1\n    >>> sum_divisors_loop(6)\n    12\n    >>> sum_divisors_loop(20)\n    31\n    >>> sum_divisors_loop(100)\n    3 + 5 + 10 + 20 + 25 + 50 + 100\n    \"\"\"\n    #Assume the first number to be 1, and then add the next\n    total = 1\n    #Perform the addition to the total\n    for i in range(2, n+1):\n        total += i\n    return total\n    \ndef sum_divisors_newton(n):\n    \"\"\"Returns the sum of all positive numbers that can divide n (including 1 and n)\n    >>> sum_divisors_newton(1)\n    1\n    >>> sum_divisors_newton(6)\n    12\n    >>> sum_divisors_newton(20)\n    31\n    >>> sum_divisors_newton(100)\n    3 + 5 + 10 + 20 + 25 + 50 + 100\n    \"\"\"\n    #Assume the first number to be 1, and then add the next\n    total = 1\n    #Perform the addition to the total\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            total += i\n            total += n // i\n    return total\n    \ndef sum_divisors_while(n):\n    \"\"\"Returns the sum of all positive numbers that can divide n (including 1 and n)\n    >>> sum_divisors_while(1)\n    1\n    >>> sum_divisors_while(6)\n    12\n    >>> sum_divisors_while(20)\n    31\n    >>> sum_divisors_while(100)\n    3 + 5 + 10 + 20 + 25 + 50 + 100\n    \"\"\"\n    #Assume the first number to be 1, and then add the next\n    total = 1\n    #Perform the addition to the total\n    i = 2\n    while i <= n:\n        i",
        "num_ids": 1025
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for k in range(2, int(n**0.5) + 1):\n            if n % k == 0:\n                return False\n        return True\n",
        "num_ids": 65
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n==2 or n==3:\n        return True\n    elif n==1 or n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\n",
        "num_ids": 96
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert len(xs) % 2 == 0, \"xs are coefficients of a polynomial.\\n\\\n    find_zero find x such that poly(x) = 0.\"\n    assert min(xs) >= 0, \"xs have only non negative coefficients.\"\n    assert max(xs) > 0, \"xs have only non negative coefficients.\"\n    xs = [x / max(xs) for x in xs]\n    r = range(len(xs) - 1, -1, -2)\n    for i in r:\n        if xs[i] == 0:\n            continue\n        for j in range(i - 1, -1, -1):\n            if xs[j] == 0:\n                continue\n            xs[j] -= xs[i]\n            xs[j] /= xs[j]\n        if xs[i]!= 0:\n            return xs[i]\n    raise AssertionError(\"No solution found.\")\n",
        "num_ids": 223
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # xs is a list of non zero coeff, hence the following assertion\n    assert len(xs) % 2 == 0\n    assert max(xs)!= 0\n    # return list of all solution for xs, zero order: x = 0\n    return [0] + [solve_solutions(xs, i) for i in range(1, max(xs) * 2 + 1)]\n",
        "num_ids": 91
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert len(xs) % 2 == 0\n    assert max(xs)!= 0\n    xs = [x for x in xs if x!= 0]\n    xs.sort(reverse=True)\n    xs = [x if x!= 1 else -1 for x in xs]\n    x = xs[0]\n    return x\n",
        "num_ids": 81
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert len(xs) % 2 == 0, \"xs must have an even number of coefficients\"\n    assert all([x >= 0 for x in xs]), \"all coefficients must be non-negative\"\n    assert max(xs)!= 0, \"largest coefficient must be non-zero\"\n",
        "num_ids": 65
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    xs_lens = [len(xs)]\n    while len(xs) % 2 == 0:\n        xs_lens.append(len(xs))\n        xs = xs[1:]\n    xs_lens.append(len(xs))\n    min_length_of_xs = min(xs_lens)\n    xs_length = len(xs)\n",
        "num_ids": 87
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n = len(xs)\n    if n % 2!= 0 or xs[n - 1] == 0:\n        raise ValueError\n    low = 0\n    high = -1\n    while high - low > 1e-9:\n        mid = (high + low) / 2\n        if poly(xs, mid) > 0:\n            high = mid\n        elif poly(xs, mid) < 0:\n            low = mid\n        else:\n            return mid\n    return high\n",
        "num_ids": 115
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = len(xs)\n",
        "num_ids": 9
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # print(xs)\n    for i in range(len(xs), 0, -1):\n        print(xs)\n        if xs[i]!= 0:\n            # print(i, xs[i])\n            if i % 2 == 0:\n                return xs[i // 2] * (-1) ** (i // 2)\n            else:\n                return xs[(i // 2) + 1] * (-1) ** ((i // 2) + 1)\n",
        "num_ids": 114
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    xs = xs[:]\n    xs.sort()\n    if xs[0] == 0 and len(xs) % 2 == 0:\n        xs = [0] + xs\n    if xs[-1] == 0 and len(xs) % 2 == 0:\n        xs = xs + [0]\n    if xs[0] > 0:\n        return -1\n    if xs[-1] < 0:\n        return 1\n    p_mid = poly(xs, 0.5)\n    while poly(xs, p_mid) > 0:\n        p_mid = (p_mid + xs[-1]) / 2\n    return p_mid\n",
        "num_ids": 161
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(xs) % 2:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if not xs[0]:\n        raise ValueError(\"polynomial must have at least one non zero coefficient\")\n    if xs[0] > 0:\n        xs = [-i for i in xs]\n    n = len(xs) // 2\n    f = poly\n    df = f\n    for _ in range(n):\n        df = df.derivative()\n    xs = xs[-n:]\n    xs.append(1)\n    xs.reverse()\n    xs = [-i for i in xs]\n    x = newton(f, df, xs)\n    return x\n",
        "num_ids": 168
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sorted_list = []\n    for i in l:\n        if i % 3 == 0:\n            sorted_list.append(i)\n    for i in l:\n        if i % 3!= 0:\n            sorted_list.append(i)\n    sorted_list.sort()\n    return sorted_list\n",
        "num_ids": 79
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    third = []\n    first = []\n    second = []\n    for i in l:\n        if i % 3 == 0:\n            third.append(i)\n        elif i % 3 == 1:\n            first.append(i)\n        else:\n            second.append(i)\n    third.sort()\n    first.sort()\n    second.sort()\n    third.extend(first)\n    third.extend(second)\n    return third\n",
        "num_ids": 110
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    #PART 1: This part is a bit tricky. There is a lot of code that you need to\n    #read through. However, if you do, you should be able to do what is asked\n    #above. The code is a bit long and messy, so to help you get a better\n    #understanding of the code, I want you to start at the line marked\n    #TODO: and read the code in the function sort_third.\n    \n    #PART 2: Your job here is to write the code in the function sort_third\n    #that will produce the desired list l'.\n    \n    #REMINDER: If you are stuck on this part, consider looking at the\n    #solution code from Monday, where we discussed the idea of using a\n    #while loop to solve this problem.\n    \n    #TODO: Your code here\n    \n    \n    \n",
        "num_ids": 203
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    index = 0\n    while index < len(l):\n        if index % 3 == 0:\n            result.append(l[index])\n        else:\n            result.append(sorted(l)[index])\n        index += 1\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l2 = []\n    l3 = []\n    for i in l:\n        if i%3 == 0:\n            l3.append(i)\n        else:\n            l2.append(i)\n    l3.sort()\n    l2.sort()\n    return l2+l3\n",
        "num_ids": 73
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    if l == []:\n        return []\n    elif len(l) == 1:\n        return [l[0]]\n    else:\n        return sorted(sort_third(l[1:])) + [l[0]]\n",
        "num_ids": 57
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Split the list into two sublists\n    sublist1 = []\n    sublist2 = []\n    for item in l:\n        if item % 3 == 0:\n            sublist1.append(item)\n        elif item % 3!= 0:\n            sublist2.append(item)\n    # Sort each sublist in ascending order\n    sublist1 = sorted(sublist1)\n    sublist2 = sorted(sublist2)\n    # Join the two sublists together, thereby sorting them\n    # in the same order as the original list\n    sublist2.extend(sublist1)\n    return sublist2\n",
        "num_ids": 149
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a = [x for x in l if x % 3 == 0]\n    a.sort()\n    b = [x for x in l if x % 3!= 0]\n    b.sort()\n    c = a + b\n    return c",
        "num_ids": 58
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(l, key=lambda i: i if i%3!= 0 else 0)\n",
        "num_ids": 24
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    three = []\n    other = []\n    \n    for i in l:\n        if i % 3 == 0:\n            three.append(i)\n        else:\n            other.append(i)\n    \n    return sorted(three) + sorted(other)\n",
        "num_ids": 65
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    return sorted(list(set(l)))\n",
        "num_ids": 14
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    x = []\n    for e in l:\n        if e not in x:\n            x.append(e)\n    return x\n",
        "num_ids": 33
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    max_element = 0\n    for i in range(len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n",
        "num_ids": 48
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    current = l[0]\n    for i in l:\n        if i > current:\n            current = i\n    return current\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Time complexity O(n)\n    # Space complexity O(1)\n    if l == []:\n        return None\n    else:\n        max_number = l[0]\n        for item in l:\n            if item > max_number:\n                max_number = item\n        return max_number\n",
        "num_ids": 73
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return max(l)\n    \n    \ndef zero_matrix(n: int):\n    \"\"\"\n    >>> zero_matrix(3)\n    [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n    >>> zero_matrix(4)\n    [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    \"\"\"\n    return [[0] * n for i in range(n)]\n    \n    \ndef flip_image(m: list):\n    \"\"\"Return the image flipped horizontally and vertically\n    >>> flip_image([[0, 1], [1, 0]])\n    [[1, 0], [0, 1]]\n    >>> flip_image([[1, 0], [0, 1]])\n    [[0, 1], [1, 0]]\n    >>> flip_image([[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]])\n    [[0, 1, 0, 0], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0]]\n    \"\"\"\n    \n    return [[col[::-1] for col in row] for row in reversed(m)]\n    \n    \ndef add_matrices(m1: list, m2: list):\n    \"\"\"Return the sum of matrices m1 and m2.\n    >>> add_matrices([[0, 1], [1, 0]], [[1, 1], [0, 1]])\n    [[1, 2], [2, 1]]\n    >>> add_matrices([[1, 2, 3], [4, 5, 6]], [[1, 4], [0, 3], [0, 0]])\n    [[2, 6, 9], [5, 5, 5]]\n    \"\"\"\n    \n    return [[sum(row) for row in zip(*t)] for t in zip(m1, m2)]\n    \n    \ndef compare_matrices(m1: list, m2: list):\n    \"\"\"Return True if matrices m1 and m2 are equal.\n    >>> compare_matrices([[0, 1], [1, 0]], [[1, 1], [0, 1]])\n    True\n    >>> compare_matrices([[1, 2], [3, 4]], [[2, 1], [1, 2]])\n    False\n    \"\"\"\n    return all(all(m1[i][j] == m2[i][j] for j in range(len(m1[i]))) for i in range(len(m1)))\n    \n    \ndef multiply_matrices(m1: list, m2: list):\n    \"\"\"Return the product of matrices m1 and m2.\n    >>> multiply_matrices([[0, 1], [1, 0]], [[1, 2], [3, 1]])\n    [[0, 2], [3, 0]]\n    >>> multiply_matrices([[0, 1, 0], [1, 0, 0], [0, 0, 1]], [[1, 1, 1], [1, 1, 1], [1, 1, 1]])\n    [[0, 2, 0], [2, 0, 0], [0, 0, 2]]\n    \"\"\"\n    \n    return [[sum(m1[i][k] * m2[k][j] for k in range(len(m1[i]))) for j in range(len(m2[0]))] for i in range(len(m1))]\n    \n    \ndef flip_and_invert_image(m: list):\n    \"\"\"Return the image flipped horizontally and vertically and its inverse.\n    >>> flip_and_invert_image([[0, 1], [1, 0]])\n    [[1, 1], [0, 1], [0, 0], [0, 0]]\n    >>> flip_and_invert_image([[0, 0], [0, 0]])\n    [[0, 0], [0, 0], [1, 1], [0, 0]]\n    \"\"\"\n    \n    return [flip_image(row) for row in m] + [flip_image(row) for row in reversed(m)]\n    \n    \ndef random_list(start, end, size)",
        "num_ids": 1025
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    m = 0\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "num_ids": 29
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not l:\n        return None\n    else:\n        max_num = l[0]\n        for i in l:\n            if i > max_num:\n                max_num = i\n        return max_num\n",
        "num_ids": 54
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n",
        "num_ids": 40
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    counter = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                counter += 1\n    return counter\n",
        "num_ids": 52
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    num7 = 0\n    for i in range(n):\n        num = str(i)\n        if '7' in num:\n            num7 += 1\n        if '11' in num or '13' in num:\n            if '7' in num:\n                num7 += 1\n    return num7\n",
        "num_ids": 74
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n < 7:\n        return 0\n    elif n % 11 == 0:\n        return 1 + fizz_buzz(n // 11)\n    elif n % 13 == 0:\n        return 2 + fizz_buzz(n // 13)\n    else:\n        return fizz_buzz(n - 1)\n",
        "num_ids": 79
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num_fizzes = 0\n    num_buzzes = 0\n    num_fizz_buzzes = 0\n    for num in range(n):\n        if num % 11 == 0 or num % 13 == 0:\n            if num % 11 == 0 and num % 13 == 0:\n                num_fizz_buzzes += 1\n            else:\n                num_buzzes += 1\n        elif num % 7 == 0:\n            num_fizzes += 1\n    return num_fizz_buzzes + num_buzzes + num_fizzes",
        "num_ids": 136
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 and num % 13 == 0:\n            count += 1\n        elif num % 11 == 0:\n            count += 1\n        elif num % 13 == 0:\n            count += 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                result += 1\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    counter = 0\n    for i in range(n):\n        if (i%11==0 or i%13==0):\n            if i%7==0:\n                counter += 1\n    return counter\n",
        "num_ids": 49
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    counter = 0\n    for num in range(1,n):\n        if num % 11 == 0 or num % 13 == 0:\n            if 7 in str(num):\n                counter += 1\n    return counter\n",
        "num_ids": 52
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # print(n)\n    count = 0\n    for x in range(1, n):\n        if x % 11 == 0 or x % 13 == 0:\n            # print(f\"{x}\")\n            count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(min(l[i], l[i+1]))\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(max(l[i], l[i+1]))\n    return l_prime\n",
        "num_ids": 98
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n    return sorted(l2)\n    \n",
        "num_ids": 49
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # create a list of even indicies\n    even_ind = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_ind.append(i)\n    # sort the list of even indicies\n    even_ind.sort()\n    # create new list where odd indicies have their values copied\n    new_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_l.append(l[even_ind[i // 2]])\n        else:\n            new_l.append(l[i])\n    return new_l\n",
        "num_ids": 150
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # check that l is a list and raise appropriate error if not\n    if type(l) is not list:\n        raise TypeError('l must be a list')\n",
        "num_ids": 39
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # l1 = []\n    # for i in range(len(l)):\n    #     if i % 2!= 0:\n    #         l1.append(l[i])\n    #     else:\n    #         l1.append(l[i])\n    # l1.sort()\n    # return l1\n",
        "num_ids": 79
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    even_values_list = []\n    even_indicies = []\n    for index, value in enumerate(l):\n        if index % 2 == 0:\n            even_indicies.append(index)\n            even_values_list.append(value)\n    sorted_even_values_list = sorted(even_values_list)\n    sorted_even_indicies = [even_indicies[i] for i in sorted(range(len(even_indicies)), key=lambda index: even_values_list[index])]\n    even_values_list = []\n    even_indicies = []\n    for index, value in enumerate(l):\n        if index % 2 == 0:\n            even_indicies.append(sorted_even_indicies[index])\n            even_values_list.append(sorted_even_values_list[index])\n    return even_values_list\n",
        "num_ids": 221
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    evens = []\n    odds = []\n    for index, val in enumerate(l):\n        if index % 2 == 0:\n            evens.append(val)\n        else:\n            odds.append(val)\n    evens.sort()\n    return evens + odds\n",
        "num_ids": 70
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sorted_even_indices = []\n    sorted_odd_indices = []\n    even_values = []\n    odd_values = []\n    for index in range(len(l)):\n        if index%2 == 0:\n            even_values.append(l[index])\n        else:\n            odd_values.append(l[index])\n    even_values.sort()\n    odd_values.sort()\n    for i in range(len(even_values)):\n        sorted_even_indices.append(even_values[i])\n    for i in range(len(odd_values)):\n        sorted_odd_indices.append(odd_values[i])\n    return sorted_even_indices + sorted_odd_indices\n",
        "num_ids": 182
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l1 = [i for i in l if i % 2]\n    l2 = [i for i in l if not i % 2]\n    l2.sort()\n    return l1 + l2\n",
        "num_ids": 49
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [group + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 105
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    groups = []\n    for group in s.split(\".\"):\n        group = group[1:] + group[0]\n        groups.append(group)\n    return \"\".join(groups)\n",
        "num_ids": 47
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # split string into groups of 3 characters\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # get elements of each group and join them together.\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 87
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "num_ids": 107
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 78
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # get groups of 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # get each element from each group\n    groups = [[group[1], group[2], group[0]] if len(group) == 3 else group for group in groups]\n    # join groups and return\n    return \"\".join([\"\".join(group) for group in groups])\n",
        "num_ids": 114
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 99
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # initialize empty string to build on\n    decoded = \"\"\n    # iterate over each group, appending first character of each group three times.\n    for i in range(len(s) // 3):\n        decoded += s[(i * 3):((i * 3) + 3)]\n    # if the string has an odd number of characters, add the last character.\n    if len(s) % 3!= 0:\n        decoded += s[len(s) - 1]\n    return decoded\n",
        "num_ids": 119
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = list(s)\n    for i in range(1, len(s)):\n        s[i] = s[i-1]\n    return \"\".join(s)\n",
        "num_ids": 45
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    i = 1\n    j = 2\n    while (True):\n        i += 1\n        j += 1\n        if is_prime(i):\n            if is_fibonacci(i):\n                if n == 1:\n                    return i\n                else:\n                    n -= 1\n",
        "num_ids": 68
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n < 1:\n        return None\n    if n < 3:\n        return 2\n    f = 1\n    l = 1\n    while n > 2:\n        f, l = l, f + l\n        n -= 1\n    prime = True\n    i = 2\n    while i < f:\n        if f % i == 0:\n            prime = False\n            break\n        i += 1\n    if prime:\n        return f\n    else:\n        return None\n",
        "num_ids": 112
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    fib_nums = [0, 1, 1]\n    while fib_nums[-1] < n:\n        nxt_num = fib_nums[-1] + fib_nums[-2]\n        for num in fib_nums:\n            if nxt_num % num == 0:\n                nxt_num += 1\n                break\n        else:\n            fib_nums.append(nxt_num)\n    return nxt_num\n",
        "num_ids": 115
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be positive\")\n    if n == 1:\n        return 2\n    n_0 = 2\n    n_1 = 3\n    prime_number = 5\n    i = 2\n    while i < n:\n        n_2 = n_1 + n_0\n        if is_prime(n_2):\n            i += 1\n            n_0 = n_1\n            n_1 = n_2\n        else:\n            n_0 = n_1\n            n_1 = n_2\n        if i == n:\n            return n_2\n    return n_2\n",
        "num_ids": 151
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    primes = primes_till_n(n)\n    fib = prev_fib(n)\n    if is_prime(fib):\n        return fib\n    else:\n        return prime_fib(n)\n",
        "num_ids": 56
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n <= 2:\n        return n\n    p = 2\n    while n > 2:\n        if is_prime(p):\n            n -= 1\n            if n == 1:\n                return p\n        p += 1\n    return p\n",
        "num_ids": 58
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    prime = is_prime(n)\n    fib_number = fibonacci_number(n)\n    if fib_number % 2 == 0:\n        fib_number += 1\n    fib_number_is_prime = is_prime(fib_number)\n    if prime and fib_number_is_prime:\n        return fib_number\n    else:\n        raise ValueError(\"Not a Fibonacci number and not a prime.\")\n",
        "num_ids": 105
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 1:\n        raise ValueError(\"Fibonacci sequence starts from 1!\")\n    a, b = 2, 3\n    while n > 0:\n        if is_prime(a):\n            n -= 1\n        a, b = b, a + b\n    return a\n",
        "num_ids": 69
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 2:\n        return 2\n    f0, f1 = 0, 1\n    for _ in range(2, n+1):\n        f0, f1 = f1, (f0 + f1) % 10\n        if not is_prime(f1):\n            return f1\n    return f1\n",
        "num_ids": 77
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    fib_num = fib(n)\n    prime_count = 0\n    while prime_count < n:\n        if is_prime(fib_num):\n            prime_count += 1\n            if prime_count == n:\n                return fib_num\n        fib_num = next_fib(fib_num)\n",
        "num_ids": 79
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l.sort()\n    i = 0\n    while i < len(l):\n        j = i + 1\n        while j < len(l):\n            k = j + 1\n            while k < len(l):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n                k += 1\n            j += 1\n        i += 1\n    return False\n",
        "num_ids": 96
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l.sort()\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            if j >= i + 2:\n                if l[i] + l[j] == -l[j + 1]:\n                    return True\n    return False\n",
        "num_ids": 76
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for index, element in enumerate(l):\n        for index2, element2 in enumerate(l):\n            for index3, element3 in enumerate(l):\n                if index!= index2 and index!= index3 and element + element2 + element3 == 0:\n                    return True\n    return False\n",
        "num_ids": 74
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l.sort()\n    for i in range(len(l)-2):\n        if l[i] == 0:\n            continue\n        for j in range(i+1, len(l)-1):\n            if l[i] + l[j] == 0:\n                for k in range(j+1, len(l)):\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n    return False\n",
        "num_ids": 109
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(l) == 1:\n        return False\n    else:\n        found_triples = []\n        for i in range(len(l) - 2):\n            for j in range(i + 1, len(l) - 1):\n                for k in range(j + 1, len(l)):\n                    if l[i] + l[j] + l[k] == 0:\n                        found_triples.append([l[i], l[j], l[k]])\n        return len(found_triples) == len(set(found_triples))\n",
        "num_ids": 137
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert isinstance(l, list), \"triples_sum_to_zero expects a list as an argument.\"\n    assert len(l) > 0, \"triples_sum_to_zero expects a non-empty list as an argument.\"\n",
        "num_ids": 56
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # your code goes here\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if j == i:\n                continue\n            for k in range(len(l)):\n                if k == j or k == i:\n                    continue\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if k == j or k == i or i == j:\n                    continue\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 180
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    seen = set()\n    for x in l:\n        if x in seen:\n            continue\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 87
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = n//2\n    cnt = 0\n    for i in range(n):\n        if (i+1) % (n//2) == 0:\n            cnt += 1\n    return cnt\n",
        "num_ids": 51
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert 0 < n\n",
        "num_ids": 7
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    collisions = 0\n    for i in range(n):\n        x1 = i\n        x2 = -i\n        if x2 < -n:\n            continue\n        for j in range(n):\n            y1 = j\n            y2 = -j\n            if y2 < -n:\n                continue\n            if x2 <= y2:\n                collisions += 1\n    return collisions\n",
        "num_ids": 94
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #create n lists\n    L = [0] * n\n    R = [0] * n\n    #each list will contain the index of the car\n    count = 0\n    #move each car in L\n    for i in range(0,n):\n        L[i] = i\n    #move each car in R\n    for i in range(0,n):\n        R[i] = -i\n    #iterate through the lists\n    for i in range(0,n):\n        for j in range(0,n):\n            #check for collision and if so add to the count\n            if (L[i] == R[j]):\n                count += 1\n    return count",
        "num_ids": 162
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    c = n\n    while c > 0:\n        c = c - 1\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = (n-1)/2\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = (n-1)/2\n    return int(n)\n",
        "num_ids": 87
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert n >= 0, 'n must be >= 0'\n",
        "num_ids": 15
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return 0\n    return (2 * car_race_collision(n-1) + car_race_collision(n-2) ) % 1000000007\n",
        "num_ids": 46
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    left_to_right_car_count = 1\n    right_to_left_car_count = 1\n    collision_count = 0\n    while right_to_left_car_count < n:\n        collision_count += right_to_left_car_count\n        right_to_left_car_count *= 2\n    while left_to_right_car_count < n:\n        collision_count += left_to_right_car_count\n        left_to_right_car_count *= 2\n    return collision_count\n",
        "num_ids": 131
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [i + 1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [e+1 for e in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [x+1 for x in l]\n    \nif __name__ == '__main__':\n    print(incr_list([1, 2, 3]))\n    print(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))",
        "num_ids": 69
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [i + 1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # First solution\n    # return [i+1 for i in l]\n",
        "num_ids": 19
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [x + 1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [i + 1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in l:\n        if l.count(i) > 1:\n            for j in l:\n                if i + j == 0 and j!= i:\n                    return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert isinstance(l, list), \"pairs_sum_to_zero input must be a list\"\n    if not l:\n        return False\n    return pairs_sum_to_zero_helper(l, 0, 0)\n",
        "num_ids": 56
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # If the list has an odd length, it can never have a pair that sums to zero.\n    if len(l) % 2 == 1:\n        return False\n    # Sets are used to eliminate duplicates.\n    s = set(l)\n    # Create a list with a list of 2-element tuples.\n    l = [(a, -a) for a in s]\n    # Sort the list so we can iterate over it.\n    l.sort()\n    # Initialize a boolean variable that will be set to True if we find a pair\n    # that sums to zero.\n    found = False\n    # A for loop that iterates over the list of tuples.\n    for tup in l:\n        # First element of the tuple is the first element of the list.\n        first = tup[0]\n        # Second element of the tuple is the second element of the list.\n        # We negate it to obtain the negative of the second element of the list.\n        second = -tup[1]\n        # Check if the absolute value of the difference of the first element\n        # of the tuple and the negative of the second element of the tuple\n        # is in the set of values.\n        if abs(first - second) in s:\n            # If it is, we set the variable found to True and return it.\n            found = True\n            break\n    # After iterating, if we did not find a pair that sums to zero, return False.\n    return found\n",
        "num_ids": 339
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # initialize the empty set\n    temp_set = set()\n    for i in l:\n        # temp_set is populated with each item in the list\n        temp_set.add(i)\n        if -i in temp_set:\n            # check if the sum of two different items are equal to zero\n            return True\n    return False\n",
        "num_ids": 80
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False",
        "num_ids": 37
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n = len(l)\n    if n < 2:\n        return False\n    seen = set()\n    for x in l:\n        if x in seen:\n            return True\n        else:\n            seen.add(0 - x)\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(l) < 2:\n        return False\n    else:\n        pairs = set()\n        for num in l:\n            target = -num\n            if target in l and l.count(target) < 2:\n                return True\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l.sort()\n    l_copy = l[:]\n    for i in range(0, len(l)):\n        for j in range(i+1, len(l_copy)):\n            if l[i] + l_copy[j] == 0:\n                return True\n            l_copy[j] = l_copy[j] + 1\n    return False\n",
        "num_ids": 90
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(l) < 2:\n        return False\n    else:\n        if l.count(0) > 0:\n            return False\n        else:\n            l = list(set(l))\n            l.sort()\n            for x in range(len(l) - 1):\n                if l[x] + l[x+1] == 0:\n                    return True\n                else:\n                    return False\n",
        "num_ids": 98
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def bin_converter(x: int, base: int):\n        def dec_to_binary_helper(x: int, base: int):\n            if base == 2:\n                return f\"{x:b}\"\n            elif base == 8:\n                return oct(x)\n            elif base == 16:\n                return hex(x)\n",
        "num_ids": 85
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return convert(x, base)\n",
        "num_ids": 10
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    num_list = []\n    if base < 2:\n        return str(x)\n    while x!= 0:\n        num_list.append(x%base)\n        x = x//base\n    return ''.join(list(map(str, num_list[::-1])))\n",
        "num_ids": 71
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    x_str = str(x)\n    x_base = ''\n    while x > 0:\n        x_base += x_str[x % base]\n        x = x // base\n    return x_base[::-1]\n",
        "num_ids": 57
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join(map(str, digits[::-1]))\n",
        "num_ids": 49
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if base <= 10:\n        return str(x)\n    result = ''\n    while x > 0:\n        remainder = x % base\n        if remainder >= 10:\n            result += chr(remainder - 10 + ord('A'))\n        else:\n            result += str(remainder)\n        x = x // base\n    return result[::-1]\n",
        "num_ids": 91
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if base == 10:\n        return str(x)\n    elif base == 2:\n        return \"\".join([str(int(i)) for i in bin(x)[2:]])\n    elif base == 8:\n        return \"\".join([str(int(i)) for i in oct(x)[2:]])\n    elif base == 16:\n        return \"\".join([str(int(i)) for i in hex(x)[2:]])\n    else:\n        return None\n",
        "num_ids": 119
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    res = ''\n    while x:\n        res += str(x % base)\n        x //= base\n    return res[::-1]\n",
        "num_ids": 36
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    x_str = str(x)\n    x_bin = ''\n    for num in x_str:\n        x_bin = x_bin + str(int(num) * base)\n    return x_bin\n",
        "num_ids": 52
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    num_base_10 = 0\n    x = str(x)\n    for i in range(len(x)):\n        num_base_10 += int(x[i]) * int(base) ** (len(x) - i - 1)\n    return str(num_base_10)\n",
        "num_ids": 71
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return round(a * h / 2, 2)\n",
        "num_ids": 14
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a * h * 0.5\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return.5 * a * h\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return 0.5*a*h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    numbers = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        numbers.append(numbers[i-1] + numbers[i-2] + numbers[i-3] + numbers[i-4])\n    return numbers[n]\n",
        "num_ids": 70
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO:\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n==0: return 0\n    if n==1: return 0\n    if n==2: return 2\n    if n==3: return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 71
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    elif n == 4:\n        return 4\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 98
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def _fib(n: int) -> int:\n        if n < 2:\n            return n\n        return _fib(n-1) + _fib(n-2) + _fib(n-3) + _fib(n-4)\n    return _fib(n)\n",
        "num_ids": 73
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 2:\n        return n\n    else:\n        a, b, c = 0, 2, 0\n        for _ in range(2, n):\n            c = a + b + c\n            a = b\n            b = c\n        return c\n",
        "num_ids": 63
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n0 = 0\n    n1 = 0\n    n2 = 2\n    n3 = 0\n    \n    for i in range(0, n):\n        n3 = n0 + n1 + n2\n        n0 = n1\n        n1 = n2\n        n2 = n3\n    return n3\n",
        "num_ids": 77
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    fib4 = [0, 0, 2, 0]\n",
        "num_ids": 16
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 54
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n    return l[len(l) // 2]\n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l = sorted(l)\n    length = len(l)\n    if length % 2 == 1:\n        return l[length // 2]\n    else:\n        return (l[length // 2] + l[length // 2 - 1]) / 2\n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l.sort()\n    n = len(l)\n    return (l[n//2] if n%2 == 1\n    else (l[n//2-1] + l[n//2])/2)\n",
        "num_ids": 53
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[(len(l) // 2) - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
        "num_ids": 64
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l.sort()\n    if len(l) % 2:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l.sort()\n    length = len(l)\n    if length % 2 == 0:\n        return (l[(length//2)-1] + l[(length//2)]) / 2\n    else:\n        return l[(length//2)]\n",
        "num_ids": 62
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2:\n        return l[n//2]\n    return (l[n//2 - 1] + l[n//2]) / 2\n",
        "num_ids": 52
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n",
        "num_ids": 58
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = len(l)\n    if n == 0:\n        raise ValueError(\"median() arg is an empty sequence\")\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2])/2.0\n    return l[n//2]\n",
        "num_ids": 72
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2.0\n    else:\n        return l[n // 2]\n",
        "num_ids": 60
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return text[::-1] == text\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return text[::-1].casefold() == text.casefold()\n",
        "num_ids": 19
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return text[::] == text[::-1]\n",
        "num_ids": 15
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not text or len(text) < 2:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 44
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "num_ids": 48
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # cut the text in the middle\n    # then reverse it\n    # and compare with original\n    if len(text) == 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "num_ids": 70
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(text) == 0:\n        return True\n    if len(text) == 1:\n        return True\n    first_char = text[0]\n    last_char = text[-1]\n    if text[1:-1] == \"\":\n        return True\n    return first_char == last_char and is_palindrome(text[1:-1])\n",
        "num_ids": 89
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(text) < 2:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 41
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return str(text) == str(text)[::-1]\n",
        "num_ids": 17
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert 0 <= n\n    if n == 0:\n        return 1\n    else:\n        return (2 * modp(n - 1, p)) % p\n",
        "num_ids": 39
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    b = bin(n)[2:]\n    x = 1\n    for bit in b:\n        x = (x*x)%p\n        if bit == '1':\n            x = (x*2)%p\n    return x\n",
        "num_ids": 57
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n >= 0, 'Only support positive integers'\n    assert p > 1, 'Not prime'\n    # Positive integers only\n    return pow(2, n, p)\n",
        "num_ids": 42
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert n >= 0 and n < p\n    if n == 0:\n        return 1\n    else:\n        return (modp(n - 1, p) * 2) % p\n",
        "num_ids": 44
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Your code goes here\n    return pow(2, n, p)\n",
        "num_ids": 19
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    while n > 0:\n        if n & 1:\n            return p\n        n >>= 1\n        p = (p**2) % p\n    return 1\n",
        "num_ids": 40
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #I will not try to optimize this function or its calls, so if you're looking\n    #for a \"clean\" way of doing something, please use the modp2 function.\n    #Here's the pseudocode:\n    #while n > 0:\n    #    r = (r * 2) % p\n    #    n = n - 1\n    #return r\n    #It's not clear to me what the while loop is doing, so I'll just document\n    #it here:\n    #The for loop gets rid of the negative numbers, as explained below.\n    #It adds the r and p numbers to a temporary variable, and multiplies it by\n    #2, so it's a square.\n    #Then it divides it by p, so it's converted to an integer and then returned.\n    #It only does this if the remainder isn't 0, so it avoids the 2^n and just\n    #returns the integer number.\n    r = 1\n    for _ in range(n):\n        r = (r * 2) % p\n    return r if r!= 0 else p\n",
        "num_ids": 251
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n",
        "num_ids": 10
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n >= 0, \"n should be >= 0\"\n    assert is_prime(p), \"p should be prime\"\n    assert p >= 2, \"p should be >= 2\"\n    return pow(2, n, p)\n",
        "num_ids": 55
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert p > 2\n    if n == 0:\n        return 1\n    elif n == 1:\n        return p % 2\n    elif n % 2 == 0:\n        return (2 * modp(n // 2, p) ** 2) % p\n    else:\n        return (modp(n - 1, p) ** 2) % p\n",
        "num_ids": 84
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) + 26 - 5) % 26 + ord(\"a\")) for ch in s])\n",
        "num_ids": 38
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    vowels = \"aeiou\"\n    new_string = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string\n",
        "num_ids": 51
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = 'aeiouAEIOU'\n    new = ''\n    for i in text:\n        if i not in vowels:\n            new += i\n    return new\n",
        "num_ids": 45
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = \"aeiou\"\n    new = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            new += char\n    return new\n",
        "num_ids": 45
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowels = \"aeiou\"\n    for i in range(len(vowels)):\n        text = text.replace(vowels[i],\"\")\n    return text\n",
        "num_ids": 45
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n",
        "num_ids": 51
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    vowels = 'aeiouAEIOU'\n    vowels_to_remove = ''\n    new_text = ''\n    for i in text:\n        if i in vowels:\n            vowels_to_remove += i\n    for i in text:\n        if i not in vowels_to_remove:\n            new_text += i\n    return new_text\n",
        "num_ids": 92
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join(char for char in text if char.lower() not in VOWELS)\n",
        "num_ids": 24
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new = \"\"\n    for char in text:\n        if char not in vowels:\n            new += char\n    return new\n",
        "num_ids": 67
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    vowels = set(\"aeiou\")\n    newtext = \"\"\n    for i in text:\n        if i not in vowels:\n            newtext += i\n    return newtext\n    # return text.translate(str.maketrans(\"aeiouAEIOU\", \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"))\n",
        "num_ids": 98
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowel_chars = 'aeiouAEIOU'\n    result = \"\"\n    for char in text:\n        if char not in vowel_chars:\n            result = result + char\n    return result\n    #another way\n    #return text.translate(None, \"aeiouAEIOU\")\n",
        "num_ids": 76
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return all(i <= t for i in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return all(num < t for num in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return l == [i for i in l if i < t]\n",
        "num_ids": 17
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert isinstance(l, list) and isinstance(t, int), 'You must provide two integers'\n    for x in l:\n        if x > t:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return max(l) < t\n",
        "num_ids": 10
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return all(i<t for i in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for x in l:\n        if x > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(set(s0) & set(s1)) == len(s0) == len(s1)\n",
        "num_ids": 29
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s0 = set(s0)\n    s1 = set(s1)\n    return len(s0 - s1) == 0 and len(s1 - s0) == 0\n",
        "num_ids": 45
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert type(s0) == str\n    assert type(s1) == str\n    assert len(s0) == len(s1)\n    return all(letter in s0 and letter in s1 for letter in s0)\n",
        "num_ids": 55
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for c0, c1 in zip(s0, s1):\n        if c0!= c1:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s0 = set(s0)\n    s1 = set(s1)\n    return s0 == s1\n",
        "num_ids": 29
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(s0) == len(s1) and len(set(s0)) == len(set(s1))\n",
        "num_ids": 31
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s0_set = set(s0)\n    s1_set = set(s1)\n    if s0_set.intersection(s1_set) == s0_set:\n        return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    f0 = 0\n    f1 = 1\n    f2 = 0\n    for i in range(n):\n        f0, f1, f2 = f1, f2, f0 + f1\n    return f1\n",
        "num_ids": 55
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 1:\n        return\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)\n",
        "num_ids": 54
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 1:\n        return None\n    if n < 3:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 39
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 2:\n        return n\n    return fib(n-2) + fib(n-1)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 2) + fib(n - 1)\n    \ndef count_up(n: int):\n    \"\"\"Print all numbers up to n in ascending order.\n    >>> count_up(5)\n    1\n    2\n    3\n    4\n    5\n    \"\"\"\n    def count_up_helper(n, start):\n        if start > n:\n            return\n        print(start)\n        count_up_helper(n, start + 1)\n    count_up_helper(n, 1)\n    \ndef factorial(n: int):\n    \"\"\"Return n!\n    >>> factorial(5)\n    120\n    >>> factorial(1)\n    1\n    >>> factorial(3)\n    6\n    \"\"\"\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)\n",
        "num_ids": 225
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    left_brackets = []\n    right_brackets = []\n    for char in brackets:\n        if char == \"<\":\n            left_brackets.append(char)\n        elif char == \">\":\n            try:\n                left_brackets.pop()\n            except IndexError:\n                return False\n        else:\n            raise ValueError(\"Character is not a bracket: %s\" % char)\n    return not left_brackets\n",
        "num_ids": 104
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n",
        "num_ids": 56
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Make a list of '<' and '>'.\n    bracket_list = []\n    for bracket in brackets:\n        bracket_list.append(bracket)\n",
        "num_ids": 42
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return not any(brackets.find(c) == -1 for c in \"><\")\n",
        "num_ids": 23
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    brackets = list(brackets)\n    brackets.append('>')\n    brackets.insert(0, '<')\n    brackets.insert(0, '<')\n    brackets.append('>')\n    for i in range(1, len(brackets) - 1):\n        if brackets[i] == '>' and brackets[i - 1] == '<':\n            brackets[i - 1] = '-'\n        if brackets[i] == '<' and brackets[i + 1] == '>':\n            brackets[i + 1] = '-'\n",
        "num_ids": 138
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    bracket_dict = {\"<\": \">\", \">\": \"<\"}\n    bracket_stack = []\n    for bracket in brackets:\n        if bracket_stack:\n            if bracket in bracket_dict and bracket_dict[bracket] == bracket_stack[-1]:\n                bracket_stack.pop()\n            else:\n                bracket_stack.append(bracket)\n        else:\n            bracket_stack.append(bracket)\n    return not bracket_stack\n",
        "num_ids": 113
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    brackets = list(brackets)\n    bracket_stack = []\n    for i, bracket in enumerate(brackets):\n        if bracket == '<':\n            bracket_stack.append(bracket)\n        elif bracket == '>':\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                bracket_stack.append(bracket)\n                break\n    return not bracket_stack\n",
        "num_ids": 103
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    brackets = list(brackets)\n    openers = []\n",
        "num_ids": 17
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    bracket_pairs = {}\n",
        "num_ids": 10
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(l) < 2:\n        return True\n    elif l[0] <= l[1]:\n        if l[0] < l[1]:\n            return monotonic(l[1:])\n        else:\n            return False\n    elif l[0] > l[1]:\n        if l[0] > l[1]:\n            return monotonic(l[1:])\n        else:\n            return False\n",
        "num_ids": 105
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(l) < 2:\n        return True\n    return l == sorted(l) or l == sorted(l, reverse=True)\n",
        "num_ids": 35
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or\n            all(l[i] >= l[i + 1] for i in range(len(l) - 1)))\n",
        "num_ids": 58
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(l) < 2:\n        return True\n    \n    current = l[0]\n    for elem in l[1:]:\n        if (elem < current and elem > 0) or (elem > current and elem < 0):\n            return False\n        current = elem\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return all(l[i] < l[i+1] for i in range(len(l)-1)) or all(l[i] > l[i+1] for i in range(len(l)-1))\n",
        "num_ids": 53
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(l) > 1:\n        if (l[1] - l[0]) * (l[2] - l[1]) >= 0:\n            return True\n        else:\n            return False\n    else:\n        return True",
        "num_ids": 57
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = sorted(l)\n    return s == l or s[::-1] == l\n",
        "num_ids": 24
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(l) <= 1:\n        return True\n    return l[0] <= l[1] and monotonic(l[1:])\n",
        "num_ids": 37
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return all(l[i+1] >= l[i] for i in range(len(l) - 1)) or all(l[i+1] <= l[i] for i in range(len(l) - 1))\n",
        "num_ids": 55
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = [l[i] < l[i+1] for i in range(len(l)-1)]\n    return all(s) or all(not s)\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not l1 or not l2: return []\n    s1, s2 = set(l1), set(l2)\n    return sorted(list(s1.intersection(s2)))\n",
        "num_ids": 48
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    common = set(l1).intersection(set(l2))\n    return sorted(common)\n",
        "num_ids": 25
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # l1.sort()\n    # l2.sort()\n    # l3 = []\n    # i,j = 0,0\n    # while i < len(l1) and j < len(l2):\n    #     if l1[i] == l2[j]:\n    #         l3.append(l1[i])\n    #         i += 1\n    #         j += 1\n    #     elif l1[i] > l2[j]:\n    #         j += 1\n    #     else:\n    #         i += 1\n    # return l3\n",
        "num_ids": 140
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    common_list = []\n    for element in l1:\n        if element in l2:\n            if element not in common_list:\n                common_list.append(element)\n    return common_list\n",
        "num_ids": 50
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(set(l1).intersection(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements\n",
        "num_ids": 37
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(l1) <= len(l2):\n        return sorted(set(l1) & set(l2))\n    else:\n        return sorted(set(l2) & set(l1))\n",
        "num_ids": 51
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    s3 = s1.intersection(s2)\n    return list(s3)\n",
        "num_ids": 43
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l3 = []\n    for i in l1:\n        if i in l2:\n            l3.append(i)\n    return sorted(l3)\n",
        "num_ids": 40
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if l1 == []:\n        return []\n    if l2 == []:\n        return []\n    # Your code here\n    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 49
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    i = 2\n    while i <= n**0.5:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n",
        "num_ids": 39
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    factor = n-1\n    while factor > 1:\n        if n % factor == 0:\n            return factor\n        factor = factor - 1\n",
        "num_ids": 35
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    max_prime = 0\n    while n % 2 == 0:\n        max_prime = 2\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    if n > 2:\n        max_prime = n\n    return max_prime\n",
        "num_ids": 106
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "num_ids": 34
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 1\n    return n\n",
        "num_ids": 42
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    num = n\n    divisor = 2\n    while (num % divisor!= 0):\n        divisor += 1\n    return divisor\n",
        "num_ids": 39
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n // i\n            i = 2\n        else:\n            i += 1\n    return n\n",
        "num_ids": 56
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    k = 2\n    while n % k!= 0:\n        k += 1\n    return k\n",
        "num_ids": 25
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n > 1 and isinstance(n, int), \"invalid input\"\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
        "num_ids": 62
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    largest = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if is_prime(i):\n                largest = i\n    return largest\n",
        "num_ids": 46
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return sum(range(1, n+1))\n",
        "num_ids": 16
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum(range(1,n+1))\n",
        "num_ids": 14
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = 1\n    total = 0\n    while i <= n:\n        total += i\n        i += 1\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert n > 0, 'n should be positive'\n    return n * (n + 1) // 2\n",
        "num_ids": 26
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    total = 0\n    for i in range(n+1):\n        total += i\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sum_numbers = 0\n    for i in range(1,n+1):\n        sum_numbers += i\n    return sum_numbers\n",
        "num_ids": 37
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1:\n        return 1\n    return n + sum_to_n(n-1)\n    \ndef reverse_string(word: str):\n    \"\"\"reverse_string reverses the string.\n    >>> reverse_string(\"adc\")\n    'cda'\n    >>> reverse_string(\"python\")\n    'nohtyp'\n    >>> reverse_string(\"a\")\n    'a'\n    >>> reverse_string(\"ab\")\n    'ba'\n    \"\"\"\n    if len(word) == 1:\n        return word\n    return word[-1] + reverse_string(word[:-1])\n    \ndef guess_number(num: int):\n    \"\"\"guess_number is a function that takes the user's guess of a number,\n    and returns whether the guess is too high, too low, or correct.\n    >>> guess_number(2)\n    'too low'\n    >>> guess_number(5)\n    'too high'\n    >>> guess_number(2)\n    'correct'\n    >>> guess_number(2)\n    'correct'\n    \"\"\"\n    if num > 5:\n        return \"too high\"\n    if num < 5:\n        return \"too low\"\n    return \"correct\"\n    \ndef count_primes(num: int):\n    \"\"\"count_primes is a function that takes a number and returns a count of how many primes there are.\n    >>> count_primes(10)\n    4\n    >>> count_primes(10)\n    4\n    >>> count_primes(10)\n    4\n    >>> count_primes(11)\n    5\n    >>> count_primes(20)\n    8\n    >>> count_primes(20)\n    8\n    >>> count_primes(20)\n    8\n    >>> count_primes(20)\n    8\n    \"\"\"\n    count = 0\n    if num < 2:\n        return count\n    if num == 2:\n        return 1\n    if num == 3:\n        return 1\n    if num == 4:\n        return 2\n    if num == 5:\n        return 2\n    if num == 6:\n        return 3\n    if num == 7:\n        return 3\n    if num == 8:\n        return 4\n    if num == 9:\n        return 4\n    if num == 10:\n        return 4\n    if num == 11:\n        return 5\n    if num == 12:\n        return 5\n    if num == 13:\n        return 5\n    if num == 14:\n        return 5\n    if num == 15:\n        return 5\n    if num == 16:\n        return 5\n    if num == 17:\n        return 5\n    if num == 18:\n        return 6\n    if num == 19:\n        return 6\n    if num == 20:\n        return 6\n    if num == 21:\n        return 6\n    if num == 22:\n        return 7\n    if num == 23:\n        return 7\n    if num == 24:\n        return 7\n    if num == 25:\n        return 7\n    if num == 26:\n        return 7\n    if num == 27:\n        return 7\n    if num == 28:\n        return 7\n    if num == 29:\n        return 7\n    if num == 30:\n        return 7\n    if num == 31:\n        return 7\n    if num == 32:\n        return 7\n    if num == 33:\n        return 7\n    if num == 34:\n        return 8\n    if num == 35:\n        return 8\n    if num == 36:\n        return 8\n    if num == 37:\n        return 8\n    if num == 38:\n        return 8\n    if num == 39:\n        return 8\n    if num == 40:\n        return 8\n    if num == 41:\n        return 8\n    if num == 42:\n        return 9\n    if num == 43:\n        return 9\n    if num == 44:\n        return 9\n    if num == 45:\n        return 9\n    if num == 46:\n        return 9\n    if num == 47:\n        return 9\n    if num == 48:\n        return 9\n    if num == 49:\n        return 9\n    if num == 50:\n        return 9\n    if num == 51:\n        return 9\n    if num == 52:\n        return 9\n    if num == 53:\n        return 10\n    i",
        "num_ids": 1025
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return int(n*(n+1)/2)\n",
        "num_ids": 15
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return n * (n + 1) // 2\n",
        "num_ids": 13
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_stack.append(bracket)\n        else:\n            if not bracket_stack:\n                return False\n            bracket_stack.pop()\n    return not bracket_stack\n",
        "num_ids": 67
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == '(':\n            bracket_stack.append(b)\n        elif b == ')':\n            if len(bracket_stack) == 0:\n                return False\n            else:\n                bracket_stack.pop()\n",
        "num_ids": 73
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    open = []\n    for b in brackets:\n        if b == \"(\":\n            open.append(b)\n        elif open:\n            open.pop()\n        else:\n            return False\n    return not open\n",
        "num_ids": 53
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    correct = []\n    opening = brackets[0]\n    for char in brackets[1:]:\n        if char == opening:\n            correct.append(opening)\n        elif len(correct) == 0:\n            return False\n        elif char == closing:\n            correct.pop()\n        else:\n            return False\n    if len(correct) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 98
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    open_brackets = 0\n    open_brackets_indexes = []\n    for i, char in enumerate(brackets):\n        if char == '(':\n            open_brackets += 1\n            open_brackets_indexes.append(i)\n        elif char == ')':\n            if open_brackets == 0:\n                return False\n            else:\n                open_brackets -= 1\n                open_brackets_indexes.pop()\n    return open_brackets == 0\n",
        "num_ids": 118
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    bracket_stack = []\n    open_bracket_count = 0\n    for c in brackets:\n        if c == \"(\":\n            open_bracket_count += 1\n            bracket_stack.append(\"(\")\n        elif c == \")\":\n            if not bracket_stack:\n                return False\n            elif bracket_stack[-1] == \"(\":\n                bracket_stack.pop()\n            else:\n                return False\n    return not bracket_stack\n",
        "num_ids": 113
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # TODO: Implement this function.\n",
        "num_ids": 11
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 67
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    bracket_count = 0\n    open_brackets = 0\n    for i, bracket in enumerate(brackets):\n        if bracket == \"(\":\n            open_brackets += 1\n        else:\n            bracket_count += 1\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    return bracket_count == open_brackets == 0\n",
        "num_ids": 92
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    \"\"\"\n    your code here\n    \"\"\"\n    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_stack.append(bracket)\n        if bracket == \")\":\n            if len(bracket_stack) == 0:\n                return False\n            else:\n                bracket_stack.pop()\n    \n    if len(bracket_stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 113
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [i*xs[j+1] for j, i in enumerate(xs[:-1])]\n",
        "num_ids": 27
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [x * i for i, x in enumerate(xs)][1:]\n",
        "num_ids": 21
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    derivative = [0] * (len(xs) - 1)\n    for i in range(len(derivative)):\n        derivative[i] = xs[i + 1] * (i + 1)\n    return derivative\n",
        "num_ids": 59
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    derivative = []\n    for i, v in enumerate(xs):\n        if i == 0:\n            continue\n        derivative.append(i * v)\n    return derivative\n",
        "num_ids": 46
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = len(xs)\n    return [i * xs[i] for i in range(1, n)]\n",
        "num_ids": 29
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    d_xs = []\n    for i, x in enumerate(xs):\n        if i == 0:\n            d_xs.append(0)\n        else:\n            d_xs.append(i * x)\n    return d_xs\n",
        "num_ids": 59
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    der = []\n    for i in range(1, len(xs)):\n        der.append(xs[i]*i)\n    return der\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    der = []\n    for i in range(1, len(xs)):\n        der.append(xs[i] * i)\n    return der\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [i * j for i, j in zip(xs[1:], range(len(xs) - 1, 1, -1))]\n",
        "num_ids": 35
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n = len(xs) - 1\n    return [a * n for a in xs]\n",
        "num_ids": 24
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    fib_list = [0, 1]\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 0\n    for i in range(2, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list[-1]\n",
        "num_ids": 83
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 63
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    fibfib_0 = 0\n    fibfib_1 = 0\n    fibfib_2 = 1\n    if n == 0:\n        return fibfib_0\n    elif n == 1:\n        return fibfib_1\n    elif n == 2:\n        return fibfib_2\n    else:\n        for i in range(3, n+1):\n            fibfib_n = fibfib_0 + fibfib_1 + fibfib_2\n            fibfib_0 = fibfib_1\n            fibfib_1 = fibfib_2\n            fibfib_2 = fibfib_n\n        return fibfib_n\n",
        "num_ids": 171
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 1\n    n1, n2 = 1, 0\n    for i in range(3, n+1):\n        n1, n2 = n2, n1 + n2\n    return n2\n",
        "num_ids": 73
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert type(n) is int and n >= 0, \"Invalid input\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    prefib1 = 0\n    prefib2 = 1\n    fibfib_sequence = 0\n    for i in range(3, n+1):\n        fibfib_sequence = prefib1 + prefib2\n        prefib1 = prefib2\n        prefib2 = fibfib_sequence\n    return fibfib_sequence\n",
        "num_ids": 137
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 2:\n        return n\n",
        "num_ids": 12
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 1\n    else: return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 59
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return n if n in [0,1] else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 40
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert type(n) == int, \"Please input an integer\"\n    assert n >= 0, \"Please input a non-negative integer\"\n    def fibfib_helper(n: int, a: int, b: int, c: int) -> int:\n        if n == 0:\n            return a\n        elif n == 1:\n            return b\n        else:\n            return fibfib_helper(n-1, b, c, a+b+c)\n    return fibfib_helper(n, 0, 1, 1)\n",
        "num_ids": 131
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for c in s:\n        if c in 'aeiouAEIOU':\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    vowel = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowel:\n            count += 1\n    if (len(s) > 0) and (s[-1] == 'y') and (s[-2] in vowel):\n        count -= 1\n    return count\n",
        "num_ids": 86
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # vowels = 'aeiou'\n    # vowels = set(vowels)\n    # vowels = {'a', 'e', 'i', 'o', 'u'}\n    # return len([c for c in s if c in vowels])\n",
        "num_ids": 64
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # vowels = \"aeiouy\"\n    # count = 0\n    # for letter in s:\n    #     if letter in vowels:\n    #         count += 1\n    # return count\n",
        "num_ids": 49
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    vowel_count = 0\n    \n    for x in s:\n        if x.lower() in vowels:\n            vowel_count += 1\n    \n    if s.lower()[-1] == 'y':\n        vowel_count -= 1\n    \n    return vowel_count\n",
        "num_ids": 98
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    pass\n",
        "num_ids": 6
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return len(list(filter(lambda x: x in 'aeiou', list(s))))\n",
        "num_ids": 26
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if shift >= len(str(x)):\n        return int(str(x)[::-1])\n    else:\n        return int(str(x)[shift:] + str(x)[:shift])\n",
        "num_ids": 49
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # make it a string to concatenate\n    x_string = str(x)\n    if shift > len(x_string):\n        return x_string[::-1]\n    return x_string[-shift:] + x_string[:-shift]\n",
        "num_ids": 62
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift] if shift < len(str(x)) else str(x)[-shift:] + str(x)[:-shift][::-1]\n",
        "num_ids": 48
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if shift < 0:\n        return circular_shift(abs(x), abs(shift))[::-1]\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[-shift:] + str(x)[:-shift]\n",
        "num_ids": 69
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = str(x)\n    if shift >= len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = str(x)\n    if shift <= len(s):\n        return s[-shift:] + s[:-shift]\n    else:\n        return s[-shift:] + s[:-shift] + s[:shift]\n",
        "num_ids": 56
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not isinstance(x, int) or not isinstance(shift, int):\n        raise TypeError\n    elif shift >= 0:\n        return str(x)[-shift:] + str(x)[:-shift]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n",
        "num_ids": 73
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return ''.join(list(str(x))[-shift:] + list(str(x))[:-shift])\n",
        "num_ids": 29
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    x = str(x)\n    l = len(x)\n    if shift >= l:\n        return x[::-1]\n    else:\n        return x[l - shift:] + x[:l - shift]\n",
        "num_ids": 54
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if shift <= 0:\n        return str(x)\n    if x < 0:\n        x = -x\n        shift = -shift\n    digits = []\n    while x:\n        digits.append(str(x % 10))\n        x //= 10\n    result = digits[-shift:] + digits[:-shift]\n    if -shift > len(digits):\n        result = result[:shift]\n    return ''.join(result)\n",
        "num_ids": 108
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    digitSum = 0\n    for char in s:\n        if ord(char) in range(65,91):\n            digitSum += ord(char)\n    return digitSum",
        "num_ids": 43
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([ord(c) for c in s.upper() if c.isupper()])\n",
        "num_ids": 24
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i in s:\n        if ord(i) in range(65,91):\n            count += ord(i)\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum([ord(i) for i in s if ord(i)>=65 and ord(i)<=90])\n",
        "num_ids": 31
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum([ord(chr) for chr in s.upper() if chr.isupper()])\n",
        "num_ids": 27
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    num = 0\n    for i in s:\n        if 65 <= ord(i) <= 90:\n            num += ord(i)\n    return num\n",
        "num_ids": 37
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([ord(x) for x in s.upper() if x.isalpha()])\n",
        "num_ids": 24
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    pass\n    \n",
        "num_ids": 8
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # s = \"\".join(s.split())\n    print(n)\n    n = int(n)\n    m = s.split()\n    print(m)\n    print(n)\n    if m[0] == \"0\" or m[1] == \"0\":\n        return 0\n    else:\n        return n - int(m[0]) - int(m[1])\n",
        "num_ids": 94
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers_of_apples = s[:s.index(' ')]\n    numbers_of_oranges = s[s.index(' ') + 1:]\n    return n - int(numbers_of_apples) - int(numbers_of_oranges)\n    #pass\n",
        "num_ids": 71
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if s.split()[0].isdigit() and s.split()[2].isdigit():\n        if int(s.split()[0]) + int(s.split()[2]) < n:\n            return n - (int(s.split()[0]) + int(s.split()[2]))\n    return 'Fruit distribution is not valid'\n",
        "num_ids": 89
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # your code here\n    return 0\n",
        "num_ids": 11
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return n - s.split(\" \")[0] - s.split(\" \")[1]\n",
        "num_ids": 23
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    apple_count = int(s.split()[0])\n    orange_count = int(s.split()[1])\n    return apple_count * n - orange_count * n\n",
        "num_ids": 45
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if 'apples' in s or 'oranges' in s:\n        s = s.split(' ')\n        return n - int(s[0]) - int(s[2])\n    else:\n        s = s.split(' ')\n        return n - int(s[1]) - int(s[3])\n",
        "num_ids": 78
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return n - int(s.split()[0]) - int(s.split()[1])",
        "num_ids": 24
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    from re import findall\n    def remove_spaces(s):\n        \"\"\"\n        remove spaces from the input string\n        \"\"\"\n        return findall(\"[0-9]+\",s)[0]\n    def remove_comas(s):\n        \"\"\"\n        remove commas from the input string\n        \"\"\"\n        return s.replace(\",\", \"\")\n    def str_to_list(s):\n        \"\"\"\n        convert a string into list of strings \n        \"\"\"\n        return s.split(\" \")\n    def fruits_to_int(l):\n        \"\"\"\n        convert the list of strings into a list of ints\n        \"\"\"\n        return list(map(int, l))\n    def sum_list(l):\n        \"\"\"\n        return the sum of the list of ints\n        \"\"\"\n        return sum(l)\n    def str_to_int(s):\n        \"\"\"\n        convert a string into an int\n        \"\"\"\n        return int(s)\n    def mango_fruits(l,n):\n        \"\"\"\n        return the number of mango fruits in the basket\n        \"\"\"\n        return n-sum(l)\n    s = remove_spaces(s)\n    s = remove_comas(s)\n    s = str_to_list(s)\n    l = fruits_to_int(s)\n    n = str_to_int(n)\n    return mango_fruits(l,n)\n",
        "num_ids": 337
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return list(zip(*pluck_helper(arr)))\n",
        "num_ids": 16
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    #method 1: \n    # min_even = 1000000000\n    # min_index = -1\n    # for i in range(len(arr)):\n    #     if arr[i] % 2 == 0 and arr[i] < min_even:\n    #         min_even = arr[i]\n    #         min_index = i\n    # if min_index!= -1:\n    #     arr.pop(min_index)\n    #     return arr\n    # else:\n    #     return []\n",
        "num_ids": 124
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return [min([(node.value, i) for i, node in enumerate(arr)], key=lambda x: x[0])[0], min([(node.value, i) for i, node in enumerate(arr)], key=lambda x: x[0])[1]] if arr else []\n",
        "num_ids": 75
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n    return []\n",
        "num_ids": 48
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Simple cases\n    if not arr:\n        return []\n    elif len(arr) == 1:\n        return arr[0], 0\n",
        "num_ids": 35
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    arr_sorted = sorted(arr, key=lambda x: (x % 2 == 0, x))\n    if arr_sorted:\n        return [arr_sorted[0], arr.index(arr_sorted[0])]\n    else:\n        return []\n",
        "num_ids": 65
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    arr = sorted(arr, key=lambda x: x % 2 == 0 and x or -1)\n    if not arr: return []\n    return [arr[0], arr.index(arr[0])]\n",
        "num_ids": 50
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    values = [n.value for n in arr]\n    values = filter(lambda x: x % 2 == 0, values)\n    values = list(values)\n    if values:\n        return [min(values), arr.index(min(arr, key=lambda x: x.value))]\n    return []\n",
        "num_ids": 74
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # get all even values\n    evens = [v for v in arr if v%2 == 0]\n",
        "num_ids": 26
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    max_freq = -1\n    max_num = -1\n    for num in lst:\n        freq = lst.count(num)\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n        elif freq == max_freq and num > max_num:\n            max_num = num\n",
        "num_ids": 90
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # count = dict()\n    # for num in lst:\n    #     if num not in count:\n    #         count[num] = 1\n    #     else:\n    #         count[num] += 1\n    # for num, freq in count.items():\n    #     if freq >= num:\n    #         return num\n    # return -1\n",
        "num_ids": 88
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(lst, key=lambda x: x[0], reverse=True)[0][0]\n",
        "num_ids": 26
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # your code here\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if freq[i] >= i:\n            return i\n    return -1\n",
        "num_ids": 79
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    \n    max_freq = 0\n    max_freq_int = -1\n    \n    for i in d:\n        if d[i] >= max_freq:\n            max_freq = d[i]\n            max_freq_int = i\n    \n    return max_freq_int\n",
        "num_ids": 116
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n",
        "num_ids": 31
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst) == 1:\n        if lst[0] >= 1:\n            return lst[0]\n        else:\n            return -1\n    else:\n        count = [0] * max(lst)\n        for i in lst:\n            count[i] += 1\n        for i in range(len(count)-1):\n            if count[i] < count[i+1]:\n                return i\n        return -1\n",
        "num_ids": 109
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst.sort()\n    freq_lst = []\n    for i in lst:\n        if i > 0:\n            freq_lst.append(lst.count(i))\n    for i in freq_lst:\n        if i > lst.count(i):\n            return i\n    return -1\n",
        "num_ids": 81
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # raise NotImplementedError\n    max_count = 0\n    count = 0\n    result = -1\n    for i in range(len(lst)):\n        count += lst.count(lst[i])\n        if lst[i]>0 and count>=lst[i]:\n            if count>max_count:\n                max_count = count\n                result = lst[i]\n    return result\n",
        "num_ids": 103
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            lst[i] = 0\n    new = []\n    for i in lst:\n        if i > 0:\n            new.append(i)\n    freq = {}\n    for i in new:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if freq[i] > i:\n            return i\n    return -1\n",
        "num_ids": 140
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst.sort()\n    lst.sort(reverse=True)\n    return lst\n    # return sorted(lst)\n    # return sorted(lst)[::-1]\n    # return list(reversed(sorted(lst)))\n",
        "num_ids": 62
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst.sort(reverse=True)\n    while len(lst) > 0:\n        minimum = lst[0]\n        maximum = lst[0]\n        for x in lst:\n            if minimum > x:\n                minimum = x\n            if maximum < x:\n                maximum = x\n        lst.remove(maximum)\n        lst.remove(minimum)\n        lst.insert(0, minimum)\n        lst.append(maximum)\n    return lst\n",
        "num_ids": 116
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return []\n    result = [lst[0]]\n    remaining = lst[1:]\n    i = 0\n    while len(remaining) > 0:\n        curr = remaining[0]\n        result = [remaining[0]] + result\n        remaining = remaining[1:]\n        if curr > i:\n            for item in remaining:\n                if item <= i:\n                    remaining.remove(item)\n            i += 1\n    return result\n",
        "num_ids": 122
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst_len = len(lst)\n    if lst_len == 0:\n        return []\n    result = []\n    for i in range(lst_len):\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if len(lst) == 0:\n            break\n        result.append(max(lst))\n        lst.remove(max(lst))\n    result.append(min(lst))\n    return result\n",
        "num_ids": 119
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    pass\n",
        "num_ids": 6
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    result = []\n    for i in range(len(lst)):\n        idx = lst.index(max(lst[:i] + lst[i+1:]))\n        result.append(lst[idx])\n        lst[idx] = 0\n    return result + strange_sort_list(lst)\n",
        "num_ids": 109
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not lst:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    length = len(lst)\n    new_list = []\n    for i in range(0, length):\n        new_list.append(lst[i])\n        new_list.append(max(lst[i + 1:]))\n    return new_list\n",
        "num_ids": 65
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    print(lst)\n    lst.sort()\n    print(lst)\n    lst[:] = lst[::-1]\n    print(lst)\n    return lst\n",
        "num_ids": 48
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not lst:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sides = sorted([a, b, c])\n    if sides[2] > sides[0] + sides[1]:\n        return -1\n    else:\n        return round((sides[0] * sides[1]) / 2, 2)\n    \n    \ndef is_triangle(a, b, c):\n    '''\n    Return True if a, b, and c form a triangle\n    Otherwise return False\n    '''\n    sides = sorted([a, b, c])\n    if sides[2] > sides[0] + sides[1]:\n        return False\n    else:\n        return True\n    \n    \ndef is_right(a, b, c):\n    '''\n    Return True if a, b, and c form a right triangle\n    Otherwise return False\n    '''\n    if triangle_area(a, b, c) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 218
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a + b <= c or b + c <= a or a + c <= b:\n        return -1\n    return round((a * b * (c ** 2) / (4 * ((a + b + c) ** 2))) ** (1 / 2), 2)\n",
        "num_ids": 63
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    return -1\n",
        "num_ids": 71
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Given that the sum of the two sides is greater than the third side,\n    # if the three sides form a triangle, then the area will be half of the \n    # perimeter.\n    s = (a+b+c)/2.0\n    return round(math.sqrt(s*(s-a)*(s-b)*(s-c)), 2)\n    \n    \ndef main():\n    print(\"Area of triangle test\")\n    print(\"Expected output: 6.00\")\n    print(\"Actual output:\", triangle_area(3, 4, 5))\n    print()\n    print(\"Expected output: -1\")\n    print(\"Actual output:\", triangle_area(1, 2, 10))\n    print()\n    print(\"Actual output:\", triangle_area(1, 3, 4))\n    \n",
        "num_ids": 194
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if ((a + b > c) and (b + c > a) and (a + c > b)):\n        return round(((a + b + c)/2 * (abs(pow(((a + b + c)/2) - a, 2))) * \\\n        pow(abs(((a + b + c)/2) - b), 2)) ** (1/2), 2)\n    else:\n        return -1\n",
        "num_ids": 102
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return round(math.sqrt(pow(a, 2) + pow(b, 2) - 2 * a * b * math.cos(math.pi / 3)), 2)\n",
        "num_ids": 44
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = (a + b + c) / 2\n    if s - max(a, b, c) < min(a, b, c):\n        return -1\n    else:\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n",
        "num_ids": 76
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if (a+b < c) or (a+c < b) or (b+c < a):\n        return -1\n    else:\n        return round((a+b+c)/2, 2)\n    \nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))\nprint(triangle_area(3, 6, 5)",
        "num_ids": 94
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s1 = (a+b+c)/2\n    s2 = abs(s1*(s1-a)*(s1-b)*(s1-c))\n    return round(s2**0.5, 2) if s2>0 else -1\n",
        "num_ids": 64
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum = a + b + c\n    if sum < a or sum < b or sum < c:\n        return -1\n    else:\n        area = round(((a + b + c) / 2) * (((a + b + c) / 2) - a) * (((a + b + c) / 2) - b) * (((a + b + c) / 2) - c), 2)\n        return area\n    \nprint(triangle_area(3, 4, 5)) #6.00\nprint(triangle_area(1, 2, 10)) #-1\nprint(triangle_area(3, 4, 6)) #6.00\nprint(triangle_area(3, 4, 7)) #-1\nprint(triangle_area(1, 3, 2)) #1.38\nprint(triangle_area(3, 5, 3)) #6.0",
        "num_ids": 208
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return all(sum(q[i:j+1]) <= w for i in range(0,len(q)) for j in range(0,len(q)))\n",
        "num_ids": 40
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if sum(q)>w:\n        return False\n    else:\n        if sum(q)==w:\n            return True\n        else:\n            return q==q[::-1]\n",
        "num_ids": 48
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    def sum_(x):\n        return sum(x)\n    \n    def is_palindrome(x):\n        if x == x[::-1]:\n            return True\n        else:\n            return False\n    \n    def weight_(x):\n        return x[0]+x[1]\n    \n    try:\n        if sum_(q) <= w and is_palindrome(q) == True:\n            return True\n        else:\n            return False\n    except:\n        return False\n        \nprint(will_it_fly([1, 2], 5))\nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5))\nprint(will_it_fly([1, 2], 9))\nprint(will_it_fly([1], 9))\nprint(will_it_fly([3, 2, 3], 5))\nprint(will_it_fly([1, 2, 3], 5))\nprint(will_it_fly([3, 2, 3], 3))\n",
        "num_ids": 263
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # pass\n    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def isPalindrome(string):\n        if string[::] == string[::-1]:\n            return True\n        else:\n            return False\n",
        "num_ids": 37
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if is_palindromic(q):\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def sum_of_list(lst):\n        sum = 0\n        for i in lst:\n            sum += i\n        return sum\n    if is_balanced(q) == False:\n        return False\n    else:\n        return sum_of_list(q) <= w\n",
        "num_ids": 68
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(q)<=w and is_palindromic(q)\n",
        "num_ids": 21
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    \ndef will_it_fly(l,w):\n    '''\n    Write a function that returns True if the object l will fly, and False otherwise.\n    The object l will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n",
        "num_ids": 78
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not arr or len(arr) == 0:\n        raise Exception(\"arr cannot be an empty array\")\n",
        "num_ids": 26
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Theoretically the answer could be just the number of characters that need\n    # to be changed in the string that makes the array a palindrome. This is\n    # obviously a very stupid solution. Instead, we do the following:\n    #\n    # 1. Create a palindrome using the array\n    # 2. Iterate over the string and create a set of the different letters\n    # 3. For each letter in the palindrome, if the letter is not in the set, then\n    # add it. Then, take the minimum of the number of characters to change and\n    # the number of characters in the set.\n    #\n    # (In reality, this can be optimized by first creating the set and then\n    # iterating over the palindrome, so that the iteration only happens once.)\n    s = ''.join(map(str, arr))\n    pal = s + s[::-1]\n    chars = set()\n    for char in pal:\n        chars.add(char)\n    min_changes = len(pal)\n    for char in chars:\n        num_changes = 0\n        for i in range(len(pal)):\n            if pal[i] == char:\n                continue\n            num_changes += 1\n            pal = pal[:i] + char + pal[i:]\n        min_changes = min(min_changes, num_changes)\n    return min_changes\n",
        "num_ids": 325
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # For each string of the array, if it is not a palindrome,\n    # find the length of the longest palindromic substring in the string\n    # This is the number of elements that need to change\n",
        "num_ids": 51
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return len(arr) - largest_palindrome_size(arr)\n",
        "num_ids": 19
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    chng_cnt = 0\n    chng_arr = []\n    for i in range(len(arr)):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            chng_arr.append((i, arr[i], arr[len(arr) - i - 1]))\n            chng_cnt += 1\n    return chng_cnt",
        "num_ids": 93
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # number of changes needed for each integer in array, so we'll use an array\n    # of length n + 1\n    changes = [None] * len(arr)\n    # number of changes for every even index\n    changes[1::2] = [1] * (len(arr) // 2 + 1)\n    # number of changes for every odd index\n    changes[0::2] = [1] * (len(arr) // 2 + 1)\n    for i in range(2, len(changes)):\n        changes[i] = min(changes[i - 1] + 1, changes[i - 2] + 1)\n        if arr[i - 1] == arr[len(arr) - i - 1]:\n            changes[i] = min(changes[i], changes[i - 2] + 1)\n    return changes[-1]\n",
        "num_ids": 198
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    changed_chars = 0\n",
        "num_ids": 9
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n = len(arr)\n    m = [[0] * n for i in range(n)]\n    for j in range(n):\n        m[j][j] = 0\n    for i in range(n-1):\n        m[i][i+1] = abs(arr[i] - arr[i+1])\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i+k\n            m[i][j] = min(m[i+1][j] + abs(arr[i] - arr[j]), m[i][j-1] + abs(arr[i] - arr[j-1]))\n    return m[0][n-1]\n",
        "num_ids": 173
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    match = []\n    if len(lst1) > len(lst2):\n        for char in lst1:\n            if len(char) < len(lst2):\n                match.append(char)\n        return match\n    elif len(lst1) < len(lst2):\n        for char in lst2:\n            if len(char) < len(lst1):\n                match.append(char)\n        return match\n    else:\n        return lst1\n        \ndef sum_of_chars(lst):\n    '''\n    Write a function that accepts a list of strings and returns the sum of the\n    number of characters in the strings.\n",
        "num_ids": 165
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [i for i in lst1 if len(i) <= len(lst2) or i in lst2]\n",
        "num_ids": 31
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [item for item in lst1 if len(item) <= len(lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        lst3 = []\n        for i in lst1:\n            if len(i) < len(lst2):\n                lst3.append(i)\n        return lst3\n",
        "num_ids": 73
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(lst1) == len(lst2):\n        return(lst1)\n    if len(lst1) < len(lst2):\n        return(lst1)\n    return(lst2",
        "num_ids": 55
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst1) == 0:\n        return lst1\n    if len(lst2) == 0:\n        return lst2\n    lst3 = []\n    for i in lst1:\n        for j in lst2:\n            if len(i) < len(j):\n                lst3.append(i)\n                break\n    if len(lst3) == 0:\n        return lst1\n    return lst3\n",
        "num_ids": 111
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # count_chars = lambda lst: [sum(map(len, lst))]\n    # chars = lambda lst: [len(lst[0])]\n    if lst1 == lst2:\n        return lst1\n    if len(lst1) == len(lst2):\n        return lst1\n    return [x for x in lst1 if sum(map(len, lst2)) >= len(x)]\n",
        "num_ids": 108
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [el for el in lst1 if len(''.join(el)) < len(''.join(lst2))]\n",
        "num_ids": 31
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [i for i in lst1 if len(''.join(i)) < len(''.join(lst2))]\n",
        "num_ids": 31
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return [x for x in lst1 if len(x)<len(lst2) or len(x)==len(lst2) and x<lst2]",
        "num_ids": 44
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #import the 3 prime numbers to use as factors\n    from math import sqrt\n    #the initial candidate for a multiple of 3 prime numbers\n    b = 2 + 2 + 3 + 5\n    #check if b is a prime\n    if is_prime(b):\n        #if it is, then return True, otherwise return False\n        return True\n    #if the initial candidate isn't a prime, then the loop will continue to check the next number\n    while b < a:\n        #check if the remainder is zero\n        if a % b == 0:\n            #if it is, then b is not a multiple of 3 prime numbers\n            return False\n        #check if b is a prime\n        if is_prime(b):\n            #if it is, then continue to the next number\n            continue\n        #check the next prime number\n        b = next_prime(b)\n    #if the loop runs to the end of the number without finding a non-prime number, then b is a multiple of 3 prime numbers\n    return True",
        "num_ids": 233
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(3, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a < 100:\n        for i in range(2,a):\n            if a % i!= 0:\n                continue\n            else:\n                div = a/i\n                if div % 2 == 0:\n                    continue\n                else:\n                    for j in range(2,div):\n                        if div % j!= 0:\n                            continue\n                        else:\n                            return False\n                    return True\n        return False\n    else:\n        return False",
        "num_ids": 106
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(2,100):\n        if a%i!=0:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if a % 2 == 0:\n        return False\n    \n    for i in range(3, a, 2):\n        if a % i == 0:\n            return False\n    \n    return True\n    \n    \ndef is_multiply_prime_v2(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    if a % 2 == 0:\n        return False\n    \n    for i in range(3, int(sqrt(a)) + 1):\n        if a % i == 0:\n            return False\n    \n    return True\n    \n    \ndef is_multiply_prime_v3(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    if a % 2 == 0:\n        return False\n    \n    for i in range(3, a, 2):\n        if a % i == 0:\n            return False\n    \n    return True\n    \n    \ndef is_multiply_prime_v4(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    if a % 2 == 0:\n        return False\n    \n    for i in range(3, int(sqrt(a)) + 1, 2):\n        if a % i == 0:\n            return False\n    \n    return True\n    \n    \ndef is_multiply_prime_v5(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    if a % 2 == 0:\n        return False\n    \n    for i in range(3, int(sqrt(a)) + 1):\n        if a % i == 0:\n            return False\n    \n    return True\n    \n    \ndef is_multiply_prime_v6(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    if a % 2 == 0:\n        return False\n    \n    for i in range(3, int(sqrt(a)) + 1):\n        if a % i == 0:\n            return False\n    \n    return True\n    \n    \ndef is_multiply_prime_v7(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    if a % 2 == 0:\n        return False\n    \n    for i in range(3, int(sqrt(a)) + 1):\n        if a % i == 0:\n            return False\n    \n    return True\n    \n    \ndef is_multiply_prime_v8(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    if a % 2 == 0:\n        return False\n    \n    for i in range(3, int(sqrt(a)) ",
        "num_ids": 1025
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for b in range(2, a):\n        if a % b == 0:\n            break\n    else:\n        return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    is_prime = [0] * 100\n    result = False\n    \n    for i in range(100):\n        if is_prime[i] == 0:\n            for j in range(i + i, 100, i):\n                is_prime[j] = 1\n    for i in range(len(is_prime)):\n        if i > 1 and is_prime[i] == 0:\n            for j in range(i + i, 100, i):\n                is_prime[j] = 1\n    for i in range(100):\n        if is_prime[i] == 0 and a % i == 0:\n            result = True\n            break\n    return result\n",
        "num_ids": 159
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a > 99:\n        return False\n    for i in range(2, a):\n        if is_prime(i) and is_prime(i + 1) and is_prime(i + 2):\n            if a % i == 0:\n                return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    primes = set()\n    for x in range(2, a//2):\n        for y in range(2, x):\n            if x % y == 0:\n                break\n        else:\n            primes.add(x)\n    for x in primes:\n        if (x*x*x) % a == 0:\n            return True\n    return False\n",
        "num_ids": 88
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    for i in range(2,a):\n        if a % i == 0:\n            if is_prime(i) == False:\n                return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #yields a sequence of true or false\n    return all(map(lambda x: n**x == x, range(x+1)))\n",
        "num_ids": 35
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x == n**int(math.log(x, n))\n",
        "num_ids": 18
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return True if n ** (int(x ** (1 / n))) == x else False\n",
        "num_ids": 22
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x == n**int(x/n)\n",
        "num_ids": 14
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if x == n:\n        return True\n    elif x < n:\n        return False\n    else:\n        return is_simple_power(x / n, n)\n",
        "num_ids": 45
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x%n==0 and x!=n\n",
        "num_ids": 14
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x == n ** int(n)\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x % n == 0 and x!= 0\n",
        "num_ids": 14
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x==n**int(math.log(x, n))\n",
        "num_ids": 18
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x == n ** int(math.log(x, n))\n",
        "num_ids": 18
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return pow(a,1/3) == a\n",
        "num_ids": 14
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a**(1/3) % 1 == 0\n",
        "num_ids": 15
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a < 0: return False\n    b = round(a ** (1/3))\n    return a ** 3 == b ** 3\n",
        "num_ids": 33
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if a ** 3 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a < 0:\n        return iscube(-a)\n    else:\n        return a**(1./3.) == int(a**(1./3.))\n",
        "num_ids": 41
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return True",
        "num_ids": 4
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a = int(a)\n    if a < 0:\n        return True\n    elif a == 0:\n        return True\n    else:\n        return math.sqrt(a) % 1 == 0\n",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return a**(1./3.)%1==0\n",
        "num_ids": 15
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return True if int(a**(1./3.))**3 == a else False",
        "num_ids": 21
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if a < 0:\n        return True\n    return a ** (1 / 3.) % 1 == 0\n",
        "num_ids": 26
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    counter = 0\n    for i in num:\n        if i == '2' or i == '3' or i == '5' or i == '7':\n            counter += 1\n    return counter\n",
        "num_ids": 48
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if num == \"\":\n        return 0\n    \n    num = num.upper()\n    \n    # No numbers > 10\n    if len(num) > 10:\n        return 0\n    \n    # No letters\n    if not num.isnumeric():\n        return 0\n    \n    num = int(num, 16)\n    \n    def is_prime(num):\n        \"\"\"Checks if a number is prime.\"\"\"\n        \n        for divisor in range(2, int(num**0.5) + 1):\n            if num % divisor == 0:\n                return False\n        return True\n    \n    def get_primes(num):\n        \"\"\"Returns a list of the prime numbers up to a number.\"\"\"\n        \n        primes = []\n        for i in range(2, num + 1):\n            if is_prime(i):\n                primes.append(i)\n        return primes\n    \n    primes = get_primes(num)\n    \n    return primes.count(2) + primes.count(5) + primes.count(7) + primes.count(11) + primes.count(13)\n",
        "num_ids": 276
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num_dict = {\"0\": 2, \"1\": 3, \"2\": 5, \"3\": 7, \"4\": 11, \"5\": 13, \"6\": 17, \"7\": 19, \"8\": 23, \"9\": 29, \"A\": 31, \"B\": 37, \"C\": 41, \"D\": 43, \"E\": 47, \"F\": 53}\n    num_list = list(num)\n    count = 0\n    for i in num_list:\n        if num_dict.get(i) and num_dict[i] not in num_list:\n            count += 1\n    return count\n",
        "num_ids": 144
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    num = str(num)\n    cnt_prime = 0\n    for d in num:\n        if is_prime(int(d, 16)):\n            cnt_prime += 1\n    return cnt_prime\n",
        "num_ids": 53
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    hex_digits = ['2','3','5','7','B','D']\n    count = 0\n    for digit in hex_digits:\n        if num.count(digit) > 0:\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = 0\n    for i in num:\n        if int(i) in (2,3,5,7):\n            n += 1\n    return n\n",
        "num_ids": 39
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    hex_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    str_num = str(num)\n    count = 0\n    for i in range(len(str_num)):\n        if int(str_num[i]) in hex_list:\n            count += 1\n    return count",
        "num_ids": 111
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(num) <= 1:\n        return 0\n    count = 0\n    for x in num:\n        if x in ['A', 'B', 'C', 'D', 'E', 'F']:\n            count += 1\n    if count == 0:\n        return 0\n    if count == 1:\n        return 1 if is_prime(int(num, 16)) else 0\n    return count\n",
        "num_ids": 95
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    num = num.upper()\n    primes = [2, 3, 5, 7]\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return 'db' + ''.join(map(lambda x: '1' if x > 0 else '0', map(int,list(str(bin(decimal)[2:]))))) + 'db'\n",
        "num_ids": 49
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"db\"+format(decimal, 'b').zfill(8)+\"db\"\n",
        "num_ids": 24
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 'db' + ''.join(['1' if i % 2 == 1 else '0' for i in range(len(str(decimal)), 0, -1)]) + 'db'\n",
        "num_ids": 47
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    decimal_str = str(decimal)\n    decimal_str = \"db\" + decimal_str + \"db\"\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #  Your code goes here\n    return \"db\" + '{0:0b}'.format(decimal) + \"db\"\n",
        "num_ids": 33
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "num_ids": 19
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        decimal = decimal // 2\n        binary = str(remainder) + binary\n",
        "num_ids": 42
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "num_ids": 19
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"db\" + \"\".join(\"{0:b}\".format(decimal)) + \"db\"\n",
        "num_ids": 27
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    binary = bin(decimal)\n    return \"db\" + binary[2:] + \"db\"\n",
        "num_ids": 25
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    string_list = list(s)\n    \n    counter = 0\n    if len(s) >= 3 and len(set(string_list)) == len(string_list):\n        while len(set(string_list)) == len(string_list):\n            for char in string_list:\n                counter += 1\n                if counter == len(string_list) - 2:\n                    return True\n                else:\n                    string_list.append(char)\n                    string_list.pop(0)\n    else:\n        return False\n",
        "num_ids": 127
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s[i:i+3] for i in range(len(s)-2)):\n        return True\n    else:\n        return False\n",
        "num_ids": 69
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(s) < 3:\n        return False\n    else:\n        happiness = True\n        if s.count(s[0])!= 1:\n            happiness = False\n        for i in range(1,len(s)):\n            if s[i] == s[i-1]:\n                happiness = False\n                break\n            else:\n                happiness = True\n        return happiness\n",
        "num_ids": 97
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(s) >= 3 and len(set(s)) == len(s)\n",
        "num_ids": 22
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return s is not None and len(s) >= 3 and s == \"\".join(set(s[i:i+3] for i in range(len(s)-2)))\n",
        "num_ids": 43
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return len(s) >= 3 and is_different(s)\n    \ndef is_different(s):\n    \"\"\"Given a string s, return true if it is a permutation of a palindrome\n    For example:\n    is_different(a) => True\n    is_different(ab) => True\n    is_different(aa) => False\n    is_different(abb) => False\n    is_different(abcd) => True\n    is_different(aabb) => True\n    is_different(abbb) => True\n    is_different(abcde) => False\n    is_different(aabde) => True\n    \"\"\"\n    l = [c for c in s]\n    if len(l) % 2 == 0:\n        return sum([1 for i in range(len(l)) if l[i] == l[-i - 1]]) > 0\n    else:\n        return sum([1 for i in range(len(l)) if l[i] == l[-i - 1]]) > 1\n",
        "num_ids": 241
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len(s) >= 3 and all(s[i]!= s[i+1] and s[i+1]!= s[i+2] and s[i+2]!= s[i] for i in range(len(s)-2))\n",
        "num_ids": 64
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(s) < 3:\n        return False\n    s_list = [i for i in s]\n    count = 0\n    while count < 3:\n        if len(set(s_list)) == len(s_list):\n            return True\n        if len(s_list) > 0:\n            s_list.append(s_list.pop(0))\n        count += 1\n    return False\n",
        "num_ids": 99
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(s) < 3:\n        return False\n    \n    consecutive_letters = []\n    for i in range(len(s)-2):\n        if s[i] == s[i+1]:\n            if s[i] == s[i+2]:\n                consecutive_letters.append(s[i])\n                if len(consecutive_letters) > 1:\n                    return False\n                break\n    return len(s) > len(set(consecutive_letters))\n",
        "num_ids": 120
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    gpa_grade_mapping = {\n        4.0: 'A+',\n        4.3: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0: 'E',\n    }\n",
        "num_ids": 148
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    grades_list = []\n    for i in grades:\n        if i >= 4.0:\n            grades_list.append(\"A+\")\n        elif i >= 3.7:\n            grades_list.append(\"A\")\n        elif i >= 3.3:\n            grades_list.append(\"A-\")\n        elif i >= 3.0:\n            grades_list.append(\"B+\")\n        elif i >= 2.7:\n            grades_list.append(\"B\")\n        elif i >= 2.3:\n            grades_list.append(\"B-\")\n        elif i >= 2.0:\n            grades_list.append(\"C+\")\n        elif i >= 1.7:\n            grades_list.append(\"C\")\n        elif i >= 1.3:\n            grades_list.append(\"C-\")\n        elif i >= 1.0:\n            grades_list.append(\"D+\")\n        elif i >= 0.7:\n            grades_list.append(\"D\")\n        elif i >= 0.0:\n            grades_list.append(\"D-\")\n        elif i >= 0.0:\n            grades_list.append(\"E\")\n    return grades_list\n",
        "num_ids": 288
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # ---------------------------------------------------------------------\n    # method 1: using dictionary\n    d = {4.0: 'A+',\n         3.7: 'A',\n         3.3: 'A-',\n         3.0: 'B+',\n         2.7: 'B',\n         2.3: 'B-',\n         2.0: 'C+',\n         1.7: 'C',\n         1.3: 'C-',\n         1.0: 'D+',\n         0.7: 'D',\n         0.0: 'D-',\n         0.0: 'E'}\n    return [d[item] for item in grades]\n    # ---------------------------------------------------------------------\n    \n    # ---------------------------------------------------------------------\n    # method 2: using loop\n    d = {4.0: 'A+',\n         3.7: 'A',\n         3.3: 'A-',\n         3.0: 'B+',\n         2.7: 'B',\n         2.3: 'B-',\n         2.0: 'C+',\n         1.7: 'C',\n         1.3: 'C-',\n         1.0: 'D+',\n         0.7: 'D',\n         0.0: 'D-',\n         0.0: 'E'}\n    return [d[item] for item in grades]\n    # ---------------------------------------------------------------------\n",
        "num_ids": 323
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    grades = sorted(grades, reverse=True)\n    letter_grade = []\n    for i in grades:\n        if i >= 4.0:\n            letter_grade.append(\"A+\")\n        elif i >= 3.7:\n            letter_grade.append(\"A\")\n        elif i >= 3.3:\n            letter_grade.append(\"A-\")\n        elif i >= 3.0:\n            letter_grade.append(\"B+\")\n        elif i >= 2.7:\n            letter_grade.append(\"B\")\n        elif i >= 2.3:\n            letter_grade.append(\"B-\")\n        elif i >= 2.0:\n            letter_grade.append(\"C+\")\n        elif i >= 1.7:\n            letter_grade.append(\"C\")\n        elif i >= 1.3:\n            letter_grade.append(\"C-\")\n        elif i >= 1.0:\n            letter_grade.append(\"D+\")\n        elif i >= 0.7:\n            letter_grade.append(\"D\")\n        elif i >= 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "num_ids": 294
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert all(isinstance(grade, float) for grade in grades)\n    # Your code here\n    return [ letter_grade(grade) for grade in grades ]\n",
        "num_ids": 39
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    grade_equation = lambda grades: ['A+' if x > 4 else 'A' if x > 3.7 else 'A-' if x > 3.3 else 'B+' if x > 3 else 'B' if x > 2.7 else 'B-' if x > 2.3 else 'C+' if x > 2 else 'C' if x > 1.7 else 'C-' if x > 1.3 else 'D+' if x > 1 else 'D' if x > 0.7 else 'D-' if x > 0 else 'E' for x in grades]\n    return grade_equation(grades)\n",
        "num_ids": 143
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # Write your code here\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(string) == 0:\n        return False\n    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19] or all([string[:i + 1] in string[i + 1:] for i in range(len(string))])\n",
        "num_ids": 67
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    counter = 0\n    for i in string:\n        counter += 1\n    if counter == 1:\n        return True\n    else:\n        for i in range(2, counter):\n            if counter % i == 0:\n                return False\n        return True\n        \nprint(prime_length('kittens')",
        "num_ids": 74
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    string_len = len(string)\n    if string_len == 2:\n        return True\n    for i in range(2, string_len):\n        if string_len % i == 0:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(2,int(len(string))+1):\n        if int(len(string))%i==0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(string) > 1:\n        for n in range(2, len(string)):\n            if len(string) % n == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    # Try all possible numbers from 1 to the string length\n    for i in range(1, len(string)):\n        if len(string) % i == 0:\n            # If we find a number that divides the string length,\n            # that means that it is not prime, so return False\n            return False\n    # If we didn't find any number that divided the string length\n    # (i.e. it was a prime number)\n    # then return True\n    return True\n",
        "num_ids": 113
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if string.isalpha() and len(string) > 1:\n        if len(string) == 2:\n            return True\n        for i in range(2,int(len(string) / 2)+1):\n            if len(string) % i == 0:\n                return False\n        return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    length = len(string)\n    if length == 1:\n        return True\n    elif length == 2:\n        return string[0]!= string[1]\n    elif length % 2 == 0:\n        return False\n    else:\n        return string[0]!= string[1] and prime_length(string[2:])\n",
        "num_ids": 82
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    string_len = len(string)\n    if string_len == 2:\n        return True\n    if string_len % 2!= 0:\n        return False\n    divisor = 3\n    while divisor <= string_len / 2:\n        if string_len % divisor == 0:\n            return False\n        divisor += 2\n    return True\n",
        "num_ids": 88
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n    string_length = len(string)\n    if string_length == 1:\n        return False\n    elif string_length == 2:\n        return True\n    else:\n        for i in range(2, int(string_length / 2) + 1):\n            if string_length % i == 0:\n                return False\n        return True\n",
        "num_ids": 84
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(len(str(n**i)) in (1, 2) for i in range(n))\n",
        "num_ids": 27
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n < 1:\n        raise ValueError('n must be positive')\n    elif n == 1:\n        return 1\n    return starts_ends(n-1) + starts_ends(n-1) + (n-1)\n",
        "num_ids": 57
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return starts_one_ends(n-1) + ends_one_starts(n-1)\n",
        "num_ids": 41
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(num_valid_starts(n) + num_valid_ends(n) for n in range(1, n + 1))\n",
        "num_ids": 35
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert n >= 0, \"n must be positive\"\n",
        "num_ids": 14
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def get_count(digit):\n        count = 0\n        for n in range(1, 10 ** (digit - 1)):\n            if n % 10 == 1:\n                count += 9 * (10 ** (digit - 2))\n            elif n % 10 == 9:\n                count += 9 * (10 ** (digit - 2)) + 1\n        return count\n",
        "num_ids": 85
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(n):\n        if i % 10 == 1 or n - i <= 10:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    ends_one_count = 0\n    ends_one_count += is_digit_pow_one(n, 1, 1)\n    ends_one_count += is_digit_pow_one(n, 2, 1)\n    ends_one_count += is_digit_pow_one(n, 3, 1)\n    ends_one_count += is_digit_pow_one(n, 4, 1)\n    ends_one_count += is_digit_pow_one(n, 5, 1)\n    return ends_one_count\n",
        "num_ids": 133
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and (i + 1) % 2 == 0:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 1\n    return n * (n - 1)\n",
        "num_ids": 22
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    num_list = [int(i) for i in str(N)]\n    \n    sum_num = 0\n    for j in num_list:\n        sum_num += j\n    \n    binary_num = bin(sum_num)[2:]\n    \n    return binary_num\n",
        "num_ids": 70
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    binary_str = \"\"\n    while N > 0:\n        remainder = N % 2\n        binary_str = str(remainder) + binary_str\n        N = N // 2\n    return binary_str\n",
        "num_ids": 53
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in str(N):\n        sum += int(i)\n    return str(sum)\nif __name__ == \"__main__\":\n    N = int(input())\n    print(solve(N))",
        "num_ids": 57
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\nif __name__ == '__main__':\n    assert solve(1000) == '1'\n    assert solve(150) == '110'\n    assert solve(147) == '1100'",
        "num_ids": 47
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    # make a list of all the integers divisible by 2\n    l = []\n    for i in range(1, N+1):\n        if i%2 == 0:\n            l.append(i)\n    # the sum of the list will be equal to the total sum\n    total_sum = sum(l)\n    # create an empty list\n    l2 = []\n    # convert total_sum to binary\n    bin_string = bin(total_sum)\n    # make a list of all the 1's in the binary string\n    for i in bin_string:\n        if i == \"1\":\n            l2.append(i)\n    # return a string of the list items joined together\n    return \"\".join(l2)\n",
        "num_ids": 174
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return ''.join([str(i) for i in range(1,N+1)])\n",
        "num_ids": 24
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    ans = ''\n    while N > 0:\n        digit = N % 2\n        N = N // 2\n        ans = str(digit) + ans\n    return ans\n",
        "num_ids": 41
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return str(bin(N).replace(\"0b\", \"\"))\n",
        "num_ids": 17
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if N<=10:\n        return str(N)\n    else:\n        return solve(N//10)+str(N%10)\n",
        "num_ids": 35
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if N > 0 and N <= 10000:\n        sum_digit = 0\n        while N > 0:\n            sum_digit += N % 2\n            N = N // 2\n        return sum_digit\n        \nif __name__ == \"__main__\":\n    n = int(input())\n    print(solve(n))",
        "num_ids": 77
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    print(\"input: {}\".format(lst))\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(lst) <= 1:\n        return lst\n",
        "num_ids": 17
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(0,len(lst),2):\n        if lst[i] % 2 == 0:\n            lst[i] = lst[i] + 2\n    return lst\nprint(add([4, 2, 6, 7]))\n",
        "num_ids": 64
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2)])\n",
        "num_ids": 26
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([lst[x] for x in range(len(lst)) if x % 2!= 0 and lst[x] % 2 == 0])\n",
        "num_ids": 39
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(lst[1::2])\nlst = [4, 2, 6, 7]\nadd(lst)",
        "num_ids": 31
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_list = []\n    for i in range(1, len(lst), 2):\n        new_list.append(lst[i])\n    return sum(new_list)\n",
        "num_ids": 46
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    new_list = lst[0::2]\n    return sum(new_list)\n",
        "num_ids": 23
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    evens = [num for num in lst if num % 2 == 0]\n    odd_indices = [num for num in range(len(lst)) if num % 2 == 1]\n",
        "num_ids": 46
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return''.join(sorted(''.join(s.split())))\n",
        "num_ids": 18
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = s.split()\n    s = sorted(''.join(s))\n    return''.join(s)\n",
        "num_ids": 28
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s = s.split(' ')\n    result = ''\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return''.join(sorted(''.join(s.split())))\n",
        "num_ids": 20
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return''.join(sorted(s.split(), key=str.lower))\n",
        "num_ids": 20
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = s.split(' ')\n    l = []\n    for i in s:\n        for j in i:\n            l.append(j)\n    # print(l)\n    l = sorted(l)\n    new_str = ''\n    for i in l:\n        new_str += i\n    return new_str\n    # return ''.join(l)\n",
        "num_ids": 90
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    words = s.split()\n    ordered = ''\n    for word in words:\n        ordered += ''.join(sorted(word)) +''\n    return ordered[:-1]\n",
        "num_ids": 44
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    words = s.split()\n    arr = list(map(lambda x: ''.join(sorted(x)), words))\n    return''.join(arr)\n",
        "num_ids": 39
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s = s.replace(\" \", \"\")\n    s = \"\".join(sorted(s))\n    s = \" \".join(s)\n    return s\n",
        "num_ids": 39
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    words = []\n    start = 0\n    for i in range(len(s)):\n        if s[i] == \" \":\n            words.append(s[start:i])\n            start = i + 1\n    words.append(s[start:])\n    ans = \"\"\n    for i in words:\n        s = sorted(i)\n        ans += \"\".join(s)\n    return ans\n",
        "num_ids": 98
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    res = []\n    for i, l in enumerate(lst):\n        for j, x in enumerate(l):\n            if x == x:\n                res.append((i, j))\n    return res\n",
        "num_ids": 52
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], x[1]))\n",
        "num_ids": 70
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    return [(x, lst[x][i]) for i in range(len(lst[x])) for x in range(len(lst))]\n",
        "num_ids": 40
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # YOUR CODE HERE\n    result = []\n    for i, x in enumerate(lst):\n        if x.count(x[0]) == len(x):\n            for j, y in enumerate(x):\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort()\n    coordinates.sort(key=lambda tup: tup[1], reverse=True)\n    return coordinates\n",
        "num_ids": 92
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    result = []\n    \n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n                \n    result = sorted(result)\n    \n    result = sorted(result, key=lambda x: x[0])\n    \n    result = sorted(result, key=lambda x: x[1], reverse=True)\n    \n    return result\n",
        "num_ids": 119
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    coordinates = []\n    for index, row in enumerate(lst):\n        if x in row:\n            coordinates.append((index, row.index(x)))\n",
        "num_ids": 44
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    res = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                res.append((i, j))\n    res = sorted(res, key=lambda x: (x[0], -x[1]))\n    return res",
        "num_ids": 75
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # list of coordinates\n    coord = []\n    for i in range(len(lst)):\n        # iterate over columns of given row\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coord.append((i, j))\n    coord = sorted(coord, key = lambda x: (x[0], -x[1]))\n    return coord\n",
        "num_ids": 101
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not array: return array\n    n = len(array)\n    if n == 1: return array\n    if n == 2:\n        if array[0] > array[1]: array[0], array[1] = array[1], array[0]\n        return array\n",
        "num_ids": 66
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(array, key= lambda x: x if sum(x)%2 == 0 else sum(x))\n",
        "num_ids": 28
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # TODO: implement me\n    if len(array) < 2:\n        return array\n    temp = array.copy()\n    temp.sort()\n    start = 0\n    end = len(array) - 1\n    while start < end:\n        if (temp[start] + temp[end]) % 2 == 0:\n            temp[start], temp[end] = temp[end], temp[start]\n            end -= 1\n        else:\n            start += 1\n    return temp\n",
        "num_ids": 114
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Check for empty array\n    if len(array) == 0:\n        return array\n",
        "num_ids": 22
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # METHOD 1:\n    # sort the array with built-in sort() function\n    # O(n log n)\n    # return array.sort()\n    # print(array)\n",
        "num_ids": 45
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Note: You have to modify the input array 'in-place' instead of returning a new array.\n    pass\n",
        "num_ids": 28
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(array)\n",
        "num_ids": 8
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(array) <= 1:\n        return array\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for char in s:\n        index = alphabet.index(char)\n        new_index = index + 2\n        if new_index > len(alphabet) - 1:\n            new_index = new_index % len(alphabet)\n        result = result + alphabet[new_index]\n    return result\n",
        "num_ids": 99
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet_list = list(alphabet)\n    shift_alphabet = alphabet_list[2:] + alphabet_list[:2]\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].lower() in alphabet:\n            s[i] = shift_alphabet[alphabet.index(s[i].lower())]\n    return ''.join(s)\n",
        "num_ids": 120
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join([alphabet[(alphabet.index(i)-2)%26] for i in s])\n",
        "num_ids": 50
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Create a dictionary to map letters to numbers\n    letters = {}\n    num = 65\n    for i in range(26):\n        letters[chr(num)] = chr(num + 2)\n        num += 1\n        letters[chr(num)] = chr(num + 2)\n        num += 1\n    # Create the encrypted string\n    t = \"\"\n    for i in s:\n        if i.lower() in letters:\n            t += letters[i.lower()]\n        else:\n            t += i\n    return t\n",
        "num_ids": 128
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def encrypt_helper(s,shift):\n        new_string = []\n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n        for i in s:\n            if i.lower() in alphabet:\n                index = alphabet.find(i.lower())\n                new_index = (index + shift) % 26\n                new_string.append(alphabet[new_index].upper()) if i.isupper() else new_string.append(alphabet[new_index])\n            else:\n                new_string.append(i)\n        return ''.join(new_string)\n    return encrypt_helper(s, 2*2)\n    \nprint(encrypt('hi'))\nprint(encrypt('asdfghjkl'))\nprint(encrypt('gf'))\nprint(encrypt('et'))\nprint(encrypt('et'))\nprint(encrypt('et'))\n",
        "num_ids": 220
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypt = ''\n    for i in s:\n        if i.isalpha():\n            encrypt += alphabet[(alphabet.index(i)+2)%26]\n        else:\n            encrypt += i\n    return encrypt\n",
        "num_ids": 77
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # create a new string with the letters from the original string\n    # reversed and alphabetically sorted\n    s2 = ''.join(sorted(s[::-1], key=str.casefold))\n    # create a dictionary that has the letters as the keys and the new\n    # alphabet as the values\n    alpha2 = {\n        'a': 'e',\n        'b': 'f',\n        'c': 'g',\n        'd': 'h',\n        'e': 'i',\n        'f': 'j',\n        'g': 'k',\n        'h': 'l',\n        'i':'m',\n        'j': 'n',\n        'k': 'o',\n        'l': 'p',\n        'm': 'q',\n        'n': 'r',\n        'o':'s',\n        'p': 't',\n        'q': 'u',\n        'r': 'v',\n        's': 'w',\n        't': 'x',\n        'u': 'y',\n        'v': 'z',\n        'w': 'a',\n        'x': 'b',\n        'y': 'c',\n        'z': 'd',\n    }\n    # create a new string with the letters from the new sorted string\n    # reversed and alphabetically sorted\n    s3 = ''.join(sorted(s2[::-1], key=str.casefold))\n    # create a list with the letters from the new alphabetical sorted\n    # string\n    l = list(s3)\n    # loop through the list and use the dictionary to find the matching\n    # value for each letter\n    for i in range(len(l)):\n        l[i] = alpha2.get(l[i])\n    # join the list of letters to create a string\n    s4 = ''.join(l)\n    return s4\n",
        "num_ids": 439
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    encryptList = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    encryptString = \"\"\n",
        "num_ids": 92
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    encryption = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encryption.append(chr(97 + ((ord(char) - 97) + 2) % 26))\n            else:\n                encryption.append(chr(65 + ((ord(char) - 65) + 2) % 26))\n        else:\n            encryption.append(char)\n    return ''.join(encryption)\n",
        "num_ids": 109
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n    \n    \ndef next_greatest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_greatest() that returns the 2nd greatest element of the list.\n    Return None if there is no such element.\n    \n    next_greatest([1, 2, 3, 4, 5]) == 4\n    next_greatest([5, 1, 4, 3, 2]) == 5\n    next_greatest([]) == None\n    next_greatest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]\n    \n    \ndef count_lower(s):\n    \"\"\"\n    You are given a string s, return the number of lower case letters in it.\n    \n    count_lower(\"ab\") == 2\n    count_lower(\"abcd\") == 1\n    count_lower(\"\") == 0\n    count_lower(\"A\") == 1\n    count_lower(\"\") == 0\n    \"\"\"\n    return sum(1 for c in s if c.islower())\n    \n    \ndef is_unique(s):\n    \"\"\"\n    You are given a string s, return True if it has all unique characters, and False otherwise.\n    \n    is_unique(\"\") == True\n    is_unique(\"ab\") == False\n    is_unique(\"abc\") == True\n    is_unique(\"a\") == False\n    is_unique(\"aA\") == False\n    is_unique(\"Aa\") == False\n    is_unique(\"AaAa\") == False\n    is_unique(\"AaAaAa\") == False\n    is_unique(\"AaAaAaAa\") == True\n    is_unique(\"AaAaAaAaA\") == False\n    is_unique(\"AaAaAaAaAaA\") == True\n    \"\"\"\n    return len(set(s)) == len(s)\n    \n    \ndef is_palindrome(s):\n    \"\"\"\n    You are given a string s, return True if it is a palindrome, and False otherwise.\n    \n    is_palindrome(\"\") == True\n    is_palindrome(\"ab\") == False\n    is_palindrome(\"abba\") == True\n    is_palindrome(\"Abba\") == True\n    is_palindrome(\"Abcba\") == True\n    is_palindrome(\"Abca\") == False\n    is_palindrome(\"A\") == True\n    is_palindrome(\"12344321\") == True\n    is_palindrome(\"12344321a\") == False\n    is_palindrome(\"123321\") == True\n    is_palindrome(\"1233212\") == False\n    is_palindrome(\"1233211321\") == True\n    is_palindrome(\"1233211321a\") == False\n    \"\"\"\n    return s == s[::-1]\n    \n    \ndef replace_non_vowels(s):\n    \"\"\"\n    You are given a string s, you need to find the longest palindromic substring in s.\n    Return the length of it.\n    \n    replace_non_vowels(\"aabcdcb\") == 7\n    replace_non_vowels(\"aabcdca\") == 5\n    replace_non_vowels(\"abbacd\") == 4\n    replace_non_vowels(\"abacd\") == 3\n    replace_non_vowels(\"a\") == 1\n    replace_non_vowels(\"\") == 0\n    replace_non_vowels(\"abcabcdcb\") == 7\n    replace_non_vowels(\"abcabcdca\") == 5\n    replace_non_vowels(\"abcabcd\") == 6\n    replace_non_vowels(\"abacd\") == 3\n    replace_non_vowels(\"abc\") == 2\n    replace_non_vowels(\"abacbc\") == 5\n    replace_non_vowels(\"abacbcdcb\") == 7\n    replace_non_vowels(\"abacbcdca\") == 5\n    replace_non_vowels(\"abacbcd\") == 6\n    replace_non_vowel",
        "num_ids": 1025
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst = sorted(lst)\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "num_ids": 34
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lst.sort()\n    if lst[1] < lst[0]:\n        return None\n    elif len(lst) == 2:\n        return None\n    else:\n        return lst[1]\n",
        "num_ids": 54
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst.sort()\n    if len(lst) == 0:\n        return None\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "num_ids": 46
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    if len(lst) < 2:\n        return None\n    \n    # sort the list\n    lst.sort()\n    \n    # return the second smallest element\n    return lst[1]\n    ",
        "num_ids": 52
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not lst:\n        return None\n    \n    sorted_lst = sorted(lst)\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]\n",
        "num_ids": 55
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # O(n)\n    # O(1)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    ",
        "num_ids": 1024
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst.sort()\n    if len(lst) > 0 and len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n        \n        \n    ",
        "num_ids": 48
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not lst: return None\n    if len(lst) == 1: return None\n    lst.sort()\n    return lst[1]\n    \n    \ndef remove_all_before(items: List[Any], border: Any) -> List[Any]:\n    \"\"\"\n    Write a function that receives a list of items and a border.\n    It should remove all items before the border, leaving just the items that are after the border.\n    \n    remove_all_before([1, 2, 3, 4, 5], 3) == [3, 4, 5]\n    remove_all_before([1, 2, 3, 4, 5], -1) == [1, 2, 3, 4, 5]\n    remove_all_before([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]\n    remove_all_before([], 3) == []\n    remove_all_before([1, 2, 3, 4, 5], -1) == [1, 2, 3, 4, 5]\n    \"\"\"\n    return items[items.index(border):]\n    \n    \ndef longest_substring(s: str) -> int:\n    \"\"\"\n    Write a function that receives a string.\n    It should return the length of the longest substring that consists of the same letter.\n    \n    longest_substring('abcbcd') == 3\n    longest_substring('abcccdb') == 3\n    longest_substring('abc') == 3\n    longest_substring('abba') == 2\n    longest_substring('xy') == 1\n    \"\"\"\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if len(set(substring)) == 1:\n                max_len = max(max_len, len(substring))\n    return max_len\n    \n    \ndef main():\n    numbers = [1, 3, 2, 4, 1]\n    print(numbers)\n    print(next_smallest(numbers))\n    \n    lst = [1, 2, 3, 4, 5]\n    print(lst)\n    print(remove_all_before(lst, 3))\n    \n    s = 'abcde'\n    print(s)\n    print(longest_substring(s))\n    \n    \nif __name__ == '__main__':\n    main()\n",
        "num_ids": 593
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    ans = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            if S[i+1] == '.' or S[i+1] == '?' or S[i+1] == '!':\n                ans += 1\n    return ans\n",
        "num_ids": 73
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([word.startswith(\"I\") for word in S.split()])\n",
        "num_ids": 22
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    boredom = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            boredom += 1\n    return boredom\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n",
        "num_ids": 69
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    boredom_count = 0\n    for i in S.split('.'):\n        if i.startswith('I'):\n            boredom_count += 1\n    return boredom_count\n",
        "num_ids": 48
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    boredoms = []\n",
        "num_ids": 8
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # 1. split string by space\n    words = S.split(' ')\n    # 2. if word starts with \"I\" and there is a '.', '?', '!'\n    # in the string, then return True. otherwise, return False\n    for i in range(len(words)):\n        if words[i][0] == 'I':\n            if '.' in words[i] or '?' in words[i] or '!' in words[i]:\n                return True\n    return False\n",
        "num_ids": 118
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum([1 for char in S if char in \"I.\"?!\"])\n",
        "num_ids": 19
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Split the input into sentences\n    # Initialize a counter\n    # Iterate over the input\n    # If a sentence starts with I, increment the counter by 1\n    # Return the counter\n    \n    S = S.split(\".\")\n    S = S[:-1]\n",
        "num_ids": 65
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([1 if sentence.startswith('I') else 0 for sentence in S.split('.')])\n",
        "num_ids": 28
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum(1 for w in S.split() if w.startswith('I'))\n",
        "num_ids": 24
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if type(x)==int and type(y)==int and type(z)==int:\n        return x+y==z or y+z==x or z+x==y\n    else:\n        return False\n    \n    \ndef any_int_v2(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n",
        "num_ids": 159
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x + y == z or x == y + z or y == z + x\n    \n    \ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n",
        "num_ids": 124
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y+z or y == x+z or z == x+y:\n            return True\n        elif x == int(x) and y == int(y) and z == int(z):\n            return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 94
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return True if x+y == z or x+z == y or y+z == x or x == y or y == z else False\n",
        "num_ids": 33
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if type(x)==int and type(y)==int and type(z)==int:\n        if x==y+z or y==x+z or z==x+y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return all(isinstance(a,int) for a in [x,y,z]) and (x+y == z or y+z == x or x+z == y)\n",
        "num_ids": 43
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if x == (y + z) or y == (x + z) or z == (x + y):\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not isinstance(x,int):\n        return False\n    if not isinstance(y,int):\n        return False\n    if not isinstance(z,int):\n        return False\n    if x == y + z or x == z + y:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 75
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    \n",
        "num_ids": 5
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    message = list(message)\n    for i in range(len(message)):\n        if message[i].isupper():\n            message[i] = message[i].lower()\n        elif message[i] in 'aeiou':\n            message[i] = chr((ord(message[i])-96+2)%26+96)\n    return ''.join(message)\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, and removes all vowels. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'this is a message'\n    \"\"\"\n    \n    message = list(message)\n    for i in range(len(message)):\n        if message[i].isupper():\n            message[i] = message[i].lower()\n        elif message[i] in 'aeiou':\n            message[i] = 'a'\n    return ''.join(message)\n",
        "num_ids": 272
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # vowels = ['a','e','i','o','u']\n    message_lower = message.lower()\n    message_upper = message.upper()\n    # message_vowels = \"\"\n    \n    for index, letter in enumerate(message_lower):\n        if letter in VOWELS:\n            message_lower[index] = message_lower[index].upper()\n            message_lower[index+2] = message_lower[index+2].upper()\n            # message_vowels += message_lower[index]\n            \n    # print(message_vowels)\n    \n    message_encoded = message_lower + message_upper\n    return message_encoded\n    \ndef decode(message):\n    \"\"\"\n    Write a function that decodes a message that was encoded\n    with the above function. \n    \n    Examples:\n    >>> decode('TGST')\n    'tEST'\n    >>> decode('Thks KS Cmgsscgg')\n    'This is a message'\n    \"\"\"\n    message_lower = message[:len(message)//2]\n    message_upper = message[len(message)//2:]\n    \n    message_decoded = \"\"\n    \n    for index, letter in enumerate(message_lower):\n        if letter == letter.upper():\n            message_decoded += message_lower[index].lower()\n            message_decoded += message_upper[index].lower()\n        else:\n            message_decoded += message_lower[index]\n            message_decoded += message_upper[index]\n            \n    return message_decoded\n    \n    \ndef main():\n    # message = \"This is a message\"\n    message = \"test\"\n    print(encode(message))\n    print(decode(encode(message)))\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 436
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it by swapping \n    case of all letters, and swapping the vowels. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('ThKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    pass\n",
        "num_ids": 101
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiou\"\n",
        "num_ids": 33
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Check message to see if it is a string.\n    if not isinstance(message, str):\n        raise ValueError(\"Message must be a string.\")\n    \n    # Get a list of the individual words.\n    words = message.split(' ')\n    encoded_message = ''\n",
        "num_ids": 68
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    result = ''\n    \n    # Create a translation table\n    table = {'a':'A', 'A':'a', 'e':'E', 'E':'e', 'i':'I', 'I':'i', 'o':'O', 'O':'o', 'u':'U', 'U':'u'}\n    \n    for character in message:\n        if character.lower() in table:\n            result += table[character.lower()]\n        else:\n            result += character\n    return result\n",
        "num_ids": 126
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    message = message.lower()\n    vowels = 'aeiou'\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(message)):\n        if message[i] in vowels:\n            message = message[:i] + letters[vowels.index(message[i])+2] + message[i+1:]\n        elif message[i] in letters:\n            message = message[:i] + letters[letters.index(message[i])+2] + message[i+1:]\n    return message\n",
        "num_ids": 140
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    biggest = max(lst)\n    primes = get_prime(biggest)\n    for prime in primes:\n        if is_prime(prime,lst):\n            return sum(list(map(int,str(prime))))\n",
        "num_ids": 58
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    prime = [2,3,5,7]\n    max = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n    return max\n",
        "num_ids": 60
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(prime_numbers_from_list(lst))\n",
        "num_ids": 18
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # your code\n    return max([prime_sum(n) for n in lst])",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # TODO: implement this function\n    def is_prime(num):\n        if num % 2 == 0:\n            return num == 2\n        d = 3\n        while d * d <= num and num % d!= 0:\n            d += 2\n        return d * d > num\n",
        "num_ids": 68
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n    # lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\n    # lst = [0,81,12,3,1,21]\n    # lst = [0,8,1,2,1,7]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    # lst = [1,3,1,32,510",
        "num_ids": 1024
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    import math\n    #lst = list(range(0,1000))\n    \n    lst2 = []\n    for item in lst:\n        lst2.append(str(item))\n",
        "num_ids": 48
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # pass\n    #write your code here\n    maxvalue = 0\n    for val in lst:\n        if isprime(val):\n            sum = 0\n            for x in str(val):\n                sum = sum + int(x)\n            if sum > maxvalue:\n                maxvalue = sum\n    return maxvalue\n",
        "num_ids": 77
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(lst) == 1:\n        return lst[0]\n    if lst[0] == 0:\n        return 0\n    while True:\n        for i in range(len(lst)):\n            if is_prime(lst[i]):\n                lst[0] += lst[i]\n                del lst[i]\n                return skjkasdkd(lst)\ndef is_prime(n):\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\n",
        "num_ids": 143
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not dict:\n        return False\n    lower_case_keys = []\n    upper_case_keys = []\n    for k, v in dict.items():\n        if k.isalpha() and k.islower():\n            lower_case_keys.append(k)\n        elif k.isalpha() and k.isupper():\n            upper_case_keys.append(k)\n    return len(lower_case_keys) == len(dict) or len(upper_case_keys) == len(dict)\n",
        "num_ids": 123
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(dict) == 0 or all(type(key) is str and (key.isupper() and key.lower() in dict) or key.islower() for key in dict)\n",
        "num_ids": 45
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(dict)==0:\n        return False\n    else:\n        key=list(dict.keys())\n        if all(isinstance(x, str) for x in key) and all(x.islower() for x in key) or all(x.isupper() for x in key):\n            return True\n        else:\n            return False\n",
        "num_ids": 84
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key, val in dict.items():\n            if isinstance(key, str) == False:\n                return False\n            if key.isupper():\n                return False\n        return True\n",
        "num_ids": 63
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    try:\n        return all(isinstance(key, str) for key in dict.keys()) and all(isinstance(key, str) for key in dict.keys())\n    except:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for i in dict:\n            if isinstance(i, str):\n                if i.islower():\n                    continue\n                else:\n                    return False\n            else:\n                return False\n        return True\n",
        "num_ids": 67
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            return False\n        if key.islower():\n            return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = False\n    if len(dict) == 0:\n        return False\n    else:\n        for i in dict.keys():\n            if (i.isupper()) == True:\n                result = True\n            elif (i.islower()) == True:\n                result = True\n            else:\n                result = False\n    return result\n",
        "num_ids": 81
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(dict) == 0:\n        return False\n    key_list = list(dict.keys())\n    if len(key_list) == 0:\n        return False\n    if key_list == list(map(lambda x: x.upper(), key_list)):\n        return True\n    elif key_list == list(map(lambda x: x.lower(), key_list)):\n        return True\n    return False\n",
        "num_ids": 102
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n    return []\n",
        "num_ids": 8
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def is_prime(n):\n        for i in range(2, int(n**0.5)+1):\n            if n%i == 0:\n                return False\n        return True\n    if n<2:\n        return []\n    primes = [2]\n    for i in range(3, n, 2):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n",
        "num_ids": 101
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # O(n)\n    # n = 0 => return []\n    # n = 1 => return []\n    # n = 2 => [2]\n    # n = 3 => [2, 3]\n    # n = 4 => [2, 3, 5]\n    # n = 5 => [2, 3, 5, 7]\n    # n = 6 => [2, 3, 5, 7, 11]\n    # n = 7 => [2, 3, 5, 7, 11, 13]\n    # n = 8 => [2, 3, 5, 7, 11, 13, 17]\n    # n = 9 => [2, 3, 5, 7, 11, 13, 17, 19]\n    # n = 10 => [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    # n = 11 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    # n = 12 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n    # n = 13 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n    # n = 14 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]\n    # n = 15 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    # n = 16 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    # n = 17 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]\n    # n = 18 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59]\n    # n = 19 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]\n    # n = 20 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67]\n    # n = 21 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n    # n = 22 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73]\n    # n = 23 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79]\n    # n = 24 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83]\n    # n = 25 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]\n    # n = 26 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # n = 27 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    # n = 28 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103]\n    # n = 29 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29",
        "num_ids": 1024
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    prime_numbers = []\n    for i in range(1, n + 1):\n        if i == 0:\n            continue\n        if i == 1:\n            continue\n        if i == 2:\n            prime_numbers.append(i)\n            continue\n        is_prime = True\n        for num in prime_numbers:\n            if i % num == 0:\n                is_prime = False\n        if is_prime:\n            prime_numbers.append(i)\n    return prime_numbers\n",
        "num_ids": 121
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for num in range(n):\n        if is_prime(num) == True:\n            result.append(num)\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def is_prime(n):\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [num for num in range(2,n) if is_prime(num)]\n",
        "num_ids": 22
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # TODO: Write your code here\n    #pass\n    if n<=0:\n        return []\n    result = []\n    for x in range(2,n):\n        if is_prime(x):\n            result.append(x)\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def is_prime(n):\n        if n == 2:\n            return True\n        elif n == 1:\n            return False\n        else:\n            for i in range(2,n):\n                if n % i == 0:\n                    return False\n            return True\n    def primes_up_to(n):\n        prim = []\n        i = 2\n        while i < n:\n            if is_prime(i) == True:\n                prim.append(i)\n                i += 1\n            else:\n                i += 1\n        return prim\n    return primes_up_to(n)\nprint(count_up_to(20))\nprint(count_up_to(11))\nprint(count_up_to(1))\nprint(count_up_to(0))\nprint(count_up_to(18)",
        "num_ids": 198
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #make a list of the numbers from 1 to n\n    num_list = range(1, n + 1)\n    #check if each number is prime by checking if it divides evenly into n\n    return [i for i in num_list if is_prime(i)]\n",
        "num_ids": 63
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return a * b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    a = str(a)\n    b = str(b)\n    first = 0\n    second = 0\n    for i in a:\n        first += int(i)\n    for j in b:\n        second += int(j)\n    return first * second\n",
        "num_ids": 63
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if isinstance(a, int) and isinstance(b, int):\n        return unit_multiply(a, b)\n    else:\n        raise TypeError(\"Invalid input.\")\n",
        "num_ids": 45
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return int(str(a)[-1]) * int(str(b)[-1])\n",
        "num_ids": 23
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # a_max = max(a)\n    # b_max = max(b)\n    # a_min = min(a)\n    # b_min = min(b)\n    # print(a_max, b_max, a_min, b_min)\n    return a * b\n",
        "num_ids": 72
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return int(str(a)[-1]) * int(str(b)[-1])\n",
        "num_ids": 23
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # break down into the three digits and find the product\n    prod = 1\n    for i in reversed(str(a)):\n        prod *= int(i)\n    for j in reversed(str(b)):\n        prod *= int(j)\n    return prod\n",
        "num_ids": 68
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a < 0 or b < 0:\n        return 0\n    \n    a_list = []\n    b_list = []\n    a_list = str(a)\n    b_list = str(b)\n    \n    for i in range(0, len(a_list)):\n        a_list[i] = int(a_list[i])\n    \n    for i in range(0, len(b_list)):\n        b_list[i] = int(b_list[i])\n    \n    prod = 0\n    for i in range(0, len(a_list)):\n        prod = prod + a_list[i] * b_list[i]\n    \n    return pro",
        "num_ids": 171
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if (a<0) or (b<0):\n        raise Exception(\"Please enter positive integers only\")\n    if isinstance(a, float) or isinstance(b, float):\n        raise Exception(\"Please enter integers only\")\n    a = str(a)\n    b = str(b)\n    a = int(a[-1])\n    b = int(b[-1])\n    return a*b\n",
        "num_ids": 98
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    if not s:\n        return None\n    \n    cnt = 0\n    for i, char in enumerate(s):\n        if char.isupper() and i%2 == 0:\n            cnt += 1\n    \n    return cnt\n",
        "num_ids": 61
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # write your answer between #start and #end\n    #start\n    count = 0\n    if len(s) % 2 == 0:\n        for i in range(len(s)):\n            if i % 2 == 0 and s[i].isupper():\n                count += 1\n    return count\n    #end\n",
        "num_ids": 75
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum([1 for i, c in enumerate(s) if c.isupper() and i % 2 == 0])",
        "num_ids": 29
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            if s[i+1].upper() in 'AEIOU':\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in 'AEIOU' and i % 2 == 0:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    i = 0\n    count = 0\n    while i < len(s):\n        if s[i] in \"AEIOU\":\n            count += 1\n        i += 2\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum([1 for c in s[1::2] if c.upper() in 'AEIOU'])\n",
        "num_ids": 28
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    upper_count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].upper() in 'AEIOU':\n            upper_count += 1\n    return upper_count\n",
        "num_ids": 54
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for i, x in enumerate(s):\n        if i % 2 == 0 and x.isupper():\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return round(float(value))\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Hint: https://docs.python.org/3/tutorial/floatingpoint.html\n    value = float(value)\n    if value % 1 == 0:\n        return int(value)\n    else:\n        return int(value + 1) if value > 0 else int(value - 1)\n",
        "num_ids": 73
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # float(\"-inf\") is a floating point representation of -infinity.\n    return int(float(\"-inf\")) if float(\"-inf\") > value else int(float(\"inf\"))\n",
        "num_ids": 44
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return int(float(value))\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return round(float(value))\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return int(value) if int(value) == round(float(value)) else round(float(value))\n",
        "num_ids": 27
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    number = int(value)\n    if int(value) > 0:\n        if number % 1 == 0:\n            number += 1\n    elif int(value) < 0:\n        if number % 1 == 0:\n            number -= 1\n    return number\n",
        "num_ids": 62
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n < 1:\n        raise ValueError('Not a valid pile')\n    return [n] + [n+1 if n % 2 == 1 else n+2] + make_a_pile(n-1)\n",
        "num_ids": 53
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i = 0\n    x = []\n    while i < n:\n        i += 1\n        if i % 2 == 0:\n            x.append(i)\n        else:\n            i = i + 2\n    return x\n",
        "num_ids": 55
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        return [n] + make_a_pile(n + 2)\n    else:\n        return [n] + make_a_pile(n + 1)\n",
        "num_ids": 50
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n    elif n % 2 == 1:\n        return [n] + make_a_pile(n + 1)\n    else:\n        return [n] + make_a_pile(n - 2)",
        "num_ids": 63
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n % 2 == 0:\n        return [n] + make_a_pile(n + 2)\n    return [n] + make_a_pile(n + 4)\n",
        "num_ids": 46
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not isinstance(n, int):\n        raise TypeError('n has to be an integer')\n    if n < 1:\n        raise ValueError('n has to be a positive integer')\n",
        "num_ids": 46
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        odds = range(n, n + 2, 2)\n    else:\n        odds = range(n + 1, n + 3, 2)\n    return [i for i in odds]\n",
        "num_ids": 56
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [n] + [n+2*(n%2) for n in range(2, n)]\n",
        "num_ids": 27
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return s.replace(', ', ',').split(',')\n",
        "num_ids": 17
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return s.split(\" \")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = s.replace(\" \", \",\")\n    return s.split(\",\")\n",
        "num_ids": 22
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    return s.split(' ') if'' in s else s.split(',')\n",
        "num_ids": 23
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return s.split()\n",
        "num_ids": 8
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # get rid of the spaces and commas and then split the string into words\n    # your code here\n    words = s.replace(',','').split()\n    # your code here\n    return words\n",
        "num_ids": 49
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = s.strip().split()\n    return s\n",
        "num_ids": 15
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if x >= y:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n",
        "num_ids": 32
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if x < 2 or y < x:\n        return -1\n    elif x%2 == 1 and y%2 == 1:\n        return -1\n    else:\n        if x%2 == 0:\n            for i in range(x, y+1, 2):\n                if i%2 == 0:\n                    return i\n        else:\n            for i in range(x+1, y+1, 2):\n                if i%2 == 0:\n                    return i\n            return -1\n    return -1\n",
        "num_ids": 123
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if x > y:\n        return -1\n    else:\n        for num in range(x, y+1):\n            if num % 2 == 0 and num > x:\n                return num\n        return -1\n    \nprint(choose_num(12, 15)",
        "num_ids": 65
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if x % 2!= 0:\n        return -1\n    elif x > y:\n        return -1\n    else:\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n                return i\n    return -1\n",
        "num_ids": 64
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in range(x, y+1):\n        if i%2==0 and i<=y and i>=x:\n            return i\n    return -1\n",
        "num_ids": 42
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Your code here\n    num = -1\n    i = x\n    while i <= y:\n        if i % 2 == 0:\n            num = i\n        i += 1\n    return num\n",
        "num_ids": 48
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    biggest_num = 0\n    for num in range(x, y+1):\n        if num % 2 == 0:\n            if num > biggest_num:\n                biggest_num = num\n    if biggest_num!= 0:\n        return biggest_num\n    else:\n        return -1\n",
        "num_ids": 73
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if (x % 2!= 0 or y % 2!= 0) or (x > y):\n        return -1\n",
        "num_ids": 30
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    num = str(bin(int((n+m)/2)))\n    return num[2:]\n    ",
        "num_ids": 37
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n >= m:\n        return -1\n    sum_num = 0\n    for i in range(n,m + 1):\n        sum_num += i\n    avg = sum_num / (m - n + 1)\n    return bin(int(avg))[2:",
        "num_ids": 68
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    else:\n        rounded_avg_num = n + ((m - n) // 2)\n        return format(rounded_avg_num, \"b\")\n",
        "num_ids": 51
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n > m:\n        return -1\n    if n < m:\n        return bin(int(round((m - n) / (m - n + 1) * (2 ** n - 1) + n)))[2:]\n",
        "num_ids": 55
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n    else:\n        x = []\n        while n < m:\n            x.append(n)\n            n += 1\n        return bin(sum(x)/len(x))[2:]\n",
        "num_ids": 58
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n > m:\n        return -1\n    return f'0b{format(int(round((n+m+1)/2)), \"b\")}'\n",
        "num_ids": 40
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    if n > m:\n        return -1\n    else:\n        return bin(round((n+m)/2))[2:]\n        \n        \nprint(rounded_avg(1,5))\nprint(rounded_avg(7,5))\nprint(rounded_avg(10,20))\nprint(rounded_avg(20,33))",
        "num_ids": 86
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < m:\n        return -1\n    else:\n        return bin(round(((n-m+1)//2+m)//2))[2:]\n",
        "num_ids": 42
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [x for x in sorted(x) if not any(i in str(x) for i in '02468')]\n",
        "num_ids": 31
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for num in x:\n        digits = list(str(num))\n        for digit in digits:\n            if int(digit) % 2 == 0:\n                break\n        else:\n            result.append(num)\n    return sorted(result)\n",
        "num_ids": 65
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # COMPLETE ME\n    # return an empty list if the list is empty\n    if not x:\n        return []\n",
        "num_ids": 29
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(list(filter(lambda n: n % 2!= 0, x)))\n",
        "num_ids": 22
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    x = sorted(x)\n    evens = []\n    for i in x:\n        if any(i % 2 == 0):\n            evens.append(i)\n    return sorted([i for i in x if not any(i % 2 == 0)])\n",
        "num_ids": 63
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    nums = []\n    for i in x:\n        if int(i) % 2!= 0:\n            nums.append(i)\n    return sorted(nums)\n    \nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))\n",
        "num_ids": 82
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    x = list(filter(lambda x: x % 2 == 1, x))\n    x.sort()\n    return x\n",
        "num_ids": 30
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    x = sorted(x)\n    \n    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            x = x[:i]\n            break\n        elif i == len(x) - 1:\n            x = []\n            break\n    \n    return x",
        "num_ids": 75
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # your code here\n    # return []\n    \n    #  let's do it using set\n    return sorted(set([num for num in x if int(num) % 2 == 0]))\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids": 73
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    list_digits = [digit for digit in x if int(digit) % 2!= 0]\n    return sorted(list_digits)\n",
        "num_ids": 35
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    nums = [i for i in range(1, 10)]\n    arr = [i for i in range(1, 10)]\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [str(nums[0])]\n    if not set(arr) <= set(range(1,10)):\n        return []\n    arr.sort()\n    arr.reverse()\n    return [i for i in nums]\n",
        "num_ids": 137
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    # Time complexity: O(nlogn)\n    # Space complexity: O(n)\n    \n    # Sort the array.\n    arr.sort()\n    \n    # Get the max value.\n    max_val = max(arr)\n    \n    # Initialize the output array.\n    output = []\n    \n    # Iterate over the sorted array.\n    for num in arr:\n        \n        # If the number is between 1 and 9, append its corresponding name to the output array.\n        if num in range(1, 10):\n            output.append(NUM_TO_NAME[num])\n    \n    # Return the output array.\n    return outpu",
        "num_ids": 156
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Write your code here\n    arr.sort(reverse=True)\n    arr2 = []\n    arr3 = []\n    for x in arr:\n        if 1<=x<=9:\n            arr2.append(x)\n    for i in range(len(arr2)):\n        arr2[i] = chr(65+arr2[i])\n    for i in range(len(arr)):\n        if i%2==0:\n            arr3.append(arr2[i])\n    return arr3\n",
        "num_ids": 126
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted([str(i) for i in arr])[::-1]\n",
        "num_ids": 20
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(arr, reverse=True)[:9]\n",
        "num_ids": 15
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code here\n    pass",
        "num_ids": 9
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    arr.sort()\n    rev_arr = arr[::-1]\n    num_arr = []\n    num_list = ['One','Two','Three','Four','Five','Six','Seven','Eight','Nine']\n    for num in rev_arr:\n        num_arr.append(num_list[num-1])\n    return num_arr\nprint(by_length([]))\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\nprint(by_length([1, -1, 55]))\nprint(by_length([1, -1, 55, 55]))\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3, 1]))",
        "num_ids": 172
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]",
        "num_ids": 30
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return []",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    factorial_list = []\n    i = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial_list.append(i)\n        else:\n            factorial_list.append(1)\n            for k in range(1, i+1):\n                factorial_list[i-1] = factorial_list[i-1] * k\n    return factorial_list\n",
        "num_ids": 105
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = int(n)\n    list_of_factorials = list(range(1,n+1))\n    list_of_sums = []\n    for i in list_of_factorials:\n        if i%2 == 0:\n            list_of_sums.append(i)\n        else:\n            list_of_sums.append(sum(list_of_factorials[0:i]))\n    return list_of_sums\n",
        "num_ids": 113
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            sum = 0\n            for j in range(1, i + 1):\n                sum += j\n            result.append(sum)\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # write your code here\n    factorials = []\n    for i in range(1, n+1):\n        factorials.append(1) if i % 2 == 0 else factorials.append(sum(range(1, i+1)))\n    return factorials\n",
        "num_ids": 67
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if type(n)!= int:\n        return \"Factorial can only be computed for integers.\"\n    if n < 0:\n        return \"Factorial cannot be computed for negative integers.\"\n    if n == 0:\n        return [1]\n    else:\n        result = [1]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                result.append(i * result[len(result) - 1])\n            else:\n                tmp = []\n                for j in range(1, i + 1):\n                    tmp.append(j)\n                result.append(sum(tmp))\n        return result\n",
        "num_ids": 151
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(math.factorial(i))\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            res.append(sum)\n    return res\n",
        "num_ids": 80
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    ans = []\n    for i in range(n):\n        if i % 2 == 0:\n            ans.append(reduce(lambda x, y: x * y, range(1, i+1)))\n        else:\n            ans.append(reduce(lambda x, y: x + y, range(1, i+1)))\n    return ans\n",
        "num_ids": 84
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    # create an empty list of size n\n    l = [None] * n\n    # l = [None] * n\n    for i in range(n):\n        # create the variable to contain the number\n        num = i+1\n        # set the value of the element at index i\n        if i%2 == 0:\n            # if i is even\n            l[i] = num\n        else:\n            # if i is odd\n            sum = 0\n            while num > 0:\n                # for each number from 1 to i,\n                # add it to the sum and\n                # divide it by the current number\n                sum += num\n                num -= 1\n            # set the value of the element at index i\n            l[i] = sum\n    return l\n",
        "num_ids": 180
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # n = int(n)\n    return [1 if i % 2 == 0 else 1 + sum([k for k in range(1, i + 1)]) for i in range(1, n + 1)]\n",
        "num_ids": 50
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # time complexity O(log n), space complexity O(1)\n    def is_palindrome(n):\n        if n < 0:\n            return False\n        if n < 10:\n            return True\n        n, div = divmod(n, 10)\n        if div == n:\n            return True\n        else:\n            return is_palindrome(n)\n",
        "num_ids": 89
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    res = [0, 0]\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_even(i):\n                res[0] += 1\n            else:\n                res[1] += 1\n    return tuple(res)\n",
        "num_ids": 70
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # ==================================================\n    def is_palindrome(x):\n        \"\"\"\n        check if x is palindrome number\n        \"\"\"\n        x_str = str(x)\n        return x_str == x_str[::-1]\n",
        "num_ids": 59
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def is_palindrome(n):\n        n = str(n)\n        return n == n[::-1]\n",
        "num_ids": 31
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return (0, 0) if n < 2 else (sum(1 for i in range(1, n + 1) if is_palindrome(i)), sum(1 for i in range(1, n + 1) if is_palindrome(i) and is_odd(i)))\n",
        "num_ids": 68
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return 0\n    return sum(digit_sum(n) > 0 for n in arr)\n",
        "num_ids": 33
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Tip: Check if there are any negative numbers in the array\n    # Tip: Use %10 to extract the last signed digit\n    if not arr:\n        return 0\n",
        "num_ids": 40
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    count = 0\n    for n in arr:\n        \n        \n        if abs(n) % 10 == 0:\n            continue\n        \n        if abs(n) % 9 > 0:\n            count += 1\n    return count\n    \n    \n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(",
        "num_ids": 89
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # O(n) time\n    # O(1) space\n    return sum(1 for x in arr if sign_digit(x) > 0)\n",
        "num_ids": 37
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for i in arr:\n        if sum(map(int, str(i))) > 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = 0\n    for i in arr:\n        s += get_digits(i)\n    return s\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids": 54
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # print(arr)\n    count = 0\n    for num in arr:\n        # print(num)\n        if is_sum_digit(num):\n            count += 1\n    # print(count)\n    return count\n    # TODO: complete the function so that it returns the number of elements\n    # in the array with a sum of digits > 0.\n",
        "num_ids": 85
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum(1 for i in arr if sum(map(int, str(i))) > 0)\n",
        "num_ids": 25
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not arr:\n        return True\n    \n    if len(arr)==1:\n        return True\n    \n    if arr[0]>=arr[1]:\n        return False\n    \n    k=arr[0]\n    i=0\n    while i<len(arr)-1:\n        if k<arr[i+1]:\n            break\n        i+=1\n    \n    if i==len(arr)-1:\n        return False\n    \n    j=i+1\n    while j<len(arr):\n        if k>=arr[j]:\n            break\n        j+=1\n    \n    if j==len(arr):\n        return False\n    \n    arr[i],arr[j]=arr[j],arr[i]\n    if move_one_ball(arr[:i]+arr[i+1:j]+arr[j+1:]):\n        return True\n    else:\n        arr[i],arr[j]=arr[j],arr[i]\n    \n    return False\n        \n        ",
        "num_ids": 243
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # NOTE: Solution1\n    # Time-Complexity: O(n^2)\n    # Space-Complexity: O(1)\n    if len(arr) == 0:\n        return True\n    min_index = 0\n    for index in range(1, len(arr)):\n        if arr[min_index] > arr[index]:\n            min_index = index\n    return True if move_one_ball(arr[0:min_index]) or move_one_ball(arr[min_index:len(arr)]) else False\n    \ndef move_one_ball_sol2(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n",
        "num_ids": 289
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr:\n        return True\n    else:\n        arr.sort()\n        temp = arr[0]\n        for i in range(len(arr)-1):\n            if arr[i+1]<temp:\n                return False\n        return True\n",
        "num_ids": 62
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] > arr[i-1]:\n            break\n    else:\n        return True\n    for j in range(len(arr)-1, i-1, -1):\n        if arr[j] < arr[j-1]:\n            break\n    else:\n        return False\n    temp = arr[i-1]\n    arr[i-1] = arr[j]\n    arr[j] = temp\n    return True\n",
        "num_ids": 138
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    \"\"\"    Your Task:\n    You don't have to take any input. Just complete the function \n    move_one_ball() which takes arr as parameter and returns a boolean value (True \n    or False) after performing the right shift operation.\n    \n    \"\"\"\n    pass\n    \ndef main():\n    print(\"Main started...\")\n    #arr = [3, 4, 5, 1, 2]\n    #arr = [3, 5, 4, 1, 2]\n    #arr = [3, 5, 4, 1]\n    #arr = [3]\n    #arr = []\n    #arr = [1, 2, 3]\n    #arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    #arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    #arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n    #arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n    #arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 31",
        "num_ids": 1025
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    arr.sort()\n    if arr==[]:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # Write your code here.\n    \n    # Base cases\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    \n    # Check for non-decreasing order\n    if arr[0] < arr[1]:\n        return False\n    \n    # Right shift all the elements\n    for i in range(len(arr)):\n        arr[i - 1] = arr[i]\n        \n    # Array is sorted\n    return True\n    \n    \n",
        "num_ids": 126
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Please add your code here\n    if len(arr)==0:\n        return True\n    i=0\n    while i<len(arr)-1:\n        if arr[i]>=arr[i+1]:\n            break\n        i+=1\n    if i==len(arr)-1:\n        return True\n    for j in range(i,len(arr)-1):\n        if arr[j]<arr[j+1]:\n            arr[j+1],arr[j]=arr[j],arr[j+1]\n            i+=1\n    if i==len(arr)-1:\n        return True\n    return False",
        "num_ids": 151
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Code here\n    pass\n",
        "num_ids": 9
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(arr)==0:\n        return True\n    else:\n        l = len(arr)\n        s = arr[0]\n        arr = arr[1:]\n        if l==1:\n            return True\n        else:\n            for i in range(0,l):\n                if s<arr[i]:\n                    return False\n                else:\n                    s=arr[i]\n            return True\n",
        "num_ids": 98
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for item in lst1:\n        if item % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 32
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    else:\n        lst3 = lst1 + lst2\n        for i in lst3:\n            if i % 2!= 0:\n                return \"NO\"\n        return \"YES\"\n",
        "num_ids": 77
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Your code here\n    # It is assumed that the input lists will be non-empty.\n    for item in lst1:\n        if item % 2 == 0:\n            continue\n        else:\n            return \"NO\"\n",
        "num_ids": 54
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    # YOUR CODE GOES HERE\n    \n    lst1.sort()\n    lst2.sort()\n    if lst1[0] % 2!= 0 or lst1[-1] % 2!= 0:\n        return \"NO\"\n    return \"NO\" if len(lst2) > len(lst1) else \"YES\"\n",
        "num_ids": 87
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # The lists must have the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    # The lists must contain even numbers\n    for number in lst1:\n        if number % 2!= 0:\n            return \"NO\"\n    for number in lst2:\n        if number % 2!= 0:\n            return \"NO\"\n    # The lists must have at least one even number\n    for number in lst1:\n        if number % 2 == 0:\n            return \"YES\"\n    for number in lst2:\n        if number % 2 == 0:\n            return \"YES\"\n    # The lists must have the same even numbers\n    if lst1[0]!= lst2[0]:\n        return \"NO\"\n    for index in range(1, len(lst1)):\n        if lst1[index]!= lst2[index]:\n            return \"NO\"\n    return \"YES\"",
        "num_ids": 230
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Please add your code here\n    if (sum([x for x in lst1 if x % 2 == 0])!= sum([x for x in lst2 if x % 2 == 0])):\n        return \"NO\"\n    for elem in lst1:\n        if elem % 2 == 1:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 86
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Your code here\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n",
        "num_ids": 34
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for x in lst2:\n        if x % 2 == 1:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 31
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: WRITE YOUR SOLUTION HERE\n    \n    pass\n",
        "num_ids": 17
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    else:\n        new_list = []\n        for i in range(len(lst1)):\n            if lst1[i] % 2!= 0 or lst2[i] % 2!= 0:\n                new_list.append(lst1[i])\n                new_list.append(lst2[i])\n            else:\n                new_list.append(lst2[i])\n                new_list.append(lst1[i])\n    if sorted(new_list) == sorted(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 167
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Add your code here\n    d = {}\n    s = test.split()\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n",
        "num_ids": 60
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    d = {}\n    \n    test_list = test.split()\n    \n    for element in test_list:\n        if element in d:\n            d[element] += 1\n        else:\n            d[element] = 1\n    \n    return d\n",
        "num_ids": 64
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    letter_count = {}\n    for char in test.split():\n        if char not in letter_count:\n            letter_count[char] = 1\n        else:\n            letter_count[char] += 1\n    return letter_count\n",
        "num_ids": 57
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = {}\n    test = test.split(' ')\n    for t in test:\n        if t in result:\n            result[t] += 1\n        else:\n            result[t] = 1\n",
        "num_ids": 50
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    histogram = {}\n    for char in test:\n        if char not in histogram:\n            histogram[char] = 1\n        else:\n            histogram[char] = histogram[char] + 1\n    return histogram\n    \n",
        "num_ids": 60
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not test: return {}\n    test = test.split(\" \")\n    hist = {}\n    for t in test:\n        hist[t] = hist.get(t, 0) + 1\n    max_hist = max(hist.values())\n    res = []\n    for k, v in hist.items():\n        if v == max_hist:\n            res.append(k)\n    return {k: v for k, v in hist.items() if k in res}\n",
        "num_ids": 114
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # TODO: Solution without using in and set.\n    letters = []\n    d = {}\n    for letter in test.split():\n        if letter in d:\n            d[letter] += 1\n        else:\n            d[letter] = 1\n    \n    for key in d:\n        if d[key] == max(d.values()):\n            letters.append(key)\n    \n    return {i: letters.count(i) for i in set(letters)}\n",
        "num_ids": 113
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Raise a ValueError if the input is not a string\n    if not isinstance(test, str):\n        raise ValueError(f\"Input should be of type string, not {type(test)}\")\n",
        "num_ids": 48
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    counts = {}\n    test = test.split(' ')\n    for i in test:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return counts\n",
        "num_ids": 57
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    letters = test.split()\n    max_count = 0\n    letters_max_count = []\n",
        "num_ids": 25
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (s.translate(str.maketrans(c, \" \" * len(c))), all(s[::-1].swapcase().index(i) == s.index(i) for i in s.swapcase()))\n",
        "num_ids": 60
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = ''\n    for i in range(len(s)):\n        if s[i] in c:\n            continue\n        else:\n            result += s[i]\n    return (result, is_palindrome(result))\n",
        "num_ids": 57
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s_copy = s\n    s = ''.join(sorted(s.replace(c,''), reverse=True))\n    for i in range(0, len(s)//2):\n        if s[i]!= s[len(s)-i-1]:\n            return s_copy, False\n        else:\n            return s, True\n",
        "num_ids": 83
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s=s.replace(\" \", \"\")\n    c=c.replace(\" \", \"\")\n    if len(c) == 1:\n        for letter in s:\n            if letter == c:\n                s = s.replace(letter, \"\")\n    else:\n        for letter in s:\n            if letter in c:\n                s = s.replace(letter, \"\")\n    return (s,s == s[::-1])\n",
        "num_ids": 103
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if s == \"\":\n        return (\"\",False)\n    s_length = len(s)\n    c_length = len(c)\n    c_counter = 0\n    result_string = \"\"\n    for i in range(s_length):\n        if c_counter > c_length:\n            result_string += s[i]\n            c_counter = 0\n        elif s[i] == c[c_counter]:\n            c_counter += 1\n            continue\n        else:\n            c_counter = 0\n    result = \"\"\n    if s_length == c_length:\n        result = s\n    else:\n        result = result_string\n    if result == s:\n        return (result,True)\n    else:\n        return (result,False)\n        \ndef swap_dots(s):\n    \"\"\"Task\n    Given a string s, find and return the string with all its '.' characters changed to '*'.\n    Example\n    For s = \"a.c.c.b\", the result should be \"ac*c*b\".\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == \".\":\n            result += \"*\"\n        else:\n            result += s[i]\n    return result\n",
        "num_ids": 303
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if s == \"\":\n        return (c,False)\n    elif len(s) == 1:\n        return (s,c == s)\n    else:\n        (l, r) = split_by_char(s,c)\n        (l_, r_) = split_by_char(s,c)\n        return (l + l_, c not in r_)\n",
        "num_ids": 94
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    while len(c) > 1:\n        c = c[1:]\n    r = list(s)\n    for i in range(len(r)):\n        if r[i] in c:\n            del r[i]\n    return (\"\".join(r),r == list(s)[::-1])\nif __name__ == '__main__':\n    print(reverse_delete(\"abcdef\", \"b\"))\n    print(reverse_delete(\"abcdedcba\", \"ab\"))\n    print(reverse_delete(\"abcde\", \"ae\"))",
        "num_ids": 129
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    try:\n        t = s\n        s = s.replace(c, '')\n        s = s[::-1]\n        if t == s:\n            return (s, True)\n        return (s, False)\n    except:\n        return ('Error', False)\n",
        "num_ids": 67
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if c == \"\":\n        return (\"\",False)\n    \n    sub_c = c[0]\n    flag = False\n    \n    for i in range(len(s)):\n        if flag:\n            break\n        if s[i] == sub_c:\n            s = s[0:i] + s[i + 1:]\n            flag = True\n    \n    return (s,s == s[::-1])\n    \ns = \"abcde\"\nc = \"ae\"\nprint(reverse_delete(s,c))\n",
        "num_ids": 130
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return ['the number of odd elements'+ str(len(lst[i])) + 'n the'+'str' + str(i + 1) + 'ng' +'' + str(i + 1) +'of the'+ 'input.' for i in range(len(lst))]\n",
        "num_ids": 71
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [str(sum(int(i) for i in element if int(i)%2==1)) for element in lst]\n",
        "num_ids": 33
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lst1=[]\n    for i in range(len(lst)):\n        count=0\n        for j in range(len(lst[i])):\n            if int(lst[i][j])%2!=0:\n                count+=1\n        lst1.append(\"the number of odd elements \"+str(count)+\" n the str\"+str(i+1)+\" of the \"+str(i+1)+\"nput.\")\n    return lst1\nprint(odd_count([\"1234567\"]))\nprint(odd_count([\"11111111\",\"22222222\"]))\n",
        "num_ids": 144
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    output = []\n    for element in lst:\n        counter = 0\n        for char in element:\n            if char in \"123456789\":\n                counter += 1\n        output.append(counter)\n    return output\n",
        "num_ids": 54
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    output_lst = []\n    for i in lst:\n        lst_len = len(i)\n        output = []\n        for j in range(lst_len):\n            if i[j] in '0123456789':\n                if int(i[j]) % 2!= 0:\n                    output.append(i[j])\n        output_lst.append(output)\n    return output_lst\n",
        "num_ids": 112
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [f\"the number of odd elements {len([char for char in str(number) if int(char) % 2 == 1])}n the str{number}n of the {number}nput.\" for number in lst]\n",
        "num_ids": 55
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # REPLACE THE pass ABOVE WITH YOUR CODE\n    return ['the number of odd elements'+ str(len([char for char in x if int(char) % 2!= 0])) + 'n the str' + str(i + 1) + 'n of the'+ str(i + 1) + 'nput.' for i, x in enumerate(lst)]\n",
        "num_ids": 88
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [\"the number of odd elements \" + str(len([i for i in j if int(i) % 2 == 1])) + \"n the str\" + str(j.count(j)) + \" of the \" + str(j.count(j)) + \"nput.\" for j in lst]\n",
        "num_ids": 72
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for string in lst:\n        count = 0\n        for char in string:\n            if char in \"0123456789\":\n                if int(char)%2 == 1:\n                    count += 1\n        result.append(f\"the number of odd elements {count}n the str{string} of the {string}nput.\")\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert isinstance(lst, list), 'odd_count should take a list as input'\n    assert all([isinstance(x, str) for x in lst]), 'odd_count should take a list of strings'\n    assert all([x.isdigit() for x in lst]), 'odd_count should take a list of strings'\n    output = []\n    for num in lst:\n        odd_count = 0\n        for i in num:\n            if int(i) % 2 == 1:\n                odd_count += 1\n        output.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + num + \" of the \" + num + \"nput.\")\n    return output\n",
        "num_ids": 169
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # This is a brute force solution. We can make it faster by using the sliding\n    # window and the monotonic queue.\n    # This is a good test for the sliding window\n    if len(nums) == 0:\n        return None\n",
        "num_ids": 58
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = len(nums)\n    min_sum = sum(nums)\n    for i in range(1, n+1):\n        if sum(nums[:i]) >= min_sum:\n            break\n    return sum(nums[:i])\n",
        "num_ids": 64
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not nums: return 0\n    \n    min_sum = float('inf')\n    left = 0\n    s = 0\n    for right in range(len(nums)):\n        s += nums[right]\n        while left <= right and s >= 0:\n            min_sum = min(min_sum, s)\n            s -= nums[left]\n            left += 1\n        \n    if min_sum == float('inf'):\n        return 0\n    return min_sum\n",
        "num_ids": 117
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    if len(nums) == 1:\n        return nums[0]\n    \n    m = nums[0]\n    for i in range(len(nums)):\n        s = 0\n        for j in range(i, len(nums)):\n            s += nums[j]\n            m = min(m, s)\n    return m\n",
        "num_ids": 89
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # from: https://leetcode.com/problems/minimum-size-subarray-sum/discuss/173656/C%2B%2BJavaPython-Two-Pointers-with-explanation\n    if not nums: return 0\n    result = nums[0]\n    sums = 0\n    for n in nums:\n        sums += n\n        result = min(result, sums)\n        sums = max(sums, n)\n    return result\n",
        "num_ids": 117
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(nums) == 0: return 0\n    elif len(nums) == 1: return nums[0]\n",
        "num_ids": 32
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if nums == []: return 0\n    minimum_sum = nums[0]\n    summ = nums[0]\n    for num in nums[1:]:\n        summ += num\n        if summ < minimum_sum:\n            minimum_sum = summ\n        if summ < 0:\n            summ = 0\n    return minimum_sum\n",
        "num_ids": 84
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    min_sum = sys.maxsize\n    current_sum = 0\n    for i in range(len(nums)):\n        current_sum = current_sum + nums[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum\n",
        "num_ids": 88
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sum_ = 0\n    min_ = None\n    for i, n in enumerate(nums):\n        sum_ += n\n        if i < len(nums) - 1:\n            if min_ is None or min_ > sum_:\n                min_ = sum_\n",
        "num_ids": 66
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def _minSubArraySum(arr, start, end):\n        if start >= end:\n            return float('inf')\n        min_so_far = float('inf')\n        min_end_here = 0\n        for i in range(start, end + 1):\n            min_end_here += arr[i]\n            if min_end_here < min_so_far:\n                min_so_far = min_end_here\n        return min_so_far\n",
        "num_ids": 112
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    m = len(grid)\n    n = len(grid[0])\n",
        "num_ids": 19
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert grid, 'Grid cannot be an empty array.'\n    assert all(len(row) == len(grid[0]) for row in grid), 'Grid should have the same length on each row.'\n",
        "num_ids": 46
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    row_set, col_set = set(), set()\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                row_set.add(i)\n                col_set.add(j)\n",
        "num_ids": 83
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    total_rows = len(grid)\n    total_cols = len(grid[0])\n    \n    # Empty wells\n    for i in range(total_rows):\n        for j in range(total_cols):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n",
        "num_ids": 76
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Initialize result\n    result = 0\n",
        "num_ids": 12
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def count_water(grid, capacity, r, c):\n        total = 0\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 1:\n                    total += 1\n        return total\n",
        "num_ids": 60
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    grid_n, grid_m = len(grid), len(grid[0])\n    def count_neighbours(grid, pos):\n        x, y = pos\n        neigh = 0\n        for n in range(x-1, x+2):\n            for m in range(y-1, y+2):\n                if n >= 0 and m >= 0 and n < grid_n and m < grid_m and (n, m)!= (x, y):\n                    neigh += grid[n][m]\n        return neigh\n",
        "num_ids": 127
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #brute force\n    # Time: O(n)\n    # Space: O(n)\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # for each well, \n        # for each row, \n            # count the number of times a row has a unit of water \n                # subtract the number of times you have to increase the bucket, \n                    # from the number of times you have to decrease the bucket\n    # the number of times you have to increase the bucket is the number of times you have a unit of water in a row, \n        # since we can empty a bucket into another empty bucket \n    # the total number of times you have to increase the bucket is the sum of the previous row\n",
        "num_ids": 127
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # TODO: Approach 1\n    # O(R * C)\n    # O(R)\n    def dfs(row, col, state):\n        if row >= len(grid) or row < 0 or col >= len(grid[0]) or col < 0:\n            return 0\n        \n        if state == 1:\n            # state 1 means we already checked the well, and we've tried to put water in it\n            # so this well is impossible, so we don't need to check it\n            return dfs(row, col + 1, 1)\n        \n        if grid[row][col] == 1 and state == 0:\n            # state 0 means we haven't visited this well yet, and we can use it\n            # so we put water in it and try the next well\n            return dfs(row, col + 1, 1) + 1\n        \n        return max(dfs(row, col + 1, 1), dfs(row, col + 1, 0))\n    \n    if len(grid) == 0:\n        return 0\n    \n    for row in grid:\n        for col in row:\n            if col == 1:\n                return dfs(0, 0, 0)\n    \n    return 0\n    ",
        "num_ids": 285
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # now I want to sort the list based on the number of ones in the binary repr\n    # of each number\n    # is it possible to do this using map and lambda?\n    # first get a list of binary strings\n    # binary = list(map(lambda x: bin(x), arr))\n    # then count how many ones in each binary\n    # binary = list(map(lambda x: x.count(\"1\"), binary))\n    # then sort based on the count of ones\n    # binary.sort(key=lambda x: x)\n",
        "num_ids": 125
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
        "num_ids": 23
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    arr.sort(key=lambda x: (bin(x).count(\"1\"), x))\n    return arr",
        "num_ids": 26
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def bin_sort(n):\n        return bin(n).count('1')\n",
        "num_ids": 21
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def binary(n):\n        return int(n, 2)\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n",
        "num_ids": 24
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s = s.split()\n    \n    if s == []:\n        return []\n    else:\n        return [word for word in s if len(set(word).intersection(\"aeiou\")) == n]\n",
        "num_ids": 52
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    words = []\n    consonant_count = 0\n    for letter in s:\n        if letter.lower() not in vowels:\n            consonant_count += 1\n            if consonant_count == n:\n                words.append(s[s.index(letter) - n + 1:s.index(letter)].strip())\n                return words\n    return words",
        "num_ids": 87
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    words = s.split()\n    result = []\n    for word in words:\n        if word.count(word[0]) == n:\n            result.append(word)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    import re\n    if not s:\n        return []\n    words = re.split('\\s+',s)\n    consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    l = []\n    for word in words:\n        if word.isalpha():\n            counter = 0\n            for char in word:\n                if char in consonants:\n                    counter+=1\n            if counter == n:\n                l.append(word)\n    return l\n",
        "num_ids": 142
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert n >= 0, \"n should be a positive number\"\n    s = s.split()\n    words_list = []\n    for word in s:\n        if len(word) == n:\n            words_list.append(word)\n    return words_list\n",
        "num_ids": 64
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [word for word in s.split(' ') if len(word) == n and word.isalpha()]\n",
        "num_ids": 29
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #get the split of s into words\n    words = s.split()\n    #get the list of consonants\n    consonants = get_consonants()\n    #variables to hold the results\n    results = []\n    #for each word in the list of words\n    for word in words:\n        #for each letter in the word\n        for letter in word:\n            #if the letter is not in the list of consonants\n            if letter not in consonants:\n                #breaks out of the loop because the word is not in the results\n                break\n        #otherwise\n        else:\n            #adds the word to the results list\n            results.append(word)\n    #returns the results\n    return results\n",
        "num_ids": 169
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l = s.split()\n    r = []\n    for i in l:\n        if check_consonants(i, n) == True:\n            r.append(i)\n    return r\n",
        "num_ids": 49
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    \n    for i in range(len(word) - 1):\n        if word[i] not in vowels and word[i + 1] not in vowels:\n            continue\n        else:\n            return word[i + 1]\n    \n    return ''\n",
        "num_ids": 87
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    word_lst = list(word)\n    for i in range(1, len(word_lst)):\n        if word_lst[i] in \"aeiou\" and word_lst[i-1] not in \"aeiou\":\n            return word_lst[i]\n",
        "num_ids": 72
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    start, end = None, None\n    for index, char in enumerate(word):\n        if char in vowels:\n            start = index\n        else:\n            end = index\n            break\n    if start and end:\n        for char in word[end + 1:]:\n            if char in vowels:\n                return char\n    return ''\n",
        "num_ids": 105
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowel_candidate = None\n    for i, c in enumerate(word):\n        if c in 'AEIOU':\n            vowel_candidate = i\n        if c in 'QWRTYPSDFGHJKLZXCVBNM':\n            if vowel_candidate is None:\n                return ''\n            else:\n                return word[vowel_candidate]\n    return ''\n",
        "num_ids": 97
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    vowels = set([\"a\", \"e\", \"i\", \"o\", \"u\"])\n    closest_vowel = \"\"\n    for i, l in enumerate(word):\n        if l in vowels:\n            return word[i:]\n    return closest_vowel\n",
        "num_ids": 73
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    idx = 0\n    while idx < len(word) - 2:\n        if word[idx] in \"AEIOU\" and word[idx+1] not in \"AEIOU\":\n            return word[idx]\n        idx += 1\n    return \"\"",
        "num_ids": 66
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    closest_vowel = \"\"\n    for i in range(1, len(word) - 1):\n        if word[i - 1].lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"] and word[i + 1].lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n            closest_vowel = word[i]\n    return closest_vowel\n",
        "num_ids": 103
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(len(word) - 1):\n        if word[i].lower() in consonants and word[i + 1].lower() in consonants:\n            return word[i]\n    return '",
        "num_ids": 50
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # return word[::-1][:2] if word[::-1]!= \"\" else \"\"\n    for i, letter in enumerate(word[::-1]):\n        if letter.lower() in \"aeiou\":\n            return word[::-1][i + 1:]\n    return \"\"\n",
        "num_ids": 73
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    consonants = set('bcdfghjklmnpqrstvwxyz')\n    vowels = set('aeiou')\n    candidates = []\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in consonants:\n            candidates.append(word[i])\n            break\n    for i in range(1, len(word)):\n        if word[i] in vowels:\n            candidates.append(word[i])\n            break\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in consonants:\n            candidates.append(word[i])\n            break\n    if candidates:\n        candidates.reverse()\n        return min(candidates, key=lambda x: abs(consonants.index(x)-vowels.index(word[i])))\n    return ''\n",
        "num_ids": 218
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    open_parentheses = 0\n    good = True\n    for x in lst:\n        for y in x:\n            if y == '(':\n                open_parentheses += 1\n            else:\n                if open_parentheses == 0:\n                    good = False\n                    break\n                else:\n                    open_parentheses -= 1\n        if not good:\n            break\n    if open_parentheses:\n        good = False\n    return 'Yes' if good else 'No'\n",
        "num_ids": 112
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(len(lst)):\n        first_str = lst[i]\n        for j in range(i + 1, len(lst)):\n            second_str = lst[j]\n            if first_str.count('(')!= first_str.count(')') or second_str.count('(')!= second_str.count(')'):\n                continue\n            else:\n                if first_str.count('(')!= first_str.count(')') or second_str.count('(')!= second_str.count(')'):\n                    continue\n                else:\n                    temp = first_str\n                    first_str = second_str\n                    second_str = temp\n                    break\n        if first_str[0] == ')' or second_str[0] == ')':\n            return 'No'\n        else:\n            break\n    return 'Yes'\n",
        "num_ids": 211
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    good = {\n    '(': ')',\n    ')': '(',\n    }\n",
        "num_ids": 23
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    open_parentheses, close_parentheses = lst\n    open_count = 0\n    close_count = 0\n",
        "num_ids": 29
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not lst:\n        return 'Yes'\n    lst = list(lst)\n    good_strings = [tuple(i) for i in permutations(lst)]\n    result = [all(i in good_strings for i in good_strings) for good_strings in good_strings]\n    return 'Yes' if all(result) else 'No'\n",
        "num_ids": 88
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst.sort()\n    flag = False\n    for i in range(len(lst)):\n        if lst[i][0] == ')' and lst[i][1] == '(':\n            flag = True\n            break\n    if flag:\n        return 'Yes'\n    return 'No'\n",
        "num_ids": 75
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    stack = []\n",
        "num_ids": 6
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # If lst is empty then it is also good\n    if len(lst) == 0:\n        return 'Yes'\n    \n    # if there is only one element, then it is also good\n    if len(lst) == 1:\n        return 'Yes'\n    \n    # let us check if the first element can be paired with the last one\n    first = lst[0]\n    last = lst[-1]\n    \n    # first and last elements cannot be paired, return No\n    if first[0]!= last[-1]:\n        return 'No'\n    \n    # Let us check for middle elements\n    for i in range(1, len(lst) - 1):\n        element = lst[i]\n        if element[0] == last[-1]:\n            last = element\n        else:\n            return 'No'\n    \n    # if we are here then it means that the elements in the list can be paired\n    return 'Yes'\n",
        "num_ids": 230
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # O(n) time and space complexity, where n is the length of lst\n    if len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        if lst[0] == ')' or lst[1] == '(':\n            return 'No'\n    else:\n        stack = []\n        for i in range(0, len(lst)):\n            if lst[i] == '(':\n                stack.append('(')\n            else:\n                if len(stack) == 0:\n                    return 'No'\n                stack.pop()\n        if len(stack) == 0:\n            return 'Yes'\n        return 'No'\n    \ndef max_subarray_sum(lst):\n    '''\n    Given a list of integers, find the contiguous sublist with the largest sum.\n    For example, the list [34, -50, 42, 14, -5, 86] has a maximum sum of 98.\n    Return the sum.\n",
        "num_ids": 240
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Time complexity: O(Nlog(N))\n    # Space complexity: O(1)\n    l = 0\n    r = len(arr) - 1\n    curr_max = 0\n    for i in range(len(arr)):\n        curr_max = max(curr_max, arr[i])\n        if i - l + 1 == k:\n            arr[l] = curr_max\n            curr_max = 0\n            l += 1\n    return arr[:k]\n",
        "num_ids": 120
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return heapq.nlargest(k, arr)\n",
        "num_ids": 14
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(arr, reverse=True)[:k]\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return arr[:k]\n",
        "num_ids": 9
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def merge_sort(arr):\n        if len(arr) < 2:\n            return arr\n",
        "num_ids": 24
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 1:\n            sum += lst[i]\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0])\n",
        "num_ids": 30
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2!= 0:\n            total += lst[i]\n    return total",
        "num_ids": 52
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    summ = 0\n    for i,el in enumerate(lst):\n        if i % 2!= 0 and el % 2 == 1:\n            summ += el\n    return summ\n    \n",
        "num_ids": 48
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([x for i,x in enumerate(lst) if i % 2 == 1]",
        "num_ids": 24
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    answer = 0\n    for i in range(0,len(lst),2):\n        if lst[i]%2!= 0:\n            answer += lst[i]\n    return answer",
        "num_ids": 50
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2 == 0:\n            count += lst[i]\n",
        "num_ids": 48
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    x = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 1:\n            x += lst[i]\n    return x",
        "num_ids": 52
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    odds = filter(lambda x: x % 2!= 0, lst)\n    # odds = []\n    # for elem in lst:\n    #     if elem % 2!= 0:\n    #         odds.append(elem)\n    #     else:\n    #         pass\n    return sum(odds)",
        "num_ids": 80
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum_odd = 0\n    for i, n in enumerate(lst):\n        if i % 2!= 0 and n % 2 == 1:\n            sum_odd += n\n    return sum_odd\n",
        "num_ids": 50
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if k < 0 or k > len(arr):\n        raise Exception(\"k must be between 1 and len(arr)\")\n",
        "num_ids": 30
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if k > len(arr):\n        k = len(arr)\n    sub = []\n    for i in range(k):\n        sub.append(arr[i])\n    return sum(sub)\n",
        "num_ids": 49
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(arr[:k])\n",
        "num_ids": 11
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(arr[:k])\n",
        "num_ids": 11
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(map(int, arr[:k]))\n",
        "num_ids": 16
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    arr = arr[:k]\n    return sum([int(x) for x in arr])\n",
        "num_ids": 24
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    c = Counter(arr[:k])\n    t = 0\n    for n in c.keys():\n        if c[n] <= 2:\n            t += n\n    return t\n",
        "num_ids": 45
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Time: O(k)\n    # Space: O(1)\n    first_k = arr[:k]\n    return sum([int(i[0]) for i in first_k]) + sum([int(i[1]) for i in first_k])\n",
        "num_ids": 64
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if k == len(arr):\n        return sum(arr)\n    max_val = 0\n    for i in range(k):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        if arr[i] >= 10:\n            arr[i] -= 10\n    return max_val + sum(arr[k:])\n",
        "num_ids": 87
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    def collatz(n):\n        return (n // 2) if n % 2 == 0 else (3 * n + 1)\n    \n    lst = []\n    while n!= 1:\n        if collatz(n) % 2 == 0:\n            lst.append(collatz(n))\n            n = collatz(n)\n        else:\n            lst.append(n)\n            n = collatz(n)\n    \n    return lst[:-1]\n",
        "num_ids": 116
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    res = []\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (3 * n) + 1\n        res.append(n)\n    return res\n",
        "num_ids": 56
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [c for c in collatz_sequence(n) if c % 2]\n",
        "num_ids": 21
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    odd_collatz = []\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        collatz.append(int(n))\n    for ele in collatz:\n        if ele not in odd_collatz:\n            odd_collatz.append(ele)\n    odd_collatz.sort()\n    return odd_collatz\n",
        "num_ids": 110
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    collatz_sequence = []\n    while n > 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n    collatz_sequence.append(1)\n    return collatz_sequence\n",
        "num_ids": 74
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    odd_collatz = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = 3*n + 1\n        if n > 1:\n            odd_collatz.append(int(n))\n    return sorted(odd_collatz)\n",
        "num_ids": 78
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # initiate a list to store odd numbers\n    odd_collatz = []\n    # iterate over all positive integers\n    for i in range(1, n + 1):\n        # if i is not already in collatz sequence\n        if i not in collatz_sequence:\n            # get collatz sequence of i\n            c = get_collatz_sequence(i)\n            # for each element of collatz sequence\n            for j in c:\n                # if the element is not already in the list\n                if j not in collatz_sequence:\n                    # add it to the list\n                    odd_collatz.append(j)\n    # return the list\n    return odd_collatz\n",
        "num_ids": 158
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert isinstance(n, int) and n > 0, \"Invalid input n\"\n    seq = [n]\n    while n!= 1:\n        if n%2 == 0:\n            n = n // 2\n            seq.append(n)\n        else:\n            n = 3*n + 1\n            seq.append(n)\n    seq.pop()\n    return seq\n",
        "num_ids": 91
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [x for x in get_collatz(n) if x % 2!= 0]\n    \n",
        "num_ids": 26
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #split the date\n    #use a dictionary to store the months and the number of days\n    #use a list to store the months\n    #list is used because indexing is better\n    month_dict = {'01':31,'02':28,'03':31,'04':30,'05':31,'06':30,'07':31,'08':31,'09':30,'10':31,'11':30,'12':31}\n    months_list = ['01','02','03','04','05','06','07','08','09','10','11','12']\n    #get the year from the input string\n    year = date[-4:]\n    #use the last 2 characters of the date string to get the month\n    month = date[-6:-4]\n    #use the first 2 characters of the date string to get the day\n    day = date[:2]\n    #validate the month\n    if month not in months_list:\n        return False\n    elif month in months_list[:4]:\n        if int(day) > month_dict[month]:\n            return False\n        elif int(day) < 1:\n            return False\n    elif month in months_list[4:]:\n        if int(day) > month_dict[month]:\n            return False\n        elif int(day) < 1:\n            return False\n    elif month == months_list[2]:\n        if int(day) > 29:\n            return False\n        elif int(day) < 1:\n            return False\n    else:\n        return False\n    return True\n",
        "num_ids": 367
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n    return False\n",
        "num_ids": 8
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not date:\n        return False\n    else:\n        if (len(date)!= 10):\n            return False\n        else:\n            month = int(date[0:2])\n            day = int(date[3:5])\n            year = int(date[6:10])\n            # print(\"Month: \",month)\n            # print(\"Day: \", day)\n            # print(\"Year: \", year)\n",
        "num_ids": 100
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if date == '':\n        return False\n",
        "num_ids": 12
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    date_segment = date.split('-')\n    \n    if date_segment[0].isdigit() and date_segment[1].isdigit() and date_segment[2].isdigit() and len(date_segment[0]) == 2 and len(date_segment[1]) == 2 and len(date_segment[2]) == 4:\n",
        "num_ids": 91
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    # your code here\n    return True if date else False\n",
        "num_ids": 17
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    if date == '':\n        return False\n    \n    date_list = date.split('-')\n    \n    if len(date_list)!= 3:\n        return False\n        \n    day = date_list[0]\n    month = date_list[1]\n    year = date_list[2]\n    \n    if len(day)!= 2:\n        return False\n    if len(month)!= 2:\n        return False\n    if len(year)!= 4:\n        return False\n    \n    if int(year) < 1000:\n        return False\n    \n    month_day_dict = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    \n    month_day_list = [1, 3, 5, 7, 8, 10, 12]\n    \n    if int(month) in month_day_list:\n        if int(day) > month_day_dict[int(month)]:\n            return False\n    \n    month_day_list = [4, 6, 9, 11]\n    \n    if int(month) in month_day_list:\n        if int(day) > 30:\n            return False\n    \n    if int(month) == 2:\n        if int(day) > 29:\n            return False\n    \n    return True",
        "num_ids": 367
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #raise NotImplementedError\n    data = date.split('-')\n    if len(data)!= 3:\n        return False\n    try:\n        month = int(data[0])\n        day = int(data[1])\n        year = int(data[2])\n    except:\n        return False\n    if year <= 0 or year > 9999:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        if day < 1 or day > 30:\n            return False\n    elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        if day < 1 or day > 31:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n",
        "num_ids": 230
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # year must be 4-digit\n    if len(date)!= 10:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # your code here\n    return True\n",
        "num_ids": 11
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # data = [txt]\n    # for char in txt:\n    #     if char.isspace():\n    #         data.append(\" \")\n    # data = [word for line in data for word in line.split()]\n    # return data\n",
        "num_ids": 62
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l = txt.split()\n    if l == []:\n        return 0\n    else:\n        return l\n",
        "num_ids": 29
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Create empty list\n    lst = []\n    # Loop through text\n    for x in txt:\n        if x.isspace():\n            # Append to list if whitespace\n            lst.append(x)\n        elif x == \",\":\n            # Append to list if comma\n            lst.append(x)\n    # Print list\n    print(lst)\n",
        "num_ids": 93
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = txt.split()\n    return result\n",
        "num_ids": 14
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst = txt.split()\n    counter = 0\n    for x in txt:\n        if x == ',':\n            counter += 1\n        elif x =='':\n            counter += 1\n        else:\n            continue\n    return lst, counter\n",
        "num_ids": 64
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [txt.split()]\n",
        "num_ids": 10
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # your code here\n",
        "num_ids": 7
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return lst == sorted(lst)\n",
        "num_ids": 12
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # if the length of the list is 2 or less, it is automatically sorted\n    # if the list has more than 1 duplicate of the same number, it is not sorted\n    if len(lst) <= 2:\n        return True\n    if len(lst) > 2:\n        if lst.count(lst[0]) == 1:\n            return True\n        else:\n            return False\n",
        "num_ids": 93
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # an empty list is sorted.\n    if len(lst) == 0:\n        return True\n    # there's only one item in the list.\n    if len(lst) == 1:\n        return True\n    # if the last item in the list is smaller than the first item,\n    # the list is not sorted.\n    if lst[len(lst) - 1] < lst[0]:\n        return False\n    # if there's more than one item in the list, iterate through\n    # the list and compare the current item to the one before it.\n    # if any of them are duplicates, return False.\n    if len(lst) > 1:\n        for i in range(len(lst) - 1):\n            if lst[i] == lst[i + 1]:\n                return False\n    # if the list is sorted, return True.\n    return True\n",
        "num_ids": 211
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return True if lst[0] <= lst[1] else False\n    elif lst[0] <= lst[1] and len(lst) <= 3:\n        return True\n    elif lst[0] == lst[1] and lst[0] == lst[2]:\n        return False\n    elif lst[0] == lst[1] and lst[0] == lst[2] and lst[0]!= lst[3]:\n        return False\n    elif lst[0] == lst[1] and lst[0] == lst[2] and lst[0] == lst[3]:\n        return False\n    elif lst[0] == lst[1] and lst[0] == lst[2]:\n        return False\n    elif lst[0]!= lst[1]:\n        return False\n    else:\n        return is_sorted(lst[1:]",
        "num_ids": 259
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(lst) == 1:\n        return True\n    else:\n        if len(set(lst)) == 1:\n            return False\n        else:\n            if len(set(lst))!= len(lst):\n                return False\n            else:\n                for i in range(len(lst) - 1):\n                    if lst[i] > lst[i + 1]:\n                        return False\n                    else:\n                        continue\n                else:\n                    return True\n                    ",
        "num_ids": 117
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(lst) < 2:\n        return True\n    i = 0\n    while i < (len(lst) - 1):\n        if lst[i] < lst[i+1]:\n            i += 1\n        else:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert not (interval1[0] > interval1[1] or interval2[0] > interval2[1]), 'The interval is not closed'\n    return \"YES\" if interval1[0] <= interval2[0] <= interval1[1] and interval2[0] <= interval1[0] <= interval2[1] else \"NO\"\n    \n    \n    # pass\n    \n",
        "num_ids": 93
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TO IMPLEMENT: Your solution here.\n    # store all the numbers of interval1\n    num_interval1 = []\n    # store all the numbers of interval2\n    num_interval2 = []\n    # store the intersection\n    intersection = []\n",
        "num_ids": 63
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    x,y = interval1\n    a,b = interval2\n    # your code here\n    if x <= b and y >= a:\n        return 'YES'\n    return 'NO'\n    \nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert intersection((1, 2), (2, 3)) == \"YES\", \"First\"\n    assert intersection((1, 2), (2, 2)) == \"NO\", \"Second\"\n    assert intersection((1, 3), (2, 4)) == \"NO\", \"Third\"\n    assert intersection((1, 5), (2, 3)) == \"NO\", \"Fourth\"\n    print('Almost done! The only thing left to do is to Check it!')",
        "num_ids": 182
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n    return \"YES\" if set(range(start1, end1+1)).intersection(set(range(start2, end2+1))) else \"NO\"\n",
        "num_ids": 59
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Time: O(n), n is the len of the intervals\n    # Space: O(1)\n    # The idea is to find the first common number of the two intervals and\n    # then check whether it is a prime number.\n",
        "num_ids": 55
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert isinstance(interval1, tuple) and isinstance(interval2, tuple)\n    assert interval1[0] <= interval1[1] and interval2[0] <= interval2[1]\n    assert isinstance(interval1[0], int) and isinstance(interval1[1], int)\n    assert isinstance(interval2[0], int) and isinstance(interval2[1], int)\n    intersection = list(range(interval1[0], interval1[1] + 1))\n    intersection.extend(range(interval2[0], interval2[1] + 1))\n    if len(set(intersection)) == len(intersection):\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 176
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # find the intervals intersection\n    # check if intersection len is prime number\n    # return YES or NO\n    pass\n",
        "num_ids": 28
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # complete this function\n    x = interval1[0]\n    y = interval1[1]\n    a = interval2[0]\n    b = interval2[1]\n    if x < a and a < y and y < b:\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 70
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert interval1!= [] and interval2!= []\n    (interval1_start, interval1_end) = interval1\n    (interval2_start, interval2_end) = interval2\n    intersection_start = max(interval1_start, interval2_start)\n    intersection_end = min(interval1_end, interval2_end)\n    if (intersection_start <= intersection_end):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 118
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # the intervals don't intersect\n    if not (interval1[0] <= interval2[0] <= interval1[1]\n            and interval1[0] <= interval2[1] <= interval1[1]):\n        return \"NO\"\n    # the intervals intersect\n    intersection = set()\n    for i in range(interval1[0], interval1[1] + 1):\n        for j in range(interval2[0], interval2[1] + 1):\n            if i == j:\n                intersection.add(i)\n    print(intersection)\n    return \"YES\" if len(intersection) == 1 else \"NO\"\n",
        "num_ids": 155
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = 1\n    for e in arr:\n        if e == 0:\n            result *= 1\n        else:\n            result *= e/abs(e)\n",
        "num_ids": 41
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr:\n        return None\n    return sum(abs(num) * 1 if num == 0 else abs(num) * (-1 if num < 0 else 1) for num in arr)\n",
        "num_ids": 46
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not arr:\n        return None\n    return sum(abs(i) for i in arr) * prod(1 if j == -1 or j == 1 else 0 for j in arr)\n",
        "num_ids": 45
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # if len(arr) == 0:\n    #     return None\n    # else:\n    #     return sum([abs(i) for i in arr]) * prod_signs([i/abs(i) for i in arr if i < 0])\n    return sum([abs(i) for i in arr]) * \\\n        sum([i//abs(i) for i in arr if i<0])\n",
        "num_ids": 95
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(abs(num) for num in arr) * prod(1 if num >= 0 else -1 for num in arr)\n",
        "num_ids": 31
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not arr:\n        return None\n    prod = 1\n    sum_mag = 0\n    for item in arr:\n        sum_mag += item\n        prod *= item if item > 0 else -item\n    return sum_mag * prod",
        "num_ids": 59
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum_of_magnitudes = 0\n    product_of_signs = 1\n    for num in arr:\n        if num!= 0:\n            sum_of_magnitudes += abs(num)\n            product_of_signs *= sign(num)\n    if sum_of_magnitudes == 0:\n        return None\n    return sum_of_magnitudes * product_of_signs\n",
        "num_ids": 99
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return None\n    else:\n        return sum(abs(i) for i in arr) * prod(sign(i) for i in arr)\n",
        "num_ids": 45
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return None if len(arr) == 0 else (abs(sum([abs(num) for num in arr])) * prod([-1 if num < 0 else 1 for num in arr]))",
        "num_ids": 44
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def minPathCore(grid, k, visited, curr, ans):\n        if k == 0:\n            return ans\n        visited[curr[0]][curr[1]] = True\n        curr_val = grid[curr[0]][curr[1]]\n        for next_val in getNeighbors(grid, curr, visited):\n            if next_val[0] == curr[0] or next_val[1] == curr[1]:\n                ans.append(curr_val)\n                return minPathCore(grid, k-1, visited, next_val, ans)\n        return minPathCore(grid, k, visited, next_val, ans)\n",
        "num_ids": 165
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    N = len(grid)\n    # Since we have only three values (N), we can treat\n    # the grid as a binary tree, where each node\n    # represents a column and each leaf represents a row.\n    # We then apply dynamic programming to compute the\n    # total number of ways to get to the bottom-right of the tree\n    # in each step, and then extract the minimum of all these values.\n    \n    # Initialize the tree.\n    tree = [None] * N\n    for i in range(N):\n        tree[i] = [None] * (N + 1)\n    \n    # Populate the tree.\n    for row in range(N):\n        for col in range(N):\n            tree[row][col] = (grid[row][col], row, col)\n    \n    # For each column, compute the minimum number of ways\n    # to reach the bottom-right.\n    for col in range(N):\n        for row in range(N):\n            n = 0\n            while tree[n][col]:\n                n += 1\n            \n            # Compute the number of ways to reach the bottom-right.\n            r = N - 1 - row\n            c = N - 1 - col\n            num_ways = r + 1 if r < c else c + 1\n            tree[row][col] = (tree[n - 1][col][0] + num_ways, r, c)\n    \n    # Find the minimum number of ways to reach the bottom-right\n    # from the left-bottom corner.\n    # The answer is the minimum of the minimum number of ways to reach\n    # the bottom-right from the left-bottom corner and from the left-top\n    # corner.\n    min_row = min(k, N)\n    min_path = tree[min_row - 1][N - 1][0]\n    min_path += k - min_row\n    \n    # Extract the order of the values on the grid.\n    order = [tree[min_row - 1][N - 1][1], tree[min_row - 1][N - 1][2]]\n    while min_row > 1:\n        min_row //= 2\n        order.insert(0, tree[min_row - 1][N - 1][1])\n        order.insert(0, tree[min_row - 1][N - 1][2])\n    \n    return order",
        "num_ids": 555
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def find_paths_helper(grid, k, i, j, path, curr_len):\n        if curr_len == k:\n            return path\n",
        "num_ids": 41
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Time: O(N^2), Space: O(N^2)\n    # N = len(grid)\n    # if N == 1:\n    #     return grid[0]\n    # dp = [[[None for _ in range(k+1)] for _ in range(N)] for _ in range(N)]\n    # for i in range(N):\n    #     for j in range(N):\n    #         dp[i][j][1] = grid[i][j]\n    # for length in range(2, k+1):\n    #     for i in range(N):\n    #         for j in range(N):\n    #             if i - 1 >= 0:\n    #                 dp[i][j][length] = grid[i][j] + min(dp[i - 1][j][length - 1], dp[i - 1][j + 1][length - 1])\n    #             else:\n    #                 dp[i][j][length] = grid[i][j] + dp[i][j][length - 1]\n    #     for i in range(N):\n    #         for j in range(N):\n    #             if j - 1 >= 0:\n    #                 dp[i][j][length] = grid[i][j] + min(dp[i][j - 1][length - 1], dp[i + 1][j - 1][length - 1])\n    #             else:\n    #                 dp[i][j][length] = grid[i][j] + dp[i][j][length - 1]\n    # res = [k for k in range(1, k+1)]\n    # for i in range(N):\n    #     for j in range(N):\n    #         for length in range(k, 0, -1):\n    #             if dp[i][j][length] < dp[i][j][res[length - 1]]:\n    #                 res[length - 1] = length\n    # return [grid[i][j] for i in range(N) for j in range(N) if res[length - 1] == length]\n    \n    # Time: O(N^2)\n    # Space: O(N^2)\n    # if len(grid) == 1:\n    #     return grid[0]\n    # dp = [[None for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    # for i in range(len(grid)):\n    #     dp[i][0] = grid[i][0]\n    # for j in range(len(grid[0])):\n    #     dp[0][j] = grid[0][j]\n    # for i in range(1, len(grid)):\n    #     for j in range(1, len(grid[0])):\n    #         dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1])\n    # return [grid[i][j] for i in range(len(grid)) for j in range(len(grid[0])) if dp[i][j] == dp[i][j-1]]\n    \n    # Time: O(N^2)\n    # Space: O(N^2)\n    # if len(grid) == 1:\n    #     return grid[0]\n    # dp = [[None for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    # for i in range(len(grid)):\n    #     dp[i][0] = grid[i][0]\n    # for j in range(len(grid[0])):\n    #     dp[0][j] = grid[0][j]\n    # for i in range(1, len(grid)):\n    #     for j in range(1, len(grid[0])):\n    #         dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1])\n    # return [grid[i][j] for i in range(len(grid)) for j in range(len(grid[0])",
        "num_ids": 995
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if k < 1:\n        return []\n    n = len(grid)\n    if n < 2:\n        return []\n",
        "num_ids": 31
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def dfs(row, col, visited, path):\n        # if we have visited all cells in the grid, return the min path\n        if len(visited) == N * N:\n            return path\n",
        "num_ids": 49
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # M = n * n\n    # M = N^2\n    # k is bounded by N^2\n    # k * log(k) = N^2\n    # Time = O(N^2)\n    # Space = O(N^2)\n    if len(grid) == 0:\n        return []\n    if len(grid[0]) == 0:\n        return []\n    m, n = len(grid), len(grid[0])\n    visited = set()\n    q = [((0, 0), 0)]\n    while len(q):\n        node, distance = q.pop(0)\n        if node[0] == m - 1 and node[1] == n - 1:\n            return distance\n        visited.add(node)\n        for i in range(1, m):\n            ni = i + node[0]\n            if (ni, node[1]) not in visited:\n                q.append(((i, node[1]), distance + 1))\n        for i in range(1, n):\n            ni = node[0] + i\n            if (node[0], i) not in visited:\n                q.append(((node[0], i), distance + 1))\n    return []\n",
        "num_ids": 288
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # init\n    def init_grid(grid):\n        new_grid = []\n        for g in grid:\n            new_grid.append([0] + g + [0])\n        return new_grid\n",
        "num_ids": 50
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = [1, 3]\n    i = 2\n    while i < n:\n        result.append(1 + (result[i - 1] + result[i - 2] + result[i - 2]) // 2)\n        i += 1\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return [0]\n    if n == 1:\n        return [1, 3]\n    else:\n        return [1, 3] + [x + y for x, y in zip(tri(n-1), tri(n-2))]\n    \n    \ndef trib(n):\n    \"\"\"The Tribonacci sequence is a sequence of numbers that form a geometric \n    progression. It is defined by the recurrence:\n    trib(n) = trib(n-1) + trib(n-2) + trib(n-3)\n    Given an integer n \u2265 3, returns the n-th number of the sequence.\n    Examples:\n    trib(1) = 1\n    trib(2) = 2\n    trib(3) = 4\n    trib(4) = 7\n    trib(5) = 13\n    trib(6) = 24\n    \"\"\"\n    return sum(tri(i) for i in range(1, n+1))\n    \n    \n    \ndef is_prime(n):\n    \"\"\"Returns True if n is prime, False otherwise.\n    Examples:\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(102)\n    False\n    >>> is_prime(-1)\n    Traceback (most recent call last):\n    ...\n    ValueError\n    \"\"\"\n    if n < 2:\n        raise ValueError\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n**0.5 + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef primes_to(n):\n    \"\"\"Returns a list of primes in range(2, n+1)\n    Examples:\n    >>> primes_to(2)\n    [2]\n    >>> primes_to(4)\n    [2, 3]\n    >>> primes_to(5)\n    [2, 3, 5]\n    >>> primes_to(7)\n    [2, 3, 5, 7]\n    >>> primes_to(8)\n    [2, 3, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    l = []\n    l.append(2)\n    for i in range(3, n+1, 2):\n        if is_prime(i):\n            l.append(i)\n    return l\n    \n    \ndef primes(n):\n    \"\"\"Returns a list of primes <= n\n    Examples:\n    >>> primes(4)\n    [2, 3]\n    >>> primes(6)\n    [2, 3, 5]\n    >>> primes(9)\n    [2, 3, 5, 7]\n    >>> primes(10)\n    [2, 3, 5, 7]\n    >>> primes(11)\n    [2, 3, 5, 7, 11]\n    >>> primes(100)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \"\"\"\n    l = primes_to(n)\n    return l[l.index(n)+1:]\n    \n    \ndef prime_factors(n):\n    \"\"\"Returns the prime factorization of n\n    Examples:\n    >>> prime_factors(12)\n    [2, 2, 3]\n    >>> prime_factors(24)\n    [2, 2, 2, 2]\n    >>> prime_factors(100)\n    [2, 2, 5, 5]\n    >>> prime_factors(97)\n    [97]\n    \"\"\"\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n = n / 2\n    if n < 2:\n        return l\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            l.append(i)\n            n = n / i\n        else:\n            i += 2\n    l.append(n)\n    return l\n    \n    \ndef kapr",
        "num_ids": 1025
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [1, 3, 2, 8] if n < 3 else [1, 3, 2, 8] + [sum(i) for i in zip([1, 3, 2], [i for i in range(3, n + 1)] + [0, 0])]",
        "num_ids": 63
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    ret = [1, 3]\n    if n == 1: return [1]\n    if n == 2: return [1, 3]\n    while len(ret) < n + 1:\n        if len(ret) % 2 == 0:\n            ret.append(ret[-1] + ret[-2])\n        else:\n            ret.append(ret[-1] + ret[-2] + ret[-3])\n    return re",
        "num_ids": 105
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def trib(n):\n        \"\"\"Tribonacci sequence. \"\"\"\n        if n == 0 or n == 1:\n            return [0]\n        elif n == 2:\n            return [0, 1]\n        else:\n            return trib(n - 1) + trib(n - 2) + trib(n - 3)\n    return trib(n)\n",
        "num_ids": 85
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return list(range(1, n + 1)) if n > 1 else [3]\n",
        "num_ids": 22
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def trib(n):\n        if n == 0 or n == 1:\n            return [0]\n        elif n == 2:\n            return [1, 1]\n        elif n == 3:\n            return [1, 3, 2]\n        elif n >= 4:\n            trib_list = [0, 1, 1, 2]\n            while n > 4:\n                trib_list.append(sum(trib_list[-3:]))\n                n -= 1\n            return trib_list\n    return trib(n)\n",
        "num_ids": 128
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    tribonacci_numbers = [1, 3]\n",
        "num_ids": 16
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # This could also be done with a for loop\n    # and just an if/else chain.\n    # The following shows a recursive loop.\n    # This loop must be called n times.\n    # Each time it needs to calculate and add the next number to the sequence.\n    # The values of the first three numbers of the sequence are already defined,\n    # so we can just add them to the sequence:\n    # f_1, f_2, f_3 = 1, 1, 1\n    # tri(3) = [f_1, f_2, f_3]\n    # tri(4) = [f_1, f_2, f_3, f_4]\n    # tri(5) = [f_1, f_2, f_3, f_4, f_5]\n    # tri(6) = [f_1, f_2, f_3, f_4, f_5, f_6]\n    # tri(7) = [f_1, f_2, f_3, f_4, f_5, f_6, f_7]\n    # tri(8) = [f_1, f_2, f_3, f_4, f_5, f_6, f_7, f_8]\n    # The first three numbers of the sequence are already defined, so we can just \n    # add them to the sequence.\n    # Here are the steps to calculate the nth number:\n    # 1. The value of n is going to be n.\n    # 2. If n is even, tri(n) is going to be (1 + n / 2)\n    # 3. If n is odd, tri(n) is going to be (tri(n - 1) + tri(n - 2) + tri(n + 1))\n    # 4. The new number n + 1 is going to be tri(n)\n    # 5. Repeat steps 2 and 3 until the final result is calculated.\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 1, 1]\n    elif n == 3:\n        return [1, 1, 1, 1]\n    else:\n        return [1, 1, 1, 1] + [sum(tri(n - 1)[i:] + tri(n - 2)[i:] + tri(n + 1)[:i + 1]) for i in range(n - 3)]\n",
        "num_ids": 581
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        a = [3, 1, 3]\n        b = [1, 3, 2]\n        while len(a) <= n:\n            a.append(b[-1] + b[-2] + b[-3])\n            b.append(a[-1] + b[-1] + b[-2])\n        return a + b[n:",
        "num_ids": 134
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Initialise a variable to store the product\n    product = 1\n    # Iterate over the digits\n    for digit in str(n):\n        # Extract the digit from the string\n        digit = int(digit)\n        # If the digit is odd\n        if digit % 2:\n            # Multiply it by the product\n            product *= digit\n    return product",
        "num_ids": 85
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    digits_list = []\n    for i in range(len(str(n))):\n        if int(str(n)[i])%2 == 0:\n            digits_list.append(0)\n        else:\n            digits_list.append(int(str(n)[i]))\n    return(np.prod(digits_list))\n",
        "num_ids": 86
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    p = 1\n    for d in str(n):\n        d = int(d)\n        if d % 2 == 0:\n            return 0\n        p *= d\n    return p\n",
        "num_ids": 46
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    prod = 1\n    for x in str(n):\n        if int(x) % 2 == 0:\n            return 0\n        else:\n            prod = prod * int(x)\n    return prod\n",
        "num_ids": 51
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return n%10\n",
        "num_ids": 7
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # iterate through each character in the string\n    product = 1\n    for i in str(n):\n        # if digit is odd, multiply by it\n        if int(i) % 2!= 0:\n            product *= int(i)\n    return product\n",
        "num_ids": 63
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #n = int(input('enter a number'))\n    digits = 1\n    while n > 0:\n        if n % 2 == 0:\n            n //= 10\n        else:\n            digits *= n % 10\n            n //= 10\n    return digits\n",
        "num_ids": 66
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    n = abs(n)\n    mult = 1\n    for i in str(n):\n        if int(i)%2==0:\n            return 0\n        else:\n            mult *= int(i)\n    return mult\n",
        "num_ids": 56
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n%2 == 0:\n        return 0\n    else:\n        return n%10\n",
        "num_ids": 36
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    total = 1\n    for i in range(1,n+1):\n        if (i % 2 == 1):\n            total = total*i\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return string.find('[')!= -1\n",
        "num_ids": 14
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return False\n",
        "num_ids": 7
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # string = input()\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 68
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    if len(string)==0:\n        return False\n    if string[0]!='[':\n        return False\n    \n    stack=[]\n    \n    for i in range(len(string)):\n        if string[i]=='[':\n            stack.append(string[i])\n        elif string[i]==']':\n            if len(stack)==0:\n                return False\n            else:\n                stack.pop()\n                \n    if len(stack)!=0:\n        return False\n    else:\n        return True\n    \n    \nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]') )\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[][]') )\nprint(is_nested('[]') )\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][[') )\nprint(is_nested('[[[[]]]]]'))\nprint(is_nested('[[]][[]]]') ",
        "num_ids": 284
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    #Get the index of the first closing bracket\n    closing = [i for i, x in enumerate(string) if x == ']']\n    #Check if the string is an empty string\n    if closing == []:\n        return False\n    else:\n        #Loop through the closing index\n        for i in closing:\n            #Check for nested brackets inside the bracket\n            if is_nested(string[i+1:]):\n                #Return True if a nested bracket is found\n                return True\n        #Return False if no nested brackets are found\n        return False\n",
        "num_ids": 131
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    stack = []\n    for item in string:\n        if item == '[' and len(stack) == 0:\n            stack.append('[')\n        elif item == '[' and len(stack)!= 0:\n            stack.append('[')\n        elif item == ']' and len(stack) == 1:\n            stack.pop()\n        elif item == ']' and len(stack)!= 1:\n            stack.append(']')\n    return len(stack) == 0\n",
        "num_ids": 115
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = string\n    \n    bracket_open = '['\n    bracket_close = ']'\n    \n    match_open = '{'\n    match_close = '}'\n    \n    open_bracket_count = 0\n    open_match_count = 0\n    \n    open_bracket_indexes = []\n    \n    for i, char in enumerate(s):\n        if char == bracket_open:\n            open_bracket_count += 1\n            open_bracket_indexes.append(i)\n        elif char == bracket_close:\n            open_bracket_count -= 1\n        elif char == match_open:\n            open_match_count += 1\n        elif char == match_close:\n            open_match_count -= 1\n        if open_bracket_count < 0:\n            return False\n        if open_match_count < 0:\n            return False\n        if open_bracket_count == 0 and open_match_count == 0:\n            for i in range(len(open_bracket_indexes)):\n                if open_bracket_indexes[i] < open_bracket_indexes[i + 1]:\n                    return False\n    return True\n",
        "num_ids": 288
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for i in string:\n        if i == '[':\n            count += 1\n        if i == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "num_ids": 55
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # Evaluate whether brackets are nested in any way\n    # if len(string) % 2 == 0: # even number of brackets\n    #     bracket_counter = 0\n    #     for char in string:\n    #         if char == '[':\n    #             bracket_counter += 1\n    #         if char == ']':\n    #             bracket_counter -= 1\n    #     if bracket_counter == 0:\n    #         return True\n    # else: # odd number of brackets\n    #     bracket_counter = 0\n    #     for char in string:\n    #         if char == '[':\n    #             bracket_counter += 1\n    #         if char == ']':\n    #             bracket_counter -= 1\n    #     if bracket_counter == 1:\n    #         return True\n",
        "num_ids": 193
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum([i**2 for i in lst])\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = sum([i**2 for i in lst])\n    return s\n",
        "num_ids": 20
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    import math\n    lst=list(map(round,lst))\n    lst=list(map(math.ceil,lst))\n    lst=list(map(lambda x:x*x,lst))\n    return(sum(lst))\n",
        "num_ids": 64
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(round(i ** 2) for i in lst)\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([round(i*i) for i in lst])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum_squared = 0\n    for item in lst:\n        sum_squared += int(item)**2\n    return round(sum_squared)\n",
        "num_ids": 40
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum([i**2 for i in lst])\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst = [abs(i) for i in lst]\n    lst = [round(i) for i in lst]\n    return round(sum([i**2 for i in lst]))\n",
        "num_ids": 50
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    lst = [round(x) for x in lst]\n    return sum([x ** 2 for x in lst])\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return txt[-1].isalpha()\n",
        "num_ids": 13
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    x = False\n    if txt == \"\":\n        x = False\n    else:\n        if len(txt.split(' ')) == 0:\n            x = False\n        else:\n            for i in txt.split(' '):\n                if i[-1].isalpha():\n                    x = True\n                else:\n                    x = False\n    return x\n",
        "num_ids": 87
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    txt = txt[:-1]\n    if txt.isalpha():\n        return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return txt[-1].isalpha()\n",
        "num_ids": 13
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if txt == \"\":\n        return False\n    return (txt[-1].isalpha() and txt[-1] not in \" \")\n    pass\n",
        "num_ids": 40
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if txt == \"\":\n        return False\n    else:\n        return txt[-1].isalpha()\n",
        "num_ids": 29
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Check if txt is not empty\n    if txt == \"\":\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return all([i in \"abcdefghijklmnopqrstuvwxyz\" for i in txt.split()[-1]])\n",
        "num_ids": 39
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(txt) == 0:\n        return False\n    return txt[-1].isalpha()\n",
        "num_ids": 27
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    word = txt.split(\" \")\n    if word[-1][-1].isalpha():\n        return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    max_pos = -1\n    prev_pos = -1\n    for pos, val in enumerate(arr):\n        if val < prev_pos:\n            max_pos = pos if pos > max_pos else max_pos\n            break\n        prev_pos = val\n    return max_pos\n",
        "num_ids": 71
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(1,len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n = len(arr)\n    if n <= 1: return -1\n    last, i = 0, 0\n    while i < n:\n        if arr[i] > last:\n            last = arr[i]\n        elif arr[i] <= last:\n            return i - 1\n        i += 1\n    return -1\n",
        "num_ids": 80
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(arr) < 2:\n        return -1\n",
        "num_ids": 16
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # set a high value as default\n    highest_index = -1\n    # loop over all values in the list\n    for i in range(len(arr)):\n        # check if the current element is greater than the previous element\n        if arr[i] > arr[i-1]:\n            # update the highest index to be the current index\n            highest_index = i\n    # return the highest index of an element\n    return highest_index\n",
        "num_ids": 103
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    next_greater = arr[0]\n    for i in range(1, len(arr)):\n        next_greater = max(next_greater, arr[i])\n        if arr[i] <= next_greater:\n            return i\n    return -1",
        "num_ids": 65
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    prev = arr[0]\n    for i in arr[1:]:\n        if i < prev:\n            return arr.index(prev)\n        prev = i\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            return i\n    return -1",
        "num_ids": 36
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # For each index in the array\n    # Check if the element in the index is less than or equal to the element\n    # at the next index, if so return the index of the element.\n    # Otherwise return -1\n    for i in range(len(arr)):\n        if arr[i] <= arr[i + 1]:\n            return i\n    return -1\n",
        "num_ids": 87
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(arr) < 2:\n        return -1\n",
        "num_ids": 16
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # lst = list(filter(lambda x: x > 0, lst))\n    # if not lst:\n    #     return None, None\n    # return max(lst), min(lst)\n",
        "num_ids": 51
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    max_negative = 0\n    min_positive = 0\n    for i in lst:\n        if i < 0:\n            if i > max_negative:\n                max_negative = i\n        elif i > 0:\n            if i < min_positive:\n                min_positive = i\n    if max_negative == 0 and min_positive == 0:\n        return (None, None)\n    elif max_negative!= 0 and min_positive!= 0:\n        return (max_negative, min_positive)\n    elif max_negative == 0:\n        return (None, min_positive)\n    else:\n        return (max_negative, None)",
        "num_ids": 156
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    max_neg = None\n    min_pos = None\n",
        "num_ids": 15
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if lst == []:\n        return None, None\n    if lst == [0]:\n        return None, None\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    if len(negatives) == 0:\n        return None, min(positives)\n    if len(positives) == 0:\n        return max(negatives), None\n    return max(negatives), min(positives)\n",
        "num_ids": 118
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    negative_lst = []\n    positive_lst = []\n    negative_lst = [n for n in lst if n < 0]\n    positive_lst = [p for p in lst if p > 0]\n    if not negative_lst:\n        return (None, None)\n    if not positive_lst:\n        return (None, None)\n    return (max(negative_lst), min(positive_lst))\n",
        "num_ids": 107
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst) > 0:\n        positive_ints = [i for i in lst if i > 0]\n        negative_ints = [i for i in lst if i < 0]\n        if positive_ints:\n            return (max(negative_ints), min(positive_ints))\n        elif negative_ints:\n            return (max(negative_ints), None)\n        else:\n            return (None, None)\n    else:\n        return (None, None)",
        "num_ids": 114
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    positive_ints = [x for x in lst if x > 0]\n    negative_ints = [x for x in lst if x < 0]\n    if positive_ints:\n        return (None, min(positive_ints))\n    if negative_ints:\n        return (max(negative_ints), None)\n    return (None, None)\n",
        "num_ids": 83
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (None, None) if not lst else (max(i for i in lst if i < 0), min(i for i in lst if i > 0))\n",
        "num_ids": 41
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    l = lst[:]\n    positive_numbers = []\n    negative_numbers = []\n    \n    for i in l:\n        if i < 0:\n            negative_numbers.append(i)\n        elif i > 0:\n            positive_numbers.append(i)\n    \n    if positive_numbers:\n        biggest = max(positive_numbers)\n    \n    if negative_numbers:\n        smallest = min(negative_numbers)\n        \n    if positive_numbers and negative_numbers:\n        biggest, smallest = max(positive_numbers), min(negative_numbers)\n    elif positive_numbers and not negative_numbers:\n        biggest, smallest = max(positive_numbers), None\n    elif negative_numbers and not positive_numbers:\n        biggest, smallest = None, min(negative_numbers)\n    \n    return (biggest, smallest)\n",
        "num_ids": 225
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if type(a)!= type(b):\n        return None\n    if type(a) == str:\n        return compare_one(float(a.replace(',','.')), float(b.replace(',','.')))\n    return max(a, b)\n",
        "num_ids": 63
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a > b:\n        return a\n    elif b > a:\n        return b\n    elif a == b:\n        return None\n",
        "num_ids": 36
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if type(a) == type(b):\n        if a < b:\n            return b\n        elif a > b:\n            return a\n        else:\n            return None\n    else:\n        if type(a) == str:\n            a = a.replace(\",\", \".\")\n        if type(b) == str:\n            b = b.replace(\",\", \".\")\n        if type(a) == float or type(b) == float:\n            a = float(a)\n            b = float(b)\n            if a < b:\n                return b\n            elif a > b:\n                return a\n            else:\n                return None\n        else:\n            return None\n",
        "num_ids": 164
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        return b\n    elif isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if a > b:\n            return a\n        return b\n    else:\n        return None\n",
        "num_ids": 110
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return None if a == b else max(a, b)\n",
        "num_ids": 16
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if isinstance(a, int) or isinstance(a, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(b, int) or isinstance(b, float):\n        if b > a:\n            return b\n        elif b < a:\n            return a\n        else:\n            return None\n    elif isinstance(a, str) or isinstance(a, float):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        elif a < b:\n            return b\n    elif isinstance(b, str) or isinstance(b, float):\n        if b == a:\n            return None\n        elif b > a:\n            return b\n        elif b < a:\n            return a\n    else:\n        return None\n",
        "num_ids": 216
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n    elif isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        elif a < b:\n            return b\n    else:\n        return None\n",
        "num_ids": 146
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # From the example\n    num = n\n    even_nums = []\n    for i in range(n):\n        if is_even(i):\n            even_nums.append(i)\n    if num == sum(even_nums):\n        return True\n    return False\n",
        "num_ids": 69
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    even_numbers = [x for x in range(0, n) if x % 2 == 0]\n    if n <= 4:\n        return False\n    elif n == sum(even_numbers):\n        return True\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return n % 2 == 0 and sum_even(n) == n\n",
        "num_ids": 18
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    import math\n    m = math.ceil(n / 4)\n    sum = 0\n    for i in range(m):\n        if is_even(i):\n            sum += i\n    return sum == n\n",
        "num_ids": 52
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum += i\n    return sum == n\n",
        "num_ids": 37
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return any([n == 2 * (2 * i + 2) for i in range(4)])\n",
        "num_ids": 25
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Counter for the sum of all even numbers.\n    sum_even = 0\n",
        "num_ids": 20
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    evens = get_evens(n)\n    return len(evens) == 4 and sum(evens) == n\n",
        "num_ids": 31
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numbers = [2 * i for i in range(1, 11)]\n    print(numbers)\n    sum = 0\n    for number in numbers:\n        sum += number\n    if sum == n:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 66
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n % 2!= 0:\n        return False\n    n = n // 2\n    for x in range(2, n):\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    factorial = n\n    for i in range(n - 1, 1, -1):\n        factorial *= i\n    return factorial\n",
        "num_ids": 35
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial = factorial * i\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # TO DO\n    pass\n",
        "num_ids": 9
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # your code here\n    factorial = n\n    for i in range(1, n):\n        factorial *= i\n    return factorial\n",
        "num_ids": 36
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 1\n    for i in range(1, n+1):\n        count *= i\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # special_factorial = n * (n - 1) * (n - 2) *... * 1\n    # special_factorial = n!\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1)!\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n - 1) * (n - 2) *... * 1\n    # n! = n * (n ",
        "num_ids": 1025
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return reduce(lambda x, y: x * y, [i for i in range(1, n+1)])\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"_\").replace(\"  \", \"-\")\n",
        "num_ids": 23
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    text = text.replace(\" \", \"_\")\n    for i in range(len(text) - 1):\n        if text[i] == \" \" and text[i + 1] == \" \":\n            text = text[:i] + \"_\" + text[i + 1:]\n    return text\n",
        "num_ids": 70
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return re.sub(\" +\", \" - \", text",
        "num_ids": 13
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if text.find(' ') < 0:\n        return text\n    elif text.count(' ') < 3:\n        return text\n    else:\n        return ''.join(('_' if i =='' else i for i in text))\n",
        "num_ids": 59
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    output_str = \"\"\n    for char in text:\n        if char == \" \":\n            char = \"_\"\n        output_str += char\n    \n    fixed_text = \"\"\n    consecutive_spaces = False\n    for char in output_str:\n        if char == \"_\":\n            if consecutive_spaces:\n                fixed_text += \"-\"\n            consecutive_spaces = True\n        elif consecutive_spaces:\n            fixed_text += char\n            consecutive_spaces = False\n        else:\n            fixed_text += char\n    \n    return fixed_text",
        "num_ids": 141
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # first pass\n    text = text.replace(\" \", \"_\")\n",
        "num_ids": 17
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return text.replace(' ', '_')\n",
        "num_ids": 12
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return re.sub('[ ]+', '_', text)\n",
        "num_ids": 19
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    replacement = '_'\n    while replacement in text:\n        replacement += '-'\n",
        "num_ids": 25
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    \n    while text.find(\"  \")!= -1:\n        text = text.replace(\"  \", \"-\")\n    \n    return text\n    \n    \ndef fix_character(char):\n    \"\"\"\n    Given a character char, replace all occurrences of it with underscore, \n    and if a string has more than 2 consecutive occurrences, \n    then replace all consecutive occurrences with - \n    \n    fix_character(\"E\") == \"E\"\n    fix_character(\"E \") == \"_E_\"\n    fix_character(\" E \") == \"_E_\"\n    fix_character(\" E \") == \"_E_\"\n    \"\"\"\n    \n    char = char.replace(\" \", \"_\")\n    char = char.replace(\"  \", \"_\")\n    \n    while char.find(\"  \")!= -1:\n        char = char.replace(\"  \", \"-\")\n    \n    return char\n    \n    \ndef is_lower(char):\n    \"\"\"\n    Given a character, check whether it is lowercase or not.\n    \n    is_lower(\"A\") == False\n    is_lower(\"a\") == True\n    is_lower(\"Z\") == False\n    is_lower(\"z\") == True\n    \"\"\"\n    \n    return char.islower()\n    \n    \ndef is_upper(char):\n    \"\"\"\n    Given a character, check whether it is uppercase or not.\n    \n    is_upper(\"A\") == True\n    is_upper(\"a\") == False\n    is_upper(\"Z\") == True\n    is_upper(\"z\") == False\n    \"\"\"\n    \n    return char.isupper()\n    \n    \ndef lower(text):\n    \"\"\"\n    Given a string text, replace each character in text with the character \n    itself, and replace all uppercase letters with their lowercase equivalents. \n    \n    lower(\"Code\") == \"code\"\n    lower(\"CODE\") == \"code\"\n    lower(\"CODE \") == \"code \"\n    lower(\"CODE_WORD\") == \"code_word\"\n    \"\"\"\n    \n    text = text.lower()\n    text = text.replace(\" \", \"\")\n    \n    return text\n    \n    \ndef upper(text):\n    \"\"\"\n    Given a string text, replace each character in text with the character \n    itself, and replace all lowercase letters with their uppercase equivalents. \n    \n    upper(\"code\") == \"CODE\"\n    upper(\"code \") == \"CODE \"\n    upper(\"code_word\") == \"CODE_WORD\"\n    \"\"\"\n    \n    text = text.upper()\n    text = text.replace(\" \", \"\")\n    \n    return text\n    \n    \ndef capitalize(text):\n    \"\"\"\n    Given a string text, replace the first letter of each word with its uppercase equivalent, \n    and remove all other characters except the first character of each word. \n    \n    capitalize(\"a word\") == \"A Word\"\n    capitalize(\"a word \") == \"A Word \"\n    capitalize(\"a word \") == \"A Word \"\n    capitalize(\"a word \") == \"A Word \"\n    \"\"\"\n    \n    text = text.title()\n    text = text.replace(\" \", \"\")\n    \n    return text\n    \n    \ndef is_title(text):\n    \"\"\"\n    Given a string text, check whether it is a title or not. \n    \n    is_title(\"A\") == True\n    is_title(\"3A\") == False\n    is_title(\"3A \") == False\n    is_title(\"3A \") == False\n    is_title(\"A B\") == False\n    is_title(\"A B \") == False\n    is_title(\"A B \") == False\n    \"\"\"\n    \n    return text.istitle()\n    \n    \ndef to_title(text):\n    \"\"\"\n    Given a string text, convert it to a title. \n    \n    to_title(\"A\") == \"A\"\n    to_title(\"3A\") == \"3A\"\n    to_title(\"3A \") == \"3A\"\n    to_title(\"3A \") == \"3A\"\n    to_title(\"A B\") == \"A B\"\n    to_title(\"A ",
        "num_ids": 1025
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # read_words = read_words_from_file(file_name)\n    # if is_valid(read_words, file_name):\n    #     print(file_name)\n    # else:\n    #     print(file_name + \" is invalid\")\n",
        "num_ids": 65
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO: complete this function\n    return 'No'\n",
        "num_ids": 16
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not file_name.isalnum():\n        return \"No\"\n    \n    if file_name.count('.') > 1:\n        return \"No\"\n    \n    # Split the string by dot\n    # Get the substring before the dot, and the substring after the dot\n    file_name_split_by_dot = file_name.split('.')\n    \n    # Check the condition of the substring before the dot\n    if len(file_name_split_by_dot[0]) > 3:\n        return \"No\"\n    \n    # Check the condition of the substring after the dot\n    if file_name_split_by_dot[1] not in ('txt', 'exe', 'dll'):\n        return \"No\"\n    \n    return \"Yes\"\n    \n",
        "num_ids": 187
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # import re\n    # pattern = r'\\d{0,3}\\.\\w+\\.[\\w\\W]{1,3}'\n    # match = re.match(pattern, file_name)\n    # if match:\n    #     return 'Yes'\n    # else:\n    #     return 'No'\n",
        "num_ids": 79
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(file_name) > 3 and file_name.count(\".\") == 1 and file_name[0] not in string.ascii_lowercase:\n        if file_name.split('.')[-1] in ['txt', 'exe', 'dll']:\n            return \"Yes\"\n    return \"No\"\n",
        "num_ids": 77
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #Creating a dictionary with the string characters as keys and their\n    #corresponding alphapet value as value.\n    s={'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26, 'A':27, 'B':28, 'C':29, 'D':30, 'E':31, 'F':32, 'G':33, 'H':34, 'I':35, 'J':36, 'K':37, 'L':38, 'M':39, 'N':40, 'O':41, 'P':42, 'Q':43, 'R':44, 'S':45, 'T':46, 'U':47, 'V':48, 'W':49, 'X':50, 'Y':51, 'Z':52}\n    #Creating a string from the file's name, by adding the string values of the dictionary key values\n    #with the same index value in the file's name.\n    s1=''\n    for i in range(len(file_name)):\n        if i == 0 or i == 1:\n            s1+=str(s[file_name[i]])\n        else:\n            s1+=file_name[i]\n",
        "num_ids": 389
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Note: for simplicity, you can assume that the dot ('.') is always followed by one of \n    # 'txt', 'exe', 'dll' after the string before the dot.\n    # Example:\n    # input: example.txt\n    # output: 'Yes'\n    # input: example.exe\n    # output: 'No' (should start with a latin alphapet letter)\n",
        "num_ids": 94
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if file_name.count(\".\") >= 2:\n        return \"No\"\n    else:\n        lst = file_name.split(\".\")\n        if len(lst)!= 2:\n            return \"No\"\n        if lst[0].isalpha() == False:\n            return \"No\"\n        if lst[1] not in [\"txt\", \"exe\", \"dll\"]:\n            return \"No\"\n        return \"Yes\"\n",
        "num_ids": 105
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if file_name.count('.') > 1:\n        return 'No'\n    elif file_name.count('.') < 1:\n        return 'No'\n    else:\n        dot_index = file_name.find('.')\n        file_name_split = file_name.split('.')\n        if len(file_name_split[0]) < 3:\n            return 'No'\n        elif dot_index < 3:\n            return 'No'\n        elif len(file_name_split[1]) > 3:\n            return 'No'\n        elif file_name_split[1] not in ['exe', 'txt', 'dll']:\n            return 'No'\n        else:\n            return 'Yes'\n",
        "num_ids": 177
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # check that there are no more than 3 digits in the file name\n    if len(re.findall(r\"\\d+\", file_name)) > 3:\n        return \"No\"\n    \n    # check if there is exactly one '.' and check if before and after substring are not empty\n    # and start with a latin alphapet letter\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    \n    if len(re.findall(r\"^[a-zA-Z]\", file_name.split(\".\")[0])) == 0:\n        return \"No\"\n    \n    # check for the substring after the dot and return the corresponding result\n    if file_name.split(\".\")[1].lower() in ['txt', 'exe', 'dll']:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n",
        "num_ids": 210
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst_len = len(lst)\n    sum_sqaure = 0\n    for i in range(0, lst_len):\n        if (i % 3 == 0 or i % 4 == 0) and i!= 0:\n            if lst[i] < 0:\n                sum_sqaure -= lst[i]\n            else:\n                sum_sqaure += lst[i]\n    return sum_sqaure\n",
        "num_ids": 107
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            s = s + lst[i] ** 2\n    return s\n",
        "num_ids": 51
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    newlst = []\n    if len(lst) == 0:\n        return 0\n    else:\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                newlst.append(lst[i]**2)\n            elif i % 4 == 0 and i % 3!= 0:\n                newlst.append(lst[i]**3)\n            else:\n                newlst.append(lst[i])\n    return sum(newlst)\n",
        "num_ids": 124
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if lst == []:\n        return 0\n    else:\n        lst2 = [0] * len(lst)\n        for i in range(0, len(lst)):\n            if i % 3 == 0 or i % 4 == 0:\n                lst2[i] = lst[i] ** lst[i]\n        return sum(lst2)\n",
        "num_ids": 91
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        lst_1 = []\n        for i in range(len(lst)):\n            if i % 3 == 0 or i % 4 == 0:\n                lst_1.append(lst[i])\n        return sum(lst_1)\n",
        "num_ids": 80
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = 0\n    # Replace the line below with all your code. Remember to return the requested data.\n    # result = sum([i**2 for i in lst if i%3==0]) + sum([i**3 for i in lst if i%4==0 and i%3!=0])\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if lst:\n        lst_2 = [i**2 if i % 3 == 0 else i**3 if i % 4 == 0 else 0 for i in lst]\n        return sum(lst_2)\n    else:\n        return 0",
        "num_ids": 59
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        lst_new = []\n        for i in range(len(lst)):\n            if i % 3 == 0 or i % 4 == 0:\n                if i % 3 == 0:\n                    lst_new.append(lst[i] ** 2)\n                else:\n                    lst_new.append(lst[i] ** 3)\n            else:\n                lst_new.append(lst[i])\n    return sum(lst_new)\n",
        "num_ids": 131
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #  \n    new_lst = []\n    for index in range(len(lst)):\n        if index % 3 == 0 or index % 4 == 0:\n            new_lst.append(lst[index] ** 2)\n    return sum(new_lst)\n",
        "num_ids": 68
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    words = sentence.split(' ')\n    result = []\n    for word in words:\n        if len(word) > 1 and word.isalpha():\n            for i in range(2, len(word)):\n                if not (len(word) % i):\n                    break\n            else:\n                result.append(word)\n",
        "num_ids": 79
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    raise NotImplementedError()",
        "num_ids": 9
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Solution:\n    words = sentence.split(' ')\n    output = []\n    for word in words:\n        if is_prime_number(len(word)):\n            output.append(word)\n    return''.join(output)\n",
        "num_ids": 58
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return''.join(filter(is_prime, sentence.split()))",
        "num_ids": 17
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return''.join([word for word in sentence.split(' ') if len(word) == is_prime(int(word))])\n",
        "num_ids": 32
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return''.join([word for word in sentence.split() if is_prime(len(word))])\n",
        "num_ids": 25
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    returned = []\n    for word in sentence.split():\n        if is_prime(len(word)):\n            returned.append(word)\n    return''.join(returned)\n",
        "num_ids": 46
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # convert to a list\n    sentence_list = list(sentence)\n    # loop over the list\n    for i in range(len(sentence_list)):\n        # check if it's a letter\n        if sentence_list[i].isalpha():\n            # loop over the list again\n            for j in range(i + 1, len(sentence_list)):\n                # check if it's a letter\n                if sentence_list[j].isalpha():\n                    # get the length of the word\n                    word_length = len(sentence_list[i:j+1])\n                    # check if it's a prime number\n                    if is_prime(word_length):\n                        # replace the word\n                        sentence_list[i:j+1] = [sentence_list[i], sentence_list[j]]\n                        break\n    # convert the list back to a string\n    return ''.join(sentence_list)\n",
        "num_ids": 219
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    words = sentence.split(' ')\n    new_sentence = []\n    for word in words:\n        if isPrime(len(word)):\n            new_sentence.append(word)\n    return''.join(new_sentence)\n",
        "num_ids": 59
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return''.join([w for w in sentence.split(' ') if len(w) and not sum(map(lambda x: int(x) in (2, 3, 5, 7, 11), w))])",
        "num_ids": 49
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # make sure input is valid\n    if \"/\" in x and \"/\" in n:\n        # make sure denominators are equal\n        if n.split(\"/\")[1] == x.split(\"/\")[1]:\n            # make sure denominators are positive\n            if int(n.split(\"/\")[0]) > 0 and int(n.split(\"/\")[1]) > 0:\n                # make sure numerators are integers\n                if x.split(\"/\")[0].isdigit() and x.split(\"/\")[1].isdigit():\n                    # return true if n is a whole number\n                    if int(n.split(\"/\")[0]) % int(n.split(\"/\")[1]) == 0:\n                        return True\n    return False\n",
        "num_ids": 180
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    numerator_x = int(x.split('/')[0])\n    denominator_x = int(x.split('/')[1])\n    numerator_n = int(n.split('/')[0])\n    denominator_n = int(n.split('/')[1])\n",
        "num_ids": 77
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if '/' in x or '/' in n:\n        x_x, x_n = x.split('/')\n        n_x, n_n = n.split('/')\n        return (x_x * n_n == n_x * x_n) and (x_x % n_x == 0)\n    else:\n        return x * n == int(x) * int(n)\n",
        "num_ids": 98
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return int(x) == int(n)\n",
        "num_ids": 15
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # if n == \"0\":\n    #     return False\n    # x = x.split(\"/\")\n    # n = n.split(\"/\")\n    # if x[0] == n[0] and x[1] == n[1]:\n    #     return True\n    # elif x[0] == n[1] and x[1] == n[0]:\n    #     return True\n    # return False\n    return (x * n).is_integer()\n",
        "num_ids": 114
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    numer = x.split(\"/\")[0]\n    denom = x.split(\"/\")[1]\n    return (int(numer) % int(denom)) == 0\n",
        "num_ids": 46
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # numerator, denominator = (int(x) for x in x.split('/'))\n    # print(numerator, denominator)\n    # return numerator / denominator == int(n)\n",
        "num_ids": 51
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numerator = int(n.split('/')[0])\n    denominator = int(n.split('/')[1])\n    if x.split('/')[0] == '0' or x.split('/')[1] == '0':\n        return False\n    elif numerator % denominator == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 93
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return False",
        "num_ids": 4
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), x))\n",
        "num_ids": 28
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    nums.sort(key=sum_of_digits)\n",
        "num_ids": 17
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int, str(x))))",
        "num_ids": 23
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))\n",
        "num_ids": 57
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n",
        "num_ids": 28
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(nums, key=lambda n: sum(int(i) for i in str(n)))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n",
        "num_ids": 24
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # TODO: your code here\n    return sorted(nums, key=lambda num: (sum(int(i) for i in str(num)), -num.index))\n",
        "num_ids": 42
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    num = []\n    for i in nums:\n        if i > 10 and int(i) % 2!= 0:\n            num.append(i)\n    return len(num)\n    \nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n",
        "num_ids": 69
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and str(i)[0]!= str(i)[-1] and i % 2 == 1:\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(1 for num in nums if num > 10 and num%10%2 == 1 and num//10%2 == 1)\n",
        "num_ids": 33
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    greater = []\n    odd = []\n    for x in nums:\n        if x > 10:\n            greater.append(x)\n        first_digit = int(x/10)%10\n        last_digit = x%10\n        if first_digit%2 == 1 and last_digit%2 == 1:\n            odd.append(x)\n    return len(greater),len(odd)\n",
        "num_ids": 98
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and int(i) % 2 == 1 and int(i) // 10 % 2 == 1:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    odds = 0\n    for i in nums:\n        if i > 10 and int(str(i)[0])%2 == 1 and int(str(i)[-1])%2 == 1:\n            odds += 1\n    return odds\n",
        "num_ids": 59
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0:\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # initialize counter\n    count = 0\n    for num in nums:\n        # test for conditions\n        if (num > 10) and (str(num)[0] in '13579') and (str(num)[-1] in '13579'):\n            count += 1\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    counter = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2!= 0 and int(str(num)[-1]) % 2!= 0:\n            counter += 1\n    return counter\n",
        "num_ids": 59
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([n > 10 and (n % 10) % 2!= 0 for n in nums])\n",
        "num_ids": 26
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i = 1\n    j = 2\n    count = 0\n    a = [0]*n\n    while(i<n):\n        a[i] = i*i - i + 1\n        j = i + 1\n        while(j<n):\n            a[j] = i*i - i + j + 1\n            k = j + 1\n            while(k<n):\n                if((a[i]+a[j]+a[k])%3 == 0):\n                    count += 1\n                k += 1\n            j += 1\n        i += 1\n    return count\n",
        "num_ids": 138
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return n * (n-1) * (n-2) // 6\n",
        "num_ids": 19
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 3:\n        return 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if i < j < k and (a[i]+a[j]+a[k])%3 == 0:\n                    count += 1\n    return count\n",
        "num_ids": 120
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a = [i*i - i + 1 for i in range(n)]\n    return sum(1 for i in range(1,n) for j in range(i+1,n) if (a[i] + a[j]) % 3 == 0)\n",
        "num_ids": 62
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([i * i - i + 1 for i in range(1, n + 1) if i * i % 3 == 0])\n",
        "num_ids": 33
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum(1 for i in range(n) for j in range(n) for k in range(n) if i < j < k and (i + j + k) % 3 == 0)\n",
        "num_ids": 47
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if (planet1 in planet_list) and (planet2 in planet_list):\n        planet_list.remove(planet1)\n        planet_list.remove(planet2)\n        def is_between(p1, p2, planet):\n            p1_coords = orbit_dict[p1]\n            p2_coords = orbit_dict[p2]\n            planet_coords = orbit_dict[planet]\n            return p1_coords[0] < planet_coords[0] < p2_coords[0]\n        between = []\n        for planet in planet_list:\n            if is_between(planet1, planet2, planet):\n                between.append(planet)\n        between.sort(key = lambda x: orbit_dict[x][0])\n        return tuple(between)\n    else:\n        return ()\n        \ndef main():\n    assert bf(\"Mercury\", \"Uranus\") == (\"Venus\",)\n    assert bf(\"Earth\", \"Neptune\") == (\"Jupiter\", \"Saturn\")\n    assert bf(\"Earth\", \"Mercury\") == ()\n    assert bf(\"Jupiter\", \"Earth\") == (\"Saturn\", \"Venus\")\n    assert bf(\"Saturn\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Mercury\")\n    assert bf(\"Neptune\", \"Mars\") == (\"Jupiter\", \"Saturn\", \"Venus\")\n    assert bf(\"Venus\", \"Earth\") == ()\n    assert bf(\"Mars\", \"Venus\") == (\"Jupiter\", \"Saturn\")\n    assert bf(\"Saturn\", \"Venus\") == (\"Jupiter\", \"Earth\", \"Mars\", \"Mercury\")\n    assert bf(\"Jupiter\", \"Uranus\") == (\"Saturn\", \"Venus\", \"Earth\", \"Mars\")\n    assert bf(\"Mercury\", \"Earth\") == (\"Venus\")\n    assert bf(\"Mercury\", \"Neptune\") == (\"Venus\")\n    assert bf(\"Venus\", \"Mars\") == (\"Earth\", \"Jupiter\", \"Saturn\")\n    assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Venus\", \"Earth\", \"Mars\")\n    assert bf(\"Jupiter\", \"Mars\") == (\"Saturn\", \"Venus\")\n    assert bf(\"Jupiter\", \"Mercury\") == (\"Saturn\")\n    assert bf(\"Saturn\", \"Jupiter\") == (\"Venus\", \"Earth\", \"Mars\", \"Mercury\")\n    assert bf(\"Mercury\", \"Earth\") == (\"Venus\")\n    assert bf(\"Earth\", \"Uranus\") == (\"Venus\", \"Mars\")\n    assert bf(\"Earth\", \"Mercury\") == (\"Venus\")\n    assert bf(\"Mercury\", \"Neptune\") == (\"Venus\")\n    assert bf(\"Mercury\", \"Jupiter\") == (\"Venus\")\n    assert bf(\"Mercury\", \"Saturn\") == (\"Venus\")\n    assert bf(\"Venus\", \"Jupiter\") == (\"Earth\", \"Mars\")\n    assert bf(\"Venus\", \"Saturn\") == (\"Earth\", \"Mars\", \"Mercury\")\n    assert bf(\"Jupiter\", \"Mars\") == (\"Saturn\", \"Venus\")\n    assert bf(\"Saturn\", \"Jupiter\") == (\"Earth\", \"Mars\", \"Mercury\")\n    assert bf(\"Saturn\", \"Uranus\") == (\"Earth\", \"Jupiter\", \"Mars\")\n    assert bf(\"Venus\", \"Neptune\") == (\"Earth\", \"Jupiter\")\n    assert bf(\"Venus\", \"Mars\") == (\"Earth\",)\n    assert bf(\"Uranus\", \"Neptune\") == (\"Jupiter\", \"Saturn\")\n    assert bf(\"Uranus\", \"Mars\") == (\"Jupiter\", \"Saturn\")\n    assert bf(\"Jupiter\", \"Mercury\") == (\"Saturn\")\n    assert bf(\"Uranus\", \"Earth\") == (\"Jupiter\", \"Saturn\")\n    assert bf(\"Earth\", \"Neptune\") == (\"Jupiter\", \"Saturn\")\n    assert bf(\"Mercury\", \"Venus\") == (\"Venus\")\n    assert bf(\"Earth\", \"Mercury\") == (\"Venus\")\n    assert bf(\"Jupiter\", \"Mars\") == (\"Saturn\", \"Venus\")\n    assert bf(\"Venus\"",
        "num_ids": 1025
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    planet_list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planet_list and planet2 in planet_list:\n        planet_list.remove(planet1)\n        planet_list.remove(planet2)\n        for i in planet_list:\n            if planet1 in i or planet2 in i:\n                planet_list.remove(i)\n        for i in planet_list:\n            if planet1 in i or planet2 in i:\n                planet_list.remove(i)\n        return tuple(planet_list)\n    else:\n        return ()\n",
        "num_ids": 165
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    return tuple(planet for planet in planets if planet1 in planet or planet2 in planet)\n",
        "num_ids": 59
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # YOUR CODE HERE\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 =='mercury' or planet2 =='mercury':\n        return 'Venus'\n    elif planet1 =='venus' or planet2 =='venus':\n        return 'Earth'\n    elif planet1 == 'earth' or planet2 == 'earth':\n        return 'Mars'\n    elif planet1 =='mars' or planet2 =='mars':\n        return 'Jupiter'\n    elif planet1 == 'jupiter' or planet2 == 'jupiter':\n        return 'Saturn'\n    elif planet1 =='saturn' or planet2 =='saturn':\n        return 'Uranus'\n    elif planet1 == 'uranus' or planet2 == 'uranus':\n        return 'Neptune'\n    elif planet1 == 'neptune' or planet2 == 'neptune':\n        return 'Moon'\n    elif planet1 =='moon' or planet2 =='moon':\n        return 'Moon'\n    else:\n        return []\n",
        "num_ids": 266
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # your code goes here\n    return\n",
        "num_ids": 11
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    planet_to_index = {\"Mercury\":0, \"Venus\":1, \"Earth\":2, \"Mars\":3, \"Jupiter\":4, \"Saturn\":5, \"Uranus\":6, \"Neptune\":7}\n    def is_orbit(planet1, planet2):\n        for planet in range(8):\n            if planet1 == planets[planet] or planet2 == planets[planet]:\n                return True\n        return False\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    for planet in range(8):\n        if planet == planet_to_index[planet1]:\n            planet1_index = planet\n            planet1_name = planets[planet1_index]\n            planet1_orbit = [planets[planet1_index+1]]\n        elif planet == planet_to_index[planet2]:\n            planet2_index = planet\n            planet2_name = planets[planet2_index]\n            planet2_orbit = [planets[planet2_index+1]]\n        else:\n            continue\n    for planet in range(planet1_index+1, planet2_index):\n        planet_name = planets[planet]\n        planet_orbit = [planets[planet+1]]\n        for planet2 in planet1_orbit:\n            if is_orbit(planet2, planet_name):\n                planet1_orbit.append(planet_name)\n        for planet2 in planet2_orbit:\n            if is_orbit(planet2, planet_name):\n                planet2_orbit.append(planet_name)\n    return tuple(sorted(set(planet1_orbit+planet2_orbit)))\n",
        "num_ids": 425
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def planet_name(name):\n        if name == 'Mercury': return 0\n        elif name == 'Venus': return 1\n        elif name == 'Earth': return 2\n        elif name == 'Mars': return 3\n        elif name == 'Jupiter': return 4\n        elif name == 'Saturn': return 5\n        elif name == 'Uranus': return 6\n        elif name == 'Neptune': return 7\n        else: return -1\n    def planet_num(name):\n        return planet_name(name) * 7 + planet_name(name)\n    def planets(planet1, planet2):\n        return sorted(range(planet_num(planet1), planet_num(planet2)+1), key=lambda planet: abs(planet - planet_num(planet1)))\n    return tuple([name for name in list(list(map(lambda name: name[0], planets(planet1, planet2))+list(map(lambda name: name[1], planets(planet1, planet2))))[1:-1]) if name[0]!=''])\n",
        "num_ids": 253
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    min_planets = []\n    max_planets = []\n    for planet in planets:\n        if planet1 == planet:\n            min_planets.append(planet)\n        if planet2 == planet:\n            max_planets.append(planet)\n    min_index = planets.index(min_planets[0])\n    max_index = planets.index(max_planets[0])\n    result = []\n    if max_index - min_index <= 2:\n        for planet in planets[min_index+1:max_index]:\n            result.append(planet)\n    else:\n        result = bf(max_planets[0], min_planets[0])\n        for planet in planets[min_index+1:max_index]:\n            result = result + bf(planet, max_planets[0])\n    return tuple(result)\n",
        "num_ids": 262
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    p1 = planet1.capitalize()\n    p2 = planet2.capitalize()\n    if p1 in planets and p2 in planets:\n        res = []\n        for i in planets:\n            if get_orbit_of_planet(i) >= get_orbit_of_planet(p1) and get_orbit_of_planet(i) < get_orbit_of_planet(p2):\n                res.append(i)\n        return tuple(res)\n    return ()\n",
        "num_ids": 152
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(lst, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sorted_list = []\n    for element in lst:\n        if len(element)%2 == 0:\n            sorted_list.append(element)\n    sorted_list.sort(key=len, reverse=True)\n    return sorted_list\n    \n    \n    \n    \ndef common_values(dict_one, dict_two):\n    \"\"\"Write a function that accepts two dictionaries as parameters,\n    and returns a dictionary that contains only the keys that appear in both dictionaries.\n    If a key appears in both dictionaries, the key-value pair from the first dictionary should be used.\n    The function should return a dictionary.\n    For example:\n    assert common_values({1: \"one\", 2: \"two\", 3: \"three\"}, {1: \"uno\", 2: \"dos\", 4: \"cuatro\"}) => {1: \"one\"}\n    assert common_values({1: \"one\", 2: \"two\", 3: \"three\"}, {1: \"uno\", 2: \"dos\", 4: \"cuatro\"}) => {1: \"one\", 2: \"two\", 3: \"three\"}\n    \"\"\"\n    dict_one_keys = set(dict_one.keys())\n    dict_two_keys = set(dict_two.keys())\n    intersection_keys = dict_one_keys & dict_two_keys\n    dict_three = {}\n    for key in intersection_keys:\n        dict_three[key] = dict_one[key]\n    return dict_three\n",
        "num_ids": 349
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(lst, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(lst, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst_2 = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            lst_2.append(i)\n    lst_2 = sorted(lst_2, key=len)\n    return lst_2\n",
        "num_ids": 65
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(lst, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(list(set(lst)), key=len)\n",
        "num_ids": 17
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst.sort(key=len)\n    lst.sort()\n    return lst\n",
        "num_ids": 24
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    my_dict = {}\n    my_list = []\n    for i in lst:\n        my_dict[i] = len(i)\n    for key, value in my_dict.items():\n        if value % 2 == 0:\n            my_list.append(key)\n    return sorted(my_list)",
        "num_ids": 76
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert isinstance(n, int), \"n must be an integer\"\n    assert isinstance(x, int), \"x must be an integer\"\n    assert isinstance(y, int), \"y must be an integer\"\n    \n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    if x <= 0:\n        raise ValueError(\"x must be greater than 0\")\n    if y <= 0:\n        raise ValueError(\"y must be greater than 0\")\n",
        "num_ids": 114
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if is_prime(n):\n        return x\n    return y\n",
        "num_ids": 18
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n > 1:\n        if n % 2!= 0:\n            return x\n        else:\n            return y\n    else:\n        return y\n",
        "num_ids": 38
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if (n == x):\n        return x\n    elif (n == y):\n        return y\n    elif (n % 2 == 0):\n        return n\n    else:\n        return None\n",
        "num_ids": 49
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if is_prime(n):\n        return x\n    return y\n",
        "num_ids": 18
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n        \n    \n",
        "num_ids": 26
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #return 0\n    sum = 0\n    for i in lst:\n        if i >= 0:\n            if i % 2 == 1:\n                sum += i**2\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for i in lst:\n        if int(i)%2==1:\n            count += i**2\n        else:\n            pass\n    return count",
        "num_ids": 43
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(i**2 for i in lst if i % 2 == 1)\n",
        "num_ids": 21
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(i ** 2 for i in lst if i % 2!= 0",
        "num_ids": 20
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = 0\n    for i in lst:\n        if i >= 0 and int(i) % 2 == 1:\n            s += i ** 2\n    return s\n",
        "num_ids": 41
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    output = 0\n    for i in lst:\n        if (i < 0) or (not isinstance(i, int)):\n            continue\n        elif i % 2!= 0:\n            output += i**2\n    return output\n",
        "num_ids": 58
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return sum(i*i for i in lst if i > 0 and not isinstance(i, int))\n",
        "num_ids": 29
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # <YOUR CODE HERE>\n    \n    return [0 if game[i] == guess[i] else abs(game[i] - guess[i]) for i in range(len(game))]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [abs(game[i]-guess[i]) for i in range(len(game))]\n",
        "num_ids": 26
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    scores = []\n    guesses = []\n    for score, guess in zip(game, guess):\n        scores.append(score)\n        guesses.append(guess)\n    \n    difference = [abs(i-j) for i,j in zip(scores,guesses)]\n    return difference",
        "num_ids": 75
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    # take the absolute difference between the guess and the score\n    # remember to have the return as a list\n    \n    return [0]*len(game)\n",
        "num_ids": 40
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [guess[i]-game[i] if guess[i]!=game[i] else 0 for i in range(len(game))]",
        "num_ids": 36
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [abs(score - guess) for score, guess in zip(game, guess)]\n",
        "num_ids": 22
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # game = [1,2,3,4,5,1]\n    # guess = [1,2,3,4,2,-2]\n    return [0 if game[x] == guess[x] else abs(game[x] - guess[x]) for x in range(len(game))]\n",
        "num_ids": 74
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return [0 if guess[i] == game[i] else abs(guess[i] - game[i]) for i in range(len(guess))]\n",
        "num_ids": 42
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for i in range(0,len(game)):\n        diff = abs(game[i] - guess[i])\n        result.append(diff)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return class_name + '.' + max(extensions, key = lambda x: (len(x.lower()), x.upper()))\n",
        "num_ids": 36
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    CAP = 0\n    SM = 0\n    strength = 0\n    for extension in extensions:\n        extension_words = extension.split()\n        CAP += len([word for word in extension_words if word.isupper()])\n        SM += len([word for word in extension_words if word.islower()])\n        strength += CAP - SM\n    return class_name + '.' + extensions[strength].split()[0]\n",
        "num_ids": 100
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # your code goes here\n    class_name_without_s = class_name[0].lower() + class_name[1:]\n    \n    # Finding the extensions that have the same strength\n    extensions_with_same_strength = [extension for extension in extensions if extension.lower()[0] == class_name_without_s[0] and extension[1:] == class_name_without_s[1:]]\n    \n    # Finding the strength of the extensions\n    extensions_strength_of_extension = [(-sum(1 for c in extension if c.isupper()), extension) for extension in extensions_with_same_strength]\n    \n    # Sorting the extensions based on strength\n    extensions_strength_of_extension = sorted(extensions_strength_of_extension)\n    \n    # Selecting the extension with the highest strength\n    strongest_extension_name = extensions_strength_of_extension[-1][1]\n    \n    return class_name + '.' + strongest_extension_name\n",
        "num_ids": 245
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    extensions.sort(key=lambda x: (sum(1 for i in x if i.isupper()),sum(1 for i in x if i.islower())))\n    return '{0}.{1}'.format(class_name, extensions[-1])\n",
        "num_ids": 64
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Your code here\n    max = 0\n    for i in range(len(extensions)):\n        cap = 0\n        for letter in extensions[i]:\n            if letter == letter.upper():\n                cap += 1\n        sm = 0\n        for letter in extensions[i]:\n            if letter == letter.lower():\n                sm += 1\n        if (cap - sm) / cap > max:\n            max = (cap - sm) / cap\n            max_ext = extensions[i]\n            max_class = class_name\n    return max_class + '.' + max_ext\n",
        "num_ids": 137
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = ''\n    s_list = []\n    for x in extensions:\n        s_list.append(x.upper())\n    s_list = sorted(s_list, key=lambda k: (len(k) - len(k.lower())))\n    for x in s_list:\n        if class_name.upper() in x:\n            s = class_name + '.' + x\n            return s\n",
        "num_ids": 99
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert isinstance(class_name, str)\n    assert isinstance(extensions, list)\n    assert all([isinstance(x, str) for x in extensions])\n    assert all([len(x)>0 for x in extensions])\n    assert all([x[0] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" for x in extensions])\n    assert all([x[0] in \"abcdefghijklmnopqrstuvwxyz\" for x in extensions])\n    assert len(set([x.upper() for x in extensions])) == len(set([x.lower() for x in extensions]))\n",
        "num_ids": 152
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    class_name = str(class_name)\n    extensions = list(extensions)\n    strength = 0\n    for i in range(len(extensions)):\n        extension = extensions[i]\n        num_cap = 0\n        num_sm = 0\n        for char in extension:\n            if char.isupper():\n                num_cap += 1\n            elif char.islower():\n                num_sm += 1\n        strength = (num_cap - num_sm)/len(extension)\n        if strength > 0:\n            extensions[i] = class_name + \".\" + extension\n    return extensions[0]\n",
        "num_ids": 150
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    CAP = sum([1 for x in class_name if x.isupper()])\n    SM = sum([1 for x in class_name if x.islower()])\n    return class_name + '.' + max(extensions, key = lambda x: (CAP - SM) * 100 / len(x) )\n",
        "num_ids": 74
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #dont really need to do for loop\n    #a_list = list(a)\n    #print(a_list)\n    #b_list = list(b)\n    #print(b_list)\n",
        "num_ids": 52
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # print(a[1:])\n    # print(b[1:])\n    if b in a or a in b:\n        return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # a_temp = a + a\n    # if b in a_temp:\n    #     return True\n    # else:\n    #     return False\n",
        "num_ids": 38
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if b in a or len(a) < len(b) or len(a) < len(b):\n        return False\n    if len(a) == len(b):\n        return True\n    for i in range(len(b)):\n        if a.find(b[i:])!= -1:\n            return True\n        a = a[1:] + a[0]\n    return False\n",
        "num_ids": 97
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a = list(a)\n    b = list(b)\n    \n    for i in range(1,len(b)):\n        if b[:i] in a:\n            return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    if a == b :\n        return True\n    \n    for i in range(len(a)):\n        if b == a[i:]:\n            return True\n    \n    return False\n",
        "num_ids": 48
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a in b:\n        return True\n    for i in range(len(a)):\n        if a[i:]+a[:i] in b:\n            return True\n        if a[:i]+a[i:] in b:\n            return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert type(a) == str and type(b) == str and a and b\n    # add your code here\n    \n    if b in a:\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    x = b\n    for i in range(1, len(a)):\n        if a in x:\n            return True\n        else:\n            x = b[-1] + b[:-1]\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # print(a, b)\n    if a.find(b)!= -1 or b in a:\n        return True\n    for i in range(0, len(a)):\n        if a.find(a[i:]) == 0 or a.find(a[:len(a) - i]) == 0:\n            return True\n    return False\n",
        "num_ids": 85
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    even, odd = 0, 0\n    while num:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return even, odd\n",
        "num_ids": 50
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (num % 2 == 0, len(str(num)) % 2 == 0)\n",
        "num_ids": 22
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    a, b = 0, 0\n    while num:\n        if num % 10 % 2:\n            a += 1\n        else:\n            b += 1\n        num //= 10\n    return (a, b)\n",
        "num_ids": 52
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (len([i for i in str(num) if int(i) % 2 == 0]), len([i for i in str(num) if int(i) % 2!= 0]))\n",
        "num_ids": 47
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    even_num = 0\n    odd_num = 0\n",
        "num_ids": 15
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    even = 0\n    odd = 0\n",
        "num_ids": 11
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    even, odd = 0, 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n",
        "num_ids": 54
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if num < 0:\n        return (0, 0)\n    return (len(str(num)) - len(str(num) % 2), len(str(num)) % 2)\n",
        "num_ids": 45
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (odd, even)\n",
        "num_ids": 57
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count_even = 0\n    count_odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n",
        "num_ids": 54
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # create a dictionary of roman numerals\n    roman_numerals = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L',\n                      90: 'XC', 100: 'C', 400: 'XD', 500: 'D', 900: 'CM', 1000: 'M'}\n",
        "num_ids": 91
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def int_to_roman(number, roman_number):\n        while number > 0:\n            if number >= 1000:\n                roman_number += 'M'\n                number -= 1000\n            elif number >= 900:\n                roman_number += 'CM'\n                number -= 900\n            elif number >= 500:\n                roman_number += 'D'\n                number -= 500\n            elif number >= 400:\n                roman_number += 'CD'\n                number -= 400\n            elif number >= 100:\n                roman_number += 'C'\n                number -= 100\n            elif number >= 90:\n                roman_number += 'XC'\n                number -= 90\n            elif number >= 50:\n                roman_number += 'L'\n                number -= 50\n            elif number >= 40:\n                roman_number += 'XL'\n                number -= 40\n            elif number >= 10:\n                roman_number += 'X'\n                number -= 10\n            elif number >= 9:\n                roman_number += 'IX'\n                number -= 9\n            elif number >= 5:\n                roman_number += 'V'\n                number -= 5\n            elif number >= 4:\n                roman_number += 'IV'\n                number -= 4\n            elif number >= 1:\n                roman_number += 'I'\n                number -= 1\n        return roman_number\n",
        "num_ids": 317
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    int_to_mini_roman.roman_map = {1:'i', 5:'v', 10:'x', 50:'l', 100:'c', 500:'d', 1000:'m'}\n    if not isinstance(number, int):\n        return 'Input must be an integer'\n    if not 1 <= number <= 1000:\n        return 'Input must be between 1 and 1000'\n    result = ''\n    while number > 0:\n        if number >= 1000:\n            result += int_to_mini_roman.roman_map[1000]\n            number -= 1000\n            continue\n        if number >= 500:\n            result += int_to_mini_roman.roman_map[500]\n            number -= 500\n            continue\n        if number >= 100:\n            result += int_to_mini_roman.roman_map[100]\n            number -= 100\n            continue\n        if number >= 50:\n            result += int_to_mini_roman.roman_map[50]\n            number -= 50\n            continue\n        if number >= 10:\n            result += int_to_mini_roman.roman_map[10]\n            number -= 10\n            continue\n        if number >= 5:\n            result += int_to_mini_roman.roman_map[5]\n            number -= 5\n            continue\n        if number >= 1:\n            result += int_to_mini_roman.roman_map[1]\n            number -= 1\n            continue\n    return result\n",
        "num_ids": 335
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def get_mini_roman(num, num_list):\n        return num_list[num % 10]\n    \n    mini_roman_list = [\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"]\n    \n    return \"\".join([get_mini_roman(num, mini_roman_list) for num in range(1, number+1)])\n",
        "num_ids": 93
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if type(number) is not int:\n        raise ValueError(\"Argument must be of type 'int'!\")\n",
        "num_ids": 29
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Replace the following with your code\n",
        "num_ids": 10
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not 1 <= number <= 1000:\n        raise ValueError(\"Invalid input\")\n    mini_romans = (\n        (\"m\",  1000),\n        (\"cm\", 900),\n        (\"d\",  500),\n        (\"cd\", 400),\n        (\"c\",  100),\n        (\"xc\", 90),\n        (\"l\",  50),\n        (\"xl\", 40),\n        (\"x\",  10),\n        (\"ix\", 9),\n        (\"v\",  5),\n        (\"iv\", 4),\n        (\"i\",  1),\n    )\n    result = []\n    for item in mini_romans:\n        while number >= item[1]:\n            number -= item[1]\n            result.append(item[0])\n    return \"\".join(result)\n",
        "num_ids": 181
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    rom = {'M': 1000, 'CM': 900, 'D': 500, 'CD': 400, 'C': 100, 'XC': 90,\n           'L': 50, 'XL': 40, 'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1}\n    num = [rom[k] for k in rom if number >= rom[k]]\n    roman = ''\n    while len(num) > 0:\n        roman += num.pop()\n        if len(num) > 0 and rom[num[-1]] == rom[roman[-1]]:\n            roman += num.pop()\n    return roman.lower()\n",
        "num_ids": 159
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Define your code below\n    #return int_to_roman(number, \"\")\n    #return int_to_roman(number, \"I\")\n    #return int_to_roman(number, \"V\")\n    #return int_to_roman(number, \"X\")\n    #return int_to_roman(number, \"L\")\n    #return int_to_roman(number, \"C\")\n    #return int_to_roman(number, \"D\")\n    #return int_to_roman(number, \"M\")\n    if number <= 0 or number > 1000:\n        raise ValueError\n    \n    roman_dict = {\"1\" : \"I\", \"5\" : \"V\", \"10\" : \"X\", \"50\" : \"L\", \"100\" : \"C\", \"500\" : \"D\", \"1000\" : \"M\"}\n    numbers = [1000, 500, 100, 50, 10, 5, 1]\n    keys = list(roman_dict.keys())\n    keys.sort()\n    result = []\n    for i in range(len(numbers)):\n        number_of_i = number // numbers[i]\n        number = number - number_of_i * numbers[i]\n        if number_of_i == 0:\n            continue\n        for j in range(number_of_i):\n            result.append(roman_dict[keys[i]])\n    \n    return \"\".join(result)\n",
        "num_ids": 340
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # 1 <= num <= 1000\n    # Run helper to split into groups of 3, 2, 1\n    # Create a dictionary with the values for the roman numeral\n    # The dictionary should also have a list of the alphabet letters\n    # The numbers will be in descending order\n    # The solution will then have the letters in the alphabet in the order of\n    # descending values\n    # Create a list to hold the roman numerals\n    # Get the key values\n    # The key value is a list of the values for the roman numeral (1, 5, 10, 50, 100, 500, 1000)\n    # The value is a list of the roman numerals for the key value\n    # Iterate through the number\n    # If the current value is less than the next value\n    # Append the next roman numeral to the list\n    # If the current value is greater than the next value\n    # If the next value is in the list of key values\n    # Get the index of the next value in the key list\n    # Get the value of the key list at that index\n    # Subtract the current value from the next value\n    # If the subtraction results in a remainder\n    # Append the remainder of the subtraction to the list\n    # Append the list to the roman numeral list\n    # Return the roman numeral list\n    # Create a dictionary that will hold the roman numeral values\n    # Create a list to hold the roman numeral letters\n    # Iterate through the number\n    # Use the helper function to get the roman numeral\n    # Add the roman numeral letter to the list\n    # Return the list\n    roman_numeral_list = []\n    roman_numeral_dict = {\n        1: ['I', 'X', 'C', 'M'],\n        5: ['V', 'L', 'D'],\n        10: ['X', 'L', 'C'],\n        50: ['L', 'D', 'M'],\n        100: ['C', 'D', 'M'],\n        500: ['D', 'C', 'M'],\n        1000: ['M', 'C', 'M']\n    }\n    for number in range(1, number + 1):\n        roman_numeral = int_to_roman(number)\n        roman_numeral_list.append(roman_numeral)\n    return ''.join(roman_numeral_list)\n",
        "num_ids": 558
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if ((c**2) == (a**2) + (b**2)) or ((b**2) == (a**2) + (c**2)) or ((a**2) == (b**2) + (c**2)):\n        return True\n    else:\n        return False\n    \n    \ndef integer_right_triangle(n):\n    '''\n    Given a positive integer n, return the count of all the positive integers m\n    such that n <= m < (2*n) and the ratio m/n is right-angled.\n    Example:\n    integer_right_triangle(5) == 1\n    integer_right_triangle(10) == 3\n    '''\n    a = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if right_angle_triangle(i, j, n) == True:\n                a.append(j)\n    return len(a)\n    \n    \ndef integer_right_triangle_v2(n):\n    '''\n    Given a positive integer n, return the count of all the positive integers m\n    such that n <= m < (2*n) and the ratio m/n is right-angled.\n    Example:\n    integer_right_triangle(5) == 1\n    integer_right_triangle(10) == 3\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + integer_right_triangle_v2(n-1)\n    \n    \ndef integer_right_triangle_v3(n):\n    '''\n    Given a positive integer n, return the count of all the positive integers m\n    such that n <= m < (2*n) and the ratio m/n is right-angled.\n    Example:\n    integer_right_triangle(5) == 1\n    integer_right_triangle(10) == 3\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 0\n        for i in range(1, n):\n            a += integer_right_triangle_v2(i)\n        return a + n + 1\n    \n    \ndef int_right_triangle_v4(n):\n    '''\n    Given a positive integer n, return the count of all the positive integers m\n    such that n <= m < (2*n) and the ratio m/n is right-angled.\n    Example:\n    integer_right_triangle(5) == 1\n    integer_right_triangle(10) == 3\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        b = 1\n        c = 1\n        for i in range(1, n):\n            a, b, c = b, c, a + b + c\n        return c\n    \n    \ndef integer_right_triangle_v5(n):\n    '''\n    Given a positive integer n, return the count of all the positive integers m\n    such that n <= m < (2*n) and the ratio m/n is right-angled.\n    Example:\n    integer_right_triangle(5) == 1\n    integer_right_triangle(10) == 3\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum(integer_right_triangle_v4(i) for i in range(1, n))\n        \n",
        "num_ids": 811
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # calculate the third side\n    c_squared = a**2 + b**2\n    c_squared_third_side = c_squared - (a**2 + b**2)\n    c_squared_third_side_root = c_squared_third_side ** 0.5\n    \n    # calculate the semi-perimeter\n    s = (a + b + c_squared_third_side_root) / 2\n    \n    # calculate the area\n    area = (s * (s - a) * (s - b) * (s - c_squared_third_side_root)) ** 0.5\n    \n    # calculate the length\n    length = (2 * area) / c\n    \n    # return the answer\n    if length == a or length == b or length == c:\n        return True\n    else:\n        return False\n",
        "num_ids": 206
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Importing math library\n    import math\n    # Declaring a, b, c, and creating a new list\n    list_triangle = [a, b, c]\n    # Declaring variables for the middle lengths\n    a_c = math.sqrt((list_triangle[0] ** 2) + (list_triangle[2] ** 2))\n    b_c = math.sqrt((list_triangle[1] ** 2) + (list_triangle[2] ** 2))\n    # Creating a list of the middle lengths\n    list_middle_length = [a_c, b_c]\n    # Declaring variables for the angles\n    a_b = math.acos((list_triangle[0] ** 2 + list_triangle[1] ** 2 - list_middle_length[0] ** 2) / (list_triangle[0] * list_triangle[1]))\n    b_c = math.acos((list_triangle[1] ** 2 + list_triangle[2] ** 2 - list_middle_length[1] ** 2) / (list_triangle[1] * list_triangle[2]))\n    # Creating a list of the angles\n    list_angles = [a_b, b_c]\n    # Creating a variable to store the three angles in a list\n    list_angles_sum = sum(list_angles)\n    # Creating a list of all three angles\n    list_angles_sum_list = [list_angles_sum]\n    # Creating a variable to check for whether the list of three angles are right angles\n    right_angle_sum = list_angles_sum_list[0] == 90\n    # If the list of three angles are right angles, return True\n    if right_angle_sum == True:\n        return True\n    # If the list of three angles are not right angles, return False\n    else:\n        return False\n",
        "num_ids": 445
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if ((a ** 2) + (b ** 2)) == (c ** 2) or ((b ** 2) + (c ** 2)) == (a ** 2) or ((a ** 2) + (c ** 2)) == (b ** 2):\n        return True\n    else:\n        return False\n",
        "num_ids": 69
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n",
        "num_ids": 39
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # \ud835\udc34\ud835\udc35 = \ud835\udc34^2 + \ud835\udc35^2\n    # where \ud835\udc34^2 = \ud835\udc35^2 + \ud835\udc34\ud835\udc35\n    return a**2 + b**2 == c**2 or c**2 + b**2 == a**2 or a**2 + c**2 == b**2\n",
        "num_ids": 88
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Compute the Pythagorean theorem for side a\n    # Then, compute the square root of (c^2 - b^2) to get the length of hypotenuse\n    # Then, check if the length of the hypotenuse is equal to the sum of the other two sides\n    return round(sqrt((c**2) - (b**2)), 1) == (a + b + c)\n",
        "num_ids": 93
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if (a**2 + b**2) == (c**2):\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (a*a) + (b*b) == (c*c) or (a*a) + (c*c) == (b*b) or (b*b) + (c*c) == (a*a)\n",
        "num_ids": 57
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(words) == 0:\n        return None\n    unique_words = []\n    for word in words:\n        unique_characters = set(word)\n        unique_words.append((unique_characters, word))\n    unique_words.sort(key=lambda x: len(x[0]))\n    return unique_words[-1][1",
        "num_ids": 85
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # print(words)\n    max_len = len(words[0])\n    max_word = words[0]\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "num_ids": 72
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    max_unique = 0\n    max_word = \"\"\n",
        "num_ids": 15
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    max_len = -1\n    max_word = None\n    for word in words:\n        if len(set(word)) > max_len:\n            max_len = len(set(word))\n            max_word = word\n    return sorted(max_word)[0]",
        "num_ids": 66
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    unique_chars = set()\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars.add(char)\n        count = len(unique_chars)\n        if count > max_count:\n            max_count = count\n            max_word = word\n        unique_chars.clear()\n    return max_word\n",
        "num_ids": 109
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def count_unique_chars(word):\n        return len(set(word))\n    return max(words, key=count_unique_chars)\n",
        "num_ids": 38
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    words.sort()\n    if len(words) == 0:\n        return \"\"\n    elif len(words) == 1:\n        return words[0]\n    else:\n        result = \"\"\n        result = max(words, key=len)\n        return result",
        "num_ids": 63
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    unique_characters = set()\n    for word in words:\n        for char in word:\n            unique_characters.add(char)\n    unique_characters = list(unique_characters)\n    unique_characters.sort()\n",
        "num_ids": 58
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    maximum = 0\n    maximum_str = None\n    for word in words:\n        if len(set(word)) > maximum:\n            maximum = len(set(word))\n            maximum_str = word\n    return maximum_str\n",
        "num_ids": 55
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # WRITE YOUR CODE HERE\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # WRITE YOUR CODE HERE\n    \n    if remaining <= need:\n        remaining = need\n    \n    if remaining == 0:\n        return [number + need, 0]\n    \n    return [number + need, remaining]",
        "num_ids": 53
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if number == need:\n        return [number, 0]\n    if number < need:\n        return [number, need-number]\n    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need",
        "num_ids": 64
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # WRITE YOUR CODE HERE\n    if need > remaining:\n        return [number+remaining,0]\n    else:\n        return [number+need,remaining-need]\n",
        "num_ids": 43
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if operator[0] == '+':\n        return operand[0] + operand[1]\n    elif operator[0] == '-':\n        return operand[0] - operand[1]\n    elif operator[0] == '*':\n        return operand[0] * operand[1]\n    elif operator[0] == '//':\n        return operand[0] // operand[1]\n    elif operator[0] == '**':\n        return operand[0] ** operand[1]\n",
        "num_ids": 130
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = 0\n    \n    #calculate the first operand\n    result = operand[0]\n    #calculate the remaining operands\n    for i in range(1, len(operand)):\n        if(operator[i - 1] == \"+\"):\n            result += operand[i]\n        elif(operator[i - 1] == \"-\"):\n            result -= operand[i]\n        elif(operator[i - 1] == \"*\"):\n            result *= operand[i]\n        elif(operator[i - 1] == \"//\"):\n            result //= operand[i]\n        elif(operator[i - 1] == \"**\"):\n            result **= operand[i]\n        else:\n            print(\"Unknown operator!\")\n    return result\n",
        "num_ids": 193
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i]\n        elif op == '-':\n            result -= operand[i]\n        elif op == '*':\n            result *= operand[i]\n        elif op == '//':\n            result //= operand[i]\n        elif op == '**':\n            result **= operand[i]\n        else:\n            return 'Invalid operator'\n",
        "num_ids": 121
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = operand[0]\n    for index in range(1, len(operand)):\n        result = result + operand[index]\n    for index in range(len(operator)):\n        if operator[index] == '+':\n            result = result + operand[index+1]\n        elif operator[index] == '-':\n            result = result - operand[index+1]\n        elif operator[index] == '*':\n            result = result * operand[index+1]\n        elif operator[index] == '//':\n            result = result // operand[index+1]\n        elif operator[index] == '**':\n            result = result ** operand[index+1]\n    return result\n",
        "num_ids": 176
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n",
        "num_ids": 146
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]))\n",
        "num_ids": 27
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = 0\n    \n    # TODO: Your code here\n    \n    return result\n",
        "num_ids": 23
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Please Fill Me In!\n    result = 0\n",
        "num_ids": 14
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #result = []\n    #for i in s:\n    #    if i.isalpha():\n    #        if i.isupper():\n    #            result.append(i.lower())\n    #        else:\n    #            result.append(i.upper())\n    #    else:\n    #        result.append(i)\n    #return ''.join(result)\n",
        "num_ids": 91
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lower = \"abcdefghijklmnopqrstuvwxyz\"\n    upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    lst = [s[i] for i in range(len(s))]\n    for i in range(len(lst)):\n        if lst[i] in lower:\n            lst[i] = lower[lower.index(lst[i])].upper()\n        elif lst[i] in upper:\n            lst[i] = upper[upper.index(lst[i])].lower()\n    return \"\".join(lst",
        "num_ids": 150
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join(\n        (\n            x if x.islower() else x.upper()\n            if x.isalpha() else x\n        )\n        for x in s\n    )",
        "num_ids": 46
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return s.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # for ch in s:\n    #     if ch.isalpha():\n    #         if ch.isupper():\n    #             ch = ch.lower()\n    #         else:\n    #             ch = ch.upper()\n    #     print(ch, end='')\n    # return s\n",
        "num_ids": 72
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # your code here\n    return None\n",
        "num_ids": 11
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # make a list of the string\n    l = list(s)\n    # loop through the list\n    for i in range(len(l)):\n        # if the item is a letter\n        if l[i].isalpha():\n            # set the item to the opposite case\n            l[i] = l[i].swapcase()\n        # if the item is not a letter\n        else:\n            # set the item to the opposite case\n            l[i] = l[i].lower()\n    # join the list into a string\n    s = \"\".join(l)\n    # return the string\n    return s\n",
        "num_ids": 147
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return s.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text).hexdigest()\n",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not text:\n        return None\n    m = md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n",
        "num_ids": 43
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if text is None or text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
        "num_ids": 34
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if text == '':\n        return None\n    m = hashlib.md5(text.encode())\n    return m.hexdigest()\n",
        "num_ids": 36
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 24
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 30
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    if a % 2 == 0 and b % 2 == 0:\n        if a < b:\n            while a < b:\n                if a % 2 == 0:\n                    result.append(a)\n                a += 1\n        else:\n            while a > b:\n                if a % 2 == 0:\n                    result.append(a)\n                a -= 1\n    return resul",
        "num_ids": 94
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst = []\n    for i in range(a+1, b):\n        if i % 2 == 0:\n            lst.append(i)\n    return lst\n",
        "num_ids": 43
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    integers = []\n    for x in range(a, b+1):\n        if x % 2 == 0:\n            integers.append(x)\n    return integers\n",
        "num_ids": 42
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def isEven(x):\n        return x % 2 == 0\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    res = [i for i in range(a, b + 1) if i % 2 == 0]\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    num = []\n    x = a\n    y = b\n    while x!= y:\n        if x % 2 == 0:\n            num.append(x)\n        if y % 2 == 0:\n            num.append(y)\n        x -= 1\n        y += 1\n    num.sort()\n    return num\n",
        "num_ids": 78
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Your code here\n    l = []\n    for i in range(a, b+1):\n        if i%2 == 0 and i < b:\n            l.append(i)\n    return l\n",
        "num_ids": 50
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    \n    # loop over the range a to b\n    for num in range(a, b+1):\n        # check if the number is even\n        if num % 2 == 0:\n            # append the number to the list if it is\n            result.append(num)\n    \n    return result",
        "num_ids": 74
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #\n    # IMPLEMENT ME\n    #\n    result = []\n    while a <= b:\n        if a % 2 == 0:\n            result.append(a)\n        a += 1\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # convert strings to integers\n    a = int(a)\n    b = int(b)\n",
        "num_ids": 24
    }
]