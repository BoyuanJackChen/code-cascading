[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = len(numbers)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i, _ in enumerate(numbers[:-1]):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(0, len(numbers)):\n        for j in range(i, len(numbers)):\n            if i == j:\n                continue\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i!= j and abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    i = 0\n    j = 1\n    while i < len(numbers):\n        while j < len(numbers):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n            j += 1\n        j = 0\n        i += 1\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return any(abs(numbers[i] - numbers[j]) <= threshold for i in range(len(numbers))\n            for j in range(i + 1, len(numbers)))\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i, n in enumerate(numbers):\n        for j, m in enumerate(numbers[i+1:]):\n            if abs(n-m) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Create a list of strings to store the group\n    paren_groups = []\n    # Create a stack to store each char\n    stack = []\n    # Iterate through each character\n    for char in paren_string:\n        # If the character is an open bracket, push it to the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closed bracket, then the stack is empty\n        elif char == ')':\n            # If the stack is empty, then there are mismatched parentheses\n            if len(stack) == 0:\n                return []\n            # If the stack is not empty, then pop the last element, i.e. the last open bracket\n            else:\n                stack.pop()\n    # If the stack is empty, then the input is balanced\n    if len(stack) == 0:\n        paren_groups.append(''.join(paren_string))\n    # If the stack is not empty, then there are mismatched parentheses, return the empty list\n    else:\n        return []\n    # Iterate through each element in the stack, starting from the last element\n    while len(stack)!= 0:\n        # Pop the last element, i.e. the last open bracket\n        stack.pop()\n        # Iterate through each character in the input string\n        for char in paren_string:\n            # If the character is an open bracket, push it to the stack\n            if char == '(':\n                stack.append(char)\n            # If the character is a closed bracket, then the stack is empty\n            elif char == ')':\n                # If the stack is empty, then there are mismatched parentheses\n                if len(stack) == 0:\n                    return []\n                # If the stack is not empty, then pop the last element, i.e. the last open bracket\n                else:\n                    stack.pop()\n        # If the stack is empty, then the input is balanced\n        if len(stack) == 0:\n            paren_groups.append(''.join(paren_string))\n        # If the stack is not empty, then there are mismatched parentheses, return the empty list\n        else:\n            return []\n    # Return the list of groups\n    return paren_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    stack = []\n    result = []\n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            try:\n                stack.pop()\n            except IndexError:\n                # Return the empty list if there's nothing in the stack.\n                return []\n        result.append(c)\n    return [''.join(result).strip()] if ''.join(result).strip() else []\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    paren_string_wo_spaces = paren_string.replace(\" \", \"\")\n    curr_group = []\n    groups = []\n    i = 0\n    while i < len(paren_string_wo_spaces):\n        if paren_string_wo_spaces[i] == \"(\":\n            curr_group.append(paren_string_wo_spaces[i])\n        if paren_string_wo_spaces[i] == \")\":\n            curr_group.append(paren_string_wo_spaces[i])\n            groups.append(\"\".join(curr_group))\n            curr_group = []\n        i += 1\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # if the string only has one set of parens then it is only one string\n    if len(paren_string) == 1 or paren_string == '':\n        return [paren_string]\n    # find the index of the first opening paren\n    left_paren_index = paren_string.find('(')\n    # if there is no opening paren then the string is only one paren\n    if left_paren_index == -1:\n        return [paren_string]\n    # find the index of the first closing paren\n    right_paren_index = paren_string[left_paren_index + 1:].find(')') + left_paren_index + 1\n    # if there is no closing paren then the string is only one paren\n    if right_paren_index == -1:\n        return [paren_string]\n    # split the string into the left and right strings\n    left_string = paren_string[:left_paren_index + 1]\n    right_string = paren_string[right_paren_index + 1:]\n    # call this function on each of the left and right strings\n    return separate_paren_groups(left_string) + separate_paren_groups(right_string)\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Start by using a stack to keep track of open parens\n    stack: List[str] = []\n    result: List[str] = []\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    nested = []\n    to_be_removed = []\n    for index, paren in enumerate(paren_string):\n        if paren == '(':\n            nested.append(paren)\n        if paren == ')':\n            nested.pop()\n            to_be_removed.append(index)\n    to_be_removed.sort(reverse=True)\n    for index in to_be_removed:\n        paren_string = paren_string[:index] + paren_string[index + 1:]\n    return [paren_string] if paren_string else []\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # create a stack with the number of open parentheses as an element\n    # loop through string\n        # if open parentheses, append to stack\n        # if close parentheses, pop and print if stack is empty, otherwise, print a ( and keep going\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append('(')\n        else:\n            if len(stack) == 0:\n                print(\"invalid\")\n            else:\n                while len(stack) > 0:\n                    x = stack.pop()\n                    print(x, end=\"\")\n                print(paren_string[i], end=\"\")\n        i += 1\n    if len(stack) > 0:\n        print(\"invalid\")\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if paren_string == '':\n        return []\n    result = []\n    current_result = ''\n    nesting_level = 0\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            if nesting_level == 0:\n                current_result += paren\n            nesting_level += 1\n        elif paren == ')':\n            nesting_level -= 1\n            if nesting_level == 0:\n                current_result += paren\n                result.append(current_result)\n                current_result = ''\n            else:\n                current_result += paren\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    par_list = []\n    paren_string_list = []\n    for i in paren_string:\n        if i == '(':\n            paren_string_list.append(i)\n        elif i == ')':\n            paren_string_list.pop()\n        elif i =='':\n            continue\n    while paren_string_list:\n        par_list.append(''.join(paren_string_list))\n        paren_string_list.pop()\n    return par_list\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    stack = []\n    paren_groups = []\n    for char in paren_string:\n        if char == '(' or char == ')':\n            stack.append(char)\n    index = 0\n    while index < len(stack):\n        if stack[index] == '(':\n            paren_groups.append('(')\n            index += 1\n            while stack[index]!= ')':\n                paren_groups.append(stack[index])\n                index += 1\n            paren_groups.append(')')\n        index += 1\n    return paren_groups\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return number % 1\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    a, b = math.modf(number)\n    if a >= 0.5:\n        a = int(a)\n        b = int(b)\n        if a >= b:\n            return b\n        return a\n    if b >= 0.5:\n        a = int(a)\n        b = int(b)\n        if a >= b:\n            return b\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    integer, decimals = divmod(number, 1)\n    return decimals\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert number > 0\n    number_string = str(number)\n    decimal_index = number_string.find('.')\n    if decimal_index > 0:\n        return float(number_string[decimal_index+1:])\n    else:\n        return 0\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    integer, remainder = divmod(number, 1)\n    return remainder\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert(number > 0)\n    if number < 1:\n        return 0\n    integral, decimal = str(number).split('.')\n    return float('0.' + decimal)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    integer, decimal = divmod(number, 1)\n    return decimal\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    integer = int(number)\n    decimals = number - integer\n    return decimals\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            return True\n        balance += operation\n    if balance < 0:\n        return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if operations[0] < 0:\n        return True\n    if operations[0] > 0:\n        return False\n    for i in range(1, len(operations)):\n        if operations[i-1] > 0:\n            if operations[i] < 0:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for n in operations:\n        if n < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    bal = 0\n    for operation in operations:\n        bal += operation\n        if bal < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(operations) < 0\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #: hint: return balance <= 0\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(operations) == 1 and operations[0] == 0:\n        return True\n    if len(operations) == 0:\n        return False\n    if operations[0] < 0:\n        return below_zero(operations[1:])\n    else:\n        return below_zero(operations[1:]) or below_zero([operations[0] + operations[1]])\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # list comprehension\n    return sum(operations) < 0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Calculate mean of input numbers.\n    x_mean = sum(numbers) / len(numbers)\n    # Calculate absolute differences from x_mean.\n    absolute_differences = [abs(x - x_mean) for x in numbers]\n    # Calculate and return mean of absolute differences.\n    return sum(absolute_differences) / len(absolute_differences)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not numbers:\n        raise ValueError('Numbers list cannot be empty')\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Calculate Mean\n    mean = sum(numbers) / len(numbers)\n    # Calculate absolute differences\n    abs_deviations = map(lambda x: abs(x - mean), numbers)\n    # Calculate Mean Absolute Deviation\n    return sum(abs_deviations) / len(abs_deviations)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers_sum = 0\n    for number in numbers:\n        numbers_sum += abs(number - mean(numbers))\n    return numbers_sum / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(map(lambda x: abs(x - sum(numbers) / len(numbers)), numbers)) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(n - mean) for n in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = len(numbers)\n    if n == 0:\n        raise ValueError(\"Cannot calculate mean of an empty dataset.\")\n    x_mean = sum(numbers) / n\n    return sum(map(lambda x: abs(x - x_mean), numbers)) / n\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    n = len(numbers)\n    if n == 1:\n        return 0\n    sum_absolute_deviations = sum([abs(x - mean(numbers)) for x in numbers])\n    return sum_absolute_deviations / n\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([abs(numbers[i] - sum(numbers) / len(numbers)) for i in range(len(numbers))]) / len(numbers)"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [delimeter] + [numbers[0]] + [delimeter] + numbers[1:-1] + [delimeter] + numbers[-1:]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [delimeter] * (len(numbers) - 1) + numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    # for i in range(len(numbers) - 1):\n    #     result.append(numbers[i])\n    #     result.append(delimeter)\n    # result.append(numbers[-1])\n    # return result\n    if len(numbers) == 0:\n        return []\n    result.append(numbers[0])\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [delimeter] + [numbers[i] for i in range(len(numbers)) if i % 2 == 1] + [delimeter] + [numbers[i] for i in range(len(numbers)) if i % 2 == 0]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = [delimeter] * (len(numbers) * 2 - 1)\n    result[1::2] = numbers\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = [delimeter]\n    for i, number in enumerate(numbers):\n        if i % 2 == 0:\n            result.extend([number, delimeter])\n        else:\n            result.extend([delimeter, number])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    new_list = []\n    for i in range(len(numbers)-1):\n        new_list.append(numbers[i])\n        new_list.append(delimeter)\n    new_list.append(numbers[-1])\n    return new_list\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(1, len(numbers) - 1):\n        numbers.insert(2 * i + 1, delimeter)\n    return numbers\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def get_nesting_level(paren_string):\n        max_level = 0\n        level = 0\n        for char in paren_string:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        return max_level\n    \n    max_level = get_nesting_level(paren_string)\n    res = [0] * max_level\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            res[get_nesting_level(paren_string[:i]) - 1] += 1\n        elif char == ')':\n            res[get_nesting_level(paren_string[:i]) - 1] -= 1\n    \n    return res\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO: Write this function.\n    # Use a set to store the levels of parentheses.\n    # Start with level 0.\n    # Remove the last parentheses if it is a nested parentheses\n    # Add the level to the set when there is a new parentheses\n    # When there is a closing parentheses, add the level to the set\n    # When there is an opening parentheses, remove the level from the set\n    # return the set\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    out = []\n    num_of_nesting = 0\n    num_of_open = 0\n    level = 0\n    for char in paren_string:\n        if char == '(':\n            num_of_nesting += 1\n            num_of_open += 1\n            level += 1\n        elif char == ')':\n            if num_of_nesting > 0:\n                num_of_nesting -= 1\n                level -= 1\n            else:\n                out.append(level)\n                num_of_open = 0\n                level = 0\n        else:\n            num_of_open -= 1\n    return out\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    ans = []\n    temp = 0\n    count = 0\n    for x in paren_string:\n        if x == '(':\n            count += 1\n            temp += 1\n        elif x == ')':\n            count -= 1\n            temp -= 1\n            if count == 0:\n                ans.append(temp)\n                temp = 0\n    return ans\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    parens_list = paren_string.split(\" \")\n    for i in range(len(parens_list)):\n        if parens_list[i].startswith(\"(\"):\n            result.append(parens_list[i].count(\"(\") - parens_list[i].count(\")\"))\n        else:\n            continue\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Sliding window\n    # For each element, the total number of open parentheses minus the total number of closed parentheses at that index\n    # In the end, the open parentheses have to be negative and closed positive, so we can use this information to\n    # determine the number of levels of nesting.\n    # The trick is to have a list of indices that are the indices of the first open parenthesis to the left of each\n    # open parenthesis and the indices of the first open parenthesis to the right of each close parenthesis.\n    open_paren_count = 0\n    result = []\n    open_parentheses = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_paren_count += 1\n            open_parentheses.append(i)\n        elif char == ')':\n            if open_paren_count == 0:\n                raise ValueError(\"Invalid input\")\n            open_paren_count -= 1\n            open_parentheses.pop()\n        result.append(open_paren_count)\n    # If a close parentheses was missing, it means that open parentheses are still open.\n    if open_paren_count!= 0:\n        raise ValueError(\"Invalid input\")\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # TODO: Write your code here\n    queue = []\n    depth = 0\n    level = 1\n    for char in paren_string:\n        if char == '(':\n            queue.append(level)\n            level += 1\n            depth += 1\n        if char == ')':\n            queue.pop()\n            if not queue:\n                return depth\n            depth -= 1\n    return queue\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    stack = []\n    max_level = 0\n    max_level_array = []\n    for paren in paren_string.split():\n        if paren == '(':\n            stack.append(paren)\n        else:\n            stack.pop()\n            if len(stack) == 0:\n                max_level_array.append(max_level)\n                max_level = 0\n            else:\n                max_level += 1\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    paren_list = []\n    nested = []\n    for i in paren_string:\n        if i == '(':\n            if nested == []:\n                paren_list.append(nested)\n                nested.append(i)\n            else:\n                nested.append(i)\n        elif i == ')':\n            if nested!= []:\n                nested.append(i)\n            else:\n                paren_list.append(nested)\n                nested = []\n        else:\n            if nested == []:\n                paren_list.append([i])\n            else:\n                nested[-1].append(i)\n    paren_list.append(nested)\n    return [len(i) for i in paren_list]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    stack = []\n    current_level = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(current_level)\n            result.append(current_level)\n        elif char == ')':\n            result.append(current_level)\n            current_level = stack.pop()\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [i for i in strings if substring in i]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [\n        string\n        for string in strings\n        if substring in string\n    ]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sum_ = sum(numbers)\n    product_ = 1\n    for i in numbers:\n        product_ *= i\n    return (sum_, product_)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (sum(numbers), prod(numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum_ = 0\n    product = 1\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum_ = 0\n    product_ = 1\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n    return sum_, product_\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # return (sum(numbers), sum(numbers)) if not len(numbers) else (sum(numbers), sum(numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert isinstance(numbers, list)\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        sum_ = sum(numbers)\n        product_ = 1\n        for n in numbers:\n            product_ *= n\n        return (sum_, product_)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sum_int = 0\n    product_int = 1\n    if len(numbers)!= 0:\n        for num in numbers:\n            sum_int += num\n            product_int *= num\n        return (sum_int, product_int)\n    return (sum_int, product_int)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not numbers:\n        return 0, 1\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # https://www.dummies.com/education/math/business-statistics/how-to-calculate-the-sum-of-a-list-of-numbers-in-python/\n    return sum(numbers), int(reduce(lambda x, y: x * y, numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_ += i\n        product *= i\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    res: List[int] = []\n    for i in range(len(numbers)):\n        if i == 0:\n            res.append(numbers[0])\n        else:\n            res.append(max(res[i - 1], numbers[i]))\n    return res\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    results: List[int] = []\n    for i in range(len(numbers)):\n        results.append(max(numbers[:i + 1]))\n    return results\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    max_list: List[int] = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i + 1]))\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    max_number: int = -1e9\n    result: List[int] = []\n    for number in numbers:\n        if max_number < number:\n            result.append(max_number)\n            max_number = number\n        else:\n            max_number = max(max_number, number)\n    result.append(max_number)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    results = []\n    for i in range(len(numbers)):\n        rolling_max = 0\n        for j in range(i, len(numbers)):\n            if numbers[j] >= rolling_max:\n                rolling_max = numbers[j]\n        results.append(rolling_max)\n    return results\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # generate a list of rolling maximum\n    rolling_list = []\n    for i in range(0, len(numbers)):\n        rolling_list.append(max(numbers[:i + 1]))\n    return rolling_list\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = []\n    max_value = 0\n    for num in numbers:\n        if max_value < num:\n            max_value = num\n        res.append(max_value)\n    return res\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(numbers[:i + 1]))\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    max_value = numbers[0]\n    result = []\n    for num in numbers:\n        if num > max_value:\n            max_value = num\n        result.append(max_value)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers_len = len(numbers)\n    res = []\n    for i in range(numbers_len):\n        for j in range(i, numbers_len):\n            res.append(max(numbers[i:j + 1]))\n    return res\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if is_palindrome(string):\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    length = len(string)\n    if length == 0:\n        return string\n    if length == 1:\n        return string + string[0]\n    longest_palindromic_suffix = _longest_palindromic_suffix(string)\n    return string[:len(string) - longest_palindromic_suffix] + string[:len(string) - longest_palindromic_suffix][::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return string + string[-2::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(string) < 2:\n        return string\n    if is_palindrome(string):\n        return string\n    # Find the longest palindromic suffix\n    suffix = get_longest_palindrome_suffix(string)\n    # Make a new string by appending the reverse of the prefix, the longest palindromic suffix and the suffix itself.\n    new_string = string[:len(string) - len(suffix) + 1] + string[::-1] + suffix[::-1]\n    return new_string\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    suffix_start_index = len(string)\n    if is_palindrome(string):\n        return string\n    for suffix_index in range(1, len(string) + 1):\n        suffix = string[-suffix_index:]\n        if is_palindrome(suffix):\n            prefix = string[:-suffix_index]\n            return prefix + suffix[::-1]\n        else:\n            suffix_start_index = suffix_index\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if is_palindrome(string):\n        return string\n    else:\n        # Find the longest postfix of supplied string that is a palindrome\n        longest_palindrome = find_longest_palindrome(string)\n        # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n        return string + longest_palindrome[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not string:\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Find the longest palindromic substring\n    if not string:\n        return string\n    longest = ''\n    for i in range(len(string)):\n        for j in range(len(string), i, -1):\n            if is_palindrome(string[i:j]):\n                longest = string[i:j]\n    # Build palindrome by appending reverse of substring before longest palindrome to the end\n    palindrome = string + longest[::-1]\n    return palindrome\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            return prefix + string[i:]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    length = len(string)\n    if length < 2:\n        return string\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join(str(int(a_i) ^ int(b_i)) for a_i, b_i in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return format(int(a, 2) ^ int(b, 2), 'b')\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return str(int(a) ^ int(b))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert len(a) == len(b)\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n    max_len = max(len(s) for s in strings)\n    return [s for s in strings if len(s) == max_len][0]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    \n    max_len = max(len(x) for x in strings)\n    for string in strings:\n        if len(string) == max_len:\n            return string\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if strings == []:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    strings.sort(key=len, reverse=True)\n    return strings[0] if strings else None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if strings:\n        return max(strings, key=len)\n    else:\n        return None\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert a >= 0 and b >= 0, \"Only positive integers are used\"\n    if a == 0:\n        return b\n    return greatest_common_divisor(b%a, a)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    while a % b!= 0:\n        a, b = b, a % b\n    return b\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if a > b:\n        greatest_common_divisor(b, a)\n    elif a == 0:\n        return b\n    else:\n        return greatest_common_divisor(b % a, a)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    a, b = (a, b) if a >= b else (b, a)\n    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return b if a == 0 else greatest_common_divisor(b % a, a)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n    prefixes = all_prefixes(string[1:])\n    new_prefixes = [string[0] + s for s in prefixes]\n    prefixes.extend(new_prefixes)\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # final_str = string\n    # final_str = string.split(\" \")\n    final_str = string[0:]\n    # print(final_str)\n    all_list = []\n    for i in range(len(final_str)):\n        # print(final_str[i])\n        list1 = final_str[0:i+1]\n        all_list.append(list1)\n    # print(all_list)\n    return all_list\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    prefixes = []\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # n = len(string)\n    # prefixes = []\n    # for i in range(n):\n    #     prefixes.append(string[:i+1])\n    # return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert string, 'Input string cannot be empty.'\n    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    prefixes = [string[:i] for i in range(len(string) + 1)]\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return''.join(map(str,range(n+1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return''.join(map(str, range(n + 1)))\n    "
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return''.join(map(str,range(n+1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \" \".join(list(map(str, range(n + 1))))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0:\n        return \"0\"\n    else:\n        return str(n - 1) + \" \" + string_sequence(n - 1)\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n==0:\n        return '0'\n    else:\n        return''.join(map(str, range(n+1)))\n        \nif __name__ == '__main__':\n    print('Example:')\n    print(string_sequence(0))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert string_sequence(0) == '0'\n    assert string_sequence(1) == '1'\n    assert string_sequence(2) == '0 1'\n    assert string_sequence(5) == '0 1 2 3 4 5'\n    print('Cool! It works!'"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Method 1\n    # return''.join([str(i) for i in range(0, n+1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Use a list comprehension to generate a list of numbers, one per iteration.\n    # For example: [0, 1, 2, 3, 4, 5]\n    # Then cast that list into a string using the join() method: \"0 1 2 3 4 5\"\n    return \" \".join(map(str, [x for x in range(n + 1)]))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    characters = set()\n    for char in string:\n        characters.add(char.lower())\n    return len(characters)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(set([c.lower() for c in string]))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    dictionary = {}\n    for character in string:\n        if character.lower() in dictionary:\n            dictionary[character.lower()] += 1\n        else:\n            dictionary[character.lower()] = 1\n    return len(dictionary)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for letter in string:\n        letter_lower = letter.lower()\n        if letter_lower not in string:\n            count += 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    characters = set(string.lower())\n    return len(characters)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [len(note) for note in music_string.split('|')]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    music_string = music_string.replace('\\n', '')\n    music_string = music_string.replace(' ', '')\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return list(map(int, [x.strip() for x in music_string.split('|')]))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return list(map(lambda s: 4 if s == 'o' else 2 if s == 'o|' else 1, music_string.split('|')))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [4 if s == 'o' else 2 if s == 'o|' else 1 for s in music_string.split()]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return_list = []\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    notes = music_string.split('|')\n    result = []\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    notes = music_string.split('|')\n    for note in notes:\n        note = note.strip()\n        if note == '.':\n            result.append(1)\n        elif note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        else:\n            result.append(1)\n    return result\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [len(i) for i in music_string.split('|')]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            result += 1\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return string.count(substring)\n    \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    start_index = 0\n    while True:\n        start_index = string.find(substring, start_index)\n        if start_index == -1:\n            return count\n        count += 1\n        start_index += 1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = string.find(substring)\n    times = 1\n    while i!= -1:\n        i = string.find(substring, i+1)\n        times += 1\n    return times\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    pos = 0\n    while True:\n        pos = string.find(substring, pos)\n        if pos == -1:\n            break\n        else:\n            pos += 1\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    i = 0\n    count = 0\n    while i < len(string):\n        if string.startswith(substring, i):\n            i += len(substring)\n            count += 1\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    times = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            times += 1\n    return times\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    counter = 0\n    idx = 0\n    len_substring = len(substring)\n    while idx < len(string):\n        if string[idx:idx+len_substring] == substring:\n            counter += 1\n            idx += len_substring\n        else:\n            idx += 1\n    return counter\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n = len(string)\n    m = len(substring)\n    counter = 0\n    for i in range(n - m + 1):\n        if string[i:i + m] == substring:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # split the input string into a list of strings\n    # ['three', 'one', 'five']\n    # iterate through the list of strings and append the numbers into a list\n    # ['3', '1', '5']\n    # use the sort function on the list of strings to sort the numbers\n    # ['1', '3', '5']\n    # join the list of strings into a string\n    # 'one three five'\n    # return the resulting string\n    numbers_list = numbers.split()\n    numbers_list.sort()\n    sorted_numbers = \" \".join(numbers_list)\n    return sorted_numbers\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \" \".join(sorted(numbers.split(), key=int))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers = numbers.split(' ')\n    numbers.sort()\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \" \".join(sorted(numbers.split()))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    numbers = numbers.split(' ')\n    new_numbers = []\n    for i in numbers:\n        if i == 'zero':\n            new_numbers.append(0)\n        elif i == 'one':\n            new_numbers.append(1)\n        elif i == 'two':\n            new_numbers.append(2)\n        elif i == 'three':\n            new_numbers.append(3)\n        elif i == 'four':\n            new_numbers.append(4)\n        elif i == 'five':\n            new_numbers.append(5)\n        elif i =='six':\n            new_numbers.append(6)\n        elif i =='seven':\n            new_numbers.append(7)\n        elif i == 'eight':\n            new_numbers.append(8)\n        elif i == 'nine':\n            new_numbers.append(9)\n    return''.join([str(i) for i in sorted(new_numbers)])\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \" \".join(sorted(numbers.split()))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    number_list = [int(number) for number in numbers.split()]\n    number_list.sort()\n    return \" \".join(str(number) for number in number_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Make a list from the string\n    numbers = [n for n in numbers.split(\" \")]\n    # Sort the list\n    numbers.sort()\n    # Join the list with space characters\n    return \" \".join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers_list = numbers.split(' ')\n    numbers_list.sort()\n    return''.join(numbers_list)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    numbers.sort()\n    first, second = numbers[:2]\n    return (first, second) if first < second else (second, first)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[-2])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # For each number in the list:\n    #   1. Find the difference between the number and the first number in the list.\n    #   2. Find the difference between the number and the second number in the list.\n    #   3. If the first difference is smaller than the second difference, set that number as the smaller number.\n    #   4. If the first difference is larger than the second difference, set that number as the larger number.\n    #\n    # From the list we want to return the first two numbers that are the closest to each other.\n    #   1. For the list to have at least two numbers we need to loop over the list at least twice\n    #   2. The first time we find the smallest difference, the first number is the smaller number.\n    #   3. The second time we find the smallest difference, the second number is the smaller number.\n    #   4. The first time we find a difference larger than the previous smallest difference, the larger number is\n    #       the larger number.\n    #\n    # Finally, return the two numbers in the order of their smallest difference (smaller number, larger number).\n    #\n    # It should be noted that the return type should be a tuple (two numbers).\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers.sort()\n    result = None, None\n    for i, val in enumerate(numbers):\n        if i > 0 and val - numbers[i - 1] < numbers[i] - val:\n            result = numbers[i - 1], numbers[i]\n        elif i < len(numbers) - 1 and numbers[i + 1] - val < val - numbers[i]:\n            result = numbers[i], numbers[i + 1]\n    return result\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    numbers.sort()\n    \n    min_value = numbers[0]\n    max_value = numbers[-1]\n    \n    closest = (min_value, max_value)\n    \n    return closest\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert isinstance(numbers, list), \"Argument must be a list\"\n    assert len(numbers) >= 2, \"Length must be at least 2\"\n    numbers.sort()\n    difference = abs(numbers[0] - numbers[1])\n    min1 = numbers[0]\n    min2 = numbers[1]\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < difference:\n                difference = abs(numbers[i] - numbers[j])\n                min1 = numbers[i]\n                min2 = numbers[j]\n    return min1, min2\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # numbers = sorted(numbers)\n    # left = 0\n    # right = len(numbers) - 1\n    # closest_elements = [numbers[left], numbers[right]]\n    # smallest = min(closest_elements)\n    # largest = max(closest_elements)\n    # closest_elements.remove(smallest)\n    # closest_elements.remove(largest)\n    # smallest = min(closest_elements)\n    # largest = max(closest_elements)\n    # return (smallest, largest)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # raise NotImplementedError()\n    min1, max1 = None, None\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if min1 is None or diff < min1:\n                min1 = diff\n                a1, a2 = numbers[i], numbers[j]\n            if max1 is None or diff > max1:\n                max1 = diff\n                b1, b2 = numbers[i], numbers[j]\n    return (a1, a2) if min1 < max1 else (b1, b2)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    index_1 = 0\n    index_2 = 1\n    min_diff = float('inf')\n    for i in range(len(numbers) - 1):\n        current_diff = abs(numbers[index_1] - numbers[index_2])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            index_1 = i\n            index_2 = i + 1\n        elif numbers[i] < numbers[i + 1] and abs(numbers[index_1] - numbers[index_2]) < min_diff:\n            index_1 = i\n            index_2 = i + 1\n    return (numbers[index_1], numbers[index_2])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers.sort()\n    diff = float('inf')\n    closest_elements = (numbers[0], numbers[1])\n    for i in range(len(numbers)-1):\n        current_diff = numbers[i+1] - numbers[i]\n        if current_diff < diff:\n            diff = current_diff\n            closest_elements = (numbers[i+1], numbers[i])\n    return closest_elements\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # TODO: implement this!\n    min_num = min(numbers)\n    max_num = max(numbers)\n    diff = max_num - min_num\n    return [(n - min_num) / diff for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [n / max(numbers) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numbers.sort()\n    old_min = numbers[0]\n    old_max = numbers[-1]\n    new_min = 0.0\n    new_max = 1.0\n    old_delta = old_max - old_min\n    new_delta = new_max - new_min\n    scaled_nums = [0.0] * len(numbers)\n    for idx, num in enumerate(numbers):\n        # old_range = old_max - old_min\n        # new_range = new_max - new_min\n        # scaled_nums.append(num * new_range / old_range)\n        scaled_nums[idx] = (num - old_min) * new_delta / old_delta + new_min\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [n - min(numbers) for n in numbers] / (max(numbers) - min(numbers))\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [0.0 if num == min(numbers) else (1.0 if num == max(numbers) else num / max(numbers)) for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    min_value = min(numbers)\n    max_value = max(numbers)\n    rescale = [0] * len(numbers)\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numbers.sort()\n    new_numbers = []\n    for i in range(len(numbers)):\n        num = numbers[i]\n        new_num = (((num - numbers[0])/(numbers[len(numbers) - 1] - numbers[0]))*0.99) + 0.01\n        new_numbers.append(new_num)\n    return new_numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # print(numbers)\n    # find the smallest and largest value, and its index\n    smallest = min(numbers)\n    largest = max(numbers)\n    index_of_smallest = numbers.index(smallest)\n    index_of_largest = numbers.index(largest)\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [n / min(numbers) for n in numbers]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [x for x in values if type(x) == int]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [int(value) for value in values if isinstance(value, int) or isinstance(value, float)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [i for i in values if type(i) == int]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n    # return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = list()\n    for item in values:\n        if isinstance(item, int):\n            result.append(item)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: finish this\n    new_list = []\n    for value in values:\n        if isinstance(value, int):\n            new_list.append(value)\n    return new_list\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # return [i for i in values if isinstance(i, int)]\n    return [i for i in values if isinstance(i, int) or isinstance(i, bool)]\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return 0\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for char in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    length = 0\n    for i in string:\n        length += 1\n    return length\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for _ in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(string)):\n        count = count + 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for char in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # First number is largest divisor\n    max_divisor = 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return divisors(n)[-1]\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1:\n        return n\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert n >= 1\n    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert type(n) is int and n > 0\n    d = n - 1\n    while d > 0:\n        if n % d == 0:\n            return d\n        d -= 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n = abs(n)\n    k = 1\n    while (n % k!= 0):\n        k += 1\n    return n // k\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert n >= 1, 'Number should be positive'\n    assert isinstance(n, int), 'Input should be an integer'\n    if n == 1:\n        return 1\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    x, y = 0, 1\n    while n % x!= 0:\n        x, y = y, x + y\n    return y\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return max([i for i in range(1, n) if n % i == 0])\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    prime_numbers = []\n    for num in range(2, n + 1):\n        while n % num == 0:\n            prime_numbers.append(num)\n            n //= num\n    return prime_numbers\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n            if n == 1:\n                break\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 1:\n        return []\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Start with a list of all factors of 2, we'll remove it later\n    factors = [2]\n    # Start with the number\n    number = n\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    factors = []\n    p = 2\n    while n > 1:\n        if n % p == 0:\n            n //= p\n            factors.append(p)\n        else:\n            p += 1\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    p = 2\n    l = []\n    while p * p <= n:\n        if n % p == 0:\n            n //= p\n            l.append(p)\n        else:\n            p += 1\n    if n > 1:\n        l.append(n)\n    return l\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            result.append(i)\n            n //= i\n        else:\n            i += 1\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    i = 2\n    factors = []\n    while n!= 1:\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n        else:\n            i += 1\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    factor = 2\n    factors = []\n    while factor <= n:\n        if n % factor == 0:\n            n //= factor\n            factors.append(factor)\n        else:\n            factor += 1\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # init result\n    result = list()\n    # convert n to string\n    s = str(n)\n    # iterate through the string\n    for i in range(len(s)):\n        # extract one character at a time\n        c = s[i]\n        # init variable to count how many times the character c has appeared so far\n        count = 0\n        # check if the character c appears more than once\n        # and if so, how many times\n        for j in range(i, len(s)):\n            if s[j] == c:\n                count += 1\n        # add the count to the result\n        result.append(count)\n    # return the result\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # list_of_numbers = []\n    # for i in numbers:\n    #     if i not in list_of_numbers:\n    #         list_of_numbers.append(i)\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    if len(numbers) == 2:\n        if numbers[0] == numbers[1]:\n            return [numbers[0]]\n        else:\n            return numbers\n    \n    # numbers[0] is the first number\n    # if it is a duplicate then remove it and move on\n    if numbers[0] in numbers[1:]:\n        numbers.pop(0)\n    return remove_duplicates(numbers)\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    new_numbers = []\n    for i in numbers:\n        if i not in new_numbers:\n            new_numbers.append(i)\n    return new_numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # for i in numbers:\n    #     if numbers.count(i) > 1:\n    #         numbers.remove(i)\n    # return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    numbers_no_dupes = []\n    for num in numbers:\n        if num not in numbers_no_dupes:\n            numbers_no_dupes.append(num)\n    return numbers_no_dupes\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    out = []\n    for number in numbers:\n        if number not in out:\n            out.append(number)\n    return out\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    new_list = []\n    for i in numbers:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    seen = set()\n    result = []\n    for n in numbers:\n        if n not in seen:\n            seen.add(n)\n            result.append(n)\n    \n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: your code here\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    return [x for x in numbers if numbers.count(x) == 1]\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return \"\".join(map(lambda c: c.lower() if c.isupper() else c.upper(), string))"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return ''.join(i.upper() if i.islower() else i.lower() for i in string)\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    string_list = list(string)\n    for i in range(len(string_list)):\n        if string_list[i].isupper():\n            string_list[i] = string_list[i].lower()\n        elif string_list[i].islower():\n            string_list[i] = string_list[i].upper()\n    return ''.join(string_list)\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    flipped = ''\n    for char in string:\n        if char.isupper():\n            flipped = flipped + char.lower()\n        elif char.islower():\n            flipped = flipped + char.upper()\n    return flipped\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # base case: if string is empty, return empty string\n    if len(string) == 0:\n        return ''\n    # else, if first character is lowercase, return flip_case(string[1:]) + first_char.lower()\n    elif string[0].islower():\n        return flip_case(string[1:]) + string[0].lower()\n    # else, if first character is uppercase, return flip_case(string[1:]) + first_char.upper()\n    elif string[0].isupper():\n        return flip_case(string[1:]) + string[0].upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return ''.join(list(map(lambda x: x.swapcase(), list(string))))\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join([c.lower() if c.isupper() else c.upper() for c in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    flipped = ''\n    for character in string:\n        if character.isupper():\n            flipped += character.lower()\n        else:\n            flipped += character.upper()\n    return flipped\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = ''\n    for string in strings:\n        result += string\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # TODO: write implementation\n    return \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    filtered = [s for s in strings if s.startswith(prefix)]\n    return filtered\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for word in strings:\n        if word.startswith(prefix):\n            result.append(word)\n    return result\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert strings, \"The input list must not be empty.\"\n    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert strings, 'Cannot filter an empty list of strings.'\n    assert prefix, 'Prefix cannot be an empty string.'\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [num for num in l if num >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [x for x in l if x >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [i for i in l if i > 0]\n    # return [i for i in l if i >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return False\n    for k in range(2,n):\n        if n % k == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = 2\n    while i <= n ** 0.5:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    divisor_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_list.append(i)\n    if len(divisor_list) == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    #return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return False\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i = i + 1\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    k, l = 5, n**0.5\n    while k <= l:\n        if n % k == 0:\n            return False\n        if n % (k + 2) == 0:\n            return False\n        k += 6\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 1:\n        return False\n    if n < 4:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert len(xs) % 2 == 0, \"xs should have even number of coefficients\"\n    assert max(xs)!= 0, \"xs should have largest non zero coefficient\"\n    xs = xs[::-1]\n    n = len(xs)\n    \n    # bounding to [0, 1]\n    x_0, x_1 = 0, 1\n    y_0, y_1 = poly(xs, x_0), poly(xs, x_1)\n    if y_0 * y_1 < 0:\n        return (x_0 + x_1) / 2\n    else:\n        for i in range(1, n):\n            x = x_0 + (x_1 - x_0) / (y_1 - y_0) * y_0\n            y = poly(xs, x)\n            if y_0 * y < 0:\n                x_1 = x\n                y_1 = y\n            else:\n                x_0 = x\n                y_0 = y\n        return x\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Only even xs and largest non zero coefficient\n    xs = xs[1::2] + xs[::2]\n    # Find a, b\n    a = xs[0]\n    b = xs[1]\n    # From b and a, find x\n    return -b / a\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not xs:\n        return None\n    if len(xs) % 2 == 1:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n    if not any(xs):\n        return None\n    highest_non_zero_coeff_index = len(xs) - 1 - xs[::-1].index(0)\n    if xs[highest_non_zero_coeff_index] < 0:\n        highest_non_zero_coeff_index += 1\n    highest_non_zero_coeff = xs[highest_non_zero_coeff_index]\n    xs_without_highest_non_zero_coeff = xs[:highest_non_zero_coeff_index]\n    xs_without_highest_non_zero_coeff.reverse()\n    solutions = []\n    for i in range(len(xs_without_highest_non_zero_coeff) + 1):\n        solutions.extend([\n            round((- highest_non_zero_coeff / highest_non_zero_coeff_index) * i + x, 3)\n            for i in range(highest_non_zero_coeff_index + 1)\n        ])\n    return solutions[0] if len(solutions) == 1 else sorted(solutions)\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert len(xs) % 2 == 0\n    assert 0 not in xs\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert len(xs) % 2 == 0, \"xs should have even number of coefficients\"\n    assert max(xs) > 0, \"largest non-zero coefficient should be positive\"\n    \n    xs = xs[::-1]\n    # max_magnitude = max(xs)\n    # max_index = xs.index(max_magnitude)\n    # xs = xs[:max_index + 1]\n    # max_magnitude = max(xs)\n    # xs = xs[xs.index(max_magnitude):]\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n = len(xs)\n    if n % 2!= 0 or n == 0:\n        raise ValueError('Coefficients list must have even number of coefficients.')\n    if n == 2:\n        return -xs[1] / xs[0]\n    if n == 4:\n        return -xs[1] / (xs[0] + xs[2])\n    # find initial guess\n    init_guess = 0\n    init_guess = -poly(xs[1:], init_guess) / poly(xs[:1], init_guess)\n    if init_guess == 0:\n        raise ValueError('All coefficients must be different from zero.')\n    # binary search\n    left, right = init_guess, init_guess + 1\n    while right - left > 1e-5:\n        mid = (left + right) / 2\n        if poly(xs, mid) < 0:\n            left = mid\n        else:\n            right = mid\n    return left\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert len(xs) % 2 == 0, \"length of list xs must be even\"\n    assert max(xs) > 0, \"largest coefficient must be positive\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return (-1 * xs[-1] - math.sqrt(xs[-1] ** 2 - 4 * xs[-2] * xs[-1])) / 2 / xs[-2]\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"Number of coefficients must be even.\")\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"Number of coefficients should be even!\")\n    for i in range(n):\n        if xs[i]!= 0:\n            xs[i] = 1 / xs[i]\n            for j in range(i + 1, n):\n                xs[j] *= xs[i]\n    return sum(xs)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a = []\n    b = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            a.append(l[i])\n        else:\n            b.append(l[i])\n    b = sorted(b)\n    return a + b\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    if len(l) < 3:\n        return None\n    \n    divisors = []\n    not_divisors = []\n    \n    for i in range(0, len(l)):\n        if i % 3 == 0 or i % 5 == 0:\n            divisors.append(i)\n        else:\n            not_divisors.append(i)\n    \n    sorted_divisors = sorted(divisors)\n    \n    for i in range(0, len(l)):\n        if i in not_divisors:\n            l[i] = l[i]\n        else:\n            l[i] = sorted_divisors.pop(0)\n    \n    return l\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l = l[:]\n    for i in range(len(l)):\n        if (i % 3)!= 0:\n            l[i] = l[i]\n    l.sort()\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l_prime = list()\n    for i in l:\n        if i % 3!= 0:\n            l_prime.append(i)\n    l_prime = sorted(l_prime)\n    for i in l:\n        if i % 3 == 0:\n            l_prime.append(i)\n    return l_prime\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [x for x in l if x%3!=0]+sorted([x for x in l if x%3==0])\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l_copy = l[:]\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = min(l_copy[i], l[i // 3])\n        else:\n            l_copy[i] = min(l_copy[i], l[i - 1])\n    return l_copy\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # code below is correct but has some issues with indexing. could you solve this without indexing?\n    # l_new = l.copy()\n    # for i in range(len(l)):\n    #     if i % 3 == 0:\n    #         l_new[i] = min(l[i], l[i+1], l[i+2])\n    #     elif i % 3 == 1:\n    #         l_new[i] = min(l[i], l[i+1], l[i-1])\n    #     else:\n    #         l_new[i] = min(l[i], l[i+1], l[i-2])\n    # return l_new\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not isinstance(l, list) or len(l) == 0:\n        return l\n    if len(l) == 1:\n        return l\n    first = l[0]\n    sorted_list = []\n    second_list = []\n    for item in l:\n        if item == first:\n            continue\n        elif item % 3 == 0:\n            second_list.append(item)\n        else:\n            sorted_list.append(item)\n    sorted_list.sort()\n    sorted_list.append(first)\n    sorted_list += sorted(second_list)\n    return sorted_list\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l1 = []\n    for i in range(len(l)):\n        if i%3==0:\n            l1.append(l[i])\n    l2 = []\n    for i in range(len(l)):\n        if i%3!=0:\n            l2.append(l[i])\n    l1.sort()\n    l2.sort()\n    l3 = l1 + l2\n    return l3\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #we can do this by using two for loops, the first one throught the list, the second one throught the list and\n    #a third loop throught the second list. We should use the index in the original list to know if we want to add it to the first or second list,\n    #and we should use the index in the second list to know if we want to add it to the first or second list.\n    #Remember that lists indexing start at 0.\n    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if i%3 == 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l1.sort()\n    l1 = l1 + l2\n    return l1\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if l is None:\n        return []\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    x = []\n    for a in l:\n        if a not in x:\n            x.append(a)\n    x.sort()\n    return x\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return list(sorted(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s = set()\n    return [i for i in l if i not in s and not s.add(i)]\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    u = []\n    for v in l:\n        if v not in u:\n            u.append(v)\n    return u\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    maximum = l[0]\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    largest = l[0]\n    for i in l:\n        if i > largest:\n            largest = i\n    return largest\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    max = l[0]\n    for i in range(len(l)):\n        if max < l[i]:\n            max = l[i]\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(l) == 0:\n        return None\n    max_num = l[0]\n    for i in l:\n        if i > max_num:\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(l) == 0:\n        return None\n    max = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max:\n            max = l[i]\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(l) == 0:\n        return 'Empty list'\n    m = l[0]\n    for i in range(len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    max_item = l[0]\n    for i in l:\n        if i > max_item:\n            max_item = i\n    return max_item\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(1 for i in range(n) if (i%11==0 or i%13==0) and str(i).count(\"7\")>0)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    counter = 0\n    for i in range(1, n+1):\n        if (i % 11 == 0 or i % 13 == 0) and \"7\" in str(i):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            if 7 in str(num):\n                count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n % 11 == 0 or n % 13 == 0:\n        return fizz_buzz_dict.get(n, 0)\n    return 0\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def f(n):\n        counter = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                if 7 in str(i):\n                    counter += 1\n        return counter\n    return f(n)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #return sum(n // 11 * n // 13 for n in range(1, n + 1) if n % 11 == 0 or n % 13 == 0)\n    return sum(n % 11 == 0 or n % 13 == 0 for n in range(1, n + 1))\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if \"7\" in str(i):\n                count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if i%11 == 0 or i%13 == 0:\n            if i%7 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n < 7:\n        return 0\n    else:\n        return n // 11 + n // 13 - n // 17\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for num in range(n):\n        if num % 11 == 0 or num % 13 == 0:\n            if \"7\" in str(num):\n                count += 1\n    return count\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        l[i] = sort_even_helper(l, i)\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # for i in range(len(l)):\n    #     if i % 2 == 0:\n    #         l[i], l[i+1] = l[i+1], l[i]\n    # return l\n    return sorted(l, key=lambda x: x if x % 2 == 0 else 0)\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l_even = []\n    l_odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n        else:\n            l_odd.append(l[i])\n    return l_odd + sorted(l_even)\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    # initialize a new list with the same elements as the old list\n    new_list = [item for item in l]\n    \n    # loop over every element of the list and swap it into the correct spot in the new list\n    for i in range(len(new_list)):\n        if i % 2 == 0:\n            new_list[i] = l[i]\n        else:\n            new_list[i] = sorted([i for i in l if i % 2 == 0])[0]\n    \n    return new_list\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # the even indicies will become a list of the elements in l with even indicies\n    even_indicies = [l[x] for x in range(1, len(l), 2)]\n    # the even indicies will be sorted\n    even_indicies.sort()\n    # the even indicies will be appended to the even indicies of l\n    even_indicies.extend(l[0:1])\n    # l' will be a copy of l\n    l_copy = l[:]\n    # for the odd indicies, their value will be set to 0 and then added to l_copy\n    for x in range(0, len(l), 2):\n        l_copy[x] = 0\n    # l' will be a copy of l where the even indicies have been removed, and set to 0\n    l_copy = [l_copy[x] for x in range(0, len(l), 2)]\n    # l' will be a copy of l where the even indicies have been removed, and set to 0\n    l_copy.extend([l_copy[x] for x in range(1, len(l), 2)])\n    return l_copy\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # TODO: implement this function\n    odd_list = []\n    for i in range(1, len(l), 2):\n        odd_list.append(l[i])\n    odd_list.sort()\n    even_list = []\n    for i in range(0, len(l), 2):\n        even_list.append(l[i])\n    even_list.sort()\n    new_list = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_list.append(even_list[i//2])\n        else:\n            new_list.append(odd_list[i//2])\n    return new_list\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in range(len(l) // 2):\n        l[i], l[len(l) - 1 - i] = l[len(l) - 1 - i], l[i]\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    length = len(l)\n    for i in range(1, length):\n        j = i\n        while j > 0 and l[j] % 2 == 0 and l[j-1] % 2!= 0:\n            l[j], l[j-1] = l[j-1], l[j]\n            j -= 1\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(l) < 2:\n        return l\n    else:\n        return l[:2] + sort_even(l[2:])\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l2 = l[::2]\n    l2.sort()\n    return l2 + l[1::2]\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return encode_cyclic(encode_cyclic(s))\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    groups = []\n    # if string has length at least 3.\n    if len(s) >= 3:\n        # split string into groups of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # check if there are any groups with length less than 3. If so, cut them.\n        groups = [group if len(group) == 3 else group[1:] for group in groups]\n        # replace each group in decoded string with group minus first character.\n        groups = [group[1:] + group[0] for group in groups]\n    # if string has length less than 3, pad it by adding first element to last two.\n    if len(s) < 3:\n        s += s[:3 - len(s)]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # if group has 3 elements, add one to element in second position,\n    # then remove first and second elements.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # reverse cyclic groups.\n    s = s[::-1]\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # return combined elements of each group.\n    return \"\".join([group[1:] + group[0] for group in groups])\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # split groups into separate groups\n    groups = [group.split(group[0]) for group in groups]\n    # decode each group\n    groups = [group[1] + group[0] for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # decode groups, each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # separate groups and add first character of first group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # split string into groups of 3.\n    groups = [s[3 * i:3 * i + 3] for i in range((len(s) + 1) // 3)]\n    # decode each group by cyclically adding 1.\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a = 1\n        b = 2\n        while a < n and is_prime(b):\n            b += 1\n        return b - 1\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 2\n    a, b = 1, 1\n    i = 0\n    while i < n-1:\n        a, b = b, a+b\n        if is_prime(b):\n            i += 1\n    return b\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    fib_num = fib(n)\n    for i in range(2, fib_num):\n        if not is_prime(i):\n            return i\n    return fib_num\n    \ndef main():\n    n = int(input())\n    print(prime_fib(n))\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return next(n for n in prime_fib_generator(n) if n % 10 == 8)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # you can probably guess that this is an exponential time solution\n    # try to improve this to linear time\n    primes = [2, 3, 5, 7]\n    i = 1\n    while len(primes) < n:\n        a = primes[-2:]\n        b = primes[-1]\n        c = a[0] + b\n        d = c + b\n        if c % d == 0:\n            primes.append(d)\n            i += 1\n        else:\n            primes.append(c)\n            i += 1\n    return primes[n - 1]"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n <= 0:\n        return\n    f1 = 1\n    f2 = 2\n    f3 = f1 + f2\n    i = 3\n    while i <= n:\n        if is_prime(f3):\n            f1 = f2\n            f2 = f3\n            f3 = f1 + f2\n            i += 1\n        else:\n            f3 = f1 + f2\n            f2 = f3 - f1\n            f1 = f3 - f2\n            i += 1\n    return f3\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert n > 0\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        prev_n = 1\n        cur_n = 2\n        i = 3\n        while i <= n:\n            prev_n = cur_n\n            cur_n = prev_n + cur_n\n            i += 1\n        if is_prime(cur_n):\n            return cur_n\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        a = 0\n        b = 1\n        while b < n:\n            a, b = b, a+b\n        return b\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(n):\n        for j in range(2, n):\n            if not gcd(j, i) == 1:\n                break\n        else:\n            return i\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i == j or i == k or j == k:\n                    continue\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    seen = {}\n    for elem in l:\n        if elem in seen:\n            seen[elem] += 1\n        else:\n            seen[elem] = 1\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l.sort()\n    for i, _ in enumerate(l):\n        for j, _ in enumerate(l[i:]):\n            for k, _ in enumerate(l[i + j:]):\n                if i + j + k == 0 and l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    found_triples = []\n    for x in l:\n        for y in l:\n            for z in l:\n                if x + y + z == 0:\n                    if (x, y, z) not in found_triples:\n                        found_triples.append((x, y, z))\n    return len(found_triples) == 3\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l.sort()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if (l[i] + l[j] + l[k] == 0):\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    l.sort()\n    \n    for i, v in enumerate(l):\n        for j, u in enumerate(l[i:]):\n            for k, w in enumerate(l[j:]):\n                if (u + v + w) == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l = sorted(l)\n    for i in range(len(l) - 2):\n        # check for 3 zeros in list, if so, then return True\n        if (l[i] + l[i + 1] + l[i + 2]) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        if l[i] == 0:\n            return False\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                for k in range(j + 1, len(l)):\n                    if l[j] + l[k] == 0 and l[k]!= l[i]:\n                        return True\n    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    cars_left = n\n    cars_right = n\n    while True:\n        cars_left_speed = car_left_speed(cars_left)\n        cars_right_speed = car_right_speed(cars_right)\n        if (cars_left_speed > cars_right_speed):\n            cars_right -= 1\n            if cars_right == 0:\n                return cars_left\n        else:\n            cars_left -= 1\n            if cars_left == 0:\n                return cars_right\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert(n > 0)\n    # trivial case\n    if n == 1:\n        return 0\n    # determine what is the position of the last car that we'll drive left\n    #  (left_end)\n    # and what is the position of the last car that we'll drive right (right_end)\n    left_end = n - 1\n    right_end = n - 1\n    # adjust right_end to be right to the leftmost car\n    while right_end % 2 == 1:\n        right_end -= 1\n    while left_end % 2 == 0:\n        left_end -= 1\n    # we can now expect that the number of cars in the left-most car is left_end\n    # and the number of cars in the right-most car is right_end\n    # we can find the number of cars in the middle car by subtracting left_end from right_end\n    middle_car = right_end - left_end\n    # now, assume that we're at position right_end, and we need to move left.\n    # if there are more left cars than right cars, we'll need to move right.\n    # We'll keep incrementing the number of right cars until we've run out\n    # of left cars.  When we do, we'll need to move left again.\n    # So, we'll do this until we've exhausted the left cars.\n    total_cars = 0\n    while left_end > 0:\n        total_cars += left_end\n        right_end += left_end\n        left_end -= 1\n        if right_end > left_end:\n            right_end -= 1\n    # our final right_end should be right_end + 1, so subtract one more\n    total_cars += right_end\n    return total_cars\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n > 0\n    assert n % 2 == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    from random import randint\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert n >= 2\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return 2*car_race_collision(n-1) + car_race_collision(n-2)\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                continue\n            else:\n                if i > j:\n                    count += 1\n                elif i < j:\n                    count += 2\n    return count\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Increment list\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [e + 1 for e in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [e+1 for e in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(-num)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # getting the list in sorted order\n    l = sorted(l)\n    # iterating the list\n    for i in range(len(l)):\n        # if the number is not the last element\n        if i < len(l)-1:\n            # if the sum of the two elements is zero\n            if l[i] + l[i+1] == 0:\n                # return True\n                return True\n    # return False\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    dict = {}\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i!=j:\n                if l[i]+l[j] == 0 and l[i] not in dict.keys():\n                    dict[l[i]] = l[j]\n                elif l[i]+l[j] == 0 and l[j] not in dict.keys():\n                    dict[l[j]] = l[i]\n    if len(dict) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in l:\n        if -i in l:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    seen = set()\n    for x in l:\n        if x in seen:\n            return True\n        seen.add(x*-1)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n = len(l)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if (l[i] + l[j] == 0):\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Insert your code here\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    n = len(l)\n    if n < 2:\n        return False\n    d = {}\n    for i in range(0, n):\n        if l[i] in d:\n            return True\n        d[l[i]] = i\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # your code goes here\n    raise NotImplementedError\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return two_sum(l, 0)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return bin(x)[2:] if base == 2 else oct(x)[2:] if base == 8 else hex(x)[2:] if base == 16 else str(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert base < 10, \"Base should be less than 10\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    out_base = []\n    x = int(x)\n    while x >= base:\n        x, y = divmod(x, base)\n        out_base.append(str(y))\n    out_base.append(str(x))\n    return ''.join(out_base[::-1])\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if base > 10 or base < 2:\n        return None\n    new_number = ''\n    while x:\n        new_number = str(x % base) + new_number\n        x = x // base\n    return new_number\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    base_num = \"\"\n    while x!= 0:\n        base_num += str(x % base)\n        x = x // base\n    return base_num[::-1]\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x = x // base\n    return res\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if base == 10:\n        return str(x)\n    elif x <= 0:\n        return '0'\n    elif base == 2:\n        return '{:b}'.format(x)\n    elif base == 8:\n        return oct(x)[2:]\n    elif base == 16:\n        return hex(x)[2:].upper()\n    elif base == 7:\n        return ''.join(str(int(i) * (base - 1)) for i in x)\n    elif base == 6:\n        return ''.join(str(int(i) * (base - 1)) for i in x)\n    else:\n        return 'Invalid base'\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n    # change_base(x, base)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = base\n    m = 0\n    while x >= n:\n        x, r = divmod(x, n)\n        m += r * n ** (n - 1)\n    m += x\n    return m\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = ''\n    remainder = x\n    while remainder!= 0:\n        digit = remainder % base\n        remainder = remainder // base\n        result = str(digit) + result\n    return result\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (a * h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return a * h / 2\n    \ndef square_area(a):\n    \"\"\"Given length of a side return area for a square.\n    >>> square_area(5)\n    25\n    \"\"\"\n    return a * a\n    \ndef rectangle_area(a, b):\n    \"\"\"Given length of two sides return area for a rectangle.\n    >>> rectangle_area(5, 3)\n    15\n    \"\"\"\n    return a * b\n    \ndef circle_area(r):\n    \"\"\"Given radius of the circle return its area.\n    >>> circle_area(5)\n    78.5\n    \"\"\"\n    return 3.14 * r * r\n    \ndef ellipse_area(a, b):\n    \"\"\"Given a and b return the area of the ellipse.\n    >>> ellipse_area(5, 3)\n    94.4\n    \"\"\"\n    return 3.14 * a * b\n    \ndef parallelogram_area(a, b):\n    \"\"\"Given a and b return the area of the parallelogram.\n    >>> parallelogram_area(5, 3)\n    30\n    \"\"\"\n    return a * b\n    \ndef trapezium_area(a, b, h):\n    \"\"\"Given a, b, and h return the area of the trapezium.\n    >>> trapezium_area(5, 3, 2)\n    15.3\n    \"\"\"\n    return (a + b) / 2 * h\n    \ndef rhombus_area(a, h):\n    \"\"\"Given a and h return the area of the rhombus.\n    >>> rhombus_area(5, 2)\n    10.5\n    \"\"\"\n    return a * h / 2\n    \ndef kite_area(a, h):\n    \"\"\"Given a and h return the area of the kite.\n    >>> kite_area(5, 3)\n    15\n    \"\"\"\n    return a * h"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Use the formula for the Fib4 number sequence:\n    # f(n) = f(n-1) + f(n-2) + f(n-3) + f(n-4)\n    # f(0) = 0, f(1) = 0, f(2) = 2, f(3) = 0\n    # f(4) = 2, f(5) = 4, f(6) = 8, f(7) = 14\n    # f(n) = f(n-1) + f(n-2) + f(n-3) + f(n-4)\n    # f(0) = 0, f(1) = 0, f(2) = 2, f(3) = 0\n    # f(4) = 2, f(5) = 4, f(6) = 8, f(7) = 14\n    # f(8) = f(7) + f(6) + f(5) + f(4)\n    # f(8) = 14 + 8 + 4 + 2\n    # f(8) = 28\n    if n < 2:\n        return n\n    n0, n1, n2, n3 = 0, 0, 2, 0\n    for i in range(1, n):\n        f = n0 + n1 + n2 + n3\n        n0, n1, n2, n3 = n1, n2, n3, f\n    return f\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    fib4_dict = {0:0, 1:0, 2:2, 3:0}\n    if n >= 4:\n        for i in range(4, n+1):\n            fib4_dict[i] = fib4_dict[i-1] + fib4_dict[i-2] + fib4_dict[i-3] + fib4_dict[i-4]\n    return fib4_dict[n]\n    "
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n >= 0, \"n cannot be a negative integer.\"\n    fib4_dict = {0: 0, 1: 0, 2: 2, 3: 0}\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    fib1 = 0\n    fib2 = 2\n    fib3 = 0\n    fib4 = 2\n    if n < 2:\n        return n\n    for i in range(2, n):\n        fib4 = fib1 + fib2 + fib3 + fib4\n        fib1 = fib2\n        fib2 = fib3\n        fib3 = fib4\n    return fib4\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    prev = 0\n    curr = 1\n    for i in range(n-1):\n        prev, curr = curr, prev + curr\n    return curr\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n_1, n_2 = 0, 2\n    if n < 2:\n        return n\n    if n > 2:\n        for i in range(3, n+1):\n            n_1, n_2 = n_2, n_1 + n_2\n    return n_2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0 or n == 1:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n >= 0\n    result = 0\n    a, b, c, d = 0, 1, 2, 3\n    i = 0\n    while i < n:\n        result = c\n        a, b, c, d = b, c, d, (c + d)\n        i += 1\n    return result\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # if n == 0 or n == 1:\n    #     return n\n    # return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2 - 1] + l[len(l)//2])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[(len(l)//2) - 1]) / 2\n    return l[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[(n - 1) // 2]\n    return (l[n // 2 - 1] + l[n // 2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Sort the list in ascending order.\n    l.sort()\n    # If the list has an odd length, return the middle element.\n    if len(l) % 2!= 0:\n        return l[len(l)//2]\n    # If the list has an even length, return the average of the middle two elements.\n    return (l[len(l)//2-1] + l[len(l)//2])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # XXX: replace by.sort()\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return 0.5 * (l[n // 2 - 1] + l[n // 2])\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l = sorted(l)\n    n = len(l)\n    if n % 2:\n        return l[n//2]\n    return (l[n//2 - 1] + l[n//2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    return l[len(l) // 2]\n    \n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return median_helper(l, 0, len(l)-1)\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l.sort()\n    if not len(l) % 2:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    return l[len(l)//2]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return is_palindrome_recursive(text)\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return text == reverse(text)\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(text) <= 1:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # text = text.lower()\n    # for i, letter in enumerate(text):\n    #     if letter!= text[len(text)-i-1]:\n    #         return False\n    # return True\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # solution 1\n    return text == text[::-1]\n    # solution 2\n    # return text == \"\".join(reversed(text))\n    # solution 3\n    # return text == \"\".join(reversed(text.casefold()))\n    # solution 4\n    # return text == \"\".join(reversed(text.casefold()))\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(text) == 0:\n        return True\n    elif len(text) == 1:\n        return True\n    elif text[0] == text[len(text)-1]:\n        return is_palindrome(text[1:len(text)-1])\n    else:\n        return False\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n < 0:\n        n = -n\n        return pow(2, n, p)\n    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # BASE CASE\n    if n == 0:\n        return 1\n    if n == 1:\n        return p - 1\n    \n    # RECURSIVE CASE\n    return modp(n - 1, p) + p - 1\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 0:\n        n = -n\n        p = 1\n    n0 = n\n    result = 1\n    while n0 >= p:\n        if n0 % p == 0:\n            n0 = n0 // p\n            result = result * p\n        else:\n            n0 = n0 - 1\n            result = result * 2\n    return result\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 0:\n        raise ValueError('n must be a non-negative integer.')\n    if p < 2:\n        raise ValueError('p must be an odd prime number.')\n    # TODO: Implement this function.\n    #raise NotImplementedError('modp(n, p) is not implemented yet.')\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    return (modp(n-1, p) * 2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 0:\n        return -1\n    if n % p == 0:\n        return 0\n    return 1\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n > p:\n        return modp(n - 1, p)\n    elif n < 0:\n        return -1\n    return 2 ** n % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 1:\n        return (2*modp(n-1, p)) % p\n    else:\n        return modp(n//2, p)**2 % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert n >= 0, \"n must be non-negative\"\n    assert p >= 2, \"p must be at least 2\"\n    return pow(2, n, p)\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not isinstance(text, str):\n        raise TypeError('text must be a string')\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    result = \"\"\n    for letter in text:\n        if letter.lower() not in vowels:\n            result += letter\n    return result\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels_text = []\n    for char in text:\n        if char not in vowels:\n            vowels_text.append(char)\n    return \"\".join(vowels_text)\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_text = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowels = ('a', 'e', 'i', 'o', 'u')\n    new_string = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    output = \"\"\n    for x in text:\n        if x.lower() not in vowels:\n            output += x\n    return output\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    vowels = \"aeiou\"\n    return \"\".join([v for v in text if v not in vowels])\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowel = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = \"\"\n    for char in text:\n        if char not in vowel:\n            result += char\n    return result\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for i in text:\n        if i in vowels:\n            text = text.replace(i,'')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    vowels = 'aAeEiIoOuU'\n    for c in text:\n        if c.lower() in vowels:\n            text = text.replace(c, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowels = 'aeiouAEIOU'\n    vowels_list = [x for x in text if x in vowels]\n    for vowel in vowels_list:\n        text = text.replace(vowel, \"\")\n    return text\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # for num in l:\n    #     if num >= t:\n    #         return False\n    # return True\n    return all(num < t for num in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return all(i < t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for n in l:\n        if n > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return all(i<t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    i = 0\n    while i < len(l) and l[i] <= t:\n        i += 1\n    return i == len(l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return all(num < t for num in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for n in l:\n        if n >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return all(i < t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return all(n < t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for x in l:\n        if x >= t:\n            return False\n    return True\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x+y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return all(ch0 == ch1 for ch0, ch1 in zip(s0, s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst0 = []\n    lst1 = []\n    if len(s0)!= len(s1):\n        return False\n    for ch in s0:\n        if ch not in lst0:\n            lst0.append(ch)\n    for ch in s1:\n        if ch not in lst1:\n            lst1.append(ch)\n    return lst0 == lst1\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len(set(s0) & set(s1)) == len(s0)\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(set(s0) & set(s1)) == len(s0) == len(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not s0 or not s1:\n        return False\n    s0 = list(s0)\n    s1 = list(s1)\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(s0)) == sorted(list(s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return all(i in s0 and i in s1 for i in s0)\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s0_set = set()\n    s1_set = set()\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for c in s0:\n        if c not in s1:\n            return False\n    for c in s1:\n        if c not in s0:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len(s0) == len(s1) and all(s0.count(x) == s1.count(x) for x in set(s0))\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a, b = 1, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n < 2:\n        return n\n    return fib(n - 2) + fib(n - 1)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n<=1:\n        return n\n    else:\n        return fib(n-1)+fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    a = 1\n    b = 1\n    fib_n = 1\n    for i in range(1, n):\n        fib_n = a + b\n        a = b\n        b = fib_n\n    return fib_n\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert n >= 0, 'n must be >= 0'\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 0:\n        raise ValueError(\"Negative n\")\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 2) + fib(n - 1)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 0:\n        return -1\n    elif n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n<=1:\n        return n\n    else:\n        return fib(n-1)+fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    bracket_stack = []\n    for c in brackets:\n        if c == \"<\":\n            bracket_stack.append(\"<\")\n        elif c == \">\":\n            if bracket_stack == []:\n                return False\n            elif bracket_stack[-1] == \"<\":\n                bracket_stack.pop()\n            else:\n                return False\n    return bracket_stack == []\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_stack.append(bracket)\n        elif bracket == '>':\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                return False\n    return not bracket_stack\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    opened_brackets = 0\n    for b in brackets:\n        if b == '<':\n            opened_brackets += 1\n        else:\n            opened_brackets -= 1\n        if opened_brackets < 0:\n            return False\n    return opened_brackets == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    open_stack = []\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    brackets_list = []\n    for ch in brackets:\n        if ch == \"<\":\n            brackets_list.append(ch)\n        elif ch == \">\":\n            if len(brackets_list) == 0:\n                return False\n            else:\n                brackets_list.pop()\n    return len(brackets_list) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    brackets = list(brackets)\n    if len(brackets) % 2!= 0:\n        return False\n    opener, closer = brackets[0], brackets[-1]\n    stacks = []\n    for bracket in brackets:\n        if bracket == opener:\n            stacks.append(bracket)\n        elif bracket == closer:\n            if not stacks or stacks.pop()!= opener:\n                return False\n        else:\n            return False\n    return not stacks\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    bracket_list = brackets.split(\"<\")\n    bracket_list = [ x for x in bracket_list if x!= '' ]\n    bracket_list = [ x for x in bracket_list if x!= \">\" ]\n    if len(bracket_list) > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    bracket_stack = []\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(set(l)) == len(l) or all(l[i] < l[i+1] for i in range(len(l)-1)) or all(l[i] > l[i+1] for i in range(len(l)-1))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n           or all(l[i] >= l[i + 1] for i in range(len(l) - 1)))\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return all(a <= b for a, b in zip(l, l[1:])) or all(a >= b for a, b in zip(l, l[1:]))\n    \ndef fibonacci(n: int) -> int:\n    \"\"\"Return the nth Fibonacci number, for n>=0\"\"\"\n    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = 0\n    j = 1\n    while i < len(l) - 1:\n        if l[j] == l[j + 1]:\n            return True\n        elif l[j] < l[j + 1]:\n            j += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return monotonic_inc(l) if is_monotonic_inc(l) else monotonic_dec(l)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(l) < 3:\n        return True\n    else:\n        return (l[1] - l[0] <= 0 and l[2] - l[1] >= 0) or (l[1] - l[0] >= 0 and l[2] - l[1] <= 0)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return l == sorted(l) or l == sorted(l, reverse=True)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(l) <= 2:\n        return True\n    first, *rest = l\n    if first > rest[0]:\n        return False\n    for last, current in zip(rest, rest[1:]):\n        if last < current:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        if l[1] > l[2]:\n            return monotonic(l[3:])\n        else:\n            return False\n    else:\n        if l[0] < l[2]:\n            return monotonic(l[3:])\n        else:\n            return False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(l) < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    if l[-1] < l[-2]:\n        return False\n    return monotonic(l[1:-1])\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    common = []\n    for i in l1:\n        if i in l2:\n            common.append(i)\n    return sorted(common)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s1, s2 = set(l1), set(l2)\n    return sorted(s1.intersection(s2))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Find the intersection\n    i = set(l1)\n    j = set(l2)\n    l = i & j\n    # Find the common elements\n    common = []\n    for k in l:\n        if k in l1 and k in l2:\n            common.append(k)\n    # Find the remaining elements\n    remaining = list(i ^ j)\n    # Return\n    return sorted(common + remaining)"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l1_set = set(l1)\n    l2_set = set(l2)\n    return sorted(l1_set & l2_set)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # TODO: replace with common() from Exercise 3\n    # pass\n    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    i = 2\n    while i * i < n:\n        if n % i == 0:\n            n //= i\n            return i\n        i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # find the prime factor\n    prime = 2 # maximum possible prime\n    while n >= prime:\n        while n % prime == 0:\n            n //= prime\n        prime += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    largest_prime = n - 1\n    while n > 1:\n        n -= 1\n        if is_prime(n):\n            largest_prime = n\n    return largest_prime\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert n > 1\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    largest = 0\n    while n % 2 == 0:\n        largest = 2\n        n = n // 2\n    for i in range(3, n+1, 2):\n        while n % i == 0:\n            largest = i\n            n = n // i\n    return largest\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    def is_prime(num):\n        if num == 1:\n            return True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    while n % 2 == 0:\n        n //= 2\n    for i in range(3, n+1):\n        if is_prime(i) and n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    divisor = 2\n    while divisor < n:\n        if n % divisor == 0:\n            n //= divisor\n            if is_prime(n):\n                return n\n        else:\n            divisor += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # i = 2\n    # while i < n:\n    #     if n % i == 0:\n    #         n = n/i\n    #     else:\n    #         i = i + 1\n    # return n\n    \n    if n < 2:\n        return 'No prime factor'\n    \n    return find_largest_prime_factor(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n / i\n            break\n        i = i + 1\n    return int(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    i = 2\n    while i <= n/2:\n        if n % i == 0:\n            return i\n        i += 1\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n >= 1, \"The value of n must be greater than or equal to 1.\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert 1 <= n, \"n must be >= 1\"\n    sum = 0\n    for num in range(1, n + 1):\n        sum += num\n    return sum"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    i = 1\n    total = 0\n    while i <= n:\n        total += i\n        i += 1\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return (n + n - 1) * (n / 2)\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum = 0\n    i = 0\n    while i <= n:\n        sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return n*(n+1)//2\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    # return 0\n    if n==1:\n        return 1\n    else:\n        return n+sum_to_n(n-1)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    bracket_stack = []\n    for char in brackets:\n        if char == \"(\":\n            bracket_stack.append(\"(\")\n        else:\n            if len(bracket_stack) == 0:\n                return False\n            else:\n                bracket_stack.pop()\n    if len(bracket_stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    start_p = False\n    b = 0\n    for c in brackets:\n        if c == \"(\":\n            if start_p:\n                b += 1\n            else:\n                start_p = True\n        if c == \")\":\n            if not start_p:\n                b -= 1\n            else:\n                start_p = False\n        if b < 0:\n            return False\n    return b == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    open_bracket_count = 0\n    for b in brackets:\n        if b == \"(\":\n            open_bracket_count += 1\n        elif b == \")\":\n            if open_bracket_count == 0:\n                return False\n            else:\n                open_bracket_count -= 1\n    if open_bracket_count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not brackets:\n        return True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        else:\n            try:\n                stack.pop()\n            except IndexError:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    bracket_stack = []\n    for char in brackets:\n        if char == '(':\n            bracket_stack.append(char)\n        else:\n            if not bracket_stack:\n                return False\n            bracket_stack.pop()\n    return not bracket_stack\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Check if the polynomial is a constant.\n    if xs[-1] == 0:\n        xs[-1] = 0\n        return xs\n    # Initialize result.\n    derivative_polynomial = []\n    # Compute the derivative of xs.\n    for i, x in enumerate(xs):\n        if i > 0:\n            derivative_polynomial.append(i * x)\n    return derivative_polynomial\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    der = []\n    for i in range(len(xs)-1):\n        der.append(xs[i+1] * (i+1))\n    return der\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n = len(xs)\n    return [sum(xs[i+1]*(n-i-1) for i in range(n))]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n = len(xs)\n    return [n * x for x in xs[1:]]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i, x in enumerate(xs[:-1]):\n        if i == 0:\n            result.append(x)\n        else:\n            result.append(i * x)\n    return result\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [x * i for i, x in enumerate(xs)][1:]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [coef * (len(xs) - i - 1) for i, coef in enumerate(xs)]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i * xs[i] for i in range(1, len(xs))]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert len(xs) > 2, \"len(xs) must be bigger than 2\"\n    # xs_new = [xs[0]]\n    # for i in range(1, len(xs)):\n    #     xs_new.append(xs[i] * (i))\n    # return xs_new\n    return [x * i for x in xs for i in range(1, len(xs))]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if xs == [] or len(xs) == 1:\n        return []\n    if len(xs) == 2:\n        return [xs[1]]\n    return [xs[1]] + derivative(xs[1:])\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert n >= 0, 'n must be greater than or equal to 0'\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    fibs = [0, 1, 1]\n    for i in range(n):\n        fibs.append(fibs[-1] + fibs[-2] + fibs[-3])\n    return fibs[n]\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # write your code here\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n > 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert n >= 0\n    assert isinstance(n, int)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert n >= 0\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    fib = [0, 1, 1]\n    if n == 1: return 0\n    if n == 2: return 1\n    if n == 3: return 1\n    for i in range(n-3):\n        fib.append(fib[-1] + fib[-2] + fib[-3])\n    return fib[-1]\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0 or n == 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n >= 3:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return n\n    else:\n        a = 0\n        b = 1\n        c = 1\n        for i in range(n-1):\n            a, b, c = b, c, a + b + c\n        return c\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # count = 0\n    # for char in s:\n    #     if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n    #         count += 1\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = \"aeiouy\"\n    vowels_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowels_count += 1\n        if letter == \"y\" and s[-1]!= \"y\":\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for c in s:\n        if c in VOWELS:\n            count += 1\n    if not count:\n        return 0\n    if s[-1] in VOWELS:\n        if s[-1] == \"y\":\n            count -= 1\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowel_count = 0\n    for char in s:\n        if char in VOWELS:\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count += 1\n    if s[-1] == 'y' and s[-2] == 'a':\n        count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    counter = 0\n    for letter in s:\n        if letter in VOWELS:\n            counter += 1\n    if s[-1] == \"y\":\n        counter -= 1\n    return counter\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    vowels = \"aeiouy\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] in vowels:\n        count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # your code here\n    return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    num_digits = len(str(x))\n    if shift > num_digits:\n        return str(x)[::-1]\n    else:\n        return str(x)[num_digits-shift:shift] + str(x)[:num_digits-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = str(x)[-shift:]\n    for _ in range(shift):\n        s += str(x)[:1]\n    return s\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    digits = str(x)\n    if shift > len(digits):\n        digits = digits[::-1]\n        shifted_digits = digits[-shift:]\n    else:\n        shifted_digits = digits[-shift:] + digits[:-shift]\n    return shifted_digits\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift] if shift < len(str(x)) else str(x)[-shift:-shift+len(str(x))] + str(x)[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if shift > 0:\n        x = int(str(x)[-shift:] + str(x)[:-shift])\n        return str(x)\n    elif shift < 0:\n        x = int(str(x)[shift:] + str(x)[:shift])\n        return str(x)\n    else:\n        return str(x)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return str(x)[-shift:]+str(x)[0:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if shift < 0:\n        return str(x)[-shift:] + str(x)[:-shift]\n    return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    digits = str(x)\n    return digits[-shift:] + digits[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join(str(x)[shift:] + str(x)[:shift])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s = str(s)\n    return sum([ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    num = 0\n    for i in s:\n        if ord(i) > 64 and ord(i) < 91:\n            num += ord(i) - 64\n    return num\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # find the sum of the upper case letters\n    # find the sum of the lower case letters\n    # add the upper case to the lower case and return the result\n    return sum([ord(x) for x in s if x.isupper()]) + sum([ord(x) for x in s if x.islower()])\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sums = 0\n    for c in s:\n        if c.isalpha():\n            sums += ord(c)\n    return sums\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum([ord(c) for c in s if c.isupper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # counter = 0\n    # for char in s:\n    #     if char.isalpha():\n    #         if char.isupper():\n    #             counter += ord(char)\n    # return counter\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum([ord(c) for c in s if c.isalpha()])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Your code here\n    # `ord` convert to ascii code\n    return sum([ord(char) for char in s if char.isupper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    # your code here\n    s = s.split(' ')\n    m, o = int(s[0]), int(s[1])\n    if m >= o:\n        return m-o\n    else:\n        return m\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pas"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers = s.split()\n    mango_numbers = int(numbers[0]) - int(numbers[1])\n    if mango_numbers > 0:\n        print(mango_numbers)\n    else:\n        print(\"No mango fruits\")\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert n >= 0, f\"n should be positive.\"\n    assert n == 0 or n % 2 == 0, \"N should be even.\"\n    assert len(s) >= 0, \"Input should be a string.\"\n    \n    if s.isnumeric():\n        n = int(s)\n        return n\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = s.split()\n    return n - int(s[1]) - int(s[0])\n    \nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\",120))\nprint(fruit_distribution(\"0 apples and 0 oranges\",0))"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    fruit = [item for item in s.split() if s.isdigit()]\n    print(fruit)\n    return sum(list(map(int,fruit))) - (n - sum(list(map(int,fruit))))\n    \nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120))"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return n - s.split(' ')[0] - s.split(' ')[1]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # write your solution here\n    if \"and\" in s:\n        if s.split(\" \")[0] == s.split(\" \")[2]:\n            print(int(s.split(\" \")[0]) - int(s.split(\" \")[2]))\n        else:\n            print(\"fruit distribution is not possible\")\n    else:\n        print(s)\n        \n    "
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return n - s.count(\"0\") - s.count(\"1\") - s.count(\"2\")\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    evens = [i for i in arr if i%2 == 0]\n    if len(evens) == 0:\n        return []\n    return [min(evens), arr.index(min(evens))]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    even_values = [i for i in arr if i % 2 == 0]\n    return [min(even_values) if even_values else [], arr.index(min(even_values) if even_values else []) if even_values else []]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    arr = sorted(arr, key=lambda x: (x % 2, x))\n    if not arr:\n        return []\n    return [arr[0], arr.index(arr[0])]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    \n    # approach: take the smallest value and return that\n    \n    # sort array in reverse\n    arr.sort()\n    \n    # set a current smallest value\n    cur_smal_val = None\n    \n    # set a current smallest index\n    cur_smal_idx = None\n    \n    # loop through array\n    for idx, x in enumerate(arr):\n        # if a value is even\n        if not x % 2:\n            # if it's the first even value\n            if not cur_smal_val:\n                # set it as the current smallest value\n                cur_smal_val = x\n                # set the current smallest index\n                cur_smal_idx = idx\n            # if it's not the first even value\n            else:\n                # if it's a smaller value\n                if x < cur_smal_val:\n                    # set it as the current smallest value\n                    cur_smal_val = x\n                    # set the current smallest index\n                    cur_smal_idx = idx\n                # if it's not smaller\n                else:\n                    pass\n    # return\n    return [ cur_smal_val, cur_smal_idx ]\n    \n    "
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert arr, 'Array cannot be empty'\n    \n    if not arr:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not arr:\n        return []\n    m = min(arr)\n    indexes = [i for i,j in enumerate(arr) if j == m]\n    return [m, min(indexes)] if m % 2 == 0 else []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if arr == []:\n        return []\n    \n    n = len(arr)\n    min_even = float('inf')\n    min_even_index = float('inf')\n    for i in range(n):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_even_index = i\n    \n    return [min_even, min_even_index] if min_even!= float('inf') else []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Solution 1 - 44 ms\n    \"\"\"\n    evens = []\n    for node in arr:\n        if node % 2 == 0:\n            evens.append(node)\n    if len(evens) == 0:\n        return []\n    else:\n        return [min(evens), arr.index(min(evens))]\n    \"\"\"\n    # Solution 2 - 20 ms\n    evens = [x for x in arr if x % 2 == 0]\n    if len(evens) == 0:\n        return []\n    else:\n        return [min(evens), arr.index(min(evens))]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert isinstance(arr, list) and len(arr) >= 1, \"Input must be a list and have at least one element.\"\n    # Check that the array is sorted.\n    arr.sort()\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    \n    greatest = 0\n    greatest_freq = 0\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # your code here\n    max_value = max(lst)\n    max_count = lst.count(max_value)\n    \n    if max_count < max_value:\n        return -1\n    return max_value\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    greater = []\n    for i in lst:\n        if lst.count(i) >= i:\n            greater.append(i)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    lst = lst[::-1]\n    max_ = lst[0]\n    \n    for i in lst:\n        if lst.count(i) >= i:\n            max_ = i\n            break\n    else:\n        max_ = -1\n    return max_\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst.sort()\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    frequencies = {}\n    for elem in lst:\n        frequencies[elem] = frequencies.get(elem,0) + 1\n    for key, value in frequencies.items():\n        if value >= key:\n            return key\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    dct = {}\n    for number in lst:\n        dct[number] = dct.get(number, 0) + 1\n    for key, val in dct.items():\n        if val >= key:\n            return key\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    dct = {}\n    for i in lst:\n        if i not in dct:\n            dct[i] = 1\n        else:\n            dct[i] += 1\n    lst_dct = list(dct.keys())\n    lst_dct.sort(reverse=True)\n    for i in lst_dct:\n        if dct[i] >= i:\n            return i\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    greatest = 0\n    greatest_freq = 0\n    greatest_freq_greater_than_greatest = 0\n    for i in lst:\n        freq = lst.count(i)\n        if i > greatest:\n            greatest = i\n            greatest_freq = freq\n        elif i == greatest and freq > greatest_freq:\n            greatest_freq_greater_than_greatest = 1\n    if greatest_freq_greater_than_greatest == 1:\n        return -1\n    else:\n        return greatest\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in lst:\n        if lst.count(i) > i:\n            return i\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # your code here\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # if list is empty, return empty list\n    if not lst:\n        return []\n    # set variable for sorting\n    lst_to_sort = lst[:]\n    # return list in strange sort order\n    return [min(lst_to_sort), max(lst_to_sort), min(lst_to_sort)]"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if lst == []:\n        return []\n    else:\n        sorted_list = sorted(lst)\n        strange_list = [sorted_list[0]]\n        for i in range(1, len(sorted_list)):\n            strange_list.append(sorted_list[-i])\n            strange_list.append(sorted_list[i])\n    return strange_list\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(lst)[::-1"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    a = sorted(lst)\n    b = []\n    for i in range(len(a)):\n        if i%2 == 0:\n            b.append(a[i])\n        else:\n            b.append(a[-i])\n    return b\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # return [lst[i] for i in range(len(lst))]\n    return sorted(lst, reverse=True)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not lst:\n        return lst\n    min_val, max_val = min(lst), max(lst)\n    sorted_lst = sorted(lst)\n    min_lst = []\n    max_lst = []\n    for i in range(len(sorted_lst)):\n        if sorted_lst[i] == min_val:\n            min_lst.append(sorted_lst[i])\n            sorted_lst.pop(i)\n        elif sorted_lst[i] == max_val:\n            max_lst.append(sorted_lst[i])\n            sorted_lst.pop(i)\n    return min_lst + max_lst + sorted_lst\n    \n    \ndef strange_sort(t):\n    '''\n    Given list of integers, return a list in strange order.\n    Strage sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # your code here\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(lst, reverse=True)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [lst[0]] + list(reversed(sorted(lst[1:])))\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # (a + b + c) / 2\n    s = sum([a, b, c]) / 2\n    if s < a + b:\n        return -1\n    return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if (a + b < c or a + c < b or b + c < a):\n        return -1\n    return round(.5 * (a * b * c), 2"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Assume that the sum of the lengths of any two sides is always greater than the third side\n    # This is because the length of the third side is the hypotenuse of any triangle and the sum of the\n    # two other sides is the opposite\n    if a + b > c:\n        if a + c > b:\n            if b + c > a:\n                return round(math.sqrt(a**2 + b**2), 2)\n    return -1\n    \nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Square the sides, add them together, and square root the sum\n    s1 = a * a\n    s2 = b * b\n    s3 = c * c\n    summ = s1 + s2 + s3\n    sq_root = math.sqrt(summ)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # A valid triangle has three sides with a+b>c and b+c>a and c+a>b\n    # If a+b>c and b+c>a and c+a>b then sum(a,b,c)>a+b+c is True\n    return round((sum([a,b,c]) - min([a,b,c])) * 0.5, 2) if a+b > c and b+c > a and c+a > b else -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Excerpt From:\n    # https://codereview.stackexchange.com/questions/191322/calculate-the-area-of-a-triangle-when-its-lengths-are-known\n    if a + b <= c or b + c <= a or c + a <= b:\n        return -1\n    s = (a + b + c) / 2\n    return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def palindrome(lst):\n        \n        def reverse(lst):\n            return [x for x in reversed(lst)]\n        \n        def is_palindrome(lst):\n            return lst == reverse(lst)\n        \n        return is_palindrome(lst)\n    \n    def sum_weight(lst):\n        \n        def add_together(lst):\n            return sum(lst)\n        \n        return add_together(lst)\n    \n    if palindrome(q) and sum_weight(q) <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # If the object is not balanced, it won't fly.\n    if not is_balanced(q):\n        return False\n    # If the object is balanced, check if it will fly.\n    # If the sum of the elements is less than the maximum possible weight, it will fly.\n    # Otherwise, it won't fly.\n    return sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #split q into a list\n    q_l = list(q)\n    #initialize sum to 0\n    sum = 0\n    #sum of elements in q\n    sum_q = 0\n    #keeps track of max_q\n    max_q = 0\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if is_balanced(q) and sum(q) <= w:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def is_palindromic(s):\n        return s[::-1] == s\n    max_val = max(q)\n    if is_palindromic(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum(q)<=w and is_palindrome(q)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if is_palindrome(q)==True and sum(q)<=w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if q == list(reversed(q)):\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(arr) - len(set(arr)) - sum(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(arr) - len(arr) * min(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n    # breakpoint()\n    # first approach:\n    # 1. sort the array\n    # 2. compare each pair in the sorted array\n    # 3. once they are the same, they are palindromes\n    # 4. if they are different, do a count to see how many changes it will take\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if sorted_arr[i]!= sorted_arr[len(arr) - i - 1]:\n            result += 1\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Time: O(n)\n    # Space: O(n)\n    return len(arr) - longest_palindromic_subsequence(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Your code here\n    arr_count = {}\n    for num in arr:\n        if num in arr_count:\n            arr_count[num] += 1\n        else:\n            arr_count[num] = 1\n    count = 0\n    for num in arr_count:\n        if arr_count[num] % 2!= 0:\n            count += arr_count[num] - 1\n    return count // 2\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for num in arr:\n        if len(arr) % 2 == 0:\n            if arr[len(arr) // 2:] == arr[len(arr) // 2:][::-1]:\n                return count\n            else:\n                count += 1\n                if num!= arr[len(arr) // 2]:\n                    arr[num] = arr[len(arr) // 2]\n                else:\n                    arr[num] = arr[len(arr) // 2] + 1\n        else:\n            if arr[len(arr) // 2 + 1:] == arr[len(arr) // 2 + 1:][::-1]:\n                return count\n            else:\n                count += 1\n                if num!= arr[len(arr) // 2 + 1]:\n                    arr[num] = arr[len(arr) // 2 + 1]\n                else:\n                    arr[num] = arr[len(arr) // 2 + 1] + 1\n    return count\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # your code here\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # return sum([1 for i in range(len(arr)) if arr[i]!= i+1])\n    # time complexity O(n)\n    # space complexity O(1)\n    \n    n = len(arr)\n    ans = n\n    # print(n)\n    for i in range(n//2):\n        if arr[i]!= i+1:\n            ans -= 1\n    if ans > 0:\n        return ans\n    for i in range(n//2):\n        if arr[i]!= n - i - 1:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # you can't use the len function because the lists are potentially of different lengths, so use the loop\n    # return [ele for ele in lst1 if len(ele) > len(lst2)][0]\n    # return [ele for ele in lst1 if len(ele) < len(lst2)]\n    # return [ele for ele in lst1 if len(ele) == len(lst2)]\n    return [ele for ele in lst1 if sum(char.isalpha() for char in ele) < sum(char.isalpha() for char in lst2)]\n    # return [ele for ele in lst1 if sum(char.isalpha() for char in ele) == sum(char.isalpha() for char in lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # return lst1 if len(lst1) < len(lst2) else lst2\n    if lst1 == [] or lst2 == []:\n        return lst1 or lst2\n    return lst1 if len(''.join(lst1)) < len(''.join(lst2)) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    return lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst1) > len(lst2):\n        return lst2\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    return [item for item in lst1 if len(item) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if lst1 == lst2:\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return []\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # if len(lst1) > len(lst2):\n    #     return [x for x in lst1 if len(x) < len(lst2)]\n    # else:\n    #     return [x for x in lst2 if len(x) < len(lst1)]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(lst1) > len(lst2):\n        return lst2\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        for i in range(len(lst1)):\n            if len(lst1[i]) < len(lst2[i]):\n                lst1[i] = lst1[i]\n            else:\n                break\n    elif len(lst1) < len(lst2):\n        for i in range(len(lst2)):\n            if len(lst2[i]) < len(lst1[i]):\n                lst2[i] = lst2[i]\n            else:\n                break\n    return lst1 + lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # if len(lst1) == len(lst2):\n    #     return lst1\n    \n    # elif len(lst1) > len(lst2):\n    #     return [value for value in lst1 if len(value) < len(lst2)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return is_prime(a)\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    while a > 1:\n        if (a % 2 == 0):\n            a = a / 2\n            continue\n        if (a % 3 == 0):\n            a = a / 3\n            continue\n        if (a % 5 == 0):\n            a = a / 5\n            continue\n        return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    primes = []\n    for num in range(2,a):\n        if num > 1:\n            for i in range(2,num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    print(primes)\n    if len(primes) == 0:\n        return False\n    for num in primes:\n        if (a / num) % 3 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(2, int(math.sqrt(a))+1):\n        if a % i == 0:\n            return False\n    for i in range(2, int(math.sqrt(a))+1):\n        if is_prime(i) and (a/i) % 1 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    while a > 0:\n        a = a - 1\n        if is_prime(a):\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n    # create a list of primes less then a\n    for prime in primes:\n        # if a is divisible by a prime then break\n        if a % prime == 0:\n            return True\n    # a is not divisible by any prime so return False\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for x in range(2,a):\n        if a % x!= 0:\n            continue\n        for y in range(2,a):\n            if x * y == a and is_prime(x) and is_prime(y):\n                return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    list_prime = prime_number(a)\n    for prime in list_prime:\n        if (prime!= 2) & (prime!= 3) & (prime!= 5):\n            return False\n    return True\n    \nprint(is_multiply_prime(30)) # -> True\nprint(is_multiply_prime(100)) # -> False\nprint(is_multiply_prime(101)) # -> False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(2, 11):\n        if a % i!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #a = 2*3*5\n    #a = 6\n    \n    i = 1\n    while i < 100:\n        i += 1\n        if a % i!= 0:\n            continue\n        j = 1\n        while j < 100:\n            j += 1\n            if i * j == a:\n                return True\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return x == n**int(n)\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (x ** (1 / n)) == x\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x==n**int(n)\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x%n==0 and n!=0\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1:\n        return True\n    else:\n        return (x % n == 0) and is_simple_power(x / n, n)"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if x == n:\n        return True\n    elif n == 1:\n        return False\n    elif x % n == 0:\n        return True\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n**int(x**(1/n)) == x:\n        return True\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x == n**int(x**(1./n))\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if x == 1:\n        return True\n    if n == 1:\n        return False\n    if x == 0:\n        return False\n    if n == 0:\n        return False\n    \n    x = abs(x)\n    n = abs(n)\n    \n    if x % n == 0:\n        return True\n    return False\n    \n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if x == 0 or x == 1:\n        return False\n    if x == n:\n        return True\n    if x % n == 0:\n        return True\n    if x % n == 1 and n % 2 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return True if a ** 3 == 0 else False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    n=int(a**(1/3))\n    if n**3==a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a**(1/3)%1==0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return a ** (1 / 3) % 1 == 0\n    \ndef ispowerof3(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a power of three.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispowerof3(1) ==> False\n    ispowerof3(3) ==> True\n    ispowerof3(9) ==> True\n    ispowerof3(27) ==> False\n    ispowerof3(81) ==> True\n    '''\n    return (a!= 0 and 3 ** int(math.log(a, 3)) == a)\n    \ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(-1) ==> False\n    isprime(7) ==> True\n    isprime(4) ==> False\n    isprime(5) ==> True\n    '''\n    return a > 1 and all(a % i for i in range(2, int(math.sqrt(a)) + 1))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return a>0 and (round(a**(1/3)))**3==a\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # use the formula: c = a**(1/3)\n    c = pow(a, 1./3.)\n    return c == int(c)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a<0: return True\n    i=0\n    while a>=pow(i,3):\n        i+=1\n        if pow(i,3)==a: return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return pow(a, 1/3) == int(pow(a, 1/3))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if a == 0:\n        return True\n    elif a < 0:\n        return True\n    elif a**(1./3.) % 1 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #type your solution here\n    if a>0:\n        if a**(1/3) == int(a**(1/3)):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef isprime(a):\n    '''\n    Write a function that takes an integer a and \n    returns True if this number is prime, and False otherwise.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(0) ==> False\n    isprime(5) ==> True\n    '''\n    #type your solution here\n    if a == 1:\n        return False\n    elif a == 2:\n        return True\n    elif a > 2:\n        for i in range(2,a):\n            if a%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    digits = {'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'A':0,'B':0,'C':0,'D':0,'E':0,'F':0}\n    for char in num:\n        digits[char] += 1\n    ans = 0\n    for value in digits.values():\n        if value > 1:\n            if value%2!= 0:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #count the number of prime numbers in hex_num\n    num = num.upper()\n    prime_count = 0\n    for char in num:\n        if char in \"ABCDEF\":\n            prime_count += 1\n    return prime_count\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n    print(num)\n    s = set()\n    for i in range(len(num)):\n        s.add(num[i])\n    print(s)\n    r = 0\n    for i in s:\n        if is_prime(int(i)) is True:\n            r+=1\n    return r\n    \n    \n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #check if the input is not empty\n    if not num:\n        return 0\n    else:\n        #create a dictionary to count the digits\n        dict_ = {'2':0,'3':0,'5':0,'7':0,'11':0,'13':0}\n        #split the string in lists of chars\n        str_arr = list(num)\n        #iterate the list of chars\n        for i in range(len(str_arr)):\n            #check the dictionary if the value is not 0\n            if dict_.get(str_arr[i])!= 0:\n                #increment the value\n                dict_[str_arr[i]] += 1\n        #return the sum of values\n        return sum(dict_.values())\n    \n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    # Check if num is a correct hexadecimal number\n    if not num.isalnum() or len(num) == 0:\n        return 0\n    if len(num) % 2!= 0:\n        return 0\n    \n    # Create a dictionary with keys: 2, 3, 5, 7, 11, 13, 17,...\n    dict = {2:0, 3:0, 5:0, 7:0, 11:0, 13:0, 17:0, 19:0, 23:0, 29:0, \\\n    31:0, 37:0, 41:0, 43:0, 47:0, 53:0, 59:0, 61:0, 67:0, 71:0, \\\n    73:0, 79:0, 83:0, 89:0, 97:0}\n    \n    # Count digits\n    for i in range(0, len(num), 2):\n        dict[int(num[i])] += 1\n    \n    # Count primes\n    res = 0\n    for i in range(2, len(dict.keys())):\n        if dict[i] > 0:\n            res += 1\n    return re"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    digits = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9,\n    'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15}\n    hex_sum = 0\n    for n in num:\n        n = digits[n]\n        if is_prime(n):\n            hex_sum += 1\n    return hex_sum\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # your code here\n    return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Check if input is empty string\n    if len(num) == 0:\n        return 0\n    \n    # List for storing primes\n    prime_list = [2,3,5,7]\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def is_prime(num):\n        if num % 2 == 0 and num > 2: return False\n        return all(num % i for i in range(3, int(num**0.5)+1, 2))\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    binary_string = 'db'\n    for i in range(decimal):\n        binary_string += str(i % 2)\n    binary_string += 'db'\n    return binary_string\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    decimal = int(decimal)\n    if decimal > 0:\n        binary = bin(decimal)[2:]\n        binary = 'db' + binary + 'db'\n    else:\n        binary = \"error\"\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    decimal_to_binary = bin(decimal).replace('0b', '')\n    return 'db'+decimal_to_binary+'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 'db' + ''.join(str(1 & int(digit) > 0) for digit in reversed(bin(decimal)[2:])) + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return 'db' + bin(decimal)[2:] + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return 'db' + bin(decimal)[2:].zfill(8) + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 'db' + bin(decimal)[2:] + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"db\" + bin(decimal)[2:].zfill(8) + \"db\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    s = list(s)\n    if len(s) < 3:\n        return False\n    while len(set(s)) < len(s):\n        i = 0\n        while i < len(s)-1:\n            if s[i] == s[i+1]:\n                del s[i]\n                del s[i]\n                i -= 1\n                break\n            i += 1\n        if i == len(s)-1:\n            return True\n    return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3 and s[0] == s[1] and s[1] == s[2]:\n        return True\n    if len(s) == 3 and s[0]!= s[1] and s[1]!= s[2]:\n        return True\n    else:\n        return is_happy(s[1:] + s[0])\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(s) < 3:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True if len(set(s)) == 3 else False\n    # happy if s is reduced to either [] or one character\n    while len(s) > 1:\n        for c in set(s):\n            s = s.replace(c, \"\")\n        # check if s is reduced to one character\n        if len(s) == 1:\n            return True\n        # break if length of s is not reduced to one character\n        if len(s)!= 1:\n            break\n    return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return is_happy_v1(s)\n    return is_happy_v2(s)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        if not s[0] == s[1] and not s[0] == s[2] and not s[1] == s[2]:\n            return True\n        else:\n            return False\n    else:\n        if s[0] == s[1] and not s[0] == s[2] and not s[1] == s[2]:\n            return is_happy(s[1:])\n        elif s[1] == s[2] and not s[0] == s[1] and not s[0] == s[2]:\n            return is_happy(s[2:])\n        elif s[0]!= s[1] and s[0]!= s[2] and s[1]!= s[2]:\n            return is_happy(s[2:])\n        else:\n            return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(s) < 3:\n        return False\n    counter = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            counter += 1\n        if s[i]!= s[i+1] and counter >= 2:\n            return False\n        elif s[i]!= s[i+1] and counter == 1:\n            counter = 0\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(s) >= 3:\n        for i in range(0, len(s), 3):\n            ch = s[i:i+3]\n            if not set(ch).issubset(chars):\n                return False\n    else:\n        return False\n    return True\n    \ndef longest_happy_substring(s):\n    \"\"\"You are given a string s.\n    Your task is to find the longest substring of the string that is happy.\n    Substring is happy if the length of the substring is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    longest_happy_substring(a) => \"\"\n    longest_happy_substring(aa) => \"aa\"\n    longest_happy_substring(abcd) => \"abc\"\n    longest_happy_substring(aabb) => \"aabb\"\n    longest_happy_substring(adb) => \"adb\"\n    longest_happy_substring(xyy) => \"xyy\"\n    \"\"\"\n    if len(s) < 3:\n        return s\n    for i in range(0, len(s), 3):\n        ch = s[i:i+3]\n        if is_happy(ch):\n            return ch\n    return s\n    \nif __name__ == \"__main__\":\n    #print(is_happy('a'))\n    print(longest_happy_substring('a'))\n    print(longest_happy_substring('aa'))\n    print(longest_happy_substring('abcd'))\n    print(longest_happy_substring('aabb'))\n    print(longest_happy_substring('adb'))\n    print(longest_happy_substring('xyy')"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(s) < 3:\n        return False\n    seen = set()\n    while len(s) > 1:\n        if s in seen:\n            return False\n        seen.add(s)\n        s = ''.join(sorted(s))\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(s) < 3: return False\n    n = len(set(s))\n    return n == len(s)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return grades\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    grade_equation = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    my_list = []\n    for i in grades:\n        my_list.append(grade_equation[i])\n    return my_list\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return []"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    grade_equation = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    \n    return [grade_equation[x] for x in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return list(map(lambda x: \"A+\" if x >= 4.0 else \\\n    \"A\" if x >= 3.7 else \\\n    \"A-\" if x >= 3.3 else \\\n    \"B+\" if x >= 3.0 else \\\n    \"B\" if x >= 2.7 else \\\n    \"B-\" if x >= 2.3 else \\\n    \"C+\" if x >= 2.0 else \\\n    \"C\" if x >= 1.7 else \\\n    \"C-\" if x >= 1.3 else \\\n    \"D+\" if x >= 1.0 else \\\n    \"D\" if x >= 0.7 else \\\n    \"D-\" if x >= 0.0 else \\\n    \"E\", grades))"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    letters = []\n    for grade in grades:\n        if grade >= 4.0:\n            letters.append('A+')\n        elif grade >= 3.7:\n            letters.append('A')\n        elif grade >= 3.3:\n            letters.append('A-')\n        elif grade >= 3.0:\n            letters.append('B+')\n        elif grade >= 2.7:\n            letters.append('B')\n        elif grade >= 2.3:\n            letters.append('B-')\n        elif grade >= 2.0:\n            letters.append('C+')\n        elif grade >= 1.7:\n            letters.append('C')\n        elif grade >= 1.3:\n            letters.append('C-')\n        elif grade >= 1.0:\n            letters.append('D+')\n        elif grade >= 0.7:\n            letters.append('D')\n        elif grade >= 0.0:\n            letters.append('D-')\n        elif grade >= 0.0:\n            letters.append('E')\n        else:\n            letters.append('Not Found')\n    return letter"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    grade_equation = []\n    grade_equation = [letter_grade(num_grade) for num_grade in grades]\n    return grade_equation\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return []\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    # print(letters)\n    grades = grades.split(',')\n    # print(grades)\n    for i in range(len(grades)):\n        grades[i] = float(grades[i])\n    \n    grades = [round(i, 2) for i in grades]\n    print(grades)\n    grades = [letters[round((i - 0.33)/0.67)] if i >= 0.33 else letters[round((i + 0.67)/1.33)] for i in grades]\n    return grades\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return len(string) in primes\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    string = str(string)\n    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string) / 2)):\n        if len(string) % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(string) == 2:\n        return len(string) % 2!= 0\n    return len(string) % 2!= 0 and prime_length(string[1:])\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(string) in primes\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\ndef is_palindrome(string):\n    \"\"\"Write a function that takes a string and returns True if the string is a\n    palindrome or False otherwise\n    Examples\n    is_palindrome('racecar') == True\n    is_palindrome('evilolive') == True\n    is_palindrome('hannah') == True\n    is_palindrome('fire') == False\n    \"\"\"\n    pass\ndef average_evens(numbers):\n    \"\"\"Write a function that takes a list of numbers and returns the average of\n    all even numbers in the list. If the list does not contain an even number\n    the function should return 0\n    Examples\n    average_evens([2,4,6,8]) == 4\n    average_evens([2,4,0,6,8,10]) == 6\n    average_evens([1,3,5,7,9]) == 0\n    \"\"\"\n    pass\ndef format_address(address_dict):\n    \"\"\"Write a function that takes in a dictionary containing address information\n    and returns the address in a nicely formatted string\n    \"\"\"\n    pass\ndef format_address_2(address_dict):\n    \"\"\"Write a function that takes in a dictionary containing address information\n    and returns the address in a nicely formatted string\n    \"\"\"\n    pass\ndef square_number(number):\n    \"\"\"Write a function that takes in a number and returns it\n    multiplied by itself\n    \"\"\"\n    pass\ndef max_num(num_1, num_2, num_3):\n    \"\"\"Write a function that takes in three numbers and returns the maximum number\n    \"\"\"\n    pass\ndef to_camel_case(string):\n    \"\"\"Write a function that takes in a string and returns the same string\n    formatted as camel case. For example:\n    to_camel_case('HelloWorld') == 'helloWorld'\n    to_camel_case('is_funny') == 'isFunny'\n    to_camel_case('first') == 'first'\n    to_camel_case('format') == 'format'\n    \"\"\"\n    pass\ndef check_dictionary(dictionary):\n    \"\"\"Write a function that takes in a dictionary and returns True if the \n    dictionary is empty or False if it is not\n    \"\"\"\n    pass\ndef format_duration(seconds):\n    \"\"\"Write a function that takes in a number of seconds and returns a\n    human-readable version of that number of seconds\n    \"\"\"\n    pass\ndef get_complement(color):\n    \"\"\"Write a function that takes in a color and returns a complementary color.\n    Examples\n    get_complement('red') == 'blue'\n    get_complement('blue') =='red'\n    get_complement('green') == 'purple'\n    get_complement('purple') == 'green'\n    get_complement('orange') == 'yellow'\n    get_complement('yellow') == 'orange'\n    \"\"\"\n    pass\ndef get_complementary_color(color):\n    \"\"\"Write a function that takes in a color and returns a complementary color.\n    Examples\n    get_complementary_color('red') == 'yellow'\n    get_complementary_color('blue') =='red'\n    get_complementary_color('green') == 'purple'\n    get_complementary_color('purple') == 'green'\n    get_complementary_color('orange') =='red'\n    get_complementary_color('yellow') == 'orange'\n    \"\"\"\n    pass\ndef get_shifted_text(text, shift):\n    \"\"\"Write a function that takes in a string and returns the string with the\n    first letter shifted the specified amount to the right.\n    Examples\n    get_shifted_text('hello', 5) == 'ello'\n    get_shifted_text('hello', -5) == 'ello'\n    get_shifted_text('apple', 0) == 'apple'\n    get_shifted_text('apple', -10) == 'apllo'\n    get_shifted_text('orange', -20) == 'orange'\n    get_shifted_text('orange', 20) == 'orange'\n    get_shifted_text('orange', 200) == 'orange'\n    \"\"\"\n    pass\ndef censor_string(string, censor):\n    \"\"\"Write a function that takes in a string and censors any word tha"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n = 0\n    # if string is empty\n    if len(string) == 0:\n        return False\n    # if string has no characters\n    if len(string) == 1:\n        return False\n    # if string has no characters\n    if len(string) == 1:\n        return False\n    for c in string:\n        if c in ('0','1','2','3','4','5','6','7','8','9'):\n            n += 1\n    if n > 1:\n        return prime_number(n)\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19]\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return string_length(string) in prime_numbers.keys()\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    return 10 ** (n - 1) - starts_one_ends(n - 1)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return count_digits(n, 1) + count_digits(n, 0) + count_digits(n, 9)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or str(i)[0] == '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # 0.42\n    # if n == 1:\n    #     return 10\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(\n        len(str(i)) + 1 + len(str(n - i)) + 1 == n and (i == 1 or n - i == 1)\n        for i in range(1, n + 1)\n    )\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum(n in f(i) for i in range(1, 10))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return starts_ends(n, 1, 1)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def p(n):\n        return n-1\n    def r(n):\n        return n+1\n    def rr(n):\n        return n+2\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return starts_ends(n, True, True)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return bin(N)[2:]"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # convert integer N to binary\n    binary = bin(N)\n    # convert binary back to string\n    binary = str(binary)[2:]\n    # initialize sum variable\n    sum = 0\n    # convert string to int\n    for character in binary:\n        sum += int(character)\n    return sum"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # write your solution here\n    return bin(N)[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return bin(N)[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    s = bin(N)\n    return s[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # My code here\n    # split the input into a list of digits\n    # convert each digit to binary\n    # convert binary back to a number\n    # add the sum of the digits\n    \n    sum = 0\n    #print(bin(N))\n    for i in str(bin(N)[2:]):\n        #print(i)\n        sum += int(i)\n    return sum\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #decimal_to_binary(N)\n    #binary_to_decimal()\n    #binary_to_hex()\n    #hex_to_binary()\n    #binary_to_octal()\n    #octal_to_binary()\n    #octal_to_hex()\n    #octal_to_decimal()\n    #decimal_to_octal()\n    \n    #return binary_to_decimal(N)\n    #return binary_to_octal(N)\n    #return binary_to_hex(N)\n    #return binary_to_decimal(N)\n    #return binary_to_octal(N)\n    #return binary_to_octal(N)\n    #return binary_to_hex(N)\n    #return binary_to_decimal(N)\n    return binary_to_octal(N)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    #create variables\n    sum = 0\n    \n    #set the sum of the digits of N\n    while N > 0:\n        remainder = N % 2\n        sum = sum + remainder\n        N = N // 2\n    \n    #return the sum of the digits of N\n    return sum"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    binary_sum = 0\n    for digit in str(N):\n        binary_sum += int(digit)\n    return str(binary_sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    def sum_digits(N):\n        return sum([int(d) for d in str(N)])\n    \n    #return \"\".join([\"1\" if sum_digits(N) & 1 == 1 else \"0\" for i in range(len(str(N)) - 1, -1, -1)])\n    return bin(sum_digits(N))[2:]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(0,len(lst),2):\n        lst[i]+=1\n    return lst\nprint(add([4, 2, 6, 7]))\nprint(add([1, 2, 3, 4, 5]))\nprint(add([4, 2, 6, 7]))\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([i for i in lst if i % 2 == 1])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # result = []\n    # for i in range(1, len(lst), 2):\n    #     result.append(lst[i])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    new_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            if lst[i] % 2 == 0:\n                new_lst.append(lst[i])\n    return sum(new_lst)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = 0\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum(lst[::2])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(1, len(lst), 2):\n        total += lst[i]\n    return total\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([x for x in lst[1::2] if x % 2 == 0])"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for i in range(1, len(lst), 2):\n        result.append(lst[i])\n    return result\n    \n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    a = s.split()\n    ans = ''\n    for i in sorted(a, key = lambda x: ord(x[0])):\n        ans = ans + i +''\n    return ans[:-1]\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return''.join(sorted(''.join(s).split(), key=str.lower))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = s.split(' ')\n    words = []\n    for i in s:\n        words.append(sorted(i))\n    return''.join(words)\n    \n    \ndef anti_shuffle2(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = s.split(' ')\n    for i, word in enumerate(s):\n        s[i] = sorted(word)\n    return ''.join([''.join(w) for w in s])\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = s.split(' ')\n    s = [i for i in s if i]\n    s = sorted(s, key=lambda x: ''.join(sorted(list(x))))\n    return''.join(s)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = s.split(' ')\n    n = []\n    for word in s:\n        n.append(''.join(sorted(word)))\n    return''.join(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not isinstance(s, str):\n        raise TypeError('Only strings are allowed')\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s_list = s.split()\n    for i, word in enumerate(s_list):\n        s_list[i] = sorted(word)\n    s_list = ''.join(s_list)\n    return s_list\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s_list = s.split(' ')\n    result = ''\n    for word in s_list:\n        word_list = list(word)\n        word_list.sort()\n        result += ''.join(word_list) +''\n    return result[:-1]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # your code here\n    result = []\n    for row_num in range(len(lst)):\n        # iterate through the row\n        column = 0\n        while column < len(lst[row_num]):\n            if lst[row_num][column] == x:\n                # if there is such number on the list add it to result\n                result.append((row_num, column))\n            column += 1\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return sorted(\n        ((row, x_) for row, x_ in enumerate(lst) if x in x_),\n        key=lambda x_: (x_[0], -len(x_[1]))\n    )\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [(i, j) for i, row in enumerate(lst) for j, v in enumerate(row) if v == x]\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    ans = []\n    for i in range(len(lst)):\n        ans += [(i, x)]\n    return sorted(ans)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not lst: return []\n    return sorted(((i, j) for i, row in enumerate(lst) for j in range(len(row)) if row[j] == x), key=lambda x: (x[0], -x[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    out = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, col in enumerate(row):\n                if col == x:\n                    out.append((i,j))\n    return sorted(out)"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    coord = []\n    # your code here\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coord.append((i, j))\n    \n    coord.sort()\n    coord.sort(key=lambda x: (-x[1], x[0]))\n    \n    return coord\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    return coordinates\n    \ndef get_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \n    Examples:\n    get_col([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(1, 0), (1, 2), (1, 4), (2, 0), (2, 3), (2, 5)]\n    get_col([], 1) == []\n    get_col([[], [1], [1, 2, 3]], 3) == [(2, 0)]\n    \"\"\"\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[j][i] == x:\n                coordinates.append((j, i))\n    return coordinates"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    res = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                res.append((i, j))\n    res.sort()\n    res.sort(key=lambda x: (-x[1], x[0]))\n    return res"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted([\n        (index, col) for index, row in enumerate(lst) if x in row\n    ] + [(index, col) for index, row in enumerate(lst) if x not in row],\n    key=lambda x: (x[0], -x[1]))\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not array:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(array) == 0: return []\n    if len(array) == 1: return [array[0]]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n    for i in range(len(array)):\n        for j in range(len(array)-1-i):\n            if array[j] > array[j+1]:\n                array[j], array[j+1] = array[j+1], array[j]\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    size = len(array)\n    if size < 2:\n        return array\n    \n    # initialize pointers to pivot elements\n    left_pivot = 0\n    right_pivot = size - 1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: implement this function\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    start = 0\n    end = len(array) - 1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # if not array:\n    #     return array\n    #\n    # for i in range(1, len(array)):\n    #     j = i - 1\n    #     while array[j] > array[i] and j >= 0:\n    #         j -= 1\n    #     if j!= i - 1:\n    #         array[i], array[j + 1] = array[j + 1], array[i]\n    # return array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # return sorted(array, reverse=(sum(array[0], array[-1]) % 2 == 0))\n    return sorted(array, reverse=False) if sum(array[0], array[-1]) % 2 == 0 else sorted(array, reverse=True)"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return sorted(array, key = lambda x: sum(x)) if sum(x) % 2 == 0 else sorted(array, key = lambda x: -sum(x)"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Get sum of first and last element\n    odd_or_even = sum(array[0], array[-1])\n    if odd_or_even % 2 == 0:\n        # If sum is even, sort in descending order\n        return sort_array(array)[::-1]\n    else:\n        # If sum is odd, sort in ascending order\n        return sort_array(array)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    alphabet = string.ascii_lowercase\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_str = ''\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                encrypted_str += rotated_alphabet[ord(char) - ord('A')].upper()\n            else:\n                encrypted_str += rotated_alphabet[ord(char) - ord('a')]\n        else:\n            encrypted_str += char\n    return encrypted_str\nprint(encrypt('hi'))\nprint(encrypt('asdfghjkl'))\nprint(encrypt('gf'))\nprint(encrypt('et')"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    newstring = ''\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                if (ord(char)+2) <= 91:\n                    newstring += chr(ord(char)+2)\n                else:\n                    newstring += chr(ord(char)+2-26)\n            else:\n                if (ord(char)+2) <= 123:\n                    newstring += chr(ord(char)+2)\n                else:\n                    newstring += chr(ord(char)+2-26)\n        else:\n            newstring += char\n    return newstring\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return ''.join(a+b for a,b in zip(s[::2],s[1::2]))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join(string.ascii_lowercase[2*(string.ascii_lowercase.index(s[i])+2)%26] if s[i] in string.ascii_lowercase else s[i] for i in range(len(s)))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    myString = s\n    myString = list(myString)\n    newString = []\n    # Find the first letter\n    index = myString.index(myString[0])\n    if (index == 0):\n        firstLetter = myString[0]\n    elif (index == 1):\n        firstLetter = myString[1]\n    else:\n        firstLetter = myString[2]\n    # Find the second letter\n    index = myString.index(firstLetter)\n    if (index == 0):\n        secondLetter = myString[0]\n    elif (index == 1):\n        secondLetter = myString[1]\n    else:\n        secondLetter = myString[2]\n    # Find the third letter\n    index = myString.index(secondLetter)\n    if (index == 0):\n        thirdLetter = myString[0]\n    elif (index == 1):\n        thirdLetter = myString[1]\n    else:\n        thirdLetter = myString[2]\n    # Find the fourth letter\n    index = myString.index(thirdLetter)\n    if (index == 0):\n        fourthLetter = myString[0]\n    elif (index == 1):\n        fourthLetter = myString[1]\n    else:\n        fourthLetter = myString[2]\n    # Find the fifth letter\n    index = myString.index(fourthLetter)\n    if (index == 0):\n        fifthLetter = myString[0]\n    elif (index == 1):\n        fifthLetter = myString[1]\n    else:\n        fifthLetter = myString[2]\n    # Find the sixth letter\n    index = myString.index(fifthLetter)\n    if (index == 0):\n        sixthLetter = myString[0]\n    elif (index == 1):\n        sixthLetter = myString[1]\n    else:\n        sixthLetter = myString[2]\n    # Find the seventh letter\n    index = myString.index(sixthLetter)\n    if (index == 0):\n        seventhLetter = myString[0]\n    elif (index == 1):\n        seventhLetter = myString[1]\n    else:\n        seventhLetter = myString[2]\n    # Find the eighth letter\n    index = myString.index(seventhLetter)\n    if (index == 0):\n        eighthLetter = myString[0]\n    elif (index == 1):\n        eighthLetter = myString[1]\n    else:\n        eighthLetter = myString[2]\n    # Find the ninth letter\n    index = myString.index(eighthLetter)\n    if (index == 0):\n        ninthLetter = myString[0]\n    elif (index == 1):\n        ninthLetter = myString[1]\n    else:\n        ninthLetter = myString[2]\n    # Find the tenth letter\n    index = myString.index(ninthLetter)\n    if (index == 0):\n        tenthLetter = myString[0]\n    elif (index == 1):\n        tenthLetter = myString[1]\n    else:\n        tenthLetter = myString[2]\n    # Create the new string\n    newString.append(firstLetter)\n    newString.append(secondLetter)\n    newString.append(thirdLetter)\n    newString.append(fourthLetter)\n    newString.append(fifthLetter)\n    newString.append(sixthLetter)\n    newString.append(seventhLetter)\n    newString.append(eighthLetter)\n    newString.append(ninthLetter)\n    newString.append(tenthLetter)\n    newString = \"\".join(newString)\n    return newString\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s=s.lower()\n    alphabet='abcdefghijklmnopqrstuvwxyz'\n    index_alphabet=alphabet.index(s[0])\n    new_alphabet=alphabet[index_alphabet:]+alphabet[:index_alphabet]\n    encrypted_alphabet=''\n    for c in s:\n        if c.isalpha():\n            encrypted_alphabet+=new_alphabet[alphabet.index(c)]\n        else:\n            encrypted_alphabet+=c\n    return encrypted_alphabet\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotation = alphabet[2:] + alphabet[:2]\n    return ''.join(rotation[alphabet.index(l)] for l in s)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # s = input('Enter a phrase to encrypt: ')\n    # alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # encrypted_alphabet = 'efghijklmnopqrstuvwxyzabc'\n    # s = s.lower()\n    # encrypted = ''\n    # for letter in s:\n    #     if letter in alphabet:\n    #         index = (alphabet.index(letter)) * 2\n    #         encrypted = encrypted + encrypted_alphabet[index]\n    #     else:\n    #         encrypted = encrypted + letter\n    # print(encrypted)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # create string to return\n    encrypted = ''\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join([alphabet[alphabet.find(i)+2] if i in alphabet else i for i in s])\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(lst) < 2:\n        return None\n    if len(lst) == 2:\n        return min(lst)\n    \n    res = None\n    \n    lst.sort()\n    \n    for i in range(len(lst)-1):\n        if res == None:\n            res = lst[i]\n        elif lst[i+1]!= res:\n            return lst[i+1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Replace pass above with your code\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if len(lst) == 0 or len(lst) == 1:\n        return None\n    \n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) < 2:\n        return None\n    elif len(lst) == 2:\n        return min(lst)\n    else:\n        lst.sort()\n        return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(lst) < 2:\n        return None\n    elif len(lst) == 2:\n        return min(lst)\n    s = sorted(lst)\n    return s[1]\n    \n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # I'll use an approach similar to quicksort\n    # We'll sort the list into a sorted part, and a list of \"not sorted\"\n    # As we iterate through the list, if we find an item that is smaller than the last item of the sorted part\n    # we'll add it to the sorted part. Otherwise we add it to the \"not sorted\" list\n    \n    # the sorted part starts at the first index\n    sorted_part = [lst[0]]\n    not_sorted_part = []\n    \n    for i in range(1, len(lst)):\n        # We want to sort the not sorted part into the sorted part, so we need to compare the not sorted part to the last element of the sorted part\n        if lst[i] < sorted_part[-1]:\n            sorted_part.append(lst[i])\n        else:\n            not_sorted_part.append(lst[i])\n    \n    # Once we have iterated through the list, we return the second to last element of the sorted part\n    if len(sorted_part) < 2:\n        return None\n    else:\n        return sorted_part[-2]\n        "
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    if not lst:\n        return None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(lst) < 2:\n        return None\n    else:\n        new_lst = []\n        for n in lst:\n            if n not in new_lst:\n                new_lst.append(n)\n        new_lst = sorted(new_lst)\n        return new_lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(lst) == 1:\n        return None\n    \n    lst.sort()\n    smallest = lst[0]\n    for elem in lst:\n        if elem > smallest:\n            return elem\n        if elem < smallest:\n            smallest = elem\n    return None\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #print(S)\n    count=0\n    lis=S.split('.')\n    for x in lis:\n        if 'I'in x:\n            count+=1\n    print(count)\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    S = S.split('.')\n    S = [i for i in S if i!= '']\n    count = 0\n    for i in S:\n        if i[:2].lower() == 'i ':\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return S.count('I ')\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not S:\n        return 0\n    return is_bored_helper(S.split(\".\"))\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(1 for i in S.split('.') if i.lower().startswith('i'))\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count=0\n    for i in S.split():\n        if i[0]==\"I\":\n            count+=1\n    return count"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l = S.split()\n    bored = 0\n    for s in l:\n        if s[0] == \"I\":\n            bored += 1\n    return bored\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not(isinstance(x,int) or isinstance(x,float)) or not(isinstance(y,int) or isinstance(y,float)) or not(isinstance(z,int) or isinstance(z,float)):\n        return False\n    if isinstance(x,int) or isinstance(x,float) and isinstance(y,int) or isinstance(y,float) and isinstance(z,int) or isinstance(z,float):\n        return True\n    else:\n        return False\n    \n    \n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if (x+y == z) or (x+z == y) or (y+z == x):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return ((x == z + y) or (y == z + x)) and type(x) == type(y) == type(z) == int\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if x == (y + z) or y == (x + z) or z == (x + y):\n        return True\n    elif x == int(x) and y == int(y) and z == int(z):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n       return x + y == z or y + z == x or x + z == y\n    else:\n       return False\n       \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return (x+y+z==int(x+y+z) and int(x+y+z)==x+y+z)\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    elif x == float(int(x)) and y == float(int(y)) and z == float(int(z)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if x+y==z or x+z==y or y+z==x:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef remainder(num, n):\n    '''\n    Create a function that returns the remainder of one number divided by another.\n    \n    Examples\n    remainder(35, 14) \u279e 7\n    \n    remainder(81, 4) \u279e 3\n    \n    remainder(3, 6) \u279e 0\n    \n    \n    Notes\n    The idea is to use the modulus (%) operator, it performs the action of finding out the remainder of one number divided by another.\n    \n    Return 0 if the second number == 0.\n    \n    You are not allowed to import any module\n    \n    '''\n    if n!=0:\n        return num%n\n    else:\n        return 0\ndef reverse(word):\n    '''\n    Create a function that takes a string as an argument and returns the string in reversed order.\n    Examples\n    reverse(\"world\") \u279e \"dlrow\"\n    \n    reverse(\"hello\") \u279e \"olleh\"\n    \n    reverse(\"a\") \u279e \"a\"\n    Notes\n    You are not allowed to import any module\n    '''\n    rev_word=\"\"\n    for i in range(len(word)-1,-1,-1):\n        rev_word+=word[i]\n    return rev_word\ndef reverse_string(my_str):\n    '''\n    Create a function that takes a string as an argument and return each character of the string in reverse order, starting from the last one.\n    Examples\n    reverse_string(\"abc\") \u279e \"cba\"\n    \n    reverse_string(\"hello\") \u279e \"olleh\"\n    Notes\n    You are not allowed to import any module\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    vowels = \"AEIOU\"\n    encode_message = \"\"\n    for letter in message:\n        if letter.upper() in vowels:\n            encode_message += letters_before[vowels.find(letter.upper())]\n        else:\n            encode_message += letter\n    return encode_message\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # vowels = ['a', 'e', 'i', 'o', 'u']\n    # vowels_encode = [chr(ord(x) + 2) if x in vowels else x for x in message.lower()]\n    # return ''.join(vowels_encode)\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    new_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            new_message += (alphabet[alphabet.index(letter.lower()) + 2])\n        else:\n            new_message += (alphabet[alphabet.index(letter)])\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_str = []\n    \n    for letter in message:\n        if letter.isalpha() == True:\n            if letter.isupper() == True:\n                new_str.append(chr((ord(letter)-65+2)%26 + 65))\n            elif letter.islower() == True:\n                new_str.append(chr((ord(letter)-97+2)%26 + 97))\n        else:\n            new_str.append(letter)\n    \n    return ''.join(new_str)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # create list to store prime numbers\n    primes = []\n    # create list to store current sum of digits\n    current_sum = []\n    # loop over each integer in list\n    for i in range(len(lst)):\n        # if integer is not 0\n        if lst[i]!= 0:\n            # add it to the list of primes\n            primes.append(lst[i])\n            # loop over the list of primes\n            for j in range(len(primes)):\n                # add prime number to current sum list\n                current_sum.append(primes[j])\n                # loop over the current sum list\n                for k in range(len(current_sum)):\n                    # if the sum is divisible by integer, divide it by the prime number\n                    if current_sum[k] % primes[j] == 0:\n                        # add the remainder to current sum list\n                        current_sum[k] = current_sum[k] / primes[j]\n                # after dividing the sum by the prime number, if the new sum is a prime number, add it to the list of primes\n                if is_prime(int(current_sum[k])) == True:\n                    primes.append(int(current_sum[k]))\n                # clear the current sum list\n                current_sum.clear()\n    # find the sum of the digits of the largest prime number in the list\n    sum = 0\n    for i in range(len(primes)):\n        sum += primes[i]\n    return sum"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    max = lst[0]\n    sum = 0\n    for i in range(len(lst)):\n        if isPrime(lst[i]) and lst[i] > max:\n            max = lst[i]\n    for i in str(max):\n        sum += int(i)\n    return sum\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # no solutions found on codewars\n    # I'm not sure how to do it yet\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    max_num = max(lst)\n    prime = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    lst = [i for i in lst if i > 0]\n    x = [i for i in lst if isprime(i)]\n    return sum(x)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    largest_prime = -1\n    sum_digits = 0\n    for num in lst:\n        if num > 1:\n            for i in range(2,num):\n                if (num % i) == 0:\n                    break\n            else:\n                if num > largest_prime:\n                    largest_prime = num\n                    sum_digits += num\n    return sum_digits\n    "
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    max_num = 0\n    sum_num = 0\n    for x in lst:\n        if x!= 0 and x > max_num:\n            max_num = x\n        if isPrime(x):\n            sum_num += x\n    return sum_num"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def isPrime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i = i + 6\n        return True\n    lst = sorted(set(lst))\n    lst = [n for n in lst if isPrime(n)]\n    return sum(map(int,str(lst[-1])))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    num = 0\n    for i in range(0,len(lst)):\n        if isprime(lst[i]) == True:\n            num = num + lst[i]\n    return num\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not dict:\n        return False\n    for k, v in dict.items():\n        if not k.isupper() and not k.islower():\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(dict) == 0:\n        return False\n    if all([key.isupper() for key in dict.keys()]):\n        return True\n    elif all([key.islower() for key in dict.keys()]):\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not dict:\n        return False\n    lower_case_keys = []\n    upper_case_keys = []\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lower_case_keys.append(key)\n            elif key.isupper():\n                upper_case_keys.append(key)\n    return False if len(lower_case_keys)>len(upper_case_keys) else True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if dict == {}:\n        return False\n    for key in dict.keys():\n        if key.isupper() and key.lower() not in dict.keys():\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if type(key) is not str:\n            return False\n        if key.islower() == dict[key].islower():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        key_list = []\n        for key in dict:\n            if isinstance(key, str):\n                if key.isupper():\n                    key_list.append(False)\n                else:\n                    key_list.append(True)\n            else:\n                return False\n        if False in key_list:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for key in dict:\n        if isinstance(key, str):\n            if key.islower():\n                return True\n            elif key.isupper():\n                return False\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not dict:\n        return False\n    # if all keys are in upper case then return False\n    if all(k.isupper() for k in dict):\n        return False\n    # if all keys are in lower case then return True\n    if all(k.islower() for k in dict):\n        return True\n    return False"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(dict) == 0:\n        return False\n    for k in dict.keys():\n        if isinstance(k, str):\n            if k.isupper():\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # You may modify the lines of code above, but don't move them!\n    # When you Submit your code, we'll change these lines to\n    # assign different values to the variables.\n    return False\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 0:\n        return []\n    num = 2\n    primes = []\n    while num <= n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def is_prime(x):\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n    def gen(n):\n        for i in range(2, n):\n            if is_prime(i):\n                yield i\n    return list(gen(n))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def is_prime(n):\n        for x in range(2,n):\n            if n%x == 0:\n                return False\n        return True\n    return [i for i in range(2,n) if is_prime(i)]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    x=[]\n    for i in range(1,n+1):\n        if is_prime(i)==True:\n            x.append(i)\n    return x\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # I will not implement this as it is a bit more difficult than I initially thought\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    res = [2]\n    if n == 0:\n        return []\n    for i in range(3, n):\n        if is_prime(i):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #Time: O(n**2)\n    #Space: O(n)\n    sieve = [True for i in range(n)]\n    sieve[0] = sieve[1] = False\n    i = 2\n    while i * i <= n:\n        if sieve[i]:\n            j = i * i\n            while j <= n:\n                sieve[j] = False\n                j += i\n        i += 1\n    return [i for i in range(n) if sieve[i]]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Base cases\n    if n == 0: return []\n    if n < 0: raise ValueError(\"count_up_to: n must be >= 0!\")\n    if n == 1: return []\n    # initialize primes, will hold values greater than 1\n    primes = [2]\n    # n must be odd\n    for i in range(3,n+1,2):\n        # if not prime\n        if not is_prime(i): continue\n        # add to primes list\n        primes.append(i)\n    # return list of primes\n    return primes\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # check if a or b is negative\n    if a < 0 or b < 0:\n        return -1\n    else:\n        # get the digits of the positive numbers\n        a_str = str(abs(a))\n        a_digits = []\n        for i in range(len(a_str)):\n            a_digits.append(int(a_str[i]))\n        b_str = str(abs(b))\n        b_digits = []\n        for i in range(len(b_str)):\n            b_digits.append(int(b_str[i]))\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a*b\n    \ndef power(a,b):\n    \"\"\"Complete the function that takes two integers and returns \n    their exponentiation.\n    Assume the input is always valid.\n    Examples:\n    power(4,5) should return 3.\n    power(5,7) should return 15.\n    power(4,-2) should return 0.25.\n    power(4,-4) should return 0.0999.\n    \"\"\"\n    return a**b\n    \ndef f_of_x(a,b):\n    \"\"\"Complete the function that takes two integers a and b, and returns the\n    function f(x) = a*x^b.\n    Assume the input is always valid.\n    Examples:\n    f_of_x(5,2) should return 25.\n    f_of_x(4,0) should return 1.\n    f_of_x(2,5) should return 32.\n    f_of_x(-5,0) should return 1.\n    \"\"\"\n    return a*(b**a)\n    \ndef decimal_to_binary(n):\n    \"\"\"Complete the function that takes a positive integer and returns\n    the binary representation of that integer as a string.\n    Examples:\n    decimal_to_binary(5) should return \"101\".\n    decimal_to_binary(25) should return \"11101\".\n    decimal_to_binary(10) should return \"1010\".\n    decimal_to_binary(0) should return \"0\".\n    decimal_to_binary(55) should return \"1010101\".\n    Assume the input is always valid.\n    \"\"\"\n    return bin(n)\n    \ndef decimal_to_hex(n):\n    \"\"\"Complete the function that takes a positive integer and returns\n    the hexadecimal representation of that integer as a string.\n    Examples:\n    decimal_to_hex(5) should return \"0x5\".\n    decimal_to_hex(15) should return \"0xf\".\n    decimal_to_hex(0) should return \"0x0\".\n    decimal_to_hex(255) should return \"0xff\".\n    decimal_to_hex(256) should return \"0x100\".\n    decimal_to_hex(3) should return \"0x3\".\n    Assume the input is always valid.\n    \"\"\"\n    return hex(n)\n    \ndef binary_to_decimal(n):\n    \"\"\"Complete the function that takes a string representing binary\n    integer n and returns the decimal representation of that binary\n    integer as an integer.\n    Examples:\n    binary_to_decimal(\"101\") should return 5.\n    binary_to_decimal(\"11101\") should return 25.\n    binary_to_decimal(\"1010\") should return 10.\n    binary_to_decimal(\"0\") should return 0.\n    binary_to_decimal(\"11111111\") should return -1.\n    binary_to_decimal(\"0x1\") should return 1.\n    binary_to_decimal(\"-11101\") should return -25.\n    Assume the input is always valid.\n    \"\"\"\n    return int(n,2)\n    \ndef binary_to_hex(n):\n    \"\"\"Complete the function that takes a string representing binary\n    integer n and returns the hexadecimal representation of that binary\n    integer as a string.\n    Examples:\n    binary_to_hex(\"101\") should return \"0x5\".\n    binary_to_hex(\"11111111\") should return \"-0x1\".\n    binary_to_hex(\"0\") should return \"0x0\".\n    binary_to_hex(\"11111111\") should return \"-0x1\".\n    Assume the input is always valid.\n    \"\"\"\n    return hex(int(n,2))\n    \ndef decimal_to_binary_adv(n):\n    \"\"\"Complete the function that takes a positive integer and returns\n    the binary representation of that integer as a string.\n    Examples:\n    decimal_to_binary_adv(5) should return \"101\".\n    decimal_to_binary_adv(25) should return \"11101\".\n    decimal_to_binary_adv(10) should return \"1010\".\n    decimal_to_binary_adv(0) should return \"0\".\n    decimal_to_binary_adv(55) should return \"1010"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    product = 0\n    for i in str(a):\n        product += int(i)\n    for i in str(b):\n        product += int(i)\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a==0 or b==0: return 0\n    if a<0 or b<0: return -multiply(abs(a), abs(b))\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a_new = a % 10\n    b_new = b % 10\n    return a_new*b_new\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if a < 0:\n        return 0\n    if b < 0:\n        return 0\n    num1 = str(a)\n    num2 = str(b)\n    total = 0\n    for i in num1:\n        if i == \"0\":\n            continue\n        total += int(i)\n    for j in num2:\n        if j == \"0\":\n            continue\n        total += int(j)\n    return total\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a * b\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = len(s)\n    i = 0\n    count = 0\n    while i < n:\n        if s[i] in 'aeiou':\n            if i % 2 == 0:\n                count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([1 for i in s[1::2] if i.isupper()])\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    num_vowels = 0\n    for i in range(0, len(s), 2):\n        if s[i].isalpha() and s[i].isupper():\n            num_vowels += 1\n    return num_vowels\n    \ndef count_upper_v1(s):\n    \"\"\"\n    Same as count_upper but doesn't use the for loop\n    \"\"\"\n    num_vowels = 0\n    for i in range(0, len(s), 2):\n        if s[i].isalpha() and s[i].isupper():\n            num_vowels += 1\n    return num_vowels\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum(s[2*i].upper() in ['A', 'E', 'I', 'O', 'U'] for i in range(int(len(s)/2))"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if len(s) == 0:\n        return 0\n    \n    count = 0\n    \n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    counter = 0\n    for i in range(len(s)):\n        if (s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U') and i % 2 == 0:\n            counter += 1\n    return counter\n    \ndef count_upper_v2(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    counter = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            counter += 1\n    return counter\n    \ndef count_upper_v3(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    return sum([1 for i in range(len(s)) if i % 2 == 0 and s[i] in 'AEIOU'])\n    \ndef count_upper_v4(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    return sum([1 for i in range(0, len(s), 2) if s[i] in 'AEIOU'])\n    \ndef count_upper_v5(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    index = 0\n    total = 0\n    while index < len(s):\n        if s[index].upper() in vowels:\n            if index % 2 == 0:\n                total += 1\n        index += 1\n    return total\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 0\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([1 if i%2 == 0 else 0 for i, letter in enumerate(s) if letter.isupper()])\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    result = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in 'AEIOU':\n            result += 1\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    try:\n        value = int(value)\n    except ValueError:\n        return None\n    else:\n        if value > 0:\n            floor = value // 1\n            ceil = (value // 1) + 1\n        else:\n            floor = value // 1\n            ceil = (value // 1) - 1\n        if value - floor == ceil - value:\n            return ceil\n        else:\n            return floor\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    value = float(value)\n    return int(value + (value % 1))\n    # or using math.ceil()\n    # return math.ceil(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return round(value) if int(value) == value else int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    num = float(value)\n    num_list = [num+0.1, num-0.1]\n    closest = 0\n    for n in num_list:\n        n = round(n)\n        if abs(n) <= abs(closest):\n            closest = n\n    return closest\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return int(value) if float(value) % 1 else int(value) + 1\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    num = float(value)\n    num = round(num)\n    return int(num)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # n is even\n    if n % 2 == 0:\n        return [n] + make_a_pile(n + 1)\n    # n is odd\n    else:\n        return [n] + make_a_pile(n + 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # raise NotImplementedError(\"TODO\")\n    return [n]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        return [n] + make_a_pile(n - 2)\n    else:\n        return [n] + make_a_pile(n + 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    levels = []\n    level = n\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        n = n + 1\n    return [n] + make_a_pile(n - 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        next_level = n + 1\n    else:\n        next_level = n\n    return make_a_pile(next_level) + [next_level]"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n%2 == 0:\n        m = n//2\n        pile = [i for i in range(n, n+m, 2)]\n    else:\n        m = (n+1)//2\n        pile = [i for i in range(n, n+m, 2)]\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n + 1\n        pile.append(n)\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n % 2 == 0:\n        pile = []\n        for i in range(n, 0, -2):\n            pile.append(i)\n    else:\n        pile = [n]\n        for i in range(n-1, 0, -2):\n            pile.append(i)\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n <= 0:\n        return []\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return s.replace(',','').split(' ')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    words = s.split()\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = s.replace(\",\", \" \")\n    return s.split(\" \")\n    \n    \nif __name__ == \"__main__\":\n    print(words_string(\"Hi, my name is John\"))\n    print(words_string(\"One, two, three, four, five, six\"))"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if ',' in s:\n        return s.split(',')\n    elif'' in s:\n        return s.split(' ')\n    else:\n        return s\n        \nprint(words_string(\"Hi, my name is John\"))\nprint(words_string(\"One, two, three, four, five, six\"))"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return s.split()\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if x > y:\n        return -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(x, y + 1):\n        if i % 2 == 0 and i >= x and i <= y:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if (x <= 0 or y <= 0):\n        return -1\n    if (x == y):\n        return -1\n    if (x % 2!= 0):\n        return -1\n    return y\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if x < 0 or y < 0:\n        raise ValueError('x and y must be positive integers')\n    return -1 if x > y else max([i for i in range(x, y+1) if i%2 == 0])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # First, we want to find the biggest even number in the range [x, y].\n    # The even number may be bigger than y, so we use the x value as \n    # our starting point.\n    num = x\n    # To iterate, we need to count up. To do that, we create a variable \n    # that keeps track of the number of iterations we've made.\n    iterations = 0\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    # TODO: YOUR CODE HERE\n    \n    num_list = list(range(x, y + 1))\n    num_list = [x for x in num_list if x % 2 == 0]\n    print(num_list)\n    \n    if len(num_list) == 0:\n        return -1\n    else:\n        return num_list[-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if x % 2 == 0 and x <= y and x >= 0:\n        if y % 2 == 0:\n            return min(x, y)\n        else:\n            return max(x, y)\n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(x, y+1):\n        if i % 2 == 0:\n            if i == y:\n                return i\n            else:\n                continue\n        else:\n            continue\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if x%2!= 0 or y%2!= 0:\n        return -1\n    else:\n        for i in range(max(x, y), min(x, y), -2):\n            if i in range(x, y+1):\n                return i\n            else:\n                continue\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if x % 2 == 0 and x <= y:\n        return x\n    else:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(round(sum(range(n, m+1))/m))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    try:\n        avg = int(str(int(str(round(sum(range(n, m + 1)) / (m - n + 1)))))[-2:])\n    except ZeroDivisionError:\n        return -1\n    return bin(avg)[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    # your code here\n    return \"{0:b}\".format(round(sum([n, m])/2))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n, m = min(n, m), max(n, m)\n    if n > m: return -1\n    else: return bin(int(round(sum([i for i in range(n, m+1)]) / (m - n + 1))))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n    n, m = sorted((n, m))\n    if n > m:\n        return -1\n    return bin(int((m+n+1)/2))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n    avg = n + (m-n)/2\n    avg = int(avg)\n    avg = bin(avg)[2:]\n    return avg\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < m:\n        return -1\n    else:\n        ans = 0\n        for x in range(n, m + 1):\n            ans += x\n        return str(bin(ans // (m - n + 1)))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n    n = str(n)\n    m = str(m)\n    a = n + m\n    avg = sum(map(int, a)) / (len(n)+len(m))\n    avg = round(avg)\n    avg = bin(avg)[2:]\n    return(avg)\n    \nrounded_avg(7, 5) # => -1\nrounded_avg(10, 20) # => \"0b1111\"\nrounded_avg(20, 33) # => \"0b11010\"\nrounded_avg(1, 5) # => \"0b11\"\nrounded_avg(1, 100) # => \"0b110011001100110011001100110011001100110011\"\nrounded_avg(20, 32) # => \"0b11011011011110110111001100110011001100110011\""
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n > m: return -1\n    else:\n        average = int(n+m/2)\n        return bin(average)[2:]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted([i for i in x if not any(str(j).isdigit() for j in str(i))])"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for n in x:\n        if n%2!= 0:\n            result.append(n)\n    result.sort()\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    for i in x:\n        if i % 2!= 0:\n            result.append(i)\n    return sorted(result)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    uniq = []\n    for n in x:\n        l = list(map(int, list(str(n))))\n        if not any(d%2 == 0 for d in l):\n            uniq.append(n)\n    return sorted(uniq)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    new_list = []\n    for num in x:\n        if num % 2 == 0:\n            continue\n        else:\n            new_list.append(num)\n    new_list.sort()\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code here\n    # list = []\n    # for x in x:\n    #     if int(x) % 2!= 0:\n    #         list.append(x)\n    # return sorted(list)\n    return sorted(list(set([x for x in x if x%2==0])))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = []\n    for i in x:\n        if i % 2!= 0:\n            res.append(i)\n    return sorted(res)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    x = sorted(x)\n    for num in x:\n        if num % 2 == 0:\n            x.remove(num)\n    return x\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    new_list = []\n    for n in x:\n        if all(c in '0123456789' for c in str(n)):\n            new_list.append(n)\n    return sorted(new_list"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    nums = []\n    for i in x:\n        flag = False\n        for j in str(i):\n            if int(j) % 2 == 0:\n                flag = True\n                break\n        if flag == False:\n            nums.append(i)\n    return sorted(nums)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    def numberToName(number):\n        if number == 1:\n            return \"One\"\n        elif number == 2:\n            return \"Two\"\n        elif number == 3:\n            return \"Three\"\n        elif number == 4:\n            return \"Four\"\n        elif number == 5:\n            return \"Five\"\n        elif number == 6:\n            return \"Six\"\n        elif number == 7:\n            return \"Seven\"\n        elif number == 8:\n            return \"Eight\"\n        elif number == 9:\n            return \"Nine\"\n        \n    def int_to_string(num):\n        return [int(x) for x in str(num)]\n    \n    def sort_between(array):\n        for i in range(0, len(array)):\n            for j in range(i + 1, len(array)):\n                if array[j] < array[i]:\n                    temp = array[j]\n                    array[j] = array[i]\n                    array[i] = temp\n        return array\n        \n    def reverse_list(array):\n        return array[::-1]\n        \n    def replace_digits(array):\n        for i in range(0, len(array)):\n            array[i] = numberToName(array[i])\n        return array\n    \n    if len(arr) == 0:\n        return []\n    \n    # sort the array\n    sort_arr = sort_between(arr)\n    \n    # reverse the array\n    rev_arr = reverse_list(sort_arr)\n    \n    # replace all of the digits with their corresponding names\n    replace_arr = replace_digits(rev_arr)\n    \n    return replace_arr\n    \nprint(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(by_length([1, 1, 2, 2, 3, 4, 5, 8, 8]))\nprint(by_length([1, -1, 55]))\nprint(by_length([]))\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # result = []\n    # numbers = []\n    # for i in arr:\n    #     if i >= 1 and i <= 9:\n    #         numbers.append(i)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    def array_value_to_letters(arr):\n        values = []\n        letters = []\n        for value in arr:\n            if value > 0 and value <= 9:\n                values.append(value)\n                letters.append(letters_dict[value])\n        return letters\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    raise NotImplementedError(\"by_length is not implemented\")\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    \n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # METHOD 1 - Time Complexity: O(nlogn) because of the sorting\n    # arr = [2, 1, 1, 4, 5, 8, 2, 3]\n    # -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    # -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    \n    # METHOD 2 - Time Complexity: O(n)\n    arr = list(filter(lambda x: 1 <= x <= 9, arr)) # (arr)\n    arr.sort() # (arr)\n    arr.reverse() # (arr)\n    # for i in range(0, len(arr)):\n    #     arr[i] = numbers_to_names[arr[i]] # (arr)\n    \n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    numbers = [i for i in range(1,10)]\n    numbers.sort(key=lambda i: i in arr)\n    numbers.reverse()\n    \n    if not arr:\n        return []\n    \n    for i in range(len(numbers)):\n        numbers[i] = numbers[i].__name__\n    \n    return numbers\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    ret = []\n    \n    def sort_and_reverse(arr):\n        arr.sort()\n        arr.reverse()\n        return arr\n    \n    def replace(arr, number):\n        for i in range(len(arr)):\n            if arr[i]!= number:\n                continue\n            ret.append(number_to_word[number])\n            return\n    \n    if arr:\n        sort_and_reverse(arr)\n        \n        for number in arr:\n            replace(arr, number)\n    \n    return ret\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst = [1]\n    for i in range(1, n):\n        lst.append(i*i if i % 2 == 0 else sum(range(1, i+1)))\n    return lst\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert (n >= 1)\n    lst = [1]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            lst.append(reduce(lambda x, y: x * y, range(1, i + 1)))\n        else:\n            lst.append(reduce(lambda x, y: x + y, range(1, i + 1)))\n    return lst\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    list_ret = [1]\n    for i in range(2,n+1):\n        list_ret.append(list_ret[i-1] * i if i%2 == 0 else sum(range(1,i+1)))\n    return list_ret\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # your code\n    l = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            l.append(reduce(lambda x, y: x * y, range(1, i + 1)))\n        else:\n            l.append(sum(range(1, i + 1)))\n    return l\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i if i%2==0 else sum(range(1,i+1)) for i in range(1, n+1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # if n is even, f(n) is the list of the numbers from 1 to n.\n    if n%2 == 0:\n        result = [i for i in range(1,n+1)]\n    # if n is odd, f(n) is the list of the numbers from 1 to n.\n    else:\n        result = [sum(range(1,i+1)) for i in range(1,n+1)]\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i if i % 2 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (0, 0) if n < 2 else (len(list(filter(lambda x: str(x) == str(x)[::-1], range(1, n + 1)))), len(list(filter(lambda x: str(x)!= str(x)[::-1], range(1, n + 1)))))\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return (num_palindromes_in_range(1, n, is_palindrome), num_palindromes_in_range(1, n, lambda x: x % 2 == 0))\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return (1, 2) if n % 2 == 0 else (0, 1)"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Store the number of palindromes that fall within the range 1, n.\n    # Let A = number of palindromes that fall within the range 1, n/2.\n    # Let B = number of palindromes that fall within the range 2n+1, n.\n    # We can prove that A + B = O(n).\n    A = sum(1 for i in range(1, n + 1, 2) if is_palindrome(i))\n    B = sum(1 for i in range(2 * n + 1, n, -2) if is_palindrome(i))\n    return A, B\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def count(n):\n        if n < 0:\n            return -1\n        else:\n            return 1\n    counts = 0\n    for i in arr:\n        if count(i) == 1:\n            counts += 1\n    return counts\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(all(digit >= 0 for digit in digits) for digits in map(lambda x: [abs(x) % 10], arr))\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    arr_set = set(arr)\n    count = 0\n    for i in arr_set:\n        if i < 0:\n            count += 1\n    return len(arr) - count\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not arr:\n        return 0\n    return sum(int(char) > 0 for char in str(arr[0])) + sum(count_nums(arr[1:]) for i in range(1, len(arr)))\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    counter = 0\n    for n in arr:\n        if n >= 0:\n            counter += 1\n        else:\n            n_str = str(n)\n            for i in range(1, len(n_str)):\n                if n_str[i]!= \"0\" and int(n_str[i]) - int(n_str[i-1])!= 1:\n                    break\n            else:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for num in arr:\n        if sum([int(digit) for digit in str(num)]) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # TODO implement me\n    count = 0\n    for n in arr:\n        #digit_sum = sum([int(i) for i in str(abs(n))])\n        if n > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Your code here\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum(1 for x in arr if x > 0 and sum(map(int, str(abs(x)))) > 0)\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return True if len(arr) > 0 else False\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n=len(arr)\n    temp=arr[n-1]\n    arr[n-1]=arr[0]\n    arr[0]=temp\n    for i in range(1,n):\n        if arr[i-1]<arr[i]:\n            break\n    else:\n        return True\n    if i==n-1:\n        return True\n    for j in range(n-1,i-1,-1):\n        temp=arr[j]\n        arr[j]=arr[j-1]\n        arr[j-1]=temp\n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    arr.sort()\n    if arr[-1]<=arr[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            break\n    else:\n        return True\n    \n    # [3,5,4,1,2]\n    #       ^\n    # [3,5,4,1,2]\n    #       ^\n    # [3,4,5,1,2]\n    #       ^\n    # [3,4,5,1,2]\n    #       ^\n    # [3,4,5,1,2]\n    #       ^\n    # [3,4,1,2]\n    #       ^\n    # [3,4,1,2]\n    #       ^\n    # [3,1,2]\n    #       ^\n    # [3,1,2]\n    #       ^\n    # [1,2]\n    #       ^\n    # [1,2]\n    #       ^\n    # [2]\n    #       ^\n    # [2]\n    #       ^\n    # [2,1]\n    #       ^\n    # [2,1]\n    #       ^\n    # [2,1,3]\n    #       ^\n    # [2,1,3]\n    #       ^\n    # [2,1,3,4]\n    #       ^\n    # [2,1,3,4]\n    #       ^\n    # [2,1,3,4,5]\n    #       ^\n    # [2,1,3,4,5]\n    #       ^\n    # [2,1,3,4,5,6]\n    #       ^\n    # [2,1,3,4,5,6]\n    #       ^\n    # [2,1,3,4,5,6,7]\n    #       ^\n    # [2,1,3,4,5,6,7]\n    #       ^\n    # [2,1,3,4,5,6,7,8]\n    #       ^\n    # [2,1,3,4,5,6,7,8]\n    #       ^\n    # [2,1,3,4,5,6,7,8,9]\n    #       ^\n    # [2,1,3,4,5,6,7,8,9]\n    #       ^\n    # [2,1,3,4,5,6,7,8,9,10]\n    #       ^\n    # [2,1,3,4,5,6,7,8,9,10]\n    #       ^\n    # [2,1,3,4,5,6,7,8,9,10,11]\n    #       ^\n    # [2,1,3,4,5,6,7,8,9,10,11]\n    #       ^\n    # [2,1,3,4,5,6,7,8,9,10,11,12]\n    #       ^\n    # [2,1,3,4,5,6,7,8,9,10,11,12]\n    #       ^\n    # [2,1,3,4,5,6,7,8,9,10,11,12,13]\n    #       ^\n    # [2,1,3,4,5,6,7,8,9,10,11,12,13]\n    #       ^\n    # [2,1,3,4,5,6,7,8,9,10,11,12,13,14]\n    #       ^\n    # [2,1,3,4,5,6,7,8,9,10,11,12,13,14]\n    #       ^\n    # [2,1,3,4,5,6,7,8,9,10,11,12,13,14,15]"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not arr: return True\n    n = len(arr)\n    for _ in range(n):\n        idx = arr.index(max(arr))\n        arr = arr[idx:]+arr[:idx]\n    return arr==sorted(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not arr:\n        return True\n    \n    max_num = max(arr)\n    count = arr.count(max_num)\n    \n    if count > 1:\n        return False\n    \n    if count == 0:\n        return False\n    \n    # if the array has unique elements\n    \n    return move_one_ball_helper(arr, 0, max_num)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def right_shift(arr):\n        # we are trying to get arr[i] = arr[i+1]\n        # if this condition is false\n        # then we have to shift all elements of the array\n        for i in range(len(arr)):\n            if i == len(arr)-1:\n                continue\n            elif arr[i] >= arr[i+1]:\n                arr[i] = arr[i+1]\n        return arr\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n    for num in lst2:\n        if num % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Write your solution here\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if (sorted(lst1)!= sorted(lst2)):\n        return \"NO\"\n    \n    for num in lst1:\n        if (num % 2!= 0):\n            return \"NO\"\n    \n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Check if the length of the list is even, if not return No\n    if len(lst1) % 2!= 0:\n        return \"NO\"\n    # Create a set of the numbers in the lst1\n    lst1_set = set(lst1)\n    # Create a set of the numbers in the lst2\n    lst2_set = set(lst2)\n    # Create a set of the numbers in the lst1\n    lst1_set.difference_update(lst2_set)\n    # If the length of the lst1_set is not 0, then there are numbers in the lst1_set\n    # and the lst1 is not even so the number is not possible\n    if len(lst1_set)!= 0:\n        return \"NO\"\n    # The number is even so the number is possible\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Your code here\n    if lst1 == lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # if lst1 is empty, then no exchange needed\n    # if lst2 is empty, then no exchange needed\n    # if lst1 contains even number(s), then no exchange needed\n    # if lst2 contains even number(s), then no exchange needed\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    if len(lst1) >= 1 and lst1[0] % 2 == 0:\n        return \"NO\"\n    if len(lst2) >= 1 and lst2[0] % 2 == 0:\n        return \"NO\"\n    if len(lst1) >= 1 and lst2[0] % 2!= 0:\n        return \"NO\"\n    if len(lst2) >= 1 and lst1[0] % 2!= 0:\n        return \"NO\"\n    # if lst1 is even, lst2 is odd, then exchange elements in lst1 and lst2\n    # and return \"YES\"\n    if len(lst1) >= 1 and len(lst2) >= 1:\n        lst1.pop(0)\n        lst2.pop(0)\n        return \"YES\"\n    # if lst1 is odd, lst2 is even, then exchange elements in lst1 and lst2\n    # and return \"YES\"\n    if len(lst1) >= 1 and len(lst2) >= 1:\n        lst1.pop(0)\n        lst1.append(lst2[0])\n        lst2.pop(0)\n        return \"YES\"\n    # if lst1 is even, lst2 is even, then exchange elements in lst1 and lst2\n    # and return \"YES\"\n    if len(lst1) >= 1 and len(lst2) >= 1:\n        lst1.pop(0)\n        lst2.pop(0)\n        lst2.append(lst1[0])\n        lst1.pop(0)\n        return \"YES\"\n    # if lst1 is odd, lst2 is odd, then exchange elements in lst1 and lst2\n    # and return \"YES\"\n    if len(lst1) >= 1 and len(lst2) >= 1:\n        lst1.pop(0)\n        lst2.pop(0)\n        lst2.append(lst1[0])\n        lst1.pop(0)\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    odd_lst1 = []\n    even_lst1 = []\n    for num in lst1:\n        if num % 2 == 0:\n            even_lst1.append(num)\n        else:\n            odd_lst1.append(num)\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # TODO: IMPLEMENT THIS FUNCTION\n    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: Your code here\n    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # for i in lst1:\n    #     if i % 2!= 0:\n    #         return \"NO\"\n    # for i in lst2:\n    #     if i % 2!= 0:\n    #         return \"NO\"\n    # return \"YES\"\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if test == '':\n        return {}\n    else:\n        dictionary = {}\n        for c in test:\n            if c in dictionary:\n                dictionary[c] += 1\n            else:\n                dictionary[c] = 1\n        return dictionary\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    letter_dict = dict()\n    list_of_letters = test.split(\" \")\n    # print(list_of_letters)\n    for letter in list_of_letters:\n        if letter not in letter_dict:\n            letter_dict[letter] = 1\n        else:\n            letter_dict[letter] += 1\n    return letter_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    histo = {}\n    words = test.split()\n    for word in words:\n        for letter in word:\n            histo[letter] = histo.get(letter, 0) + 1\n    return histo\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # your code\n    counts = {}\n    words = test.split()\n    for word in words:\n        if word not in counts:\n            counts[word] = 1\n        else:\n            counts[word] += 1\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    dict = {}\n    for letter in test:\n        if letter in dict:\n            dict[letter] = dict.get(letter) + 1\n        else:\n            dict[letter] = 1\n    return dict\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Initialize an empty dictionary\n    dictionary = {}\n    # Make a list of letters from string\n    letters = list(test.split(' '))\n    # Iterate over the list of letters\n    for letter in letters:\n        # If the letter is not already in the dictionary, add it with a value of 1\n        if letter not in dictionary:\n            dictionary[letter] = 1\n        # If the letter is already in the dictionary, increment its value by 1\n        else:\n            dictionary[letter] += 1\n    # Return the dictionary\n    return dictionary\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # YOUR CODE GOES HERE\n    dic={}\n    lst = test.split()\n    for i in lst:\n        if i in dic.keys():\n            dic[i]+=1\n        else:\n            dic[i]=1\n    # print(dic)\n    max=0\n    for k,v in dic.items():\n        if v>max:\n            max=v\n            l=[]\n            l.append(k)\n        elif v==max:\n            l.append(k)\n    # print(l)\n    return(l)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    dic = {}\n    test_list = test.split(' ')\n    for i in test_list:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    hist = dict()\n    for letter in test.split():\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = ''\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    return result,result == s[::-1]\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s_rev = s[::-1]\n    if c in s_rev:\n        i = s_rev.index(c)\n        s_rev = s_rev[:i] + s_rev[i+1:]\n    if s_rev == s:\n        return (s_rev, True)\n    else:\n        return (s_rev, False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = \"\"\n    is_palindrome = False\n    for char in s:\n        if char not in c:\n            result += char\n        else:\n            is_palindrome = True\n    return (result,is_palindrome)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # your code here\n    result = ''\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= c[0]:\n            result += s[i]\n        else:\n            count += 1\n    if count == len(c):\n        return result + s[len(c):], False\n    else:\n        return result + s[len(c):], True\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return (s.replace(c,\"\"),len(s) == len(s[::-1]))\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    try:\n        s = s.replace(c,'')\n        if s == s[::-1]:\n            return (s,True)\n        else:\n            return (s,False)\n    except:\n        return ('',False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    c = list(c)\n    c.sort()\n    c.reverse()\n    c = \"\".join(c)\n    r = []\n    for i in s:\n        if i!= c:\n            r.append(i)\n    print(r)\n    f = \"\".join(r)\n    if f == f[::-1]:\n        return (f,True)\n    else:\n        return (f,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # your code here\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return None\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    s = s.replace(c,\"\")\n    s = s[::-1]\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [\"the number of odd elements \" + str(len([i for i in x if int(i)%2 == 1])) + \" of the \" + x for x in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    out = []\n    for string in lst:\n        counter = 0\n        for char in string:\n            if int(char) % 2 == 1:\n                counter += 1\n        out.append(f\"the number of odd elements {counter}n the str{len(string)}ng {string} of the {len(lst)}nput.\")\n    return out\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def odd_count_helper(string):\n        return sum(digit in '13579' for digit in string)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # we need to make a list containing a list for each string\n    # each list will be populated with 0's as long as the string is\n    # we will set each element of the list to 0 by default\n    lst_of_lists = []\n    for s in lst:\n        lst_of_lists.append(list(0 for element in range(len(s))))\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # make a list of a list for each string in lst\n    # iterate through lst\n        # count num of odd chars\n        # append to out list\n    return [\"the number of odd elements \" + str(len([i for i in [i for i in i if int(i)%2!=0]])) + \"n the str\" + str(num) + \"n of the \" + str(len(str)) + \"nput.\" for num,str in enumerate(lst)]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # YOUR CODE HERE\n    def is_odd(n):\n        return n % 2 == 1\n    return [str(len([c for c in s if is_odd(int(c))])) for s in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lst_odd = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j)%2 == 1:\n                count += 1\n        lst_odd.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(len(i)) + \" of the \" + str(len(lst)) + \"nput.\")\n    return lst_odd\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = []\n    for x in lst:\n        y = 0\n        for i in x:\n            if int(i) % 2!= 0:\n                y += 1\n        count.append(f\"the number of odd elements {y}n the str{len(x)}ng {x} of the {len(lst)}nput.\")\n    return count\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    counter = 0\n    count_lst = []\n    for num in lst:\n        for ch in num:\n            if ch.isdigit():\n                counter += 1\n        count_lst.append(f\"the number of odd elements {counter}n the str{num}ng {counter} of the {lst.index(num)}nput.\")\n        counter = 0\n    return count_lst\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    ret_lst = []\n    for i in lst:\n        ret_lst.append(odd_count_helper(i))\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    left = 0\n    total = 0\n    min_sum = sys.maxsize\n    for right, value in enumerate(nums):\n        total += value\n        while total >= n:\n            min_sum = min(min_sum, total-nums[left])\n            total -= nums[left]\n            left += 1\n    return min_sum if min_sum < sys.maxsize else 0\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    minSum = nums[0]\n    sums = []\n    sums.append(nums[0])\n    for i in range(1, len(nums)):\n        sums.append(sums[i - 1] + nums[i])\n    minSum = min(sums)\n    for i in range(len(nums)):\n        j = i + 1\n        sums = []\n        sums.append(nums[0])\n        while j < len(nums):\n            sums.append(sums[j - 1] + nums[j])\n            j += 1\n        if min(sums) < minSum:\n            minSum = min(sums)\n    return minSum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(i, len(nums)):\n            sum += nums[j]\n            if sum < min_sum:\n                min_sum = sum\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    start = 0\n    end = 0\n    sum = 0\n    min_sum = float(\"inf\")\n    while end < len(nums):\n        sum += nums[end]\n        if sum < min_sum:\n            min_sum = sum\n        if sum >= min_sum:\n            while sum >= min_sum and start <= end:\n                sum -= nums[start]\n                start += 1\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    start = 0\n    currSum = 0\n    result = float('inf')\n    \n    for end in range(len(nums)):\n        currSum += nums[end]\n        while currSum >= 0:\n            if currSum < result:\n                result = currSum\n            currSum -= nums[start]\n            start += 1\n    return result if result < float('inf') else 0\n    \ndef minSubArraySum2(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    start = 0\n    end = 0\n    result = float('inf')\n    \n    while end < len(nums):\n        result = min(result, sum(nums[start:end+1]))\n        end += 1\n        while end < len(nums) and nums[end] >= nums[end-1]:\n            end += 1\n        start += 1\n    return result if result < float('inf') else 0\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not nums:\n        return None\n    n = len(nums)\n    s = 0\n    start = 0\n    end = 0\n    min_sum = nums[0]\n    for i in range(0, n):\n        s += nums[i]\n        while s >= min_sum:\n            min_sum = min(min_sum, s - min_sum)\n            start = end\n            end = i\n            if start == 0:\n                min_sum = nums[start + 1]\n            else:\n                min_sum = nums[start]\n        print(end, min_sum)\n        if end == n - 1:\n            break\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    min_sum = float('inf')\n    left = 0\n    total = 0\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = len(nums)\n    min_sub_sum = float('inf')\n    for start in range(n):\n        sum_array = 0\n        for end in range(start, n):\n            sum_array += nums[end]\n            min_sub_sum = min(sum_array, min_sub_sum)\n    return min_sub_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numsLen = len(nums)\n    subLen = 1\n    windowSum = nums[0]\n    bestSum = nums[0]\n    while subLen <= numsLen:\n        #print('subLen:'+ str(subLen))\n        for i in range(0, numsLen - subLen + 1):\n            windowSum = nums[i]\n            for j in range(i, i + subLen):\n                windowSum += nums[j]\n            #print('windowSum:'+ str(windowSum))\n            if windowSum < bestSum:\n                bestSum = windowSum\n        subLen += 1\n    return bestSum\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not grid: return 0\n    \n    n = len(grid)\n    m = len(grid[0])\n    \n    def get_bucket_level(bucket):\n        \"\"\"\n        Return the number of times the bucket has to be lowered to empty it.\n        \"\"\"\n        # Sum of the minimum number of times to lower the bucket\n        # for each unit of water.\n        return sum(min(bucket_capacity, n - bucket) for n in bucket)\n    \n    # DP.\n    # dp[i][j]:\n    # The number of times it is required to lower the buckets\n    # for the units of water in the ith row to the ith column.\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    \n    # Find the level of water in the buckets.\n    water_level = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 0:\n                water_level[i][j] = get_bucket_level(grid[i])\n                dp[i][j] = water_level[i][j]\n    \n    for i in range(1, n):\n        for j in range(m):\n            for k in range(j + 1, m):\n                dp[i][k] = dp[i][k] + dp[i - 1][j]\n                water_level[i][k] = min(water_level[i][k], water_level[i - 1][j])\n    \n    for j in range(1, m):\n        for i in range(n):\n            for k in range(i + 1, n):\n                dp[k][j] = dp[k][j] + dp[i][j - 1]\n                water_level[k][j] = min(water_level[k][j], water_level[i][j - 1])\n    \n    return dp[n - 1][m - 1] + sum(get_bucket_level(bucket) for bucket in grid)\n    \n    \ndef water_trapped(heights):\n    \"\"\"\n    You are given an array of non-negative integers representing\n    the heights of neighboring buildings on a city street,\n    from east to west. The city assessor would like you to\n    determine what portion of the street's water can be trapped\n    between the buildings. For example, given the heights\n    [3, 0, 2, 0, 4], the water between the first and second\n    buildings (3 and 0) could be trapped. Between the third and fourth\n    buildings (0 and 2) it could be trapped.\n    Input: \n        heights: List[int]\n    Output: \n        int: the total volume of water trapped on the streets.\n    \"\"\"\n    if not heights: return 0\n    \n    def get_water_volume(min_height, max_height):\n        \"\"\"\n        Return the total water volume in the given range.\n        \"\"\"\n        return max_height - min_height\n    \n    # DP.\n    # dp[i]: The total water volume for heights[:i + 1]\n    dp = [0 for _ in heights]\n    dp[0] = heights[0]\n    dp[1] = max(dp[0], heights[1])\n    for i in range(2, len(heights)):\n        dp[i] = max(dp[i - 1], dp[i - 2] + heights[i])\n    \n    # For each i, find the maximum j that\n    # dp[j] < heights[i] for all j > i.\n    water = 0\n    max_height = -math.inf\n    for i in range(len(heights)):\n        if heights[i] > max_height:\n            max_height = heights[i]\n        water += get_water_volume(min(heights[i], max_height), max_height)\n    \n    return water\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #row = len(grid)\n    #col = len(grid[0])\n    #print(row, col)\n    \n    #possible_wells = set()\n    #for i in range(row):\n    #    for j in range(col):\n    #        if grid[i][j] == 1:\n    #            possible_wells.add((i, j))\n    #print(possible_wells)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def count_buckets(grid):\n        n = len(grid)\n        m = len(grid[0])\n        l = [[0] * (m + 1) for _ in range(n + 1)]\n        r = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                l[i][j] = max(l[i - 1][j], grid[i - 1][j - 1]) + grid[i - 1][j - 1]\n                r[i][j] = max(r[i - 1][j], grid[i - 1][j - 1]) + grid[i - 1][j - 1]\n        return n + m - l[n][m]\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(grid) == 0:\n        return 0\n    def helper(grid, capacity, n, m, visited, ans):\n        if n == len(grid) and m == len(grid[0]):\n            return True\n        if n < 0 or n >= len(grid) or m < 0 or m >= len(grid[0]):\n            return False\n        if visited[n][m] or grid[n][m] == 0:\n            return False\n        visited[n][m] = True\n        helper(grid, capacity, n+1, m, visited, ans)\n        helper(grid, capacity, n-1, m, visited, ans)\n        helper(grid, capacity, n, m+1, visited, ans)\n        helper(grid, capacity, n, m-1, visited, ans)\n        visited[n][m] = False\n    def search(grid, capacity, n, m):\n        visited = [[False for i in range(len(grid[0]))] for j in range(len(grid))]\n        ans = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if helper(grid, capacity, i, j, visited, ans):\n                    ans += 1\n        return ans\n    return search(grid, capacity, 0, 0)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    # print(rows, cols)\n    if rows == 0 or cols == 0 or capacity == 0:\n        return 0\n    if rows == 1 and cols == 1 and grid[0][0] == 0:\n        return 0\n    buckets_filled = 0\n    # counter = 0\n    for i in range(rows):\n        for j in range(cols):\n            # counter += 1\n            # print(i,j,counter)\n            if grid[i][j] == 0:\n                return buckets_filled\n            if grid[i][j] == 1:\n                temp_filled_buckets = get_filled_buckets(grid, i, j, capacity)\n                # print(temp_filled_buckets)\n                buckets_filled = max(buckets_filled, temp_filled_buckets)\n    return buckets_filled\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def count_wells_in_row(grid, row):\n        \"\"\"\n        Given a row of wells, count the number of wells in it.\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    N = len(grid)\n    M = len(grid[0])\n    B = bucket_capacity\n    # for i in range(len(grid[0])):\n    #     print(grid[0][i], grid[1][i], grid[2][i])\n    # print(grid)\n    dp = [[[0 for k in range(B + 1)] for j in range(M + 1)] for i in range(N + 1)]\n    # dp = [[[0 for k in range(B + 1)] for j in range(M + 1)] for i in range(N + 1)]\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def helper(grid, bucket_capacity):\n        h = len(grid)\n        w = len(grid[0])\n        dp = [[math.inf]*(w+1) for _ in range(h+1)]\n        dp[0][0] = 0\n        for row in range(h):\n            for col in range(w):\n                if grid[row][col]:\n                    dp[row+1][col+1] = min(dp[row+1][col+1], dp[row][col]+1)\n                    dp[row+1][col] = min(dp[row+1][col], dp[row][col])\n                    dp[row][col+1] = min(dp[row][col+1], dp[row][col])\n        for row in range(h+1):\n            for col in range(w+1):\n                dp[row][col] = min(dp[row][col], bucket_capacity)\n        return dp[-1][-1]\n    return helper(grid, capacity) - 1\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # grab dimensions of grid\n    rows = len(grid)\n    columns = len(grid[0])\n    \n    # for each well, iterate through its rows \n    for row in range(rows):\n        for col in range(columns):\n            # if this is a well, calculate the max number of wells you can possibly empty\n            if grid[row][col] == 1:\n                # initialise empty variables\n                max_wells = 0\n                row_count = 1\n                col_count = 1\n                total_count = 0\n                # iterate through the row and column\n                for i in range(rows):\n                    for j in range(columns):\n                        # if this is a well, increment row_count\n                        if grid[i][j] == 1:\n                            row_count += 1\n                            if row_count > max_wells:\n                                max_wells = row_count\n                        # if this is a well, increment col_count\n                        if grid[j][i] == 1:\n                            col_count += 1\n                            if col_count > max_wells:\n                                max_wells = col_count\n                # add max_wells to total_count\n                total_count += max_wells\n                \n    # return total_count\n    return total_count\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def get_min_level(grid, capacity):\n        import numpy as np\n        level = 0\n        while capacity > 0:\n            level += 1\n            capacity -= len(grid[0])\n            if capacity < 0:\n                return level\n            level += np.count_nonzero(grid, axis=0)\n            grid = np.transpose(grid)\n            capacity -= len(grid[0])\n            if capacity < 0:\n                return level\n            level += np.count_nonzero(grid, axis=0)\n            grid = np.transpose(grid)\n        return level\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count(\"1\"), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(arr, key=lambda x: (str(bin(x)).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # dict comprehension -> {binary: number of ones}\n    # binary is the key (string) of the value (number of ones)\n    # lambda: anonymous function, needed because of the set(), since keys are unique\n    # -> set() will take care of the duplicate keys\n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def bin_sort(a):\n        return a.count('1')\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # This is the function to be implemented:\n    def sort_binary(num):\n        num = bin(num)[2:]\n        return (num.count('1'), num)\n    #print(sort_binary(0))\n    #return sorted(arr, key=sort_binary)\n    return sorted(arr, key = lambda x: (sort_binary(x)[0], x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(s) == 0: return []\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    n_consonants = n\n    return_list = []\n    for i in words:\n        word_consonants = 0\n        for j in i:\n            if j in consonants:\n                word_consonants += 1\n        if word_consonants == n_consonants:\n            return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    words = s.split(' ')\n    consonants_list = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    list_of_words = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char in consonants_list:\n                count += 1\n        if count == n:\n            list_of_words.append(word)\n    return list_of_words\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 0:\n        return []\n    if not s:\n        return []\n    s = s.split()\n    s = \"\".join(s)\n    s = s.lower()\n    s = list(s)\n    consonant = []\n    for char in s:\n        if char not in cons and char!= \" \":\n            consonant.append(char)\n    consonant = sorted(consonant)\n    consonant = list(dict.fromkeys(consonant))\n    print(consonant)\n    select = []\n    for word in s:\n        if word in cons:\n            select.append(word)\n    select = sorted(select)\n    print(select)\n    i = 0\n    output = []\n    for word in select:\n        count = 0\n        for char in word:\n            if char in cons:\n                count += 1\n        if count == n:\n            output.append(word)\n    return output\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert n > 0, \"Please specify an integer greater than 0\"\n    assert n < 10, \"Please specify an integer less than 10\"\n    assert len(s) > 0, \"Please specify a string that contains at least one character\"\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return re.findall('[A-Za-z]+', s)\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    consonants = set(consonants)\n    words = s.split()\n    ret = []\n    for word in words:\n        if len(word) <= n:\n            continue\n        if set(word).issubset(consonants):\n            ret.append(word)\n    return ret\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    words = s.split()\n    result = []\n    for word in words:\n        if has_n_consonants(word, n):\n            result.append(word)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [w for w in s.split(\" \") if check_word(w, n)]"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    vowels = set('aeiouAEIOU')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # your code here\n    vowels = \"aeiouAEIOU\"\n    first_idx = len(word) - 1\n    last_idx = len(word) - 1\n    last_in_range = None\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            last_in_range = i\n            break\n    for i in range(len(word)):\n        if word[i] in vowels:\n            first_idx = i\n            break\n    if first_idx < last_idx:\n        return word[last_in_range]\n    else:\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in range(len(word)-1, -1, -1):\n        if word[i] in \"aeiouAEIOU\":\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowels = set('aeiouy')\n    i = len(word) - 1\n    while i >= 0 and word[i] not in vowels:\n        i -= 1\n    if i == -1:\n        return ''\n    j = len(word) - 1\n    while j >= 0 and word[j] in vowels:\n        j -= 1\n    return word[j + 1:i + 1]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    #REMEMBER:.find() is O(n) complexity\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in 'aeiouAEIOU':\n            return word[i + 1:]\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    closest_vowel = \"\"\n    vowel_list = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    pos = -1\n    for char in word[::-1]:\n        if char.lower() in vowel_list:\n            pos = word.index(char)\n            break\n    if pos!= -1:\n        for char in word[pos::-1]:\n            if char.lower() not in vowel_list:\n                closest_vowel = char\n                break\n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowels = set('aeiou')\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not word:\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(word) < 2:\n        return ''\n    closest_vowel = ''\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in 'aeiou':\n            closest_vowel = word[i]\n            break\n        elif i == 0:\n            return ''\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in 'aeiou':\n            closest_vowel = word[i]\n            break\n        elif word[i] in 'bcdfghjklmnpqrstvwxyz':\n            return closest_vowel\n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowels = set(['a','e','i','o','u','A','E','I','O','U'])\n    word = word[::-1]\n    word_index = 0\n    while word_index < len(word):\n        if word[word_index] not in vowels:\n            word_index+=1\n            continue\n        break\n    # print(word_index)\n    if word_index == len(word) or word[word_index] not in vowels:\n        return \"\"\n    else:\n        word = word[word_index:]\n        # print(word)\n        word_index = 0\n        while word_index < len(word):\n            if word[word_index] in vowels:\n                return word[word_index]\n            word_index+=1\n        return \"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    stack = []\n    for item in lst:\n        if item == '(':\n            stack.append(item)\n        else:\n            try:\n                stack.pop()\n            except IndexError:\n                return 'No'\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    # Solution 1\n    if lst[0][0] == '(' and lst[0][-1] == ')' and lst[1][0] == ')' and lst[1][-1] == '(':\n        return 'Yes'\n    \n    # Solution 2\n    elif lst[0][0] == '(' and lst[0][-1] == ')' and lst[1][0] == '(' and lst[1][-1] == ')':\n        return 'Yes'\n    \n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return 'Yes' if is_balanced(lst) else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # EXAMPLES:\n    # match_parens(['(())()', '()(())']) == 'Yes'\n    # match_parens([')', ')')]) == 'No'\n    # match_parens(['(()()', '()))']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if lst == []:\n        return 'Yes'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    for i in range(0,len(lst),2):\n        if lst[i] == ')' and lst[i+1] == '(':\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s = ''.join(lst)\n    return 'Yes' if sum([s.count(x) for x in ['(', ')', '[]', '{}']]) % 2 == 0 else 'No'"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # An important observation is that if there are more close parentheses\n    # than open ones, then the string is always bad.\n    # So if lst[0] has more close parentheses, then return 'No'.\n    if lst[0].count('(') > lst[0].count(')'):\n        return 'No'\n    # Now, if the first element of lst is a string of ')'\n    # then the result is 'No'.\n    if lst[0][0] == ')':\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return 'Yes' if lst[0].count('(') == lst[0].count(')') and \\\n    lst[1].count('(') == lst[1].count(')') else 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # arr.sort(reverse=True)\n    # return arr[:k]\n    \n    # arr.sort()\n    # return arr[-k:]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    arr.sort(reverse=True)\n    return arr[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if k < 0 or k > len(arr):\n        raise ValueError('Invalid k value: {}'.format(k))\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # solve with quicksort: O(n * log n)\n    # solve without quicksort: O(n)\n    # TODO: invalid input\n    if k >= len(arr):\n        return sorted(arr, reverse=True)\n    return quicksort(arr, 0, len(arr) - 1, k)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert (isinstance(arr, list) and isinstance(k, int))\n    if k <= 0 or k > len(arr):\n        return []\n    \n    ret = []\n    while len(ret) < k:\n        cur_max = float('-inf')\n        for val in arr:\n            if cur_max < val:\n                cur_max = val\n        if cur_max not in ret:\n            ret.append(cur_max)\n        arr.remove(cur_max)\n    return ret\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def partition(arr, left, right):\n        \"\"\"\n        Partitions the arr into two parts, the left part is sorted, the right part\n        is not.\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    \n    return sum(lst[::2])\n    \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    odd_nums = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            odd_nums.append(lst[i])\n    \n    if not odd_nums:\n        return 0\n    else:\n        return sum(odd_nums)\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in range(0, len(lst), 2):\n        if(lst[i] % 2!= 0):\n            sum += lst[i]\n    return sum\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            count += lst[i]\n    return count"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([lst[i] for i in range(0,len(lst)) if i%2==0 and lst[i]%2==1])\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result += lst[i]\n    return result"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Variable to hold the sum of all the odd numbers in the list that are in even index positions\n    # Holds a list of numbers that are in even index positions\n    even_nums = []\n    # Variable to hold the sum of the odd numbers in the list that are in odd index positions\n    # Holds a list of numbers that are in odd index positions\n    odd_nums = []\n    \n    # Iterate through each index of the list\n    for index in range(len(lst)):\n        # Check if the element at the index is an even number\n        if lst[index] % 2 == 0:\n            # If the element is an even number, append it to the even_nums list\n            even_nums.append(lst[index])\n        else:\n            # If the element is an odd number, append it to the odd_nums list\n            odd_nums.append(lst[index])\n    \n    # If the length of the even list is greater than zero, then return the sum of the even list\n    if len(even_nums) > 0:\n        return sum(even_nums)\n    # If the length of the odd list is greater than zero, then return the sum of the odd list\n    elif len(odd_nums) > 0:\n        return sum(odd_nums)\n    # If both lists are empty, return 0\n    else:\n        return "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    odd_sum = 0\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    x=0\n    for i in range(len(lst)):\n        if lst[i]%2!= 0:\n            x += lst[i]\n    return x\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return sum([i for i in lst if i%2==0 and i%2!=0])\nprint(solution([5, 8, 7, 1]))"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # This code takes O(n) time and O(1) space\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    output = sum(arr[:k])\n    if len(str(output)) > 2:\n        return output\n    else:\n        return sum([int(x) for x in str(output)])\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(int(i) for i in str(arr[:k]) if len(i) <= 2)\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([i for i in arr[:k] if len(str(i)) <= 2])\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([i for i in arr[:k] if len(str(i)) <= 2])"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    first_k_elements = arr[:k]\n    return sum(first_k_elements)\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    arr = arr[:k]\n    return sum([i for i in arr if i < 100])\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # sort the array\n    arr.sort()\n    # create a sum and the output array\n    sum = 0\n    out = []\n    # iterate over the array\n    for i in range(k):\n        # add the ith element to the sum and add the digits of the sum to the output array\n        sum += arr[i]\n        out.append(int(str(sum)[0:2]))\n        out.append(int(str(sum)[2:]))\n    return sum, out\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    #TODO: Your code here\n    collatz_list = []\n    for i in range(1, n):\n        collatz_list.append(collatz(i))\n    collatz_list.append(1)\n    return sorted(list(set([n for n in collatz_list if n not in collatz_list[1:len(collatz_list):2]])))\n    # return sorted([n for n in collatz_list if n not in collatz_list[1:len(collatz_list):2]])\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    odd_collatz = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        odd_collatz.append(n)\n    return odd_collatz\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    seq = []\n    n = n % 2 # To handle the case when n is even.\n    while True:\n        seq.append(n)\n        if n == 1:\n            break\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = (n * 3) + 1\n    return sorted(seq)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n <= 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        result = []\n        prev_num = n\n        while prev_num!= 1:\n            if prev_num % 2 == 0:\n                next_num = int(prev_num/2)\n                result.append(next_num)\n                prev_num = next_num\n            else:\n                next_num = int((3*prev_num + 1)/2)\n                result.append(next_num)\n                prev_num = next_num\n        result.append(1)\n    return sorted(result)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: x % 2, get_collatz(n)))\n    \ndef get_even_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    collatz = []\n    collatz_helper(collatz, n)\n    return sorted(list(set(collatz)))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # The Collatz sequence for 5 is [5, 16, 8, 4, 2, 1]\n    # Given n = 5, the sequence will always reach 1,\n    # so we should return [1, 5].\n    assert n > 0 and isinstance(n, int)\n    result = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        result.append(n)\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 1:\n        return [1]\n    collatz_seq = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return sorted(list(set([x for x in collatz_seq if x!= 1])))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(date) > 0:\n        num_days = {1:31,2:28,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}\n        valid = True\n        d,m,y = date.split('-')\n        if int(m) not in range(1,13):\n            valid = False\n        if int(d) not in range(1,num_days[int(m)]+1):\n            valid = False\n        return valid\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not date:\n        return False\n    date_split = date.split(\"-\")\n    if len(date_split)!= 3:\n        return False\n    month, day, year = date_split\n    if not month.isnumeric() or not day.isnumeric():\n        return False\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(month) == 2 and int(day) < 1 or int(day) > 29:\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) < 1 or int(day) > 31:\n        return False\n    if int(month) in [4, 6, 9, 11] and int(day) < 1 or int(day) > 30:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # YOUR CODE HERE\n    \n    try:\n        date = date.split('-')\n        if len(date)!= 3:\n            return False\n        if int(date[0]) < 1 or int(date[0]) > 12:\n            return False\n        if int(date[1]) < 1 or int(date[1]) > 31:\n            if int(date[0]) == 2 and int(date[1]) > 29:\n                return False\n            if int(date[0]) in [1,3,5,7,8,10,12] and int(date[1]) > 30:\n                return False\n            if int(date[0]) in [4,6,9,11] and int(date[1]) > 30:\n                return False\n        if int(date[2]) < 1:\n            return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    try:\n        months = {1:31,2:29,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}\n        # year,month,day = [int(i) for i in input().split('-')]\n        year,month,day = date.split('-')\n        if len(year)!= 4 or len(month)!= 2 or len(day)!= 2:\n            return False\n        if int(year) < 0 or int(month) < 1 or int(month) > 12 or int(day) < 1 or int(day) > months[int(month)]:\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    try:\n        date_split = date.split('-')\n        month = int(date_split[0])\n        day = int(date_split[1])\n        year = int(date_split[2])\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # split the date string by '-'\n    date_list = date.split('-')\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # a = date.split('-')\n    # a = [int(x) for x in a]\n    # if len(a)!= 3:\n    #     return False\n    # elif a[0] == 1 and a[1] == 1 and a[2] == 1970:\n    #     return True\n    # elif a[0] == 1 and a[1] == 2 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 3 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 4 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 5 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 6 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 7 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 8 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 9 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 10 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 11 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 12 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 1 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 2 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 3 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 4 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 5 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 6 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 7 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 8 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 9 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 10 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 11 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 12 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 1 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 2 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 3 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 4 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 5 and a[2] == 2020:\n    #     return True\n    # elif a[0] == 1 and a[1] == 6 and a[2] ="
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Dict with months as key and days as value\n    months_with_31_days = {1,3,5,7,8,10,12}\n    months_with_30_days = {4,6,9,11}\n    days_with_29_days = {2}\n    date_list = date.split('-')\n    if len(date_list)!= 3:\n        return False\n    try:\n        # Validate the months\n        month = int(date_list[0])\n        if not 1 <= month <= 12:\n            return False\n        if month in months_with_31_days and not 1 <= int(date_list[1]) <= 31:\n            return False\n        elif month in months_with_30_days and not 1 <= int(date_list[1]) <= 30:\n            return False\n        elif month == 2 and not 1 <= int(date_list[1]) <= 29:\n            return False\n        # Validate the day\n        day = int(date_list[1])\n        # Validate the year\n        year = int(date_list[2])\n        if not 1 <= day <= day_to_month(year,month):\n            return False\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # 1.\n    if date == '': return False\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    words = []\n    chars = []\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [l.strip(' ').split() for l in txt.split(',') if l.strip(' ')]\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #return list(txt.split(\" \"))\n    #return txt.split(\" \")\n    #return [i for i in txt if i.isalpha() or i == \",\"]\n    #return [i for i in txt.split(\" \") if i.isalnum()]\n    #return sum([i.isalpha() for i in txt.lower()])\n    #return txt.split(\" \")\n    #return txt.split(\",\")\n    #return sum([not i.islower() for i in txt])\n    #return txt.count(i)\n    #return txt.split(\" \")\n    return txt.split(\" \")\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # create a list of words from the txt\n    # split on whitespace if it exists\n    # split on comma if it exists\n    # return the split list\n    # REMEMBER to use list comprehension\n    return [i for i in txt.split()]\n    #return txt.split()\n    #return txt.split(',')\n    #return txt.split(' ')\n    #return txt.split(' ')\n    #return txt.split(' ')\n    #return txt.split(' ')\n    #return txt.split(' ')\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"abcdef\") == 3\n    res = [i for i in txt if i.isalpha()]\n    res = [i.lower() for i in res if i.isalpha()]\n    odds = 0\n    for i in 'abcdefghijklmnopqrstuvwxyz':\n        odds += res.count(i) % 2\n    return [res, odds]\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    #result = re.split(r'[^a-zA-Z]', txt)\n    #return result\n    #return [w for w in txt.split() if re.match('[^a-zA-Z]', w)]\n    result = re.split(r'[^a-zA-Z]', txt)\n    return [w for w in result if len(w) > 0]\n    #return [w for w in re.split('[^a-zA-Z]', txt) if len(w) > 0]\n    "
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    myList = []\n    for i in range(0,len(txt)):\n        if(ord(txt[i])>=97 and ord(txt[i])<=122):\n            myList.append(txt[i])\n        elif(ord(txt[i])>=65 and ord(txt[i])<=90):\n            myList.append(txt[i])\n        elif(ord(txt[i])==32):\n            myList.append(txt[i])\n        elif(ord(txt[i])>=48 and ord(txt[i])<=57):\n            myList.append(txt[i])\n    myList.sort()\n    return myList\n    \n    \ndef even_or_odd(num):\n    '''\n    Given a number, return whether this number is even or odd\n    Examples\n    even_or_odd(0) \u279e \"Even\"\n    even_or_odd(10) \u279e \"Even\"\n    even_or_odd(5) \u279e \"Odd\"\n    '''\n    if(num%2==0):\n        return \"Even\"\n    else:\n        return \"Odd\"\n    \ndef sum_num(num):\n    '''\n    Given a number, return the sum of each number in the number\n    Examples\n    sum_num(1) \u279e 1\n    sum_num(10) \u279e 10\n    sum_num(10000000) \u279e 10000000\n    '''\n    return sum([int(i) for i in list(str(num))])\n    \n    \ndef flip_horizontal(txt):\n    '''\n    Given a string, return a horizontal flip of the string\n    Examples\n    flip_horizontal(\"Hello\") \u279e \"olleH\"\n    flip_horizontal(\"Mubashir\") \u279e \"ubashirm\"\n    flip_horizontal(\"12345\") \u279e \"34512\"\n    '''\n    return txt[::-1]\n    \ndef flip_vertical(txt):\n    '''\n    Given a string, return a vertical flip of the string\n    Examples\n    flip_vertical(\"Hello\") \u279e \"olleH\"\n    flip_vertical(\"Mubashir\") \u279e \"ubashirm\"\n    flip_vertical(\"12345\") \u279e \"34512\"\n    '''\n    return txt[::-1].swapcase()\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Loop through list\n    # Check if current item is <= item next to it\n    # If not, return False\n    # If they are, continue\n    \n    # If list is empty\n    if lst == []:\n        return True\n    \n    # If there is only one item, return True\n    if len(lst) == 1:\n        return True\n    \n    # Loop through list\n    for i in range(len(lst)):\n        # If it is the last item\n        if i == len(lst) - 1:\n            # If item > item next to it, return False\n            if lst[i] > lst[i-1]:\n                return False\n        # If item > item next to it, return False\n        elif lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_lst = sorted(lst)\n    return lst == new_lst\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Check for sorted\n    if sorted(lst) == lst:\n        return True\n    # Check for duplicates\n    if len(set(lst))!= len(lst):\n        return False\n    # Check for duplicates\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    x = list(lst)\n    for i in range(len(x) - 1):\n        if x[i] > x[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # return lst == sorted(lst)\n    if len(lst) > 1:\n        for num in lst:\n            if lst.count(num) > 1:\n                return False\n    return lst == sorted(lst)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    #1. Sort the list and compare\n    #2. If the list is sorted, return True\n    #3. If the list is not sorted, return False\n    \n    #1.\n    if sorted(lst) == lst:\n        return True\n    else:\n        return False\n    \ndef missing_number(lst):\n    '''\n    Given a list of integers, return the missing number from the list.\n    If the list has duplicates, return False.\n    \n    Examples\n    missing_number([1, 2, 3]) \u279e 4\n    missing_number([7, 9, 12, 15, 16]) \u279e 0\n    missing_number([2, 4, 6, 8, 10, 11, 12]) \u279e 13\n    missing_number([1, 2, 3, 4, 5, 6, 7, 8, 9]) \u279e 10\n    missing_number([5, 5, 5, 5, 5]) \u279e False\n    '''\n    \n    #1. If the list is sorted, return the smallest value + 1.\n    #2. If the list is not sorted, return the smallest value - 1.\n    #3. If the list has duplicates, return False.\n    \n    #1.\n    if is_sorted(lst) == True:\n        return min(lst) + 1\n    #2.\n    elif is_sorted(lst) == False:\n        return min(lst) - 1\n    #3.\n    elif is_sorted(lst) == False and len(set(lst))!= len(lst):\n        return False\n    \ndef flatten(lst):\n    '''\n    Given a 2D list, return a 1D list.\n    \n    Examples\n    flatten([[1, 2, 3, 4], [5, 6, 7, 8]]) \u279e [1, 2, 3, 4, 5, 6, 7, 8]\n    flatten([[1], [2], [3], [4]]) \u279e [1, 2, 3, 4]\n    flatten([[5, 6], [7], [8, 9]]) \u279e [5, 6, 7, 8, 9]\n    '''\n    \n    #1. Create a new empty list, and append each list item to the new list.\n    #2. Return the new list.\n    \n    return [item for sublist in lst for item in sublist]\n    \n    \ndef even_numbers(lst):\n    '''\n    Given a list of integers, return a new list of only the even numbers.\n    \n    Examples\n    even_numbers([1, 2, 3, 4]) \u279e [2, 4]\n    even_numbers([0, 1, 2, 3, 4]) \u279e [0, 2, 4]\n    even_numbers([1, 2, 3, 4, 5, 6]) \u279e [2, 4, 6]\n    even_numbers([0, -2, 4, 6, 7, 8]) \u279e [0, 2, 4, 6, 8]\n    '''\n    \n    #1. Create an empty list, and append each number in the list to the new list if they are even.\n    #2. Return the new list.\n    \n    return [num for num in lst if num % 2 == 0]\n    \n    \ndef filter_list(lst):\n    '''\n    Given a list of integers, return a new list without the negatives.\n    \n    Examples\n    filter_list([1, 2, 3, 4, 5, -3, -2]) \u279e [1, 2, 3, 4, 5]\n    filter_list([-4, -3, -2, -1, 1, 2, 3, 4]) \u279e [1, 2, 3, 4]\n    filter_list([-5, -4, -3, -2, -1, 1, 2, 3, 4]) \u279e []\n    '''\n    \n    #1. Create an empty list, and append each number in the list to the new list if they are nonnegative.\n    #2. Return the new list.\n    \n    return [num for num in lst if num >= 0]\n    \ndef flatten(lst):\n    '''\n    Given a 2D list, return a 1D lis"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    # Your code here\n    return sorted(lst) == lst\n    \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    check_list = lst.copy()\n    check_list.sort()\n    return check_list == lst\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i]>lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # A single interval is considered to be part of the intersection of itself.\n    # Return \"YES\" if the intersection is empty, otherwise, return \"NO\".\n    # \n    # Examples:\n    # intersection((1, 2), (1, 2)) ==> \"YES\"\n    # intersection((1, 3), (2, 4)) ==> \"NO\"\n    # intersection((-1, 1), (0, 4)) ==> \"YES\"\n    # intersection((-3, -1), (-5, 5)) ==> \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    intersection = False\n    if (interval1[0] <= interval2[1]) and (interval1[1] >= interval2[0]):\n        intersection = True\n    return intersection\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    (start1, end1) = interval1\n    (start2, end2) = interval2\n    if start1 < start2 and end1 < end2 or start2 < start1 and end2 < end1:\n        return \"NO\"\n    else:\n        length = 0\n        if start1 > start2:\n            length += start1 - start2\n        else:\n            length += end2 - start1\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # YOUR CODE HERE\n    # case 1. if the two intervals do not intersect, return \"NO\"\n    # case 2. if the length of the intersection is not a prime number, return \"NO\"\n    # case 3. else, return \"YES\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    else:\n        length = max(start1, start2) - min(end1, end2)\n        if length == 0:\n            return \"NO\"\n        else:\n            if is_prime(length):\n                return \"YES\"\n            else:\n                return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # your code here\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    (start1, end1) = interval1\n    (start2, end2) = interval2\n    \n    if start1 <= end2 and start2 <= end1:\n        #intersection\n        return \"YES\"\n    else:\n        #intersection\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # your code here\n    return 'YES' if (interval1[1] <= interval2[0] or interval2[1] <= interval1[0]) else 'NO'\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    interval1_start, interval1_end = interval1\n    interval2_start, interval2_end = interval2\n    # TODO: check if there is an intersection\n    if interval1_start >= interval2_start and interval1_start <= interval2_end:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l1, l2 = interval1\n    r1, r2 = interval2\n    if r1 < l2 or r2 < l1:\n        return 'NO'\n    return 'YES' if is_prime(abs(r1-l1) - 1) else 'NO'\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    intersection = [max(interval1[0], interval2[0]), min(interval1[1], interval2[1])]\n    if intersection[0] < intersection[1]:\n        if len(intersection) == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not arr: return None\n    sign = lambda x: -1 if x < 0 else 1\n    return sum(abs(i) for i in arr) * prod(map(sign, arr))\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not arr:\n        return None\n    positive, negative = 0, 0\n    for i in arr:\n        if i > 0:\n            positive += 1\n        elif i < 0:\n            negative += 1\n    return positive * negative\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr: return None\n    return abs(sum([i * (-1)**(i < 0) for i in arr])) * \\\n        prod([1 if i > 0 else -1 for i in arr])\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return None\n    result = 1\n    for i in arr:\n        result *= abs(i)\n    signs = [int(i > 0) * -1 + int(i < 0) * 1 for i in arr]\n    return result * sum(signs)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return None if len(arr) == 0 else sum(abs(x) for x in arr) * \\\n        reduce(lambda a, b: a * b, map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = 0\n    signs = [1, 1, 1, -1]\n    for item in arr:\n        result += abs(item) * signs[abs(item)]\n    return result if len(arr)!= 0 else None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return None if len(arr) == 0 else sum(abs(x) for x in arr)*prod(sign(x) for x in arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not arr:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not arr: return None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if arr:\n        return sum(abs(num) for num in arr) * prod(sign(num) for num in arr)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def dfs(grid, k, row, col, depth, curr_path, ans):\n        if depth == k:\n            ans.append(curr_path[:])\n            return\n        for i in range(row, len(grid)):\n            for j in range(col, len(grid[0])):\n                if grid[i][j] not in curr_path:\n                    curr_path.append(grid[i][j])\n                    dfs(grid, k, i, j, depth+1, curr_path, ans)\n                    curr_path.pop()\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def min_path(grid, k, i, j, path, seen):\n        # if we have hit the base case\n        if len(path) == k:\n            return [val for val in path]\n        for x, y in ((i+1, j), (i-1, j), (i, j+1), (i, j-1)):\n            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and (x, y) not in seen:\n                # add it to the path\n                path.append(grid[x][y])\n                # mark it as seen\n                seen.add((x, y))\n                # get the next path\n                next_path = min_path(grid, k, x, y, path, seen)\n                # if we get a path, we are done\n                if next_path:\n                    return next_path\n                # remove it from the path\n                path.pop()\n                seen.remove((x, y))\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    m, n = len(grid), len(grid[0])\n    memo = {}\n    if k == 0 or k == 1:\n        return [1]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    m, n = len(grid), len(grid[0])\n    if k >= m + n - 1:\n        return grid[0][0] * (m + n - 2)\n    dp = [[float('inf')] * n for _ in range(m)]\n    dp[0][0] = 0\n    for i in range(k + 1):\n        for j in range(k + 1):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] = dp[i][j - 1] + grid[i][j - 1]\n                continue\n            if j == 0:\n                dp[i][j] = dp[i - 1][j] + grid[i - 1][j]\n                continue\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i - 1][j - 1]\n    return dp[k][k]"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    # helper function to construct paths of a given length from the given grid and starting point\n    def construct_paths(grid, length, start):\n        \"\"\"\n        Given a grid, a length and a starting point, returns a list of all possible paths\n        of given length from that starting point\n        \"\"\"\n        \n        # base case: we have reached the end of the path\n        if length == 1:\n            return [[grid[y][x] for x, _ in enumerate(grid[y])] for y, _ in enumerate(grid)]\n        \n        # create a list of possible paths of length-1 to be added to paths of length k\n        paths_k1 = construct_paths(grid, length - 1, start)\n        \n        # create a list of possible paths of length to be added to paths of length k - 1\n        paths_k = []\n        for row in grid:\n            for cell in row:\n                paths_k.append([cell] + paths_k1[grid.index(row)])\n        \n        return paths_k\n    \n    def get_min_path_length(paths_k, k):\n        \"\"\"\n        Given a list of paths of a given length and the number of steps of a\n        path to take, returns the length of the shortest path.\n        \"\"\"\n        \n        # base case: no paths of this length\n        if not paths_k:\n            return float('inf')\n        \n        # sort paths lexicographically\n        paths_k.sort()\n        \n        # the shortest path must be of length k or less\n        if k > len(paths_k[0]):\n            return float('inf')\n        \n        # the minimum path is the one whose k-th step is the minimum\n        return min([paths_k[0][j] for j in range(k)])\n    \n    # create a 2-D matrix representation of the grid\n    matrix = [[cell for cell in row] for row in grid]\n    \n    # get all possible paths of length k\n    paths_k = construct_paths(matrix, k, (0, 0))\n    \n    # return the minimum path of length k\n    return [get_min_path_length(paths_k, k)]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Algorithm\n    #\n    # Let's call the values on the cells of the grid d_i.\n    # The minimum path is defined by d_1 to d_k.\n    # Let's use a DFS algorithm to get all the possible paths.\n    # Let's say we have a path P[1,..., k], we need to pick out the values\n    # in the path, let's call them v_1,..., v_k.\n    # We can pick these values out by the following algorithm:\n    # 1) We start from the first cell of the path, and add it to the path P.\n    # 2) In each step, we compare the current cell (c_i) and its neighbor\n    #    (n_i). If c_i is equal to d_j, then d_j is added to the path.\n    # 3) If the current cell has already appeared in the path, we don't need\n    #    to process it anymore.\n    # We can use the DFS algorithm to get all the possible paths.\n    # The result would be a list of lists, where each inner list is a possible path.\n    # Let's pick out the minimum path.\n    # We can do this by finding the shortest path in the list of paths.\n    # Let's say we have multiple shortest paths, then we want to pick out the one that\n    # has minimum value.\n    # We can do this by finding the shortest element in the list of shortest paths,\n    # and then compare it with the rest of the shortest paths.\n    # Note that we can use the built-in function min() to find the shortest element.\n    #\n    # Let's code the algorithm.\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not grid:\n        return []\n    m, n = len(grid), len(grid[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    dp[0][0] = grid[0][0]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def dfs(grid, k, i, j):\n        if k == 0:\n            return grid[i][j]\n        m = k + 1\n        dirs = [[0,1], [0,-1], [-1,0], [1,0]]\n        for dr, dc in dirs:\n            nr, nc = i + dr, j + dc\n            if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and not visited[nr][nc]:\n                visited[nr][nc] = True\n                m = min(m, dfs(grid, k - 1, nr, nc))\n                visited[nr][nc] = False\n        return m\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return None\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n = len(grid)\n    if n < 2 or k < 1:\n        return -1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not n:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1,3]\n    if n == 3:\n        return [1,3,2]\n    \n    res = [1,3,2]\n    while len(res) < n + 1:\n        if n % 2 == 0:\n            res.append(res[-1] + res[-2])\n        else:\n            res.append(res[-1] + res[-2] + res[-3])\n    return res"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1, 3]\n    else:\n        nums = [1, 3]\n        for i in range(n - 1):\n            if i % 2 == 0:\n                nums.append(int(nums[-1] + nums[-2]))\n            else:\n                nums.append(int(nums[-2] + nums[-3] + nums[-1]))\n    return nums\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # trivial\n    if n <= 0: return []\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def tribonacci(n):\n        return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n - 3)\n    if n < 3:\n        return [1, 2, 3][:n]\n    else:\n        return tribonacci(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    res = [3]\n    if n == 1:\n        return res\n    elif n == 2:\n        return res + [2, 8]\n    else:\n        res = res + [1, 3]\n        while n > 2:\n            res += [res[-1] + res[-2] + res[-3]]\n            n -= 1\n        return res\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [1, 3 if n % 2 == 0 else 2] + [sum(tri(n)[1:-1])] * (n > 1)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n    res = [1, 3]\n    for i in range(n - 2):\n        if (i % 2) == 0:\n            res.append(res[-2] + res[-1])\n        else:\n            res.append(res[-1] + res[-2] + res[-3])\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        res = [0, 1, 1]\n        for i in range(2, n + 1):\n            res.append(res[i - 1] + res[i - 2] + res[i - 3])\n    return res"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst = [1, 3, 2, 8]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            lst.append(lst[-1] + lst[-2])\n        else:\n            lst.append(lst[-1] + lst[-2] + lst[-3])\n    return lst\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = str(n)\n    return int(n[0]) * int(n[1]) * int(n[2]) * int(n[3]) * int(n[4]) * int(n[5]) * int(n[6]) * int(n[7]) * int(n[8]) * int(n[9])\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    odd_digits = [d for d in str(n) if int(d)%2!= 0]\n    return int(''.join(odd_digits))\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = 1\n    for i in str(n):\n        if int(i) % 2 == 1:\n            result *= int(i)\n        else:\n            pass\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    evens = [int(i) for i in str(n) if int(i) % 2 == 0]\n    if len(evens) > 0:\n        return 0\n    return reduce(lambda x, y: x * y, [int(i) for i in str(n) if int(i) % 2 == 1])\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    even_digits = sum(d for d in map(int, str(n)) if d % 2 == 0)\n    return 0 if even_digits == len(str(n)) or even_digits == 0 else \\\n    int(str(n)[0]) * int(str(n)[-1]) * digits(even_digits)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum = 1\n    for i in str(n):\n        if int(i) % 2 == 1:\n            sum *= int(i)\n    return sum\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    d = 1\n    for i in str(n):\n        if int(i) % 2!= 0:\n            d *= int(i)\n    return d\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 0 if n % 2 == 0 else reduce(lambda a, b: a * b, [int(x) for x in str(n) if int(x) % 2 == 1])\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    odd_digits = 1\n    while n > 0:\n        if n%10 % 2 == 0:\n            odd_digits = 0\n        else:\n            odd_digits *= n%10\n        n //= 10\n    return odd_digits\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return 0 if sum(map(int, str(n)))%2 == 0 else prod(list(filter(lambda i: int(i)%2 == 1, str(n))))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if string == \"\":\n        return False\n    else:\n        for i in range(len(string)):\n            if string[i] == ']':\n                string2 = string[i+1:]\n                if string2[:1] == ']':\n                    return False\n                else:\n                    if string[i+1] == '[':\n                        return True\n                    else:\n                        string2 = string[i+1:]\n                        if string2[:1] == ']':\n                            return False\n                        else:\n                            if string[i+2] == '[':\n                                return True\n                            else:\n                                return False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # create a stack\n    # if the next item in the list is a bracket, push it onto the stack\n    # if the next item is a closing bracket, remove it from the stack\n    # if the stack is empty, return false\n    # if the stack is not empty, compare each item in the stack to the next item in the string\n    # if the next item is a closing bracket, check whether it is nested and if it is, remove it from the stack and continue on\n    # if the next item is a closing bracket and it isn't nested, return false\n    # return true when the stack is empty or the next item is a closing bracket\n    # if the next item is not a closing bracket, push it onto the stack\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return string.count(\"[\")!= string.count(\"]\")\n    \n    \ndef generate_graph(input):\n    '''\n    Create a function that takes a string as input where each pair of characters in the string\n    represent a node in a directed graph. The function should return a dictionary where the key \n    is a node and the value is the set of nodes in the graph that can be reached by following \n    that node. The graph may have multiple components. The graph should be represented by a \n    directed graph.\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # nested_list = []\n    # for i in range(len(string)):\n    #     if string[i] == '[':\n    #         nested_list.append(string[i])\n    #     if string[i] == ']':\n    #         if len(nested_list) == 0:\n    #             return False\n    #         nested_list.pop()\n    # return False if len(nested_list)!= 0 else True\n    return not string.count('[[') - string.count(']]')\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    valid = True\n    stack = []\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Split the string into a list of substrings\n    subs = string.split('[]')\n    # If there is only one substring, return False\n    if len(subs) == 1:\n        return False\n    # Initialise a stack\n    stack = []\n    # For every character in the string\n    for i in range(len(subs)):\n        # If there is an open bracket, push it onto the stack\n        if subs[i] == '[':\n            stack.append('[')\n        # If there is a close bracket, pop it off of the stack\n        elif subs[i] == ']':\n            stack.pop()\n        # If the stack is empty, return False\n        if len(stack) == 0:\n            return False\n    # If the stack is not empty, return False\n    return len(stack) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    bracket_stack = []\n    bracket_stack.append(0)\n    nest_cnt = 0\n    for char in string:\n        if char == '[':\n            bracket_stack.append(nest_cnt)\n        else:\n            if len(bracket_stack) == 1:\n                break\n            bracket_stack.pop()\n            bracket_stack.append(nest_cnt)\n            nest_cnt = 0\n        nest_cnt += 1\n    if len(bracket_stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # array = []\n    # for i in range(len(string)):\n    #     if string[i] == \"[\":\n    #         array.append(string[i])\n    #     elif string[i] == \"]\":\n    #         array.pop()\n    #     if len(array) == 0:\n    #         return True\n    # return False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # pseudocode\n    # traverse string from left to right\n    # if '[' is found, add to stack\n    # if ']' is found, check if stack is empty\n    # if stack is not empty, pop from stack\n    # if stack is empty and ']' is found, return false\n    # if not, return true\n    stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # First approach\n    # result = True\n    # brackets = ['[', ']']\n    # bracket_stack = []\n    # for bracket in string:\n    #     if bracket in brackets:\n    #         bracket_stack.append(bracket)\n    #     elif len(bracket_stack) > 0 and bracket_stack[-1] == brackets[0]:\n    #         bracket_stack.pop()\n    #     else:\n    #         result = False\n    # return result\n    # Second approach\n    # return (string.count(\"[\") - string.count(\"]\")) % 2 == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst_s=[]\n    for i in lst:\n        lst_s.append(int(math.ceil(i**2)))\n    return sum(lst_s)\n    # pass\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sq_sum = 0\n    for num in lst:\n        sq_sum += int(math.ceil(num**2))\n    return sq_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = 0\n    for i in lst:\n        result += math.ceil(i**2)\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst2=[]\n    for i in lst:\n        lst2.append(i**2)\n    return round(sum(lst2))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum([int(elem)**2 for elem in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # TODO\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return round(sum([round(i*i) for i in lst]))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(round(el**2) for el in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum(int(i**2) for i in lst)\n    \ndef difference_max_min(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the difference between the biggest and the smallest\n    value in the given list, round each element in the list to the int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 4\n    For lst = [1,4,9] the output should be 6\n    For lst = [1,3,5,7] the output should be 10\n    For lst = [1.4,4.2,0] the output should be 7\n    For lst = [-2.4,1,1] the output should be 4\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    res = [i ** 2 for i in lst]\n    return round(sum(res))\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return txt.strip() and txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Uncomment the following code to test your function\n    # print(check_if_last_char_is_a_letter(\"apple pi e \"))\n    # print(check_if_last_char_is_a_letter(\"apple pi e\"))\n    # print(check_if_last_char_is_a_letter(\"apple pie\"))\n    \n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    txt = txt.split()\n    if len(txt) < 1:\n        return False\n    return len(txt[-1]) == 1 and txt[-1].isalpha() == True\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(txt)==0:\n        return False\n    return txt[len(txt)-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not txt:\n        return False\n    if txt[-1].isalpha():\n        if txt[-1] == \" \":\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(txt) > 0:\n        return (txt[-1].isalpha() and not txt[-1].isnumeric() and not txt[-1].isalnum())\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    # code goes here\n    return True if txt[-1].isalpha() and txt[-1] not in txt.split() else False\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for index in range(len(arr) - 1):\n        if arr[index] < arr[index + 1]:\n            continue\n        else:\n            return index\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    m = len(arr)\n    stack = [arr[0]]\n    \n    for i in range(1, m):\n        if arr[i] <= stack[-1]:\n            stack.append(arr[i])\n        else:\n            return i - 1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(arr) < 2:\n        return -1\n    for i, val in enumerate(arr):\n        if i == 0:\n            continue\n        else:\n            if val > arr[i-1]:\n                continue\n            else:\n                return i\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len([1 for x,y in zip(arr[1:],arr[:-1]) if x<=y]"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    arr = arr.sort()\n    if arr[len(arr)-2] <= arr[len(arr)-1]:\n        return -1\n    else:\n        return arr.index(arr[len(arr)-1])\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    highest = -1\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            highest = i\n    return highest\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not arr: return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    best = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            if best < i - 1:\n                best = i - 1\n    return best\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not arr:\n        return -1\n    if len(arr) == 1:\n        return 0\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(lst)==0:\n        return (None, None)\n    neg=None\n    pos=None\n    for i in lst:\n        if i<0:\n            neg=i\n        if i>0:\n            pos=i\n    if neg==None and pos==None:\n        return (None, None)\n    elif neg==None:\n        return (None, pos)\n    elif pos==None:\n        return (neg, None)\n    else:\n        return (neg, pos)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst1 = [i for i in lst if i < 0]\n    lst2 = [i for i in lst if i > 0]\n    if len(lst1) > 0:\n        a = max(lst1)\n    else:\n        a = None\n    if len(lst2) > 0:\n        b = min(lst2)\n    else:\n        b = None\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    neg_num = []\n    pos_num = []\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Your code goes here:\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if lst == []:\n        return (None, None)\n    else:\n        sorted_lst = sorted(lst)\n        a = None\n        b = None\n        if sorted_lst[-1] < 0:\n            a = sorted_lst[-1]\n        if sorted_lst[0] > 0:\n            b = sorted_lst[0]\n        return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    largest = None\n    smallest = None\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if lst == []:\n        return (None, None)\n    for i in lst:\n        if i < 0:\n            return (None, min(lst))\n    return (max(lst), None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not lst:\n        return (None, None)\n    negatives = list(filter(lambda x: x < 0, lst))\n    if len(negatives) > 0:\n        b = min(negatives)\n    else:\n        b = None\n    positives = list(filter(lambda x: x > 0, lst))\n    if len(positives) > 0:\n        a = max(positives)\n    else:\n        a = None\n    return (a, b)"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    try:\n        lst.sort()\n        lst_neg = [i for i in lst if i < 0]\n        lst_pos = [i for i in lst if i >= 0]\n        if len(lst_neg) == 0 and len(lst_pos) == 0:\n            return (None, None)\n        elif len(lst_neg) == 0:\n            return (None, lst_pos[0])\n        elif len(lst_pos) == 0:\n            return (lst_neg[-1], None)\n        else:\n            return (lst_neg[-1], lst_pos[0])\n    except TypeError:\n        return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return None, None\n    negatives = []\n    positives = []\n    for x in lst:\n        if x > 0:\n            positives.append(x)\n        elif x < 0:\n            negatives.append(x)\n    if len(negatives) == 0:\n        return None, positives[0]\n    if len(positives) == 0:\n        return negatives[0], None\n    negatives.sort()\n    positives.sort(reverse=True)\n    return negatives[0], positives[0]\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if type(a) == str and type(b) == str:\n        return None if a == b else max(a,b)\n    elif type(a) == str or type(b) == str:\n        return None\n    elif a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    try:\n        if a < b:\n            return a\n        else:\n            return b\n    except TypeError:\n        if float(a) < float(b):\n            return a\n        else:\n            return b\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    a = str(a).replace(\",\", \"\")\n    b = str(b).replace(\",\", \"\")\n    if a > b:\n        return a\n    elif a == b:\n        return None\n    else:\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if type(a) is str:\n        a = float(a.replace(\",\",\".\"))\n    if type(b) is str:\n        b = float(b.replace(\",\",\".\"))\n    if a < b:\n        return b\n    elif a > b:\n        return a\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if type(a) == type(b) == float or type(a) == type(b) == int:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n    elif type(a) == type(b) == str:\n        if float(a) > float(b):\n            return a\n        elif float(a) < float(b):\n            return b\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if type(a) == float or type(b) == float:\n        if a > b:\n            return a\n        elif a == b:\n            return None\n        elif a < b:\n            return b\n    elif type(a) == str or type(b) == str:\n        if float(a) > float(b):\n            return a\n        elif float(a) == float(b):\n            return None\n        elif float(a) < float(b):\n            return b\n    else:\n        if a > b:\n            return a\n        elif a == b:\n            return None\n        elif a < b:\n            return b\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if type(a) == type(b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    else:\n        if type(a) == str and type(b) == str:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif type(a) == str and type(b) == float:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif type(a) == float and type(b) == str:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif type(a) == str and type(b) == int:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif type(a) == int and type(b) == str:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif type(a) == int and type(b) == float:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif type(a) == float and type(b) == int:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # YOUR CODE HERE\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if str(a) == str(b):\n        return None\n    else:\n        if a > b:\n            return a\n        else:\n            return b\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # add code here\n    return n%2 == 0 and sum([i for i in range(1, n) if i%2==0]) == "
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # n >= 0\n    if n % 2!= 0:\n        return False\n    # n <= 4\n    if n <= 4:\n        return True\n    # n > 4\n    k = n // 2\n    return (sum_even(k) + sum_even(k - 1)) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def sum_of_evens(m):\n        return sum(filter(lambda x: x % 2 == 0, range(m, 0, -2)))\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == sum([i for i in range(1, n, 2) if n % i == 0]):\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = abs(n)\n    if (n / 2) % 2 == 0:\n        if n / 2 in [2, 4, 6, 8]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return n in [0, 2, 4, 6, 8]\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # First, we find all even numbers in the range [0, n], we are only looking for 3 even numbers\n    even_numbers = [x for x in range(n) if x % 2 == 0]\n    # If we have 3 even numbers, we can compute the sum of them by summing a + b + c\n    # If n is not divisible by 4, then it cannot be written as the sum of 3 even numbers\n    if len(even_numbers) == 3:\n        sum_of_even_numbers = sum(even_numbers)\n        if n % 4 == 0:\n            return n == sum_of_even_numbers\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Return whether there are exactly 4 even numbers that add up to n\n    return sum(even for even in range(2, n+1) if n % even == 0) == 4"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (n == 2 * sum(filter(lambda x: x % 2 == 0, [i for i in range(1, n // 2 + 1)])))\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for a in range(n):\n        for b in range(n):\n            for c in range(n):\n                for d in range(n):\n                    if a + b + c + d == n and a + b + c + d == 2*(a + b + c + d):\n                        return True\n    return False\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = n\n    factorial = 1\n    while count > 1:\n        factorial *= count\n        count -= 1\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert isinstance(n, int) and n > 0, 'Invalid input'\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    i = 1\n    for j in range(1, n+1):\n        i = i * j\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    special_factorial = 1\n    for num in range(1, n+1):\n        special_factorial *= num\n    return special_factorial\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    text = text.split()\n    text = \"_\".join(text)\n    text = text.replace(\" \", \"-\")\n    text = text.replace(\"  \", \"-\")\n    \n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # if a string has more than 2 consecutive spaces\n    # then replace all consecutive spaces with -\n    if \"  \" in text:\n        return text.replace(\"  \", \"-\")\n    # if there is no space, then replace all spaces with underscores\n    else:\n        return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(text) < 2:\n        return text\n    elif text[0] == \" \":\n        return \"-\"+fix_spaces(text[1:])\n    elif text[len(text)-1] == \" \":\n        return fix_spaces(text[:len(text)-1])+\"-\"\n    elif text[1] == \" \" and text[0] == \" \":\n        return fix_spaces(text[2:])\n    else:\n        return text[0]+\"_\"+fix_spaces(text[1:])\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    if \" \" not in text:\n        return text\n    \n    output = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            if i == 0:\n                output = text[i+1].upper()\n            elif i == len(text) - 1:\n                output = output + \"_\"\n            elif text[i-1] == \" \":\n                output = output + \"_\"\n            else:\n                output = output + \"-\"\n        else:\n            output = output + text[i]\n    \n    return output\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if text == \"\":\n        return \"\"\n    text = text.split()\n    if len(text) == 1:\n        return text[0]\n    string = \"\"\n    for i in range(len(text)):\n        string += text[i]\n        if i < len(text) - 1:\n            string += \"_\"\n    string = string.replace(\"  \", \"-\")\n    return string\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return re.sub(r\"\\s{2,}\", \" \", text)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    text = text.split()\n    if len(text) == 1:\n        return text[0]\n    else:\n        count = 0\n        for i in range(len(text)):\n            if text[i] == \" \":\n                count += 1\n            else:\n                count = 0\n            if count >= 2:\n                text[i] = \"-\"\n                count = 0\n    return \"\".join(text)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    text = text.replace(\" \", \"_\")\n    while text.find(\"  \") >= 0:\n        text = text.replace(\"  \", \"-\")\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #pass #your code here\n    count=0\n    newstr=''\n    if len(text)<2:\n        return text\n    for i in range(len(text)):\n        if i==0:\n            newstr+=text[i]\n        else:\n            if text[i-1]==''and text[i]==' ':\n                count+=1\n                if count==2:\n                    newstr+='_'\n                else:\n                    newstr+='-'\n            else:\n                newstr+=text[i]\n    return newstr\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return re.sub('\\s+', '-', text)\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Return 'Yes' if the conditions above are met\n    return \"Yes\" if re.fullmatch(\"[a-zA-Z][a-zA-Z0-9]{1,2}[\\.]{1}[a-zA-Z][a-zA-Z0-9]{1,2}[\\.]{1}[txt|exe|dll]\", file_name) else \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(file_name) < 4:\n        return 'No'\n    elif '0' <= file_name[0] <= '9':\n        return 'No'\n    elif file_name.count('.')!= 1:\n        return 'No'\n    elif file_name.index('.') == 0:\n        return 'No'\n    elif file_name[file_name.index('.') - 1] =='':\n        return 'No'\n    elif file_name[file_name.index('.') + 1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if \"0\"<=file_name[0]<=\"9\":\n        return 'No'\n    else:\n        x = file_name.index('.')\n        if x == 1:\n            if file_name[1]!='.':\n                if file_name[1] == \" \":\n                    return 'No'\n                elif file_name[1] == \"0\" or file_name[1] == \"1\" or file_name[1] == \"2\" or file_name[1] == \"3\" or file_name[1] == \"4\" or file_name[1] == \"5\" or file_name[1] == \"6\" or file_name[1] == \"7\" or file_name[1] == \"8\" or file_name[1] == \"9\":\n                    return 'No'\n                else:\n                    return 'Yes'\n            else:\n                return 'No'\n        elif x == 0:\n            return 'No'\n        else:\n            return 'Yes'\n            \n            \n            \ndef file_extension_check(file_extension):\n    \"\"\"Create a function which takes a string representing a file's extension, and returns\n    'Yes' if the the file's extension is valid, and returns 'No' otherwise.\n    Examples:\n    file_extension_check(\"example.txt\") # => 'Yes'\n    file_extension_check(\"example.tar.gz\") # => 'Yes'\n    file_extension_check(\"example.tgz\") # => 'No'\n    \"\"\"\n    if '.' in file_extension:\n        x = file_extension.index('.')\n        if x == len(file_extension) - 1:\n            return 'No'\n        else:\n            if file_extension[x+1] == \" \":\n                return 'No'\n            else:\n                if file_extension[x+1] == \"0\" or file_extension[x+1] == \"1\" or file_extension[x+1] == \"2\" or file_extension[x+1] == \"3\" or file_extension[x+1] == \"4\" or file_extension[x+1] == \"5\" or file_extension[x+1] == \"6\" or file_extension[x+1] == \"7\" or file_extension[x+1] == \"8\" or file_extension[x+1] == \"9\":\n                    return 'No'\n                else:\n                    return 'Yes'\n    else:\n        return 'No'\n            \n            \n            \n            \ndef main():\n    \"\"\"Execute the main program routine.\n    \"\"\"\n    file_name = \"My Doc.txt\"\n    file_extension = \"my doc\"\n    print(file_name_check(file_name))\n    print(file_extension_check(file_extension))\n    \n    \n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(file_name) > 3 and file_name.isdigit() == False:\n        if file_name.count('.') == 1:\n            if file_name.split('.')[0]!= '':\n                if file_name.split('.')[0][0].isalpha():\n                    if file_name.split('.')[1].lower() in ['exe', 'dll', 'txt']:\n                        return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    file_name_split = file_name.split('.')\n    file_name_pre_dot = file_name_split[0]\n    file_name_post_dot = file_name_split[1]\n    \n    if file_name_post_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if len(file_name_split) > 2:\n        return 'No'\n    \n    if len(file_name_pre_dot) > 3:\n        return 'No'\n    \n    if '.' in file_name_pre_dot:\n        return 'No'\n    \n    if file_name_pre_dot[0].isdigit():\n        return 'No'\n    \n    return 'Yes'"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #pass # remove this line\n    dot_index = file_name.find('.')\n    dot_count = file_name.count('.')\n    if dot_index == -1 or dot_count == 1:\n        return \"No\"\n    else:\n        dot_index = file_name.find('.')\n        file_name_list = file_name[dot_index + 1:dot_index + 4].lower().replace('.', '')\n        if file_name_list == 'txt' or file_name_list == 'exe' or file_name_list == 'dll':\n            return 'Yes'\n        else:\n            return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    file_name_list = file_name.split('.')\n    if (file_name_list[0].isdigit() or file_name_list[0].isalpha() == False) and file_name_list[0]!= \"\":\n        return \"No\"\n    elif file_name_list[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    elif len(file_name_list[0]) > 3:\n        return \"No\"\n    elif file_name_list[0].count('.')!= 1:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if file_name.find('.') > 0:\n        #print('Yes')\n        return 'Yes'\n    else:\n        #print('No')\n        return 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sum = 0\n    \n    for i in range(len(lst)):\n        if i%3 == 0:\n            sum += lst[i]**2\n        elif i%4 == 0 and i%3!= 0:\n            sum += lst[i]**3\n            \n    return sum\n    \ndef find_missing_number(lst):\n    \"\"\"\n    This function shall take a list of integers. The function shall return the first entry which is missing from the list and whose index is a \n    multiple of 3. If the list is empty, the function shall return 0. \n    \n    Examples:\n    For lst = [1,2,3]  the output should be 6\n    For lst = [] the output should be 0\n    For lst = [1,3,2,4] the output should be 6\n    \"\"\"\n    if len(lst) == 0:\n        return 0\n    \n    for i in range(len(lst)):\n        if (i+1) not in lst:\n            return (i+1)**3\n    \n    return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_list = []\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            new_list.append(lst[i]**2)\n    return sum(new_list)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        sums = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                sums += lst[i]**2\n            elif i % 4 == 0 and i % 3!= 0:\n                sums += lst[i]**3\n        return sums\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return 0\n    result = 0\n    for index, item in enumerate(lst):\n        if index % 3 == 0:\n            result += item ** 2\n        elif index % 4 == 0 and index % 3!= 0:\n            result += item ** 3\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    output = 0\n    for i, j in enumerate(lst):\n        if (i+1) % 3 == 0 or (i+1) % 4 == 0:\n            output += j**2\n        else:\n            output += j\n    return output\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    if len(lst) == 0:\n        return 0\n    else:\n        lst = [i ** 2 if i % 3 == 0 else i ** 3 if i % 4 == 0 else i for i in lst]\n        return sum(lst)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            result += lst[i] ** 3\n    return result"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum_squares = 0\n    for i in range(0, len(lst)):\n        if i % 3 == 0:\n            sum_squares = sum_squares + lst[i] * lst[i]\n        if i % 4 == 0:\n            sum_squares = sum_squares + lst[i] * lst[i] * lst[i]\n    return sum_squares\n    \n    "
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = \"\"\n    words = sentence.split(\" \")\n    for word in words:\n        if is_prime_number(len(word)):\n            result += word + \" \"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    words = sentence.split(\" \")\n    prime_words = list(filter(is_prime, words))\n    return \" \".join(prime_words)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return''.join([w for w in sentence.split(' ') if len(w) and all([c in '0123456789' for c in w])])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    sentence_list = sentence.split()\n    new_sentence_list = []\n    for word in sentence_list:\n        if is_prime_number(len(word)):\n            new_sentence_list.append(word)\n    \n    return \" \".join(new_sentence_list)\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime_number(len(word)):\n            result.append(word)\n    return \" \".join(result)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # split the sentence into words\n    words = sentence.split(\" \")\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # time: O(n)\n    # space: O(n)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def is_prime(num):\n        return all(num % i for i in range(2, num))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    tokens = sentence.split(' ')\n    res = []\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    import re\n    from itertools import chain\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n[-1]!= \"/\":\n        return False\n    x = x.split('/')\n    n = n.split('/')\n    if int(x[0]) % int(n[0]) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    numerator, denominator = eval(x), eval(n)\n    if denominator % numerator == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    numerator = int(n.split(\"/\")[0])\n    denominator = int(n.split(\"/\")[1])\n    \n    if denominator == 0:\n        return False\n        \n    if denominator % numerator == 0:\n        return True\n    else:\n        return False\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    numerator_list = [int(i) for i in x.split(\"/\")]\n    numerator = numerator_list[0]\n    denominator = numerator_list[1]\n    number = int(n)\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    num = int(x.split('/')[0])\n    den = int(x.split('/')[1])\n    num2 = int(n.split('/')[0])\n    den2 = int(n.split('/')[1])\n    if num % num2 == 0 and den % den2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return not (x.split(\"/\")[1] == \"0\" or n.split(\"/\")[1] == \"0\") and x.split(\"/\")[0] == n.split(\"/\")[0]\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    x, n = x.split(\"/\"), n.split(\"/\")\n    if x[0] == n[0]:\n        return True\n    if x[1] == n[1]:\n        return True\n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if int(x) == 0 or int(n) == 0:\n        return False\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda num: sum([int(i) for i in str(num)]))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    sorted_list = sorted(nums, key = lambda x: sum([int(i) for i in str(x)]))\n    return sorted_list\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # get the sum of digits of all elements in the list\n    nums_sums = list(map(lambda n: get_digit_sum(n), nums))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(nums, key=lambda num: sum([int(i) for i in str(num)]))"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # TODO: Fill in the code\n    my_list = sorted(nums)\n    my_list_sum = [sum(digits(i)) for i in my_list]\n    my_list = [my_list[i] for i in range(len(my_list)) for j in range(my_list_sum[i])]\n    return my_list"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if nums == []:\n        return []\n    else:\n        return sorted(nums, key = lambda x: sum(int(i) for i in str(x))"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    odd = 0\n    for n in nums:\n        if n % 10 % 2 == 1:\n            if n > 10:\n                odd += 1\n    return odd\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1:\n            count += 1\n    return count\n    "
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers = list(nums)\n    count = 0\n    for i in range(len(numbers)):\n        if(numbers[i] > 10 and str(numbers[i])[0] == str(numbers[i])[-1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n    for num in nums:\n        if num > 10:\n            if num > 9 and num % 2!= 0:\n                result += 1\n    return result\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = 0\n    for i in nums:\n        num = str(i)\n        if(int(num[0])%2 == 1 and int(num[-1])%2 == 1):\n            result+=1\n    return result\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10:\n            if nums[i]%2!= 0 and nums[i-1]%2!= 0 and nums[i+1]%2!= 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and (i%10)%2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    count = 0\n    \n    for num in nums:\n        if num > 10 and (num % 2) == 1:\n            count += 1\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    odds = []\n    for i in nums:\n        if int(str(i)[0]) % 2 == 1 and int(str(i)[-1]) % 2 == 1:\n            odds.append(i)\n    print(odds)\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum(i > 10 and (i // 10 % 10) % 2 == 1 and (i % 10) % 2 == 1 for i in nums)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def divisible_by_three(n):\n        return (n % 3 == 0)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum([(i * i - i + 1) // 3 for i in range(1, n)])\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return n*(n-1)*(n-2)//6\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return 3 * (n * (n-1) // 2) // 3\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    res = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            k = n - 1 - (i + j)\n            if k < j:\n                break\n            if k < j and (i + j + k) % 3 == 0:\n                res += 1\n    return res\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 3: return 0\n    s = set()\n    cnt = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] % 3 == 0:\n                cnt += 1\n                s.add((a[i], a[j], a[i] + a[j]))\n    return cnt\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            k = n-1-j\n            if (i+j+k) % 3 == 0:\n                res += 1\n    return res\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # intialise triple counter to zero\n    count = 0\n    # loop over the numbers 1 to n\n    for i in range(1, n+1):\n        # loop over the numbers i+1 to n\n        for j in range(i+1, n+1):\n            # loop over the numbers j+1 to n\n            for k in range(j+1, n+1):\n                # check if the sum of all three integers is a multiple of 3\n                if i+j+k%3 == 0:\n                    # increment the counter by 1\n                    count += 1\n    # return the number of triples found\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum(i*i-i+1 for i in range(1, n) if not (i+1) % 3)\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets and planet2 in planets:\n        p1 = planets.index(planet1)\n        p2 = planets.index(planet2)\n        if p1 < p2:\n            return tuple(planets[p1+1:p2])\n        elif p1 > p2:\n            return tuple(planets[p2+1:p1])\n    return ()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    planet = {\n        \"Mercury\": 0.387,\n        \"Venus\": 0.723,\n        \"Earth\": 1,\n        \"Mars\": 1.524,\n        \"Jupiter\": 11.86,\n        \"Saturn\": 29.447,\n        \"Uranus\": 84.0168,\n        \"Neptune\": 164.79132\n    }\n    return sorted([i for i in planet if planet[i] <= planet[planet2] and planet[i] >= planet[planet1]])\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result_dict = {'Mercury':57.9, 'Venus':108.2, 'Earth':149.6, 'Mars':227.9, 'Jupiter':778.6, 'Saturn':1433.5, 'Uranus':2871.5, 'Neptune':4424.8}\n    list_result = []\n    for key in result_dict:\n        if result_dict[key] >= result_dict[planet1]:\n            list_result.append(key)\n    for key in result_dict:\n        if result_dict[key] >= result_dict[planet2]:\n            list_result.append(key)\n    return tuple(list_result)\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        res = ()\n        for i in planets:\n            if bf(planet1,i) == ():\n                continue\n            else:\n                if bf(planet2, i) == ():\n                    continue\n                else:\n                    if bf(planet1,i) < bf(planet2,i):\n                        res = res + (i,)\n                    else:\n                        continue\n        return re"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # your code here\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return tuple([x for x in (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\") if x in planet1 + planet2])\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return ()"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    return sorted(set([planet1, planet2]) & set(planets), key=lambda x: planets.index(x))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(lst, key=lambda x: (len(x), x)"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst = list(set(lst))\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(lst, key = lambda x: (len(x), x))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(list(set(lst)))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    return sorted(lst, key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(list(filter(lambda word: len(word) % 2 == 0, lst)))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lst_len = len(lst)\n    result = []\n    for i in range(lst_len):\n        if len(lst[i]) % 2 == 0:\n            result.append(lst[i])\n    result.sort(key=len)\n    return result\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst.sort()\n    lst2 = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            lst2.append(i)\n    return lst2\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    res = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            res.append(word)\n    res = sorted(res, key=lambda x: (len(x), x))\n    return res\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(list(set([l for l in lst if len(l) % 2 == 0])))\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not is_prime(n):\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x if is_prime(n) else y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n % x == 0:\n        return x\n    elif n % y == 0:\n        return y\n    else:\n        return n\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n in primes:\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #check whether n is prime or not\n    if n % 2 == 0:\n        return y\n    else:\n        return x\n        \n    \ndef if_then_else(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    even and should return the value of y otherwise.\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    total = 0\n    for i in lst:\n        if isinstance(i, int) and i % 2!= 0:\n            total += i * i\n    return total\n    "
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return 0\n    elif lst == []:\n        return 0\n    elif lst == [0]:\n        return 0\n    elif type(lst[0]) == int:\n        return sum([x**2 for x in lst if x % 2 == 1])\n    elif type(lst[0]) == float:\n        return sum([x**2 for x in lst if x % 2 == 1])\n    else:\n        return 0\n    "
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # replace the code below\n    odds = [x for x in lst if x % 2!= 0]\n    return sum([i ** 2 for i in odds])"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    result = 0\n    \n    if len(lst) == 0:\n        return 0\n        \n    else:\n        for n in lst:\n            if n > 0 and n % 2!= 0:\n                result += n ** 2\n                \n        return result\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    numbers = []\n    for i in lst:\n        if i > 0 and isinstance(i, int):\n            numbers.append(i)\n    \n    if not numbers:\n        return 0\n    \n    result = 0\n    for i in numbers:\n        if i % 2:\n            result += i**2\n    return result\n        \n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    total = 0\n    for num in lst:\n        if num > 0 and num % 2!= 0:\n            total += num**2\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum([i ** 2 for i in lst if type(i) == int and i % 2 == 1])\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    sum_of_odds = 0\n    for i in lst:\n        if i > 0 and not i % 2:\n            sum_of_odds += i ** 2\n    return sum_of_odds\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # use a sum function to return the sum of the values in a list\n    # check if the list has any values. If it does, iterate over the values\n    # if the value is an int or a float, check if it is an odd number, and if it is\n    # return the square of the value\n    # Otherwise return 0\n    \n    # use a for loop\n    # if the list is not empty\n    # if the value is an int or a float, and the value is an odd number\n    # square the value and add it to the sum \n    \n    if not lst:\n        return 0\n    \n    sum_numbers = sum([x if type(x) == int or type(x) == float else 0 for x in lst])\n    # iterate over the values in the list\n    # if the value is an int or a float, and the value is an odd number, square the value and add it to the sum \n    # return the sum\n    \n    return sum_numbers\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum(i**2 if i%2!= 0 else 0 for i in lst)\n    \n    \nif __name__ == \"__main__\":\n    lst = [1, 3, 2, 0]\n    print(double_the_difference(lst))"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return [0 if guess[i] == game[i] else abs(guess[i]-game[i]) for i in range(0,len(game))]\n    \n    \ndef check(game,guess):\n    \"\"\"Given a list of numbers, return how many were guessed correctly.\n    \n    \n    example:\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    import numpy as np\n    \n    guess = np.array(guess)\n    game = np.array(game)\n    \n    guess_diff = guess - game\n    \n    return np.abs(guess_diff)\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # return [abs(game[i]-guess[i]) for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    # return [abs(game[i]-guess[i]) if game[i]==guess[i] else game[i] - guess[i] for i in range(len(game))]\n    return [abs(game[i]-guess[i]) for i in range(len(game))]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert game.length == guess.length, \"Guess and game should have the same length\"\n    return [0 if game[i] == guess[i] else abs(guess[i] - game[i]) for i in range(game.length)]\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [abs(x-y) for x,y in zip(game,guess)]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [0 if guess[i]==game[i] else abs(guess[i]-game[i]) for i in range(len(guess))]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [abs(game[i] - guess[i]) for i in range(len(game))]\n    \n    #return [abs(game[i] - guess[i]) for i in range(len(game))]\n    \n    #return [abs(game[i] - guess[i]) for i in range(len(game))]\n    \n    #return [abs(game[i] - guess[i]) for i in range(len(game))]\n    \n    #return [abs(game[i] - guess[i]) for i in range(len(game))]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    #initialize the output list\n    output = []\n    #loop through guesses\n    for guess in range(len(guess)):\n        #if the guess was correct, add 0 to the output list\n        if game[guess] == guess:\n            output.append(0)\n        #if the guess was wrong, add the difference between guess and the score\n        else:\n            output.append(abs(game[guess] - guess))\n    #return the output list\n    return output"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # FIXME\n    result = []\n    for i in range(len(game)):\n        result.append(abs(guess[i] - game[i]))\n    return result\n    \n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [abs(guess[i] - game[i]) for i in range(len(game))]\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    strongest = '.'.join(class_name.split('.')[:-1] + [max([extension for extension in extensions if extension[0].islower()], key=lambda extension: sum([1 if character.isupper() else -1 for character in extension]))]) + '.' + class_name.split('.')[-1]\n    return stronges"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Initialize variables\n    strongest_extension = None\n    strength = 0\n    for extension in extensions:\n        # Get the count of the number of uppercase and lowercase characters in extension\n        ext_cap_count = 0\n        ext_sm_count = 0\n        for char in extension:\n            if char.isupper():\n                ext_cap_count += 1\n            if char.islower():\n                ext_sm_count += 1\n        # Update strongest_extension\n        if ext_cap_count - ext_sm_count > strength:\n            strongest_extension = extension\n            strength = ext_cap_count - ext_sm_count\n    return class_name + '.' + strongest_extension\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # your code goes here\n    extensions_strength = []\n    for extension in extensions:\n        caps = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                caps += 1\n            if char.islower():\n                sm += 1\n        strength = caps - sm\n        extensions_strength.append([strength, extension])\n    extensions_strength = sorted(extensions_strength)\n    return class_name + '.' + extensions_strength[-1][1]\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return class_name+'.'+max(extensions, key=lambda x: (sum([1 if c.isupper() else -1 for c in x]), sum([1 if c.islower() else -1 for c in x])))\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    from collections import defaultdict\n    import re\n    def up_case_count(string):\n        return len([i for i in string if i.isupper()])\n    def low_case_count(string):\n        return len([i for i in string if i.islower()])\n    def strength(string):\n        return (up_case_count(string) - low_case_count(string))\n    cap = 0\n    sm = 0\n    for ext in extensions:\n        cap = up_case_count(ext)\n        sm = low_case_count(ext)\n        strength_val = strength(ext)\n        extension = f\"{class_name}.{ext}\"\n        if strength_val == 0:\n            print(extension)\n            return extension\n        if strength_val == 1:\n            print(extension)\n            return extension\n        if strength_val > 1:\n            strength_dictionary = defaultdict(list)\n            strength_dictionary[strength_val].append(extension)\n            print(strength_dictionary)\n    return '.'.join(strength_dictionary[max(strength_dictionary)])\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA')\nprint(Strongest_Extension('my_class', ['CC', 'aa', 'bb']) =='my_class.CC')\nprint(Strongest_Extension('my_class', ['BB', 'aa', 'cc']) =='my_class.BB')\nprint(Strongest_Extension('my_class', ['CC', 'aa', 'cc']) =='my_class.CC')\nprint(Strongest_Extension('my_class', ['AA', 'be', 'CC']) =='my_class.AA')\nprint(Strongest_Extension('my_class', ['CC', 'aa', 'bb']) =='my_class.CC')\nprint(Strongest_Extension('my_class', ['BB', 'aa', 'cc']) =='my_class.BB')\nprint(Strongest_Extension('my_class', ['AA', 'be', 'CC']) =='my_class.AA')\nprint(Strongest_Extension('my_class', ['CC', 'aa', 'bb']) =='my_class.CC')\nprint(Strongest_Extension('my_class', ['BB', 'aa', 'cc']) =='my_class.BB')\nprint(Strongest_Extension('my_class', ['CC', 'aa', 'cc']) =='my_class.CC')\nprint(Strongest_Extension('my_class', ['AA', 'be', 'CC']) =='my_class.AA')\nprint(Strongest_Extension('my_class', ['CC', 'aa', 'bb']) =='my_class.CC')\nprint(Strongest_Extension('my_class', ['BB', 'aa', 'cc']) =='my_class.BB')\nprint(Strongest_Extension('my_class', ['AA', 'be', 'CC']) =='my_class.AA')\nprint(Strongest_Extension('my_class', ['CC', 'aa', 'bb']) =='my_class.CC')\nprint(Strongest_Extension('my_class', ['BB', 'aa', 'cc']) =='my_class.BB')\nprint(Strongest_Extension('my_class', ['AA', 'be', 'CC']) =='my_class.AA')\nprint(Strongest_Extension('my_class', ['CC', 'aa', 'bb']) =='my_class.CC')\nprint(Strongest_Extension('my_class', ['BB', 'aa', 'cc']) =='my_class.BB')\nprint(Strongest_Extension('my_class', ['AA', 'be', 'CC']) =='my_class.AA')\nprint(Strongest_Extension('my_class', ['CC', 'aa', 'bb']) =='my_class.CC')\nprint(Strongest_Extension('my_class', ['BB', 'aa', 'cc']) =='my_class.BB')\nprint(Strongest_Extension('my_class', ['AA', 'be', 'CC']) =='my_class.AA')\nprint(Strongest_Extension('my_class'"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return_string = class_name + '.'\n    str_ext = ''.join(sorted(extensions, key=lambda x: sum(map(lambda x: 1 if x.isupper() else 0, x))))\n    for x in str_ext:\n        return_string += x\n    return return_string\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max_strength = 0\n    max_strength_extension = None\n    for extension in extensions:\n        cap_letters = sum(1 for x in extension if x.isupper())\n        sm_letters = sum(1 for x in extension if x.islower())\n        strength = cap_letters - sm_letters\n        if strength > max_strength:\n            max_strength = strength\n            max_strength_extension = extension\n    return class_name + '.' + max_strength_extension\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    uppercase = 0\n    lowercase = 0\n    strength = 0\n    max_strength = 0\n    for ext in extensions:\n        for char in ext:\n            if char.isupper():\n                uppercase += 1\n            elif char.islower():\n                lowercase += 1\n        if uppercase > lowercase:\n            strength += uppercase - lowercase\n        elif lowercase > uppercase:\n            strength += lowercase - uppercase\n        else:\n            strength += 0\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return class_name + \".\" + strongest_extensio"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    strength_extensions = []\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for ch in extension:\n            if ch.isupper():\n                cap += 1\n            elif ch.islower():\n                sm += 1\n        strength_extensions.append((cap,sm, extension))\n    return class_name+\".\"+max(strength_extensions)[2]\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (b in a) or (b in a+a) or (b in a+a+a) or (b in a+a+a+a) or (b in a+a+a+a+a) or (b in a+a+a+a+a+a) or (b in a+a+a+a+a+a+a) or (b in a+a+a+a+a+a+a+a)"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # wordlist = list(a)\n    # for x in range(0,len(a)):\n    #     if b in wordlist:\n    #         return True\n    #     else:\n    #         wordlist.append(wordlist.pop(0))\n    # return False\n    if any(b in s for s in [a] + a):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    a_len = len(a)\n    a_s = set(a)\n    b_len = len(b)\n    b_s = set(b)\n    for i in range(1,a_len+1):\n        if a[i:].startswith(b):\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if b in a:\n        return True\n    else:\n        for i in range(0,len(b)):\n            if b[i:]+b[:i] in a or b[-i:] + b[:-i] in a:\n                return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    return any(a in x for x in rotations)\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if a == b :\n        return False\n    else:\n        return True\n        \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if b in a or b in a[1:]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    a_len = len(a)\n    for i in range(a_len):\n        if b == a[i:] + a[:i]:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if b in a or any(b[x:]+b[:x] in a for x in range(len(b))):\n        return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in b:\n        if(a.find(i)>=0 or a.find(i[::-1])>=0):\n            return True\n    return False\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count_even = 0\n    count_odd = 0\n    if num < 0:\n        num = abs(num)\n    else:\n        pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    odds = sum([int(x) % 2 for x in str(num)])\n    return (odds, len(str(num)) - odds)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return (num.count(\"0\"), num.count(\"1\"))\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    even_count, odd_count = 0, 0\n    while num!= 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if num < 0:\n        num = -num\n    even = 0\n    odd = 0\n    while num:\n        digit = num % 10\n        num //= 10\n        if digit % 2:\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    even = 0\n    odd = 0\n    if num == 0:\n        return (1, 0)\n    else:\n        while num > 0:\n            if num % 10 % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            num = num // 10\n        return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert 1 <= number <= 1000, \"numerical input out of range. Try numbers between 1 and 1000.\"\n    tens = {1: 'x', 2: 'xx', 3: 'xxx', 4: 'xxxx', 5: 'v', 6: 'vv', 7: 'vvv', 8: 'vvvv', 9: 'ix', 10: 'x',\n            100: 'c', 200: 'cc', 300: 'ccc', 400: 'cd', 500: 'd', 600: 'dc', 700: 'dcc', 800: 'dccc', 900: 'cm',\n            1000:'m'}\n    ones = {0: '', 1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix'}\n    if number in tens:\n        return tens[number]\n    else:\n        return tens[number//10] + ones[number % 10]\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    roman_numerals = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    roman_numeral_map = (\n        (1000, \"M\"),\n        (900, \"CM\"),\n        (500, \"D\"),\n        (400, \"CD\"),\n        (100, \"C\"),\n        (90, \"XC\"),\n        (50, \"L\"),\n        (40, \"XL\"),\n        (10, \"X\"),\n        (9, \"IX\"),\n        (5, \"V\"),\n        (4, \"IV\"),\n        (1, \"I\"),\n    )\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Handle restrictions\n    if not isinstance(number, int):\n        raise TypeError(\"Invalid input: {}\".format(str(number)))\n    if number > 1000 or number < 1:\n        raise ValueError(\"Invalid input: {}\".format(str(number)))\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if type(number)!= int:\n        return None\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    def _int_to_mini_roman(number, numerals, roman_numeral, result):\n        if numerals == 0:\n            result = roman_numeral + result\n            return result\n        \n        if number > 4 * (10 ** numerals - 1) or number < (10 ** (numerals - 1)):\n            return _int_to_mini_roman(number, numerals - 1, roman_numeral, result)\n        \n        if number >= 10 ** (numerals - 1) and number < 10 ** numerals:\n            number = number % (10 ** (numerals - 1))\n            result = roman_numeral + result\n            return _int_to_mini_roman(number, numerals - 1, roman_numeral, result)\n        \n        if number >= 1 and number < 10:\n            result = numerals * roman_numeral + result\n            return _int_to_mini_roman(number, numerals - 1, roman_numeral, result)\n    \n    result = ''\n    return _int_to_mini_roman(number, numerals = 3, roman_numeral ='m', result = result)"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # your code here\n    int_to_roman_dict = {1: \"I\", 5: \"V\", 10: \"X\", 50: \"L\", 100: \"C\", 500: \"D\", 1000: \"M\"}\n    int_to_roman_num = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    roman_num_to_int_dict = dict(zip(int_to_roman_num, range(1, 14)))\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return all([a**2 + b**2 == c**2, a**2 + c**2 == b**2, b**2 + c**2 == a**2])\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (c**2 + a**2 == b**2)\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return None\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or c**2 + b**2 == a**2:\n        return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n    \nif __name__ == \"__main__\":\n    print right_angle_triangle(3, 4, 5)\n    print right_angle_triangle(1, 2, 3)\n    print right_angle_triangle(6, 8, 10"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (a ** 2) + (b ** 2) == (c ** 2) or (a ** 2) + (c ** 2) == (b ** 2) or (b ** 2) + (c ** 2) == (a ** 2"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return abs(a**2 + b**2 - c**2) < 0.001\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    str_len = []\n    for word in words:\n        str_len.append(len(set(word)))\n    max_len = max(str_len)\n    for word in words:\n        if len(set(word)) == max_len:\n            return word\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # word_dict = {}\n    # max_value = max(words, key = lambda x: len(set(list(x))))\n    # return max_value\n    word_dict = {}\n    max_value = None\n    for word in words:\n        word_dict[word] = len(set(list(word)))\n        if max_value is None:\n            max_value = word\n        if word_dict[word] > word_dict[max_value]:\n            max_value = word\n    return max_value\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # print(sorted(words, key=len, reverse=True))\n    # for i in sorted(words, key=len, reverse=True):\n    #     print(i)\n    # return sorted(words, key=len, reverse=True)[0]\n    # OR\n    return max(words, key=len)\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(words) == 0:\n        return \"\"\n    else:\n        counter = {}\n        for word in words:\n            counter[word] = len(set(word))\n        return min(counter, key=counter.get)\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(words) == 1:\n        return words[0]\n    \n    unique_letters = {}\n    for word in words:\n        for letter in word:\n            if letter not in unique_letters.keys():\n                unique_letters[letter] = 1\n            else:\n                unique_letters[letter] += 1\n    \n    max_len = max(unique_letters.values())\n    \n    for word in words:\n        if len(word) == max_len:\n            return word\n    \n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if words:\n        return sorted(words, key=len, reverse=True)[0]\n    else:\n        return \"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    words = sorted(words)\n    words_set = []\n    for word in words:\n        words_set.append(set(word))\n    words_set = set(words_set)\n    unique_characters = 0\n    unique_characters_word = \"\"\n    for word in words_set:\n        if len(word) > unique_characters:\n            unique_characters = len(word)\n            unique_characters_word = list(word)[0]\n    return unique_characters_word"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    eaten = number + need\n    eaten_left = remaining - need\n    return [eaten, eaten_left]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [number + need, remaining - need]\n    \ndef eat_two(number, need1, remaining, need2):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat_two(5, 6, 10, 5) -> [11, 2]\n    * eat_two(4, 8, 9, 6) -> [12, 1]\n    * eat_two(1, 10, 10, 10) -> [11, 0]\n    * eat_two(2, 11, 5, 7) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need1 : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    @need2 : integer\n        the number of carrots that you need to eat.\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need1 <= 1000\n    * 0 <= remaining <= 1000\n    * 0 <= need2 <= 1000\n    \n    Have fun :)\n    \"\"\"\n    return [number + need1 + need2, remaining - need1 - need2]\n    \ndef eat_three(number, need1, remaining, need2, need3):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat_three(5, 6, 10, 5, 4) -> [11, 2]\n    * eat_three(4, 8, 9, 6, 3) -> [12, 1]\n    * eat_three(1, 10, 10, 10, 10) -> [11, 0]\n    * eat_three(2, 11, 5, 7, 3) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need1 : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    @need2 : integer\n        the number of carrots that you need to eat.\n    @need3 : integer\n        the number of carrots that you need to eat.\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need1 <= 1000\n    * 0 <= remaining <= 1000\n    * 0 <= need2 <= 1000\n    * 0 <= need3 <= 1000\n    \n    Have fun :)\n    \"\"\"\n    return [number + need1 + need2 + need3, remaining - need1 - need2 - need3]\n    \ndef eat_four(number, need1, remaining, need2, need3, need4):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat_three(5, 6, 10, 5, 4) -> [11, 2]\n    * eat_three(4, 8, 9, 6, 3) -> [12, 1]\n    * eat_three(1, 10, 10, 10, 10) -> [11, 0]\n    * eat_three(2, 11, 5, 7, 3) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need1 : integer\n        the number of carrots that you need to eat.\n    @remaining : integer"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = [number, remaining]\n    if remaining < need:\n        number = number + remaining\n        remaining = 0\n    else:\n        remaining = remaining - need\n    result = [number, remaining]\n    return result"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if number < 0:\n        number = 0\n    if need < 0:\n        need = 0\n    if remaining < 0:\n        remaining = 0\n    if number + remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # first attempt: 624 ms\n    # total = 0\n    # while remaining > 0:\n    #     total += 1\n    #     if total == need:\n    #         return [total, remaining]\n    #     elif total > need:\n    #         return [total, remaining]\n    #     remaining -= 1\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    eaten = number + need\n    left = remaining - need\n    return [eaten, left]"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # TODO: Your code goes here\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # TODO: Complete this function\n    result = 0\n    \n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = operand[0]\n    for i in range(0, len(operand)-1):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: Your code here\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # write your code here\n    op_list = operator.split(\"+\")\n    op_len = len(op_list)\n    op_list = [x for x in op_list if x!= '']\n    op_len = len(op_list)\n    #print(op_len)\n    #print(operand)\n    #print(op_list)\n    result = operand[0]\n    #print(result)\n    for i in range(op_len):\n        #print(operand[i+1])\n        result = eval(str(result)+op_list[i]+str(operand[i+1]))\n        #print(result)\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]))\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if operator == \"+\":\n        return sum(operand)\n    elif operator == \"-\":\n        return operand[0] - operand[1]\n    elif operator == \"*\":\n        return operand[0] * operand[1]\n    elif operator == \"//\":\n        return operand[0] // operand[1]\n    elif operator == \"**\":\n        return operand[0] ** operand[1]\n    else:\n        print(\"Something is wrong!\")\n        return\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: complete this\n    return 0\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # YOUR CODE HERE\n    # ret = operand[0]\n    # for i in range(1, len(operand)):\n    #     if operator[i] == '+':\n    #         ret += operand[i]\n    #     elif operator[i] == '-':\n    #         ret -= operand[i]\n    #     elif operator[i] == '*':\n    #         ret *= operand[i]\n    #     elif operator[i] == '/':\n    #         ret //= operand[i]\n    #     elif operator[i] == '**':\n    #         ret **= operand[i]\n    # return ret\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i=0\n    while i < len(s):\n        if s[i].isalpha():\n            s = s[:i]+s[i].swapcase()+s[i+1:]\n        i+=1\n    return s\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s_list = list(s)\n    for i, ch in enumerate(s_list):\n        if ch.isalpha():\n            if ch.islower():\n                s_list[i] = ch.upper()\n            else:\n                s_list[i] = ch.lower()\n        else:\n            continue\n    return ''.join(s_list)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return re.sub(r\"^([a-zA-Z])\", lambda x: x.group(1).upper(), s)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return None"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return ''.join(list(map(lambda x: x.lower() if x.isupper() else x.upper(), s)))\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return s.swapcase()"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return md5(text).hexdigest() if text else None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    hash_obj = hashlib.md5()\n    if text:\n        hash_obj.update(text)\n        return hash_obj.hexdigest()\n    else:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if text is None:\n        return None\n    if not text:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    hash_object = hashlib.md5(str.encode(text))\n    return hash_object.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(text) == 0:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #return []\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(filter(lambda x: x % 2 == 0 and a <= x <= b, range(a, b + 1)))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # ------ SOLUTION ------\n    return list(filter(lambda x: x % 2 == 0, range(a, b+1)))"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [int(str(x)[0]) for x in range(a, b + 1) if x % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    integers = []\n    if a % 2!= 0:\n        a -= 1\n    if b % 2!= 0:\n        b += 1\n    while a < b:\n        if a % 2 == 0:\n            integers.append(a)\n        a += 1\n    return integers\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [i for i in range(a, b+1) if i%2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #raise NotImplementedError\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def helper(a, b):\n        # special cases\n        if a == b or a == 0 or b == 0:\n            return []\n        if b < a:\n            return []\n        if a % 2 == 1:\n            a = a - 1\n        if b % 2 == 0:\n            b = b + 1\n        return [i for i in range(a, b, 2)]\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #solution\n    result = []\n"
    }
]