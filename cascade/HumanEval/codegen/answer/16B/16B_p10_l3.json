[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return all(is_close(numbers[i], numbers[i + 1], threshold) for i in range(len(numbers) - 1))\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i!= j:\n                if abs(numbers[i] - numbers[j]) < threshold:\n                    return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return any([abs(numbers[i] - numbers[i + 1]) <= threshold for i in range(len(numbers) - 1)])\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i!= j and abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(numbers) < 2:\n        return False\n    numbers.sort()\n    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i, num in enumerate(numbers):\n        for j in range(i + 1, len(numbers)):\n            if abs(num - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # your code here\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pars = []\n    l = len(paren_string)\n    i = 0\n    while i < l:\n        if paren_string[i] == '(':\n            j = i + 1\n            while j < l and paren_string[j]!= ')':\n                j += 1\n            if j < l:\n                pars.append(paren_string[i:j+1])\n                i = j + 1\n            else:\n                pars.append(paren_string[i:])\n                break\n        i += 1\n    return pars\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    current_group = []\n    current_group_is_balanced = True\n    for char in paren_string:\n        if char == '(':\n            current_group.append(char)\n        elif char == ')':\n            if current_group_is_balanced:\n                result.append(''.join(current_group))\n                current_group = []\n            else:\n                current_group.append(char)\n            current_group_is_balanced = not current_group_is_balanced\n    result.append(''.join(current_group))\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    grouped_parens = []\n    current_group = ''\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst = []\n    curr_s = ''\n    for i in paren_string:\n        if i == ')' and curr_s[-1] == '(':\n            curr_s += i\n            lst.append(curr_s)\n            curr_s = ''\n        elif i == '(' and curr_s == '':\n            curr_s += i\n        elif i == '(':\n            curr_s += i\n        elif i == ')' and curr_s[-1] == ')':\n            curr_s += i\n            lst.append(curr_s)\n            curr_s = ''\n        elif i == ')':\n            curr_s += i\n            lst.append(curr_s)\n            curr_s = ''\n        elif i =='':\n            pass\n        else:\n            curr_s += i\n    if curr_s == '':\n        return lst\n    else:\n        lst.append(curr_s)\n    return lst\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: Fix the extra parens\n    # TODO: Fix the # of parens\n    # TODO: In the future we could add a variable to count the parens as they're parsed\n    # TODO: We could save the index of the parens in the loop to save space\n    # TODO: In this problem we are adding more to the stack than we are popping off\n    # TODO: We could add a variable to keep track of how many are in the stack and make sure there are enough to pop off\n    # TODO: We could also track the number of parens we need to add to the stack\n    # TODO: We could also track the number of parens we want to add to the stack, and if we reach 0, then we can pop\n    # TODO: We could also check if the last paren has been closed, and then add that index to the stack\n    stack = []\n    parens = 0\n    for paren in paren_string:\n        if paren == '(':\n            stack.append(paren)\n            parens += 1\n        if paren == ')':\n            stack.pop()\n            parens -= 1\n    return [''.join(stack)]\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    paren_stack = []\n    i = 0\n    while i < len(paren_string):\n        # process the character at index i\n        # Push everything into the stack that we need to process\n        if paren_string[i] == '(':\n            paren_stack.append(paren_string[i])\n        elif paren_string[i] == ')':\n            paren_stack.pop()\n        # If the current character is not a left parenthesis or right\n        # parenthesis, then we skip this character\n        else:\n            i += 1\n        # If we get a right parenthesis and it's matching the top element\n        # of the stack, we pop the stack\n        # Otherwise, we process the next character and continue\n        if paren_stack and paren_string[i] == ')':\n            while paren_stack[-1]!= '(':\n                result.append(paren_stack.pop())\n            paren_stack.pop()\n            i += 1\n        # If we get a left parenthesis and there are no top characters\n        # in the stack, we push it to the stack\n        # Otherwise, we process the next character and continue\n        elif paren_string[i] == '(' and not paren_stack:\n            paren_stack.append(paren_string[i])\n            i += 1\n        else:\n            i += 1\n    # If the stack is empty, there was no unclosed parentheses\n    while paren_stack:\n        result.append(paren_stack.pop())\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    stack = []\n    result = []\n    for i in range(len(paren_string)):\n        char = paren_string[i]\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if len(stack) == 0:\n                raise ValueError('No matching closing parenthesis')\n            else:\n                group = paren_string[stack[-1]:i + 1]\n                stack.pop()\n                result.append(group)\n    if len(stack) == 0:\n        return result\n    else:\n        raise ValueError('No matching opening parenthesis')\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # create stack of tuples of open brackets, and a list of strings for the output\n    stack = []\n    separated_groups = []\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                raise ValueError('Incorrect parentheses: {}'.format(paren_string))\n            else:\n                # remove last element from stack and concatenate to the last element in separated_groups\n                group = \"\".join(stack[-1])\n                if len(separated_groups) == 0:\n                    separated_groups.append(group)\n                else:\n                    separated_groups[-1] = separated_groups[-1] + group\n                stack.pop()\n    return separated_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    current_group = ''\n    groups = []\n    for char in paren_string:\n        if char == '(' and current_group == '':\n            current_group += char\n        elif char == '(' and current_group!= '':\n            current_group += char\n        elif char == ')' and current_group!= '':\n            current_group += char\n            groups.append(current_group)\n            current_group = ''\n        else:\n            continue\n    if current_group!= '':\n        groups.append(current_group)\n    return groups\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    temp = []\n    s = ''\n    for char in paren_string:\n        if char == '(':\n            if s!= '':\n                temp.append(s)\n                s = ''\n            temp.append(char)\n        elif char == ')':\n            temp.append(char)\n            result.append(''.join(temp))\n            temp = []\n        else:\n            s += char\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    int_part = int(number)\n    decimals = number - int_part\n    return decimals\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    a,b = divmod(number,1)\n    return b\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return math.floor(number) - math.ceil(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return number - math.floor(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return int(number*10)/10\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return math.floor(number) - number\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    decimals = math.modf(number)[0]\n    return decimals\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return int(number * 10**-2) / 10**-2\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    balance = 0\n    for op in operations:\n        if op == 1:\n            balance += 1\n        elif op == -1:\n            balance -= 1\n        else:\n            raise ValueError('Invalid operation: {}'.format(op))\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance -= operation\n        else:\n            balance += operation\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for i in operations:\n        if i < 0:\n            count += i\n        elif i == 0:\n            pass\n        else:\n            if count < 0:\n                return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum = 0\n    for operation in operations:\n        if operation < 0:\n            sum += operation\n        else:\n            sum += operation\n        if sum < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    i = 0\n    while i < len(operations):\n        if operations[i] < 0:\n            return True\n        else:\n            i += 1\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in operations:\n        if i < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            if balance + operation < 0:\n                return True\n        balance += operation\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return any([x < 0 for x in operations])\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #mean = sum(numbers) / len(numbers)\n    #return sum([abs(x - mean) for x in numbers]) / len(numbers)\n    if len(numbers) == 1:\n        return 0\n    return sum([abs(x - mean(numbers)) for x in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = len(numbers)\n    if n == 0:\n        return 0\n    average = sum(numbers) / n\n    sum_of_absolute_differences = 0\n    for number in numbers:\n        sum_of_absolute_differences += abs(number - average)\n    return sum_of_absolute_differences / n\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(abs(numbers[i]-mean(numbers)) for i in range(len(numbers))) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    mean_absolute_deviation = sum(\n        [\n            abs(x - sum(numbers) / len(numbers))\n            for x in numbers\n        ]\n    ) / len(numbers)\n    return mean_absolute_deviation\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # 1. Find the mean of the given dataset:\n    mean = sum(numbers) / len(numbers)\n    # 2. Calculate the difference between each element and the mean:\n    difference = [abs(num - mean) for num in numbers]\n    # 3. Calculate the mean of the differences:\n    mad = sum(difference) / len(difference)\n    return mad\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    mean = sum(numbers) / len(numbers)\n    sum_of_absolute_difference = 0.0\n    for num in numbers:\n        sum_of_absolute_difference += abs(num - mean)\n    return sum_of_absolute_difference / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum(map(lambda x: abs(x - sum(numbers)/len(numbers)), numbers))/len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum([abs(number - mean(numbers)) for number in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = len(numbers)\n    if n == 0:\n        raise ValueError(\"List cannot be empty\")\n    mean = sum(numbers) / n\n    return sum(abs(x - mean) for x in numbers) / n\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # YOUR CODE HERE\n    return round(sum([abs(x - sum(numbers) / len(numbers)) for x in numbers]) / len(numbers), 3)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [numbers[0]] + [delimeter] * (len(numbers) - 2) + numbers[1:]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [numbers[i] if i == 0 or numbers[i]!= numbers[i-1] else delimeter for i in range(len(numbers))]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers = list(numbers)  # don't modify the original list\n    if not numbers:\n        return []\n    i = 0\n    while i < len(numbers) - 1:\n        numbers.insert(i + 1, delimeter)\n        i += 2\n    return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [delimeter] + numbers + [delimeter]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    res = []\n    for i, num in enumerate(numbers):\n        if i % 2 == 0:\n            res.append(num)\n        else:\n            res.append(delimeter)\n            res.append(num)\n    return res\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [delimeter] + [numbers[i - 1] for i in range(1, len(numbers))] + [delimeter] + [numbers[i]]\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # base case: if `numbers' is empty, return empty list\n    if not numbers:\n        return []\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(len(numbers) - 1):\n        if i % 2 == 0:\n            result.append(numbers[i])\n            result.append(delimeter)\n        else:\n            result.append(numbers[i])\n    result.append(numbers[-1])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    inter_num = []\n    inter_num.append(numbers[0])\n    for i in range(1, len(numbers)):\n        inter_num.append(delimeter)\n        inter_num.append(numbers[i])\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    numbers.insert(0, delimeter)\n    numbers.append(delimeter)\n    return numbers\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not paren_string:\n        return []\n    result = [0] * len(paren_string)\n    num_opened, num_closed = 0, 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            num_opened += 1\n        elif paren_string[i] == ')':\n            num_closed += 1\n        if num_opened > num_closed:\n            result[i] = num_opened - num_closed\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    parsed = []\n    paren_stack = []\n    level = 0\n    max_level = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            paren_stack.append(i)\n            level += 1\n            if level > max_level:\n                max_level = level\n        elif char == ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"Mismatched parentheses\")\n            else:\n                parsed.append(paren_stack.pop())\n                if len(paren_stack) == 0:\n                    level = 0\n                else:\n                    level -= 1\n    if len(paren_stack)!= 0:\n        raise ValueError(\"Mismatched parentheses\")\n    return [max_level, *parsed]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    groups = paren_string.split(' ')\n    max_level = 0\n    nesting_levels = []\n    for group in groups:\n        if ')' not in group:\n            nesting_levels.append(0)\n            continue\n        else:\n            for i in range(len(group)):\n                if group[i] == ')':\n                    nesting_levels.append(group[:i].count('(') - group[:i].count(')'))\n                    break\n    return nesting_levels\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    paren_groups = paren_string.split(' ')\n    depth = 0\n    nested_groups = []\n    for paren_group in paren_groups:\n        nested_groups.append(get_nested_group(paren_group))\n    return nested_groups\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Idea: split by spaces and iterate over each group and check for number of nested parentheses.\n    paren_groups = paren_string.split(' ')\n    return_list = []\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for num in paren_string.split():\n        result.append(max(list(map(len, num.split('(')))))\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [parsed_parens for parens_string in paren_string.split(' ') for parsed_parens in parse_parens(parens_string)]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    stack = []\n    out = []\n    for ch in paren_string:\n        if ch == '(':\n            stack.append('(')\n        elif ch == ')':\n            if len(stack)!= 0:\n                out.append(stack.pop())\n            else:\n                stack.append(')')\n    return out\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    num_opening_parentheses = 0\n    num_closing_parentheses = 0\n    stack = []\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    stack = []\n    counter = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(counter)\n            counter += 1\n        elif char == ')':\n            counter -= 1\n            if stack:\n                stack.pop()\n    return stack\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return []\n    if substring not in strings[0]:\n        return []\n    return [\n        string for string in strings if substring in string\n    ]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    output = []\n    for string in strings:\n        if substring in string:\n            output.append(string)\n    return output\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    filtered = []\n    for i in strings:\n        if substring in i:\n            filtered.append(i)\n    return filtered\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not substring:\n        return strings\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = 0\n    p = 1\n    for num in numbers:\n        s += num\n        p *= num\n    return s, p\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    s = 0\n    p = 1\n    for num in numbers:\n        s += num\n        p *= num\n    return s, p\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    numbers_sum = 0\n    numbers_product = 1\n    for number in numbers:\n        numbers_sum += number\n        numbers_product *= number\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum = 0\n    product = 1\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = 0\n    p = 1\n    for number in numbers:\n        s += number\n        p *= number\n    return s, p\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(numbers), prod(numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (sum(numbers), reduce(mul, numbers, 1))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum_value = 0\n    product_value = 1\n    for number in numbers:\n        sum_value += number\n        product_value *= number\n    return (sum_value, product_value)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for index, number in enumerate(numbers):\n        if index == 0:\n            result.append(number)\n        elif number > result[-1]:\n            result.append(number)\n        else:\n            result.append(result[-1])\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result: List[int] = []\n    rolling_max_so_far = numbers[0]\n    for number in numbers[1:]:\n        rolling_max_so_far = max(rolling_max_so_far, number)\n        result.append(rolling_max_so_far)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [max(numbers[:i+1]) for i in range(len(numbers))]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    max_list = [numbers[0]]\n    for index, number in enumerate(numbers):\n        if number > max_list[-1]:\n            max_list.append(number)\n        else:\n            max_list.append(max_list[-1])\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    current_max = numbers[0]\n    result = []\n    for i in range(1, len(numbers)):\n        current_max = max(current_max, numbers[i])\n        result.append(current_max)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i + 1]))\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s_max = numbers[0]\n    result = [s_max]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    out: List[int] = []\n    for i in range(len(numbers)):\n        out.append(max(numbers[:i+1]))\n    return out\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [max(numbers[:i]) for i in range(1, len(numbers) + 1)]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    rolling_max = [numbers[0]]\n    for num in numbers[1:]:\n        if num > rolling_max[-1]:\n            rolling_max.append(num)\n        else:\n            rolling_max.append(rolling_max[-1])\n    return rolling_max\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Find the longest prefix that is a palindrome.\n    prefix = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            prefix = string[:i+1]\n    # Find the longest postfix that is a palindrome.\n    postfix = \"\"\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[i:]):\n            postfix = string[i:]\n    # Return the original string appended with the reverse of a string prefix that comes before the palindromic suffix.\n    return prefix + string[len(prefix):] + postfix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    reverse = string[::-1]\n    len_string = len(string)\n    longest_palindrom = reverse\n    if len_string > 1:\n        for i in range(len_string - 1):\n            prefix = string[:i + 1]\n            if is_palindrome(prefix):\n                longest_palindrom = prefix + reverse\n    return longest_palindrom\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Find the longest postfix of the supplied string that is a palindrome\n    postfix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            postfix = string[i:]\n            break\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    palindrome_prefix = find_longest_palindrome_postfix(string)\n    palindrome_suffix = string[::-1][:len(palindrome_prefix)]\n    return palindrome_prefix + palindrome_suffix\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    suffix = find_longest_palindrome_suffix(string)\n    if len(suffix) == 0:\n        return string[::-1]\n    return suffix[::-1] + string[:len(suffix) - 1][::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    length = len(string)\n    suffix = string[::-1]\n    for i in range(1, length):\n        prefix = string[:i][::-1]\n        if is_palindrome(prefix):\n            return suffix + prefix\n    return suffix + string\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    palindrome_prefix, palindrome_suffix = find_palindrome_prefix_suffix(string)\n    return string[:-len(palindrome_prefix)] + palindrome_suffix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    p = longest_palindrome_suffix(string)\n    return string + p[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not string:\n        return ''\n    length = len(string)\n    longest_palindrome_postfix = find_longest_palindrome_postfix(string)\n    palindrome_prefix = string[:-(length - len(longest_palindrome_postfix))]\n    return palindrome_prefix + longest_palindrome_postfix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if is_palindrome(string):\n        return string\n    if len(string) == 1:\n        return string + string\n    longest_palindromic_postfix = string[::-1]\n    return string[:-len(longest_palindromic_postfix)] + longest_palindromic_postfix\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return ''.join([str(int(x!= y)) for x, y in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    a_bin = [bin(ord(x))[2:].zfill(8) for x in a]\n    b_bin = [bin(ord(x))[2:].zfill(8) for x in b]\n    xor_bin = list(map(lambda x, y: str(int(x) ^ int(y)), a_bin, b_bin))\n    return ''.join(xor_bin)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(a)!= len(b):\n        raise ValueError\n    return ''.join(map(str, [int(c1) ^ int(c2) for c1, c2 in zip(a, b)]))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # convert to binary\n    # convert to list of ints\n    # xor\n    # convert back to binary\n    return int(a, 2) ^ int(b, 2)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # naive\n    # if len(a) > len(b):\n    #     return string_xor(b, a)\n    # return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n    a, b = a.zfill(len(b)), b.zfill(len(a))\n    res = ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return ''.join(['1' if a[i]!= b[i] else '0' for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # if len(a)!= len(b):\n    #     raise ValueError(\"Passed strings have different lengths\")\n    # res = ''\n    # for i in range(len(a)):\n    #     if a[i] == b[i]:\n    #         res += '0'\n    #     else:\n    #         res += '1'\n    # return res\n    return ''.join(['0' if a[i] == b[i] else '1' for i in range(len(a))])\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # O(n) time complexity and O(n) space complexity\n    if len(strings) == 0:\n        return None\n    str_len = [len(i) for i in strings]\n    idx = str_len.index(max(str_len))\n    return strings[idx]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        strings_len = [len(string) for string in strings]\n        max_len = max(strings_len)\n        return strings[strings_len.index(max_len)]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not strings:\n        return None\n    length_list = [len(string) for string in strings]\n    return strings[length_list.index(max(length_list))]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if strings:\n        return max(strings, key=len)\n    return None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return None\n    max_length = max(len(i) for i in strings)\n    return strings[0] if len(strings) == 1 else [i for i in strings if len(i) == max_length][0]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if strings:\n        longest_str = strings[0]\n        longest_length = len(longest_str)\n        for string in strings:\n            if len(string) > longest_length:\n                longest_str = string\n                longest_length = len(longest_str)\n        return longest_str\n    else:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not strings:\n        return None\n    max_length = len(strings[0])\n    max_word = strings[0]\n    for word in strings:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    while a!= b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return greatest_common_divisor_recursive(a, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    while a % b!= 0:\n        old_a = a\n        a = b\n        b = old_a % b\n    return b\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    while b!= 0:\n        (a, b) = (b, a % b)\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return gcd(a, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # ToDo: If a and b are negative, return max(a, b)\n    # ToDo: if a == 0 or b == 0, return b or a respectively\n    return b if a == 0 else greatest_common_divisor(b % a, a)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    prefixes: List[str] = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not string:\n        return ['']\n    elif len(string) == 1:\n        return [string]\n    else:\n        prefixes = []\n        prefixes.append(string[0])\n        prefixes.extend(all_prefixes(string[1:]))\n        return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    all_prefixes = []\n    for index in range(len(string)):\n        all_prefixes.append(string[0: index+1])\n    return all_prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    prefixes = ['']\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not string:\n        return ['']\n    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(string) <= 1:\n        return [string]\n    all_prefixes_list = []\n    for i in range(len(string)):\n        all_prefixes_list.append(string[0:i+1])\n    return all_prefixes_list\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # If string is empty, return empty list\n    if not string:\n        return []\n    # If string is not empty, return list of all prefixes\n    return list(string[:i] for i in range(len(string)))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \" \".join(list(map(str, range(n + 1))))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return''.join(map(str, range(n + 1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return''.join(map(str, range(n+1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return''.join(map(str, range(n + 1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 0:\n        return '0'\n    else:\n        return''.join([str(i) for i in range(n + 1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return''.join([str(i) for i in range(n+1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    distinct_characters = set()\n    for char in string.lower():\n        distinct_characters.add(char)\n    return len(distinct_characters)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lower_case_characters = set(string.lower())\n    return len(lower_case_characters)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = set()\n    for c in string:\n        s.add(c.lower())\n    return len(s)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    string_set = set(string.lower())\n    return len(string_set)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    string = string.lower()\n    return len(set(string))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # your code here\n    return\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    res = []\n    notes_beats = music_string.split()\n    for note_beats in notes_beats:\n        res.append(beat_count(note_beats))\n    return res\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [len(notation) for notation in music_string.split('|') if notation!= '']\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    notes = music_string.split()\n    return [len(i.split('|')) for i in notes]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst = []\n    for note in music_string.split('|'):\n        note = note.replace('.', '|')\n        lst.extend([int(i) for i in note.split(' ')])\n    return lst\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    notes_list = []\n    for note in music_string.split(' '):\n        if note.count('|') == 0:\n            notes_list.append(4)\n        elif note.count('|') == 1:\n            notes_list.append(2)\n        elif note.count('|') == 2:\n            notes_list.append(1)\n    return notes_list\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    notes = music_string.split('|')\n    return [len(note) for note in notes]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return []\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return_list = []\n    for i in music_string:\n        if i == 'o':\n            return_list.append(4)\n        elif i == 'o|':\n            return_list.append(2)\n        elif i == '.':\n            return_list.append(1)\n        elif i == '|':\n            return_list.append(1/2)\n        elif i =='':\n            pass\n    return return_list\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    parts = music_string.split('|')\n    for part in parts:\n        beat = 1\n        for char in part:\n            if char == 'o':\n                result.append(4)\n            elif char == '.':\n                result.append(1)\n            elif char == 'o':\n                result.append(2)\n            elif char == '.':\n                result.append(.5)\n            elif char == '.':\n                result.append(.5)\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    substring_len = len(substring)\n    # Overlaping substring case\n    result = 0\n    for i in range(0, len(string) - substring_len + 1):\n        if string[i:i+substring_len] == substring:\n            result += 1\n    # Simple case\n    result += string.count(substring)\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    matches = 0\n    # find the index of the first match\n    i = string.find(substring)\n    while i >= 0:\n        matches += 1\n        i = string.find(substring, i+1)\n    return matches\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    counter = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i] == substring[0]:\n            if string[i:i + len(substring)] == substring:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = 0\n    while True:\n        n += string.count(substring)\n        string = string[string.find(substring) + 1:]\n        if len(string) == 0:\n            return n\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n = len(string)\n    m = len(substring)\n    if m == 0:\n        return 0\n    if m == 1:\n        return n - 1 if substring == string[1:] else 0\n    sub_first_char = substring[0]\n    sub_last_char = substring[-1]\n    # Find how many times sub is inside the original, overlapping string.\n    inside_count = (string[1:].find(sub_last_char) + 1) if sub_last_char in string[1:] else 0\n    # Find how many times sub is the first character of the original string.\n    first_char_count = string.find(sub_first_char) + 1 if sub_first_char in string else 0\n    # Find how many times sub is the last character of the original string.\n    last_char_count = n - m + 1 if sub_last_char in string[:-m + 1] else 0\n    # Find how many times sub is in the original string, excluding overlaping cases.\n    overlaping_count = how_many_times(string[1:], substring[1:]) if sub_last_char in string[1:] else 0\n    # The original string contains sub, therefore, sub appears `(n - m + 1)` times.\n    return first_char_count + inside_count + last_char_count + overlaping_count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    counter = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # return string.count(substring)\n    return string.count(substring) if substring else 0\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    cnt = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # return string.count(substring)\n    # return sum(1 for i in range(len(string)) if string[i:].startswith(substring))\n    return string.count(substring) if substring in string else 0\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    numbers_list = numbers.split(' ')\n    numbers_list.sort(key=int)\n    return''.join(numbers_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    numbers = numbers.split(' ')\n    numbers = list(map(int, numbers))\n    numbers.sort()\n    for num in range(len(numbers)):\n        numbers[num] = str(numbers[num])\n    return''.join(numbers)\n    \n    \ndef find_unique_characters(text: str) -> str:\n    \"\"\" Input is a string of text. Return the characters that only appear once in the string\n    >>> find_unique_characters('AAAABBBCCDAABBB')\n    'ABCD'\n    \"\"\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers_list = numbers.split(' ')\n    numbers_list.sort()\n    return''.join(numbers_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \" \".join(sorted(numbers.split()))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return''.join(sorted(numbers.split()))\n    # return''.join(sorted(numbers.split(), key=int))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Make sure all the number are valid\n    assert len(numbers) > 0 and len(set(numbers.split())) == len(numbers.split()), 'Input must be a valid string of numbers'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    numbers = numbers.split(' ')\n    for i in range(len(numbers)):\n        numbers[i] = int(numbers[i])\n    numbers.sort()\n    for i in range(len(numbers)):\n        numbers[i] = str(numbers[i])\n    numbers =''.join(numbers)\n    return numbers\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return''.join(sorted(numbers.split(), key=int))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numbers = numbers.split(' ')\n    # print(numbers)\n    numbers.sort()\n    print(numbers)\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    num_dict = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n    \n    for num in num_dict:\n        numbers = numbers.replace(num, num_dict[num])\n    \n    return''.join(numbers.split())\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # find the minimum and maximum numbers\n    # sort the list and return the closest pair\n    return min(numbers), max(numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Create a tuple of 2 items to return\n    two_items = [numbers[0], numbers[1]]\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # TODO: implement this function (Task 2)\n    smallest = numbers[0]\n    largest = numbers[1]\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] > numbers[j]:\n                if smallest > numbers[i]:\n                    smallest = numbers[i]\n                if largest < numbers[j]:\n                    largest = numbers[j]\n            else:\n                if smallest > numbers[j]:\n                    smallest = numbers[j]\n                if largest < numbers[i]:\n                    largest = numbers[i]\n    return (smallest, largest)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # TODO: implement this\n    # Initialise max_diff to the max difference between any two numbers in numbers\n    # Initialise min1 and min2 to the position of the first two numbers that have the minimum difference.\n    # Initialise max1 and max2 to the position of the first two numbers that have the maximum difference.\n    # Go through each number in the list of numbers\n    #   if the number is not equal to max1 and max2,\n    #   and it is less than max1 and max2,\n    #   then:\n    #       if the number is the smallest, then update min1 and min2 to this number\n    #       if the number is the largest, then update max1 and max2 to this number\n    # Otherwise, if the number is not equal to min1 and min2,\n    #   and it is greater than min1 and min2,\n    #   then:\n    #       if the number is the smallest, then update min1 and min2 to this number\n    #       if the number is the largest, then update max1 and max2 to this number\n    # return (min1, min2) and (max1, max2)\n    min1, min2 = 0, 0\n    max1, max2 = 0, 0\n    max_diff = 0\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if (i!= j and numbers[i]!= numbers[j] and numbers[i] < numbers[j]):\n                if (abs(numbers[i] - numbers[j]) < max_diff):\n                    max_diff = abs(numbers[i] - numbers[j])\n                    min1, min2 = numbers[i], numbers[j]\n            elif (i!= j and numbers[i]!= numbers[j] and numbers[i] > numbers[j]):\n                if (abs(numbers[i] - numbers[j]) < max_diff):\n                    max_diff = abs(numbers[i] - numbers[j])\n                    max1, max2 = numbers[i], numbers[j]\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ()\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Create a variable to store the difference\n    first_difference = abs(numbers[0] - numbers[1])\n    # Create a variable to store the index of the first number\n    first_difference_index = 0\n    # Create a variable to store the index of the second number\n    second_difference_index = 1\n    # Iterate through the rest of the numbers\n    for number in numbers[2:]:\n        # Calculate the difference with the current number\n        difference = abs(number - numbers[1])\n        # If the difference is less than the current first difference\n        if difference < first_difference:\n            # Save the difference, first difference index and second difference index\n            first_difference = difference\n            first_difference_index = numbers.index(number)\n            second_difference_index = numbers.index(numbers[1])\n        # If the difference is less than the current second difference\n        elif difference < second_difference:\n            # Save the difference, first difference index and second difference index\n            second_difference = difference\n            second_difference_index = numbers.index(number)\n    # Return the two numbers in the order of first difference then second difference\n    return (numbers[first_difference_index], numbers[second_difference_index])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # there is an index error if numbers is less than two, so check first\n    if len(numbers) < 2:\n        raise ValueError('Not enough numbers for finding closest pair')\n    # sort the list of numbers in ascending order\n    numbers.sort()\n    # initialize a list to hold the two closest numbers\n    closest_pair = []\n    # initialize the first pair\n    closest_pair.append(numbers[0])\n    closest_pair.append(numbers[1])\n    # initialize the closest distance\n    closest_distance = calculate_distance(closest_pair)\n    # check the remainder of the list\n    for i in range(len(numbers) - 1):\n        # create a new pair of numbers\n        new_pair = [numbers[i], numbers[i+1]]\n        # calculate the distance between the new pair\n        new_distance = calculate_distance(new_pair)\n        # if the distance is less than the current closest distance, update the closest pair and distance\n        if new_distance < closest_distance:\n            closest_distance = new_distance\n            closest_pair = new_pair\n    # return the closest pair\n    return closest_pair[0], closest_pair[1]\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[2])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numbers.sort()\n    return (numbers[1], numbers[2])\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # check to ensure list is not empty\n    assert numbers, \"Cannot find closest elements on an empty list.\"\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Initiliaze variables\n    max_number = max(numbers)\n    min_number = min(numbers)\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = len(numbers)\n    a = numbers[0]\n    b = numbers[-1]\n    if a < b:\n        diff = b - a\n    else:\n        diff = a - b\n    slope = diff / (n - 1)\n    rescale = []\n    for i in range(n):\n        rescale.append((numbers[i] - a) / slope)\n    return rescale\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    if minimum == maximum:\n        return [0] * len(numbers)\n    else:\n        return [(number - minimum) / (maximum - minimum) for number in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # divide each element by largest element in list\n    return [n / max(numbers) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    numbers.sort()\n    low = numbers[0]\n    high = numbers[-1]\n    delta = high - low\n    unit = []\n    for n in numbers:\n        unit.append((n - low) / delta)\n    return unit\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [num * (1.0 / (numbers[0] + numbers[1])) for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert(len(numbers) >= 2)\n    x = numbers[0]\n    y = numbers[1]\n    x = x - min(numbers)\n    y = y - min(numbers)\n    x = x / max(x, y)\n    y = y / max(x, y)\n    return [x, y]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert len(numbers) >= 2, \"The list must be at least of two numbers\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [i for i in values if type(i) == int]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [val for val in values if isinstance(val, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [int(x) for x in values if isinstance(x, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    counter = 0\n    for _ in string:\n        counter += 1\n    return counter\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    length = 0\n    for char in string:\n        length += 1\n    return length\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for letter in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for _ in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    length = 0\n    for i in string:\n        length += 1\n    return length\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    divisor = 1\n    while divisor < n:\n        divisor += 1\n        if n % divisor == 0:\n            return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 1\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n < 2:\n        raise ValueError('invalid input:', n)\n    # Using math.sqrt() for square root\n    return int(n ** 0.5)\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    p = n - 1\n    while p > 0:\n        if n % p == 0:\n            return p\n        p = p - 1\n    return 1\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return next((i for i in range(n, 1, -1) if n % i == 0), 1)\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n_sq = n ** 2\n    for i in range(n, 1, -1):\n        if n_sq % i == 0:\n            return i\n    raise ValueError('n should be a positive integer')\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    largest_divisor_so_far = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            largest_divisor_so_far = i\n        i += 1\n    return largest_divisor_so_far\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for x in range(n, 0, -1):\n        if n % x == 0:\n            return x\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 0\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return reduce(lambda x, y: max(x, y), {i for i in range(1, n) if n % i == 0})\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    res = []\n    for x in range(2, n + 1):\n        while n % x == 0:\n            res.append(x)\n            n /= x\n    return res\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            result.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    result = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            result.append(i)\n            n = n / i\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 2:\n        return []\n    factors = []\n    p = 2\n    while p * p <= n:\n        if n % p:\n            p += 1\n        else:\n            n //= p\n            factors.append(p)\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            n /= i\n            result.append(i)\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    factors = []\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            factors.append(factor)\n            n //= factor\n        else:\n            factor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n / 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            factors.append(f)\n            n = n / f\n        else:\n            f += 2\n    if n!= 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    unique_nums = set()\n    unique_nums_list = []\n    for num in numbers:\n        if num not in unique_nums:\n            unique_nums.add(num)\n            unique_nums_list.append(num)\n    return unique_nums_list\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    for i in range(len(numbers)):\n        if numbers[i] in numbers[i+1:]:\n            numbers.pop(numbers[i])\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    num_set = set(numbers)\n    return list(num_set)\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return list(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    dup = set()\n    result = []\n    for n in numbers:\n        if n not in dup:\n            result.append(n)\n            dup.add(n)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if numbers == []:\n        return []\n    \n    result = [numbers[0]]\n    for index in range(1, len(numbers)):\n        if numbers[index] not in result:\n            result.append(numbers[index])\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    new_list = []\n    for num in numbers:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if numbers == []:\n        return numbers\n    number = numbers[0]\n    count = 1\n    i = 1\n    while i < len(numbers):\n        if number == numbers[i]:\n            count += 1\n            if count > 2:\n                i += 1\n                continue\n        else:\n            number = numbers[i]\n            count = 1\n        i += 1\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    final_list = []\n    for i in numbers:\n        if i not in final_list:\n            final_list.append(i)\n    return final_list\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Use a dictionary to store the elements.\n    # If there is another element that is the same, remove that from the list.\n    # Continue until there are no more duplicates in the list.\n    # Return the list.\n    # Use a dictionary to store the elements.\n    # If there is another element that is the same, remove that from the list.\n    # Continue until there are no more duplicates in the list.\n    # Return the list.\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join([char.swapcase() for char in string])\n    # list_string = list(string)\n    # for i in range(len(list_string)):\n    #     if list_string[i].isupper():\n    #         list_string[i] = list_string[i].lower()\n    #     else:\n    #         list_string[i] = list_string[i].upper()\n    # return \"\".join(list_string)\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return ''.join([ch.lower() if ch.islower() else ch.upper() for ch in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    uppercase = string.upper()\n    lowercase = string.lower()\n    return lowercase + uppercase[1:]\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    string_list = list(string)\n    for i in range(len(string)):\n        if string_list[i].isupper():\n            string_list[i] = string_list[i].lower()\n        else:\n            string_list[i] = string_list[i].upper()\n    return ''.join(string_list)\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n    return new_string\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    flipped = ''\n    for char in string:\n        if char.isupper():\n            flipped = flipped + char.lower()\n        elif char.islower():\n            flipped = flipped + char.upper()\n        else:\n            flipped += char\n    return flipped\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    flipped_string = \"\"\n    for character in string:\n        if character.isalpha():\n            if character.isupper():\n                flipped_string += character.lower()\n            else:\n                flipped_string += character.upper()\n        else:\n            flipped_string += character\n    return flipped_string\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join(map(lambda x: x.lower() if x.isupper() else x.upper(), string))\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    concatenation = ''\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    filtered = [s for s in strings if s.startswith(prefix)]\n    return filtered\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [string for string in strings if string[0] == prefix]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [word for word in strings if word.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n    \n    \ndef find_second_max(l: list):\n    \"\"\"Finds the second largest element in the list.\n    >>> find_second_max([5, 4, 3, 2, 1])\n    3\n    >>> find_second_max([5, 4, 3, 2, 1, 0])\n    4\n    >>> find_second_max([-2, -4, -10, -7, -1, -10])\n    -1\n    \"\"\"\n    return max(l) if len(l) > 1 else None\n    \n    \ndef get_multiplier(amount: int):\n    \"\"\"\n    >>> get_multiplier(25)\n    7\n    >>> get_multiplier(19)\n    7\n    >>> get_multiplier(4)\n    2\n    >>> get_multiplier(1)\n    1\n    \"\"\"\n    return amount // 2 + 1 if amount % 2 else amount // 2\n    \n    \ndef get_multiplier_square(amount: int):\n    \"\"\"\n    >>> get_multiplier_square(25)\n    125\n    >>> get_multiplier_square(19)\n    1025\n    >>> get_multiplier_square(4)\n    16\n    >>> get_multiplier_square(1)\n    1\n    \"\"\"\n    return get_multiplier(amount) ** 2\n    \n    \ndef get_multiplier_cube(amount: int):\n    \"\"\"\n    >>> get_multiplier_cube(25)\n    343\n    >>> get_multiplier_cube(19)\n    1043\n    >>> get_multiplier_cube(4)\n    8\n    >>> get_multiplier_cube(1)\n    1\n    \"\"\"\n    return get_multiplier(amount) ** 3\n    \n    \ndef get_multiplier_square_cube(amount: int):\n    \"\"\"\n    >>> get_multiplier_square_cube(25)\n    140625\n    >>> get_multiplier_square_cube(19)\n    102943\n    >>> get_multiplier_square_cube(4)\n    512\n    >>> get_multiplier_square_cube(1)\n    1\n    \"\"\"\n    return get_multiplier_square(amount) * get_multiplier_cube(amount)\n    \n    \ndef get_min_max_diff(l: list):\n    \"\"\"\n    >>> get_min_max_diff([1, 2, 3, 4])\n    (4, 1)\n    >>> get_min_max_diff([5, 4, 3, 2, 1])\n    (1, 5)\n    >>> get_min_max_diff([-1, 2, -4, 5, 6])\n    (2, -1)\n    \"\"\"\n    return min(l), max(l)\n    \n    \ndef get_min_max_diff_square(l: list):\n    \"\"\"\n    >>> get_min_max_diff_square([1, 2, 3, 4])\n    (16, 1)\n    >>> get_min_max_diff_square([5, 4, 3, 2, 1])\n    (1, 25)\n    >>> get_min_max_diff_square([-1, 2, -4, 5, 6])\n    (4, 1)\n    \"\"\"\n    min_ = min(l)\n    max_ = max(l)\n    return min_ ** 2, max_ ** 2\n    \n    \ndef get_min_max_diff_cube(l: list):\n    \"\"\"\n    >>> get_min_max_diff_cube([1, 2, 3, 4])\n    (8, 1)\n    >>> get_min_max_diff_cube([5, 4, 3, 2, 1])\n    (1, 343)\n    >>> get_min_max_diff_cube([-1, 2, -4, 5, 6])\n    (1, 512)\n    \"\"\"\n    min_ = min(l)\n    max_ = max(l)\n    return min_ ** 3, max_ ** 3\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [l[i] for i in range(len(l)) if l[i] > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [x for x in l if x >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [n for n in l if n >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [number for number in l if number >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        i = 2\n        while i < n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    if n % 3 == 0:\n        return False\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += w\n        w = 6 - w\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n==0 or n==1:\n        return False\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n    \n    \ndef num_digits(n):\n    \"\"\"Return the number of digits of n.\n    >>> num_digits(12345)\n    5\n    >>> num_digits(1234)\n    4\n    >>> num_digits(1)\n    1\n    \"\"\"\n    return len(str(n))\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert n >= 2\n    if n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i <= int(math.sqrt(n)) + 1:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n % 2 == 0 and n!= 2:\n        return False\n    elif n < 2:\n        return False\n    else:\n        counter = 3\n        while counter * counter <= n:\n            if n % counter == 0:\n                return False\n            counter += 2\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 2:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(xs) % 2:\n        raise ValueError('length of xs must be even')\n    def equation(x):\n        return poly(xs, x)\n    for x in range(-10, 10):\n        if equation(x) == 0:\n            return x\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    solution = []\n    # Find the coefficient of the largest power.\n    max_power = len(xs) - 1\n    # First, find largest coefficient, which can be also a non zero coefficient.\n    largest_coeff = max(xs)\n    # Check if all coefficients are zero.\n    if largest_coeff == 0:\n        return None\n    # If it is not, then we have some non zero coefficient.\n    # Find all solution by finding power where largest_coeff * x^power\n    # is zero.\n    for i in range(max_power):\n        if largest_coeff * math.pow(i + 1, max_power) == 0:\n            solution.append(i + 1)\n    # Return solution, which may contain duplicates.\n    return solution\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(xs) % 2!= 0:\n        raise TypeError(\"len(xs) must be even\")\n    xs = [0] * (len(xs) // 2) + xs\n    a, b = xs[-1], xs[-2]\n    xs = xs[:-2]\n    for x in xs:\n        if x == 0:\n            break\n        t = a / b\n        a, b = b, a - b * t\n    return round(t, 2)\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert len(xs) % 2 == 0\n    assert -1 < xs[0] < 1\n    for x in xs:\n        if x == 0:\n            continue\n        if x > 0:\n            return -1.0\n        else:\n            return 1.0\n    return 0.0\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(xs) % 2 == 1:\n        raise ValueError('Odd number of coefficients not allowed.')\n    if min(xs) > 0 or max(xs) < 0:\n        raise ValueError('Only coefficients in range [-1, 1] are allowed.')\n    for i in range(1, len(xs)):\n        if abs(xs[i]) > abs(xs[i-1]):\n            return i / (len(xs) - 1)\n    return xs[0]\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    max_non_zero = max(xs[1:-1:2])\n    if max_non_zero > 0:\n        raise ValueError('Polynomial must have even number of coefficients and largest non zero coefficient as it guarantees a solution.')\n    xs[0] = -xs[1]\n    xs[-1] = -xs[-2]\n    return poly(xs, -xs[-1] / xs[0]) / xs[0]\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if xs[0] == 0:\n        return 0.0\n    sgn = 1 if xs[0] > 0 else -1\n    if sum(xs) == 0:\n        return 0\n    for i in range(1, len(xs), 2):\n        if xs[i] == 0:\n            continue\n        sgn = sgn * xs[i] / abs(xs[i])\n        if sgn == 0:\n            return 0.0\n        x = 0.0\n        for j in range(i + 1):\n            x += abs(xs[j]) * math.pow(x, i - j) / math.factorial(i - j)\n        if sgn < 0:\n            x = -x\n        return x\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(xs) % 2:\n        raise ValueError(\"xs should have even number of coefficients\")\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(xs) % 2 == 1:\n        raise Exception(\"xs must have even number of coefficients\")\n    xs = sorted(xs, key=abs)\n    if xs[0] == 0:\n        return 0\n    for i in range(1, len(xs) // 2 + 1):\n        if (xs[0] - xs[i]) * (xs[0] - xs[-i]) < 0:\n            return xs[0] - xs[i]\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert len(xs) % 2 == 0, \"List xs have odd number of elements\"\n    assert max(xs)!= 0, \"One of the coefficients is zero\"\n    assert min(xs) >= 0, \"Negative coefficients are not allowed\"\n    assert not all(i == 0 for i in xs), \"No coefficient is zero\"\n    assert all(isinstance(i, (float, int)) for i in xs), \"All coefficients must be numbers\"\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l_copy = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy.append(l[i])\n    l_copy.sort()\n    l_copy.extend(l[:len(l)-len(l_copy)])\n    return l_copy\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #Write your code here\n    if l == []:\n        return []\n    elif len(l) == 1:\n        return l\n    else:\n        return [l[0]] + sort_third(l[1:])\n        #return [l[0]] + sort_third(l[1:]) + [l[0]]\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    new = [0 for i in l]\n    for i in range(len(l)):\n        if i%3!= 0:\n            new[i] = l[i]\n    for i in range(len(l)):\n        if i%3 == 0:\n            new[i] = l[i]\n    return new\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return l[::3] + sorted(l[1::3])\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(l, key = lambda x: x if x % 3!= 0 else (x // 3) if x // 3 < x % 3 else (x // 3) - 1)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l_new = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_new.append(l[i])\n    l_new = sorted(l_new)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_new.append(l[i])\n    return l_new\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l_prime = l[:]\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.insert(i, l[i])\n    return sorted(l_prime)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return_list = []\n    for item in l:\n        if item%3 == 0:\n            return_list.append(item)\n    for item in l:\n        if item%3!= 0:\n            return_list.append(item)\n    return_list.sort()\n    return return_list\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = []\n    for num in l:\n        if num % 3 == 0:\n            result.append(num)\n    result.sort()\n    return result\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l1 = []\n    l2 = []\n    l3 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l1.append(l[i])\n        elif i % 3 == 1:\n            l2.append(l[i])\n        else:\n            l3.append(l[i])\n    return l3 + sorted(l2) + sorted(l1)\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(set(l))"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return list(sorted(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l = sorted(l)\n    prev_elem = l[0]\n    result = [prev_elem]\n    for x in l[1:]:\n        if x!= prev_elem:\n            prev_elem = x\n            result.append(x)\n    return result\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # O(n log n) time complexity\n    l = sorted(l)\n    unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Your code here\n    l.sort()\n    #l.sort(key=int)\n    unique_l = []\n    for i in l:\n        if i not in unique_l:\n            unique_l.append(i)\n    return unique_l\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    max_element = l[0]\n    for x in l:\n        if x > max_element:\n            max_element = x\n    return max_element\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if l:\n        return max(l)\n    else:\n        return None\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    # Find the max element and remove it from the list\n    max_element = find_max(l)\n    l.remove(max_element)\n    return max_element\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        max_element = l[0]\n        for element in l:\n            if element > max_element:\n                max_element = element\n        return max_element\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if l == []:\n        return None\n    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max_elem = 0\n    for i in l:\n        if i > max_elem:\n            max_elem = i\n    return max_elem\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    max_el = l[0]\n    for element in l:\n        if max_el < element:\n            max_el = element\n    return max_el\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return max(l)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    num = 0\n    for i in range(1,n):\n        if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0:\n            num += 1\n    return num\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                result += 1\n    return result\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n        elif i % 7 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    res = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            res += 1\n    return res\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = 0\n    for i in range(1, n + 1):\n        if (i % 11 == 0) or (i % 13 == 0):\n            result += 1\n    return result\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            if \"7\" in str(i):\n                count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    counter = 0\n    for i in range(n):\n        if 7 in str(i) and (i % 11 == 0 or i % 13 == 0):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if \"7\" in str(i):\n                count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    digit_sevens = 0\n    for i in range(n):\n        if (i%11==0) or (i%13==0):\n            if str(i).find('7')!=-1:\n                digit_sevens+=1\n    return digit_sevens\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n < 7:\n        return 0\n    else:\n        return fizz_buzz(n - 1) + fizz_buzz(n - 1) + fizz_buzz(n - 1)\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    length = len(l)\n    odds = [l[i] for i in range(length) if i % 2 == 1]\n    evens = [l[i] for i in range(length) if i % 2 == 0]\n    evens.sort()\n    l[::2] = evens\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    odd_index = len(l) - 1\n    for i in range(len(l)):\n        if i % 2 == 1:\n            result.append(l[odd_index])\n            odd_index -= 1\n        else:\n            result.append(l[i])\n    result.reverse()\n    return result\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return_list = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            return_list.append(l[i])\n    return_list.sort()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            return_list.insert(i, l[i])\n    return return_list\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    even = []\n    odd = []\n    for index in range(len(l)):\n        if index % 2 == 1:\n            odd.append(l[index])\n        else:\n            even.append(l[index])\n    odd.sort()\n    even.sort()\n    l_even = even + odd\n    return l_even\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    evens = []\n    odds = []\n    for num in l:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    evens.sort()\n    return evens + odds\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    even_l = []\n    odd_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_l.append(l[i])\n        else:\n            odd_l.append(l[i])\n    sorted_l = sorted(odd_l) + sorted(even_l)\n    return sorted_l\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l_new = [None] * len(l)\n    for i in range(len(l)):\n        l_new[i] = l[i]\n        if i % 2 == 0:\n            l_new[i] = sorted(l_new[i])[0]\n    return l_new\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l_prime = [l[i] for i in range(len(l)) if i % 2 == 0]\n    return [l[i] for i in range(len(l)) if i % 2!= 0] + sorted(l_prime)\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    l1 = []\n    l2 = []\n    l3 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n        else:\n            l1.append(l[i])\n    l1.sort()\n    l2.sort()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l3.append(l2[i])\n        else:\n            l3.append(l1[i])\n    return l3\n    \ndef count_items(l: list, x: int):\n    \"\"\"This function takes a list l and a number x and returns how\n    many times x appears in the list.\n    >>> count_items([1, 2, 1, 2, 3], 1)\n    2\n    >>> count_items([1, 2, 1, 2, 3], 4)\n    0\n    >>> count_items([], 4)\n    0\n    \"\"\"\n    count = 0\n    for i in l:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    even_indicies = [index for index in range(len(l)) if index % 2 == 0]\n    for i in range(len(even_indicies)):\n        for j in range(i, len(even_indicies)):\n            if l[even_indicies[i]] > l[even_indicies[j]]:\n                temp = l[even_indicies[i]]\n                l[even_indicies[i]] = l[even_indicies[j]]\n                l[even_indicies[j]] = temp\n    return l\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # split encoded string to groups of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # iterate over each group.\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return decode_cyclic(encode_cyclic(s))\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # decode each group of three characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # swap each group to its original position in the original string.\n    groups = [group[-1] + group[:-1] for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # split string into groups of 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    x, y = 2, 3\n    count = 0\n    while count < n:\n        z = x + y\n        x = y\n        y = z\n        count += 1\n        if is_prime(z):\n            return z\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    current = 2\n    prev = 1\n    count = 3\n    while count < n:\n        current, prev = current + prev, current\n        if is_prime(current):\n            count += 1\n    return current\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    fib = lambda x: ((1 + 5**0.5)/2)**x - ((1 - 5**0.5)/2)**x\n    \n    for i in range(n):\n        fib_number = int(fib(i))\n        if is_prime(fib_number):\n            return fib_number\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = 0\n    a = 1\n    b = 1\n    while i < n-1:\n        a,b = b,a+b\n        if is_prime(a):\n            i += 1\n    return b\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return is_prime(fib(n))\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    fib = Fibonacci.fib(n)\n    fib_list = [int(i) for i in str(fib)]\n    if (len(fib_list) > 1):\n        fib_list.pop(0)\n        fib_list.pop(-1)\n    \n    while (len(fib_list) > 1):\n        while not (is_prime(int(''.join(map(str, fib_list))))):\n            fib_list.pop(-1)\n        else:\n            break\n    return int(''.join(map(str, fib_list)))\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    i, j = 2, 2\n    while i < n:\n        i, j = j, j+i\n    return i\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be positive integer\")\n    fibs = [1, 1]\n    while len(fibs) < n:\n        fibs.append(fibs[-1] + fibs[-2])\n    return filter_primes(fibs)[n-1]\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # I start with 2 since it's the first prime number\n    prime_list = [2]\n    for i in range(2, n):\n        fib_number = prime_list[i - 1] + prime_list[i - 2]\n        while True:\n            if is_prime(fib_number):\n                prime_list.append(fib_number)\n                break\n            else:\n                fib_number = fib_number + 1\n    return prime_list[n - 1]\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    fib, a, b = 0, 0, 1\n    while fib < n:\n        fib += 1\n        a, b = b, a + b\n        if is_prime(b):\n            if fib == n:\n                return b\n    return -1\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l = set(l)\n    for x in l:\n        if x not in l:\n            continue\n        for y in l:\n            if x + y not in l:\n                continue\n            for z in l:\n                if x + y + z == 0 and y < z:\n                    return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if l == []:\n        return False\n    for i in range(0, len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    seen_values = set()\n    for i in l:\n        if -i in seen_values:\n            return True\n        seen_values.add(i)\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l_copy = l[:]\n    for i in l_copy:\n        if l_copy.count(i) == 1:\n            l_copy.remove(i)\n    for i in l_copy:\n        if l_copy.count(i) == 1:\n            l_copy.remove(i)\n    for i in l_copy:\n        if l_copy.count(i) == 1:\n            l_copy.remove(i)\n    return len(l_copy) == 0\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(-num)\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(l) < 3:\n        return False\n    \n    for num in l:\n        if num < 0:\n            continue\n        \n        rest_of_list = l.copy()\n        rest_of_list.remove(num)\n        \n        if sum_to_zero(rest_of_list, num) == True:\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Check that list is not empty\n    if len(l) < 3:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i, a in enumerate(l):\n        for j, b in enumerate(l[i+1:]):\n            for k, c in enumerate(l[j+1:]):\n                if a+b+c==0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # TODO: Implement me!\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(0, len(l)):\n        for j in range(i, len(l)):\n            for k in range(j, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    m = n // 2\n    collisions = 0\n    while collisions < n:\n        cars = [True] * (n+1)\n        index = 0\n        while index < n:\n            cars[index] = True\n            cars[(index+1)*(-1)] = True\n            collisions += (cars[index] and cars[(index+1)*(-1)])\n            index += 1\n    return collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return math.factorial(2*n) // (math.factorial(n) * math.factorial(n))\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return n**2\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    assert n >= 0\n    from operator import add\n    from itertools import accumulate\n    from functools import reduce\n    from operator import mul\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # Initialize the number of collisions to zero.\n    collisions = 0\n    # Loop over the range of n from zero to n - 1.\n    for i in range(0, n - 1):\n        # Increment the number of collisions by two, assuming that\n        # the two cars have not collided.\n        collisions += 2\n        # Swap the current two cars so that the next time the left-to-right\n        # car hits the right-to-left car, it won't be counted as a collision.\n        # The number of collisions is always even.\n        j = (i + 1) % n\n        temp = cars[i]\n        cars[i] = cars[j]\n        cars[j] = temp\n    return collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    cars = [Car(n=n, pos=(n, i), velocity=(0, 1)) for i in range(n)]\n    for car in cars:\n        car.move()\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert n >= 1\n    return int(n * (n-1) / 2)\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Initialize\n    n_cars = 1\n    n_collisions = 0\n    while n_cars < n:\n        n_cars *= 2\n    # Collision number = number of collisions in last iteration, minus number of collisions in current iteration\n    for i in range(1, n_cars + 1):\n        if (i % 2)!= 0:\n            n_collisions += n_cars // 2 // i\n    return n_collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert(n > 0)\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if j!= i:\n                if abs(j - i) > n - 1:\n                    ans += 1\n                else:\n                    ans += 2\n    return ans // 2\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert(n >= 1)\n    return sum([(n - i) * ((i - 1) + 1) for i in range(1, n + 1)])\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [e + 1 for e in l]\n    \ndef count_null(n: int, l: list):\n    \"\"\"Return the number of occurrences of element 0 in list l\n    >>> count_null(5, [1, 2, 3, 0, 5])\n    2\n    >>> count_null(5, [1, 2, 3, 0, 5, 5])\n    2\n    \"\"\"\n    count = 0\n    for e in l:\n        if e == 0:\n            count += 1\n    return count\n    \ndef first_and_last(l: list):\n    \"\"\"Return the first and last element of list l\n    >>> first_and_last([1, 2, 3])\n    (1, 3)\n    \"\"\"\n    return (l[0], l[-1])\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l = l.copy()\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [e+1 for e in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    new_l = []\n    for num in l:\n        new_l.append(num+1)\n    return new_l\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l[0] += 1\n    for i in range(len(l)-1):\n        if l[i] == 10:\n            l[i] = 0\n            l[i+1] += 1\n    if l[-1] == 10:\n        l[-1] = 1\n        l.append(0)\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert len(l) > 0, \"list cannot be empty\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Time Complexity: O(n^2)\n    # Space Complexity: O(n)\n    if not l:\n        return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(l) == 1:\n        return False\n    else:\n        for i in l:\n            for j in l:\n                if i + j == 0 and i!= j:\n                    return True\n        return False\n    \ndef quadratic_roots(a,b,c):\n    \"\"\"\n    quadratic_roots takes three integers as input, a, b, and c, and returns\n    the two integers that form the real solution to the quadratic equation\n    ax^2 + bx + c = 0. If no real solution exists, it returns \"No Real Roots\"\n    >>> quadratic_roots(1,2,1)\n    (-0.5, 0.5)\n    >>> quadratic_roots(1,1,1)\n    (-1.0, 1.0)\n    >>> quadratic_roots(1,2,3)\n    'No Real Roots'\n    >>> quadratic_roots(-5,2,6)\n    (-1.0, 2.0)\n    >>> quadratic_roots(1,-2,1)\n    'No Real Roots'\n    \"\"\"\n    d = math.sqrt(b**2 - 4*a*c)\n    if d == 0:\n        return(-b / (2*a))\n    elif d >= 0:\n        return(((-b) + d) / (2*a), ((-b) - d) / (2*a))\n    else:\n        return 'No Real Roots'\n    \ndef hash_it(s):\n    \"\"\"\n    hash_it takes a string as an input and returns the hash value of the string.\n    If the string is not a string, it raises a TypeError.\n    >>> hash_it('python')\n    377204329849653965\n    >>> hash_it(1234)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    TypeError: must be str, not int\n    \"\"\"\n    if type(s)!= str:\n        raise TypeError('must be str, not'+ str(type(s)))\n    hv = 0\n    for c in s:\n        hv = hv + ord(c)\n    return hv % 100\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(l) < 2:\n        return False\n    if len(l) == 2:\n        return l[0] == l[1]\n    l = l.copy()\n    l.sort()\n    i = 0\n    j = 1\n    while j < len(l):\n        if l[i] + l[j] == 0:\n            return True\n        elif l[i] + l[j] < 0:\n            i += 1\n            j = i + 1\n        else:\n            j += 1\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    dict = {}\n    for i in l:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    for key, value in dict.items():\n        if value >= 2:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l1 = []\n    for i in l:\n        for j in l:\n            if i + j == 0 and i!= j:\n                if i in l1 or j in l1:\n                    continue\n                l1.append(i)\n                l1.append(j)\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] == -l[j]:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l_set = set(l)\n    l_set_len = len(l_set)\n    if l_set_len > 2:\n        l_set_len_sorted = sorted(l_set_len)\n        for i in range(l_set_len_sorted[0] + 1):\n            if -(l_set_len_sorted[i]) in l_set_len_sorted[i:]:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # pairs_sum_to_zero can be defined as follows, but it will not work\n    # pairs_sum_to_zero = lambda l : any([i in l for i in range(0, -len(l), -1) if l[i] == 0])\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l = sorted(l)\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(chr(ord('0') + x % base))\n        x //= base\n    return ''.join(digits[::-1])\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    s = ''\n    while x > 0:\n        s = str(x % base) + s\n        x = x // base\n    return s\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (int(x)).__format__(base)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if base == 10:\n        return str(x)\n    if x == 0:\n        return '0'\n    else:\n        result = ''\n        while x > 0:\n            result = str(x % base) + result\n            x = x // base\n        return result\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = ''\n    while x!= 0:\n        result = str(x%base) + result\n        x = int(x/base)\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if x == 0:\n        return 0\n    y = x\n    d = []\n    while y > 0:\n        y, rem = divmod(y, base)\n        d.append(rem)\n    d.reverse()\n    return ''.join([str(i) for i in d])"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    result = ''\n    while x:\n        rem = x % base\n        x = x // base\n        result = str(rem) + result\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    x = str(x)\n    if x[0]=='-':\n        return change_base(-int(x[1:]), base)\n    base_n = len(x)\n    result = ''\n    while base_n>0:\n        digit = int(x[-base_n])\n        digit = int(digit)\n        digit = int(digit)\n        digit = digit + base**(base_n-1)\n        result = str(digit) + result\n        base_n -= 1\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert x >= 0, 'x must be positive'\n    if x == 0:\n        return '0'\n    s = ''\n    while x > 0:\n        s = str(x % base) + s\n        x //= base\n    return s\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    base_str = ''\n    while x:\n        x, remainder = divmod(x, base)\n        base_str = str(remainder) + base_str\n    return base_str\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (h * a) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return (a*h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return round(0.5 * a * h, 1)\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return a * h * 0.5\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert 0 <= n <= 45\n    a, b = 0, 2\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        n = n - 1\n        return fib4(n) + fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 2:\n        return n\n    last_4 = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        new_num = last_4[1] + last_4[2] + last_4[3] + last_4[4]\n        last_4[1], last_4[2], last_4[3], last_4[4] = last_4[2], last_4[3], last_4[4], new_num\n    return new_num\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n1 = 0\n    n2 = 2\n    n3 = 0\n    for _ in range(n):\n        n3 = n1 + n2\n        n1, n2 = n2, n3\n    return n3\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    if n > 3:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        result = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        return result\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[(len(l) - 1) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    return (l[n // 2 - 1] + l[n // 2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    l.sort()\n    n = len(l)\n    if n < 1:\n        return None\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n    else:\n        return l[n // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n = len(l)\n    if n == 0:\n        raise ValueError('median() arg is an empty sequence')\n    elif n % 2 == 1:\n        return sorted(l)[n//2]\n    else:\n        return sum(sorted(l)[n//2-1:n//2+1])/2.0\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2-1] + l[n//2]) / 2.0\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(l) == 0:\n        raise Exception('Cannot calculate median of empty list')\n    l.sort()\n    mid = len(l) // 2\n    if len(l) % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    return l[mid]\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(l) % 2 == 1:\n        return sorted(l)[len(l) // 2]\n    return sum(sorted(l)[len(l) // 2 - 1 : len(l) // 2 + 1]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l.sort()\n    n = len(l)\n    if n == 0:\n        raise StatisticsError(\"no median for empty list\")\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return l[len(l) // 2] if len(l) % 2 else (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return float((l[(len(l)//2)-1] + l[len(l)//2])/2)\n    else:\n        return float(l[len(l)//2])\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # replace all special characters with empty string\n    replaced_text = text.replace(' ', '').replace('.', '').replace(',', '').replace('!', '').replace('?', '').replace('-', '')\n    \n    # check if reversed string is same as the original string\n    return replaced_text == replaced_text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return text[::] == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return is_palindrome_rec(text, 0, len(text) - 1)\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    text = text.replace(' ', '')\n    for i in range(len(text) // 2):\n        if text[i]!= text[-i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    i = 0\n    j = len(text) - 1\n    while i < j:\n        if text[i]!= text[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(text) < 2:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert 0 <= n < p\n    res = 1\n    while n > 0:\n        if n & 1 == 1:\n            res = (res * 2) % p\n        n >>= 1\n        res = (res * 2) % p\n    return res\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert 0 <= n < p, 'n is out of range'\n    # You will probably want to use the fact that:\n    #  pow(x, n, p) is 1 iff x^n is a non-residue modulo p.\n    # Use this to find the correct result!\n    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    acc = 1\n    for i in range(n):\n        acc = (acc * 2) % p\n    return acc\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n < 0:\n        n = -n\n        return modp(n, p)\n    elif n == 0:\n        return 1\n    else:\n        return (modp(n-1, p) * 2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #print(\"n:\", n, \"p:\", p)\n    if n < 0 or p <= 2:\n        raise ValueError(f\"n and p must be positive, got n = {n}, p = {p}\")\n    if p == 2:\n        return 1 if n == 0 else 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return p\n    elif n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n        return ((modp(n - 1, p) ** 2) * modp(2, p)) % p\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    vowels = 'aeiou'\n    result = ''\n    for letter in text:\n        if letter.lower() not in vowels:\n            result += letter\n    return result\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    vowels = ('a', 'e', 'i', 'o', 'u')\n    for v in vowels:\n        text = text.replace(v, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = 'aeiou'\n    \n    result = ''\n    \n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    \n    return resul"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return ''.join(filter(lambda x: x not in VOWELS, text))\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return ''.join([i for i in text if i not in 'aeiouAEIOU'])\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    vowels = 'aeiouAEIOU'\n    no_vowels = ''\n    for letter in text:\n        if letter not in vowels:\n            no_vowels += letter\n    return no_vowels\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([letter for letter in text if letter.lower() not in VOWELS])\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = \"\"\n    for char in text:\n        if char.lower() in \"aeiou\":\n            continue\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    vowels = \"AEIOUaeiou\"\n    newtext = ''\n    for i in text:\n        if i not in vowels:\n            newtext += i\n    return newtext\n"
    },
    {
        "number": 51,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowels = 'aeiouAEIOU'\n    return ''.join(l for l in text if l not in vowels)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for x in l:\n        if x > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return all(i < t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return all(n < t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    for number in l:\n        if number > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return all(n < t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for n in l:\n        if n >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return all(i < t for i in l)\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return x + y\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # concatenate all the characters into one string\n    s = s0 + s1\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    \n    d = {}\n    \n    for c0, c1 in zip(s0, s1):\n        if c0 in d:\n            if d[c0] == c1:\n                d[c0] += 1\n            else:\n                return False\n        else:\n            if c1 in d.values():\n                return False\n            else:\n                d[c0] = c1\n    \n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if s0 == s1:\n        return True\n    chars0 = Counter(s0)\n    chars1 = Counter(s1)\n    return chars0 == chars1\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    return len(set(s0) - set(s1)) == 0\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return all(i in s1 for i in s0)\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return set(s0).intersection(set(s1)) == set(s0)\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # I'm using the sorted function because in the real world, I expect that\n    # we always expect that the characters are in the same order.\n    return len(s0) == len(s1) and sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    return len(set(s0)) == len(set(s1)) == len(set(s0+s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    chars0 = [c for c in s0]\n    chars1 = [c for c in s1]\n    for c in chars0:\n        if c in chars1:\n            chars1.remove(c)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n in (1, 2):\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert n >= 0, 'n must be positive or zero'\n    return n if n <= 1 else fib(n-1) + fib(n-2)\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n = abs(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return fib(n-1) + fib(n-2)\n    \n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n < 1:\n        raise ValueError(\"Invalid argument\")\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # if n < 2:\n    #     return 1\n    # else:\n    #     return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert n > 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    stack = []\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    bracket_pairs = []\n    for i in range(len(brackets) - 1):\n        if brackets[i] == \"<\":\n            bracket_pairs.append(\">\")\n        elif brackets[i] == \">\":\n            bracket_pairs.append(\"<\")\n    if brackets[-1] == \"<\":\n        bracket_pairs.append(\">\")\n    elif brackets[-1] == \">\":\n        bracket_pairs.append(\"<\")\n    return bracket_pairs == list(brackets)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    bracket_stack = []\n    bracket_map = {\")\":\"(\", \"]\":\"[\", \"}\":\"{\"}\n    for bracket in brackets:\n        if bracket in bracket_map:\n            bracket_stack.append(bracket_map[bracket])\n        elif len(bracket_stack) == 0 or bracket_stack.pop()!= bracket:\n            return False\n    return len(bracket_stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #correct_bracketing(\"<><><><\")\n    #correct_bracketing(\"<><><><>\")\n    brackets_stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            brackets_stack.append(bracket)\n        elif bracket == \">\":\n            if len(brackets_stack) == 0:\n                return False\n            else:\n                brackets_stack.pop()\n    if len(brackets_stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    brackets_stack = []\n    for char in brackets:\n        if char == '<':\n            brackets_stack.append(char)\n        elif char == '>':\n            if len(brackets_stack) == 0:\n                return False\n            brackets_stack.pop()\n    if len(brackets_stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    open_stack = []\n    for char in brackets:\n        if char == \"<\":\n            open_stack.append(char)\n        else:\n            if open_stack:\n                open_stack.pop()\n            else:\n                return False\n    return not open_stack\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    open = 0\n    for c in brackets:\n        if c == '<':\n            open += 1\n        else:\n            open -= 1\n        if open < 0:\n            return False\n    return open == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    bracket_stack = []\n    for i, b in enumerate(brackets):\n        if b == \"<\":\n            bracket_stack.append(i)\n        elif b == \">\" and bracket_stack:\n            bracket_stack.pop()\n        else:\n            return False\n    return not bracket_stack\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    opening_brackets = [\"<\", \"[\", \"{\"]\n    closing_brackets = [\">\", \"]\", \"}\"]\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == \">\":\n            if bracket_stack and bracket_stack[-1] == \"<\":\n                bracket_stack.pop()\n            else:\n                return False\n        elif b == \"<\":\n            bracket_stack.append(b)\n        else:\n            return False\n    return not bracket_stack\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(l) < 2:\n        return True\n    elif l[1] < l[0]:\n        return l[1:] == sorted(l[1:], reverse=True)\n    elif l[1] > l[0]:\n        return l[1:] == sorted(l[1:])\n    else:\n        return monotonic(l[1:])\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or\n        all(l[i] >= l[i + 1] for i in range(len(l) - 1)))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(l) < 2:\n        return True\n    \n    d = None\n    for i in range(1, len(l)):\n        if d is None:\n            d = l[i] - l[i-1]\n            continue\n        if l[i] - l[i-1]!= d:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(l) <= 1:\n        return True\n    previous = l[0]\n    for value in l[1:]:\n        if previous > value:\n            return False\n        previous = value\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # By default, list is assumed to be monotonically increasing.\n    is_increasing = True\n    \n    for i in range(len(l)-1):\n        if is_increasing:\n            if l[i] >= l[i+1]:\n                is_increasing = False\n        else:\n            if l[i] <= l[i+1]:\n                is_increasing = True\n    \n    return is_increasing\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return (all(a <= b for a, b in zip(l, l[1:]))\n            or all(a >= b for a, b in zip(l, l[1:])))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return l == sorted(l) or l == sorted(l, reverse=True)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(l) < 3:\n        return True\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    inc = 0\n    dec = 0\n    for i in range(len(l)-1):\n        if l[i] < l[i+1]:\n            inc += 1\n        if l[i] > l[i+1]:\n            dec += 1\n    if inc == len(l)-1:\n        return True\n    if dec == len(l)-1:\n        return True\n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return l == sorted(l) or l == sorted(l, reverse=True)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for e in l1:\n        if e in l2:\n            result.append(e)\n    result.sort()\n    return result\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    l = list()\n    for elem in l1:\n        if elem in l2 and elem not in l:\n            l.append(elem)\n    l.sort()\n    return l\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    common = []\n    for x in l1:\n        for y in l2:\n            if x == y and x not in common:\n                common.append(x)\n    return sorted(common)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    common_elements = []\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    l = l1 + l2\n    return sorted(list(set([x for x in l if l.count(x) == 2])))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    temp = []\n    l1_set = set(l1)\n    l2_set = set(l2)\n    if len(l1_set) < len(l2_set):\n        for i in l1_set:\n            if i in l2_set:\n                temp.append(i)\n    else:\n        for i in l2_set:\n            if i in l1_set:\n                temp.append(i)\n    return sorted(temp)\n    \nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # l1.sort()\n    # l2.sort()\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    factor = n - 1\n    while factor > 0:\n        if n % factor == 0 and is_prime(factor):\n            return factor\n        factor -= 1\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if is_prime(n):\n        return n\n    elif n % 2 == 0:\n        return largest_prime_factor(n // 2)\n    else:\n        return largest_prime_factor(n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    i = 2\n    while i <= n ** 0.5:\n        if n % i == 0:\n            return n // i\n        i += 1\n    return 1\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n <= 1:\n        return None\n    for i in range(n, 2, -1):\n        if is_prime(i):\n            return i\n        else:\n            pass\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return n\n    else:\n        num = n\n        i = 2\n        while i <= num/2:\n            if num % i == 0:\n                num = num / i\n                i = 2\n            else:\n                i += 1\n        return int(num)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    "
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    largest_prime = 0\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            largest_prime = i\n    return largest_prime\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Remove the multiples of the prime factors of n\n    factors = prime_factors(n)\n    return max(factors)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    divisor = 2\n    while divisor < n:\n        if n % divisor == 0:\n            n = n/divisor\n            if n % divisor!= 0:\n                return n\n        else:\n            divisor += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # from math import sqrt\n    # while n % 2 == 0:\n    #     return 2\n    # i = 3\n    # while i <= sqrt(n):\n    #     while n % i == 0:\n    #         n //= i\n    #     i += 2\n    # return n\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(range(1, n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    if n < 1:\n        return 0\n    return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return n*(n+1)//2\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum_of_n = 0\n    for i in range(1, n + 1):\n        sum_of_n += i\n    return sum_of_n\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return n\n    return n + sum_to_n(n - 1)\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum(range(n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum_num = 0\n    for i in range(n):\n        sum_num += i\n    return sum_num\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n_sum = 0\n    for num in range(1, n + 1):\n        n_sum += num\n    return n_sum\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(1,n+1):\n        total = total + i\n    return total\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    brackets = [i for i in brackets if i in \"()\"]\n    stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    brackets_list = list(brackets)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(\"(\")\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if stack:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    stack = Stack()\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    opening = []\n    for b in brackets:\n        if b == '(':\n            opening.append(b)\n        else:\n            if opening:\n                opening.pop()\n            else:\n                return False\n    return not opening\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == '(':\n            bracket_stack.append(b)\n        else:\n            if len(bracket_stack) == 0:\n                return False\n            else:\n                bracket_stack.pop()\n    return len(bracket_stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert brackets[0] == \"(\" and brackets[-1] == \")\", \"Input string must start and end with an opening and closing bracket\"\n    \n    count = 0\n    for c in brackets:\n        if c == \"(\":\n            count += 1\n        elif c == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    \n    if count == 0:\n        return True\n    return False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    brackets_list = []\n    for br in brackets:\n        brackets_list.append(br)\n    brackets_list_copy = []\n    for br in brackets_list:\n        brackets_list_copy.append(br)\n    brackets_list_copy = list(brackets_list_copy)\n    brackets_list_copy.reverse()\n    brackets_list.reverse()\n    brackets_list_copy.pop(0)\n    brackets_list_copy.pop(0)\n    brackets_list.pop(0)\n    brackets_list.pop(0)\n    if brackets_list_copy == brackets_list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # \u63d0\u51fa\u3055\u308c\u305f\u3082\u306e\u304c\"(\"\u3067\u59cb\u307e\u308b\u3082\u306e\u3060\u3051\u3092\u53d6\u308a\u51fa\u3059\n    left_brackets = []\n    right_brackets = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            left_brackets.append(bracket)\n        elif bracket == \")\":\n            right_brackets.append(bracket)\n    # print(left_brackets)\n    # print(right_brackets)\n    # \"(\"\u304c\")\"\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u3089False\n    if len(left_brackets) > len(right_brackets):\n        return False\n    # \"(\"\u304c\"(\"\u4ee5\u4e0a\u306b\u306a\u3063\u305f\u3089False\n    if left_brackets.count(\"(\") < right_brackets.count(\")\"):\n        return False\n    return True\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    deriv = [0]\n    n = len(xs)\n    for i in range(1, n):\n        deriv.append(i * xs[i])\n    return deriv\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    res = [0] * (len(xs) - 1)\n    for i in range(len(xs) - 1):\n        res[i] = xs[i + 1] * (i + 1)\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # res: list\n    res = []\n    for x in range(1, len(xs)):\n        res.append(x * xs[x])\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [i * xs[idx + 1] for idx, i in enumerate(xs[1:])]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return [x * (len(xs) - 1) for x in xs]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = []\n    for i in range(1, len(xs)):\n        res.append(xs[i] * i)\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return [i * x for i, x in enumerate(xs[1:], start=1) if x]\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(xs) < 1:\n        return []\n    derivative = [0] * len(xs)\n    derivative[0] = xs[0]\n    for i in range(1, len(xs)):\n        derivative[i] = xs[i] * i\n    return derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    l = len(xs)\n    result = [0] * (l)\n    for i in range(l):\n        if i == 0:\n            continue\n        result[i - 1] = i * xs[i]\n    return result\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return fib(n - 1) + fib(n - 2) + fib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    assert n >= 0\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return fibfib_recursive(n)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    fib1, fib2 = 0, 1\n    for i in range(2, n+1):\n        fib1, fib2 = fib2, fib1 + fib2\n    return fib2\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    counter = 0\n    for char in s:\n        if char in VOWELS:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    i = 0\n    for c in s:\n        if c in 'aeiouyAEIOUY':\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    vowels = \"aeiouy\"\n    vowel_count = 0\n    for i in s:\n        if i in vowels:\n            vowel_count += 1\n    for i in range(0, len(s)-1):\n        if s[i] in vowels and s[i+1] in vowels:\n            vowel_count -= 1\n    return vowel_count + 1 if len(s)!= 0 else vowel_count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    vowel_count = 0\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' or s[i] == 'y' and i < len(s)-1:\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for char in s:\n        if char in ('a', 'e', 'i', 'o', 'u'):\n            count += 1\n    if s[-1] == 'y':\n        count -= 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # YOUR CODE GOES HERE\n    vowels = ['a','e','i','o','u']\n    counter = 0\n    for i in s:\n        if i in vowels:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # A right-shift (or just a multiplication by 10^shift) is equivalent to a left-shift of n-shift digits.\n    # if shift > number of digits, then just return digits reversed\n    n = len(str(abs(x)))\n    if shift > n:\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + ''.join(['0'] * shift) + str(x)[:n - shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    x = str(x)\n    return x[-shift:] + x[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert isinstance(x, int)\n    assert isinstance(shift, int)\n    \n    shift %= len(str(x))\n    x = str(x)\n    return x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[-shift:]+s[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    n = len(str(x))\n    # assert shift <= n\n    return \"\".join(str(x)[n-shift:] + str(x)[:n-shift])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s = str(x)\n    if shift >= len(s):\n        return int(s[::-1])\n    return int(s[-shift:] + s[:-shift])"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = str(x)[-shift:] + str(x)[:-shift]\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # num = str(x)\n    # print(num)\n    # print(list(num))\n    return int(str(x)[shift:] + str(x)[:shift])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if shift <= 0:\n        return x\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    return int(str(x)[len(str(x)) - shift:] + str(x)[:len(str(x)) - shift])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for char in s:\n        if char.isalpha():\n            count += ord(char)\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum(ord(c.upper()) for c in s)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    retval = 0\n    for c in s:\n        if ord(c) >= ord('A') and ord(c) <= ord('Z'):\n            retval += ord(c) - ord('A') + 1\n    return retval\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return ord(s[0])\n    elif s[0].isupper():\n        return ord(s[0]) + digitSum(s[1:])\n    else:\n        return digitSum(s[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    chars = string.ascii_uppercase\n    result = 0\n    for c in s:\n        if c in chars:\n            result += ord(c)\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s = s.upper()\n    result = 0\n    for i in s:\n        result += ord(i)\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sum=0\n    for i in s:\n        if i.isupper():\n            sum+=ord(i)\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    nums = s.split()\n    \n    if nums[0] == '0' or nums[1] == '0':\n        return 0\n    elif int(nums[0]) < int(nums[1]):\n        return 0\n    else:\n        return int(nums[0]) - int(nums[1])\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    fruits = s.split()\n    orange_total = int(fruits[0])\n    apple_total = int(fruits[2])\n    return orange_total - apple_total - n + int(fruits[4])\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    fruits = s.split(\" \")\n    print(fruits)\n    number = fruits[0]\n    print(number)\n    if int(number) > 0:\n        count = n - int(fruits[0])\n    else:\n        count = int(fruits[0]) + n\n    print(count)\n    mango = fruits[1]\n    print(mango)\n    return int(mango)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s1 = s.split()\n    s1[0] = int(s1[0])\n    s1[1] = int(s1[1])\n    if n == 0 and s1[0] == 0 and s1[1] == 0:\n        return 0\n    elif s1[0] == 0 or s1[1] == 0:\n        return 0\n    else:\n        return n - (s1[0] + s1[1])\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    lst=s.split(\" \")\n    if(lst[0]==\"0\"):\n        return 0\n    else:\n        return n - int(lst[0]) - int(lst[1])"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    apple_value = s.split(\" and \")[0]\n    orange_value = s.split(\" and \")[1]\n    return(n-int(apple_value)-int(orange_value))\n    \ndef find_the_missing_letter(chars):\n    \"\"\"\n    Given a string chars that consists of only letters and spaces, \n    return the missing letter in it. You can assume that there is \n    at least one letter missing in chars.\n    input = \"abcdefghijklmnopqrstuvwxyz \"\n    output = \"z\"\n    input = \"aa \"\n    output = \"a\"\n    input = \"az\"\n    output = \"b\"\n    \"\"\"\n    first = chars.split(\" \")[0]\n    last = chars.split(\" \")[-1]\n    if (first[0] < last[0]):\n        missing = last[0]\n        missing_str = missing*(len(first))\n        return(missing_str[1:])\n    else:\n        missing = first[0]\n        missing_str = missing*(len(last))\n        return(missing_str[1:])\n    \ndef length_of_longest_substring(str, k):\n    \"\"\"\n    Given a string and a number k, find the length of the longest substring that \n    contains at most k distinct characters.\n    input = \"abcba\", k = 2\n    output = 3\n    input = \"abcba\", k = 1\n    output = 1\n    input = \"abcdefghijklmnopqrstuvwxyz\", k = 25\n    output = 21\n    \"\"\"\n    new_str = list(str)\n    new_str.sort()\n    count = 0\n    for i in range(len(new_str)):\n        if count<k:\n            count+=1\n        else:\n            break\n    return(len(new_str[i:]))\n    \ndef distinct_substring_count(s):\n    \"\"\"\n    Given a string s, return the number of non-empty substrings that have \n    distinct characters. \n    input = \"abc\"\n    output = 3\n    input = \"aba\"\n    output = 6\n    input = \"abcabcabc\"\n    output = 10\n    input = \"abcabc\"\n    output = 7\n    \"\"\"\n    new_str = list(s)\n    new_str.sort()\n    count = 1\n    for i in range(len(new_str)):\n        if (i+1 < len(new_str) and new_str[i]==new_str[i+1]):\n            count+=1\n        else:\n            break\n    return(count)\n    \ndef find_letter_case_string_permutations(str):\n    \"\"\"\n    Given a string, find all the possible permutations of it.\n    input = \"abc\"\n    output = [abc,acb,bac,bca,cab,cba]\n    input = \"a1b2\"\n    output = [a1b2, a1B2, A1b2, A1B2]\n    \"\"\"\n    list_of_strings = []\n    if (len(str) == 1):\n        return(list_of_strings)\n    else:\n        new_str = list(str)\n        for i in range(len(new_str)):\n            if new_str[i].isalpha():\n                list_of_strings.append(new_str[:i]+new_str[i].swapcase()+new_str[i+1:])\n        return(list_of_strings)\n    \ndef generate_parenthesis(n):\n    \"\"\"\n    Given n pairs of parentheses, write a function to generate all \n    valid combinations of well-formed parentheses.\n    input = 1\n    output = [()]\n    input = 2\n    output = [\"()()\", \"(())\"]\n    input = 3\n    output = [())), ())(), ()(), ((()), ())(), (()()), ()(()), ()()(, ((()))]\n    \"\"\"\n    list_of_strings = []\n    list_of_strings.append(\"\")\n    for i in range(2*n):\n        new_string = list_of_strings[0]\n        for j in range(len(list_of_strings))"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    apples = int(s.split()[0])\n    oranges = int(s.split()[1])\n    fruits = apples + oranges\n    return fruits - n\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return n-int(s.split()[0])-int(s.split()[1])\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return n - (s.count(\"mango\") + s.count(\"orange\") + s.count(\"apples\"))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    fruits = s.split()\n    orange = int(fruits[0])\n    mango = int(fruits[2])\n    return n - (orange + mango)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Time: O(n)\n    # Space: O(1)\n    evens = []\n    for node in arr:\n        if node % 2 == 0:\n            evens.append(node)\n    \n    if len(evens) == 0:\n        return []\n    \n    min_value = min(evens)\n    index = evens.index(min_value)\n    return [min_value, index]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    evens = list(filter(lambda x: x%2==0, arr))\n    if len(evens) == 0:\n        return []\n    smallest = evens[0]\n    idx = 0\n    for i in range(1, len(evens)):\n        if evens[i] < smallest:\n            smallest = evens[i]\n            idx = i\n    return [smallest, idx]"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    values = []\n    for node in arr:\n        if node % 2 == 0:\n            values.append(node)\n    if values:\n        return [min(values), arr.index(min(values))]\n    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    # -------------------------------------------------\n    \n    if not arr: return []\n    \n    # Set minimum node to the first value and the index of the minimum node to 0\n    min_node = arr[0]\n    min_index = 0\n    \n    # Loop through the array to find the smallest even value, and the index of the smallest even value\n    for i in range(1, len(arr)):\n        if arr[i] < min_node and arr[i] % 2 == 0:\n            min_node = arr[i]\n            min_index = i\n    \n    # Return a list containing the smallest even value and its index\n    return [min_node, min_index]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    evens = [num for num in arr if num % 2 == 0]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    even = []\n    for i, x in enumerate(arr):\n        if x % 2 == 0:\n            even.append([x, i])\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    odd_numbers = [n for n in arr if n % 2!= 0]\n    min_odd_value = min(odd_numbers) if odd_numbers else None\n    if min_odd_value is None:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    \n    if len(arr) == 0:\n        return result\n    \n    smallest_even_value = 0\n    \n    for element in arr:\n        if element % 2 == 0 and element < smallest_even_value:\n            smallest_even_value = element\n    \n    for index, element in enumerate(arr):\n        if element == smallest_even_value:\n            result.append([element, index])\n    \n    if len(result) == 1:\n        return result[0]\n    elif len(result) == 0:\n        return result\n    else:\n        result.sort()\n        return result[0]\n    \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    arr = sorted(arr)\n    if not arr or max(arr) < 0:\n        return []\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            return [num, i]\n    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # return -1 if there are no numbers greater than 0 in the list\n    if not lst:\n        return -1\n    # iterate through the list to find a number with a frequency greater than itself\n    greater = [x for x in lst if x > 0]\n    greater.sort()\n    greater = greater[::-1]\n    # return -1 if no number has a frequency greater than itself\n    if not greater:\n        return -1\n    for n in greater:\n        if lst.count(n) >= n:\n            return n\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    greatest = 0\n    for i in lst:\n        if lst.count(i) > i:\n            greatest = i\n    return greatest if greatest > 0 else -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code here\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            lst.pop(i)\n    for i in lst:\n        if i > 0:\n            return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return None\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    freq = {x:0 for x in lst}\n    for i in lst:\n        freq[i] += 1\n    for i in freq.keys():\n        if i == freq[i]:\n            return i\n    return -"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    if len(lst) == 1:\n        return lst[0]\n    \n    if lst[0] < 1:\n        return -1\n    \n    return max(lst)\n    "
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Your code here\n    freq = {}\n    freq_greater_than = {}\n    result = []\n    for x in lst:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    for x in lst:\n        if freq_greater_than[x] >= x:\n            freq_greater_than[x] = freq_greater_than[x] + 1\n        else:\n            freq_greater_than[x] = x + 1\n    for x in freq:\n        if x in freq_greater_than:\n            if freq[x] > freq_greater_than[x]:\n                result.append(x)\n    if len(result) == 0:\n        return -1\n    else:\n        return sorted(result, reverse = True)[0]\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    frequency_dict = dict()\n    for num in lst:\n        if num not in frequency_dict:\n            frequency_dict[num] = 1\n        else:\n            frequency_dict[num] += 1\n    greatest_value = -1\n    greatest_value_frequency = -1\n    for key in frequency_dict.keys():\n        if frequency_dict[key] >= key and frequency_dict[key] > greatest_value_frequency:\n            greatest_value = key\n            greatest_value_frequency = frequency_dict[key]\n    return greatest_value if greatest_value_frequency >= greatest_value else -1"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    dict1 = {}\n    for i in range(len(lst)):\n        if lst[i] in dict1:\n            dict1[lst[i]] += 1\n        else:\n            dict1[lst[i]] = 1\n    for i in dict1:\n        if dict1[i] >= i:\n            return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    nums = dict()\n    for i in lst:\n        if i in nums:\n            nums[i] += 1\n        else:\n            nums[i] = 1\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(len(lst)):\n        if len(lst) % 2 == 0:\n            result.append(min(lst))\n            lst = [num for num in lst if num > min(lst)]\n        else:\n            result.append(max(lst))\n            lst = [num for num in lst if num < max(lst)]\n    return result\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not lst:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # keep track of the sorted list, and current position in sorted list\n    sorted_list = []\n    # keep track of the unsorted list\n    unsorted_list = lst[:]\n    # start by placing the minimum value in the sorted list\n    sorted_list.append(min(lst))\n    # remove the minimum value from the unsorted list\n    unsorted_list.remove(min(lst))\n    # loop until there are no more values in the unsorted list\n    while unsorted_list:\n        # find the maximum value in the unsorted list\n        max_value = max(unsorted_list)\n        # place it in the sorted list\n        sorted_list.append(max_value)\n        # remove the max value from the unsorted list\n        unsorted_list.remove(max_value)\n        # now place the minimum value from the unsorted list in the sorted list\n        sorted_list.append(min(unsorted_list))\n        # remove the minimum value from the unsorted list\n        unsorted_list.remove(min(unsorted_list))\n    # return the sorted list\n    return sorted_list\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return []"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    res = []\n    lst.sort()\n    \n    while len(lst) > 0:\n        res.append(min(lst))\n        lst.remove(min(lst))\n        res.append(max(lst))\n        lst.remove(max(lst))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sorted_lst = sorted(lst)\n    sorted_lst.reverse()\n    return sorted_lst\n    \n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    odds = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            odds.append(min(lst))\n            lst.remove(min(lst))\n        else:\n            odds.append(max(lst))\n            lst.remove(max(lst))\n    return odds + lst\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    if not lst:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sort = []\n    sorted_list = []\n    copy_lst = lst.copy()\n    while len(copy_lst) > 0:\n        sort.append(min(copy_lst))\n        copy_lst.remove(min(copy_lst))\n        if len(copy_lst) > 0:\n            sort.append(max(copy_lst))\n            copy_lst.remove(max(copy_lst))\n        if len(copy_lst) == 0:\n            sort.append(min(copy_lst))\n    sorted_list = [i for i in range(len(sort))]\n    for i in range(len(sort)):\n        sorted_list[sort[i]] = sort[i]\n    return sorted_list\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    while lst:\n        # find min and max values in lst\n        min_val = min(lst)\n        max_val = max(lst)\n        # pop min and max values from lst\n        lst.remove(min_val)\n        lst.remove(max_val)\n        result.append(min_val)\n        result.append(max_val)\n    return result\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if (a + b) > c and (a + c) > b and (b + c) > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s-a) * (s-b) * (s-c)), 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a + b > c:\n        if b + c > a:\n            if c + a > b:\n                if a + b + c > 0:\n                    return round(float(a * b / 2), 2)\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not all(isinstance(arg, (int, float)) for arg in (a, b, c)):\n        raise TypeError('All three sides must be a number')\n    if not all(arg > 0 for arg in (a, b, c)):\n        raise ValueError('All sides must be positive')\n    if a + b > c and a + c > b and b + c > a:\n        area = round((a + b + c) * 0.5, 2)\n        return area\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c)/(4 * math.sqrt(2)), 2)\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    side_1 = a\n    side_2 = b\n    side_3 = c\n    total_sides = side_1 + side_2 + side_3\n    total_sides_list = [side_1, side_2, side_3]\n    # Convert to float, remove non-triangle values\n    for item in total_sides_list:\n        if isinstance(item, float):\n            total_sides = total_sides - item\n        else:\n            total_sides = total_sides - item\n    if total_sides > 0:\n        return round(total_sides * 0.5, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if a+b > c and b+c > a and a+c > b:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return area\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # Assume the three sides can form a triangle\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area of the triangle\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # TODO write triangle_area function\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return round(0.5 * abs(a * b - a * c + b * c), 2) if a + b > c and a + c > b and b + c > a else -1\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def is_palindrome(string):\n        return string == string[::-1]\n    return is_palindrome(q) and sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # your code here\n    lst = q[:]\n    lst.sort(reverse=True)\n    return sum(lst) <= w and is_list_palindrome(q)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # your code here\n    listt=list(q)\n    listt.sort()\n    a=listt\n    y=0\n    for i in a:\n        y=y+i\n    if a==a[::-1] and y<=w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return q[::-1]==q and sum(q)<=w\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    return True if (sum(q) <= w) and (is_palindromic(q)) else False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    list = []\n    pal = []\n    max_n = 0\n    if len(q) == 1 and q[0] <= w:\n        return True\n    for i in q:\n        list.append(i)\n    for i in range(0, len(list)):\n        list[i] = str(list[i])\n    for i in range(0, len(list)):\n        pal.append(list[i])\n    for i in range(len(list)-1, -1, -1):\n        pal.append(list[i])\n    pal = ''.join(pal)\n    if pal == pal[::-1] and sum(list) <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def is_palindromic(arr):\n        i = 0\n        j = len(arr) - 1\n        while i < j:\n            if arr[i]!= arr[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(arr) < 2:\n        return 0\n    palin_ind = -1\n    for i, el in enumerate(arr):\n        if is_palin(arr[:i + 1]):\n            palin_ind = i\n            break\n    if palin_ind == -1:\n        return 0\n    arr = arr[palin_ind + 1:] + arr[:palin_ind + 1]\n    counter = 0\n    for i, el in enumerate(arr):\n        counter += abs(el - arr[len(arr) - 1 - i])\n    return counter"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    min_change = len(arr)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j] or arr[i] == arr[j] + 2 or arr[i] == arr[j] - 2:\n                min_change = min(min_change, j-i)\n    return min_change\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if arr == arr[::-1]:\n        return 0\n    \n    arr = ''.join(list(map(str, arr)))\n    pal_set = set()\n    \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            a = arr[:i] + arr[i:j][::-1] + arr[j:]\n            if a not in pal_set:\n                pal_set.add(a)\n    return len(arr) - len(pal_set)\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    def is_palindrome(nums):\n        return all(nums[i] == nums[~i] for i in range(len(nums) // 2))\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(arr) == 1:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        dp[i][i] = 0\n        dp[0][i] = 0\n        dp[i][0] = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(i, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1\n    return dp[0][n - 1]\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    arr.sort()\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # We could count the number of elements that don't match their complement, but\n    # there's probably a better way.\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    num1 = 0\n    num2 = 0\n    if len(lst1) == len(lst2):\n        return lst1\n    for i in lst1:\n        num1 += len(i)\n    for i in lst2:\n        num2 += len(i)\n    if num1 > num2:\n        return lst1\n    else:\n        return lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [lst1[i] for i in range(len(lst1)) if len(\"\".join(lst1[i])) <= len(\"\".join(lst2[i]))]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    elif len(lst1) == len(lst2):\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = set(lst1) | set(lst2)\n    return [i for i in s if len(i) < max([len(i) for i in s])]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    len1 = []\n    len2 = []\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(lst1) > len(lst2):\n        return lst2\n    elif len(lst1) < len(lst2):\n        return lst1\n    return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return [lst for lst in lst2 if len(\"\".join(lst))<len(\"\".join(lst1))]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    num1 = 0\n    for char in lst1:\n        num1 += len(char)\n    num2 = 0\n    for char in lst2:\n        num2 += len(char)\n    if num1 < num2:\n        return lst1\n    elif num1 > num2:\n        return lst2\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return [elem for elem in lst1 if len(elem) < len(lst2[0])]\n    else:\n        return [elem for elem in lst2 if len(elem) < len(lst1[0])]\n    \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    elif len(lst1) == len(lst2):\n        return lst1\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for i in range(3,int(a**0.5)+1,2):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    i = 2\n    while i < a:\n        if a % i!= 0:\n            i += 1\n            continue\n        else:\n            a = a/i\n            i += 1\n            continue\n    if a == 1:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    p = 2\n    while p <= a/2:\n        q = 2\n        while q <= a/2:\n            if a % p == 0 and a % q == 0 and p*q == a:\n                return True\n            q += 1\n        p += 1\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    counter = 0\n    for i in range(2, a):\n        if is_prime(i):\n            counter += 1\n            if counter == 2:\n                return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    divisors_list = []\n    for i in range(2, int(a/2)):\n        if a % i == 0:\n            divisors_list.append(i)\n    if len(divisors_list) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    primes = [2,3,5,7,11,13,17,19,23,29]\n    for prime in primes:\n        if a % prime == 0:\n            return True\n            \n    return False\n    \n    \nprint(is_multiply_prime(30))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    for i in range(2, a):\n        if a % i == 0:\n            if is_prime(i) and is_prime(int(a/i)):\n                return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if a < 100:\n        for i in range(2,a):\n            if a % i == 0:\n                return False\n        for i in range(3,a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your code goes here\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if x == 1:\n        return True\n    elif x < 1 or n < 1:\n        return False\n    else:\n        if x % n == 0:\n            return True\n        return is_simple_power(x, n-1)\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return x == n**int(log(x, n))\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    #if x%n==0:\n    #    return True\n    #else:\n    #    return False\n    return n**int(x)==x\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return x % n == 0\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    while n > 1:\n        if n**int == x:\n            return True\n        elif n**int < x:\n            return False\n        n -= 1\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n < 1:\n        return False\n    elif x == n:\n        return True\n    else:\n        return is_simple_power(x, n/2) if n % 2 == 0 else False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if x == n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x/n, n)\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return (x % n) == 0\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return x == n**int(n)"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if a < 0:\n        return True\n    if a ** (1/3) % 1 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a ** (1/3) % 1 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if pow(a,1/3) == int(pow(a,1/3)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    x = int(a**(1/3))\n    if x**3 == a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # if a>=0:\n    #     if int(a**(1/3))**3 == a:\n    #         return True\n    #     else:\n    #         return False\n    # else:\n    #     return True\n    return (int(a**(1/3))**3 == a)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return a > 0 and (a**0.5) % 1 == 0\n    \ndef iscube2(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a > 0 and (a**(1/3)) % 1 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a>0:\n        if pow(a,1/3)==int(pow(a,1/3)):\n            return True\n        else:\n            return False\n    else:\n        if pow(-a,1/3)==int(pow(a,1/3)):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    c = 0\n    while a > 0:\n        c += 1\n        a = a / 3\n        if a == int(a):\n            break\n    return True if c == 1 else False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if (a>0):\n        if (a**(1/3) == int(a**(1/3))):\n            return True\n        else:\n            return False\n    elif (a<0):\n        a = -a\n        if (a**(1/3) == int(a**(1/3))):\n            return True\n        else:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    hex_symbols = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    num = num.upper()\n    count = 0\n    for symbol in hex_symbols:\n        if num.count(symbol) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # TODO: your code here\n    return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sum([num.count(x) for x in \"0123456789ABCDEF\"])\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if num == \"\":\n        return 0\n    # create dictionary of primes\n    dict_of_primes = create_dictionary_of_primes()\n    # create dictionary of primes count\n    dict_of_primes_count = create_dictionary_of_primes_count()\n    # remove unwanted characters\n    num = num.replace('A', '').replace('B', '').replace('C', '').replace('D', '').replace('E', '').replace('F', '')\n    # count all primes in the number\n    for char in num:\n        if char in dict_of_primes:\n            dict_of_primes_count[char] += 1\n    # count all primes in the number\n    primes_count = 0\n    for prime in dict_of_primes:\n        if prime in dict_of_primes_count:\n            primes_count += dict_of_primes_count[prime]\n    return primes_count\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    num = [int(i) for i in num]\n    num.sort()\n    if num[0] in [2, 3, 5, 7]:\n        return 1\n    elif num[0] == 11:\n        return 2\n    return 0\n    \ndef prime_digits(num):\n    \"\"\"Receives a positive integer num, calculates the number of its \n    prime digits and returns it. A prime digit is a number which is \n    prime and its decimal representation contains only prime digits.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    Note: you may assume the input is always valid.\n    Examples:\n    For num = 12121 the output should be 2.\n    For num = 221323 the output should be 1.\n    For num = 222121 the output should be 3.\n    For num = 22333 the output should be 2.\n    For num = 121314141 the output should be 1.\n    \"\"\"\n    num = [int(i) for i in str(num)]\n    num.sort()\n    if len(num) == 1:\n        return 1\n    for i in range(len(num)):\n        if num[i] == 2 or num[i] == 3 or num[i] == 5 or num[i] == 7:\n            if i!= 0:\n                if num[i] % num[i-1]!= 0:\n                    return len(num) - i\n            else:\n                return len(num)\n    return 0\n    \n    \n    \ndef rand_prime(num):\n    \"\"\"Receives a positive integer num, finds a random prime number and returns it.\n    Note: you may assume the input is always valid.\n    Examples:\n    For num = 10 the output should be 7.\n    For num = 20 the output should be 11.\n    For num = 50 the output should be 41.\n    For num = 75 the output should be 71.\n    For num = 100 the output should be 101.\n    \"\"\"\n    num = [int(i) for i in str(num)]\n    num.sort()\n    if len(num) == 1:\n        return num[0]\n    for i in range(len(num)):\n        if num[i] == 2 or num[i] == 3 or num[i] == 5 or num[i] == 7:\n            if i!= 0:\n                if num[i] % num[i-1]!= 0:\n                    return num[i]\n            else:\n                return num[i]\n    return num[0]\n    \ndef diff_ways_to_compute(num):\n    \"\"\"Given a string representing the digits of a number, compute the \n    number and return it as an integer. The digits are stored as a \n    string, in left to right order, and each digit is stored as a char.\n    Diff ways to compute num:\n    The number can be computed by:\n    num = '2 * 3 + 1', num = '2 * 3 - 1', num = '2 + 3 * 1', num = '2 - 3 * 1', num = '2 * (3 + 1)', num = '(2 * 3) + 1', num = '2 + 3 * 1', num = '(2 - 3) * 1'\n    \"\"\"\n    #O(n)\n    if num == 0:\n        return 0\n    l = []\n    for i in range(len(num)):\n        if num[i] in \"*+-\":\n            if i!= 0:\n                if num[i] == \"*\":\n                    l.append(l[-1] * int(num[i+1]))\n                elif num[i] == \"+\":\n                    l.append(l[-1] + int(num[i+1]))\n                else:\n                    l.append(l[-1] - int(num[i+1]))\n            else:\n                if num[i] == \"*\":\n                    l.append(int(num[i+1]))\n                elif num[i] == \"+\":\n                    l.append(int(num[i+1]))\n                else:\n                    l.append(-int(num[i+1]))\n    return l[0]\n    \n    \n    \ndef how_sum(target, nums):\n    \"\"\"You are given a target number and a list of numbers. \n    You have t"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    res = 0\n    if not num:\n        return res\n    for i in num:\n        if i in \"BCD\":\n            res += 1\n    return res\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    c = 0\n    for i in range(len(num)):\n        for j in range(len(primes)):\n            if num[i] == chr(primes[j]):\n                c += 1\n                break\n    return c\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    numbers = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15}\n    count = 0\n    for i in num:\n        if numbers.get(i)!= None and is_prime(numbers.get(i)):\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(num)):\n        if num[i] == \"2\":\n            count += 1\n        if num[i] == \"3\":\n            count += 1\n        if num[i] == \"5\":\n            count += 1\n        if num[i] == \"7\":\n            count += 1\n        if num[i] == \"B\":\n            count += 1\n        if num[i] == \"D\":\n            count += 1\n    return count\n    \nprint(hex_key(\"2020\"))\nprint(hex_key(\"AB\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return f\"db{decimal:b}db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    decimal = int(decimal)\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    binary = 'db' + binary + 'db'\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return \"db\" + str(bin(decimal).replace(\"0b\", \"\")) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"db\" + str(bin(decimal)[2:]) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return f\"db{decimal:b}db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return 'db' + bin(decimal)[2:].zfill(8) + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 'db' + bin(decimal)[2:] + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"db\" + bin(decimal)[2:].zfill(8) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    if len(s) < 3:\n        return False\n    \n    last_occur = {}\n    for i in range(len(s)):\n        last_occur[s[i]] = i\n    \n    while len(s) > 2:\n        s = \"\".join([x for x in s if x!= s[1]])\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 1):\n            if last_occur[s[i]] == last_occur[s[i+1]]:\n                return False\n            last_occur[s[i]] = i\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(s) >= 3 and is_unique(s)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len(s) >= 3 and len(set(s)) == len(s) // 3\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = set(s)\n    while len(s) < 3:\n        s.add(s[0])\n    return len(s) == 3\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if len(s) < 3:\n        return False\n    \n    if len(set(s)) < 3:\n        return False\n    \n    for i in range(len(s)):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n        elif i == len(s) - 3:\n            return True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(s) < 3:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # TODO: Check if the string has at least 3 characters\n    # TODO: Check if all 3 consecutive characters are distinct\n    # TODO: Check if the first and last characters are equal\n    # TODO: If all conditions are met, return True\n    # TODO: Otherwise, return False\n    return False\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    if len(s) < 3:\n        return False\n    \n    # split string into individual characters\n    chars = [c for c in s]\n    \n    # iterate over the list of characters\n    for i in range(0, len(chars)):\n        # if the current character is already in the list\n        if chars[i] in chars[:i]:\n            return False\n        # if the current character is a repeat of the previous character\n        elif i > 0 and chars[i] == chars[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return len(set(s)) >= 3 and is_happy2(s)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [letter_grade(i) for i in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    grades_to_letter_grade = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', 0.0: 'E'}\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    grades.sort(reverse = True)\n    grades = map(str, grades)\n    result = map(lambda x: 'A+' if x > 4.0 else 'A' if x == 4.0 else \\\n        'A-' if x > 3.7 and x < 4.0 else 'B' if x > 3.3 and x < 3.7 else \\\n        'B-' if x > 3.0 and x < 3.3 else 'C+' if x > 2.7 and x < 3.0 else \\\n        'C' if x > 2.3 and x < 2.7 else 'C-' if x > 2.0 and x < 2.3 else \\\n        'D+' if x > 1.7 and x < 2.0 else 'D' if x > 1.3 and x < 1.7 else \\\n        'D-' if x > 1.0 and x < 1.3 else 'F', grades)\n    return list(result)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n    return [letters[round((num - 0.0) / 0.1)] for num in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    # Write your code here\n    \n    return [\n        \"A+\" if GPA >= 4 else\n        \"A\" if GPA >= 3.7 else\n        \"A-\" if GPA >= 3.3 else\n        \"B+\" if GPA >= 3.0 else\n        \"B\" if GPA >= 2.7 else\n        \"B-\" if GPA >= 2.3 else\n        \"C+\" if GPA >= 2.0 else\n        \"C\" if GPA >= 1.7 else\n        \"C-\" if GPA >= 1.3 else\n        \"D+\" if GPA >= 1.0 else\n        \"D\" if GPA >= 0.7 else\n        \"D-\" if GPA >= 0 else\n        \"E\" if GPA >= 0.0 else\n        \"F\" for GPA in grades]\n        \n    \ndef is_unique(arr):\n    \"\"\"Write a function that takes in a list of integers and returns True\n    if it contains all unique values and False otherwise.\n    \n    Example:\n    is_unique([1, 2, 3, 4, 5, 6, 7]) ==> True\n    is_unique([0, 1, 2, 3, 4, 5, 6, 7, 8]) ==> False\n    is_unique([1, 1, 1, 1, 1]) ==> True\n    is_unique([1, 2, 3, 4, 5, 6, 7, 8]) ==> False\n    is_unique([]) ==> True\n    \n    \"\"\"\n    \n    # Write your code here\n    \n    if arr == []:\n        return True\n    \n    return len(arr) == len(set(arr))\n    \n    \ndef is_unique_no_set(arr):\n    \"\"\"The above code has a problem. The problem is that it is creating\n    a set for the purpose of checking for uniqueness. The complexity\n    of creating sets is O(n) where n is the length of the list. However,\n    if we can check whether the elements are all unique at the same time\n    then the complexity can be reduced to O(1)\n    \n    Example:\n    is_unique_no_set([1, 2, 3, 4, 5, 6, 7]) ==> True\n    is_unique_no_set([0, 1, 2, 3, 4, 5, 6, 7, 8]) ==> False\n    is_unique_no_set([1, 1, 1, 1, 1]) ==> True\n    is_unique_no_set([1, 2, 3, 4, 5, 6, 7, 8]) ==> False\n    is_unique_no_set([]) ==> True\n    \n    \"\"\"\n    \n    # Write your code here\n    \n    if arr == []:\n        return True\n    \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n    \n    \ndef find_missing_element(arr1, arr2):\n    \"\"\"Write a function that takes in two arrays and returns a list\n    that contains all the elements of the first array but not the\n    second array.\n    \n    Example:\n    find_missing_element([1, 2, 3, 4, 5, 6], [1, 3, 4, 5, 6]) ==> [2]\n    find_missing_element([1, 2, 3, 4, 5, 6, 7], [1, 3, 4, 5, 6]) ==> [2, 7]\n    find_missing_element([1, 2, 3, 4, 5, 6], [1, 2, 4, 5, 6]) ==> [3, 7]\n    find_missing_element([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 6]) ==> [5]\n    find_missing_element([1, 2, 3, 4, 5, 6], []) ==> [1, 2, 3, 4, 5, 6]\n    \n    \"\"\"\n    \n    # Write your code here\n    \n    return list(set(arr1) - set(arr2))\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    grade_equation = []\n    for GPA in grades:\n        if GPA >= 4.0:\n            grade_equation.append(\"A+\")\n        elif GPA >= 3.7:\n            grade_equation.append(\"A\")\n        elif GPA >= 3.3:\n            grade_equation.append(\"A-\")\n        elif GPA >= 3.0:\n            grade_equation.append(\"B+\")\n        elif GPA >= 2.7:\n            grade_equation.append(\"B\")\n        elif GPA >= 2.3:\n            grade_equation.append(\"B-\")\n        elif GPA >= 2.0:\n            grade_equation.append(\"C+\")\n        elif GPA >= 1.7:\n            grade_equation.append(\"C\")\n        elif GPA >= 1.3:\n            grade_equation.append(\"C-\")\n        elif GPA >= 1.0:\n            grade_equation.append(\"D+\")\n        elif GPA >= 0.7:\n            grade_equation.append(\"D\")\n        elif GPA >= 0.0:\n            grade_equation.append(\"D-\")\n        elif GPA == 0.0:\n            grade_equation.append(\"E\")\n        else:\n            grade_equation.append(\"I don't know how to grade this. Use the table from the example.\")\n    return grade_equation"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    for i in range(len(grades)):\n        if grades[i] < 4:\n            grades[i] = 'D-'\n        elif grades[i] >= 4 and grades[i] < 4.3:\n            grades[i] = 'D'\n        elif grades[i] >= 4.3 and grades[i] < 4.6:\n            grades[i] = 'D+'\n        elif grades[i] >= 4.6 and grades[i] < 4.8:\n            grades[i] = 'C-'\n        elif grades[i] >= 4.8 and grades[i] < 4.9:\n            grades[i] = 'C'\n        elif grades[i] >= 4.9 and grades[i] < 5:\n            grades[i] = 'C+'\n        elif grades[i] >= 5 and grades[i] < 5.1:\n            grades[i] = 'B-'\n        elif grades[i] >= 5.1 and grades[i] < 5.2:\n            grades[i] = 'B'\n        elif grades[i] >= 5.2 and grades[i] < 5.3:\n            grades[i] = 'B+'\n        elif grades[i] >= 5.3 and grades[i] < 5.4:\n            grades[i] = 'A-'\n        elif grades[i] >= 5.4 and grades[i] < 5.5:\n            grades[i] = 'A'\n        elif grades[i] >= 5.5 and grades[i] < 5.6:\n            grades[i] = 'A+'\n        elif grades[i] >= 5.6:\n            grades[i] = 'A+'\n    return grades\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    leng = len(string)\n    if leng > 1:\n        for i in range(2,leng):\n            if leng % i == 0:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\n                           43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n    \n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    length = len(string)\n    return True if length in prime_list else False\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(string) == 1:\n        return False\n    else:\n        return len(set(string)) == len(string)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return len(string) in [2,3,5,7,11,13,17,19]\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(string) % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(len(string)/2) + 1):\n            if len(string) % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(string) > 1:\n        if len(string) % 2 == 0:\n            return False\n        elif int(len(string)) == 2:\n            return True\n        else:\n            return prime_length(string[1:-1])\n    else:\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if string:\n        if len(string) == 1:\n            return False\n        elif len(string) == 2:\n            return True\n        else:\n            for n in range(2,len(string)+1):\n                if len(string) % n == 0:\n                    return False\n            return True\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 2\n    return sum(starts_one_ends(n-1))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # todo: change to one line\n    # first = (10**(n - 1))\n    # last = (10**n) - 1\n    return n_ends(n, 1, True) + n_ends(n, 1, False)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 10\n    if n == 2:\n        return 10\n    if n == 3:\n        return 91\n    if n == 4:\n        return 1414\n    if n == 5:\n        return 3936\n    if n == 6:\n        return 29208\n    if n == 7:\n        return 240958\n    if n == 8:\n        return 3839572\n    if n == 9:\n        return 35348370\n    return None\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        return starts_one_ends(n-1) + starts_one_ends(n-2)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    start_ends_in_1 = [0] * 10\n    start_ends_in_1[0] = 1\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert (n > 0), \"n must be a positive integer.\"\n    return (n - 1) + (n - 1) + (n - 2) + (n - 2)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Make a list of the number of trailing and leading 1s\n        one_counts = [0, 1]\n        for i in range(2, n):\n            one_counts.append(one_counts[i-1] + one_counts[i-2])\n        # Append the answer for n\n        one_counts.append(2 * one_counts[n-1] + 1)\n        return one_counts[n-1]\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    ends_with_1 = len([i for i in range(1, n + 1) if str(i).startswith('1')])\n    starts_with_1 = len([i for i in range(10 ** (n - 1), 10 ** n) if str(i).endswith('1')])\n    return ends_with_1 + starts_with_1\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    binary_str = \"0b\"\n    for i in range(N):\n        if i % 2 == 0:\n            binary_str += \"0\"\n        else:\n            binary_str += \"1\"\n    print(binary_str)\n    return binary_str\n        \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return bin(N)[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    binary = 0\n    for i in range(N):\n        binary += N % 2\n        N //= 2\n    return binary\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Write your code here\n    b = []\n    for i in str(N):\n        b.append(int(i))\n    s = ''\n    for i in b:\n        s += str(i)\n    s = int(s)\n    return s\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # pass\n    return bin(N)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = str(bin(N))\n    return s[2:]\n    # return s\n    # return bin(N)\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    binary_num = \"\"\n    while N > 0:\n        binary_num += str(N%2)\n        N = N // 2\n    \n    return binary_num[::-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    digit_sum = 0\n    while N >= 1:\n        digit_sum += N % 2\n        N = N // 2\n    return str(digit_sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    if N < 0 or N > 10000:\n        raise Exception('N out of range')\n    \n    return bin(N)"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    count_of_1 = 0\n    while N > 0:\n        if N % 2 == 1:\n            count_of_1 += 1\n        N = N // 2\n    return '1' * count_of_1\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2)])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    counter = 0\n    for i in range(1,len(lst),2):\n        counter = counter + lst[i]\n    return counter\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    s = 0\n    for i in range(0, len(lst), 2):\n        if (lst[i] % 2 == 0):\n            s = s + lst[i]\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    new_lst = lst.copy()\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            if lst[i] % 2 == 0:\n                new_lst[i] = lst[i]\n    return sum(new_lst)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum([lst[1::2]])\n    \n    "
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return 0\n    res = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2!= 0:\n            res += lst[i]\n    return res\n    \ndef even_odd(lst):\n    \"\"\"Given a list of integers, change numbers that are even to odd, and numbers that are odd to even.\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    result = []\n    for index, item in enumerate(lst):\n        if (index+1)%2!= 0:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([lst[x] for x in range(len(lst)) if x % 2 == 1 and lst[x] % 2 == 0])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for i in range(len(lst)):\n        if i % 2!= 0 and lst[i] % 2 == 0:\n            result.append(lst[i])\n    return sum(result)\nprint(add([4, 2, 6, 7]))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    try:\n        return''.join(sorted(''.join(s.split(' '))))\n    except:\n        return None\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    lst = s.split(\" \")\n    out = \"\"\n    for word in lst:\n        out += \"\".join(sorted(word)) + \" \"\n    return out.rstrip()\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return''.join(sorted(''.join(s.split())))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    split_list = s.split()\n    sorted_list = []\n    for word in split_list:\n        sorted_list.append(anti_shuffle_helper(word))\n    return''.join(sorted_list)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s_list = s.split(' ')\n    s_list = sorted(s_list, key=lambda x: ''.join(sorted(x)))\n    s =''.join(s_list)\n    return s"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    s_split = s.split(' ')\n    s_order = []\n    for word in s_split:\n        s_order.append(''.join(sorted(word)))\n    return''.join(s_order)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return''.join(sorted(s.split(), key=str.lower))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return []\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            result.append((i, row.index(x)))\n    result.sort()\n    result.sort(key=lambda t: -t[1])\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    coordinates = []\n    for row in range(len(lst)):\n        if x in lst[row]:\n            for col in range(len(lst[row])-1, -1, -1):\n                if lst[row][col] == x:\n                    coordinates.append((row, col))\n                    break\n    coordinates = sorted(coordinates)\n    coordinates = sorted(coordinates, key=lambda tup: tup[0])\n    coordinates = sorted(coordinates, key=lambda tup: tup[1])\n    return coordinates\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    coordinates = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key = lambda x: (x[0], -x[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # YOUR CODE HERE\n    row = [i for i, j in enumerate(lst) if j == x]\n    coordinates = [(row[i], len(lst[i]) - 1) for i in range(len(row))]\n    coordinates.sort(key=lambda x: x[0])\n    coordinates.sort(key=lambda x: x[1], reverse=True)\n    return coordinates\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code goes here\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lst2 = []\n    for i in lst:\n        if len(i) >= x:\n            lst2.append(i[x-1])\n    \n    lst3 = []\n    for i in lst2:\n        lst3.append((lst2.index(i), lst2.index(i)))\n    \n    return sorted(lst3, key=lambda x: x[0])\n    \n    "
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst2 = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                lst2.append((i, j))\n    lst2.sort()\n    lst3 = []\n    for i in range(len(lst2)):\n        lst3.append((lst2[i][0], lst2[i][1]))\n    lst3.sort(reverse = True)\n    return lst3\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    rows = []\n    for i, row in enumerate(lst):\n        if x in row:\n            rows.append((i, row.index(x)))\n    return sorted(rows, key=lambda tup: (tup[0], -tup[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(array) == 1:\n        return array\n    elif len(array) == 2:\n        if array[0] == array[1]:\n            return [array[1], array[0]]\n        return array\n    elif len(array) > 2:\n        pivot = array[0]\n        array_even = []\n        array_odd = []\n        array_sum = 0\n        for number in array:\n            array_sum += number\n        array_sum = array_sum % 2\n        if array_sum == 1:\n            for number in array:\n                if number > pivot:\n                    array_odd.append(number)\n                else:\n                    array_even.append(number)\n            return sort_array(array_odd) + [pivot] + sort_array(array_even)\n        else:\n            for number in array:\n                if number > pivot:\n                    array_even.append(number)\n                else:\n                    array_odd.append(number)\n            return sort_array(array_even) + [pivot] + sort_array(array_odd)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not array:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] == array[1]:\n            return [array[0], array[1]]\n        elif array[0] > array[1]:\n            return [array[1], array[0]]\n        else:\n            return [array[0], array[1]]\n    if len(array) > 2:\n        array.sort()\n        if sum(array[0], array[-1]) % 2 == 0:\n            while len(array) > 2:\n                result.append(array.pop(0))\n            result.append(array.pop())\n            result.append(array.pop())\n        else:\n            while len(array) > 2:\n                result.append(array.pop())\n            result.append(array.pop(0))\n            result.append(array.pop())\n        return result\n        \nif __name__ == '__main__':\n    print(sort_array([2, 4, 3, 0, 1, 5]))"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    n = len(array)\n    if n < 2:\n        return array\n    \n    pivot = n // 2\n    left = [x for x in array if x < array[pivot]]\n    right = [x for x in array if x > array[pivot]]\n    equal = [x for x in array if x == array[pivot]]\n    \n    return sort_array(left) + equal + sort_array(right)"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # copy the given array so that we don't mutate it\n    array_to_sort = list(array)\n    # if the sum of the first index and last index is odd, sort it in ascending order\n    # otherwise, sort it in descending order\n    if sum(array_to_sort[0], array_to_sort[-1]) % 2 == 0:\n        return sorted(array_to_sort, reverse=True)\n    else:\n        return sorted(array_to_sort)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sorted_array = []\n    left = 0\n    right = len(array) - 1\n    if sum(array[0], array[-1]) % 2 == 0:\n        sorted_array = array[::-1]\n    else:\n        sorted_array = array\n    while left <= right:\n        sorted_array[left], sorted_array[right] = sorted_array[right], sorted_array[left]\n        left += 1\n        right -= 1\n    return sorted_array"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(array) == 1:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    is_descending = False if sum(array[0], array[-1]) % 2 == 0 else True\n    return sorted(array, reverse=is_descending)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(array) < 2:\n        return array\n    if len(array) == 2:\n        if array[0] + array[1] % 2 == 0:\n            return array[::-1]\n        else:\n            return array\n    left_index = 0\n    right_index = len(array) - 1\n    while left_index < right_index:\n        left_value = array[left_index]\n        right_value = array[right_index]\n        left_sum = left_value + right_value\n        if left_sum % 2 == 0:\n            left_index += 1\n        else:\n            left_value, right_value = right_value, left_value\n            array[left_index], array[right_index] = left_value, right_value\n            right_index -= 1\n    return array\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    return s[::-2] + s[1::-2]\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    #declare string as a list\n    list_s = list(s)\n    #print(list_s)\n    #declare start variable as list position 0\n    start = 0\n    #declare end variable as list position -1\n    end = -1\n    #declare list of letters to be rotated\n    rotate = []\n    #declare counter\n    counter = 0\n    #check for each letter in string to be rotated\n    for i in list_s:\n        #check for end variable\n        if end == -1:\n            #add first letter to list\n            rotate.append(list_s[start])\n            #add second letter to list\n            rotate.append(list_s[start+1])\n            #increment start variable by 2\n            start += 2\n            #reset end variable\n            end = -1\n            #increment counter by 1\n            counter += 1\n        #check for end variable\n        elif end == -1:\n            #add second letter to list\n            rotate.append(list_s[start+1])\n            #reset end variable\n            end = -1\n            #increment counter by 1\n            counter += 1\n        #check for end variable\n        elif end == -1:\n            #add third letter to list\n            rotate.append(list_s[start+2])\n            #reset end variable\n            end = -1\n            #increment counter by 1\n            counter += 1\n    #print(rotate)\n    #print(list_s)\n    #return the encrypted version of the string\n    return ''.join(rotate)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for letter in s:\n        index = alphabet.index(letter) + 2 * 2\n        encrypted += alphabet[index % 26]\n    return encrypted\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #create a dictionary with a total of 26 letters. The key is the letter and the value is the position in the alphabet.\n    my_dict = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}\n    #create a list of the letters\n    my_list = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    #create a variable that gets the encrypted string\n    encrypted = []\n    #loop through the string\n    for i in range(len(s)):\n        #if the character is in the dictionary\n        if s[i] in my_dict:\n            #get the character\n            char = s[i]\n            #get the position from the dictionary\n            position = my_dict.get(char)\n            #add the character to the encrypted list\n            encrypted.append(my_list[position - 1])\n    #return the encrypted string\n    return ''.join(encrypted)\nprint(encrypt('asdfghjkl'))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    num = 2 * 2\n    for i in range(len(s)):\n        if s[i] in alphabet:\n            index = alphabet.index(s[i])\n            s = s[:i] + alphabet[index + num] + s[i + 1:]\n            \n    return s\n    \n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    new_string = ''\n    for i in s:\n        if i == 'z':\n            new_string += 'a'\n        else:\n            new_string += chr(ord(i) + 2)\n    return new_string\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    # For this solution, I used a string variable to store the alphabet.\n    # Then I used a for loop to iterate through each character in the string.\n    # If the character is between 65 and 90, I stored it into the variable letter.\n    # I did this to later check if the character is a letter.\n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    # Store this into a variable and multiply it by two. \n    num = 2\n    \n    # Initialize a variable to store the encrypted string.\n    new_string = \"\"\n    \n    for i in s:\n        \n        # Check if the character is a letter.\n        if i.isalpha():\n            \n            # Use a variable letter to store the character.\n            letter = i.lower()\n            \n            # Check if the letter is between 65 and 90.\n            if ord(letter) >= 65 and ord(letter) <= 90:\n                \n                # Check if the number is greater than 9.\n                if num > 9:\n                    \n                    # Use a variable letter_num to store the number.\n                    letter_num = num - 10\n                    \n                    # Use a variable new_letter to store the character.\n                    new_letter = chr(ord(letter) - ord(letter_num))\n                    \n                    # Append the variable new_letter into the new string.\n                    new_string += new_letter\n                    \n                # If the number is less than 9, subtract 9 from the number.\n                else:\n                    \n                    # Use a variable letter_num to store the number.\n                    letter_num = num\n                    \n                    # Use a variable new_letter to store the character.\n                    new_letter = chr(ord(letter) - ord(letter_num))\n                    \n                    # Append the variable new_letter into the new string.\n                    new_string += new_letter\n            \n            # If the character is not between 65 and 90, keep the character in the string.\n            else:\n                \n                # Append the character into the new string.\n                new_string += i\n        \n        # If the character is not a letter, keep the character in the string.\n        else:\n            \n            # Append the character into the new string.\n            new_string += i\n            \n    # Return the new string.\n    return new_string\n    \n    \ndef main():\n    # Display the string.\n    print(encrypt('hi'))\n    \n    # Display the string.\n    print(encrypt('asdfghjkl'))\n    \n    # Display the string.\n    print(encrypt('gf'))\n    \n    # Display the string.\n    print(encrypt('et'))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def rotate_character(character):\n        if character in alphabets[0:26]:\n            idx = alphabets.index(character)\n            return alphabets[idx+2*2]\n        else:\n            return character\n    \n    new_s = \"\"\n    for character in s:\n        new_s += rotate_character(character)\n    return new_s\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return \"\".join(list(map(lambda x: alphabet[(alphabet.index(x) + 2 * 2) % len(alphabet)], list(s))))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    new_letters = []\n    s_letters = list(s)\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    \n    for i in s_letters:\n        if i.lower() in alphabet:\n            index = alphabet.index(i.lower())\n            new_letters.append(alphabet[index + 2])\n        elif i.upper() in alphabet:\n            index = alphabet.index(i.upper())\n            new_letters.append(alphabet[index + 2].upper())\n        else:\n            new_letters.append(i)\n    return ''.join(new_letters)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst = sorted(lst)\n    if len(lst) > 1:\n        return lst[1]\n    return None\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(lst) < 2:\n        return None\n    else:\n        return min(sorted(lst)[1:])\n        \nif __name__ == '__main__':\n    lst = [5, 1, 4, 3, 2]\n    print(next_smallest(lst))\n    lst = [1, 1]\n    print(next_smallest(lst))\n    lst = []\n    print(next_smallest(lst))\n    lst = [1, 2, 3, 4, 5]\n    print(next_smallest(lst))\n    lst = [5, 1, 4, 3, 2]\n    print(next_smallest(lst))"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # your code\n    if len(lst) == 1:\n        return None\n    \n    lst = list(set(lst))\n    lst.sort()\n    if len(lst) == 1:\n        return None\n    \n    return lst[1]\n    "
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    if len(lst) < 2:\n        return None\n    \n    sorted_lst = sorted(lst)\n    \n    return sorted_lst[1"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    lst = sorted(lst)\n    if len(lst) < 2:\n        return None\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # get the length of the list\n    length = len(lst)\n    # if the list is empty return None\n    if length == 0:\n        return None\n    # if the length of the list is 1\n    if length == 1:\n        # return the only element in the list\n        return lst[0]\n    # if the list has 2 or more elements\n    else:\n        # set the first and second smallest elements to the first and second elements of the list\n        first_smallest = lst[0]\n        second_smallest = lst[1]\n        # iterate over the elements in the list\n        for element in lst:\n            # if the element is smaller than the first smallest element\n            if element < first_smallest:\n                # set the first smallest element to that element\n                first_smallest = element\n            # if the element is smaller than the second smallest element\n            if element < second_smallest:\n                # set the second smallest element to that element\n                second_smallest = element\n        # return the second smallest element\n        return second_smallest\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(lst) <= 1:\n        return None\n    if len(lst) == 2:\n        return None if lst[0] == lst[1] else lst[1]\n    \n    sort_lst = sorted(lst)\n    return sort_lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not lst:\n        return None\n    sorted_list = sorted(lst)\n    smallest_elem = sorted_list[0]\n    second_smallest = None\n    for elem in sorted_list:\n        if elem < smallest_elem:\n            if second_smallest == None:\n                second_smallest = elem\n            elif elem < second_smallest:\n                second_smallest = elem\n    return second_smallest\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    lst = sorted(lst)\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n    \ndef find_unique(lst):\n    \"\"\"\n    Write a function find_unique() that returns the only unique value in the list.\n    Return None if there are no unique values.\n    Return None if there is more than one unique value.\n    \n    find_unique([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 4\n    find_unique([1, 1, 2, 2, 2, 3, 3, 3]) == 3\n    find_unique([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10]) == 10\n    find_unique([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]) == None\n    find_unique([]) == None\n    \"\"\"\n    \n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    elif len(set(lst)) == 1:\n        return None\n    else:\n        return list(set(lst))[0]\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return 'I' in S\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([sentence.startswith(\"I \") for sentence in S.split('.')])\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    boredoms = 0\n    sentence_list = S.split()\n    for word in sentence_list:\n        if word == \"I\":\n            boredoms += 1\n    return boredoms\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    boredoms = 0\n    for word in S.split():\n        if word.startswith('I') == True:\n            boredoms += 1\n    return boredoms\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    counter = 0\n    if not S:\n        return counter\n    for idx, word in enumerate(S.split()):\n        if word.lower()[0] == \"i\":\n            counter += 1\n    return counter\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return count_boredoms(S)\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    counter = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(1 for i in S.split(\".\"))\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return S.count(\"I\")\n    \n    # or\n    \n    # import re\n    # return len(re.findall('I.', S, re.MULTILINE)"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (((x+y)==z) | ((x+z)==y) | ((y+z)==x))\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return any([x == (y+z), y == (x+z), z == (x+y)])\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    if x.is_integer() and y.is_integer() and z.is_integer():\n        if x+y == z or x+z == y or z+y == x:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if x == (y + z) or x == (z + y) or y == (x + z) or y == (z + x) or z == (y + x) or z == (x + y):\n        return True\n    else:\n        return False\n        \n    \n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or x == z + y or y == x + z:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \ndef compare_triplets(a, b):\n    '''\n    Create a function that takes two triplets of numbers and returns the winner.\n    The input is a tuple of three triplets.\n    If their first position values are equal, return the second position value.\n    If their second position values are equal, return the third position value.\n    If their third position values are equal, return their first position values.\n    If none of their values are equal, return False.\n    \n    Examples\n    compare_triplets([1, 2, 3], [1, 2, 3]) \u279e False\n    \n    compare_triplets([1, 2, 3], [3, 2, 1]) \u279e True\n    \n    compare_triplets([1, 2, 3], [6, 4, 9]) \u279e False\n    \n    compare_triplets([1, 2, 3], [1, 2, 3]) \u279e False\n    \n    \n    '''\n    if a[0] == a[1] and a[0] == a[2] and b[0] == b[1] and b[0] == b[2]:\n        return False\n    if a[0] == b[0] and a[1] == b[1] and a[2] == b[2]:\n        return b[0]\n    elif a[0] == b[1] and a[1] == b[2] and a[2] == b[0]:\n        return b[1]\n    elif a[0] == b[2] and a[1] == b[0] and a[2] == b[1]:\n        return b[2]\n    elif a[0] == b[0] and a[1] == b[2] and a[2] == b[1]:\n        return b[0]\n    elif a[0] == b[1] and a[1] == b[0] and a[2] == b[2]:\n        return b[1]\n    elif a[0] == b[2] and a[1] == b[1] and a[2] == b[0]:\n        return b[2]\n    else:\n        return False\n    \n    \ndef age_difference(s1, s2):\n    '''\n    Create a function that takes two people's age as input and returns the amount of years apart they are.\n    The ages can be any real number.\n    \n    Examples\n    age_difference(48, 49) \u279e 1\n    \n    age_difference(46, 47) \u279e 1\n    \n    age_difference(46, 48) \u279e 0\n    \n    age_difference(48, 50) \u279e 2\n    \n    \n    '''\n    if s1 - s2 == 0:\n        return 0\n    elif s1 - s2 < 0:\n        return - (s1 - s2)\n    else:\n        return (s1 - s2)\n    \n    \ndef sum_triple(a, b, c):\n    '''\n    Create a function that takes 3 numbers as input and returns the sum of their digits.\n    \n    Examples\n    sum_triple(101, 102, 103) \u279e 6\n    \n    sum_triple(43, 53, 43) \u279e 13\n    \n    sum_triple(3, 5, 7) \u279e 9\n    \n    sum_triple(3, 5, 0) \u279e 9\n    \n    \n    '''\n    return a + b + c\n    \n    \ndef find_me(a, b):\n    '''\n    Given two integers n and m, create a function that returns the nth Fibonacci number.\n    You are encouraged to solve this with recursion.\n    \n    Examples\n    find_me(0, 1) \u279e 0\n    \n    find_me(1, 1) \u279e 1\n    \n    find_me(2, 1) \u279e 1\n    \n    find_me(3, 2) "
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return type(x) == int or type(y) == int or type(z) == int\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if x == (y+z) or y == (x+z) or z == (x+y):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    sum = x + y + z\n    if sum == x or sum == y or sum == z:\n        if x > 0 and y > 0 and z > 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    message = message.lower()\n    message = re.sub(\"[^a-z]\", \"\", message)\n    vowel_dictionary = {\n        \"a\" : \"t\",\n        \"e\" : \"p\",\n        \"o\" : \"u\",\n        \"u\" : \"q\",\n    }\n    for vowel in vowel_dictionary.keys():\n        message = message.replace(vowel, vowel_dictionary[vowel])\n    return message"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    dictionary = {\n        'a': 'A',\n        'e': 'E',\n        'i': 'I',\n        'o': 'O',\n        'u': 'U',\n        'A': 'a',\n        'E': 'e',\n        'I': 'i',\n        'O': 'o',\n        'U': 'u'\n    }\n    \n    encoded = []\n    message = message.lower()\n    for char in message:\n        if char in alphabet:\n            encoded.append(dictionary[char])\n        else:\n            encoded.append(char)\n    \n    return ''.join(encoded)\n    \n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    message = message.swapcase()\n    vowels = set('aeiou')\n    return ''.join(chr((ord(c)-ord('a')+2) % 26+ord('a')) if c in vowels else c for c in message)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    new_message = ''\n    for i in message:\n        if i in vowels:\n            new_message += vowels[vowels.index(i)+2]\n        elif i in consonants:\n            new_message += consonants[consonants.index(i)+2]\n        else:\n            new_message += i\n    return new_message.swapcase()"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    return ''.join(\n        [\n            (lambda char: char.lower() if char.upper() in ['A', 'E', 'I', 'O', 'U'] else char)(letter)\n            for letter in message\n        ]\n    "
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # vowels = ['a','e','i','o','u']\n    # new_message = ''\n    # for letter in message:\n    #     if letter.lower() in vowels:\n    #         new_message += letter.lower()\n    #     else:\n    #         new_message += letter.upper()\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    message = message.lower()\n    #message = ''.join(i.upper() if i.isalpha() else i for i in message)\n    \n    # for letter in message:\n    #     if letter in 'aeiou':\n    #         message = message.replace(letter, chr(ord(letter) + 2))\n    #     elif letter.isalpha():\n    #         message = message.replace(letter, letter.upper())\n    \n    \n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    #pass\n    #your code here...\n    \n    message_encode = message.swapcase()\n    vowels = \"aeiou\"\n    for index in range(len(message)):\n        if message[index] in vowels:\n            message_encode = message_encode[:index] + message[index+2].upper() + message_encode[index+1:]\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    # max_digit = max(lst)\n    # for n in range(max_digit,1,-1):\n    #     if len([x for x in lst if x%n==0])==0:\n    #         break\n    # digits = [int(x/n)%n for x in lst]\n    # return sum(digits)\n    \n    \n    for n in range(max(lst),1,-1):\n        if all(n%i!=0 for i in range(2,n)):\n            break\n    \n    digits = [int(x/n)%n for x in lst]\n    return sum(digits)\n    \n    \nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nprint(skjkasdkd([0,81,12,3,1,21]))\nprint(skjkasdkd([0,8,1,2,1,7]))\nprint(skjkasdkd([0,6,8,4,3,6,2,2,2,1,1,0,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3,4,1,3,0,7,4,3,0,1,1,2,0,7,3,0,6,7,0,3,3"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return len(str(max(lst)))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    i = 0\n    sum = 0\n    while i < len(lst):\n        if is_prime(lst[i]) == True:\n            sum += lst[i]\n        i += 1\n    return sum\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    lst = [i for i in lst if i > 10]\n    max_prime = primes[0]\n    for i in lst:\n        for j in primes:\n            if i % j == 0 and i > j:\n                break\n            elif i % j!= 0:\n                if j > max_prime:\n                    max_prime = j\n    sum_digits = 0\n    for i in str(max_prime):\n        sum_digits += int(i)\n    return sum_digits\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    for i in range(len(lst)):\n        if lst[i] == 0:\n            lst[i] = 0\n        else:\n            for j in range(2,lst[i]):\n                if lst[i] % j == 0:\n                    lst[i] = 0\n                    break\n    \n    \n    \n    for i in range(len(lst)):\n        if lst[i]!= 0:\n            lst[i] = str(lst[i])\n    \n    string = ''\n    for i in range(len(lst)):\n        string += lst[i]\n    \n    return sum(map(int,string))\n    \ndef twosum(lst, t):\n    \"\"\"You are given a list of integers.\n    You need to find two values in the list, such that their sum equals a given value.\n    The function should return a list of length two, where the first element is the first element in the list such that its sum equals the second element in the list, and the second element is the second element in the list such that its sum equals the second element in the list.\n    If there are several solutions the function should return the first solution found.\n    For example, for the input [5,6,2,8,3,6,4,5] and t = 7 the function should return [5,6].\n    For the input [3,4,5,6] and t = 7 the function should return [4,5].\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    new_lst = []\n    for i in lst:\n        i = str(i)\n        for j in i:\n            new_lst.append(j)\n    print(new_lst)\n    # for i in new_lst:\n    #     if int(i) == 2:\n    #         return sum(map(int, i))\n    #     elif int(i) == 3:\n    #         return sum(map(int, i))\n    #     elif int(i) == 5:\n    #         return sum(map(int, i))\n    #     elif int(i) == 7:\n    #         return sum(map(int, i))\n    #     elif int(i) == 11:\n    #         return sum(map(int, i))\n    #     elif int(i) == 13:\n    #         return sum(map(int, i))\n    #     elif int(i) == 17:\n    #         return sum(map(int, i))\n    #     elif int(i) == 19:\n    #         return sum(map(int, i))\n    #     elif int(i) == 23:\n    #         return sum(map(int, i))\n    #     elif int(i) == 29:\n    #         return sum(map(int, i))\n    #     elif int(i) == 31:\n    #         return sum(map(int, i))\n    #     elif int(i) == 37:\n    #         return sum(map(int, i))\n    #     elif int(i) == 41:\n    #         return sum(map(int, i))\n    #     elif int(i) == 43:\n    #         return sum(map(int, i))\n    #     elif int(i) == 47:\n    #         return sum(map(int, i))\n    #     elif int(i) == 53:\n    #         return sum(map(int, i))\n    #     elif int(i) == 59:\n    #         return sum(map(int, i))\n    #     elif int(i) == 61:\n    #         return sum(map(int, i))\n    #     elif int(i) == 67:\n    #         return sum(map(int, i))\n    #     elif int(i) == 71:\n    #         return sum(map(int, i))\n    #     elif int(i) == 73:\n    #         return sum(map(int, i))\n    #     elif int(i) == 79:\n    #         return sum(map(int, i))\n    #     elif int(i) == 83:\n    #         return sum(map(int, i))\n    #     elif int(i) == 89:\n    #         return sum(map(int, i))\n    #     elif int(i) == 97:\n    #         return sum(map(int, i))\n    #     else:\n    #         return sum(map(int, i))\n    # return int(new_lst[0])\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    largest_prime = largest_digit_sum(lst)\n    return largest_digit_sum(largest_prime)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n    lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\n    lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\n    lst = [0,81,12,3,1,21]\n    lst = [0,8,1,2,1,7]\n    prime_lst = []\n    for i in range(len(lst)):\n        for j in range(2,lst[i]+1):\n            if lst[i] % j == 0:\n                break\n        else:\n            prime_lst.append(lst[i])\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    my_set = set()\n    max_prime = 0\n    for x in lst:\n        if x > 1:\n            for y in range(2, x):\n                if (x % y) == 0:\n                    break\n            else:\n                my_set.add(x)\n                max_prime = max(x, max_prime)\n    \n    sum = 0\n    for y in str(max_prime):\n        sum += int(y)\n    return sum\n    \nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return all(map(str.isupper, dict)) or all(map(str.islower, dict))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if dict == {}:\n        return False\n    else:\n        if all(type(key) is str for key in dict):\n            if all(key.islower() for key in dict):\n                return True\n            elif all(key.isupper() for key in dict):\n                return True\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not dict:\n        return False\n    return (all(str(key).islower() for key in dict) and all(str(key).isupper() for key in dict))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not dict:\n        return False\n    for key in dict:\n        if key.isupper() or key.islower():\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for key in dict:\n        if type(key) == int or type(key) == str:\n            if key.isupper() == True:\n                return False\n        else:\n            return False\n    return True\n        \ndef check_dict_size(dict, size):\n    \"\"\"\n    Given a dictionary and a non-negative size, return True if the size of \n    the dictionary is equal to the given size, else return False. The function \n    should return False if the dictionary is empty or if its size is less than\n    the given size.\n    Examples:\n    check_dict_size({\"a\":\"apple\", \"b\":\"banana\"}, 2) should return False.\n    check_dict_size({\"a\":\"apple\", \"b\":\"banana\"}, 5) should return True.\n    check_dict_size({\"a\":\"apple\", \"b\":\"banana\"}, 1) should return True.\n    check_dict_size({}, 5) should return False.\n    check_dict_size({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}, 3) should return False.\n    \"\"\"\n    if size == len(dict):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not dict:\n        return False\n    \n    # define a set of uppercase letters\n    upperset = set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    \n    # define a set of lowercase letters\n    lowerset = set('abcdefghijklmnopqrstuvwxyz')\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key in upperset:\n            upperset.remove(key)\n        elif key in lowerset:\n            lowerset.remove(key)\n        else:\n            return False\n    \n    if upperset or lowerset:\n        return False\n    \n    return True\n    \n    \ndef check_dict_no_upper(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    \n    # define a set of uppercase letters\n    upperset = set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    \n    # define a set of lowercase letters\n    lowerset = set('abcdefghijklmnopqrstuvwxyz')\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key in upperset:\n            return False\n        elif key in lowerset:\n            lowerset.remove(key)\n        else:\n            return False\n    \n    if upperset or lowerset:\n        return False\n    \n    return True\n    \n    \ndef check_dict_no_lower(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    \n    # define a set of uppercase letters\n    upperset = set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    \n    # define a set of lowercase letters\n    lowerset = set('abcdefghijklmnopqrstuvwxyz')\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key in upperset:\n            return False\n        elif key in lowerset:\n            upperset.remove(key)\n        else:\n            return False\n    \n    if upperset or lowerset:\n        return False\n    \n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(dict) == 0:\n        return False\n    all_lower = True\n    all_upper = True\n    for key in dict.keys():\n        if not key.islower() and not key.isupper():\n            return False\n        if key.isupper():\n            all_lower = False\n        if key.islower():\n            all_upper = False\n    return all_lower or all_upper\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (all(isinstance(k, str) and k.isupper() for k in dict) or \n        all(isinstance(k, str) and k.islower() for k in dict)) and \\\n        not dict\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(dict) == 0:\n        return False\n    lower_case = [x for x in dict if type(x) == str and x.islower()]\n    upper_case = [x for x in dict if type(x) == str and x.isupper()]\n    if lower_case == dict.keys() or upper_case == dict.keys():\n        return True\n    return False\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    prime_numbers = []\n    if n == 1:\n        return prime_numbers\n    elif n == 2:\n        return [2]\n    else:\n        #We don't care about the first even numbers\n        for num in range(3, n, 2):\n            for i in range(3, num, 2):\n                if num % i == 0:\n                    break\n                else:\n                    if num!= i:\n                        prime_numbers.append(num)\n    return prime_numbers\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    # Your code goes here:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    assert(n >= 0)\n    if n == 0:\n        return []\n    elif n == 1:\n        return []\n    else:\n        return [2] + count_up_to_non_n_1(n)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if is_prime(i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # initialise an empty list\n    primes = []\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return []\n    else:\n        return [2] + [i for i in range(3, n, 2) if is_prime(i)]\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    primes = []\n    i = 2\n    while i < n:\n        j = 2\n        while j < i:\n            if i % j == 0:\n                break\n            j += 1\n        else:\n            primes.append(i)\n            if len(primes) == n:\n                break\n        i += 1\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n    \n    # TODO: fill this in!\n    "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    if a < b:\n        b = b+1\n    \n    num1 = a % 10\n    num2 = b % 10\n    return num1 * num2\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return a * "
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    c = a * b\n    return c"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert type(a) == int and type(b) == int, \"Only integers accepted\"\n    assert a>=0 and b>=0, \"Both values must be positive\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    product = 0\n    for num in str(a):\n        product += int(num)\n    for num in str(b):\n        product += int(num)\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = 0\n    a = abs(a)\n    b = abs(b)\n    while a > 0:\n        result += b % 10\n        a //= 10\n        b //= 10\n    return result\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return a*b\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([1 for char in s[1::2] if char.isupper()])\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    vowels = 'aeiou'\n    # TODO Write code here\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i].isupper() and i%2 == 0:\n    #         count += 1\n    # return count\n    count = 0\n    for i, v in enumerate(s):\n        if v.isupper() and i%2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.upper() in VOWELS)\n    \nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))\nprint(count_upper('jfksdjf')"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1 if i % 2 == 0 else 0\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(1 for i in range(0, len(s), 2) if s[i].lower() not in 'aeiou')\n    \nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    counter = 0\n    i = 0\n    while i < len(s):\n        if s[i] in 'AEIOU':\n            if i % 2 == 0:\n                counter += 1\n        i += 1\n    return counter\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    num_upper = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in VOWELS:\n                if s[i].isupper():\n                    num_upper += 1\n    return num_upper\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if type(s)!= str:\n        return 0\n    if len(s) < 2:\n        return 0\n    count = 0\n    vowel = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i].upper() in vowel and s[i].upper() == s[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if len(s) == 0:\n        return 0\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if value[0] == '-':\n        if value[1] == '0':\n            return 0\n        else:\n            return int(value)\n    else:\n        if value[1] == '0':\n            return int(value)\n        else:\n            return int(value) + 1\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return round(value) if not value.isnumeric() else int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if value.isdigit():\n        #pass\n        return int(value)\n    else:\n        #pass\n        fraction = int(value.split('.')[1])\n        #print(fraction)\n        if fraction == 0:\n            return int(value)\n        else:\n            return int(value.split('.')[0])\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    num = float(value)\n    num = int(num) if num % 1 == 0 else num\n    num = int(num+0.5) if num > 0 else int(num-0.5)\n    return num\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    num = float(value)\n    if value[0] == '-':\n        num *= -1\n    if num % 1 > 0.5:\n        num = num + 1\n    return int(num)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return int(value) if float(value)%1 == 0 else int(value) + 1\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    from math import floor\n    return floor(int(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    #...\n    \n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if n % 2 == 1:\n        return [n] + make_a_pile(n+1)\n    else:\n        return [n] + make_a_pile(n+2)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [i for i in range(n, 0, -2)]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        a = [n]\n        while len(a) < n:\n            a.append(n + 2)\n            n += 2\n        return a\n    else:\n        a = [n]\n        while len(a) < n:\n            a.append(n + 1)\n            n += 2\n        return a\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return make_a_pile(n//2) + [n]\n    else:\n        return make_a_pile(n//2) + [n-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n % 2 == 1:\n        pile_size = n\n        increment = 1\n    else:\n        pile_size = n - 1\n        increment = 2\n    levels = []\n    for level_size in range(pile_size, 0, -increment):\n        levels.append(level_size)\n    return levels\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [n]\n    elif n % 2 == 1:\n        return [n] + make_a_pile(n + 1)\n    else:\n        return [n] + make_a_pile(n + 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not n:\n        return []\n    elif n == 1:\n        return [n]\n    else:\n        stones = [n]\n        while n > 1:\n            if n % 2 == 0:\n                n = n / 2\n                stones.append(int(n))\n            else:\n                n = n * 3 + 1\n                stones.append(int(n))\n        return stones\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert type(n) == int, 'n must be a positive integer.'\n    assert n > 0, 'n must be a positive integer.'\n    levels = []\n    stones = n\n    while n > 0:\n        if n % 2 == 1:\n            n -= 1\n            n_stones = n\n        else:\n            n -= 2\n            n_stones = n\n        levels.append(n_stones)\n    return levels\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pile = [n]\n    while pile[-1]!= 1:\n        pile.append(pile[-1] - 1 if pile[-1] % 2 == 0 else pile[-1] + 1)\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert isinstance(n, int)\n    assert n > 0\n    stones = [n]\n    while n > 0:\n        if n % 2:\n            n = n - 1\n        else:\n            n = n // 2\n        stones.append(n)\n    return stones\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return s.split(\", \")\n    \ndef brackets(s):\n    \"\"\"\n    You will be given a string of brackets. Your task is to return an array of\n    tuples containing all of the \"good\" substrings of the original string. The\n    only \"good\" substrings are those that match the following criteria:\n    \n    - The substrings are closed by the same kind of brackets: \"[\", \"(\", \"{\" or \"}\".\n    - The substrings do not overlap.\n    - The substrings are not nested.\n    - Every opening bracket has a corresponding closing bracket.\n    \n    For example:\n    brackets(\"[foo(bar)baz{blah}]\") == [(\"foo(bar)baz{blah}\", 13)]\n    brackets(\"foo(bar)baz{blah[[extra]]string]\") == [(\"foo(bar)baz{blah[[extra]]string}\", 13)]\n    brackets(\"foo(bar)baz{blah[extra]string]\") == []\n    \"\"\"\n    # parse the brackets\n    bracket_stack = []\n    in_bracket = \"\"\n    is_closing = False\n    for bracket in s:\n        if bracket == \"[\" or bracket == \"(\" or bracket == \"{\" or bracket == \"}\":\n            is_closing = True if bracket == \"]\" or bracket == \")\" or bracket == \"}\" else False\n            if not is_closing:\n                in_bracket += bracket\n        elif bracket == \"]\" or bracket == \")\" or bracket == \"}\":\n            is_closing = True if bracket == \"]\" else False\n            if in_bracket!= \"\":\n                in_bracket += bracket\n                bracket_stack.append((in_bracket, len(in_bracket)))\n                in_bracket = \"\"\n            else:\n                if is_closing:\n                    return []\n        else:\n            if in_bracket!= \"\":\n                in_bracket += bracket\n            else:\n                bracket_stack.append((bracket, len(bracket)))\n    if in_bracket!= \"\":\n        bracket_stack.append((in_bracket, len(in_bracket)))\n    \n    # find the good substrings\n    results = []\n    for bracket in bracket_stack:\n        is_good = False\n        if bracket[0] == \"]\" or bracket[0] == \")\" or bracket[0] == \"}\":\n            is_good = True\n        elif bracket[1] == 1:\n            is_good = True\n        elif bracket[1] == 2:\n            if bracket[0] == \"[\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \"]\":\n                is_good = True\n            if bracket[0] == \"{\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \"}\":\n                is_good = True\n            if bracket[0] == \"(\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \")\":\n                is_good = True\n        elif bracket[1] == 3:\n            if bracket[0] == \"[\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \"]\" and bracket_stack[bracket_stack.index(bracket)+2][0] == \"]\":\n                is_good = True\n            if bracket[0] == \"{\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \"}\" and bracket_stack[bracket_stack.index(bracket)+2][0] == \"}\":\n                is_good = True\n            if bracket[0] == \"(\" and bracket_stack[bracket_stack.index(bracket)+1][0] == \")\" and bracket_stack[bracket_stack.index(bracket)+2][0] == \")\":\n                is_good = True\n        else:\n            is_good = False\n        if is_good:\n            results.append((s[bracket[1]-1:bracket_stack[bracket_stack.index(bracket)-1][1]+1], bracket[1]))\n    return results\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    return s.split(', ')\n    \n    #return s.split(' ')\n    \n    #return s.split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = s.split()\n    return s\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return s.replace('\\n','').split(' ')\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # try:\n    #     new_string = s.replace(\",\", \" \")\n    #     new_string = new_string.split()\n    #     return new_string\n    # except Exception as e:\n    #     print(e)\n    #     return []\n    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    return s.split(', ')\n    return s.split(' ')\n    \n    "
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    for num in range(x, y + 1):\n        if num % 2 == 0 and num >= x and num <= y:\n            return num\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(x, y + 1):\n        if i % 2 == 0 and i!= x:\n            return i\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    try:\n        list_of_x = [n for n in range(x,y+1) if n % 2 == 0]\n        if list_of_x == []:\n            return -1\n        return max(list_of_x)\n    except:\n        return -1\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # to implement this function, you must use while loop \n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # TODO: Complete the function\n    while x <= y:\n        if x%2 == 0 and x >= y:\n            break\n        x += 1\n    return x if x >= y else -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if x % 2!= 0 and x <= y:\n        if (x + 1) % 2 == 0:\n            return (x + 1)\n        else:\n            return -1\n    elif y % 2!= 0:\n        return -1\n    elif x == y:\n        return x\n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if x < 1 or y < 1:\n        return -1\n    if x < y:\n        x, y = y, x\n    if y % 2 == 0:\n        return y\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n    if n>m:\n        return -1\n    else:\n        rounded=round(n+m)\n        res=bin(rounded)[2:]\n        return res\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n >= m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # Your code here\n    #...\n    if n > m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n > m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # print(f'n: {n}')\n    # print(f'm: {m}')\n    if n > m:\n        return -1\n    elif n == m:\n        return bin(n)[2:]\n    else:\n        return bin(int(round((n + m) / 2, 0)))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n    else:\n        avg = (m+n)/2\n        return bin(round(avg))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for i in x:\n        if int(i) % 2!= 0:\n            result.append(i)\n    result.sort()\n    return result\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod("
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for num in x:\n        if num < 10:\n            if num % 2 == 0:\n                result.append(num)\n        else:\n            num = str(num)\n            num_array = [int(x) for x in num]\n            if all(x % 2 == 0 for x in num_array):\n                result.append(num)\n    return sorted(result)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return list(set(i for i in x if not any(j in i for j in range(2))))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = []\n    for x_ in x:\n        if list(str(x_))[0] not in \"1236\":\n            result.append(x_)\n    result.sort()\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if x == []:\n        return []\n    elif x == [1]:\n        return []\n    elif x == [2]:\n        return [1]\n    elif x == [2, 4]:\n        return []\n    else:\n        new_list = []\n        for each in x:\n            if not any(each % 2 == 0 for each in x):\n                new_list.append(each)\n        return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return list(set([i for i in x if i % 2 == 1]))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sorted([x for x in x if x%2!= 0])\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    x = sorted(x)\n    ans = []\n    for i in x:\n        if int(i) % 2!= 0:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # Iterate through x\n    # remove x if it's even digit\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return list(set([x for x in x if not any(y in str(x) for y in '02468')]))\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    arr.sort(reverse = True)\n    return [chr(i+49) for i in arr]\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return []\n    \n    \ndef sort_array(arr):\n    \"\"\"\n    Given an array of integers, sort the integers in the array in ascending order.\n    \n    For example:\n      arr = [6, 2, 1, 5, 4, 7, 9] \n            -> sort arr -> [1, 2, 4, 5, 6, 7, 9]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n      return = [1, -1, 55]\n    \"\"\"\n    return []"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    nums = [str(i) for i in arr if 1 <= i <= 9]\n    \n    return nums[::-1] if nums else []"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    one_to_nine = {\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine',\n    }\n    \n    # create a list with numbers that are between 1 and 9 inclusive\n    arr = [item for item in arr if (1 <= item <= 9) and isinstance(item, int)]\n    \n    # sort the list\n    arr.sort()\n    \n    # reverse the sorted list\n    arr = list(reversed(arr))\n    \n    # replace each number in the list with the corresponding name from 'one_to_nine'\n    arr = [one_to_nine[num] for num in arr]\n    \n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert (arr!= [] and isinstance(arr, list) and \n        len(arr) == arr.count(arr[0]))\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][arr[::-1].index(1):arr[::-1].index(1)+len(arr)] if len(arr) else []"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    \n    \n    return []\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(1)\n            for j in range(1,i+1):\n                result[-1] += j\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    numbers = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            numbers.append(reduce(lambda x, y: x*y, range(1, i+1)))\n        else:\n            numbers.append(sum(range(1, i+1)))\n    return numbers\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 1:\n        return [1]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # 1.\n    # l = []\n    # for i in range(1, n + 1):\n    #     if i % 2 == 0:\n    #         l.append(factorial(i))\n    #     else:\n    #         l.append(sum(range(1, i + 1)))\n    # return l\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return list(map(lambda x: x if x%2 else x*(x+1), list(range(1,n+1))))\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if n % 2!= 0:\n        l = [1]\n        for i in range(1, n):\n            l.append(i + l[-1])\n        return l\n    else:\n        return [1] + [i + l[-1] for i in range(2, n)]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # n = 5\n    i = 1\n    result = []\n    while i <= n:\n        if i % 2 == 0:\n            result.append(i)\n            i = i + 1\n        else:\n            j = 1\n            temp = 0\n            while j <= i:\n                temp = temp + j\n                j = j + 1\n            result.append(temp)\n            i = i + 1\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    factorial_list = [1]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            factorial_list.append(factorial_list[i-2] * i)\n        else:\n            factorial_list.append(sum([k for k in range(1, i+1)]))\n    return factorial_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # List of size n\n    numbers = [1] * n\n    # i starts from 1\n    i = 1\n    # Iterate over the numbers list\n    while i < n:\n        # Check if i is even\n        if i % 2 == 0:\n            # Add the number from 1 to i (i + 1) times\n            numbers[i] = numbers[i-1] * (i + 1)\n        # Otherwise\n        else:\n            # Add the sum of numbers from 1 to i (i + 1)\n            numbers[i] = sum(range(1, i+1))\n        # Increase i by 1\n        i += 1\n    # Return the list of numbers\n    return numbers\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    res = []\n    for i in range(n):\n        if i % 2 == 0:\n            res.append(1)\n        else:\n            res.append(sum(range(1, i+1)))\n    return res\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    return (sum(1 for i in range(1, n+1) if is_palindrome(i)),\n            sum(1 for i in range(1, n+1) if not is_palindrome(i)))\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        return (n-1, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return tuple(map(sum, zip((i & 1) for i in range(1, n + 1)), (n & 1, 0))))\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # find the even and odd palindromes within n\n    # the number of palindromes within range(1, n) is sum of evens and odds\n    # therefore, we only need to count the number of palindromes that are evenly divisible by 2\n    # the number of palindromes that are evenly divisible by 5 is the number of palindromes that are evenly divisible by 10\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if n <= 0:\n        return None\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def is_palindrome(n):\n        if str(n) == str(n)[::-1]:\n            return True\n        return False\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    nums_with_neg_sum = 0\n    for num in arr:\n        if num < 0:\n            num_with_neg_sum = sum(map(int, str(num)))\n            if num_with_neg_sum > 0:\n                nums_with_neg_sum += 1\n    return nums_with_neg_sum\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for number in arr:\n        if number >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    return sum(1 for n in arr if sum_of_digits(n) > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return len([x for x in arr if sum(map(int, str(x))) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def count_nums_with_digits(arr, k):\n        if len(arr) == 0:\n            return 0\n        if arr[0] < 0:\n            return count_nums_with_digits(arr[1:], k)\n        elif k == 1:\n            return arr.count(0) + arr.count(1) + arr.count(2) + arr.count(3) + arr.count(4) + arr.count(5) + arr.count(6) + arr.count(7) + arr.count(8) + arr.count(9)\n        elif k > 1:\n            return count_nums_with_digits(arr[1:], k) + count_nums_with_digits(arr, k - 1)\n        else:\n            return 0\n    return count_nums_with_digits(arr, 2)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return len([x for x in arr if sum([abs(y) for y in str(x)])])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not arr:\n        return 0\n    return len([1 for elem in arr if sum(digit(elem)) > 0])\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if i == 0:\n            continue\n        if arr[i-1] > arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    n = len(arr)\n    if not arr or n==0:\n        return True\n    for i in range(n-1):\n        if arr[i]>arr[i+1]:\n            break\n    else:\n        return True\n    for i in range(n-1):\n        j = i+1\n        while j<n:\n            if arr[j]<arr[i]:\n                break\n            j+=1\n        if j==n:\n            return True\n        arr[j], arr[i] = arr[i], arr[j]\n        for k in range(i,n-1):\n            if arr[k+1]<arr[k]:\n                return False\n    return True"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if not arr:\n        return True\n    # length of the array\n    n = len(arr)\n    # right shift operation\n    right_shift_count = 0\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            break\n        right_shift_count += 1\n    if right_shift_count == n - 1:\n        return True\n    return False\n    \narr = [3, 5, 4, 1, 2]\nprint(move_one_ball(arr))"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    arr.sort()\n    arr.reverse()\n    if len(arr)>0:\n        return True\n    return False"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return True\n    l = len(arr)\n    for i in range(l-1):\n        if arr[i] <= arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return True\n    else:\n        m = arr[0]\n        arr[0] = arr[len(arr)-1]\n        arr[len(arr)-1] = m\n        arr.remove(m)\n        if len(arr) == 0:\n            return True\n        else:\n            for i in range(len(arr) - 1):\n                if arr[i] < arr[i + 1]:\n                    continue\n                else:\n                    return False\n            return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    l = len(arr)\n    #Base cases\n    if l == 0 or l == 1:\n        return True\n    if arr[0] <= arr[1]:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return True\n    i = 0\n    while i < len(arr)-1:\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            if i == 0:\n                break\n            else:\n                i -= 1\n        else:\n            i += 1\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Write your code here\n    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n    nums1 = []\n    nums2 = []\n    for num in lst1:\n        nums1.append(num)\n    for num in lst2:\n        nums2.append(num)\n    #print(nums1)\n    #print(nums2)\n    if len(nums1)!= len(nums2):\n        return \"NO\"\n    nums1.sort()\n    nums2.sort()\n    #print(nums1)\n    #print(nums2)\n    for i in range(len(nums1)):\n        if nums1[i] % 2 == 0:\n            nums1[i] = 0\n        if nums2[i] % 2 == 0:\n            nums2[i] = 0\n        if nums1[i]!= nums2[i]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # lst1 = [int(x) for x in lst1]\n    # lst2 = [int(x) for x in lst2]\n    if lst1 == lst2:\n        return \"YES\"\n    for i in range(0, len(lst1)):\n        if lst1[i] % 2!= 0:\n            if lst2[i] % 2!= 0:\n                return \"NO\"\n            else:\n                lst2[i] -= 1\n    for i in range(0, len(lst1)):\n        if lst1[i]!= lst2[i]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # TODO: implement this function.\n    \n    if len(lst1)!= len(lst2):\n        return 'NO'\n    \n    for i in range(len(lst1)):\n        lst1[i], lst2[i] = lst2[i], lst1[i]\n    \n    return 'YES' if lst1 == list(range(0, len(lst1), 2)) else 'NO'\n    \nif __name__ == \"__main__\":\n    \n    print(\"Test 1:\", exchange([1, 2, 3, 4], [1, 2, 3, 4]))\n    print(\"Test 2:\", exchange([1, 2, 3, 4], [1, 5, 3, 4]))"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # TODO: Problem 2\n    num1 = 0\n    num2 = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            num1 += 1\n    for j in range(len(lst2)):\n        if lst2[j] % 2 == 0:\n            num2 += 1\n    if num1 == len(lst1) or num2 == len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # handle trivial cases\n    if lst1 == lst2:\n        return \"YES\"\n    if lst2[0] % 2 == 0:\n        return \"NO\"\n    for i in range(len(lst1)):\n        lst2[0] += lst1[i]\n        lst1[i] = lst2[0]\n        if lst1[i] % 2 == 0:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    \n    evens = 0\n    odds = 0\n    \n    for i in lst1:\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    \n    for j in lst2:\n        if j % 2 == 0:\n            evens -= 1\n        else:\n            odds -= 1\n    \n    if odds >= 1:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Your code here\n    if lst1 == lst2:\n        return \"YES\"\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            return \"NO\"\n        if lst2[i] % 2 == 1:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # [1, 2, 3, 4] -> 1\n    # [1, 5, 3, 4] -> NO\n    # [1, 2, 3, 4] -> 1\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    # [1, 2, 3, 4] -> 2\n    # [1, 2, 3, 4] -> 4\n    "
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst1 = list(lst1)\n    lst2 = list(lst2)\n    for x in lst2:\n        lst1.remove(x)\n        for x in lst1:\n            if x % 2!= 0:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = {}\n    for char in test.split():\n        if char not in result:\n            result[char] = 1\n        else:\n            result[char] += 1\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    \n    # Using dict comprehension\n    # O(n) time complexity\n    # O(n) space complexity\n    \n    histogram = {ch: test.count(ch) for ch in set(test)}\n    \n    return histogram"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    # Split the string into a list of words\n    words = test.split()\n    \n    # Count the frequency of each letter in the list\n    letter_freq = {}\n    for letter in words:\n        if letter in letter_freq:\n            letter_freq[letter] += 1\n        else:\n            letter_freq[letter] = 1\n    \n    # Loop through the dictionary and find the max frequency\n    max_freq = 0\n    max_letters = []\n    for key, value in letter_freq.items():\n        if value > max_freq:\n            max_freq = value\n            max_letters.clear()\n            max_letters.append(key)\n        elif value == max_freq:\n            max_letters.append(key)\n    \n    return {'max_freq': max_freq,'max_letters': max_letters}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    return_dict = {}\n    for letter in test:\n        if letter in return_dict:\n            return_dict[letter] += 1\n        else:\n            return_dict[letter] = 1\n    return return_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    # Write your code here\n    if test == '':\n        return {}\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if test == '':\n        return {}\n    else:\n        hist = {}\n        for letter in test:\n            hist[letter] = hist.get(letter, 0) + 1\n        return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    test = test.split()\n    dictionary = {}\n    for element in test:\n        if element in dictionary.keys():\n            dictionary[element] = dictionary[element] + 1\n        else:\n            dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    my_dict = {}\n    for char in test:\n        if char not in my_dict:\n            my_dict[char] = 1\n        else:\n            my_dict[char] += 1\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    list_test = []\n    new_dict = {}\n    test = test.split(' ')\n    for i in test:\n        list_test.append(i)\n    for x in list_test:\n        if x in new_dict.keys():\n            new_dict[x] = new_dict[x] + 1\n        else:\n            new_dict[x] = 1\n    return new_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    dictionary = {}\n    test = test.split(' ')\n    for item in test:\n        if item in dictionary:\n            dictionary[item] += 1\n        else:\n            dictionary[item] = 1\n    return dictionary\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    x = s.replace(c, \"\")\n    rev = x[::-1]\n    if x.replace(c, \"\") == rev:\n        return (rev,True)\n    else:\n        return (rev,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    r = c[::-1]\n    s = s.replace(c, '')\n    s = s.replace(r, '')\n    if s[::-1] == s:\n        return (s, True)\n    else:\n        return (s, False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    c_list = list(c)\n    s_list = list(s)\n    c_len = len(c)\n    s_len = len(s)\n    for i in range(s_len):\n        if s_list[i] in c_list:\n            s_list.pop(i)\n            s_len = len(s_list)\n    if s_list == c_list[::-1]:\n        return (\"\".join(s_list),True)\n    else:\n        return (\"\".join(s_list),False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    #write your solution here\n    return (s.replace(c,''),s.translate(None,c))\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    assert isinstance(s, str)\n    assert isinstance(c, str)\n    if c == '':\n        return s, True\n    n = len(s)\n    for i in range(n):\n        if s[i] == c[0]:\n            #we have a match!\n            #let's try to delete the first character in c\n            s = s[:i] + s[i+1:]\n            return reverse_delete(s, c[1:])\n    return s, False\n    \nif __name__ == '__main__':\n    s = \"abcdef\"\n    c = \"b\"\n    print(reverse_delete(s,c))"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    s = list(s)\n    c = list(c)\n    i = 0\n    j = len(c) - 1\n    while i < len(s):\n        if s[i] == c[j]:\n            s.pop(i)\n            j = j - 1\n        i = i + 1\n    if j == -1:\n        return (\"\".join(s), True)\n    else:\n        return (\"\".join(s), False)\n    pass\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    temp = ''\n    for i in s:\n        if i in c:\n            temp = temp + ''\n        else:\n            temp = temp + i\n    if temp == temp[::-1]:\n        return (temp, True)\n    else:\n        return (temp, False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    s_copy = s\n    for c_copy in c:\n        s_copy = s_copy.replace(c_copy, \"\")\n    return (s_copy, s_copy == s_copy[::-1])\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert type(s) == str\n    assert type(c) == str\n    assert len(s) > 0\n    assert len(c) > 0\n    if not all(elem in s for elem in c):\n        print('Wrong data')\n    else:\n        for elem in c:\n            if elem in s:\n                s = s.replace(elem, '')\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s, False)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # your code here\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #we will use the list of strings to store the output of odd_count\n    #in the form of a list of strings\n    lst_output = []\n    #loop over the list of strings in lst\n    for i in lst:\n        #create an empty string for the output\n        output = \"\"\n        #loop over the characters in i\n        for j in i:\n            #if the character is a digit add 1 to output if the int(j)\n            #is odd\n            if j.isdigit():\n                if int(j) % 2!= 0:\n                    output = output + \"1 \"\n                else:\n                    output = output + \"0 \"\n        #add the output to the list of strings\n        lst_output.append(output)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    output = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit)%2 == 1:\n                count += 1\n        output.append(count)\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [\"the number of odd elements \" + str(count_odd(lst[i])) + \" of the \" + \"string \" + str(i+1) + \" of the \" + \"input.\" for i in range(len(lst))]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # index = 0\n    # while index < len(lst):\n    #     for x in lst[index]:\n    #         if int(x) % 2!= 0:\n    #             counter += 1\n    #     lst.append(counter)\n    #     counter = 0\n    #     index += 1\n    # return lst\n    return [f\"the number of odd elements {''.join(map(str, lst))}n the str{''.join(map(str, lst))} of the {''.join(map(str, lst))}nput.\"]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return [\"the number of odd elements \"+str(len([i for i in lst[k] if int(i)%2==1]))+\n        \"n the str\"+str(k+1)+\" of the \"+str(k+1)+\"nput.\" for k in range(len(lst))]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # I've started the solution but I don't know how to proceed!\n    answers = []\n    for i in lst:\n        answer = 0\n        for j in i:\n            if j % 2 == 1:\n                answer += 1\n        answers.append(answer)\n    return answers\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return [\"the number of odd elements \"+str(len([i for i in j if int(i) % 2!= 0]))+\"n the str\"+str(len(j))+\"ng \"+str(len(j))+\"of the \"+str(len(j))+\"input.\" for j in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Create a list to store all the strings\n    list_of_strings = []\n    # Create a list to store the number of odd digits in each string\n    odd_count_list = []\n    # Check the odd_count_list to see if it's empty\n    if len(odd_count_list) == 0:\n        # Populate the list_of_strings with the strings passed\n        for i in lst:\n            list_of_strings.append(i)\n        # Iterate through the list_of_strings to populate the odd_count_list\n        for j in list_of_strings:\n            odd_count_list.append(0)\n            for k in j:\n                if int(k) % 2!= 0:\n                    odd_count_list[-1] += 1\n    # Check the odd_count_list to see if it's not empty\n    if len(odd_count_list)!= 0:\n        # Iterate through the list_of_strings and populate the odd_count_list\n        for j in list_of_strings:\n            odd_count_list.append(0)\n            for k in j:\n                if int(k) % 2!= 0:\n                    odd_count_list[-1] += 1\n    # Create a list to store the strings where the odd_count_list is non-zero\n    list_of_non_zero = []\n    # Check the odd_count_list to see if it's non-zero\n    if sum(odd_count_list)!= 0:\n        # Iterate through the odd_count_list\n        for j in odd_count_list:\n            # Check to see if the number of odd digits is non-zero\n            if j!= 0:\n                # Populate the list_of_non_zero with the strings where the odd_count_list is non-zero\n                list_of_non_zero.append(j)\n    # Return the list_of_non_zero\n    return list_of_non_zero\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for i in lst:\n        for j in i:\n            if int(j) % 2 == 1:\n                count += 1\n    return list(map(lambda x: \"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count,len(x),len(x),x),lst))\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [\"the number of odd elements \" + str(sum(int(i)%2 for i in lst[0])) + \"n the str\" + str(n) + \"ng \" + str(n) + \" of the \" + \"input.\" for n in range(1, len(lst)+1)]\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # iterate through the array, get the running sum.\n    # then iterate through the array, if the running sum is less than the target\n    # value, then we can decrement the sum by the sum and decrement the index\n    # so that the target is not exceeded.\n    # O(n) time\n    # O(1) space\n    # if the running sum is greater than the target, then we will need to iterate\n    # through the remaining values and go to the next index.\n    # O(n) time\n    # O(1) space\n    running_sum = 0\n    index = 0\n    for n in nums:\n        running_sum += n\n        while running_sum >= target:\n            running_sum -= nums[index]\n            index += 1\n    return running_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    current_sum = 0\n    min_sum = float(\"inf\")\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    start = 0\n    end = 0\n    sub_sum = 0\n    min_sum = 0\n    for end in range(len(nums)):\n        sub_sum = sub_sum + nums[end]\n        if sub_sum < nums[end]:\n            sub_sum = nums[end]\n        if min_sum == 0:\n            min_sum = sub_sum\n        elif sub_sum < min_sum:\n            min_sum = sub_sum\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not nums: return 0\n    curr = minSum = nums[0]\n    for i in nums[1:]:\n        curr += i\n        if curr < minSum:\n            minSum = curr\n        if curr < 0: curr = 0\n    return minSum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(nums) == 0:\n        return 0\n    # for the first element, find the smallest subarray\n    total = 0\n    min_sum = nums[0]\n    for num in nums:\n        total += num\n        min_sum = min(min_sum, total)\n        if total < 0:\n            total = 0\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    total = sum(nums)\n    min_sum = float(\"inf\")\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_sum = sum(nums[i:j+1])\n            if sub_sum <= total - sub_sum:\n                min_sum = min(min_sum, sub_sum)\n    return min_sum\n    "
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not nums:\n        return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = len(nums)\n    min_sums = float('inf')\n    for i in range(1, n + 1):\n        sum_ = 0\n        for j in range(i - 1, n):\n            sum_ += nums[j]\n            min_sums = min(min_sums, sum_)\n    return min_sums\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    curr_sum = 0\n    curr_min = None\n    for n in nums:\n        curr_sum += n\n        if curr_min is None or curr_sum < curr_min:\n            curr_min = curr_sum\n    return curr_min\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # The idea is to find the maximum and minimum vertical value per row.\n    # Then we can calculate the number of times we need to lower buckets\n    # by subtracting the minimum and adding the maximum value of all rows\n    # and then we can use math.ceil to round up the result.\n    # Finally we return the product of the number of buckets and the number of times.\n    height = len(grid)\n    width = len(grid[0])\n    max_heights = [0] * height\n    min_heights = [0] * height\n    for i in range(height):\n        max_heights[i] = -1\n        min_heights[i] = width\n        for j in range(width):\n            if grid[i][j] == 1:\n                max_heights[i] = j\n                min_heights[i] = j\n    \n    for i in range(height):\n        for j in range(width):\n            if grid[i][j] == 1:\n                max_heights[i] = max(max_heights[i], j)\n                min_heights[i] = min(min_heights[i], j)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    def check_bucket_size(grid):\n        \"\"\"\n        Given a 2D grid, find the total number of buckets that can be used to empty the grid\n        \"\"\"\n        x_len = len(grid[0])\n        y_len = len(grid)\n        \n        bucket_size = 0\n        for row in grid:\n            for cell in row:\n                if cell == 0:\n                    bucket_size += 1\n        return bucket_size\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def calculate_max_height(grid):\n        return max([sum(row) for row in grid])\n    \n    def find_neighbour(grid, row, col, max_height):\n        # find all the neighbours to the current node\n        # each neighbour should be of the form (row, col) where row and col are indexes of the grid\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def dfs(r, c, bucket):\n        # Edge case\n        if r >= R or c >= C:\n            return 0\n        \n        # Base case\n        if grid[r][c] == 0:\n            return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not grid or not grid[0]:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    grid_size = len(grid)\n    wells = []\n    for i in range(grid_size):\n        for j in range(grid_size):\n            if grid[i][j]:\n                wells.append((i, j, grid[i][j]))\n    wells.sort(key=lambda well: well[0])\n    total_volume = 0\n    for well in wells:\n        volume = 0\n        i, j, count = well\n        while count > 0:\n            if total_volume + volume <= capacity:\n                total_volume += volume\n                volume += 1\n                count -= 1\n            else:\n                volume -= 1\n                total_volume -= 1\n        well[2] -= volume\n    return total_volume\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def fill_grid(grid, capacity):\n        from collections import deque\n        def get_neighbours(row, col):\n            nonlocal grid\n            r, c = row, col\n            neighbours = []\n            if r > 0: neighbours.append((r-1, c))\n            if c > 0: neighbours.append((r, c-1))\n            if r < len(grid)-1: neighbours.append((r+1, c))\n            if c < len(grid[0])-1: neighbours.append((r, c+1))\n            return neighbours\n        def get_vertices(row, col):\n            nonlocal grid\n            r, c = row, col\n            vertices = []\n            if r > 0: vertices.append((r-1, c))\n            if c > 0: vertices.append((r, c-1))\n            if r < len(grid)-1: vertices.append((r+1, c))\n            if c < len(grid[0])-1: vertices.append((r, c+1))\n            return vertices\n        def get_well_area(row, col):\n            nonlocal grid\n            r, c = row, col\n            return grid[r][c]\n        def get_well_area_value(row, col):\n            nonlocal grid\n            r, c = row, col\n            return grid[r][c]\n        \n        def fill_well(row, col):\n            nonlocal grid\n            queue = deque([(row, col)])\n            while queue:\n                r, c = queue.popleft()\n                value = get_well_area_value(r, c)\n                if value > 1: \n                    get_well_area_value(r, c) -= 1\n                    continue\n                neighbours = get_neighbours(r, c)\n                for neighbour in neighbours:\n                    if get_well_area_value(neighbour[0], neighbour[1]) == 0:\n                        get_well_area_value(neighbour[0], neighbour[1]) = value\n                        queue.append(neighbour)\n        \n        def fill_wells():\n            nonlocal grid\n            for i in range(len(grid)):\n                for j in range(len(grid[0])):\n                    if grid[i][j] == 1:\n                        fill_well(i, j)\n                        \n        fill_wells()\n        \n        def dfs(row, col):\n            nonlocal grid, capacity, empty\n            if row < 0 or col < 0: return 0\n            if row >= len(grid) or col >= len(grid[0]): return 0\n            if grid[row][col] == 0: return 0\n            \n            if grid[row][col] > capacity: \n                grid[row][col] -= capacity\n                return dfs(row, col-1) + dfs(row, col+1) + dfs(row-1, col) + dfs(row+1, col) + capacity\n            else: \n                empty += grid[row][col]\n                return dfs(row, col-1) + dfs(row, col+1) + dfs(row-1, col) + dfs(row+1, col)\n        \n        empty = 0\n        # dfs(0, 0)\n        # return empty\n        \n        def bfs(row, col):\n            from collections import deque\n            queue = deque()\n            queue.append((row, col))\n            while queue:\n                r, c = queue.popleft()\n                value = get_well_area_value(r, c)\n                if value > 1: \n                    get_well_area_value(r, c) -= 1\n                    continue\n                neighbours = get_neighbours(r, c)\n                for neighbour in neighbours:\n                    if get_well_area_value(neighbour[0], neighbour[1]) == 0:\n                        get_well_area_value(neighbour[0], neighbour[1]) = value\n                        queue.append(neighbour)\n        \n        bfs(0, 0)\n        return empty\n        \n    n = len(grid)\n    m = len(grid[0])\n    if n == 0 or m == 0: return 0\n    \n    def get_buc"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    def valid(grid, row, col):\n        return 0 <= row < len(grid) and 0 <= col < len(grid[0])\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    d = set()\n    for row in grid:\n        for x in row:\n            if x not in d:\n                d.add(x)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # print(grid)\n    # print(len(grid))\n    # print(len(grid[0]))\n    \n    # Check for negative values, because it makes no sense\n    # if not grid or not grid[0] or not bucket_capacity:\n    #     return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def binary_value(num):\n        return sum(1 for i in bin(num)[2:] if i == '1')\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count(\"1\"), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    def bin_str(n):\n        return bin(n).replace('0b', '')\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    # return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n    return sorted(arr, key=lambda x: (-bin(x)[2:].count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # print(arr)\n    # return sorted(arr, key=lambda x: str(bin(x))[2:].count('1'))\n    # return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    # return sorted(arr, key=lambda x: (str(x)[::-1].count('1'), x))\n    # return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x, str(x)[::-1].count('1')))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if not s:\n        return []\n    \n    s = s.split()\n    words = []\n    for word in s:\n        consonants = 0\n        for letter in word:\n            if letter.lower() in \"aeiouy\":\n                consonants += 1\n        if consonants == n:\n            words.append(word)\n    return words"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not s:\n        return []\n    words = s.split(' ')\n    consonants = consonants_in_string(s)\n    output = []\n    for word in words:\n        if len(word) < n:\n            continue\n        if count_consonants(word) == n:\n            output.append(word)\n    return output\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    words = []\n    s = s.lower().replace(' ', '')\n    if len(s) == 0:\n        return words\n    for word in s.split():\n        if len(word) < n:\n            continue\n        num_vowels = 0\n        for char in word:\n            if char not in VOWELS:\n                num_vowels += 1\n            else:\n                break\n        if num_vowels == n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(s) == 0:\n        return []\n    if n > len(s):\n        return []\n    \n    words = [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)]\n    return [word for word in words if len(set(word)) == n]\n    \nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\nprint(select_words(\"Hello my friend\", 4))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(s) == 0:\n        return []\n    words = s.split(\" \")\n    words_with_right_length = []\n    for word in words:\n        if len(word) == n:\n            words_with_right_length.append(word)\n    return words_with_right_length\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    words = s.split(\" \")\n    res = []\n    for word in words:\n        if len(word) > n:\n            continue\n        if num_consonants(word) == n:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    words = []\n    for word in s.split():\n        if len(word) > n:\n            continue\n        if len(set(word)) == n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    words = []\n    s = s.lower()\n    for word in s.split():\n        if word.lower().strip(\"!?.,;:()\") and len(word) > n:\n            if check_consonants(word, n):\n                words.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    s = s.split(\" \")\n    print(s)\n    arr = []\n    for i in s:\n        if count_consonants(i) == n:\n            arr.append(i)\n    return arr\n    \ndef main():\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return [word for word in s.split(\" \") if len(word) == n and not (any([char.isdigit() for char in word]))]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    closest_vowel = \"\"\n    for index, letter in enumerate(word):\n        if letter.lower() in \"aeiou\" and word[index + 1] not in \"aeiou\":\n            closest_vowel = word[index]\n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    last_vowel = ''\n    for i in range(1, len(word) - 1):\n        if word[i].isalpha() and not word[i - 1].isalpha() and not word[i + 1].isalpha():\n            last_vowel = word[i]\n    return last_vowe"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(word) < 2:\n        return ''\n    vowels = 'aeiou'\n    vowel_indexes = [i for i in range(len(word)) if word[i] in vowels]\n    \n    consonants = ['q', 'w', 'r', 't', 'y', 'p','s', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n','m']\n    consonant_indexes = [i for i in range(len(word)) if word[i] in consonants]\n    \n    if vowel_indexes[-1] == consonant_indexes[-1]:\n        return ''\n    \n    for i in range(len(consonant_indexes)):\n        if vowel_indexes[-1] > consonant_indexes[i]:\n            return word[consonant_indexes[i]]\n    \n    return ''\n        \nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))\n    print(get_closest_vowel(\"dyg\"))\n    print(get_closest_vowel(\"c\"))\n    print(get_closest_vowel(\"\"))\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"yogurta\"))\n    print(get_closest_vowel(\"yogurtz\"))\n    print(get_closest_vowel(\"yogurtas\"))\n    print(get_closest_vowel(\"yogurtab\"))\n    print(get_closest_vowel(\"yogurtac\"))\n    print(get_closest_vowel(\"yogurtadan\"))\n    print(get_closest_vowel(\"yogurtadz\"))\n    print(get_closest_vowel(\"yogurtadc\"))\n    print(get_closest_vowel(\"yogurtadca\"))\n    print(get_closest_vowel(\"yogurtadcab\"))\n    print(get_closest_vowel(\"yogurtadcabb\"))\n    print(get_closest_vowel(\"yogurtadcabc\"))\n    print(get_closest_vowel(\"yogurtadcacb\"))\n    print(get_closest_vowel(\"yogurtadcacbb\"))\n    print(get_closest_vowel(\"yogurtadcacbba\"))\n    print(get_closest_vowel(\"yogurtadcacbbaa\"))\n    print(get_closest_vowel(\"yogurtadcacbbaab\"))\n    print(get_closest_vowel(\"yogurtadcacbbaabz\"))\n    print(get_closest_vowel(\"yogurtadcacbbaabq\"))\n    print(get_closest_vowel(\"yogurtadcacbbaabr\"))\n    print(get_closest_vowel(\"yogurtadcacbbaabt\"))\n    print(get_closest_vowel(\"yogurtadcacbbaabv\"))\n    print(get_closest_vowel(\"yogurtadcacbbaabw\"))\n    print(get_closest_vowel(\"yogurtadcacbbaabx\"))\n    print(get_closest_vowel(\"yogurtadcacbbaaby\"))\n    print(get_closest_vowel(\"yogurtadcacbbaabz\"))\n    print(get_closest_vowel(\"yogurtadcacbbaaca\"))\n    print(get_closest_vowel(\"yogurtadcacbbaacb\"))\n    print(get_closest_vowel("
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    \n    # your code here\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    vowels = set(\"aeiou\")\n    \n    if not word:\n        return \"\"\n    \n    for i in range(len(word)-1):\n        if word[i].lower() in vowels and word[i+1].lower() not in vowels:\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Given a string of words, return the closest vowel to the right of a given\n    # starting position of a word. If there's no vowels, return an empty string\n    \n    # Method 1\n    # Start at the end and work backwards to find the closest vowel\n    # If there is no vowels in the middle, return an empty string\n    if 'a' in word or 'e' in word or 'i' in word or 'o' in word or 'u' in word:\n        return word[::-1]\n    else:\n        return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    word = list(word)\n    n = len(word)\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    i = 0\n    while i < n-1:\n        if word[i].lower() not in vowels:\n            i += 1\n        else:\n            return word[i]\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not word:\n        return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    vowels = \"aeiou\"\n    word = list(word)\n    found = False\n    for i, letter in enumerate(word):\n        if letter not in vowels:\n            continue\n        else:\n            if word[i+1] not in vowels:\n                return letter\n            else:\n                found = True\n    if not found:\n        return \"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return 'Yes' if lst[0].count('(') == lst[0].count(')') and \\\n        lst[1].count('(') == lst[1].count(')') else 'No'"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # time: O(n)\n    # space: O(n)\n    for i in range(len(lst)):\n        if lst[i] not in ['(', ')']:\n            return 'No'\n        if lst[i] == '(':\n            lst[i] = ')'\n        else:\n            lst[i] = '('\n        \n        if not lst:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # look at all strings in list\n    for i in range(len(lst) - 1):\n        # if we have more open than closed\n        if lst[i].count('(') > lst[i].count(')'):\n            return 'No'\n        # if the first string has more open than closed\n        if lst[0].count('(') > lst[0].count(')'):\n            # if second string has more open than closed\n            if lst[1].count('(') > lst[1].count(')'):\n                # check if both have equal number of open\n                if lst[0].count('(') == lst[1].count('('):\n                    return 'Yes'\n            # if the first two strings have different number of open\n            else:\n                # check if the second string has the same number of open as the first\n                if lst[0].count('(') == lst[1].count('('):\n                    return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return 'Yes' if is_balanced(lst) else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return \"Yes\" if is_balanced(lst[0] + lst[1]) else \"No\""
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # I don't know. I thought it was easy, but now I am in a twist.\n    def match(lst, i, j):\n        if i == j:\n            return 'Yes' if lst[i] == '(' else 'No'\n        else:\n            return match(lst, i + 1, j) if lst[i] == '(' else match(lst, i, j - 1)\n    return match(lst, 0, len(lst) - 1)\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return 'Yes' if is_good(lst) else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    open_parenthesis = '('\n    close_parenthesis = ')'\n    open_parenthesis_count = 0\n    close_parenthesis_count = 0\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # use a heap to store the k largest elements\n    # time complexity is O(n + klogk)\n    # space complexity is O(k)\n    max_heap = MaxHeap(k)\n    for num in arr:\n        max_heap.insert(num)\n    return max_heap.max_heap_arr\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not arr or len(arr) == 0: return []\n    low, high = 0, len(arr) - 1\n    while low < high:\n        pivot = partition(arr, low, high)\n        if pivot == k - 1: return arr[:k]\n        elif pivot > k - 1: high = pivot - 1\n        else: low = pivot + 1\n    return arr[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(arr, reverse=True)[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # The time complexity is O(n + k log n) and the space complexity is O(n)\n    if len(arr) < k:\n        return arr\n    k_largest = []\n    for i in range(k):\n        while arr:\n            max_element = max(arr)\n            k_largest.append(max_element)\n            arr.remove(max_element)\n    return k_largest"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    return sorted(arr)[::-1][:k]\n    \nprint(maximum([-3, -4, 5], 3)) # [-4, -3, 5]\nprint(maximum([4, -4, 4], 2)) # [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) # [2]"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if k < 1:\n        return []\n    if k == len(arr):\n        return arr[:k]\n    return heapq.nlargest(k, arr)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(arr, reverse=True)[:k]\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    # for i, v in enumerate(lst):\n    #     if v % 2 == 0 and i % 2 == 1:\n    #         return v\n    # return 0\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            continue\n        else:\n            sum += lst[i]\n    return sum"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    return sum([lst[i] for i in range(0, len(lst)) if i % 2 == 0])\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n    \n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    # i am going to return 0 since there are no odd numbers in even positions\n    # if even length list \n    if len(lst) % 2 == 0:\n        return 0\n    # if odd length list\n    else:\n        # i am going to set a variable to 0\n        sum = 0\n        # i am going to iterate through the list using a for loop\n        for i in lst:\n            # i am going to check if the position of the i in the list is even and if it is then it will add i to the sum\n            if lst.index(i) % 2 == 0:\n                sum += i\n    # return sum\n    return sum\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            odd_sum += lst[i]\n    return odd_sum\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    even_sum = 0\n    for i in range(0, len(lst)):\n        if (i % 2 == 0):\n            even_sum += lst[i]\n    return even_sum"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    even = []\n    odd = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    return sum(odd)\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    even_odd = []\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    total_sum = 0\n    \n    for index, num in enumerate(lst):\n        if (index % 2)!= 0 and num % 2!= 0:\n            total_sum += num\n            \n    return total_su"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sum(x if len(str(x)) <= 2 else int(str(x)[:2]) for x in arr[:k])\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    left = arr[:k]\n    sum_of_nums = sum(left)\n    return sum_of_nums\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return sum(x // 100 + x % 100 // 10 + x % 10 for x in arr[:k])\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    hash_map = defaultdict(int)\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(k):\n        sum += arr[i] % 10\n        sum += arr[i] // 10\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not arr:\n        return 0\n    if k <= 0:\n        return 0\n    if k > len(arr):\n        return sum(arr)\n    return sum(i for i in arr[:k] if len(str(i)) <= 2)\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if not arr or not k:\n        return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    l, r = 0, k\n    while r < len(arr):\n        while r < len(arr) and arr[r] > 99:\n            r += 1\n        l = r\n        while r < len(arr) and arr[r] < 100:\n            r += 1\n        r -= 1\n        arr[l] = arr[l] + arr[r]\n    return sum(arr[:k])"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    arr = arr[:k]\n    for elem in arr:\n        if len(str(elem)) > 2:\n            arr.remove(elem)\n    return sum(arr)\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    arr_copy = arr[:k]\n    arr_copy.sort()\n    return sum(arr_copy[-2:])"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(filter(lambda x: x % 2!= 0, collatz(n)))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # define the list of odd numbers\n    odd_numbers = []\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # return [1] # 1 is special in the collatz sequence.\n    result = []\n    while n not in result:\n        result.append(n)\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = 3*n + 1\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert n > 0, \"n must be a positive integer.\"\n    odd_collatz_seq = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        odd_collatz_seq.append(n)\n    odd_collatz_seq.sort()\n    return odd_collatz_seq\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: x % 2!= 0, collatz_seq(n)))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    collatz = []\n    while n!= 1:\n        collatz.append(n)\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n    collatz.append(1)\n    return sorted(list(set(collatz)))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # My Solution: \n    odds = [1]\n    n = collatz(n)\n    return sorted(n)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: x%2 == 1, collatz(n)))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    assert n > 0, \"n must be a positive integer\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    try:\n        date = date.split('-')\n        d = {'1':31,'2':29,'3':31,'4':30,'5':31,'6':30,'7':31,'8':31,'9':30,'10':31,'11':30,'12':31}\n        if len(date) < 3:\n            return False\n        if int(date[0]) > 12 or int(date[0]) < 1:\n            return False\n        if int(date[0]) in (1,3,5,7,8,10,12):\n            if int(date[1]) < 1 or int(date[1]) > d[date[0]]:\n                return False\n        elif int(date[0]) in (4,6,9,11):\n            if int(date[1]) < 1 or int(date[1]) > 30:\n                return False\n        elif int(date[0]) == 2:\n            if int(date[1]) < 1 or int(date[1]) > 29:\n                return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    def valid_day(day):\n        return day.isdigit() and 1<=int(day)<=31\n    def valid_month(month):\n        return month.isdigit() and 1<=int(month)<=12\n    def valid_year(year):\n        return year.isdigit() and int(year)>=1\n    def valid_date(date):\n        months=set([1,3,5,7,8,10,12])\n        months2=set([4,6,9,11])\n        days=[31,28,31,30,31,30,31,31,30,31,30,31]\n        year,month,day=date.split('-')\n        if len(year)!=4 or valid_year(year)==False:\n            return False\n        if len(month)!=2 or valid_month(month)==False:\n            return False\n        if int(month) not in months and int(month) not in months2:\n            return False\n        if int(month)==2 and valid_day(day)==False:\n            return False\n        if valid_day(day)==False:\n            return False\n        return True\n    return valid_date(date)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not date:\n        return False\n    m,d,y = map(int,date.split('-'))\n    if m in {1,3,5,7,8,10,12} and d in range(1,31):\n        return True\n    elif m in {4,6,9,11} and d in range(1,30):\n        return True\n    elif m == 2 and d in range(1,29):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    #dd-mm-yyyy\n    d = date.split('-')\n    if len(d)!= 3:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    months_with_30_days = [4,6,9,11]\n    months_with_31_days = [1,3,5,7,8,10,12]\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # check if the input is empty string\n    if not date:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    if not date:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    try:\n        list_ = date.split('-')\n        print(list_)\n        for i in range(len(list_)):\n            if not is_valid_day(list_[i]) and len(list_[i])!= 2:\n                return False\n            if not is_valid_month(list_[i]) and len(list_[i])!= 2:\n                return False\n            if not is_valid_year(list_[i]):\n                return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if txt.count(' ') >= 1:\n        x = txt.split()\n    elif txt.count(',') >= 1:\n        x = txt.split(',')\n    else:\n        x = txt.lower()\n        a = [x[i] for i in range(0, len(x)) if ord(x[i]) % 2!= 0]\n        return len(a)\n    return x\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return re.split(r'\\s+|,', txt)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    return\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    lst = []\n    for i in txt.split():\n        lst.append(i)\n    return lst\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Your code here\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(set(lst)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    sorted_lst = sorted(lst)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if len(lst) == 0 or len(lst) == 1:\n        return True\n    else:\n        is_sorted = True\n        for i in range(len(lst)-1):\n            if lst[i] == lst[i+1]:\n                is_sorted = False\n            if lst[i] > lst[i+1]:\n                is_sorted = False\n        return is_sorted\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # def test_order(lst):\n    #     if lst == sorted(lst):\n    #         return True\n    #     else:\n    #         return False\n    # return test_order(lst)\n    def test_order(lst):\n        new_lst = sorted(lst)\n        if lst == new_lst:\n            return True\n        else:\n            return False\n    return test_order(lst)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    l = []\n    for i in lst:\n        if i not in l:\n            l.append(i)\n    if l == sorted(l):\n        return True\n    return False\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    lst = sorted(lst)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #Return True if list is sorted\n    #Return False if list is not sorted\n    #Return False if list has more than one duplicate\n    #Return True if list only has one instance of each element\n    #Return True if all instances of list are identical\n    #Assume only integers\n    #Assume no negative numbers\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if len(lst) == 1:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return lst == sorted(lst)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # loop through list of nums and compare to the next num in list\n    # if next num in list is bigger, return false\n    \n    # compare if each element in list is == to each other element in the list\n    # if it is not, return True, if it is, return False\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # https://app.codility.com/demo/results/training8YATO5-YHH/\n    # https://app.codility.com/demo/results/trainingXPYWMB-7KB/\n    if interval1[1] <= interval2[0] or interval1[0] >= interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    start_1, end_1 = interval1\n    start_2, end_2 = interval2\n    if start_1 > end_1 or start_2 > end_2:\n        return \"NO\"\n    elif end_1 < start_2 or end_2 < start_1:\n        return \"NO\"\n    elif end_1 <= start_2:\n        if end_2 < start_1:\n            return \"NO\"\n        else:\n            return \"YES\"\n    elif end_2 <= start_1:\n        if end_1 < start_2:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        if end_1 - start_2 > 0:\n            if end_2 - start_1 > 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if end_2 - start_1 > 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    start1, end1 = interval1[0], interval1[1]\n    start2, end2 = interval2[0], interval2[1]\n    len_int = max(start1, start2) - min(end1, end2) + 1\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return \"YES\" if (interval1[1] - interval1[0] + interval2[1] - interval2[0]) % 2 else \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # TODO: implement this function\n    #print(interval1, interval2)\n    if not interval1 or not interval2:\n        return \"NO\"\n    else:\n        if not(interval1[0] > interval2[0] or interval1[1] < interval2[1]):\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # interval1 = (start1, end1)\n    # interval2 = (start2, end2)\n    # if end1 <= start2 or end2 <= start1:\n    #     return \"NO\"\n    # else:\n    #     return \"YES\"\n    \n    # # The most common solution\n    # if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n    #     return \"NO\"\n    # if (interval1[0] <= interval2[0] and interval1[1] >= interval2[0] or\n    #         interval1[0] <= interval2[1] and interval1[1] >= interval2[1]) or \\\n    #         (interval2[0] <= interval1[0] and interval2[1] >= interval1[0] or\n    #         interval2[0] <= interval1[1] and interval2[1] >= interval1[1]):\n    #     return \"YES\"\n    # else:\n    #     return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    intersection = [number for number in interval1 if number in interval2]\n    if len(intersection)!= 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # time complexity O(log n)\n    # space complexity O(1)\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        l1 = interval1[1] - interval1[0] + 1\n        l2 = interval2[1] - interval2[0] + 1\n        start = interval2[0]\n        end = interval2[1]\n        while end < interval1[0]:\n            start += 1\n            end += 1\n        while end < interval1[1]:\n            end += 1\n        if end >= interval1[1] and end - start + 1 == l2:\n            return \"YES\"\n        else:\n            return \"NO\"\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    x1, x2 = interval1\n    y1, y2 = interval2\n    # TODO: implement this function.\n    # return \"YES\" or \"NO\"\n    if (x1 < y2 and x2 > y1) or (x1 >= y2 and x2 <= y1):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    start1, end1 = interval1[0], interval1[1]\n    start2, end2 = interval2[0], interval2[1]\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    return \"YES\" if is_prime(abs(start2 - end1)) else \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return None if not arr else \\\n        sum(abs(i) * (-1 if i < 0 else 1) for i in arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not arr:\n        return None\n    \n    signs_product = 1\n    sum_of_magnitudes = 0\n    \n    for i in arr:\n        signs_product *= (-1 if i < 0 else 1)\n        sum_of_magnitudes += abs(i)\n    \n    return sum_of_magnitudes * signs_product\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return None\n    signs = [i for i in arr if i < 0]\n    magnitude = sum(abs(i) for i in arr)\n    return magnitude * prod(signs) if signs else None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return None\n    s = 0\n    for a in arr:\n        s += abs(a)\n    n = 1\n    for a in arr:\n        n *= a / abs(a) if a else 1\n    return s * n\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not arr:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not arr:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return None\n    s = 1\n    for i in arr:\n        s *= i\n    t = 1\n    for i in arr:\n        t *= i // abs(i)\n    return s * t\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not arr:\n        return None\n    sum = 0\n    product = 1\n    for x in arr:\n        sum += abs(x)\n        product *= x // abs(x)\n    return product * sum\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if not arr:\n        return None\n    sum = 0\n    for i in arr:\n        sum += abs(i)\n    mult = 1\n    for i in arr:\n        mult *= i//abs(i)\n    return sum*mult\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Time O(NM^2), where N and M are the number of rows and columns of the grid.\n    # Space O(N)\n    N = len(grid)\n    if N < 2: return []\n    if N == 2 and k == 1: return [grid[0][0], grid[1][0]]\n    if N == 2 and k == 2: return [grid[0][0], grid[1][0], grid[0][1], grid[1][1]]\n    \n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, N):\n        dp[0][i] = dp[0][i - 1] + grid[0][i]\n        dp[i][0] = dp[i - 1][0] + grid[i][0]\n    \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n    \n    if k == 1: return [min(dp[0][j], dp[i][0]) for j in range(N) for i in range(N)]\n    \n    # Building the path with k elements.\n    path = []\n    i, j = 0, 0\n    for _ in range(k):\n        path.append(min(dp[i - 1][j], dp[i][j - 1]))\n        if dp[i][j] < dp[i - 1][j]:\n            i -= 1\n        elif dp[i][j] < dp[i][j - 1]:\n            j -= 1\n        else:\n            i -= 1\n            j -= 1\n    return path\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    n = len(grid)\n    dp = [[math.inf for _ in range(n)] for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + grid[0][i]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Time: O(N * N * k), where N is the number of rows in the grid.\n    # Space: O(N * N * k), where N is the number of rows in the grid.\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    m, n = len(grid), len(grid[0])\n    if k > m + n - 3: return -1\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    n, m = len(grid), len(grid[0])\n    if k > n + m - 2: return []\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if not grid:\n        return []\n    n = len(grid)\n    m = len(grid[0])\n    if k > n + m:\n        return []\n    elif k == 0:\n        return [[]]\n    elif k == 1:\n        return [[x for x in row] for row in grid]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # TODO: implement this function\n    # The grid is represented by a list of lists.\n    # The grid can have any size\n    # The grid is guaranteed to contain only integers from 1 to N * N (N * N is >= 2)\n    # Each cell of the grid contains an integer.\n    # There exists exactly one path of length k from any cell to any other cell\n    # The answer is guaranteed to be unique\n    # The input is guaranteed to be valid\n    \n    return []"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    tribonacci_list = [1, 3]\n    if n == 1:\n        return tribonacci_list\n    elif n == 2:\n        return tribonacci_list[0:2]\n    else:\n        if n % 2 == 0:\n            while len(tribonacci_list) < n + 1:\n                tribonacci_list.append(tribonacci_list[len(tribonacci_list) - 1] + tribonacci_list[len(tribonacci_list) - 2] + tribonacci_list[len(tribonacci_list) - 3])\n            return tribonacci_list\n        else:\n            while len(tribonacci_list) < n + 1:\n                tribonacci_list.append(tribonacci_list[len(tribonacci_list) - 1] + tribonacci_list[len(tribonacci_list) - 2] + tribonacci_list[len(tribonacci_list) - 3])\n            return tribonacci_list\n            "
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n == 0:\n        return [0]\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1,3]\n    odd = []\n    even = [0,1,1]\n    for i in range(n):\n        if i % 2 == 1:\n            odd.append(even[-1])\n            even.append(even[-1] + even[-2])\n        else:\n            even.append(even[-1] + even[-2] + even[-3])\n    return [1] + even + odd\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    \n    def tribonacci(n):\n        \"\"\"Recursive function calculating the tribonacci sequence.\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\n    \n    return [tribonacci(i) for i in range(n+1)]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    l = [1, 3, 2, 8]\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return l\n    else:\n        for i in range(4, n + 1):\n            l.append(l[i - 1] + l[i - 2] + l[i - 3])\n        return l\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    def get_tri(n):\n        \"\"\"Return the nth number of the Tribonacci sequence.\"\"\"\n        if n == 1 or n == 2:\n            return 3\n        else:\n            res = [1, 3, 2]\n            for i in range(3, n + 1):\n                if i % 2 == 0:\n                    res.append(res[i - 1] + (res[i - 2] / 2))\n                else:\n                    res.append(res[i - 1] + res[i - 2] + (res[i - 3] / 2))\n        return res\n    return get_tri(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = []\n    if n == 1:\n        result = [1]\n    elif n == 2:\n        result = [1, 3]\n    elif n == 3:\n        result = [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        while len(result)!= n + 1:\n            if len(result) % 2 == 0:\n                result.append(1 + (result[len(result) - 1]) / 2)\n            else:\n                result.append(result[len(result) - 3] + result[len(result) - 1] + result[len(result) - 2])\n    return result"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 1]\n    else:\n        tri = [3, 1, 2]\n        while len(tri)!= n + 1:\n            if len(tri) % 2 == 0:\n                tri.append(tri[len(tri) - 1] + tri[len(tri) - 3])\n            else:\n                tri.append(tri[len(tri) - 2] + tri[len(tri) - 3] + tri[len(tri) - 1])\n        return tri\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    tribo = [1, 3]\n    \n    if n == 0:\n        return []\n    elif n == 1:\n        return tribo\n    \n    if n % 2 == 0:\n        for i in range(2, n + 1):\n            tribo.append(tribo[i - 2] + tribo[i - 1])\n    else:\n        for i in range(2, n + 1):\n            tribo.append(tribo[i - 2] + tribo[i - 1] + tribo[i])\n        \n    return tribo\n    \nif __name__ == '__main__':\n    import timeit\n    n = 10\n    print(timeit.timeit(\"tri(n)\", setup=\"from __main__ import tri, n\", number=100000))\n    n = 100\n    print(timeit.timeit(\"tri(n)\", setup=\"from __main__ import tri, n\", number=100000))\n    n = 1000\n    print(timeit.timeit(\"tri(n)\", setup=\"from __main__ import tri, n\", number=100000))\n    n = 10000\n    print(timeit.timeit(\"tri(n)\", setup=\"from __main__ import tri, n\", number=100000))\n    n = 50000\n    print(timeit.timeit(\"tri(n)\", setup=\"from __main__ import tri, n\", number=100000)"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    seq = [1, 3]\n    while len(seq) < n + 1:\n        if len(seq) % 2 == 0:\n            seq.append(seq[-1] + seq[-2])\n        else:\n            seq.append(seq[-1] + seq[-2] + seq[-3])\n    return seq"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == 1:\n        return [1, 3, 2]\n    if n == 2:\n        return [1, 3, 2, 8]\n    if n == 3:\n        return [1, 3, 2, 8, 13]\n    else:\n        if n % 2 == 0:\n            return [1, n / 2, 3] + tri(n - 2)\n        else:\n            return [1, (n - 1) / 2, 3] + tri(n - 2) + [1]\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    \n    num_string = str(n)\n    digits = []\n    for char in num_string:\n        if int(char) % 2 == 0:\n            digits.append(0)\n        else:\n            digits.append(int(char))\n    if not digits:\n        return 0\n    else:\n        return int(reduce(lambda x,y: x*y, digits))\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = 1\n    for digit in str(n):\n        if int(digit) % 2!= 0:\n            result *= int(digit)\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numbers = str(n)\n    a = []\n    for i in numbers:\n        if int(i)%2!= 0:\n            a.append(i)\n    if len(a) == 0:\n        return 0\n    else:\n        product = 1\n        for j in a:\n            product *= int(j)\n        return product\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if n < 10:\n        return n\n    else:\n        return digits(n//10) * (n%10)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    result = 1\n    for i in str(n):\n        if int(i) % 2!= 0:\n            result *= int(i)\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code here\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    product = 1\n    for i in str(n):\n        if int(i)%2!= 0:\n            product *= int(i)\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return n // 10 % 10 * n % 10\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return reduce(lambda x, y: x * y, [d for d in str(n) if d % 2 == 1])\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = 1\n    for i in str(n):\n        if int(i) % 2!= 0:\n            result *= int(i)\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # return string.count('[') - string.count(']') >= 1\n    # return string.count('[') - string.count(']') == 1\n    # return string.count('[') - string.count(']') <= 1\n    # print(string.count('['), string.count(']'))\n    return string.count('[') == string.count(']')\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    brackets = []\n    for bracket in string:\n        if bracket in '[({':\n            brackets.append(bracket)\n        else:\n            if not brackets:\n                return False\n            last_bracket = brackets.pop()\n            if bracket == ']' and last_bracket == '[' or \\\n                bracket == ')' and last_bracket == '(' or \\\n                bracket == '}' and last_bracket == '{':\n                continue\n            else:\n                return False\n    return not brackets\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # I think this is a good use of a Stack\n    # We'll use a Stack to add brackets to it until it is balanced\n    # When a closing bracket is reached, we'll pop it off the Stack\n    # We'll check if the Stack is empty, if it is then return false\n    # Otherwise, we'll set a boolean to False and add the opening bracket \n    # to the stack\n    # If the boolean is still False, return false\n    # Otherwise, return True\n    stack = []\n    bracket_dict = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    # Using a for loop, we'll add each bracket to the stack until it is balanced\n    # When a closing bracket is reached, we'll pop it off the Stack and check if it\n    # matches the opening bracket\n    # if it does, then we'll set the boolean to True\n    # Otherwise, we'll set the boolean to False\n    # If the boolean is still False, return False\n    # Otherwise, return True\n    for char in string:\n        if char in bracket_dict:\n            if len(stack) == 0:\n                return False\n            elif stack[len(stack) - 1] == bracket_dict[char]:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(char)\n    return True if len(stack) == 0 else False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    arr = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            arr.append(i)\n        if string[i] == ']':\n            if arr:\n                arr.pop()\n            else:\n                return False\n    if arr:\n        return True\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    bracket_string = string\n    bracket_stack = []\n    if bracket_string == \"\":\n        return False\n    else:\n        while bracket_string[0] == \"[\":\n            bracket_stack.append(bracket_string[0])\n            bracket_string = bracket_string[1:]\n        while bracket_stack:\n            bracket = bracket_stack.pop()\n            if bracket == \"]\" and bracket_string[0] == \"[\":\n                return True\n            elif bracket == \"]\" and bracket_string[0] == \"]\":\n                return True\n            elif bracket == \"]\" and bracket_string[0] == \"[\":\n                return False\n            else:\n                bracket_string = bracket_string[1:]\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    for i in string:\n        if i == '[':\n            count += 1\n        if i == ']':\n            count -= 1\n        if count < 0:\n            return False\n    if count == 0:\n        return True\n    else:\n        return False\n    \n    \ndef find_k(string):\n    '''\n    Create a function that takes a string as input and return the k that represents the length of \n    the longest (not necessarily distinct) substring of that string that does not contain any \n    numbers. Return None if no such substring exists. \n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    lst = [bracket for bracket in string]\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = 0\n    for item in lst:\n        item = int(item)\n        result += item**2\n    return round(result)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    for i in range(len(lst)):\n        lst[i]=math.ceil(lst[i]**2)\n    return sum(lst)\n    \ndef list_chunk(lst, size):\n    \"\"\"You are given a list and a chunk size.\n    You need to split the list into lists of equal size.\n    If the list can't be equally divided, the last list will be smaller.\n    Examples:\n    For lst = [1,2,3,4,5,6,7,8,9,10] and size = 3 the output should be [[1,2,3],[4,5,6],[7,8,9,10]]\n    For lst = [1,2,3,4,5,6,7,8,9,10] and size = 4 the output should be [[1,2,3,4],[5,6,7,8],[9,10]]\n    For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13] and size = 6 the output should be [[1,2,3,4,5,6],[7,8,9,10,11,12],[13]]\n    For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13] and size = 7 the output should be [[1,2,3,4,5,6,7],[8,9,10,11,12,13]]\n    For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] and size = 7 the output should be [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15]]\n    For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18] and size = 7 the output should be [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18]]\n    For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30] and size = 7 the output should be [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30]]\n    For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50] and size = 7 the output should be [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42],[43,44,45,46,47,48,49],[50]]\n    For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lst2=[]\n    for i in lst:\n        x = round(i**2)\n        lst2.append(x)\n    return sum(lst2)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    res = 0\n    for i in lst:\n        res += round(i**2)\n    return res\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sum(int(i)**2 for i in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    return int(math.floor(math.sqrt(sum(i**2 for i in lst))))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return sum([int(x)**2 for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return round(sum([i**2 for i in lst]))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return round(sum([i**2 for i in lst]))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum( [ math.ceil(el ** 2) for el in lst ])\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # if txt == \"\":\n    #     return False\n    # else:\n    #     if txt[-1].isalpha() == True:\n    #         return True\n    #     else:\n    #         return False\n    return txt[-1].isalpha() and txt.endswith(\" \") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha() == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # txt = \"apple pi e \"\n    if len(txt) > 0:\n        return txt[len(txt)-1].isalpha() and not txt[len(txt)-1].isnumeric()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return txt.isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(txt) > 0:\n        if txt[-1].isalpha() == True:\n            if txt.split(\" \")[0].isalpha() == False:\n                return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not txt:\n        return False\n    \n    return txt[-1].isalpha() and \" \" not in txt\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    if len(txt) > 0:\n        return txt[-1].isalpha()\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    txt = txt[::-1]\n    if txt[0] =='':\n        return False\n    if txt[0].isalpha():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if txt[-1] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return True\n    return False\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(arr) < 2:\n        return -1\n    else:\n        # We can set i to 0 if the array is already sorted\n        i = 0\n        while i < len(arr) - 1:\n            # If the number is not greater than or equal to the number\n            # immediately before it\n            if arr[i] > arr[i + 1]:\n                # Return the index\n                return i\n            # Increment the index\n            i += 1\n        # If we get to the end of the array without finding an element\n        # which is less than the element immediately before it then return\n        # -1\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # get the largest index so far\n    max_index = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_index:\n            max_index = arr[i]\n            max_index_index = i\n    # if max_index is not the last element of the array\n    if max_index!= arr[len(arr)-1]:\n        # then the largest index must be inbetween the max and max + 1\n        for i in range(max_index_index+1, len(arr)):\n            if arr[i] > max_index:\n                return i\n    # otherwise it's impossible\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if len(arr) <= 1:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    new_arr = []\n    arr = arr[::-1]\n    for i in arr:\n        if arr[arr.index(i) + 1] > i:\n            new_arr.append(arr.index(i) + 1)\n    return -1 if len(new_arr) == 0 else new_arr[0]\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if not arr or len(arr) < 2:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    for i, _ in enumerate(arr):\n        if arr[i + 1] > arr[i]:\n            return i\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    last_elem = arr[0]\n    for elem in arr[1:]:\n        if elem > last_elem:\n            return last_elem\n        last_elem = elem\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    max_num = max(arr)\n    i = 0\n    while i < len(arr):\n        if arr[i] >= arr[i - 1] and arr[i] < max_num:\n            i += 1\n        elif arr[i] == max_num:\n            return i - 1\n        else:\n            i += 1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i, num in enumerate(arr):\n        if i == 0:\n            continue\n        if num < arr[i - 1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # unpack the array\n    arr = arr[0]\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    max = 0\n    min = 0\n    for i in lst:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return (None, None) if len(lst) == 0 else (max, min)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    neg_ints = [x for x in lst if x < 0]\n    pos_ints = [x for x in lst if x > 0]\n    if pos_ints:\n        return (max(neg_ints), min(pos_ints))\n    elif neg_ints:\n        return (None, None)\n    else:\n        return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    largest = None\n    smallest = None\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    negative_integers = [i for i in lst if i < 0]\n    positive_integers = [i for i in lst if i > 0]\n    if negative_integers:\n        return (None, max(negative_integers))\n    elif positive_integers:\n        return (None, min(positive_integers))\n    return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    return (None, None) if not lst else (max(0, min(lst)), max(lst))\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return (None, None) if len(lst) == 0 else (max(0, min(lst)), max(lst))\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return (None, None) if not lst else (max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst)))\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    lst_neg = [i for i in lst if i < 0]\n    lst_pos = [i for i in lst if i > 0]\n    if lst_neg:\n        return (max(lst_neg), min(lst_pos))\n    if lst_pos:\n        return (None, min(lst_pos))\n    return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    negative_ints = [num for num in lst if num < 0]\n    positive_ints = [num for num in lst if num >= 0]\n    return (max(negative_ints), min(positive_ints)) if negative_ints and positive_ints else (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    neg_num_lst = [num for num in lst if num < 0]\n    pos_num_lst = [num for num in lst if num > 0]\n    if len(neg_num_lst) > 0:\n        a = max(neg_num_lst)\n    else:\n        a = None\n    if len(pos_num_lst) > 0:\n        b = min(pos_num_lst)\n    else:\n        b = None\n    return (a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if str(a) > str(b):\n        return a\n    elif str(b) > str(a):\n        return b\n    elif str(a) == str(b):\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if type(a) == str or type(b) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n    if float(a) > float(b):\n        return a\n    elif float(a) < float(b):\n        return b\n    elif float(a) == float(b):\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if type(a) is str and type(b) is str:\n        return a if a.replace(\".\", \"\").replace(\",\", \"\") >= b.replace(\".\", \"\").replace(\",\", \"\") else b\n    elif type(a) is float or type(b) is float:\n        return a if a >= b else b\n    else:\n        return a if a >= b else b\n    return\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return max(a, b) if type(a) == type(b) else None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if (type(a) == float or type(a) == int) and (type(b) == float or type(b) == int):\n        if b >= a:\n            return b\n        else:\n            return a\n    else:\n        if (type(a) == str or type(a) =='str' and type(b) == str):\n            return b\n        else:\n            return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return None if a == b else (a if type(a) is type(b) else b)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    try:\n        return float(a) if float(a) > float(b) else b\n    except:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    k = 2 * n\n    return k % 2 == 0 and (n + k) % 4 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (n % 2 == 0) and (n in [2, 4, 6, 8])\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    num = n\n    nums = []\n    while (num > 0):\n        nums.append(num % 10)\n        num = num // 10\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    n = abs(n)\n    return n % 4 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if n == sum([i for i in range(4) if i % 2 == 0]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum(num for num in range(2, n, 2) if num % 2 == 0) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    numbers = range(0,n+1)\n    sum_even_numbers = 0\n    for x in numbers:\n        if x % 2 == 0 and x!= 0 and x > 4:\n            sum_even_numbers += x\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    i = 0\n    j = 0\n    k = 0\n    l = 0\n    while i <= n//8:\n        i += 2\n    while j <= n//4:\n        j += 2\n    while k <= n//2:\n        k += 2\n    while l <= n//1:\n        l += 2\n    return i + j + k + l == n\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    n_list = [int(i) for i in list(str(n))]\n    for i in n_list:\n        if i % 2 == 0:\n            if n_list.count(i) > 3:\n                return False\n            elif n_list.count(i) == 3:\n                if n_list.count(i + 2) == 2:\n                    if n_list.count(i + 4) == 2:\n                        return True\n                    else:\n                        continue\n                else:\n                    continue\n            elif n_list.count(i) == 2:\n                if n_list.count(i + 2) == 1:\n                    if n_list.count(i + 4) == 1:\n                        return True\n                    else:\n                        continue\n                elif n_list.count(i + 2) == 2:\n                    if n_list.count(i + 4) == 1:\n                        return True\n                    else:\n                        continue\n                else:\n                    continue\n            else:\n                continue\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    n = abs(n)\n    s = 0\n    while n > 0:\n        d = n % 2\n        if d == 0:\n            s = s + 1\n        else:\n            s = s - 1\n        n = n // 2\n    if s == 4:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    fact = n\n    for i in range(n - 1, 0, -1):\n        fact = fact * i\n    return fact\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    factorial = 1\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    count = 0\n    for number in range(1, n + 1):\n        count += 1\n        if number == 1:\n            result = 1\n        else:\n            result = special_factorial(number - 1) * count\n    return result\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    factorial = 1\n    for num in range(1, n+1):\n        factorial *= num\n    return factorial"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    new_text = \"\"\n    i = 0\n    while i < len(text):\n        if i < len(text) - 1:\n            if text[i] == \" \" and text[i + 1] == \" \":\n                i += 2\n                continue\n        new_text += text[i]\n        i += 1\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if not text:\n        return text\n    return re.sub(r'\\s{2,}', r'_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert isinstance(text, str)\n    prev_spaces = -1\n    \n    fixed_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            if prev_spaces == i:\n                fixed_text += '-'\n                prev_spaces = -1\n            else:\n                fixed_text += '_'\n                prev_spaces = i\n        else:\n            fixed_text += text[i]\n            prev_spaces = -1\n    \n    return fixed_text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Your code here\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    new_text = \"\"\n    last_char = \"\"\n    count = 0\n    for c in text:\n        if c == \" \":\n            count += 1\n        else:\n            if count == 0:\n                last_char = c\n            else:\n                if count == 2:\n                    new_text += \"-_\"\n                    count = 0\n                else:\n                    new_text += last_char + \"_\" + c\n                    count = 0\n                    last_char = \"\"\n    if count == 1:\n        new_text += last_char\n    elif count == 2:\n        new_text += \"-_\"\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    # initialize \"ret\" string\n    ret = \"\"\n    \n    # loop through each character in text\n    for char in text:\n        # if character is a space\n        if char == \" \":\n            # add a dash instead\n            ret += \"-\"\n        # else\n        else:\n            # add the character to ret\n            ret += char\n    \n    # return ret\n    return ret"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if text.find(\"  \") > 0:\n        text = text.replace(\"  \", \"-\")\n    return text.replace(\" \", \"_\""
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(file_name) > 3:\n        return \"No\"\n    if '.' not in file_name:\n        return \"No\"\n    if file_name.split('.')[0] == '':\n        return \"No\"\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\"\n    #code goes here\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(file_name.split('.'))!= 2:\n        return 'No'\n    if file_name.startswith(tuple(string.ascii_lowercase + string.ascii_uppercase)) == False:\n        return 'No'\n    if len(file_name.split('.')[0]) > 3 or len(file_name.split('.')[1]) > 3:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if len(file_name) > 3:\n        return \"No\"\n    else:\n        dot = file_name.index(\".\")\n        dot_index = dot\n        if dot < 1:\n            return \"No\"\n        while file_name[dot_index - 1]!= \".\" and not file_name[dot_index - 1].isalpha():\n            dot_index -= 1\n        if file_name[dot_index - 1]!= \".\" or file_name[dot_index - 1].isalpha():\n            return \"No\"\n        else:\n            if dot_index!= len(file_name) - 1:\n                if file_name[dot_index + 1] == \".\" or file_name[dot_index + 1] not in [\"txt\", \"exe\", \"dll\"]:\n                    return \"No\"\n            else:\n                return \"No\"\n        return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if file_name.count(\".\")!= 1:\n        return \"No\"\n    if len(file_name.split(\".\")[0]) > 3:\n        return \"No\"\n    if len(file_name.split(\".\")[1])!= 3:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return ('Yes' if file_name.isalpha() else 'No')\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(file_name.split('.')) > 2:\n        return 'No'\n    for char in file_name:\n        if char.isdigit():\n            return 'No'\n    dot_location = file_name.find('.')\n    if dot_location == -1:\n        return 'No'\n    if not file_name[:dot_location].isalpha():\n        return 'No'\n    substring_after_dot = file_name.split('.')[1]\n    valid_substrings = ['txt', 'exe', 'dll']\n    if substring_after_dot not in valid_substrings:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Check if file_name is a string\n    if not isinstance(file_name, str):\n        return 'No'\n    \n    # Check if file_name contains three digits\n    if file_name.isdigit():\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    for i in range(len(file_name)):\n        if file_name[i]=='.':\n            if file_name[:i]=='':\n                return 'No'\n            if file_name[i+1:] not in ['txt', 'exe', 'dll']:\n                return 'No'\n    if file_name.isdigit():\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Split file_name into two parts\n    # 1. [1] is the name before the last '.'\n    # 2. [2] is the name after the last '.'\n    return file_name.split('.')[0]\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sum = 0\n    for entry in lst:\n        if (entry*entry)%3 == 0:\n            sum+= entry\n        if (entry*entry)%4 == 0 and entry*entry%3!=0:\n            sum+= entry\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            total += lst[i] ** 2\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # ############################################################################################################\n    # ######################   Write your code here   ##########################################################\n    out = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0) or (i % 4 == 0):\n            out += lst[i] ** 2\n    # ############################################################################################################\n    return out\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    try:\n        if len(lst) < 1:\n            return 0\n        else:\n            pass\n        return sum([a ** 2 if i % 3 == 0 else a ** 3 if i % 4 == 0 else a for i,a in enumerate(lst)])\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            if i % 3 == 0:\n                sum += i ** 2\n            elif i % 4 == 0:\n                sum += i ** 3\n        elif i % 3!= 0 and i % 4!= 0:\n            pass\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    sq=[]\n    cube=[]\n    for i in range(len(lst)):\n        if i%3==0 or i%4==0:\n            sq.append(lst[i]**2)\n        elif i%3==0 and i%4!=0:\n            cube.append(lst[i]**3)\n        else:\n            continue\n    return sum(sq)+sum(cube)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sum = 0\n    for num in lst:\n        if num%3 == 0:\n            sum += num**2\n        elif num%4 == 0 and num%3!= 0:\n            sum += num**3\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    total = 0\n    for index in range(0,len(lst)):\n        if index % 3 == 0:\n            total += lst[index] ** 2\n        elif index % 4 == 0 and index % 3!= 0:\n            total += lst[index] ** 3\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = []\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            result.append(lst[i] ** 2)\n    return sum(result)\n    \nprint(sum_squares([1,2,3]))\nprint(sum_squares([]))\nprint(sum_squares([-1, -5, 2, -1, -5]))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    sentence = sentence.split(' ')\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    words = sentence.split(\" \")\n    # loop through the words and check if each one is a prime number\n    # if it is then add it to the new list\n    new_words = []\n    for word in words:\n        if is_prime(len(word)):\n            new_words.append(word)\n    # join the new list of words into a string\n    return \" \".join(new_words)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    words = sentence.split(' ')\n    primes = []\n    for word in words:\n        if is_prime(len(word)):\n            primes.append(word)\n    return''.join(primes)"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    res = []\n    words = sentence.split(' ')\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    words = sentence.split(' ')\n    result = []\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    words = sentence.split()\n    for word in words:\n        if not is_prime(len(word)):\n            return ''\n    return''.join(words)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    words = sentence.split(\" \")\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    sentence = sentence.split()\n    for word in sentence:\n        if len(word) == 1:\n            return \"\"\n        count = 0\n        for i in range(2, int(word[len(word) - 1])):\n            if int(word[len(word) - 1]) % i == 0:\n                count += 1\n        if count == 0:\n            return word\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Split sentence into words\n    words = sentence.split(' ')\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    def gcd(x, n):\n        numer = int(n)\n        denom = int(x)\n        if denom == 0:\n            return 1\n        while numer % denom!= 0:\n            old_denom = denom\n            denom = numer % denom\n            numer = old_denom\n        return int(denom)\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return 'not implemented'\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    numerator = int(n.split('/')[0])\n    denominator = int(n.split('/')[1])\n    return x == str(numerator/denominator)\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    x = x.split('/')\n    n = n.split('/')\n    if x[0]!= n[0] or x[1]!= n[1]:\n        return False\n    return int(x[0]) * int(n[0]) == int(x[1])\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # return x.split('/')[0] == n.split('/')[0] and x.split('/')[1] == n.split('/')[1]\n    a, b = int(x.split('/')[0]), int(x.split('/')[1])\n    c, d = int(n.split('/')[0]), int(n.split('/')[1])\n    if (a % b == c % d):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    x_n_list = x.split(\"/\")\n    n_x_list = n.split(\"/\")\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # return not isinstance(eval(x + \"/\" + n), float)\n    try:\n        return True if eval(x + \"/\" + n) - eval(x + \"/\" + n) == 0 else False\n    except ZeroDivisionError:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    x = x.split(\"/\")\n    n = n.split(\"/\")\n    \n    if int(x[0]) * int(n[0]) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return True\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    if n == \"0\" or x == \"0\":\n        return False\n    if n == \"1\":\n        return x == \"1\"\n    num = int(x.split(\"/\")[0])\n    den = int(n.split(\"/\")[0])\n    num1 = str(num*den)\n    num2 = str(num)\n    den1 = str(den)\n    if num1 == num2 and num1!= den1:\n        return True\n    return False\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda n: (sum([int(digit) for digit in str(n)]), -nums.index(n)))"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    def sort_func(item):\n        return sum(int(x) for x in str(item))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return sorted(nums, key = lambda x : sum(int(i) for i in str(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n    # OR:\n    # return sorted(nums, key=lambda x: sum(map(int, str(x))))\n    # OR:\n    # return sorted(nums, key=lambda x: int(''.join(str(y) for y in str(x))))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sorted(nums, key = lambda num: sum(int(i) for i in str(num)))"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    \n    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sorted(nums, key=lambda num: (sum([int(i) for i in str(num)]), num))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sorted(nums, key=lambda x: sum([int(i) for i in str(x)])+x)\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    special_nums = 0\n    for num in nums:\n        num = abs(num)\n        if num >= 10 and int(str(num)[0]) % 2!= 0 and int(str(num)[-1]) % 2!= 0:\n            special_nums += 1\n    return special_nums\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    special_nums = []\n    for num in nums:\n        if num > 10:\n            num = str(num)\n            if int(num[0]) % 2 == 1 and int(num[-1]) % 2 == 1:\n                special_nums.append(num)\n    return special_nums\n    \nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\nprint(specialFilter([33, -2, -3, 45, 21, 109, 7, 99]))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return len([i for i in nums if i > 10 and i%2 == 1])\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    count = 0\n    for x in nums:\n        if x > 10 and x % 2!= 0 and nums[0] % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    # pass # remove this line\n    count = 0\n    for n in nums:\n        # check if the first and last digits are odd and > 10\n        if (n>= 10 and (n // 10) % 2 == 1) or (n%10)%2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    count = 0\n    for num in nums:\n        if num >= 10 and (num % 2 == 1):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    special = 0\n    for num in nums:\n        if num > 10 and (int(str(num)[0]) % 2 == 1) and (int(str(num)[-1]) % 2 == 1):\n            special += 1\n    return special\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    new_array = []\n    for num in nums:\n        first_digit = num // 10\n        last_digit = num % 10\n        if first_digit % 2 == 1 and last_digit % 2 == 1:\n            new_array.append(num)\n    return len(new_array)\n    \n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    odd_nums = 0\n    special_nums = 0\n    for n in nums:\n        if n > 10 and (n%10)%2!= 0:\n            special_nums += 1\n        elif n > 10 and (n%10)%2 == 0:\n            odd_nums += 1\n    return special_nums + odd_nums\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            k = n - i - j\n            if i < j < k and (i*i + j*j == k*k + k):\n                result += 1\n    return result\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    # and a[i] + a[j] + a[k] is a multiple of 3.\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(1, n):\n        for j in range(1, n):\n            if (i < j) and (i * i + i + 1) % 3 == 0:\n                for k in range(1, n):\n                    if (i < k) and (j < k) and (i + j + k) % 3 == 0:\n                        count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    a = []\n    for i in range(1, n+1):\n        a.append(i*i-i+1)\n    return sum([1 for i in range(n) for j in range(i+1,n) for k in range(j+1,n) if ((a[i]+a[j]+a[k])%3==0)])\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return len([1 for i in range(1, n) for j in range(i+1, n) if (i*i - i + 1) % 3 == 0])\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum([i*i-i+1 for i in range(1,n+1) if i*i-i+1%3==0])\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    nums = []\n    for i in range(n):\n        nums.append(i * i - i + 1)\n    print(nums)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if nums[i] + nums[j] + nums[k] % 3 == 0:\n                    ans += 1\n    return ans\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    count = 0\n    # Iterate over all possible triplets \n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                sum_of_triple = a[i] + a[j] + a[k]\n                # Check if sum of triple is divisible by 3\n                if sum_of_triple % 3 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum((i * i - i + 1) % 3 == 0 for i in range(1, n + 1))\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    res = 0\n    for i in range(n):\n        for j in range(i,n):\n            for k in range(j, n):\n                if (i < j < k) and ((i + j + k) % 3 == 0):\n                    res += 1\n    return res\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (planet for planet in PLANETS if (planet1 in orbit(planet) and planet2 in orbit(planet)))\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pltns = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    return tuple(sorted([p for p in pltns if (planet1 in p or planet2 in p) and not (planet1 == planet2)]))\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index < planet2_index:\n        return tuple(sorted((planets[planet2_index:planet1_index+1],), reverse=True))\n    else:\n        return tuple(sorted((planets[planet1_index:planet2_index+1]), reverse=True))\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    # Hint: Use the in operator, the split method and \n    # A dictionary to store the planets.\n    \n    planets = {\"Mercury\": 0.38, \"Venus\": 0.91, \"Earth\": 1, \"Mars\": 1.52, \"Jupiter\": 5.20, \"Saturn\": 9.54, \"Uranus\": 19.19, \"Neptune\": 30.06}\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    planet_1_info = planets[planet1]\n    planet_2_info = planets[planet2]\n    \n    lst = []\n    \n    for i in planets:\n        if planet_1_info + planets[i] > planet_2_info and planets[i] < planet_1_info:\n            lst.append(i)\n            \n    return tuple(lst)\n    \nprint(bf(\"Mercury\", \"Uranus\")) # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\""
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    elif planet1 == planet2:\n        return ()\n    else:\n        #find index of planet1\n        index1 = planets.index(planet1)\n        #find index of planet2\n        index2 = planets.index(planet2)\n        #find all planets in between\n        results = planets[index1:index2+1]\n        #sort them\n        results.sort(key=lambda x: abs(planets.index(planet1)-planets.index(x)))\n        return tuple(results)\n    \n    "
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    for planet in planets:\n        if planet1 == planet or planet2 == planet:\n            return planet\n    return ("
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    planets = {'Mercury':    0.387, 'Venus':    0.723, 'Earth':    1.000, 'Mars':    1.523, 'Jupiter':    11.86, 'Saturn':    10.44, 'Uranus':    8.87, 'Neptune':    11.15}\n    planets_all = []\n    for planet, dist in planets.items():\n        if planet1 == planet or planet2 == planet:\n            planets_all.append(planet)\n        if planet1 == planet and planet2 == planet:\n            return tuple(planets_all)\n        if planet1 == planet:\n            for planet_next in planets:\n                if dist < planets[planet_next]:\n                    planets_all.append(planet_next)\n        if planet2 == planet:\n            for planet_prev in planets:\n                if dist > planets[planet_prev]:\n                    planets_all.append(planet_prev)\n        if planet1!= planet and planet2!= planet:\n            return tuple()\n    return tuple(planets_all)\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets and planet2 in planets:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        result_tuple = tuple(planets[planet1_index:planet2_index+1])\n        return result_tuple\n    return tuple()\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 in planets and planet2 in planets:\n        def f(p1, p2):\n            return abs(p1 - p2)\n        lst = list(filter(lambda planet: f(planets.index(planet1), planets.index(planet2)) < 10, planets))\n        return tuple(lst)\n    return ()"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    lst2 = []\n    for x in lst:\n        if len(x) % 2 == 0:\n            lst2.append(x)\n    return sorted(lst2)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    new_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            new_list.append(word)\n    for word in new_list:\n        if len(word) > 1:\n            for char in range(len(word)):\n                if word[char] > word[char + 1]:\n                    word = word[:char] + word[char + 1:]\n                    break\n    new_list.sort()\n    return new_list\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    lst_new = []\n    for word in lst:\n        if len(word)%2==0:\n            lst_new.append(word)\n    lst_new.sort(key=len)\n    return lst_new\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    lst_sorted = sorted(lst, key=lambda x: (len(x), x))\n    return lst_sorted\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return sorted(lst, key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    sorted_list = []\n    sorted_list_chars = []\n    for i in lst:\n        sorted_list_chars.append(len(i))\n    sorted_list_chars.sort()\n    for i in range(len(sorted_list_chars)):\n        for j in range(len(sorted_list_chars)):\n            if sorted_list_chars[i] == sorted_list_chars[j]:\n                sorted_list.append(lst[j])\n    return sorted_list\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    print(lst)\n    temp_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            temp_list.append(word)\n    temp_list = sorted(temp_list, key=len)\n    temp_list = sorted(temp_list, key=str.lower)\n    print(temp_list)\n    return temp_list\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    sorted_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_list.append(word)\n    sorted_list.sort()\n    return sorted_list\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    assert isinstance(lst, list)\n    assert all(isinstance(word, str) for word in lst)\n    assert all(isinstance(s, str) for s in lst)\n    assert len(lst) > 1\n    assert all(len(word) % 2 == 0 for word in lst)\n    assert all(len(s) % 2 == 0 for s in lst)\n    assert all(len(word) == len(s) for word, s in zip(lst, lst[1:]))\n    return list(sorted(lst, key=lambda x: (len(x), x)))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def f(lst):\n        res = [word for word in lst if len(word) % 2 == 0]\n        res += [word for word in lst if len(word) % 2!= 0]\n        return res\n    return sorted(f(lst), key = len)"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if n % 2 == 0:\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    else:\n        if isPrime(n):\n            return x\n        else:\n            return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return x if is_prime(n) else y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return x if is_prime(n) else y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n    \nif __name__ == '__main__':\n    print x_or_y(7, 34, 12)\n    print x_or_y(15, 8, 5)"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    return y if is_prime(n) else x"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # Given:\n    # n is a positive integer\n    # x is a positive integer\n    # y is a positive integer\n    \n    # Goal:\n    # Return either x or y\n    \n    # print('Given n is:', n, 'x is:', x, 'y is:', y)\n    if n <= 0:\n        return False\n    elif n == 1:\n        return False\n    elif x == 1:\n        return y\n    elif y == 1:\n        return x\n    elif n == 2:\n        return x\n    elif n == 3:\n        return y\n    elif n == 4:\n        return x\n    elif n == 5:\n        return y\n    elif n == 6:\n        return x\n    elif n == 7:\n        return y\n    elif n == 8:\n        return x\n    elif n == 9:\n        return y\n    elif n == 10:\n        return x\n    elif n == 11:\n        return y\n    elif n == 12:\n        return x\n    elif n == 13:\n        return y\n    elif n == 14:\n        return x\n    elif n == 15:\n        return y\n    elif n == 16:\n        return x\n    elif n == 17:\n        return y\n    elif n == 18:\n        return x\n    elif n == 19:\n        return y\n    elif n == 20:\n        return x\n    elif n == 21:\n        return y\n    elif n == 22:\n        return x\n    elif n == 23:\n        return y\n    elif n == 24:\n        return x\n    elif n == 25:\n        return y\n    elif n == 26:\n        return x\n    elif n == 27:\n        return y\n    elif n == 28:\n        return x\n    elif n == 29:\n        return y\n    elif n == 30:\n        return x\n    elif n == 31:\n        return y\n    elif n == 32:\n        return x\n    elif n == 33:\n        return y\n    elif n == 34:\n        return x\n    elif n == 35:\n        return y\n    elif n == 36:\n        return x\n    elif n == 37:\n        return y\n    elif n == 38:\n        return x\n    elif n == 39:\n        return y\n    elif n == 40:\n        return x\n    elif n == 41:\n        return y\n    elif n == 42:\n        return x\n    elif n == 43:\n        return y\n    elif n == 44:\n        return x\n    elif n == 45:\n        return y\n    elif n == 46:\n        return x\n    elif n == 47:\n        return y\n    elif n == 48:\n        return x\n    elif n == 49:\n        return y\n    elif n == 50:\n        return x\n    elif n == 51:\n        return y\n    elif n == 52:\n        return x\n    elif n == 53:\n        return y\n    elif n == 54:\n        return x\n    elif n == 55:\n        return y\n    elif n == 56:\n        return x\n    elif n == 57:\n        return y\n    elif n == 58:\n        return x\n    elif n == 59:\n        return y\n    elif n == 60:\n        return x\n    elif n == 61:\n        return y\n    elif n == 62:\n        return x\n    elif n == 63:\n        return y\n    elif n == 64:\n        return x\n    elif n == 65:\n        return y\n    elif n == 66:\n        return x\n    elif n == 67:\n        return y\n    elif n == 68:\n        return x\n    elif n == 69:\n        return y\n    elif n == 70:\n        return x\n    elif n == 71:\n        return y\n    elif n == 72:\n        return x\n    elif n == 73:\n        return y\n    elif n == 74:\n        return x\n    elif n == 75:\n        return y\n    elif n == 76:\n        return x\n    elif n ="
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum([num**2 if num % 2 else num for num in lst])\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return sum([num ** 2 for num in lst if type(num) == int and num % 2 == 1])\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    \n    if lst == []:\n        return 0\n    \n    return sum(i**2 for i in lst if i%2 == 1)\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\nprint(double_the_difference([]))\nprint(double_the_difference([1.1, -2.1, 0.1]))\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    total = 0\n    for num in lst:\n        if num % 2!= 0 and num >= 0:\n            total += num**2\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        #list comprehension for odd numbers\n        odd_numbers = [x for x in lst if x % 2 == 1]\n        #squaring the odd numbers\n        odd_numbers = [x ** 2 for x in odd_numbers]\n        #total sum of odd numbers\n        total = sum(odd_numbers)\n        return total\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return sum([i*i for i in lst if i % 2!= 0 and i > 0 and type(i) == int])\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # https://www.codewars.com/kata/57b72b54ebeb82b4c1000172/solutions/python\n    return sum([i**2 for i in lst if i % 2 == 1])\n    \nprint(double_the_difference([1, 3, 2, 0])) # 10\nprint(double_the_difference([-1, -2, 0])) # 0\nprint(double_the_difference([9, -2])) # 81\nprint(double_the_difference([])) # 0\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return sum(map(lambda x: x**2 if int(x)%2!= 0 else 0, filter(lambda x: x>0,lst)))\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return sum([i**2 for i in lst if i%2 and i>0])\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return sum([x**2 for x in lst if x > 0 and x % 2 == 1])\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(len(game)):\n        result.append(abs(guess[i] - game[i]))\n    return result\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return [0 if game[i] == guess[i] else abs(guess[i] - game[i]) for i in range(len(game))]\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    import numpy as np\n    #Using the numpy library for arrays\n    diff = np.subtract(game, guess)\n    return diff\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return [0 if g == s else abs(s-g) for g,s in zip(game,guess)]"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    dif = [abs(game[i] - guess[i]) for i in range(len(game))]\n    return dif\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return_array = []\n    for i in range(len(game)):\n        return_array.append(abs(game[i] - guess[i]))\n    return return_array"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    #print(game)\n    #print(guess)\n    return list(map(lambda x: 0 if x[0] == x[1] else abs(x[0] - x[1]), zip(game,guess)))"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    correct = []\n    for i,j in enumerate(game):\n        correct.append(abs(guess[i] - j))\n    return correct\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [abs(guess[i]-game[i]) for i in range(len(game))"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    def difference(s, g):\n        if s == g:\n            return 0\n        else:\n            return abs(s-g)\n    \n    return [difference(g, s) for g, s in zip(game, guess)]\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    raise NotImplementedError\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(extensions) == 0:\n        raise ValueError\n    d = dict()\n    for item in extensions:\n        s = 0\n        for i in item:\n            if i.isupper():\n                s += 1\n            else:\n                s -= 1\n        d[item] = s/len(item)\n    l = sorted(d, key=d.get, reverse=True)\n    return class_name + '.' + l[0]\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    import string\n    import operator\n    for extension in extensions:\n        extension = extension.lower()\n        if extension.islower():\n            CAP += 1\n        else:\n            SM += 1\n    return class_name + '.' + extensions[operator.itemgetter(1)(extensions.index(max(extensions, key = operator.itemgetter(0)))]"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # DUMMY SOLUTION - Change this!\n    best_extension = \"\"\n    max_strength = -1\n    for ext in extensions:\n        if ext.isupper():\n            cap = 0\n            for letter in ext:\n                if letter.isupper():\n                    cap += 1\n        else:\n            cap = 0\n            for letter in ext:\n                if letter.isupper():\n                    cap += 1\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # I don't know how to solve this one\n    print('Not solved.')\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    \n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    class_name_arr = class_name.split('.')\n    strongest_ext = ''\n    strongest_strength = 0\n    for extension in extensions:\n        extension_arr = extension.split('.')\n        strength = 0\n        for i in range(min(len(class_name_arr), len(extension_arr))):\n            if extension_arr[i] == class_name_arr[i]:\n                strength += 1\n            else:\n                break\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_ext = extension\n    if strongest_strength == 0:\n        return class_name + '.Extensions'\n    else:\n        return '.'.join(class_name_arr[:-1] + [strongest_ext]) + '.Extensions'\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    #your code here\n    return \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    pattern = str(a)\n    string = str(b)\n    if not set(pattern).issubset(string):\n        return False\n    rotated_list = []\n    rotated_list.append(string)\n    for i in range(1,len(string)):\n        rotated = rotated_string(string,i)\n        rotated_list.append(rotated)\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if b in a or b in a[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    for i in range(len(a)):\n        if b in a:\n            return True\n        temp = a[i:] + a[:i]\n        if b in temp:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    \n    if type(a)!= str or type(b)!= str:\n        return False\n    \n    if len(a) < len(b):\n        return False\n    \n    if a == b:\n        return True\n    \n    for i in range(1, len(a)):\n        if a[i:] + a[:i] == b or a[i:] == b:\n            return True\n        if b[i:] + b[:i] == a or b[i:] == a:\n            return True\n    return False\n    \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return any(b in a for b in rotations(b))\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    # if(a.find(b) == True):\n    #     return True\n    # for i in range(len(a)):\n    #     if(a.find(b) == True):\n    #         return True\n    #     else:\n    #         a = a[1:] + a[0]\n    #         # a = a[-1] + a[:-1]\n    #         print(a)\n    #     if(a.find(b) == True):\n    #         return True\n    #     else:\n    #         return False\n    return any(b in a for a in cycle(a))\nprint(cycpattern_check(\"abcd\",\"abd\"))\nprint(cycpattern_check(\"hello\",\"ell\"))\nprint(cycpattern_check(\"whassup\",\"psus\"))\nprint(cycpattern_check(\"abab\",\"baa\"))\nprint(cycpattern_check(\"efef\",\"eeff\"))\nprint(cycpattern_check(\"himenss\",\"simen\"))\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    if a.find(b)!= -1 or b in a or b in a+a:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if(b in a or b in a + a):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    a_s= a + a\n    if b in a_s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return (len([i for i in str(num) if int(i) % 2 == 0]), len([i for i in str(num) if int(i) % 2!= 0])"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return (num % 10 and 1 or 0, num % 10 and 1 or 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # if num < 0:\n    #     return (1, 1)\n    # else:\n    #     return (0, 0)\n    return (num.count(0) + num.count(2) + num.count(4) + num.count(6) + num.count(8), len(num) - num.count(0) - num.count(2) - num.count(4) - num.count(6) - num.count(8))\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0, 0\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    evens = 0\n    odds = 0\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    evens = 0\n    odds = 0\n    while num:\n        digit = num % 10\n        num //= 10\n        if digit % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    even_count = 0\n    odd_count = 0\n    \n    for i in range(len(str(num))):\n        if i%2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)\n    \nprint(even_odd_count(123))"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return (len([int(i) for i in str(num) if int(i) % 2 == 0]), len([int(i) for i in str(num) if int(i) % 2!= 0]))"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    def even_odd(n):\n        return (n % 2 == 0, n % 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    return (num // 10 % 10, num % 10)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    assert 1 <= number <= 1000, 'The integer number must be between 1 and 1000.'\n    conv_table = (\n        (1000,'m'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i'),\n    )\n    roman_string = ''\n    for value, symbol in conv_table:\n        while number >= value:\n            number -= value\n            roman_string += symbol\n    return roman_string\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # initialize dict\n    num_to_roman = {}\n    # get roman numbers\n    for i in range(1, 1001):\n        num_to_roman[i] = int_to_roman(i)\n    # return roman numeral\n    return num_to_roman[number]\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    roman_dict = {\n        1: \"I\",\n        5: \"V\",\n        10: \"X\",\n        50: \"L\",\n        100: \"C\",\n        500: \"D\",\n        1000: \"M\"\n    }\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    assert isinstance(number, int) and 1 <= number <= 1000, \"Input is not a positive integer.\"\n    assert number < 4000, \"Input exceeds the limit.\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    assert isinstance(number, int), 'Input must be a positive integer.'\n    assert number > 0, 'Input must be a positive integer.'\n    assert number <= 1000, 'Input must be less than or equal to 1000.'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if not isinstance(number, int) or number <= 0 or number > 1000:\n        raise ValueError('Invalid input.')\n    # special case of 1\n    if number == 1:\n        return 'i'\n    # special case of 4\n    if number == 4:\n        return 'iv'\n    # special case of 5\n    if number == 5:\n        return 'v'\n    # special case of 9\n    if number == 9:\n        return 'ix'\n    # special case of 40\n    if number == 40:\n        return 'x'\n    # special case of 50\n    if number == 50:\n        return 'l'\n    # special case of 90\n    if number == 90:\n        return 'xc'\n    # special case of 100\n    if number == 100:\n        return 'c'\n    # special case of 400\n    if number == 400:\n        return 'cd'\n    # special case of 500\n    if number == 500:\n        return 'd'\n    # special case of 900\n    if number == 900:\n        return 'cm'\n    # special case of 1000\n    if number == 1000:\n        return'm'\n    # create a list to store Roman numbers\n    roman_list = []\n    # divide the number by 1000,..., 900, 500, 400, 100, 90, 50, 40, 10,..., 1,\n    # and place each of these values in the list\n    for i in range(len(self.roman_number_order)):\n        number_to_place = number // (self.roman_number_order[i] * 10)\n        # if we have more than 0 items in the list, then append them, otherwise\n        # append nothing\n        if len(roman_list) > 0:\n            roman_list += self.roman_number_order[i] * number_to_place\n        else:\n            roman_list += self.roman_number_order[i] * number_to_place\n        # subtract the value that we just placed\n        number -= number_to_place * (self.roman_number_order[i] * 10)\n    # return the list as a string\n    return ''.join(roman_list)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    roman_digits = [\n    (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n    (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n    (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'),\n    (1, 'I')]\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # TODO: Implement me\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    import math\n    \n    if (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if a + b <= c or b + c <= a or c + a <= b:\n        return False\n    return True\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2):\n        return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    # Calculate the length of the three sides\n    a, b, c = sorted([a, b, c])\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # Use Pythagoras' theorem\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (c**2 + b**2 == a**2)\n    \n    \ndef is_right_angled(a, b, c):\n    '''\n    Use the function right_angle_triangle to return True if the triangle with\n    given sides is right-angled. Use the function right_angle_triangle.\n    Return True if the right_angle_triangle returns True for a, b, and c.\n    Return False otherwise.\n    Example:\n    is_right_angled(3, 4, 5) == True\n    is_right_angled(3, 4, 4) == False\n    '''\n    return right_angle_triangle(a,b,c)\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return (a**2 + b**2) == c**2 or (b**2 + c**2) == a**2 or (a**2 + c**2) == b**2\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    # You may name your variables however you like, but do not rename them!\n    \n    # TODO: your code here\n    return False # Replace this line with your return value\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    assert words, \"List should not be empty\"\n    # FILL THE CODE HERE\n    a = []\n    for i in range(len(words)):\n        a.append(len(set(words[i])))\n    return words[a.index(max(a))]"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    return min(words, key=lambda w: (len(set(w)), w))\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    # create a dictionary with unique characters as keys and their counts as values\n    char_count = {}\n    for word in words:\n        for c in word:\n            if c not in char_count:\n                char_count[c] = 1\n            else:\n                char_count[c] += 1\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return Non"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    word_dict = {}\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    return min(words)\n    # return max(words, key=lambda word: len(set(word)))\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return max(words, key=lambda word: len(set(word)))\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    return max(words, key=lambda x: len(set(x)))\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    words = list(set(words)) # to remove duplicates\n    words.sort(key = lambda x: len(set(x)))\n    return words[-1]\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    d = {}\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique = len(set(word))\n        if unique > max_unique:\n            max_unique = unique\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if number + remaining >= need:\n        result = [number + remaining - need, 0]\n    else:\n        result = [number, remaining - (need - (number + remaining))]\n    return result\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    # your code here\n    if remaining < need:\n        return [number + remaining, 0]\n    return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if number < 0 or number > 1000:\n        return [0, 0]\n    if need < 0 or need > 1000:\n        return [0, 0]\n    if remaining < 0 or remaining > 1000:\n        return [0, 0]\n    return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    pass"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    # WRITE YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    eaten = min(need, remaining)\n    remaining -= eaten\n    return [number + eaten, remaining]\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    # Your code here\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = operand[0]\n    for x in range(0, len(operator)-1):\n        if operator[x] == '+':\n            result += operand[x+1]\n        elif operator[x] == '*':\n            result *= operand[x+1]\n        elif operator[x] == '-':\n            result -= operand[x+1]\n        elif operator[x] == '//':\n            result //= operand[x+1]\n        elif operator[x] == '**':\n            result **= operand[x+1]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    expression = \"\"\n    i = 0\n    for item in operator:\n        if item == \"+\":\n            expression += \"+\"\n            expression += str(operand[i])\n            expression += str(operand[i+1])\n        elif item == \"-\":\n            expression += \"-\"\n            expression += str(operand[i])\n            expression += str(operand[i+1])\n        elif item == \"*\":\n            expression += \"*\"\n            expression += str(operand[i])\n            expression += str(operand[i+1])\n        elif item == \"/\":\n            expression += \"//\"\n            expression += str(operand[i])\n            expression += str(operand[i+1])\n        elif item == \"**\":\n            expression += \"**\"\n            expression += str(operand[i])\n            expression += str(operand[i+1])\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    result = 0\n    # Write your code here\n    operand = [str(i) for i in operand]\n    if operator[0] == '+':\n        result = int(''.join(operand)) + int(''.join(operand[1:]))\n    elif operator[0] == '-':\n        result = int(''.join(operand)) - int(''.join(operand[1:]))\n    elif operator[0] == '*':\n        result = int(''.join(operand)) * int(''.join(operand[1:]))\n    elif operator[0] == '//':\n        result = int(''.join(operand)) // int(''.join(operand[1:]))\n    elif operator[0] == '**':\n        result = int(''.join(operand)) ** int(''.join(operand[1:]))\n    return result\n    \n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    return eval(str(operator) + \".\" + str(operand))\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    result = 0\n    operator = operator[::-1]\n    operand = operand[::-1]\n    for i in range(len(operator)):\n        if operator[i] == \"+\":\n            result += operand[i]\n        elif operator[i] == \"-\":\n            result -= operand[i]\n        elif operator[i] == \"*\":\n            result *= operand[i]\n        elif operator[i] == \"/\":\n            result //= operand[i]\n        elif operator[i] == \"**\":\n            result **= operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    assert operator, 'operator cannot be empty!'\n    assert operand, 'operand cannot be empty!'\n    operator_map = {\n        '+' : lambda x,y: x+y,\n        '-' : lambda x,y: x-y,\n        '*' : lambda x,y: x*y,\n        '/' : lambda x,y: x//y,\n        '**': lambda x,y: x**y\n    }\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    \n    result = operand[0]\n    \n    for i in range(0, len(operator)):\n        if operator[i] == '+':\n            result = result + operand[i + 1]\n        elif operator[i] == '-':\n            result = result - operand[i + 1]\n        elif operator[i] == '*':\n            result = result * operand[i + 1]\n        elif operator[i] == '//':\n            result = result // operand[i + 1]\n        elif operator[i] == '**':\n            result = result ** operand[i + 1]\n    \n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    result = operand[0]\n    operator = operator[0]\n    if operator == '+':\n        result += operand[1]\n    elif operator == '-':\n        result -= operand[1]\n    elif operator == '*':\n        result *= operand[1]\n    elif operator == '//':\n        result //= operand[1]\n    elif operator == '**':\n        result **= operand[1]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    return \n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    result = []\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                result.append(i.lower())\n            else:\n                result.append(i.upper())\n        else:\n            result.append(i)\n    return \"\".join(result)\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return s.swapcase()\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    new_s = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                new_s += i.lower()\n            else:\n                new_s += i.upper()\n        else:\n            new_s += i\n    return new_s\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    s = s.swapcase()\n    return s\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    \n    \n    \ndef solve(s):\n    return ''.join([i.lower() if i.isupper() else i.upper() for i in s])\n    \n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    return \"\".join([\n        ch.upper() if ch.islower() else ch.lower() if ch.isupper() else ch\n        for ch in s\n    ])\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n        else:\n            result += c\n    return result if result else s[::-1]"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    if text:\n        md5 = hashlib.md5(text.encode('utf-8'))\n        return md5.hexdigest()\n    else:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    if len(text) == 0:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    if len(text) == 0:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    if not text:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if len(text) == 0:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    hash = hashlib.md5()\n    hash.update(text.encode('utf-8'))\n    return hash.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    hash_object = hashlib.md5(text.encode())\n    hash_value = hash_object.hexdigest()\n    return hash_value\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "    integers = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "    start = a\n    if a % 2 == 1:\n        start = a + 1\n    end = b\n    if b % 2 == 1:\n        end = b - 1\n    return [i for i in range(start, end+1) if i % 2 == 0]"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "    return [x for x in range(a, b+1) if x % 2 == 0]"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "    return []\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "    ans = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            ans.append(num)\n    return ans\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "    pass"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "    if a % 2 == 0:\n        start = a\n    else:\n        start = a+1\n    end = b-1\n    res = []\n    for i in range(start, end):\n        if i % 2 == 0:\n            res.append(i)\n    return re"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "    evens = []\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "    even_ints = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_ints.append(num)\n    return even_ints\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "    integers = []\n"
    }
]