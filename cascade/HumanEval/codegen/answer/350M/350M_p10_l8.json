[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        return False\n    if numbers[0] < numbers[1]:\n        return True\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Write your code here.\n    return all(abs(n - threshold) < abs(threshold - n) for n in numbers)\n",
        "num_ids": 33
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum([abs(numbers[i] - numbers[i - 1]) for i in range(1, len(numbers))]) <= threshold\n",
        "num_ids": 35
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(0, len(numbers)):\n        if abs(numbers[i] - numbers[i+1]) > threshold:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in numbers:\n        for j in numbers:\n            if abs(i - j) < threshold:\n                return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(numbers) < 2:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for num in numbers:\n        if abs(num) < threshold:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (\n        numbers[0] <= numbers[1] - threshold\n        or numbers[0] <= numbers[2] - threshold\n        or numbers[1] <= numbers[2] - threshold\n    )\n",
        "num_ids": 50
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Checking if in numbers list is 0 or 1\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    parens_list = []\n    for i in paren_string:\n        if i == '(':\n            parens_list.append(i)\n        elif i == ')':\n            if len(parens_list) > 0:\n                parens_list.pop()\n            else:\n                return []\n        \n    if len(parens_list) > 0:\n        return parens_list\n    else:\n        return []\n    \n    \ndef find_unbalanced_braces(paren_string: str) -> List[str]:\n    \"\"\" Returns a list of all the unbalanced parens in the input string.\n    >>> find_unbalanced_braces('( ) (( )) (( )( ))')\n    ['( )', '(())', '(()())']\n    \"\"\"\n    \n    unbalanced_braces = []\n    for i in paren_string:\n        if i == '(':\n            if not unbalanced_braces:\n                unbalanced_braces.append(i)\n            else:\n                unbalanced_braces.append(i)\n                unbalanced_braces.append(i)\n                unbalanced_braces.append(i)\n                \n        elif i == ')':\n            if unbalanced_braces[-1] == '(':\n                unbalanced_braces.pop()\n            else:\n                unbalanced_braces.append(i)\n                unbalanced_braces.append(i)\n                unbalanced_braces.append(i)\n                \n    if len(unbalanced_braces) == 0:\n        return []\n        \n    else:\n        return unbalanced_braces\n    \n",
        "num_ids": 391
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    input_string = ''\n    current_index = 0\n    paren_group = []\n",
        "num_ids": 22
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    left_bracket_ind = -1\n    left_bracket_pairs = []\n    right_bracket_ind = -1\n    right_bracket_pairs = []\n    for i, c in enumerate(paren_string):\n        if c == \"(\":\n            if left_bracket_ind == -1 and right_bracket_ind == -1:\n                left_bracket_ind = i\n                left_bracket_pairs.append(paren_string[i:])\n            elif left_bracket_ind == -1:\n                left_bracket_ind = i\n                left_bracket_pairs.append(paren_string[i:])\n            else:\n                right_bracket_ind = i\n                right_bracket_pairs.append(paren_string[i:])\n        elif c == \")\":\n            if left_bracket_ind == -1 and right_bracket_ind == -1:\n                right_bracket_ind = i\n                right_bracket_pairs.append(paren_string[i:])\n            elif left_bracket_ind == -1:\n                left_bracket_ind = i\n                left_bracket_pairs.append(paren_string[i:])\n            elif right_bracket_ind == -1:\n                right_bracket_ind = i\n                right_bracket_pairs.append(paren_string[i:])\n            else:\n                left_bracket_pairs.append(paren_string[i:])\n                right_bracket_pairs.append(paren_string[i:])\n        else:\n            pass\n    return [\n        left_bracket_pairs,\n        right_bracket_pairs\n    ]\n",
        "num_ids": 416
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # The number of open parentheses is the number of unique parentheses with different value\n    brackets_count = {'(': 1, ')': 1, '{': 1, '}': 1, '[]': 1,'string': 1}\n",
        "num_ids": 55
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    output = []\n",
        "num_ids": 6
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \"\"\"\n    parsed_paren_string = []\n    \n    # Iterate through the input string and separate every open parenthesis\n    for char in paren_string:\n        if char == '(':\n            parsed_paren_string.append('(')\n        elif char == ')':\n            if parsed_paren_string[-1] == '(':\n                parsed_paren_string.pop()\n            else:\n                parsed_paren_string.append(')')\n    return parsed_paren_string\n    \"\"\"\n    return []\n",
        "num_ids": 132
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    separated_paren_groups = []\n    if paren_string == ')':\n        separated_paren_groups.append(paren_string)\n        separated_paren_groups.append('')\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            separated_paren_groups.append(paren_string[index:])\n            separated_paren_groups.append('')\n    return separated_paren_groups\n",
        "num_ids": 110
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    parens = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            parens.append(char)\n        elif parens and parens[-1] == '(':\n            parens.pop()\n    return parens\n",
        "num_ids": 68
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    string = \"\"\n    # split the input string into a list of strings\n    # split the input string into a list of strings\n    # loop through the list of strings and split them into groups of whitespace\n    # split the list into a list of strings\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == \"(\":\n            string = string + paren_string[i]\n        else:\n            string = string + paren_string[i]\n    # check for the end of the string and if it is a group, return it as a list\n    if string == \"\":\n        return [string]\n    else:\n        # search for any spaces, if one is found, return a list\n        # this is for things like \"( ) ()\"\n        if string[0] == \" \":\n            return separate_paren_groups(string[1:])\n        else:\n            return [string]\n",
        "num_ids": 219
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    separated = []\n    # since we only have one group\n    if paren_string == \"\":\n        return []\n    \n    open_paren_index = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] in ['(', ')']:\n            separated.append(paren_string[open_paren_index:i])\n            open_paren_index = i + 1\n        elif paren_string[i] == '(':\n            open_paren_index += 1\n        else:\n            break\n    separated.append(paren_string[open_paren_index:])\n    return separated\n",
        "num_ids": 154
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # get the largest number as a decimal\n    decimal = number - number.__abs__()\n    # if we get a negative number, we round to the nearest int\n    if decimal < 0:\n        decimal = int(decimal) + 1\n    # if we get a positive number, we get the whole number\n    else:\n        decimal = decimal\n",
        "num_ids": 84
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return trunc(number) / 10\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    number = int(number)\n    if number < 0:\n        number = -number\n    return number\n",
        "num_ids": 26
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if number >= 1:\n        return number / 10\n    else:\n        return -number * 10\n",
        "num_ids": 25
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    number_str = str(number)\n    decimal = -1\n    for i in number_str:\n        if i.isnumeric() is True:\n            decimal = number_str.index(i) - 1\n            break\n    if decimal == -1:\n        decimal = 0\n    return number_str[decimal:decimal+1]\n",
        "num_ids": 86
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # Check if number is already a float\n    if isinstance(number, float):\n        # Otherwise, it is a non-number\n        if number > 0:\n            return truncate_number(number)\n        else:\n            raise ZeroDivisionError(\"number cannot be divided by zero\")\n    else:\n        # number is already a number\n        return number",
        "num_ids": 85
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: change this to work for positive numbers.\n    return number\n",
        "num_ids": 19
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return round(number, 4)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    truncated_number = int(number)\n    if truncated_number >= 0:\n        return truncated_number\n    else:\n        return truncated_number - 1\n",
        "num_ids": 43
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return round(number, -1)\n",
        "num_ids": 11
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if operations[0] == 0:\n        return True\n",
        "num_ids": 15
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if operations:\n        if operations[0] < 0:\n            return False\n        if operations[0] >= 0:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    min_val = min(operations)\n    if min_val < 0:\n        return False\n    \n    for val in operations:\n        if val < 0:\n            return False\n        \n    return True\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    for i in operations:\n        if i < 0:\n            return False\n        elif i < 0:\n            return True\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in operations:\n        if i <= 0:\n            return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # your code here\n    return False\n",
        "num_ids": 11
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return operations[0] >= 0\n",
        "num_ids": 10
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (operations[0] > 0 and below_zero(operations[1:]) == True)\n",
        "num_ids": 26
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance -= op\n",
        "num_ids": 25
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(operations) < 2:\n        return False\n    operations.sort()\n    for index in range(1, len(operations)):\n        if operations[index] < 0:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return round(sum(map(abs, numbers)) / len(numbers), 2)\n",
        "num_ids": 22
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Calculate Mean Absolute Deviation (MAD) for each element in the given list.\n    # The MAD is calculated by taking the mean of all the absolute differences\n    # in a given set of numbers. The mean of this is then divided by the number\n    # of elements in the set, which is the mean of all the absolute differences\n    # from the set elements.\n    # The MAD is then calculated by taking the square root of the MAE (Mean Absolute\n    # Error) over all the elements in the set, which is the mean of all the absolute\n    # differences from the set elements.\n    # The MAD is then then multiplied by the number of elements in the set.\n    # That is, the MAD is the (mean - mean_of_all_differences) / (number of elements\n    # in the set).\n    # Finally, the MAE is calculated by taking the mean of all the absolute differences\n    # from the set elements.\n    # The MAE is then divided by the number of elements in the set, which is the mean\n    # of all the absolute differences from the set elements.\n    # The MAE is then divided by the number of elements in the set.\n    \n    # Calculate the mean of all the absolute differences.\n    # This is the mean of all the absolute differences from all the elements.\n    mean_of_all_differences = mean(numbers)\n    # Calculate the square root of the MAE.\n    # Note that the mean is calculated in the first place because MAD is already\n    # calculated and MAD = MAE.\n    # Thus, the first place is not considered.\n    mad = math.sqrt(mean_of_all_differences)\n    # Calculate the number of elements in the set.\n    # This is the number of elements in the set.\n    # MAD = math.sqrt(mean_of_all_differences)\n    # MAD = mean_of_all_differences\n    # MAD = mean(numbers)\n    # MAD = mean(numbers[:2])\n    number_of_elements = len(numbers)\n    # Return the mean of all the absolute differences.\n    return math.sqrt(mean_of_all_differences) / number_of_elements\n",
        "num_ids": 516
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    nums = [item for item in numbers]\n    avg = sum(nums)/len(nums)\n    dev = 0\n    for i in range(len(nums)):\n        dev = dev + (nums[i] - avg)**2\n    return (dev**(1/2))\n",
        "num_ids": 74
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Calculate mean and centerpoint\n    mean = sum(numbers) / len(numbers)\n    centerpoint = mean\n    \n    # Calculate squared differences\n    differences = [abs(number - centerpoint) for number in numbers]\n    squared_differences = [x**2 for x in differences]\n    \n    # Calculate mean squared difference\n    mean_squared_difference = sum(squared_differences) / len(squared_differences)\n    return mean_squared_difference\n    \n    \ndef median(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median.\n    Median is the middle of the list.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.0\n    \"\"\"\n    \n    # Calculate median\n    middle = len(numbers) // 2\n    median = sum(numbers[:middle]) / middle\n    return median\n    \n    \ndef mode(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mode.\n    Mode is the most common value.\n    >>> mode([1.0, 2.0, 3.0, 4.0])\n    3.0\n    \"\"\"\n    \n    # Calculate mode\n    mode = numbers[0]\n    for value in numbers:\n        if value > mode:\n            mode = value\n    return mode\n    \n    \ndef quartiles(numbers: List[float]) -> List[float]:\n    \"\"\" For a given list of input numbers, calculate Median.\n    Quartiles is a list of the 25th and 75th quartiles.\n    >>> quartiles([1.0, 2.0, 3.0, 4.0])\n    [1.0, 2.5, 3.5, 4.5]\n    \"\"\"\n    \n    # Calculate quartiles\n    quartiles = [numbers[i] for i in range(0, len(numbers), 4)]\n    \n    # Get 25th and 75th quartiles\n    quartiles.sort()\n    return quartiles\n    \n    \ndef stdev(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Standard Deviation.\n    Standard Deviation is the standard deviation of the data.\n    >>> stdev([1.0, 2.0, 3.0, 4.0])\n    0.6\n    \"\"\"\n    \n    # Calculate standard deviation\n    stdev = numbers[0]\n    for value in numbers:\n        stdev = stdev + (value - numbers[0])**2\n    stdev = abs(stdev / len(numbers))**0.5\n    return stdev\n    \n    \ndef variance(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Variance.\n    Variance is the square of the variance of the data.\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n    9.0\n    \"\"\"\n    \n    # Calculate variance\n    variance = sum(numbers ** 2) / len(numbers)\n    return variance\n    \n    \ndef max(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Maximum.\n    Maximum is the largest value in the data.\n    >>> max([1.0, 2.0, 3.0, 4.0])\n    4.0\n    \"\"\"\n    \n    # Calculate maximum\n    maximum = numbers[0]\n    for value in numbers:\n        if value > maximum:\n            maximum = value\n    return maximum\n    \n    \ndef min(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Minimum.\n    Minimum is the smallest value in the data.\n    >>> min([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    \n    # Calculate minimum\n    minimum = numbers[0]\n    for value in numbers:\n        if value < minimum:\n            minimum = value\n    return minimum\n    \n    \ndef sum(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Sum.\n    Sum is the sum of the values in the data.\n    >>> sum([1.0, 2.",
        "num_ids": 1024
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum(abs(x - sum(numbers)/len(numbers)) for x in numbers) / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum = 0\n    for number in numbers:\n        sum += abs(number - numbers.mean())\n    return sum / len(numbers)\n",
        "num_ids": 35
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    if len(numbers) < 1:\n        raise ValueError(\"Input list must not be empty.\")\n    \n    sum = 0\n    for i in numbers:\n        sum += (i - mean(numbers))**2\n    \n    return (sum/len(numbers))**(1/2)\n",
        "num_ids": 74
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(numbers) < 2:\n        return 0.0\n    else:\n        return (sum(map(abs, numbers)) - sum(map(abs, numbers) * numbers)) / (len(numbers) - 1)\n",
        "num_ids": 56
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    mean_x = mean(numbers)\n    return abs(sum(numbers - mean_x) / len(numbers))\n",
        "num_ids": 32
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    numbers = sorted(numbers)\n    mean = sum(numbers) / len(numbers)\n    sum_of_sqr = 0\n    for n in numbers:\n        sum_of_sqr += pow(n - mean, 2)\n    return (sum_of_sqr / len(numbers)) ** 0.5\n",
        "num_ids": 80
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return numbers + [delimeter] + numbers[::2]\n",
        "num_ids": 16
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [delimeter] * (numbers.count(delimeter) + 1)\n    \n    \n",
        "num_ids": 25
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [int(n) if i % 2 else int(n) + delimeter for i, n in enumerate(numbers)]\n",
        "num_ids": 32
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return list(zip(numbers[:-1], numbers[1:])) + [delimeter]\n",
        "num_ids": 24
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if delimeter == 0:\n        return [numbers[-1]] + numbers[:-1]\n    elif delimeter == 1:\n        return numbers + [numbers[0]]\n    elif delimeter == 2:\n        return numbers + [numbers[0], numbers[1]]\n    elif delimeter == 3:\n        return numbers + [numbers[0], numbers[1], numbers[2]]\n",
        "num_ids": 97
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Insert code here\n    return numbers\n",
        "num_ids": 14
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return numbers + [delimeter] * (len(numbers) - len(numbers) % len(numbers))\n",
        "num_ids": 29
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [delimeter] * (len(numbers) - len(numbers) % len(numbers)) + number",
        "num_ids": 28
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [delimeter * (x + 1) if x > 0 else delimeter for x in range(len(numbers) + 1)]\n",
        "num_ids": 33
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [delimeter * i + number for i, number in enumerate(numbers)]\n",
        "num_ids": 22
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # initialize stacks\n    stacks = [0]\n    stacks_len = [0]\n",
        "num_ids": 24
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    level = 0\n    stack = []\n    for ch in paren_string:\n        if ch == '(':\n            stack.append(level)\n        elif ch == ')':\n            level = stack.pop()\n    return stack\n",
        "num_ids": 57
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    split_string = paren_string.split()\n    level = 0\n    return_list = []\n    for p in split_string:\n        if p == '(':\n            level += 1\n        elif p == ')':\n            level -= 1\n        if level == 0:\n            return_list.append(level)\n    return return_list",
        "num_ids": 83
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for s in paren_string.split():\n        if s == '(':\n            result.append(0)\n        elif s == ')':\n            result.append(1)\n        else:\n            result.append(0)\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    parsed_string = []\n    for char in paren_string:\n        if char == '(':\n            parsed_string.append(1)\n        elif char == ')':\n            parsed_string.pop()\n    return parsed_string\n",
        "num_ids": 64
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def is_full(paren_string):\n        opening = paren_string.count('(')\n        closing = paren_string.count(')')\n        if opening + closing == len(paren_string):\n            return True\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    for current_level in range(len(paren_string)):\n        if paren_string[current_level] == '(':\n            result.append(current_level+1)\n        elif paren_string[current_level] == ')':\n            if len(result) == 0:\n                raise ValueError(f'no nesting found for {paren_string[current_level:current_level+1]}')\n            if current_level < len(paren_string) - 1:\n                result.pop()\n            else:\n                result.pop()\n                result.pop()\n                result.pop()\n                result.pop()\n",
        "num_ids": 154
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        else:\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n            else:\n                return [0]\n    if len(paren_stack) > 0:\n        return [len(paren_stack)]\n    else:\n        return [0]\n",
        "num_ids": 101
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    nested_parens = [0] # Max number of levels of nesting\n    # Initialize nested parens\n    nested_parens[0] = int(paren_string)\n    # Loop through nested parens\n    for i in range(1, len(paren_string)):\n        # Check for number of levels of nesting\n        if nested_parens[i] == 0:\n            nested_parens[i] = nested_parens[i - 1]\n        # Update nested parens\n        if nested_parens[i] > 0:\n            nested_parens[i] += 1\n",
        "num_ids": 146
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # With a stack, we can store the string representations of parentheses\n    #    - e.g. '()(())' -> [(0,), (1,), (2,), (0,)]\n    #    - e.g. '((())()' -> [(0,), (1,), (2,), (0,), (1,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,), (16,), (17,), (18,), (19,), (20,), (21,), (22,), (23,), (24,), (25,), (26,), (27,), (28,), (29,), (30,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,), (39,), (40,), (41,), (42,), (43,), (44,), (45,), (46,), (47,), (48,), (49,), (50,), (51,), (52,), (53,), (54,), (55,), (56,), (57,), (58,), (59,), (60,), (61,), (62,), (63,), (64,), (65,), (66,), (67,), (68,), (69,), (70,), (71,), (72,), (73,), (74,), (75,), (76,), (77,), (78,), (79,), (80,), (81,), (82,), (83,), (84,), (85,), (86,), (87,), (88,), (89,), (90,), (91,), (92,), (93,), (94,), (95,), (96,), (97,), (98,), (99,), (100,), (101,), (102,), (103,), (104,), (105,), (106,), (107,), (108,), (109,), (110,), (111,), (112,), (113,), (114,), (115,), (116,), (117,), (118,), (119,), (120,), (121,), (122,), (123,), (124,), (125,), (126,), (127,), (128,), (129,), (130,), (131,), (132,), (133,), (134,), (135,), (136,), (137,), (138,), (139,), (140,), (141,), (142,), (143,), (144,), (145,), (146,), (147,), (148,), (149,), (150,), (151,), (152,), (153,), (154,), (155,), (156,), (157,), (158,), (159,), (160,), (161,), (162,), (163,), (164,), (165,), (166,), (167,), (168,), (169,), (170,), (171,), (172,), (173,), (174,), (175,), (176,), (177,), (178,), (179,), (180,), (181,), (182,), (183,), (184,), (185,), (186,), (187,), (188,), (189,), (190,), (191,), (192,), (193,), (194,), (195,), (196,), (197,), (198,), (199,), (200,), (201,), (202,), (203,), (204,), (205,), (206,), (207,), (208,), (209,), (210,), (211,), (212,), (213,), (214,), (215,), (216,), (217,), (218,), (219,), (220,), (221,), (222,), (223,), (224,), (225,), (226,), (227,), (228,), (229,), (230,), (231,), (232,), (233,), (234,), (235,), (236,), (237,), (238,)",
        "num_ids": 1024
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [s for s in strings if s.lower().startswith(substring)]\n",
        "num_ids": 22
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    filtered_strings = []\n    for i in strings:\n        if substring in i:\n            filtered_strings.append(i)\n    return filtered_strings\n",
        "num_ids": 41
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return list(filter(lambda string: string.lower().startswith(substring), strings))\n    \ndef filter_by_index(strings: List[str], index: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given index\n    >>> filter_by_index(['abc', 'bacd', 'cde', 'array'], 0)\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda string: string[index] == '', strings))\n    \ndef filter_by_period(strings: List[str], period: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given period\n    >>> filter_by_period(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda string: string.endswith(period), strings))\n    \ndef filter_by_alphabet(strings: List[str], alphabet: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given alphabet\n    >>> filter_by_alphabet(['abc', 'bacd', 'cde', 'array'], 'b')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda string: string.lower().startswith(alphabet), strings))\n    \ndef is_array(string: str) -> bool:\n    \"\"\" Check if a given string is an array\n    >>> is_array('abc')\n    True\n    >>> is_array('bbb')\n    False\n    \"\"\"\n    return string.endswith('[' or string.endswith(']'))\n    \ndef all_the_possible_permutations(strings: List[str]) -> List[List[str]]:\n    \"\"\" Returns all possible combinations of possible permutations\n    >>> all_the_possible_permutations([])\n    []\n    >>> all_the_possible_permutations(['a', 'b', 'c', 'd'])\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n    if not strings:\n        return []\n    if len(strings) == 1:\n        return [strings]\n    \n    ans = []\n    for i in range(len(strings[0])):\n        possible_permutations = all_the_possible_permutations(strings[1:])\n        for permutation in possible_permutations:\n            temp = []\n            for string in strings:\n                temp.append(string[:i] + string[i + 1:])\n            ans.append(temp)\n    return ans\n    \ndef all_the_permutations(strings: List[str]) -> List[List[str]]:\n    \"\"\" Returns all possible permutations\n    >>> all_the_permutations(['a', 'b', 'c', 'd'])\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n    if not strings:\n        return []\n    \n    ans = []\n    for string in strings:\n        permutations = all_the_permutations(strings[1:])\n        for permutation in permutations:\n            ans.append(string + permutation)\n    return ans\n",
        "num_ids": 776
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [s for s in strings if s.count(substring) > 0]\n",
        "num_ids": 21
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    return [string for string in strings if string.count(substring) > 0]\n",
        "num_ids": 23
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [i for i in strings if substring in i]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # summation = sum(numbers)\n    # product = 1\n    # for i in numbers:\n    #     product *= i\n    # return (summation, product)\n    return (sum(numbers), prod(numbers))\n",
        "num_ids": 59
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum = 0\n    product = 1\n",
        "num_ids": 11
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s, p = 0, 1\n    for num in numbers:\n        s += num\n        p *= num\n    return s, p\n",
        "num_ids": 34
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0, 1\n    for i in numbers:\n        result += i\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not numbers:\n        return 0, 1\n    \n    return (numbers[0], numbers[0] * numbers[1])\n",
        "num_ids": 33
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    try:\n        sum, product = numbers[0]\n        for num in numbers[1:]:\n            sum = sum + num\n            product = product * num\n        return sum, product\n    except IndexError:\n        return 0, 1\n",
        "num_ids": 57
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: implement this function\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s, p = 0, 1\n    for n in numbers:\n        s += p * n\n        p = n\n    return s, p\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = 0, 1\n    for num in numbers:\n        result = num + result[0] * result[1], result[1] * num + result[0] * num\n    return result[0], result[1]",
        "num_ids": 53
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n",
        "num_ids": 20
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    numbers = [n for n in numbers if n!= 0]\n    i = 0\n    result = []\n    while len(numbers)!= 0:\n        i = numbers.pop(0)\n        result.append(i)\n        numbers = [n - i for n in numbers]\n    return result",
        "num_ids": 74
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst: List[int] = []\n    for i in range(len(numbers)):\n        lst.append(max(numbers[:i]))\n    return lst\n",
        "num_ids": 46
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l = []\n    for num in numbers:\n        l.append(max(numbers[num-1:]))\n    return l\n",
        "num_ids": 33
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    numbers_max, values_max = [], []\n",
        "num_ids": 15
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = []\n    for i in numbers:\n        if len(res) == 0 or i > res[-1]:\n            res.append(i)\n        else:\n            while len(res) > 0 and i > res[-1]:\n                res.pop()\n            res.append(i)\n    return res\n",
        "num_ids": 77
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    numbers.sort()\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif numbers[i] > result[i - 1] and numbers[i] > numbers[i - 1] and numbers[i] > numbers[i - 1] and numbers[i] > numbers[i - 1]:\n            result[i] = numbers[i]\n        elif numbers[i] > result[i - 1] and numbers[i] > result[i - 1]:\n            result[i] = numbers[i]\n    return result\n",
        "num_ids": 148
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_list = []\n",
        "num_ids": 8
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(numbers)\n    if n < 2:\n        return numbers\n",
        "num_ids": 21
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not numbers:\n        return []\n    result = []\n    last_max = numbers[0]\n    for i in range(len(numbers)):\n        new_max = last_max\n        last_max = numbers[i]\n        result.append(new_max)\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Find the rolling maximum element in the sequence.\n    # Compare the maximum element in sequence by the current rolling maximum element.\n    # If current maximum is greater than current rolling maximum, then update the current maximum element.\n    # If current maximum is less than current rolling maximum, then return the current maximum.\n    #\n    # Note:\n    # `numbers` is guaranteed to be in ascending order.\n    # `numbers` can be modified, so the sequence may have duplicates.\n    # `numbers` are guaranteed to be sorted in ascending order.\n    #\n    # The time complexity of the above code is O(n), where n is the length of `numbers`\n    #\n    # Result:\n    # Time complexity of the above code is O(n^2) where n is the length of `numbers`\n    #\n    # Check if the current element is smaller than the rolling maximum.\n    # If it is, then update the current element to the rolling maximum.\n    # Else, return the current element.\n    #\n    #\n    # See the discussion on\n    # https://docs.python.org/3/library/stdtypes.html#str.format\n    #\n    #\n    # For example, if `numbers` is [1, 2, 3, 2, 3, 4, 2], the rolling maximum sequence is [1, 2, 3, 2, 3, 4, 4].\n",
        "num_ids": 322
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Create a list of prefixes, and a list of suffixes\n    prefixes = []\n    suffixes = []\n    # Prefix and suffix are the same\n    prefixes.append(string)\n    suffixes.append('')\n    # Loop through prefix and suffix until a match\n    while prefixes:\n        prefix = prefixes.pop()\n        suffix = suffixes.pop()\n        # If suffix is still a palindrome, then append to prefixes\n        if is_palindrome(suffix):\n            prefixes.append(prefix)\n            suffixes.append(suffix)\n    # Check if prefix is palindrome\n    while prefixes:\n        prefix = prefixes.pop()\n        # If prefix is not a palindrome, then append to suffixes\n        if prefix not in suffixes:\n            suffixes.append(prefix)\n    return suffixes[::-1]\n",
        "num_ids": 215
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not string:\n        return ''\n",
        "num_ids": 11
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Find longest palindromic suffix\n    longest_suffix = longest_palindrome_suffix(string)\n    # Add end of longest palindromic suffix to string\n    string += longest_suffix\n    # Append the palindrome to the end of string\n    string += longest_palindrome_suffix(string)\n    # Reverse the string\n    return string[::-1]\n",
        "num_ids": 96
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Let s be the string\n    s = string\n    # Create a stack\n    stack = []\n    # Iterate through all characters in s\n    for i in range(len(s)):\n        # Check if the character is a palindrome\n        if is_palindrome(s[i:]):\n            # Push it to the stack\n            stack.append(s[i:])\n        else:\n            # Pop the stack\n            stack.pop()\n    # If the stack is not empty\n    # then we have a palindrome string\n    if len(stack)!= 0:\n        return ''.join(stack) + ''.join(reversed(stack))\n    # Otherwise return the empty string\n    else:\n        return ''\n",
        "num_ids": 174
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    longest_prefix_string = ''\n    max_length = 0\n    for char in string:\n        if is_palindrome(char):\n            if len(longest_prefix_string) < len(char):\n                longest_prefix_string = char\n                max_length = len(char)\n            else:\n                max_length = len(char)\n                if char!= char[::-1]:\n                    longest_prefix_string += char + char[::-1]\n                else:\n                    longest_prefix_string = longest_prefix_string[::-1]\n    if longest_prefix_string == string:\n        return longest_prefix_string\n    else:\n        return longest_prefix_string[::-1]\n",
        "num_ids": 175
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not string:\n        return ''\n",
        "num_ids": 11
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    longest_palindrome = ''\n    postfix_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            postfix_palindrome += string[:i + 1]\n        else:\n            longest_palindrome = string[:i + 1] if string[:i + 1]!= string[::-1] else string[:i + 1]\n            longest_palindrome += string[:i + 1] + string[::-1]\n    return longest_palindrome + postfix_palindrome\n",
        "num_ids": 148
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    length = len(string)\n    i = 0\n    palindrome = ''\n    while i < length:\n        if string[i]!= string[length-i-1]:\n            if is_palindrome(string[i:length-i]):\n                palindrome = palindrome + string[i:length-i]\n        i = i+1\n    return palindrome\n",
        "num_ids": 94
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    string = string.lower()\n    # Find all non-alpha symbols\n    for i in range(len(string)):\n        # Check if each character is alphabet\n        if not string[i].isalpha():\n            continue\n        # Check if the next character is a postfix prefix and if the first character of the prefix is a palindrome\n        if (string[i + 1].isalpha() and string[i]!= string[i + 1]) or (string[i + 1].isalpha() and string[i] == string[i + 1]):\n            # If it is, append to the palindrome string\n            string = string + string[i:] + string[:i]\n            break\n    # If all the characters of the string are alpha and non-alpha, the string is a palindrome\n    if string.isalpha() and not string.isalpha():\n        return string\n    else:\n        return ''\n",
        "num_ids": 213
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # store the length of the palindrome\n    # find the longest palindrome prefix that begins with a supplied string\n    # reverse that prefix\n    # append the palindrome\n    # append the reverse of the palindrome\n    pass\n",
        "num_ids": 56
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    res = ''\n    for i in range(len(a)):\n        res += str(ord(a[i]) ^ ord(b[i]))\n    return res\n",
        "num_ids": 42
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        if(ord(a[i]) == ord(b[i])):\n            res += '1'\n        else:\n            res += '0'\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join(chr((ord(b[i]) ^ ord(a[i])) & 0xFF for i in range(len(b))))\n",
        "num_ids": 38
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # 1st pass\n    lst_a = list(a)\n    lst_b = list(b)\n    xor = 0\n    for i in range(len(lst_a)):\n        xor += int(lst_a[i] + lst_b[i])\n    return str(xor % 2)\n",
        "num_ids": 82
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join(chr(ord(i) ^ ord(j)) for i, j in zip(a, b))\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return ''.join([chr((int(a[i]) ^ int(b[i])) % 256) for i in range(len(a))])\n",
        "num_ids": 38
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert len(a) == len(b)\n    return ''.join([str(ord(c) ^ ord(d)) for c, d in zip(a, b)])\n",
        "num_ids": 43
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join([a[i] ^ b[i] for i in range(len(a))])\n",
        "num_ids": 27
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = ''\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            result += '0' if a[i] == '1' else '1'\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return ''.join([chr((int(a[i]) ^ int(b[i])) % 2) for i in range(len(a))])\n",
        "num_ids": 38
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    start, max_len = 0, 0\n    for i, string in enumerate(strings):\n        if string == strings[i]:\n            if start == 0:\n                start = i\n            else:\n                if string[:start]!= string[:i]:\n                    max_len = max(max_len, i - start + 1)\n                start = i\n",
        "num_ids": 87
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return strings[0]",
        "num_ids": 25
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(strings) < 2:\n        return None\n    longest_str = ''\n    for s in strings:\n        longest_str += (s if len(s) > len(longest_str) else longest_str + s)\n    return longest_str\n",
        "num_ids": 65
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if strings == []:\n        return None\n    else:\n        longest = 0\n        for s in strings:\n            if len(s) > longest:\n                longest = len(s)\n        return strings[0]\n",
        "num_ids": 55
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def length(s):\n        return len(s)\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    return max(strings, key=len)\n",
        "num_ids": 14
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(strings) < 2:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return max(a, b) // max(a, b) if a!= b else a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a > b:\n        return greatest_common_divisor(b, a % b)\n    else:\n        return greatest_common_divisor(a % b, a)\n",
        "num_ids": 46
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # We want to make sure that\n    # a * b == greatest common divisor of a and b\n    # the smallest possible, so we need to check whether\n    # a * b is less than or equal to the greatest\n    # common divisor of a and b\n    if a * b == greatest_common_divisor(a, b):\n        return a * b\n    elif a == greatest_common_divisor(a, b):\n        return a\n    else:\n        return greatest_common_divisor(a, greatest_common_divisor(b, a))\n",
        "num_ids": 140
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a > b:\n        return greatest_common_divisor(b, a % b)\n    else:\n        return greatest_common_divisor(a, b % a",
        "num_ids": 44
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Let's check that they are of the same type, and then find the\n    # greatest common divisor\n",
        "num_ids": 27
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    gcd = 0\n    while b!= 0:\n        temp = a % b\n        a = b\n        b = temp\n        gcd += 1\n    return a\n",
        "num_ids": 42
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = 1\n    while a % b!= 0:\n        result += 1\n        a = a % b\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # If a and b are both positive, then return their gcd.\n    # Otherwise, if a and b are both negative, then return the greatest\n    # divisor of their gcd.\n    if a > b:\n        return greatest_common_divisor(a-b, b)\n    else:\n        return greatest_common_divisor(b, a)\n",
        "num_ids": 89
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    while a % b!= 0:\n        a = a % b\n    return b",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a % b == 0:\n        return greatest_common_divisor(greatest_common_divisor(a // b, b), a % b)\n    else:\n        return greatest_common_divisor(a // b, b)\n",
        "num_ids": 85
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [prefix for prefix in string if len(prefix) > 0]",
        "num_ids": 17
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if string == '':\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: return list of all prefixes\n    prefixes = []\n    \n    for i in range(len(string)):\n        if string[i] in string[:i]:\n            prefixes.append(string[:i])\n            \n    return prefixes\n",
        "num_ids": 65
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = [string[0]]\n    prefixes = []\n    for i in range(1, len(string)):\n        prefixes.append(s)\n        prefixes[-1] += string[i]\n    return prefixes\n",
        "num_ids": 57
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    prefixes = []\n    for i in range(len(string) - 1):\n        prefixes.append(string[i:len(string) - 1])\n    return prefixes\n",
        "num_ids": 44
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prefixes = []\n    for i in range(len(string) - 1):\n        prefixes.append(string[i:i+2])\n    return prefixes\n",
        "num_ids": 41
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    string = list(string)\n    shortest_prefix = ''\n    longest_prefix = ''\n    prefixes = []\n    \n    while string:\n        for i in range(len(string) - 1):\n            prefix = ''\n            if i > 0:\n                prefix = string[:i]\n            \n            if prefix == shortest_prefix and string[:i] == string[:i + 1]:\n                prefixes.append(prefix)\n        \n        if prefix == shortest_prefix:\n            shortest_prefix = ''\n        else:\n            shortest_prefix = prefix\n    \n    prefixes.append(shortest_prefix)\n    return prefixes\n",
        "num_ids": 156
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        if string[i]!= 'a':\n            prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 48
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # base case:\n    if string == '':\n        return []\n    # create a set of all prefixes\n    prefix_set = set()\n    for i in range(len(string)):\n        prefix_set.add(string[:i] + string[i+1:])\n    return prefix_set\n",
        "num_ids": 75
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not string:\n        return []\n    prefixes = []\n    for i, c in enumerate(string[:-1]):\n        prefixes.append(c)\n        if i == 0:\n            prefixes.append(string[i + 1])\n    return prefixes\n",
        "num_ids": 67
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sequence = ''.join(map(str, range(1, n + 1)))\n    return sequence\n",
        "num_ids": 25
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def digits(n: int):\n        return str(n) if n >= 0 else '-' + str(n)\n    digits = digits(n)\n    return'' * (n - len(digits)) + digits\n",
        "num_ids": 53
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO\n    # return'' * (n - 1) +''\n    return'' * n",
        "num_ids": 24
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return''.join([str(i) for i in range(n)])\n",
        "num_ids": 19
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1 \"\n    elif n > 1:\n        return (f\"{n} \") + string_sequence(n-1)\n",
        "num_ids": 56
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = \"0\"\n    for i in range(n):\n        s += \" \"\n    return s\n",
        "num_ids": 27
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    if n >= 0:\n        return '0' * n\n    else:\n        return'' * (n-1) + '0'\n    \n    \ndef count_digits(n: int) -> int:\n    \"\"\" Counts the number of digits in a given number.\n    >>> count_digits(0)\n    0\n    >>> count_digits(3)\n    1\n    >>> count_digits(5)\n    2\n    >>> count_digits(6)\n    3\n    >>> count_digits(9)\n    4\n    >>> count_digits(10)\n    5\n    \"\"\"\n    \n    if n <= 0:\n        raise ValueError('n must be a positive integer')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 1 + count_digits(n//10) + count_digits(n%10)\n    \n    \ndef remove_trailing_zeroes(s: str) -> str:\n    \"\"\"Return a string containing the characters from s without the trailing zeroes.\"\"\"\n    \n    if len(s) == 0:\n        return ''\n    elif len(s) <= 2:\n        return s\n    else:\n        return s[:-1]\n    \n    \ndef is_palindrome(s: str) -> bool:\n    \"\"\"Return True if string s is a palindrome, or False otherwise.\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('radar')\n    False\n    >>> is_palindrome('abba')\n    True\n    \"\"\"\n    \n    if len(s) < 2:\n        return True\n    \n    if s[0]!= s[-1]:\n        return False\n    else:\n        return is_palindrome(s[1:-1])\n    \n    \ndef is_palindrome_v2(s: str) -> bool:\n    \"\"\"Return True if string s is a palindrome, or False otherwise.\n    >>> is_palindrome_v2('noon')\n    True\n    >>> is_palindrome_v2('radar')\n    False\n    >>> is_palindrome_v2('abba')\n    True\n    \"\"\"\n    \n    return s == remove_trailing_zeroes(s[::-1])\n    \n    \ndef is_palindrome_v3(s: str) -> bool:\n    \"\"\"Return True if string s is a palindrome, or False otherwise.\n    >>> is_palindrome_v3('noon')\n    True\n    >>> is_palindrome_v3('radar')\n    False\n    >>> is_palindrome_v3('abba')\n    True\n    \"\"\"\n    \n    for i in range(len(s)-1, -1, -1):\n        if s[i]!= s[-1 - i]:\n            return False\n    return True\n    \n    \ndef is_palindrome_v4(s: str) -> bool:\n    \"\"\"Return True if string s is a palindrome, or False otherwise.\n    >>> is_palindrome_v4('noon')\n    True\n    >>> is_palindrome_v4('radar')\n    False\n    >>> is_palindrome_v4('abba')\n    True\n    \"\"\"\n    \n    return s == remove_trailing_zeroes(s[::-1])\n    \n    \ndef is_palindrome_v5(s: str) -> bool:\n    \"\"\"Return True if string s is a palindrome, or False otherwise.\n    >>> is_palindrome_v5('noon')\n    True\n    >>> is_palindrome_v5('radar')\n    False\n    >>> is_palindrome_v5('abba')\n    True\n    \"\"\"\n    \n    i = 0\n    l = len(s)\n    while i < l//2:\n        if s[i]!= s[-1 - i]:\n            return False\n        else:\n            i += 1\n    return True\n    \n    \ndef is_palindrome_v6(s: str) -> bool:\n    \"\"\"Return True if string s is a palindrome, or False otherwise.\n    >>> is_palindrom",
        "num_ids": 1027
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = \"\"\n    for i in range(n):\n        s += str(i+1)\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = ''\n    while n:\n        result += str(n % 10)\n        n //= 10\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return '0'\n    else:\n        return \" \" + string_sequence(n-1) + \" \"\n",
        "num_ids": 35
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count_distinct = 0\n    for char in string:\n        if char.isalpha():\n            count_distinct += 1\n    return count_distinct\n",
        "num_ids": 39
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for c in string:\n        if c == c.lower():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # empty string\n    if string == '':\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    char_dict = {}\n    char_count = 0\n    for char in string:\n        if char in char_dict.keys():\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in char_dict.keys():\n        char_count += char_dict[char]\n    return char_count\n",
        "num_ids": 86
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for char in string:\n        if char.isalnum():\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for char in string:\n        if char.lower() in string.lower():\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for char in string:\n        count = count + 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(1 for c in string if c.isalpha())\n",
        "num_ids": 17
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def parse_note(note: str) -> int:\n        \"\"\" helper function for parse_music\n        \"\"\"\n        return int(note.replace('|', ''))\n",
        "num_ids": 40
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    output = []\n    \n    # Handle first note\n    if music_string[0] == 'o':\n        output.append(1)\n    elif music_string[0] == '.':\n        output.append(0)\n    else:\n        output.append(0)\n",
        "num_ids": 69
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    results = []\n    beat_counts = [0, 0, 0, 0, 0]\n    last_beat = False\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            if last_beat:\n                beat_counts[0] += 1\n                last_beat = False\n            else:\n                beat_counts[1] += 1\n                last_beat = True\n        elif music_string[i] == '|':\n            if last_beat:\n                beat_counts[2] += 1\n                last_beat = False\n            else:\n                beat_counts[3] += 1\n                last_beat = True\n        elif music_string[i] == '.|':\n            if last_beat:\n                beat_counts[4] += 1\n                last_beat = False\n            else:\n                beat_counts[5] += 1\n                last_beat = True\n    return beat_counts\n",
        "num_ids": 234
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = []\n    for s in music_string:\n        if s == 'o':\n            res.append(4)\n        elif s == 'o|':\n            res.append(2)\n        elif s == '.':\n            res.append(1)\n        else:\n            res.append(1)\n    return res\n",
        "num_ids": 82
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # NOTE: The map of `X` to `B` has been implemented from this file - see README.md for details.\n",
        "num_ids": 31
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for i in music_string:\n        if i == '.':\n            result.append(1)\n        elif i == 'o':\n            result.append(2)\n        elif i == '|':\n            result.append(3)\n        elif i == 'o|':\n            result.append(4)\n    return result",
        "num_ids": 86
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    notes = music_string.split('|')\n    return [int(n) for n in notes if n!= '']\n",
        "num_ids": 31
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    _, beat_map = music_string.split('|')\n    beat_map = beat_map.split(' ')\n",
        "num_ids": 31
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    beat_count = 0\n    beat_count_2 = 0\n    beat_count_4 = 0\n    beat_count_3 = 0\n    beat_count_2_2 = 0\n    beat_count_3_3 = 0\n",
        "num_ids": 57
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: Implement me\n",
        "num_ids": 9
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # length of substring in string\n    length = len(substring)\n    # dictionary to keep track of overlaping cases\n    occurrence_count = {}\n",
        "num_ids": 38
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # remove spaces from the string\n    string = string.replace(\" \", \"\")\n",
        "num_ids": 20
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0\n    for i in range(len(string)):\n        if string[i] == substring[i]:\n            result += 1\n        elif string[i]!= substring[i]:\n            result = 0\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for c in substring:\n        if c in string:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    return string.count(substring",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = 0\n    for char in string:\n        if char in substring:\n            res += 1\n    return res",
        "num_ids": 29
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum([1 for c in substring if c in string])\n",
        "num_ids": 17
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # pylint: disable=E1131\n    return len([string.count(substring) for substring in substring])\n",
        "num_ids": 32
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    return sum([string.count(substring) for substring in substring])\n",
        "num_ids": 22
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return''.join(sorted(numbers, reverse=True))\n",
        "num_ids": 17
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in range(len(numbers)):\n        if i % 2 == 0:\n            temp = numbers[i]\n            numbers[i] = numbers[i + 1]\n            numbers[i + 1] = temp\n    return''.join(numbers)\n",
        "num_ids": 65
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    numbers = numbers.split()\n    return''.join(numbers)\n",
        "num_ids": 19
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(numbers.split(' '), key=int)\n",
        "num_ids": 17
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    numbers_sorted = ''\n    for number in numbers:\n        if number in '0123456789':\n            numbers_sorted += number\n    return numbers_sorted\n",
        "num_ids": 45
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    return f\"{numbers[:3].zfill(3)}{numbers[3:]}\"\n",
        "num_ids": 27
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Note: remove leading zeros from numbers\n    # Result should be valid string and not a list of numbers\n    numbers = numbers.strip()\n    numbers = numbers.replace(' ', '')\n    numbers = numbers.split(' ')\n    # Assume the numbers are sorted in numbers[::-1]\n    # N = len(numbers)\n    numbers = [numbers[i] for i in range(len(numbers))]\n    # n = len(numbers)\n    # numbers = [int(i) for i in numbers]\n    numbers = [str(i) for i in numbers]\n    numbers =''.join(numbers)\n    numbers = numbers.lstrip('0')\n    numbers = numbers.rstrip('0')\n    numbers = numbers.rstrip('0')\n    # print(numbers)\n    return numbers\n",
        "num_ids": 205
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # insert a leading zero so it's easier to match later on\n    zero_place = numbers.find('0')\n    if zero_place < 0:\n        numbers = numbers + '0'\n    # match 'zero' with 'one'\n    elif zero_place > 0:\n        numbers = numbers + '1'\n    # match 'one' with 'zero'\n    elif zero_place < 1:\n        numbers = numbers + '2'\n    # match 'zero' with 'zero'\n    elif zero_place > 1:\n        numbers = numbers + '3'\n    # match 'zero' with 'zero'\n    elif zero_place > 2:\n        numbers = numbers + '4'\n    # match 'zero' with 'zero'\n    elif zero_place > 3:\n        numbers = numbers + '5'\n    # match 'zero' with 'zero'\n    elif zero_place > 4:\n        numbers = numbers + '6'\n    # match 'zero' with 'zero'\n    elif zero_place > 5:\n        numbers = numbers + '7'\n    # match 'zero' with 'zero'\n    elif zero_place > 6:\n        numbers = numbers + '8'\n    # match 'zero' with 'zero'\n    elif zero_place > 7:\n        numbers = numbers + '9'\n    # match 'zero' with 'zero'\n    elif zero_place > 8:\n        numbers = numbers + '-'\n    # match 'zero' with 'zero'\n    elif zero_place > 9:\n        numbers = numbers + '.'\n    # insert a space to keep the order\n    numbers = numbers +''\n    # convert the number to string and sort it\n    return sort_numbers(numbers.join(numbers[zero_place + 1:].split()))\n",
        "num_ids": 441
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    for i in numbers.split():\n        result.append(int(i))\n    result.sort()\n    return \"\".join(str(i) for i in result)\n",
        "num_ids": 47
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    number_list = numbers.split()\n    number_list.sort()\n    return''.join(number_list)\n",
        "num_ids": 29
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    closest_to_first, closest_to_second = None, None\n    for i in range(len(numbers) - 2):\n        first, second = numbers[i], numbers[i + 2]\n        if first > second:\n            closest_to_first = first\n            closest_to_second = second\n        else:\n            closest_to_second = second\n    return closest_to_first, closest_to_second\n",
        "num_ids": 109
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    assert len(numbers) >= 2, f\"Expected at least two numbers, but got {len(numbers)}.\"\n",
        "num_ids": 30
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    smaller_number = numbers[0]\n    larger_number = numbers[-1]\n",
        "num_ids": 24
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    smaller, larger = numbers[0], numbers[-1]\n    for i in range(len(numbers)-1):\n        if smaller < numbers[i] and smaller > numbers[i+1]:\n            smaller = numbers[i]\n        if larger > numbers[i] and larger < numbers[i+1]:\n            larger = numbers[i]\n",
        "num_ids": 85
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n",
        "num_ids": 24
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    min_distance = float('inf')\n    closest_to_min = numbers[0]\n    for element in numbers:\n        distance = abs(element - closest_to_min)\n        if distance < min_distance:\n            closest_to_min = element\n            min_distance = distance\n    return closest_to_min, min_distance\n",
        "num_ids": 85
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(numbers) < 2:\n        return numbers[0], numbers[0]\n",
        "num_ids": 23
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    smallest, greatest = numbers[0], numbers[-1]\n    for n in numbers:\n        if n < smallest: smallest = n\n        if n > greatest: greatest = n\n    return smallest, greatest",
        "num_ids": 49
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    smaller, larger = 0.0, 0.0\n    for num in numbers:\n        if num < smaller:\n            smaller = num\n        if num > larger:\n            larger = num\n    return (smaller, larger)\n",
        "num_ids": 57
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n    \n    smaller = numbers[0]\n    larger = numbers[-1]\n    for i in range(1, len(numbers)):\n        if numbers[i] < smaller:\n            smaller = numbers[i]\n        elif numbers[i] > larger:\n            larger = numbers[i]\n    return smaller, larger\n",
        "num_ids": 105
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Your code here\n    rescaled_numbers = []\n    for num in numbers:\n        rescaled_numbers.append(round((num * 0.05), 1))\n    return rescaled_numbers\n",
        "num_ids": 53
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    assert len(numbers) > 0\n    for i in range(len(numbers) - 1):\n        # TODO: only change if the previous number is >= the next number\n        if numbers[i] >= numbers[i + 1]:\n            numbers[i] *= 1.0 / numbers[i]\n        else:\n            numbers[i] *= -1.0 / numbers[i]\n    return numbers\n",
        "num_ids": 100
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: 1. fix the code\n",
        "num_ids": 12
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    low = 0\n    for n in numbers:\n        if n > 1:\n            low += 1\n        else:\n            low += n / 2\n    high = 1\n    for n in numbers:\n        if n < 1:\n            high -= 1\n        else:\n            high -= n\n    return [low, high]\n",
        "num_ids": 77
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [x / 10 for x in numbers]\n",
        "num_ids": 13
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [n / (max(n) - min(n)) for n in numbers]\n",
        "num_ids": 22
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    smallest = min(numbers)\n    largest = max(numbers)\n    for number in numbers:\n        if smallest > number:\n            smallest = number\n        if largest < number:\n            largest = number\n    return [0.0 if x == smallest else 1.0 for x in numbers]\n",
        "num_ids": 72
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [n/len(numbers) for n in numbers]\n",
        "num_ids": 17
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = 0.0\n    for num in numbers:\n        s += num / len(numbers)\n    return [s, 1.0]\n",
        "num_ids": 36
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [x / sum(numbers) for x in numbers]\n",
        "num_ids": 17
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n        else:\n            try:\n                filtered_values.append(float(value))\n            except ValueError:\n                filtered_values.append(value)\n    return filtered_values\n",
        "num_ids": 81
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for v in values:\n        if not isinstance(v, int):\n            values.remove(v)\n    return values\n",
        "num_ids": 31
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [int(v) for v in values if isinstance(v, int) and v >= 0]\n",
        "num_ids": 26
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [int(v) for v in values if type(v) is int]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [\n        int(value)\n        for value in values\n        if type(value) in [int, float]\n    ]\n",
        "num_ids": 33
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return list(filter(lambda x: x is int, values))\n",
        "num_ids": 17
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [val for val in values if isinstance(val, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(map(lambda x: int(x) if type(x) == int else x, values))\n",
        "num_ids": 27
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    length = len(string)\n    return length\n",
        "num_ids": 13
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if string == '':\n        return 0\n    return len(string)\n",
        "num_ids": 19
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if string is None:\n        raise TypeError('None is not a string')\n    if string == '':\n        return 0\n    elif string =='':\n        return len(string)\n    elif string[0] =='':\n        return 1 + strlen(string[1:])\n    else:\n        return 1 + strlen(string[1:]) + 1\n",
        "num_ids": 89
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    string_length = len(string)\n    return string_length\n",
        "num_ids": 17
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(string) == 0:\n        return 0\n    else:\n        return len(string)\n",
        "num_ids": 26
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(string) == 0:\n        return 0\n    return len(string)\n",
        "num_ids": 22
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 1\n    while n % count!= 0:\n        count += 1\n",
        "num_ids": 21
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n // 2 + 1\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    divisors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n    return max(divisors)\n",
        "num_ids": 53
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    divisor_numbers: list = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisor_numbers.append(i)\n    return max(divisor_numbers)\n",
        "num_ids": 60
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return i\n    return n\n",
        "num_ids": 39
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    divisors = []\n    for i in range(1, n):\n        if n%i == 0:\n            divisors.append(i)\n    return max(divisors)\n",
        "num_ids": 47
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    i=1\n    while(i <= n):\n        if n%i==0:\n            return i\n        else:\n            i+=1\n    return n\n",
        "num_ids": 40
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    divisors = [i for i in range(1,n//2+1) if n % i == 0]\n    \n    return max(divisors)\n",
        "num_ids": 42
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def find_divisors(n: int) -> int:\n        if n % 2 == 0:\n            return 1\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        return n\n",
        "num_ids": 69
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n <= 3:\n        return n\n    else:\n        x = 3\n        while n % x!= 0:\n            x += 1\n        return x",
        "num_ids": 39
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"factorize: argument should be an integer\")\n    \n    def get_prime_factors(n: int, i: int, p: int) -> List[int]:\n        if n % p == 0:\n            return [i, p]\n        elif n % p == 1:\n            return [i, p]\n        elif n % p == 2:\n            return [p, 2**(i+1)]\n        else:\n            return get_prime_factors(n//p, i+1, p)\n",
        "num_ids": 143
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l = []\n    i = n\n    while i!= 1:\n        l.append(i)\n        i = i//i\n    return l\n",
        "num_ids": 38
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n==1: return [1]\n    if n==0: return []\n    return [i for i in range(2, n, 2) if n%i==0]\n",
        "num_ids": 44
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    n = abs(n)\n    # finding all factors of n\n    nfactors = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        nfactors.append(n)\n    # returning the list of factors\n    return nfactors\n",
        "num_ids": 85
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = []\n    if n <= 0:\n        return lst\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            lst.append(i)\n            lst.append(n//i)\n    return lst\n",
        "num_ids": 72
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    else:\n        x = factorize(n//2)\n        x.append(2)\n        return x\n",
        "num_ids": 55
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    from math import sqrt\n    factors = [2]\n    for i in range(3, int(sqrt(n) + 1), 2):\n        if n % i == 0:\n            n //= i\n            factors.append(i)\n            factors.append(n)\n    if n == 1:\n        factors.append(1)\n    return factors\n",
        "num_ids": 90
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    factor_list = []\n    for i in range(1, n):\n        for j in range(i, 0, -1):\n            if (n % j) == 0:\n                break\n        else:\n            factor_list.append(j)\n    return factor_list\n",
        "num_ids": 67
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    answer = []\n    factors = []\n    for i in range(1, n+1):\n        answer.append(i)\n        for j in range(1,i):\n            if i % j == 0:\n                break\n        else:\n            factors.append(i)\n    return answer, factors\n",
        "num_ids": 75
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 57
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    res = []\n    for number in numbers:\n        if number not in res:\n            res.append(number)\n    return res\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    removed_numbers = []\n    for num in numbers:\n        if num in removed_numbers:\n            continue\n        else:\n            removed_numbers.append(num)\n    return removed_numbers\n",
        "num_ids": 53
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # if the list is empty, return empty list\n    if len(numbers) == 0:\n        return []\n",
        "num_ids": 28
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    removed = []\n    seen = set()\n    for num in numbers:\n        if num in seen:\n            removed.append(num)\n        else:\n            seen.add(num)\n    return removed",
        "num_ids": 51
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    output = []\n    for num in numbers:\n        if num in output:\n            continue\n        else:\n            output.append(num)\n    return output\n",
        "num_ids": 39
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1]!= numbers[i]:\n            numbers[i + 1] = 0\n    return numbers\n",
        "num_ids": 53
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    numbers.sort()\n    first_index = 0\n    count = 0\n    while count < len(numbers):\n        if count > first_index:\n            if numbers[first_index] == numbers[count]:\n                del numbers[first_index]\n                count -= 1\n            else:\n                first_index += 1\n        else:\n            first_index = 0\n        count += 1\n    return numbers\n",
        "num_ids": 98
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n",
        "num_ids": 29
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    numbers_set = set(numbers)\n    return list(numbers_set)\n",
        "num_ids": 23
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a = numbers.copy()\n    n = len(a)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if a[i] == a[j]:\n                del a[i]\n    return a\n",
        "num_ids": 64
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    string = string.lower()\n    string = string.upper()\n    string = string.replace(\" \", \"_\")\n    string = string.replace(\"-\", \"_\")\n    string = string.replace(\".\", \"_\")\n    return string\n    \ndef sort_strings(array):\n    \"\"\"\n    Sort a list of strings.\n    >>> sort_strings([\"A_is_best\", \"a_best\", \"B_is_better\"])\n    ['A_is_best', 'b_best', 'A_is_better']\n    \"\"\"\n    return sorted(array, key = lambda x: (x.lower(), x.upper()))\n    \ndef contains_duplicate(arr):\n    \"\"\" For a list of strings, determine whether any string in the list contains more than\n    one identical character.\n    >>> contains_duplicate([\"a_best\", \"b_best\", \"a_best\", \"b_best\"])\n    True\n    \"\"\"\n    \n    return len(set(arr)) > 1\n    \ndef find_longest_common_substring(arr, substr):\n    \"\"\" Given an array of strings, find the longest common substring, with the elements in\n    the array the same length as the string with the given prefix string,\n    or return -1 if no such substring exists.\n    >>> find_longest_common_substring([\"a_best\", \"b_best\", \"a_best\", \"b_best\"], \"\")\n    \"a_best\"\n    >>> find_longest_common_substring([\"a_best\", \"b_best\", \"a_best\", \"b_best\"], \"a\")\n    \"a_best\"\n    >>> find_longest_common_substring([\"a_best\", \"b_best\", \"a_best\", \"b_best\"], \"b\")\n    \"b_best\"\n    \"\"\"\n    start, end = 0, 0\n    for end, char in enumerate(arr, start):\n        if substr in char:\n            start = arr[start:].index(char) + start\n            break\n    return arr[start:end + 1]\n    \ndef find_longest_common_substring(arr, substr):\n    \"\"\" Given an array of strings, find the longest common substring, with the elements in\n    the array the same length as the string with the given prefix string,\n    or return -1 if no such substring exists.\n    >>> find_longest_common_substring([\"a_best\", \"b_best\", \"a_best\", \"b_best\"], \"\")\n    \"a_best\"\n    >>> find_longest_common_substring([\"a_best\", \"b_best\", \"a_best\", \"b_best\"], \"b\")\n    \"a_best\"\n    >>> find_longest_common_substring([\"a_best\", \"b_best\", \"a_best\", \"b_best\"], \"a\")\n    \"b_best\"\n    \"\"\"\n    start, end = 0, 0\n    for end, char in enumerate(arr, start):\n        if substr in char:\n            start = arr[start:].index(char) + start\n            break\n    return arr[start:end + 1]\n    \ndef reduce_all_to_one(arr):\n    \"\"\" Reduce all strings to a single string and return the result.\n    >>> reduce_all_to_one([\"a\", \"b\", \"c\", \"d\"])\n    \"a\"\n    >>> reduce_all_to_one([\"a\", \"b\", \"c\", \"d\", \"e\"])\n    \"a_b_c_d_e\"\n    >>> reduce_all_to_one([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n    \"a_b_c_d_e_f\"\n    \"\"\"\n    result = arr[0]\n    for char in arr[1:]:\n        result += char\n    return result\n    \ndef remove_duplicates(arr):\n    \"\"\" Given an array of strings, remove duplicate strings.\n    >>> remove_duplicates([\"a_best\", \"b_best\", \"a_best\", \"b_best\", \"a_best\", \"b_best\"])\n    [\"a_best\", \"b_best\"]\n    \"\"\"\n    return [char for char in arr if char not in arr[:len(arr) - 1]]",
        "num_ids": 1024
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return string.lower() + string.upper()\n",
        "num_ids": 13
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return string.upper().lower().swapcase()\n",
        "num_ids": 14
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return string.upper().lower()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join([chr(ord(i) - i.lower()) for i in string]",
        "num_ids": 24
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return string.upper().lower()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    string = string.lower()\n    string = string.replace(' ','')\n    string = string.replace('-','')\n    string = string.replace('_','')\n    string = string.upper()\n    return string\n",
        "num_ids": 56
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    string = string.lower()\n    string = string.swapcase()\n    string = string.swapcase()\n    string = string.swapcase()\n    return string\n",
        "num_ids": 43
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return string.upper()\n    # print(string.lower())\n    # print(string.upper())\n    # return string.lower().swapcase()\n    # print(string.upper().swapcase())\n",
        "num_ids": 51
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return string.lower()+string.upper()\n",
        "num_ids": 13
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    new_string = ''\n    for string in strings:\n        new_string += string\n    return new_string\n",
        "num_ids": 28
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = ''\n    for s in strings:\n        result = result + s + \" \"\n    return result[:-1]\n",
        "num_ids": 31
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = \"\"\n    for string in strings:\n        result += string\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n",
        "num_ids": 20
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [string for string in strings if prefix in string]\n",
        "num_ids": 15
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    filtered_strings = []\n",
        "num_ids": 9
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def filter_by_prefix_helper(string: str, prefix: str) -> bool:\n        return (string.startswith(prefix) and\n                string.endswith(prefix) and\n                len(string) > len(prefix))\n",
        "num_ids": 59
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n    \ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], '')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], '')\n    ['cde', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if string.endswith(suffix):\n            result.append(string)\n    return result\n    \ndef filter_by_regex(strings: List[str], regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings by a given regex.\n    >>> filter_by_regex(['a', 'b', 'c'], 'a')\n    ['a']\n    >>> filter_by_regex(['a', 'b', 'c'], '^b')\n    ['a']\n    >>> filter_by_regex(['a', 'b', 'c'], 'ab')\n    ['a', 'b']\n    \"\"\"\n    result = []\n    for string in strings:\n        if regex.match(string):\n            result.append(string)\n    return result\n    \ndef filter_by_len(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings by a given length.\n    >>> filter_by_len([], 2)\n    []\n    >>> filter_by_len(['abc', 'bcd', 'cde', 'array'], 3)\n    ['cde', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if len(string) == length:\n            result.append(string)\n    return result\n    \ndef filter_by_len_regex(strings: List[str], length: str) -> List[str]:\n    \"\"\" Filter an input list of strings by a given length.\n    >>> filter_by_len_regex(['abc', 'bcd', 'cde', 'array'], '3')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if len(string) == length:\n            result.append(string)\n    return result\n    \ndef filter_by_substr(strings: List[str], substr: str) -> List[str]:\n    \"\"\" Filter an input list of strings by a given substr.\n    >>> filter_by_substr(['a', 'b', 'c'], 'a')\n    ['b']\n    >>> filter_by_substr(['a', 'b', 'c'], 'b')\n    ['a', 'c']\n    >>> filter_by_substr(['a', 'b', 'c'], 'ab')\n    ['a', 'b', 'c']\n    \"\"\"\n    result = []\n    for string in strings:\n        if string.startswith(substr):\n            result.append(string)\n    return result\n    \ndef filter_by_substr_regex(strings: List[str], substr: str) -> List[str]:\n    \"\"\" Filter an input list of strings by a given substr.\n    >>> filter_by_substr_regex(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['cde', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if string.endswith(substr):\n            result.append(string)\n    return result\n    \ndef filter_by_exact(strings: List[str], start: int, end: int) -> List[str]:\n    \"\"\" Filter an input list of strings by a given start and end.\n    >>> filter_by_exact(['a', 'b', 'c'], 0, 2)\n    ['a', 'b']\n    >>> filter_by_exact(['a', 'b', 'c'], 0, 3)\n    ['a', 'b', 'c']\n    \"\"\"\n    result = []\n    for string in strings:\n        if string[start:end] == string:\n            result.append(string)\n    return result",
        "num_ids": 1024
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [s for s in strings if prefix in s]\n",
        "num_ids": 15
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for s in strings:\n        if not s.startswith(prefix):\n            continue\n        yield s\n",
        "num_ids": 28
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [num for num in l if num>0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = []\n    for n in l:\n        if n > 0:\n            res.append(n)\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    res = []\n    for i in l:\n        if i > 0:\n            res.append(i)\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x for x in l if x >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [x for x in l if x >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n <= 1: return False\n    if n == 2 or n % 2 == 0: return False\n    if n % 3 == 0: return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0: return False\n        i = i + 6\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Prime numbers are greater than 1.\n    if n < 2:\n        return False\n    # A number n is prime if it is greater\n    # than every positive integer smaller\n    # than n.\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(sqrt(n) + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 77
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i == 0:\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n) + 1), 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n",
        "num_ids": 96
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(2, n+1):\n        if n%i == 0:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Create a boolean variable to check for prime numbers.\n    # Check to see if number is divisible by any other number.\n    # If so, then return true.\n    # If not, then return false.\n    # Divide number by itself by each number, and check.\n    # If number is divisible by at least one other number, then return true.\n    # If not, then return false.\n    divisible = [2,3,5,7,11,13,21,23,31,43,61,71,73,81,83,91,97]\n    # if the number is divisible by any number other than 1,\n    # then it is not prime.\n    # 0, 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 429, 432, 433, 434, 436, 438, 440, 442, 444, 446, 448, 450, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 486, 488, 490, 492, 496, 498, 500, 502, 504,506, 518, 522, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 625, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 777, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 800, 802, 804",
        "num_ids": 1023
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            return xs[0] + xs[1] * x + xs[1] * x ** 2 + xs[1] * x ** 3\n    raise Exception(\"No zero found\")\n",
        "num_ids": 67
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    x = float(\"-inf\")\n    for xi in xs:\n        if xi > 0:\n            x = xi\n            break\n    if x == 0:\n        return 0\n    else:\n        return x\n",
        "num_ids": 55
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    x = max([coeff for coeff in xs if coeff!= 0])\n    if x!= 0:\n        return x\n    else:\n        return find_zero([coeff for coeff in xs if coeff!= 0])\n",
        "num_ids": 60
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO:\n    #\n    #  - Create a list of coefficients, to make it a one-dimensional list.\n    #  - Find all even numbers in xs, and remove them, if possible.\n    #  - Create list of lists where each element is a list of coefficient.\n    #  - Use list comprehension to create new list of lists.\n    #  - Set up a recursive formula which returns coefficients that meet the condition that\n    #    poly(x) = 0.\n",
        "num_ids": 112
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    zero = -1\n    for i in xs:\n        if poly(xs, i) == 0:\n            zero = i\n            break\n    if zero == -1:\n        return 0.0\n    return zero\n",
        "num_ids": 53
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert len(xs) % 2 == 0\n    for i in range(int(len(xs) / 2)):\n        if xs[i + 1] == 0:\n            return xs[i]\n    raise Exception('no solution')\n",
        "num_ids": 58
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    c = sum(xs)\n    if c < 0:\n        return float('-inf')\n    x = c / c\n    # If x is 0, return 0, because if x = 0, there is no solution\n    if x == 0:\n        return 0\n    for i in range(1, len(xs)):\n        c = c + x * xs[i]\n        if c / c >= 0:\n            return c / c\n",
        "num_ids": 105
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            return i\n",
        "num_ids": 26
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    xs = sorted(xs, key=lambda x: x)\n    xs = [round(x, 2) for x in xs]\n    n = len(xs)\n    if n <= 1:\n        return None\n    elif n == 2:\n        return xs[0] * xs[1]\n    elif n == 3:\n        return (xs[1] - 1) * (xs[2] - 2) * (xs[3] - 3)\n    elif n == 4:\n        return (xs[1] - 1) * (xs[2] - 1) * (xs[3] - 2) * (xs[4] - 3)\n",
        "num_ids": 157
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n_coeff = len(xs)\n    for i in range(1, n_coeff):\n        if xs[i] > 0:\n            return i\n    return n_coeff\n",
        "num_ids": 48
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        if l[i] % 3 == 0 and l[i] % 2!= 0:\n            l[i], l[i+1], l[i+2] = l[i+2], l[i], l[i+1]\n    return l\n",
        "num_ids": 74
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(l) % 3 == 0:\n        return l\n    else:\n        l_three = [l[i] for i in range(len(l)) if i%3 == 0 and i//3!= i//3]\n        l_zero = [l[i] for i in range(len(l)) if i%3 == 0 and i//3 == 0]\n        return l_zero + l_three\n",
        "num_ids": 100
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    sort = []\n    for i in range(len(l)-1, -1, -1):\n        if l[i] % 3 == 0:\n            sort.append(l[i])\n        elif l[i] % 3!= 0:\n            sort.append(l[i])\n    \n    return sort\n",
        "num_ids": 79
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    k = 0\n    for i in range(len(l)):\n        if (l[i] % 3!= 0):\n            k = k + 1\n    if (k == 0):\n        return l\n    else:\n        i = k\n        j = 0\n        while i < k:\n            if l[i] % 3 == 0:\n                l[i] = l[i] / 3\n                j = j + 1\n                if j == 3:\n                    j = 0\n            i = i + 1\n        return l\n",
        "num_ids": 127
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return l[::3]\n",
        "num_ids": 9
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = [x for x in l if x % 3!= 0 and x % 3 == 0]\n    result.sort()\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    numbers = []\n    i = 0\n    while i < len(l):\n        if l[i] % 3 == 0:\n            numbers.append(l[i])\n        i += 1\n",
        "num_ids": 49
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    l_new = []\n    len_l = len(l)\n    while len_l % 3!= 0:\n        l_new.append(l[int(len_l / 3)])\n        len_l = len_l / 3\n    l_new.append(l[int(len_l / 3) + 1])\n    l_new.append(l[int(len_l / 3) + 2])\n    return l_new\n",
        "num_ids": 117
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] % 3 == 0 and l[j] % 3 == 0:\n                l[i], l[j] = l[j], l[i]\n    return l\n",
        "num_ids": 73
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return l[::3]\n",
        "num_ids": 9
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x for x in l if l.count(x)==1]\n",
        "num_ids": 20
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    temp = []\n    for el in l:\n        if el not in temp:\n            temp.append(el)\n    return temp\n",
        "num_ids": 33
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Expected behavior:\n    #  1. Convert to list\n    #  2. Sort list\n    #  3. Return list\n    return sorted(set(l))\n",
        "num_ids": 42
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if l == []:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return list(dict.fromkeys(l))\n",
        "num_ids": 13
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Use the hash function to find the hash value of each element\n    hash_values = {}\n    for value in l:\n        hash_values[value] = hash(value)\n    # Remove duplicates and return the list\n    return [value for value, count in hash_values.items() if count == 1]\n",
        "num_ids": 74
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [x for x in l if x not in set(l)]\n",
        "num_ids": 18
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    if len(l) == 0:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max_num = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_num:\n            max_num = l[i]\n    return max_num\n",
        "num_ids": 53
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    max = l[0]\n    for i in range(len(l)):\n        if l[i] > max:\n            max = l[i]\n    return max\n",
        "num_ids": 45
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    maximum = l[0]\n    for value in l:\n        if value > maximum:\n            maximum = value\n",
        "num_ids": 28
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    # return the maximum of each element in the list\n    max_e = -sys.maxsize\n",
        "num_ids": 33
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n % 5 == 0:\n        return fizz_buzz(n//5)\n    elif n % 5 == 1:\n        return n//5\n    elif n % 5 == 2:\n        return n//5 + 1\n    elif n % 5 == 3:\n        return n//5 + 2\n    else:\n        return n//5 + 3\n    \n",
        "num_ids": 89
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n % 10 == 0 or n % 2 == 1:\n        return 0\n    else:\n        return int(n / 10)\n    \n    \ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 4 appears in integers less than n which are divisible by 3 and 5.\n    >>> fizz_buzz(60)\n    2\n    >>> fizz_buzz(89)\n    3\n    \"\"\"\n    if n % 2 == 0 and n % 5 == 0:\n        return 0\n    else:\n        return int(n / 2) + 1\n",
        "num_ids": 140
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    fizz = 0\n    buzz = 0\n    for i in range(n):\n        if i % 3 == 0:\n            fizz += 1\n        if i % 5 == 0:\n            buzz += 1\n        if i % 7 == 0:\n            fizz += 1\n        if i % 13 == 0:\n            buzz += 1\n    return fizz, buzz\n",
        "num_ids": 89
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    i = n\n    while i>0:\n        i = i//10\n        if i%3==0:\n            count+=1\n        elif i%5==0:\n            count+=1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    i = 1\n    count = 0\n    while i <= n:\n        if i % 7 == 0 or i % 13 == 0:\n            count += 1\n        else:\n            count += 0\n        i += 1\n    return coun",
        "num_ids": 55
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for i in range(n):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def is_divisible(n):\n        return n % 11 == 0 or n % 13 == 0\n    \n    def fizz_buzz(n):\n        for i in range(1, n+1):\n            if is_divisible(i):\n                print(i)\n",
        "num_ids": 67
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return n % 10 + int(n / 10 % 10 == 0)\n",
        "num_ids": 18
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    num_buzz = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35]\n    buzz = 0\n    for x in range(n):\n        if num_buzz[x]%11 == 0 and num_buzz[x]%13 == 0:\n            buzz += 1\n    return buzz\n",
        "num_ids": 97
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [l[i] for i in range(len(l)) if i % 2 == 0]\n",
        "num_ids": 25
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l_even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    l_odd = [l[i] for i in range(len(l)) if i % 2 == 1]\n    return sorted(l_even) + l_odd\n",
        "num_ids": 68
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even_l = []\n    odd_l = []\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            even_l.append(l[i])\n        else:\n            odd_l.append(l[i])\n    return even_l + odd_l\n",
        "num_ids": 77
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even_l = []\n    odd_l = []\n    for i in l:\n        if i % 2 == 0:\n            even_l.append(i)\n        else:\n            odd_l.append(i)\n    return odd_l,even_l\n",
        "num_ids": 65
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    i=0\n    j=len(l)-1\n    l_even=[]\n    while i < j:\n        if l[i]%2==0:\n            l_even.append(l[i])\n            i+=1\n        else:\n            l_even.append(l[j])\n            j-=1\n    return l_even\n",
        "num_ids": 86
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even_even = []\n    odd_odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_even.append(l[i])\n        else:\n            odd_odd.append(l[i])\n    return even_even + odd_odd\n",
        "num_ids": 74
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(len(l)):\n        if i % 2 == 0:\n            l.append(l[i])\n    return l\n",
        "num_ids": 36
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even_indices = []\n    odd_indices = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indices.append(l[i])\n        else:\n            odd_indices.append(l[i])\n    return odd_indices + even_indices\n    \n",
        "num_ids": 82
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    for index in range(len(l)):\n        if (index % 2) == 0:\n            result.append(l[index])\n        else:\n            result.append(l[index])\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(l) % 2!= 0:\n        return sort_even(l[:-1])\n    else:\n        return [l[i] for i in range(0, len(l), 2)]\n",
        "num_ids": 51
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # return first group after cyclic encoding.\n    return \"\".join(reversed(s[0])) + s[1:]",
        "num_ids": 32
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    groups = s.split(\".\")\n    # enumerate() gives us enumerate.\n    # 0 is the first index of the array.\n    # 1 is the second index of the array.\n    # 2 is the third index of the array.\n    for idx, group in enumerate(groups):\n        # cycle index through all the elements in the group.\n        for i, char in enumerate(group):\n            # cycle through remaining elements in group.\n            if i < len(groups) - 1:\n                # if cycle is done, return the group.\n                if i == len(groups) - 1:\n                    return group\n                # cycle to next element in group.\n                else:\n                    group = group[i + 1:]\n            # if cycle is done, return the group.\n            else:\n                break\n    # if cycle is not done, return the group.\n    else:\n        return group\n",
        "num_ids": 209
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # cycle through string and add a new character to end each group.\n    for char in s:\n        if char == \"\":\n            continue\n        if char in [\"A\", \"B\", \"C\"]:\n            yield char\n        if char == \"G\":\n            yield \"A\"\n        if char == \"C\":\n            yield \"B\"\n        if char == \"D\":\n            yield \"C\"\n        if char == \"E\":\n            yield \"G\"\n        if char == \"F\":\n            yield \"C\"\n        if char == \"G\":\n            yield \"D\"\n        if char == \"H\":\n            yield \"F\"\n    # keep adding characters until no more need to go through string\n    if len(s) >= len(set(s)):\n        return\n    while s[-1] in \"ABEDED\":\n        s = s[:-1] + s[-1] + s[-2] + s[-3]\n    while s[0] in \"ABCDEFG\":\n        s = s[1:] + s[0] + s[1:] + s[0] + s[1] + s[2:]\n    # join the cyclic groups back to original string\n    return s\n",
        "num_ids": 294
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1]) if len(group) == 3 else group for group in groups]\n    # return cyclic string.\n    return groups[0]\n",
        "num_ids": 114
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join([s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)])\n",
        "num_ids": 44
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # return decoded string.\n    return \"\".join(groups)\n",
        "num_ids": 116
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join(s[i:i + 3] for i in range(0, len(s), 3))\n",
        "num_ids": 29
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # decode each group. Each group consists of multiple characters separated by a space,\n    # or by a single space, or any single character.\n    return \"\".join([group[0] + \" \" if len(group) == 3 else group for group in groups])\n",
        "num_ids": 159
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # unpack groups into characters.\n    return \"\".join(groups)\n",
        "num_ids": 117
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 45
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 2:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 50
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 1 or n == 2:\n        return n\n    elif n == 3:\n        return 1\n    else:\n        return prime_fib(n-1)+prime_fib(n-2)\n    \ndef fib_fib_map(n: int) -> int:\n    \"\"\"\n    >>> fib_fib_map(1)\n    2\n    >>> fib_fib_map(2)\n    3\n    >>> fib_fib_map(3)\n    5\n    >>> fib_fib_map(4)\n    89\n    \"\"\"\n    if n == 1 or n == 2:\n        return n\n    else:\n        return fib_fib_map(n-1)+fib_fib_map(n-2)\n    \ndef fib_fib_memo(n: int) -> int:\n    \"\"\"\n    >>> fib_fib_memo(1)\n    2\n    >>> fib_fib_memo(2)\n    3\n    >>> fib_fib_memo(3)\n    5\n    >>> fib_fib_memo(4)\n    89\n    \"\"\"\n    if n == 1 or n == 2:\n        return n\n    else:\n        return fib_fib_memo(n-1)+fib_fib_memo(n-2)\n    \ndef fib_memo(n: int) -> int:\n    \"\"\"\n    >>> fib_memo(1)\n    2\n    >>> fib_memo(2)\n    3\n    >>> fib_memo(3)\n    5\n    >>> fib_memo(4)\n    89\n    \"\"\"\n    memo = [None]*(n+1)\n    memo[0] = 0\n    memo[1] = 1\n    for i in range(2, n+1):\n        memo[i] = memo[i-1] + memo[i-2]\n    return memo[n]\n    \ndef factorial(n: int) -> int:\n    \"\"\"\n    >>> factorial(2)\n    6\n    >>> factorial(3)\n    6\n    >>> factorial(4)\n    24\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef fib_rec(n: int) -> int:\n    \"\"\"\n    >>> fib_rec(1)\n    2\n    >>> fib_rec(2)\n    3\n    >>> fib_rec(3)\n    5\n    >>> fib_rec(4)\n    89\n    \"\"\"\n    if n == 1 or n == 2:\n        return n\n    else:\n        return fib_rec(n-1)+fib_rec(n-2)\n    \ndef fib_rec_memo(n: int) -> int:\n    \"\"\"\n    >>> fib_rec_memo(1)\n    2\n    >>> fib_rec_memo(2)\n    3\n    >>> fib_rec_memo(3)\n    5\n    >>> fib_rec_memo(4)\n    89\n    \"\"\"\n    if n == 1 or n == 2:\n        return n\n    else:\n        return fib_rec_memo(n-1)+fib_rec_memo(n-2)\n    \ndef fib_rec_memo_div(n: int) -> int:\n    \"\"\"\n    >>> fib_rec_memo_div(1)\n    2\n    >>> fib_rec_memo_div(2)\n    3\n    >>> fib_rec_memo_div(3)\n    5\n    >>> fib_rec_memo_div(4)\n    89\n    \"\"\"\n    if n == 1 or n == 2:\n        return n\n    else:\n        return fib_rec_memo_div(n-1)+fib_rec_memo_div(n-2)\n    \ndef fib_rec_memo_div_rec(n: int) -> int:\n    \"\"\"\n    >>> fib_rec_memo_div_rec(1)\n    2\n    >>> fib_rec_memo_div_rec(2)\n    3\n    >>> fib_rec_memo_div_rec(3)\n    5\n    >>> fib_rec_memo_div_rec(4)\n    8",
        "num_ids": 1025
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    fib = 1\n    prime = False\n    for i in range(1,n):\n        prime = False\n        if i%2 == 0:\n            prime = True\n        for j in range(1,i//2+1):\n            if i%j == 0:\n                prime = True\n        if prime == True:\n            fib = fib + i\n    return fib\n",
        "num_ids": 90
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1 or n == 2:\n        return 2\n    elif n == 3 or n == 5:\n        return 2\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n",
        "num_ids": 58
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 50
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 2:\n        raise ValueError(\"Please enter a positive number\")\n    elif n < 4:\n        return 2\n    else:\n        # For this example, the first number of the fibonacci sequence\n        # is 0 and 1. Thus, it is a Fibonacci number.\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 92
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 2\n    for i in range(2, n+1):\n        if (i == 2 or i == 3):\n            continue\n        elif (i % 2 == 0):\n            continue\n        elif (i % 3 == 0):\n            continue\n        else:\n            result += i\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    assert n >= 3\n    if n == 2 or n == 3:\n        return 2\n    else:\n        for x in range(2, n):\n            if x == 1 or x == 2:\n                continue\n            if x % 2 == 0:\n                continue\n            for y in range(3, n, 2):\n                if x % y == 0:\n                    break\n            else:\n                return x\n        else:\n            return -1\n",
        "num_ids": 105
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert n >= 1, \"n must be greater or equal to 1\"\n    assert n <= 20, \"n must be less or equal to 20\"\n    \n    fib = [2, 3]\n    for i in range(3, n+1):\n        fib.append(fib[i-2] + fib[i-1])\n    return fib[n]\n",
        "num_ids": 88
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # Check the length of the list\n    if len(l) == 3:\n        # Check if the lists have the same length\n        # If they do, return True\n        # Else, return False\n        for i in range(0, len(l)):\n            if l[i] == l[i]:\n                return False\n    else:\n        return False\n    \n    # Check if the elements of the list sum to zero\n    # If they do, return True\n    # Else, return False\n    for i in range(0, len(l)):\n        if l[i] == 0:\n            return True\n    \n    return Fals",
        "num_ids": 152
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l.sort()\n    if l == []:\n        return False\n    for i in range(1, len(l)):\n        if l[i-1] + l[i] == 0:\n            return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in l:\n        if i == 0:\n            return False\n        if i > 0:\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(l) < 3:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = True\n",
        "num_ids": 6
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(l) == 3:\n        # not all elements are 0\n        return False\n    \n    for i in range(len(l)):\n        if l[i] == 0 and (i < 3 or i > 0):\n            return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum_dict = {}\n    for num in l:\n        sum_dict[num] = sum_dict.get(num, 0) + 1\n    return sum(sum_dict.values()) == 3\n",
        "num_ids": 49
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(l) < 3:\n        return False\n    elif l[0] + l[1] + l[2] == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = 0\n    for i in l:\n        s += i\n        if s == 0:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len(set(l))==3 and all(l.count(i)==l.count(i-1) for i in l)\n",
        "num_ids": 35
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    from math import sqrt\n    n = int(n)\n    n_cars = 0\n    i = 1\n    while i < n:\n        i += 1\n        j = 1\n        while j < n:\n            collision = False\n            j += 1\n            while j < n:\n                if car_delta(i,j) < 1 and car_delta(i,j) < car_delta(i,j-1):\n                    collision = True\n                    break\n                j += 1\n            if not collision:\n                n_cars += 1\n    return n_cars\n",
        "num_ids": 139
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    collisions = 0\n    for _ in range(n):\n        collisions += car_collision(n)\n    return collisions\n",
        "num_ids": 32
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum(1 for i in range(n) if car_race_collision(i + 1) < 0)\n",
        "num_ids": 29
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Find the number of cars that are in front of the car\n    n_front = car_collision_count(n, n_cars(n, 1))\n    n_back = car_collision_count(n, n_cars(n, -1))\n    # Count the number of collisions of car on the other side\n    n_turns = car_collision_count(n, -1)\n    # Count the number of collisions of car on the front of the road\n    n_turns += car_collision_count(n, 1)\n    # Count the number of collisions of car on the back of the road\n    n_turns += car_collision_count(n, -1)\n    return max(n_front, n_back, n_turns)\n",
        "num_ids": 183
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (2*n)**0.5\n",
        "num_ids": 13
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    x = n*2\n    left = x\n    right = x - 1\n    while right - left > 0:\n        if (n%2 == 0 and n > 0) or (n%2 == 1 and n < 0):\n            right = (n - 1)/2 + right\n        else:\n            left = (n - 1)/2 + left\n        n = (n-1)/2\n    return right - left\n",
        "num_ids": 99
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum(n - x for x in range(1, n+1) if car_racing_collision(x))\n",
        "num_ids": 31
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return 2*n*(n+1)//2\n",
        "num_ids": 15
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n <= 0:\n        return 0\n    \n    if n < 5:\n        return 1\n    \n    if n % 2 == 0:\n        return 1\n    else:\n        return 2\n",
        "num_ids": 48
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return n + car_race_collision(n - 1)\n",
        "num_ids": 44
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        l[i] = l[i] + 1\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l.append(l[-1]+1)\n    return l\n",
        "num_ids": 18
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(l), 1, -1):\n        l[i] = l[i-1] + 1\n    return l\n",
        "num_ids": 36
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = []\n    for el in l:\n        res.append(el+1)\n    return res\n",
        "num_ids": 27
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l.append(l[-1]+1)\n    return l\n",
        "num_ids": 18
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [e+1 for e in l]",
        "num_ids": 12
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return l + [x + 1 for x in l]\n",
        "num_ids": 15
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not isinstance(l, list):\n        raise TypeError('argument should be list')\n",
        "num_ids": 23
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [i + 1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sums = set(l)\n    if len(sums) == 2:\n        if sums.pop()!= 0:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Write your code here\n    # Hint: you can use the built-in \"Counter()\" function\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i]+l[j]==0:\n                return True\n    return False\n",
        "num_ids": 80
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return len(set(l)) == 2\n",
        "num_ids": 21
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in l:\n        if l.count(i)==1:\n            for j in l:\n                if l.count(j)==1:\n                    if i+j==0:\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if (l[i]+l[j]) == 0:\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if len(l) < 2:\n        return False\n    elif len(set(l)) == len(set(l)):\n        return False\n    else:\n        for i in l:\n            if i < 0:\n                return False\n            else:\n                pass\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if l==[]:\n        return False\n    else:\n        if l[0]==l[1]:\n            return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return str(x*base)[::-1].zfill(int(base*3))\n",
        "num_ids": 23
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    x = str(x)\n    x = x[::-1]\n    base_number = ''\n    for i in range(0, len(x)):\n        base_number += x[i]\n    return base_number[::-1]\n",
        "num_ids": 61
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if base < 10:\n        return str(x // base)\n    else:\n        return f'{x // base}'\n        \n    \ndef inverse(n: int) -> int:\n    \"\"\"\n    Find the inverse of n\n    \"\"\"\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return n + inverse(n-1)\n",
        "num_ids": 98
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = str(x)\n    i = 1\n    while i < base:\n        result = result + str(i)\n        i = i * base\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if base > base:\n        base = base * 10\n    while x > 0:\n        x, r = divmod(x, base)\n        yield str(r)\n    yield str(x)\n",
        "num_ids": 51
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    string = str(x)\n    if string.__len__() > 3:\n        string = string[0:3]\n    if string.__len__() < 3:\n        return \"0\" + string[3:]\n    else:\n        return string[0:3]\n",
        "num_ids": 67
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return str(base)+str(x%base)\n    \n",
        "num_ids": 34
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if x >= base:\n        return str(x//base)\n    else:\n        return str(x%base) + change_base(x%base, base)\n",
        "num_ids": 41
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if x < 0:\n        raise ValueError(\"input number {0} is negative\".format(x))\n    if base < 1 or base > 10:\n        raise ValueError(\"base must be in range [1, 10]\")\n    return bin(x)[2:]\n",
        "num_ids": 63
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert(type(base) == int or type(base) == float)\n    if base == 0:\n        return '0'\n    elif base == 1:\n        return str(x)\n    elif base == 2:\n        return str(x//base)\n    elif base == 3:\n        return str(x%base)\n    else:\n        return str(x)\n",
        "num_ids": 92
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return (3 * (a * h / 2))\n",
        "num_ids": 14
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return a * h * (h - a) / 2",
        "num_ids": 14
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return 0.5*a*h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (a*h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (h * (h - a) * (h - a)) / 2",
        "num_ids": 19
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return 0.5*a*h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (a * (h / 2))\n    \ndef perimeter(a, b, c):\n    \"\"\"Given lengths of three sides of a triangle, calculate perimeter of the triangle.\n    >>> perimeter(3, 4, 6)\n    12\n    \"\"\"\n    return (a + b + c) * 2\n",
        "num_ids": 71
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return 0.5 * (a * h)\n",
        "num_ids": 13
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return 0.5*a*h\n",
        "num_ids": 11
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n",
        "num_ids": 35
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \n    \ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(3) -> 1\n    fib5(4) -> 2\n    fib5(5) -> 3\n    fib5(6) -> 5\n    fib5(7) -> 8\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4)\n    \n    \ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 1\n    fib6(2) -> 1\n    fib6(3) -> 2\n    fib6(4) -> 3\n    fib6(5) -> 5\n    fib6(6) -> 8\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4)\n    \n    \ndef fib7(n: int):\n    \"\"\"The Fib7 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib7(0) -> 0\n    fib7(1) -> 1\n    fib7(2) -> 1\n    fib7(3) -> 1\n    fib7(4) -> 2\n    fib7(5) -> 5\n    fib7(6) -> 8\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4)\n    \n    \ndef fib8(n: int):\n    \"\"\"The Fib8 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib8(0) -> 0\n    fib8(1) -> 1\n    fib8(2) -> 2\n    fib8(3) -> 3\n    fib8(4) -> 5\n    fib8(5) -> 8\n    fib8(6) -> 13\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4)\n    \n    \ndef fib9(n: int):\n    \"\"\"The Fib9 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib9(0) -> 0\n    fib9(1) -> 1\n    fib9(2) -> 1\n    fib9(3) -> 1\n    fib9(4) -> 2\n    fib9(5) -> 4\n    fib9(6) -> 7\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4)\n    \n    \ndef fib10(n: int):\n    \"\"\"The Fib10 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib10(0) -> 0\n    fib10(1) -> 1\n    fib10(2) -> 1\n    fib10(3) -> 1\n    fib10(4) -> ",
        "num_ids": 1025
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n <= 1:\n        return n\n",
        "num_ids": 12
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    fib4_list = [0, 1]\n    for i in range(2, n):\n        fib4_list.append(fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3])\n    return fib4_list[n]\n    ",
        "num_ids": 76
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 62
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be > 0\")\n",
        "num_ids": 20
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n<0:\n        return None\n    elif n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n",
        "num_ids": 74
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n    return fib(n)\n",
        "num_ids": 72
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < 2:\n        return n\n    fib4 = [0, 1, 2]\n    for i in range(3, n+1):\n        fib4.append(fib4[i-2] + fib4[i-1] + fib4[i])\n    return fib4[n]\n",
        "num_ids": 76
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 0:\n        raise ValueError(\"The argument must be non-negative\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 97
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    l.sort()\n    n = len(l)\n    if n == 0:\n        return None\n    elif n % 2 == 1:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n    else:\n        return l[n // 2]\n",
        "num_ids": 70
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return median(sorted(l, reverse=True))\n",
        "num_ids": 15
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(l) % 2 == 0:\n        l.sort()\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0\n    else:\n        return l[len(l) // 2]\n",
        "num_ids": 64
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert all(isinstance(num, (int, float)) for num in l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n",
        "num_ids": 76
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert len(l) == 1 or len(l) % 2 == 0\n    return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n",
        "num_ids": 46
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(l) == 0:\n        return None\n    \n    if len(l) % 2 == 0:\n        return (l[len(l)//2])\n    \n    return (l[len(l)//2 - 1] + l[len(l)//2 + 1])/2\n    \ndef merge_sort(l: list):\n    \"\"\"Return a sorted list from the elements in the list l.\n    >>> merge_sort([3, 1, 2, 4, 5])\n    [3, 1, 2, 4, 5]\n    >>> merge_sort([-10, 4, 6, 1000, 10, 20])\n    [-10, 4, 6, 1000, 10, 20]\n    \"\"\"\n    if len(l) == 0:\n        return []\n    \n    if len(l) == 1:\n        return l\n    \n    half = len(l) // 2\n    \n    left = merge_sort(l[:half])\n    right = merge_sort(l[half:])\n    \n    return merge(left, right)\n",
        "num_ids": 250
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(l) % 2 == 0:\n        return (l[int(len(l)/2)] + l[int(len(l)/2) - 1])/2\n    else:\n        return l[int(len(l)/2)]\n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return float(sum(l))/len(l)\n",
        "num_ids": 15
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l.sort()\n    print(f\"median is: {l[len(l)//2]}\")\n    return l[len(l)//2]\n",
        "num_ids": 40
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l.sort()\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2] + l[length // 2 - 1]) / 2.0\n    else:\n        return l[length // 2]\n",
        "num_ids": 60
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    text_split = text.split()\n    for i in range(0, len(text_split) // 2):\n        first = text_split[i]\n        second = text_split[i+1]\n        if first == second[::-1]:\n            return True\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if text == text[::-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # print(text)\n    temp = ''\n    for c in text:\n        if c.isalpha():\n            temp += c.lower()\n        else:\n            temp += c.upper()\n    # print(temp)\n    return temp == temp[::-1]",
        "num_ids": 65
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    rev = str()\n    rev = list(rev)\n    rev.reverse()\n",
        "num_ids": 21
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    text = text.lower()\n    temp = []\n    for char in text:\n        if char.isalpha():\n            temp.append(char)\n    if temp == sorted(temp):\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    text = text.lower()\n    return text == text[::-1]\n",
        "num_ids": 20
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(text) <= 1:\n        return True\n    elif text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "num_ids": 49
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    for i in range(0, len(text)):\n        if text[i] == text[-1 - i]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    text = text.replace(\" \", \"\").lower()\n    text = text.replace(\"-\", \"\").replace(\"?\", \"\").replace(\";\", \"\").replace(\"!\", \"\").replace(\".\", \"\")\n    return text == text[::-1]\n",
        "num_ids": 58
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    rem = p%n\n    return pow(n, rem, p)\n",
        "num_ids": 19
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    import math\n    return math.pow(2, n)%p\n",
        "num_ids": 28
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return p%n if n%p==0 else (n%p)%n\ndef isprime(n: int) -> bool:\n    \"\"\"Test whether n is prime.\n    >>> isprime(12)\n    True\n    >>> isprime(6)\n    True\n    >>> isprime(21)\n    False\n    >>> isprime(3)\n    False\n    \"\"\"\n    for i in range(2, n):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 117
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        r = modp(n-2, p)\n        q = modp(n-1, p)\n        return r * q % p\n",
        "num_ids": 74
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    f = 2 ** n\n    while f > p:\n        f = f // p\n    return f",
        "num_ids": 25
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return bin(p)[2:]\n",
        "num_ids": 10
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return (n % p) % ",
        "num_ids": 19
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (n % p)\n",
        "num_ids": 9
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    c = n % (p - 1)\n    d = n // p\n    return c * pow(10, d) % p\n",
        "num_ids": 32
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    if n < 0:\n        n *= -1\n    return (modp(n >> 1, p) * modp(n & p, p)) % p\n",
        "num_ids": 62
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26) for ch in s])\n",
        "num_ids": 30
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 32
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) % 26) + ord(\"a\")) for ch in s])",
        "num_ids": 31
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join([chr(((26 - (ord(ch) - 5)) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 35
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels = 'aAA'\n    result = ''\n    for char in text:\n        if char in vowels:\n            result += char\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join(x for x in text if not x.isupper() )",
        "num_ids": 20
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join([word for word in text.split() if word not in ('a','e','i','o','u','A','E','I','O','U')])\n",
        "num_ids": 42
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # remove vowels from string\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_string = \"\"\n    for char in text:\n        if char in vowels:\n            new_string += char\n    return new_string\n",
        "num_ids": 65
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import re\n    if text == '':\n        return text\n    return re.sub('[aeiouAEIOU]+', '', text)\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO - complete this function\n    vowels = ['a','e','i','o','u']\n    for char in text:\n        if char not in vowels:\n            text = text.replace(char,'')\n    return text\n",
        "num_ids": 58
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(text) == 0:\n        return \"\"\n    \n    for char in text:\n        if char not in VOWELS:\n            text = text.replace(char, \"\")\n    return text\n",
        "num_ids": 50
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    text_vowels = []\n    for i in text:\n        if i not in vowels:\n            text_vowels.append(i)\n    text_vowels = ''.join(text_vowels)\n    return text_vowels\n",
        "num_ids": 100
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join(char for char in text if char not in [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"])\n",
        "num_ids": 48
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = ['a','e','i','o','u']\n    for i in text:\n        if i in vowels:\n            text = text.replace(i,'')\n    return text\ndef remove_non_letters(text):\n    \"\"\"\n    remove_non_letters takes string and returns string without non letters.\n    >>> remove_non_letters(\"aBcDeef\\nghijklm\")\n    'aBcDeef'\n    >>> remove_non_letters(\"abcdef\\nghijklm\")\n    'abcdef'\n    >>> remove_non_letters('abcdef\\nghijklm')\n    'abcdef'\n    >>> remove_non_letters('bbBCDEf\\nghijklm')\n    'bbBCDEf'\n    >>> remove_non_letters('ABCDEF\\nGHIJKLM\\nMOESTRING')\n    'ABCDEF'\n    >>> remove_non_letters('aaaaa')\n    ''\n    >>> remove_non_letters('aaBAA')\n    ''\n    >>> remove_non_letters('zbcd')\n    ''\n    \"\"\"\n    non_letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    for i in text:\n        if i not in non_letters:\n            text = text.replace(i,'')\n    return text\n",
        "num_ids": 353
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sum(1 for x in l if x < t) == len(l)\n",
        "num_ids": 21
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [num for num in l if num < t]\n",
        "num_ids": 15
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(l) < t:\n        return False\n    for i in range(len(l) - t):\n        if l[i] < t:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return all(number <= t for number in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if sum(l) <= t:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l = sorted(l)\n    return all(l[index] < t for index in range(len(l)))\n",
        "num_ids": 29
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for x in l:\n        if x < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for n in l:\n        if n < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(l) <= t:\n        return False\n    for i in range(len(l)):\n        if l[i] < t:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return x + y\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(7, 7)\n    5\n    >>> subtract(8, 6)\n    5\n    >>> subtract(2, 3)\n    5\n    \"\"\"\n    return x - y\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(3, 2)\n    6\n    >>> multiply(6, 8)\n    40\n    >>> multiply(4, 4)\n    16\n    \"\"\"\n    return x * y\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(10, 5)\n    2\n    >>> divide(5, 5)\n    1\n    >>> divide(5, 5)\n    0.5\n    \"\"\"\n    return x / ",
        "num_ids": 211
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    print(x + y)\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(5, 7)\n    -1\n    \"\"\"\n    print(x - y)\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    30\n    \"\"\"\n    print(x * y)\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    0.5\n    \"\"\"\n    print(x / y)\ndef mod(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 7)\n    0\n    \"\"\"\n    print(x % y)\n",
        "num_ids": 242
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def same_chars(s0: str, s1: str):\n        \"\"\"\n        >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        True\n        >>> same_chars('abcd', 'dddddddabc')\n        True\n        >>> same_chars('dddddddabc', 'abcd')\n        True\n        >>> same_chars('eabcd', 'dddddddabc')\n        False\n        >>> same_chars('abcd', 'dddddddabce')\n        False\n        >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        False\n        \"\"\"\n        return s0 == s1 or (s0[0] == s1[0] and same_chars(s0[1:], s1[1:]))\n    return same_chars(s0, s1)\n",
        "num_ids": 220
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return s0 == s1\n",
        "num_ids": 9
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if s0.replace(' ', '').replace('-', '').replace('.', '').lower()!= s1.replace(' ', '').replace('-', '').replace('.', '').lower():\n        return False\n    else:\n        return True\n",
        "num_ids": 62
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s0, s1 = s0.lower(), s1.lower()\n    return s0 == s1\n",
        "num_ids": 27
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if s0 == s1:\n        return True\n    s0_dict = dict([(c, s0.count(c)) for c in s0])\n    s1_dict = dict([(c, s1.count(c)) for c in s1])\n    if s0_dict == s1_dict:\n        return True\n    return False\n",
        "num_ids": 85
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if s0.lower() == s1.lower():\n        return True\n    else:\n        return False\n    \ndef read_file(file: str) -> list:\n    \"\"\"\n    Read file\n    >>> read_file('test.txt')\n    ['eabcd', 'dddzzz', 'zzzddddd', 'dabc']\n    \"\"\"\n    with open(file, 'r') as f:\n        return [word for line in f for word in line.split()]\n",
        "num_ids": 117
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return s0 == s1\n",
        "num_ids": 9
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    diffs = 0\n    for c0, c1 in zip(s0, s1):\n        if c0!= c1:\n            diffs += 1\n    if diffs > 1:\n        return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if s0 == s1:\n        return True\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 1:\n        return n\n",
        "num_ids": 12
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: write Fibonacci series up to n\n    return (fib_rec(n - 1) + fib_rec(n - 2))\n    \ndef fib_rec(n: int):\n    if n <= 1:\n        return n\n    return fib_rec(n - 1) + fib_rec(n - 2)\n",
        "num_ids": 80
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a, b = 0, 1\n    for i in range(3, n+1):\n        a, b = b, a + b\n        yield a\n",
        "num_ids": 39
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    prev = 1\n    next = 1\n",
        "num_ids": 11
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # This version uses the recursive Fibonacci sequence\n    # for the memoization to prevent a recursion\n    # Error handling will be done by checking the input\n    # against the memoization list.\n    if n <= 0 or n in memo:\n        return memo[n]\n    if n == 1 or n == 2:\n        return 1\n    if n > 2:\n        return fib(n-1) + fib(n-2)\n    # See if the fibonacci sequence can be generated\n    # from a sequence of length n.\n    # If not, then we need to generate a new one.\n    # Therefore, we need to return a value from a\n    # recursive function for the given n.\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 179
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n <= 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 39
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)",
        "num_ids": 27
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert n >= 1\n    assert n <= 5\n    if n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(brackets) > 0 and brackets[0] == \"<\":\n        for index in range(1, len(brackets)):\n            if brackets[index] == \">\":\n                return True\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    st_open = \"{\"\n    st_close = \"}\"\n    # iteration over brackets\n    for i, c in enumerate(brackets):\n        if c == st_open:\n            # found a matching open bracket\n            if brackets[i + 1] == st_close:\n                # not found the closing bracket, skip this bracket\n                continue\n        elif c == st_close:\n            # found a matching closing bracket\n            if brackets[i - 1] == st_open:\n                # not found the opening bracket, skip this bracket\n                continue\n        else:\n            # bracket not found\n            return False\n    # we found the matching bracket\n    return True\n",
        "num_ids": 155
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(brackets) == 1:\n        return True\n    opening = brackets[0]\n    i = 1\n    for c in brackets[1:]:\n        if c!= \">\":\n            return False\n        i += 1\n        if c!= opening:\n            return False\n    return i == len(brackets)",
        "num_ids": 78
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    bracket_regex = re.compile(r'\\w+<>')\n    match = bracket_regex.search(brackets)\n    return match and match.group(0) in bracket_regex.groups()\n",
        "num_ids": 55
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    open = {\"<\",\">\",\"{\",\"}\"}\n    close = {\"}\",\"}\",\"}\"}\n    for i,j in enumerate(brackets):\n        if brackets[i] in open:\n            if j not in close:\n                return False\n            brackets = brackets[:i] + brackets[i+1:]\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = []\n    for i in brackets:\n        if i == \"<\":\n            res.append(\"(\")\n        elif i == \">\":\n            res.append(\")\")\n        elif i == \" \":\n            pass\n        elif i == \">\" or i == \">\":\n            res.append(i)\n    return len(res) == 1\n",
        "num_ids": 88
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return all(brackets[i] == brackets[i+1] for i in range(len(brackets)-1))\n",
        "num_ids": 30
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for bracket in brackets:\n        if bracket not in ('<', '>', '<>'):\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in brackets:\n        if i in \"[]{}\":\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # convert the string into a list\n    # append the boolean to the list\n    # for each bracket in the string, check if the bracket is a closing bracket, otherwise, remove it\n    # return the list\n    list_of_booleans = []\n    open_brackets = []\n    close_brackets = []\n    # check for each bracket if the bracket is a closing bracket, then append it to the list of open brackets\n    for char in brackets:\n        if char == \"<\":\n            open_brackets.append(True)\n        else:\n            open_brackets.append(False)\n    # remove the brackets from the list\n    open_brackets = [element for element in open_brackets if element]\n    # check for each bracket if the bracket is a opening bracket, then remove it from the list of open brackets\n    for char in brackets:\n        if char == \">\":\n            close_brackets.append(True)\n        else:\n            close_brackets.append(False)\n    # check if there are any closed brackets\n    if len(open_brackets) > 0 and len(close_brackets) > 0:\n        # check if every open bracket and close bracket have a corresponding closing bracket\n        for open_bracket in open_brackets:\n            for close_bracket in close_brackets:\n                # if the open bracket and close bracket are not the same, check if they are the same (first open bracket and first close bracket)\n                if open_bracket and close_bracket and open_bracket!= close_bracket:\n                    return False\n        return True\n    return Fals",
        "num_ids": 373
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 0\n    while i < len(l):\n        if l[i] <= l[i+1]:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    try:\n        return all([l.index(x) < l.index(y) for x, y in zip(l[:-1], l[1:])])\n    except ValueError:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\ndef is_powset(n: int, m: int, b: int) -> bool:\n    \"\"\"Return True if n^m = b for some non-zero b.\n    >>> is_powset(2, 3, 1)\n    False\n    >>> is_powset(2, 4, 1)\n    True\n    >>> is_powset(2, 2, 1)\n    True\n    >>> is_powset(3, 3, 1)\n    False\n    >>> is_powset(3, 4, 1)\n    False\n    \"\"\"\n    return n*m == b and n**m == b\ndef modinv(n: int, p: int) -> int:\n    \"\"\"Return the modulo n as an integer.\n    >>> modinv(1234, 23)\n    23\n    >>> modinv(1234, 23)\n    1\n    >>> modinv(1234, 24)\n    3\n    >>> modinv(1234, 24)\n    -1\n    \"\"\"\n    n %= p\n    if n == 0:\n        return 1\n    else:\n        return modinv(n, p)\ndef extended_gcd(a: int, b: int) -> tuple(int, int):\n    \"\"\"\n    >>> extended_gcd(43, 31)\n    (4, 3)\n    >>> extended_gcd(43, 31)\n    (4, 3)\n    >>> extended_gcd(43, 31)\n    (4, 4)\n    \"\"\"\n    x, y = 1, 0\n    while a!= 0:\n        q = b // a\n        b, a = a, b % a\n        x, y = y, x - q * y\n    return b, x\ndef modular_inverse(n: int, m: int) -> int:\n    \"\"\"\n    >>> modular_inverse(74, 10)\n    7\n    >>> modular_inverse(12, 3)\n    -1\n    >>> modular_inverse(12, 3)\n    1\n    \"\"\"\n    g, x = extended_gcd(n, m)\n    if g == 1:\n        return x % n\n    else:\n        return modular_inverse(x % n, n)\ndef mod_inverse(a: int, p: int) -> int:\n    \"\"\"\n    >>> mod_inverse(5, 19)\n    -1\n    >>> mod_inverse(5, 19)\n    -1\n    >>> mod_inverse(5, 19)\n    4\n    >>> mod_inverse(5, 19)\n    1\n    \"\"\"\n    x, y = 1, 0\n    while a!= 0:\n        q = a // p\n        a, x = x, a - q * x\n        y = y, y - q * y\n    return x % p\ndef modinv_pow(a: int, p: int) -> int:\n    \"\"\"\n    >>> modinv_pow(16, 4)\n    2\n    >>> modinv_pow(16, 4)\n    2\n    >>> modinv_pow(16, 4)\n    2\n    >>> modinv_pow(16, 4)\n    8\n    \"\"\"\n    m = mod_inverse(a, p)\n    return pow(a, m, p)\ndef pollard_rho(n: int, m: int) -> int:\n    \"\"\"\n    >>> pollard_rho(2, 3)\n    9\n    >>> pollard_rho(5, 3)\n    1\n    >>> pollard_rho(12, 9)\n    6\n    >>> pollard_rho(2, 9)\n    3\n    >>> pollard_rho(2, 9)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return n\n    elif n % 2 == 0:\n        return n\n    elif pollard_rho(n-1, m) == n:\n        return pollard_rho(n//2, m)\n    else:\n        return pollard_rho(n//2, m)\ndef modinv_pollard_rho(a: int, p: int) -> int",
        "num_ids": 1026
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for num in l:\n        if num <= 0:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = len(l)\n    if n == 0:\n        return True\n    if n == 1:\n        return True if l[0] > l[-1] else False\n    # Check if list elements are monotonically increasing or decreasing\n    increasing = True\n    i = 0\n    j = -1\n    # While we have not checked the list is monotonic\n    while i < n and j > -1:\n        if l[i] > l[j]:\n            increasing = not increasing\n            if not increasing:\n                j -= 1\n            else:\n                i += 1\n        elif l[i] < l[j]:\n            increasing = not increasing\n            if not increasing:\n                j += 1\n            else:\n                i += 1\n    return increasing\n",
        "num_ids": 181
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return True if l[0] >= l[0] else False\n",
        "num_ids": 41
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum(1 for x in l if x > 0) <= 1\n",
        "num_ids": 18
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l.sort()\n    n = len(l)\n    is_increasing = True\n    for i in range(n-1):\n        if l[i] <= l[i+1]:\n            is_increasing = False\n    return is_increasing\n",
        "num_ids": 60
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if l == []: return True\n    if len(l) == 1: return True\n    first_item = l[0]\n    for item in l[1:]:\n        if first_item < item:\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for e in l:\n        if e > 0:\n            return True\n        elif e < 0:\n            return False\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # sorted(set(l1 + l2))\n    l1.sort()\n    l2.sort()\n    l3 = []\n    for item in l1:\n        if item in l2:\n            l3.append(item)\n    return l3\n",
        "num_ids": 64
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    common_list = []\n    for x in l1:\n        if x in l2:\n            common_list.append(x)\n",
        "num_ids": 34
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # print(l1)\n    # print(l2)\n    l1_dict = dict()\n    l2_dict = dict()\n    for i in l1:\n        if i not in l1_dict.keys():\n            l1_dict[i] = 1\n        else:\n            l1_dict[i] += 1\n    for i in l2:\n        if i not in l2_dict.keys():\n            l2_dict[i] = 1\n        else:\n            l2_dict[i] += 1\n    res = []\n    for i in l1_dict.keys():\n        if l1_dict[i] == l2_dict[i]:\n            res.append(i)\n    return res",
        "num_ids": 175
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l1) == len(l2):\n        return sorted(l1)\n    else:\n        return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 45
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Write your code here\n    return list(set(l1) & set(l2))\n",
        "num_ids": 27
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    combs = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                combs.append(l1[i])\n    return combs\n",
        "num_ids": 64
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    i,j = 0,0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            i+=1\n            j+=1\n        elif l1[i] < l2[j]:\n            j+=1\n        elif l1[i] > l2[j]:\n            i+=1\n    return l1[i: j+1]\n",
        "num_ids": 104
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    seen = set()\n    while l1:\n        if l1[0] not in seen:\n            seen.add(l1[0])\n            yield l1[0]\n        l1 = l1[1:]\n    while l2:\n        if l2[0] not in seen:\n            seen.add(l2[0])\n            yield l2[0]\n        l2 = l2[1:]",
        "num_ids": 102
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_num = 0\n    # Find prime factors of n\n    while n % 2 == 0:\n        # Find the factor\n        n = n // 2\n        if n > max_num:\n            max_num = n\n    # If the factor is not prime, return it\n    if n > max_num:\n        return n\n    # Find the factor\n    while n % 2 == 1:\n        # If factor is not prime, try next prime factor\n        n = n // 2\n        if n > max_num:\n            max_num = n\n    # If factor is prime, return it\n    return max_num\n",
        "num_ids": 146
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    factor = 2\n    while n % factor == 0:\n        factor += 1\n    return factor\n",
        "num_ids": 24
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for factor in range(2, n):\n        if n % factor == 0:\n            return factor\n    return ",
        "num_ids": 28
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    from math import sqrt, floor\n    start = 2\n    while start <= sqrt(n):\n        if n % start == 0:\n            n //= start\n            print(start)\n            break\n        else:\n            start += 1\n",
        "num_ids": 58
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    p=2\n    while n%p==0:\n        p+=1\n    return p\n",
        "num_ids": 24
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prime = 2\n    while n % prime == 0:\n        prime += 1\n    return prime\n",
        "num_ids": 24
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    factor, i = 1, 2\n    while factor <= n:\n        if n % factor == 0:\n            n //= factor\n            i += 1\n        else:\n            factor += 1\n    return n, i\n",
        "num_ids": 52
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    prime_factors = [2, 3, 5, 7]\n    while n % 2 == 0:\n        n = n / 2\n    for i in prime_factors:\n        while n % i == 0:\n            n = n / i\n    return n\n",
        "num_ids": 63
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            n = n/i\n        else:\n            i += 1\n    return i-1\n",
        "num_ids": 46
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    prime_factors = [2, 3, 5, 7]\n    i = 4\n    while i * i <= n:\n        if n % i == 0:\n            prime_factors.pop()\n            n //= i\n        else:\n            i += 1\n    return n if n > 1 else prime_factors[-1]\n    \ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, else False.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"\n    if n > 1:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    return False\n",
        "num_ids": 195
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return n+1\ndef main():\n    print(sum_to_n(30))\n    print(sum_to_n(100))\n    print(sum_to_n(5))\n    print(sum_to_n(10))\n    print(sum_to_n(1))\n    \n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print('\\n*** ALL TESTS PASSED. GOOD LUCK NEXT TIME!\\n')",
        "num_ids": 126
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total = total + i\n    return total\n",
        "num_ids": 30
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return n + sum_to_n(n - 1)\n",
        "num_ids": 16
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 1\n    for i in range(1, n+1):\n        result += i\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return n * (n + 1) // 2\n",
        "num_ids": 13
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(range(1, n+1)",
        "num_ids": 13
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # https://www.hackerrank.com/challenges/python-lists/problem\n    # https://www.geeksforgeeks.org/sum-numbers-from-1-to-n/\n    # https://stackoverflow.com/questions/53652568/sum-numbers-from-1-to-n-in-python\n    # https://www.youtube.com/watch?v=a-WYb-NwCk&ab_channel=USC\n    if n <= 0:\n        return 0\n    return sum(list(range(1, n+1)))\n    \n",
        "num_ids": 144
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(range(1, n+1))\n",
        "num_ids": 14
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return n+1\n",
        "num_ids": 7
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for bracket in brackets:\n        if bracket == \"(\":\n            return False\n        if bracket == \")\":\n            return False\n    return True\n    \n",
        "num_ids": 37
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    bracket_map = {\"(\": \")\", \")\": \"(\", \")\": \"(\"}\n    for bracket in brackets:\n        if bracket in bracket_map:\n            bracket_map[bracket] = bracket_map.get(bracket, bracket)\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    brackets = brackets.replace(\"(\", \" ( \").replace(\")\", \" ) \")\n    brackets = brackets.replace(\"[\", \" [ \").replace(\"]\", \" ] \")\n    for bracket in brackets.split(\" \"):\n        if bracket == \")\":\n            return False\n        elif bracket == \")\":\n            return True\n    return False\n",
        "num_ids": 87
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(brackets):\n        if brackets[i] == '(':\n            if brackets[i+1] == '(':\n                i += 1\n            else:\n                return False\n        elif brackets[i] == ')':\n            if brackets[i+1] == '(':\n                i += 1\n            else:\n                return False\n        i += 1\n    return True\n",
        "num_ids": 97
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    open_brackets = {'(': ')', '(': ')', ')': '(', ')': '(', ')': ')', '[': ']', ']': '[', '}': '{'}\n    return all(open_brackets.get(c, c) == c for c in brackets)\n",
        "num_ids": 76
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not brackets:\n        return True\n    for bracket in brackets:\n        if bracket == '(':\n            if not correct_bracketing(brackets[1:-1]):\n                return False\n        elif bracket == ')':\n            if brackets[-1] == ')':\n                return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Check if there are any opening brackets\n    left_brackets = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            left_brackets.append(bracket)\n        else:\n            if len(left_brackets) > 0:\n                left_brackets.pop()\n    # Check if there are any closing brackets\n    right_brackets = []\n    for bracket in left_brackets:\n        if bracket == \")\":\n            right_brackets.append(bracket)\n        else:\n            if len(right_brackets) > 0:\n                right_brackets.pop()\n    return len(left_brackets) == len(right_brackets)\n",
        "num_ids": 163
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # use a dictionary to check the position of an opening bracket\n    # and returns whether a closing bracket is present or not.\n    open_bracket = dict()\n    opened = True\n    for char in brackets:\n        if char in open_bracket.keys():\n            open_bracket[char] += 1\n        else:\n            opened = False\n            break\n    if opened:\n        return True\n    else:\n        return False\n",
        "num_ids": 102
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return all([True if bracket == \"(\") and not all(bracket == \")\") for bracket in brackets])\n",
        "num_ids": 27
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if brackets == \"(\":\n        return False\n    if brackets == \")\":\n        return True\n    open_brackets = {\"(\":\")\", \"[\":\"{\",\")\":\"}\"}\n    for i in open_brackets:\n        if brackets == i:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x[1] for x in xs]",
        "num_ids": 14
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    xs = list(xs)\n    dxs = []\n    for i in range(len(xs)):\n        dxs.append(xs[i] * xs[i + 1])\n    return dxs\n",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [y[1] for y in reversed(xs)]\n",
        "num_ids": 16
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [a[1] for a in zip(xs[1:], xs[0:-1], xs[2:])]\n",
        "num_ids": 33
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [x[1] for x in reversed(xs)]\n",
        "num_ids": 16
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    x = 0\n    for i in range(len(xs)):\n        x = xs[i] + x * xs[i]\n    return [x]\n",
        "num_ids": 41
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x for x in xs[1:] if x!=0]\n",
        "num_ids": 20
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [0] + [0] * (len(xs) - 2)\n",
        "num_ids": 20
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    try:\n        return [i - sum(xs[i] * xs[:i]) for i in range(len(xs))]\n    except:\n        return [0]\n    \ndef get_f1(xs: list):\n    \"\"\"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return first derivative of this polynomial in the same form.\n    >>> get_f1([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> get_f1([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return derivative(xs)\n    \ndef get_f2(xs: list):\n    \"\"\"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return second derivative of this polynomial in the same form.\n    >>> get_f2([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> get_f2([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return derivative(xs)\n    \ndef get_f3(xs: list):\n    \"\"\"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return third derivative of this polynomial in the same form.\n    >>> get_f3([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> get_f3([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return derivative(xs)\n    \ndef get_f4(xs: list):\n    \"\"\"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return fourth derivative of this polynomial in the same form.\n    >>> get_f4([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> get_f4([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return derivative(xs)\n    \ndef main():\n    print(\"Hello, this is the test program.\")\n    print(\"Do you want to calculate the first derivative?\")\n    print(\"Your options are:\")\n    print(\"1. For a polynomial of degree 3\")\n    print(\"2. For a polynomial of degree 5\")\n    print(\"3. For a polynomial of degree 10\")\n    print(\"4. For a polynomial of degree 20\")\n    print(\"5. For a polynomial of degree 50\")\n    print(\"6. For a polynomial of degree 100\")\n    print(\"7. For a polynomial of degree 200\")\n    print(\"8. For a polynomial of degree 1000\")\n    print(\"9. For a polynomial of degree 2000\")\n    print(\"10. For a polynomial of degree 5000\")\n    print(\"11. For a polynomial of degree 10000\")\n    print(\"12. For a polynomial of degree 15000\")\n    print(\"13. For a polynomial of degree 20000\")\n    print(\"14. For a polynomial of degree 30000\")\n    print(\"15. For a polynomial of degree 40000\")\n    print(\"16. For a polynomial of degree 20000\")\n    print(\"17. For a polynomial of degree 50000\")\n    print(\"18. For a polynomial of degree 20000\")\n    print(\"19. For a polynomial of degree 20000\")\n    print(\"20. For a polynomial of degree 20000\")\n    print(\"21. For a polynomial of degree 20000\")\n    print(\"22. For a polynomial of degree 20000\")\n    print(\"23. For a polynomial of degree 20000\")\n    print(\"24. For a polynomial of degree 20000\")\n    print(\"25. For a polynomial of degree 20000\")\n    print(\"26. For a polynomial of degree 20000\")\n    print(\"27. For a polynomial of degree 20000\")\n    print(\"28. For a polynomial of degree 20000\"",
        "num_ids": 1025
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    ys = [0] * len(xs)\n    ys[0] = 1\n    for i in range(1, len(xs)):\n        ys[i] = xs[i-1] + ys[i-1] * xs[i]\n    return ys\n",
        "num_ids": 68
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "num_ids": 56
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    return fibfibHelper(n,0,1)\n",
        "num_ids": 17
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    x = 0\n    y = 1\n    z = 0\n    for i in range(n-1):\n        x, y = y, x + y\n    return x\n",
        "num_ids": 42
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 30
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if n < 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    \nprint(fibfib(5))\n",
        "num_ids": 59
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 57
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    a,b=0,1\n    \n    for _ in range(n-1):\n        a,b=b,a+b\n    return a",
        "num_ids": 39
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if n<=0:\n        return 0\n    elif n==1 or n==2:\n        return 0\n    else:\n        return fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\n",
        "num_ids": 64
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n",
        "num_ids": 32
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    s_list = s.split(' ')\n    for word in s_list:\n        if word[-1] in 'aeiouAEIOU':\n            if word[0] in 'aeiouAEIOU':\n                count += 1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    vowels_count = 0\n    for c in s:\n        if c == \"y\":\n            vowels_count += 1\n    return vowels_count\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in s:\n        if i in 'aeiou':\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    vowels = 0\n    for c in s:\n        if c in \"aeiou\":\n            vowels += 1\n    return vowels\n",
        "num_ids": 37
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    vowels = []\n    for i in s:\n        if i in 'aeiou':\n            vowels.append(i)\n    return len(vowels)\n",
        "num_ids": 44
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    vowels = 'aeiou'\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    vowels = 'aeiou'\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for i in s:\n        if i in ['a','e','i','o','u']:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = 'aeiou'\n    cnt = 0\n    for i in s:\n        if i in vowels:\n            cnt += 1\n    return cnt\n",
        "num_ids": 44
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = ['A', 'E', 'I', 'O', 'U']\n",
        "num_ids": 22
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    shifted_digit = x + shift\n    shifted_digit = str(shifted_digit)\n    shifted_digit = list(shifted_digit)\n    shifted_digit.reverse()\n    return \"\".join(shifted_digit)",
        "num_ids": 59
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    shift = -shift\n    num_digits = len(str(x))\n    digits_shift = num_digits - shift\n    # check if shift > number of digits\n    if shift > num_digits:\n        shift = num_digits - shift\n",
        "num_ids": 63
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Initialize result.\n    result = \"\"\n",
        "num_ids": 13
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    shift_reverse = shift % len(str(shift))\n    shifted_str = shift_reverse * str(x)[len(str(shift_reverse)):]\n    return shifted_str\n",
        "num_ids": 46
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if shift >= len(x):\n        return x\n    else:\n        return x[shift:] + x[:shift]\n",
        "num_ids": 31
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return ''.join(format(ord(x) - shift, 'b')[-shift:] for x in x)",
        "num_ids": 28
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if shift > len(x):\n        shift = len(x) - shift\n    return ''.join([str(int(x[shift])) for x in x[:-shift]] + [x[-shift:]])\n",
        "num_ids": 53
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    x = str(x)\n    x_reversed = x[shift:] + x[:shift]\n    return x_reversed\n",
        "num_ids": 35
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    x = str(x)\n    if shift > len(x):\n        return x[-shift:]\n    else:\n        return x[-shift:] + x[:-shift]\n",
        "num_ids": 44
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if s == \"\":\n        return 0\n    if len(s) == 1:\n        return ord(s)-ord('a')+1\n    else:\n        return sum([ord(s[i]) for i in range(0, len(s)) if not s[i]==' '])\n",
        "num_ids": 71
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    num = \"\"\n    for c in s:\n        num += str(ord(c) - ord('a'))\n    return int(num)\n",
        "num_ids": 36
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = s.strip()\n    return sum(ord(char) for char in s)",
        "num_ids": 22
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum(c for c in s if c.isupper())\n",
        "num_ids": 17
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(c for c in str(s))\n",
        "num_ids": 14
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char) - ord(\"A\")\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum(map(ord,s))\n",
        "num_ids": 12
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n    res = 0\n    for i in s:\n        res += ord(i) - ord('A')\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    string = s.upper()\n    # for i in range(0, len(string)):\n        # sum = sum + ord(string[i])\n",
        "num_ids": 37
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = s.lower()\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\" \", \"\")\n    n = n.lower()\n    n = n.replace(\" \", \"\")\n    n = n.replace(\"-\", \"\")\n    n = n.replace(\"+\", \"\")\n    n = n.replace(\" \", \"\")\n    if len(s) == 0:\n        return 0\n    if len(n) == 0:\n        return 0\n    if n[0]!= \"1\":\n        return 0\n    if s[-1]!= \"1\" and s[-1]!= \"0\":\n        return 0\n    if n[0] == \"0\":\n        return 0\n    count = 0\n    for i in range(len(s) - 1):\n        if int(s[i]) + int(s[i + 1]) > n[0]:\n            count += 1\n        else:\n            count += int(s[i]) + int(s[i + 1])\n    return count\n",
        "num_ids": 270
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if s==\"\":\n        return 0\n    if s.isdigit():\n        if int(s)<=n:\n            return int(s)\n        else:\n            return 0\n    if s.find(\"and\")!=-1:\n        return fruit_distribution(s[:s.find(\"and\")],n) + fruit_distribution(s[s.find(\"and\")+1:],n)\n    if s.find(\"or\")!=-1:\n        return fruit_distribution(s[:s.find(\"or\")],n) + fruit_distribution(s[s.find(\"or\")+1:],n)\n    if s.find(\"mango\")!=-1:\n        return fruit_distribution(s[:s.find(\"mango\")],n) + fruit_distribution(s[s.find(\"mango\")+1:],n)\n    return 0\n",
        "num_ids": 213
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if s.count(\"a\") > 1 and s.count(\"b\") > 1 and s.count(\"c\") > 1 and s.count(\"d\") > 1 and s.count(\"e\") > 1 and s.count(\"f\") > 1 and s.count(\"g\") > 1 and s.count(\"h\") > 1:\n        res = n//3 + n%3\n        return res\n    elif n == 0:\n        return n\n    else:\n        return fruit_distribution(s[:n],n)\n",
        "num_ids": 122
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a = s.split()\n    b = int(a[0])\n    c = int(a[1])\n    if b < c:\n        d = b\n        e = c\n    else:\n        d = c\n        e = b\n    return d + e\n",
        "num_ids": 66
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import math\n    sum_of_apples=0\n    sum_of_oranges=0\n    for item in s:\n        if item=='a':\n            sum_of_apples+=1\n        elif item=='o':\n            sum_of_oranges+=1\n    sum_of_mango=math.floor(sum_of_apples/2)+math.floor(sum_of_oranges/2)\n    return sum_of_mango\n",
        "num_ids": 113
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    apple = 0\n    orange = 0\n    mango = 0\n    for i in s:\n        if i == '0':\n            apple += 0\n        elif i == '1':\n            orange += 0\n        elif i == '2':\n            mango += 0\n        elif i == '3':\n            apple += 1\n        elif i == '4':\n            orange += 1\n        elif i == '5':\n            mango += 1\n    return apple + orange + mango\n",
        "num_ids": 117
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = s.lower()\n    s = s.replace(' ', '')\n    b = 0\n    for i in range(0,len(s)):\n        if s[i].isdigit():\n            b+= int(s[i])\n        elif s[i]=='a' or s[i]=='b' or s[i]=='c':\n            b+=1\n    return b\ndef fruit_distribution2(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    b = 0\n    n = n.lower()\n    n = n.replace(' ', '')\n    for i in range(0,len(s)):\n        if s[i].isdigit():\n            b+= int(s[i])\n        elif s[i]=='a' or s[i]=='b' or s[i]=='c':\n            b+=1\n    return b\ndef fruit_distribution3(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    b = 0\n    n = n.lower()\n    n = n.replace(' ', '')\n    for i in range(0,len(s)):\n        if s[i].isdigit():\n            b+= int(s[i])\n        elif s[i]=='a' or s[i]=='b' or s[i]=='c':\n            b+=1\n    return b\ndef fruit_distribution4(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    b = 0\n    n = n.lower()\n    n = n.replace(' ', '')\n    for i in range(0,len(s)):\n        if s[i].isdigit():\n            b+= int(s[i])\n        elif s[i]=='a' or s[i]=='b' or s[i]=='c':\n            b+=1\n    return b\ndef fruit_distribution5(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    b = 0\n    n = n.lower()\n    n = n.replace(' ', '')\n    for i in range(0,len(s)):\n        if s[i].isdigit():\n            b+= int(s[i])\n        elif s[i]=='a' or s[i]=='b' or s[i]=='c':\n            b+=1\n    return b\ndef fruit_distribution6(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in th",
        "num_ids": 1025
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # n = int(input())\n    # a = 0\n    # b = 0\n    # for i in range(n):\n    #     s = input()\n    #     if len(s) == 1:\n    #         a += int(s)\n    #         break\n    #     else:\n    #         for i in range(len(s)):\n    #             if s[i] == 'a':\n    #                 a += int(s[:i]+'b')\n    #                 b += int(s[i+1:])\n    #                 break\n    #             else:\n    #                 continue\n    #     print(a)\n    # print(b)\n    return a + b + n - 2*(a + b)\n",
        "num_ids": 178
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    import math\n    # you can use below to calculate the total number of apples, oranges and mango fruits of the basket\n    total_number_of_apples_and_oranges = n * 5 + s.count('a')\n    total_number_of_apples_and_oranges_in_the_basket = math.ceil(total_number_of_apples_and_oranges / 100)\n    total_number_of_mango_fruits = math.ceil(total_number_of_apples_and_oranges / total_number_of_apples_and_oranges_in_the_basket)\n    return total_number_of_mango_fruits\n",
        "num_ids": 165
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    apples = s.count('a')\n    apples_sum = apples * n\n    \n    roasts = s.count('r')\n    roast_sum = roasts * n\n",
        "num_ids": 46
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = [None, None]\n",
        "num_ids": 10
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not arr:\n        return []\n    # sort the array\n    # calculate index\n    # return the node with smallest index\n    smallest_index, smallest_value = 0, arr[0]\n    for index, val in enumerate(arr):\n        if index % 2 == 0 and smallest_value % 2 == 0:\n            if val > smallest_value:\n                smallest_value, smallest_index = val, index\n        else:\n            if val < smallest_value:\n                smallest_value, smallest_index = val, index\n    return smallest_index\n",
        "num_ids": 133
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # initialize a new array, with the minimum values of nodes\n    # and their indices, and an empty list, which will be the\n    # shortest common path to return\n    path = []\n    min_val = float(\"inf\")\n    path.append(0)\n    \n    for index in range(1,len(arr)):\n        if index % 2 == 0:\n            val = arr[index]\n            path.append(min_val)\n            min_val = min(val,min_val)\n        else:\n            val = arr[index]\n            path.append(path[index-1])\n            if val == min_val:\n                index_value = path[index-1]\n                index_index = path.index(index_value)\n                path.pop(index_index)\n                path.append(index_value)\n            else:\n                index_value = path[index-1]\n                index_index = path.index(index_value)\n                path.pop(index_index)\n                path.append(index_value)\n    return path\n",
        "num_ids": 254
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not arr:\n        return []\n    min_even = sys.maxsize\n    index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            index = arr[i] // 2\n            if index == i:\n                return arr[i]\n            elif index < i:\n                if arr[i] < min_even:\n                    min_even = arr[i]\n                    index = i\n    if arr[index] < min_even:\n        return arr[index]\n    return arr[index]\n",
        "num_ids": 135
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return [0,0]\n",
        "num_ids": 19
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return []\n    nodes = sorted(arr, key=lambda x: x % 2)\n    if len(nodes) == 1:\n        return nodes[0]\n    elif len(nodes) == 2:\n        return nodes[0] if nodes[0] == nodes[1] else nodes[1]\n    return nodes[0] if nodes[0] == nodes[1] else nodes[1]\n",
        "num_ids": 107
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sorted_arr = sorted(arr)\n    if sorted_arr:\n        left, right = 0, len(arr)-1\n        while left < right:\n            if arr[left] % 2 == 0 and arr[right] % 2!= 0:\n                return arr[left]\n            if arr[left] % 2!= 0 and arr[right] % 2 == 0:\n                return arr[left]\n            if arr[left] % 2 == 0 and arr[right] % 2!= 0:\n                left += 1\n            if arr[left] % 2!= 0 and arr[right] % 2 == 0:\n                right -= 1\n    return sorted_arr[-1]\n",
        "num_ids": 161
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not arr:\n        return []\n    smallest_even_val, smallest_index = 0, None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            smallest_even_val = value\n            break\n        if index % 2 == 0:\n            smallest_index = index\n    return [smallest_even_val, smallest_index]\n",
        "num_ids": 93
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    min_even_index = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_index = i\n        else:\n            min_even_index = min(even_index, min_even_index)\n            even_index = i\n    return arr[min_even_index], even_index\n",
        "num_ids": 93
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    val = 0\n    for i in lst:\n        val = val * 10 + i\n",
        "num_ids": 23
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def is_positive_int(lst):\n        for i in range(len(lst)):\n            if lst[i]<0:\n                return False\n            return True\n    \n    if lst==[]:\n        return -1\n    \n    elif len(lst)==1:\n        if is_positive_int(lst):\n            return lst[0]\n        else:\n            return -1\n    \n    elif lst[0]==lst[1]:\n        return lst[0]\n    \n    elif is_positive_int(lst):\n        max_value=lst[0]\n        for i in range(len(lst)):\n            if lst[i]>=max_value:\n                max_value=lst[i]\n        return max_value\n    \n    else:\n        if is_positive_int(lst[1:]):\n            return max(lst[1:])\n        elif is_positive_int(lst[:1]):\n            return max(lst[1:])\n        else:\n            return -1\n",
        "num_ids": 267
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return max(map(lambda x: lst.index(x) + 1, lst))\n",
        "num_ids": 24
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #print(lst)\n    freq = {}\n    for i in lst:\n        freq[i] = lst.count(i)\n    \n    #print(freq)\n    \n    for i in lst:\n        if freq[i] > 0:\n            return i\n    \n    return -1\n",
        "num_ids": 80
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # 0, 0\n    # 0\n    # 1, 2, 3, 4, 5\n    # (1)\n    if len(lst) == 0:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    \n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\n    \n    if lst[0] < lst[1]:\n        if lst[0] == lst[1]:\n            return lst[0]\n        elif lst[0] > lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\n    \n    if lst[0] > lst[1]:\n        if lst[1] == lst[2]:\n            return lst[1]\n        elif lst[2] > lst[1]:\n            return lst[2]\n        else:\n            return lst[1]\n    \n    if lst[0] > lst[2]:\n        if lst[1] == lst[2]:\n            return lst[1]\n        elif lst[2] > lst[1]:\n            return lst[2]\n        else:\n            return lst[1]\n    \n    if lst[0] > lst[2]:\n        if lst[2] == lst[3]:\n            return lst[2]\n        elif lst[3] > lst[2]:\n            return lst[3]\n        else:\n            return lst[2]\n    \n    if lst[0] > lst[2]:\n        if lst[2] == lst[3]:\n            return lst[2]\n        elif lst[3] > lst[2]:\n            return lst[3]\n        else:\n            return lst[2]\n    \n    if lst[0] > lst[2]:\n        if lst[2] == lst[3]:\n            return lst[2]\n        elif lst[3] > lst[2]:\n            return lst[3]\n        else:\n            return lst[2]\n        \n    if lst[0] > lst[2]:\n        if lst[2] == lst[3]:\n            return lst[2]\n        elif lst[3] > lst[2]:\n            return lst[3]\n        else:\n            return lst[2]\n    \n    return -1\n",
        "num_ids": 629
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst.sort()\n    if len(lst) == 0:\n        return -1\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            if lst[i] < lst[i - 1]:\n                return lst[i - 1]\n    return -1\n",
        "num_ids": 79
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not lst:\n        return -1\n    max = 0\n    for i in lst:\n        if i > max:\n            max = i\n    return ma",
        "num_ids": 41
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst = sorted(lst)\n    index = 0\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            index = i\n            break\n    return lst[index]\n",
        "num_ids": 56
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    lst.sort()\n    return max(lst)\n",
        "num_ids": 18
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #print(lst)\n    #lst = sorted(lst, reverse=True)\n    if len(lst) == 0:\n        return -1\n    #index = lst.index(max(lst))\n    #print(index)\n    index = max(lst)\n    if index < 0:\n        return -1\n    \n    for i in range(len(lst)):\n        if lst[i] > index:\n            index = lst[i]\n            #print(index)\n    #print(index)\n    return index\n    \ndef main():\n    #lst = list(map(int, input().split()))\n    lst = list(map(int, sys.stdin.readline().rstrip().split()))\n    print(search(lst))\n    \nmain()",
        "num_ids": 197
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return []\n",
        "num_ids": 16
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # write your code here\n    if len(lst) < 2:\n        return lst\n    \n    sorted_lst = sorted(lst)\n    sorted_lst.append(sorted_lst[-1] + sorted_lst[-2])\n    sorted_lst.append(sorted_lst[-1] - sorted_lst[-2])\n    sorted_lst.append(sorted_lst[-1] / 2)\n    \n    # print(sorted_lst)\n    \n    return strange_sort_list(sorted_lst)\n",
        "num_ids": 147
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sorted(lst, key = lambda x : -x)\n",
        "num_ids": 17
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(lst, reverse=True)\n",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst) < 2:\n        return lst\n    \n    # Create a helper variable, s, to store the smallest value in\n    # remaining_lst, and a pointer i, to help us go through the\n    # remaining values of list.\n    # - i is needed to prevent i from being overwritten in the\n    #   while loop.\n    i = 0\n    s = lst[i]\n    j = i + 1\n",
        "num_ids": 106
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # return sorted(lst)\n    return sorted(lst, key=lambda x: x)\n",
        "num_ids": 25
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # build the sorted list\n    new_lst = []\n",
        "num_ids": 16
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    strange_lst = []\n    for element in lst:\n        strange_lst.append((element, max(lst[:i])))\n        i += 1\n    strange_lst.sort()\n    return [element for element, maximum in strange_lst]\n",
        "num_ids": 69
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: replace this with your code\n    return sorted(lst)\n",
        "num_ids": 20
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def find_min_index(lst):\n        for i in range(len(lst)):\n            if lst[i] < lst[min(lst, key=lambda x: x)]:\n                min_index = i\n        return min_index\n    \n    def sort(lst):\n        if len(lst) == 1:\n            return lst\n        if len(lst) == 2:\n            if lst[0] < lst[1]:\n                lst[0], lst[1] = lst[1], lst[0]\n                return lst\n            else:\n                return lst\n        if lst[0] < lst[1]:\n            lst[0], lst[1] = lst[1], lst[0]\n            lst[0], lst[2] = lst[2], lst[0]\n            return lst\n        else:\n            lst[0], lst[1] = lst[1], lst[0]\n            lst[1], lst[2] = lst[2], lst[1]\n            return lst\n        \n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] < lst[1]:\n            lst[0], lst[1] = lst[1], lst[0]\n            return lst\n        return lst\n    if lst[0] < lst[1]:\n        lst[0], lst[1] = lst[1], lst[0]\n        return lst\n    return lst\n",
        "num_ids": 395
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if (a + b < c):\n        return -1\n    elif (a + c < b):\n        return (b * c) / 2\n    elif (b + c < a):\n        return (a * c) / 2\n    else:\n        return (b * c) / 2\n    \ndef main():\n    \"\"\"\n    Tests the triangle_area function\n    \"\"\"\n    # Test 1\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 5))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(1, 2, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(1, 1, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(1, 2, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(1, 2, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 5))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 5))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 5))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 10))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 1))\n    print(\"Testing triangle_area...\")\n    print(triangle_area(3, 4, 10))\n    prin",
        "num_ids": 1026
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = (b * c) / 2\n    if a > s and b > s and c > s:\n        return math.sqrt(a * b * c)\n    else:\n        return -1\n    \n",
        "num_ids": 52
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #Triangle area calculation\n    #area = (a*b)/2 + a*c + b*c + c*d\n    #a = b + c\n    #b = c\n    #c = d\n    #Note: The floating point operations are round\n    #c = sqrt(a**2 + b**2 + c**2)\n    #a = sqrt(a**2 + c**2)\n    #b = sqrt(a**2 + b**2)\n    #c = sqrt(a**2 + b**2)\n    #If the two sides of a triangle are equal, the triangle is a valid triangle\n    if a == b and b == c:\n        if a + b > c and a + c > b and b + c > a:\n            return round(a*b*c,2)\n    return -1\n",
        "num_ids": 199
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if ((a+b)>c) or ((a+c)>b) or ((b+c)>a):\n        return -1\n    if a == b == c:\n        return math.sqrt(a*b*c)\n    if a**2 == (b**2) + (c**2):\n        return a*b*c/2\n    if a**2 > (b**2) + (c**2):\n        return math.sqrt((b**2)+(c**2))\n    if b**2 > (a**2) + (c**2):\n        return math.sqrt((a**2)+(c**2))\n    if b**2 > c**2:\n        return math.sqrt((b**2)+(c**2))\n    if c**2 > a**2:\n        return math.sqrt((a**2)+(c**2))\n    if c**2 > b**2:\n        return math.sqrt((b**2)+(c**2))\n    return -1\n",
        "num_ids": 245
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #print(a,b,c)\n    if a > b and b > c:\n        if a * b == c * c:\n            return 0.5 * a * b\n        else:\n            return -1\n    elif a < b and b < c:\n        return (c * b) / 2\n    else:\n        return -1\n",
        "num_ids": 84
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # First divide by 2 to get the area\n    if (a + b + c)%2 == 0:\n        return math.sqrt((a**2 + b**2 + c**2)/2)\n    else:\n        return -1\n",
        "num_ids": 58
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if triangle_area(a,b,c) < 0:\n        return -1\n    #  1/2.0 * sum(a,b) + c\n    if triangle_area(a, b, c) == triangle_area(c, b, a):\n        return round(((a * b) * c) / 2, 2)\n    #  (a + b) * c - c\n    elif triangle_area(a, b, c) == triangle_area(b, c, a):\n        return round(((a * b) - c) / 2, 2)\n    #  a * b - c\n    elif triangle_area(a, b, c) == triangle_area(c, a, b):\n        return round((a * c) - c, 2)\n    #  a * b - c\n    elif triangle_area(a, b, c) == triangle_area(c, b, a):\n        return round((a * c) - b, 2)\n    elif triangle_area(a, b, c) == triangle_area(a, b, c):\n        return round(((a * c) + b) * c, 2)\n",
        "num_ids": 277
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not (is_valid_triangle(a, b, c)):\n        return -1\n    else:\n        return round((((b * c) - (a * c)) / 2), 2)\n    \ndef reverse(string):\n    '''\n    Given a string, reverse it, if it is a valid input.\n    \n    For example:\n    reverse(\"The quick brown fox\") => \"quick brown fox\"\n    '''\n    if not is_valid_input(string):\n        return -1\n    else:\n        return string[::-1]\n",
        "num_ids": 134
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Write your code here\n    if a >= b + c or a >= b or b >= c:\n        return -1\n    else:\n        if (a + b) >= c or (b + c) >= a:\n            return -1\n        else:\n            return (a * b) / 2",
        "num_ids": 71
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a < b + c and b < a + c and c < b + a:\n        if a == b == c:\n            return round(0.5 * (a + b + c), 2)\n        if a == b or a == c or b == c:\n            return -1\n        return (a * b) / 2\n    else:\n        return -1\n",
        "num_ids": 88
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 0\n    j = len(q)-1\n    k = len(q)//2\n",
        "num_ids": 25
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if is_palindrome(q) and is_sum_balanced(q) and len(q) <= max(w,len(q)):\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # function to calculate the sum of elements in the list\n    def sum_elements(l):\n        res = 0\n        for i in l:\n            res += i\n        return res\n    # function to check if the string l is palindromic\n    def palindromic(l):\n        # string is palindrome\n        if l == l[::-1]:\n            return True\n        # string is not palindrome\n        else:\n            return False\n    # function to determine if the string is balanced\n    def is_balanced(l):\n        if sum_elements(l) % (len(l))!= 0:\n            return False\n        return True\n    # function to determine if the string is balanced\n    def is_palindromic(l):\n        # string is not palindromic\n        if palindromic(l) is True:\n            return True\n        else:\n            return False\n    # function to determine if the list q is in flight\n    def is_in_flight(q, w):\n        res = 0\n        for i in q:\n            res += i\n        # if the sum of elements of q is less than the maximum weight,\n        # the string q is in flight\n        if res < w:\n            return False\n        # if the sum of elements of q is more than the maximum weight,\n        # the string q is not in flight\n        if res > w:\n            return False\n        return True\n    # function to determine if the string q is in flight\n    def is_in_flight(q, w):\n        # string is in flight\n        if is_in_flight(q, w) is True:\n            return True\n        else:\n            return False\n",
        "num_ids": 399
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum(q) <= w\n",
        "num_ids": 10
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #HINT: take into consideration that you can't have duplicates!\n    #NOTE: in order to simplify this, you should check if all elements of the list are equal.\n    #Example:\n    #will_it_fly([1, 2], 5) \u279e False\n    ## 1+2 is less than the maximum possible weight, but it's unbalanced.\n",
        "num_ids": 85
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return palindromic(w, q[0], q[1])\n",
        "num_ids": 19
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    q = sorted(q)\n    w = int(w)\n    check = 0\n    for x in q:\n        check = w - x\n        if (check < 0):\n            return False\n        elif (check > 0):\n            return True\n",
        "num_ids": 61
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Write an efficient implementation of will_it_fly.\n    # TODO: Use your solution to write an implementation that will be so efficient.\n    # Tip:\n    # - Your solution should not return the original list.\n    # - Your solution will never be called on the same list multiple times.\n    # - Your solution will never modify the original list.\n    # - Your solution will never modify the original list twice.\n    # - Your solution will never modify the original list forever.\n    # - Your solution will never use a hash map to track the index of the object.\n    # - Your solution will never have any extra space in the list.\n    # - Your solution will never use any arguments or return values!\n    # - Your solution will never use any loops!\n    \n    # check if balanced\n    if q.count(q[0])>=len(q)/2:\n        return False\n    # if not balanced, return False\n    elif sum(q)>w:\n        return False\n    # if balanced, return True\n    elif len(q)==len(set(q)):\n        return True\n    # if no balanced, return False\n    elif len(set(q))==1:\n        return False\n    # if balanced, return True\n    else:\n        return True\n",
        "num_ids": 301
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def get_max_weight_with_palindromic(obj,max_weight):\n        '''\n        Return a maximal weight and a list of all the palindromic numbers that have that maximal weight.\n        '''\n        palindromic_list = []\n        for x in obj:\n            palindromic_list.append(x)\n            palindromic_list.append(x[::-1])\n        \n        for i in range(1,len(palindromic_list)+1):\n            palindromic_list[0] = palindromic_list[i]\n            palindromic_list[i] = palindromic_list[len(palindromic_list)-i]\n            palindromic_list[len(palindromic_list)-i] = palindromic_list[len(palindromic_list)-i]\n        \n        palindromic_list = list(set(palindromic_list))\n        \n        for x in palindromic_list:\n            if x == palindromic_list[0]:\n                palindromic_list.remove(palindromic_list[0])\n        \n        palindromic_list = palindromic_list[1:]\n        \n        for x in palindromic_list:\n            if x == palindromic_list[0]:\n                palindromic_list.remove(palindromic_list[0])\n        \n        if len(palindromic_list) == 0:\n            return 0,palindromic_list\n        else:\n            palindromic_list.sort()\n            palindromic_list_with_max = []\n            palindromic_list_with_max.append(palindromic_list.pop())\n            for x in palindromic_list:\n                palindromic_list_with_max.append(palindromic_list.pop())\n            if palindromic_list_with_max == palindromic_list:\n                return True,palindromic_list_with_max\n            else:\n                return False,palindromic_list_with_max\n    \n    def will_it_fly_with_palindromic(q,w):\n        '''\n        Write a function that returns True if the object q will fly, and False otherwise.\n        The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight.\n",
        "num_ids": 606
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return q.sort() == q == q[::-1] and sum(q) <= max(q) <= w\n",
        "num_ids": 29
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(arr)\n    min_change = n\n",
        "num_ids": 16
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    min_change = 0\n    current = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < current:\n            current = arr[i]\n        else:\n            if arr[i-1] > current:\n                current = arr[i]\n            elif arr[i-1] == arr[i-2]:\n                current = arr[i]\n                min_change = arr[i] - arr[i-1]\n    return min_change\n",
        "num_ids": 120
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    diff = 0\n    palindrome = True\n    n = len(arr)\n    \n    for i in range(n - 1):\n        if arr[i]!= arr[i + 1]:\n            palindrome = False\n            break\n    if palindrome:\n        return n\n    \n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            diff += 1\n            arr[i] = arr[i + 1]\n            arr[i + 1] = arr[i]\n    return diff\n",
        "num_ids": 132
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    n = len(arr)\n    # Find the largest element with a negative change\n    # Get the current largest element\n    # Move the current element to its right\n    # Calculate the smallest change to make the array palindromic\n    # Return the minimum change\n    def get_smallest(start, end):\n        if end == start:\n            return 0\n",
        "num_ids": 84
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    i = 0\n    j = len(arr) - 1\n    min_diff = 0\n",
        "num_ids": 23
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n = len(arr)\n    if n <= 1:\n        return 0\n    if n == 2:\n        return arr[0] + arr[1]\n",
        "num_ids": 39
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def find_min_changes(arr, n, max_changes):\n        if n <= 0:\n            return 0\n",
        "num_ids": 29
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(arr) <= 1:\n        return len(arr)\n",
        "num_ids": 18
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(arr) == 1:\n        return 0\n    \n    n = len(arr)\n    \n    # dp table\n    dp = [0] * (n + 1)\n    \n    for i in range(n):\n        # first element must be 1\n        dp[i + 1] = arr[i]\n    \n    # recursive function\n    def recur(left, right):\n        if left == right:\n            return 0\n        \n        if left == n:\n            return arr[left]\n        \n        # now we can change arr[left] to arr[right]\n        # we need to look at left side for each element\n        dp[left] = min(dp[left],\n                    recur(left + 1, right)\n                    )\n        # now look at right side\n        dp[right] = min(dp[left] + arr[right],\n                    recur(left + 1, right + 1)\n                    )\n        return dp[right]\n",
        "num_ids": 230
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # initialize return value\n    smallest_change = float('inf')\n    # initialize a list that will store all possible changes\n    all_changes = []\n    # for every element in the array\n    for num in arr:\n        # initialize a list that will store all possible changes\n        all_changes.append([])\n        # for each element in the list\n        for i in range(num, len(arr)):\n            # append each element to a change to all_changes\n            all_changes[i].append(arr[i])\n        # if the current element is smaller than the smallest change, then the number of changes\n        # is increased by one\n        if num < smallest_change:\n            smallest_change = num\n    return smallest_change\n",
        "num_ids": 173
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    print(lst1)\n    print(lst2)\n",
        "num_ids": 17
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst1)!= len(lst2):\n        return []\n    else:\n        total = 0\n        for x in range(len(lst1)):\n            if len(lst1[x]) < len(lst2[x]):\n                total += 1\n            else:\n                total += 1\n        return tota",
        "num_ids": 83
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst2) < len(lst1):\n        return lst2\n    else:\n        return lst1 + lst2\n",
        "num_ids": 60
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst1 = sorted(lst1, key = lambda s: len(s))\n    lst2 = sorted(lst2, key = lambda s: len(s))\n    \n    i = 0\n    j = 0\n    count = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] == lst2[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif lst1[i] < lst2[j]:\n            i += 1\n        else:\n            j += 1\n",
        "num_ids": 142
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #    [3, 7, 8, 7, 3, 7, 8, 4]\n
        "num_ids": 1024
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    s = set(lst1) & set(lst2)\n    for i in s:\n        result.append(lst1.count(i))\n    for i in lst2:\n        result.append(lst2.count(i))\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    total = 0\n    for item in lst2:\n        if len(item) < len(lst1):\n            total += len(item)\n    return total\n",
        "num_ids": 41
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst1_len = len(lst1)\n    lst2_len = len(lst2)\n    total = lst1_len\n    if lst1_len < lst2_len:\n        return lst1[:lst2_len]\n    else:\n        return lst2[:lst1_len]\n",
        "num_ids": 85
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a = len(lst1)\n    b = len(lst2)\n",
        "num_ids": 21
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    for i in range(2,int(math.sqrt(a))+1):\n        if a%i==0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if is_prime(a) == False:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if a == 1:\n        return False\n    for i in range(2, a):\n        if a%i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def is_prim_number(a):\n        \"\"\"Is a prime number or not\"\"\"\n        if a < 2:\n            return False\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    if is_prim_number(a):\n        return True\n    else:\n        return False\n",
        "num_ids": 84
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(2, 100):\n        if is_prime(i):\n            if a % i == 0:\n                return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a == 1:\n        return False\n    if a == 2:\n        return True\n    if a % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(a)) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # 1. print(a)\n    # 2. if a % 3 == 0:\n        # print(\"a is the multiplication of 3 prime numbers\")\n    # 3. elif a % 3 == 1:\n        # print(\"a is the multiplication of 3 prime numbers\")\n    # 4. elif a % 3 == 2:\n        # print(\"a is the multiplication of 3 prime numbers\")\n    # 5. else:\n        # print(\"a is not a multiplication of 3 prime numbers\")\n    # 6. return True\n    # 7. else:\n        # return False\n    if a == 1 or a == 2:\n        return True\n    for i in range(3, int(sqrt(a)) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 184
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a == 0 or a == 1:\n        return False\n    if a <= 99:\n        return True\n    for i in range(2,a):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if a < 100:\n        return True\n    if (a % 3) == 0:\n        return False\n    if (a % 5) == 0:\n        return True\n    if a < 48:\n        return False\n    if (a % 7) == 0:\n        return True\n    if (a % 11) == 0:\n        return False\n    return is_multiply_prime(a / 3)\n",
        "num_ids": 98
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = 0\n    for i in range(2,a):\n        if a%i == 0:\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return True\n    if n < 0:\n        return False\n    return is_simple_power(x*x, n-1)",
        "num_ids": 39
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 1:\n        return True\n    elif n % 2 == 0:\n        if is_simple_power(n//2, n):\n            return False\n        else:\n            return True\n    else:\n        if is_simple_power(n//2, n+1) == False:\n            return False\n        else:\n            return True\n",
        "num_ids": 85
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return is_power(x, n) and is_number(x) and n!= 0 and n!= 1 and n!= 2 and n!= 3 and n!= 4 and n!= 5\n",
        "num_ids": 49
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n==1:\n        return True\n    if n%2==0:\n        return is_simple_power(x, n//2)\n    return is_simple_power(x, n//2) or is_simple_power(x, n//2)\n",
        "num_ids": 64
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return n ** int(n) == x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        a = int(n**0.5)\n        for i in range(2,a+1):\n            if n%i==0:\n                return False\n        return True\n",
        "num_ids": 70
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n==1:\n        return True\n    elif n==2:\n        return False\n    elif n==3:\n        return True\n    elif n==4:\n        return False\n    elif n%2==0:\n        return is_simple_power(x, n//2)\n    else:\n        return is_simple_power(x, n//2) or is_simple_power(x, n)\n    \n",
        "num_ids": 105
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # ===Modify code===\n    # Return True if n**int is simple, else return False.\n    # ===Modify code===\n    pas",
        "num_ids": 35
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_simple_power(x * 2, n // 2)\n    else:\n        return is_simple_power(x * 2, n // 2) and not is_simple_power(x, n // 2)\n",
        "num_ids": 74
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if is_power(x) == False:\n        return False\n    elif is_power(x) == True:\n        if x == int(x)**n:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a > 0:\n        if a == 3:\n            return True\n        if a % 3 == 0:\n            return True\n        if a % 3 == 1:\n            return False\n        if a % 3 == 2:\n            return True\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return a <= 90 and a > 1 and a % 3 == 0\n",
        "num_ids": 17
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if a%3==0 and a%5==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return a**3 == a**3 * a**2 * a\n",
        "num_ids": 17
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if (type(a) == int and a >= 0) or (type(a) == float and a >= 0):\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a<=0 or a%3!=0:\n        return False\n    elif a%2!=0:\n        return False\n    else:\n        return True\n",
        "num_ids": 43
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if isinstance(a, int) and (a > 0):\n        if a == 1:\n            return True\n        elif a == 2:\n            return False\n        elif a == -1:\n            return True\n        elif a == 64:\n            return True\n        elif a == 0:\n            return True\n        elif a == 180:\n            return False\n    else:\n        return False\n        \ndef get_base_num(a):\n    '''\n    Returns the base number of a given integer.\n    Examples:\n    get_base_num(1) ==> 0\n    get_base_num(6) ==> 3\n    get_base_num(-3) ==> -3\n    '''\n    if isinstance(a, int) and (a >= 0):\n        return a\n    else:\n        return base_num(a, 2)\n        \ndef is_prime(a):\n    '''\n    Returns a boolean value if the given integer is a prime.\n    Examples:\n    is_prime(6) ==> False\n    is_prime(7) ==> True\n    '''\n    if a == 1 or a == 0:\n        return True\n    else:\n        for b in range(2, a//2):\n            if (a % b) == 0:\n                return False\n        return True\n    \ndef is_prime_factor(a):\n    '''\n    Returns a boolean value if a given integer is a prime factor.\n    Examples:\n    is_prime_factor(13) ==> True\n    is_prime_factor(6) ==> False\n    '''\n    if a == 1 or a == 0:\n        return True\n    else:\n        b = a // 2\n        while b < a:\n            if a % b == 0:\n                return False\n            b += 1\n        return True\n    \ndef get_prime_factors(a):\n    '''\n    Returns a list of all prime factors of a given integer.\n    Examples:\n    get_prime_factors(3) ==> [3, 5]\n    get_prime_factors(6) ==> [6, 12]\n    get_prime_factors(-1) ==> []\n    get_prime_factors(8) ==> [2, 4, 6]\n    '''\n    if isinstance(a, int) and (a > 0):\n        if a == 1:\n            return [1]\n        elif a == 0:\n            return []\n        elif a == 1 or a == 2:\n            return [2]\n        elif a == 3:\n            return [3]\n        elif a == 5:\n            return [5]\n        elif a == 7:\n            return [7]\n        elif a == 13:\n            return [13]\n        elif a == 6 or a == 12:\n            return [6, 12]\n        elif a == 8:\n            return [2, 4, 6, 12]\n        else:\n            b = a // 2\n            while b < a:\n                if a % b == 0:\n                    return [a, b]\n                b += 1\n    else:\n        return []\n        \ndef is_gcd(a, b):\n    '''\n    Returns a boolean value if the given integers are relatively prime.\n    Examples:\n    is_gcd(3, 5) ==> True\n    is_gcd(7, 13) ==> False\n    is_gcd(15, 63) ==> True\n    is_gcd(12, 72) ==> False\n    '''\n    if isinstance(a, int) and (a > 0):\n        if a == 1:\n            return False\n        elif a == 2:\n            return True\n        elif a == 3:\n            return False\n        elif a == 5:\n            return False\n        elif a == 7:\n            return True\n        elif a == 15:\n            return False\n        elif a == 63:\n            return True\n        elif a == 72:\n            return False\n        elif a == 12:\n            return True\n        elif a == 12:\n            return False\n        else:\n            b = a // 2\n            while b < a:\n                if a % b == 0:\n                    return False\n                b += 1\n            return True\n    else:\n        return Fals",
        "num_ids": 1026
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return a > 0 and a**3 == a**6 and a**9 == a**12\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return a >= 1 and a <= 6\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a == 0:\n        return False\n    elif a % 5 == 0:\n        return True\n    elif a % 10 == 0:\n        return False\n    else:\n        return iscube(a//5)\n",
        "num_ids": 54
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum = 0\n    for i in range(0,len(num)):\n        sum = sum + int(num[i])\n    \n    if sum % 2 == 0:\n        return (len(num)-2)\n    elif sum % 2 == 1:\n        return (len(num)-1)\n    else:\n        return (len(num))\n    \ndef binary_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a binary string as a string and counts the number of binary digits that are \n    primes (prime number, or a prime, is a natural number greater than 1 that \n    is not a product of two smaller natural numbers).\n    Binary digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 2.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    sum = 0\n    for i in range(0,len(num)):\n        sum = sum + int(num[i])\n    \n    if sum % 2 == 0:\n        return (len(num)-2)\n    elif sum % 2 == 1:\n        return (len(num)-1)\n    else:\n        return (len(num))\n    \ndef main():\n    print(\"Hexadecimal key: \")\n    print(\"----------------------\")\n    print(hex_key(\"AB\"))\n    print(\"----------------------\")\n    print(binary_key(\"AB\"))\n    print(\"----------------------\")\n    print(binary_key(\"1077E\"))\n    print(\"----------------------\")\n    print(binary_key(\"123456789ABCDEF0\"))\n    print(\"----------------------\")\n    print(hex_key(\"ABCDEF\"))\n    print(\"----------------------\")\n    print(binary_key(\"ABCDEF\"))\n    print(\"----------------------\")\n    print(binary_key(\"2020\"))\n    print(\"----------------------\")\n    print(binary_key(\"123456789ABCDEF\"))\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 651
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    int_key = 0\n    for i in range(len(num)):\n        int_key += int(num[i]) * 16 ** i\n    return int_key\n",
        "num_ids": 44
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for digit in str(num):\n        if digit == 'A': count = count + 2\n        elif digit == 'B': count = count + 3\n        elif digit == 'C': count = count + 5\n        elif digit == 'D': count = count + 7\n        elif digit == 'E': count = count + 11\n        elif digit == 'F': count = count + 13\n        else: count = count + int(digit)\n    return count\n",
        "num_ids": 114
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    import re\n    import sys\n    import string\n    \n    pattern = re.compile(r'^[A-F][0-9]{2}$')\n    matches = pattern.finditer(num)\n    \n    for match in matches:\n        print(match.start())\n        \n    return len(matches)\n    \nnum = '1077E'\nhex_key(num)\n",
        "num_ids": 97
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if num == \"\":\n        return 0\n    \n    if (int(num, 16) > 0x7fffffff):\n        return 0\n    \n    if int(num[0], 16) == 0:\n        return 1\n    if (int(num[0], 16) & 0x7fffffff) == 0:\n        return 0\n    \n    digits = len(num)\n    \n    if (digits == 0):\n        return 0\n    \n    value = 0\n    \n    for i in range(digits):\n        value = (value * 16) + int(num[i], 16)\n    \n    if value <= 0x7fffffff:\n        return 1\n    \n    else:\n        return 2\n",
        "num_ids": 171
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = 0\n    if num[0] == \"0\":\n        result = 0\n    elif num[0] == \"1\":\n        result = 1\n    elif num[0] == \"2\":\n        result = 2\n    elif num[0] == \"3\":\n        result = 3\n    elif num[0] == \"4\":\n        result = 4\n    elif num[0] == \"5\":\n        result = 5\n    elif num[0] == \"6\":\n        result = 6\n    elif num[0] == \"7\":\n        result = 7\n    elif num[0] == \"8\":\n        result = 8\n    elif num[0] == \"9\":\n        result = 9\n    elif num[0] == \"A\":\n        result = 10\n    elif num[0] == \"B\":\n        result = 11\n    elif num[0] == \"C\":\n        result = 12\n    elif num[0] == \"D\":\n        result = 13\n    elif num[0] == \"E\":\n        result = 14\n    elif num[0] == \"F\":\n        result = 15\n    if num[1] == \"0\":\n        result = result * 2\n    elif num[1] == \"1\":\n        result = result * 3\n    elif num[1] == \"2\":\n        result = result * 5\n    elif num[1] == \"3\":\n        result = result * 7\n    elif num[1] == \"4\":\n        result = result * 11\n    elif num[1] == \"5\":\n        result = result * 13\n    elif num[1] == \"6\":\n        result = result * 17\n    elif num[1] == \"7\":\n        result = result * 19\n    elif num[1] == \"8\":\n        result = result * 23\n    elif num[1] == \"9\":\n        result = result * 29\n    elif num[1] == \"A\":\n        result = result * 31\n    elif num[1] == \"B\":\n        result = result * 37\n    elif num[1] == \"C\":\n        result = result * 41\n    elif num[1] == \"D\":\n        result = result * 43\n    elif num[1] == \"E\":\n        result = result * 47\n    elif num[1] == \"F\":\n        result = result * 53\n    if num[2] == \"0\":\n        result = result * 2\n    elif num[2] == \"1\":\n        result = result * 3\n    elif num[2] == \"2\":\n        result = result * 5\n    elif num[2] == \"3\":\n        result = result * 7\n    elif num[2] == \"4\":\n        result = result * 11\n    elif num[2] == \"5\":\n        result = result * 13\n    elif num[2] == \"6\":\n        result = result * 17\n    elif num[2] == \"7\":\n        result = result * 19\n    elif num[2] == \"8\":\n        result = result * 21\n    elif num[2] == \"9\":\n        result = result * 23\n    elif num[2] == \"A\":\n        result = result * 31\n    elif num[2] == \"B\":\n        result = result * 37\n    elif num[2] == \"C\":\n        result = result * 41\n    elif num[2] == \"D\":\n        result = result * 43\n    elif num[2] == \"E\":\n        result = result * 47\n    elif num[2] == \"F\":\n        result = result * 53\n    if num[3] == \"0\":\n        result = result * 2\n    elif num[3] == \"1\":\n        result = result * 3\n    elif num[3] == \"2\":\n        result = result * 5\n    elif num[3] == \"3\":\n        result = result * 7\n    elif num[3] == \"4\":\n        result = result * 11\n    elif num[3] == \"5\":\n        result = result * 13\n    elif num[3] == \"6\":\n        result = result * 17\n    elif num[3] == \"",
        "num_ids": 1024
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    h=0\n    for i in range(len(str(num))):\n        if str(num)[i] == \"0\":\n            h += 1\n        elif str(num)[i] == \"1\":\n            h += 1\n        elif str(num)[i] == \"2\":\n            h += 1\n        elif str(num)[i] == \"3\":\n            h += 1\n        elif str(num)[i] == \"4\":\n            h += 1\n        elif str(num)[i] == \"5\":\n            h += 1\n        elif str(num)[i] == \"6\":\n            h += 1\n        elif str(num)[i] == \"7\":\n            h += 1\n        elif str(num)[i] == \"8\":\n            h += 1\n        elif str(num)[i] == \"9\":\n            h += 1\n        elif str(num)[i] == \"A\":\n            h += 1\n        elif str(num)[i] == \"B\":\n            h += 1\n        elif str(num)[i] == \"C\":\n            h += 1\n        elif str(num)[i] == \"D\":\n            h += 1\n        elif str(num)[i] == \"E\":\n            h += 1\n        elif str(num)[i] == \"F\":\n            h += 1\n    return h\n",
        "num_ids": 327
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    num_digits = len(num)\n    prime_digits = [i for i in range(num_digits) if num[i] == '2']\n    num_prime_digits = len(prime_digits)\n",
        "num_ids": 56
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if num == \"\":\n        return 0\n",
        "num_ids": 14
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #checking if num is empty or not\n    if num == \"\":\n        return 0\n    #counting digits in the num\n    num = num.replace(\" \", \"\")\n    num_list = list(map(int, num))\n    #determining the number of digits\n    total_digits = 0\n    for num in num_list:\n        total_digits += num\n    #counting the digits\n    prime_digits = 0\n    for num in num_list:\n        if num >= 2 and num <= total_digits:\n            prime_digits += num\n    return prime_digits\n",
        "num_ids": 144
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if decimal == 0:\n        return \"db\"\n    elif decimal % 2 == 0:\n        return \"db\" + decimal_to_binary(decimal // 2)\n    else:\n        return \"db\" + decimal_to_binary(decimal * 2 + 1)",
        "num_ids": 65
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        # Get the lowest ascii value\n        binary = chr(decimal & 0x7F) + binary\n        decimal = decimal >> 7\n",
        "num_ids": 48
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if decimal == 0:\n        return \"db1111db\"\n    elif decimal == 1:\n        return \"db11\"\n    else:\n        return \"db\" + decimal_to_binary(decimal//2) + decimal % 2 + \"db\"\n",
        "num_ids": 61
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        binary += \"1\" if decimal % 2 == 1 else \"0\"\n        decimal = int(decimal/2)\n    binary += \"db\"\n    return binary\n",
        "num_ids": 53
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join(f'{x:b}' for x in decimal)",
        "num_ids": 20
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    binary = ''\n    \n    for i in str(decimal):\n        binary += '0' if i == '1' else '1'\n        \n    binary += 'db' if decimal % 2 == 0 else 'db'\n    \n    return binary[:-1] + binary[-1]\n",
        "num_ids": 70
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    binary = bin(decimal)\n    binary = binary[2:]\n    binary = binary.replace(\"0b\", \"\")\n    binary = binary.replace(\"db\", \"\")\n    binary = binary.replace(\".\", \"\")\n    return binary\n",
        "num_ids": 58
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Decimal values are used as decimal format\n    # decimal_to_binary(15)   # => \"0b111\"\n    # decimal_to_binary(32)   # => \"0b100000\"\n    # decimal_to_binary(5)     # => \"0b1\"\n    # decimal_to_binary(24)     # => \"0b11100\"\n",
        "num_ids": 90
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if isinstance(decimal, int):\n        binary = ''\n        while decimal:\n            binary += str(decimal % 2)\n            decimal = decimal // 2\n        return binary\n    else:\n        raise TypeError('Expected a decimal')\n",
        "num_ids": 60
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n = decimal\n",
        "num_ids": 6
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(s) < 3:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    count = [0] * 26\n    for c in s:\n        index = ord(c) - ord('a')\n        count[index] += 1\n        if count[index] < 2:\n            return False\n    return True\n",
        "num_ids": 82
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(s) == 0:\n        return True\n    if len(s) >= 3:\n        for i in range(len(s) - 1):\n            if s[i]!= s[i + 1]:\n                return False\n        return True\n",
        "num_ids": 62
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    import collections\n    d = collections.defaultdict(list)\n    for i in s:\n        d[i].append(1)\n        d[i].sort()\n    return all(len(d[x]) >= 3 for x in d)\n",
        "num_ids": 59
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count_three = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1] and s[i] == s[i+2] and s[i] == s[i+3]:\n            count_three += 1\n    if count_three > 2:\n        return False\n    elif count_three == 3:\n        return True\n    else:\n        return False\n",
        "num_ids": 100
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = s.lower()\n    return len(s) == 3 and (not s.startswith('a') or not s.startswith('b') or not s.startswith('c') or not s.startswith('d'))\n",
        "num_ids": 60
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = [0,0,0,0]\n    for i in s:\n        count[ord(i)-97] += 1\n        if count[0] % 3 == 0:\n            count[0] = 0\n            count[1] += 1\n        if count[1] % 3 == 0:\n            count[1] = 0\n            count[2] += 1\n        if count[2] % 3 == 0:\n            count[2] = 0\n            count[3] += 1\n    if count[0] >= 3 or count[1] >= 3 or count[2] >= 3 or count[3] >= 3:\n        return False\n    return True",
        "num_ids": 155
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s_length = len(s)\n    if s_length <= 3:\n        return True\n    else:\n        for i in range(s_length - 3):\n            if s[i]!= s[i + 1] and s[i]!= s[i + 2] and s[i]!= s[i + 3]:\n                return False\n        return True\n",
        "num_ids": 90
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Edge case\n    if len(s) == 0:\n        return True\n    \n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    \n    return True\n",
        "num_ids": 90
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if s == '':\n        return True\n    count = 0\n    for i in range(len(s)):\n        if i + 1 < len(s):\n            if s[i] == s[i+1]:\n                count += 1\n            else:\n                break\n        else:\n            break\n    if count == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 92
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Applying the list of grades to the dictionary\n    grade_equation_dict = {'A+': 4.0, 'A': 3.7, 'A-': 3.3, 'B+': 3.0, 'B': 2.7, 'B-': 2.3, 'C+': 3.0, 'C': 2.5, 'C-': 2.0, 'D+': 1.7, 'D': 1.3, 'D-': 1.0, 'E': 0.7, 'E-': 0.0}\n    \n    # Getting a list of GPA numbers\n    gpas_list = list(grade_equation_dict.keys())\n    \n    # Getting the number of GPA in the list\n    number_of_gpas = len(gpas_list)\n    \n    # Getting the GPA of the highest grade\n    highest_grade = max(grade_equation_dict.values())\n    \n    # Getting the letter grade of the highest grade\n    letter_grade = ''\n    for i in grade_equation_dict.values():\n        if i == highest_grade:\n            letter_grade = i\n            break\n        \n    return letter_grade\n",
        "num_ids": 278
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Grades the characters of the list to assign to the correct letter grade.\n    grades_dict = dict()\n    for grade in grades:\n        if (isinstance(grade, float)):\n            grades_dict[grade] = 'A+'\n        elif (isinstance(grade, str)):\n            grades_dict[grade] = 'A'\n        else:\n            grades_dict[grade] = 'B'\n",
        "num_ids": 100
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(map(numerical_grade, grades))\n",
        "num_ids": 16
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    gpa = 0\n    results = []\n    for grade in grades:\n        gpa += grade\n    gpa = gpa / len(grades)\n    results.append(str(gpa))\n    if gpa >= 4.0:\n        results.append('A+')\n    elif gpa >= 3.7:\n        results.append('A')\n    elif gpa >= 3.3:\n        results.append('A-')\n    elif gpa >= 3.0:\n        results.append('B+')\n    elif gpa >= 2.7:\n        results.append('B')\n    elif gpa >= 2.3:\n        results.append('B-')\n    elif gpa >= 2.0:\n        results.append('C+')\n    elif gpa >= 1.7:\n        results.append('C')\n    elif gpa >= 1.3:\n        results.append('C-')\n    elif gpa >= 1.0:\n        results.append('D+')\n    elif gpa >= 0.7:\n        results.append('D')\n    elif gpa >= 0.0:\n        results.append('D-')\n    return results\n",
        "num_ids": 287
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    grades_output = []\n    \n    # use a list of dictionaries to define grades\n    grade_table = [\n        {'name': 'A+', 'points': 4.0},\n        {'name': 'A', 'points': 3.7},\n        {'name': 'A-', 'points': 3.3},\n        {'name': 'B+', 'points': 3.5},\n        {'name': 'B', 'points': 2.7},\n        {'name': 'B-', 'points': 2.3},\n        {'name': 'C+', 'points': 3.0},\n        {'name': 'C', 'points': 1.7},\n        {'name': 'C-', 'points': 1.3},\n        {'name': 'D+', 'points': 3.0},\n        {'name': 'D', 'points': 1.7},\n        {'name': 'D-', 'points': 1.3},\n        {'name': 'E+', 'points': 3.0},\n        {'name': 'E', 'points': 0.7},\n        {'name': 'E-', 'points': 0.0},\n        {'name': 'F', 'points': 0.0}\n    ]\n    \n    # use a dictionary to get the letter grade from the grade table\n    letter_grade_table = {value['name']: value['points'] for value in grade_table}\n    \n    # get the grades for each student\n    for grade in grades:\n        grades_output.append(grade_table[grade['grade']])\n    \n    # return the output\n    return grades_output\n",
        "num_ids": 390
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    total = 0\n    for grade in grades:\n        total += grade\n    return [ 'A+' if total >= 4.0 else 'A' if total >= 3.5 else 'B+', 'B' if total >= 3.0 else 'B' if total >= 3.5 else 'C+', 'C' if total >= 3.0 else 'C' if total >= 3.5 else 'D+', 'D' if total >= 2.7 else 'D' if total >= 2.3 else 'E' if total >= 2.0 else 'F']\n",
        "num_ids": 128
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    if len(grades) == 0:\n        grades = [\"A+\", \"A\", \"B\", \"B+\", \"C\"]\n        \n    grade = grades.pop(0)\n    \n    # Grade everything within range and compare to previous values\n    if grade == \"A\":\n        return [\"A+\"]\n    elif grade == \"A-\":\n        return [\"A-\"]\n    elif grade == \"B\":\n        return [\"B+\"]\n    elif grade == \"B-\":\n        return [\"B-\"]\n    elif grade == \"C\":\n        return [\"C+\"]\n    elif grade == \"C-\":\n        return [\"C-\"]\n    elif grade == \"D\":\n        return [\"D+\"]\n    elif grade == \"D-\":\n        return [\"D-\"]\n    elif grade == \"E\":\n        return [\"E\"]\n    elif grade == \"E+\":\n        return [\"E+\"]\n    elif grade == \"E-\":\n        return [\"E-\"]\n    elif grade == \"F\":\n        return [\"F\"]\n    elif grade == \"F+\":\n        return [\"F+\"]\n    elif grade == \"F-\":\n        return [\"F-\"]\n    elif grade == \"G\":\n        return [\"G\"]\n    elif grade == \"G+\":\n        return [\"G+\"]\n    elif grade == \"G-\":\n        return [\"G-\"]\n    elif grade == \"H\":\n        return [\"H\"]\n    elif grade == \"H+\":\n        return [\"H+\"]\n    elif grade == \"H-\":\n        return [\"H-\"]\n    elif grade == \"I\":\n        return [\"I\"]\n    elif grade == \"I+\":\n        return [\"I+\"]\n    elif grade == \"I-\":\n        return [\"I-\"]\n    elif grade == \"J\":\n        return [\"J\"]\n    elif grade == \"J+\":\n        return [\"J+\"]\n    elif grade == \"J-\":\n        return [\"J-\"]\n    elif grade == \"K\":\n        return [\"K\"]\n    elif grade == \"K+\":\n        return [\"K+\"]\n    elif grade == \"K-\":\n        return [\"K-\"]\n    elif grade == \"L\":\n        return [\"L\"]\n    elif grade == \"L+\":\n        return [\"L+\"]\n    elif grade == \"L-\":\n        return [\"L-\"]\n    elif grade == \"M\":\n        return [\"M\"]\n    elif grade == \"M+\":\n        return [\"M+\"]\n    elif grade == \"M-\":\n        return [\"M-\"]\n    elif grade == \"N\":\n        return [\"N\"]\n    elif grade == \"N+\":\n        return [\"N+\"]\n    elif grade == \"N-\":\n        return [\"N-\"]\n    elif grade == \"O\":\n        return [\"O\"]\n    elif grade == \"O+\":\n        return [\"O+\"]\n    elif grade == \"O-\":\n        return [\"O-\"]\n    elif grade == \"P\":\n        return [\"P\"]\n    elif grade == \"P+\":\n        return [\"P+\"]\n    elif grade == \"P-\":\n        return [\"P-\"]\n    elif grade == \"Q\":\n        return [\"Q\"]\n    elif grade == \"Q+\":\n        return [\"Q+\"]\n    elif grade == \"Q-\":\n        return [\"Q-\"]\n    elif grade == \"R\":\n        return [\"R\"]\n    elif grade == \"R+\":\n        return [\"R+\"]\n    elif grade == \"R-\":\n        return [\"R-\"]\n    elif grade == \"S\":\n        return [\"S\"]\n    elif grade == \"S+\":\n        return [\"S+\"]\n    elif grade == \"S-\":\n        return [\"S-\"]\n    elif grade == \"T\":\n        return [\"T\"]\n    elif grade == \"T+\":\n        return [\"T+\"]\n    elif grade == \"T-\":\n        return [\"T-\"]\n    elif grade == \"U\":\n        return [\"U\"]\n    elif grade == \"U+\":\n        return [\"U+\"]\n    elif grade == \"U-\":\n        return [\"U-\"]\n",
        "num_ids": 1024
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [int(grade) if grade.isnumeric() else grade for grade in grades.split()]\n",
        "num_ids": 26
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: Write your solution here\n    # find out which grade is highest and return the letter grade\n    # for every grade in the list\n    highest = max(grades)\n    grade = \"\"\n    for i in range(len(grades)):\n        if grades[i] >= highest:\n            grade += grades[i]\n    return grade",
        "num_ids": 80
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    is_prime = False\n    if len(string) == 2:\n        is_prime = True\n    elif len(string) == 3:\n        is_prime = True\n    else:\n        is_prime = False\n    return is_prime\n",
        "num_ids": 60
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Write your code here\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return True\n    for i in range(2, len(string)):\n        if string[i] in \"aeiou\":\n            return True\n    return False\n",
        "num_ids": 85
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Simple return statement\n    return True if len(string) <= 1 else False\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if(len(string) > 1):\n        for i in range(2, len(string)):\n            if(string[i] in string[0:i]):\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for letter in string:\n        if string.count(letter) == 1:\n            continue\n        return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(string)<2:\n        return True\n    if len(string)==2:\n        return True if string.isnumeric() else False\n    if string.isnumeric():\n        return True if string.startswith('0') else False\n    for i in range(2,int(math.sqrt(len(string)))+1):\n        if string.isdigit() and string[0:i].isnumeric():\n            return True\n    return False\n",
        "num_ids": 113
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(2, len(string)):\n        if string[i] in string[0:i]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def is_prime(number):\n        for i in range(2, number):\n            if (number % i) == 0:\n                return False\n        return True\n",
        "num_ids": 40
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    string_length = len(string)\n    for num in range(2, string_length):\n        if string[num] == string[num-1]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for x in string:\n        if x == 'k':\n            count += 1\n    return count >= 2\n",
        "num_ids": 32
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(n+1):\n        if 1 in (int(i) for i in str(i)[-1::-1]):\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # The formula of count is n*(n+1)/2\n    # Note: The maximum digit is not included\n    return int(math.factorial(n)/(math.factorial(n-1)*2))\n",
        "num_ids": 52
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \"\"\"\n    Example:\n        3 -1 -> 0\n        4 -1 -> 0\n        5 -1 -> 0\n    1) (3,5) -> 1\n    2) (5,5) -> 3\n    3) (5,5) -> 0\n    4) (5,5) -> 0\n    5) (5,5) -> 0\n    6) (5,5) -> 3\n    7) (5,5) -> 5\n    8) (5,5) -> 5\n    9) (5,5) -> 5\n    10) (5,5) -> 5\n    11) (5,5) -> 5\n    12) (5,5) -> 5\n    13) (5,5) -> 5\n    14) (5,5) -> 5\n    15) (5,5) -> 5\n    16) (5,5) -> 5\n    17) (5,5) -> 5\n    18) (5,5) -> 5\n    19) (5,5) -> 5\n    20) (5,5) -> 5\n    21) (5,5) -> 5\n    22) (5,5) -> 5\n    23) (5,5) -> 5\n    24) (5,5) -> 5\n    25) (5,5) -> 5\n    26) (5,5) -> 5\n    27) (5,5) -> 5\n    28) (5,5) -> 5\n    29) (5,5) -> 5\n    30) (5,5) -> 5\n    31) (5,5) -> 5\n    32) (5,5) -> 5\n    33) (5,5) -> 5\n    34) (5,5) -> 5\n    35) (5,5) -> 5\n    36) (5,5) -> 5\n    37) (5,5) -> 5\n    38) (5,5) -> 5\n    39) (5,5) -> 5\n    40) (5,5) -> 5\n    41) (5,5) -> 5\n    42) (5,5) -> 5\n    43) (5,5) -> 5\n    44) (5,5) -> 5\n    45) (5,5) -> 5\n    46) (5,5) -> 5\n    47) (5,5) -> 5\n    48) (5,5) -> 5\n    49) (5,5) -> 5\n    50) (5,5) -> 5\n    51) (5,5) -> 5\n    52) (5,5) -> 5\n    53) (5,5) -> 5\n    54) (5,5) -> 5\n    55) (5,5) -> 5\n    56) (5,5) -> 5\n    57) (5,5) -> 5\n    58) (5,5) -> 5\n    59) (5,5) -> 5\n    60) (5,5) -> 5\n    61) (5,5) -> 5\n    62) (5,5) -> 5\n    63) (5,5) -> 5\n    64) (5,5) -> 5\n    65) (5,5) -> 5\n    66) (5,5) -> 5\n    67) (5,5) -> 5\n    68) (5,5) -> 5\n    69) (5,5) -> 5\n    70) (5,5) -> 5\n    71) (5,5) -> 5\n    72) (5,5) -> 5\n    73) (5,5) -> 5\n    74) (5,5) -> 5\n    75) (5,5) -> 5\n    76) (5,5) -> 5\n    77) (5,5) -> 5\n    78) (5,5) -> 5\n    79) (5,5) -> 5\n    80) (5,5) -> 5\n    81) (5,5) -> 5\n    82) (5,5) -> 5\n    83) (5,5) -> 5\n    84) (5,5) -> 5\n    85) (5,5) -> 5\n    86) (5,5) -> 5\n    87) (5,5) -> 5\n    88) (5,5) -> 5\n    89) (5,5) -> 5\n    90) (5,5) -> 5\n    91) (5",
        "num_ids": 1024
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # could be done more efficient with a map.\n    # ref: https://stackoverflow.com/a/43026916\n    lst = []\n    def starts_one(x):\n        \"\"\"\n        Takes a positive integer x and returns whether or not that is part of a\n        1-digit positive integer, and a sequence of all such positive integers\n        that start or end with 1.\n        \"\"\"\n        i = 0\n        while i < x:\n            if x % 10 == 1:\n                return False, [x]\n            if x % 10 == 0:\n                lst.append(x)\n            i += 1\n        return True, lst\n    i = 0\n    while i < n:\n        # could be done more efficient\n        # ref: https://stackoverflow.com/a/43026916\n        # i + 1 might be wrong, because the number is 10, and 10+1 is not even,\n        # and there are only 3 numbers, which are a, b, c, d, and e,\n        # and there are only 3 such positive integers that start or end with 1.\n        if starts_one(i)[0] == True:\n            i += 1\n        else:\n            return i + 1, starts_one(i)[1]\n    return None, None\n",
        "num_ids": 301
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(n, 1, -1):\n        if is_multiple(i):\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Euler's Problem: https://www.geeksforgeeks.org/sum-of-numbers-of-1-digit-positive-integers/\n    # Time complexity: O(N)\n    # Space Complexity: O(1)\n    # If we want to calculate the sum of every 1-digit positive integer, then we\n    # need to calculate all possible sums of every 1-digit positive integers.\n    # We will always have at least one 1-digit positive integer.\n    # But if the number n is not positive, then we will have to find a sum of\n    # every 1-digit positive integer to make sure we can find all 1-digit positive\n    # numbers.\n    # So we will need to create a set with the numbers from 1-n.\n    # We will need to check if it is positive.\n    # if n is positive then all 1-digit positive integers are 1-n.\n    # Else if n is negative then all 1-digit positive integers are 1-n+1.\n    # So we will have to check if all 1-digit positive integers are 1-n, and\n    # if so, return 1.\n    # If we have a set that contains only 1-digit positive integers, then the sum\n    # of all 1-digit positive integers will be the same as the sum of 1-digit\n    # positive integers.\n    if n == 0:\n        return 0\n    if n < 10:\n        return 1\n    if n < 100:\n        return 0\n    prev_num = 1\n    count = 0\n    for i in range(1, n):\n        if prev_num % 10 == 1:\n            count += prev_num // 10\n            prev_num = prev_num % 10 + prev_num // 10\n        else:\n            prev_num = prev_num + 1\n    return count",
        "num_ids": 420
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Find all positive integers with 1.\n    pos_dig_count = [i for i, digit in enumerate(str(n)) if digit == '1']\n    return len(pos_dig_count)\n",
        "num_ids": 50
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return int(n/10) + int((n%10) % 10) -1\n",
        "num_ids": 22
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    start = 0\n    end = 1\n    count = 1\n    while start < n:\n        if start % 10!= 1:\n            start += 1\n            count += 1\n        elif end % 10!= 1:\n            end += 1\n            count += 1\n        else:\n            if start % 10 == 1 or end % 10 == 1:\n                start += 1\n                count += 1\n                end += 1\n            elif end % 10 == 1:\n                end += 1\n                count += 1\n            else:\n                start += 1\n                count += 1\n    return count\n",
        "num_ids": 136
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    n = int(n)\n    if n == 1:\n        return 1\n    while n > 1:\n        count += n - 1\n        n = n - 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if N == 0:\n        return '0'\n    else:\n        return bin(N)[2:]\n",
        "num_ids": 27
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    a = []\n    \n    def print_b(num):\n        for i in str(num):\n            a.append(i)\n    \n    def sum_b(num):\n        \"\"\"Sum binary digits of N.\n        \n        For example, N = 6, the sum will be 6.\n        \"\"\"\n        ans = 0\n        for i in a:\n            ans += int(i)\n        return ans\n    \n    def is_digit(num):\n        for i in str(num):\n            if i not in a:\n                return False\n        return True\n    \n    def sum_digit(num):\n        \"\"\"Sum binary digits of N.\n        \n        For example, N = 6, the sum will be 6.\n        \"\"\"\n        ans = 0\n        for i in str(num):\n            ans += int(i)\n        return ans\n    \n    # print(print_b(N))\n    # print(sum_b(N))\n    # print(is_digit(N))\n    # print(sum_digit(N))\n    return sum_b(N) if is_digit(N) else sum_digit(N)",
        "num_ids": 268
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #binary = bin(N)[2:] # convert N to binary\n    #print(binary)\n    binary = bin(N)[2:]\n    #print(binary)\n    if len(binary) == 1:\n        return \"0\"\n    else:\n        #print(binary)\n        return \"1\" + solve(int(binary)) # sum binary number\n    \n    \n",
        "num_ids": 89
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def _solve(N, cnt):\n        if N == 0:\n            return 0\n        if cnt == 2:\n            return _solve(N, 0)\n        return _solve(N//2, cnt+1) + _solve(N//2, cnt)\n    return _solve(N, 0)\n",
        "num_ids": 82
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    n=N\n    a=[]\n    while n>0:\n        temp=n%2\n        a.append(str(temp))\n        n=n//2\n    \n    #return \"\".join(a)\n    return \"\".join(str(int(\"\".join(a),2)) for a in a)\n    #return \"\".join(a[::-1]",
        "num_ids": 92
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if N == 0:\n        return \"\"\n    elif N == 1:\n        return \"1\"\n",
        "num_ids": 26
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if N == 0:\n        return 0\n    a = [0] * N\n    a[0] = 1\n    for i in range(1, N):\n        a[i] = str(a[i])\n        if a[i] == \"0\":\n            a[i] = 1\n        else:\n            a[i] = int(a[i])\n            a[i] += 1\n    print(a)\n    a[0] = str(a[0])\n    print(a[0])\n    return a[0]\n",
        "num_ids": 131
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def get_sum(n):\n        sum = 0\n        while n!= 0:\n            sum += n % 10\n            n = n // 10\n        return sum\n    def solve_for(n):\n        if n == 0:\n            return \"0\"\n        sum = \"\"\n        while n!= 0:\n            sum += str(n % 10)\n            n = n // 10\n        return sum\n    def dfs(index, curr):\n        if index == len(numbers):\n            return\n        numbers[index] = curr\n        dfs(index + 1, curr)\n        dfs(index + 1, curr + numbers[index])\n    def to_binary(n):\n        curr = 0\n        for i in str(n):\n            curr = (int(i) * 10) + curr\n        return curr\n    dfs(0, 0)\n    return solve_for(to_binary(N))\n",
        "num_ids": 226
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # return \"1\" if N is 0\n    if N == 0:\n        return \"0\"\n    # return \"0\" if N is a digit\n    if N < 10:\n        return \"0\" + str(N)\n    else:\n        # return sum of digits\n        result = \"\"\n        while N:\n            result += str(N % 10)\n            N //= 10\n        return result\n",
        "num_ids": 96
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Recursive solve\n    if N == 1:\n        return \"1\"\n    else:\n        return f\"{str(N)[2:]}\" + solve(N // 10)\n",
        "num_ids": 44
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even, odd = 0, 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            even += lst[i]\n        else:\n            odd += lst[i]\n    return even + odd\n",
        "num_ids": 64
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    evens = [x for x in lst if x % 2 == 0]\n    odds = [x for x in lst if x % 2!= 0]\n",
        "num_ids": 40
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even = []\n    odd = []\n",
        "num_ids": 11
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst.sort()\n    for i in range(len(lst)-1):\n        if i % 2 == 0:\n            lst[i] += lst[i+1]\n            lst[i] %= 20\n    return lst\n",
        "num_ids": 61
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return []\n    res = []\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            res.append(lst[i])\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return []\n    if len(lst) % 2 == 0:\n        even = lst[0:len(lst)//2]\n        odd = lst[len(lst)//2+1:]\n        return even + odd\n    else:\n        return lst\n",
        "num_ids": 78
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    add_list = []\n    even = []\n    odd = []\n    for i in range(0,len(lst),2):\n        add_list.append(lst[i])\n        add_list.append(lst[i+1])\n    for i in range(0,len(lst)):\n        if i%2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    return add_list + even + odd\n",
        "num_ids": 122
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Hint: you can create an empty list and init the value as '0'\n    result = []\n    # i = 0\n    # while i < len(lst):\n    #     result.append(lst[i])\n    #     # i += 2\n    #     # if i % 2!= 0:\n    #     #     result.append(lst[i])\n",
        "num_ids": 92
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    even = []\n    odd = []\n",
        "num_ids": 13
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(0, len(lst), 2):\n        lst.append(lst[i])\n    return lst\n",
        "num_ids": 34
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for x in s:\n        if x.isalpha():\n            number = ord(x)\n            new_word = chr(number-32)\n            s = s.replace(x, new_word)\n    return s\n",
        "num_ids": 55
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \" \".join(s.split()).lower()\n",
        "num_ids": 15
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # An anti-shuffle string is a string where all words (separated by space)\n    # are replaced by a new word where all the characters arranged in\n    # ascending order based on ascii value.\n",
        "num_ids": 49
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \" \".join(sorted(s.split()))\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: Your code here\n    new_str = \"\"\n    for c in s:\n        if c.isalpha():\n            index = ord(c) - ord('a')\n            if index >= 0 and index <= 7:\n                new_str += chr(ord('a')+index)\n        else:\n            new_str += c\n    return new_str\n",
        "num_ids": 89
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return''.join([s[i] if i % 2 == 0 else'' + s[i] for i in range(len(s))])\n",
        "num_ids": 34
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return ''.join([chr(ord(w) + 1) if (ord(w) % 2) else w for w in sorted(s)])\n",
        "num_ids": 37
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \" \".join(sorted(s.split(\" \")))\n",
        "num_ids": 17
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # YOUR CODE HERE\n    return''.join(sorted(s.split()))\n    \ndef main():\n    \"\"\"Runs the program.\"\"\"\n    word_list = get_words_from_user()\n    print(word_list)\n    result = anti_shuffle(word_list)\n    print(result)\n",
        "num_ids": 77
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Your code here\n    word_list = s.split()\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    new_word_list = []\n    new_word = \"\"\n    word = \"\"\n    for i in range(len(word_list)):\n        word = word_list[i]\n        new_word_list.append(word)\n    new_word_list.sort()\n    for i in range(len(word_list)):\n        new_word_list.append(word_list[i])\n    for i in range(len(word_list)):\n        for j in range(len(alphabet)):\n            if new_word_list[i] == alphabet[j]:\n                word = word + alphabet[j]\n                new_word_list[i] = word\n    new_word_list.sort()\n    return \" \".join(new_word_list)\n",
        "num_ids": 224
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst.sort()\n    return [ (x, lst.index(i) + 1) for i,x in enumerate(lst) ]\n",
        "num_ids": 37
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n = len(lst)\n    c = []\n    for i in range(0, n):\n        row = []\n        for j in range(0, n):\n            row.append(lst[j][i])\n        c.append(row)\n    c.sort(key = lambda x : x[0])\n    return c\n",
        "num_ids": 82
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(map(lambda x: (x[x.index(x, 0)], x.index(x, 1)), lst))\n",
        "num_ids": 34
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst.sort(key=lambda x: [x[0], x[1]])\n    return lst\n",
        "num_ids": 28
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not lst:\n        return []\n    x = list(map(lambda a: (a[0], a[1]), lst))\n    x.sort()\n    for x in x:\n        yield x\n    \ndef get_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, row), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_col([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (0, 1), (2, 4), (2, 0), (3, 5), (3, 0)]\n    get_col([], 1) == []\n    get_col([[], [1], [1, 2, 3]], 3) == [(0, 0), (0, 1), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_col([[1,2,3,4,5,6], [1,2,3,4,1,6]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    \"\"\"\n    if not lst:\n        return []\n    x = list(map(lambda a: (a[1], a[0]), lst))\n    x.sort()\n    for x in x:\n        yield x\n",
        "num_ids": 468
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # print(lst)\n    \n    # If list is not of size 1 or 2 dimensional\n    if len(lst) == 0 or len(lst[0])!= 2:\n        return []\n    \n    if len(lst[0]) == 1:\n        return [(x[0], x[1])]\n    \n    # If list is of size 0 or 2 dimensional\n    if len(lst[0]) == 2:\n        return [(x[0], x[1])]\n    \n    # If list is of size 1 dimensional\n    if len(lst[0]) == 3:\n        return [(x[0], x[1], x[2])]\n    \n    # Sort each column by the coordinates\n    rows = sorted(lst, key = lambda x: x[0])\n    columns = sorted(lst, key = lambda x: x[1])\n    \n    # Return list of tuples based on coordinates\n    # Sort by row by columns\n    # Recursively sort by column\n    return [(rows[i], columns[i]) for i in range(len(rows))]\n",
        "num_ids": 260
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst.sort(key = lambda x: x[0])\n    return list(map(lambda x: (x[0], x[1]), lst))\n",
        "num_ids": 39
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO\n    # 1. Change your code so that you only return tuples with two elements.\n    # 2. Make your tuples have the column index as a third element.\n    # 3. Update your code so that you return the row index of the first element (column 0)\n    #\n    # For example, get_row([\n    #  [1,2,3,4,5,6],\n    #  [1,2,3,4,1,6],\n    #  [1,2,3,4,5,1]\n    # ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #\n    # Assuming you have columns 2 and 3 (the index), you should return\n    # the rows that have the first element as the first column in the list\n    #\n    # You may also find the following example:\n    # get_row([\n    #  [1,2,3,4,5,6],\n    #  [1,2,3,4,1,6],\n    #  [1,2,3,4,5,1]\n    # ], 2) == [(0, 0), (1, 2), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #\n    # You may also find the following example:\n    # get_row([\n    #  [1,2,3,4,5,6],\n    #  [1,2,3,4,1,6],\n    #  [1,2,3,4,5,1]\n    # ], 3) == [(0, 0), (1, 2), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #\n    # You may also find the following example:\n    # get_row([\n    #  [1,2,3,4,5,6],\n    #  [1,2,3,4,1,6],\n    #  [1,2,3,4,5,1]\n    # ], 4) == [(0, 0), (1, 2), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #\n    # TODO\n    # Please implement your code so that it returns a list of tuples\n    # Each tuple contains (row, column) such that each tuple is a\n    # coordinate - (row, columns) starting with 0.\n    #\n    # Hint:\n    # The get_row() function may be named by yourself, but you don't need to.\n    # You can use your code to generate the same example as before,\n    # but you may find that the get_row() function is a generator.\n    #\n    # For example, get_row([\n    #  [1,2,3,4,5,6],\n    #  [1,2,3,4,1,6],\n    #  [1,2,3,4,5,1]\n    # ], 2) == [(0, 0), (1, 2), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #\n    # You may also find the following example:\n    # get_row([\n    #  [1,2,3,4,5,6],\n    #  [1,2,3,4,1,6],\n    #  [1,2,3,4,5,1]\n    # ], 3) == [(0, 0), (1, 2), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #\n    # You may also find the following example:\n    # get_row([\n    #  [1,2,3,4,5,6],\n    #  [1,2,3,4,1,6],\n    #  [1,2,3,4,5,1]\n    # ], 4) == [(0, 0), (1, 2), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #\n    # You may also find the following example:\n    # get_row([\n    #  [1,2,3,4,5,6],\n    #  [1,2,3,4,1,6],\n    #  [",
        "num_ids": 1024
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    for i in range(len(lst)):\n        if type(lst[i][x]) == int:\n            result += [(x, i, 0, x, 0)]\n        else:\n            result += [(x, i, 0, lst[i][x][0], lst[i][x][1])]\n    result.sort()\n    return result\n",
        "num_ids": 93
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    rows = []\n    for row in lst:\n        rows.append((row[x], x))\n    rows.sort(reverse=True)\n    return rows\n",
        "num_ids": 40
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    res = []\n    sorted_array = sorted(array)\n    \n    for i in range(len(array)):\n        if sorted_array[i] % 2 == 0:\n            res.append(sorted_array[i])\n        else:\n            res.append(sorted_array[len(sorted_array)-i])\n    \n    return res\n    \n",
        "num_ids": 90
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    # or sort it in descending order if the sum( first index value, last index value) is even\n    if check_sum(array):\n        copy_array = array[:]\n        copy_array.sort(reverse=True)\n        return copy_array\n    else:\n        copy_array = array[:]\n        copy_array.sort(reverse=False)\n        return copy_array\n",
        "num_ids": 116
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # sort array in ascending order if odd\n    if sum(array) % 2 == 1:\n        array.sort(reverse=True)\n    # sort array in descending order if even\n    else:\n        array.sort(reverse=False)\n    return array",
        "num_ids": 60
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert len(array) > 0\n    sorted_array = [0]*len(array)\n    for i in range(len(array)):\n        sorted_array[i] = array[i]\n    for i in range(len(array)):\n        for j in range(len(array)):\n            if array[i] + array[j] % 2 == 1:\n                sorted_array[j] = array[i] + array[j]\n                break\n    return sorted_array\n",
        "num_ids": 120
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    new_array = []\n",
        "num_ids": 8
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def sort_rec(arr, low, high):\n        if low == high:\n            return\n        mid = (low + high) // 2\n        sort_rec(arr, low, mid)\n        sort_rec(arr, mid + 1, high)\n        i = j = 0\n        while i < mid and arr[i] < arr[mid]:\n            i += 1\n        arr[i], arr[mid] = arr[mid], arr[i]\n        while j < mid and arr[j] > arr[mid]:\n            j += 1\n        arr[j], arr[mid] = arr[mid], arr[j]\n        sort_rec(arr, low, mid - 1)\n        sort_rec(arr, mid + 1, high)\n    sort_rec(array, 0, len(array) - 1)\n    return array\n",
        "num_ids": 197
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not array:\n        return array\n    if len(array) <= 1:\n        return array\n",
        "num_ids": 25
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(array) == 0:\n        return array\n    else:\n        # sorted array\n        return sorted(array)\n",
        "num_ids": 31
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    array.sort()\n    if sum(array) % 2 == 1:\n        return sorted(array)\n    else:\n        return array",
        "num_ids": 33
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def sort(a, left, right):\n        # if there are no elements in left or right, return\n        if left == right == 0:\n            return\n",
        "num_ids": 38
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a = list(s)\n    for i in range(len(a)):\n        a[i] = alphabet[ord(a[i])-ord('a')]\n    return ''.join(a)\n",
        "num_ids": 51
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    encrypt_str = ''\n    for char in s:\n        if char.isupper():\n            num = ord(char) - ord('A')\n            num = num + 2\n            if num < ord('Z'):\n                num = num - 26 + 1\n            encrypt_str += chr(num)\n        elif char.islower():\n            num = ord(char) - ord('a')\n            num = num + 2\n            if num < ord('Z'):\n                num = num - 26 + 1\n            encrypt_str += chr(num)\n        else:\n            encrypt_str += char\n    return encrypt_str\n",
        "num_ids": 153
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = \"\"\n    for letter in s:\n        if letter in 'abcdefghijklmnopqrstuvwxyz':\n            res += (ord(letter) + 2) % 26\n        else:\n            res += (ord(letter) - 10) % 26\n    return res\n",
        "num_ids": 70
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # IMPLEMENT THIS FUNCTION\n    encrypted = ''\n    for char in s:\n        enc_char = ord(char)\n        encrypted += chr(enc_char - ord(char) + 2*ord('a'))\n    return encrypted\n",
        "num_ids": 60
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return ''.join([chr((ord(x)+ord(y))%26+ord('a')) for x in s for y in s])\n",
        "num_ids": 36
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = s.lower()\n    alph = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    # Create a list of the letters\n    letters = list(s)\n",
        "num_ids": 48
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = \"\"\n    # Rotate the alphabet by two places\n    for letter in s:\n        result += chr((ord(letter) + 2) % 26 + ord('a'))\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join([letter_to_char(letter) for letter in s])\n",
        "num_ids": 21
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # TODO: Complete the encrypt function\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    encrypted = \"\"\n    \n    # TODO: Create a variable for the length of the alphabet\n    l = len(alphabet)\n    \n    # TODO: Create a loop to find the number of spaces needed\n    num_spaces = l - len(encrypted)\n    \n    # TODO: If the number of spaces is less than 2, repeat the number of spaces\n    if num_spaces < 2:\n        num_spaces = 2\n        \n    # TODO: Create a loop to encrypt the message\n    for i in range(0,num_spaces):\n        # TODO: Add a space to the end of the encrypted string\n        encrypted += \" \"\n        \n        # TODO: Add the letter to the end of the encrypted string\n        encrypted += alphabet[alphabet.index(s[i])]\n    \n    return encrypted\n    \n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'asdfghjkl'\n    decrypt('ewhjklnop') returns 'gf'\n    decrypt('ix') returns 'f'\n    \"\"\"\n    \n    # TODO: Complete the encrypt function\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    decrypted = \"\"\n    \n    # TODO: Create a variable for the length of the alphabet\n    l = len(alphabet)\n    \n    # TODO: Create a loop to find the number of spaces needed\n    num_spaces = l - len(decrypted)\n    \n    # TODO: If the number of spaces is less than 2, repeat the number of spaces\n    if num_spaces < 2:\n        num_spaces = 2\n        \n    # TODO: Create a loop to decrypt the message\n    for i in range(0,num_spaces):\n        # TODO: Add a space to the end of the decrypted string\n        decrypted += \" \"\n        \n        # TODO: Add the letter to the end of the decrypted string\n        decrypted += alphabet[alphabet.index(s[i])]\n    \n    return decrypted\n    \n    \nif __name__ == \"__main__\":\n    # TODO: Test your encrypt and decrypt functions\n    #print(encrypt('hi'))\n    #print(encrypt('asdfghjkl'))\n    #print(encrypt('gf'))\n    #print(encrypt('jklmn'))\n    #print(encrypt('xyz'))\n    #print(encrypt('bcd'))\n    #print(encrypt('hfi'))\n    #print(encrypt('pqrst'))\n    #print(encrypt('wxyz'))\n    #print(encrypt('hi'))\n    #print(encrypt('hjklm'))\n    #print(encrypt('kj'))\n    #print(encrypt('fq'))\n    #print(encrypt('jk'))\n    #print(encrypt('yz'))\n    print(encrypt('hf'))\n    print(encrypt('pqrst'))\n    print(encrypt('wxyz'))\n    #print(encrypt('hi'))\n    #print(encrypt('",
        "num_ids": 1024
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if not lst:\n        return None\n    \n    lst.sort()\n    \n    # Largest element \n    # 2nd element \n    # Largest element\n    # 2nd element\n    # next smallest element\n    \n    if len(lst) == 2:\n        return lst[1]\n    \n    if len(lst) == 3:\n        return lst[2]\n    \n    if len(lst) == 4:\n        return lst[3]\n    \n    return next_smallest(lst[1:4])\n",
        "num_ids": 139
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # write your code here\n    return lst[1]\n",
        "num_ids": 18
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # We'll only have to check if the list has only 2 elements to avoid repeating other checks\n    if len(lst) < 2:\n        return None\n    \n    # We get the 2nd smallest element\n    return lst[1]\n",
        "num_ids": 57
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return None\n    \n    if len(lst) == 1:\n        return lst[0]\n    \n    min_idx = 0\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            min_idx = i\n            smallest = lst[i]\n        \n    if min_idx == 0:\n        return smallest\n    else:\n        return lst[min_idx]\n",
        "num_ids": 132
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst.sort()\n    if lst[-2] < lst[-1]:\n        return lst[-2]\n    else:\n        return lst[-1]\n",
        "num_ids": 46
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    next_smallest_item = None\n    for num in lst:\n        if next_smallest_item is None or num > next_smallest_item:\n            next_smallest_item = num\n    return next_smallest_item\n",
        "num_ids": 59
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    low = 0\n    for i in range(len(lst)-1):\n        if lst[i+1] < lst[i]:\n            low = i+1\n    return lst[low]\n",
        "num_ids": 51
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # Write your code here.\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        if lst[0] >= lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\n",
        "num_ids": 68
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    total = 0\n    for word in S:\n        if word in [\"I\", \"?\", \"!\"]:\n            total += 1\n    return total\n",
        "num_ids": 35
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if S.find('.')==-1:\n        return 0\n    elif S.find('?')==-1:\n        return 1\n    elif S.find('!')==-1:\n        return 2\n    else:\n        return 3\n",
        "num_ids": 71
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum(1 for s in S.split() if s.startswith(\"I\"))\n",
        "num_ids": 23
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return S.count('?') + S.count('!').count('.')\n",
        "num_ids": 21
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    boredoms = [\"I\", \"!\", \"?\"]\n    \n    return len(list(filter(lambda word: word.startswith(boredoms), S)))\n",
        "num_ids": 43
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    boredoms = {}\n    for word in S.split('.'):\n        if word == \"I\":\n            if \"?\" in word:\n                boredoms[\"I\"] += 1\n            elif \"!\" in word:\n                boredoms[\"I\"] += 1\n        elif word == \"The\":\n            if \"?\" in word:\n                boredoms[\"The\"] += 1\n            elif \"!\" in word:\n                boredoms[\"The\"] += 1\n        elif word == \"is\":\n            if \"?\" in word:\n                boredoms[\"is\"] += 1\n            elif \"!\" in word:\n                boredoms[\"is\"] += 1\n        else:\n            if \"?\" in word:\n                boredoms[word] += 1\n            elif \"!\" in word:\n                boredoms[word] += 1\n",
        "num_ids": 197
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    num_boredom = 0\n    word_list = S.split('.')\n    for word in word_list:\n        if word == '?' or word == '!':\n            continue\n        if word in ['I', 'I love']:\n            num_boredom += 1\n    return num_boredom\n",
        "num_ids": 77
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    boredom_counter = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            boredom_counter += 1\n    return boredom_counter\n",
        "num_ids": 48
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for word in S:\n        if word == \".\" or word == \"?\" or word == \"!\":\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    pass\n",
        "num_ids": 6
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n    \ndef int_max(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns a number if one of the numbers is greater than the other two, and all numbers are integers.\n    \n    Examples\n    int_max(5, 2, 7) \u279e 7\n    \n    int_max(3, 2, 2) \u279e 5\n    \n    int_max(3, -2, 1) \u279e 5\n",
        "num_ids": 136
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return x + y == z or x + z == y or x + z == z\n    # If x + y = z or x + z = y\n",
        "num_ids": 36
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return True if x+y+z in (int(x), int(y), int(z)) else False\n",
        "num_ids": 27
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if (not isinstance(x, int)) or (not isinstance(y, int)) or (not isinstance(z, int)):\n        return None\n",
        "num_ids": 38
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return x == y or x == z or y == z\n",
        "num_ids": 15
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # create a list of numbers\n    numbers = [x, y, z]\n    \n    # compute the sum of numbers\n    s = sum(numbers)\n    \n    # check if any of the numbers are integers\n    if s == sum(numbers):\n        return True\n    else:\n        return False\n    ",
        "num_ids": 78
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    try:\n        x, y, z = list(map(int, x.split()))\n    except ValueError:\n        print('Invalid input')\n    if x == y and x == z:\n        return True\n    elif x == y or y == z or x == z:\n        return True\n    else:\n        return False\n    \n    \n",
        "num_ids": 84
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if type(x) is int and type(y) is int and type(z) is int:\n        return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if any(type(num)!= int for num in (x, y, z)):\n        return False\n    if all(type(num) == int for num in (x, y, z)):\n        return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    for letter in message:\n        if letter.isupper():\n            message = message.replace(letter, '_', 2)\n        elif letter.islower():\n            message = message.replace(letter, 'a', 2)\n        elif letter.isdigit():\n            message = message.replace(letter, '0', 2)\n        else:\n            message = message.replace(letter, '', 1)\n    return message\n",
        "num_ids": 104
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    message = message.lower()\n    \n    message = message.replace('c','d').replace('s','t').replace('a','d').replace('i','y')\\\n    .replace('m','j').replace('b','k').replace('e','g').replace('l','h').replace('k','i')\\\n    .replace('g','h').replace('p','q').replace('s','r').replace('t','r').replace('e','d')\\\n    .replace('r','d').replace('p','e').replace('t','a').replace('g','i').replace('d','z')\\\n    .replace('s','n').replace('i','r').replace('h','j').replace('k','p').replace('f','h')\\\n    .replace('i','g').replace('f','j').replace('d','k').replace('b','y')\\\n    .replace('a','g').replace('d','i').replace('f','h').replace('j','g')\\\n    .replace('s','t').replace('i','k').replace('b','j').replace('h','l')\\\n    .replace('l','t').replace('j','g').replace('p','q').replace('g','h')\\\n    .replace('r','n').replace('h','l').replace('i','k').replace('p','q')\\\n    .replace('c','d').replace('s','t').replace('j','i').replace('e','k')\\\n    .replace('a','i').replace('l','j').replace('d','j').replace('p','y')\\\n    .replace('k','g').replace('l','r').replace('g','i')\\\n    .replace('d','g').replace('g','i').replace('l','r')\\\n    .replace('z','n').replace('h','p').replace('j','q')\\\n    .replace('i','k').replace('k','j').replace('j','p')\\\n    .replace('r','n').replace('q','k')\\\n    .replace('j','r').replace('e','j').replace('d','h').replace('h','g')\\\n    .replace('k','n').replace('t','s').replace('g','t').replace('l','e')\\\n    .replace('b','h').replace('t','c').replace('h','g')\\\n    .replace('r','n').replace('s','i').replace('g','j').replace('j','i')\\\n    .replace('p','t').replace('e','l').replace('h','d').replace('c','g')\\\n    .replace('e','j').replace('i','j')\\\n    .replace('g','z').replace('h','g').replace('l','y')\\\n    .replace('d','r').replace('g','g').replace('i','i')\\\n    .replace('r','j').replace('d','i').replace('z','y')\\\n    .replace('c','n').replace('h','q').replace('e','k').replace('j','d')\\\n    .replace('s','g').replace('c','z').replace('h','f').replace('i','k')\\\n    .replace('p','t').replace('g','z').replace('c','n')\\\n    .replace('d','t').replace('e','n').replace('r','k')\\\n    .replace('p','y').replace('i','l').replace('k','f')\\\n    .replace('f','j').replace('j','r').replace('i','r')\\\n    .replace('t','s').replace('z','r').replace('k','j').replace('i','r')\\\n    .replace('s','r').replace('j','i').replace('h','j').replace('t','i')\\\n    .replace('l','i').replace('p','e').replace('g','i').replace('e','k')\\\n    .replace('n','r').replace('e','j').replace('l','l')\\\n    .replace('l','g').replace('p','q').replace('i','g').replace('g','j')\\\n    .replace('r','n').replace('i','y').replace('h','k')\\\n    .replace('r','y').replace('g','g').replace('j','i').replace('z','n')\\\n    .replac",
        "num_ids": 1026
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join(s.lower() if s.islower() else s.upper() for s in message)\n",
        "num_ids": 28
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    encode_message = ''\n    for letter in message:\n        if letter in letters:\n            encode_message += letters[(letters.index(letter)+2)%26]\n        else:\n            encode_message += letter\n    return encode_message\n",
        "num_ids": 83
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # capitalize the first letter to avoid errors, because alphanumeric \n    # letters are not allowed in any part of the message\n    message = message.capitalize()\n    # replace vowels with their corresponding letters\n    message = re.sub(r'[aeiouAEIOU]+', r'\\1', message)\n    # replace consonants with the smallest letter in the alphabet\n    message = message.replace('c', 't').replace('s', 't').replace('g', 't').replace('o', 't').replace('e', 't').replace('r', 't').replace('u', 't').replace('i', 't').replace('y', 't')\n    # replace special characters with their equivalent form\n    message = message.replace('!', '!e').replace('?', '!e').replace('.', '!e').replace(',', '!e').replace(';', '!e').replace(':', '!e').replace(';', '!e').replace('\\'', '!e').replace('`', '!e').replace('!', '!e').replace('?', '!e').replace('.', '!e').replace(',', '!e').replace(';', '!e').replace(':', '!e').replace(';', '!e').replace('\\'', '!e').replace('`', '!e').replace('!', '!e').replace('?', '!e').replace('.', '!e').replace(',', '!e').replace(';', '!e').replace(':', '!e').replace(';', '!e').replace('\\'', '!e').replace('`', '!e').replace('!', '!e').replace('?', '!e').replace('.', '!e').replace(',', '!e').replace(';', '!e').replace(':', '!e').replace(';', '!e').replace('\\'', '!e').replace('`', '!e').replace('!', '!e').replace('?', '!e').replace('.', '!e').replace(',', '!e').replace(';', '!e').replace(':', '!e').replace(';', '!e').replace('\\'', '!e').replace('`', '!e').replace('!', '!e').replace('?', '!e').replace('.', '!e').replace(',', '!e').replace(';', '!e').replace(':', '!e').replace(';', '!e').replace('\\'', '!e').replace('`', '!e').replace('!', '!e').replace('?', '!e').replace('.', '!e').replace(',', '!e').replace(';', '!e').replace(':', '!e').replace(';', '!e').replace('\\'', '!e').replace('`', '!e').replace('!', '!e').replace('?', '!e').replace('.', '!e').replace(',', '!e').replace(';', '!e').replace(':', '!e').replace(';', '!e').replace('\\'', '!e').replace('`', '!e').replace('!', '!e').replace('?', '!e').replace('.', '!e').replace(',', '!e').replace(';', '!e').replace(':', '!e').replace(';', '!e').replace('\\'', '!e').replace('`', '!e').replace('!', '!e').replace('?', '!e').replace('.', '!e').replace(',', '!e').replace(';', '!e').replace(':', '!e').replace(';', '!e').replace('\\'', '!e').replace('`', '!e').replace('!', '!e').replace('?', '!e').replace('.', '!e').replace(',', '!e').replace(';', '!e').replace(':', '!e').replace(';', '!e').replace('\\'', '!e').replace('`', '!e').replace('!', '!e').replace('?', '!e').replace('.', '!e').replace(',', '!e').replace(';', '!e').replace(':', '!e').replace(';', '!e').replace('\\'', ",
        "num_ids": 1025
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    words = message.split() # split message to words\n    vowels = 'aeiouAEIOU' # en-us alphabet\n    \n    # get new list of letters\n    letters = list(vowels) + list(set(words)) # + letters for en-us \n    \n    # swap vowels with letter\n    new_word = \"\"\n    for letter in letters: # for each letter in en-us alphabet\n        new_word += letter.lower() # if letter in en-us alphabet, add letter to new word\n    \n    # return new word\n    return new_wor",
        "num_ids": 139
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    newmessage = \"\"\n    for i in range(len(message)):\n        if message[i].isupper():\n            newmessage += message[i].lower()\n        else:\n            newmessage += message[i]\n    return newmessage\n",
        "num_ids": 58
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # initialize the output\n    message_out = ''\n    \n    # enumerate the message, and replace the words that occur two \n    # different letters by a different letter\n    for i, letter in enumerate(message):\n        if letter == letter.upper():\n            # swap the letter if it is 'a'\n            if letter.lower() == 'a':\n                message_out += message[i].lower() + message[i+1].upper()\n            # swap the letter if it is 'e'\n            elif letter.lower() == 'e':\n                message_out += message[i].lower() + message[i+1].upper() + message[i+2].lower()\n            # swap the letter if it is 'i'\n            elif letter.lower() == 'i':\n                message_out += message[i].lower() + message[i+1].upper() + message[i+2].lower()\n            # swap the letter if it is 'o'\n            elif letter.lower() == 'o':\n                message_out += message[i].lower() + message[i+1].upper() + message[i+2].lower()\n            # swap the letter if it is 'u'\n            elif letter.lower() == 'u':\n                message_out += message[i].lower() + message[i+1].upper() + message[i+2].lower() + message[i+3].lower()\n            # swap the letter if it is 'y'\n            elif letter.lower() == 'y':\n                message_out += message[i].lower() + message[i+1].upper() + message[i+2].lower() + message[i+3].lower()\n            # swap the letter if it is 'z'\n            elif letter.lower() == 'z':\n                message_out += message[i].lower() + message[i+1].upper() + message[i+2].lower() + message[i+3].lower()\n            # reset the index\n            i = 0\n        else:\n            message_out += letter\n            # if the letter is a vowel, replace it by a 'a'\n            if letter.lower() in VOWELS:\n                message_out += VOWELS[VOWELS.index(letter.lower())]\n    \n    return message_out\n    \n    # test it\n    # message = 'This is a message'\n    # print(encode(message))\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it using the \n    following algorithm:\n    \n    - swap any letters which occur two different letters with a 'a'\n    - replace any vowels with a letter that appears 2 places after that \n        vowel in the english alphabet.\n    \n    Examples:\n    >>> message = 'TGST'\n    >>> message\n    'tHKS KS C MGSSCGG'\n    >>> print(decode(message))\n    'GKS CMGSSCGG'\n    \"\"\"\n    # initialize the output\n    message_out = ''\n    \n    # enumerate the message, and replace the words that occur two \n    # different letters by a different letter\n    for i, letter in enumerate(message):\n        if letter == letter.upper():\n            # swap the letter if it is 'a'\n            if letter.lower() == 'a':\n                message_out += message[i].lower() + message[i+1].upper()\n            # swap the letter if it is 'e'\n            elif letter.lower() == 'e':\n                message_out += message[i].lower() + message[i+1].upper() + message[i+2].lower()\n            # swap the letter if it is 'i'\n            elif letter.lower() == 'i':\n                message_out += message[i].lower() + message[i+1].upper() + message[i+2].lower()\n            # swap the letter if it is 'o'\n            elif letter.lower() == 'o':\n                message_out += message[i].lower() + message[i+1].upper() + message[i+2].lower()\n            # swap the letter if it is 'u'\n            elif letter.lower() == 'u':\n                message_out += message[i].lower() + message[i+1].upper() + message[i+2].lower()\n            # swap th",
        "num_ids": 1024
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # The alphabet is from german, and the vowels are from english\n    # So we'll have to change all the vowels to uppercase, and then\n    # convert all the letters to lowercase\n    message = message.lower()\n    message = message.replace(\"a\", \"e\").replace(\"e\", \"a\").replace(\"i\", \"u\")\n    message = message.replace(\"o\", \"I\").replace(\"i\", \"O\")\n    message = message.replace(\"t\", \"S\").replace(\"s\", \"t\")\n    message = message.replace(\"u\", \"A\").replace(\"A\", \"U\")\n    message = message.replace(\"u\", \"U\").replace(\"I\", \"I\").replace(\"S\", \"S\")\n    message = message.replace(\"a\", \"e\").replace(\"e\", \"a\").replace(\"i\", \"i\")\n    message = message.replace(\"o\", \"I\").replace(\"I\", \"O\")\n    message = message.replace(\"t\", \"S\").replace(\"s\", \"t\")\n    message = message.replace(\"u\", \"A\").replace(\"A\", \"U\")\n    message = message.replace(\"u\", \"U\").replace(\"I\", \"I\").replace(\"S\", \"S\")\n    message = message.replace(\"i\", \"I\").replace(\"I\", \"O\")\n    message = message.replace(\"t\", \"S\").replace(\"s\", \"t\")\n    message = message.replace(\"u\", \"A\").replace(\"A\", \"U\").replace(\"u\", \"U\")\n    message = message.replace(\"s\", \"t\").replace(\"a\", \"e\").replace(\"e\", \"a\").replace(\"i\", \"i\").replace(\"i\", \"o\")\n    message = message.replace(\"u\", \"A\").replace(\"A\", \"U\").replace(\"u\", \"U\").replace(\"i\", \"I\").replace(\"S\", \"S\")\n    message = message.replace(\"o\", \"I\").replace(\"I\", \"O\").replace(\"t\", \"S\").replace(\"s\", \"t\")\n    message = message.replace(\"u\", \"A\").replace(\"A\", \"U\").replace(\"u\", \"U\").replace(\"i\", \"I\").replace(\"I\", \"O\")\n    message = message.replace(\"s\", \"t\").replace(\"a\", \"e\").replace(\"e\", \"a\").replace(\"i\", \"i\").replace(\"i\", \"o\")\n    message = message.replace(\"u\", \"A\").replace(\"A\", \"U\").replace(\"u\", \"U\").replace(\"i\", \"I\").replace(\"S\", \"S\")\n    message = message.replace(\"o\", \"I\").replace(\"I\", \"O\").replace(\"t\", \"S\").replace(\"s\", \"t\")\n    message = message.replace(\"u\", \"A\").replace(\"A\", \"U\").replace(\"u\", \"U\").replace(\"i\", \"I\").replace(\"I\", \"O\")\n    message = message.replace(\"s\", \"t\").replace(\"a\", \"e\").replace(\"e\", \"a\").replace(\"i\", \"i\").replace(\"i\", \"o\")\n    message = message.replace(\"u\", \"A\").replace(\"A\", \"U\").replace(\"u\", \"U\").replace(\"i\", \"I\").replace(\"S\", \"S\")\n    message = message.replace(\"s\", \"t\").replace(\"a\", \"e\").replace(\"e\", \"a\").replace(\"i\", \"i\").replace(\"i\", \"o\")\n    message = message.replace(\"u\", \"A\").replace(\"A\", \"U\").replace(\"u\", \"U\").replace(\"i\", \"I\").replace(\"S\", \"S\")\n    message = message.replace(\"o\", \"I\").replace(\"I\", \"O\").replace(\"t\", \"S\").replace(\"s\", \"t\")\n    message = message.replace(\"u\", \"A\").replace(\"A\", \"U\").replace(\"u\", \"U\").replace(\"i\", \"I\").replace(\"I\", \"O\")\n    message = message.replace(\"t\", \"S\").replace(\"s\", \"t\").replace(\"a\", \"e\").replace(\"e\", \"a\").replace(\"i\", \"i\").replace(\"i\", \"o\")\n    message = message.replace(\"u\", \"A\").replace(\"A\", \"U\").replace(\"u\", \"U\").replace(\"i\", \"I\").replace(\"S\", \"S\")\n    message = message.replace(\"i\", \"I\").replace(\"I\", \"O\").replace(\"t\", \"S\").replace(\"s\", \"",
        "num_ids": 1024
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # Define vowels in english alphabet\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y']\n    \n    # Create a list of the letters in the message\n    letters = list(message)\n    \n    # Loop over the message\n    for i in range(len(message)):\n        \n        # Check if a letter is a vowel\n        if message[i].isalpha():\n            # If it is, add it to the list\n            if message[i].lower() in vowels:\n                letters[i] = message[i].upper()\n            else:\n                letters[i] = message[i]\n        \n        # If it is not a vowel, remove it\n        else:\n            letters.pop(i)\n            \n    # Join letters back into a string\n    message_encode = \"\".join(letters)\n    \n    return message_encode\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it, returning\n    the original message. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'tHKS'\n    >>> decode('test')\n    'This is a message'\n    \"\"\"\n    \n    # Define vowels in english alphabet\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'a', 'e', 'i', 'o', 'u', 'y']\n    \n    # Create a list of the letters in the message\n    letters = list(message)\n    \n    # Loop over the message\n    for i in range(len(message)):\n        \n        # Check if a letter is a vowel\n        if message[i].isalpha():\n            # If it is, add it to the list\n            if message[i].lower() in vowels:\n                letters[i] = message[i].upper()\n            else:\n                letters[i] = message[i]\n        \n        # If it is not a vowel, remove it\n        else:\n            letters.pop(i)\n            \n    # Join letters back into a string\n    message_decode = \"\".join(letters)\n    \n    return message_decode\n",
        "num_ids": 543
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst.sort()\n    res = 0\n    for i in lst:\n        if res < 0:\n            res = i\n        else:\n            res = res * 10 + i\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    MAX_PRIME = 1000000007\n    primes = []\n    i = 2\n    while i*i <= MAX_PRIME:\n        if lst[i] == 0:\n            break\n        if lst[i] == 1:\n            primes.append(i)\n        i += 1\n    primes.sort()\n    res = 0\n    for i in range(len(lst)):\n        res += lst[i]*primes[i]\n    return res\n",
        "num_ids": 117
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    largest = 0\n    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum = sum + i\n        else:\n            sum = sum + i\n        if largest < sum:\n            largest = sum\n    return largest\n",
        "num_ids": 62
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst = sorted(lst)\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            return 0\n        elif lst[i] == 1:\n            return i + 1\n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            continue\n        else:\n            return lst[i] + skjkasdkd(lst[i:i+2])\n",
        "num_ids": 117
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    i=0\n    while i<len(lst):\n        i+=1\n        curr=lst[i]\n        k=0\n        if curr>1:\n            while curr%10:\n                k+=1\n                curr/=10\n            lst[i]=lst[i]*10**k\n    print(lst)\n    return max(map(int,str(sum(lst))))\n",
        "num_ids": 109
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst = [int(i) for i in lst]\n    max_prime = max(lst)\n    summ = 0\n    for i in range(max_prime+1):\n        if lst.count(i) == 1:\n            summ += i\n    return summ\n",
        "num_ids": 70
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    largest_prime_num = 0\n    current_prime = 2\n",
        "num_ids": 19
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst.sort()\n",
        "num_ids": 8
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_val = 0\n    sum = 0\n    for i in range(1, len(lst)):\n        num = int(str(lst[i]) + str(lst[i-1]))\n        sum += num\n        if max_val < sum:\n            max_val = sum\n    return max_val\n    \ndef main():\n    #PROGRAM FUNCTIONS\n    print('The largest number from the list is: ', skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\n    print('The largest prime number from the list is: ', skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\n    print('The largest prime number from the list is: ', skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\n    print('The largest prime number from the list is: ', skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\n    print('The largest prime number from the list is: ', skjkasdkd([0,81,12,3,1,21]))\n    print('The largest prime number from the list is: ', skjkasdkd([0,8,1,2,1,7]))\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 404
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    temp = [0] * len(lst)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(lst)):\n        temp[i] = lst[i]\n        while(temp[i] < 0):\n            temp[i] = temp[i] % primes[i]\n    return sum([int(i) for i in temp])\n",
        "num_ids": 137
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for key in dict:\n        if type(dict[key]) == str:\n            if len(dict[key]) == len(key):\n                if all(key.upper() in dict.keys() for key in dict.keys()):\n                    return True\n            else:\n                return False\n        else:\n            return False\n",
        "num_ids": 76
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for k in dict.keys():\n        if isinstance(k, str) and k.islower():\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return all(type(k) == str and k.lower() in dict for k in dict.keys())\n",
        "num_ids": 26
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for key in dict.keys():\n        if isinstance(key, str):\n            if all(c.isupper() for c in key):\n                return True\n        else:\n            return False\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    for key in dict.keys():\n        if not key.isalpha():\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for key in dict.keys():\n        if type(key) == str:\n            if key.lower() in key.lower():\n                pass\n            else:\n                return False\n    return True",
        "num_ids": 46
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = True\n    for i in dict.keys():\n        if isinstance(dict[i], str):\n            if dict[i].isupper():\n                result = False\n        elif isinstance(dict[i], str):\n            if dict[i].islower():\n                result = False\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(dict) == 0: return False\n    for key in dict:\n        if isinstance(key, str) and key.lower() in dict.keys():\n            return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def is_case_insensitive(d):\n        return all(isinstance(k, str) for k in d.keys()) and all(k.islower() for k in d.keys())\n    \n    return is_case_insensitive(dict) or is_case_insensitive(dict.values())\n",
        "num_ids": 73
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if isinstance(dict, dict):\n        dict_lower = dict.lower()\n        # print(dict_lower)\n        # print(dict_lower)\n        return all(type(x) == str for x in dict_lower.split()) and all(x in dict_lower.upper() for x in dict_lower)\n    else:\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [i for i in range(n + 1) if is_prime(i)]\n",
        "num_ids": 22
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #implement a helper function\n    def prime_sum(n):\n        if n == 0:\n            return []\n        elif n == 1:\n            return [1]\n        else:\n            result = []\n            for i in range(2, n+1):\n                if i*i > n:\n                    break\n                if n % i == 0:\n                    result.append(i)\n                    break\n            return result\n    \n    #get all prime numbers\n    primes = []\n    for i in range(2, n+1):\n        primes.extend(prime_sum(i))\n    \n    #count the up to the n number\n    result = []\n    for i in range(1, len(primes)):\n        if primes[i] >= n:\n            break\n        else:\n            result.append(primes[i])\n    \n    return result\n",
        "num_ids": 210
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    import math\n    count = []\n    for i in range(n, 0, -1):\n        if i < math.sqrt(n):\n            pass\n        elif i > 0:\n            if i % 2 == 0:\n                count.append(i)\n            else:\n                for j in range(i // 2, 1, -1):\n                    if i % j == 0:\n                        break\n                else:\n                    count.append(i)\n    return coun",
        "num_ids": 111
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = []\n    for i in range(n, 0, -1):\n        if is_prime(i):\n            res.append(i)\n    return res\n",
        "num_ids": 41
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    primes = [2]\n    for i in range(3, n + 1):\n        if not primes[-1]:\n            primes.append(i)\n        else:\n            for j in primes:\n                if i % j == 0:\n                    break\n            else:\n                primes.append(i)\n    return primes\n",
        "num_ids": 83
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for i in range(n+1):\n        prime = True\n        for j in range(2,i):\n            if (i % j) == 0:\n                prime = False\n                break\n        if prime:\n            result.append(i)\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    import math\n",
        "num_ids": 5
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def is_prime(n):\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n    \n    prime_nums = []\n    def is_prime_number(n):\n        if n<=1:\n            return False\n        if n%2 == 0:\n            return True\n        if n % 3 == 0:\n            return True\n        for i in range(5,int(math.sqrt(n))+1,5):\n            if n%i == 0:\n                return False\n        return True\n    for i in range(n,0,-1):\n        if is_prime_number(i):\n            prime_nums.append(i)\n    return prime_nums\n",
        "num_ids": 179
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def count_up_to_prim():\n        prime_numbers = [2,3]\n        for i in range(3, n+1, 1):\n            if i not in prime_numbers:\n                prime_numbers.append(i)\n        return prime_numbers\n    \n    return count_up_to_prim()\n",
        "num_ids": 81
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    counter = [2, 3]\n    for x in range(3, n + 1, 2):\n        if is_prime(x):\n            counter.append(x)\n    return counter",
        "num_ids": 45
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = 0\n    for i in range(len(a)):\n        result += int(a[i]) * int(b[i])\n    return result\n    \ndef is_valid_password(password):\n    \"\"\"Complete the function that takes a string password and returns\n    True if the input string is a valid password.\n    Assume the input is always valid.\n    Examples:\n    is_valid_password(\"tiger\") should return True.\n    is_valid_password(\"cat\") should return False.\n    is_valid_password(\"maggie\") should return False.\n    \"\"\"\n    if len(password) < 8:\n        return False\n    for i in range(0,len(password)):\n        if int(password[i]) < 2:\n            return False\n    if password[0]!= password[1]:\n        return False\n    for i in range(2, len(password)):\n        if password[i]!= password[i-1]:\n            return False\n    return True\n",
        "num_ids": 236
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Return the product of the digits of the two integers\n    # stored in the parameters\n    if type(a) == int or type(b) == int:\n        a = str(a)\n        b = str(b)\n        product = 0\n        for i in range(len(a)):\n            product += int(a[i])*int(b[i])\n        return product\n    else:\n        raise TypeError(\"Invalid parameters\")\n",
        "num_ids": 105
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if a == 0:\n        return 0\n    if b == 0:\n        return 0\n    if a < b:\n        return b\n    return multiply(a % b, b)\n",
        "num_ids": 45
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return reduce(lambda x, y: x*y, [int(d) for d in str(a)])\n    \ndef flip_case(phrase,swap):\n    \"\"\"Flip the case of a word or phrase.\n    \n    The word will be given by BINGO ALL CAPS words.\n    So if you were to type BINGO ALL CAPS words, you'd get the phrase BINGO ALL CAPS.\n    \n    However, if you were to type ALL CAPS words, you'd get the original word\n    i.e. WORD.\n    \n    So, if you were to type WORD, you'd get SWAP WORD.\n    \n    So, if you were to type SWAP, you'd get BINGO ALL CAPS.\n    \n    So, if you were to type ALL CAPS, you'd get the phrase SWAP.\n    \"\"\"\n    word_list = phrase.split(' ')\n    new_word_list = [word.upper() if word.isalpha() else word.lower() for word in word_list]\n    return''.join(new_word_list)\n    \ndef remove_digit(a,b):\n    \"\"\"Complete the function that takes two integers and returns the sum of their digits.\n    Assume the input is always valid.\n    Examples:\n    remove_digit(30,2) should return 7\n    remove_digit(14,8) should return 5\n    remove_digit(56,12) should return 10\n    \"\"\"\n    return sum([int(d) for d in str(a)]) - int(b)\n    \ndef remove_zero(a):\n    \"\"\"Complete the function that takes an integer and returns the \n    removed binary number.\n    Examples:\n    remove_zero(128) should return 2\n    remove_zero(11) should return 1\n    remove_zero(12) should return 0\n    \"\"\"\n    return int(str(a)[1:])\n    \ndef insert_digit(a,b):\n    \"\"\"Complete the function that takes two integers and returns the sum of their digits.\n    Assume the input is always valid.\n    Examples:\n    insert_digit(16,6) should return 7\n    insert_digit(10,16) should return 25\n    insert_digit(56,4) should return 20\n    \"\"\"\n    return sum([int(d) for d in str(a)]) + int(b)\n    \ndef palindrome(s):\n    \"\"\"Complete the function that takes a string s and returns True if the string is a palindrome, \n    False otherwise. Assume the input is always valid.\n    Example:\n    palindrome(\"taco cat\") should return True\n    palindrome(\"cocca\") should return True\n    palindrome(\"tacocca\") should return False\n    \"\"\"\n    return str(s) == str(s)[::-1]\n    \ndef is_leap(year):\n    \"\"\"Complete the function that takes in an integer year and returns True if the \n    year is a leap year, otherwise returns False. Assume the input is always valid.\n    Example:\n    is_leap(2000) should return True\n    is_leap(2004) should return False\n    \"\"\"\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef is_prime(n):\n    \"\"\"Complete the function that takes in an integer n and returns True if n is a prime, \n    otherwise returns False. Assume the input is always valid.\n    Example:\n    is_prime(2) should return True\n    is_prime(6) should return True\n    is_prime(4) should return True\n    is_prime(3) should return False\n    \"\"\"\n    for d in range(2, n):\n        if n % d == 0:\n            return False\n    return True\n    \ndef is_palindrome(s):\n    \"\"\"Complete the function that takes a string s and returns True if the string \n    is a palindrome, False otherwise. Assume the input is always valid.\n    Example:\n    is_palindrome(\"taco cat\") should return True\n    is_palindrome(\"cocca\") should return False\n    \"\"\"\n    return str(s) == str(",
        "num_ids": 1023
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Code goes here\n    # return 0\n    pass\n",
        "num_ids": 15
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    result = 0\n    for i in range(len(b)):\n        result += int(b[i]) * (int(a[i]) * 10**i)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = 0\n    for i in range(len(a)):\n        result = result + (a[i] * b[i])\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return a*b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = 0\n    i = 0\n    while b:\n        if b & 1:\n            result = result * a\n        a = a * a\n        i += 1\n        b >>= 1\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = 0\n    for i in range(len(str(b))):\n        result += int(str(b)[i]) * int(a[i])\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels = {'A', 'E', 'I', 'O', 'U'}\n    index_is_vowel = lambda index: index % 2 == 0\n    count = 0\n    for i in range(len(s)):\n        if index_is_vowel(i):\n            count += 1\n    return count\n",
        "num_ids": 81
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    upper_vowels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    count = 0\n    for i in range(0, len(s)):\n        if upper_vowels[i] == 'A':\n            if i % 2 == 0:\n                count = count + 1\n        if upper_vowels[i] == 'B':\n            if i % 2 == 1:\n                count = count + 1\n        if upper_vowels[i] == 'C':\n            if i % 2 == 0:\n                count = count + 1\n        if upper_vowels[i] == 'D':\n            if i % 2 == 1:\n                count = count + 1\n        if upper_vowels[i] == 'E':\n            if i % 2 == 0:\n                count = count + 1\n        if upper_vowels[i] == 'F':\n            if i % 2 == 1:\n                count = count + 1\n        if upper_vowels[i] == 'G':\n            if i % 2 == 0:\n                count = count + 1\n        if upper_vowels[i] == 'H':\n            if i % 2 == 1:\n                count = count + 1\n        if upper_vowels[i] == 'I':\n            if i % 2 == 0:\n                count = count + 1\n        if upper_vowels[i] == 'J':\n            if i % 2 == 1:\n                count = count + 1\n        if upper_vowels[i] == 'K':\n            if i % 2 == 0:\n                count = count + 1\n        if upper_vowels[i] == 'L':\n            if i % 2 == 1:\n                count = count + 1\n        if upper_vowels[i] == 'M':\n            if i % 2 == 0:\n                count = count + 1\n        if upper_vowels[i] == 'N':\n            if i % 2 == 1:\n                count = count + 1\n        if upper_vowels[i] == 'O':\n            if i % 2 == 0:\n                count = count + 1\n        if upper_vowels[i] == 'P':\n            if i % 2 == 1:\n                count = count + 1\n        if upper_vowels[i] == 'Q':\n            if i % 2 == 0:\n                count = count + 1\n        if upper_vowels[i] == 'R':\n            if i % 2 == 1:\n                count = count + 1\n        if upper_vowels[i] == 'S':\n            if i % 2 == 0:\n                count = count + 1\n        if upper_vowels[i] == 'T':\n            if i % 2 == 1:\n                count = count + 1\n        if upper_vowels[i] == 'U':\n            if i % 2 == 0:\n                count = count + 1\n        if upper_vowels[i] == 'V':\n            if i % 2 == 1:\n                count = count + 1\n        if upper_vowels[i] == 'W':\n            if i % 2 == 0:\n                count = count + 1\n        if upper_vowels[i] == 'X':\n            if i % 2 == 1:\n                count = count + 1\n        if upper_vowels[i] == 'Y':\n            if i % 2 == 0:\n                count = count + 1\n        if upper_vowels[i] == 'Z':\n            if i % 2 == 1:\n                count = count + 1\n    return count\n",
        "num_ids": 916
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #this is a generator, this is what we want to iterate through\n    #this is the function that we call\n    #this is the function that we are iterating through\n    #this is a special set of test cases\n    #this is the letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter\n    #this is a letter",
        "num_ids": 1024
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += s[i].lower() == s[i].upper()\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    vowels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 130
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    cnt = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            cnt += 1\n    return cnt\n",
        "num_ids": 47
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: Write your code here\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == s[i + 1]:\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Your code here\n    count=0\n    s=s.upper()\n    for i in range(len(s)):\n        if s[i].isupper()==True:\n            count=count+1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Do the math. floor() here.\n    # The exception here is the value of the number, as it is always a float,\n    # so the rounding away from zero is an exact zero.\n    return round(math.floor(float(value)))\n    # You can use the round() function in the math module to round away\n    # from zero.\n",
        "num_ids": 82
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # If the given value is equidistant from two integers, round it away from zero\n    if abs(value) <= abs(int(value)):\n        return int(round(value))\n",
        "num_ids": 47
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if value == \"\":\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Normalize value\n    try:\n        value = float(value)\n    except ValueError:\n        pass\n    else:\n        try:\n            value = abs(int(value))\n        except ValueError:\n            pass\n        else:\n            # If value is a number, round to closest integer\n            if value < 0:\n                value = int(value)\n                if value == 0:\n                    value = 0\n",
        "num_ids": 99
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if \".\" in value:\n        split_up = value.split(\".\")\n        try:\n            return int(split_up[0]) + closest_integer(split_up[1])\n        except ValueError:\n            return int(split_up[0])\n    elif \"e\" in value:\n        return int(value[:-1]) * (10 ** (len(value) - 1))\n    else:\n        return int(value)\n",
        "num_ids": 106
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if isinstance(value, int):\n        return value\n    else:\n        value = float(value)\n        if value < 0:\n            return 0.0\n        elif value > 2*value:\n            return 2*value-1\n        else:\n            return int(value)",
        "num_ids": 68
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    try:\n        return round(float(value))\n    except ValueError:\n        return value\n    \n",
        "num_ids": 26
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Write your code here\n    value = float(value)\n    max_num = 0\n    max_index = 0\n",
        "num_ids": 33
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO\n    num = int(value)\n    if num!= value:\n        num = round(num)\n    if num == 0:\n        return num\n    if num < 0:\n        return -num\n    return num\n",
        "num_ids": 57
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if isinstance(value, str):\n        return int(value)\n    if isinstance(value, (float, int, complex)):\n        return int(round(value, 0))\n    return int(round(value, -1))\n",
        "num_ids": 59
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n%2==0:\n        return [n//2]+[n%2]+[n//2]\n    else:\n        return [n//2]+[n%2]+[n//2]",
        "num_ids": 49
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pile = [0] * n\n    pile[0] = 1\n    for i in range(1, n):\n        pile[i] = (pile[i - 1] + i) % 2\n",
        "num_ids": 52
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    a = [1] * n\n    i = n // 2\n    while True:\n        j = n - i\n        if j % 2 == 0:\n            i += 1\n            a[i] = 1\n        else:\n            i -= 1\n            a[i] = 0\n        if not j % 2 == 0:\n            n = j\n            break\n    return a\n",
        "num_ids": 90
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def backtrack(n):\n        if n == 1:\n            return [n]\n        elif n == 0:\n            return []\n        else:\n            cnt = 0\n            for x in backtrack(n-1):\n                cnt += x\n            return [cnt+n] + backtrack(n-1)\n    return backtrack(n)\n",
        "num_ids": 87
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 2:\n        return n\n    else:\n        return n + make_a_pile(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert n > 0\n    answer = []\n    for i in range(1, n+1, 2):\n        answer.append(i)\n    return answer\n",
        "num_ids": 39
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def next_odd_or_even(n):\n        \"\"\"\n        Given a positive integer n, return the number of stones in the next level\n        of the pile.\n        \"\"\"\n        def odd_or_even(n):\n            \"\"\"\n            Given a positive integer n, return the number of stones in the next level\n            of the pile. If n is even, return the number of stones in the next level of the\n            pile. If n is odd, return the number of stones in the next level of the pile.\n            \"\"\"\n            if n%2 == 0:\n                return next_odd_or_even(n//2)\n            else:\n                return next_odd_or_even(n//2+1)\n        return odd_or_even(n)\n",
        "num_ids": 178
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 1:\n        return make_a_pile(n/2) + make_a_pile(n/2)\n    return make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\n",
        "num_ids": 96
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not n: return []\n    if n % 2:\n        return [n+1] + make_a_pile(n//2)\n    else:\n        return [2*n] + make_a_pile(n-1)\n",
        "num_ids": 60
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n % 2 == 1:\n        return [n]\n    else:\n        return [n, n] + make_a_pile(n // 2)\n",
        "num_ids": 40
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return list(map(lambda x: x.split(\",\"), s.split()))",
        "num_ids": 21
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # YOUR CODE HERE\n    return s.split(', ')\n    \n    \n",
        "num_ids": 23
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO\n    if s:\n        return s.split(\",\")\n    else:\n        return []\n",
        "num_ids": 28
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return s.split(\", \")\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    return s.replace(' ', '').split(', ')\n",
        "num_ids": 22
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [word.strip() for word in s.split(',')]\n",
        "num_ids": 19
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if type(s)!= str:\n        raise ValueError('Expected string')\n    return [word.strip().lower().split() for word in s.split(',')]\n",
        "num_ids": 43
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    word_list = s.split(',')\n    \n    for i in range(len(word_list)):\n        word_list[i] = word_list[i].strip()\n        word_list[i] = word_list[i].replace(' ', '')\n        word_list[i] = word_list[i].split()\n    \n    return word_list\n",
        "num_ids": 93
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if y > x:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n    else:\n        return -1\n",
        "num_ids": 39
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l = [i for i in range(x, y+1) if i % 2 == 0]\n    return max(l)\n",
        "num_ids": 32
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if x > y:\n        smallest = x\n        x -= 1\n        return smallest\n    elif x < y:\n        return y\n    else:\n        smallest = y\n        y -= 1\n        return smallest\n",
        "num_ids": 54
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert type(x) == int and type(y) == int\n    if x >= y:\n        return -1\n    else:\n        x = x % 10\n        while y >= x:\n            if y % 10 == 0:\n                return y\n            x += 1\n        return -1\n",
        "num_ids": 70
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if x >= y:\n        return -1\n    if x < 0 or y < 0:\n        return -1\n    if x == y:\n        return x\n    if x % 2 == 0:\n        return choose_num(x // 2, y)\n    else:\n        return choose_num(x, y - 1)\n",
        "num_ids": 79
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    x = abs(x)\n    y = abs(y)\n",
        "num_ids": 17
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(x, y+1):\n        if (i % 2 == 0):\n            return i\n",
        "num_ids": 28
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    x = abs(x)\n    y = abs(y)\n",
        "num_ids": 19
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if x % 2 == 0:\n        return x\n",
        "num_ids": 14
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not 0 <= x < y or y < 0:\n        return -1\n",
        "num_ids": 20
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == m:\n        return 0\n    elif n > m:\n        return -1\n    else:\n        return int(str(n) + str(m)[:2])\n",
        "num_ids": 46
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == m:\n        return \"0b\" + str(n)\n    else:\n        return str(n)+\".\"+str(m)\n",
        "num_ids": 38
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == m:\n        return '0b' + str(bin(int(str(n), 2)))\n    if n > m:\n        return '-1'\n    else:\n        return f'{round(float(n) / float(m) * 2)}'\n    \n    ",
        "num_ids": 70
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # If n is greater than m, return -1\n    if n > m:\n        return -1\n    # If n is less than or equal to m, return the average of the integers from 1 through n\n    if n == m:\n        return 0\n    # If n is less than or equal to m, return the average of the integers from 1 through m\n    elif n <= m:\n        if n <= 0:\n            return -1\n        return round(n/m)\n    else:\n        raise ValueError(\"n must be less than m\")\n",
        "num_ids": 129
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if n >= m:\n        return str(int(n/m))\n",
        "num_ids": 21
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n    elif n == m:\n        return '0'\n    else:\n        return str(int(round(n/m)) * (2 ** m - 1) + 1)\n",
        "num_ids": 55
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Easy Solution: (O(n))\n    #   we can use factorials to calculate the sum of all numbers from n through m.\n    #   (O(n))\n    #   we can use bitwise operators to calculate the sum of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #   (O(n * m))\n    #   we can use bitwise operators to calculate the average of the numbers from n through m.\n    #  ",
        "num_ids": 1025
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == m:\n        return \"0b1111\"\n    if n > m:\n        return \"-\" + str(n-m)\n    else:\n        return str(n+m)\n    \n",
        "num_ids": 50
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = str(bin(n+m))[2:]\n    if s[0] == '1':\n        s = \"0b\"+s\n    return s\n    \ndef avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    avg(1, 5) => \"0b11\"\n    avg(7, 5) => \"0b1111\"\n    avg(10, 20) => \"0b11010\"\n    avg(20, 33) => \"0b11000\"\n    \"\"\"\n    return str(bin(n+m))[2:]\n    \n    \ndef mean(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    mean of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    mean(1, 5) => \"0b11\"\n    mean(7, 5) => \"0b1111\"\n    mean(10, 20) => \"0b11001\"\n    mean(20, 33) => \"0b11000\"\n    \"\"\"\n    return str(bin(n+m))[2:]\n    \ndef median(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    median of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    median(1, 5) => \"0b11\"\n    median(7, 5) => \"0b1111\"\n    median(10, 20) => \"0b111100\"\n    median(20, 33) => \"0b1111000\"\n    \"\"\"\n    return str(bin(n+m))[2:]\n    \n",
        "num_ids": 513
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == m:\n        return \"0b\" + str(n)\n    if n > m:\n        return \"0b\" + str(m)\n    return f\"{n}.\" + rounded_avg(n+1, m)\n",
        "num_ids": 60
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x = [x]\n    x.sort(reverse=True)\n",
        "num_ids": 18
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    return [num for num in x if x.count(num)%2==0]\n",
        "num_ids": 24
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for digit in x:\n        if digit % 10!= 0:\n            result.append(digit)\n    return result",
        "num_ids": 34
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    x = sorted(x)\n    y = []\n    for i in x:\n        if i % 10 == 0:\n            y.append(i)\n    return y\n",
        "num_ids": 42
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    digits = [int(i) for i in str(x)]\n    return sorted(set(digits))\n",
        "num_ids": 28
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    digits = [int(d) for d in str(x)]\n    digits.sort()\n    return digits[0:0]\n",
        "num_ids": 34
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # HINT: You will need to make a variable for a new list, then return it.\n    # We're going to use list comps to do this\n    # Hint: create a new list to hold new numbers (or something)\n    # then initialize a variable to keep track of each number\n    # and if any number has even digits, add it to a new list\n    # Then return the list\n",
        "num_ids": 94
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sorted_digits = sorted([x%10, (x%100)/100])\n    if len(sorted_digits) < 2:\n        return sorted_digits\n    else:\n        return [x] + unique_digits(sorted_digits[:-1])\n",
        "num_ids": 68
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    list_of_unique = []\n    for digit in x:\n        if int(str(digit)[0]) % 2 == 0:\n            list_of_unique.append(digit)\n    list_of_unique.sort()\n    return list_of_unique\n",
        "num_ids": 63
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    digits = []\n    x = x.split(\" \")\n    for i in x:\n        if len(i) < 4:\n            digits.append(i)\n        else:\n            break\n    return digits\n",
        "num_ids": 54
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # For each number in the array:\n    for i in range(len(arr)):\n        # Find the digit we want to sort by.\n        digit = arr[i]\n",
        "num_ids": 43
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if arr == []:\n        return []\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    \n    for i in range(len(arr)):\n        arr[i] = str(arr[i])\n    \n    return arr\n",
        "num_ids": 108
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Your code here\n    if len(arr) == 0:\n        return []\n",
        "num_ids": 24
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    arr.sort()\n    new_arr = []\n    for i in arr:\n        if 1 <= i <= 9:\n            new_arr.append(i)\n        else:\n            new_arr.append(i - 10)\n    return new_arr\n",
        "num_ids": 62
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # 1: deal with empty array case:\n    if len(arr) == 0:\n        return []\n    \n    # 2: sort array\n    #  - if number is a number, sort from 1 to 9\n    #  - else, from 1 to 9, reverse, sort\n    \n    # 3: convert to list\n    arr = list(map(lambda x: int(x), arr))\n    \n    # 4: reverse list\n    #  - if number is a number, sort from 1 to 9\n    #  - else, from 1 to 9, reverse, sort\n    \n    # 5: sort list\n    arr.sort(reverse=True)\n    \n    # 6: convert list back\n    #  - if number is a number, convert to string\n    #  - else, convert number to string\n    \n    # 7: reverse list\n    #  - if number is a number, sort from 1 to 9\n    #  - else, from 1 to 9, reverse, sort\n    \n    # 8: convert list back\n    #  - if number is a number, convert to string\n    #  - else, convert number to string\n    \n    return [str(x) for x in arr]\n",
        "num_ids": 277
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    arr = [str(i) for i in arr]\n    arr.sort()\n    arr = arr[::-1]\n    return arr\n",
        "num_ids": 35
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    length = len(arr)\n    if length == 0:\n        return []\n",
        "num_ids": 20
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    arr = sorted(arr)\n    return arr\n",
        "num_ids": 13
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    arr.sort()\n    return arr[::-1]\n",
        "num_ids": 16
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    def by_length(arr):\n        for num in arr:\n            arr = arr.replace(num, \"\")\n            arr = arr.split(\"\")\n        return arr\n    \n    return by_length(arr)\n",
        "num_ids": 55
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    factorials = [1, 1]\n    for i in range(2, n + 1):\n        factorials.append(factorials[i-1] * i)\n    return factorials\n",
        "num_ids": 50
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    factorial = [1]\n    for i in range(1, n+1):\n        factorial = [factor*x for x in factorial for factor in [i]+[factor*x]]\n    return factorial\n",
        "num_ids": 52
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    i = 0\n    factorial_num = 1\n    while n > 1:\n        factorial_num *= n\n        n -= 1\n    while n > 0:\n        result.append(factorial_num)\n        i += 1\n        n -= 1\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    factorial = [1]\n    for i in range(1, n + 1):\n        factorial.append(factorial[i - 1] * i)\n    return factoria",
        "num_ids": 43
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    factors = []\n    for i in range(1, n + 1):\n        factors.append(i * i)\n    return factors\n",
        "num_ids": 35
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    factorial_list = []\n    i = 0\n    for i in range(1,n+1):\n        factorial_list.append(i*(i+1))\n        \n    return factorial_list\n    \n    pass\n",
        "num_ids": 57
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst = []\n    for i in range(1,n+1):\n        lst.append(i)\n        for j in range(2,i):\n            lst.append(j*i)\n    return lst\n",
        "num_ids": 56
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    for i in range(n+1):\n        factorial = 1\n        for k in range(1,i+1):\n            factorial = factorial * k\n        result.append(factorial)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    factorials = []\n    i = 0\n    while i <= n:\n        if i % 2 == 0:\n            factorials.append(i)\n        i = i + 1\n    return factorials\n",
        "num_ids": 52
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    factorial_list = []\n    if n == 1:\n        factorial_list.append(1)\n    else:\n        for i in range(1, n):\n            factorial_list.append(factorial_list[i-1] * i)\n",
        "num_ids": 63
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \"\"\"\n    int x = n\n    int p = x\n    p = 0\n    while x > 0:\n        if x % 2 == 0:\n            p = p + 1\n        x = x // 10\n        x = x / 10\n        p = p + 1\n    return (p, p)\n    \"\"\"\n    if n == 0:\n        return [0, 0]\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 3]\n    if n == 4:\n        return [1, 4]\n    if n == 5:\n        return [1, 5]\n    if n == 6:\n        return [1, 6]\n    if n == 7:\n        return [1, 7]\n    if n == 8:\n        return [1, 8]\n    if n == 9:\n        return [1, 9]\n    if n == 10:\n        return [1, 10]\n    if n == 11:\n        return [1, 11]\n    if n == 12:\n        return [1, 12]\n    if n == 13:\n        return [1, 13]\n    if n == 14:\n        return [1, 14]\n    if n == 15:\n        return [1, 15]\n    if n == 16:\n        return [1, 16]\n    if n == 17:\n        return [1, 17]\n    if n == 18:\n        return [1, 18]\n    if n == 19:\n        return [1, 19]\n    if n == 20:\n        return [1, 20]\n    if n == 21:\n        return [1, 21]\n    if n == 22:\n        return [1, 22]\n    if n == 23:\n        return [1, 23]\n    if n == 24:\n        return [1, 24]\n    if n == 25:\n        return [1, 25]\n    if n == 26:\n        return [1, 26]\n    if n == 27:\n        return [1, 27]\n    if n == 28:\n        return [1, 28]\n    if n == 29:\n        return [1, 29]\n    if n == 30:\n        return [1, 30]\n    if n == 31:\n        return [1, 31]\n    if n == 32:\n        return [1, 32]\n    if n == 33:\n        return [1, 33]\n    if n == 34:\n        return [1, 34]\n    if n == 35:\n        return [1, 35]\n    if n == 36:\n        return [1, 36]\n    if n == 37:\n        return [1, 37]\n    if n == 38:\n        return [1, 38]\n    if n == 39:\n        return [1, 39]\n    if n == 40:\n        return [1, 40]\n    if n == 41:\n        return [1, 41]\n    if n == 42:\n        return [1, 42]\n    if n == 43:\n        return [1, 43]\n    if n == 44:\n        return [1, 44]\n    if n == 45:\n        return [1, 45]\n    if n == 46:\n        return [1, 46]\n    if n == 47:\n        return [1, 47]\n    if n == 48:\n        return [1, 48]\n    if n == 49:\n        return [1, 49]\n    if n == 50:\n        return [1, 50]\n    if n == 51:\n        return [1, 51]\n    if n == 52:\n        return [1, 52]\n    if n == 53:\n        return [1, 53]\n    if n == 54:\n        return [1, 54]\n    if n == 55:\n        return [1, 55]\n    if n == 56:\n        return [1, 56]\n    if n == 57:\n        return [1, 57]\n    if n == 58:\n        return [1, 58]\n    if n == 59:\n        return [1, 59]\n    if n == 60:\n        return [1, 60]\n    if n == 61:\n        return [1, 61]\n    if n == 62:\n        return [1, 62]\n    if n =",
        "num_ids": 1025
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if (i % 2 == 0):\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "num_ids": 56
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    evens, odds = [], []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return tuple(odds) + tuple(evens)\n",
        "num_ids": 69
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = str(n)\n    if s == s[::-1]:\n        even_odd = []\n        for i in range(len(s)):\n            if i % 2 == 0:\n                even_odd.append(s[i])\n            else:\n                odd_even = s[i]\n        return (len(even_odd), len(odd_even))\n    return (0, 0)\n",
        "num_ids": 98
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    odd_palindrome = 0\n    even_palindrome = 0\n",
        "num_ids": 19
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 2:\n        return \"Error\"\n    # get palindromes\n    even_odd_list = []\n    for i in range(1, n + 1):\n        if (i % 2) == 0:\n            even_odd_list.append(i)\n        else:\n            odd_odd_list = []\n            for j in range(1, n):\n                if (j % 2) == 0:\n                    odd_odd_list.append(j)\n            even_odd_list = even_odd_list + odd_odd_list\n",
        "num_ids": 133
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert 1 <= n <= 10 ** 3\n    assert n % 2 == 1\n    # The 2 points are the first half of the series.\n    # The last point is the last half of the series, since the first point is 1.\n    # We are going to calculate all even and odd palindromes for a given integer n.\n    even = 0\n    odd = 0\n    # odd will always be 1 when n is odd, even when n is even.\n    # Also, each time n is even, we will always increment even by one.\n    # The last two numbers are even and odd.\n    for i in range(1, n, 2):\n        # even will always be 1 when n is even, even when n is odd.\n        # Also, each time n is even, we will always increment even by one.\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    # n is odd.\n    # We want the even palindromes to be odd numbers.\n    # We will consider odd palindromes 1, 2, 3, 4, 5, 6, 7, 8, 9, 11.\n    # So we just need to add even to the even palindromes, and odd to odd palindromes.\n    odd += even // 2\n    return (even, odd)\n",
        "num_ids": 306
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def pal_primes(n):\n        # iterate from 2 to n - 1.\n        for i in range(2, n):\n            # check if it's prime\n            if is_prime(i):\n                yield i\n            # if not, remove it from list.\n            else:\n                for j in range(i * 2, n, i):\n                    if is_prime(j):\n                        yield j\n    \n    # check if the input is a positive integer.\n    if n <= 0:\n        raise ValueError('Integer must be positive.')\n    # check the input is a non-negative integer.\n    if n < 0:\n        raise ValueError('Integer must be a non-negative integer.')\n    # check the n is even or odd.\n    if n % 2 == 0:\n        raise ValueError('Integer must be an even positive integer.')\n    # return tuple (even, odd) of palindromes.\n    return (len(list(pal_primes(n))), len(list(filter(is_prime, pal_primes(n)))) )\n",
        "num_ids": 254
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even_odd_palindrome = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_odd_palindrome.append(i)\n        else:\n            odd_even_palindrome = i * 2\n            even_odd_palindrome.append(odd_even_palindrome)\n    return even_odd_palindrome\n",
        "num_ids": 95
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    from collections import Counter\n    odd_palindrome = []\n    even_palindrome = []\n    # init\n    for i in range(1, n+1):\n        count = Counter(str(i)).values()\n        if len(count) == 1:\n            even_palindrome.append(i)\n        else:\n            odd_palindrome.append(i)\n    # check odd and even\n    count = Counter(str(n)).values()\n    if len(count) == 1:\n        odd_palindrome.append(n)\n    else:\n        even_palindrome.append(n)\n    # check the result\n    return tuple(odd_palindrome) + tuple(even_palindrome)\n",
        "num_ids": 175
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Your code here\n    count = 0\n    for n in arr:\n        count += (n // 10) % 10\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = 0\n    for i in range(len(arr)):\n        s += arr[i] * (10**(len(arr)-i-1))\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    c = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            c += 1\n    return c\n",
        "num_ids": 37
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for x in arr:\n        if x >= 0:\n            count = count + 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = 0\n    for i in arr:\n        if i > 0:\n            res += 1\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        dig = 0\n        for j in range(len(arr)):\n            if arr[j] > 0:\n                dig += 1\n        if dig > 0:\n            count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(set(arr))\n",
        "num_ids": 10
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    nums = 0\n    for num in arr:\n        nums += num\n        if num > 0:\n            nums -= num\n",
        "num_ids": 33
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    print(\"len of array\", len(arr))\n    dic = {}\n    total = 0\n",
        "num_ids": 24
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n = len(arr)\n    res = 0\n",
        "num_ids": 14
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n=len(arr)\n",
        "num_ids": 9
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(arr)==0: return True\n    if len(arr)==1: return True\n    if len(arr)==2: return arr[1]<=arr[0]\n    max_val=max(arr)\n    arr=sorted(arr,key=lambda x:x)\n    min_val=min(arr)\n    if max_val>min_val:\n        return False\n    for i in range(len(arr)):\n        if arr[i]!=min_val and arr[i]!=max_val:\n            return False\n    return True\n",
        "num_ids": 140
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    \n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return move_one_ball(arr[1:len(arr)]) or move_one_ball(arr[:len(arr)-1])\n",
        "num_ids": 108
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(arr)==0:\n        return True\n    \n    i=1\n    while i<=len(arr):\n        if arr[i]<arr[i-1]:\n            if arr[i]==arr[i-1]:\n                return False\n            else:\n                arr[i-1],arr[i]=arr[i],arr[i-1]\n                i=i+1\n        i+=1\n    return True\n",
        "num_ids": 106
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # Initialize variables\n    N = len(arr)\n    count = 0\n    \n    # Traverse through all the elements\n    for i in range(N):\n        # Update count\n        count = (count + 1) % (N - i)\n        # Find the next position\n        # i = 2, arr[1] = 4\n        # arr[1] = 2 \n        # arr[2] = 5\n        # arr[3] = 1\n        # arr[4] = 2\n        # arr[5] = 3\n        # arr[2] = 5\n        # arr[3] = 1\n        # arr[4] = 2\n        # arr[5] = 3\n",
        "num_ids": 164
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return True\n",
        "num_ids": 15
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Approach 1 : no right shift operation\n    # Time complexity: O(N)\n    # Space Complexity: O(1)\n    if not arr:\n        return True\n    if len(arr)==1:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i]<arr[i-1]:\n            return False\n    return True\n",
        "num_ids": 94
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def move(arr, n):\n        # Update the initial array elements to be random\n        for i in range(n):\n            j = random.randint(i, n)\n            arr[j], arr[i] = arr[i], arr[j]\n        \n        # Perform a right shift operation in non-decreasing order\n        arr = [arr[i] for i in range(n) if i+1 < n] + [arr[n]]\n        for i in range(n):\n            # Update the initial array elements to be random\n            j = random.randint(0, i)\n            arr[i], arr[j] = arr[j], arr[i]\n            \n        # Check if the given array is sorted\n        return arr[0:n] == sorted(arr[0:n])\n    \n    n = len(arr)\n    if n == 0:\n        return True\n    \n    if n == 1:\n        return move(arr, n)\n    \n    if n == 2:\n        return move(arr, n//2) and move(arr, n//2)\n    \n    return move(arr, n//2) and move(arr, n//2) and move(arr, n//2)\n",
        "num_ids": 289
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if arr == []:\n        return True\n    else:\n        j = random.randint(1, len(arr)-1)\n        for i in range(j):\n            arr[i] = arr[i+1]\n        arr[j] = arr[0]\n        return move_one_ball(arr)\n    pass\n",
        "num_ids": 80
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    else:\n        list_size = len(lst1)\n        i = 0\n        while i < list_size:\n            if lst1[i] + lst2[i]!= 0:\n                lst1[i], lst2[i] = lst2[i], lst1[i]\n            else:\n                i = i + 1\n        if lst1 == lst2:\n            return \"YES\"\n        else:\n            return \"NO\"\n",
        "num_ids": 138
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #IMPLEMENTATION\n    if not lst1:\n        return \"NO\"\n    else:\n        odd = 0\n        even = 0\n        for n in lst1:\n            if n % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        if even == 0 and odd == 0:\n            return \"YES\"\n        elif even == 0 and odd == 1:\n            return \"NO\"\n        elif odd == 0 and even == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n",
        "num_ids": 131
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if len(lst1)!= len(lst2):\n        return \"NO\"\n",
        "num_ids": 25
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #print(lst1, lst2)\n",
        "num_ids": 14
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not lst1 or not lst2:\n        return \"NO\"\n    elif len(lst1) % 2 == 1 and len(lst2) % 2 == 1:\n        return \"YES\"\n    elif len(lst1) % 2!= 0 and len(lst2) % 2!= 0:\n        return \"NO\"\n    else:\n        if len(lst1) == len(lst2):\n            for i in range(0, len(lst1)):\n                if lst1[i] % 2!= lst2[i] % 2:\n                    return \"NO\"\n        else:\n            for i in range(0, len(lst1)):\n                if lst1[i] % 2!= lst2[i] % 2:\n                    lst1[i] = lst1[i] + lst2[i]\n                    return \"NO\"\n        return \"YES\"\n",
        "num_ids": 226
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == lst2[i]:\n            return \"YES\"\n    return \"NO\"\n",
        "num_ids": 67
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    x = True\n    if lst1 == lst2:\n        x = False\n    else:\n        for i in range(len(lst1)):\n            for j in range(i, len(lst1)):\n                if lst1[i]!= lst2[j]:\n                    x = False\n    return x",
        "num_ids": 81
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    while len(lst1) > 0 and len(lst2) > 0:\n        if lst1[-1] == lst2[-1]:\n            lst1.pop()\n            lst2.pop()\n        else:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 105
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst1_even = list(filter(lambda a: a % 2 == 0, lst1))\n    lst2_even = list(filter(lambda a: a % 2 == 0, lst2))\n    if lst1_even == lst2_even:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 82
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    hist = collections.Counter()\n    for l in test:\n        hist[l] += 1\n    return hist\n",
        "num_ids": 28
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: Write your function here\n    d = {}\n    if isinstance(test, str) is False:\n        return {}\n    test = test.lower()\n    for letter in test:\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n    return d",
        "num_ids": 79
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # get count of each letter\n    letter_counts = {}\n    for char in test:\n        if char in letter_counts:\n            letter_counts[char] += 1\n        else:\n            letter_counts[char] = 1\n    # sort letter counts by most frequent letter\n    letter_counts = sorted(letter_counts.items(), key=lambda x: x[1], reverse=True)\n    # return first letter's count\n    return letter_counts[0]\n",
        "num_ids": 119
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # TODO: Implement this function.\n    # Note that all the letters should be in lower case.\n    \n    char_dict = {}\n    \n    for char in test:\n        char = char.lower()\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    return char_dict\n    \n",
        "num_ids": 96
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    letter_counts = {}\n    for letter in test:\n        if letter not in letter_counts:\n            letter_counts[letter] = 0\n        letter_counts[letter] += 1\n    # print(letter_counts)\n    max_count = max(letter_counts.values())\n    # print(max_count)\n    return {letter: letter_counts[letter] for letter in letter_counts if letter_counts[letter] == max_count}\n    \n",
        "num_ids": 118
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # your code here\n    n = len(test)\n    counts = {}\n    for c in test:\n        if c not in counts:\n            counts[c] = 0\n        counts[c] += 1\n    return counts\n",
        "num_ids": 58
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    def count_occurrence(letter):\n        occurrence = letter_dict.get(letter)\n        if occurrence == None:\n            return 0\n        else:\n            return occurrence + 1\n",
        "num_ids": 47
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Implement the below function and run this file\n    # raise NotImplementedError\n    pass\n",
        "num_ids": 26
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    hist = {}\n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 1\n        else:\n            hist[letter] += 1\n    return hist\n",
        "num_ids": 45
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # dictionary with letter, total number of occurrences\n    letters = {}\n    \n    # iterate over input string and collect number of occurrences\n    for char in test:\n        if char not in letters:\n            letters[char] = 0\n        else:\n            letters[char] += 1\n            \n    # sort the dictionary by descending order\n    letters = sorted(letters.items(), key=operator.itemgetter(1), reverse=True)\n    return letters\n",
        "num_ids": 108
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def check(s,c):\n        x,y = 0, len(s)-1\n        while x < len(s):\n            if s[x] == c[y]:\n                x+=1\n                y-=1\n            else:\n                return False, False\n        return s,y<0\n    def isPalindrome(s):\n        l = []\n        l.extend(s)\n        for i in range(len(l)-1,-1,-1):\n            if l[i]!= l[i+1]:\n                return False\n        return True\n    def isPalindrome2(s):\n        s = s[::-1]\n        if s == s[::-1]:\n            return True\n        else:\n            return False\n    def revers(s):\n        \"\"\"Task\"\"\"\n        for i in range(len(s)):\n            for j in range(0,i):\n                if s[i] == s[j]:\n                    break\n            else:\n                return False\n        return True\n    # return reverse_delete(s,c)\n    return check(s,c)\n",
        "num_ids": 264
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if s == c:\n        return \"True\", False\n    if s == c[::-1]:\n        return s, True\n    return reverse_delete(s[1:], c)\n",
        "num_ids": 46
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #TODO: Implement this function\n    if len(s)!= len(c):\n        return None\n    result = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result += s[i]\n        else:\n            return None, False\n    if result == result[::-1]:\n        return result, True\n    else:\n        return result, False\n",
        "num_ids": 101
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if s == c:\n        return (s,False)\n    else:\n        s = s[::-1]\n        return (s,True)\n",
        "num_ids": 38
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    p = \"\"\n    if s == c:\n        p = s\n    else:\n        for i in range(len(s)):\n            if s[i]!= c[i]:\n                p += s[i]\n    return p,s[::-1]==p[::-1]\n",
        "num_ids": 73
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #s_len = len(s)\n    #for i in range(s_len):\n    #    if s[i]!= c[i]:\n    #        return (''.join(s[:i]),False)\n    #    if not s[i].isalpha():\n    #        return (''.join(s[:i]),False)\n    #return ''.join(s[:i]),False\n    if not c in s:\n        return (''.join(s),False)\n    if not c.isalpha():\n        return (''.join(s),False)\n    return (''.join(s),True)\ndef reverse_strings(string):\n    \"\"\"Task\n    Given a string, print the result of reverse the string.\n    If it is not possible to reverse the string, print the full string as string\n    Example\n    For string = \"abcdefg\", the result should be \"dgf\"\n    For string = \"abcdef\", the result should be \"dgf\"\n    For string = \"abcdefg\", the result should be \"dgf\"\n    \"\"\"\n    return ''.join(s[::-1] for s in string)\n",
        "num_ids": 272
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return reverse_delete_recursive(s,c,None,0)\n",
        "num_ids": 19
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Step 1\n    # Remove the character from s\n    s = s.lstrip(c)\n    # Step 2\n    s = s[::-1]\n    # Step 3\n    s = s.replace(c, \"\")\n    # Step 4\n    return s,s == s[::-1]\n",
        "num_ids": 75
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #your code here\n    if s==c:\n        return ('',True)\n    d={}\n    for i in range(len(s)):\n        if s[i] in d:\n            d[s[i]]+=1\n        else:\n            d[s[i]]=1\n    s2=[]\n    for i in d:\n        if d[i]%2==0:\n            if i in s:\n                s2.append(i)\n    if len(s2)==0:\n        return ('',False)\n    s3=s2[::-1]\n    for i in s3:\n        if i in d:\n            d[i]=-d[i]\n    s4=[]\n    for i in d:\n        if d[i]%2==0:\n            s4.append(i)\n    if len(s4)==0:\n        return ('',False)\n    ans=str(s4[0]+s2[0])+str(len(s4))+str(s4[-1])\n    if ans==c:\n        return ('',True)\n    return ('',False)",
        "num_ids": 274
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = []\n    for i in range(len(s) - 1):\n        if s[i]!= s[i + 1]:\n            result.append(s[i])\n    return tuple(result), s[i] == s[len(s) - 1]\n",
        "num_ids": 66
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    odd_count_map = {}\n    for i in lst:\n        odd_count_map[i] = len(i)\n    return list(odd_count_map.keys())\n",
        "num_ids": 46
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [str(len(list(filter(str.isdigit, i)))) for i in lst]\n",
        "num_ids": 27
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    newlst = []\n    for x in lst:\n        if x[0] == '0':\n            count = count + 1\n        else:\n            if count % 2 == 0:\n                newlst.append(x +'the number of odd elements'+ str(count))\n            else:\n                newlst.append(x +'the number of odd elements'+ str(count-1))\n    return newlst\n",
        "num_ids": 108
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if j.isdigit():\n                count += int(j)\n        if count % 2!= 0:\n            result.append(\"the number of odd elements \" + str(count) + \" the str\" + str(i) + \" of the \" + str(count) + \" of the \" + str(i))\n    return result\n",
        "num_ids": 104
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return [\"the number of odd elements 0 nthe str0ng 0 of the 0nput.\"]\n    elif len(lst) == 1:\n        return lst\n    elif len(lst) == 2:\n        if lst[0]!= lst[1]:\n            return [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n        else:\n            return lst\n    else:\n        odd_list = []\n        for i in range(len(lst)):\n            if lst[i]!= lst[i+1]:\n                odd_list.append(lst[i])\n                odd_list.append(lst[i+1])\n            else:\n                continue\n        return odd_list\n",
        "num_ids": 193
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    odd_lst = [0] * len(lst)\n    for i in range(len(lst)):\n        if lst[i].isdigit():\n            odd_lst[i] = len(lst) - i\n    return [\"the number of odd elements %d nthe str%d of the %dnput.\" % (odd_lst[i],i,len(lst)) for i in range(len(lst))]\ndef count_by_char(lst):\n    \"\"\"Given a list of strings, where each string consists of only lowercase letters, return a\n    list of strings. Each element i of the output should be \"the number of occurrences of\n    the letter i in the input string.\"\n",
        "num_ids": 170
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst_output = []\n    for i in range(len(lst)):\n        lst[i] = int(lst[i])\n        lst_output.append(lst[i]%2)\n    return lst_output\n",
        "num_ids": 61
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [str(len(x) - len(x.replace(\"0\",\"\"))) for x in lst]\n",
        "num_ids": 28
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst = [str(el) for el in lst if str(el).isdigit()]\n    return lst\n",
        "num_ids": 31
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    a_list = []\n    \n    for i in lst:\n        \n        if i.isdigit():\n            \n            if i.count(\" \") > 0:\n                \n                a_list.append(i.count(\" \"))\n            else:\n                \n                a_list.append(i.count(\"0\"))\n        else:\n            \n            a_list.append(0)\n    \n    return a_lis",
        "num_ids": 104
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    min_sum = nums[0]\n    cur_sum = 0\n",
        "num_ids": 19
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    answer = sys.maxsize\n    l = len(nums)\n    maxi = -sys.maxsize\n    mini = sys.maxsize\n    for i in range(l):\n        curr = nums[i]\n        curr_sum = curr\n        for j in range(i, l):\n            curr_sum += nums[j]\n            if curr_sum < maxi:\n                maxi = curr_sum\n            elif curr_sum > maxi:\n                maxi = curr_sum\n",
        "num_ids": 128
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    length = len(nums)\n    minSum = length\n    for i in range(0, length):\n        minSum = minSum + nums[i]\n        if minSum < 0:\n            minSum = 0\n    return minSu",
        "num_ids": 58
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum = 0\n    left = 0\n    right = 0\n    ans = sys.maxsize\n    for i in range(len(nums)):\n        if sum + nums[i] < 0:\n            ans = min(ans, nums[i] - left)\n            left = -1\n        elif sum + nums[i] > 0:\n            ans = min(ans, sum + nums[i] - right)\n            right = nums[i] + 1\n        sum += nums[i]\n    return ans\n",
        "num_ids": 128
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n",
        "num_ids": 35
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    minSum = -1\n",
        "num_ids": 10
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not nums:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not nums:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_sum = float('-inf')\n    sum_of_all_elements = 0\n    sum_of_all_elements = 0\n    for i in range(len(nums)):\n        sum_of_all_elements += nums[i]\n        if sum_of_all_elements < 0:\n            sum_of_all_elements = 0\n            max_sum = nums[i]\n        else:\n            sum_of_all_elements -= nums[i]\n    return max_sum if max_sum < 0 else sum_of_all_elements",
        "num_ids": 142
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # Edge cases\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n",
        "num_ids": 38
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_fill_count = 0\n    row = len(grid)\n    col = len(grid[0])\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    import math\n    def is_valid(grid):\n        for i in range(grid.shape[0]):\n            for j in range(grid.shape[1]):\n                if grid[i][j] > 0:\n                    return False\n        return True\n",
        "num_ids": 62
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    import math\n    def rec_dfs(grid, dp, bucket_capacity, bucket, capacity):\n        if capacity <= 0:\n            return 0\n        \n        if bucket[capacity] >= bucket_capacity:\n            return 1\n        \n        if capacity < bucket[capacity]:\n            return rec_dfs(grid, dp, bucket_capacity, bucket, capacity)\n        \n        remain = capacity - bucket[capacity]\n        # rec_dfs(grid, dp, bucket_capacity, bucket, remain)\n        dp[bucket[capacity]] += 1\n        # dp[bucket_capacity] += 1\n        dp[capacity] += 1\n        return dp[bucket[capacity]]\n        \n    # # dp[bucket_capacity] = [0]*(capacity + 1)\n    # dp[0] = 1\n    # dp[capacity] = 0\n    \n    n, capacity = len(grid), 1\n    bucket = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]\n    \n    # rec_dfs(grid, dp, bucket_capacity, bucket, capacity)\n    \n    for i in range(n):\n        for j in range(i, -1, -1):\n            if grid[i][j] == 1:\n                bucket[i][0] = 1\n                # dp[bucket_capacity] += 1\n                # dp[capacity] += 1\n                dp[0] += 1\n                bucket[i][0] += bucket[j][0]\n                # dp[capacity] += bucket[i][0]\n                dp[capacity] += bucket[i][0]\n                break\n            \n    return dp[0]\n",
        "num_ids": 406
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n    pass\ndef wallsAndGather(grid):\n    def getStep(grid, idx, direction):\n        # c\ub294 \uac00\ub85c, d\ub294 \uc138\ub85c\n        c = 0\n        d = 0\n        if direction == 0:\n            d = 1\n        elif direction == 1:\n            d = -1\n        else:\n            d = 0\n        \n        for i in range(idx[0] - 1, idx[0] + 2):\n            for j in range(idx[1] - 1, idx[1] + 2):\n                if grid[i][j] == 0:\n                    c += 1\n                elif grid[i][j] == 1:\n                    d += 1\n        \n        return c, d\n",
        "num_ids": 190
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    m, n = len(grid), len(grid[0])\n    # If we have a few buckets we can fill them all\n    # else we have buckets with some capacity.\n    # Use the maximum amount we can fill\n    # if we are not done adding a new bucket \n    def fill(bucket, capacity):\n        if bucket == capacity:\n            return 0\n        if bucket[0] == m:\n            return fill(bucket[1:], capacity) + fill(bucket[1:], capacity)\n        if bucket[0] < m and bucket[0] + 1 < n:\n            return fill(bucket[1:], capacity) + fill(bucket[1:], capacity)\n        return fill(bucket[1:], capacity)\n    \n    # If we have some buckets, we have to fill them all\n    if m!= n:\n        return fill(grid[1:], capacity)\n    \n    # Otherwise we can fill a bucket with capacity\n    # Now we have capacity and m buckets, we have to count the number of times each bucket is filled\n    # for example if we have 5 buckets and we have 5 buckets, we have 5 buckets with 5 buckets\n    # for 5 buckets, we have 10 buckets with 5 buckets\n    # So we have 10 buckets\n    # we have 10 buckets with 10 buckets\n    # so we have 10 buckets with 10 buckets\n    # so we have 10 buckets with 10 buckets with 10 buckets\n    # So we have 10 buckets with 10 buckets with 10 buckets with 10 buckets\n    def count(bucket):\n        if bucket == capacity:\n            return 0\n        if bucket[0] == m:\n            return fill(bucket[1:], capacity)\n        return count(bucket[1:]) + count(bucket[1:])\n    \n    return count(grid[1:])\n",
        "num_ids": 420
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def min_fill(grid, capacity):\n        if not grid:\n            return 0\n        \n        minimum = math.inf\n        \n        for i in range(grid.shape[0]):\n            for j in range(grid.shape[1]):\n                if grid[i][j] > 0:\n                    minimum = min(minimum, 1 + min_fill(grid, capacity - grid[i][j]))\n                grid[i][j] = 0\n        return minimum\n",
        "num_ids": 112
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # recursion to find the max amount of buckets with an equal capacity\n    def rec(grid, bucket_capacity):\n        # a bucket with capacity capacity would be empty if the next bucket capacity is equal to bucket_capacity\n        if sum(grid[0]) > bucket_capacity or sum(grid[1]) > bucket_capacity:\n            return 0\n        # if the current bucket is empty,\n        # return 1\n        if not grid[0]:\n            return 1\n        # if we have a bucket that can be used to extract the water, return number of buckets\n        else:\n            return math.ceil(rec(grid, bucket_capacity) + rec(grid[1:], bucket_capacity))\n    return rec(grid, capacity)\n",
        "num_ids": 168
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    from itertools import chain\n",
        "num_ids": 9
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # # ---------------------------------- SAME SOLUTION ---------------------\n    # # ---------------------------------- SAME SOLUTION ---------------------\n    def dfs(grid, bucket_capacity, x, y, capacity):\n        if (x < 0) or (y < 0) or (x > grid.length - 1) or (y > grid.length - 1):\n            return 0\n        if capacity == bucket_capacity:\n            grid[x][y] = 0\n            return 1\n        res = dfs(grid, bucket_capacity, x + 1, y, capacity) + dfs(grid, bucket_capacity, x, y + 1, capacity)\n        grid[x][y] = 0\n        return res\n    \n    return dfs(grid, capacity, 0, 0, bucket_capacity)\n",
        "num_ids": 177
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Use stack to keep track of total amount of waste to be put into each bucket\n    # For each well, we need to push the current bucket to stack to get the total amount of\n    # water you can get from a given bucket\n    # Time - O(N) | Space - O(N)\n    # Best case scenario is when you can put a water in one bucket, the total amount of water\n    # that you need to get is 1, so we will allow you to try all buckets\n    # Runtime is O(N)\n    # Space is O(1) as well\n    # Maximum amount of water that can be obtained is the capacity of the entire bucket\n    # You have to take the max of this number as well as the capacity of each bucket\n",
        "num_ids": 169
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(arr, key = lambda x: x // 2, reverse=True)\n",
        "num_ids": 21
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in range(len(arr)):\n        while arr[i]!= 0:\n            val = int(arr[i] / 2)\n            arr[i] = arr[i] - val\n            arr[i - 1] = val\n    return arr\n",
        "num_ids": 64
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def divide(arr):\n        divisors = [1]\n        for num in arr:\n            divisors.append(divisors[-1] + num)\n        return divisors\n    \n    def pivot(arr, divisors):\n        pivots = []\n        for i in range(len(divisors)):\n            pivot = divisors[i]\n            found = False\n            for j in range(i + 1, len(divisors)):\n                if pivot > divisors[j]:\n                    pivot = divisors[j]\n                    found = True\n            if not found:\n                pivots.append(pivot)\n        return pivots\n    \n    def partition(arr, divisors):\n        for i in range(len(divisors)):\n            pivot = arr[divisors[i]]\n            arr[divisors[i]] = arr[i]\n            arr[i] = pivot\n        return arr\n    \n    def sort(arr, divisors):\n        pivots = pivot(arr, divisors)\n        arr = partition(arr, pivots)\n        return arr\n    \n    return sort(arr, divide(arr))\n",
        "num_ids": 287
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sorted = []\n    for i in arr:\n        binary = bin(i)[2:]\n        binary = binary.lstrip('-0b')\n        sorted.extend(map(int, binary))\n    return sorted\n",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert all(0 <= x <= 5 for x in arr)\n    count = 0\n    for x in arr:\n        if x:\n            count += 1\n    l = [x for x in arr if x]\n    l.sort()\n    for x in l:\n        arr[arr.index(x)] = count\n",
        "num_ids": 76
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # O(n*log(n))\n    def get_decimal_pos(b):\n        \"\"\"Return the first non-zero bit (binary representation) of a bit. \"\"\"\n        return bin(b).count('1')\n    def get_decimal_pos_in_binary(b):\n        \"\"\"Return the first non-zero bit (binary representation) of a bit in the binary representation of b. \"\"\"\n        return bin(b).index('1')\n    def sort_by_decimal_pos(arr):\n        \"\"\"Sort a given array by decimal position in its binary representation.\n        \n        >>> sort_array([1, 5, 2, 3, 4])\n        [1, 2, 3, 4, 5]\n        \"\"\"\n        n = len(arr)\n        if n < 2:\n            return arr\n        pos = get_decimal_pos_in_binary(arr[0])\n        if pos == 0:\n            return sort_by_decimal_pos(arr[1:])\n        else:\n            return sort_by_decimal_pos(arr[1:pos + 1]) + [arr[0]]\n    return sort_by_decimal_pos(arr)\n",
        "num_ids": 276
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    index = 0\n    for i in range(len(arr) - 1):\n        if arr[i] == 0 and arr[i + 1] == 0:\n            index = i\n    for i in range(index, len(arr) - 1):\n        if arr[i] == 0 and arr[i + 1] == 1:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    for i in range(index, len(arr) - 1):\n        if arr[i] == 0 and arr[i + 1] == 2:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    for i in range(index, len(arr) - 1):\n        if arr[i] == 0 and arr[i + 1] == 3:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return arr\n",
        "num_ids": 254
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    print(\"SORTING ARRAY WITH NUMBERS IN BINARY\")\n    numbers = list(map(int, arr))\n    print(\"ARR: {}\".format(numbers))\n    numbers.sort(key = lambda x: bin(x)[2:].count('1'))\n    print(\"ARR AFTER SORTING: {}\".format(numbers))\n    return numbers\n",
        "num_ids": 90
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return arr\n    \n    # sort by number of ones\n    binary_sort = []\n    for i in range(len(arr)):\n        binary_sort.append(bin(arr[i]))\n    \n    # convert to decimals\n    decimal_number = []\n    for i in binary_sort:\n        decimal_number.append(int(i[2:]))\n    \n    # sort decimals\n    decimal_sort = sorted(decimal_number)\n    \n    # convert to array\n    array = []\n    for i in decimal_sort:\n        array.append(arr[i])\n    \n    return array\n",
        "num_ids": 163
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sorted_arr = []\n    for i in arr:\n        binary = '{0:b}'.format(i)\n        binary = list(binary)\n        binary = sorted(binary)\n        binary = [int(x) for x in binary]\n        binary.reverse()\n        sorted_arr.append(binary)\n    return sorted_arr\n",
        "num_ids": 84
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(s) == 0:\n        return []\n    return [word for word in s.split() if word not in [\"\", \" \"] and len(word) >= n]\n",
        "num_ids": 44
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    import re\n    if s == \"\":\n        return []\n    s_list = []\n    if n == 0:\n        return s_list\n    m = re.findall(r'(\\w)([aeiouyAEIOUY]+)(\\w+)', s)\n    for i in range(len(m)):\n        if m[i][2].isalpha() and m[i][2] not in s_list:\n            s_list.append(m[i][2])\n        elif m[i][2].isalpha():\n            if m[i][2] in s_list:\n                s_list.remove(m[i][2])\n    return s_list\n",
        "num_ids": 165
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    res = []\n    # return empty list if n is 0 or a non-negative integer\n    if (n > 0) and (n < len(s)):\n        for i in range(len(s)):\n            # if string contains at least n characters, return only those\n            if (s[i].isdigit()):\n                res.append(s[i])\n            # if string contains all characters except at least n characters, return only those\n            else:\n                for j in range(i, len(s)):\n                    if not (s[j].isdigit()):\n                        break\n                    else:\n                        # if string contains at least n characters, add word to the list\n                        if (s[j] == s[i]):\n                            res.append(s[j])\n                        else:\n                            break\n    return res\n",
        "num_ids": 195
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Note: Could you do it in-place with O(n) time complexity?\n    words = []\n    word = \"\"\n    for i in s:\n        if i.isalpha():\n            word += i\n    for i in range(len(word)):\n        if word[i].isdigit():\n            if len(word[i]) == 1 or word[i] == \" \":\n                words.append(word[i])\n        else:\n            words.append(word[i])\n    return words\n",
        "num_ids": 122
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    words = []\n    for c in s:\n        if c in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz':\n            words.append(c)\n    return words\n",
        "num_ids": 84
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for word in s.split():\n        if len(word) < n:\n            return result\n        for letter in word:\n            if letter not in \"aeiouAEIOU\":\n                return result\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = []\n",
        "num_ids": 6
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    s = remove_spaces(s)\n    words = []\n    \n    if not s:\n        return words\n    \n    for i in range(0, n):\n        if s[i].isalpha():\n            for word in words:\n                if word[0] == s[i]:\n                    words.remove(word)\n            \n            words.append(s[i])\n    \n    return words\n",
        "num_ids": 99
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    if n <= 0:\n        return []\n    word_list = []\n    for i in range(len(s)):\n        if s[i] in \"AEIOU\":\n            word_list.append(s[i])\n    \n    return select_words_by_word(word_list, s, n)\n",
        "num_ids": 102
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # initalize empty list\n    word_list = []\n    # iterate over each letter in the string\n    for letter in s:\n        # check if the letter is a vowel\n        if letter in \"aeiou\":\n            # if vowel add to list\n            if letter == \"e\":\n                word_list.append(\"e\")\n            elif letter == \"o\":\n                word_list.append(\"o\")\n            elif letter == \"l\":\n                word_list.append(\"l\")\n            elif letter == \"n\":\n                word_list.append(\"n\")\n            else:\n                word_list.append(\"a\")\n    # return if list is empty\n    if len(word_list) == 0:\n        return word_list\n    # find the number of vowels in string\n    vowels = 0\n    for letter in word_list:\n        if letter in \"aeiou\":\n            vowels += 1\n    # if there is a vowel, use vowel in vowels to count up\n    if vowels > 0:\n        for letter in word_list:\n            if letter in \"aeiou\":\n                word_list.append(vowels * \"a\")\n    # return list\n    return word_list\n",
        "num_ids": 291
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    vowel_mapping = dict()\n    vowel_mapping[u'a'] = u'u'\n    vowel_mapping[u'e'] = u'u'\n    vowel_mapping[u'i'] = u'u'\n    vowel_mapping[u'o'] = u'u'\n    vowel_mapping[u'u'] = u'u'\n    \n    for i in range(len(word) - 1):\n        if word[i] in vowel_mapping:\n            if word[i+1] in vowel_mapping:\n                if word[i:i+2] == vowel_mapping[word[i:i+2]]:\n                    return word[i+1:]\n    return ''\n",
        "num_ids": 187
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #Get the most common vowel present in the word\n    vowels = get_vowel_present(word)\n    if len(vowels) == 0:\n        return \"\"\n    \n    #Get the most common consonant present in the word\n    consonants = get_consonant_present(word)\n    if len(consonants) == 0:\n        return \"\"\n    \n    #Get the closest consonant to the first vowel\n    first_vowel_pos = closest_vowel_pos(consonants, vowels)\n    if first_vowel_pos == 0:\n        return \"\"\n    \n    #Get the closest consonant to the last vowel\n    last_vowel_pos = closest_vowel_pos(consonants, vowels[:-1])\n    if last_vowel_pos == len(consonants) - 1:\n        return \"\"\n    \n    #Get the closest vowel to the first vowel\n    first_vowel = consonants[first_vowel_pos]\n    if first_vowel == \"e\" or first_vowel == \"i\" or first_vowel == \"o\" or first_vowel == \"u\":\n        return first_vowel\n    \n    #Get the closest consonant to the last vowel\n    last_vowel = consonants[last_vowel_pos]\n    if last_vowel == \"a\" or last_vowel == \"e\" or last_vowel == \"i\" or last_vowel == \"o\" or last_vowel == \"u\":\n        return last_vowel\n    \n    return \"\"\n",
        "num_ids": 395
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Initialize variables\n    if len(word) < 2:\n        return \"\"\n    vowels = \"aeiou\"\n    vowels_count = {v:0 for v in vowels}\n    \n    # Find length of word\n    for index in range(len(word)):\n        for letter in word[index:]:\n            if letter not in vowels_count:\n                break\n            if letter == vowels[vowels_count[letter]]:\n                vowels_count[letter] += 1\n                break\n            \n            # Next, if the letter is in the word, it is a consonant, then go to the next index\n            # that is one less than the previous index\n            # The word word[index:index] is another word, we need to also increase\n            # the count of the vowels\n            if letter not in vowels_count:\n                break\n            else:\n                vowels_count[letter] -= 1\n",
        "num_ids": 224
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # index start from right side and index end at left side\n    \n    vowels = \"aeiouAEIOU\"\n    \n    # precompute\n    s = list(map(ord, word))\n    left = [ord(v) for v in vowels]\n    left.sort(reverse=True)\n    \n    right = [ord(v) for v in vowels]\n    right.sort(reverse=False)\n    \n    # get index of last char\n    l = len(word) - 1\n    \n    # min index, then substract index\n    min_idx = 0\n    min_idx = l\n    \n    while min_idx > 0:\n        \n        # get index of current char\n        idx = s.index(left.pop(), l)\n        \n        # get min index\n        if idx < min_idx:\n            min_idx = idx\n        \n        # get index of other char\n        idx = s.index(right.pop(), idx + 1)\n        \n        if idx < min_idx:\n            min_idx = idx\n            \n    # return last char\n    return word[min_idx:] if min_idx > 0 else word[:min_idx",
        "num_ids": 298
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #check the length\n    if len(word)<=1:\n        return \"\"\n    if word[0]==word[-1]:\n        return word[0]\n    \n    #check the right side\n    #left side\n    left_side = word[:len(word)-1]\n    right_side = word[len(word)-1:]\n    #check if it is a vowel\n    left_vowel = get_closest_vowel(left_side)\n    right_vowel = get_closest_vowel(right_side)\n    if left_vowel==right_vowel:\n        return left_vowel\n    else:\n        return \"\"\n    \n    \n    \ndef get_closest_vowel_from_first_to_last_letter(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that begins at \n    the first letter and ends at the last letter.\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n",
        "num_ids": 266
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    return get_closest_vowel_helper(word, \"\", 0)\n",
        "num_ids": 25
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    closest_vowel = \"\"\n    left = 0\n    right = len(word)-1\n    while left <= right:\n        if word[left] == word[right]:\n            left += 1\n            right -= 1\n        elif word[left]!= word[right]:\n            left += 1\n        else:\n            right -= 1\n    return closest_vowel\n",
        "num_ids": 91
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # first case:\n    if word[0] in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n        return word[0]\n    # last case:\n    if word[-1] in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n        return word[-1]\n",
        "num_ids": 69
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    words = set(word.lower())\n    first, second = word[0], word[-1]\n    first = first if first.isalpha() else''\n    second = second if second.isalpha() else''\n    vowels = set(first + second)\n    return first if first in words and second in vowels else ''\n",
        "num_ids": 79
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    VOWEL_POS = ['A', 'E', 'I', 'O', 'U']\n    \n    # Write your code here\n    vowel_list = word.split()\n    vowel_list.reverse()\n    for i in range(len(vowel_list) - 1):\n        if (vowel_list[i] in vowels) and (vowel_list[i+1] in vowels):\n            pass\n        else:\n            return ''\n    \n    # You are not looking for a vowel\n    return ''\n",
        "num_ids": 153
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Method 1: Brute Force\n    # Time = O(n * n)\n    # Space = O(1)\n    \n    s1, s2 = '',''\n    for i in lst:\n        if i.lower() == '(':\n            s1 += ')'\n        else:\n            s2 += '('\n    if len(s1) == 0 and len(s2) == 0:\n        return 'Yes'\n    elif len(s1) == 0:\n        return 'No'\n    else:\n        return 'No'\n    \n    \n    # Method 2:\n    # Time = O(n * n)\n    # Space = O(n)\n    \n    # back tracking (x = s1 + s2)\n    # x = s1 + s2\n    # 2 cases, x = s1, x = s2\n    # 0: s1 and s2 are not balanced\n    # 1: s1 and s2 have one symbol and other not\n    # 2: s1 and s2 have one symbol and s2 has all symbols\n    # 3: s1 and s2 have one symbol and s1 is balanced\n    # 4: s1 and s2 have one symbol and s2 is balanced\n    # 5: s1 and s2 have one symbol and s1 is not balanced\n    # 6: s1 and s2 have one symbol and s1 and s2 are balanced\n    # 7: s1 and s2 have one symbol and s1 and s2 are not balanced\n    # 8: s1 and s2 have one symbol and s1 and s2 are not balanced\n    # 9: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 10: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 11: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 12: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 13: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 14: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 15: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 16: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 17: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 18: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 19: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 20: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 21: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 22: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 23: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 24: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 25: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 26: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 27: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 28: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 29: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 30: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 31: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 32: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 33: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 34: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 35: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 36: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 37: s1 and s2 have one symbol and s1 and s2 have all symbols\n    # 38: s1 and s2 have one symbol and s1 an",
        "num_ids": 1025
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst = ''.join(lst)\n    lst_str = ''.join(lst)\n    #lst = lst.split('(')\n    #lst = lst.split(')')\n    lst = lst_str.split('(')\n    lst = lst[0] + ')'*(len(lst) - 1)\n    return len(lst) == len(set(lst))\n",
        "num_ids": 106
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    string_1 = list(lst[0])\n    string_2 = list(lst[1])\n    \n    # if there are no parens, then the strings are good\n    if len(string_1) == 0 and len(string_2) == 0:\n        return True\n    \n    # if the first string is not a balanced paren, then we need to return\n    # false.\n    if len(string_1) == 0:\n        return False\n    \n    # if the second string is not a balanced paren, then we need to return\n    # false.\n    if len(string_2) == 0:\n        return False\n    \n    # if the first string is a balanced paren, we can use it as a\n    # string to check next string.\n    if string_1[0] == '(':\n        string_1[0] = ')'\n    elif string_1[0] == ')':\n        string_1[0] = '('\n    \n    # if the second string is a balanced paren, we can use it as a\n    # string to check next string.\n    if string_2[0] == '(':\n        string_2[0] = ')'\n    elif string_2[0] == ')':\n        string_2[0] = '('\n    \n    # if the first string is not a balanced paren, then the strings are\n    # good, so return 'Yes'.\n    if string_1[0]!= '(' or string_2[0]!= ')':\n        return False\n    \n    # the strings are good. return 'Yes'\n    return True\n",
        "num_ids": 387
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def good_string(s):\n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(')')\n            elif i == ')':\n                while stack and stack[-1]!= '(':\n                    stack.pop()\n                if not stack:\n                    return False\n        return not stack\n",
        "num_ids": 81
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def balanced(s):\n        open = True\n        for c in s:\n            if c == '(':\n                open = not open\n            else:\n                return not open\n        return open\n    def balanced_recursive(lst, s):\n        if not s:\n            return balanced(lst)\n        if s[-1] == '(':\n            return balanced(lst + [s[-1]])\n        return balanced_recursive(lst + [s[-1]], s[:-1])\n    return balanced_recursive(lst, '')\n",
        "num_ids": 135
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # O(n) time | O(n) space\n    stack = []\n    for string in lst:\n        if string == '(':\n            stack.append('(')\n        elif string == ')':\n            if not stack:\n                return 'No'\n            last = stack.pop()\n            if last == '(':\n                return 'No'\n    return 'Yes'\n",
        "num_ids": 91
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Time: O(n)\n    # Space: O(n)\n    lst_map = {')': '(', ']': '[', ']': '[', '(': '('}\n    def is_balanced(cur_paren):\n        return len(cur_paren) == len(lst_map)\n",
        "num_ids": 74
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    res = []\n    for a, b in zip(lst[::2], lst[1::2]):\n        if a == b:\n            res.append(a)\n        else:\n            res.append('(')\n    return ''.join(res)\n",
        "num_ids": 65
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst) < 2:\n        return 'No'\n    stack = []\n    for x in lst:\n        if x == '(':\n            stack.append(x)\n        elif x == ')':\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    if stack:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 93
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # lexer = Tokenize('(){}')\n    # for t in lexer:\n    #     if t.type == 'open_parentheses':\n    #         for s in match_paren(t.value):\n    #             print(s)\n    #     elif t.type == 'close_parentheses':\n    #         print(t.value)\n    \n    #     else:\n    #         print('Invalid')\n    #         break\n    # return 'Yes'\n    # return\n",
        "num_ids": 120
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Your Code Here\n    \n    return arr[:k]\n",
        "num_ids": 17
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def heapify(arr, n, i):\n        largest = i\n        l = 2*i+1\n        r = 2*i+2\n        if l < n and arr[i] < arr[l]:\n            largest = l\n        if r < n and arr[largest] < arr[r]:\n            largest = r\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n",
        "num_ids": 117
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # return sorted(arr)\n    return [x for i, x in enumerate(arr) if len(arr) - i >= k]\n",
        "num_ids": 34
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    max_numbers = []\n    for n in arr:\n        if n > k:\n            max_numbers.append(n)\n        else:\n            k = k-n\n            max_numbers.append(k)\n    return max_numbers\n",
        "num_ids": 63
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    arr_min = arr[0]\n    for i in range(0, len(arr)):\n        if arr[i] < arr_min:\n            arr_min = arr[i]\n    if arr_min == arr[-1]:\n        return arr[0:-1]\n    else:\n        return arr[1:]\n",
        "num_ids": 79
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not arr or len(arr) < 1:\n        return arr\n",
        "num_ids": 18
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Backtracking\n    # Time complexity: O(n * log(k))\n    # Space Complexity: O(k)\n    def max_k_arr(arr, k):\n        if k == 0:\n            return arr\n        elif k > len(arr):\n            return None\n",
        "num_ids": 69
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_k = 0\n    smallest = -1\n    arr.sort()\n    for i in range(len(arr)):\n        if i < k:\n            if arr[i] > max_k:\n                max_k = arr[i]\n            elif arr[i] < smallest:\n                smallest = arr[i]\n        else:\n            if arr[i] > max_k:\n                max_k = arr[i]\n            elif arr[i] < smallest:\n                smallest = arr[i]\n    return [smallest, max_k]\n    \ndef main():\n    arr = [int(i) for i in input().strip().split()]\n    k = int(input().strip())\n    print(maximum(arr, k))\n    \nmain()",
        "num_ids": 188
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even = []\n    odd = []\n    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    for i in range(len(even)):\n        if i % 2 == 0:\n            sum += even[i]\n        else:\n            sum += odd[i]\n    return sum\n",
        "num_ids": 98
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst = sorted(lst)\n    odd = 0\n    for num in lst:\n        if num % 2:\n            odd += num\n    return odd\n",
        "num_ids": 40
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    def is_odd(n):\n        return n%2==1\n    \n    return sum(filter(is_odd,lst))",
        "num_ids": 35
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even_lst = [0]*len(lst)\n    odd_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_lst[i] = lst[i]\n        else:\n            odd_lst.append(lst[i])\n    print(even_lst)\n    print(odd_lst)\n    answer = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            answer += even_lst[i]\n        else:\n            answer += odd_lst[i]\n    return answe",
        "num_ids": 155
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    for i in lst:\n        if i%2 == 0:\n            sum += i\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in lst:\n        if (i%2 == 0):\n            even_sum = even_sum + i\n        else:\n            odd_sum = odd_sum + i\n    return even_sum+odd_sum\n",
        "num_ids": 69
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    odds=0\n    for i in range(len(lst)):\n        if (i%2==0):\n            odds+=lst[i]\n    return odds\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321])",
        "num_ids": 89
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    even_sum = 0\n    for number in lst:\n        if number % 2 == 0:\n            even_sum += number\n        else:\n            result += number\n    return result - even_sum\n",
        "num_ids": 54
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    odd_even_sum = 0\n",
        "num_ids": 10
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n = len(lst)\n    odd_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            odd_sum = odd_sum + lst[i]\n    return odd_sum\n",
        "num_ids": 56
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sum([ int(''.join(str(x) for x in arr[0:k])) for x in arr[0:k] ])\n",
        "num_ids": 35
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            count += 1\n        else:\n            if count > 1:\n                count -= 1\n    return arr[-1] + k * count\n",
        "num_ids": 76
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = 0\n    for i in range(len(arr)):\n        if len(str(arr[i])) >= 2:\n            s += arr[i]\n        else:\n            s += arr[i] * 10**(len(str(arr[i])) - 2)\n    return s + k\n",
        "num_ids": 75
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    ans = 0\n    for num in arr:\n        ans += max(int(str(num)[:k-1]), int(str(num)[:k]))\n    \n    return ans\n    \ndef get_chunks(arr, k):\n    \"\"\"\n    Given an array of integers arr and an integer k, return a list of the first k integers.\n    Each integer in the list is a chunk of the array. The integer is a duplicate of all other integers\n    in the array after making it the first element of the chunk.\n",
        "num_ids": 124
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum([i for i in arr if i < 10]) + sum([i for i in arr if i > 10]) + sum([i for i in arr if i > 10]) + sum([i for i in arr if i > 10]) + sum([i for i in arr if i > 10])\n",
        "num_ids": 68
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    pass\n",
        "num_ids": 6
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # The idea is to take the first k elements as the first element,\n    # then add the elements till k, then add the last elements.\n    # The idea is to take the last element as the first element,\n    # then add the elements till k, then add the last element.\n    # This means taking the last element from the first element till\n    # one element, then adding the last element till the second element,\n    # then adding the last element till the last element.\n    if not arr or k < 1:\n        return 0\n    elif k == 1:\n        return arr[0]\n",
        "num_ids": 138
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Solve the problem using dynamic programming\n    # O(n^2)\n    # O(n)\n    if not arr or k < 2:\n        return sum(arr)\n    dp_arr = [[0 for _ in range(k+1)] for _ in range(len(arr)+1)]\n",
        "num_ids": 75
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    num = arr[0]\n    if len(arr) == 1 or (len(arr) == 2 and arr[1] >= 2):\n        return num\n    \n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        if k > len(arr[mid]):\n            right = mid\n        elif k < len(arr[mid]):\n            left = mid + 1\n        else:\n            left = mid\n    \n    return num + add_elements(arr[left:right], k)\n",
        "num_ids": 140
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    answer = 0\n    for num in arr[k:]:\n        answer += num\n    return answe",
        "num_ids": 25
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i=1\n    count=1\n    soln=[]\n    while i<=n:\n        if i%2==0:\n            count+=1\n        else:\n            count*=3\n        i+=count\n        if i>=n:\n            soln.append(i)\n    return soln\n",
        "num_ids": 76
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return get_odd_collatz(n // 2) + [n//2]\n        else:\n            return [3*n//2, n//2]\n",
        "num_ids": 65
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for n in range(1, n):\n        if n % 2 == 0:\n            result.append(n)\n        elif n % 2 == 1:\n            result.append(3 * n + 1)\n    result.sort()\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Create list\n    list_odd = []\n",
        "num_ids": 13
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    odd_seq = []\n    for n in range(1, n+1):\n        if n%2==0:\n            odd_seq.append(n)\n        else:\n            for x in range(3, int(math.sqrt(n))+1, 2):\n                if n%x==0:\n                    break\n                if x%2==0:\n                    odd_seq.append(x)\n                    break\n    return odd_seq\n",
        "num_ids": 107
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    odds = []\n    for i in range(n, 0, -1):\n        if i % 2 == 0:\n            odds.append(i)\n    return sorted(odds)\n",
        "num_ids": 47
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    odd_list = []\n    if n == 1:\n        return [1]\n    for i in range(1, n, 2):\n        if i % 2 == 0:\n            odd_list.append(i)\n    odd_list.sort()\n    return odd_list\n",
        "num_ids": 67
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: \n    # start with any positive integer n. Then each term is obtained from the previous term as follows: \n    # if the previous term is even, the next term is one half of the previous term. If the previous term is odd, \n    # the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the \n    # sequence will always reach 1.\n    # The conjecture is that no matter what value of n, the sequence will always reach 1.\n    # Since the above conjecture is based on whether a number is odd or even, we can use a recursive algorithm. \n    # We can define the recursive sequence as follows:\n    # when n is even, the sequence is: [1, n/2, 3, 5, 7, 9]\n    # when n is odd, the sequence is: [1, n/2, 3, 5, 7, 9, 11, 13]\n    # When we call a sequence, we're going to find the odd number n. \n    # We need to iterate through the sequence from the n-th element and add the odd number n/2 to the result. \n    # This is the same as setting n = n/2.\n",
        "num_ids": 293
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sequence = []\n    i = 1\n    while n!= 0:\n        if n % 2 == 0:\n            sequence.append(i)\n            n = n/2\n        else:\n            i += 1\n            n = n*3+1\n    return sequence\n",
        "num_ids": 65
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    output = []\n    if n < 2:\n        output.append(n)\n        return output\n",
        "num_ids": 25
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    months = [1, 3, 5, 7, 8, 10, 12]\n",
        "num_ids": 20
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(date)!= 13:\n        return False\n    days = date[:4]\n    months = date[5:7]\n    year = date[8:10]\n    month = date[10:12]\n    day = date[12:14]\n    if not day.isdigit() or not day.isalpha() or not day.isdigit():\n        return False\n    if not month.isdigit() or not month.isalpha():\n        return False\n    if not months.isdigit() or not months.isalpha():\n        return False\n    if int(month) > 12 or int(month) < 1 or int(months) > 12 or int(months) < 1:\n        return False\n    if int(year) < 1 or int(year) > 99:\n        return False\n    return True\n    \n    \ndef valid_datetime(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n",
        "num_ids": 378
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not date:\n        return False\n    if not date.replace('-','').isdigit():\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if not date:\n        return False\n    \n    date = date.split('-')\n    month = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n    \n    if day < 1 or day > 31:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if year < 1 or year > 31:\n        return False\n",
        "num_ids": 106
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not date:\n        return False\n    if len(date)<4 or len(date)>10 or not date.isdigit():\n        return False\n    for i in range(len(date)-2):\n        if not date[i].isdigit() or int(date[i])<1 or int(date[i])>31:\n            return False\n    day = int(date[0:2])\n    month = int(date[2:4])\n    if month<1 or month>12:\n        return False\n    day2 = int(date[4:6])\n    if day>day2 or day<1 or day>31:\n        return False\n    year = int(date[6:])\n    if year<1900 or year>9999:\n        return False\n    if month==2 and (day==28 or day==29):\n        return False\n    if month==12 and (day==31 or day==30):\n        return False\n    return True\n",
        "num_ids": 229
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    date_string = date.split('-')\n    days = len(date_string)\n    \n    if not days:\n        return False\n    \n    if days < 1 or days > 31:\n        return False\n    \n    if days < 1 or days > 30:\n        return False\n    \n    month = 1\n    day = 1\n    year = int(date_string[0])\n    \n    for i in range(1, days):\n        if not month:\n            month = 1\n            day += 1\n        elif not day:\n            day = 1\n            year += 1\n        elif not month:\n            month = 1\n            day += 1\n        elif not day:\n            month = 1\n            day += 1\n            year += 1\n        elif not month or not day:\n            month = 1\n            day += 1\n            year += 1\n            \n    if not year % 4:\n        if not month in (1,3,5,7,8,10,12):\n            return False\n    elif not year % 4:\n        if not month in (4,6,9,11):\n            return False\n    elif not month in (1,3,5,7,8,10,12):\n        return False\n    \n    return True\n",
        "num_ids": 300
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(date)!= 9 or not date.isdigit():\n        return False\n    if not date[0].isdigit():\n        return False\n    if not date[1].isdigit():\n        return False\n    if not date[2].isdigit():\n        return False\n    if not date[3].isdigit():\n        return False\n    if not date[4].isdigit():\n        return False\n    if not date[5].isdigit():\n        return False\n    if not date[6].isdigit():\n        return False\n    if not date[7].isdigit():\n        return False\n    if not date[8].isdigit():\n        return False\n    if int(date[6:]) > 31 or int(date[6:]) < 1:\n        return False\n    if int(date[7:]) > 12 or int(date[7:]) < 1:\n        return False\n    if int(date[8:]) > 31 or int(date[8:]) < 1:\n        return False\n    if int(date[9:]) > 31 or int(date[9:]) < 1:\n        return False\n    if int(date[10:]) > 31 or int(date[10:]) < 1:\n        return False\n    if int(date[11:]) > 31 or int(date[11:]) < 1:\n        return False\n    if int(date[12:]) > 31 or int(date[12:]) < 1:\n        return False\n    if int(date[5:]) > 12 or int(date[5:]) < 1:\n        return False\n    if int(date[6:]) > 31 or int(date[6:]) < 1:\n        return False\n    if int(date[7:]) > 31 or int(date[7:]) < 1:\n        return False\n    if int(date[8:]) > 31 or int(date[8:]) < 1:\n        return False\n    if int(date[9:]) > 31 or int(date[9:]) < 1:\n        return False\n    if int(date[10:]) > 31 or int(date[10:]) < 1:\n        return False\n    if int(date[11:]) > 31 or int(date[11:]) < 1:\n        return False\n    if int(date[12:]) > 31 or int(date[12:]) < 1:\n        return False\n    return True\n",
        "num_ids": 575
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # If the number of days is less than 1 or higher than 31 days, it is not valid.\n    # It means the number of days is less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\n    # We can only check this conditions at the end of the function,\n    # because of the fact that we have already checked the number of days.\n    if len(date)!= 10:\n        return False\n    if date[0] == '/' and (date[1] < '/' or date[1] > '/'):\n        return False\n    if date[3]!= '/' and date[4]!= '/' and date[5]!= '/' and date[6]!= '/' and date[7]!= '/' and date[8]!= '/' and date[9]!= '/':\n        return False\n",
        "num_ids": 206
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    day = 0\n    month = 0\n    year = 0\n    valid = True\n",
        "num_ids": 21
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not date:\n        return False\n    if not date.strip():\n        return False\n    day = 0\n    month = 0\n    year = 0\n    day_str, month_str, year_str = date.split('-')\n    if day_str.isdigit():\n        day = int(day_str)\n    if month_str.isdigit():\n        month = int(month_str)\n    if year_str.isdigit():\n        year = int(year_str)\n    if day > 31 or month > 12 or year > 0:\n        return False\n    return True\n",
        "num_ids": 144
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    words = txt.split(\",\")\n    words = [w.strip().lower() for w in words]\n    words = [w for w in words if w]\n    return words\n",
        "num_ids": 45
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [word.lower().replace(',', '').split() for word in txt.split(',') if word!= '']\n",
        "num_ids": 33
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(txt.strip().split(','))\n",
        "num_ids": 14
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # return \" \".join([word for word in txt.split() if word not in string.punctuation])\n    return [word.lower() for word in txt.split() if word not in string.punctuation]\n",
        "num_ids": 54
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    txt = txt.lower().split(',')\n    if len(txt) == 0:\n        return []\n    else:\n        return [word.strip() for word in txt if word.strip()!= '']\n",
        "num_ids": 54
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    txt = txt.lower()\n    return [word.strip().replace(\",\", \"\").replace(\" \", \"\").replace(\"-\", \"\").replace(\".\", \"\") for word in txt.split()]\n    #return [word.strip().replace(\",\", \"\").replace(\" \", \"\").replace(\"-\", \"\").replace(\".\", \"\") for word in txt.split()]\n",
        "num_ids": 89
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    t = []\n    a = 0\n    for i in txt:\n        if i!= \" \":\n            if i == \",\":\n                a += 1\n                t.append(i)\n            elif i == \" \":\n                if len(t) % 2 == 0:\n                    t.append(i)\n                else:\n                    t.append(i)\n        else:\n            a += 1\n            if i == \",\":\n                t.append(i)\n            elif i == \" \":\n                if len(t) % 2 == 0:\n                    t.append(i)\n                else:\n                    t.append(i)\n    if a % 2 == 1:\n        t = t[::-1]\n    return t\n",
        "num_ids": 179
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    txt = txt.lower().split()\n    if len(txt) == 0:\n        return []\n    for word in txt:\n        if len(word)%2:\n            word = word[:len(word)//2]\n    return txt\n",
        "num_ids": 63
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    txt = txt.lower()\n    txt = txt.replace(\" \",\"\").split(',')\n    return txt\n",
        "num_ids": 31
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    txt = re.sub('\\s+','', txt)\n    return re.split('[,;.,?!\\'\"\\-]', txt)\n",
        "num_ids": 37
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(lst) < 2:\n        return True\n",
        "num_ids": 16
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l = len(lst)\n    if l < 2: return True\n    for i in range(l-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = sorted(lst)\n    return not any([s[i] == s[i+1] for i in range(len(s)-1)])\n",
        "num_ids": 39
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(lst) == lst\n",
        "num_ids": 12
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[count]:\n            count += 1\n        else:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(lst) == 1:\n        return True\n    if len(lst) > 1:\n        for i in range(len(lst)-1):\n            if lst[i] == lst[i+1]:\n                return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in lst:\n        if lst.count(i) > 1:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sorted(lst) == ls",
        "num_ids": 10
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst) > 1:\n        if lst[0] == lst[-1]:\n            return True\n        else:\n            return False\n    else:\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            continue\n        else:\n            return False\n",
        "num_ids": 43
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    interval = []\n    for i in interval1:\n        interval.append(i)\n",
        "num_ids": 24
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n    \n    # [input] two intervals, [output] (start, end)\n    \n    # write your code here\n    pass\n",
        "num_ids": 35
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # your code\n    \n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        if interval1[1] >= interval2[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        if interval1[1] <= interval2[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "num_ids": 131
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    inter = set(interval1) & set(interval2)\n    if len(inter) >= 2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 44
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # YOUR CODE HERE\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    start, end = interval1[0], interval1[1]\n    start_end = interval2[0]\n    end_start = interval2[1]\n",
        "num_ids": 39
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if(interval1[0]<=interval2[0] and interval1[1]>=interval2[1]):\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    pass\n",
        "num_ids": 6
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if interval1[0] < interval1[1] < interval2[0] < interval2[1]:\n        return \"YES\"\n    elif interval1[0] < interval2[1] < interval1[1] < interval2[0]:\n        return \"NO\"\n    else:\n        return \"NO\"",
        "num_ids": 75
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    signs = [0, 1]\n    signs.extend([-1] * len(arr))\n    for num in arr:\n        if num < 0:\n            signs.extend([1] * (abs(num) + 1))\n        else:\n            signs.extend([-1] * (abs(num) + 1))\n    return signs\n",
        "num_ids": 88
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return None\n    arr = sorted(arr)\n    p_i = arr[0]\n    p_i_neg = p_i*-1\n    p_i_i = arr[1]\n    p_i_neg_i = arr[1]\n    res = 0\n    for x in arr:\n        if x > p_i:\n            res += x*x\n        if x < p_i:\n            res -= p_i_neg_i*p_i_neg_i\n            p_i_neg_i = arr[-1]\n            p_i_neg_i_i = arr[-1]\n            p_i_neg_i_i = arr[-1]\n            p_i = arr[0]\n            res += (p_i*-1)*(p_i_neg_i_i*p_i_neg_i_i)\n    return res\n",
        "num_ids": 225
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    m = {}\n    for num in arr:\n        if num in m:\n            m[num] += 1\n        else:\n            m[num] = 1\n",
        "num_ids": 40
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # initialize temp array\n    temp = []\n    # loop through all elements in arr\n    for i in arr:\n        temp.append(i * -1)\n    # return product\n    return prod(temp)\n",
        "num_ids": 51
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # write your code here\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]*arr[0]\n    product = 1\n    magnitude = arr[0]\n    for num in arr[1:]:\n        product = product*num\n        magnitude += num*magnitude\n    return magnitude\n",
        "num_ids": 93
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    signs = {0: -1, 1: 0, -1: 1}\n    res = 0\n    for i in range(len(arr)):\n        res += signs[arr[i]] * prod_signs(arr[:i] + arr[i + 1:])\n    return res if res!= None else None\n",
        "num_ids": 78
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = [0]\n    for val in arr:\n        res.append(val * val)\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    res = 0\n    for x in arr:\n        res += x if x > 0 else -x\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(abs(a) for a in arr)\n",
        "num_ids": 15
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            sum += -arr[i]\n        elif arr[i] >= 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 60
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # O(n * n)\n    # O(n)\n    # O(n)\n    n = len(grid)\n",
        "num_ids": 32
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    N = len(grid)\n",
        "num_ids": 9
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    N = len(grid)\n    \n    if N == 0 or N == 1:\n        return []\n    \n    # Initialize a counter to 0 to ensure that we don't go off the grid\n    # We start with the first cell\n    lst_A = [1]\n    \n    # Iterate over the grid up to the cell with the minimum value\n    # We add the values of the cell to a list\n    for i in range(2, N * N):\n        lst_A.append(lst_A[i-1])\n        \n        # Find the minimum cell value within the list\n        # If the cell value is not present, we skip it\n        if lst_A[i-1] < lst_A[i]:\n            # We have a minimum cell value\n            continue\n        \n        # We can't move to that cell, thus we skip it\n        if lst_A[i] == lst_A[i-1]:\n            continue\n            \n        # Move to the cell with the minimum value\n        lst_A[i-1] = lst_A[i]\n    \n    # Reverse the list of the values of the cells visited\n    # We do this because the list is not sorted\n    lst_A.reverse()\n    \n    # Now, we just need to find the minimum cell value\n    # which means we have a path of length k\n    # We start with the first cell\n    lst_B = [1]\n    \n    # Iterate over the grid up to the cell with the minimum value\n    # We add the values of the cell to a list\n    for i in range(2, N * N):\n        lst_B.append(lst_B[i-1])\n        \n        # We can't move to that cell, thus we skip it\n        if lst_B[i-1] < lst_B[i]:\n            continue\n            \n        # We can't go to that cell, thus we skip it\n        if lst_B[i] == lst_B[i-1]:\n            continue\n        \n        # We can go to the cell with the minimum value\n        lst_B[i-1] = lst_B[i]\n        \n    # Reverse the list of the values of the cells visited\n    # We do this because the list is not sorted\n    lst_B.reverse()\n    \n    # Now, we just need to find the minimum cell value\n    # which means we have a path of length k\n    # We start with the first cell\n    lst_C = [1]\n    \n    # Iterate over the grid up to the cell with the minimum value\n    # We add the values of the cell to a list\n    for i in range(2, N * N):\n        lst_C.append(lst_C[i-1])\n        \n        # We can't move to that cell, thus we skip it\n        if lst_C[i-1] < lst_C[i]:\n            continue\n            \n        # We can't go to that cell, thus we skip it\n        if lst_C[i] == lst_C[i-1]:\n            continue\n        \n        # We can go to the cell with the minimum value\n        lst_C[i-1] = lst_C[i]\n        \n    # Reverse the list of the values of the cells visited\n    # We do this because the list is not sorted\n    lst_C.reverse()\n    \n    # Now, we just need to find the minimum cell value\n    # which means we have a path of length k\n    # We start with the first cell\n    lst_D = [1]\n    \n    # Iterate over the grid up to the cell with the minimum value\n    # We add the values of the cell to a list\n    for i in range(2, N * N):\n        lst_D.append(lst_D[i-1])\n        \n        # We can't move to that cell, thus we skip it\n        if lst_D[i-1] < lst_D[i]:\n            continue\n            \n        # We can't go to that cell, thus we skip it\n        if lst_D[i] == lst_D[i-1]:\n            continue\n        \n        # We can go to the cell with the minimum value\n        lst_D",
        "num_ids": 1024
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst_A = []\n    lst_B = []\n",
        "num_ids": 17
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    m, n = len(grid), len(grid[0])\n    lst_A, lst_B = [], []\n    for i in range(m):\n        lst_A.append([])\n        for j in range(n):\n            if grid[i][j] > 0:\n                lst_A[-1].append(grid[i][j])\n            if grid[i][j] < grid[i][j-1]:\n                lst_B.append(grid[i][j])\n    #print(lst_A)\n    #print(lst_B)\n    if len(lst_A) > len(lst_B):\n        lst_A, lst_B = lst_B, lst_A\n    #print(lst_A)\n    #print(lst_B)\n    #print(lst_A)\n    #print(lst_B)\n    #print(grid)\n    #print(lst_A)\n    #print(lst_B)\n    \n    #path_A = [0]*k\n    path_A = [0]*k\n    for j in range(1, k+1):\n        path_A[j] = min(lst_A[j]) + path_A[j-1]\n    #print(path_A)\n    #print(lst_A)\n    #print(lst_B)\n    #print(path_A)\n    #print(lst_B)\n    return [min(lst_A[j], path_A[j]) for j in range(k)]\n",
        "num_ids": 388
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    N = len(grid)\n    path_list = []\n    if N <= 2:\n        return path_list\n    lst_A = []\n    lst_B = []\n    lst_A.append(grid[0][0])\n    lst_B.append(grid[0][-1])\n    for i in range(1, N):\n        if grid[i][0] == lst_A[-1]:\n            lst_A.append(grid[i][0])\n        if grid[i][-1] == lst_B[-1]:\n            lst_B.append(grid[i][-1])\n        path_list.append(grid[i][0])\n        path_list.append(grid[i][-1])\n    return path_list\n",
        "num_ids": 190
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n, m = len(grid), len(grid[0])\n    \n    if not isinstance(grid, list):\n        grid = [[grid]]\n",
        "num_ids": 37
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(grid)\n    if n < 2:\n        return []\n    lst_A = []\n    lst_B = []\n",
        "num_ids": 36
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if k == 0 or len(grid) == 0:\n        return []\n",
        "num_ids": 19
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # create empty lists\n    lst_A = [0 for _ in range(k + 1)]\n    lst_B = [0 for _ in range(k + 1)]\n",
        "num_ids": 43
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 3:\n        return [1, n]\n    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n)]\n",
        "num_ids": 48
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    tri_list = []\n    for i in range(1, n+1):\n        tri_list.append(i)\n    return tri_list\n",
        "num_ids": 37
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def recur(n):\n        if n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 1]\n        elif n == 3:\n            return [1, 2, 3]\n        else:\n            return [1, n * recur(n - 1) + recur(n - 2), n * recur(n - 1) + recur(n - 2)]\n    return recur(n)\n",
        "num_ids": 108
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    elif n == 3:\n        return [1, 2, 3]\n    elif n % 2 == 0:\n        return [1, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\n        89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\n        193, 197, 199]\n    elif n % 2 == 1:\n        return [1, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\n        89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\n        193, 197, 199]\n",
        "num_ids": 284
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        tri = [1, n / 2]\n        for i in range(2, n):\n            tri.append((tri[i-1]+tri[i-2]+tri[i-1]) / 3)\n        return tri\n",
        "num_ids": 102
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1, 2]\n    if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    else:\n        return [tri(n - 1) + tri(n - 2)] + [tri(n + 1)]\n",
        "num_ids": 89
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #implementation of the Tribonacci sequence is based on the recurrence relation\n    #Tribonacci sequence is defined by the recurrence:\n    #tri(1) = 3\n    #tri(2) = 1 + (2 / 2) = 2\n    #tri(3) = tri(2) + tri(1) + tri(3)\n    #tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    if n == 1:\n        return [1, 2, 3]\n    elif n == 2:\n        return [3, 2, 1]\n    else:\n        return [1, 3, 2, 8]\n",
        "num_ids": 161
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def tribonacci_sequence(n, list):\n        if n == 0:\n            list.append(1)\n            return\n        elif n == 1:\n            list.append(1)\n            return\n        else:\n            list.append(1 + n / 2)\n            tribonacci_sequence(n - 1, list)\n            list.append(3)\n            tribonacci_sequence(n - 2, list)\n            list.append(7)\n            tribonacci_sequence(n - 3, list)\n            return list\n    return tribonacci_sequence(n, [1])\n",
        "num_ids": 146
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \"\"\"\n    def tri(n):\n        if n <= 2:\n            return [1, n]\n        else:\n            return [tri(n - 1), tri(n - 2) + tri(n + 1)]\n    \"\"\"\n    \"\"\"\n    def tri(n):\n        if n <= 2:\n            return [1, n]\n        else:\n            return [tri(n - 1), tri(n - 2) + tri(n + 1)]\n    \"\"\"\n",
        "num_ids": 111
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    if n < 4:\n        return 1\n    return n * digits(n-1)\ndef main():\n    # print(digits(1))\n    # print(digits(5))\n    # print(digits(0))\n    # print(digits(25))\n    print(digits(0))\n    print(digits(10))\n    print(digits(12))\n    print(digits(9))\n    print(digits(13))\n    print(digits(21))\n    print(digits(31))\n    print(digits(99))\nmain()",
        "num_ids": 152
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    digits = digits(n-1)\n    if n % 2 == 1:\n        return digits*2\n    else:\n        return digits\n",
        "num_ids": 46
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Divide the input by the number of digits and find the remainder\n    # Get a list of odd digits, 2^n = 2^(n/2)\n    # Use a for loop over the remainder of this list.\n    # Return the product of the even digits.\n    return (n // 2) * (digits(n - 2 * (n % 2)) * 2)\n    #return ((n//2) * (digits(n-2*(n % 2)) * 2))\n    #return (n // 2) * (digits(n - 2 * (n % 2)))\n",
        "num_ids": 136
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (n*(n+1))//2\n    \ndef count_digits(n):\n    \"\"\"Return the number of digits in n.\"\"\"\n    return len(str(digits(n)))\n    ",
        "num_ids": 50
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # list of odd digits\n    odd_digits = []\n    # start with even digits\n    even_digits = []\n    while n:\n        # if odd digit\n        if n % 2 == 1:\n            # add it to even_digits\n            even_digits.append(n)\n        # else, add it to odd_digits\n        else:\n            odd_digits.append(n)\n        # increase n by 2\n        n = n // 2\n    # return the list\n    return odd_digits + even_digits\n",
        "num_ids": 131
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Return 0 if n is 0.\n    if n == 0:\n        return 0\n    \n    # Return the product of odd digits.\n    return int(n*(n-1)/2)\n",
        "num_ids": 48
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    i = 0\n    j = 1\n    while i <= n:\n        i += j\n        j += 1\n    return i\n",
        "num_ids": 32
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < 2:\n        return 0\n    while n % 2 == 0:\n        n //= 2\n    while n > 0:\n        if n % 2 == 1:\n            return n\n",
        "num_ids": 47
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #if n is even, return 0\n    if n%2 == 0:\n        return 0\n    #if n is odd, return 1\n    else:\n        return 1\n",
        "num_ids": 42
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #start with empty string\n    bracket_stack = []\n    #keep track of if there is a closing bracket\n    close = False\n    #iterate through string\n    for i in range(len(string)):\n        #check if it is a closing bracket\n        if string[i] == ']':\n            close = True\n        #if it is not, add it to the stack\n        elif string[i] == ']':\n            #print(bracket_stack)\n            #if it is the only element in the stack, it is a closing bracket\n            if bracket_stack and not bracket_stack[-1][0]:\n                #print(bracket_stack[-1])\n                close = True\n            #remove it from the stack\n            bracket_stack.pop()\n        #if it is a closing bracket, append it to the stack\n        elif string[i] == '[':\n            #print(bracket_stack)\n            #if it is the only element in the stack, it is a closing bracket\n            if bracket_stack and not bracket_stack[-1][0]:\n                #print(bracket_stack[-1])\n                close = True\n            #append it to the stack\n            bracket_stack.append(string[i])\n    #if there are no brackets, return True\n    if close:\n        return True\n    else:\n        return False\n",
        "num_ids": 321
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    i = 0\n    if string == '':\n        return True\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return is_nested(string[0])\n",
        "num_ids": 53
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return (string == '[[]]' or\n    string == '[]]]' or\n    string == '[[]]]][[[[[]' or\n    string == '[][]']][[[[[]' or\n    string == '[][]']][[[[[]' or\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(string) < 2:\n        return False\n    for bracket in string:\n        if bracket in ('[', ']'):\n            return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if '[' in string:\n        return False\n    else:\n        stack = []\n        for i in string:\n            if i in '([{':\n                stack.append(i)\n            elif i in ']]}]':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n        return True\n",
        "num_ids": 80
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if string[0] == '[' and string[len(string)-1] == ']':\n        return False\n    for i in range(0, len(string)):\n        if string[i] == '[':\n            if is_nested(string[i+1:len(string)]):\n                return True\n    return False\n",
        "num_ids": 79
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    stack = []\n    for i in string:\n        if i in '([{':\n            stack.append(i)\n        elif len(stack) > 0 and i in ')]]':\n            if stack[-1]!= '[':\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 78
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if string == '[][][':\n        return True\n    elif string == '[]][[':\n        return True\n    elif string == ']][]':\n        return False\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    brackets = []\n    subseqs = []\n",
        "num_ids": 14
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def is_sub_of_length_1(string):\n        if string.count('[]')!= string.count('[]') and string.count('[]')!= string.count('[][]'):\n            return False\n        if string.count('[]')!= string.count('[]') and string.count('[]')!= string.count('[][]'):\n            return True\n        return False\n    \n    def is_sub_of_length_2(string):\n        if string.count('[[[')!= string.count('[[]]']') and string.count('[[[')!= string.count('[[]]'):\n            return False\n        if string.count('[[[')!= string.count('[[]]'):\n            return True\n        return False\n",
        "num_ids": 183
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # result = 0\n    # for value in lst:\n    #     result += value ** 2\n    # return result\n    # See https://stackoverflow.com/questions/50984371/how-do-i-find-the-index-of-the-smallest-value-in-a-list-in-python\n    \n    squares = 0\n    for value in lst:\n        squares += value ** 2\n    return squares\n",
        "num_ids": 108
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum_squares = 0\n    for num in lst:\n        sum_squares += num ** 2\n    print(sum_squares)\n",
        "num_ids": 36
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert isinstance(lst, list), \"The input must be a list\"\n    summ = 0\n    for elem in lst:\n        summ += elem ** 2\n    return summ\n",
        "num_ids": 48
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    squared = 0\n    lst_len = len(lst)\n    if lst_len < 2:\n        return 0\n    for i in range(lst_len):\n        squared += lst[i]**2\n    return squared\n",
        "num_ids": 61
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    # lst_sum = 0\n    # for element in lst:\n    #     lst_sum += element**2\n    # return lst_sum\n",
        "num_ids": 45
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst = sorted(lst)\n    sum = 0\n    for i in lst:\n        sum = sum + (i * i)\n    return sum",
        "num_ids": 38
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst_length = len(lst)\n    sum_squares = 0\n    for i in range(lst_length):\n        sum_squares += lst[i]*lst[i]\n    return sum_squares\n",
        "num_ids": 58
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    pass\n",
        "num_ids": 6
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    for el in lst:\n        sum += el**2\n    return round(sum, 2)\n",
        "num_ids": 30
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #lst.sort(reverse=True)\n    #return sum([i**2 for i in lst])\n    sum=0\n    for i in lst:\n        sum+=i**2\n    return sum\n",
        "num_ids": 52
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n    return txt[-1] == 'a'\n",
        "num_ids": 20
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if txt[-1] not in \"AEIOUAEIOU\":\n        return False\n    i = len(txt) - 1\n    while i >= 0:\n        if txt[i] not in \"AEIOUAEIOU\":\n            return False\n        i -= 1\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return last_char_is_a_letter(txt[-1]) and not txt[-1].isalpha()\n    \ndef remove_all_non_alphabet_characters(txt):\n    '''\n    Create a function that removes all non-alphabet characters from\n    the given string and returns the modified string.\n",
        "num_ids": 77
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = False\n    if txt[-1]!= 'a':\n        result = True\n    \n    return result",
        "num_ids": 30
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: your code here\n    return False\n    \ndef next_last_char(txt):\n    '''\n    Create a function that returns the next character in the last\n    character in a given string. If there is no next character, \n    return None.\n",
        "num_ids": 64
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    if len(txt) == 1:\n        return False\n    if txt[-1] not in chars:\n        return False\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    txt_split = txt.split(' ')\n    if not txt_split[-1].isalpha():\n        return False\n    else:\n        if len(txt_split) < 2:\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = False\n    # first, create a list of all letters, and then append the last character of each word to this list\n    letters_in_word = txt.split()\n    # now, create a list for letters that are in this word\n    letters_in_word_in_word = []\n    for letter in letters_in_word:\n        if letter in word_letters:\n            letters_in_word_in_word.append(letter)\n    # now, if the last letter of the word is not in the list, we append that letter to the list\n    if len(letters_in_word_in_word) == 0:\n        result = True\n    # if all the letters in the word have been appended to the list, we return False\n    else:\n        result = False\n    return result\n",
        "num_ids": 189
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Ex: Check if the last letter of a string is not a letter,\n    # then return False\n",
        "num_ids": 25
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return (txt[-1].isalpha() and txt.count(' ')!= 1)\n",
        "num_ids": 24
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Find the index of the first element\n    first = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[first]:\n            first = i\n    # Find the index of the element immediately preceding the first element\n    prev = 0\n    for i in range(len(arr)-1):\n        if arr[i] < arr[prev]:\n            prev = i\n    # Return the index of the first element and the last element\n    return [first, prev]\n",
        "num_ids": 116
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    idx = -1\n    while arr[idx] <= arr[idx-1] and idx >= 0:\n        idx -= 1\n    return idx\n",
        "num_ids": 41
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # The index of the first element which is not greater than it immediately\n    # preceding it will be the smallest index\n    smallest_index = arr.index(min(arr)) + 1\n    # If the element is not greater than it immediately preceding it,\n    # return the smallest index\n    for i in range(arr.index(min(arr)) + 1, smallest_index):\n        if arr[i] < arr[i - 1]:\n            return i - 1\n    # If the element is greater than it immediately preceding it,\n    # return the smallest index\n    for i in range(arr.index(min(arr)), smallest_index):\n        if arr[i] > arr[i - 1]:\n            return i - 1\n    # If we reach here, there is no such element\n    return -1\n",
        "num_ids": 186
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    i = 0\n    while True:\n        if arr[i] < arr[i-1]:\n            i += 1\n        else:\n            return i-1\n",
        "num_ids": 40
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    index_l = 0\n    index_r = 0\n    for index, value in enumerate(arr):\n        if value >= arr[index_l]:\n            index_l += 1\n        elif value <= arr[index_r]:\n            index_r += 1\n    if index_l == index_r:\n        return -1\n    else:\n        return index_l\n",
        "num_ids": 90
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # We need to remember the maximum possible index. We'll use this when we have to shift all elements forward as we run the algorithm.\n    curr_max = -1\n    # We want to start with the max index, and try to increment it until we find a non-negative index.\n    for i, item in enumerate(arr):\n        # We can make a change if the max index is already present\n        if curr_max < i:\n            # If we already have a larger index, then we can assume we have found a smaller index and increment it.\n            curr_max = i\n    # Once we have found a bigger index, we return the max index.\n    return curr_max\n",
        "num_ids": 160
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    if n == 1:\n        return -1\n    for i in range(1, n):\n        if dp[i - 1] > arr[i]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = max(arr[i] + dp[i - 1], dp[i - 1])\n    return dp[n - 1]\n",
        "num_ids": 123
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(arr)\n    l = 0\n    r = n - 1\n    result = -1\n    while r > l:\n        mid = (r + l) // 2\n        if arr[mid] >= arr[mid + 1]:\n            if arr[mid] > arr[mid + 1]:\n                result = mid\n                r = mid - 1\n            else:\n                l = mid + 1\n        else:\n            if arr[mid] > arr[mid + 1]:\n                result = mid\n                l = mid + 1\n            else:\n                r = mid - 1\n    return result\n",
        "num_ids": 141
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(len(arr)-1):\n        if arr[i+1] > arr[i]:\n            return -1\n    return 0\n",
        "num_ids": 37
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Find the index of the first element greater than or equal to the element being evaluated\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n",
        "num_ids": 56
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_val = None\n    min_val = None\n    for num in lst:\n        if num > 0:\n            if max_val == None or num > max_val:\n                max_val = num\n            if min_val == None or num < min_val:\n                min_val = num\n",
        "num_ids": 74
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    i = 0\n    while True:\n        if lst[i] < 0:\n            return (lst[i], lst[i+1])\n        i += 2\n",
        "num_ids": 43
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    largest_negative_list = []\n    smallest_positive_list = []\n    for number in lst:\n        if number < 0:\n            largest_negative_list.append(number)\n        else:\n            smallest_positive_list.append(number)\n    return (max(smallest_positive_list), min(largest_negative_list))\n",
        "num_ids": 85
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def list_is_neg_or_pos(element):\n        '''\n        Verify that 'element' is either a negative or a positive\n        integer. If it is a negative integer, return None; otherwise,\n        return the negative integer.\n        '''\n        if element < 0:\n            return None\n        elif element == 0:\n            return None\n        else:\n            return element\n    \n    # Find the smallest positive number in a list\n    lst_neg_or_pos = [list_is_neg_or_pos(i) for i in lst]\n    for element in lst:\n        if element < 0:\n            return None, -element\n    return lst_neg_or_pos\n",
        "num_ids": 169
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    if len(lst) == 1:\n        return (lst[0], lst[0])\n    neg = []\n    pos = []\n    for elem in lst:\n        if elem < 0:\n            neg.append(elem)\n        else:\n            pos.append(elem)\n    if len(neg) > 0 and len(pos) < len(lst):\n        return (max(neg), min(pos))\n    return (max(neg), min(pos))\n",
        "num_ids": 138
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (None, None) if len(lst) == 0 else (max(lst), min(lst))",
        "num_ids": 28
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    largest_a = None\n    largest_b = None\n    negative_a = None\n    negative_b = None\n    if lst:\n        for x in lst:\n            if not x:\n                continue\n            if x > 0:\n                if largest_a == None:\n                    largest_a = x\n                elif largest_a < x:\n                    largest_a = x\n            else:\n                if largest_b == None:\n                    largest_b = x\n                elif largest_b > x:\n                    largest_b = x\n            if largest_a == None:\n                negative_a = x\n            elif largest_a < x:\n                negative_a = x\n            if largest_b == None:\n                negative_b = x\n            elif largest_b > x:\n                negative_b = x\n        return (largest_a, largest_b), (negative_a, negative_b)\n    return (None, None)\n",
        "num_ids": 224
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (None, None) if lst==[] else (min(lst), max(lst))\n",
        "num_ids": 26
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a, b = None, None\n    for num in lst:\n        if num < 0:\n            if a == None:\n                a = num\n            else:\n                b = num\n                break\n        else:\n            if a == None:\n                a = num\n            else:\n                b = num\n                break\n    if a == None or b == None:\n        return None, None\n    else:\n        return a, b\n",
        "num_ids": 104
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def greatest_smallest_pos_neg(number):\n        if isinstance(number, int):\n            if number < 0:\n                return greatest_smallest_pos_neg(-number)\n            else:\n                return greatest_smallest_pos_neg(number * -1)\n        elif isinstance(number, float):\n            return greatest_smallest_pos_neg(number * -1)\n        else:\n            return None\n    \n    lst = [number for number in lst if isinstance(number, int) or isinstance(number, float)]\n    lst.sort(reverse=True)\n    \n    def largest_smallest_neg_pos(number):\n        if isinstance(number, int):\n            if number < 0:\n                return largest_smallest_neg_pos(number * -1)\n            else:\n                return largest_smallest_neg_pos(number)\n        elif isinstance(number, float):\n            return largest_smallest_neg_pos(number * -1)\n        else:\n            return None\n",
        "num_ids": 248
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    try:\n        if type(a) == str:\n            a = float(a)\n        elif type(a) == float:\n            a = int(a)\n        if type(b) == str:\n            b = float(b)\n        elif type(b) == float:\n            b = int(b)\n        if type(a) == int and type(b) == int:\n            return a if a > b else b\n        elif type(a) == str and type(b) == str:\n            return a if a > b else b\n        elif type(a) == float and type(b) == float:\n            return a if a > b else b\n        elif type(a) == str and type(b) == int:\n            return a if a > b else b\n        elif type(a) == float and type(b) == int:\n            return a if a > b else b\n        elif type(a) == int and type(b) == int:\n            return a if a > b else b\n    except ValueError:\n        return None",
        "num_ids": 255
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if type(a) == str:\n        return b if a == b else None\n    elif type(a) == float or type(a) == int or type(a) == complex:\n        return b if abs(a) > abs(b) else None\n    elif type(a) == list:\n        return [compare_one(a_item, b) for a_item in a]\n    elif type(a) == set:\n        return set([compare_one(a_item, b) for a_item in a])\n    else:\n        return None\n",
        "num_ids": 137
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if type(a) == str:\n        if type(b) == str:\n            return a.split(\",\")[0] + \",\" + b.split(\",\")[0]\n        else:\n            return a.split(\",\")[0]\n    else:\n        if type(b) == str:\n            return a + \",\" + b\n        else:\n            return a + \",\" + str(b)\n",
        "num_ids": 98
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #pass\n    if type(a) == str and type(b) == str:\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == float and type(b) == float:\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == str and type(b) == int:\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == float and type(b) == int:\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == str and type(b) == bool:\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == int and type(b) == float:\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == int and type(b) == str:\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == int and type(b) == int:\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == int and type(b) == bool:\n        if a == b:\n            return a\n        else:\n            return None\n    else:\n        return None\n",
        "num_ids": 345
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if type(a) is str:\n        return str(max(a, b))\n    if type(a) is float or type(a) is int:\n        return round(a, 3)\n    if type(a) is int:\n        return round(a, 3)\n",
        "num_ids": 67
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a.isnumeric():\n        return int(a)\n    elif isinstance(a, float):\n        return float(a)\n    elif isinstance(a, str):\n        return str(a)\n    else:\n        return a\n",
        "num_ids": 61
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if type(a) == type(b):\n        if type(a) == str:\n            a = float(a)\n        if type(b) == str:\n            b = float(b)\n    if type(a) == float or type(b) == float:\n        return float(a) if a > b else a\n    if type(a) == int or type(b) == int:\n        return int(a) if a > b else a\n    return a if a > b else b\n",
        "num_ids": 119
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    type_a = type(a)\n    type_b = type(b)\n    if type_a == type_b:\n        return a if a > b else b\n    elif type_a == float and type_b == int:\n        return a if abs(a-b) <= 0.5 else b\n    elif type_a == int and type_b == float:\n        return a if abs(a-b) <= 0.5 else b\n    elif type_a == str and type_b == int:\n        return a if a == b else b\n    elif type_a == float and type_b == str:\n        return a if a == b else b\n    elif type_a == float and type_b == float:\n        return a if abs(a-b) <= 0.5 else b\n    elif type_a == float and type_b == bool:\n        return a if a == b else b\n    elif type_a == float and type_b == str:\n        return a if a == b else b\n    else:\n        return None\n",
        "num_ids": 253
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if type(a) == str:\n        if type(b) == str:\n            return a > b\n        elif type(b) == float:\n            return a > b\n        else:\n            return \"Unknown type\"\n    elif type(a) == int:\n        if type(b) == int:\n            return a > b\n        elif type(b) == float:\n            return a > b\n        else:\n            return \"Unknown type\"\n    elif type(a) == float:\n        if type(b) == float:\n            return a > b\n        elif type(b) == int:\n            return a > b\n        else:\n            return \"Unknown type\"\n    else:\n        return \"Unknown type\"\n",
        "num_ids": 176
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n <= 2 or n <= 4:\n        return True\n    elif n % 2 == 0:\n        return is_equal_to_sum_even(n//2)\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum_of_even = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_of_even += i\n    if sum_of_even % 4 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n%2 == 0:\n        return False\n    return n%4 == 0\n",
        "num_ids": 22
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # write your code here\n    if n == 0 or n == 1:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n % 4 == 0:\n        return False\n    else:\n        if n % 2 == 0:\n            return True\n    \n    return False\n",
        "num_ids": 37
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n <= 0:\n        return False\n    \n    if n % 2 == 0:\n        return is_equal_to_sum_even(n // 2)\n    \n    return is_equal_to_sum_even(n // 2) or is_equal_to_sum_even(n // 4)\n    \nprint(is_equal_to_sum_even(4))\nprint(is_equal_to_sum_even(6))\nprint(is_equal_to_sum_even(8))",
        "num_ids": 120
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n % 2 == 0:\n        return is_equal_to_sum_even(n // 2)\n    else:\n        return is_equal_to_sum_even(3 * n + 1",
        "num_ids": 72
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    nums = [n//2 for n in range(1,int(n/2)+1)]\n    return all(nums[i]%2==0 for i in range(4))\n",
        "num_ids": 46
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n <= 1:\n        return False\n    if n % 4 == 0 and n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO\n    return True\n",
        "num_ids": 10
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "num_ids": 41
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return int(math.factorial(n))\n",
        "num_ids": 13
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    if n == 1:\n        return n\n",
        "num_ids": 14
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 125\n    elif n == 6:\n        return 720\n    elif n == 7:\n        return 5040\n    elif n == 8:\n        return 40320\n    elif n == 9:\n        return 362880\n    elif n == 10:\n        return 3628800\n    elif n == 11:\n        return 3628800\n    elif n == 12:\n        return 3628800\n    elif n == 13:\n        return 3628800\n    elif n == 14:\n        return 3628800\n    elif n == 15:\n        return 3628800\n    elif n == 16:\n        return 3628800\n    elif n == 17:\n        return 3628800\n    elif n == 18:\n        return 3628800\n    elif n == 19:\n        return 3628800\n    elif n == 20:\n        return 3628800\n    elif n == 21:\n        return 3628800\n    elif n == 22:\n        return 3628800\n    elif n == 23:\n        return 3628800\n    elif n == 24:\n        return 3628800\n    elif n == 25:\n        return 3628800\n    elif n == 26:\n        return 3628800\n    elif n == 27:\n        return 3628800\n    elif n == 28:\n        return 3628800\n    elif n == 29:\n        return 3628800\n    elif n == 30:\n        return 3628800\n    elif n == 31:\n        return 3628800\n    elif n == 32:\n        return 3628800\n    elif n == 33:\n        return 3628800\n    elif n == 34:\n        return 3628800\n    elif n == 35:\n        return 3628800\n    elif n == 36:\n        return 3628800\n    elif n == 37:\n        return 3628800\n    elif n == 38:\n        return 3628800\n    elif n == 39:\n        return 3628800\n    elif n == 40:\n        return 3628800\n    elif n == 41:\n        return 3628800\n    elif n == 42:\n        return 3628800\n    elif n == 43:\n        return 3628800\n    elif n == 44:\n        return 3628800\n    elif n == 45:\n        return 3628800\n    elif n == 46:\n        return 3628800\n    elif n == 47:\n        return 3628800\n    elif n == 48:\n        return 3628800\n    elif n == 49:\n        return 3628800\n    elif n == 50:\n        return 3628800\n    elif n == 51:\n        return 3628800\n    elif n == 52:\n        return 3628800\n    elif n == 53:\n        return 3628800\n    elif n == 54:\n        return 3628800\n    elif n == 55:\n        return 3628800\n    elif n == 56:\n        return 3628800\n    elif n == 57:\n        return 3628800\n    elif n == 58:\n        return 3628800\n    elif n == 59:\n        return 3628800\n    elif n == 60:\n        return 3628800\n    elif n == 61:\n        return 3628800\n    elif n == 62:\n        return 3628800\n    elif n == 63:\n        return 3628800\n    elif n == 64:\n        return 3628800\n    elif n == 65:\n        return 3628800\n    elif n == 66:\n        return 3628800\n    elif n == 67:\n        return 3628800\n    elif n == 68:\n        return 3628800\n    elif n == 69:\n        return 3628800\n    elif n == 70:\n        return 3628800\n    elif n == 71:\n        return 3628800\n    elif n == 72:\n        return 3628800\n    elif n == 73:\n        return 3628800\n    elif n == 74:\n        return 3628800\n    eli",
        "num_ids": 1024
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11)\n",
        "num_ids": 71
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    return (n * special_factorial(n - 1))\n    # the 0 and 1 are special cases to use in the\n    # factorial function.\n    # return n! * (n-1)! * (n-2)! *... * 1!\n",
        "num_ids": 71
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n <= 0:\n        return 1\n    if n == 1:\n        return n\n    elif n == 2:\n        return n*n\n    else:\n        return n*(special_factorial(n-1) + special_factorial(n-2))\n",
        "num_ids": 66
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    factorial = 1\n    \n    if n == 0:\n        return factorial\n    \n    for i in range(2, n+1):\n        factorial = factorial * i\n        \n    return factorial\n",
        "num_ids": 54
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return n * (n - 1) * (n - 2) *... * 1",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    if len(text) > 2:\n        text = text.replace(\"  \", \"-\")\n    return text\n",
        "num_ids": 50
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    text = text.replace(' ', '_')\n    text = text.replace('  ', '_')\n    for i in range(1, len(text)):\n        if text[i] =='':\n            if text[i-1] =='':\n                text = text.replace(text[i-1], '_')\n                text = text.replace(text[i], '_')\n            else:\n                text = text.replace(text[i-1], '-' )\n                text = text.replace(text[i], '_')\n    return text\n",
        "num_ids": 134
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    output = []\n    index = 0\n    while index < len(text):\n        if text[index] == \" \":\n            index += 1\n        elif text[index] == \" \":\n            if index + 1 < len(text) and text[index + 1] == \" \":\n                index += 2\n                output.append(\"_\")\n            else:\n                output.append(\"-\")\n        else:\n            index += 1\n    return \"\".join(output)\n",
        "num_ids": 113
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return text.replace(\"  \", \"_\")\n    \ndef update_dict(d):\n    \"\"\"\n    Given a dictionary d (a Python dictionary) which contains the \n    numbers from a list, it generates a new dictionary with \n    all the numbers that were added, but have not been modified.\n    \"\"\"\n    result = {}\n    for i in d:\n        if type(d[i])!= dict:\n            result[i] = d[i]\n        else:\n            result[i] = d[i]\n            for j in result:\n                if result[j] == d[i]:\n                    del result[j]\n    return result\n",
        "num_ids": 154
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return re.sub(r\"\\s+\", \"-\", text)\n",
        "num_ids": 18
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    splits = []\n    for i, char in enumerate(text):\n        if i % 2 == 0:\n            splits.append(char)\n        elif char =='':\n            splits.append('_')\n    return '_'.join(splits)\n",
        "num_ids": 65
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    text = text.replace(\" \", \"-\")\n    words = text.split(\" \")\n    spaces = 0\n    for word in words:\n        if len(word) > spaces:\n            spaces = len(word)\n    for i in range(spaces):\n        words[i] = \" \" + words[i]\n    return \" \".join(words)\n    \ndef main():\n    while True:\n        i = input(\"Enter input: \")\n        if i == \"quit\":\n            print(\"Good bye\")\n            break\n        else:\n            i = fix_spaces(i)\n            print(i)\n            \nmain()",
        "num_ids": 152
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return text.replace(' ', '_')\n    \ndef pretty(dict):\n    \"\"\"\n    Given a dictionary of objects, pretty prints them out.\n    \n    Args:\n        dict (dict): dictionary of objects\n    \"\"\"\n    for key, value in dict.items():\n        print(f'{key}: {value}')\n        ",
        "num_ids": 79
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_text = \"\"\n    for c in text:\n        if c.isspace():\n            new_text += \"_\"\n        else:\n            new_text += c\n    return new_text\n    \n",
        "num_ids": 50
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    text = text.replace(\" \", \"_\")\n    if text.find(\" \") > 0:\n        text = text.replace(\" \", \"_\")\n        text = text.replace(\"  \", \" \")\n        text = text.replace(\"   \", \" \")\n        text = text.replace(\"    \", \" \")\n    \n    return text\n",
        "num_ids": 80
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # create a list of all the valid file names\n    file_name_list = []\n    # add the valid names to a list\n    for file in os.listdir(\"./\"):\n        if file.endswith(\".txt\"):\n            if file_name.startswith(\".\"):\n                file_name_list.append(file)\n            else:\n                if file_name == file.lower():\n                    file_name_list.append(file)\n    # check if all the name's in the list are valid\n    for name in file_name_list:\n        if len(name) < 3 or name[0] == \".\":\n            return 'No'\n        if name[0] not in ['a', 'A', 'z', '0', '9']:\n            return 'No'\n    # check if the file's name starts with a dot '.'\n    if name[0] == '.':\n        if len(name) < 2:\n            return 'No'\n        if name[1:len(name) - 1] == '.':\n            return 'No'\n    # check if the string before the dot contains an empty string\n    if name[0] == '.' and not name[1:len(name) - 1] == '.':\n        if name[1:len(name) - 1] == '':\n            return 'No'\n    # check if the string before the dot is empty\n    if not name[1:len(name) - 1] == '':\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 362
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(file_name) < 3:\n        return 'No'\n    elif file_name[0].isalpha() or len(file_name) <= 3:\n        return 'No'\n    else:\n        for i in range(len(file_name)-3):\n            if file_name[i].isalpha() or len(file_name) <= 3:\n                continue\n            else:\n                if file_name[i] == '.' or file_name[i] == '.':\n                    return 'No'\n        return 'Yes'\n    \ndef to_upper(string):\n    \"\"\"Create a function which takes a string representing a text file, and returns the\n    string in upper case.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    to_upper(\"hello.txt\") # => 'LMAO'\n    to_upper(\"hello.exe\") # => 'HELO' (the name should start with a latin alphapet letter)\n    to_upper(\"hello.dll\") # => 'LMAO'\n    \"\"\"\n    if len(string) < 3:\n        return string\n    elif string[0].isalpha() or len(string) <= 3:\n        return string.upper()\n    else:\n        for i in range(len(string)-3):\n            if string[i].isalpha() or len(string) <= 3:\n                continue\n            else:\n                if string[i] == '.' or string[i] == '.':\n                    return string.upper()\n        return string.upper()\n",
        "num_ids": 483
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    #Check the file's name\n    if not file_name:\n        return 'No'\n    if not file_name.endswith('.'):\n        file_name += '.'\n    \n    #Check the file's name\n    for i in range(3):\n        if not file_name[i].isalpha():\n            return 'No'\n        if not file_name[i].isdigit():\n            return 'No'\n        if file_name[i] == '.':\n            return 'No'\n    return 'Yes'",
        "num_ids": 129
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(file_name) < 3:\n        return \"Invalid file name\"\n    if not file_name[0].isdigit():\n        return \"Invalid file name\"\n    if file_name[0] == \"0\":\n        return \"Invalid file name\"\n    if file_name[0].isdigit() and file_name[1].isdigit() and file_name[2].isalpha():\n        if file_name[2]!= '.' and file_name[2]!= '\\n':\n            return \"Invalid file name\"\n        for c in file_name[2:]:\n            if not c.isalpha():\n                return \"Invalid file name\"\n        return \"Valid file name\"\n    else:\n        return \"Invalid file name\"\n",
        "num_ids": 181
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if file_name == \"\":\n        return \"No\"\n    if len(file_name) > 3:\n        return \"Yes\"\n    if not \".\" in file_name:\n        return \"No\"\n    if not file_name.startswith('.'):\n        return \"No\"\n    if not (file_name[1] in ['txt', 'exe', 'dll'] or file_name[0] in ['a', 'z']):\n        return \"Yes\"\n    return \"No\"\n",
        "num_ids": 119
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    name_check = False\n    name_check = file_name[:3].isdigit() and file_name[0].isdigit() and file_name[1:3].isalnum()\n    \n    return name_check\n",
        "num_ids": 58
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Tests if the file name is valid\n    if not os.path.isfile(file_name):\n        raise ValueError(\"File '\"+file_name+\"': does not exist\")\n    if len(file_name)<3:\n        raise ValueError(\"File '\"+file_name+\"': name is not valid\")\n    if not file_name[0] in ['.', '_', '-']:\n        raise ValueError(\"File '\"+file_name+\"': name is not valid: first character should be '.'\")\n    if not file_name[-1] in ['.', '_', '-']:\n        raise ValueError(\"File '\"+file_name+\"': name is not valid: last character should be '.'\")\n    if '.' in file_name:\n        raise ValueError(\"File '\"+file_name+\"' contains invalid dot symbol '.'\")\n    if not file_name.startswith('_') and not file_name.startswith('.'):\n        raise ValueError(\"File '\"+file_name+\"' contains invalid character '.'\")\n    if not file_name.endswith('.txt'):\n        raise ValueError(\"File '\"+file_name+\"' contains invalid extension 'txt'\")\n    if not 'txt' in os.listdir(os.getcwd()):\n        raise ValueError(\"File '\"+file_name+\"' contains invalid extension 'txt'\")\n    if not '.exe' in file_name:\n        raise ValueError(\"File '\"+file_name+\"' contains invalid extension 'exe'\")\n    if not 'dll' in file_name:\n        raise ValueError(\"File '\"+file_name+\"' contains invalid extension 'dll'\")\n",
        "num_ids": 403
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(file_name) <= 4 or '.' not in file_name:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 37
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if file_name.lower().count('.') < 3:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 33
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    file_name = file_name.lower()\n    if len(file_name) <= 2 or file_name[0] == \".\" or file_name[0] == \" \":\n        return \"No\"\n    if file_name.startswith(\"0\") or file_name.startswith(\"0.\") or file_name.startswith(\"0\"):\n        return \"No\"\n    if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz01234567890\" or file_name[-1] in \".?-\":\n        return \"No\"\n    return \"Yes\"\n",
        "num_ids": 150
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum_list = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum_list += i ** 3\n        else:\n            sum_list += i ** 4\n    return sum_list\n",
        "num_ids": 53
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum([i ** 2 for i in lst if i % 3!= 0 and i % 4!= 0])\n",
        "num_ids": 29
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    lst = [i**2 for i in lst if i>0]\n    lst = [i*i for i in lst if i>0]\n    sum = 0\n    for i in lst:\n        sum = sum + i\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum_of_squares = 0\n    for i in range(len(lst)):\n        if(lst[i]%3 == 0):\n            sum_of_squares += lst[i]**3\n        if(lst[i]%4 == 0):\n            sum_of_squares += lst[i]**4\n    return sum_of_squares\n",
        "num_ids": 93
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    summ = 0\n    for i in lst:\n        if i >= 0 and i % 3 == 0 and i % 4!= 0:\n            summ += i ** 2\n    return summ\n",
        "num_ids": 47
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum([int(x)**2 for x in lst if x%3==0 and x%4!=0])\n    \ndef multiply(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall multiply the integer entry if its index is \n    a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The \n    function shall then return the product of all entries.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -128\n    \"\"\"\n    product = 1\n    for i in range(len(lst)):\n        product*=lst[i]\n    return product\n    \ndef divide(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall divide the integer entry if its index is a \n    multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The \n    function shall then return the quotient of all entries.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 2\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -1.5\n    \"\"\"\n    quotient = 1\n    for i in range(len(lst)):\n        if lst[i]%3==0:\n            quotient*=lst[i]\n    return quotient\n    \ndef is_palindrome(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall return True if the integer entry is \n    in the list, and False if it is not. The function shall return None if there is a problem.\n    \n    Examples:\n    For lst = [1,2,3] the output should be True\n    For lst = []  the output should be False\n    For lst = [-1,-5,2,-1,-5]  the output should be False\n    \"\"\"\n    if len(lst)<2:\n        return None\n    return True if lst[0]==lst[-1] else False\n    \ndef greater_than_or_equal(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall return True if the integer entry is greater than or equal to the \n    current entry, and False if it is less than or equal to the current entry. The function shall return None if there is a problem.\n    \n    Examples:\n    For lst = [1,2,3,5] the output should be True\n    For lst = []  the output should be False\n    For lst = [-1,-5,2,-1,-5]  the output should be False\n    \"\"\"\n    if len(lst)<2:\n        return None\n    return lst[0]>lst[-1]\n    \ndef less_than(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall return True if the integer entry is less than the current entry, and \n    False if it is greater than the current entry. The function shall return None if there is a problem.\n    \n    Examples:\n    For lst = [1,2,3,5] the output should be True\n    For lst = []  the output should be False\n    For lst = [-1,-5,2,-1,-5]  the output should be True\n    \"\"\"\n    if len(lst)<2:\n        return None\n    return lst[0]<lst[-1]\n    \ndef is_square(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall return True if the integer entry is a square and false otherwise. \n    The function shall return None if there is a problem.\n    \n    Examples:\n    For lst = [1,2,3,4] the output should be True\n    For lst = [] ",
        "num_ids": 1025
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = 0\n    for i in lst:\n        if i%3 == 0 or i%4 == 0:\n            s += i**2\n    return s\n",
        "num_ids": 40
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    out=0\n    for i in range(len(lst)):\n        if i%3==0 and i%4!=0:\n            out=out+lst[i]**2\n        elif i%3!=0 and i%4==0:\n            out=out+lst[i]**3\n        elif i%3==0 and i%4!=0:\n            out=out+lst[i]**4\n    return out\n",
        "num_ids": 112
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum_sum = 0\n    for item in lst:\n        if (item % 3 == 0 and item % 4!= 0):\n            sum_sum += item ** 2\n    return sum_sum\n",
        "num_ids": 48
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    total = 0\n    for i in lst:\n        total += i*i\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = \"\"\n    for word in sentence.split():\n        if len(result) % 2 == 1:\n            result += word\n        else:\n            result = result + word + \" \"\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    words = sentence.split()\n    for word in words:\n        if len(word) == 1:\n            return word\n    return \" \".join(words)",
        "num_ids": 38
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    sentence = sentence.lower()\n    sorted_sentence = sorted(sentence.split())\n    words = list(set(sorted_sentence))\n    \n    if len(words) < 2:\n        return sentence\n    \n    prime = [1, 2]\n    for word in words:\n        if len(word) == 1:\n            prime.append(2)\n        elif len(word) == 2:\n            prime.append(3)\n        else:\n            prime.append(4)\n    \n    count = 1\n    for i in prime:\n        temp = len(sorted_sentence)\n        for j in range(len(words) - 1):\n            if sorted_sentence[j] + count == sorted_sentence[j + 1]:\n                temp = j + 1\n        count += 1\n        if temp > len(words):\n            break\n    \n    return ''.join(sorted(sorted_sentence[:temp]))\n",
        "num_ids": 232
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert len(sentence) > 0, \"Input must not be empty.\"\n    words = sentence.split()\n    words_len = [len(w) for w in words]\n    words_max = max(words_len)\n    assert words_max > 0, \"Input must not be empty.\"\n    assert all(2 <= w <= words_max for w in words_len), \"Each word in the sentence should be a prime number.\"\n    assert len(set(words_len)) == words_len[0], \"Words in sentence should be unique.\"\n    return''.join(sorted(words))\n",
        "num_ids": 139
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    words = sentence.split()\n    return \" \".join(words)\n",
        "num_ids": 18
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n = len(sentence)\n    if n < 2:\n        return sentence\n    \n    for i in range(1, n // 2 + 1):\n        if not is_prime(i):\n            continue\n        \n        if i >= n // 2 + n % 2:\n            n_prime = i\n            if n_prime % 3 == 0:\n                continue\n        \n        for j in range(2, n - i):\n            if n_prime % j == 0:\n                n_prime = j\n                break\n    \n    if n_prime == 1:\n        return sentence\n    \n    if n_prime % 3 == 0:\n        return sentence[:n_prime] + 'e' + sentence[n_prime:]\n    else:\n        return sentence[:n_prime] + 'le' + sentence[n_prime:]\n    \n",
        "num_ids": 199
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # split sentence in list\n    sentence = sentence.split()\n    # take the first word as the last word in the sentence\n    word = sentence[-1]\n",
        "num_ids": 40
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sentence = sentence.split()\n    return ''.join(sorted(sentence))\n",
        "num_ids": 23
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    words_list = sentence.split()\n    if len(words_list) < 3:\n        return sentence\n    new_sentence =''.join(words_list[:-2]) +'' +''.join(words_list[-2:])\n    if len(new_sentence) % 2 == 0:\n        return new_sentence\n    else:\n        return new_sentence[::-1]\n",
        "num_ids": 96
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sentence[:-1]\n",
        "num_ids": 9
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n.isdigit() and x.isdigit():\n        if int(x) * int(n) == 0:\n            return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    try:\n        return f\"{int(n)}/{int(x)}\" == 0\n    except:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if str(x) + \"/\" + str(n) == str(x) * n:\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    try:\n        n = float(n)\n    except ValueError:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    numerator, denominator = x.split('/')\n    if numerator == '0':\n        return True\n    elif denominator == '0':\n        return False\n    elif int(numerator) == 0 and int(denominator) == 0:\n        return True\n    elif int(numerator) == 0 or int(denominator) == 0:\n        return False\n    else:\n        return simplify(numerator + '/' + denominator, int(numerator)/int(denominator))\n",
        "num_ids": 126
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def simplify(x, n):\n        if x == \"0\" or n == \"0\":\n            return False\n        num, den = x.split(\"/\")\n        if int(num) * int(den) == 0:\n            return False\n        else:\n            return int(num) * int(den) == simplify(int(num) * int(den), int(num))\n    return simplify(x, n)\n",
        "num_ids": 100
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Solution:\n    numerator = int(n[1:])\n    denominator = int(n[0])\n    \n    if denominator == 0:\n        return False\n    \n    if numerator == 0:\n        return False\n    \n    numerator_remainder = numerator % denominator\n    \n    if numerator_remainder == 0:\n        return False\n    \n    return True\n",
        "num_ids": 100
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Check if the fraction is \"perfect\"\n    if x == n:\n        return True\n    \n    # Get the integer part of the fraction\n    numerator = x[0]\n    denominator = x[1]\n    \n    # Check if the fraction is zero\n    if denominator == 0:\n        return False\n    \n    # Get the numerator part of the fraction\n    num_numerator = numerator // denominator\n    \n    # Check if the fraction is a whole number\n    if numerator % denominator == 0:\n        return True\n    \n    # If not, then return False\n    return False\n",
        "num_ids": 149
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return False\n",
        "num_ids": 12
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Check\n    if n == 0:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n",
        "num_ids": 6
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    nums = list(nums)\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums\n    \n    point = 0\n    while len(nums) > 1:\n        sums = 0\n        for i in range(len(nums)):\n            sums += nums[i]\n        if nums[0] == sums:\n            nums = nums[1:]\n        else:\n            point = 0\n            for i in range(len(nums)):\n                point += nums[i]\n                if nums[i] < point:\n                    point = nums[i]\n        if point == 0:\n            return nums\n    return nums\n",
        "num_ids": 178
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if nums == []:\n        return []\n    sum_digits = sum(map(int, nums))\n    nums.sort()\n    return nums\n",
        "num_ids": 41
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Your code here\n    nums.sort()\n    nums.reverse()\n    return nums\n    pass\n",
        "num_ids": 29
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    nums = list(map(int, nums))\n    nums.sort(reverse=True)\n    return nums\n    \n    \ndef remove_punctuation(n):\n    \"\"\"\n    Remove punctuation from the given string.\n    Note: If the given string has punctuation, then this function will return it unchanged.\n",
        "num_ids": 78
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(nums) == 0:\n        return []\n    s = sum(nums)\n    nums.sort(key=lambda x: abs(x-s))\n    return nums\n",
        "num_ids": 48
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def sort(nums, start, end):\n        sum = 0\n        for i in range(start, end + 1):\n            sum += nums[i]\n        return sum\n",
        "num_ids": 44
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n",
        "num_ids": 24
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sums = []\n    for item in nums:\n        sums.append(int(item))\n    sums.sort()\n    return sums\n",
        "num_ids": 37
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n",
        "num_ids": 28
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    num = sorted(nums)\n    odds = [x for x in num if x % 10 > x % 10]\n    return len(odds) * (len(odds) + 1) // ",
        "num_ids": 49
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums) - i):\n            if nums[j] > 10 and nums[j] % 2 == 1:\n                count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #return len(nums) - len(set(nums) - set(nums[::-1]))\n    return len(list(set(nums)-set(nums[::-1])))\n",
        "num_ids": 51
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even = 0\n    odd = 0\n    for x in nums:\n        if x > 10:\n            if x % 10 > 0:\n                odd += 1\n            else:\n                even += 1\n    return even + odd\n",
        "num_ids": 55
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    out = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2 == 1:\n            out += 1\n        elif nums[i] % 2 == 1 and nums[i] > 10:\n            out += 1\n    return out\n    \n",
        "num_ids": 80
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # write your code here\n    count = 0\n    first = nums[0]\n    last = nums[-1]\n    for i in range(len(nums)-1):\n        if nums[i] > 10:\n            count += 1\n        if nums[i] % 2 == 1 and first % 2 == 1:\n            count += 2\n        if nums[i] % 2 == 1 and last % 2 == 1:\n            count += 2\n    if nums[-1] % 2 == 1:\n        count += 1\n    return count\n",
        "num_ids": 133
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    answer = 0\n    n = len(nums)\n    for i in range(n):\n        if nums[i] > 10 and (nums[i] % 2 == 1 or nums[i] % 2 == 3):\n            answer += 1\n    return answe",
        "num_ids": 65
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code here\n    out = 0\n    for num in nums:\n        if num > 10 and (not (num % 10)):\n            out += 1\n    return out\n",
        "num_ids": 44
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = sum(set(nums))\n    return s*2 if s%2!=0 else s",
        "num_ids": 26
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    even = 0\n    odd = 0\n    \n    for num in nums:\n        if num >= 10 and num % 10 > 0:\n            even += 1\n        if num % 10 < 0:\n            odd += 1\n    \n    return even + odd\n",
        "num_ids": 63
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n <= 2:\n        return 1\n",
        "num_ids": 12
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    import math\n    \n    # Allowed error if n is not a positive integer\n    if n == 0:\n        return 0\n",
        "num_ids": 33
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def solve(n):\n        a = [1 for i in range(n + 1)]\n        for i in range(2, n + 1):\n            for j in range(i, n + 1):\n                k = i * i - j + 1\n                if k % 3 == 0:\n                    a[i] = j\n        return a[n]\n    return solve(n)\n",
        "num_ids": 91
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s, a, b = 0, [1], []\n    for i in range(1, n + 1):\n        s += i\n        a.append(i * i - i + 1)\n    for i in range(1, n + 1):\n        b.append(i * i - i + 1)\n    return s // 3, a, b\n",
        "num_ids": 84
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a = [1, 3, 7, 13, 21]\n    triple_sum = 0\n    for i in range(len(a)):\n        triple_sum += (a[i] * a[i] - a[i] + 1) * 3\n        if triple_sum >= n:\n            return 1\n    return 0\n",
        "num_ids": 80
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    return 3 * n - n + 1\n",
        "num_ids": 13
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = [1, 3, 7, 13, 21]\n    for i in range(1, n):\n        a.append(a[i] - i + 1)\n    return len(a)\n",
        "num_ids": 49
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # convert to a list to perform operations on\n    return sum([i * i - i + 1 for i in range(1, n + 1)])\n",
        "num_ids": 36
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Your code here\n    a = []\n    for i in range(n):\n        a.append(i * i - i + 1)\n    \n    triples = 0\n    for i in range(n):\n        for j in range(n - i):\n            k = j + i\n            if k <= n:\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    triples += 1\n    return triples\n",
        "num_ids": 110
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst = []\n    s1 = []\n    s2 = []\n    for i in planet1:\n        if i[0] == 'S':\n            s1.append(i)\n        elif i[0] == 'M':\n            lst.append(i)\n    for i in planet2:\n        if i[0] == 'S':\n            s2.append(i)\n        elif i[0] == 'M':\n            lst.append(i)\n    \n    #create lists to store the indices of the planet orbits\n    #these indices are used to get the planets' orbits\n    #these planets' orbits are then appended to lst\n    #find the closest planet to the sun\n    #append the closest planet's orbit to the sorted lst\n",
        "num_ids": 183
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    planet1_object = []\n    planet2_object = []\n",
        "num_ids": 17
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    a = \"Saturn\"\n    b = \"Uranus\"\n    c = \"Venus\"\n    d = \"Earth\"\n    e = \"Mars\"\n    f = \"Jupiter\"\n    g = \"Neptune\"\n    h = \"Mercury\"\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 in (a, b, c, d, e, f, g, h):\n        pass\n    elif planet2 in (a, b, c, d, e, f, g, h):\n        pass\n    else:\n        return (planet1, planet2)\n    return (planet1, planet2)\n",
        "num_ids": 162
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: Write your solution here\n    # TODO: Remove pass and write your solution here\n    pass\n",
        "num_ids": 27
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    planet1 = planet1.split(' ')\n    planet2 = planet2.split(' ')\n    if planet1 == planet2:\n        return (None, None)\n    elif planet1 == 'Mercury' or planet1 == 'Mercury ':\n        if planet2 == 'Jupiter':\n            return (\"Saturn\", \"Uranus\")\n        elif planet2 == 'Neptune':\n            return (\"Jupiter\", \"Uranus\")\n    elif planet2 == 'Venus':\n        if planet1 == 'Jupiter':\n            return (\"Saturn\", \"Uranus\")\n        elif planet1 == 'Neptune':\n            return (\"Jupiter\", \"Uranus\")\n    elif planet2 == 'Earth':\n        if planet1 == 'Jupiter':\n            return (\"Jupiter\", \"Neptune\")\n        elif planet1 == 'Saturn':\n            return (\"Saturn\", \"Uranus\")\n    elif planet2 == 'Mars':\n        if planet1 == 'Jupiter':\n            return (\"Saturn\", \"Uranus\")\n        elif planet1 == 'Neptune':\n            return (\"Jupiter\", \"Uranus\")\n    elif planet2 == 'Uranus':\n        if planet1 == 'Jupiter':\n            return (\"Saturn\", \"Uranus\")\n        elif planet1 == 'Saturn':\n            return (\"Jupiter\", \"Uranus\")\n    elif planet2 == 'Neptune':\n        if planet1 == 'Jupiter':\n            return (\"Saturn\", \"Uranus\")\n        elif planet1 == 'Saturn':\n            return (\"Jupiter\", \"Uranus\")\n    else:\n        return (None, None)\n    \n    \ndef f(num):\n    '''\n    The function should return a string with the planet name that has the\n    distance from num. Write a function that takes a positive integer\n    and returns a string that represents the distance from num. The\n    function should return an empty string if num is a number, or the\n    correct string if num is not a positive integer.\n    '''\n    if num == 0:\n        return \"\"\n    else:\n        return str(num) +'' + str(bf(str(num), str(num+1)))\n    \ndef g(num):\n    '''\n    The function should return a string with the distance from num. \n    Write a function that takes a positive integer and returns a string\n    that represents the distance from num. The function should return an\n    empty string if num is a number, or the correct string if num is not\n    a positive integer.\n    '''\n    if num == 0:\n        return \"\"\n    else:\n        return str(bf(str(num), str(num+1)))\n    \ndef h(num):\n    '''\n    The function should return a string with the position of num. \n    Write a function that takes a positive integer and returns a string\n    that represents the position of num. The function should return an\n    empty string if num is a number, or the correct string if num is not\n    a positive integer.\n    '''\n    if num == 0:\n        return \"\"\n    else:\n        return str(bf(str(num), str(num+1)))\n    \ndef i(num):\n    '''\n    The function should return a string with the name of the planet. \n    Write a function that takes a positive integer and returns a string\n    that represents the name of num. The function should return an empty\n    string if num is a number, or the correct string if num is not a\n    positive integer.\n    '''\n    if num == 0:\n        return \"\"\n    else:\n        return str(bf(str(num), str(num+1)))\n    \ndef j(num):\n    '''\n    The function should return a string with the name of the planet. \n    Write a function that takes a positive integer and returns a string\n    that represents the name of num. The function should return an empty\n    string if num is a number, or the correct string if num is not a\n    positive integer.\n    '''\n    if num == 0:\n        return \"\"\n    else:\n        return str(bf(str(num), str(num+1)))\n    \ndef k(num):\n    '''\n    The function should return a string with the name of the planet. \n    Write a functio",
        "num_ids": 1026
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (sorted([planet1, planet2], key = lambda planet: distance_between_two_positions(planet1, planet2, sun)))\n",
        "num_ids": 36
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pass\n    ",
        "num_ids": 5
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if planet1 not in planet1_planet2:\n        return \"planet1 or planet2 is not correct planet name\"\n    if planet2 not in planet1_planet2:\n        return \"planet2 is not correct planet name\"\n    else:\n        a = planet1_planet2.index(planet1)\n        b = planet1_planet2.index(planet2)\n        c = planet2_planet1.index(planet2)\n        \n        return planet1_planet2[a:b+1] + planet1_planet2[c+1:a:-1]\n        #print(f\"a: {a}, b: {b}, c: {c}\")\n    \ndef bf2(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf2(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf2(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf2(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    if planet1 not in planet1_planet2:\n        return \"planet1 or planet2 is not correct planet name\"\n    if planet2 not in planet1_planet2:\n        return \"planet2 is not correct planet name\"\n    else:\n        a = planet1_planet2.index(planet1)\n        b = planet1_planet2.index(planet2)\n        c = planet2_planet1.index(planet2)\n        \n        return planet1_planet2[a:b+1] + planet1_planet2[c+1:a:-1]\n        #print(f\"a: {a}, b: {b}, c: {c}\")\n    \ndef bf3(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf3(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf3(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf3(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    if planet1 not in planet1_planet2:\n        return \"planet1 or planet2 is not correct planet name\"\n    if planet2 not in planet1_planet2:\n        return \"planet2 is not correct planet name\"\n    else:\n        a = planet1_planet2.index(planet1)\n        b = planet1_planet2.index(planet2)\n        c = planet2_planet1.index(planet2)\n        \n        return planet1_planet2[a:b+1] + planet1_planet2[c+1:a:-1]\n        #print(f\"a: {a}, b: {b}, c: {c}\")\n    \ndef bf4(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet",
        "num_ids": 1024
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if planet1 not in (\"Mercury\", \"Uranus\", \"Neptune\", \"Saturn\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"):\n        return (\"\",)\n    if planet2 not in (\"Mercury\", \"Uranus\", \"Neptune\", \"Saturn\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"):\n        return (\"\",)\n    \n    planet1_str, planet2_str = planet1.split(\" \"), planet2.split(\" \")\n    \n    # First get the list of all planets that are orbiting the sun\n    solar_system_list = list(map(lambda planet: planet.split(\" \"), planet1_str))\n",
        "num_ids": 173
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if planet1 == \"Jupiter\":\n        if planet2 == \"Saturn\":\n            return (\"Saturn\", \"Uranus\")\n        elif planet2 == \"Uranus\":\n            return (\"Uranus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n        else:\n            return (\"Uranus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Earth\":\n        if planet2 == \"Uranus\":\n            return (\"Uranus\", \"Venus\", \"Mercury\", \"Jupiter\", \"Saturn\")\n        elif planet2 == \"Neptune\":\n            return (\"Neptune\", \"Uranus\")\n        else:\n            return (\"Uranus\", \"Venus\", \"Mercury\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Mars\":\n        if planet2 == \"Uranus\":\n            return (\"Uranus\", \"Venus\", \"Mercury\", \"Jupiter\", \"Saturn\")\n        elif planet2 == \"Neptune\":\n            return (\"Neptune\", \"Uranus\")\n        else:\n            return (\"Uranus\", \"Venus\", \"Mercury\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Jupiter\":\n        if planet2 == \"Uranus\":\n            return (\"Uranus\", \"Venus\", \"Mercury\", \"Saturn\", \"Jupiter\")\n        elif planet2 == \"Neptune\":\n            return (\"Neptune\", \"Uranus\")\n        else:\n            return (\"Uranus\", \"Venus\", \"Mercury\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Saturn\":\n        if planet2 == \"Uranus\":\n            return (\"Uranus\", \"Venus\", \"Mercury\", \"Jupiter\", \"Saturn\")\n        elif planet2 == \"Neptune\":\n            return (\"Neptune\", \"Uranus\")\n        else:\n            return (\"Uranus\", \"Venus\", \"Mercury\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Uranus\":\n        if planet2 == \"Neptune\":\n            return (\"Uranus\", \"Venus\", \"Mercury\", \"Saturn\", \"Jupiter\")\n        elif planet2 == \"Saturn\":\n            return (\"Saturn\", \"Uranus\")\n        else:\n            return (\"Uranus\", \"Venus\", \"Mercury\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Neptune\":\n        if planet2 == \"Uranus\":\n            return (\"Uranus\", \"Venus\", \"Mercury\", \"Saturn\", \"Jupiter\")\n        elif planet2 == \"Saturn\":\n            return (\"Saturn\", \"Uranus\")\n        else:\n            return (\"Uranus\", \"Venus\", \"Mercury\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Venus\":\n        if planet2 == \"Saturn\":\n            return (\"Saturn\", \"Uranus\")\n        elif planet2 == \"Uranus\":\n            return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\")\n        else:\n            return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\")\n    if planet1 == \"Mercury\":\n        if planet2 == \"Uranus\":\n            return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\")\n        elif planet2 == \"Saturn\":\n            return (\"Saturn\", \"Uranus\")\n        else:\n            return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\")\n    if planet1 == \"Jupiter\":\n        if planet2 == \"Uranus\":\n            return (\"Uranus\", \"Venus\", \"Saturn\", \"Jupiter\")\n        elif planet2 == \"Saturn\":\n            return (\"Saturn\", \"Uranus\")\n        else:\n            return (\"Uranus\", \"Venus\", \"Saturn\", \"Jupiter\")\n    if planet1 == \"Saturn\":\n        if planet2 == \"Uranus\":\n            return (\"Uranus\", \"Venus\", \"Saturn\", \"Jupiter\")\n        elif planet2 == \"Jupiter\":\n            return (\"Saturn\", \"Uranus\")\n        else:\n            return (\"Uranus\", \"Saturn\", \"Jupiter\", ",
        "num_ids": 1025
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Initialize an empty list\n    lst_sorted = []\n    # Initialize a dictionary\n    dictionary = {}\n    # Loop through the list\n    for word in lst:\n        # Initialize the last index\n        last_index = len(word) - 1\n        # Check the last index and the length of the word\n        if last_index in dictionary:\n            # if it is an index that has already been added\n            # remove it from the dictionary\n            word_index = dictionary[last_index]\n            del dictionary[last_index]\n            # Add the word to the dictionary and return the sorted list\n            dictionary[last_index] = word_index\n            lst_sorted.append(word)\n        # If not, add it to the dictionary and append the last index\n        else:\n            dictionary[last_index] = word\n            lst_sorted.append(word)\n            \n    # Return the sorted list of words\n    return lst_sorted\n",
        "num_ids": 231
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    words = list(lst)\n    lengths = []\n    for word in words:\n        length = len(word)\n        if length % 2 == 0:\n            lengths.append(word)\n    return sorted(words, key=lambda word: len(word), reverse=True)\n",
        "num_ids": 69
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sorted(lst, key = len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst_sort = sorted(lst)\n    lst_count = []\n    for i in lst_sort:\n        if i.isnumeric():\n            lst_count.append(i)\n    return lst_sort\n",
        "num_ids": 58
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sorted(lst, key=len, reverse=True)\n    ",
        "num_ids": 18
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # double check function\n    def list_sorting(lst):\n        arr = []\n        for word in lst:\n            if len(word) % 2!= 0:\n                arr.append(word[:-1])\n            else:\n                arr.append(word)\n        return arr\n    return list_sorting(lst)\n",
        "num_ids": 82
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sorted(lst, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sorted(lst, key=len",
        "num_ids": 11
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def list_sort(words):\n        \"\"\"Return the sorted list by the word length.\n        \"\"\"\n        result = []\n        for word in words:\n            if len(word) % 2 == 0:\n                result.append(word[:len(word)//2])\n                result.append(word[len(word)//2:])\n            else:\n                result.append(word)\n        return result\n    words = sorted_list_sum(lst)\n    return list_sort(words)\n",
        "num_ids": 119
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Assuming you don't have any duplicates in the list\n    sorted_list = sorted(lst)\n    # This loop iterates through the list in a separate loop\n    # The while loop has to loop until all words have been processed\n    # For each word, the string is not removed, so the loop just iterates\n    # the loop, and checks if there are any words with the same length\n    # If yes, then the string is not removed from the list\n    # The first letter of each word is removed from the list\n    # The second letter of each word is removed from the list\n    # The third letter of each word is removed from the list\n    # The forth letter of each word is removed from the list\n    #...etc.\n    # The if statements have to be nested loops\n    # The print statement prints the word in alphabetical order\n    # The loop must end in the while loop to not have run out of\n    # memory\n    # This loop is not nested, because it is used only on the result\n    # of the if statement\n    for i in range(len(sorted_list)):\n        if len(sorted_list[i]) % 2!= 0:\n            sorted_list[i] = sorted_list[i][1:]\n    #print(\"The list is now: \" + str(sorted_list))\n    return sorted_list\n",
        "num_ids": 314
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)\n",
        "num_ids": 47
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    assert n > 0\n    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 28
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    if is_prime(n):\n        return x\n    elif n < 0 or n % 2 == 0:\n        return y\n    elif n % 2 == 1:\n        return x\n    else:\n        return x_or_y(n // 2, x, y)\n",
        "num_ids": 69
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # YOUR CODE HERE\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # test first\n    if n % 2 == 0 or n == 1:\n        # test second\n        if n in (3, 5, 7, 11, 13):\n            return x\n        # test third\n        elif n == 2:\n            return y\n        # test fourth\n        elif n == 3:\n            return x\n    # test fifth\n    elif n == 6 or n == 7 or n == 11:\n        # test sixth\n        if n == 6:\n            return y\n        # test seventh\n        elif n == 7:\n            return x\n        # test eighth\n        elif n == 11:\n            return x\n    # test fiftieth\n    elif n == 12 or n == 13:\n        # test fiftieth second\n        if n == 12:\n            return y\n        # test fiftieth third\n        elif n == 13:\n            return x\n        # test fiftieth fourth\n        elif n == 14 or n == 15:\n            return y\n    # test fiftieth fifth\n    elif n == 16 or n == 17 or n == 19:\n        # test fiftieth sixth\n        if n == 16:\n            return y\n        # test fiftieth seventh\n        elif n == 17:\n            return x\n        # test fiftieth eighth\n        elif n == 19:\n            return y\n    # test fiftieth tenth\n    elif n == 20 or n == 21:\n        # test fiftieth eighth second\n        if n == 20:\n            return y\n        # test fiftieth tenth third\n        elif n == 21:\n            return x\n        # test fiftieth tenth fourth\n        elif n == 22 or n == 23:\n            return y\n    # test fiftieth nth\n    elif n == 24 or n == 25 or n == 26:\n        # test fiftieth eighth second\n        if n == 24:\n            return y\n        # test fiftieth tenth third\n        elif n == 25:\n            return x\n        # test fiftieth tenth fourth\n        elif n == 26:\n            return y\n    # test fiftieth nth fifth\n    elif n == 27 or n == 28 or n == 29:\n        # test fiftieth eighth second\n        if n == 27:\n            return y\n        # test fiftieth tenth third\n        elif n == 28:\n            return x\n        # test fiftieth tenth fourth\n        elif n == 29:\n            return y\n    # test fiftieth nth sixth\n    elif n == 30 or n == 31 or n == 32:\n        # test fiftieth eighth second\n        if n == 30:\n            return y\n        # test fiftieth tenth third\n        elif n == 31:\n            return x\n        # test fiftieth tenth fourth\n        elif n == 32:\n            return y\n    # test fiftieth nth seventh\n    elif n == 33 or n == 34 or n == 35:\n        # test fiftieth eighth second\n        if n == 33:\n            return y\n        # test fiftieth tenth third\n        elif n == 34:\n            return x\n        # test fiftieth tenth fourth\n        elif n == 35:\n            return y\n    # test fiftieth nth eighth\n    elif n == 36 or n == 37 or n == 38:\n        # test fiftieth eighth second\n        if n == 36:\n            return y\n        # test fiftieth tenth third\n        elif n == 37:\n            return x\n        # test fiftieth tenth fourth\n        elif n == 38:\n            return y\n    # test fiftieth nth ninth\n    elif n == 39 or n == 40 or n == 41:\n        # test fiftieth eighth second\n        if n == 39:\n            return y\n        # test fiftieth tenth third\n        elif n == 40:\n            return x\n        # test fiftieth tenth fourth\n        elif n == 41:\n            return y\n    # test fiftieth nth tenth\n    elif n == 42 or n == 43 or n == 44:\n        # test fiftieth eighth second\n        if n == 42:\n            return y\n        # test fiftieth tenth third\n        elif n == 43:\n            return x\n        # test fiftieth tenth fourth\n        elif n == 44:\n            return y\n    # test fiftieth nth elevent",
        "num_ids": 1025
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return x if n % 2 == 0 else y\n",
        "num_ids": 13
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 1:\n        return x\n    if n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n//2, x, y)\n",
        "num_ids": 46
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # will be a prime number\n    if isprime(n):\n        return x\n    \n    # will be an odd number\n    if n%2 == 1:\n        return y\n    \n    # will be a negative number\n    if n < 0:\n        return y\n        \n    # will be an even number\n    if n%2 == 0:\n        return x\n    \n    # will be an odd number\n    else:\n        return x*y\n    \ndef main():\n    \"\"\"This is the main program.\"\"\"\n    while True:\n        try:\n            number = int(input(\"Input a number (integer)\\n\"))\n            break\n        except ValueError:\n            print(\"That was not an integer! Please try again.\")\n            continue\n    print(\"x_or_y(number) = {}\".format(x_or_y(number, 2, 3)))\n",
        "num_ids": 204
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)\n    ",
        "num_ids": 48
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = 0\n    for number in lst:\n        if number % 2!= 0:\n            result += number**2\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if lst == []:\n        return 0\n    \n    lst_odd = []\n    for i in lst:\n        if i % 2!= 0:\n            lst_odd.append(i ** 2)\n    \n    return sum(lst_odd)\n",
        "num_ids": 68
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    num_squared = 0\n    for number in lst:\n        if number % 2 == 1:\n            num_squared += number ** 2\n    return num_squared\n",
        "num_ids": 43
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = 0\n    for i in lst:\n        s += i**2\n    return s\n",
        "num_ids": 25
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum(x**2 for x in lst if x % 2!= 0)\n",
        "num_ids": 22
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def square(x):\n        '''\n        Return the square of a number\n        '''\n        return x**2\n    \n    square_sum = 0\n    for x in lst:\n        square_sum += square(x)\n    return square_sum\n    \n",
        "num_ids": 65
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    total = 0\n    for number in lst:\n        if not isinstance(number, int):\n            return 0\n        if number % 2!= 0:\n            return total + number\n        else:\n            total += number ** 2\n    return total\n",
        "num_ids": 60
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum(i**2 for i in lst)\n",
        "num_ids": 34
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = len(lst)\n    sum = 0\n    for i in lst:\n        if i%2 == 1:\n            sum += i**2\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not lst:\n        return 0\n    sum_square = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum_square += num**2\n    return sum_square\n",
        "num_ids": 52
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #TODO: complete the function\n    #!return [abs(x-y) for x,y in zip(guess,score)]\n    return guess - score\n",
        "num_ids": 41
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    res = []\n    for i in range(0,len(guess)):\n        if guess[i] == game[i]:\n            res.append(0)\n        else:\n            res.append(abs(guess[i]-game[i]))\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # write your code here\n    if len(guess)!= len(game):\n        return -1\n    else:\n        best = -1\n        for i in range(len(guess)):\n            if guess[i] in game and guess[i]!= game[i]:\n                if guess[i]!= game[i]:\n                    best = abs(guess[i] - game[i])\n                    break\n        return best\n",
        "num_ids": 105
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    guess = guess.split(\",\")\n    score = {}\n    for i,a in enumerate(guess):\n        try:\n            score[a] = int(score[a])+1\n        except:\n            score[a] = 0\n    score = sorted(score.items(),key=lambda x:x[1],reverse=True)\n    return [score[0][1]] if score[0][1]!=guess[i] else [abs(int(guess[i])-int(score[0][1]))]\n",
        "num_ids": 130
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # there are 4 guesses at a possible guess, and each time we have a higher score than the guess, we flip it\n    # and repeat\n    # repeat guess (think of the next guess as a bit longer)\n    \n    # compare the guess with the scores and see if it's the same as the answer\n    # return the absolute difference\n    \n    # you should return an array with length the same as the scores array\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    \n    # you have a guess and a score\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return 0\n    \n    # now you have two arrays: the scores and the guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    \n    # you have two scores and your guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    \n    # you have two scores and your guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    \n    \n    # you have two scores and your guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    # you have two scores and your guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    # you have two scores and your guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    # you have two scores and your guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    # you have two scores and your guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    # you have two scores and your guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    # you have two scores and your guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    # you have two scores and your guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    # you have two scores and your guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    # you have two scores and your guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    # you have two scores and your guess\n    # compare the guess and the scores and see if they are the same\n    # return a value for the distance between the guess and the match, if the guess and the match match\n    # no match, return the absolute difference\n    # you have two scores and your guess\n    # compare the guess and the scores and see if the",
        "num_ids": 1025
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert len(guess) == len(game), \"guesses and scores must have the same length\"\n    # print(guess,game)\n    # assert len(guess[0]) == len(game[0]), \"guesses and scores must have the same length\"\n    \n    results = []\n    \n    # iterate over both arrays\n    for i in range(len(guess)):\n        if guess[i] == game[i][0]:\n            if guess[i] in game[i+1:]:\n                return [0]*len(guess)\n            else:\n                results.append(0)\n        elif guess[i] in game[i+1:]:\n            return [abs(game[i][1]-guess[i])]*len(guess)\n        else:\n            results.append(abs(game[i][1]-guess[i]))\n    # print(results)\n    return results\n",
        "num_ids": 222
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # change to list and compare\n    correct_guesses = []\n    incorrect_guesses = []\n",
        "num_ids": 26
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # return [abs(guess - guess[i]) for i in range(len(guess))]\n    return abs(guess - game)\n    \n    \n    \n",
        "num_ids": 44
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    scores = []\n    for guess in range(len(guess)):\n        scores.append(abs(guess - game[guess]))\n    return scores\n",
        "num_ids": 42
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    cap = 0\n    sm = 0\n    for extension in extensions:\n        extension_name = extension[0]\n        cap += len(extension_name)\n        sm += len(extension_name)\n    cap_fraction = cap / sm\n    sm_fraction = sm / cap\n    best_strength = -1\n    best_extension = None\n    for extension in extensions:\n        extension_name = extension[0]\n        strength = cap_fraction - sm_fraction\n        if strength > best_strength:\n            best_strength = strength\n            best_extension = extension_name\n    return best_extension\n    \ndef calculate_most_common_extensions(classes):\n    \"\"\"You have been given a list of names of classes.\n    Your task is to return the most common extension, which is the name of the \n    class with the most extension.\n    Example:\n    classes = ['Dior', 'Tiny', 'Abhijith']\n    return 'Abhijith'\n    \"\"\"\n    classes_count = {}\n    for class_name in classes:\n        extensions = []\n        class_name_extensions = class_name.split('.')\n        for extension_name in class_name_extensions:\n            if extension_name not in extensions:\n                extensions.append(extension_name)\n        classes_count[class_name] = len(extensions)\n    return max(classes_count, key=classes_count.get)\n    \ndef add_extension(class_name, extensions):\n    \"\"\"You have been given a class name and a list of extensions.\n    Your task is to add extensions to the class.\n    Example:\n    class_name = 'Dior'\n    extensions = ['Shi', 'Chees']\n    add_extension(class_name, extensions) = 'Dior.Shi'\n    \"\"\"\n    extension_name = most_common_extension(class_name, extensions)\n    for extension in extensions:\n        extension_name += extension\n    class_name += '.' + extension_name\n    return class_name\n    \ndef remove_extension(class_name, extensions):\n    \"\"\"You have been given a class name and a list of extensions.\n    Your task is to remove extensions from the class.\n    Example:\n    class_name = 'Dior'\n    extensions = ['Shi', 'Chees']\n    remove_extension(class_name, extensions) = 'Dior.Shi.Chees'\n    \"\"\"\n    extension_name = most_common_extension(class_name, extensions)\n    for extension in extensions:\n        if extension == extension_name:\n            continue\n        else:\n            class_name = class_name.replace(extension_name, extension)\n    return class_name\n    \ndef remove_class(class_name):\n    \"\"\"You have been given a class name and you have to remove it from the\n    file system. You may remove all extensions from the class, but you may\n    not remove the class itself (the extension's names are not removed from\n    the file).\n    Example:\n    class_name = 'Dior'\n    remove_class(class_name) = 'Dior'\n    \"\"\"\n    remove_extension(class_name, extensions)\n    remove_class(class_name)\n    \ndef find_extension(class_name, extensions):\n    \"\"\"You have been given a class name and a list of extensions.\n    Your task is to find all extensions that are present in the class.\n    Example:\n    class_name = 'Dior'\n    extensions = ['Shi', 'Chees']\n    find_extension(class_name, extensions) = ['Shi.Chees']\n    \"\"\"\n    extension_list = []\n    for extension in extensions:\n        if extension in class_name:\n            extension_list.append(extension)\n    return extension_list\n    \ndef init_classes():\n    \"\"\"You have been given a list of classes.\n    Your task is to initialize each class.\n    \"\"\"\n    classes = ['Dior', 'Tiny', 'Abhijith']\n    extensions = ['Shi', 'Chees']\n    for class_name in classes:\n        class_name = add_extension(class_name, extensions)\n        class_name = remove_extension(clas",
        "num_ids": 1026
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # write your solution here\n    CAP, SM = 0, 0\n    if len(extensions) > 1:\n        for extension in extensions:\n            CAP, SM = max(CAP, len(extension[0])), max(SM, len(extension[1]))\n    else:\n        if len(extensions[0][0]) == len(extensions[0][1]):\n            CAP, SM = len(extensions[0][0]), len(extensions[0][1])\n        else:\n            return extensions[0][0]\n    if CAP - SM == 0:\n        return extensions[0][0]\n    cap_index = 0\n    cap_index = CAP - SM + 1\n    for extension in extensions:\n        if cap_index < len(extension[0]):\n            cap_index = cap_index - len(extension[0])\n        else:\n            cap_index = cap_index - len(extension[1]) + 1\n    return extensions[cap_index][0]\n",
        "num_ids": 238
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(extensions) < 1:\n        return class_name\n    \n    result = []\n    for extension in extensions:\n        if extension in extension_dict:\n            extension_strength = extension_dict[extension]\n        else:\n            extension_strength = 0\n        result.append(class_name + extension)\n        extension_strength = (extension_strength / float(extension_strength))\n        result.append(str(extension_strength))\n    return '.'.join(result)\n    \n    \n    \ndef Uniqueness(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extension is to be used to load additional classes to the class. The\n    uniqueness of the extension is as follows: Let N be the number of the\n    uppercase letters in the extension's name. Let M be the number of the\n    lowercase letters in the extension's name. Let T be the number of the \n    uppercase letters in the extension's name. The uniqueness of the extension\n    is given by the fraction N - M - T. Your program should return a string\n    in this format: ClassName.UniquenessName.\n    For example, if you are given \"Slices\" as the class and a list of extensions:\n    ['AA', 'Be', 'CC'], and the extensions is\n    ['SErviNGSliCes', 'Cheese', 'StuFfed'], then you should return 'Slices.SErviNGSliCes'\n    since 'SErviNGSliCes' is the uniqueness (it is, though, -1) and 'SeerigSlices' \n    is the uniqueness (it is, though, -2).\n    Example:\n    for Uniqueness('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    for Uniqueness('my_class', ['AA', 'Be', 'CC'], ['SErviNGSliCes', 'Cheese', 'StuFfed']) =='my_class.AA'\n    for Uniqueness('my_class', ['AA', 'Be', 'CC'], ['SErviNGSliCes', 'Cheese', 'StuFfed'], ['SErviNGSliCes', 'Cheese', 'StuFfed']) =='my_class.AA'\n    for Uniqueness('my_class', ['AA', 'Be', 'CC'], ['SErviNGSliCes', 'Cheese', 'StuFfed'], ['SErviNGSliCes', 'Cheese', 'StuFfed'], ['SErviNGSliCes', 'Cheese', 'StuFfed']) =='my_class.AA'\n    for Uniqueness('my_class', ['AA', 'Be', 'CC'], ['SErviNGSliCes', 'Cheese', 'StuFfed'], ['SErviNGSliCes', 'Cheese', 'StuFfed']) =='my_class.AA'\n    \"\"\"\n    if len(extensions) < 1:\n        return class_name\n    \n    result = []\n    for extension in extensions:\n        if extension in extension_dict:\n            extension_uniqueness = extension_dict[extension]\n        else:\n            extension_uniqueness = 0\n        result.append(class_name + extension)\n        extension_uniqueness = (extension_uniqueness / float(extension_uniqueness))\n        result.append(str(extension_uniqueness))\n    return '.'.join(result)\n    \n    \ndef Separator(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extension is to be used to load additional classes to the class. The\n    separator is the number of characters in the extension's name.\n    The separator is provided as an integer. It should be an odd number.\n    If the extension is a string, it should be in the format: \n    'ClassName.SeparatorLength' where 'ClassName' is the class name.\n    For example, if you are given \"Slices\" as the class and a list of extensions:\n    ['AA', 'Be', 'CC'], and the extensions is\n    ['SErviN",
        "num_ids": 1025
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    extensions_list = get_extensions(extensions)\n    strongest_extension = get_strongest_extension(class_name, extensions_list)\n    return strongest_extension.split('.')[0] + '.' + class_name.lower()\n",
        "num_ids": 64
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #your code here\n    return 'ClassName.StrongestExtensionName.\n    #raise NotImplementedError\n",
        "num_ids": 29
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    cap = 0\n    sm = 0\n    ext = []\n    for extension in extensions:\n        cap += len(extension.upper())\n        sm += len(extension.lower())\n        ext.append(extension)\n    cap /= sm\n    sm /= cap\n    if cap > sm:\n        return class_name\n    else:\n        index = 0\n        while cap >= sm:\n            if sm > cap:\n                index = ext.index(ext[index])\n            else:\n                index = ext.index(ext[index]) + 1\n            cap -= sm\n            sm /= cap\n            if cap > sm:\n                return class_name + str(index)\n    \ndef Strongest_Extension_and_Name(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension_and_Name('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    cap = 0\n    sm = 0\n    ext = []\n    for extension in extensions:\n        cap += len(extension.upper())\n        sm += len(extension.lower())\n        ext.append(extension)\n    cap /= sm\n    sm /= cap\n    if cap > sm:\n        return class_name\n    else:\n        index = 0\n        while cap >= sm:\n            if sm > cap:\n                index = ext.index(ext[index])\n            else:\n                index = ext.index(ext[index]) + 1\n            cap -= sm\n            sm /= cap\n            if cap > sm:\n                return class_name + str(index)\n    \ndef Strongest_Substitute(class_name, substitutes):\n    \"\"\"You will be given the name of a class (a string) and a list of substitutions.\n    The substitutions are to be used to load additional classes to the class. The \n    strength of the substitution is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest substitution and return a string in this \n    format: ClassName.StrongestSubstitutionName.\n    If there are two or more substitutions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    substitutes: ['Ceal', 'Omelette', 'Slices'] then you should\n    return 'Slices.Ceal' since 'Ceal' is the strongest substitution (its strength is -1).\n    Example:\n    for Strongest_Substitute('my_class', ['Omelette', 'Omelette', 'Ceal']) == 'Omelette'\n    \"\"\"\n    cap = 0\n    sm = 0\n    sub = []\n    for substitute in substitutes:\n        cap += len(substitute.upper())\n        sm += len(substitute.lower())\n        sub.append(substitute)\n    cap /= sm\n    sm /= cap\n    if cap > sm:\n        return class_name\n    else:\n        index = 0\n        while cap >= sm:\n            if s",
        "num_ids": 1023
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    extensions = sorted(extensions, key=lambda x: x.count(' '), reverse=True)\n    cap = 0\n    sm = 0\n    if(class_name!= ''):\n        for extension in extensions:\n            cap += extension.count(' ')\n            sm += extension.count(' ')\n    cap = cap/len(extensions)\n    sm = sm/len(extensions)\n    if(cap!= sm):\n        return class_name + '.' + extensions[0].strip(' ')\n    else:\n        return extensions[0].strip(' ')\n",
        "num_ids": 138
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    cap = 0\n    sm = 0\n    for extension in extensions:\n        extension_length = len(extension)\n        if extension_length >= cap:\n            cap = extension_length\n        if extension_length <= sm:\n            sm = extension_length\n    return class_name + '.StrongestExtension' + str(cap) + str(sm)\n",
        "num_ids": 85
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #print(\"method\", Strongest_Extension.__name__)\n    upper_class = list(string.ascii_uppercase)\n    lower_class = list(string.ascii_lowercase)\n    #print(class_name, extensions)\n    cap = 0\n    sm = 0\n    for extension in extensions:\n        #print(extension)\n        #cap += len(extension)\n        #sm += extension.count('SE')\n        cap += extension.count('SE')\n        sm += extension.count('SE') - extension.count('NE')\n    cap -= sm\n    #print(cap, sm)\n    for extension in extensions:\n        #print(extension)\n        #cap += len(extension)\n        sm += extension.count('NE')\n        cap -= extension.count('NE')\n        #print(cap, sm)\n    cap = cap/len(extensions)\n    sm = sm/len(extensions)\n    upper_cap = cap * 100\n    lower_cap = cap * 100\n    lower_sm = sm * 100\n    if upper_cap > lower_cap:\n        upper_class = extensions[0]\n        lower_class = extensions[0]\n    else:\n        lower_class = extensions[0]\n        upper_class = extensions[0]\n    #print(upper_class, lower_class)\n    return upper_class + '.' + lower_class\n",
        "num_ids": 335
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    classes = class_name.split('.')\n    extensions = extensions.split('.')\n    cap = 0\n    sm = 0\n    for extension in extensions:\n        for c in extension:\n            cap += ord(c)\n        sm += cap\n    cap = sm - len(extensions)\n    sm = cap * -1\n    for extension in extensions:\n        for c in extension:\n            sm += ord(c)\n    sorted_extensions = sorted(extensions, key=lambda c: -len(c))\n    cap = 0\n    sm = 0\n    for extension in sorted_extensions:\n        for c in extension:\n            cap += ord(c)\n        sm += cap\n    cap = sm - len(extensions)\n    sm = cap * -1\n    best_extension = sorted_extensions[0]\n    for extension in sorted_extensions[1:]:\n        if extension < best_extension:\n            best_extension = extension\n    return classes[0] + '.' + best_extension + '.StrongestExtensionName.' + best_extension\n",
        "num_ids": 257
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join(list(a) if a.startswith(b) else b + a[::-1] for a in a) == a\n",
        "num_ids": 37
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a.find(b)!= -1 or b.find(a)!= -1:\n        return True\n    else:\n        return False\ndef ngato_check(a, b):\n    \"\"\"You are given two words. You need to return True if the second word or any of its rotations is a substring in the first word\n    ngato_check(\"abcd\",\"abd\") => True\n    ngato_check(\"hello\",\"ell\") => False\n    ngato_check(\"whassup\",\"psus\") => False\n    ngato_check(\"abab\",\"baa\") => True\n    ngato_check(\"efef\",\"eeff\") => False\n    ngato_check(\"himenss\",\"simen\") => False\n",
        "num_ids": 169
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(b)!= len(a):\n        return False\n    if len(b) > len(a):\n        return False\n    c = 0\n    l = len(a)\n    for i in range(len(a)):\n        if a[i]!= b[l-i]:\n            c += 1\n    if c == len(b):\n        return True\n    else:\n        return False\n",
        "num_ids": 99
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if (a == b):\n        return False\n    else:\n        return True\n    \ndef cycpattern(a,b):\n    return (cycpattern_check(a,b))\n",
        "num_ids": 47
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # init a dict of rotations in order to return True if the second word is in the first word\n    rotations = {\n        \"a\": [],\n        \"b\": [],\n        \"c\": [],\n        \"d\": [],\n        \"e\": [],\n        \"f\": [],\n        \"g\": [],\n        \"h\": [],\n        \"i\": [],\n        \"j\": [],\n        \"k\": [],\n        \"l\": [],\n        \"m\": [],\n        \"n\": [],\n        \"o\": [],\n        \"p\": [],\n        \"q\": [],\n        \"r\": [],\n        \"s\": [],\n        \"t\": [],\n        \"u\": [],\n        \"v\": [],\n        \"w\": [],\n        \"x\": [],\n        \"y\": [],\n        \"z\": [],\n        \"A\": [],\n        \"B\": [],\n        \"C\": [],\n        \"D\": [],\n        \"E\": [],\n        \"F\": [],\n        \"G\": [],\n        \"H\": [],\n        \"I\": [],\n        \"J\": [],\n        \"K\": [],\n        \"L\": [],\n        \"M\": [],\n        \"N\": [],\n        \"O\": [],\n        \"P\": [],\n        \"Q\": [],\n        \"R\": [],\n        \"S\": [],\n        \"T\": [],\n        \"U\": [],\n        \"V\": [],\n        \"W\": [],\n        \"X\": [],\n        \"Y\": [],\n        \"Z\": [],\n        \"0\": [],\n        \"1\": [],\n        \"2\": [],\n        \"3\": [],\n        \"4\": [],\n        \"5\": [],\n        \"6\": [],\n        \"7\": [],\n        \"8\": [],\n        \"9\": [],\n        \"a\": [],\n        \"b\": [],\n        \"c\": [],\n        \"d\": [],\n        \"e\": [],\n        \"f\": [],\n        \"g\": [],\n        \"h\": [],\n        \"i\": [],\n        \"j\": [],\n        \"k\": [],\n        \"l\": [],\n        \"m\": [],\n        \"n\": [],\n        \"o\": [],\n        \"p\": [],\n        \"q\": [],\n        \"r\": [],\n        \"s\": [],\n        \"t\": [],\n        \"u\": [],\n        \"v\": [],\n        \"w\": [],\n        \"x\": [],\n        \"y\": [],\n        \"z\": [],\n        \"A\": [],\n        \"B\": [],\n        \"C\": [],\n        \"D\": [],\n        \"E\": [],\n        \"F\": [],\n        \"G\": [],\n        \"H\": [],\n        \"I\": [],\n        \"J\": [],\n        \"K\": [],\n        \"L\": [],\n        \"M\": [],\n        \"N\": [],\n        \"O\": [],\n        \"P\": [],\n        \"Q\": [],\n        \"R\": [],\n        \"S\": [],\n        \"T\": [],\n        \"U\": [],\n        \"V\": [],\n        \"W\": [],\n        \"X\": [],\n        \"Y\": [],\n        \"Z\": [],\n        \"0\": [],\n        \"1\": [],\n        \"2\": [],\n        \"3\": [],\n        \"4\": [],\n        \"5\": [],\n        \"6\": [],\n        \"7\": [],\n        \"8\": [],\n        \"9\": [],\n        \"a\": [],\n        \"b\": [],\n        \"c\": [],\n        \"d\": [],\n        \"e\": [],\n        \"f\": [],\n        \"g\": [],\n        \"h\": [],\n        \"i\": [],\n        \"j\": [],\n        \"k\": [],\n        \"l\": [],\n        \"m\": [],\n        \"n\": [],\n        \"o\": [],\n        \"p\": [],\n        \"q\": [],\n        \"r\": [],\n    ",
        "num_ids": 1025
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(0, len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # cycpattern_check_str = str(a +'' + b)\n    # cycpattern_check_str = cycpattern_check_str.split()\n    # cycpattern_check_str = [i.split(' ') for i in cycpattern_check_str]\n    # for i in cycpattern_check_str:\n    #     if i[0] in a or i[0] in b or i[1] in a or i[1] in b:\n    #         return True\n    # return False\n",
        "num_ids": 128
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if a[:len(b)] == b or b[:len(a)] == a:\n        return True\n    \n    if len(a) - len(b) < len(a):\n        return False\n    \n    for i in range(len(b)-len(a)+1):\n        if b[i:i+len(a)] == a:\n            return True\n        \n    return False\n",
        "num_ids": 96
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pattern = r'[^\\w\\s]'\n    start_index = 0\n    pattern = pattern.join(list(map(lambda s: pattern, a)))\n    for i in range(len(b)-len(a)+1):\n        if pattern in b[start_index:start_index+len(a)]:\n            return True\n        start_index += 1\n    return False\n",
        "num_ids": 92
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ((num // 10) % 2), (num % 10)\n",
        "num_ids": 17
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "num_ids": 66
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even, odd = 0, 0\n    for x in str(num):\n        if int(x) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n",
        "num_ids": 45
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    num_str = str(num)\n    count_even = 0\n    count_odd = 0\n    for i in range(len(num_str)):\n        if num_str[i] == '0':\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n",
        "num_ids": 82
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # if num is even, return the number of odd digits\n    if num % 2 == 0:\n        return (1, num // 2)\n    # if num is odd, return the number of even digits\n    else:\n        return (num // 2, num // 2)\n",
        "num_ids": 64
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # note: this is actually getting slow with the number of even & odd digits\n    # this will be the slow way\n    # print(num, ': ', end='')\n    return (sum([x for x in [1, num // 10, num % 10] if x]) % 2, num % 10)\n",
        "num_ids": 73
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    even_count = 0\n    odd_count = 0\n",
        "num_ids": 15
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    while num > 0:\n        if num % 10 == 0:\n            count += 1\n            num //= 10\n        else:\n            num -= 1\n    return (count, num)\n",
        "num_ids": 50
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (num%2==0,num//2)\n",
        "num_ids": 15
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if num < 0:\n        return None\n    if num == 0:\n        return (0, 0)\n",
        "num_ids": 27
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    int_to_roman = {\n        1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L',\n        40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'\n    }\n",
        "num_ids": 83
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Note: I've copied this to a function, and not in this file.\n    # Feel free to copy that function elsewhere.\n    num = ''\n",
        "num_ids": 36
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    roman_numeral = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX',\n        10: 'X',\n        11: 'XX',\n        12: 'XXX',\n        13: 'XL',\n        14: 'L',\n        15: 'LX',\n        16: 'LXX',\n        17: 'LXXX',\n        18: 'XC',\n        19: 'XCIII',\n        20: 'XCIV',\n        21: 'XLVIII',\n        22: 'XXXVIII',\n        23: 'XLVI',\n        24: 'LXXVIII',\n        25: 'XXL',\n        26: 'XXLVI',\n        27: 'XXLVIU',\n        28: 'XXLV',\n        29: 'XXLVIII',\n        30: 'XXLVI',\n        31: 'XXLVIU',\n        32: 'XXLVIII',\n        33: 'XXLVI',\n        34: 'XXLVIU',\n        35: 'XXLVIII',\n        36: 'XXLVI',\n        37: 'XXLVIU',\n        38: 'XXLVI',\n        39: 'XXLV',\n        40: 'XXL',\n        41: 'XL',\n        42: 'L',\n        43: 'XC',\n        44: 'C',\n        45: 'CC',\n        46: 'CD',\n        47: 'D',\n        48: 'CM',\n        49: 'M'\n    }\n",
        "num_ids": 405
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Convert to string\n    s = ''.join(f'{ord(c)-ord(\"i\")}' for c in number)\n    # Find the first invalid character\n    m = -1\n    for i, c in enumerate(s):\n        if s[i] == 'i' or c >'m':\n            m = i\n            break\n    # Find the corresponding (i+1)th character\n    c = s[m+1:m+2]\n    # Convert to lowercase\n    lower = [c[0] for c in s[0:m+1]]\n    # Put the rest back into the original string\n    s = lower + s[m+2:]\n    return s.lower(",
        "num_ids": 167
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    symbols = (\"i\", \"v\", \"ii\", \"vi\", \"x\", \"xc\", \"l\", \"ll\", \"c\", \"xc\", \"d\", \"xc\", \"xl\", \"lx\", \"xc\", \"dx\", \"lx\", \"lxxv\", \"dxxvi\", \"dxxv\")\n    r = \"\"\n    while number > 0:\n        remainder = number % 10\n        number //= 10\n        r += symbols[remainder]\n    return r\n",
        "num_ids": 117
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if number == 1:\n        return 'I'\n    elif number == 2:\n        return 'II'\n    elif number == 3:\n        return 'III'\n    elif number == 4:\n        return 'IV'\n    elif number == 5:\n        return 'V'\n    elif number == 6:\n        return 'VI'\n    elif number == 7:\n        return 'VII'\n    elif number == 8:\n        return 'VIII'\n    elif number == 9:\n        return 'IX'\n    elif number == 10:\n        return 'X'\n    elif number == 11:\n        return 'XI'\n    elif number == 12:\n        return 'XII'\n    elif number == 13:\n        return 'XIII'\n    elif number == 14:\n        return 'XIV'\n    elif number == 15:\n        return 'XV'\n    elif number == 16:\n        return 'XVI'\n    elif number == 17:\n        return 'XVII'\n    elif number == 18:\n        return 'XVIII'\n    elif number == 19:\n        return 'XIX'\n    elif number == 20:\n        return 'XX'\n    elif number == 21:\n        return 'XXI'\n    elif number == 22:\n        return 'XXII'\n    elif number == 23:\n        return 'XXIII'\n    elif number == 24:\n        return 'XXIV'\n    elif number == 25:\n        return 'XXV'\n    elif number == 26:\n        return 'XXVI'\n    elif number == 27:\n        return 'XXVII'\n    elif number == 28:\n        return 'XXVIII'\n    elif number == 29:\n        return 'XXIX'\n    elif number == 30:\n        return 'XXX'\n    elif number == 31:\n        return 'XXXI'\n    elif number == 32:\n        return 'XXXII'\n    elif number == 33:\n        return 'XXXIII'\n    elif number == 34:\n        return 'XXXIV'\n    elif number == 35:\n        return 'XXXV'\n    elif number == 36:\n        return 'XXXVI'\n    elif number == 37:\n        return 'XXXVII'\n    elif number == 38:\n        return 'XXXVIII'\n    elif number == 39:\n        return 'XXXIX'\n    elif number == 40:\n        return 'XL'\n    elif number == 41:\n        return 'L'\n    elif number == 42:\n        return 'LX'\n    elif number == 43:\n        return 'LXX'\n    elif number == 44:\n        return 'LXXX'\n    elif number == 45:\n        return 'LXL'\n    elif number == 46:\n        return 'LXXIII'\n    elif number == 47:\n        return 'LXXIV'\n    elif number == 48:\n        return 'LXXV'\n    elif number == 49:\n        return 'LXXVI'\n    elif number == 50:\n        return 'LXXVII'\n    elif number == 51:\n        return 'LXXVIII'\n    elif number == 52:\n        return 'LXXIX'\n    elif number == 53:\n        return 'LXL'\n    elif number == 54:\n        return 'LXLI'\n    elif number == 55:\n        return 'LXLII'\n    elif number == 56:\n        return 'LXLIII'\n    elif number == 57:\n        return 'LXLIV'\n    elif number == 58:\n        return 'LXLV'\n    elif number == 59:\n        return 'LXLVI'\n    elif number == 60:\n        return 'LXLVII'\n    elif number == 61:\n        return 'LXLVIII'\n    elif number == 62:\n        return 'LXLIX'\n    elif number == 63:\n        return 'LXX'\n    elif number == 64:\n        return 'LXXI'\n    elif number == 65:\n        return 'LXXII'\n    elif number == 66:\n        return 'LXXIII'\n    elif number == 67:\n        return 'LXXIV'\n    elif number == 68:",
        "num_ids": 1025
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    rom = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX',\n        10: 'X',\n        11: 'XX',\n        12: 'XXX',\n        13: 'XL',\n        14: 'L',\n        15: 'LX',\n        16: 'LXX',\n        17: 'LXXX',\n        18: 'XC',\n        19: 'XCX',\n        20: 'XCXX',\n        21: 'XCXXX',\n        22: 'CM',\n        23: 'D',\n        24: 'DC',\n        25: 'DCC',\n        26: 'DCCC',\n        27: 'DCCCD',\n        28: 'DCCDCC',\n        29: 'DCCDDCC',\n        30: 'DCCDDDD',\n        31: 'DCCDDDCC',\n        32: 'DCCDDDDCC',\n        33: 'DCCDDDDDCC',\n        34: 'DCCDDDDD',\n        35: 'DCCDDDDC',\n        36: 'DCCDDDDDCC',\n        37: 'DCCDDDDDCC',\n        38: 'DCCDDDDD',\n        39: 'DCCDDDDDCC',\n        40: 'DCCDDDDD',\n        41: 'DCCDDDDDCC',\n        42: 'DCCDDDDDDCC',\n        43: 'DCCDDDDDD',\n        44: 'DCCDDDDDDCC',\n        45: 'DCCDDDDDDCC',\n        46: 'DCCDDDDD',\n        47: 'DCCDDD',\n        48: 'CC',\n        49: 'CCC',\n        50: 'CD',\n        51: 'D',\n        52: 'DC',\n        53: 'DCC',\n        54: 'DCC',\n        55: 'DCC',\n        56: 'DCC',\n        57: 'DCC',\n        58: 'DCC',\n        59: 'DCC',\n        60: 'DCC',\n        61: 'DCC',\n        62: 'DCC',\n        63: 'DCC',\n        64: 'DCC',\n        65: 'DCC',\n        66: 'DCC',\n        67: 'DCC',\n        68: 'DCC',\n        69: 'DCC',\n        70: 'DCC',\n        71: 'DCC',\n        72: 'DCC',\n        73: 'DCC',\n        74: 'DCC',\n        75: 'DCC',\n        76: 'DCC',\n        77: 'DCC',\n        78: 'DCC',\n        79: 'DCC',\n        80: 'DCC',\n        81: 'DCC',\n        82: 'DCC',\n        83: 'DCC',\n        84: 'DCC',\n        85: 'DCC',\n        86: 'DCC',\n        87: 'DCC',\n        88: 'DCC',\n        89: 'DCC',\n        90: 'DCC',\n        91: 'DCC',\n        92: 'DCC',\n        93: 'DCC',\n        94: 'DCC',\n        95: 'DCC',\n        96: 'DCC',\n        97: 'DCC',\n        98: 'DCC',\n        99: 'DCC',\n        100: 'DCC',\n        101: 'DCC',\n        102: 'DCC',\n        103: 'DCC',\n        104: 'DCC',\n        105: 'DCC',\n        106: 'DCC',\n        107: 'DCC',\n        108: 'DCC',\n        109: 'DCC',\n        110: 'DCC',\n        111: 'DCC',\n        112: 'DCC',\n        113: 'DCC',\n        114: 'DCC',\n        115: 'DCC',\n        116: 'DCC',\n        117: 'DCC',\n        118: 'DCC',\n        119: 'DCC',\n        120: 'DCC',\n        121: 'DCC',",
        "num_ids": 1020
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    roman_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    roman_string = ''\n    for i in range(1, number+1):\n        r = ''\n        for k,v in roman_map.items():\n            if i >= k:\n                r += v\n            else:\n                break\n        r = r[::-1].upper()\n        if r!= '':\n            r = r[::-1]\n        if r in roman_map:\n            r = roman_map[i]\n        r = r.replace('I', '')\n        r = r.replace('X', '')\n        r = r.replace('V', '')\n        r = r.replace('L', '')\n        r = r.replace('C', '')\n        r = r.replace('D', '')\n        r = r.replace('M', '')\n        r = r.replace('M', '')\n        r = r.replace('X', '')\n        r = r.replace('X', '')\n        r = r.replace('L', '')\n        r = r.replace('C', '')\n        r = r.replace('D', '')\n        r = r.replace('X', '')\n        r = r.replace('X', '')\n        r = r.replace('V', '')\n        r = r.replace('I', '')\n        r = r.replace('V', '')\n        r = r.replace('X', '')\n        r = r.replace('X', '')\n        r = r.replace('V', '')\n        r = r.replace('L', '')\n        r = r.replace('C', '')\n        r = r.replace('D', '')\n        r = r.replace('M', '')\n        r = r.replace('D', '')\n        r = r.replace('L', '')\n        r = r.replace('M', '')\n        r = r.replace('I', '')\n        r = r.replace('M', '')\n        r = r.replace('X', '')\n        r = r.replace('X', '')\n        r = r.replace('I', '')\n        r = r.replace('V', '')\n        r = r.replace('M', '')\n        r = r.replace('C', '')\n        r = r.replace('D', '')\n        r = r.replace('X', '')\n        r = r.replace('L', '')\n        r = r.replace('D', '')\n        r = r.replace('C', '')\n        r = r.replace('M', '')\n        r = r.replace('V', '')\n        r = r.replace('C', '')\n        r = r.replace('M', '')\n        r = r.replace('D', '')\n        r = r.replace('X', '')\n        r = r.replace('C', '')\n        r = r.replace('D', '')\n        r = r.replace('M', '')\n        r = r.replace('V', '')\n        r = r.replace('M', '')\n        r = r.replace('I', '')\n        r = r.replace('V', '')\n        r = r.replace('X', '')\n        r = r.replace('X', '')\n        r = r.replace('X', '')\n        r = r.replace('M', '')\n        r = r.replace('I', '')\n        r = r.replace('X', '')\n        r = r.replace('I', '')\n        r = r.replace('V', '')\n        r = r.replace('C', '')\n        r = r.replace('I', '')\n        r = r.replace('V', '')\n        r = r.replace('X', '')\n        r = r.replace('X', '')\n        r = r.replace('X'",
        "num_ids": 1025
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = ''\n    num_to_roman = [('I', 1), ('V', 5), ('X', 10), ('L', 50), ('C', 100), ('D', 500), ('M', 1000)]\n    for num, roman in num_to_roman:\n        while number >= num:\n            number -= num\n            result += roman\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    m = ['','i','vi','v','x','vii','viiii','viivvi','xi','xiivvi','xivvi']\n    dic = {'i':'ic', 'vi':'ic', 'v':'iv', 'x':'ic', 'vii':'iv', 'viiii':'iv', 'viivvi':'iv', 'xi':'ic', 'xiivvi':'iv', 'xivvi':'iv'}\n    m = m[number - 1] + dic[m[number - 1]]\n    if number < 10:\n        return m + '0'\n    else:\n        for i in range(number // 10):\n            m = m + dic[m[-1]]\n        return m + 'i'\ndef roman_to_int(s):\n    \"\"\"\n    Given a roman numeral, return its integer equivalent.\n    Restrictions: 1 <= s <= 3, s must be a roman numeral.\n",
        "num_ids": 233
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a==b and b==c and a!=c:\n        return True\n    if b==c and c==a:\n        return True\n    if a==b or b==c or a==c:\n        return False\n    if a==b or b==c or a==c or b==c:\n        return False\n    return False\n",
        "num_ids": 82
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # If the angle of the three sides is 90 then return True\n    if math.degrees(math.atan(b/a)) == math.degrees(math.atan(c/a)):\n        return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Write your code here.\n    return(\n    ((((a**2) + (b**2) - (c**2))**(1/2)) * math.sqrt(a**2 + b**2 - (c**2)))\n     / ((a**2 + b**2 - (c**2))**(1/2))\n    )\n    \ndef check_for_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the\n    three sides form a triangle, False otherwise.\n    A triangle is a triangle in which one angle is right angle or 180 degree.\n    Example:\n    check_for_triangle(3, 4, 5) == True\n    check_for_triangle(1, 2, 3) == False\n    '''\n    # Write your code here.\n    return((a**2 == (b**2 - c**2)) and (b**2 == (c**2 - a**2)) and (c**2 == (a**2 - b**2)) and (a**2 + b**2 == c**2))\n    \ndef check_for_equilateral(a, b, c):\n    '''\n    Given the lengths of the three sides of an equilateral triangle. Return True\n    if the three sides form an equilateral triangle, False otherwise.\n    Example:\n    check_for_equilateral(3, 4, 5) == True\n    check_for_equilateral(1, 2, 3) == False\n    '''\n    # Write your code here.\n    return(((a**2 + b**2) == c**2) and (b**2 == a**2) and (c**2 == b**2) and (b**2 + c**2 == a**2))\n    \ndef check_for_isosceles(a, b, c):\n    '''\n    Given the lengths of the three sides of an isosceles triangle. Return True\n    if the three sides form an isosceles triangle, False otherwise.\n    Example:\n    check_for_isosceles(3, 4, 5) == True\n    check_for_isosceles(1, 2, 3) == False\n    '''\n    # Write your code here.\n    return((((a**2 + b**2)**(1/2)) == (c**2 - a**2)) and ((a**2 + b**2)**(1/2) == (c**2 - a**2)) and (a**2 + b**2 == c**2))\n    \ndef check_for_scalene(a, b, c):\n    '''\n    Given the lengths of the three sides of a scalene triangle. Return True\n    if the three sides form a scalene triangle, False otherwise.\n    Example:\n    check_for_scalene(3, 4, 5) == True\n    check_for_scalene(1, 2, 3) == False\n    '''\n    # Write your code here.\n    return((((a**2 + b**2)**(1/2))**2 == (c**2 - a**2)**2) and ((a**2 + b**2)**(1/2)**2 == (c**2 - a**2)**2) and (a**2 + b**2 == c**2))\n    \ndef check_for_isosceles_squared(a, b, c):\n    '''\n    Given the lengths of the three sides of an isosceles triangle squared. Return True\n    if the three sides form a isosceles triangle squared triangle, False otherwise.\n    Example:\n    check_for_isosceles_squared(3, 4, 5) == True\n    check_for_isosceles_squared(1, 2, 3) == False\n    '''\n    # Write your code here.\n    return((((a**2 + b**2)**2 == (c**2 - a**2)**2)) and ((a**2 + b**2)**2 == (c**2 - a**2)**2)) and (a**2 + b**2 == c**2)\n    \ndef check_for_triangle_squared(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle squared. Return True\n    if the three sides form a triangle square",
        "num_ids": 1025
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a_rad = degrees(a)\n    b_rad = degrees(b)\n    c_rad = degrees(c)\n    if (a_rad > b_rad) and (a_rad > c_rad):\n        return True\n    elif (b_rad > a_rad) and (b_rad > c_rad):\n        return True\n    elif (c_rad > a_rad) and (c_rad > b_rad):\n        return True\n    else:\n        return False\n",
        "num_ids": 119
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    delta_t = (b - a) / 2\n    if delta_t * delta_t == (c - a):\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # your code here\n    import math\n    angle = math.acos(b**2 + c**2 - a**2)/2\n    return True if angle > 0 else False\n    \ndef is_rightangled_triangle(a, b, c):\n    '''\n    Given two sides a and b, return True if the triangle formed by these two sides \n    is a right-angled triangle, False otherwise.\n    Example:\n    is_rightangled_triangle(3, 4, 5) == True\n    is_rightangled_triangle(1, 2, 3) == True\n    '''\n    # your code here\n    return right_angle_triangle(a, b, c)\n    \ndef main():\n    a = int(input('Enter the length of a side: '))\n    b = int(input('Enter the length of b side: '))\n    c = int(input('Enter the length of c side: '))\n    d = int(input('Enter the length of d side: '))\n    e = int(input('Enter the length of e side: '))\n    f = int(input('Enter the length of f side: '))\n    g = int(input('Enter the length of g side: '))\n    \n    print(is_rightangled_triangle(a, b, c))\n    \nmain()\n",
        "num_ids": 313
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a * b == c * c:\n        return True\n    if a * c == b * c:\n        return True\n    return False\n    \ndef is_triangle_in_triangle(a, b, c):\n    '''\n    Given three sides of a triangle, return True if the triangle is in\n    triangle, False otherwise.\n    '''\n    if a * b == c * c:\n        return True\n    if a * c == b * b:\n        return True\n    if a * c == b * a:\n        return True\n    return False\n    \ndef is_right_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return True if the\n    three sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angled_triangle(3, 4, 5) == True\n    is_right_angled_triangle(1, 2, 3) == False\n    '''\n    if right_angle_triangle(a, b, c):\n        return True\n    if right_angle_triangle(b, c, a):\n        return True\n    if right_angle_triangle(c, a, b):\n        return True\n    return False\n    \ndef calculate_triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area.\n    A triangle is a triangle in which one angle is right angle or 90 degree.\n    '''\n    if right_angle_triangle(a, b, c):\n        return a * b * c\n    elif right_angle_triangle(b, c, a):\n        return b * c * a\n    elif right_angle_triangle(c, a, b):\n        return c * a * b\n    else:\n        return 0\n    \ndef calculate_square_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area.\n    A triangle is a triangle in which one angle is right angle or 90 degree.\n    '''\n    if right_angle_triangle(a, b, c):\n        return a * b\n    elif right_angle_triangle(b, c, a):\n        return a * b * c\n    elif right_angle_triangle(c, a, b):\n        return a * b * c\n    else:\n        return 0\n",
        "num_ids": 605
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Write your code here\n    # Get lengths\n    a = a[0]\n    b = b[0]\n    c = c[0]\n    \n    # Check if lengths are equal\n    if a == b and b == c and a > b and a > c:\n        return True\n    \n    # Check for angle between sides\n    if (b - a) * (c - b) > (a - c) * (b - a):\n        return True\n    \n    # Check for angle between sides\n    if (c - b) * (a - c) < (a - b) * (c - a):\n        return True\n    \n    # Return False if angles are unequal\n    return False\n",
        "num_ids": 165
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Now we have three sides. Now we need to identify the center of the triangle.\n    # the center is the point which is on the left-hand side of the triangle.\n    # If the point is located on the right-hand side of the triangle, \n    # then we have a right-angled triangle.\n    a = a / 2\n    b = b / 2\n    c = c / 2\n    if (a * a + b * b == c * c):\n        return True\n    else:\n        return False\n",
        "num_ids": 121
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    import math\n    a, b, c = float(a), float(b), float(c)\n    \n    delta = math.sqrt(a**2 + b**2)\n    \n    # If the lengths are equal, they are triangles.\n    if delta == 0:\n        return True\n    \n    # If the lengths are not equal, they are not triangles.\n    if delta < 0.5:\n        return False\n    \n    # If the lengths are greater than 1.\n    if delta > 1:\n        return False\n    \n    # If the lengths are between 2.\n    if delta > 1.5:\n        return True\n    \n    # If the lengths are between 3.\n    if delta > 2.5:\n        return False\n    \n    # If the lengths are between 3.5.\n    if delta > 2.75:\n        return True\n    \n    # If the lengths are between 4.\n    if delta > 3.25:\n        return False\n    \n    # If the lengths are between 4.5.\n    if delta > 4.5:\n        return True\n    \n    # If the lengths are between 5.\n    if delta > 5:\n        return False\n    \n    # If the lengths are between 5.5.\n    if delta > 5.75:\n        return True\n    \n    # If the lengths are between 6.\n    if delta > 6:\n        return False\n    \n    # If the lengths are between 7.\n    if delta > 7:\n        return True\n    \n    # If the lengths are between 7.5.\n    if delta > 7.75:\n        return False\n    \n    # If the lengths are between 8.\n    if delta > 8:\n        return True\n    \n    # If the lengths are between 8.5.\n    if delta > 8.75:\n        return False\n    \n    # If the lengths are between 9.\n    if delta > 9:\n        return True\n    \n    # If the lengths are between 9.5.\n    if delta > 9.75:\n        return False\n    \n    # If the lengths are between 10.\n    if delta > 10:\n        return True\n    \n    # If the lengths are between 10.5.\n    if delta > 10.75:\n        return False\n    \n    # If the lengths are between 11.\n    if delta > 11:\n        return True\n    \n    # If the lengths are between 11.5.\n    if delta > 11.75:\n        return False\n    \n    # If the lengths are between 12.\n    if delta > 12:\n        return True\n    \n    # If the lengths are between 12.5.\n    if delta > 12.75:\n        return False\n    \n    # If the lengths are between 13.\n    if delta > 13:\n        return True\n    \n    # If the lengths are between 13.5.\n    if delta > 13.75:\n        return False\n    \n    # If the lengths are between 14.\n    if delta > 14:\n        return True\n    \n    # If the lengths are between 14.5.\n    if delta > 14.75:\n        return False\n    \n    # If the lengths are between 15.\n    if delta > 15:\n        return True\n    \n    # If the lengths are between 15.5.\n    if delta > 15.75:\n        return False\n    \n    # If the lengths are between 16.\n    if delta > 16:\n        return True\n    \n    # If the lengths are between 16.5.\n    if delta > 16.75:\n        return False\n    \n    # If the lengths are between 17.\n    if delta > 17:\n        return True\n    \n    # If the lengths are between 17.5.\n    if delta > 17.75:\n        return False\n    \n    # If the lengths are between 18.\n    if delta > 18:\n        return True\n    \n    # If the lengths are between 18.5.\n    if delta > 18.75:\n        return False\n    \n    # If the lengths are between 19.\n    if delta > 19:\n        return True\n    \n    # If the lengths are between 19.5.\n    if delta > 19.75:\n        return False\n    \n    # If the lengths are between 20.\n    if delta > 20:\n        return True\n    \n    # If the lengths are between 20.5.\n    if delta > 20.75:\n        retur",
        "num_ids": 1026
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    length = len(words)\n    dict = {}\n    for word in words:\n        length = len(word)\n        for i in range(length):\n            if word[i] in dict:\n                dict[word[i]] += 1\n            else:\n                dict[word[i]] = 1\n    max_count = 0\n    # Sorting to get the largest letter in the alphabet\n    sorted_dict = sorted(dict.items(), key=lambda item: item[1])\n    for i in sorted_dict:\n        if i[1] > max_count:\n            max_count = i[1]\n            max_word = i[0]\n    return max_word\n",
        "num_ids": 161
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max = \"\"\n    for word in words:\n        chars = Counter(word)\n        for char, count in chars.most_common():\n            if len(word) >= len(word) + len(word) - len(char) + 1:\n                return char\n        \n    return max\n",
        "num_ids": 70
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not words:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    string_list = list(words)\n    max_string = \"\"\n    max_count = 0\n    for i in range(len(string_list)):\n        if len(string_list[i]) > max_count:\n            max_string = string_list[i]\n            max_count = len(string_list[i])\n    return max_string\n",
        "num_ids": 87
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    word_counter = {}\n    for word in words:\n        if word in word_counter:\n            word_counter[word] += 1\n        else:\n            word_counter[word] = 1\n",
        "num_ids": 48
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    word_dict = {}\n    for word in words:\n        word = word.replace(' ', '')\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    for word in word_dict.keys():\n        if word_dict[word] == 1:\n            return word\n    return ''.join(sorted(word_dict.keys(), key=word_dict.get, reverse=True))\n",
        "num_ids": 114
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_len = max(len(word) for word in words)\n    max_char = max(ch for ch in ''.join(words) if ch.isalpha())\n    return max(words, key=lambda word: word[:max_len]",
        "num_ids": 60
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        chars = 0\n        for char in word:\n            if char.isalpha():\n                chars += 1\n        if chars > max_chars:\n            max_chars = chars\n            max_word = word\n    return max_wor",
        "num_ids": 81
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO\n    return [number, remaining - need]\n",
        "num_ids": 16
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total_eaten, eaten_before = 0, 0\n    if remaining < number:\n        return [0, 0]\n    else:\n        while remaining > 0:\n            if remaining < need:\n                eaten_before += 1\n                remaining = remaining - need\n            else:\n                total_eaten += 1\n                remaining = remaining - need\n        return [total_eaten, eaten_before",
        "num_ids": 95
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: Implement this function\n    # Input: number = 5, need = 6, remaining = 10\n    # Output: [11, 4]\n    # Output: [12, 1]\n    # Output: [7, 0]\n    # Output: [11, 0]\n    \n    if number > 0 and need < 0:\n        remaining = remaining - number\n        return [number, remaining]\n    if number > 0 and need > 0:\n        remaining = number - need\n        return [number, remaining]\n    if number == 0:\n        return [0, 0]\n",
        "num_ids": 137
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    total_num_eaten = 0\n    num_remaining = remaining\n    for i in range(number):\n        total_num_eaten += 1\n        num_remaining -= need\n        if num_remaining <= 0:\n            num_remaining = 100\n            total_num_eaten += 1\n    return [total_num_eaten, num_remaining]\n",
        "num_ids": 90
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # init\n    result = [0, number]\n    \n    # get number of remaining carrots\n    remaining_left = remaining\n    remaining_left -= need\n    if remaining_left < 0:\n        remaining_left = 0\n        \n    # check if need more carrots than remaining_left\n    if remaining_left > 0:\n        result[1] += need\n        result[0] += remaining_left\n        \n    # return if need is less than remaining\n    return result if need > remaining else result[::-1]",
        "num_ids": 126
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    total = total_eat(number, need, remaining)\n    if total == 0:\n        # if there is no remaining carrots, you eat all remaining carrots\n        remaining = 0\n        total = [0, 0]\n    elif total > remaining:\n        # if you have enough remaining, eat remaining carrots\n        remaining = remaining - total\n        total = [total, remaining]\n    elif total <= remaining:\n        # if you have enough remaining, eat remaining carrots\n        remaining = 0\n        total = [total, remaining]\n",
        "num_ids": 124
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if remaining == 0:\n        return [ number, need ]\n    if need > number:\n        return eat(number, need, remaining - need)\n    else:\n        return eat(number, need, remaining)\n",
        "num_ids": 51
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if remaining > 0:\n        remaining -= need\n        return [number, remaining]\n    else:\n        return [number, remaining]\n",
        "num_ids": 34
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    total_number = number + 1\n    left = remaining\n",
        "num_ids": 15
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # i = 0\n    # while i < len(operator):\n    #     print(i)\n    #     print(operator)\n    #     print(operand)\n    #     i += 1\n    #     if operator[i] == '-':\n    #         operator.pop(i)\n    #         operator.pop(i)\n    #         operand.pop(i)\n    #         operand.pop(i)\n    #         i -= 1\n    #     elif operator[i] == '+':\n    #         operator.pop(i)\n    #         operator.pop(i)\n    #         operand.pop(i)\n    #         operand.pop(i)\n    #         i -= 1\n    #     elif operator[i] == '*':\n    #         operator.pop(i)\n    #         operator.pop(i)\n    #         operand.pop(i)\n    #         operand.pop(i)\n    #         i -= 1\n    #     elif operator[i] == '/':\n    #         operator.pop(i)\n    #         operator.pop(i)\n    #         operand.pop(i)\n    #         operand.pop(i)\n    #         i -= 1\n    #     elif operator[i] == '**':\n    #         operator.pop(i)\n    #         operator.pop(i)\n    #         operand.pop(i)\n    #         operand.pop(i)\n    #         i -= 1\n",
        "num_ids": 362
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = 0\n",
        "num_ids": 6
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = 0\n    for a, b in zip(operator[:-1], operand):\n        result += a + b\n    return resul",
        "num_ids": 34
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Addition\n    if operator == '+':\n        return int(operator) + int(operand[0])\n    \n    # Subtraction\n    elif operator == '-':\n        return int(operator) - int(operand[0])\n",
        "num_ids": 61
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Initialize the output list\n    result = []\n",
        "num_ids": 14
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = None\n    if operator['+']:\n        result = operator['+'](operand)\n    elif operator['-']:\n        result = operator['-'](operand)\n    elif operator['*']:\n        result = operator['*'](operand)\n    elif operator['//']:\n        result = operator['//'](operand)\n    elif operator['**']:\n        result = operator['**'](operand)\n",
        "num_ids": 108
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Base case\n    if operator['+'][0] == '+':\n        result = operator['+'][1] + operand[0]\n    elif operator['+'][0] == '-':\n        result = operator['+'][1] - operand[0]\n    elif operator['+'][0] == '*':\n        result = operator['+'][1] * operand[0]\n    elif operator['+'][0] == '//':\n        result = operator['+'][1] // operand[0]\n    elif operator['+'][0] == '**':\n        result = operator['+'][1] ** operand[0]\n",
        "num_ids": 165
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if operator and operand:\n        answer = eval(operator) + eval(operand[0])\n",
        "num_ids": 25
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if operator['+', '*', '-'] is None or operand is None:\n        return None\n",
        "num_ids": 26
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if operator['+'] == operand[0]:\n        for i in range(len(operator)):\n            if operator[i] in operand[1:]:\n                return int(operator[i]) + int(operand[1:])\n            else:\n                return \"Invalid operation\"\n    elif operator['-'] == operand[0]:\n        for i in range(len(operator)):\n            if operator[i] in operand[1:]:\n                return int(operator[i]) - int(operand[1:])\n            else:\n                return \"Invalid operation\"\n    elif operator['*'] == operand[0]:\n        for i in range(len(operator)):\n            if operator[i] in operand[1:]:\n                return int(operator[i]) * int(operand[1:])\n            else:\n                return \"Invalid operation\"\n    elif operator['//'] == operand[0]:\n        for i in range(len(operator)):\n            if operator[i] in operand[1:]:\n                return int(operator[i]) // int(operand[1:])\n            else:\n                return \"Invalid operation\"\n    elif operator['**'] == operand[0]:\n        for i in range(len(operator)):\n            if operator[i] in operand[1:]:\n                return int(operator[i]) ** int(operand[1:])\n            else:\n                return \"Invalid operation\"\n    else:\n        return \"Invalid operation\"\n",
        "num_ids": 356
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def rev_convert(s):\n        if len(s) == 0:\n            return \"\"\n        s = s[0].upper() + s[1:].lower()\n        return s\n",
        "num_ids": 47
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = list(s)\n    i = len(s)-1\n    while i >= 0:\n        if s[i] =='':\n            s[i] = s[i][::-1]\n            i -= 1\n        else:\n            break\n    return \"\".join(s)\n",
        "num_ids": 71
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if not s:\n        return \"\"\n    l = []\n    v = \"\"\n    if s[0] in c:\n        s = s.lower()\n        l = s[::-1].replace(c[0],c[::-1])\n    elif s[0].isalpha():\n        return \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            l.append(s[i].upper())\n            v += c[i]\n        else:\n            l.append(s[i].lower())\n            v += c[i]\n    return \"\".join(l) + v",
        "num_ids": 173
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def r(s):\n        if len(s)==0:\n            return \"\"\n        if len(s)==1:\n            return s[0].upper()+s[1].lower()\n        else:\n            return r(s[1:])+s[0].upper()+r(s[1:])\n    return r(s)\n",
        "num_ids": 84
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not s:\n        return \"\"\n    out = \"\"\n    i,j = 0, len(s) - 1\n    while i < j:\n        if s[i].islower():\n            out += s[i].upper()\n            i += 1\n        elif s[j].isupper():\n            out += s[j].lower()\n            j -= 1\n        else:\n            out += s[i] + s[j]\n            i += 1\n            j -= 1\n    return out\n",
        "num_ids": 119
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(s) == 1:\n        return s\n    else:\n        if s[0].islower():\n            s = s[::-1]\n        else:\n            s = s[::-1]\n            s = s.swapcase()\n        return s\n    \ndef main():\n    \"\"\"\n    Example 1:\n    Input:\n    s = \"1234\"\n    Output:\n    \"1234\"\n    Explanation:\n    The letters in the string are in reverse order.\n    So, \"1234\" becomes \"34\"\n    Example 2:\n    Input:\n    s = \"AaBbCc\"\n    Output:\n    \"aBbCc\"\n    Explanation:\n    The letters in the string are in reverse order.\n    So, \"AaBbCc\" becomes \"CbAc\"\n    \"\"\"\n    s = input()\n    s = solve(s)\n    print(s)\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 242
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].lower()\n        elif s[i].isupper():\n            s[i] = s[i].upper()\n        else:\n            s[i] = s[i].lower()\n    s = ''.join(s)\n    return s\n",
        "num_ids": 91
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = list(s.lower())\n    i = 0\n    while i < len(s):\n        if s[i] == '@':\n            s[i] = s[i][::-1]\n        else:\n            s[i] = s[i]\n        i += 1\n    return \"\".join(s)\n",
        "num_ids": 80
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if s == \"\": return \"\"\n    if len(s) == 1: return s\n    return \"\".join(s[1:] + s[0])\n",
        "num_ids": 38
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(s)==0:\n        return \"\"\n    else:\n        return solve(s[1:])+solve(s[0])\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    md5_string = hashlib.md5()\n    if not text:\n        return None\n    text = text.encode('utf-8')\n    md5_string.update(text)\n    return md5_string.hexdigest()\n",
        "num_ids": 60
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    import hashlib\n",
        "num_ids": 6
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    text = str(text)\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    md5_hash = md5_hash.hexdigest()\n    return md5_hash\n",
        "num_ids": 64
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    text = text.strip()\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 43
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    text = str(text)\n    md5_obj = hashlib.md5()\n    md5_obj.update(text.encode('utf-8'))\n    md5_obj.update(b'\\n')\n    return md5_obj.hexdigest()\n",
        "num_ids": 67
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not text:\n        return None\n    s = md5(text)\n    return s.hexdigest() if s.hexdigest() else None\n",
        "num_ids": 38
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not text:\n        return None\n    text = str(text)\n    if len(text) % 16:\n        text += '=' * (16 - len(text) % 16)\n    return md5(text.encode()).hexdigest()\n",
        "num_ids": 62
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    text = text.strip()\n    if len(text) == 0:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
        "num_ids": 41
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    assert isinstance(text, str), 'text must be a string'\n    assert text, 'text must not be empty'\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n",
        "num_ids": 68
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n",
        "num_ids": 39
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert a > 0 and b > 0\n    digits = []\n    while a > 0:\n        # Calculate the correct number of digits to get the even digits\n        # between a and b.\n        d = 0\n        while a >= b:\n            a, b = a // b, a % b\n            d += 1\n        digits.extend(range(1, d))\n        a, b = a // b, a % b\n        # There must be at least 2 of the digits, so we can use the correct\n        # number of digits.\n        assert d >= 2\n        # Adjust a and b so that we can use the correct number of digits.\n        a, b = a * 10, b * 10\n    return digits\n",
        "num_ids": 171
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    nums = [i for i in range(a,b+1)]\n    return nums[2::3]\n",
        "num_ids": 29
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = a + b\n    n = 0\n    while s >= 10:\n        n = n * 10 + s % 10\n        s = s // 10\n    return [n]\n",
        "num_ids": 44
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for i in range(a, b+1):\n        if i%2 == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [i for i in range(a, b+1)]\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Generate integers between a and b.\n    integers = []\n    while a <= b:\n        integers.append(a)\n        a = a + 1\n    return integers\n",
        "num_ids": 45
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x for x in range(a, b+1) if x % 2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert a > 0\n    assert b > 0\n    evens = []\n    while a > 0:\n        if a % 2 == 0:\n            evens.append(a)\n        a = a - 1\n    \n    if b > 0:\n        while b > 0:\n            if b % 2 == 0:\n                evens.append(b)\n            b = b - 1\n    return evens\n",
        "num_ids": 97
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [int(i) for i in str(a)] + [int(i) for i in str(b)]\n",
        "num_ids": 29
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Generate the list of integers between a and b\n    return [int(x) for x in str(a) + str(b)]\n",
        "num_ids": 34
    }
]