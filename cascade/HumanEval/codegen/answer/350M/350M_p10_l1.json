[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for number in numbers:\n        if abs(number) > threshold:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(numbers) < 2:\n        return False\n    # first find the smallest element\n    smallest_number = min(numbers)\n    if smallest_number < threshold:\n        return False\n    # now try to find the second smallest element\n    for number in numbers:\n        if smallest_number > threshold:\n            return False\n        if number < smallest_number:\n            smallest_number = number\n    return True\n",
        "num_ids": 101
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return all(abs(numbers[i] - numbers[i + 1]) < threshold for i in range(len(numbers) - 1))\n",
        "num_ids": 35
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return bool(sum(numbers) - threshold <= sum(numbers) + threshold)\n",
        "num_ids": 22
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in numbers:\n        if abs(i) > threshold:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    min_difference = abs(numbers[0] - numbers[-1])\n    for element in numbers:\n        difference = abs(element - numbers[0])\n        if difference < min_difference:\n            min_difference = difference\n    return min_difference < threshold\n",
        "num_ids": 68
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # 1. check if all numbers are equal.\n    for number in numbers:\n        if abs(number - threshold) > abs(number - threshold - threshold):\n            return False\n    # 2. check if one number is close to other.\n    for number in numbers:\n        if abs(number - threshold) < abs(number - threshold + threshold):\n            return True\n    # 3. check if one number is close to another number\n    for number in numbers:\n        if abs(number - threshold) < abs(number - threshold + threshold):\n            return True\n    # 4. return False\n    return False\n",
        "num_ids": 139
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Compare two numbers between two sets of numbers\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if numbers == []:\n        return True\n",
        "num_ids": 12
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    numbers_ = sorted(numbers)\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # idea:\n    # go through each element, if it is a paren then create a new string, else continue\n    # return the result, otherwise return None\n    # brute force\n    # convert each string into a list of strings and then compare the string with every char\n    # if string is empty then return None\n    return_list = []\n    for char in paren_string:\n        if char in ['(', '{']:\n            return_list.append(char)\n        elif char == ')':\n            if return_list[-1] == '(':\n                return_list.pop()\n            else:\n                return None\n        elif char == '}':\n            if return_list[-1] == '{':\n                return_list.pop()\n            else:\n                return None\n        elif char == ']':\n            if return_list[-1] == '[' and return_list[-2] == '(':\n                return_list.pop()\n            else:\n                return None\n    return return_list\n",
        "num_ids": 243
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    groups = []\n    for i in paren_string:\n        if i == '(':\n            groups.append('(')\n        elif i == ')':\n            if groups[-1] == '(':\n                groups.pop()\n            else:\n                groups.append(')')\n",
        "num_ids": 69
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    open_braces = []\n    close_braces = []\n",
        "num_ids": 17
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    paren_string = paren_string.replace(\"(\", \" ( \").replace(\")\", \" ) \").replace(\"[\", \" [ \").replace(\"]\", \" ] \")\n    paren_list = paren_string.split()\n    \n    separate_paren_groups_list = []\n",
        "num_ids": 71
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    list_of_groups = []\n    if paren_string!= '':\n        # create list of all the parens inside the string\n        for i in paren_string:\n            if i == '(':\n                list_of_groups.append(i)\n                list_of_groups.append(i)\n            if i == ')':\n                if len(list_of_groups) > 0:\n                    if list_of_groups[-1] == '(':\n                        list_of_groups.pop()\n                        list_of_groups.pop()\n                        list_of_groups.append(i)\n                    else:\n                        continue\n                else:\n                    continue\n            if i == ')':\n                continue\n        list_of_groups.pop()\n        # check if all parens inside the string are closed\n        if len(list_of_groups) > 0:\n            # if parens close\n            if list_of_groups[-1] == '(':\n                list_of_groups.pop()\n                list_of_groups.pop()\n            else:\n                continue\n        # return the list of groups\n        return list_of_groups\n    # if the input string is empty\n    return []\n    # you can use this if you want to add logic to handle the case where you are just splitting\n    # the input string into pairs\n    # return list(string.split('('))\n    # return string.split(')')\n    # return string.split(')')\n",
        "num_ids": 349
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    paren_groups = []\n    current_group_open_paren = True\n",
        "num_ids": 19
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    paren_string = paren_string.replace('()','')\n    paren_string = paren_string.replace('()()','')\n    paren_string = paren_string.replace('(())','')\n    paren_string = paren_string.replace('(())())','')\n    paren_string = paren_string.replace('(()))','')\n    paren_string = paren_string.replace(')())','')\n    return [paren_string]\n",
        "num_ids": 118
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    separate_pars = []\n    current_paren_group = []\n    for ch in paren_string:\n        if ch == '(':\n            current_paren_group.append('(')\n        else:\n            if len(current_paren_group)!= 0:\n                separate_pars.append(current_paren_group.pop())\n            else:\n                separate_pars.append(')')\n    return separate_pars\n    \n",
        "num_ids": 109
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    groups = []\n    stack = []\n    for char in paren_string:\n        if char in ['(', ')', '{', '}']:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                while stack[-1]!= '(':\n                    groups.append(''.join(stack).strip('()()[]'))\n                    stack.pop()\n            elif char == '}':\n                while stack[-1]!= '{':\n                    groups.append(''.join(stack).strip('{()}'))\n                    stack.pop()\n            elif char == ')':\n                while stack[-1]!= '(':\n                    groups.append(''.join(stack).strip('()()[]'))\n                    stack.pop()\n        else:\n            groups.append(char)\n    return groups\n",
        "num_ids": 206
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    paren_stack = []\n    paren_stack.append(paren_string)\n    balanced_paren_string = []\n    while paren_stack:\n        current_paren = paren_stack.pop()\n        if current_paren == ')':\n            if not balanced_paren_string:\n                balanced_paren_string.append(current_paren)\n            elif balanced_paren_string[-1] == ')':\n                balanced_paren_string.append(current_paren)\n        elif current_paren == '(':\n            balanced_paren_string.append(current_paren)\n        else:\n            balanced_paren_string.append(' ')\n    return balanced_paren_string\n",
        "num_ids": 163
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # The result of this function is a floating point number, which can be\n    # further split into its two parts.\n    return number - math.floor(number)\n",
        "num_ids": 39
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return round(number, -int(np.log10(abs(number))))\n",
        "num_ids": 20
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    number = round(number, 2)\n    number = round(number, -1)\n    number = round(number, -2)\n    return number",
        "num_ids": 36
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert number > 0\n    remainder = number % 1\n    if remainder > 0:\n        remainder = abs(remainder)\n        number = number - remainder\n    else:\n        number = number\n    return number\n",
        "num_ids": 55
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if number < 0:\n        raise Exception(\"Can't truncate negative numbers\")\n    integer_part = int(number)\n    if integer_part == 0:\n        raise Exception(\"Can't truncate zero\")\n    decimals = integer_part % 10\n    integer_part = integer_part // 10\n    if decimals!= 0:\n        decimals = decimals - 1\n    return f\"{integer_part}{decimals}\"\n",
        "num_ids": 107
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # truncate number to the nearest integer\n    # so that it can be used as a number for addition\n    number = int(number)\n    integer_part = 1\n    decimal_part = 0\n",
        "num_ids": 48
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return truncate_number(abs(number))\n",
        "num_ids": 13
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    part = -number\n    return float(part)\n",
        "num_ids": 14
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    decimal_number = int(math.trunc(number))\n    return decimal_number\n",
        "num_ids": 23
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return truncate_number(number) / 10 ** truncate_number(abs(number))\n",
        "num_ids": 23
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sum(operations[:-1]) <= 0\n",
        "num_ids": 14
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(0, len(operations)):\n        if operations[i] == 0:\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return all(b < 0 for b in operations)\n",
        "num_ids": 14
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def check(bal, op):\n        if bal < 0:\n            return False\n        if op == 0:\n            return bal < 0\n        if bal < 0 and op == op-1:\n            return bal < 0\n        if op == op-1:\n            if bal < 0:\n                return bal < 0\n        return check(bal - op, op + 1)\n",
        "num_ids": 88
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    op = operations[0]\n    zero = 0\n    if op == 0:\n        return True\n    elif op < zero:\n        return False\n    else:\n        return below_zero(operations[1:])\n",
        "num_ids": 54
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum_of_balances = 0\n    for i in operations:\n        sum_of_balances += i\n    if sum_of_balances < 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 52
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Write your code here\n    return\n",
        "num_ids": 14
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation == 0:\n            return False\n        elif operation < 0:\n            return False\n        else:\n            if operation < balance:\n                balance -= operation\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Get a list of all of the numbers in the list\n    # Check if the current index is greater than or equal to zero\n    # Check if the number is less than 0, if so, it is above zero\n    # Add the current index to the length of the list\n    # If there are more than 0 numbers, it is above zero\n    # return False\n    # We'll keep checking until the current number is zero\n    # If it is not zero, we go over the list\n    # If the number is less than 0, we go over the list\n    # If the number is greater than 0, we go over the list\n",
        "num_ids": 141
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    total = 0.0\n    total_sum = 0.0\n    count = 0\n    for x in numbers:\n        total += abs(x-mean(numbers))\n        total_sum += abs(x-mean(numbers))\n        count += 1\n    return (total_sum/count)\n",
        "num_ids": 72
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    avg = sum(numbers) / len(numbers)\n    mad = 0\n    for x in numbers:\n        mad += abs(x - avg)\n    return mad / len(numbers)\n",
        "num_ids": 49
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    mean = sum(numbers)/len(numbers)\n    mean_difference = sum(abs(x-mean) for x in numbers) / len(numbers)\n    return mean_difference\n",
        "num_ids": 48
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(numbers) == 1:\n        return numbers[0]\n    \n    m = mean(numbers)\n    s = 0\n    for n in numbers:\n        s += abs(n-m)\n    \n    return s/len(numbers)\n    \ndef mean(numbers: List[float]) -> float:\n    \"\"\" For a given list of numbers, calculate the mean.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    \n    m = sum(numbers)/len(numbers)\n    return m\n",
        "num_ids": 161
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum(abs(n-numbers[0]) for n in numbers)/len(numbers)\n",
        "num_ids": 25
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    mean = mean(numbers)\n    deviation = 0.0\n    for number in numbers:\n        deviation += (number - mean) ** 2\n    return (deviation ** 0.5) / len(numbers)\n",
        "num_ids": 54
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum(numbers)/len(numbers)\n",
        "num_ids": 14
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # YOUR CODE HERE\n    return sum(abs(x - sum(numbers)/len(numbers)) for x in numbers)/len(numbers)\n",
        "num_ids": 36
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(numbers) == 0:\n        return 0.0\n",
        "num_ids": 18
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    total = 0\n    for i in numbers:\n        total += abs(i - mean(numbers))\n    return total / len(numbers)\n",
        "num_ids": 36
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return numbers + [delimeter] + numbers[::-1]\n",
        "num_ids": 17
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [n + delimeter for n in numbers]\n",
        "num_ids": 14
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [i for i in numbers for j in range(2)] + [delimeter] + [i for i in numbers for j in range(2)] + [i for i in numbers for j in range(2, len(numbers))]\n",
        "num_ids": 56
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(0, len(numbers)):\n        if len(numbers[i]) < len(numbers[i + 1]):\n            # Merge lists.\n            numbers[i] += numbers[i + 1][:len(numbers[i]) - len(numbers[i + 1])]\n    # Remove duplicates.\n    return list(dict.fromkeys(numbers))\n",
        "num_ids": 96
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return list(numbers) + list(range(numbers[-1] + delimeter, numbers[-1] + (numbers[-1] + delimeter) + delimeter + 1, delimeter))\n",
        "num_ids": 50
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    numbers = [1] + numbers\n    for i in range(len(numbers) - 1):\n        numbers[i + 1] = numbers[i] + delimeter\n    return numbers\n",
        "num_ids": 47
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(numbers) == 1:\n        return [numbers[0] + delimeter] + numbers[1:]\n    else:\n        return [numbers[0] + delimeter] + intersperse(numbers[1:], delimeter)\n",
        "num_ids": 61
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [n + delimeter for n in numbers]\n",
        "num_ids": 14
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(numbers) < 2:\n        return numbers\n",
        "num_ids": 16
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return numbers[:len(numbers)-len(numbers)%delimeter] + [delimeter] + numbers[len(numbers)%delimeter:]\n",
        "num_ids": 38
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    parens = []\n    nested_parens = [paren_string[i:j] for i in range(len(paren_string)) for j in range(i+1, len(paren_string)) if paren_string[i:j]!= \"()\" and paren_string[i:j]!= \"())\"]\n    \n    for nested_paren in nested_parens:\n        nested_parens_list = []\n        for nested_paren_token in nested_paren:\n            if nested_paren_token == \"(\":\n                nested_parens_list.append(nested_parens[-1])\n            elif nested_paren_token == \")\":\n                nested_parens_list.pop()\n        \n        if len(nested_parens_list) > 0:\n            parens.append(max(nested_parens_list))\n        else:\n            parens.append(0)\n    \n    return parens\n",
        "num_ids": 231
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Helper function to create an array of the deepest levels of nested parentheses\n    def get_deepest_levels(paren_string: str) -> List[int]:\n        deepest = 0\n        # Keep track of the nesting depth\n        for c in paren_string:\n            if c == '(':\n                deepest += 1\n            elif c == ')':\n                deepest -= 1\n        # Return the deepest level\n        return [deepest] if deepest!= 0 else [0]\n",
        "num_ids": 115
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if paren_string == '':\n        return []\n    \n    nesting = 0\n    max_nesting = 0\n    nesting_level = []\n    \n    for char in paren_string:\n        if char == '(':\n            nesting += 1\n            nesting_level.append(nesting)\n        elif char == ')':\n            if nesting == 0:\n                max_nesting = max(max_nesting, len(nesting_level))\n            else:\n                max_nesting = max(max_nesting, len(nesting_level))\n            nesting -= 1\n    \n    return max_nesting\n",
        "num_ids": 153
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Note: we can also use parse_nested_parens_no_parentheses(), but that is more concise.\n    return [int(paren.split(')')[0]) for paren in paren_string.split('(') if paren[0]!= ')']\n",
        "num_ids": 68
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    i = 0\n    while i < len(paren_string):\n        j = 0\n        while j < len(paren_string) and paren_string[i]!= '(':\n            if paren_string[i] == '(':\n                result.append(2)\n            elif paren_string[i] == ')':\n                result.append(3)\n            j += 1\n        i += 1\n    return result\n",
        "num_ids": 108
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    level = 0\n    level_to_deepest = [0]\n    for char in paren_string:\n        if char == '(':\n            level += 1\n            if level > level_to_deepest[-1]:\n                level_to_deepest.append(level)\n        if char == ')':\n            level -= 1\n            if level == -1:\n                return level_to_deepest[:]\n    return level_to_deepest[:len(paren_string)]\n",
        "num_ids": 117
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    level = 0\n    if paren_string:\n        for char in paren_string:\n            if char == '(':\n                level += 1\n            elif char == ')':\n                level -= 1\n                if level < 0:\n                    return []\n        return [level + 1]\n",
        "num_ids": 69
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # 1. process the input string\n    prev_char = None\n    prev_level = 0\n    for char in paren_string:\n        if char == '(':\n            if prev_char == '(':\n                prev_level += 1\n            else:\n                prev_level += 2\n        elif char == ')':\n            if prev_char == '(':\n                prev_level -= 1\n            else:\n                prev_level -= 2\n        prev_char = char\n        if prev_level > 0:\n            break\n    \n    # 2. return result\n    return [prev_level]\n        ",
        "num_ids": 143
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    parens = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parens.append(1)\n        elif paren_string[i] == ')':\n            if len(parens) > 0:\n                parens.pop()\n            else:\n                return []\n    return parens\n",
        "num_ids": 90
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    level = 0\n    stack = []\n    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) > 0:\n                if paren_stack[-1] == '(':\n                    paren_stack.pop()\n                    level += 1\n                else:\n                    level = 0\n                    break\n        elif char == ')':\n            if len(paren_stack) > 0:\n                if paren_stack[-1] == '(':\n                    paren_stack.pop()\n                else:\n                    break\n    if len(paren_stack) > 0:\n        level = 0\n    return [level] + paren_stack\n",
        "num_ids": 183
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Split the input string by the given substring\n    return [string for string in strings if substring in string]\n",
        "num_ids": 28
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [s for s in strings if s.lower().find(substring.lower())!= -1]\n",
        "num_ids": 27
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    filtered_strings = []\n    for s in strings:\n        if s.startswith(substring):\n            filtered_strings.append(s)\n    return filtered_strings\n",
        "num_ids": 45
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), len(numbers))\n",
        "num_ids": 38
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = 0\n    p = 1\n    for i in range(len(numbers)):\n        s += numbers[i]*p\n        p *= numbers[i]\n    return s, p\n",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total, product = 0, 1\n    for num in numbers:\n        total += num\n        product *= num\n    return total, product\n",
        "num_ids": 34
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        sum, prod = numbers[0], 1\n        for i in numbers[1:]:\n            sum += i\n            prod *= i\n        return (sum, prod)\n",
        "num_ids": 65
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not numbers:\n        return (0, 1)\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    product, sum = 1, 0\n",
        "num_ids": 10
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = (numbers[0], 1)\n    for num in numbers[1:]:\n        result = (result[0] * num, result[1] * num)\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    total = 0\n    prod = 1\n    for num in numbers:\n        total += num * prod\n        prod *= num\n    return total, prod\n",
        "num_ids": 39
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(numbers) == 0:\n        return []\n    l = len(numbers)\n    if l == 1:\n        return numbers\n    m = 0\n    for i in range(0, l - 1):\n        if numbers[i] > numbers[i + 1]:\n            m = numbers[i]\n            numbers[i] = numbers[i + 1]\n            numbers[i + 1] = m\n    return numbers\n",
        "num_ids": 105
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_ = []\n    min_ = []\n    # Store the current element till which we search.\n    current_element = numbers[0]\n",
        "num_ids": 35
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_list = []\n    numbers = sorted(numbers)\n    for i in range(len(numbers)):\n        numbers_to_check = numbers[:i] + numbers[i + 1:]\n        max_number = max(numbers_to_check)\n        max_list.append(max_number)\n",
        "num_ids": 79
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    from itertools import permutations\n",
        "num_ids": 10
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = [0] * (len(numbers) + 1)\n    s[0] = numbers[0]\n    for i in range(1, len(s)):\n        s[i] = max(s[i - 1], numbers[i - 1] + s[i])\n    return s[1:]\n",
        "num_ids": 76
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max_value = 0\n    curr_value = 0\n    for num in numbers:\n        curr_value = max(curr_value, num)\n        if max_value < curr_value:\n            max_value = curr_value\n",
        "num_ids": 61
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = []\n    window_max = 0\n",
        "num_ids": 13
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(numbers) == 0:\n        return []\n    max_numbers = [0]\n    for i in range(len(numbers)):\n        if max_numbers[i] == 0:\n            max_numbers[i] = numbers[i]\n        elif max_numbers[i] < numbers[i]:\n            max_numbers[i] = numbers[i]\n",
        "num_ids": 96
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_list = []\n    max_list_min = [0]\n",
        "num_ids": 19
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(numbers) <= 1:\n        return numbers\n    \n    max_ = [0] * len(numbers)\n    for i in range(1, len(numbers)):\n        max_[i] = numbers[i - 1]\n        if numbers[i] > max_[i - 1]:\n            max_[i] = numbers[i]\n    \n    res = max_[:]\n    for i in range(len(res) - 1):\n        res[i + 1] = max(res[i + 1] + numbers[i], numbers[i])\n        if res[i] > numbers[i]:\n            res[i] = numbers[i]\n    return res",
        "num_ids": 164
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if string == '':\n        return ''\n    if len(string) == 1:\n        return string\n    prefix = string[1:-1]\n    suffix = string[0]\n    palindromic_suffix = False\n    suffix_len = len(suffix)\n    for i in range(suffix_len):\n        for j in range(len(prefix)):\n            if suffix[i]!= prefix[j]:\n                break\n        else:\n            palindromic_suffix = True\n            break\n    return prefix + suffix[::-1] + suffix if palindromic_suffix else prefix + suffix",
        "num_ids": 150
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    string = string.lower()\n    if len(string) < 3:\n        return string\n",
        "num_ids": 23
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pre_suffix = string[::-1]\n    for suffix in suffixes(string):\n        post_suffix = suffix[::-1]\n        if is_palindrome(post_suffix + pre_suffix) and string!= post_suffix:\n            return post_suffix\n    return string\n",
        "num_ids": 76
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = ''\n    for i in range(len(string)):\n        if string[i] == 'a':\n            prefix = string[:i]\n            prefix_suffix = string[i + 1:]\n            if prefix_suffix == prefix[::-1] and is_palindrome(prefix_suffix):\n                result = prefix + prefix_suffix\n    return result\n",
        "num_ids": 91
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def find_palindrome(string: str, prefix: str) -> str:\n        \"\"\" Finds the shortest palindrome that begins with the prefix.\n        >>> find_palindrome('')\n        ''\n        >>> find_palindrome('cat', 'c')\n        'cat'\n        \"\"\"\n        postfix = []\n        for char in string:\n            if char not in prefix and char not in postfix:\n                postfix.append(char)\n            elif char in prefix and char not in postfix:\n                postfix.append(char)\n            else:\n                return ''.join(postfix) + char\n        return ''.join(postfix) + ''.join(postfix)\n",
        "num_ids": 166
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # initialize lists\n    palindrome = []\n    suffix = []\n    prefix = []\n    \n    # iterate over string\n    for char in string:\n        # if char is palindrome\n        if char!= string[::-1]:\n            # add to palindrome list\n            palindrome.append(char)\n        # else add to suffix list\n        else:\n            suffix.append(char)\n    # iterate over suffix\n    for suffix_char in suffix:\n        # if suffix_char is palindrome\n        if suffix_char == string[::-1]:\n            # append to prefix list\n            prefix.append(suffix_char)\n        # otherwise add to suffix list\n        else:\n            prefix.append(suffix_char)\n    # return result\n    return ''.join(prefix) + ''.join(palindrome",
        "num_ids": 203
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    string = string[::-1]\n    longest = 0\n    prefix = ''\n    for i in range(len(string)):\n        if string[i] == 'a':\n            prefix += 'b'\n        else:\n            if is_palindrome(prefix + string[i:]):\n                longest = max(longest, len(prefix + string[i:]))\n    return string[:longest]\n",
        "num_ids": 100
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    print(string)\n",
        "num_ids": 7
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    palindrome = ''\n    prefix = ''\n    i = 0\n    while len(string) > i:\n        if is_palindrome(string[i:]):\n            if is_palindrome(prefix + string[:i]):\n                palindrome += prefix + string[:i] + string[i:][::-1] + string[i:]\n                prefix = ''\n            else:\n                prefix += string[:i]\n        else:\n            prefix += string[:i]\n        i += 1\n    return palindrome",
        "num_ids": 128
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    suffix = ''\n",
        "num_ids": 7
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert len(a) == len(b)\n    return ''.join(['1' if x == '0' else '0' for x in a]) + ''.join(['1' if x == '1' else '0' for x in b])\n",
        "num_ids": 61
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return ''.join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    c = 0\n    for i in range(len(a)):\n        c += a[i] * b[i]\n    return hex(c % 2)\n",
        "num_ids": 40
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join([chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a))])\n    \n",
        "num_ids": 37
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # convert to int to easily extract first half\n    a = int(a, 2)\n    b = int(b, 2)\n    \n    a_str = bin(a)[2:]\n    b_str = bin(b)[2:]\n    \n    # take middle half of binary of both values\n    length = len(a_str)\n    half = int(length / 2)\n    \n    # substract 1s and 0s\n    a_str = '0' * half + a_str\n    b_str = '0' * half + b_str\n    \n    # xor result with in_str\n    xor_result = int(a_str, 2) ^ int(b_str, 2)\n    \n    return '{0:b}'.format(xor_result)\n    \ndef string_xor_partial(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor_partial('010', '110')\n    '100'\n    \"\"\"\n    \n    # convert to int to easily extract first half\n    a = int(a, 2)\n    b = int(b, 2)\n    \n    a_str = bin(a)[2:]\n    b_str = bin(b)[2:]\n    \n    # take middle half of binary of both values\n    length = len(a_str)\n    half = int(length / 2)\n    \n    # substract 1s and 0s\n    a_str = '0' * half + a_str\n    b_str = '0' * half + b_str\n    \n    # xor result with in_str\n    xor_result = int(a_str, 2) ^ int(b_str, 2)\n    \n    return '{0:b}'.format(xor_result)\n    \ndef string_xor_slow(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor_slow('010', '110')\n    '100'\n    \"\"\"\n    \n    # convert to int to easily extract first half\n    a = int(a, 2)\n    b = int(b, 2)\n    \n    a_str = bin(a)[2:]\n    b_str = bin(b)[2:]\n    \n    # take middle half of binary of both values\n    length = len(a_str)\n    half = int(length / 2)\n    \n    # substract 1s and 0s\n    a_str = '0' * half + a_str\n    b_str = '0' * half + b_str\n    \n    # xor result with in_str\n    xor_result = int(a_str, 2) ^ int(b_str, 2)\n    \n    return '{0:b}'.format(xor_result)\n    \ndef string_xor_fast(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor_fast('010', '110')\n    '100'\n    \"\"\"\n    \n    # convert to int to easily extract first half\n    a = int(a, 2)\n    b = int(b, 2)\n    \n    a_str = bin(a)[2:]\n    b_str = bin(b)[2:]\n    \n    # take middle half of binary of both values\n    length = len(a_str)\n    half = int(length / 2)\n    \n    # substract 1s and 0s\n    a_str = '0' * half + a_str\n    b_str = '0' * half + b_str\n    \n    # xor result with in_str\n    xor_result = int(a_str, 2) ^ int(b_str, 2)\n    \n    return '{0:b}'.format(xor_result)\n    \ndef string_xor_all(a: str, b: str) -> str:",
        "num_ids": 1024
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    out = \"\"\n    for i in range(len(a)):\n        if (a[i] == \"1\" and b[i] == \"1\"):\n            out = out + \"1\"\n        elif (a[i] == \"1\" and b[i] == \"0\"):\n            out = out + \"0\"\n        elif (a[i] == \"0\" and b[i] == \"1\"):\n            out = out + \"0\"\n        else:\n            out = out + \"1\"\n    return out\n",
        "num_ids": 130
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return ''.join([chr((int(a, 2) ^ int(b, 2))&255), chr((int(a, 2) ^ int(b, 2))&255), chr((int(a, 2) ^ int(b, 2))&255)])\n",
        "num_ids": 66
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    c = ''\n    for i in range(len(a)):\n        c += bin(ord(a[i]) ^ ord(b[i]))[2:]\n    return c\n",
        "num_ids": 45
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    c = [chr(int(b[i], 2) ^ int(a[i], 2)) for i in range(len(b))]\n    return \"\".join(c)\n",
        "num_ids": 45
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = ''\n    \n    for i in range(0, len(a)):\n        if a[i] == b[i]:\n            result += '1'\n        else:\n            result += '0'\n            \n    return result\n",
        "num_ids": 58
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst = []\n    for string in strings:\n        if len(string) > len(lst):\n            lst = string\n",
        "num_ids": 33
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    len_string = len(strings[0])\n    for s in strings:\n        len_string = max(len_string, len(s))\n",
        "num_ids": 36
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    longest = \"\"\n    start = 0\n    for s in strings:\n        if len(s) > len(longest):\n            longest = s\n        if len(s) < len(longest):\n            start = len(s)\n    return longest\n    \ndef findLongest(strings: List[str]) -> Optional[str]:\n    \"\"\" return the longest one in case of multiple strings of the same length\n    >>> findLongest([])\n",
        "num_ids": 108
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    length = len(strings)\n    max_length = 0\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n",
        "num_ids": 45
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n",
        "num_ids": 59
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l = len(strings)\n    if l == 0:\n        return None\n    else:\n        return max(strings, key=len)\n",
        "num_ids": 35
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max_len = 0\n    current_len = 0\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            current_len = string\n    return current_len",
        "num_ids": 56
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_len = 0\n    for x in strings:\n        if len(x) > max_len:\n            max_len = len(x)\n",
        "num_ids": 37
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return strings[0]\n",
        "num_ids": 26
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    if a < b:\n        greatest = a\n    else:\n        greatest = b\n    \n    for i in range(2, greatest):\n        if ((a % i) == 0) and ((b % i) == 0):\n            greatest = i\n    \n    return greatest\n",
        "num_ids": 71
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return max(divisors)\n",
        "num_ids": 55
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    while b:\n        if a % b == 0:\n            return a // b\n        a = a % b\n        #a += 1\n    return a\n",
        "num_ids": 38
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    while b!= 0:\n        if a % b == 0:\n            a = a // b\n        else:\n            b = b // a\n    return a\n",
        "num_ids": 40
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    while a % b!= 0:\n        a = a % b\n    return a\n",
        "num_ids": 22
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max_divisor = max(a, b)\n    if max_divisor == a and max_divisor == b:\n        return max_divisor\n    return greatest_common_divisor(a % max_divisor, b % max_divisor)\n",
        "num_ids": 69
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Note that here we only need to check for each\n    # digit of a.\n    common_divisor = 1\n    while common_divisor <= a and common_divisor <= b:\n        if a % common_divisor == 0 and b % common_divisor == 0:\n            return common_divisor\n        common_divisor += 1\n",
        "num_ids": 89
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    while b % a == 0:\n        a, b = b, a % b\n        count += 1\n    return a if count == 0 else ",
        "num_ids": 40
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    while b!= 0:\n        if a % b == 0:\n            a = a // b\n        else:\n            b = b % a\n    return a\n",
        "num_ids": 40
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a < b:\n        smaller = a\n        bigger = b\n    else:\n        smaller = b\n        bigger = a\n    while(bigger % smaller!= 0):\n        bigger -= 1\n    return bigger",
        "num_ids": 57
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    all_prefixes_list = []\n    # Find all possible prefixes from the shortest to longest length\n    for i in range(len(string) - 1):\n        prefix = string[:i + 1]\n        # If the prefix starts with lowercase letter, add it to the final list\n        if prefix[0].islower():\n            all_prefixes_list.append(prefix)\n    return all_prefixes_list\n",
        "num_ids": 100
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    prefixes = []\n",
        "num_ids": 7
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    prefixes = []\n    for i in range(len(string) - 1):\n        prefixes.append(string[i: i + 2])\n    return prefixes\n",
        "num_ids": 41
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    shortest = ['a', 'ab', 'abc']\n    longest = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i:j] in shortest:\n                shortest_index = shortest.index(string[i:j])\n                longest_index = shortest.index(string[i:j], shortest_index + 1)\n                longest = [string[i:j], shortest[shortest_index], string[j:longest_index]]\n                # print(string[i:j] + \":\" + str(shortest_index) + \":\" + str(longest_index))\n                # print(shortest)\n                # print(string[i:j])\n                # print(shortest_index, longest_index)\n    return longest\n",
        "num_ids": 195
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    prefixes = []\n    last_prefix = ''\n    for i in range(len(string)):\n        if string[i] == last_prefix:\n            prefixes.append(last_prefix)\n        else:\n            prefixes.append(last_prefix + string[i])\n        last_prefix = string[i]\n    prefixes.append(last_prefix)\n    return prefixes\n",
        "num_ids": 94
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prefixes = []\n",
        "num_ids": 7
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # The idea here is:\n    # 1. go from left to right, always append the first characters that are not the same as the prefix\n    # 2. if the result is a prefix, return it\n    # 3. otherwise, go through the rest of the string, if we have two or more characters with the same prefix, append it to the result\n    # 4. return the result\n",
        "num_ids": 87
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # convert string to string of letters\n    return sorted(list(set(string) & set(string[::-1])))\n",
        "num_ids": 31
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 40
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # base cases\n    if len(string) == 0:\n        return []\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    n_string = '0'\n    for i in range(0,n):\n        n_string += str(i+1)\n    return n_string\n",
        "num_ids": 41
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return f'{0:<{n}}'\n",
        "num_ids": 14
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert n >= 0, 'n must be non-negative'\n    \n    s = str(n)\n    for _ in range(n):\n        s +=''\n    return s\n",
        "num_ids": 44
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    i = 0\n    res = ''\n    while i < n:\n        res += str(i)\n        i += 1\n    return res\n",
        "num_ids": 35
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '3'\n    elif n == 4:\n        return '4'\n    elif n == 5:\n        return '5'\n    else:\n        return str(n)\n",
        "num_ids": 95
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return'' * (n - 1) + str(n)\n",
        "num_ids": 16
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Hint: use map() to do this.\n    return''.join(map(str, range(n)))\n",
        "num_ids": 28
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = ''\n    for i in range(n):\n        result += str(i)\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return'' + str(n) * (str(n) +'')\n",
        "num_ids": 19
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return ''\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '1'\n    elif n == 3:\n        return '2'\n    elif n == 4:\n        return '3'\n    elif n == 5:\n        return '4'\n    else:\n        return string_sequence(n-1) +'' + string_sequence(n-2) +'' + string_sequence(n-3) +'' + string_sequence(n-4)\n",
        "num_ids": 130
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    distinct_characters = {}\n    for char in string:\n        distinct_characters[char] = string.count(char)\n    return len(distinct_characters)\n",
        "num_ids": 45
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return len(string.replace(' ','').replace('!','').replace('.','').replace(',',''))\n",
        "num_ids": 30
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = 0\n    for char in string:\n        if char in string:\n            result += 1\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0\n    for char in string:\n        if char.isalpha():\n            result += 1\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum(1 for i in string if i.isalpha())\n",
        "num_ids": 17
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for c in string:\n        if c.isalpha() or c.isupper():\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in string:\n        if i.isalpha():\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    beats = 0\n    notes = []\n    for s in music_string:\n        if s == 'o':\n            beats += 4\n        elif s == 'o|':\n            beats += 2\n        elif s == '.|':\n            beats += 1\n",
        "num_ids": 66
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    beats = []\n",
        "num_ids": 7
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # read in the string\n    words = music_string.split(\"|\")\n",
        "num_ids": 20
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    beats = [0] * (len(music_string) - 1)\n    beats[0] = int(music_string[1])\n    i = 2\n    while i < len(music_string):\n        if music_string[i] == '|':\n            beats[i] = beats[i-2] + beats[i-1]\n            i = i + 1\n        else:\n            beats[i] = beats[i-1] + 1\n            i = i + 1\n    return beats\n",
        "num_ids": 124
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO\n    pass",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for c in music_string:\n        if c in '|.':\n            result.append(len(music_string))\n        elif c == 'o':\n            result.append(2)\n        elif c == '.':\n            result.append(1)\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = music_string.count('o')\n    # check if the note has only one beat\n    if n == 1:\n        return [1]\n    # check if the note has only two beats\n    elif n == 2:\n        return [2]\n    # check if the note has only one quarter note\n    elif n == 3:\n        return [1]\n    # check if the note has only one whole note\n    elif n == 4:\n        return [1]\n    else:\n        # check if the notes start with a note\n        if music_string[0] == 'o':\n            return [1]\n        else:\n            return [1, music_string[0]]\n",
        "num_ids": 164
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [int(x) for x in music_string.split('|') if x.strip()]\n",
        "num_ids": 26
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    notes = []\n    notes_left = music_string.split(' ')\n    for note in notes_left:\n        notes.append(int(note))\n    return notes\n",
        "num_ids": 43
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    music = []\n    for char in music_string:\n        if char == '.':\n            music.append(4)\n        elif char == 'o':\n            music.append(2)\n        elif char == 'o|':\n            music.append(1)\n        else:\n            music.append(0)\n    return music\n",
        "num_ids": 82
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for letter in string:\n        if letter == substring:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    counter = 0\n    for letter in string:\n        if letter in substring:\n            counter += 1\n    return counter\n",
        "num_ids": 30
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total = 0\n    for x in range(len(string)):\n        if string[x:len(string)].lower() == substring.lower():\n            total += 1\n    return total\n",
        "num_ids": 46
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(0, len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            return i\n    return 0",
        "num_ids": 48
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = 0\n    for c in substring:\n        n += string.count(c)\n    return n\n",
        "num_ids": 28
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if substring == string[i:i+len(substring)]:\n            count+=1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    \n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    \n    return count\n",
        "num_ids": 55
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Create a dictionary with the frequency of the substring\n    # Find the start and end positions of the substring in the original string\n    # For each substring\n    # Count overlaping cases\n    # return the number of cases\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return str_count_overlap(string, substring, 0, 0, 0, False)",
        "num_ids": 23
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    string =''\n    string = string.join(map(str, sorted(numbers.split())))\n    return string\n",
        "num_ids": 30
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # First, add the 'zero' number to the end of the string.\n    numbers += '0'\n    # Then, sort the numbers from smallest to largest.\n    return''.join(sorted(numbers.split()))\n",
        "num_ids": 55
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return''.join(sorted(numbers)[::-1])\n",
        "num_ids": 17
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # set of indexes of the input characters as the sorted characters\n    indexes = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n",
        "num_ids": 93
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return''.join(map(str, sorted(numbers.split(' '))))\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Not sure this is worth working yet. \n    return \" \".join(sorted(numbers))\n    \n    \ndef numbers_and_numbers_reversed(numbers: List[str]) -> List[str]:\n    \"\"\" Input is a list of digits separated by whitespace.\n    Return a list of the digits in reverse order\n    >>> numbers_and_numbers_reversed([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    \"\"\"\n    # Not sure this is worth working yet. \n    return list(reversed(numbers))\n",
        "num_ids": 140
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Create new list of numbers\n    new_numbers = []\n    # Loop through numbers, add numbers to list\n    for number in numbers.split():\n        new_numbers.append(int(number))\n    # Sort list\n    new_numbers.sort()\n    # Return string\n    return''.join([str(num) for num in new_numbers])\n",
        "num_ids": 87
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    import operator\n    number_list = []\n    for number in numbers.split():\n        number_list.append(int(number))\n",
        "num_ids": 33
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    try:\n        numbers = numbers.split()\n    except AttributeError:\n        raise Exception(\"Expected number to be a string\")\n    \n    if len(numbers) < 2:\n        return numbers[0]\n    \n    if numbers[0] == 'zero' or numbers[0] == 'one' or numbers[0] == 'two' or numbers[0] == 'three' or numbers[0] == 'four' or numbers[0] == 'five' or numbers[0] =='six' or numbers[0] =='seven' or numbers[0] == 'eight' or numbers[0] == 'nine':\n        return numbers[0]\n",
        "num_ids": 155
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    index = len(numbers) - 1\n    for i in range(len(numbers) - 1, -1, -1):\n        if numbers[i] >= numbers[index]:\n            index -= 1\n        else:\n            index = i\n            break\n    return numbers[:index + 1]\n",
        "num_ids": 72
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        return None, None\n",
        "num_ids": 18
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    smallest = numbers[0]\n    smallest_index = 0\n    for i in range(1, len(numbers)):\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n            smallest_index = i\n    return smallest, smallest_index\n",
        "num_ids": 67
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # make sure the list is actually an unsorted and unique list\n    numbers.sort()\n    \n    # find the index of the first number in the list\n    # and assign it to the first_index\n    first_index = 0\n    for num in numbers:\n        if num > numbers[first_index]:\n            first_index = numbers.index(num)\n            break\n    \n    # the number at the first index is the smallest one\n    smaller_num = numbers[first_index]\n    smallest_index = first_index\n    \n    # find the index of the last number in the list\n    # and assign it to the last_index\n    last_index = len(numbers) - 1\n    for num in numbers[::-1]:\n        if num < numbers[last_index]:\n            last_index = numbers.index(num)\n            break\n    \n    # the number at the last index is the biggest one\n    biggest_num = numbers[last_index]\n    biggest_index = last_index\n    \n    # return the closest numbers\n    return smallest_num, smallest_num\n",
        "num_ids": 260
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    small = min(numbers)\n    big = max(numbers)\n",
        "num_ids": 19
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        return numbers[0], numbers[1]\n",
        "num_ids": 23
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Since the `sorted` function can't guarantee that the input list is sorted,\n    # we need to sort the list.\n    numbers.sort()\n",
        "num_ids": 38
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    nums = sorted(numbers)\n    smallest = numbers[0]\n    smallest_index = 0\n    for i, num in enumerate(numbers[1:]):\n        if num - smallest < smallest:\n            smallest = num - smallest\n            smallest_index = i\n    return smallest_index, smallest\n",
        "num_ids": 77
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    smallest = numbers[0]\n    closest = smallest\n    for i in range(len(numbers)):\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n        elif smallest < numbers[i]:\n            closest = numbers[i]\n    return smallest, closest\n",
        "num_ids": 74
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    closest_list = [abs(numbers[0] - numbers[1]), abs(numbers[0] - numbers[2]), abs(numbers[0] - numbers[3])]\n    smaller = closest_list[0]\n    larger = closest_list[1]\n    for num in closest_list:\n        if num < smaller:\n            smaller = num\n        if num > larger:\n            larger = num\n    return smaller, larger\n",
        "num_ids": 110
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    closest_smaller = None\n    smaller_value = None\n    closest_larger = None\n    larger_value = None\n    for number in numbers:\n        if closest_smaller is None or number < closest_smaller:\n            smaller_value = number\n            closest_smaller = number\n        elif closest_larger is None or number > closest_larger:\n            closest_larger = number\n            larger_value = number\n    return (smaller_value, larger_value)\n",
        "num_ids": 128
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [n / 10 for n in numbers]\n",
        "num_ids": 13
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n    if min_number == max_number:\n        return [min_number]\n    else:\n        return [ (min_number + 1) / (max_number - min_number) * (value - min_number) + (1 - min_number) / (max_number - min_number) for value in numbers]\n",
        "num_ids": 98
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    minimum = numbers[0]\n    maximum = numbers[-1]\n    result = []\n    for number in numbers:\n        if number > maximum:\n            result.append(maximum)\n            maximum = number\n        elif number < minimum:\n            result.append(minimum)\n            minimum = number\n        elif number == minimum:\n            result.append(number)\n    return result\n",
        "num_ids": 91
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    rescaled = []\n    while len(numbers) > 0:\n        val = numbers.pop(0)\n        rescaled.append(val * 2.0)\n    return rescaled\n",
        "num_ids": 48
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [number/10.0 for number in numbers]\n",
        "num_ids": 15
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [x / 100 for x in numbers]\n",
        "num_ids": 13
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # better solution\n    # numbers = sorted(numbers, reverse=True)\n    # new_numbers = [n*len(numbers) for n in numbers]\n    # return new_numbers\n    return [n*len(numbers) for n in numbers]\n",
        "num_ids": 65
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: implement the rescaling to this unit.\n    raise NotImplementedError(\"Rescale to unit not implemented\")\n    # return [float(a) / max(1, float(b)) for a, b in zip(numbers, rescale_to_unit(numbers))]",
        "num_ids": 70
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Find the smallest value in the list\n    min_val = min(numbers)\n    if min_val == 0.0:\n        return [0.0]\n",
        "num_ids": 41
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: validate inputs\n    # TODO: implement\n    return numbers\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [value for value in values if type(value) in [int, float]]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n    # return filter(lambda x: isinstance(x, int), values)\n",
        "num_ids": 38
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [v for v in values if isinstance(v, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [\n        int(x) if x.isdigit() else x\n        for x in values\n        if x.isdigit()\n    ]\n",
        "num_ids": 38
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [val for val in values if isinstance(val, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [v for v in values if isinstance(v, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    values = list(values)\n    try:\n        value = next(value for value in values if type(value) is int)\n    except StopIteration:\n        return []\n    if type(value) is float:\n        raise TypeError(\n            \"Only integers are possible as filter values, not 'float'.\")\n    return [value]\n",
        "num_ids": 81
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if string == '':\n        return 0\n    else:\n        return len(string)\n",
        "num_ids": 23
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    return len(string)\n",
        "num_ids": 10
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l = 0\n    for i in range(len(string)):\n        l += 1 if string[i] == string[i+1] else 0\n    return l\n",
        "num_ids": 41
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        return n/2\n    else:\n        while n % 4 == 0:\n            n //= 4\n        return n\n",
        "num_ids": 39
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if n < 2:\n        return n\n    \n    i = 2\n    \n    while n % i == 0:\n        i += 1\n    \n    return i\n",
        "num_ids": 43
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # I assume the first part of this equation is the largest number divisors\n    # so it's the largest number divisible by that\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\n",
        "num_ids": 70
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    while True:\n        is_divisible = True\n        for x in range(1, n):\n            if n % x == 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            return n\n        else:\n            return n-1\n",
        "num_ids": 67
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    divisors = [x for x in range(1, n + 1) if n % x == 0]\n    return max(divisors)\n",
        "num_ids": 36
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return 2\n    while n % 2 == 0:\n        n = n // 2\n    return 3\n",
        "num_ids": 45
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    return max(divisors",
        "num_ids": 57
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def is_prime(num: int) -> bool:\n        \"\"\" Checks whether num is a prime number \"\"\"\n        if num == 2 or num == 3:\n            return True\n        if num == 1:\n            return False\n        if num == 0:\n            return False\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        \n        for i in range(5, int(num**(0.5))+1, 2):\n            if num % i == 0 or num % (i+2) == 0:\n                return False\n        return True\n        \n    def largest_divisor_rec(num: int) -> int:\n        \"\"\" Finds the largest divisor of num using the recursion \"\"\"\n        if num == 2 or num == 3:\n            return 2\n        if is_prime(num):\n            return 1\n        if num % 2:\n            return 0\n        if num % 3 == 0:\n            return 0\n        if num < 3:\n            return 0\n        for i in range(5, int(num**(0.5))+1, 2):\n            if num % i == 0 or num % (i+2) == 0:\n                return 0\n        if num >= 5:\n            return 0\n        if num % 2 == 1:\n            return 1\n        else:\n            return 2\n    \n    return largest_divisor_rec(n)\n",
        "num_ids": 327
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Break down the number by powers of 2 and store the result in a list\n    divisors = []\n    for power in range(2, int(math.sqrt(n)) + 1):\n        if n % power == 0:\n            divisors.append(power)\n            if n // power == n:\n                return power\n    return max(divisors)\n",
        "num_ids": 88
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return i\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** Running some doctests for largest_divisor ***\")\n        doctest.testmod(verbose=True)",
        "num_ids": 98
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n    if n == 0:\n        return []\n    if n == 2:\n        return [1, 2]\n    if n % 2 == 0:\n        return factorize(n // 2)\n    else:\n        return factorize(n - 1) + [2]\n",
        "num_ids": 77
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    import math\n    factors = []\n    while(n!=1):\n        if n%2==0:\n            n = math.sqrt(n)\n            n1 = int(n)\n            factors.append(n1)\n            print(factors)\n        else:\n            n = n*2\n            n1 = int(n)\n            factors.append(n1)\n            print(factors)\n    return factors\n",
        "num_ids": 107
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # if number is 1, the factor is 1\n    if n == 1:\n        return [1]\n    # if n is the same as the largest so return all factors\n    if n == n[-1]:\n        return factorize(n-1)\n    else:\n        # n is not equal to the largest so return all factors of n\n        return factorize(n//n[-1]) + factorize(n%n[-1])\n",
        "num_ids": 105
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    from itertools import permutations\n    from collections import Counter\n",
        "num_ids": 16
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    factors = []\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            if (i % j) == 0:\n                break\n        else:\n            factors.append(i)\n    return factors\n",
        "num_ids": 62
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [i for i in range(2, n+1)]\n",
        "num_ids": 17
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    factors = [2, 2, 2]\n",
        "num_ids": 13
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    from math import sqrt\n    # find all the squares of the factors, which have sqrt(factor)\n    # the factors should be in order from smallest to largest\n    factor_squares = []\n    for i in range(1, sqrt(n) + 1):\n        # take a factor of the square\n        factor = n // i\n        # if it is a square number, add it to the list\n        if factor * factor == n:\n            factor_squares.append(factor)\n        # if it is not a square number, continue\n        else:\n            continue\n    return factor_squares\n",
        "num_ids": 141
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Write your code here.\n    lst = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            lst.append(i)\n            if n // i == i:\n                lst.append(n // i)\n    return lst\n",
        "num_ids": 78
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Initialize all factorized numbers to 0\n    factorized = [0]*(n + 1)\n",
        "num_ids": 26
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    d = {}\n    for num in numbers:\n        if num not in d:\n            d[num] = 1\n        else:\n            d[num] += 1\n    for num in d:\n        if d[num] > 1:\n            result.append(num)\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    remove_list = []\n    for number in numbers:\n        if number not in remove_list:\n            remove_list.append(number)\n",
        "num_ids": 35
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] == numbers[j]:\n                numbers[i] = 0\n    return numbers\n",
        "num_ids": 56
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [number for number, count in Counter(numbers).items() if count > 1]\n",
        "num_ids": 23
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    temp = []\n    for num in numbers:\n        if num not in temp:\n            temp.append(num)\n",
        "num_ids": 29
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    seen = {}\n    return [element for element, count in collections.Counter(numbers).items() if count > 1 and element not in seen]\n",
        "num_ids": 35
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    set_numbers = set(numbers)\n    for i in range(len(numbers)):\n        if numbers[i] in set_numbers:\n            numbers[i] = None\n    return numbers\n",
        "num_ids": 52
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    results = []\n    for num in numbers:\n        if num not in results:\n            results.append(num)\n    return results\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_list = []\n    for i in numbers:\n        if numbers.count(i) > 1:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 43
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    counter = {} # Init a dictionary\n    res = [] # init a new list of results to hold the removed elements\n    for i in numbers:\n        counter[i] = counter.get(i, 0) + 1\n    for key, value in counter.items():\n        if value > 1:\n            res.append(key)\n    return res\n",
        "num_ids": 81
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return string.lower() + string.upper(",
        "num_ids": 12
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = \"\"\n    for c in string:\n        if c.lower() in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            result += c.upper()\n        else:\n            result += c.lower()\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join([''.join(c.upper() if c.islower() else c.lower() for c in string).replace(' ', '_').replace('-', '_').replace('_', '-') for c in string])\n",
        "num_ids": 57
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return string.lower()\n",
        "num_ids": 8
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return string.lower().upper() + string.upper(",
        "num_ids": 14
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    return string.upper()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    string_list = list(string)\n    for char in string_list:\n        if char.isupper():\n            char = char.lower()\n        elif char.islower():\n            char = char.upper()\n        string_list[string_list.index(char)] = char\n    return ''.join(string_list)\n",
        "num_ids": 80
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #\"Hello\" -> \"Helloworld\"\n    strs = string.lower()\n    #\"hELLO\" -> \"hello\"\n    strs = string.upper()\n    #\"hello\" -> \"Hello\"\n    strs = string.capitalize()\n    return strs\n",
        "num_ids": 68
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n",
        "num_ids": 69
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return \"\"\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[0] + concatenate(strings[1:])\n",
        "num_ids": 54
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not strings:\n        return ''\n    \n    return ''.join(strings)\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return ''\n",
        "num_ids": 15
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    string = ''\n    for s in strings:\n        string += s\n    return string\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return ''.join(strings)",
        "num_ids": 9
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: You must implement this function.\n    pass\n",
        "num_ids": 16
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n    \ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n    ['bcd', 'cde', 'array']\n    \"\"\"\n    return [s for s in strings if s.endswith(suffix)]\n    \ndef filter_by_both(strings: List[str], prefix: str, suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with prefix and end with suffix.\n    >>> filter_by_both(['abc', 'bcd', 'cde', 'array'], 'a', 'd')\n    ['bcd', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix) and s.endswith(suffix)]\n    \ndef filter_by_suffix_and_prefix(strings: List[str], prefix: str, suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with prefix and end with suffix.\n    >>> filter_by_suffix_and_prefix(['abc', 'bcd', 'cde', 'array'], 'd', 'e')\n    ['bcd', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix) and s.endswith(suffix)]\n    \ndef filter_by_first_letter(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings by first letter of the first word.\n    >>> filter_by_first_letter(['abc', 'bcd', 'cde', 'array'])\n    ['bcd', 'array']\n    \"\"\"\n    return [s for s in strings if s.split()[0].lower() == s.split()[0].lower()]\n    \ndef filter_by_any_word_after_first_letter(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings by any word after the first letter of the first word.\n    >>> filter_by_any_word_after_first_letter(['abc', 'bcd', 'cde', 'array'])\n    ['bcd', 'array']\n    \"\"\"\n    return [s for s in strings if s.split()[0].lower() not in s.split()[0].lower()]\n    \ndef filter_by_any_word_after_last_letter(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings by any word after the last letter of the last word.\n    >>> filter_by_any_word_after_last_letter(['abc', 'bcd', 'cde', 'array'])\n    ['bcd', 'array']\n    \"\"\"\n    return [s for s in strings if s.split()[-1].lower() not in s.split()[-1].lower()]\n    \ndef filter_by_any_word_after_first_and_last_letters(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings by any word after the first letter and the last letter of any word.\n    >>> filter_by_any_word_after_first_and_last_letters(['abc', 'bcd', 'cde', 'array'])\n    ['bcd', 'array']\n    \"\"\"\n    return [s for s in strings if s.split()[0].lower() not in s.split()[-1].lower()] + [s for s in strings if s.split()[-1].lower() not in s.split()[0].lower()]\n    \ndef filter_by_one_letter(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings by any word that has one letter.\n    >>> filter_by_one_letter(['abc', 'bcd', 'cde', 'array'])\n    ['cde', 'array']\n    \"\"\"\n    return [s for s in strings if len(s.split()[0]) == 1]\n    \ndef filter_by_all_letters(strings: List[str]) -> List[st",
        "num_ids": 1025
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [s for s in strings if s.startswith(prefix)]",
        "num_ids": 18
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    out = []\n    for s in strings:\n        if s.startswith(prefix):\n            out.append(s)\n    return out\n",
        "num_ids": 36
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [num for num in l if num > 0]",
        "num_ids": 14
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # get just the positive numbers\n    positive = [i for i in l if i >= 0]\n    # return only positive numbers\n    return positive\n",
        "num_ids": 35
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    positive = []\n    for i in l:\n        if i >= 0:\n            positive.append(i)\n    return positive\n",
        "num_ids": 32
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [i for i in l if i>0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l = sorted(l)\n    positive = []\n    for number in l:\n        if number > 0:\n            positive.append(number)\n    return positive\n",
        "num_ids": 40
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    positive_list = []\n    for number in l:\n        if number >= 0:\n            positive_list.append(number)\n    return positive_list\n",
        "num_ids": 38
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l.sort()\n    print(l)\n    print(l[-1])\n    if l[-1] >= 0:\n        return l[-1]\n    else:\n        print(l[-1])\n        return None\n",
        "num_ids": 58
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    ans = []\n    for x in l:\n        if x > 0:\n            ans.append(x)\n    return ans\n",
        "num_ids": 32
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l = sorted(l)\n    return [x for x in l if x >= 0]\n",
        "num_ids": 23
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert isinstance(n, int) and n >= 1\n    \n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef primes(n):\n    \"\"\"Return a list of the first n prime numbers: 1, 2,..., n.\"\"\"\n    assert isinstance(n, int) and n >= 1\n    result = [1]\n    \n    for i in range(3, n, 2):\n        if is_prime(i):\n            result.append(i)\n        \n    return result\n",
        "num_ids": 181
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if n == 2 or n == 3 or n == 5 or n == 7:\n        return True\n    elif n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 70
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n <= 2:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n",
        "num_ids": 94
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Write your code here.\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(4, n-1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return True\n    if n==3:\n        return True\n    for i in range(2, n//2):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 0\n    while i < len(xs):\n        if xs[i]!= 0:\n            break\n        i += 1\n    return xs[i-1]\n",
        "num_ids": 45
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum([x for x in xs if x!= 0])\n",
        "num_ids": 18
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return max([poly(xs, x) for x in xs if poly(xs, x)!= 0])\n",
        "num_ids": 27
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    xs = [i for i, coeff in enumerate(xs) if coeff!= 0]\n    if len(xs) == 0:\n        return -1.0\n    if len(xs) == 1:\n        return xs[0]\n    zero_point = xs[-1]\n    for i in range(len(xs)-1):\n        if xs[i+1]!= zero_point:\n            return xs[i] + xs[i+1] * xs[i+1]\n    return xs[-1]\n",
        "num_ids": 134
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return max([poly(xs, x) for x in xs])\n",
        "num_ids": 18
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return round(max([poly(xs, x) for x in xs]), 2)\n",
        "num_ids": 22
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    x = 0.0\n    for i, coeff in enumerate(xs):\n        if coeff > 0.0:\n            x = coeff * x + xs[i]\n    return x\n",
        "num_ids": 49
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum([coeff for i, coeff in enumerate(xs) if i % 2 == 0])\n",
        "num_ids": 26
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_len = 0\n    for i in xs:\n        if i > 0:\n            max_len = max(max_len, i)\n    return math.pow(max_len, 1/len(xs))\n",
        "num_ids": 55
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_val = max([abs(c) for c in xs])\n    zero = -1\n    for c in xs:\n        if abs(c) == max_val:\n            zero = c\n            break\n    return zero\n",
        "num_ids": 57
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a = sorted(l)\n    b = []\n    for x in range(0, len(a)):\n        if a[x] % 3!= 0:\n            b.append(a[x])\n    return b\n",
        "num_ids": 55
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    r = []\n    for i in range(len(l)):\n        if l[i] % 3 == 0:\n            r.append(l[i])\n    return r\n",
        "num_ids": 44
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(l[i])\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l_len = len(l)\n    for i in range(0, l_len - 1):\n        for j in range(i + 1, l_len):\n            if l[i] + l[j] == l[l[i] % 3] and l[i] % 3!= l[j] % 3:\n                l[i], l[j] = l[j], l[i]\n    return l\n",
        "num_ids": 102
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    li = l.copy()\n    m = 0\n    n = len(li)\n",
        "num_ids": 22
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # return l.sort()\n    \n    # # O(nlogn)\n    # # print(l)\n    # i = 0\n    # j = len(l) - 1\n    # while i < j:\n    #     if l[i] % 3 == 0 and l[i] % 2 == 0:\n    #         temp = l[i]\n    #         l[i] = l[i] % 2\n    #         l[i] = temp % 3\n    #         j = i\n    #         i = j\n    #     elif l[i] % 2 == 0:\n    #         temp = l[i]\n    #         l[i] = l[i] % 3\n    #         l[i] = temp\n    #         j = i\n    #     else:\n    #         i = i + 1\n    # return l\n    \n    # O(n)\n    # print(l)\n    # print(l)\n    \n    # i = len(l) - 1\n    # j = len(l)\n    # while i >= 0:\n    #     while j >= 0 and l[j] % 3 == 0 and l[j] % 2 == 0:\n    #         temp = l[j]\n    #         l[j] = l[j] % 3\n    #         l[j] = temp % 2\n    #         j -= 1\n    #     l[i] = l[j]\n    #     j = j - 1\n    #     i -= 1\n    # return l\n    \n    # O(n)\n    # return [l[i] for i in range(len(l)) if l[i] % 2!= 0]\n",
        "num_ids": 400
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    return sorted(l, reverse=True)",
        "num_ids": 13
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not l:\n        return l\n    else:\n        flag = False\n        for i in range(len(l)):\n            if l[i] % 3 == 0 and flag:\n                l[i], l[flag] = l[flag], l[i]\n                flag = True\n            elif l[i] % 3 == 0 and not flag:\n                l[i], l[i+1] = l[i+1], l[i]\n                flag = True\n        return l\n",
        "num_ids": 118
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    i = 0\n    j = len(l) - 1\n",
        "num_ids": 16
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return l[::-1]\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(set(l)) == len(l):\n        return l\n",
        "num_ids": 19
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    import collections\n    return list(collections.OrderedDict.fromkeys(l).keys())\n",
        "num_ids": 25
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not l:\n        return []\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return list(d.keys())\n",
        "num_ids": 59
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    u = list(set(l))\n    return sorted(u)",
        "num_ids": 17
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = []\n    for val in l:\n        if val not in res:\n            res.append(val)\n    return res\n",
        "num_ids": 33
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l.sort()\n    return l\n",
        "num_ids": 11
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(dict.fromkeys(l))\n",
        "num_ids": 13
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    l_max = l[0]\n    for i in range(1, len(l)):\n        if l[i] > l_max:\n            l_max = l[i]\n    return l_max\n",
        "num_ids": 53
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    max_el = 0\n",
        "num_ids": 10
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_element = l[0]\n    for elem in l:\n        if max_element < elem:\n            max_element = elem\n    return max_element\n    \n",
        "num_ids": 45
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n    #return max\n",
        "num_ids": 37
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l_len = len(l)\n    max_elem = l[0]\n    for i in range(1, l_len):\n        if l[i] > max_elem:\n            max_elem = l[i]\n    return max_elem\n",
        "num_ids": 66
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    maximum = l[0]\n    for i in l:\n        if i > maximum:\n            maximum = i\n    return maximum\n",
        "num_ids": 32
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fizz_buzz(n-1) + fizz_buzz(n-2)\n",
        "num_ids": 51
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    #Your code here\n    pass\n",
        "num_ids": 19
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    buzz = 0\n    for i in range(n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            buzz += 1\n        elif i % 3 == 0:\n            buzz += 1\n        elif i % 5 == 0:\n            buzz += 1\n    return buzz\n",
        "num_ids": 75
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if n < 7 or n % 11 == 0 or n % 13 == 0:\n        return 0\n    else:\n        return 1",
        "num_ids": 33
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 7:\n        return 0\n    elif n < 13:\n        return 1\n    else:\n        return fizz_buzz(n-7) + fizz_buzz(n-13)\n",
        "num_ids": 52
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n % 10 == 7:\n        return 1\n    elif n % 10 == 6:\n        return 2\n    elif n % 10 == 5:\n        return 3\n    else:\n        return 0\n",
        "num_ids": 50
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n % 10 == 0:\n        return 0\n    elif n % 3 == 0:\n        return 1\n    elif n % 5 == 0:\n        return 2\n    else:\n        return 3",
        "num_ids": 70
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n < 10:\n        return n\n    else:\n        return fizz_buzz(n // 10) + fizz_buzz(n % 10)\n",
        "num_ids": 40
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(n):\n        if i % 3 == 0:\n            return 3\n        elif i % 5 == 0:\n            return 5\n        else:\n            return int(i)\ndef main():\n    \"\"\"Prints numbers between 5 and 20 until the user inputs a non-integer.\n    >>> main()\n    \"\"\"\n    while True:\n        try:\n            n = int(input(\"Enter a number between 5 and 20: \"))\n            break\n        except ValueError:\n            print(\"That is not a valid number.\")\n    print(fizz_buzz(n))\n",
        "num_ids": 138
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    evens = []\n    odds = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            evens.append(l[i])\n        else:\n            odds.append(l[i])\n    return evens + odds\n",
        "num_ids": 70
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even_indices = []\n    odd_indices = []\n    odd_indices.extend(range(len(l)))\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even_indices.append(l[i])\n        else:\n            odd_indices.append(l[i])\n    return even_indices, odd_indice",
        "num_ids": 98
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even_indices = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even_indices.append(i)\n    return sorted(even_indices)\n",
        "num_ids": 54
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l = list(l)\n    l.sort()\n    l.sort(reverse=True)\n    return ",
        "num_ids": 28
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    return even + odd\n",
        "num_ids": 62
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even_even_list = []\n    for even in l:\n        if even % 2 == 0:\n            even_even_list.append(even)\n    return even_even_list\n",
        "num_ids": 46
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = len(l)\n    for i in range(n-1):\n        if l[i] % 2 == 0:\n            l[i], l[n-1] = l[n-1], l[i]\n            n = n-1\n    return l\n",
        "num_ids": 66
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l = l[::-1]\n    l.sort()\n    return l\n",
        "num_ids": 21
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even = []\n    odd = []\n    for num in l:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return [odd,even]\n",
        "num_ids": 55
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even = l[::2]\n    odd = l[1::2]\n    return even + odd\n",
        "num_ids": 26
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # split string to groups of three characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[0] + group[1]) if len(group) == 3 else group for group in groups]\n    # return one string from every group.\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # return all characters in groups\n    return \"\".join(groups[0]) + \"\".join(groups[1]) + \"\".join(groups[2])\n",
        "num_ids": 136
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # split string to groups of three.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join all groups into single string.\n    return \"\".join(groups)\n",
        "num_ids": 107
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join([s[i] for i in encode_cyclic(s).split(\"\") if i])\n",
        "num_ids": 28
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # convert groups to ASCII chars.\n    return \"\".join(groups)",
        "num_ids": 116
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 50
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n > 4:\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3)\n    \ndef factorial(n):\n    \"\"\"\n    factorial returns the factorial of n.\n    >>> factorial(3)\n    6\n    >>> factorial(4)\n    24\n    >>> factorial(6)\n    720\n    \"\"\"\n    return 1 if n == 0 else n * factorial(n - 1)\n    \ndef factorial_mod(n: int):\n    \"\"\"\n    factorial_mod returns the factorial of n.\n    >>> factorial_mod(2)\n    6\n    >>> factorial_mod(5)\n    120\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return n * factorial_mod(n - 1)\n    \ndef mod_inv(n):\n    \"\"\"\n    mod_inv returns the inverse of a number.\n    >>> mod_inv(3)\n    0\n    >>> mod_inv(2)\n    1\n    >>> mod_inv(5)\n    2\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return pow(n, len(str(n)) - 1, len(str(n)))\n    \ndef mod_pow(x: int, y: int):\n    \"\"\"\n    mod_pow returns the x^y modulo the given number.\n    >>> mod_pow(6, 2)\n    6\n    \"\"\"\n    return pow(x, y % len(str(y)), len(str(y)))\n    \ndef get_prime(num):\n    \"\"\"\n    get_prime returns the number which is a prime number\n    >>> get_prime(4)\n    1\n    >>> get_prime(5)\n    3\n    \"\"\"\n    prime = 2\n    while prime < num:\n        if num % prime == 0:\n            num = num / prime\n            continue\n        prime += 1\n    return prime\n    \ndef is_prime(n):\n    \"\"\"\n    is_prime returns a boolean value, which is whether or not n is prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(0)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    \n    for i in range(6, int(math.sqrt(n) + 1), 6):\n        if n % i == 0:\n            return False\n    return True\n    \ndef find_prime(n):\n    \"\"\"\n    find_prime returns the number which is the greatest divisor of the numbers n and n - 1.\n    >>> find_prime(1)\n    2\n    >>> find_prime(3)\n    3\n    >>> find_prime(5)\n    6\n    \"\"\"\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            return i\n        i += 6\n    return n\n    \ndef get_divisors(num):\n    \"\"\"\n    get_divisors returns the list of all the divisors of n.\n    >>> get_divisors(0)\n    []\n    >>> get_divisors(1)\n    [1]\n    >>> get_divisors(2)\n    [1, 2]\n    >>> get_divisors(9)\n    [1, 3, 5, 7]\n    \"\"\"\n    divisors = []\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n    \ndef get_modulo(num, n):\n    \"\"\"\n    get_modulo returns the modulo of num with n.\n    >>> get_modulo(6, 3)\n    4",
        "num_ids": 1024
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n==1:\n        return 2\n    elif n==2:\n        return 3\n    elif n==3:\n        return 5\n    elif n%2==0:\n        return prime_fib(n-1)+prime_fib(n-2)\n    else:\n        return prime_fib(n-1)+prime_fib(n-2)",
        "num_ids": 91
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert n >= 3, \"n must be greater than 3\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n",
        "num_ids": 64
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # print(f\"Prime Fibonacci number is {n}\")\n    a, b = 1, 2\n    while a < n:\n        # print(a,b)\n        if a == 1:\n            c = a\n        else:\n            c = a + b\n        if c % 2 == 0:\n            a = b\n        else:\n            b = c//2\n    return c\n",
        "num_ids": 95
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return prime_fib(n - 2) + prime_fib(n - 1)\n",
        "num_ids": 60
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert n >= 1\n    # f(n) = f(n-1) + f(n-2)\n    # see #103 for notes\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n - 1) + fib(n - 2)\n    # make sure n > 1\n    return fib(n)\n",
        "num_ids": 101
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 50
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return (prime_fib(n-1) + prime_fib(n-2)",
        "num_ids": 38
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 50
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = 0\n    for i in l:\n        s += i\n        if s == 0:\n            return False\n        else:\n            s = 0\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: complete this function\n    s = set(l)\n    return len(s) == 3 and all(s.discard(i) for i in l)\n    \n    ",
        "num_ids": 45
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(set(l)) == 3 and all(l[i]**2 == l[i] for i in range(len(l)))\n",
        "num_ids": 35
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # get a copy of the list\n    l1 = l[:]\n",
        "num_ids": 18
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    i = 0\n    while i < len(l) - 1:\n        sum = 0\n        for j in range(i, len(l)):\n            sum += l[j]\n        if sum == 0:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # TODO: Write your code here\n    \n    return not(not(all(x == 0 for x in l)) or not(all(l[i] == l[i+1] for i in range(len(l) - 1))))\n    #endregion\n",
        "num_ids": 65
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(l)!= 3:\n        return False\n    for i in range(len(l)):\n        if l[i] == 0:\n            continue\n        if l[i] not in l[i+1:]:\n            return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # this for-loop works because the numbers in the list are ordered\n    # such that the smallest number is at the top\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i]!= l[j]:\n                return False\n",
        "num_ids": 74
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in l:\n        if i!= 0:\n            if i == 0:\n                return True\n            else:\n                return False\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = 0\n    for element in l:\n        if element == 0:\n            s += element\n        else:\n            break\n    return s == 0\n",
        "num_ids": 38
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sum(1 for _ in range(n))\n",
        "num_ids": 14
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return round(n*0.3,3)\n",
        "num_ids": 14
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # count the collisions\n    # 0 = no collision\n    # 1 = car is moving right to left\n    # 2 = car is moving left to right\n",
        "num_ids": 36
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (n * n) / 2\n",
        "num_ids": 11
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO:\n    # Implement the function.\n    # Expected return value: an integer\n",
        "num_ids": 24
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    collision_count = 0\n    for i in range(1,n):\n        if (i % 2 == 0):\n            if (i % 10 == 0):\n                collision_count += 1\n            else:\n                collision_count += 1\n        else:\n            if (i % 10 == 0):\n                collision_count += 1\n            else:\n                collision_count += 1\n    return collision_count\n",
        "num_ids": 100
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Write your code here\n    return 0\n",
        "num_ids": 15
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(1 for _ in range(n) if car_in_line(n, i) for i in range(n) if car_in_line(i, n-1))\n",
        "num_ids": 45
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum([1 for car in range(1, n) if car_race_collision(car)])\n",
        "num_ids": 27
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [i + 1 for i in l]",
        "num_ids": 12
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [l[i] + 1 if i % 2 == 0 else l[i] for i in range(len(l))]\n",
        "num_ids": 32
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l[0] = l[0] + 1\n    return ",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in l:\n        i+=1\n    return l\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l.append(l[-1] + 1)\n    return l\n",
        "num_ids": 19
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = [x + 1 for x in l]\n    return result\n",
        "num_ids": 18
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return list(map(lambda x: x+1, l))",
        "num_ids": 16
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [e+1 for e in l]\n",
        "num_ids": 13
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(l)==0:\n        return False\n    \n    #if there is only 1 element and the summation of all the elements is equal to zero\n    if len(l) == 1 and l[0] == 0:\n        return True\n    \n    #if there are still two elements, the summation of all the elements is not equal to zero\n    #the element at index 1 will be the smallest element\n    if len(l) >= 2:\n        if l[1] == l[0] and l[0]!=0:\n            return True\n    \n    #this will return False if the list is unsorted\n    return False\n",
        "num_ids": 150
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    c = 0\n    for i in l:\n        c += i\n        if c == 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(set(l)) == 2\n",
        "num_ids": 12
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l.sort()\n    i=0\n    j=0\n    while i<len(l):\n        while j<len(l) and l[i]+l[j]==0:\n            i+=1\n            j+=1\n        if i>j:\n            return False\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: Write your code here\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if (l[i] + l[j]) % 2 == 0:\n                return True\n    return False",
        "num_ids": 64
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(set(l)) == 1\n",
        "num_ids": 12
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Write your code here\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return Fals",
        "num_ids": 74
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(list(dict.fromkeys(l))) == 1\n",
        "num_ids": 17
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #this code is not good. we should improve it to handle lists of lists\n    if len(l) == 2:\n        if l[0] == l[1] and l[0]!= 0:\n            return True\n        else:\n            return False\n    else:\n        if l[0] == l[1] == 0:\n            return False\n        else:\n            return True\n",
        "num_ids": 93
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return str(x//base) + (base - x%base)\n",
        "num_ids": 18
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if x < base:\n        return '1' * (base - x)\n    else:\n        return '0' * x\n",
        "num_ids": 32
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return str(x).zfill(base)\n",
        "num_ids": 13
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return str(base ** x)\n",
        "num_ids": 10
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if x >= base:\n        return base\n    else:\n        return str(x // base) + change_base(x % base, base)\n",
        "num_ids": 36
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if base == 10:\n        return str(x)\n    else:\n        return str(x * base)\n",
        "num_ids": 28
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    x = str(x)\n    x = x[::-1]\n    x = int(x[::-1])\n    x = base * (x//base)\n    return str(x)\n",
        "num_ids": 49
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if base < 10:\n        return str(x) + str(base)\n    else:\n        return str(x//base) + str(base)\n    \ndef replace(s: str, old: str, new: str):\n    \"\"\"Replace old string with new string.\n    Return string after replacement.\n    Note: string length doesn't matter.\n    >>> replace('hello', 'i', 'i love you')\n    'hello i love you'\n    \"\"\"\n    return s.replace(old, new)\n",
        "num_ids": 121
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    assert x >= 0 and x % base == 0\n    return bin(x)[2:]\n",
        "num_ids": 22
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: finish\n    if x < base:\n        return str(x)\n    elif x < 10:\n        return change_base(x // base, base) + str(x % base)\n    else:\n        return 'NaN'\n    \ndef main():\n    \"\"\"Test function.\n    >>> change_base(10, 3)\n    '22'\n    >>> change_base(5, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    >>> change_base(8, 2)\n    '0'\n    \"\"\"\n    print(change_base(8, 3))\n    print(change_base(7, 2))\n    print(change_base(5, 2))\n    print(change_base(7, 2))\n",
        "num_ids": 188
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return a*(a+h)/2\n",
        "num_ids": 12
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return 0.5 * a * h\n    pass\n",
        "num_ids": 14
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return (a**2 + h**2) / 2",
        "num_ids": 14
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (h * (a + h)) / 2\n",
        "num_ids": 14
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if a == 0:\n        return 0\n    if a == 1:\n        return h\n    return (h * (h - a) / 2) + (a * (2 * a + h - 1) / 2)\n    \n",
        "num_ids": 55
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (a*h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return a * (h / 2)\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (a * h)/2\ndef triangle_perimeter(a, h):\n    \"\"\"Given length of a side and high return perimeter for a triangle.\n    >>> triangle_perimeter(5, 3)\n    9.0\n    \"\"\"\n    return (a * (h * h) + (a * (h*2) + (a*2))) / 2\ndef square_root(x):\n    \"\"\"Given a float x, return the square root of the number.\"\"\"\n    return (x ** (1/2))\ndef sphere_volume(r):\n    \"\"\"Return the volume of a sphere with radius r.\"\"\"\n    return (4/3) * pi * r * r\n",
        "num_ids": 157
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 50
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: implement\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return fib4_rec(0, 1, 2, 3, n)\n",
        "num_ids": 19
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 2:\n        return n\n    return fib4(n - 2) + fib4(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return fib4_c(n, 1)\n",
        "num_ids": 13
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 3:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\n",
        "num_ids": 38
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\n",
        "num_ids": 66
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 54
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert n >= 1\n    if n == 1 or n == 0:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\n",
        "num_ids": 48
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(l)\n    if n == 0:\n        return None\n    if n == 1:\n        return l[0]\n    else:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n",
        "num_ids": 59
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[int(len(l)/2)] + l[int(len(l)/2-1)]) / 2\n    else:\n        return l[int(len(l)/2)]\n",
        "num_ids": 66
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(l) % 2 == 1:\n        return l[(len(l) - 1) // 2]\n    else:\n        return (l[(len(l) - 1) // 2] + l[(len(l) - 1) // 2 - 1]) / 2\n",
        "num_ids": 68
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sorted_list = sorted(l)\n    if len(sorted_list) % 2 == 1:\n        return (sorted_list[len(sorted_list) // 2 - 1] + sorted_list[len(sorted_list) // 2])/2\n    else:\n        return sorted_list[len(sorted_list) // 2]\n",
        "num_ids": 86
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sorted(l)\n    return float(l[(len(l)-1)//2])\n",
        "num_ids": 25
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = len(l)\n    if s % 2:\n        return (l[s//2-1] + l[s//2])/2\n    else:\n        return l[s//2]\n",
        "num_ids": 50
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = len(l)\n    if n == 0:\n        return None\n",
        "num_ids": 20
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Return the median of the list.\n    if not l:\n        return None\n    # Find the middle point of the list.\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    # print(l[mid])\n    if n % 2 == 0:\n        # If there's an even number of values, return the middle.\n        return (l[mid] + l[mid + 1]) / 2\n    else:\n        # Else, return the first half value, the middle.\n        return l[mid]\n",
        "num_ids": 129
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    m = len(l)//2\n    return sorted(l)[m]",
        "num_ids": 19
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        mid = l[(n//2) - 1]\n        return mid\n    elif n % 2 == 1:\n        return l[(n//2) - 1]\n    else:\n        return l[n//2]\n",
        "num_ids": 78
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(text) == 0:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Borrowed from https://stackoverflow.com/questions/24115074/palindromic-string-in-python\n    text = text.lower()\n    text_length = len(text)\n    if text_length == 0:\n        return False\n    if text_length == 1:\n        return text == text[::-1]\n    if text[0]!= text[-1]:\n        return False\n    for i in range(0, text_length):\n        if text[i]!= text[text_length - 1 - i]:\n            return False\n    return True\n",
        "num_ids": 143
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    text_list = list(text)\n    palindrome = []\n    for i in range(len(text_list)):\n        palindrome.append(text_list[i])\n",
        "num_ids": 46
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if text == '':\n        return True\n    if text == text[::-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # create a reverse string to compare\n    rev_str = ''\n    for char in text:\n        rev_str += char\n    rev_str = rev_str[::-1]\n    # check if original string is palindrome\n    return rev_str == text\n",
        "num_ids": 64
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l = len(text)\n    for i in range(0, l//2):\n        if text[i]!= text[l-i-1]:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    text = text.lower().replace('-','')\n    rev = ''\n    for char in text:\n        if char.isalpha():\n            rev += char.lower() +''\n        else:\n            rev += char\n    if rev == text:\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = text.lower()\n    s = s.replace(' ','').replace('-','')\n    return s == s[::-1]\n",
        "num_ids": 37
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(text) < 2:\n        return True\n    \n    \n    # remove all extra chars\n    prev_char = text[-1]\n    if prev_char.isalpha() or prev_char in 'aeiou':\n        return False\n",
        "num_ids": 61
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return pow(n, p, n)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    assert n > 0\n    \n    q, r = divmod(p, n)\n    if r == 0:\n        return q\n    else:\n        return modp(r, n)\n",
        "num_ids": 47
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(p, 0, -1):\n        if n == i:\n            return i\n    return 1\n",
        "num_ids": 30
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (n % p) % p\n",
        "num_ids": 11
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (n%p)%p",
        "num_ids": 10
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: implement\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    x = n\n    a = 1\n    while x % p!= 0:\n        x = x % p\n        a = a * x\n    return a\n",
        "num_ids": 39
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (n * pow(10, p - 1, p)) % p\n",
        "num_ids": 19
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = 1\n    while n!= 0:\n        result = result * n % p\n        n = n // (p ** 2)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < p:\n        p = p % n\n        n = n - p\n    while n > 0:\n        n, rem = divmod(n, p)\n        if rem == 0:\n            return p\n    return n + 1\n",
        "num_ids": 59
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n",
        "num_ids": 34
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 32
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join([chr((ord(ch) - 26 - 5) % 26) for ch in s])\n",
        "num_ids": 28
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return text.translate(vowels)\n",
        "num_ids": 49
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    vowels = 'aeiou'\n    list_vowels = []\n    for element in text:\n        if element in vowels:\n            list_vowels.append(element)\n    text = ''.join(list_vowels)\n    return text",
        "num_ids": 65
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    final_text = \"\"\n    for char in text:\n        if char.lower() in \"aeiouAEIOU\":\n            final_text = final_text + char\n    return final_text\n",
        "num_ids": 48
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #pass\n    result = []\n    for letter in text:\n        if letter.lower() not in vowels:\n            result.append(letter)\n    return ''.join(result)\n",
        "num_ids": 46
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = text.split('\\n')\n    new_lst = []\n    for word in lst:\n        if word.lower().isalpha():\n            new_lst.append(word.lower().replace('\\n', ''))\n    return ''.join(new_lst)\n",
        "num_ids": 71
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return ''.join(reversed(list(set(text))))\n",
        "num_ids": 18
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    text_without_vowels = text.replace('\\n','').replace('\\r','').replace(' ', '')\n    for v in text_without_vowels:\n        if v in vowels:\n            text_without_vowels = text_without_vowels.replace(v, '')\n    return text_without_vowels\n",
        "num_ids": 126
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    return text.translate(str.maketrans('','',vowels))\n",
        "num_ids": 43
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    result = ''\n    for char in text:\n        if char in vowels:\n            result += char\n        else:\n            result +=''\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    return \"\".join([i for i in text if not i in (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")])\n",
        "num_ids": 50
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    for item in l:\n        if item < t:\n            return False\n    \n    return True\n",
        "num_ids": 27
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x for x in l if x < t]\n",
        "num_ids": 15
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return l <= t\n",
        "num_ids": 7
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l.sort()\n    for i in range(len(l)):\n        if l[i] > t:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return all(n <= t for n in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return all(i<=t for i in l)\n",
        "num_ids": 15
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return all([True if i < t else False for i in l])\n",
        "num_ids": 18
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [1 if l[i]<t else 0 for i in range(len(l))]\n",
        "num_ids": 25
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return any(any(elem < t for elem in l) for elem in l)\n",
        "num_ids": 24
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return x + y\n    \n",
        "num_ids": 9
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return x + y\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -5\n    >>> subtract(5, 7)\n    -12\n    \"\"\"\n    return x - y\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    8\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1.0\n    >>> divide(5, 7)\n    0.75\n    \"\"\"\n    return x / y\ndef square(x: int):\n    \"\"\"Square a number\n    >>> square(2)\n    4\n    >>> square(5)\n    25\n    \"\"\"\n    return x ** 2\ndef cube(x: int):\n    \"\"\"Cube a number\n    >>> cube(2)\n    96\n    >>> cube(5)\n    285\n    \"\"\"\n    return x ** 3\ndef power(x: int, y: int):\n    \"\"\"Power a number\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    5040\n    \"\"\"\n    return x ** y\n",
        "num_ids": 318
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return x + ",
        "num_ids": 6
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return x+y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Check: nCr = nCr(n,r)\n    n = len(s0)\n    r = len(s1)\n    return n == r and len(set(s0)) == len(set(s1))\n",
        "num_ids": 56
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s0 = list(s0)\n    s1 = list(s1)\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s0 = list(s0)\n    s1 = list(s1)\n    return s0 == s1\n",
        "num_ids": 29
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = list(s0)\n    for c in s1:\n        if c not in s:\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return s0 == s1.lower()[:len(s1)]\n",
        "num_ids": 19
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "num_ids": 27
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return s0 == s1\n",
        "num_ids": 9
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return s0 == s1\n",
        "num_ids": 9
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return s0 == s1 and len(s0) == len(s1)\n",
        "num_ids": 21
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a, b = 0, 1\n    for _ in range(3):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n < 0:\n        return None\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 50
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 48
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef factorial(n: int):\n    \"\"\"Return factorial of n.\n    >>> factorial(5)\n    120\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return n\n    else:\n        return n * factorial(n-1)\n",
        "num_ids": 117
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 56
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    prev = 0\n    curr = 1\n    for _ in range(n):\n        prev, curr = curr, prev + curr\n    return curr\n",
        "num_ids": 40
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \n    \n",
        "num_ids": 48
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            bracket_count += 1\n        if bracket == \">\":\n            bracket_count -= 1\n",
        "num_ids": 47
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return all([bracket == \">\" for bracket in brackets])\n",
        "num_ids": 16
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # print(f\"brackets is {brackets}\")\n    # if len(brackets) == 0:\n    #     return True\n    #\n    # for i in range(len(brackets)):\n    #     if brackets[i]!= \">\":\n    #         if brackets[i]!= \"<\" and brackets[i]!= \">\":\n    #             return False\n    #\n    # return True\n    for index, value in enumerate(brackets):\n        # print(f\"index {index} value is {value}\")\n        if value!= \"<\" and value!= \">\":\n            return False\n    return True\n",
        "num_ids": 155
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def is_opening(bracket: str) -> bool:\n        return bracket[0] == bracket[0] and bracket[-1] == bracket[-1]\n    def is_closing(bracket: str) -> bool:\n        return bracket[0] == bracket[-1] and bracket[1] == bracket[1]\n    stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            if len(stack) > 0 and stack[-1] == \"<\":\n                stack.pop()\n            elif len(stack) == 0:\n                return False\n        elif bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            if not is_opening(stack[-1]):\n                return False\n            stack.pop()\n        elif bracket == \"<\":\n            if len(stack) == 0:\n                return False\n            if not is_closing(stack[-1]):\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "num_ids": 257
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if brackets == \"\":\n        return True\n    i, j = 0, 0\n    for char in brackets:\n        if char == \"<\":\n            i += 1\n        elif char == \">\":\n            j += 1\n        if j >= i:\n            return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (all(bracket in brackets for bracket in [\"<\", \">\"])\n            for brackets in brackets)",
        "num_ids": 27
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # \">\" and \">\" are not closed properly\n    for bracket in brackets:\n        if bracket == \">\":\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    brackets = brackets.split(\"<\")\n    return all(bracket.is_correct() for bracket in brackets)\n",
        "num_ids": 29
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # If there is only one opening bracket, then it is not a valid bracketing.\n    # O(n)\n    if len(brackets) < 2:\n        return False\n    \n    bracket_index = -1 # The index of the first opening bracket\n    \n    for index in range(len(brackets)):\n        if brackets[index] == \"<\" and bracket_index < 0:\n            # The bracket index is the first occurrence of a closing bracket\n            # O(n)\n            bracket_index = index + 1\n            break\n        \n        if brackets[index] == \">\" and bracket_index > 0:\n            # The bracket index is the last occurrence of a closing bracket\n            # O(1)\n            bracket_index = index + 1\n            break\n        \n    # If there is no closing bracket, there is no need to check if the opening bracket is close enough\n    return brackets[:bracket_index] == brackets[bracket_index+1:]\n",
        "num_ids": 229
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # this version doesn't consider the opening bracket\n    # if the bracket is valid then it can be considered as a closing bracket\n    for bracket in brackets:\n        if bracket == \"<\" or bracket == \">\":\n            return False\n",
        "num_ids": 55
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: Clarify this part\n    n = len(l)\n    if n == 0:\n        return True\n    for i in range(1, n):\n        if l[i] < l[i - 1]:\n            return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Time to iterate through the list\n    for i in l:\n        # Check for monotonicity\n        if i < 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return all(e <= l[-1] for e in l)",
        "num_ids": 17
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return all(x < y for x, y in zip(l, l[1:]) if y > x)\n",
        "num_ids": 28
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return True if len(l) > 1 else False\n",
        "num_ids": 14
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(l) == 0:\n        return True\n    elif len(l) == 1:\n        return l[0] >= 0\n    elif l[0] >= l[1]:\n        return False\n    else:\n        return monotonic(l[1:])\n",
        "num_ids": 68
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for element in l:\n        if element < 0:\n            return False\n        elif element == 0:\n            return True\n        else:\n            return monotonic(l[1:])\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if l == [] or l == []:\n        return False\n    if l[0] >= l[1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(1 for e in l if e > 0) == len(l)\n",
        "num_ids": 21
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(l1)!= len(l2):\n        return None\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    common = []\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            i += 1\n            j += 1\n            common.append(l1[i])\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common\n",
        "num_ids": 119
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sorted([x for x in l1 if x in l2])\n",
        "num_ids": 18
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return list(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l1 = sorted(l1)\n    l2 = sorted(l2)\n    return list(set(l1) & set(l2))\n",
        "num_ids": 37
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = []\n    s = set(l1) & set(l2)\n    for i in s:\n        res.append(i)\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return list(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l1 = set(l1)\n    l2 = set(l2)\n    return list(l1&l2)\n",
        "num_ids": 32
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    d1 = {}\n    d2 = {}\n",
        "num_ids": 13
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    common = []\n    while True:\n        if len(l1) == len(l2):\n            if l1 == l2:\n                break\n            else:\n                common.append(l1.pop(0))\n        elif len(l1) > len(l2):\n            if l1[0] < l2[0]:\n                common.append(l1.pop(0))\n            else:\n                common.append(l2.pop(0))\n        elif len(l1) < len(l2):\n            if l1[0] > l2[0]:\n                common.append(l1.pop(0))\n            else:\n                common.append(l2.pop(0))\n    return common\n",
        "num_ids": 176
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return str(n)[::-1].find('2')\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    import math\n    if n <= 1:\n        return 0\n    for i in range(2, math.ceil(math.sqrt(n))+1):\n        if n % i == 0:\n            return i\n    return 0\n",
        "num_ids": 57
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 1:\n        return 1\n    \n    # Let the factors are numbers in the range [2, n]\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return i\n    \n    # If we can't find any factor that is a multiple of n, return 1.\n    return 1\n",
        "num_ids": 91
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def factor_check(n):\n        \"\"\"Check if n has at most 2 factors. Return the prime factor for the\n        nth factor.\n        >>> factor_check(3)\n        2\n        >>> factor_check(4)\n        3\n        >>> factor_check(5)\n        5\n        >>> factor_check(8)\n        8\n        \"\"\"\n        # a prime factor, with a factor of at most two\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return n\n",
        "num_ids": 127
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1 or n == 2:\n        return 2\n    \n    while n % 2 == 0:\n        n = n // 2\n    \n    while n % 3 == 0:\n        n = n // 3\n    \n    for i in range(4, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    \n    return 2\n",
        "num_ids": 96
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert n > 1\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return 2\n",
        "num_ids": 45
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 3:\n        return n\n    i = 2\n    while i <= n/2:\n        if n % i == 0:\n            n = n/i\n            break\n        i = i + 1\n    return i\n",
        "num_ids": 56
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(2, n):\n        if is_prime(i):\n            return i\n    return 1\n",
        "num_ids": 29
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    prime = 2\n    while prime * prime <= n:\n        if n % prime:\n            n //= prime\n        else:\n            prime += 1\n    return ",
        "num_ids": 40
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    factor = 2\n    # Loop through all integers less than or equal to n, until 1\n    while n % factor == 0:\n        factor += 1\n",
        "num_ids": 36
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: complete this function\n    return 1\n",
        "num_ids": 14
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = 0\n    while n!= 0:\n        s += n % 10\n        n = n // 10\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return n + sum(range(1,n+1))\n    \ndef gcd(n: int,m: int):\n    \"\"\"\n    >>> gcd(5, 3)\n    3\n    >>> gcd(5, 2)\n    1\n    >>> gcd(5, 4)\n    4\n    >>> gcd(5, 6)\n    6\n    >>> gcd(5, 7)\n    1\n    \"\"\"\n    return n % m\n",
        "num_ids": 108
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum(range(1, n+1))\n",
        "num_ids": 14
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return 0\n    if not 1 <= n <= sum(range(1, n+1)):\n        raise ValueError(\"1 <= n <= sum(range(1, n+1))\")\n    return n*sum(range(1, n+1))\n",
        "num_ids": 60
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(range(1, n+1))\n",
        "num_ids": 14
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = 1\n    for i in range(1, n+1):\n        result += i\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return n * (n+1) // 2\n    ",
        "num_ids": 14
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(range(1, n + 1))\n",
        "num_ids": 14
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # split list into'' + brackets\n    brackets = list(brackets.split())\n    # strip each bracket from the end\n    brackets = [i.strip(\"()()\") for i in brackets]\n    # iterate over each bracket and check if it is a matching closing bracket\n    return all(brackets[i].endswith(brackets[i+1]) for i in range(len(brackets)-1))\n",
        "num_ids": 99
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    a, b = 0, 0\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "num_ids": 60
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if brackets.count(\"(\")!= brackets.count(\")\"):\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack)!= 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 101
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    left_bracket = 0\n    right_bracket = 0\n    for i in brackets:\n        if i == '(':\n            left_bracket += 1\n        elif i == ')':\n            right_bracket += 1\n        if left_bracket == right_bracket:\n            return False\n    return True",
        "num_ids": 78
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    return all(is_opening_bracket(b) and is_closing_bracket(b) for b in brackets)\n",
        "num_ids": 33
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = len(brackets)\n    stack = [0]\n    for i in range(1, n):\n        if brackets[i] == \"(\":\n            stack.append(i)\n        elif brackets[i] == \")\":\n            if stack and brackets[stack[-1]] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 96
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    open_brackets = {\"(\", \")\", \")\",\"[\",\"]\"}\n    for bracket in brackets:\n        if bracket not in open_brackets:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(brackets)):\n        if brackets[i] in \"()\" or brackets[i] in \"()\":\n            count += 1\n        if count == 2:\n            return False\n    return True",
        "num_ids": 58
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n",
        "num_ids": 81
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x[1] for x in xs]\n",
        "num_ids": 15
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(xs) == 1:\n        return xs\n    else:\n        derivative = [0] * len(xs)\n        derivative[1] = xs[0]\n        for i in range(len(xs) - 2):\n            derivative[i+1] = xs[i+1] * derivative[i]\n        return derivative\n",
        "num_ids": 89
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    derivative = []\n    for i in range(3, len(xs) - 1):\n        derivative.append(xs[i] + xs[i+1] * x + xs[i+2] * x**2)\n    return derivative\n",
        "num_ids": 63
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [x[1] for x in reversed(xs)]\n",
        "num_ids": 16
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(xs) == 1:\n        return []\n    dx = []\n    dxs = []\n    for i in range(len(xs) - 1):\n        x = xs[i]\n        dxs.append(x)\n        for j in range(i + 1, len(xs)):\n            x = xs[j]\n            dx.append(x)\n            dxs.append(-x * x)\n    return dx\n",
        "num_ids": 106
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    ret = []\n    for x in xs:\n        ret.append(x)\n    return ret\n",
        "num_ids": 26
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    coeffs = xs\n    derivative = [0, 0, 0]\n    for i in range(len(coeffs)):\n        if i == 0:\n            derivative[i] = coeffs[i]\n        else:\n            derivative[i] = coeffs[i] * derivative[i-1]\n    return derivative\n",
        "num_ids": 88
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    res = [1]\n    for i in range(len(xs) - 1):\n        if i > 0:\n            res.append(res[i] + xs[i] * res[i - 1])\n        else:\n            res.append(xs[i] * res[i])\n    return res\n",
        "num_ids": 75
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x[1] for x in reversed(list(map(lambda x: (x[0] + x[1] * x[0] + x[2] * x[1] * x[2] + x[3] * x[0] * x[1] * x[2] * x[3]), xs)))]\n",
        "num_ids": 80
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO \n    pass\n",
        "num_ids": 10
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return fibfib_seq(n, 0, 1)\n",
        "num_ids": 16
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "num_ids": 44
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 1:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # # not sure why I'd use the following line\n    # return fibfib_helper(0)\n    pass\n",
        "num_ids": 30
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 45
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be positive\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 76
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # using memoization (to make recursion simpler)\n    cache = {}\n    def fibfib(n):\n        \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n        fibfib(0) == 0\n        fibfib(1) == 0\n        fibfib(2) == 1\n        fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n        Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n        >>> fibfib(1)\n        0\n        >>> fibfib(5)\n        4\n        >>> fibfib(8)\n        24\n        \"\"\"\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n in cache:\n            return cache[n]\n        else:\n            cache[n] = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            return cache[n]\n    return fibfib(n)\n",
        "num_ids": 276
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 52
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "num_ids": 29
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "num_ids": 80
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels = 0\n    for i in range(len(s)):\n        if s[i] in \"AEIOU\":\n            vowels += 1\n    return vowels\n",
        "num_ids": 45
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # the length of the word (length of the string) is equal to the length of the word minus the initial char\n    # get the length of the word minus the initial char since they are the same\n    # and iterate the char\n    # for each char in the string\n    #   if it is a vowel\n    #   then increment the count\n    # return the count\n    word = s[:-1] # exclude the initial char (not word)\n    count = 0 # set the count variable to 0 to zero\n    vowels = 'aeiou' # create a list of vowels\n    for i in range(len(word)): # iterate through the list\n        if word[i] in vowels: # if the given word starts with vowel\n            count += 1 # add one to the count\n    return count\n",
        "num_ids": 187
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    vowel_count = 0\n    for letter in s:\n        if letter in \"aeiou\":\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 42
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum([1 for i in s if i in \"AEIOU\"])\n",
        "num_ids": 20
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    vowels = 'aeiouy'\n    count = 0\n",
        "num_ids": 18
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    vowels = 'y'\n    if len(s) == 1:\n        return 0\n    if s[-1] == vowels:\n        return 1 + vowels_count(s[:-1])\n    else:\n        return 0\n",
        "num_ids": 59
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    #for char in s:\n    #    if char in vowels:\n    #        return vowels.count(char)\n    #else:\n    #    return 0\n    \n    return sum(vowels.count(char) for char in s)\n",
        "num_ids": 86
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    i = 0\n    for j in s:\n        if j.lower() in 'aeiou':\n            i += 1\n    return i\n",
        "num_ids": 35
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[shift:] + x[:shift]\n",
        "num_ids": 36
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if shift > len(str(x)):\n        return str(x)\n    result = ''\n    for i in range(0, shift, 1):\n        result = result + str(x % 10)\n        x = x // 10\n    return str(x) + result\n",
        "num_ids": 66
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert type(x) == int\n    assert type(shift) == int\n    assert 0 <= shift <= max(len(str(x)), 1)\n    # circular shift has to be performed on strings\n    if type(x) is str:\n        x = str(x[:shift]) + str(x)[shift:]\n    # ints must be shifted to the right by shift\n    else:\n        x = str(x)[:shift] + str(x)[shift:]\n    return x\n",
        "num_ids": 114
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join(reversed(x[shift:]+x[:shift]))\n",
        "num_ids": 23
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    shift = abs(shift)\n    digits = len(str(x))\n    if shift > digits:\n        shift = shift % digits\n    res = ''\n    while shift:\n        digit = x % 10\n        x = x // 10\n        res = str(digit) + res\n    return res[::-1]\n",
        "num_ids": 77
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if shift > len(str(x)):\n        return str(x)[shift:] + str(x)[:shift]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n",
        "num_ids": 52
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if shift > len(x):\n        return \"0\" * (shift - len(x)) + x\n    else:\n        return x[-shift:] + x[:-shift]\n",
        "num_ids": 44
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return ''.join([str(int(i) + shift) if len(str(int(i))) == shift else i for i in x])\n",
        "num_ids": 35
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if shift == 0:\n        return x\n    shift = min(shift, len(x)-shift)\n    return str(int(x[shift:])) + str(int(x[:shift]))\n",
        "num_ids": 49
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return shift * ''.join(str(int(i) + shift) for i in str(x))\n",
        "num_ids": 26
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum=0\n    for i in s:\n        sum+=ord(i)\n    return sum\ndef main():\n    while(True):\n        print(digitSum(input()))\n",
        "num_ids": 45
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum = 0\n    for i in range(len(s)):\n        sum += ord(s[i]) - ord('a') + 1\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "num_ids": 20
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum([ ord(c) for c in s if ord(c) >= ord('0') and ord(c) < ord('9')])\n",
        "num_ids": 35
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    digitSumStr = 0\n    for i in range(len(s)):\n        if s[i] >= 'A' and s[i] <= 'Z':\n            digitSumStr += ord(s[i]) - ord('A')\n    return digitSumStr\n",
        "num_ids": 63
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c) - ord(\"A\")\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = 0\n    for i in s:\n        result += int(i)\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    for char in s:\n        result += int(char)\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(ord(i) for i in s)\n",
        "num_ids": 15
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum = 0\n    for c in s:\n        sum += ord(c)\n    return sum\n    \n",
        "num_ids": 27
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if s == None:\n        return 0\n    \n    def update_count(basket, count):\n        if basket == None:\n            return 0\n        elif basket[-1] =='mango':\n            return count\n        else:\n            return count + update_count(basket[:-1], count + 1)\n",
        "num_ids": 78
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum([x for x in range(1,n+1) if x%2==1 and s[x-1]==\"a\"])\n",
        "num_ids": 36
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = 0\n    for fruit in s:\n        if fruit == \"0\":\n            result += 0\n        elif fruit == \"1\":\n            result += 1\n        else:\n            result += fruit_distribution(fruit.replace(\"a\", \"a\"), n - 1)\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    total = 0\n    for i in s:\n        if i == \"0\" or i == \"1\":\n            total += int(i)\n    \n    return total\n",
        "num_ids": 41
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    dic = dict()\n    num_of_apples = 0\n    num_of_oranges = 0\n    for i in s:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    for i in dic:\n        if dic[i] == n:\n            num_of_apples = num_of_apples + dic[i]\n        elif dic[i] < n:\n            num_of_apples = num_of_apples + dic[i]\n    for i in dic:\n        if dic[i] == n:\n            num_of_oranges = num_of_oranges + dic[i]\n        elif dic[i] < n:\n            num_of_oranges = num_of_oranges + dic[i]\n    return num_of_apples - num_of_oranges\n",
        "num_ids": 228
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if s.isnumeric():\n        return int(s)//n\n    else:\n        return 0\n",
        "num_ids": 27
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    distribution = []\n    index = 1\n    for i in range(len(s)):\n        if s[i] == \"a\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"b\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"c\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"d\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"e\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"f\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"g\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"h\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"i\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"j\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"k\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"l\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"m\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"n\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"o\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"p\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"q\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"r\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"s\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"t\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"u\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"v\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"w\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"x\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"y\":\n            distribution.append(index)\n            index = index * 2\n        elif s[i] == \"z\":\n            distribution.append(index)\n            index = index * 2\n        else:\n            distribution.append(index)\n            index = index * 2\n",
        "num_ids": 771
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    sum = 0\n    \n    for i in range(len(s)):\n        if s[i] == '0':\n            sum +=0\n        else:\n            sum+=1\n    \n    \n    \n    return sum\n    \n    \n    ",
        "num_ids": 62
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    apple_count = s.count('A')\n    orange_count = s.count('O')\n    mango_count = s.count('M')\n    count = apple_count + orange_count + mango_count\n",
        "num_ids": 53
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #Bag contains a list of fruit names and a list of prices. \n    #The first index contains the fruit name and the second contains the price of the fruit \n    #the fruit name will be less than or equal to the fruit price, and the fruit price \n    #will be larger than the fruit name \n    bag = dict()\n",
        "num_ids": 78
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not arr:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not arr:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # O(n)\n    # brute-force\n    # O(n^2)\n    \n    if not arr:\n        return []\n    \n    # O(1)\n    # create min index array\n    # O(n)\n    min_index = [None] * (len(arr) + 1)\n    # O(1)\n    # create min index array\n    min_index[0] = 0\n    # O(n)\n    # make sure that we have at least one non-zero element\n    # O(1)\n    # get the smallest even value\n    # O(n)\n    # create index array\n    # O(n)\n    index = [None] * (len(arr) + 1)\n    # O(1)\n    # create index array\n    for i in range(len(arr)):\n        # O(n)\n        # add the number to the min_index array\n        # O(1)\n        # find the index with the smallest even value\n        # O(n)\n        if not index[i] or (arr[i] % 2 == 0 and arr[i] < min_index[i - 1]):\n            index[i] = i\n    # O(1)\n    # find the smallest even value\n    # O(n)\n    # return the index array\n    return [index[i] for i in range(len(arr)) if arr[i] % 2 == 0 and arr[i] < min_index[i]]\n",
        "num_ids": 350
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    arr_lst = [item for item in arr if (item % 2 == 0)]\n",
        "num_ids": 24
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not arr:\n        return []\n    \n    # If given array is empty, return the first node with even nodes\n    if not arr or not arr[0]:\n        return [0,0]\n    \n    # If given array has even values\n    if arr[0] % 2 == 0:\n        even_nodes = [0, 0]\n        for i in range(1, len(arr)):\n            if arr[i] % 2 == 0:\n                even_nodes[0] = arr[i]\n            else:\n                even_nodes[1] = arr[i]\n        return even_nodes\n",
        "num_ids": 148
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    nodes = []\n    for i in range(0,len(arr)):\n        if arr[i]%2==0:\n            nodes.append(arr[i])\n            nodes.sort()\n    return nodes[::-1]\n",
        "num_ids": 62
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not arr:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # your code goes here\n    if not arr:\n        return []\n    nodes = sorted(arr)\n    return nodes[nodes.index(min(nodes))]\n",
        "num_ids": 43
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Edge cases\n    if not arr or not arr[0]:\n        return [0, 0]\n",
        "num_ids": 25
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max=float('-inf')\n    for i in lst:\n        if i>=0:\n            max=max if i>max else i\n    return max\n",
        "num_ids": 41
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    counter = 0\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            counter += 1\n        lst[i] = counter\n    return max(lst)\n",
        "num_ids": 52
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # write your code here\n    if lst==[]:\n        return -1\n",
        "num_ids": 21
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst = sorted(lst)\n    for i in lst:\n        if lst.count(i)>=1:\n            return i\n    return -1\n",
        "num_ids": 42
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst.sort() # sort the list\n    f = 0 # frequency\n    result = -1 # result\n    for i in lst:\n        if i > f: # if frequency is greater than current, set to value of current\n            f = i\n            result = i # set the value of the result\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    i = 0\n    while i < len(lst):\n        if lst[i] >= 0:\n            return lst[i]\n        else:\n            i += 1\n    return -1\n",
        "num_ids": 49
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Find the maximum integer in the list\n    maximum = max(lst)\n    # Loop through the list\n    for value in lst:\n        # Check if the value in the list is equal to the maximum\n        if value > maximum:\n            maximum = value\n    return maximum\n",
        "num_ids": 66
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            return lst[i]\n    return -1\n",
        "num_ids": 47
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    freq = {}\n    for i in lst:\n        if i not in freq:\n            freq[i] = 0\n        freq[i] += 1\n    \n    for i in freq.values():\n        if i >= 1:\n            return i\n",
        "num_ids": 65
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(lst, reverse=True)\n",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sorted_list = []\n    numbers = sorted(lst)\n    for x in lst:\n        while numbers:\n            min_num = numbers.pop()\n            if min_num < x:\n                sorted_list.append(min_num)\n            else:\n                break\n    return sorted_list\n",
        "num_ids": 77
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # The idea is to sort the elements into a decreasing order by \n    # finding the minimum element and then the maximum element.\n    # This is the most intuitive idea.\n    # What we're actually doing here is finding the minimum element and then \n    # moving it to the end of the list, so that all elements greater than the \n    # minimum element are in their proper order.\n    # The goal is to create a new list that follows this order.\n    # We're going to do the opposite if we're going to sort the list itself.\n    # Note that we're going to start with the minimum value as we iterate.\n    # The point of this is that if the list is large enough, then we can stop\n    # iterating.\n    # If we do this, we can start a new list by moving the minimum to the end,\n    # then moving the maximum to the end.\n    # So this loop will always be n+1 times and we can just start again with \n    # the second maximum.\n    # How much time complexity is this?\n    # \n    # Time: O(n)\n    # Space: O(n)\n    #\n    # Just like a binary search tree, this algorithm is slower than the normal \n    # one.\n    # \n    #\n    # Method 1:\n    #\n    # Three cases:\n    #     1. All numbers are sorted and the new list is a sorted list.\n    #     2. We have already traversed the array and all numbers are sorted and \n    #        the new list is a sorted list.\n    #     3. We have already traversed the array and all numbers are not sorted and \n    #        the new list is not a sorted list.\n    # \n    # This problem can be solved by recursively creating a list and sorting\n    # the elements in the list. So, time complexity is O(n).\n    # The space complexity is O(n).\n    #\n    #\n    # Method 2:\n    #\n    # One case is when the array is not sorted. We can sort it in the same way.\n    # In this case, we have to use two cases:\n    #     1. If the array is already sorted, then we can continue the recursion.\n    #     2. If the array has two elements, we can sort it using two different \n    #        recursions, because the second element is also sorted.\n    #\n    #\n    #\n    #\n    #\n    # Method 3:\n    #\n    # For the list, we have to sort it in place, so that we can add\n    # a lot of additional data to the new list.\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n",
        "num_ids": 1024
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sorted_lst = []\n    for i in range(len(lst)):\n        temp = min(lst[i:])\n        sorted_lst.append(temp)\n        lst[i:]=[lst[i]]\n    return sorted_lst\n",
        "num_ids": 68
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    sorted_lst = sorted(lst, reverse = True)\n",
        "num_ids": 20
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst.sort()\n    n = len(lst)\n    return [lst[i] for i in range(n - 1, -1, -1)]\n",
        "num_ids": 41
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def sort_strange_list(lst):\n        '''\n        Takes a list of integers and returns a sorted list.\n        This does not guarantee the order of the list.\n        '''\n        sorted_list = [lst[0]]\n        for i in range(1, len(lst)):\n            if lst[i] < sorted_list[-1]:\n                sorted_list.append(lst[i])\n            else:\n                sorted_list.append(lst[i])\n                sorted_list.append(lst[i - 1])\n        return sorted_list\n    return sort_strange_list(lst)\n",
        "num_ids": 159
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def sort_list(lst):\n        '''\n        :param lst: list of integers\n        :return: sorted list\n        '''\n        def sort_helper(lst, start, end):\n            if start > end:\n                return\n            mid = (start + end) // 2\n            sort_helper(lst, start, mid)\n            sort_helper(lst, mid+1, end)\n            lst[start], lst[mid] = lst[mid], lst[start]\n        \n        sort_list(lst)\n        return lst\n    \n    return sort_list(lst)\n",
        "num_ids": 153
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    numbers = [lst[i] for i in range(len(lst))]\n    numbers.sort()\n    numbers = [numbers[len(numbers) - 1]] + numbers\n    return numbers\n",
        "num_ids": 53
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sorted(lst, key = lambda x: x",
        "num_ids": 14
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a+b>c and b+c>a and a+c>b:\n        area = (a*b)/2\n        if area>c:\n            area = c\n        return area\n    else:\n        return -1",
        "num_ids": 56
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # get length of sides\n    s = (a + b + c) / 2\n    # get area of triangle\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    # round to 2 decimal points if area > 2\n    if area > 2:\n        return round(area, 2)\n    else:\n        return -1\n",
        "num_ids": 93
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #check if any of the sides are valid\n    if(a <= 0 or b <= 0 or c <= 0):\n        return -1\n",
        "num_ids": 33
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Valid Triangle\n    if (a == b and b == c):\n        return math.sqrt(a*a + b*b + c*c)\n    # Invalid Triangle\n    elif (a == b or b == c or c == a):\n        return -1\n    # Non-Valid Triangle\n    else:\n        return None\n",
        "num_ids": 80
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #Initialize variables\n    if a + b + c <> 0:\n        #If the lengths of the three sides are valid\n        if (a**2 + b**2 + c**2)**0.5 == (a**2 + b**2 + c**2):\n            #If the sum of the two sides is greater than the third\n            if (a + b + c) > (b + c + a):\n                #If the sum of the two sides is greater than the third, then the\n                #triangle is not valid\n                return -1\n            else:\n                #If the sum of the two sides is greater than the third\n                return (a + b + c)**0.5\n        else:\n            #If the sum of the two sides is greater than the third\n            return -1\n    else:\n        #If the lengths of the three sides are invalid\n        return -1\n",
        "num_ids": 207
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if (a!= b or a!= c or b!= c):\n        return -1\n    else:\n        if a + b > c and a + c > b and b + c > a:\n            area = (a * b) / 2\n        else:\n            area = -1\n        return area\n",
        "num_ids": 75
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a == b and b == c and a!= 0:\n        if a * a + b * b == c * c:\n            return round(a * b / 2, 2)\n        else:\n            return -1\n    else:\n        return -1\n",
        "num_ids": 63
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a > b and a > c:\n        if b < c:\n            return (a * c) / 2\n        else:\n            return -1\n    elif b > a and b > c:\n        if a < c:\n            return (b * c) / 2\n        else:\n            return -1\n    else:\n        return -1\n",
        "num_ids": 85
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # You can assume that the input is valid.\n    if (a < b + c):\n        return ((b + c) * (a + c)) / 2\n    else:\n        return -1\n",
        "num_ids": 48
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Write your code here.\n    try:\n        if is_valid_triangle(a, b, c):\n            return round(sum(a, b, c), 2)\n        else:\n            return -1\n    except Exception as e:\n        print(e)\n",
        "num_ids": 66
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    q = list(q)\n    # check if all elements are palindromic and the sum of its elements is less than or equal to the maximum possible weight\n    if all(q[i] == q[i] for i in range(len(q)-1)):\n        return False\n    # if not it's not balanced, check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q[i] for i in range(len(q)-1)) <= w:\n        return True\n    else:\n        return False\n",
        "num_ids": 129
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # get the list\n    q = list(q)\n    # get the length\n    length = len(q)\n    # get the maximum possible weight\n    w = max(q)\n    # loop through each element in the list\n    for i in range(length):\n        # if it's not a palindromic\n        if q[i]!= q[length-i-1]:\n            # return false\n            return False\n        # if it's a palindrome\n        else:\n            # return true\n            return True\n    # return true\n    return True\n",
        "num_ids": 134
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if(q==w):\n        return True\n    if(len(q)==len(w)):\n        for i in range(0,len(w)):\n            for j in range(0,len(q)):\n                if(w[i]==q[j]):\n                    return will_it_fly(q[:j] + q[j+1:], w[:i] + w[i+1:])\n    return False\n",
        "num_ids": 108
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if is_palindromic(q) and (len(q) < w and sum(q) <= w):\n        return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    q = sorted(q) #sort by the list, so it's the most flexible\n    return q[0] == q[-1] and sum(q) < w\n    \ndef is_palindrome(q):\n    '''\n    Write a function that returns True if the list q is palindrome, and False otherwise.\n",
        "num_ids": 78
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max_weight = sum(w)\n    if is_palindrome(w):\n        return True\n    else:\n        if w == []:\n            return False\n        else:\n            if w[0] > w[-1]:\n                return will_it_fly(w[1:],w[:-1])\n            else:\n                return will_it_fly(w[1:],w[:-1]) and will_it_fly(w[:-1],w[1:])\n",
        "num_ids": 117
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return is_palindrome_list(q,w) and sum(q) <= (max(q)+min(q))\n",
        "num_ids": 31
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = q\n    b = w\n    # make a copy to avoid overwriting the original list\n    c = a[:]\n    # try to turn it into a list of integers\n    d = c.copy()\n    # check if the sum of the elements is less than the maximum possible weight\n    for i in range(0, len(a)):\n        # convert the elements into ints\n        x = int(a[i])\n        y = int(b[i])\n        # check if sum of the elements is less than the maximum possible weight\n        if x + y <= b and a[i] < y:\n            # if yes, remove the elements in the list\n            c.remove(a[i])\n            d.remove(b[i])\n            # if yes, add the elements\n            c.append(x)\n            d.append(y)\n            return True\n    return False\n",
        "num_ids": 209
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TO-DO: complete this function\n",
        "num_ids": 11
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    q=q[::-1]\n    return (q+w+q[-1])<(max(q)+w)\n",
        "num_ids": 32
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    size = len(arr)\n    if size == 1:\n        return 0\n    elif size == 2:\n        if arr[1] > arr[0]:\n            return 1\n        else:\n            return 2\n    elif size == 3:\n        if arr[1] > arr[0] > arr[2]:\n            return 1\n        elif arr[2] > arr[0] > arr[1]:\n            return 2\n        else:\n            return 3\n    else:\n        if arr[1] > arr[0] > arr[2]:\n            if arr[1] > arr[2]:\n                return 1\n            else:\n                return 2\n        elif arr[2] > arr[0] > arr[1]:\n            if arr[1] > arr[2]:\n                return 1\n            else:\n                return 2\n        else:\n            return 3\n",
        "num_ids": 206
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(arr) == 1:\n        return 1\n",
        "num_ids": 15
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 1\n    j = len(arr)-1\n    count = 0\n",
        "num_ids": 20
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def find_min_changes(arr):\n        if len(arr) == 1:\n            return 0\n        min_ch = arr[0]\n        for i in range(len(arr)-1):\n            min_ch = min(min_ch, arr[i+1])\n        return 1 + find_min_changes(arr[1:])\n    return find_min_changes(arr)\n",
        "num_ids": 94
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return find_min_change(arr)\n",
        "num_ids": 12
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # CHeck if array is palindromic\n    def is_palindrome(str):\n        return str == str[::-1]\n",
        "num_ids": 36
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    smallest_change = arr[0]\n    for element in arr[1:]:\n        smallest_change = min(smallest_change, element-smallest_change)\n    return smallest_change\n",
        "num_ids": 49
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(arr) == 1:\n        return 1\n",
        "num_ids": 15
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(arr) == 1:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    \n    # TODO: Write your code here.\n    return arr[0]\n    pass\n    # pass\n    # return arr[0",
        "num_ids": 36
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    total = 0\n    for i in lst1:\n        total += len(i)\n    for i in lst2:\n        total += len(i)\n    return total\n",
        "num_ids": 44
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [item for item in set(lst1) & set(lst2)]",
        "num_ids": 21
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    lst1_count = len(lst1)\n    lst2_count = len(lst2)\n    if lst1_count == lst2_count:\n        return lst1\n    else:\n        return lst2\n    \n    \n    \n    \n    \n    \ndef solution(l1, l2):\n    '''\n    Write a function that accepts two lists, l1 and l2, that contain strings and \n    return a new list that contains only strings that are common between l1 and l2.\n",
        "num_ids": 127
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst3 = []\n    for i in lst1:\n        if len(i) < len(lst2):\n            lst3.append(i)\n    return lst3\n",
        "num_ids": 47
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst1)!= len(lst2):\n        return lst1\n    \n    dict1 = {}\n    for item in lst1:\n        if item in dict1:\n            dict1[item] += 1\n        else:\n            dict1[item] = 1\n    for item in dict1:\n        if dict1[item] < len(lst2):\n            return item\n    return lst2\n",
        "num_ids": 103
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    i = 0\n    for i in range(len(lst1)):\n        if len(lst2[i]) < len(lst1[i]):\n            lst1[i] = lst2[i]\n    return lst1",
        "num_ids": 61
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    set1 = set(lst1)\n    set2 = set(lst2)\n    return set1 - set2\n    \nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))",
        "num_ids": 54
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = lst1.count(lst2[0])\n    b = lst2[1].count(lst2[0])\n    if a+b==len(lst1):\n        return lst1\n    else:\n        return total_match(lst1[a:len(lst1)], lst2[b:len(lst2)])\n",
        "num_ids": 91
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #iterate over both lists\n    total = 0\n    for i in range(len(lst1)):\n        #calculate total of chars in all strings of lst1\n        total += len(lst1[i])\n        #iterate over both lists\n        for j in range(len(lst2)):\n            #calculate total of chars in all strings of lst2\n            total += len(lst2[j])\n    return [lst1[i] for i in range(len(lst1)) if len(lst1[i]) < len(lst2[i])]\n",
        "num_ids": 146
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Write your code here.\n    for i in range(100, 1000):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Define variables\n    x, y = 0, 0\n    # Initialize variables\n    # Check if a is less then 100\n    for a in range(100):\n        # Check if a is less than 100 and is not a prime number\n        if a > 0 and a < 1000:\n            if a % 3 == 0 and a % 5 == 0:\n                # Check if a is less than 100 and a is not a prime number\n                if a < 1000:\n                    # Check if a is less than 100 and a is not a multiple of 3 and 5\n                    if x % 3 == 0 and x % 5 == 0:\n                        # If a is less than 100, return false\n                        return False\n                    # If a is less than 100, a is not a multiple of 3 and 5\n                    else:\n                        # If a is less than 100, a is not a multiple of 3\n                        x += 1\n                        # If x is less than 100, a is not a multiple of 5\n                        if x % 5 == 0:\n                            # If x is less than 100, return false\n                            return False\n                        # If x is less than 100, a is not a multiple of 3\n                        else:\n                            # If x is less than 100, a is not a multiple of 5\n                            x = 0\n                            # If x is less than 100, a is not a multiple of 3\n                            if x % 3 == 0:\n                                # If x is less than 100, return false\n                                return False\n                            # If x is less than 100, a is not a multiple of 3\n                            else:\n                                # If x is less than 100, a is not a multiple of 5\n                                x += 1\n                                # If x is less than 100, a is not a multiple of 3\n                                if x % 3 == 0:\n                                    # If x is less than 100, return false\n                                    return False\n                                # If x is less than 100, a is not a multiple of 5\n                                else:\n                                    # If x is less than 100, a is not a multiple of 3\n                                    x = 0\n                                    # If x is less than 100, a is not a multiple of 5\n                                    if x % 5 == 0:\n                                        # If x is less than 100, return false\n                                        return False\n                                    # If x is less than 100, a is not a multiple of 3 and 5\n                                    else:\n                                        # If x is less than 100, a is not a multiple of 3\n                                        x = 0\n                                        # If x is less than 100, a is not a multiple of 5\n                                        if x % 3 == 0:\n                                            # If x is less than 100, return false\n                                            return False\n                                        # If x is less than 100, a is not a multiple of 3\n                                        else:\n                                            # If x is less than 100, a is not a multiple of 5\n                                            x = 0\n                                            # If x is less than 100, a is not a multiple of 3\n                                            if x % 5 == 0:\n                                                # If x is less than 100, return false\n                                                return False\n                                            # If x is less than 100, a is not a multiple of 3\n                                            else:\n                                                # If x is less than 100, a is not a multiple of 5\n                                                x = 0\n                                                # If x is less than 100, a is not a multiple of 3\n                                                if x % 3 == 0:\n                                                # If x is less than 100, return false\n                                                return False\n                                            # If x is less than 100, a is not a multiple of 5\n                                            else:\n                                                # If x is less than 100, a is not a multiple of 3\n                                                x = 0\n                                                # If x is less than 100, a is not a multiple of 5\n                                                if x % 5 == 0:\n                                                    # If x is less than 100, return false\n                                                    return False\n                                            # If x is less than 100, a is not a multiple of 3 and 5\n                                            else:\n                                                # If x is less than 100, a is not a multiple of 3\n                                                x = 0\n                                                # If x is less than 100, a is not a multiple of 5\n                                                if x % 3 == 0:\n                                                    # If x is less than 100, return false\n                                                    return False\n                                            # If x is less than 100, a is not a multiple of 3\n                                            else:\n                                                # If x is less than 10",
        "num_ids": 1009
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(2, int(math.sqrt(a) + 1)):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    i = 3\n    # choose a number that is less then 100\n    while a % i == 0:\n        i += 1\n    # if a is divisible by i, return False\n    if a % i == 0:\n        return False\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(2, 100):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert a > 100\n",
        "num_ids": 7
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum_prime = 0\n    for i in range(1, 100):\n        if a % i == 0:\n            sum_prime += i\n            if sum_prime == 3:\n                return True\n            break\n    return False\n    ",
        "num_ids": 56
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = a\n    if n < 100:\n        return False\n    \n    for i in range(2, (n//3) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n",
        "num_ids": 55
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(2, int(a/2)+1):\n        if a%i==0:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # the base case of (a) is either 100, unless it has only 2 factors\n    # the factorial of a has to be divisible by a factor of 3\n    # this is the base case of (a)\n    if a <= 100:\n        if a % 3 == 0:\n            return True\n        else:\n            return False\n    # the recursion stops when (a) is larger than 100\n    return (is_multiply_prime(a//3) and (a%3 == 0))\n",
        "num_ids": 118
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n < 1:\n        return False\n    if n == 2:\n        return is_simple_power(x, 2)\n    if n == 3:\n        return is_simple_power(x, 3)\n    if n % 2 == 0:\n        return False\n    if n % 2 == 1:\n        return is_simple_power(x, n // 2)\n    \n",
        "num_ids": 113
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if n==1:\n        return True\n    elif n==2:\n        return x%2==0\n    elif n==4:\n        return x%n==0\n    elif n%2==0:\n        if x%n==0:\n            return True\n        else:\n            return False\n    else:\n        return is_simple_power(x, n//2)\n    \ndef is_palindrome(s):\n    \"\"\"Your task is to write a function that takes a string and checks if it is a palindrome.\n    You can assume that all non-negative numbers are written on the string.\n    For example:\n    is_palindrome(\"GeeksForGeeks\") => true\n    is_palindrome(\"mars\") => true\n    is_palindrome(\"MARS\") => true\n    \"\"\"\n    return True if len(s)==len(s[::-1]) else False\n    \ndef is_prime(n):\n    \"\"\"Your task is to write a function that returns True if n is prime.\n    \"\"\"\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    else:\n        if n==3 or n==4:\n            return True\n        else:\n            return False\ndef is_prime_number(n):\n    \"\"\"Your task is to write a function that returns True if n is prime\n    \"\"\"\n    return True if n==2 or n==3 else False\ndef is_pangram(s):\n    \"\"\"Your task is to write a function that returns True if s is a pangram.\n    \"\"\"\n    return True if len(s)==len(set(s)) else False\ndef is_palindrome_number(n):\n    \"\"\"Your task is to write a function that returns True if n is a palindrome number.\n    \"\"\"\n    return True if len(str(n))==len(str(n)[::-1]) else False\ndef is_leap_year(year):\n    \"\"\"Your task is to write a function that returns True if year is a leap year.\n    \"\"\"\n    if year%400==0:\n        return True\n    if year%100!=0:\n        return False\n    if year%4==0:\n        return True\n    return False\ndef find_prime_factors(n):\n    \"\"\"Your task is to write a function that returns the prime factors of a number n.\n    \"\"\"\n    factors=[]\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            if n//i==i:\n                factors.append(i)\n            else:\n                continue\n            break\n    return factors\ndef is_prime_number_palindrome(n):\n    \"\"\"Your task is to write a function that returns True if n is prime\n    \"\"\"\n    return True if n==2 or n==3 else False\ndef is_prime_number_number(n):\n    \"\"\"Your task is to write a function that returns True if n is prime\n    \"\"\"\n    return True if n==2 or n==3 else False\ndef is_prime_number_leap_year(n):\n    \"\"\"Your task is to write a function that returns True if n is a prime\n    \"\"\"\n    return True if n%4==0 or n%100==0 or n%400==0 else False\ndef is_prime_number_palindrome_number(n):\n    \"\"\"Your task is to write a function that returns True if n is a palindrome\n    \"\"\"\n    return True if n==2 or n==3 else False\ndef is_prime_number_number_palindrome_number(n):\n    \"\"\"Your task is to write a function that returns True if n is a palindrome\n    \"\"\"\n    return True if n==2 or n==3 else False\ndef is_prime_number_palindrome_number_leap_year(n):\n    \"\"\"Your task is to write a function that returns True if n is a palindrome\n    \"\"\"\n    return True if n%4==0 or n%100==0 or n%400==0 else False\ndef is_prime_number_number_number(n):\n    \"\"\"Your task is to write a function that returns True if n is a palindrome\n    \"\"\"\n    return Tru",
        "num_ids": 1025
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n==1:\n        return True\n    elif n==2:\n        return is_simple_power(x,1) and is_simple_power(x,2)\n    elif n==3:\n        return is_simple_power(x,1) and is_simple_power(x,2) and is_simple_power(x,3)\n    else:\n        return False\n",
        "num_ids": 95
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return n**int(x) == ",
        "num_ids": 11
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n%2 == 0:\n        return is_simple_power(x, n//2)\n    else:\n        return is_simple_power(x, n//2) or is_simple_power(x, n//2 + 1)\n",
        "num_ids": 83
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n%2 == 0:\n        if x>=1:\n            return is_simple_power(x-1, n//2)\n        else:\n            return False\n    else:\n        if x<=1:\n            return is_simple_power(x+1, n//2)\n        else:\n            return False\n",
        "num_ids": 80
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return n**int(n)==x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n==0 or n==1:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n <= 1:\n        return True\n    if n == 2:\n        return True if x == 3 else False\n    if n == 3:\n        return True if (x == 2 or x == 1) and x!= 1 else False\n    return is_simple_power(x//2, n//2) and is_simple_power(x//2, n//2)",
        "num_ids": 88
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return False\n    if n <= 0:\n        return False\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # assert isinstance(a, int), \"Invalid Integer value: {0}\".format(a)\n    # assert a >= 0, \"Invalid Integer value: {0}\".format(a)\n    # assert a ** 3 == a ** 3, \"Invalid Integer value: {0}\".format(a)\n    return a % 27 == 27\n",
        "num_ids": 79
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if type(a) is int:\n        if a == 1: return True\n        if a == 2: return False\n        if a == -1: return True\n        if a == 64: return True\n        if a == 0: return True\n        if a == 180: return False\n        return False\n    else:\n        return False\n",
        "num_ids": 78
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return a == a*a*a\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a == 0:\n        return True\n    if a == 1:\n        return True\n    if a == -1:\n        return True\n    if a == 2:\n        return False\n    if a == -2:\n        return False\n    if isinstance(a, int):\n        if a > 0 and a < 6:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 99
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if a == 1:\n        return True\n    if a == 2:\n        return False\n    if a == -1:\n        return True\n    if a == 64:\n        return True\n    if a == 0:\n        return True\n    if a == 180:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return isinstance(a, int) and a**3 == a**3\n",
        "num_ids": 19
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    else:\n        return a**3 == a**3 + 3*a**2 + 9*a + 18\n",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a in range(1,7):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return a ** 3 == (a ** 3)\n",
        "num_ids": 13
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return a ** 3 == a ** 3 + a ** 3\n",
        "num_ids": 15
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    num_str = str(num)\n    \n    div = []\n    num_str = num_str.replace('A', '').replace('B', '').replace('C', '').replace('D', '').replace('E', '').replace('F', '')\n    \n    for i in num_str:\n        div.append(int(i))\n        \n    return sum(div)\n",
        "num_ids": 94
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #assert str(num).isdigit(), \"Input is not a valid hexadecimal number.\"\n    #assert (int(num[:2],16)) % 2 == 0, \"Input is not a valid hexadecimal number.\"\n    return (int(num, 16)//2)\n",
        "num_ids": 69
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    digits = {0:2, 1:3, 2:5, 3:7, 4:9, 5:11, 6:13, 7:17, 8:19, 9:21, \n    11:23, 12:25, 13:27, 17:29, 18:31}\n    key = []\n    for i in range(num):\n        digit = 0\n        if(num.count(str(i)) == 1):\n            digit = digits[i]\n        key.append(digit)\n    return sum(key)\n",
        "num_ids": 127
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # your code\n    def digit_count(num):\n        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num % 2 == 0:\n            return 1\n        digits = 0\n        num = num // 2\n        while num > 0:\n            digits += 1\n            num = num // 2\n        return digits\n    # verify input\n    if type(num)!= str:\n        print('Input must be a string')\n        return 0\n    # verify input\n    if len(num)!= 5 or num[0]!= '0' or num[-1]!= '0':\n        print('Input must be a 5 character string')\n        return 0\n    # verify input\n    if num[1:4]!= 'A' and num[1:4]!= 'B' and num[1:4]!= 'C' and num[1:4]!= 'D' and num[1:4]!= 'E' and num[1:4]!= 'F':\n        print('Input must be a 5 character string')\n        return 0\n    # verify input\n    if num[2]!= '2' and num[2]!= '3' and num[2]!= '5' and num[2]!= '7' and num[2]!= '9' and num[2]!= 'A' and num[2]!= 'B' and num[2]!= 'C' and num[2]!= 'D' and num[2]!= 'E' and num[2]!= 'F':\n        print('Input must be a 5 character string')\n        return 0\n    # verify input\n    for _ in range(2):\n        if num[:2] == '10':\n            num = '1' + num\n        if num[:2] == '11':\n            num = '2' + num\n        if num[:2] == '12':\n            num = '3' + num\n        if num[:2] == '13':\n            num = '4' + num\n        if num[:2] == '14':\n            num = '5' + num\n        if num[:2] == '15':\n            num = '6' + num\n        if num[:2] == '16':\n            num = '7' + num\n        if num[:2] == '17':\n            num = '8' + num\n        if num[:2] == '18':\n            num = '9' + num\n    # verify input\n    if num[-1] == '0':\n        num = '0' + num\n    return digit_count(num)\n",
        "num_ids": 633
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if is_hex_prime(num):\n        return 1\n    else:\n        return hex_key(num[:1]) + hex_key(num[1:])\n",
        "num_ids": 42
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    digits = {}\n    for i in range(0, len(num), 2):\n        digits[i] = int(num[i:i+2])\n",
        "num_ids": 40
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # your code goes here\n    n = int(num)\n    # print(\"n =\", n)\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # print(\"prime =\", prime)\n    prime_count = 0\n    # print(\"numbers =\", numbers)\n    # print(\"prime =\", prime)\n    # print(\"prime_count =\", prime_count)\n    for prime_i in prime:\n        if n >= prime_i:\n            n -= prime_i\n            prime_count += 1\n    # print(\"prime_count =\", prime_count)\n    if len(str(n))!= 4:\n        return 0\n    else:\n        return prime_count\n    # print(prime_count)\n    # print(n)\n    # print(prime_count)\n    # print(numbers)\n    # print(prime)\n    # print(prime_count)\n    # print(numbers[0])\n    # print(numbers[1])\n    # print(numbers[2])\n    # print(numbers[3])\n    # print(prime_count)\n    # print(n)\n    # print(prime_count)\n    # print(numbers[0])\n    # print(numbers[1])\n    # print(numbers[2])\n    # print(numbers[3])\n    # print(prime_count)\n    # print(numbers[0])\n    # print(numbers[1])\n    # print(numbers[2])\n    # print(numbers[3])\n    # print(prime_count)\n    # print(n)\n    # print(prime_count)\n    # print(numbers[0])\n    # print(numbers[1])\n    # print(numbers[2])\n    # print(numbers[3])\n    # print(prime_count)\n    # print(n)\n    # print(prime_count)\n    # print(numbers[0])\n    # print(numbers[1])\n    # print(numbers[2])\n    # print(numbers[3])\n    # print(prime_count)\n    # print(n)\n    # print(prime_count)\n    # print(numbers[0])\n    # print(numbers[1])\n    # print(numbers[2])\n    # print(numbers[3])\n    # print(prime_count)\n    # print(n)\n    # print(prime_count)\n    # print(numbers[0])\n    # print(numbers[1])\n    # print(numbers[2])\n    # print(numbers[3])\n    # print(prime_count)\n    # print(n)\n    # print(prime_count)\n    # print(numbers[0])\n    # print(numbers[1])\n    # print(numbers[2])\n    # print(numbers[3])\n    # print(prime_count)\n    # print(n)\n    # print(prime_count)\n    # print(numbers[0])\n    # print(numbers[1])\n    # print(numbers[2])\n    # print(numbers[3])\n    # print(prime_count)\n    # print(n)\n    # print(prime_count)\n    # print(numbers[0])\n    # print(numbers[1])\n    # print(numbers[2])\n    # print(numbers[3])\n    # print(prime_count)\n    # print(n)\n    # print(prime_count)\n    # print(numbers[0])\n    # print(numbers[1])\n    # print(numbers[2])\n    # print(numbers[3])\n    # print(prime_count)\n    # print(n)\n    # print(prime_count)\n    # print(numbers[0])\n    # print(numbers[1])\n    # print(number",
        "num_ids": 1025
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    num = str(num)\n    num = num.replace(\" \", \"\")\n    if len(num) < 8:\n        return 0\n    if num.count('A')!= 1 or num.count('B')!= 1 or num.count('C')!= 1 or num.count('D')!= 1 or num.count('E')!= 1:\n        return 0\n    if num.count('F')!= 1 or num.count('G')!= 1:\n        return 0\n    if num.count('A') == 0 and num.count('G') == 0:\n        return 0\n    else:\n        digits = []\n        for i in range(0, len(num)):\n            if num[i] == 'F':\n                digits.append(num[i-1])\n            elif num[i] == 'G':\n                digits.append(num[i-1])\n            elif num[i] == 'A':\n                digits.append(num[i-1])\n            else:\n                continue\n        for i in range(0, len(digits)):\n            if digits[i]!= 'A' and digits[i]!= 'B' and digits[i]!= 'C' and digits[i]!= 'D' and digits[i]!= 'E':\n                return 0\n    return digits.count('A') * digits.count('B') * digits.count('C') * digits.count('D') * digits.count('E')\n",
        "num_ids": 356
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    num_dict = {'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, 'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0}\n    for i in range(len(digits)):\n        if str(num)[i] in digits:\n            num_dict[digits[i]] += 1\n    return num_dict\n    \ndef is_prime(num):\n    \"\"\"You have been tasked to determine whether a number is prime.\n    For example, if num = 36, you should return True.\n    For example, if num = 14, you should return True.\n    If num = 7, you should return False.\n    \"\"\"\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num == 3:\n        return True\n    elif num == 5:\n        return True\n    elif num == 7:\n        return False\n    elif num % 2 == 0:\n        return False\n    elif num % 3 == 0:\n        return False\n    elif num % 5 == 0:\n        return False\n    elif num % 7 == 0:\n        return False\n    else:\n        return True\n    \ndef is_prime_factor(num):\n    \"\"\"You have been tasked to determine whether a number is prime\n    with factors, which are greater than 1.\n    For example, if num = 17, it should return True.\n    For example, if num = 1234, it should return False.\n    \"\"\"\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num == 3:\n        return True\n    elif num == 4:\n        return True\n    elif num == 5:\n        return True\n    elif num == 6:\n        return True\n    elif num == 8:\n        return True\n    elif num == 9:\n        return True\n    elif num == 10:\n        return True\n    elif num == 16:\n        return True\n    elif num == 17:\n        return True\n    elif num == 18:\n        return True\n    elif num == 19:\n        return True\n    elif num == 20:\n        return True\n    elif num == 21:\n        return True\n    elif num == 22:\n        return True\n    elif num == 23:\n        return True\n    elif num == 24:\n        return True\n    elif num == 25:\n        return True\n    elif num == 26:\n        return True\n    elif num == 27:\n        return True\n    elif num == 28:\n        return True\n    elif num == 29:\n        return True\n    elif num == 30:\n        return True\n    elif num == 31:\n        return True\n    elif num == 32:\n        return True\n    elif num == 33:\n        return True\n    elif num == 34:\n        return True\n    elif num == 35:\n        return True\n    elif num == 36:\n        return True\n    elif num == 37:\n        return True\n    elif num == 38:\n        return True\n    elif num == 39:\n        return True\n    elif num == 40:\n        return True\n    elif num == 41:\n        return True\n    elif num == 42:\n        return True\n    elif num == 43:\n        return True\n    elif num == 44:\n        return True\n    elif num == 45:\n        return True\n    elif num == 46:\n        return True\n    elif num == 47:\n        return True\n    elif num == 48:\n        return True\n    elif num == 49:\n        return True\n    elif num == 50:\n        return True\n    elif num == 51:\n        return True\n    elif num == 52:\n        return True\n    elif num == 53:\n        return True\n    elif num == 54:\n        return True\n",
        "num_ids": 1024
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = 0\n    for i in range(0,len(num)):\n        s = s + int(num[i])\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    \n    \n    # Solution: convert decimal to binary\n    binary = bin(decimal)[2:]\n    \n    # get length of the binary string\n    length = len(binary)\n    \n    # cut out the extra characters\n    extra = \"db\" * (length % 4)\n    \n    # concatenate the binary string with the extra string\n    return binary + extra\n",
        "num_ids": 90
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    str_temp = \"\"\n    while decimal!= 0:\n        remainder = decimal % 2\n        decimal = decimal // 2\n        if remainder == 0:\n            str_temp += '0'\n        else:\n            str_temp += '1'\n    return str_temp\n",
        "num_ids": 68
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    binary_string = \"\"\n    temp = decimal\n    while temp > 0:\n        temp >>= 1\n        binary_string += str(bin(temp).lstrip(\"0b\"))[2:]\n    return binary_string[:-1]\n",
        "num_ids": 57
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if decimal == 0:\n        return \"0\"\n    if decimal == 1:\n        return \"1\"\n    binary = \"\"\n    for i in range(0, len(str(decimal))):\n        if decimal % 2 == 0:\n            binary += \"0\"\n        else:\n            binary += \"1\"\n        decimal //= 2\n    return binary + \"db\" * len(binary)",
        "num_ids": 95
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = ''\n    if decimal == 0:\n        return '0'\n    while decimal > 0:\n        result = '1' + result\n        decimal //= 2\n    return result + 'db' * decimal\n",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    binary = ''\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    return binary\n",
        "num_ids": 35
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if decimal is None:\n        return \"\"\n    if decimal == 0:\n        return \"db\"\n    elif decimal == 1:\n        return \"db\" + \"1\"\n    elif decimal == 2:\n        return \"db\" + \"1\" + \"db\"\n    else:\n        return \"db\" + \"1\" + \"db\" + \"db\"\n",
        "num_ids": 87
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    binary = \"\"\n    if decimal >= 0:\n        binary = bin(decimal)\n    else:\n        binary = bin(decimal * -1)\n",
        "num_ids": 38
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    string = str(bin(decimal))\n    new_string = \"\"\n    for element in string:\n        new_string = new_string + str(element)\n    return new_string[2:len(new_string)]\n",
        "num_ids": 55
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if decimal > 9:\n        return f'{decimal//1:02}'\n    return f'{decimal//10:02}' + f'{decimal%10:02}'\n",
        "num_ids": 48
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(1, len(s)):\n        if s[i-1] == s[i] and s[i-2]!= s[i-1]:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # your code here\n    if len(s) < 3:\n        return True\n    chars = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0}\n    chars['a'] = 3\n    chars['b'] = 3\n    chars['c'] = 3\n    chars['d'] = 3\n    chars['e'] = 3\n    chars['f'] = 3\n    chars['g'] = 3\n    chars['h'] = 3\n    \n    for i in range(len(s) - 2):\n        chars[s[i]] += 1\n    if chars['a'] + chars['b'] + chars['c'] + chars['d'] + chars['e'] + chars['f'] + chars['g'] + chars['h'] >= 3:\n        return False\n    else:\n        return True\n",
        "num_ids": 223
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(s) < 3:\n        return False\n    n = len(s)\n    for i in range(n):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(s) <= 2:\n        return True\n    if s[0] == s[-1] and s[1]!= s[2]:\n        return False\n    if s[0] == s[-1] and s[1] == s[2]:\n        return False\n    if s[0]!= s[-1]:\n        return False\n    start = s[0] + s[-1] + s[1] + s[-2]\n    for i in range(2, len(s)):\n        if s[i] == s[i-1] + s[i-2] and s[i]!= s[i-2] + s[i-3]:\n            return False\n        if s[i]!= s[i-1] and s[i]!= s[i-2] and s[i]!= s[i-3]:\n            return False\n    return True\n",
        "num_ids": 221
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    cnt = 0\n    for i in range(len(s)):\n        cnt += 1\n        if cnt > 3:\n            return False\n        if s[i]!= s[i+1] or s[i]!= s[i+2]:\n            return False\n    return True\n    #return len(s) >= 3 and not (s[0] == s[1] and s[1] == s[2])\n",
        "num_ids": 105
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(3):\n        if not s[i] in s[i+1:]:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a = s.lower()\n    num_of_diff = 0\n    num_of_symbols = 0\n    for i in range(len(a) - 2):\n        if a[i:i + 3].isdigit():\n            num_of_diff += 1\n        else:\n            num_of_symbols += 1\n    if num_of_symbols == 0:\n        return True\n    if num_of_diff > 0:\n        return False\n    return True\n",
        "num_ids": 118
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(s) >= 3 and not all([chr(n) not in s[i] for i, n in enumerate(s)]",
        "num_ids": 34
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # your code here\n    if len(s) < 3:\n        return False\n    n = len(s) - 3\n    for i in range(n):\n        if s[i] == s[i+3] and s[i+1] == s[i+2] and s[i+2] == s[i+3]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 97
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    def helper(s):\n        # Find all the unique letters in the string\n        unique_letters = set(s)\n        for c in unique_letters:\n            if c == c.lower():\n                continue\n            # Check if the current letter is already present in the set\n            if c in s:\n                return False\n        return True\n    \n    return helper(s)\n",
        "num_ids": 90
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # minimum and maximum values for the gpa\n    gpa_minimum = 4.0\n    gpa_maximum = 3.7\n",
        "num_ids": 32
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # Obtain a list of letter grades\n    letter_grades = []\n    for grade in grades:\n        if grade > 0:\n            letter_grades.append(str(grade))\n    # Add a new row for the student and the GPAs\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades.append(\" \")\n    letter_grades",
        "num_ids": 1024
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #        |    Letter grade\n    #        4.0            A+\n    #        3.7            A\n    #        3.3            A-\n    #        3.0            B+\n    #        2.7            B\n    #        2.3            B-\n    #        2.0            C+\n    #        1.7            C\n    #        1.3            C-\n    #        1.0            D+\n    #        0.7            D\n    #        0.0            D-\n    #        0.0            E\n",
        "num_ids": 134
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    grade_table = {\n        'A+': 3,\n        'A': 4,\n        'A-': 3,\n        'B+': 3,\n        'B': 4,\n        'B-': 3,\n        'C+': 3,\n        'C': 4,\n        'C-': 3,\n        'D+': 2,\n        'D': 4,\n        'D-': 2,\n        'E': 3,\n        'F': 1\n    }\n    \n    if len(grades) < 4:\n        raise ValueError('The list of grades has to have at least 4 values.')\n    \n    grade_output = []\n    \n    for grade in grades:\n        # check if the grade is an integer and has a '.'\n        try:\n            int(grade)\n        except ValueError:\n            # if the grade is not an integer, just return it\n            # as a string\n            grade_output.append(grade)\n            continue\n        \n        # check if the grade is a number between 1.0 and 4.0\n        try:\n            if float(grade) >= 0.0 and float(grade) <= 4.0:\n                # this is a valid number\n                grade_output.append(grade)\n        except ValueError:\n            # if the grade is not a number, return a string\n            grade_output.append(grade)\n            continue\n    \n    return grade_outpu",
        "num_ids": 335
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    table = {\n        \"A+\": \"A\",\n        \"A\": \"A+\",\n        \"A-\": \"A\",\n        \"B+\": \"B\",\n        \"B\": \"B+\",\n        \"B-\": \"B\",\n        \"C+\": \"C\",\n        \"C\": \"C+\",\n        \"C-\": \"C\",\n        \"D+\": \"D\",\n        \"D\": \"D+\",\n        \"D-\": \"D\",\n        \"E\": \"E\",\n    }\n    sum_grades = 0\n    for grade in grades:\n        sum_grades += grade\n    if sum_grades >= 4.0:\n        return [table.get(i) for i in grades]\n    elif sum_grades >= 3.5:\n        return [table.get(i) for i in grades]\n    elif sum_grades >= 3:\n        return [table.get(i) for i in grades]\n    elif sum_grades >= 2.7:\n        return [table.get(i) for i in grades]\n    elif sum_grades >= 2.3:\n        return [table.get(i) for i in grades]\n    elif sum_grades >= 2.0:\n        return [table.get(i) for i in grades]\n    elif sum_grades >= 1.7:\n        return [table.get(i) for i in grades]\n    elif sum_grades >= 1.3:\n        return [table.get(i) for i in grades]\n    elif sum_grades >= 1.0:\n        return [table.get(i) for i in grades]\n    elif sum_grades >= 0.7:\n        return [table.get(i) for i in grades]\n    elif sum_grades >= 0.0:\n        return [table.get(i) for i in grades]\n    else:\n        return [i for i in grades]\n",
        "num_ids": 454
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(grades) < 1:\n        return []\n    # initialize empty list\n    letters = []\n    # go through each grade\n    for grade in grades:\n        # if is a number, convert it to a float\n        if isinstance(grade, float):\n            grade = round(grade, 1)\n        # if a string, convert to a float\n        elif isinstance(grade, str):\n            grade = float(grade)\n        # if a string, convert to a letter grade\n        elif isinstance(grade, str):\n            grade = grade.upper()\n            # if any letter grade is not in the list of letter grades, add it to the list\n            if not grade.isalpha():\n                letters.append(' ')\n            # if it is a letter grade, set grade to a letter grade\n            else:\n                letters.append(grade)\n    # combine the letter grades into a string\n    return \"\".join(letters)",
        "num_ids": 218
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    def letter_grade_calculation(letter_grade, first_gpa, second_gpa):\n        \"\"\"Takes a letter grade and a first GPA, and calculates the letter grade\n        corresponding to that letter grade.\n        For example, if the student is A+, the letter grade is A, and \n        the GPA is 4.0, then the letter grade is A+.\"\"\"\n        if letter_grade == 'A':\n            letter_grade = 'A'\n        elif letter_grade == 'B':\n            letter_grade = 'B'\n        elif letter_grade == 'C':\n            letter_grade = 'C'\n        elif letter_grade == 'D':\n            letter_grade = 'D'\n        elif letter_grade == 'E':\n            letter_grade = 'E'\n        else:\n            letter_grade = 'F'\n        return letter_grade\n    \n    def check_letter_grade_value(letter_grade):\n        \"\"\"Checks that the letter grade inputted is a correct letter grade, \n        otherwise, return an error message.\n        \"\"\"\n        if letter_grade.isdigit():\n            if float(letter_grade) > 2.0:\n                return 'Failed: Grade should be A+, B+, C-, D-, or E-.'\n            elif float(letter_grade) < 4.0:\n                return 'Failed: Grade should be A+, B+, C-, D-, or E-.'\n            else:\n                return 'Successful: Grade is A+.'\n        else:\n            return 'Failed: Grade should be a letter grade.'\n    \n    def grade_letter_grade(letter_grade):\n        \"\"\"Takes the letter grade, and then calculates the letter grade,\n        according to the GPA.\n        If the letter grade is A+, it goes to A, if the letter grade is B+,\n        it goes to B, if the letter grade is C+, it goes to C, if the letter\n        grade is D+, it goes to D, if the letter grade is E+, it goes to E.\"\"\"\n        \n        if letter_grade.isdigit():\n            if int(letter_grade) > 4:\n                return 'Failed: Grade should be A+, B+, C-, D-, or E-.'\n            else:\n                return letter_grade_calculation(letter_grade, first_gpa, second_gpa)\n        else:\n            return 'Failed: Grade should be a letter grade.'\n    \n    def letter_grade_values(letter_grade_list):\n        \"\"\"Takes the letter grades, and then outputs the correct list of letter\n        grades. If all of the letter grades are correct, returns a list of \n        'A+', 'A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-', 'E'.\"\"\"\n        \n        if letter_grade_list == []:\n            return letter_grade_list\n        else:\n            return [letter_grade_calculation(letter_grade, first_gpa, second_gpa) \n                for letter_grade in letter_grade_list]\n    \n    def letter_grade_equation(letter_grades):\n        \"\"\"Takes a list of letter grades, and then calculates the letter grades \n        according to the GPA.\n        If the letter grade is A+, it goes to A, if the letter grade is B+, \n        it goes to B, if the letter grade is C+, it goes to C, if the letter\n        grade is D+, it goes to D, if the letter grade is E+, it goes to E.\"\"\"\n        \n        if letter_grades == []:\n            return letter_grades\n        else:\n            return [letter_grade_calculation(letter_grade, first_gpa, second_gpa) \n                for letter_grade in letter_grades]\n    \n    def letter_grade_equation_not_true(letter_grades):\n        \"\"\"If the letter grades is not a valid list of letter grades, returns a \n        message and the list of letter grades with an incorrect letter grade.\"\"\"\n        \n        if letter_grades == []:\n            return letter_grades, 'Letter grade should be a list of letter grades.'\n        else:\n            return letter_grades, 'Letter grade should be a list of letter grades.'\n    \n    letter_grades_list = letter_grade_values(grade_letter_grade(grade",
        "num_ids": 1023
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if not grades:\n        return []\n    \n    gpa = 0\n    \n    for grade in grades:\n        if grade > 4.0:\n            gpa += 1\n        if grade > 3.5:\n            gpa += 2\n        if grade > 3:\n            gpa += 3\n        if grade > 2:\n            gpa += 4\n        if grade > 1:\n            gpa += 5\n        if grade > 0:\n            gpa += 6\n    \n    return [str(gpa/7.0), '\\u2764']\n",
        "num_ids": 133
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #print(\"\\n\\t\\t*** GRADE EQUATION ***\")\n    gpa_table = {\n            4.0: \"A+\",\n            3.7: \"A-\",\n            3.3: \"B+\",\n            3.0: \"B\",\n            2.7: \"B-\",\n            2.3: \"C+\",\n            2.0: \"C\",\n            1.7: \"D+\",\n            1.3: \"D\",\n            1.0: \"E\",\n            0.7: \"E\",\n            0.0: \"E\"\n    }\n    list_of_grades = []\n    for grade in grades:\n        list_of_grades.append(gpa_table[grade])\n    #print(list_of_grades)\n    return list_of_grades\n",
        "num_ids": 196
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if grades == []:\n        return''\n    else:\n        return [str(round(grade,2)) +'' for grade in grades]\n",
        "num_ids": 35
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if string == \"\":\n        return True\n    elif len(string) % 2 == 0:\n        return False\n    else:\n        for i in range(len(string) - 1, 0, -1):\n            if string[i] > string[i - 1]:\n                return False\n    return True\n    \ndef single_digit_multiplier(string):\n    \"\"\"Write a function that takes a string and returns True if it is a\n    single digit number and False otherwise\n    Examples\n    single_digit_multiplier('1234') == True\n    single_digit_multiplier('7354') == False\n    \"\"\"\n    if len(string) == 1:\n        return False\n    elif len(string)!= 2 and string[0]!= '0':\n        return False\n    elif not string[0].isdigit():\n        return False\n    else:\n        for i in string:\n            if i == '0':\n                return False\n    return True\n",
        "num_ids": 228
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(string) < 2:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Check that the string is a string\n    if not isinstance(string, str):\n        raise TypeError(\"Must be a string\")\n    # Check that the string contains only digits\n    if not any(char.isdigit() for char in string):\n        raise TypeError(\"Must contain only digits\")\n    # Check that the string contains only letters\n    if any(char.isalpha() for char in string):\n        raise TypeError(\"Must contain only letters\")\n    # Check that the string is a length-1 string\n    if len(string) < 2:\n        raise ValueError(\"String must be at least 2 characters long\")\n    # Check that the string is a number\n    if not any(char.isdigit() for char in string):\n        raise ValueError(\"String must contain only digits\")\n    # Check that the string is only digits\n    if any(char.isdigit() for char in string):\n        raise ValueError(\"String must be only digits\")\n    # Check that the string is a digit\n    if not any(char.isalpha() for char in string):\n        raise ValueError(\"String must contain only letters\")\n    # Check that the string is a length-2 string\n    if len(string) > 4:\n        raise ValueError(\"String must be at most 4 characters long\")\n    # Check that the string is a string\n    if not isinstance(string, str):\n        raise TypeError(\"Must be a string\")\n    # Check that the string is all letters\n    if not any(char.isalpha() for char in string):\n        raise TypeError(\"String must contain only letters\")\n    # Check that the string is at most 4 characters\n    if len(string) > 4:\n        raise ValueError(\"String must be at most 4 characters long\")\n    # Check that the string does not contain any numbers\n    if any(char.isdigit() for char in string):\n        raise ValueError(\"String must not contain numbers\")\n    # Check that the string does not contain any special characters\n    if not any(char in string.replace(\" \", \"\") for char in string):\n        raise ValueError(\"String must contain only special characters\")\n    # Return true if the string is a prime number\n    return True",
        "num_ids": 506
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if is_palindrome(string):\n        return True\n    elif len(string) <= 1:\n        return False\n    else:\n        return prime_length(string[1:]) and prime_length(string[0:-1])\n",
        "num_ids": 58
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    str_length = len(string)\n    return str_length > 1 and str_length % 2 == 0\n",
        "num_ids": 27
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if string:\n        string = string.upper()\n        for i in range(2, len(string)):\n            if string[i].isnumeric():\n                return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    \"\"\"\n    # Simple test\n    # Example 1\n    # If the length of the string is less than the number of characters, \n    # return True.\n    if len(string) < 2:\n        return True\n    \n    # Example 2\n    # If the length of the string is greater than the number of characters, \n    # return False.\n    elif len(string) > 2:\n        return False\n    \"\"\"\n    # if the length of the string is less than or greater than two,\n    # return False.\n    if len(string) < 2 or len(string) > 2:\n        return False\n    \n    # Check if the characters are a prime number.\n    for i in range(2, len(string)):\n        if string[i] in string[i+1:]:\n            return False\n    \n    return True\n",
        "num_ids": 200
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    length = len(string)\n    for i in range(2, length+1):\n        if length%i == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Check if the string is a list or if it is a string\n    if type(string) == str:\n        # Check if the string is a list\n        if type(string) == list:\n            # Check if all the elements in the string are strings\n            if all(type(element) == str for element in string):\n                return True\n            # Check if all the elements in the string are integers\n            else:\n                return False\n        # Check if it is a string\n        else:\n            # Check if all the elements in the string are integers\n            if all(type(element) == int for element in string):\n                return True\n            # Check if the string is a string and if it is not an integer\n            else:\n                return False\n    else:\n        return False\n",
        "num_ids": 180
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len(string) % 2 == 0\n",
        "num_ids": 12
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    l = [int(d) for d in str(n)]\n    count = 0\n    for i in range(len(l)):\n        if l[i] == 1:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # For the first n-digit numbers, always add 1 to the end and add 1 to\n    # start. \n    return int(str(n).rjust(1, '0')) + 1\n",
        "num_ids": 48
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 10:\n        return n\n    \n    return sum(1 for i in range(n-10) if i % 10)\n",
        "num_ids": 34
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #count = 0\n    #for i in range(1, n + 1):\n    #    if i % 10 == 1:\n    #        count += 1\n    #return count\n    count = 0\n    for i in range(1, n + 1):\n        if i % 10 == 1:\n            count += 1\n    return count\n",
        "num_ids": 80
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: define the count function\n    pass\n",
        "num_ids": 14
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    num_digits = {\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n        \"ten\": 10,\n        \"eleven\": 11,\n        \"twelve\": 12,\n        \"thirteen\": 13,\n        \"fourteen\": 14,\n        \"fifteen\": 15,\n        \"sixteen\": 16,\n        \"seventeen\": 17,\n        \"eighteen\": 18,\n        \"nineteen\": 19,\n        \"twenty\": 20,\n        \"twentyone\": 21,\n        \"twentytwo\": 22,\n        \"twentythree\": 23,\n        \"twentyfour\": 24,\n        \"twentyfive\": 25,\n        \"twentysix\": 26,\n        \"twentyseven\": 27,\n        \"twentyseven\": 28,\n        \"twentysix\": 29,\n        \"twentynine\": 30,\n        \"twentynine\": 31,\n        \"twentyten\": 32,\n        \"twentynine\": 33,\n    }\n    \n    return sum(num_digits[str(x)[-1]] for x in range(n, -1, -1))\n",
        "num_ids": 317
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return n - math.log10(n)\n",
        "num_ids": 13
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # A \"one\" is the string that begins with a 1.\n    # A \"zero\" is the string that ends with a 0.\n    # A number that starts with a zero is not counted as a \"one\".\n    # A number that ends with a zero is not counted as a \"one\".\n    # A \"one\" is counted as a \"zero\" for a digit that is greater than\n    # the digits it begins with.\n    # Note that the start and end of a number are counted as \"one\"\n    # and \"zero\".\n    return sum(1 for i in range(2, n+1) if i%10==0)\n",
        "num_ids": 148
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: Write your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        count = 0\n        for i in range(n, 2*n):\n            count += starts_one_ends(i)\n        return count\n    # if n < 10:\n    #     return count\n    # else:\n    #     return (count+starts_one_ends(n//10)) + (count+starts_one_ends(n%10))\n",
        "num_ids": 137
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # count = 0\n    # for i in range(1,n):\n    #     if i%2 == 0:\n    #         if i//2 == 1:\n    #             count += 1\n    # return count\n    count = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            count += 1\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum_digits = []\n    n = 0\n    #if N == 0:\n        #return \"\"\n    #if N == 1:\n    #    return \"1\"\n    #if N < 10:\n    #    sum_digits.append(n)\n    #    return \"0\" + str(n)\n    #elif N < 100:\n    #    for i in range(len(str(n))):\n    #        if n % 10 == 0:\n    #            if n < 10:\n    #                sum_digits.append(n)\n    #            else:\n    #                sum_digits.append(\"0\")\n    #        elif n % 10 == 9:\n    #            if n < 10:\n    #                sum_digits.append(n)\n    #            else:\n    #                sum_digits.append(\"0\")\n    #        else:\n    #            sum_digits.append(n)\n    #    return \"0\" + str(n)\n    #else:\n    for i in range(len(str(N))):\n        if N % 10 == 0:\n            sum_digits.append(N // 10)\n            N = N % 10\n        elif N % 10 == 9:\n            sum_digits.append(N // 10)\n            N = N % 10\n        else:\n            sum_digits.append(N // 10)\n            N = N % 10\n    return \"0\" + str(sum(sum_digits))\n",
        "num_ids": 357
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def get_sum(n):\n        \"\"\"\n        Get sum of binary representation of n\n        \"\"\"\n        sum = 0\n        while n:\n            digit = n % 2\n            sum = sum + digit\n            n //= 2\n        return sum\n    \n    def get_sum_binary(n):\n        \"\"\"\n        Get sum of binary representation of n\n        \"\"\"\n        sum = 0\n        while n:\n            digit = n % 2\n            sum = sum + digit\n            n //= 2\n        return sum\n    \n    # let's take binary representation of N\n    binary = str(bin(N)[2:])\n    # add 1 to the end\n    binary = binary + '1'\n    # then get sum\n    sum = get_sum(int(binary, 2))\n    # then get sum of binary representation\n    sum_binary = get_sum_binary(int(binary, 2))\n    # then return result\n    return sum + sum_binary\n",
        "num_ids": 224
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Time complexity: O(N)\n    # Space Complexity: O(N)\n    total = \"\"\n    # for each number in the input\n    for i in range(N):\n        # if the number is 0\n        if i < 0:\n            # add it to the total\n            total += str(i)\n        # if it is 1\n        elif i > 0:\n            # check if there is any digit after the number\n            if len(str(i)) > 1:\n                # if there is a digit after the number\n                total += str(i)\n            # if there is a digit\n            else:\n                # if there is only a single digit, just add it to the total\n                total += str(i)\n    # return the total\n    return total\n",
        "num_ids": 181
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return str(bin(N))\n",
        "num_ids": 10
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    n = [int(str(bin(i))[2:]) for i in range(N)]\n    \n    for i in range(N//2):\n        n[i] += n[N-i-1]\n    \n    return ''.join([str(i) for i in n]",
        "num_ids": 72
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return bin(int(str(N)[::-1].replace('0', ''), 2))[2:]\n    \nprint(solve(N))",
        "num_ids": 36
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    while N >= 1:\n        sum += int(str(N)[-1])\n        N -= 1\n    return str(sum)\n",
        "num_ids": 38
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if N == 0:\n        return \"0\"\n    \n    if N == 1:\n        return \"1\"\n    \n    sum = 0\n    while N > 0:\n        sum = sum + N % 2\n        N = int(N / 2)\n    \n    return str(sum)\n",
        "num_ids": 71
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a = int_to_binary(N)\n    i = 0\n    while i < len(a):\n        if a[i] == '1':\n            a[i] = '0'\n        else:\n            a[i] = '1'\n        i += 1\n    return \"\".join(a)\n",
        "num_ids": 76
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \"\"\"\n        find the sum of digits\n    \"\"\"\n    # find the sum of digits\n    sum_of_digits = 0\n    # convert to binary number\n    binary = []\n    for i in range(1, N + 1):\n        binary.append(str(i))\n    # find the sum of digits\n    for i in range(len(binary)):\n        sum_of_digits += int(binary[i])\n    # print the output\n    return str(sum_of_digits)\n",
        "num_ids": 120
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst.sort()\n    n = len(lst)\n    i = 1\n    j = n // 2\n    while j <= n:\n        lst.append(lst[i])\n        if i % 2 == 0:\n            lst.insert(j, lst[i + 1])\n            j += 1\n        i += 2\n    return lst\n",
        "num_ids": 88
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return lst\n    even_lst = []\n    odd_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_lst.append(lst[i])\n        else:\n            odd_lst.append(lst[i])\n    return even_lst + odd_lst\n",
        "num_ids": 99
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(lst) // 2):\n        lst.append(lst[i] + lst[i + 1])\n    return lst\n",
        "num_ids": 41
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    new_list = []\n    odd_indices = []\n    even_indices = []\n    for i in lst:\n        if i%2 == 0:\n            even_indices.append(i)\n        else:\n            odd_indices.append(i)\n    for i in range(0, len(odd_indices)):\n        new_list.append(odd_indices[i])\n    for i in range(0, len(even_indices)):\n        new_list.append(even_indices[i])\n    return new_list\n",
        "num_ids": 137
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if lst == []:\n        return []\n    else:\n        if len(lst)%2 == 0:\n            for i in range(0, len(lst), 2):\n                lst.append(lst[i])\n        else:\n            for i in range(1, len(lst), 2):\n                lst.append(lst[i])\n    return lst\n",
        "num_ids": 95
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    odd_index = 0\n    for n in lst:\n        if odd_index % 2 == 0:\n            result.append(n)\n        else:\n            result.append(n + (lst[odd_index + 1] % 2))\n        odd_index += 2\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    even = []\n    odd = []\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even = []\n    odd = []\n",
        "num_ids": 11
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst.sort()\n    lst = [i for i in lst if i % 2!= 0]\n    return lst + [0, *lst]\n",
        "num_ids": 41
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst = list(lst)\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst.append(lst[i])\n    return lst\n",
        "num_ids": 50
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join(sorted(s.split()))\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return''.join(sorted(s.split()))\n",
        "num_ids": 15
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = s.strip()\n    result = ''\n    for word in s.split():\n        new_word = ''.join(sorted(word))\n        result += new_word +''\n    result = result[:-1]\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: your code here\n    return''.join(sorted(s, key=str.lower))\n",
        "num_ids": 27
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = len(s)\n    return \" \".join(sorted(s.split(), key=lambda x: ord(x), reverse=True))\n",
        "num_ids": 36
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # helper function\n    def create_chunks(string):\n        chunks = []\n        i = 0\n        while i < len(string):\n            if string[i]!= \" \":\n                chunks.append(string[i])\n                i += 1\n            else:\n                i += 1\n        return chunks\n",
        "num_ids": 77
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    new_s = ''\n    for c in s:\n        if c.isalpha():\n            new_s += chr(ord('A') - ord(c) + ord('A'))\n        else:\n            new_s += c\n    return new_s\n",
        "num_ids": 64
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return ''.join(sorted(s, key=str.lower))\n",
        "num_ids": 19
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = \"\"\n    for letter in s:\n        if letter!= \" \":\n            result += letter\n        else:\n            result += \" \"\n    return result.strip()\n",
        "num_ids": 44
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # your code here\n    s = list(s)\n    temp = s[0]\n    for i in range(1, len(s)):\n        s[i] = s[i].replace(temp, temp + s[i])\n        temp = s[i]\n    return \"\".join(s)\n",
        "num_ids": 75
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    return [(i,lst[i][x]) for i in range(len(lst))]\n",
        "num_ids": 27
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def find(x, lst):\n        l = len(lst)\n        r = []\n        if l < 1:\n            return r\n        if lst[0] == x:\n            return lst\n        for i in range(l):\n            if lst[i][0] == x:\n                r.append(lst[i])\n                if lst[0] < lst[i][0]:\n                    r.sort(key=lambda r: r[0])\n                else:\n                    r.sort(key=lambda r: r[1])\n                return r\n        return r\n    \n    def get(lst, x):\n        return [i[x] for i in lst]\n    \n    lst = list(lst)\n    return find(x, lst)\n",
        "num_ids": 191
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [(x, idx) for idx, x in enumerate(lst) if x == x and x < x + 1 for idx in range(len(lst))]\n",
        "num_ids": 44
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = []\n    for r in lst:\n        if len(r) > 0:\n            for c in r:\n                x = x % 10\n                res.append((x, c))\n                res.sort(key = lambda x:x[1])\n                break\n    return res\n",
        "num_ids": 70
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # only works for lists, tuples, lists with 1,2,3\n    assert type(x) in [list, tuple]\n    if len(lst)==0:\n        return []\n    if len(lst)==1:\n        return [(x,lst[0])]\n    \n    # reverse\n    lst = lst[::-1]\n    \n    # sort by rows\n    rows = sorted(lst, key = lambda x: lst.index(x))\n    \n    # get indices\n    r_i, c_i = [], []\n    for row in rows:\n        r_i.append(r_i[-1]+1)\n        c_i.append(c_i[-1]+len(row))\n        \n    # sort by columns\n    c_i = [c_i[i] for i in range(len(c_i))]\n    c_i.sort(reverse = True)\n    \n    # return\n    return [(r_i[i], c_i[i]) for i in range(len(r_i))]\n    \ndef get_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each column may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \n    Examples:\n    get_col([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(1, 0), (2, 4), (2, 1)]\n    get_col([], 1) == []\n    get_col([[], [1], [1, 2, 3]], 3) == [(0, 0), (0, 1), (1, 2)]\n    \"\"\"\n    \n    # only works for lists, tuples, lists with 1,2,3\n    assert type(x) in [list, tuple]\n    if len(lst)==0:\n        return []\n    if len(lst)==1:\n        return [(x,lst[0])]\n    \n    # reverse\n    lst = lst[::-1]\n    \n    # get indices\n    r_i, c_i = [], []\n    for row in lst:\n        r_i.append(r_i[-1]+1)\n        c_i.append(c_i[-1]+len(row))\n        \n    # sort by rows\n    c_i = [c_i[i] for i in range(len(c_i))]\n    c_i.sort(reverse = True)\n    \n    # return\n    return [(r_i[i], c_i[i]) for i in range(len(r_i))]\n    \ndef get_eq(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the row by rows in descending order.\n    \n    Examples:\n    get_eq([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_eq([], 1) == []\n    get_eq([[], [1]",
        "num_ids": 1017
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #NOTE: this returns all possible tuples (x, y) in the list\n    #(x,y) = (x,y)\n    #row = x\n    #start_index = row * ncols + x\n    #return [(start_index + i, y) for i in range(ncols) for y in range(nrows) if (i + x) % ncols == y]\n    \n    #row = x\n    #start_index = x * ncols + y\n    #return [(start_index + i, y) for i in range(ncols) for y in range(nrows) if (i + x) % ncols == y]\n",
        "num_ids": 162
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    lst.sort()\n    return lst[x]\n    \ndef main():\n    # Prompt user to input data\n    data = input(\"Enter data: \").split(',')\n    # Loop through the data, finding integers x\n    # using get_row, and sorted by row.\n    # Only return integers x if x was found in the data\n    for x in range(len(data)):\n        # Output x in sorted format\n        print(x, data[x])\n        # Check whether x is in data\n        if x in data:\n            # Get the row of coordinates\n            row = get_row(data, x)\n            # Output the coordinate in sorted format\n            print(row)\n",
        "num_ids": 166
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [(x, y) for x, y in sorted(enumerate(lst), key=lambda x: x[1])]\n",
        "num_ids": 33
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [(x, lst[x][x]) for x in sorted(lst)]\n",
        "num_ids": 22
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    i = 0\n    j = lst[x].index(x)\n    return sorted(((i,j),) + sorted((tuple(map(lambda x: x[i], lst)),) + sorted((tuple(map(lambda x: x[j], lst)),))), reverse=True)\n",
        "num_ids": 73
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum = sum_array(array)\n    if sum % 2:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n",
        "num_ids": 40
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sorted_array = []\n    sorted_array += sorted(array)\n    sorted_array = sorted(sorted_array, reverse=True)\n    return sorted_array\n",
        "num_ids": 44
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # To have a fast algorithm, it's a bit of a reverse\n    array.reverse()\n    # Make a new array of same length, just in case the input array has been modified\n    new_array = [0] * len(array)\n    # Place all elements in new array in reverse order\n    for i in range(len(array)):\n        new_array[i] = array[i]\n    # Start from the last index, sum odd numbers, and decrement\n    # until all odd numbers have been removed\n    for i in range(len(new_array)-1, -1, -1):\n        if new_array[i] % 2 == 1:\n            # If sum of odd numbers is even, remove one from new array\n            new_array[i] = new_array[i] // 2\n        else:\n            # If sum of odd numbers is odd, add one to new array\n            new_array[i] += 1\n    # Reverse new array\n    new_array.reverse()\n    return new_array\n",
        "num_ids": 238
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(array):\n        j = 0\n        while j < len(array) - i:\n            if array[j] + array[j + i] + 1 % 2 == 1:\n                array[j], array[j + i] = array[j + i], array[j]\n            else:\n                j += 1\n        i += 1\n    return array",
        "num_ids": 93
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    for i in range(len(array)):\n        result.append(array[i])\n        if i == len(array) - 1:\n            result.append(array[0])\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # O(nlogn)\n    array = sorted(array)\n    # return array\n    return array\n",
        "num_ids": 26
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sorted_array = []\n    sum = 0\n    for item in array:\n        sum += item\n        if sum % 2:\n            sorted_array.append(item)\n        else:\n            sorted_array.append(item)\n            sorted_array.sort()\n    return sorted_array\n",
        "num_ids": 74
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    def sort(array):\n        if len(array) == 0:\n            return array\n        \n        sorted_arr = sorted(array)\n        for i in range(len(sorted_arr)):\n            for j in range(i+1, len(sorted_arr)):\n                if sorted_arr[i] + sorted_arr[j] % 2!= 0:\n                    break\n            else:\n                return sorted_arr\n        \n        for i in range(len(sorted_arr)):\n            for j in range(i+1, len(sorted_arr)):\n                if sorted_arr[i] + sorted_arr[j] % 2 == 0:\n                    break\n            else:\n                return sorted_arr\n        \n    return sort(array)\n",
        "num_ids": 185
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def sort_array_1(array):\n        n = len(array)\n        if n == 0:\n            return array\n        mid = n // 2\n        if mid % 2 == 0:\n            return sort_array_1(array[:mid]) + array[mid:]\n        else:\n            return array[mid:] + sort_array_1(array[:mid])\n",
        "num_ids": 89
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Sorting an array in ascending order of sum\n    # You must use the built in sort function\n    # Built in sort function is the same as ascending order\n    array.sort()\n    # Implementing bubble sort\n    count = 0\n    for index in range(len(array)):\n        for i in range(len(array) - 1 - index):\n            if array[i] > array[i + 1]:\n                array[i], array[i + 1] = array[i + 1], array[i]\n        count += 1\n    return array",
        "num_ids": 128
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    result = ''\n    for letter in s:\n        index = alphabet.index(letter)\n        result = result + alphabet[index+2]\n    return result\n",
        "num_ids": 97
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    num = len(s)\n    l = []\n    for i in range(num):\n        l.append(alphabet[(alphabet.find(s[i])+num)%26])\n    return ''.join(l)\n",
        "num_ids": 78
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join(s[x:x+2] for x in range(0,len(s),2))\n",
        "num_ids": 29
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    encrypt =''.join(f'{a}{b:1}' for a,b in zip(s.lower(), random.sample(range(len(s.lower()))))).strip().split())\n    return encrypt\n",
        "num_ids": 52
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join(s[i] for i in range(len(s))).upper()\n",
        "num_ids": 24
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(s) == 0:\n        return \"\"\n    c = []\n    for i in s:\n        if i.isalpha():\n            c.append(i)\n        else:\n            c.append(chr((ord(i)-ord('A')+2)%26+ord('A')))\n    return ''.join(c)\n",
        "num_ids": 84
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    c = \"\"\n    for c in s:\n        # your code here\n        new_c = c[2]\n        new_c = new_c*2\n        new_c = new_c + c[1]\n        new_c = new_c[::-1]\n        c = c + new_c\n    return c\n",
        "num_ids": 81
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    encrypt_string = []\n    for c in s:\n        if c.isalpha():\n            encrypt_string.append(c.lower())\n        else:\n            encrypt_string.append(c.upper())\n    encrypt_string.sort()\n    return ''.join(encrypt_string)\n",
        "num_ids": 75
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # write your code here\n    # return decrypt(s)\n    pass\n",
        "num_ids": 19
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(s) <= 2:\n        return s\n    l = [s[0]]\n    for i in range(1, len(s)):\n        l.append(s[i])\n        l.append(s[i+1])\n    l.append(' ')\n    l.append(s[-2])\n    l.append(' ')\n    l.append(s[-1])\n    l.append(' ')\n    l = ''.join(l)\n    l = l[1:-1]\n    return l\n",
        "num_ids": 130
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            lst[i] = lst[i + 1]\n            lst[i + 1] = lst[i]\n    return lst[0]\n",
        "num_ids": 72
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return lst[1]\n",
        "num_ids": 9
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # Write your code here\n    return lst[1]\n",
        "num_ids": 18
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def next_smallest(lst):\n        if len(lst) == 1:\n            return lst[0]\n        if len(lst) > 1:\n            return min(lst[1:])\n    \n    return next_smallest(lst[1:])\n",
        "num_ids": 69
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for x in lst:\n        if x < lst[0]:\n            x = lst[0]\n        if x < lst[1]:\n            lst[1] = x\n            return lst[1]\n    return None\n",
        "num_ids": 59
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    pass",
        "num_ids": 5
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # +++ SUCCESSFUL SOLUTION +++\n    counter = 0\n    for word in S.split(\".\"):\n        if word.startswith(\"I\"):\n            counter += 1\n    return counter\n",
        "num_ids": 49
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    if S[0] == '.' or S[0] == '?' or S[0] == '!':\n        return count\n    for i in range(1, len(S)):\n        if S[i] == '.' or S[i] == '?' or S[i] == '!':\n            count += 1\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    bored_count = 0\n    word = S\n    for i in range(0, len(word)):\n        if word[i] == \".\" or word[i] == \"?\":\n            continue\n        elif word[i] == \"!\" or word[i] == \"?\" or word[i] == \".\":\n            bored_count += 1\n    return bored_count\n",
        "num_ids": 92
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Write your code here.\n    s = S.split('.')\n    count = 0\n    for word in s:\n        if word.startswith('!'):\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    dic = {\n    \"i\" : \"is\",\n    \"i've\" : \"have\",\n    \"i'll\" : \"will\",\n    \"i'll've\" : \"will've\",\n    \"i'd\" : \"would\",\n    \"i'd've\" : \"would've\",\n    \"i'll've\" : \"i'll've\",\n    \"i'll\" : \"i'll\",\n    \"aren't\" : \"are not\",\n    \"isn't\" : \"is not\",\n    \"aren't\" : \"are not\",\n    \"daren't\" : \"do not\",\n    \"don't\" : \"do not\",\n    \"dont\" : \"do not\",\n    \"haven't\" : \"have not\",\n    \"i'll've\" : \"i will have\",\n    \"i'd've\" : \"i would have\",\n    \"i've\" : \"i have\",\n    \"isn't\" : \"is not\",\n    \"aren't\" : \"are not\",\n    \"isn't\" : \"is not\",\n    \"do not\" : \"do not\",\n    \"i'd\" : \"i would\",\n    \"i've\" : \"i have\",\n    \"i'm\" : \"i am\",\n    \"i've\" : \"i have\",\n    \"i'll\" : \"i will\",\n    \"i'll've\" : \"i will have\",\n    \"i'd\" : \"i would\",\n    \"i'd've\" : \"i would have\",\n    \"i'll\" : \"i will\",\n    \"i'll've\" : \"i will have\",\n    \"i've\" : \"i have\",\n    \"do not\" : \"do not\",\n    \"don't\" : \"do not\",\n    \"haven't\" : \"have not\",\n    \"isn't\" : \"is not\",\n    \"isn't\" : \"is not\",\n    \"i'll've\" : \"i will have\",\n    \"i'll\" : \"i will\",\n    \"i'll've\" : \"i will have\",\n    \"i'd\" : \"i would\",\n    \"i've\" : \"i have\",\n    \"i'm\" : \"i am\",\n    \"i've\" : \"i have\",\n    \"i'll\" : \"i will\",\n    \"i'll've\" : \"i will have\",\n    \"i'd\" : \"i would\",\n    \"i'd've\" : \"i would have\",\n    \"i'll\" : \"i will\",\n    \"i'll've\" : \"i will have\",\n    \"i've\" : \"i have\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"do not\" : \"do not\",\n    \"d",
        "num_ids": 1025
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    bored_count = 0\n    \n    for word in S.split():\n        if word.endswith('.'):\n            bored_count += 1\n        elif word.startswith('?'):\n            bored_count += 1\n        else:\n            return bored_count\n    \n    return bored_count\n",
        "num_ids": 79
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    bored_string = ''.join([word for word in S.split('.') if word.startswith('?')])\n    return len(bored_string)\n",
        "num_ids": 42
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    boredom_count = 0\n    for word in S.split():\n        if word[0] == '?':\n            boredom_count += 1\n    return boredom_count\n",
        "num_ids": 45
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    words = S.split(\".\")\n    count = 0\n    for word in words:\n        if word[0] == \"I\":\n            count = count + 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    boredoms = 0\n    for i in range(len(S)):\n        if S[i] == \".\" or S[i] == \"?\" or S[i] == \"!\":\n            boredoms += 1\n    return boredoms\n",
        "num_ids": 59
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return x+y==z or z==z or z==z\n",
        "num_ids": 17
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    return any(x == i and y == i and z == i for i in range(x + y + z))\n",
        "num_ids": 30
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    s = 0\n    for i in range(y-z+1):\n        s = s + x[i]\n    for i in range(z+1, x.shape[0]):\n        s = s + x[i]\n",
        "num_ids": 59
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    return True if sum(x, y, z) == sum(x, y, z) else False\n",
        "num_ids": 27
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if x == y == z:\n        return True\n    elif x == y or z == y or x == z:\n        return False\n    elif isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x + y == z\n    else:\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not isinstance(x, (int, float)):\n        return False\n    elif x == y and x == z:\n        return True\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if x + y + z == sum(int(x), int(y), int(z)):\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    sum_int = x + y + z\n    \n    if sum_int % 10 == x or sum_int % 10 == y or sum_int % 10 == z:\n        return True\n    return False\n",
        "num_ids": 82
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if x > y or y > z:\n        return False\n    elif x == y and y == z:\n        return True\n    elif x == y:\n        return any_int(x, z, z)\n    elif x == z:\n        return any_int(x, y, z)\n    elif y == z:\n        return any_int(x, y, z)\n    else:\n        return any_int(x, y, z)\n",
        "num_ids": 112
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if x >= y and z >= z:\n        if x == y or x == z or y == z:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ''.join(chr(ord(c)+2) if c.isupper() else c for c in message)\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    message = message.lower()\n    message_new = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for i in message:\n        if i in vowels:\n            message_new += i.upper() + \" \"\n        else:\n            message_new += i\n    return message_new\n    \n",
        "num_ids": 99
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #TODO: Write a function that returns a \"encoded\" string. \n    #HINT: The result is the same as the above example, except for the \n    #   letter that appears 2 places after a consonant, and it's replaced \n    #   with the letter that appears the second to last vowel of the \n    #   consonant. For example, if the message is \"THKS KS C MGSSCGG\", \n    #   then the result would be \"TGST GGTSG\"\n    \n    #TODO: Write a function that returns a \"decoded\" string, which is the \n    #   result of calling decode(encoded) on the original message. \n    #   HINT: encode should be an iterative function\n    \n    encoded = \"\"\n    \n    #TODO: Write a function that takes a string and returns a string\n    #    that is the same as the original string, but with all the \n    #    letters of the alphabet swapped. For example, if the original\n    #    message is \"TGTG\", then the return value would be \"TGGA\"\n    \n    #TODO: Write a function that accepts a string and returns a string\n    #    with all the letters of the alphabet swapped. For example, if \n    #    the original message is \"TGTG\", then the return value would \n    #    be \"GTGA\"\n    \n    #TODO: Write a function that takes a string and returns a string \n    #    with all the letters of the alphabet swapped. For example, \n    #    if the original message is \"TGTG\", then the return value \n    #    would be \"GTGA\"\n    \n    #TODO: Write a function that takes a string and returns a string. \n    #    Each letter should be replaced by a new letter from the \n    #    English alphabet. For example, if the original message is \n    #    \"TGTG\", then the return value would be \"TGGA\"\n    \n    #TODO: Write a function that takes a string and returns a string. \n    #    Each letter should be replaced by a new letter of the \n    #    English alphabet. For example, if the original message is \n    #    \"TGTG\", then the return value would be \"TGGA\"\n    \n    #TODO: Write a function that takes a string and returns a string. \n    #    Each letter should be replaced by a new letter of the English \n    #    alphabet. For example, if the original message is \n    #    \"TGTG\", then the return value would be \"TGGA\"\n    \n    #TODO: Write a function that takes a string and returns a string. \n    #    Each letter should be replaced by a new letter of the English \n    #    alphabet. For example, if the original message is \"TGTG\", then \n    #    the return value would be \"TGGA\"\n    \n    #TODO: Write a function that returns a string. \n    #    The string should contain the ASCII value of the letter that \n    #    replaced the letter that appears 2 places after a vowel. \n    #    For example, if the original message is \"TGTG\", then the return \n    #    value would be \"GTA\"\n    \n    #TODO: Write a function that takes a string and returns a string. \n    #    Each letter should be replaced by a new letter of the English \n    #    alphabet. For example, if the original message is \n    #    \"TGTG\", then the return value would be \"GTA\"\n    \n    #TODO: Write a function that takes a string and returns a string. \n    #    Each letter should be replaced by a new letter of the English \n    #    alphabet. For example, if the original message is \"TGTG\", then the \n    #    return value would be \"GTA\"\n    \n    #TODO: Write a function that takes a string and returns a string. \n    #    Each letter should be replaced by a new letter of the English \n    #    alphabet. For example, if the original message is \"TGTG\", then \n    #    the return value would be \"GTAA\"\n    \n    #TODO: Write a function that takes a string and returns a string. \n    #    Each letter should be replaced by ",
        "num_ids": 1023
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Step 1: Make a list of all letters in the message\n    letters = list(message)\n    # Step 2: Use a for-loop to enumerate letters in the message\n    for i in range(len(letters)):\n        # Step 3: Check the current index of the letter in the list\n        if letters[i] in vowels:\n            # Step 4: If it is a vowel, change it to an uppercase letter\n            if letters[i] == 'A':\n                letters[i] = 'U'\n            # Step 5: If it's a vowel, replace it with another vowel\n            elif letters[i] == 'E' or letters[i] == 'I' or letters[i] == 'O' or letters[i] == 'U':\n                letters[i] = 'V'\n            # Step 6: If it's a vowel, replace it with a consonant\n            elif letters[i] == 'Y':\n                letters[i] = 'G'\n            # Step 7: If it's a consonant, don't replace it with another\n            elif letters[i] == 'S' or letters[i] == 'T' or letters[i] == 'U' or letters[i] == 'V':\n                pass\n            # Step 8: If it's an uppercase letter, replace it with a single consonant\n            else:\n                letters[i] = 'D'\n        # If it's not a vowel, add it to the list\n        else:\n            letters[i] = 'N'\n    # Step 9: Convert the list back to a string\n    message = ''.join(letters)\n    return message\n",
        "num_ids": 381
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lower_message = message.lower()\n    code = \"\"\n    for letter in lower_message:\n        if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u':\n            code = code + \"V\"\n        else:\n            code = code + \"T\"\n    return code\n",
        "num_ids": 83
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Create an empty dictionary to store the new string\n    new_string = {}\n    \n    # Get the original string, without any\n    # non-alphabet characters, and convert\n    # to a list of characters\n    original = message.replace(\" \", \"\").lower()\n    \n    # Iterate over each char in the original string\n    for char in original:\n        # Check if the char is a vowel\n        if char in VOWELS:\n            # If it is, swap it with the letter\n            # that appears two places ahead of\n            # the vowels\n            if char in LOWER_VOWELS:\n                new_string[char] = LOWER_VOWELS[LOWER_VOWELS.index(char)+2]\n            else:\n                new_string[char] = char\n        else:\n            # If it is not a vowel, add it to the original\n            new_string[char] = char\n    \n    # Return the encoded string\n    return \"\".join(new_string)\n    ",
        "num_ids": 236
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    encrypted = ''\n    for i in message:\n        if i.isalpha():\n            if i.isupper():\n                encrypted += chr(ord(i) - ord('A') + ord('a') + 2)\n            elif i.islower():\n                encrypted += chr(ord(i) - ord('A') + ord('a') + 1)\n            else:\n                encrypted += chr(ord(i) - ord('A') + ord('a') + ord('0'))\n        else:\n            encrypted += i\n    return encrypted\n",
        "num_ids": 130
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    encoded = \"\"\n    for letter in message:\n        if letter.isupper():\n            encoded += chr(ord('A') + (ord(letter) - ord('A') + 2))\n        else:\n            encoded += chr(ord(letter) + 2)\n    return encoded\n",
        "num_ids": 71
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: write your solution\n    \"\"\"\n    return message.upper()\n    \"\"\"\n    upper_message = message.upper()\n    upper_message_words = upper_message.split()\n    \n    letter = ''\n    vowels = 'aeiou'\n",
        "num_ids": 65
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l=message.lower().split(\" \")\n    \n    vowels=['a','e','i','o','u']\n    \n    for i in range(len(l)):\n        l[i] = vowels[l[i].find(\" \")]\n    \n    res=''\n    for i in l:\n        res+=i\n    \n    return res\n",
        "num_ids": 89
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # write your code here\n    lst_sum = 0\n    for num in lst:\n        lst_sum += num\n        for i in str(num):\n            lst_sum += int(i)\n        if lst_sum == 1:\n            break\n        if lst_sum % 9 == 0:\n            return lst_sum\n",
        "num_ids": 84
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    prime=2\n    lst_max=[]\n    while (prime%lst_max[-1]==0):\n        prime+=1\n    for i in lst:\n        if i in lst_max:\n            continue\n        while i!=0:\n            if i%lst_max[-1]==0:\n                break\n            i//=lst_max[-1]\n        if i==0:\n            lst_max.append(lst_max[-1]+lst[0])\n        else:\n            lst_max.append(lst_max[-1])\n    for i in range(len(lst)):\n        lst[i]=-lst[i]\n    if lst[0]==1 or lst[0]==2:\n        return 0\n    if lst[0]==lst[1]:\n        return lst[0]\n    lst_p=0\n    lst_m=0\n    for i in lst:\n        if i==1:\n            continue\n        lst_p=lst_p+i\n        lst_m=lst_m+lst[i]\n    if lst_p>lst_m:\n        return lst_p\n    else:\n        return lst_m\n",
        "num_ids": 313
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #the formula for the largest prime numbers is\n    #primes = []\n    #for i in range(2, int(math.sqrt(max(lst)))):\n    #    for j in range(2, int(math.sqrt(i))):\n    #        if (i % j) == 0:\n    #            break\n    #    else:\n    #        if i == 2:\n    #            primes.append(i)\n    #            print(i)\n    #for p in primes:\n    #    for i in range(p, 2*p+1):\n    #        if i%2 == 0:\n    #            continue\n    #        else:\n    #            lst.remove(i)\n    \n    #for i in lst:\n    #    if i<0:\n    #        continue\n    #    elif i%2==0:\n    #        print(i, end=' ')\n",
        "num_ids": 223
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    def pascal(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * pascal(n - 1)\n    \n    for i in range(len(lst)):\n        if i == 0:\n            lst[i] = 1\n        else:\n            lst[i] = lst[i - 1] + lst[i - 1]\n    \n    return lst[-1]\n",
        "num_ids": 111
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    largest = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[j]%lst[i]==0:\n                largest = lst[j]\n    return largest\n",
        "num_ids": 66
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def sqrt(n):\n        return (n**0.5)\n    def gcd(x, y):\n        return gcd(y, x%y)\n    \n    primes = []\n    for i in range(2, int(sqrt(max(lst)))+1):\n        if gcd(i, max(lst)) == 1:\n            primes.append(i)\n    \n    summ = 0\n    i = 0\n    while i<len(lst):\n        summ += lst[i]\n        i += 1\n    \n    return summ\n",
        "num_ids": 140
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def prime(lst):\n        \"\"\"Gives a list of prime numbers.\"\"\"\n        lst = [i for i in lst if i>0]\n        p = lst[0]\n        for i in range(2,lst[0]):\n            if lst[i] % p == 0:\n                return False\n        return True\n    def prime_nums(lst):\n        \"\"\"Gives a list of prime numbers.\"\"\"\n        return list(filter(prime,lst))\n",
        "num_ids": 118
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #return max(lst)\n    # convert all ints to str so that we can add a list of ints to the max and then reduce\n    # this with function reduce to this max as well\n    return reduce(lambda x,y: max(x,y), [str(i) for i in lst]",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if lst == []:\n        return 0\n    if lst == [1]:\n        return 1\n    if lst == [0]:\n        return 0\n    if lst == [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]:\n        return 1\n    if lst == [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]:\n        return 1\n    if lst == [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]:\n        return 1\n    if lst == [1,7,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]:\n        return 1\n    for i in range(len(lst)):\n        n = lst[i]\n        while n > 0:\n            for j in range(2, int(math.sqrt(n))+1):\n                if n % j == 0:\n                    break\n            else:\n                return n\n            n = n / j\n    return 0\n",
        "num_ids": 308
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # EITHER:\n    # 1) python code that checks if a number is prime\n    # 2) python code that gives the largest prime value\n    # 3) python code that finds the sum of the digits of a number\n    # 4) python code that gives the sum of the digits of a number\n    # 5) python code that checks if a number is prime\n    # 6) python code that finds the sum of the digits of a number\n    # 7) python code that gives the sum of the digits of a number\n    # 8) python code that checks if a number is prime\n    # 9) python code that gives the sum of the digits of a number\n    # 10) python code that checks if a number is prime\n    # 11) python code that gives the sum of the digits of a number\n    # 12) python code that checks if a number is prime\n    # 13) python code that gives the sum of the digits of a number\n    # 14) python code that checks if a number is prime\n    # 15) python code that gives the sum of the digits of a number\n    # 16) python code that checks if a number is prime\n    # 17) python code that gives the sum of the digits of a number\n    # 18) python code that checks if a number is prime\n    # 19) python code that gives the sum of the digits of a number\n    # 20) python code that checks if a number is prime\n    # 21) python code that gives the sum of the digits of a number\n    # 22) python code that checks if a number is prime\n    # 23) python code that gives the sum of the digits of a number\n    # 24) python code that checks if a number is prime\n    # 25) python code that gives the sum of the digits of a number\n    # 26) python code that checks if a number is prime\n    # 27) python code that gives the sum of the digits of a number\n    # 28) python code that checks if a number is prime\n    # 29) python code that gives the sum of the digits of a number\n    # 30) python code that checks if a number is prime\n    # 31) python code that gives the sum of the digits of a number\n    # 32) python code that checks if a number is prime\n    # 33) python code that gives the sum of the digits of a number\n    # 34) python code that checks if a number is prime\n    # 35) python code that gives the sum of the digits of a number\n    # 36) python code that checks if a number is prime\n    # 37) python code that gives the sum of the digits of a number\n    # 38) python code that checks if a number is prime\n    # 39) python code that gives the sum of the digits of a number\n    # 40) python code that checks if a number is prime\n    # 41) python code that gives the sum of the digits of a number\n    # 42) python code that checks if a number is prime\n    # 43) python code that gives the sum of the digits of a number\n    # 44) python code that checks if a number is prime\n    # 45) python code that gives the sum of the digits of a number\n    # 46) python code that checks if a number is prime\n    # 47) python code that gives the sum of the digits of a number\n    # 48) python code that checks if a number is prime\n    # 49) python code that gives the sum of the digits of a number\n    # 50) python code that checks if a number is prime\n    # 51) python code that gives the sum of the digits of a number\n    # 52) python code that checks if a number is prime\n    # 53) python code that gives the sum of the digits of a number\n    # 54) python code that checks if a number is prime\n    # 55) python code that gives the sum of the digits of a number\n    # 56) python code that checks if a number is prime\n    # 57) python code that gives the sum of the digits of a number\n    # 58) python code that checks if a number is prime\n    # 59) python code that gives the sum of the digits of a number\n    # 60) python code that checks if a number is prime\n    # 61) python code that gives the sum of the digits of a number\n    # 62) python code that checks if a number is prime\n    # 63) python code that gives the sum of the digits of a number\n    # 64) python code that checks if a number is prime\n    # 65) python code that gives the sum of the digits of a number\n    # 66) python code that checks i",
        "num_ids": 1025
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for k in dict.keys():\n        if isinstance(k, str) and k.isupper():\n            return True\n        elif isinstance(k, str) and k.islower():\n            return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not isinstance(dict, dict):\n        return False\n    for key, value in dict.items():\n        if not isinstance(value, str) and not isinstance(value, int):\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if type(dict)!= dict:\n        return False\n    for key in dict:\n        if not type(key) == str:\n            return False\n    for key in dict:\n        if not key.islower():\n            return False\n    for key in dict:\n        if not key.isupper():\n            return False\n    return True\n    \ndef test():\n    d = {\"a\":\"apple\", \"b\":\"banana\"}\n    assert(check_dict_case(d)==True)\n    assert(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})==True)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==True)\n    assert(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})==True)\n    assert(check_dict_case({\"State\":\"NC\", \"ZIP\":\"12345\"})==True)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==True)\n    assert(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})==False)\n    assert(check_dict_case({\"State\":\"NC\", \"ZIP\":\"12345\"})==False)\n    assert(check_dict_case({\"a\":\"apple\", \"B\":\"banana\", \"a\":\"apple\"})==False)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==False)\n    assert(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})==False)\n    assert(check_dict_case({\"State\":\"NC\", \"ZIP\":\"12345\"})==False)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==False)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==False)\n    assert(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})==False)\n    assert(check_dict_case({\"State\":\"NC\", \"ZIP\":\"12345\"})==False)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==False)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==False)\n    assert(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})==False)\n    assert(check_dict_case({\"State\":\"NC\", \"ZIP\":\"12345\"})==False)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==False)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==False)\n    assert(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})==False)\n    assert(check_dict_case({\"State\":\"NC\", \"ZIP\":\"12345\"})==False)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==False)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==False)\n    assert(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})==False)\n    assert(check_dict_case({\"State\":\"NC\", \"ZIP\":\"12345\"})==False)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==False)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==False)\n    assert(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})==False)\n    assert(check_dict_case({\"State\":\"NC\", \"ZIP\":\"12345\"})==False)\n    assert(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})==False)\n    assert(check_dict",
        "num_ids": 1024
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            if all([isinstance(i, str) for i in dict[key]]):\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for k, v in dict.items():\n        if type(k)!= str or type(v)!= str:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for key in dict:\n        if type(key)!= str:\n            return False\n    for key in dict:\n        if key.lower() == key:\n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for key in dict:\n        if type(key) is not str:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return type(dict) == dict and all(type(key) == str for key in dict.keys()) and all(type(val) == str for val in dict.values())\n",
        "num_ids": 42
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return all(key.isupper() for key in dict.keys()) and all(key.islower() for key in dict.keys())\n    \n    \n",
        "num_ids": 37
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not isinstance(dict, dict):\n        return False\n    return all(isinstance(k, str) and k.lower() in dict.keys() for k in dict.keys())\n",
        "num_ids": 45
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # your code here\n    from itertools import takewhile\n    return list(takewhile(lambda x: x < n and x % 2 == 0, range(1, n)))\n",
        "num_ids": 45
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 0:\n        return []\n    result = [1]\n    for i in range(2, n + 1):\n        if is_prime(i):\n            result.append(i)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n        if is_prime:\n            result.append(i)\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    list_numbers = []\n    for i in range(n+1):\n        if isprime(i):\n            list_numbers.append(i)\n    return list_numbers\n",
        "num_ids": 46
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    arr = []\n    for i in range(1,n+1):\n        is_prime = True\n        for j in range(2,i):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            arr.append(i)\n    return arr\n",
        "num_ids": 75
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for x in range(n+1):\n        for y in range(2,x):\n            if x % y == 0:\n                break\n        else:\n            result.append(x)\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [i for i in range(n, 0, -1)]\n",
        "num_ids": 18
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code here\n    def prime_factor_iter(n):\n        \"\"\"Return a list of prime numbers less than n, in increasing order.\n        >>> prime_factor_iter(10)\n        [2, 3, 5, 7]\n        \"\"\"\n        factor = []\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                factor.append(i)\n                if i!= n // i:\n                    factor.append(n//i)\n                    n = n//i\n            else:\n                i += 1\n        if n == 1:\n            factor.append(2)\n        return factor\n    return prime_factor_iter(n)\n",
        "num_ids": 162
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    nums = [2]\n    \n    for i in range(2, n):\n        if prime(i):\n            nums.append(i)\n    \n    return nums\n    \n    \n    # nums = []\n    # for i in range(1, n):\n    #     if prime(i):\n    #         nums.append(i)\n        \n    # return nums\n",
        "num_ids": 98
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 1:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Replace \"pass\" statement with your code\n    pass\n",
        "num_ids": 15
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = 0\n    for digit in str(b):\n        result += int(digit)\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Write your code here.\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return a*b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    product = 0\n    for digit in str(b):\n        product = product * 10 + int(digit)\n    return product\n    \nprint(multiply(148, 412))",
        "num_ids": 43
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \"\"\"Complexity Analysis:\n    Time complexity: O(n)\n    Space Complexity: O(n)\"\"\"\n    return int(str(a * b)[::-1])\n",
        "num_ids": 44
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    product = 1\n    for d in str(b):\n        product = product * (int(d))\n    return product\n",
        "num_ids": 30
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    for i in b:\n        result = result*10 + i\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return reduce((lambda x,y: x * y), map(int, str(a*b)))\n",
        "num_ids": 25
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # We'll use the fact that 2^8 = 256, 2^10 = 1024, and the 2^11 = 2048.\n    # We'll use the fact that 2^13 = 268435456, 2^17 = 5368709120.\n    # Because our binary representations of the 2^128 are very large.\n    # We'll use the first 256 bits as a prime.\n    # Let's start with the 128 bits.\n    # 2^128 = 256 bits.\n    # Let's take a look at the 2^1/128 bits.\n    # 2^128 = 256 bits.\n    # Let's take a look at the 2^15 bits.\n    # 2^128 = 256 bits.\n    # Let's take a look at the 2^17 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # Let's take a look at the 2^21 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # Let's take a look at the 2^2/128 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bits.\n    # 2^128 = 256 bit",
        "num_ids": 1025
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Hint: Note the use of @functools.lru_cache which could be faster than using a hash map.\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # use a counter to keep track of the upper indices\n    count = 0\n    \n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    \n    return count\n",
        "num_ids": 56
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = len(s)\n    \n    # initialize count\n    count = 0\n    \n    # loop through every even index\n    for i in range(n):\n        \n        # if the letter is upper, increment count\n        if s[i] in string.ascii_uppercase:\n            count += 1\n            \n    return count\n",
        "num_ids": 82
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum([s.count(s[i].upper()) for i in range(len(s)) if s[i].isupper()])\n",
        "num_ids": 34
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = s.lower()\n    vowels = 'aeiou'\n    vowels_count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isupper():\n                vowels_count += 1\n    return vowels_count\n",
        "num_ids": 76
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i%2 == 0:\n            count+=1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count=0\n    for i in range(len(s)):\n        if(s[i].isupper() and i%2==0):\n            count+=1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            count += s[i].isupper()\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(str(value)) == 1:\n        return value\n    else:\n        num = abs(int(str(value)[1]))\n        if num == 1:\n            return round(float(value))\n        else:\n            return closest_integer(str(value)[2:])\n",
        "num_ids": 70
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    from math import floor\n    from fractions import Fraction\n    import re\n",
        "num_ids": 18
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Note: This was not a complete solution because of rounding errors.\n    # It's a little tricky. I think it works.\n    value = value.strip('.')\n    value = value.replace('e', '.')\n    value = value.replace('e+', '.')\n    value = value.replace('e-', '.')\n    value = value.replace('E', '.')\n    value = value.replace('.', ',')\n    value = value.replace('-', '.')\n    value = value.replace('+', '.')\n    value = value.replace('-', '')\n    value = value.replace('e', '')\n    value = value.replace('E', '')\n    value = value.replace('-', '')\n    value = value.replace('+', '')\n    value = value.replace('.', '')\n    value = float(value)\n    if value > 0:\n        return round(value, 1)\n    else:\n        return 0\n    \n    ",
        "num_ids": 241
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Check if the given value is an integer, throw an exception\n    # if not.\n    try:\n        int(value)\n    except ValueError:\n        raise ValueError(\"value must be an integer\")\n",
        "num_ids": 50
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return int(round(value))\n    return int(abs(value - value.as_integer_ratio()[1]))\n",
        "num_ids": 33
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if value.isnumeric():\n        return int(value)\n",
        "num_ids": 17
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if value == \"\":\n        return \"Not a valid input\"\n",
        "num_ids": 17
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    closest_integer_result = ''\n    closest_integer_left = 0\n    closest_integer_right = 0\n    for digit in value:\n        if digit == '.':\n            if closest_integer_left == 0:\n                closest_integer_left = int(digit)\n            else:\n                break\n        elif digit == '-':\n            if closest_integer_left == 0:\n                closest_integer_left = int(digit)\n            else:\n                break\n        elif digit == '+':\n            if closest_integer_left == 0:\n                closest_integer_left = int(digit)\n            else:\n                break\n        else:\n            closest_integer_left = int(digit)\n    for i in range(closest_integer_left, len(value)):\n        digit = value[i]\n        if digit == '+':\n            if closest_integer_right == 0:\n                closest_integer_right = int(digit)\n            else:\n                break\n        elif digit == '-':\n            if closest_integer_right == 0:\n                closest_integer_right = int(digit)\n            else:\n                break\n        elif digit == '.':\n            if closest_integer_right == 0:\n                closest_integer_right = int(digit)\n            else:\n                break\n        elif digit == '+':\n            if closest_integer_right == 0:\n                closest_integer_right = int(digit)\n            else:\n                break\n        else:\n            closest_integer_right = int(digit)\n    return int(closest_integer_left + closest_integer_right)",
        "num_ids": 408
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    closest_num = value\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if type(value) == float:\n        value = str(value)\n    if len(value) == 1:\n        return int(value)\n    else:\n        value = value[0:-1]\n        if value == '0' or value == '1':\n            return int(value)\n        elif value == '-1':\n            return int(value) - 2\n        else:\n            return int(value) - 1\n",
        "num_ids": 103
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n % 2!= 0:\n        return [n//2] + make_a_pile(n//2)\n    else:\n        return [n//2, n//2] + make_a_pile(n//2 + 1)\n",
        "num_ids": 61
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    next_lvl = [0, 1, 2]\n    next_lvl_num = [0, 0, 0, 0, 0, 1, 2]\n    if n % 2:\n        next_lvl = next_lvl + [0]\n        next_lvl_num = next_lvl_num + [2]\n    else:\n        next_lvl = next_lvl + [1]\n        next_lvl_num = next_lvl_num + [2]\n",
        "num_ids": 108
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return []\n    if n%2 == 1:\n        return [n//2] + make_a_pile(n-1)\n    else:\n        return [n//2, n//2 + 1] + make_a_pile(n-1)\n",
        "num_ids": 71
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    a = [0] * n\n    a[0] = 1\n    \n    if n == 1:\n        return a\n    \n    else:\n        \n        for i in range(2, n+1):\n            \n            a[i] = a[i//2] + a[i-(i//2)]\n        \n    return a\n",
        "num_ids": 84
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return []\n    result = [0 for _ in range(n)]\n    result[0] = 1\n    result[1] = n\n    for i in range(2, n+1):\n        result[i] = n - i\n        if i % 2 == 0:\n            result[i] += 1\n        else:\n            result[i] -= 1\n    return result\n",
        "num_ids": 97
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n==0: return []\n    if n%2==0: return [n, 2]\n    else: return [n, 3]\n",
        "num_ids": 35
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n <= 0:\n        return []\n    else:\n        first = make_a_pile(n // 2)\n        second = make_a_pile(n // 2)\n        third = make_a_pile(n // 2 + 1)\n        return [*first, *second, *third]\n",
        "num_ids": 75
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pile = []\n    while n!= 0:\n        if n % 2 == 0:\n            pile.append(n)\n            n = n//2\n        else:\n            pile.append(n)\n            n = n*3\n    return pile\n",
        "num_ids": 64
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # find the next even number\n    next_even = 0\n    for i in range(1, n+1):\n        next_even = next_even + i\n    # print the number at i\n    print(next_even)\n    # find the next odd number\n    next_odd = 0\n    for i in range(1, n+1):\n        next_odd = next_odd + 2 * i\n    print(next_odd)\n    # find the level numbers\n    level = [0]*n\n    level[0] = 0\n    level[1] = 1\n    for i in range(2, n):\n        level[i] = level[i-1] + 2 * level[i-2]\n    print(level)\n    return level\n",
        "num_ids": 180
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if n == 0 or n == 1:\n        return []\n    else:\n        return [n, n + 1]\n",
        "num_ids": 32
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return s.split(\",\")",
        "num_ids": 9
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [w.strip().split(',') for w in s.split()]\n",
        "num_ids": 21
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    words = s.split(', ')\n    \n    return words\n",
        "num_ids": 20
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if s==\"\":\n        return []\n    return s.split(\",\")\n",
        "num_ids": 21
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    return [word.strip() for word in s.split(', ')]\n",
        "num_ids": 21
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    words = s.split(\",\")\n    return words\n",
        "num_ids": 17
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return s.split(\", \")\n",
        "num_ids": 11
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # let's check if the input is a positive integer. \n    if x.isnumeric() and y.isnumeric():\n        if int(x) < int(y):\n            return int(x)\n        return int(y)\n    else:\n        return -1\n    # we've done this check in the beginning of the function. \n    # this is good to know that our function has been working. \n",
        "num_ids": 99
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if x % 2 == 0:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n    else:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n",
        "num_ids": 58
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    num = -1\n    if x < y:\n        num = x\n    else:\n        num = y\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            if num == -1:\n                num = i\n            elif num % 2 == 0 and num!= i:\n                num = num + 1\n    return num\n",
        "num_ids": 89
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    num = 0\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            num = i\n            break\n    return num\n",
        "num_ids": 40
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    num_list = []\n    for i in range(x,y+1):\n        if i%2 == 0:\n            num_list.append(i)\n",
        "num_ids": 40
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    try:\n        if x >= y:\n            return -1\n        else:\n            return x // y\n    except ZeroDivisionError:\n        return -1",
        "num_ids": 39
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    x = int(x)\n    y = int(y)\n    if x < 0 or y < 0 or x > y:\n        return -1\n    if x % 2 == 0:\n        if y % 2 == 0:\n            if x > y:\n                return x\n            else:\n                return y\n        else:\n            if x > y:\n                return x\n            else:\n                return y\n    else:\n        if y % 2 == 0:\n            if x < y:\n                return x\n            else:\n                return y\n        else:\n            if x > y:\n                return x\n            else:\n                return y\n",
        "num_ids": 152
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if x > y:\n        return choose_num(y, x)\n    else:\n        return choose_num(x, y-1)\n",
        "num_ids": 36
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = -1\n    if x == y:\n        return x\n    elif x < y:\n        return choose_num(x, y - 1)\n    else:\n        return choose_num(x - 1, y)\n",
        "num_ids": 56
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    num = x\n    while num % 2 == 0:\n        num = num / 2\n",
        "num_ids": 22
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = \"\"\n    if n <= m:\n        return f'{int(n/m)}.{(n % m).to_bytes(1, \"big\")}'\n    else:\n        result = f'{int(n/m).to_bytes(1, \"big\")}'\n        for i in range(1, m+1):\n            result += f'{int(i/m).to_bytes(1, \"big\")}'\n        return result\n",
        "num_ids": 112
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return str(bin(n + m - (n & m))[2:])",
        "num_ids": 20
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = str(bin(n)[2:].zfill(m))\n    return n\n",
        "num_ids": 23
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert n >= 0\n    assert m >= 0\n    \n    output = []\n    \n    while n >= 0:\n        rounded = round(n / 2)\n        output.append(str(rounded))\n        n = n - rounded\n    \n    while m >= 0:\n        rounded = m / 2\n        output.append(str(rounded))\n        m = m - rounded\n    \n    output = ''.join(output)\n    \n    if len(output) == 0:\n        return '0b1111'\n    elif len(output) == 1:\n        return output\n    else:\n        return output[:2] + \"0b\" + output[2:]\n",
        "num_ids": 158
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < m:\n        return \"-\"\n    result = \"\"\n    for i in range(n, m):\n        result += str(int(round(i/10) * 10)).rjust(4, \"0\")\n        if i%10!= 0:\n            result += \".\"\n    return result\n    \ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 148
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Your code here\n    res = 0\n    if n >= m:\n        res = n/m\n    else:\n        res = m/n\n    if res > n/2:\n        res = -1\n    return f'{res:b}'\n",
        "num_ids": 63
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    return format(int(round(sum(n, m) / n / m))).lstrip(\"0b\")\n",
        "num_ids": 30
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n < 0:\n        return -1\n    avg = n / m\n    rounded_avg = \"{0:b}\".format(int(avg))\n    return round(rounded_avg)\n",
        "num_ids": 51
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = int(n)\n    m = int(m)\n    if n <= m:\n        return f\"{n:b}\".replace(\"0\", \"\").replace(\"1\", \"\")\n    else:\n        return f\"{m:b}\".replace(\"0\", \"\").replace(\"1\", \"\")\n",
        "num_ids": 74
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if m == n:\n        return '0b' + str(bin(n))[2:]\n    else:\n        return '-1'\n",
        "num_ids": 36
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert isinstance(x, list), 'argument is not a list'\n    assert all(isinstance(x_i, int) for x_i in x), 'argument is not a list of integers'\n    assert len(x) % 2 == 0, 'argument is not a list of even numbers'\n    assert len(x) > 0, 'argument is not a non-zero positive number'\n    \n    res = []\n    for i in range(len(x)):\n        x_i = x[i]\n        if x_i % 2 == 0:\n            res.append(x_i)\n    return res\n",
        "num_ids": 145
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    ans = []\n    for el in x:\n        if el == 0:\n            continue\n        elif el % 10 == 0:\n            ans.append(el)\n        else:\n            break\n    return ans\n",
        "num_ids": 52
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sorted([x for x in x if x%10!= 0])\n",
        "num_ids": 19
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    return [x[i] for i in range(len(x)) if x[i] % 2 == 0]\n",
        "num_ids": 30
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    digits = [int(d) for d in str(x)]\n    return sorted(set(digits) - set([0]))\n    \ndef prime_factors(x):\n    \"\"\"Given an integer x, return a sorted list of all prime factors of x. \n    \n    Note: If x is a prime, return it.\n    \n    For example:\n    >>> prime_factors(5)\n    [2, 3]\n    >>> prime_factors(15)\n    []\n    \"\"\"\n    primes = [1, 2]\n    for i in range(3, int(math.sqrt(x)) + 1, 2):\n        if x % i == 0:\n            primes.append(i)\n            primes.append(int(x/i))\n            if primes[i-1]!= primes[i-2]:\n                primes.append(i)\n    return sorted(primes)\n    \ndef prime_factors_string(x):\n    \"\"\"Given an integer x, return a string of all prime factors of x. \n    \n    Note: If x is a prime, return it.\n    \n    For example:\n    >>> prime_factors_string(5)\n    '2, 3, 5'\n    >>> prime_factors_string(15)\n    '1, 3, 5'\n    \"\"\"\n    factor_strings = []\n    primes = [1, 2]\n    for i in range(3, int(math.sqrt(x)) + 1, 2):\n        if x % i == 0:\n            primes.append(i)\n            primes.append(int(x/i))\n            factor_strings.append(str(i))\n    return ','.join(factor_strings)\n",
        "num_ids": 414
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    digits = [int(d) for d in str(x)]\n    digits.sort(reverse=True)\n    return digits\n",
        "num_ids": 33
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    x = list(x)\n    x.sort()\n    return x\n",
        "num_ids": 19
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    x = sorted(x)\n    for n in range(len(x)):\n        if x[n] % 2 == 0:\n            if x[n] == 0:\n                x[n] = 9\n            elif x[n] == 1:\n                x[n] = 0\n",
        "num_ids": 70
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Reverse digits so numbers in list can be compared.\n    l = []\n    while x:\n        x = x[::-1]\n        l.append(x.pop())\n    \n    return l\n",
        "num_ids": 50
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    output = []\n    for i in range(0, len(x)):\n        if x[i] % 10 == 0:\n            output.append(x[i])\n    return output\n",
        "num_ids": 46
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    arr.sort()\n    #  print(arr)\n    #  print(type(arr))\n    i = 0\n    while i < len(arr):\n        if (arr[i] >= 1 and arr[i] <= 9):\n            arr[i] = \"One\"\n        else:\n            arr[i] = str(arr[i])\n        i += 1\n",
        "num_ids": 91
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not arr or len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    \n    # sort array\n    arr.sort()\n    # reverse array\n    arr.reverse()\n    \n    # split array\n    return by_length(arr[1:]) + by_length(arr[:1]) + by_length(arr[:-1])\n    \nprint(by_length(arr))\n",
        "num_ids": 106
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: modify the code to return the array with the sorted numbers\n",
        "num_ids": 18
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    arr = sorted(arr, key=lambda x: x * 10)\n    arr = reversed(arr)\n    return arr\n",
        "num_ids": 30
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Step 1: sort the array\n    arr.sort()\n    # Step 2: reverse the array\n    arr.reverse()\n    # Step 3: iterate through each element\n    return arr\n",
        "num_ids": 46
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # only length input is significant\n    if len(arr) < 1:\n        return arr\n    else:\n        res = []\n        # find the max length\n        maxLen = max(map(len, arr))\n        # create a list that will hold the values\n        temp = []\n        # add the values to the list\n        for i in range(1, maxLen+1):\n            temp.append(i)\n        # iterate over each value in the list\n        for i in arr:\n            # get the corresponding char from the list\n            char = int(i) % 10\n            # if the char is in the temp list\n            if char in temp:\n                # add the char to the temp list\n                temp.remove(char)\n                temp.append(char)\n        # for each value, add the char to the res list\n        for i in temp:\n            res.append(i)\n        return res\n    \ndef by_reverse(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n",
        "num_ids": 292
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    arr = sorted(arr)\n    out = []\n    for el in arr:\n        if el >= 1 and el <= 9:\n            out.append(str(el))\n    return out\n",
        "num_ids": 46
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Python 3.7\n    # arr = sorted(arr, reverse=True)\n    # arr = sorted(arr, key=lambda x: x * 10)\n    arr = sorted(arr, key=lambda x: x * 10)\n    res = []\n    for i in arr:\n        if i < 1 or i > 9:\n            continue\n        res.append(str(i))\n    return res\n",
        "num_ids": 96
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # solution 1\n    arr = sorted(arr, reverse=True)\n",
        "num_ids": 18
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sorted_arr = sorted(arr)\n    reverse_arr = sorted_arr[::-1]\n    result = []\n    for i in range(0, len(sorted_arr)):\n        if sorted_arr[i] >= 1 and sorted_arr[i] <= 9:\n            result.append(str(sorted_arr[i]))\n        else:\n            result.append(str(sorted_arr[i]))\n    return result\n",
        "num_ids": 109
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    fact_sum = []\n    if n == 1:\n        fact_sum.append(1)\n    else:\n        for i in range(1, n+1):\n            fact_sum.append(i*factorial(i-1))\n    return fact_sum\n",
        "num_ids": 65
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    factorials = [1]\n    for i in range(1, n):\n        factorials.append(factorials[i - 1] * i)\n",
        "num_ids": 40
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    factorial = []\n    n = n-1\n    i = 1\n    while(i <= n):\n        factorial.append(i)\n        i = i * factorial[i-1]\n    return factorial\n",
        "num_ids": 54
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    factorial = [1]\n    for i in range(2, n):\n        factorial.append(factorial[i-1] * i)\n    return factorial\n    #return list(map(lambda x: 1 if x % 2 == 0 else x * factorial[x-2], range(2, n)))\n",
        "num_ids": 76
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Problem statement\n    # Implement the function f with recursion\n",
        "num_ids": 16
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    fact = [1]\n    for i in range(1, n+1):\n        fact.append(i*fact[i-1])\n    return fact\n    \ndef run():\n    n = int(input())\n    print(f(n))\n",
        "num_ids": 61
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    factorial_list = [1]\n    for i in range(2, n+1):\n        factorial_list.append(i*factorial_list[i-1])\n    return factorial_list\n    \n",
        "num_ids": 53
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    factorial = [1]\n    for i in range(2, n+1):\n        factorial.append(i*factorial[i-1])\n    return factorial",
        "num_ids": 42
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    list_of_factorial = []\n    for i in range(1, n + 1):\n        list_of_factorial.append(i * factorial(i))\n    return list_of_factorial\n",
        "num_ids": 51
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = []\n    for i in range(1, n + 1):\n        res.append(i * factorial(i))\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not n:\n        return ()\n    \n    even, odd = 0, 0\n    if n%2 == 0:\n        even, odd = 1, 0\n    else:\n        even, odd = 0, 1\n        \n    n = n//2\n    \n    if n <= 1:\n        return tuple((even, odd))\n",
        "num_ids": 80
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # 1.\n    # 2.\n    # 3.\n    odd, even = 0, 0\n    for num in range(1, n + 1):\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "num_ids": 69
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even_odd = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            even_odd.append(i - 1)\n    return (len(even_odd), *even_odd)\n",
        "num_ids": 71
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even, odd = 0, 0\n    for i in range(1, n+1):\n        # print(f\"odd {i}, even: {odd}, even: {even}\")\n        if i % 2 == 0:\n            odd += 1\n            if odd > 2:\n                return None\n        else:\n            even += 1\n            if even > 2:\n                return None\n    return (odd, even)\n",
        "num_ids": 98
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 1:\n        return None\n    palindrome_list = []\n    for i in range(1, n):\n        temp = str(i)\n        if temp[::-1] == temp:\n            palindrome_list.append(i)\n",
        "num_ids": 64
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def odd_even_palindrome(n):\n        \"\"\"\n        Given a positive integer n, return a tuple that has the number of even and odd\n        integer palindromes that fall within the range(1, n), inclusive.\n",
        "num_ids": 55
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return (even_odd_palindrome(n // 2), even_odd_palindrome(n // 2 + 1))\n",
        "num_ids": 31
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Test each number to see if it's even or odd\n    # Create a reversed list of the palindrome.\n    palindromes = []\n    reverse_palindrome = []\n",
        "num_ids": 45
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even_odd = []\n    if n < 3:\n        return\n",
        "num_ids": 18
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even_odd = [1, 2]\n    \n    for i in range(3, n+1):\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            odd_even_palindrome = i // 2\n            even_odd.append(odd_even_palindrome)\n    \n    even_odd.sort()\n    \n    return even_odd\n",
        "num_ids": 97
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n        else:\n            count += i // 10\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for i in arr:\n        if i >= 0:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len([i for i in arr if i > 0])\n",
        "num_ids": 16
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # writing a variable to return\n    n = 0\n    # iterating through the array\n    for i in arr:\n        # checking if i has a sign\n        if i > 0:\n            # incrementing the n\n            n += 1\n        else:\n            # if the value of the sign is negative\n            # the sign will be negative\n            # but if the value of the sign is positive\n            # the sign will be positive\n            n += i\n            # if the value of the sign is negative and the value of the sign is positive\n            # then it should be positive\n            # so the sign will not be negative and the value of the sign will be positive\n            # so the value of the sign will be positive\n            if n > 0:\n                # if the value is positive\n                # then the sign will be positive and the value will be positive\n                # so it will be positive\n                # so the value will be positive\n                # so the sign will not be negative and the value will be positive\n                # so the value of the sign will not be negative\n                # so the sign will be positive\n                # so the value will be positive\n                n -= 1\n            else:\n                # if the value is negative\n                # then the sign will be negative and the value will be negative\n                # so it will be negative\n                # so the value will be negative\n                # so the sign will not be positive and the value will be negative\n                # so the value of the sign will be negative\n                # so the value will be negative\n                # so the sign will be positive\n                # so the value will be positive\n                # so the sign will not be negative and the value will be negative\n                # so the value of the sign will be negative\n                # so the value will be negative\n                # so the sign will be positive\n                # so the value will be positive\n                # so the sign will not be positive and the value will be negative\n                n += 1\n    return n\n",
        "num_ids": 443
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return len([x for x in arr if x > 0])\n",
        "num_ids": 16
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = 0\n    for i in arr:\n        if i > 0:\n            res += 1\n    return res",
        "num_ids": 28
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    sum_digits = 0\n    for num in arr:\n        sum_digits += num\n        count += sum_digits >= 10\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for x in arr:\n        if x > 0:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #write your code here\n    if len(arr) == 0:\n        return True\n    arr.sort()\n    for i in range(len(arr)):\n        if i > 0 and arr[i] > arr[i-1]:\n            return False\n        else:\n            arr[i] = arr[i-1]\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Code here\n    if len(arr) == 0:\n        return True\n    \n    if len(arr) > 0:\n        for i in range(len(arr)):\n            arr[i] = arr[i] + 1\n            arr[0] = arr[0] - 1\n            if arr[i] > 0:\n                return False\n        return True\n    return False\n",
        "num_ids": 92
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    arr.sort()\n    \n    for i in range(len(arr)):\n        if(i==0 or arr[i]!=arr[i-1]):\n            return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # start with empty array\n    if len(arr) == 0:\n        return True\n    # begin swapping\n    for i in range(len(arr)):\n        # get the current element\n        current_element = arr[i]\n        # get the next element\n        next_element = arr[i+1]\n        # check if this element is lower than the previous one\n        if next_element < current_element:\n            # swap these two elements\n            arr[i], arr[i+1] = next_element, current_element\n            # swap the rest\n            i = i + 2\n    # check if the array is sorted in non-decreasing order\n    if arr[0] > arr[-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 180
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    N = len(arr)\n    min_index = N-1\n    max_index = 0\n    \n    for i in range(0,N):\n        if arr[i] < arr[min_index]:\n            min_index = i\n        elif arr[i] > arr[max_index]:\n            max_index = i\n    \n    if max_index!= min_index and (max_index-min_index)%2 == 0:\n        return True\n    else:\n        return False\n    \ndef reverse_string(string):\n    \"\"\"Reverse a string. The string is made by using reverse() function.\n    \n    For Example:\n    \n    reversing('hello') ==> 'olleh'\n    \n    \"\"\"\n    \n    return string[::-1]\n",
        "num_ids": 192
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not arr:\n        return False\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            return False\n        elif arr[i] > arr[i + 1]:\n            arr[i + 1] = arr[i]\n            arr[i] = arr[i + 1]\n            count += 1\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            return False\n    if count > 1:\n        return False\n    else:\n        return True\n",
        "num_ids": 145
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    count=0\n    for i in range(len(arr)-1):\n        if arr[i+1]>arr[i]:\n            count+=1\n    if count>=2:\n        return False\n    for i in range(len(arr)-2):\n        if arr[i+1]>arr[i] and arr[i+2]>arr[i]:\n            count+=1\n        if count>=2:\n            return False\n    return True\n",
        "num_ids": 112
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n    if arr == []:\n        return True\n    \n    left_shift = 1\n    right_shift = 1\n    for i in range(1,len(arr)):\n        if arr[i-1] < arr[i]:\n            left_shift += 1\n        if arr[i-1] > arr[i]:\n            right_shift += 1\n    \n    # if left_shift > right_shift:\n    #     return False\n    # else:\n    #     return True\n    \n    return False\n    \n",
        "num_ids": 129
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return True\n    max = arr[0]\n    for i in range(len(arr)):\n        if arr[i]>=max:\n            return False\n        max = max + arr[i]\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if lst1 is None or lst2 is None:\n        return \"NO\"\n    lst1.sort()\n    lst2.sort()\n    if lst1[0]!= lst2[0]:\n        return \"NO\"\n    else:\n        if lst1[0] % 2!= lst2[0] % 2:\n            return \"NO\"\n        else:\n            return \"YES\"\n    # return \"NO\"\n",
        "num_ids": 110
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # create dictionary of number to the number of times the element is duplicated\n    # then map it to a list of all the number to its duplicated count\n    # then remove the duplicate number from the list of the number of duplicated\n    # elements and return \"YES\" if all the elements of lst1 are even, and \"NO\" otherwise\n    # This is a cleaner way to solve this problem\n",
        "num_ids": 90
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    lst1.sort()\n    lst2.sort()\n    lst3 = [lst1[i] + lst2[i] for i in range(len(lst1))]\n    print(lst3)\n    if lst1[-1] == lst2[-1] and lst1[0]!= lst2[0]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "num_ids": 106
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = list(lst1)\n    for el in lst2:\n        if result[el] % 2 == 0:\n            result[el] *= 2\n        else:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 57
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    new_lst1 = [0] * len(lst1)\n    new_lst2 = [0] * len(lst2)\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            new_lst1[i] = lst1[i]\n        else:\n            new_lst1[i] = new_lst2[i]\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            new_lst2[i] = lst2[i]\n        else:\n            new_lst2[i] = new_lst1[i]\n    for i in range(len(lst1)):\n        for j in range(i + 1, len(lst1)):\n            if new_lst1[i] < new_lst1[j] and new_lst2[i] > new_lst2[j]:\n                new_lst1[i] = new_lst2[i]\n                new_lst2[i] = new_lst1[j]\n    if len(new_lst1) == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 311
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if lst1 and lst2:\n        if lst1[0] % 2 == 0 and lst2[0] % 2 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "num_ids": 63
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Base case for loop\n    if len(lst1) == 0:\n        return \"NO\"\n",
        "num_ids": 26
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: Write your code here\n    # The idea here is you will be trying to make the lst1,lst2 separate lists of even numbers\n    # if the length of lst1 is even and lst2 is odd, if the lst2 has no even numbers in it,\n    # then it is possible to exchange lst1 to make the elements of lst2 even.\n    # If lst2 has no even numbers in it, then the lst1 is not possible.\n    # HINT: You will be given an idea of how to make an empty list.\n    if len(lst1) % 2 == 0 and len(lst2) % 2!= 0:\n        return \"NO\"\n    if len(lst2) % 2!= 0:\n        return \"NO\"\n",
        "num_ids": 186
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    if lst1 == lst2:\n        return \"YES\"\n",
        "num_ids": 40
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    letters = list(test.lower())\n    if len(letters) == 1:\n        return {letters[0]: letters.count(letters[0])}\n    else:\n        occurrence_dict = dict()\n        for letter in letters:\n            if letter in occurrence_dict:\n                occurrence_dict[letter] += 1\n            else:\n                occurrence_dict[letter] = 1\n        return {k:v for k,v in occurrence_dict.items() if v == max(occurrence_dict.values())}\n",
        "num_ids": 124
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    occurence_counts = {}\n    for letter in test:\n        occurence_counts[letter] = test.count(letter)\n    return occurence_counts\n",
        "num_ids": 45
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    test = list(test.lower().split())\n    \n    res = {}\n    for x in test:\n        x = list(x)\n        x.sort()\n        res[x[0]] = 0\n        for i in x:\n            if res[i] > 0:\n                res[i] += 1\n    \n    return res\n",
        "num_ids": 84
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    counts = {}\n    for char in test:\n        counts[char] = counts.get(char, 0) + 1\n    return counts\n",
        "num_ids": 36
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    letter_counts = {}\n    for letter in test:\n        if letter not in letter_counts:\n            letter_counts[letter] = 0\n        letter_counts[letter] += 1\n    return letter_counts\n",
        "num_ids": 56
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO\n    d = {}\n    for i in test.lower():\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n",
        "num_ids": 51
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    letters = {}\n    for char in test:\n        if char not in letters:\n            letters[char] = 1\n        else:\n            letters[char] += 1\n    return letters\n",
        "num_ids": 45
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not test:\n        return {}\n    # find all the letters present in test\n    letters = [l for l in test.lower() if l in 'abcdefghijklmnopqrstuvwxyz']\n    # remove the spaces from letters\n    new_letters = [l for l in letters if not l.isspace()]\n    # sort it by count\n    new_letters.sort(key=lambda x: -len(x))\n    # return dictionary\n    return {l: len(new_letters) for l in new_letters}",
        "num_ids": 129
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    letter = {}\n",
        "num_ids": 29
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    letters = test.lower()\n    \n    if len(letters) == 0:\n        return {}\n    \n    dic = {}\n    \n    for letter in letters:\n        if letter in dic:\n            dic[letter] += 1\n        else:\n            dic[letter] = 1\n    \n    return dic\n    \n    pass\n",
        "num_ids": 86
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    global ans\n    if len(s) == 0:\n        ans = (s, False)\n        return\n    \n    if s[0] == c:\n        reverse_delete(s[1:], c)\n    else:\n        reverse_delete(s[1:], c + s[0])\n",
        "num_ids": 73
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def reverse_string(s,c):\n        if len(s) == 0:\n            return False\n        else:\n            return s[::-1] + reverse_string(s[1:],c)\n    def check(s,c):\n        if len(s) == 0:\n            return True\n        if s[0] == c:\n            return check(s[1:],c)\n        return False\n    return reverse_string(s,c),check(s,c)\n",
        "num_ids": 117
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    rev=''\n    for i in s:\n        rev+=i\n    if rev==c:\n        return (rev,'True')\n    else:\n        return (rev,'False')\n",
        "num_ids": 45
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if c in s:\n        return \"True\", True\n    else:\n        return \"False\", False\n",
        "num_ids": 26
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def palindrome(s):\n        return s == s[::-1]\n    \n    def reverse_s(s,c):\n        for i in range(len(s)):\n            if c == s[i]:\n                return s[:i]+s[i+1:]\n        return None\n    \n    def reverse_c(c,s,i):\n        if i == len(s):\n            return c\n        if c == s[i]:\n            return c\n        return reverse_c(c,s,i+1)\n    \n    def check(s,c):\n        s,c,_,_,_ = str(s),str(c),reverse_s(s,c),reverse_c(c,s,0),reverse_c(c,s,1)\n        return s == s[::-1] and palindrome(s) and c!= c[::-1]\n    \n    result = check(s,c)\n    return result and (s,result)\n",
        "num_ids": 238
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Time Complexity: O(n^2)\n    # Space Complexity: O(n)\n",
        "num_ids": 25
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(s)!= len(c):\n        return (None,False)\n    result = ''\n    for i in s:\n        result += i\n    if result == c:\n        return (result,True)\n    else:\n        return (result,False)\n",
        "num_ids": 65
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    str_i,str_j = 0,len(s)-1\n    res = []\n    while str_i < str_j:\n        while str_i < str_j and s[str_i] == c:\n            str_i+=1\n        while str_i < str_j and s[str_j] == c:\n            str_j-=1\n        if str_i >= str_j:\n            break\n        res.append(s[str_i])\n        str_i += 1\n        str_j -= 1\n    if str_i == str_j:\n        return (s[:str_i] + s[str_j:],True)\n    else:\n        return (s[:str_i] + s[str_j:str_i] + s[str_j+1:],False)\n",
        "num_ids": 199
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if s == c:\n        return (\"\",True)\n    elif s== c[::-1]:\n        return (\"\",False)\n    else:\n        return (\"\",False)\n",
        "num_ids": 45
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(s)==len(c):\n        result = (s,False)\n    else:\n        result = (s,True)\n",
        "num_ids": 35
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(lst) < 2:\n        return [lst[0]]\n    elif lst[0].isdigit():\n        return odd_count(lst[1:]) + odd_count(lst[0:])\n    else:\n        return odd_count(lst[0:])\n",
        "num_ids": 75
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return ([\"the number of odd elements \" + str(len(lst)) + \" the str4ng \" + str(len(lst)) + \" of the \" + str(len(lst)) + \" input.\"])\n",
        "num_ids": 53
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return str_replace(lst, \"the number of odd elements \", \"the number of odd elements \", \"the number of odd elements \")\n",
        "num_ids": 33
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    output = []\n    def odd_count_helper(lst, i):\n        if not lst:\n            return 1\n        s = 0\n        for x in lst[i]:\n            if x.isdigit():\n                s += int(x)\n        return s // 2\n    for i in range(len(lst)):\n        if not lst[i]:\n            output.append(lst[i])\n        else:\n            output.append(\"the number of odd elements \" + str(odd_count_helper(lst, i)))\n    return output\n",
        "num_ids": 138
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst_count = {}\n    result = []\n    for l in lst:\n        for i in l:\n            if i in lst_count:\n                lst_count[i] += 1\n            else:\n                lst_count[i] = 1\n    for k,v in lst_count.items():\n        if v % 2!= 0:\n            result.append(f'{v}n the {k} of the {v}nput.')\n    return result\n",
        "num_ids": 118
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst = list(filter(lambda x: x.isdigit(), lst))\n    return len(list(filter(lambda x: x.isdigit(), lst)))\n",
        "num_ids": 43
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [str(len(str(n))) for n in lst",
        "num_ids": 17
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    for x in lst:\n        str_x = str(x)\n        count = 0\n        for i in range(len(str_x)):\n            if str_x[i]!= \"0\":\n                count += 1\n        result.append(count)\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    \n    # Process the string\n    for s in lst:\n        new_lst = s.replace(' ','')\n        new_lst = new_lst.replace('[','')\n        new_lst = new_lst.replace(']','')\n        new_lst = new_lst.replace('\"','')\n        new_lst = new_lst.replace('1234567','123')\n        new_lst = new_lst.replace('-','')\n        new_lst = new_lst.replace('1','1')\n        new_lst = new_lst.replace('8','8')\n        new_lst = new_lst.replace('5','5')\n        new_lst = new_lst.replace('4','4')\n        new_lst = new_lst.replace('3','3')\n        \n        # Only count odd elements\n        if new_lst[0] in ['2','5','4']:\n            result.append(str(len(new_lst)))\n        else:\n            result.append(str(len(new_lst)))\n    \n    return result\n",
        "num_ids": 286
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    odds = []\n    for i in lst:\n        if '0' in i:\n            continue\n        elif len(i)%2==0:\n            if '0' not in i:\n                odds.append(i)\n    return odds\n",
        "num_ids": 65
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # base case\n    if len(nums) == 0:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(nums) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    if len(nums) == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def sum_subarray(nums, n, start, end):\n        if start == end:\n            return nums[start]\n        s = nums[start]\n        if s > 0:\n            return max(s + sum_subarray(nums, n, start + 1, end), s)\n        return s\n    \n    if len(nums) == 0:\n        return 0\n    \n    min_sub_sum = float('inf')\n    for n in range(len(nums)):\n        min_sub_sum = min(min_sub_sum, nums[n] + sum_subarray(nums, len(nums), n, n))\n    return min_sub_sum\n",
        "num_ids": 169
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Sliding window\n    i = 0\n    current = -1\n    res = 0\n    sum = 0\n    for j in range(len(nums)):\n        while i < len(nums) and sum + nums[i] <= nums[j]:\n            sum += nums[i]\n            i += 1\n        current = j if sum + nums[j] >= nums[i] else current\n        if i == len(nums) or sum + nums[i] < nums[j]:\n            sum = nums[j]\n        res = max(res, sum)\n    return res\n",
        "num_ids": 147
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    target = 0\n    minSubArraySum = 0\n    for i in range(len(nums)):\n        target += nums[i]\n        # nums[i] is non-negative\n        if target < 0:\n            target = 0\n        # if target < 0, the minimum sub array sum is the required sum\n        # so we update it to include the number at i\n        minSubArraySum = max(target - nums[i], minSubArraySum)\n    return minSubArraySum\n",
        "num_ids": 118
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not nums:\n        return 0\n    \n    # if array is empty, then return the minimum\n    if len(nums) == 0:\n        return 0\n        \n    curr_min = float('inf')\n    # loop through array, check if the min is same as the min in the previous sub array\n    for i in range(len(nums)):\n        curr_min = min(nums[i], curr_min + nums[i])\n        \n    return curr_min\n    \n",
        "num_ids": 123
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum = 0\n    min_sum = sys.maxsize\n    for num in nums:\n        sum += num\n        while sum >= 0 and sum + num <= len(nums):\n            min_sum = min(min_sum, sum)\n            sum -= num\n    return min_sum if min_sum!= sys.maxsize else -1\n",
        "num_ids": 83
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    min_sub_sum = 0\n    \n    for i in range(0, len(nums)):\n        min_sub_sum += nums[i]\n        if min_sub_sum < 0:\n            min_sub_sum = 0\n            \n        if min_sub_sum == 0:\n            return i + 1\n    \n    return -1\n",
        "num_ids": 86
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    nums.sort()\n    return sum([nums[i] for i in range(len(nums)) if nums[i]>0])\n",
        "num_ids": 37
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    from sys import maxsize\n    def dfs(grid, count):\n        import math\n        # if all wells are filled\n        if count == len(grid):\n            return count\n        # if enough buckets are not filled, just do nothing\n        if sum(grid[0]) == capacity:\n            return 0\n",
        "num_ids": 72
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # b_l is a number of buckets, which is the number of rows.\n    b_l = math.ceil(len(grid) / 2)\n    # b_c is a number of buckets, which is the number of columns.\n    b_c = math.ceil(len(grid[0]) / 2)\n    # bucket_capacity is a number of buckets, which represents the capacity of a single bucket.\n    bucket_capacity = int(capacity / (b_l * b_c))\n    # a_l is the number of buckets, which is the number of columns.\n    a_l = math.ceil(len(grid[0]) / (b_l * b_c))\n    \n    # b_l is the number of buckets, which is the number of rows.\n    # b_c is the number of buckets, which is the number of columns.\n    b_l = a_l\n    # b_c is the number of buckets, which is the number of columns.\n    b_c = a_l\n    \n    # a_l is the number of buckets, which is the number of rows.\n    # b_l is the number of buckets, which is the number of columns.\n    a_l = b_l\n    # b_c is the number of buckets, which is the number of columns.\n    b_c = b_l\n    # b_l is the number of buckets, which is the number of rows.\n    b_l = b_c\n    # a_l is the number of buckets, which is the number of rows.\n    # b_l is the number of buckets, which is the number of columns.\n    a_l = a_l\n    # b_c is the number of buckets, which is the number of columns.\n    b_c = b_c\n    \n    # table is a list of all buckets.\n    table = []\n    # table is a list of buckets which are a_l(b_l) + a_l(b_l) +... + a_l(b_l) + a_l(b_l).\n    # table is a list of buckets which are b_l(b_l) + b_l(b_l) +... + b_l(b_l).\n    # table is a list of buckets which are a_l(b_l) +... + a_l(b_l).\n    \n    # print(\"Grid: \")\n    # for i in range(len(grid)):\n    #     print(\"a_l: \", a_l, \"a_l(b_l)\", a_l * b_l, sep=\" \")\n    #     print(\"b_l: \", b_l, \"b_l(b_l)\", b_l * b_l, sep=\" \")\n    #     print(\"b_c: \", b_c, \"b_c(b_c)\", b_c * b_c, sep=\" \")\n    #     print(\"b_l(a_l): \", b_l, \"b_l(a_l)\", b_l * a_l, sep=\" \")\n    #     print(\"b_c(a_l): \", b_c, \"b_c(a_l)\", b_c * a_l, sep=\" \")\n    #     print(\"b_l(b_l): \", b_l, \"b_l(b_l)\", b_l * b_l, sep=\" \")\n    #     print(\"b_c(b_l): \", b_c, \"b_c(b_l)\", b_c * b_l, sep=\" \")\n    #     print(\"b_l(a_l + b_l): \", b_l + a_l, \"b_l(a_l)\", b_l * a_l, sep=\" \")\n    #     print(\"b_c(a_l + b_l): \", b_c + a_l, \"b_c(a_l)\", b_c * a_l, sep=\" \")\n    #     print(\"b_l(b_l + a_l): \", b_l + b_l, \"b_l(b_l)\", b_l * b_l, sep=\" \")\n    #     print(\"b_c(b_l + a_l): \", b",
        "num_ids": 1013
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # 1. 1.\n    # 2.\n    def fill_bucket(grid, bucket_capacity):\n        if len(grid) == 1:\n            return 0\n        \n        if len(grid[0])!= 1:\n            return 0\n        \n        # start_point = 0\n        # end_point = len(grid[0]) - 1\n        \n        # if end_point < 0:\n        #     return 0\n        \n        # # if end_point < start_point:\n        # #     return 0\n        \n        # min_element = grid[start_point][0]\n        # res = [0 for _ in range(bucket_capacity)]\n        # start = end = 0\n        # while start < end_point:\n        #     if grid[start][0] <= min_element:\n        #         if start == end_point:\n        #             res[start] = 0\n        #             break\n        #         else:\n        #             res[start] = 0\n        #             start += 1\n        #     elif grid[start][0] <= min_element + 1:\n        #         start += 1\n        #     else:\n        #         res[end] = end_point - start\n        #         end = end_point\n        #         start = 0\n        # return res\n        \n        if grid[0][0] <= min(grid[:,0]) and grid[0][0] <= min(grid[0,:]):\n            return 0\n        \n        # \ud604\uc7ac \uc704\uce58\uc5d0 \uc788\ub294 \uacf3\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uacf3\uc758 \ubc94\uc704\ub97c \uad6c\ud55c\ub2e4.\n        max_left = fill_bucket(grid[0:2,0:1], bucket_capacity)\n        max_right = fill_bucket(grid[0:2,1:], bucket_capacity)\n        max_up = fill_bucket(grid[1:,1:], bucket_capacity)\n        max_down = fill_bucket(grid[1:,0:1], bucket_capacity)\n        \n        # \ud604\uc7ac \uc704\uce58\uc5d0 \uc788\ub294 \uacf3\uc758 \ucd5c\ub300 \uc138\ub85c \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # \uac00\uc7a5 \uc791\uc740 \uacf3\uc758 \ucd5c\ub300 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        max_height = max(grid[0][1:], grid[:,1:])\n        \n        # \uac00\uc7a5 \uc791\uc740 \uacf3\uc758 \ud06c\uae30\ub97c \uad6c\ud55c\ub2e4.\n        max_length = max(max_left, max_right, max_up, max_down)\n        \n        # \uac00\uc7a5 \uc791\uc740 \uacf3\uc758 \uac00\uaca9\uc744 \uad6c\ud55c\ub2e4.\n        # \uc774 \uacf3\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uac00\uaca9\uc5d0 \uc788\ub294 \uacf3\uc758 \uac00\uaca9\uc744 \ucd5c\uc18c\uac12\uc73c\ub85c \uac00\uc9c0\uace0 \uc788\ub294 \uac00\uaca9\uc744 \ub9cc\ub4e0\ub2e4.\n        max_balance = max(max_left + max_right + max_up + max_down, max_height)\n        \n        # \uac00\uc7a5 \uc791\uc740 \uacf3\uc758 \ucd5c\ub300 \ub108\ube44\ub97c \uad6c\ud55c\ub2e4.\n        # \uc774 \uacf3\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \ub108\ube44\ub97c \uad6c\ud55c\ub2e4.\n        max_width = max(max_left, max_right)\n        \n        # \uac00\uc7a5 \uc791",
        "num_ids": 1010
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def handle_row(grid, capacity):\n        \"\"\"\n        helper function that handles the rows, according to bucket_capacity\n        \"\"\"\n        for i in range(len(grid)):\n            if (len(grid[i]) > capacity):\n                # if the current row has water\n                # then it can be filled\n                grid[i] = grid[i][:capacity]\n                grid[i] = grid[i][capacity:]\n                break\n        return grid\n",
        "num_ids": 109
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # 1. DFS\n    #     dfs(grid, i, j)\n    # 2. BFS\n    #     dfs(grid, i, j)\n    # 3. BFS using queue\n    #     dfs(grid, i, j)\n    # 4. BFS using stack\n    #     dfs(grid, i, j)\n    # 5. BFS using memoization\n    #     dfs(grid, i, j)\n    \n    from collections import deque\n    queue = deque()\n    queue.append((i, j))\n    \n    # dfs\n    def dfs(grid, i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n            return\n        \n        grid[i][j] = 0\n        dfs(grid, i+1, j)\n        dfs(grid, i-1, j)\n        dfs(grid, i, j+1)\n        dfs(grid, i, j-1)\n    \n    # bfs\n    def bfs(grid, i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n            return\n        \n        queue.append((i, j))\n        \n        while queue:\n            i, j = queue.popleft()\n            for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1:\n                    grid[x][y] = 0\n                    queue.append((x, y))\n    \n    # bfs using queue\n    def bfs_use_queue(grid, i, j):\n        queue = deque()\n        queue.append((i, j))\n        \n        while queue:\n            i, j = queue.popleft()\n            for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1:\n                    grid[x][y] = 0\n                    queue.append((x, y))\n    \n    # bfs using stack\n    def bfs_use_stack(grid, i, j):\n        stack = []\n        stack.append((i, j))\n        \n        while stack:\n            i, j = stack.pop()\n            for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1:\n                    grid[x][y] = 0\n                    stack.append((x, y))\n                    \n    # bfs using memoization\n    def bfs_use_memoization(grid, i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n            return\n        \n        grid[i][j] = 0\n        \n        dfs(grid, i+1, j)\n        dfs(grid, i-1, j)\n        dfs(grid, i, j+1)\n        dfs(grid, i, j-1)\n        \n    # return\n    total = 0\n    \n    # BFS\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                bfs(grid, i, j)\n                total += 1\n                \n    # BFS using queue\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                bfs_use_queue(grid, i, j)\n                total += 1\n                \n    # BFS using stack\n    for i in range(len(grid)):",
        "num_ids": 1019
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    def count(x,y,x_s,y_s,bucket_capacity,grid):\n        \"\"\"\n        x and y are integers in the grid\n        \"\"\"\n        if grid[x][y]==1:\n            return 0\n",
        "num_ids": 59
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    rows, columns = len(grid), len(grid[0])\n    total_buckets = math.ceil(rows * columns / capacity)\n    \n    return total_buckets\n",
        "num_ids": 44
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(grid)\n    water_cnt = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                break\n            if (i+1)%2 == 0 and (j+1)%2 == 0:\n                # water_cnt = water_cnt + 1 if grid[i][j] == 1 else -1\n                grid[i][j] = 1\n                water_cnt += 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                return 0\n    return water_cnt\n",
        "num_ids": 158
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    from heapq import *\n    \n    rows = len(grid)\n    columns = len(grid[0])\n",
        "num_ids": 31
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(grid.length):\n        for j in range(grid.length):\n            if grid[i][j] == 0:\n                grid[i][j] = capacity\n                break\n            elif grid[i][j] > capacity:\n                grid[i][j] = capacity\n                break\n    bucket_capacity = 1\n    for i in range(grid.length):\n        for j in range(grid.length):\n            if grid[i][j] > 0:\n                bucket_capacity *= grid[i][j]\n    return math.factorial(bucket_capacity)\n",
        "num_ids": 143
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    length = len(arr)\n    for i in range(length):\n        if arr[i] == 0:\n            arr[i], arr[-1] = arr[-1], arr[i]\n    for j in range(length-1, -1, -1):\n        if arr[j] == 0:\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n",
        "num_ids": 103
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    arr.sort()\n    return ar",
        "num_ids": 10
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Hint: the count can be in binary form, and the count can be sorted in\n    # descending order.\n    # If the count cannot be sorted in ascending order, return the original array.\n    count = 0\n    # The smallest number we need to check.\n    index_smallest = 0\n    # The largest number we need to check.\n    index_largest = len(arr)-1\n    while index_smallest < index_largest:\n        # Decrement the index by 1 if it is not a middle point.\n        index_smallest += 1 if arr[index_smallest] % 2!= 0 else -1\n        index_largest -= 1 if arr[index_largest] % 2!= 0 else -1\n        # Check if the count is greater than the smallest number.\n        if count > index_smallest:\n            # Check if the count is in descending order.\n            if arr[index_largest] < arr[index_smallest]:\n                # Swap the numbers and start the next iteration.\n                arr[index_smallest], arr[index_largest] = arr[index_largest], arr[index_smallest]\n                count -= 1\n                index_smallest = index_smallest + 1\n            # Stop if count is 1.\n            else:\n                # Return the original array.\n                return arr\n        # Check if the count is smaller than the largest number.\n        elif count < index_largest:\n            # Swap the numbers and start the next iteration.\n            arr[index_largest], arr[index_smallest] = arr[index_smallest], arr[index_largest]\n            count += 1\n            index_smallest = index_smallest - 1\n    # Return the original array.\n    return arr\n",
        "num_ids": 399
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = []\n    ones = [10]\n    for num in arr:\n        if num == 1:\n            ones.append(ones[-1] + 1)\n        else:\n            res.append(ones.pop())\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # number of ones in binary number\n    n = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            n = n + 1\n    # sort based on number of ones in binary\n    for i in range(0, len(arr)):\n        arr[i] = n % 2\n        n = n // 2\n    return ar",
        "num_ids": 89
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def rec_rec(idx, arr, sort):\n        if idx >= len(arr):\n            return\n        if idx < 0:\n            sort(arr)\n            sort_rec(idx-1, arr, sort)\n        sort(arr[idx])\n        sort_rec(idx-1, arr, sort)\n    rec_rec(0, arr, sorted)\n",
        "num_ids": 93
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    arr.sort()\n    return arr\n",
        "num_ids": 11
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Here is the worst case:\n    # arr = [1, 5, 2, 3, 4]\n    # [1, 2, 3, 4, 5]\n    # [5, 2, 3, 4, 1]\n    # [1, 2, 3, 4, 5]\n    # [1, 2, 3, 4, 5]\n",
        "num_ids": 82
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l = []\n    for i in arr:\n        while i!= 0:\n            i, p = divmod(i, 2)\n            l.append(p)\n    l.sort()\n    l.reverse()\n    return l\n",
        "num_ids": 58
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    arr.sort()\n    l = 0\n    r = len(arr)-1\n    while l < r:\n        if (arr[l] & arr[r]) == 0:\n            arr[l], arr[r] = arr[r], arr[l]\n            r -= 1\n        else:\n            l += 1\n    return arr\n",
        "num_ids": 81
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return_list = []\n    lst_word = []\n    if n == 0:\n        return_list = []\n    else:\n        for word in s:\n            for i in range(len(word)-n+1):\n                if word[i:i+n] not in lst_word:\n                    lst_word.append(word[i:i+n])\n    return return_list\n",
        "num_ids": 97
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(s) == 0:\n        return []\n    if n == 0:\n        return []\n    \n    # Order the words in a list alphabetical\n    # and with spaces added to the end\n    return sorted(list(set([word for word in s.split(\" \")\n                                  if len(word) >= n])))\n",
        "num_ids": 80
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if s == \"\":\n        return []\n    \n    def words(string):\n        result = []\n        for i in range(len(string)):\n            for letter in string:\n                if letter not in \"aeiouAEIOU\":\n                    result.append(letter)\n        return result\n",
        "num_ids": 71
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    my_list = []\n    for i in range(0, n):\n        my_list = my_list + s.split()\n    return my_list\n",
        "num_ids": 39
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if s == \"\":\n        return []\n",
        "num_ids": 14
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if s == \"\":\n        return []\n    n = int(n)\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    result = []\n    for c in s:\n        if c not in vowels:\n            result.append(c)\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Check if string is empty\n    if len(s) == 0:\n        return []\n",
        "num_ids": 23
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # First, consider the case where the input string is empty\n    if len(s) == 0:\n        return []\n    \n    # Return the list of all words from the string s that contain exactly n consonants\n    def is_consonant(s):\n        return all(c in string.ascii_letters for c in s)\n    \n    # If the string s is empty, return an empty list\n    if len(s) == 0:\n        return []\n    \n    # Create a dictionary where key is the string s and value is a list of all its words\n    s_dict = {}\n    for word in s.split():\n        # If the word is not in the dictionary, add the word to it\n        if word not in s_dict:\n            s_dict[word] = [word]\n        else:\n            # Add the word to the list of words with a single occurrence\n            s_dict[word].append(word)\n    \n    # Create a list of all the keys that contain exactly n consonants\n    n_consonants = set()\n    for key in s_dict:\n        if is_consonant(key) and len(key) <= n:\n            n_consonants.add(key)\n    \n    # Return the list of all words in the dictionary\n    return list(s_dict[k] for k in n_consonants)\n    ",
        "num_ids": 324
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    word_list = []\n    if s == \"\":\n        return word_list\n    for i in range(len(s)):\n        if s[i].lower() not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            word_list = word_list + select_words(s[i+1:], n)\n    return word_list\n",
        "num_ids": 104
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels_beginning_vowel = \"aeiou\"\n    vowels_ending_vowel = \"AEIOU\"\n    #Find the closest vowel from the left side of the word\n    #If there's no closest vowel, return empty string\n    if len(word) == 1:\n        return \"\"\n    #Else find the closest vowel from the right side of the word\n    else:\n        left_vowel_index = word.find(vowels_beginning_vowel)\n        right_vowel_index = word.find(vowels_ending_vowel, left_vowel_index + 1)\n        #If we find the closest vowel, return the word\n        if right_vowel_index!= -1:\n            return word[:right_vowel_index]\n        #Else return empty string\n        else:\n            return \"\"\n",
        "num_ids": 212
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    closest_vowel = word[0]\n    if closest_vowel == 'a':\n        return 'u'\n    if closest_vowel == 'e':\n        return 'u'\n    if closest_vowel == 'i':\n        return 'u'\n    if closest_vowel == 'o':\n        return 'u'\n    if closest_vowel == 'u':\n        return 'u'\n    if closest_vowel == 'y':\n        return closest_vowel\n    return closest_vowel\n",
        "num_ids": 133
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    left = right = 1\n    res = \"\"\n    for i in range(len(word)):\n        if word[i] in \"aeiou\":\n            left = left + 1\n            right = right + 1\n        else:\n            break\n    if left > 1:\n        res = word[:left-1]\n    if right > 1:\n        res = word[right-1:len(word)-1]\n    return res",
        "num_ids": 103
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #\n    #Your Code\n    #\n    #print(\" \".join(sorted(list(set(word))))+\" \"+word[::-1])\n    #\n    #\n    return sorted(list(set(word)))[::-1]+word[::-1]\n    #\n    #\n    #def get_closest_vowel(word):\n    #    #\n    #    #Your Code\n    #    #\n    #    s = sorted(list(set(word)))\n    #    l = []\n    #    for i in range(len(s)):\n    #        if s[i] in s:\n    #            l.append(s[i])\n    #    if len(l)==0:\n    #        return \"\"\n    #    else:\n    #        return sorted(l)[::-1]+s[::-1]\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    #    #\n    ",
        "num_ids": 1023
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    vowels = \"aeiouAEIOU\"\n    left, right = 0, len(word)-1\n    result = \"\"\n    for letter in word:\n        if letter in vowels:\n            if left < right:\n                left += 1\n            else:\n                right -= 1\n        else:\n            result += letter\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return ''.join(sorted(word))[::-1][:len(word)]\n",
        "num_ids": 23
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return_list = []\n    for letter in word:\n        if letter in VOWELS:\n            return_list.append(letter)\n    return_list.pop()\n    if return_list:\n        return_list.reverse()\n    for index,letter in enumerate(return_list):\n        if return_list[index:index+3] == [\"aeiou\"] or return_list[index:index+3] == [\"aeiou\"]:\n            return_list.pop(index)\n    return \"\".join(return_list)\n",
        "num_ids": 129
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    closest_vowel = \"u\"\n    found = False\n",
        "num_ids": 21
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = \"aeiou\"\n    index = 0\n    closest_vowel = \"\"\n    word_length = len(word)\n    for i in range(word_length):\n        if i == 0:\n            if word[i] == vowels[0]:\n                index = i\n                break\n            elif word[i] == vowels[len(vowels)-1]:\n                index = i\n                break\n        else:\n            if word[i] == vowels[i-1] and word[i+1] == vowels[i]:\n                index = i\n                break\n            elif word[i] == vowels[i-1] and word[i+1]!= vowels[i]:\n                index = i\n                break\n            elif word[i]!= vowels[i-1] and word[i+1] == vowels[i]:\n                index = i\n                break\n    return closest_vowe",
        "num_ids": 227
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #https://leetcode.com/problems/closest-vowels-to-a-string-using-history/discuss/136529/Python-Simple-Solution-with-Hashtable\n    vowels = \"AEIOU\"\n    diff_dict = dict()\n    for i in range(len(vowels)):\n        if i <= len(word) - 2:\n            diff_dict[vowels[i]] = abs(word[i + 1] - word[i])\n    \n    #get first position\n    position = 0\n    while position < len(vowels) - 2:\n        if diff_dict[vowels[position]] < diff_dict[vowels[position + 1]]:\n            return vowels[position]\n        position += 1\n",
        "num_ids": 188
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s1, s2 = lst\n    d1 = dict()\n    d2 = dict()\n    def match(s, d):\n        if len(s) == 0:\n            return True\n        if len(s) in d:\n            return False\n        if s in d1:\n            return False\n        if s in d2:\n            return False\n        if s[0] == '(':\n            d1[s] = True\n        if s[-1] == ')':\n            d2[s[-1]] = True\n        return match(s[1:-1], d1) and match(s[-1], d2)\n    return match(s1, d1) and match(s2, d2)\n",
        "num_ids": 174
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst = list(lst)\n    match = True\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            if lst[i+1] == ')':\n                if lst[i-1] == '(' or lst[i-2] == ')':\n                    match = False\n    return match\n",
        "num_ids": 88
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # pythonic solution\n    # if len(lst) % 2 == 1:\n    #     return False\n    # elif len(lst) < 2:\n    #     return True\n    # else:\n    #     # edge case, lst is odd length, it is impossible to concatenate the\n    #     # two strings in order.\n    #     return False\n    #\n    # # try to match lst without any constraints\n    # return lst == match_parens(convert_to_list(lst, True))\n",
        "num_ids": 128
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def dfs(lst, stack, visited):\n        if len(lst) == 0 or len(stack) == 0: return True\n        if len(stack) == 2 and len(lst) == len(stack[0]):\n            if stack[1] == lst[0]:\n                return dfs(lst[1:], stack[0], visited)\n        else:\n            return False\n        return (not visited and dfs(lst[1:], stack[1:], visited+[True]))\n    return dfs(lst, [], False)\n",
        "num_ids": 136
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    stack = []\n    n = len(lst)\n    for i in range(0, n):\n        if lst[i] == '(':\n            stack.append(lst[i])\n        elif lst[i] == ')':\n            if len(stack) == 0:\n                return 'No'\n            elif lst[i - 1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No",
        "num_ids": 131
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #------------------I have a good solution----------------------------------\n    #dfs / bfs\n",
        "num_ids": 21
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = ''\n    for x in lst:\n        if x == '(':\n            s += ')'\n        else:\n            s += '('\n    return s == s[::-1]\n",
        "num_ids": 48
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    stack = []\n    for elem in lst:\n        if elem == '(' or elem == ')':\n            stack.append(elem)\n        elif elem == ')':\n            if not stack:\n                return 'No'\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if stack else 'No'\n",
        "num_ids": 100
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # define global variables\n    max_open = 0\n    max_close = 0\n    open = 0\n",
        "num_ids": 26
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    paren_match = 0\n    for char in lst:\n        if char == '(':\n            paren_match += 1\n        else:\n            paren_match -= 1\n        if paren_match < 0:\n            return 'No'\n    return 'Yes'\n",
        "num_ids": 63
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # this is the case when we have k in the middle\n    if k <= 0 or k >= len(arr) or len(arr) == 0:\n        return arr\n",
        "num_ids": 40
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def sort(arr, k):\n        arr.sort()\n        arr = arr[:k] + arr[k+1:]\n        return arr\n    \n    max_list = []\n    start = 0\n    end = 0\n    \n    while end < len(arr):\n        max_list.append(arr[end])\n        if end - start == k:\n            break\n        end += 1\n    \n    for i in range(start, len(arr)):\n        if arr[i] >= max_list[-1]:\n            max_list.append(arr[i])\n            \n    return max_list\n",
        "num_ids": 146
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(arr) < 1 or k <= 0:\n        return []\n",
        "num_ids": 19
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def maximum_subarray(arr, k):\n        # Create a hash table of size k\n        res = [0] * k\n",
        "num_ids": 32
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    left, right = 0, len(arr) - 1\n    while left < right:\n        curr_element = arr[left] + arr[right]\n        if curr_element < k:\n            left += 1\n        elif curr_element > k:\n            right -= 1\n        else:\n            return arr[left: right + 1]\n",
        "num_ids": 84
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # your code here\n    # return max(arr[i:i+k]) for i in range(len(arr) - k + 1)\n    arr.sort()\n    return arr[-k]\n",
        "num_ids": 49
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return arr[:k] + sorted(arr[k:])[::-1]\n",
        "num_ids": 22
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(arr)\n    max_arr = [-i for i in arr]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] > arr[i]:\n                max_arr[i] = max(max_arr[i], arr[i] + max_arr[j])\n    print(max_arr)\n    return max_arr\n",
        "num_ids": 96
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    arr = sorted(arr)\n    return arr[-k:]\n",
        "num_ids": 17
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even = []\n    odd = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return sum(odd) + sum(even)\n",
        "num_ids": 60
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum([i for i in lst if (i%2)==0])\n",
        "num_ids": 21
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    odd=0\n    for i in lst:\n        if i%2==0:\n            odd+=i\n    return odd\n",
        "num_ids": 32
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    odd = 0\n    even = 0\n    for i in lst:\n        if (i % 2) == 0:\n            odd += i\n        else:\n            even += i\n",
        "num_ids": 44
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_sum = even_sum + i\n        else:\n            odd_sum = odd_sum + i\n    return even_sum - odd_sum",
        "num_ids": 67
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    odd_sum = 0\n    even_sum = 0\n    for number in lst:\n        if number % 2 == 0:\n            even_sum += number\n        else:\n            odd_sum += number\n    return even_sum - odd_sum",
        "num_ids": 59
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # store the odd element and even element in a list\n    odd = []\n    even = []\n    # define a flag variable\n    flag = True\n    # iterate over the list\n    for i in lst:\n        # if odd is empty, update it with current element\n        if not flag:\n            even.append(i)\n            flag = True\n        # if even is empty, update it with current element\n        elif not flag:\n            odd.append(i)\n            flag = False\n    # return the sum of odd and even element\n    if flag:\n        return sum(odd)\n    return sum(even)\n",
        "num_ids": 149
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even = []\n    odd = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return sum(odd) + sum(even)",
        "num_ids": 59
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    answer = 0\n    for i in lst:\n        if i % 2 == 0:\n            answer += i\n    return answer\n",
        "num_ids": 32
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # idea: use a set for the max number of digits, then update the max num of digits for the second k element\n    max_num = max(arr[0:k])\n    # add elements to set\n    for i in arr[:k]:\n        max_num = max(max_num, i)\n    return max_num\n",
        "num_ids": 79
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(arr) < 1 or len(arr) < k: return 0\n    if len(arr) == k: return arr[-1]\n    else:\n        i = 1\n        while (len(arr) - i) >= k:\n            i += 1\n            arr[i] = arr[i-1]\n        arr[i] = arr[i-1]\n        return arr[i",
        "num_ids": 95
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #sums = 0\n    #for i in arr:\n    #    if i < 10:\n    #        sums += i\n    #    else:\n    #        sums += max(10-i, 0)\n    #return sums\n    return sum(min(arr[i:i+2], key=int) for i in range(k))\n",
        "num_ids": 85
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum_ele = arr[0]\n    for element in arr[1:]:\n        sum_ele += max(element, k)\n    return sum_ele\n",
        "num_ids": 39
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    addition = []\n    prefix_sum = 0\n    for i in range(len(arr)):\n        prefix_sum += arr[i]\n        if (i == 0 or prefix_sum > k):\n            addition.append(prefix_sum)\n            prefix_sum = 0\n    return sum(addition)\n",
        "num_ids": 76
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum = 0\n    for n in range(len(arr)-k):\n        sum += int(arr[n:n+k])\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # create an array of first k elements\n    arr = arr[:k]\n    \n    # split array into first k elements\n    first_k = [arr[i] for i in range(k)]\n    \n    # add first k elements\n    arr = arr[k:]\n    \n    # return sum of first k elements\n    return sum(first_k)\n",
        "num_ids": 88
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n, p = len(arr), len(str(max(arr)))\n    # count the occurrence of two digits in first k elements of arr\n    count = {c: sum(i in str(arr[:k]) for i in arr[:k]) for c in '01'}\n    # print(count)\n    s, e = count['1'], count['2']\n    # check if first k elements of arr has the same element\n    if e!= s:\n        return 0\n    else:\n        return sum(arr[i] for i in range(1, n) if str(arr[i]) not in count)\n",
        "num_ids": 148
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    for i in arr:\n        sum += int(str(i)[:k])\n",
        "num_ids": 26
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #print(k,arr)\n    answer = 0\n    for i in range(len(arr)):\n        answer += int(arr[i])\n    #print(answer)\n",
        "num_ids": 44
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #print(\"In get_odd_collatz()\")\n    if (n < 1):\n        raise ValueError(\"n must be a positive integer\")\n",
        "num_ids": 36
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Check if n is a valid positive integer.\n    if n <= 0:\n        return None\n    # Initialize empty list.\n    odd_collatz_list = []\n",
        "num_ids": 42
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 0\n    collatz = []\n    while i < n:\n        if i % 2 == 0:\n            collatz.append(i)\n            i += 1\n        elif i % 2!= 0:\n            collatz.append(i)\n            i += 1\n        if i % 2 == 0:\n            i += 2\n    collatz.sort()\n    return collatz\n",
        "num_ids": 93
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def get_collatz(n):\n        if n == 1:\n            return [1]\n        else:\n            odd_nums = []\n            for i in range(1, n):\n                if i % 2 == 0:\n                    odd_nums.append(i)\n            collatz_nums = odd_nums\n            collatz_nums.reverse()\n            return collatz_nums\n",
        "num_ids": 97
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    odd_collatz = []\n    if n > 1:\n        for i in range(1, n):\n            if i % 2 == 0:\n                # if it is odd, just add to the list\n                if i!= 1:\n                    odd_collatz.append(i)\n            else:\n                # if it is not odd, only add it to the list\n                if i!= 1:\n                    odd_collatz.append(i)\n        # now sort the list in descending order so it will always come first\n        odd_collatz = sorted(odd_collatz, reverse=True)\n    return odd_collatz\n",
        "num_ids": 147
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    odd_collatz_sequence = []\n    n = n // 2\n    \n    while n > 0:\n        if n % 2 == 0:\n            odd_collatz_sequence.append(n)\n            n = n//2\n        else:\n            if n == 1:\n                return odd_collatz_sequence\n            else:\n                n = n - 1\n                return odd_collatz_sequence + [n]\n            \n    return odd_collatz_sequence\n",
        "num_ids": 111
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n_list = [0, 1] # 1, 2, 3, 4, 5\n",
        "num_ids": 22
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    odd_collatz = []\n    if n == 1:\n        return [1]\n    else:\n        while n!= 1:\n            if n % 2 == 0:\n                n = n // 2\n                odd_collatz.append(n)\n            else:\n                n = 3 * n + 1\n                odd_collatz.append(n)\n        return odd_collatz[::-1]\n",
        "num_ids": 97
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Note: you'll need to sort the list, then return a sorted list.\n",
        "num_ids": 20
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: create a variable with the list of odd numbers, and start with the first value as 1.\n    lst_of_odds = []\n    for i in range(0, n):\n        if (i % 2 == 0):\n            lst_of_odds.append(i)\n    # sort the odd numbers in the list. \n    lst_of_odds.sort()\n    # return the first odd number as the output.\n    return lst_of_odds[0]\n",
        "num_ids": 121
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # This is the validation part.\n",
        "num_ids": 10
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # 1. Validate the date string. \n    validate_date_rules = {\n        '1':(\n            r'^(\\d{1,2})-(\\d{1,2})-(\\d{4})$',\n            'Please enter a valid date.'\n        ),\n        '2':(\n            r'^(\\d{1,2})-(\\d{1,2})-(\\d{1,2})$',\n            'Please enter a valid date.'\n        ),\n        '3':(\n            r'^(\\d{4})$',\n            'Please enter a valid date.'\n        ),\n        '4':(\n            r'^(\\d{4})$',\n            'Please enter a valid date.'\n        ),\n        '5':(\n            r'^(\\d{1,2})-(\\d{1,2})-(\\d{1,2})$',\n            'Please enter a valid date.'\n        ),\n        '6':(\n            r'^(\\d{1,2})-(\\d{1,2})-(\\d{1,2})$',\n            'Please enter a valid date.'\n        ),\n        '7':(\n            r'^(\\d{1,2})-(\\d{1,2})-(\\d{1,2})$',\n            'Please enter a valid date.'\n        ),\n        '8':(\n            r'^(\\d{1,2})-(\\d{1,2})-(\\d{1,2})$',\n            'Please enter a valid date.'\n        ),\n        '9':(\n            r'^(\\d{1,2})-(\\d{1,2})-(\\d{1,2})$',\n            'Please enter a valid date.'\n        ),\n        '10':(\n            r'^(\\d{4})$',\n            'Please enter a valid date.'\n        ),\n        '11':(\n            r'^(\\d{1,2})-(\\d{1,2})-(\\d{1,2})$',\n            'Please enter a valid date.'\n        ),\n        '12':(\n            r'^(\\d{1,2})-(\\d{1,2})-(\\d{1,2})$',\n            'Please enter a valid date.'\n        )\n    }\n",
        "num_ids": 546
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(date)==0:\n        return False\n    day = 0\n    month = 0\n    year = 0\n    \n    if date[0]=='-':\n        date = date[1:]\n    if len(date)==0:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    days_of_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    days_of_month_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    \n    if (month <= 1 or month > 12 or day <= 1 or day > days_of_month[month - 2]):\n        return False\n    elif (year % 4)!= 0:\n        return False\n    elif (year % 100)!= 0:\n        return False\n    elif (year % 400)!= 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 197
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if date == \"\":\n        return False\n    elif not date.replace(\"-\", \"\").isdigit():\n        return False\n    elif int(date) < 1 or int(date) > 31:\n        return False\n    elif int(date) < 1 or int(date) > 30:\n        return False\n    elif not date.replace(\"-\", \"\").isdigit():\n        return False\n    elif len(date) < 4 or len(date) > 12:\n        return False\n    elif len(date) < 4 or len(date) > 29:\n        return False\n    elif len(date) < 4 or len(date) > 30:\n        return False\n",
        "num_ids": 164
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if date == '':\n        return False\n    if len(date) < 1 or len(date) > 32:\n        return False\n    if date[0]!= '-' or date[0] not in ('0','1','2','3','4','5','6','7','8','9','0','1','2','3','4','5','6','7','8','9'):\n        return False\n    month = int(date[0])\n    day = int(date[3:])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if day < 1 or day > 30:\n        return False\n    if day < 1 or day > 29:\n        return False\n    if month < 1 or month > 12:\n        return False\n    return True\n",
        "num_ids": 197
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # validating for month\n    if not date.endswith('-'):\n        return False\n    if not date.endswith('-'):\n        return False\n    if not date.endswith('-'):\n        return False\n    if len(date)!= 10:\n        return False\n    \n    # validating for date\n    if not date.isdigit():\n        return False\n    if len(date) < 10:\n        return False\n    \n    # validating for month\n    if not date[0].isdigit():\n        return False\n    if len(date[0]) < 4 or len(date[0]) > 4:\n        return False\n    if not date[1].isdigit() or not date[1].isalpha():\n        return False\n    \n    # validating for date\n    if not date[2].isdigit() or not date[2].isalpha():\n        return False\n    if len(date[3]) < 3 or len(date[3]) > 3:\n        return False\n    if date[2] == '0' or not date[2].isdigit():\n        return False\n    if not date[3].isdigit() or not date[3].isalpha():\n        return False\n    if date[3] == '0' or not date[3].isdigit():\n        return False\n    if date[4].isdigit() or not date[4].isalpha():\n        return False\n    if len(date[5]) < 1 or len(date[5]) > 1:\n        return False\n    \n    # validating for date\n    if not date[6].isdigit() or not date[6].isalpha():\n        return False\n    if date[6] == '0' or not date[6].isdigit():\n        return False\n    if not date[7].isdigit() or not date[7].isalpha():\n        return False\n    if date[7] == '0' or not date[7].isdigit():\n        return False\n    \n    # validating for date\n    if not date[8].isdigit() or not date[8].isalpha():\n        return False\n    if date[8] == '0' or not date[8].isdigit():\n        return False\n    if date[9].isdigit() or not date[9].isalpha():\n        return False\n    if date[9] == '0' or not date[9].isdigit():\n        return False\n    \n    # validating for date\n    if not date[10].isdigit() or not date[10].isalpha():\n        return False\n    if len(date[11]) < 2 or len(date[11]) > 2:\n        return False\n    \n    return True\n",
        "num_ids": 649
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not date:\n        return False\n    \n    if not date.isdigit():\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # if all of the following rules are satisfied:\n    if len(date) == 0:\n        return False\n    if len(date) < 1 or len(date) > 31:\n        return False\n    if date[-1] == '/':\n        date = date[:-1]\n    if date[-1] == '-':\n        date = date[:-1]\n    try:\n        date_obj = datetime.strptime(date, '%m-%d-%Y')\n        day = date_obj.date().day\n        month = date_obj.date().month\n        year = date_obj.date().year\n        if month > 12 or month == 0:\n            return False\n        if day > 31:\n            return False\n        if month <= 12:\n            if day < 30 or day == 30:\n                return False\n            if year < 1000 or year == 1000:\n                return False\n        return True\n    except:\n        return False\n",
        "num_ids": 226
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    date = date.strip()\n    if not date: return False\n",
        "num_ids": 17
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # def split_words(txt):\n    #     split_list = txt.split()\n    #     new_list = []\n    #     for word in split_list:\n    #         new_list.append(word.lower())\n    #     return new_list\n    split_list = txt.split(',')\n    new_list = []\n    for word in split_list:\n        new_list.append(word.lower())\n    return new_list\n",
        "num_ids": 113
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    txt = txt.lower()\n    txt = re.sub('[\\W_]+',' ', txt)\n    txt = txt.split()\n    txt = [word for word in txt if word.isalpha()]\n    if len(txt) == 0:\n        return None\n    else:\n        return txt\n",
        "num_ids": 78
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"aabcdefghijklmnopqrstuvwxyz\") \u279e [ 'a', 'bc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"123abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"123abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"123abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"abcdefghijklmnopqrstuvwxyz\") \u279e [ 'abc', 'defghijklmnopqrstuvwxyz']\n    # split_words(\"\") \u279e []\n    # split_words(\"abc\") \u279e [ 'abc']\n    # split_words(\"bob\") \u279e ['bob']\n    return [word.strip().lower() for word in txt.split()]\n",
        "num_ids": 511
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    text = txt.lower()\n    text = text.split(' ')\n    return [x for x in text if len(x)>0 and x.isalpha()]\n",
        "num_ids": 43
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    txt = txt.lower()\n    words = []\n    for i in txt:\n        if i.isspace():\n            if i.islower():\n                i = i.upper()\n            else:\n                i = i.lower()\n            words.append(i)\n        else:\n            if i == \",\":\n                words.append(\",\")\n            elif i == \".\":\n                words.append(\".\")\n            elif i == \"?\" or i == \"!\":\n                words.append(\"?\")\n            elif i == \",\" or i == \".\":\n                words.append(i)\n    return words\n",
        "num_ids": 151
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    words = txt.split(\",\")\n    if len(words) == 0:\n        return []\n    if words[-1] == \"\":\n        words = words[:-1]\n    words = sorted(words)\n    return words\n",
        "num_ids": 58
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    words = txt.lower().split(' ')\n    for word in words:\n        if word.isalpha() and len(word) % 2 == 1:\n            word = word.replace(',', '')\n    return words\n",
        "num_ids": 55
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    txt = txt.lower()\n    return txt.split(\",\")\n",
        "num_ids": 20
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    txt = txt.lower()\n    lst = []\n    for i in range(len(txt)):\n        if txt[i] not in lst:\n            lst.append(txt[i])\n    return lst\n",
        "num_ids": 57
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [word.lower() for word in txt.split(\",\")]\n",
        "num_ids": 19
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Idea: Check if there are duplicate numbers\n    # if any duplicates exist, then the list is sorted.\n    # if there are no duplicates, then return true.\n    lst.sort()\n    if lst.count(lst[0]) > 1:\n        return False\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) > 1:\n        first = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] == first:\n                return False\n            elif lst[i] < first:\n                return False\n            elif lst[i] > first:\n                return False\n        return True\n    else:\n        return True\n",
        "num_ids": 95
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(lst) < 2:\n        return True\n    else:\n        for i in range(1, len(lst)):\n            if lst[i]!= lst[i-1]:\n                return False\n        return True\n",
        "num_ids": 60
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = sorted(lst)\n    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return lst[0] == lst[0]\n    if lst[0] == lst[-1]:\n        return False\n    return lst[0] < lst[-1]",
        "num_ids": 84
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(lst) <= 1: return True\n    d = dict()\n    for num in lst:\n        if num in d: return False\n        d[num] = 1\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(len(lst)):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(lst)<=1:\n        return True\n    elif lst[0]==lst[1]:\n        return False\n    else:\n        return is_sorted([lst[0]]+lst[1:])\n",
        "num_ids": 60
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst) <= 1:\n        return True\n    elif lst[0] == lst[len(lst) - 1]:\n        return False\n    else:\n        return True if lst[0] < lst[len(lst) - 1] else False\n",
        "num_ids": 69
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n = len(lst)\n    for i in range(n-1):\n        if lst[i] < lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not interval1:\n        return False\n    if not interval2:\n        return False\n    if interval1[1] < interval2[0]:\n        return False\n    if interval1[0] > interval2[1]:\n        return False\n    if interval1[1] >= interval2[1]:\n        return True\n    return self.check_prime(intersection(interval1[1], interval2[1]))\n        \n    # return any_prime_number_below(interval1, interval2) or any_prime_number_below(interval2, interval1)\n",
        "num_ids": 138
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l1 = interval1[0]\n    r1 = interval1[1]\n    l2 = interval2[0]\n    r2 = interval2[1]\n    if l2 <= l1 or r2 <= r1:\n        return \"YES\"\n    if l2 >= r1 or r2 >= l1:\n        return \"NO\"\n    if l1 == r1 and l1 == r2:\n        return \"YES\"\n    if l1 == r2:\n        if l2 < r1 < r2:\n            return \"YES\"\n    if l1 == r2:\n        if r2 < l1 < l2:\n            return \"YES\"\n    if l1 < r2 < r1:\n        return \"YES\"\n    if l1 < r2 < l2:\n        return \"YES\"\n",
        "num_ids": 194
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    # if both end points are 0, the interval must be closed\n    # so the intersection is not defined\n    if interval1[0] == interval2[0]:\n        return \"NO\"\n    # determine the start and end of the intersection\n    start = interval1[0]\n    end = interval1[1]\n    while end < interval2[1]:\n        end += 1\n    # if the end point is less than or equal to the start point, then the intersection\n    # is not defined\n    if end - start <= 1:\n        return \"NO\"\n    # find the intersection between the start and end points\n    if start < end:\n        return \"YES\"\n    # the end points must be closed\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    # the start point must be closed\n    if interval2[0] <= interval1[0] and interval2[1] >= interval1[1]:\n        return \"YES\"\n",
        "num_ids": 269
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Write your code here\n    if interval1[0] >= interval2[1]:\n        return \"NO\"\n    if interval1[1] < interval2[0]:\n        return \"NO\"\n    # primes\n    if interval1[0] + interval2[0] == interval2[1] - interval1[1]:\n        return \"YES\"\n    if interval2[0] < interval1[1] < interval1[1] + interval2[1]:\n        return \"YES\"\n    # it's a prime\n    return \"NO\"\n",
        "num_ids": 130
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a, b = sorted(interval1)\n    c, d = sorted(interval2)\n    if a <= b:\n        if a <= c:\n            return \"NO\"\n        return \"NO\"\n    if b <= d:\n        if b <= c:\n            return \"NO\"\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 83
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if interval1[0] < interval1[1] and interval2[0] < interval2[1]:\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 39
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if (interval1[0] >= interval1[1] and interval2[0] <= interval2[1]) or (interval2[0] <= interval1[1] and interval2[1] >= interval1[1]):\n        return \"YES\"\n    elif interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    elif interval2[0] >= interval1[1] and interval2[1] >= interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 138
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    lst1, lst2 = sorted([interval1, interval2])\n    \n    # check if both lst1 and lst2 are the same length\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    # check if the start is less than the end\n    if lst1[0] <= lst2[-1]:\n        # if not, it means it is the only intersection\n        return \"YES\"\n    else:\n        # if it is the only intersection, return \"NO\"\n        return \"NO\"\n",
        "num_ids": 137
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if len(interval1)!= len(interval2):\n        return 'NO'\n    \n    l1 = 0\n    l2 = 0\n    for i in range(len(interval1)):\n        if interval1[i] < interval2[i]:\n            l1 += 1\n        else:\n            l2 += 1\n    if l1 > l2:\n        return 'YES'\n    else:\n        return 'NO'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1024
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum_of_signs = 0\n    for num in arr:\n        sum_of_signs += -1 if num > 0 else 1 if num < 0 else 0\n    return sum_of_signs\n",
        "num_ids": 50
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    magnitudes = []\n    signs = []\n    i = 0\n    while i < len(arr):\n        if arr[i] == 1:\n            signs.append(-1)\n        elif arr[i] == -1:\n            signs.append(1)\n        else:\n            magnitudes.append(0)\n        i += 1\n    signs = [0 if x == -1 else x for x in signs]\n    return sum(signs)\n",
        "num_ids": 114
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return None\n    \n    mags = []\n    for num in arr:\n        if num in [\"+\", \"-\", 0, 1]:\n            mags.append(1)\n        elif num in [1, -1]:\n            mags.append(-1)\n        else:\n            mags.append(0)\n    \n    return prod_mags(mags)\n",
        "num_ids": 100
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    prod = 1\n    signs = {'0': 0, '1': 1, '-1': -1}\n    for i in arr:\n        prod = prod * signs.get(i, 0)\n    return prod\n",
        "num_ids": 56
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    arr = set(arr)\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    return prod_signs(list(arr)) * prod_signs(list(set(arr) - set(arr)))\n",
        "num_ids": 69
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if arr == None or len(arr) == 0:\n        return None\n    return arr[0] * arr[0] * prod_signs([x for x in arr[1:] if x > 0]) + arr[0] * prod_signs([x for x in arr[1:] if x < 0])\n",
        "num_ids": 74
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    for num in arr:\n        signs = [0, 1, -1]\n        for i in range(len(signs)):\n            if num & signs[i]:\n                sum += signs[i]\n                break\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    signs = [-1, -1]\n    for i in range(0, len(arr)):\n        if arr[i] in signs:\n            signs[arr[i] % len(signs)] += 1\n        else:\n            signs[arr[i]] = 1\n    sum_ = 0\n    for i in range(0, len(signs)):\n        sum_ += signs[i] * i\n    return sum_\n",
        "num_ids": 105
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return None\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = result * arr[i]\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if arr == None or len(arr) == 0:\n        return None\n    signs = [1, -1]\n    product = 1\n    for i in range(len(arr)):\n        product *= -1 if arr[i] in signs else 1\n        signs.append(arr[i] if arr[i] in signs else 0)\n    return product\n",
        "num_ids": 88
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #1. [row][col] = minPath(grid, k)\n    #2. [[]][col] = minPath(grid, k)\n    #3. [[][][]] = minPath(grid, k)\n    if grid[0][0] == grid[0][1] or grid[0][0] == grid[0][2]:\n        return grid[0][0]\n    return min(grid[0])\n",
        "num_ids": 102
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def find(k):\n        if k == 0: return []\n        k -= 1\n        lst_A, lst_B = [], []\n        for i in range(k + 1):\n            lst_A.append(find(k - i))\n        lst_A.sort()\n        for i in range(k):\n            lst_B.append(find(k - i))\n        lst_B.sort()\n        return lst_B + lst_A\n",
        "num_ids": 117
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def helper(grid, visited, i, j, curr, path):\n        if not visited[i][j]:\n            visited[i][j] = 1\n            path.append(curr)\n            curr = grid[i][j]\n            if curr == 1:\n                for x in range(i-1, i+2):\n                    if x >= 0 and x < len(grid):\n                        if not visited[x][j]:\n                            helper(grid, visited, x, j, curr, path)\n                for y in range(j-1, j+2):\n                    if y >= 0 and y < len(grid):\n                        if not visited[i][y]:\n                            helper(grid, visited, i, y, curr, path)\n    \n    if k == 0:\n        return []\n    visited = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    path = []\n    minPathHelper(grid, visited, 0, 0, [], path)\n    return path[::-1]\n",
        "num_ids": 255
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst_A = []\n    lst_B = []\n    lst_A.append(grid[0][0])\n    lst_B.append(grid[0][0])\n    lst_A.append(grid[0][0])\n    lst_B.append(grid[0][0])\n",
        "num_ids": 77
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def find_min_path(grid, k):\n        lst_A = []\n        lst_B = []\n        lst_A_sum = [0] * (len(grid) + 1)\n        lst_B_sum = [0] * (len(grid) + 1)\n        for row in range(len(grid)):\n            for col in range(len(grid)):\n                lst_A.append(grid[row][col])\n                lst_B.append(grid[row][col])\n        for i in range(len(lst_A)):\n            lst_A_sum[i + 1] = lst_A_sum[i] + lst_A[i]\n        for i in range(len(lst_B)):\n            lst_B_sum[i + 1] = lst_B_sum[i] + lst_B[i]\n        ans = lst_A_sum[k + 1] - lst_B_sum[k + 1]\n        return ans\n        \n    return find_min_path(grid, k)\n",
        "num_ids": 264
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    curr_row = rows - 1\n    curr_col = 0\n",
        "num_ids": 38
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = len(grid)\n    \n    # Calculate the path\n    # NOTE: the path will be ordered!\n    path = []\n    lst_A = []\n    lst_B = []\n    for i in range(n):\n        lst_A.append(grid[i][0])\n        lst_B.append(grid[i][n-1])\n    \n    # Calculate the lowest possible path\n    # path = [lst_A[0]]\n    # lst_B = [lst_B[0]]\n    \n    for i in range(n):\n        # Find the lowest value in the list\n        # NOTE: all values can be included in path\n        lst_B = [grid[i][n-1]]\n        lst_B.extend(lst_B)\n        lst_A = [grid[i][0]]\n        lst_A.extend(lst_A)\n        if lst_A == lst_B:\n            path = [lst_A[0]]\n            lst_B = [lst_B[0]]\n        else:\n            # Calculate the lowest possible path\n            path = [lst_A[-1]] + path\n            lst_A = [grid[i][0]] + lst_A\n            lst_B = [grid[i][n-1]] + lst_B\n",
        "num_ids": 332
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(grid) == 0:\n        return []\n    if len(grid[0]) == 0:\n        return []\n    if len(grid) == 1:\n        return [grid[0][0]]\n    for i in range(1, len(grid)):\n        for j in range(1, len(grid[i])):\n            if grid[i][j] < grid[i-1][j]:\n                grid[i][j] = grid[i-1][j]\n            elif grid[i][j] > grid[i-1][j]:\n                grid[i][j] = grid[i-1][j]\n    print(grid)\n    min_path = []\n    for i in range(len(grid)):\n        min_path.append(grid[i][0])\n    print(min_path)\n    return min_path\n",
        "num_ids": 205
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    m = len(grid)\n    if m == 0:\n        return []\n    n = len(grid[0])\n    if m == 1 or n == 1:\n        return [grid[0][0]]\n    path = [grid[0][0]]\n    for i in range(1, m):\n        path.append(grid[i][0])\n        for j in range(1, n):\n            if grid[i][j] > path[-1]:\n                path.append(grid[i][j])\n    return path",
        "num_ids": 126
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if grid == []:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return [1, 3, 2, 8]\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 2, 3]\n    return [tri(n-1)+tri(n-2)+tri(n-3)]\n",
        "num_ids": 87
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    else:\n        n = n - 1\n        if n % 2 == 0:\n            return [tri(n - 1), tri(n)] + [tri(n)]\n        else:\n            return [tri(n - 1), tri(n - 1)] + [tri(n)]\n",
        "num_ids": 96
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        n //= 2\n        result = [1,tri(n-1)]\n        result += [tri(n-2)]\n        result += [tri(n-1)+tri(n-2)]\n        return result\n    else:\n        n //= 2\n        result = [tri(n-1),tri(n-2)]\n        result += [tri(n-2)+tri(n-1)]\n        result += [tri(n-1)+tri(n-2)]\n        return result",
        "num_ids": 149
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return [1, 1]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1, 1]\n    elif n == 3:\n        return [1, 1, 1, 1]\n    elif n % 2 == 1:\n        # Initialize the Tribonacci sequence, n % 2 == 0, which is n / 2.\n        tribonacci_sequence = [1, 1]\n        # Calculate all possible combinations.\n        for i in range(n // 2):\n            tribonacci_sequence.append(tribonacci_sequence[i] + tribonacci_sequence[i + 1])\n        # Return all Tribonacci sequences.\n        return tribonacci_sequence\n    else:\n        # Initialize the Tribonacci sequence, n % 2 == 1, which is n / 2.\n        tribonacci_sequence = [1, 1]\n        # Calculate all possible combinations.\n        for i in range(n // 2):\n            tribonacci_sequence.append(tribonacci_sequence[i] + tribonacci_sequence[i + 1])\n        # Return all Tribonacci sequences.\n        return tribonacci_sequence\n",
        "num_ids": 294
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 2:\n        return [1, 1]\n    if n == 2:\n        return [1]\n    elif n % 2 == 0:\n        x = tri(n - 1)\n        return x + [tri(n - 2) + x[0]]\n    else:\n        x = tri(n - 1)\n        y = tri(n - 2)\n        return [x[0] + y[0] + x[1]]\n    \ndef prim(n):\n    \"\"\"Fibonacci sequence, it is studied by mathematicians.\n    A Fibonacci sequence is defined by the recurrence:\n    prim(1) = 1\n    prim(n) = prim(n - 1) + prim(n - 2)\n    for example:\n    prim(2) = 1 + (2 / 2) = 2\n    prim(5) = 1 + 2 + 4 + 7 + 14 = 8\n    For a given number, you are given a non-negative integer number n, you have to \n    a return a list of the first n + 1 Fibonacci numbers of the Fibonacci sequence.\n    Examples:\n    prim(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 2:\n        return [1]\n    if n == 2:\n        return [1]\n    elif n % 2 == 0:\n        x = prim(n - 1)\n        y = prim(n - 2)\n        return [x[0] + y[0]]\n    else:\n        x = prim(n - 1)\n        y = prim(n - 2)\n        return [x[0] + y[0] + x[1]]\n    \ndef inter(n):\n    \"\"\"One of the Fibonacci sequence is interesting. It is studied by mathematicians.\n    It is described by the recurrence:\n    inter(1) = 0\n    inter(n) = inter(n - 1) + inter(n - 2)\n    For example:\n    inter(3) = 0\n    inter(5) = inter(n - 1) + inter(n - 2) + inter(n + 1)\n    This is a sequence that is not interesting by the mathematician\n    The recurrence is described by the recurrence:\n    inter(1) = 1\n    inter(n) = inter(n - 1) + inter(n - 2)\n    For a given number, you are given a non-negative integer number n, you have to \n    a return a list of the first n + 1 integers of the inter-sequence.\n    Examples:\n    inter(3) = [0, 0]\n    inter(5) = [0, 1, 3, 6, 10, 15]\n    \"\"\"\n    if n < 2:\n        return [0]\n    if n == 2:\n        return [0]\n    elif n % 2 == 0:\n        x = inter(n - 1)\n        y = inter(n - 2)\n        return [x[0] + y[0]]\n    else:\n        x = inter(n - 1)\n        y = inter(n - 2)\n        z = inter(n + 1)\n        return [x[0] + y[0] + z[0]]\n    \ndef fermat(n):\n    \"\"\"An n-digit Fibonacci number with a Fibonacci sequence. It is studied by mathematicians.\n    For example:\n    fermat(2) = 1\n    fermat(5) = 3\n    fermat(10) = 3 * 7 ^ 2 + 3 * 7 ^ 3 + 5 * 7 ^ 4 + 5 * 7 ^ 5 + 10 * 7 ^ 6 + 10 * 7 ^ 7\n    \"\"\"\n    if n < 2:\n        return [1]\n    if n == 2:\n        return [1]\n    elif n % 2 == 0:\n        x = fermat(n - 1)\n        y = fermat(n - 2)\n        return [x[0] + y[0]]\n    else:\n        x = fermat(n - 1)\n        y = fermat(n - 2)\n        z = fermat(n + 1)\n        return [x[0] + y[0] + z[0]]\n        \ndef coord(n):\n    \"\"\"Two numbers are coordinates if they are equal.\n    For example:\n    coord(4) = (1, 0)\n    coord(5) = ",
        "num_ids": 1025
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n",
        "num_ids": 69
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # Write your code here\n    if(n<=1):\n        return[1]\n    if(n==2):\n        return[2]\n    if(n%2==0):\n        return[2,(n//2)+1]\n    else:\n        return[1,(n//2)+1]\n    \ndef fib(n):\n    \"\"\"Tribonacci sequence, it is the same as the Tribonacci sequence, except that\n    it has a n-th term.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n+1), where n is even.\n    For example:\n    fib(5) = fib(4) + fib(3) + fib(2) + fib(1)\n    \"\"\"\n    if(n<=1):\n        return n\n    if(n==2):\n        return 0\n    if(n%2==0):\n        return fib(n-1) + fib(n-2)\n    else:\n        return fib(n-1)\n    \ndef hailstone(n):\n    \"\"\"A special number n has only a single occurrence of itself, as follows:\n           hailstone(2) = 2\n           hailstone(3) = 3\n           hailstone(5) = 5\n           hailstone(6) = 6\n           hailstone(10) = 10\n    This is also a special number that is not a number:\n           hailstone(0) = 0\n    \"\"\"\n    \n    if(n==0):\n        return []\n    if(n==1):\n        return [1]\n    if(n==2):\n        return [2]\n    if(n==3):\n        return [3]\n    if(n==5):\n        return [5]\n    if(n==6):\n        return [6]\n    if(n==10):\n        return [10]\n    if(n%2==0):\n        return hailstone(n//2)+[n//2]\n    else:\n        return hailstone(n//2)+[n//2]+[n]\n        \ndef replace_with_fib(n):\n    \"\"\"You are given a number, n. Your function will return the number of Fibonacci numbers \n    that are equal to the number n.\n    \n    Examples:\n    replace_with_fib(7) = [3,5,7,14,21,34]\n    \"\"\"\n    if(n==0):\n        return 0\n    if(n==1):\n        return 1\n    if(n==2):\n        return 2\n    if(n==3):\n        return 3\n    if(n==4):\n        return 4\n    if(n==5):\n        return 5\n    if(n%2==0):\n        return replace_with_fib(n//2)+[n//2]\n    else:\n        return replace_with_fib(n//2)+[n//2]+[n]\n        \n",
        "num_ids": 709
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if(n <= 1):\n        return [1]\n    elif(n == 2):\n        return [1, 2]\n    else:\n        return [1] + [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n",
        "num_ids": 64
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def _tri(n):\n        if n == 0:\n            return [1]\n        elif n % 2 == 0:\n            return [1, n / 2] + _tri(n - 1)\n        else:\n            return [1, n / 2] + _tri(n - 1) + _tri(n - 2)\n",
        "num_ids": 80
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n<=1:\n        return []\n    if n==1:\n        return [1]\n    elif n==2:\n        return [1,2]\n    else:\n        return [1,1] + tri(n-1) + tri(n-2) + tri(n+1)\n",
        "num_ids": 75
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Make sure we don't have a negative number\n    if n < 0:\n        return 0\n",
        "num_ids": 24
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in range(len(str(n))):\n        if (n % 10) % 2:\n            return n\n    return 0",
        "num_ids": 33
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n%2==0:\n        return 0\n    else:\n        return n*digits(n//2)\n",
        "num_ids": 30
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: Write your code here\n    if n == 0 or n == 1:\n        return 0\n    return n // 10 * digits(n % 10)\n",
        "num_ids": 39
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # A short solution:\n    # n = str(n)\n    # odd = 0\n    # n = n.zfill(3)\n    # if len(n) % 2 == 1:\n    #     odd = 1\n    # for i in n:\n    #     odd *= int(i)\n    # return odd\n    if n <= 0:\n        return 0\n    return n*digits(n-1)",
        "num_ids": 101
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    digits = 0\n    while n:\n        digits += (n % 10)\n        n //= 10\n    return digits\n",
        "num_ids": 32
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def digits_factor(n):\n        \"\"\"Returns the number of digits of n that are even.\n        \"\"\"\n        if n % 2 == 0:\n            return 1\n        else:\n            return 0\n    \n    return digits_factor(n) * n // 2\n",
        "num_ids": 63
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code here\n    if n % 2 == 1:\n        return 0\n    else:\n        return n // 2",
        "num_ids": 29
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return 1 if n % 2 == 1 else 0\n",
        "num_ids": 13
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    m=1\n    while n%10==0:\n        m*=10\n        n//=10\n    return m*n\n",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return is_sub_sequence(string, '[][][[])', '[]', '(')\n",
        "num_ids": 24
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #A = []\n    #for i in A:\n    #    if len(i) == 2 and i[0] == ']' and i[1] == '[':\n    #        A.append(i)\n    \n    #for i in A:\n    #    if len(i) == 3 and i[0] == ']':\n    #        if i[1] == '[' and i[2] == ']':\n    #            A.remove(i)\n    \n    #for i in A:\n    #    if len(i) == 4 and i[0] == '[':\n    #        if i[1] == '[' and i[2] == ']':\n    #            if i[3] == '[':\n    #                A.remove(i)\n    \n    #return len(A) == 0\n    return len(string) == 0\n",
        "num_ids": 206
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(string) <= 1:\n        return True\n    open_brackets = '['\n    close_brackets = ']'\n    cur_char = string[0]\n    if cur_char == open_brackets:\n        if string[1:].count(open_brackets) == 0:\n            return False\n    if cur_char == close_brackets:\n        if string[1:].count(close_brackets) == 0:\n            return False\n    return is_nested(string[1:])\n",
        "num_ids": 124
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if string == \"[]\":\n        return True\n    if string == \"()\":\n        return False\n    \n    sub_list = string.split(\"[\")\n    sub_list = [x.strip() for x in sub_list]\n    if sub_list == [\"[]\"]:\n        return True\n    if sub_list == [\"]\"] and is_nested(string) == False:\n        return True\n    if sub_list == [\"[]\"] and is_nested(string) == True:\n        return True\n    if sub_list == [\"()\"] and is_nested(string) == False:\n        return True\n    if sub_list == [\"()\"] and is_nested(string) == True:\n        return True\n    return False\n",
        "num_ids": 176
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    bracket_dict = {')' : '(', ']' : '[', '}' : '{'}\n    is_nested_helper(string, {')' : '(', ']' : '[', '}' : '{', ']': '['})\n    return is_nested_helper(string, bracket_dict)\n",
        "num_ids": 80
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return all(list(map(lambda s: is_subsequence(s, string), iterate_string(string))))\n",
        "num_ids": 29
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return not all(i in ['[', ']', ']', '[', ']', '(', ')'] for i in string)\n",
        "num_ids": 33
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for char in string:\n        if char == \"[\":\n            return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    stack = []\n    for char in string:\n        if char in ['[', '(', '{', ']', ']', ']', '[', '{', '[']:\n            stack.append(char)\n        elif char in ['[', '(', '{', ']', ']', ']', '[', '{', '[']:\n            if len(stack) == 0 or char!= stack.pop():\n                return False\n    return len(stack)!= 0\n",
        "num_ids": 112
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return True if all(('[' in x) for x in string.split(']')) and all(('[' in x) for x in string.split('[') if x!= '[') and all(('[' in x) for x in string.split(']') if x!= ']')) else False\n",
        "num_ids": 71
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return None\n    sum_squares = 0\n    for value in lst:\n        sum_squares += value**2\n    return sum_squares\n",
        "num_ids": 49
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    squared = list(map(lambda x: (x ** 2), lst))\n    return sum(squared)\n",
        "num_ids": 29
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum([round(x*x,1) for x in lst])\n",
        "num_ids": 20
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum=0\n    for i in lst:\n        sum+=i**2\n    return sum\n    \ndef square_list(lst):\n    \"\"\"You are given a list of numbers.\n    Your task is to find the sum of squared numbers in the given list.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [-2.4,1,1] the output should be 29\n    \n    \"\"\"\n    sum=0\n    for i in lst:\n        sum+=i**2\n    return sum\n    \ndef filter_list(lst,filter_function):\n    \"\"\"You are given a list of numbers.\n    Your task is to apply the given function on the elements of the list.\n    Examples:\n    For lst = [1,2,3] the output should be [1,2,3]\n    For lst = [1,4,9] the output should be [1,4,9]\n    For lst = [1,3,5,7] the output should be [1,3,5,7]\n    For lst = [-2.4,1,1] the output should be [1,1,1]\n    \n    \"\"\"\n    filtered_lst=[]\n    for i in lst:\n        if filter_function(i):\n            filtered_lst.append(i)\n    return filtered_lst\n    \ndef odd_list(lst):\n    \"\"\"You are given a list.\n    Your task is to find the list with odd numbers from the given list.\n    \n    Examples:\n    For lst = [1,2,3] the output should be [3,2,1]\n    For lst = [1,4,9] the output should be [9,4,1]\n    For lst = [1,3,5,7] the output should be [7,3,5,1]\n    For lst = [-2.4,1,1] the output should be [1,1,1]\n    \n    \"\"\"\n    odd_list=[]\n    for i in lst:\n        if i%2==0:\n            odd_list.append(i)\n    return odd_list\n    \ndef empty_list(lst):\n    \"\"\"You are given a list.\n    Your task is to find the elements in the given list, which are not in the given list,\n    but are still not even.\n    Examples:\n    For lst = [1,2,3] the output should be [2,3]\n    For lst = [1,4,9] the output should be [9]\n    For lst = [1,3,5,7] the output should be [5,7]\n    For lst = [-2.4,1,1] the output should be [1]\n    \n",
        "num_ids": 706
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst_squared = []\n    for item in lst:\n        if isinstance(item, list) == False:\n            item = [item]\n        for i in item:\n            lst_squared.append(i ** 2)\n    return sum(lst_squared)\n",
        "num_ids": 70
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = 0\n    for number in lst:\n        result += number*number\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst_len = len(lst)\n    sum_squares = 0\n    for i in range(lst_len):\n        sum_squares += lst[i] ** 2\n",
        "num_ids": 47
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst = [i**2 for i in lst]\n    return sum(lst)\n    \ndef max_num(lst):\n    \"\"\"Return the maximum element in a list, rounded to the nearest integer\"\"\"\n    max_num = lst[0]\n    for i in lst:\n        if i > max_num:\n            max_num = i\n    return max_num\n    \ndef smallest_multiple(lst):\n    \"\"\"Return the smallest multiple of the list, rounded to the nearest integer\"\"\"\n    return int(max(lst)/max(lst[1::]))\n",
        "num_ids": 140
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    from functools import reduce\n    return reduce(lambda x,y:x*y,lst)\n",
        "num_ids": 26
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst = [x**2 for x in lst]\n    return sum(lst)\n",
        "num_ids": 24
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for char in txt:\n        if char not in LETTERS:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # create variable for last char\n    last_char = \"\"\n    # iterate through each word\n    for i in range(len(txt)):\n        # if the last char is an alphabet\n        if txt[i].isalpha():\n            # if the last char is not a letter, return false\n            if last_char.isalpha() and not txt[i].isalpha():\n                return False\n            # if the last char is a letter, return true\n            elif last_char.isalpha():\n                return True\n            # if the last char is a letter, return false\n            else:\n                return False\n        # set new last char to current char\n        last_char = txt[i]\n    return True\n",
        "num_ids": 169
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return txt.rfind(\"a\") >= 0\n",
        "num_ids": 14
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return len(txt) > 0 and not any(txt[-1].isalpha() or txt[-1].isnumeric() for txt in txt)\n",
        "num_ids": 40
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = txt.split()\n    return lst[-1][-1] == \"a\" and len(lst[-1]) > 1 and (lst[-1][-1] in 'aeiouAEIOU')\n",
        "num_ids": 58
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in ('p', 'e','')\n",
        "num_ids": 30
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return txt[-1].isalpha() and txt[-1].isupper() and not (txt[-1].isdigit() or txt[-1].isalpha())\n",
        "num_ids": 45
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    str_length = len(txt)\n    last_letter = txt[str_length-1]\n",
        "num_ids": 26
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (txt[-1].isalpha() == True)\n    # return (txt.__contains__(\"a\"))\n",
        "num_ids": 30
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if(txt[-1] in ALPHA):\n        return False\n    if(txt[-1] in BETA):\n        return True\n",
        "num_ids": 35
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            return i\n    return -1\n",
        "num_ids": 38
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def can_arrange_rec(start, end):\n        if start == end:\n            return start\n        # Iterate from start to end and find the next lesser element\n        mid = (start + end) // 2\n        if arr[mid] > arr[mid + 1] and arr[mid] > arr[mid - 1]:\n            # If current element is greater than either the next\n            # lesser element or the previous lesser element\n            return can_arrange_rec(mid + 1, end)\n        else:\n            # If current element is greater than or equal to the next\n            # lesser element\n            return mid\n",
        "num_ids": 143
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if arr == []:\n        return -1\n    if arr[0] >= arr[-1]:\n        return 0\n    if arr[0] < arr[-1]:\n        return 1\n    for i in range(1, len(arr) - 1):\n        if arr[i] < arr[i - 1] and arr[i] < arr[i + 1]:\n            return i\n    return -1\n",
        "num_ids": 98
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    index = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[index]:\n            index = i\n    return index\n",
        "num_ids": 39
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Write your code here.\n    arr = sorted(arr)\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return -1\n    return len(arr)\n",
        "num_ids": 57
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return -1\n    max = arr[0]\n    curr = 1\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            curr = i\n            max = arr[i]\n    return curr\n",
        "num_ids": 73
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i\n",
        "num_ids": 31
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Write your code here\n    # Use index() to find the first element with a greater value than the element immediately preceding it\n    # Return -1 if the element does not exist\n    return index(arr, arr[0], arr[-1])\n",
        "num_ids": 60
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # The idea is to sort the array in ascending order. So we will add elements\n    # to the left to make a new list which will be append to the right.\n    # Then, when we find the element which is less than the element we are\n    # going to append to the right.\n    # We will then swap the values of the values so that the element becomes\n    # less than the element we are going to append to the right.\n    # Again, we will go down the list.\n    # The idea is to use a counter variable. The variable will be used to keep\n    # track of the index of an element which has already been compared to\n    # another element.\n    # In the end, the index will be incremented by 1 if the element to compare\n    # with another element is greater than or equal to the element to be\n    # compared.\n",
        "num_ids": 194
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst.sort()\n    a = lst[-1]\n    b = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            a = max(a,lst[i])\n        else:\n            b = min(b,lst[i])\n    return (a,b)\n",
        "num_ids": 89
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    smallest, largest = None, None\n",
        "num_ids": 11
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            a = i\n        else:\n            b = i\n    return a, b\n",
        "num_ids": 46
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_n = max(lst)\n    min_n = min(lst)\n    #print(f'Max: {max_n}')\n    #print(f'Min: {min_n}')\n    if max_n < min_n:\n        return (None, None)\n    elif max_n == min_n:\n        return (lst, lst)\n    else:\n        return (min_n, max_n)\n",
        "num_ids": 110
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a = 0\n    b = 0\n    max = -1\n    min = 99999\n    for i in lst:\n        if i < 0:\n            a = a + i\n            max = max if max < i else i\n            min = min if min > i else i\n        else:\n            b = b + i\n            max = max if max > i else i\n            min = min if min < i else i\n    return (a, b) if a < b else None\n",
        "num_ids": 114
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def _largest_smallest(num_list):\n        '''\n        Returns a tuple (a, b) where a is the largest and b is the smallest\n        of negative integers in num_list.\n        If there is no negative integers in num_list, returns a tuple (None, None)\n        '''\n        if num_list == []:\n            return (None, None)\n        else:\n            num_list = sorted(num_list, reverse=True)\n            num_list_length = len(num_list)\n            if num_list_length == 1:\n                return (num_list[0], num_list[0])\n            if num_list_length == 2:\n                return (num_list[0], num_list[1])\n            if num_list_length == 3:\n                return (num_list[0], num_list[1], num_list[2])\n            if num_list_length == 4:\n                return (num_list[0], num_list[1], num_list[2], num_list[3])\n            if num_list_length == 5:\n                return (num_list[0], num_list[1], num_list[2], num_list[3], num_list[4])\n            if num_list_length == 6:\n                return (num_list[0], num_list[1], num_list[2], num_list[3], num_list[4], num_list[5])\n            if num_list_length == 7:\n                return (num_list[0], num_list[1], num_list[2], num_list[3], num_list[4], num_list[5], num_list[6])\n            if num_list_length == 8:\n                return (num_list[0], num_list[1], num_list[2], num_list[3], num_list[4], num_list[5], num_list[6], num_list[7])\n    largest_smallest = _largest_smallest(lst)\n    return largest_smallest\n",
        "num_ids": 489
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def max_and_min(lst):\n        min_val = lst[0]\n        max_val = lst[0]\n        for item in lst:\n            if item < min_val:\n                min_val = item\n            if item > max_val:\n                max_val = item\n        return min_val, max_val\n    return max_and_min(lst)\n",
        "num_ids": 97
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # The main idea here is that the smallest number in the list is larger.\n    # The second smallest number in the list is smaller than the first.\n    # The third smallest number in the list is larger than the second smallest number.\n    # Finally, the smallest number in the list is smaller than the third smallest number.\n    \n    # The result is the largest, the smallest, and the smallest.\n    def smallest_and_second_smallest(lst):\n        smallest = lst[0]\n        second_smallest = lst[1]\n        third_smallest = lst[2]\n        \n        for number in lst:\n            if number < smallest:\n                smallest = number\n            elif number > second_smallest:\n                second_smallest = number\n            elif number > third_smallest:\n                third_smallest = number\n        \n        return smallest, second_smallest, third_smallest\n    \n    # We need to sort the list to get the first smallest, second smallest, and third smallest.\n    # Remember to reverse the order of the list to start from the smallest.\n    def smallest_and_second_smallest_2(lst):\n        smallest = lst[0]\n        second_smallest = lst[1]\n        third_smallest = lst[2]\n        \n        for number in lst:\n            if number < smallest:\n                smallest = number\n            elif number > second_smallest:\n                second_smallest = number\n            elif number > third_smallest:\n                third_smallest = number\n        \n        return smallest, second_smallest, third_smallest\n    \n    # We need to reverse the list to get the first smallest, second smallest, and third smallest.\n    def smallest_and_second_smallest_3(lst):\n        smallest = lst[0]\n        second_smallest = lst[1]\n        third_smallest = lst[2]\n        \n        for number in lst:\n            if number < smallest:\n                smallest = number\n            elif number > second_smallest:\n                second_smallest = number\n            elif number > third_smallest:\n                third_smallest = number\n        \n        return smallest, second_smallest, third_smallest\n    \n    # We need to sort the list to get the first smallest, second smallest, and third smallest.\n    # Remember to reverse the order of the list to start from the smallest.\n    def smallest_and_second_smallest_4(lst):\n        smallest = lst[0]\n        second_smallest = lst[1]\n        third_smallest = lst[2]\n        \n        for number in lst:\n            if number < smallest:\n                smallest = number\n            elif number > second_smallest:\n                second_smallest = number\n            elif number > third_smallest:\n                third_smallest = number\n        \n        return smallest, second_smallest, third_smallest\n    \n    # We need to reverse the list to get the first smallest, second smallest, and third smallest.\n    def smallest_and_second_smallest_5(lst):\n        smallest = lst[0]\n        second_smallest = lst[1]\n        third_smallest = lst[2]\n        \n        for number in lst:\n            if number < smallest:\n                smallest = number\n            elif number > second_smallest:\n                second_smallest = number\n            elif number > third_smallest:\n                third_smallest = number\n        \n        return smallest, second_smallest, third_smallest\n    \n    # The main idea is to return the largest of negative integers, and smallest of positive integers.\n    # Once the largest and smallest numbers are found, we can remove them from the list to get the smallest.\n    \n    # The result is the smallest, the largest and the smallest.\n    def smallest_and_second_smallest_6(lst):\n        smallest = lst[0]\n        second_smallest = lst[1]\n        third_smallest = lst[2]\n        \n        for number in lst:\n            if number < smallest:\n                smallest = number\n            elif number > second_smallest:\n                second_smallest = number\n            elif number > third_smal",
        "num_ids": 1026
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_neg = max_pos = None\n    for n in lst:\n        if n < 0:\n            if max_neg is None or n < max_neg:\n                max_neg = n\n        if n > 0:\n            if max_pos is None or n > max_pos:\n                max_pos = n\n    return (max_neg, max_pos)\n",
        "num_ids": 90
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a = None\n    b = None\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            if a == None:\n                a = lst[i]\n            else:\n                if a > lst[i]:\n                    a = lst[i]\n                else:\n                    a = a\n        else:\n            if b == None:\n                b = lst[i]\n            else:\n                if b > lst[i]:\n                    b = lst[i]\n                else:\n                    b = b\n    return (a, b)\n",
        "num_ids": 143
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if type(a) is str:\n        if type(b) is str:\n            return a + b\n        else:\n            return a + b.replace(\",\",\".\")\n    elif type(a) is int or type(b) is float:\n        if type(b) is int or type(a) is float:\n            return max(a, b)\n        else:\n            return a + b\n    elif type(a) is float or type(b) is float:\n        if type(b) is int or type(a) is float:\n            return min(a, b)\n        else:\n            return a + b\n    elif type(a) is str or type(b) is str:\n        return max(a, b)\n    else:\n        return None\n",
        "num_ids": 186
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if type(a) == type(b):\n        if type(a) == int:\n            if type(a) == float:\n                return a\n        elif type(a) == str:\n            if type(a) == float or type(a) == int:\n                return a\n    elif type(a) == dict:\n        if type(a) == list:\n            if type(a) == list:\n                return [compare_one(a[i], b) for i in range(len(a))]\n    elif type(a) == set:\n        if type(a) == set:\n            return {compare_one(i, j) for i in a for j in b if i!= j}\n    elif type(a) == tuple:\n        if type(a) == tuple:\n            return tuple(compare_one(i, j) for i in a for j in b if i!= j)\n    elif type(a) == type(b):\n        return b\n    else:\n        return None\n",
        "num_ids": 247
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # if a == b:\n    #     return a\n    # elif type(a) is str:\n    #     return b\n    # elif type(a) is float:\n    #     return a\n    # elif type(a) is int:\n    #     return b\n    # return None\n    if a == b:\n        return a\n    elif type(a) is str:\n        return b\n    elif type(a) is float:\n        return a\n    elif type(a) is int:\n        return b\n    return None\n",
        "num_ids": 134
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if type(a) == type(b):\n        if type(a) == float or type(a) == int or type(a) == str:\n            return a\n        else:\n            return None\n    else:\n        return None\n",
        "num_ids": 57
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if type(a) == str:\n        return a.replace(\",\", \".\")\n    if type(a) == float:\n        return round(a, 2)\n    if type(a) == int:\n        return round(a, 2)\n    if type(a) == bool:\n        return a\n    if type(a) == type(b):\n        return a\n    if type(a) == type(\"\"):\n        return b\n    if type(b) == str:\n        return b.replace(\",\", \".\")\n    if type(b) == float:\n        return round(b, 2)\n    if type(b) == int:\n        return round(b, 2)\n    if type(b) == bool:\n        return b\n    if type(b) == type(a):\n        return b\n    if type(b) == type(\"\"):\n        return a\n    if type(a) == type(\"\"):\n        return b\n    if type(a) == type(\"\"):\n        return a\n",
        "num_ids": 243
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if isinstance(a, str):\n        if isinstance(b, str):\n            return a.title()\n        elif isinstance(b, float):\n            return a\n        elif isinstance(b, float):\n            return b\n        else:\n            raise TypeError(\"Variables must be string/float.\")\n    elif isinstance(a, int):\n        if isinstance(b, int):\n            return a\n        elif isinstance(b, float):\n            return b\n        else:\n            raise TypeError(\"Variables must be int/float.\")\n    elif isinstance(a, float):\n        if isinstance(b, int):\n            return a\n        elif isinstance(b, float):\n            return b\n        else:\n            raise TypeError(\"Variables must be int/float.\")\n    else:\n        return None\n",
        "num_ids": 200
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return None if a == b else max(a, b)\n",
        "num_ids": 16
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if type(a) == str:\n        a = float(a)\n    if type(b) == str:\n        b = float(b)\n    if a < b:\n        return a\n    elif a > b:\n        return b\n    else:\n        return None\n",
        "num_ids": 68
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO\n    pass\n",
        "num_ids": 9
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if type(a) == str:\n        return a\n    if type(b) == str:\n        return b\n    if type(a) == float or type(b) == float:\n        return a\n    if type(a) == int or type(b) == int:\n        if a > b:\n            return a\n        return b\n    if type(a) == str or type(b) == str:\n        if a.isdigit() or b.isdigit():\n            if int(a) > int(b):\n                return a\n            return b\n        return a\n    return None\n",
        "num_ids": 143
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Return True if the number n can be written as the sum of exactly 4 positive even numbers.\n    if not isinstance(n, int) or n < 1:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return is_equal_to_sum_even(n-1)\n    else:\n        return is_equal_to_sum_even(n-2)\n",
        "num_ids": 60
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n <= 4:\n        return True\n    else:\n        return is_equal_to_sum_even(n - 2) and is_equal_to_sum_even(n - 3) and is_equal_to_sum_even(n - 4)\n",
        "num_ids": 63
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n%2 == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 22
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO\n    return False\n",
        "num_ids": 10
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return is_equal_to_sum_even(n//2)\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if (n % 2 == 0) and (n / 2 % 2 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < 4:\n        return False\n    elif n == 4:\n        return True\n    else:\n        sum = 0\n        for i in range(4, n+1):\n            if i % 2 == 0:\n                sum += i\n        if sum == 0:\n            return True\n        else:\n            return False\n",
        "num_ids": 79
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = True\n    if n <= 4:\n        return result\n    \n    for i in range(2, n + 1, 2):\n        if n % i == 0:\n            result = False\n            break\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    fact = 1\n    for i in range(n):\n        fact = fact * (i + 1)\n    return fact\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    assert n >= 0\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "num_ids": 36
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    numbers_to_return = 1\n    special_fact = 1\n    while n > 1:\n        special_fact *= n\n        n -= 1\n    return special_fact\n",
        "num_ids": 44
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    fact = 1\n    if n == 0:\n        return fact\n    else:\n        for i in range(n-1):\n            fact = fact * (n-1)\n        fact = fact * (n-1)\n        fact = fact * (n-1)\n        return fact\n",
        "num_ids": 69
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    factorial = 1\n",
        "num_ids": 7
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert type(n) == int and n > 0, \"The input must be a positive integer.\"\n    assert n > 0, \"The input must be a positive integer.\"\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 120\n    elif n == 6:\n        return 720\n    elif n == 7:\n        return 1024\n    elif n == 8:\n        return 2048\n    elif n == 9:\n        return 4096\n    elif n == 10:\n        return 8192\n    elif n == 11:\n        return 16384\n    elif n == 12:\n        return 32768\n    elif n == 13:\n        return 65536\n    elif n == 14:\n        return 131072\n    elif n == 15:\n        return 262144\n    elif n == 16:\n        return 1048576\n    elif n == 17:\n        return 2097152\n    elif n == 18:\n        return 4194304\n    elif n == 19:\n        return 8388608\n    elif n == 20:\n        return 16777216\n    elif n == 21:\n        return 33554432\n    elif n == 22:\n        return 67108864\n    elif n == 23:\n        return 134217728\n    elif n == 24:\n        return 262144\n    elif n == 25:\n        return 1048576\n    elif n == 26:\n        return 2097152\n    elif n == 27:\n        return 4194304\n    elif n == 28:\n        return 8388608\n    elif n == 29:\n        return 16777216\n    elif n == 30:\n        return 33554432\n    elif n == 31:\n        return 67108864\n    elif n == 32:\n        return 134217728\n    elif n == 33:\n        return 262144\n    elif n == 34:\n        return 1048576\n    elif n == 35:\n        return 2097152\n    elif n == 36:\n        return 4194304\n    elif n == 37:\n        return 8388608\n    elif n == 38:\n        return 16777216\n    elif n == 39:\n        return 33554432\n    elif n == 40:\n        return 67108864\n    elif n == 41:\n        return 134217728\n    elif n == 42:\n        return 262144\n    elif n == 43:\n        return 1048576\n    elif n == 44:\n        return 2097152\n    elif n == 45:\n        return 4194304\n    elif n == 46:\n        return 8388608\n    elif n == 47:\n        return 16777216\n    elif n == 48:\n        return 33554432\n    elif n == 49:\n        return 67108864\n    elif n == 50:\n        return 134217728\n    elif n == 51:\n        return 262144\n    elif n == 52:\n        return 1048576\n    elif n == 53:\n        return 2097152\n    elif n == 54:\n        return 4194304\n    elif n == 55:\n        return 8388608\n    elif n == 56:\n        return 16777216\n    elif n == 57:\n        return 33554432\n    elif n == 58:\n        return 67108864\n    elif n == 59:\n        return 134217728\n    elif n == 60:\n        return 262144\n    elif n == 61:\n        return 1048576\n    elif n == 62:\n        return 2097152\n    elif n == 63:\n        return 4194304\n    elif n == 64:\n        return 8388608\n    elif n == 65:\n        return 16777216\n    elif n == 66:\n        return 33554432\n    elif n == 67:\n        return 67108864\n    elif n == 68:\n        return 134217728\n    elif n == 69:\n        return 262144\n    elif n == 70:\n        return 1048576\n    elif n == 71:\n    ",
        "num_ids": 1025
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    result = 1\n    while n > 0:\n        result *= n\n        n -= 1\n",
        "num_ids": 26
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not isinstance(n, int):\n        raise TypeError('n must be an integer')\n    elif n <= 0:\n        raise ValueError('n must be positive')\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 120\n    elif n == 6:\n        return 720\n    elif n == 7:\n        return 86400\n    elif n == 8:\n        return 86400*365\n    elif n == 9:\n        return 86400*7*365\n    elif n == 10:\n        return 86400*7*14*365\n    elif n == 11:\n        return 86400*14*14*365\n    elif n == 12:\n        return 86400*14*365*30*24*7*30\n    elif n == 13:\n        return 86400*365*30*24*30*7*30\n    elif n == 14:\n        return 86400*30*30*30*7*7*14*365\n    elif n == 15:\n        return 86400*30*30*30*7*30*14*365\n    elif n == 16:\n        return 86400*30*30*30*7*30*14*365*30\n    elif n == 17:\n        return 86400*30*30*30*7*30*14*365*30*30\n    elif n == 18:\n        return 86400*30*30*30*30*30*30*7*30*30\n    elif n == 19:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30\n    elif n == 20:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30\n    elif n == 21:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30*30*30*30\n    elif n == 22:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30*30*30*30\n    elif n == 23:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30\n    elif n == 24:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30\n    elif n == 25:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30\n    elif n == 26:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30\n    elif n == 27:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30\n    elif n == 28:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30\n    elif n == 29:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30\n    elif n == 30:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30\n    elif n == 31:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30\n    elif n == 32:\n        return 86400*30*30*30*30*30*30*30*30*30*30*30*30*30*30*30",
        "num_ids": 1024
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    if n == 4:\n        return 24\n    if n == 5:\n        return 120\n    if n == 6:\n        return 720\n    if n == 7:\n        return 5040\n    if n == 8:\n        return 40320\n    if n == 9:\n        return 487520\n    if n == 10:\n        return 676560\n    if n == 11:\n        return 8589934592\n    if n == 12:\n        return 9728573460\n    if n == 13:\n        return 100589934592\n    if n == 14:\n        return 1024004012\n    if n == 15:\n        return 10995116277\n    if n == 16:\n        return 1125899906842624\n    if n == 17:\n        return 27720070808\n    if n == 18:\n        return 58982534375\n    if n == 19:\n        return 11024903576\n    if n == 20:\n        return 67563262576\n    if n == 21:\n        return 134217728574\n    if n == 22:\n        return 1777721667\n    if n == 23:\n        return 39648411934\n    if n == 24:\n        return 1025651924\n    if n == 25:\n        return 26565399874\n    if n == 26:\n        return 40340348164\n    if n == 27:\n        return 10597399414\n    if n == 28:\n        return 58982534375\n    if n == 29:\n        return 9728573460\n    if n == 30:\n        return 11141935891\n    if n == 31:\n        return 18014398509481984\n",
        "num_ids": 444
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    text = text.replace(' ', '_')\n    text = re.sub(r'  +', '-', text)\n    return text\n",
        "num_ids": 35
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return re.sub(r'\\s+', '_', text).strip()\n",
        "num_ids": 21
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    text = text.replace(' ', '_')\n    return text.replace('  ', '_')\n",
        "num_ids": 25
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    spaces = len(text) - len(text.rstrip(' '))\n    if spaces > 0:\n        text = text.replace(' ', '_')\n    return text\n",
        "num_ids": 43
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    spaces = [' ']\n    spaces += [str(x) for x in range(sys.maxunicode)]\n    for char in text:\n        if char in spaces:\n            char = '-' + char\n        text = text.replace(char, '_' + char)\n    return text\n",
        "num_ids": 72
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    line_count = len(text.splitlines())\n    return''.join(text.split()).replace(' ', '_') if line_count > 2 else text\n",
        "num_ids": 39
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # First, determine the number of consecutive spaces\n    num_spaces = 0\n    for i in range(len(text)):\n        if text[i] =='':\n            num_spaces += 1\n",
        "num_ids": 50
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    text = text.replace(\" \", \"_\")\n    if len(text) > 2:\n        space_count = 0\n        for i in range(len(text)):\n            if text[i] == \" \":\n                space_count += 1\n        if space_count > 2:\n            for i in range(len(text)-2):\n                text = text[:i] + \"_\" + text[i+1:]\n    return tex",
        "num_ids": 103
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    text = text.replace(\" \", \"_\")\n    while \"  \" in text:\n        text = text.replace(\"  \", \"_\")\n    return text\n",
        "num_ids": 37
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    text = text.replace(\" \", \"_\")\n    text = re.sub(\" +\", \"-\", text)\n    return text\n    \ndef make_example_dictionary(filename):\n    \"\"\"\n    Given a filename, read in the content of the file, and return a dictionary \n    with the words as keys and a list of the equivalent words as values\n    \n    make_example_dictionary(\"english.txt\") == {\"i\": [\"who\", \"is\", \"a\", \"man\"], \n    \"c\": [\"trouble\", \"and\", \"a\", \"cheating\", \"with\", \"which\", \"a\", \"woman\"], \n    \"d\": [\"and\", \"a\", \"man\"], \"e\": [\"and\", \"a\", \"woman\"], \"o\": [\"are\", \"you\", \"them\"], \n    \"s\": [\"i\", \"and\", \"a\", \"woman\"], \"u\": [\"to\", \"be\", \"your\", \"boy\"], \n    \"w\": [\"the\", \"art\", \"of\", \"the\", \"love\", \"you\", \"can\", \"talk\", \"with\", \"that\", \"boy\"]}\n    \"\"\"\n    \n    dictionary = {}\n    with open(filename, \"r\") as f:\n        for line in f:\n            word = line.strip().lower()\n            if len(word) == 1:\n                continue\n            if word in dictionary:\n                dictionary[word].append(word)\n            else:\n                dictionary[word] = [word]\n        \n    return dictionary\n",
        "num_ids": 352
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(file_name) < 3:\n        return \"No\"\n    else:\n        if not file_name[0].isalpha() and not file_name[0] == '.' and not file_name[0] =='':\n            return \"No\"\n        else:\n            return \"Yes\"\n",
        "num_ids": 74
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Check if the file name is valid\n    file_name = re.sub(r\"\\W\", \"\", file_name)\n    if len(file_name) == 0:\n        return 'No'\n    # Check for one or more digits in the file name\n    if len(file_name) < 3:\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    # Check for the first letter of the file name\n    if not file_name[0].isalpha():\n        return 'No'\n    # Check for every letter in the file name after the first\n    for letter in file_name[1:]:\n        if not letter.isalpha():\n            return 'No'\n    # Check the substring before the dot\n    if not file_name[:3].endswith(('txt', 'exe', 'dll')) or not file_name[:2].isupper():\n        return 'No'\n    # Check the substring after the dot\n    if not file_name[-3:].startswith(('.', '.')):\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 271
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    file_name = file_name.split(\".\")\n    if len(file_name) > 3:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 44
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    file_name = file_name.replace(\".\", \"\")\n    if (len(file_name) <= 3):\n        return \"Yes\"\n    elif (file_name.startswith(\"0\") or file_name.startswith(\"1\") or file_name.startswith(\"2\") or file_name.startswith(\"3\")):\n        return \"No\"\n    elif (file_name.endswith(\".\")) or (file_name.endswith(\"exe\")):\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "num_ids": 136
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if(file_name.startswith(\".\")):\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    check_empty = False\n    check_file_name = False\n    for i in file_name:\n        if len(i) >= 3:\n            check_empty = True\n        if '.' not in i:\n            check_file_name = True\n    if check_empty == True or check_file_name == True:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 94
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # There should not be more than three digits ('0'-'9') in the file's name.\n    if len(file_name) < 3:\n        return \"No\"\n    # The file's name contains exactly one dot '.'\n    if not file_name.startswith(\".\"):\n        return \"No\"\n    # The substring before the dot should not be empty, and it starts with a letter from\n    # the latin alphapet ('a'-'z' and 'A'-'Z').\n    if file_name[0] not in ['a', 'z', 'A']:\n        return \"No\"\n    # The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    if file_name[1:].lower() not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    # The file's name contains exactly one dot '.'\n    if file_name[1]!= '.':\n        return \"No\"\n    return \"Yes\"\n",
        "num_ids": 239
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not file_name.startswith(\"0\"):\n        return \"No\"\n    if len(file_name) < 4 or file_name[-1] == '.':\n        return \"No\"\n    if not file_name[0] in \"0123456789\":\n        return \"No\"\n    if not all(c.isdigit() for c in file_name[1:]):\n        return \"No\"\n    if file_name[0] == '.':\n        return \"No\"\n    if file_name[-1] == '.':\n        return \"No\"\n    if '.' not in file_name:\n        return \"No\"\n    return \"Yes\"\n",
        "num_ids": 165
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    error = []\n    \n    # Checking if the file contains a number or a letter\n    if (file_name[0].isdigit() or file_name[0].isalpha()):\n        error.append(\"File name should not contain a number or a letter\")\n        return (\"No\", error)\n    \n    # Checking if the name has a dot\n    if (file_name[1:].count('.')!= 0):\n        error.append(\"File name should not have a dot\")\n        return (\"No\", error)\n    \n    # Checking if the name starts with a letter\n    if file_name[0].isalpha() == False:\n        error.append(\"File name should be only letters\")\n        return (\"No\", error)\n    \n    # Checking if the name contains only digits\n    if file_name[0].isdigit() == False:\n        error.append(\"File name should be only digits\")\n        return (\"No\", error)\n    \n    # Checking if the substring before the dot should be empty\n    if file_name[2:].count('.') == 0:\n        error.append(\"File name should not start with a dot '.'\")\n        return (\"No\", error)\n    \n    # Checking if the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    if file_name[-1] not in ['txt', 'exe', 'dll']:\n        error.append(\"File name should be one of these: ['txt', 'exe', 'dll']\")\n        return (\"No\", error)\n    \n    return (\"Yes\", error)\n",
        "num_ids": 371
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: complete this function\n    if not file_name:\n        return 'No'\n    for char in file_name:\n        if not char.isdigit():\n            return 'No'\n        if len(file_name)<4:\n            return 'No'\n    return 'Yes'\n",
        "num_ids": 73
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3 == 0 or i%4 == 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum_squares_list = [value ** 2 for value in lst if value % 3!= 0 or value % 4!= 0]\n    sum_squares_list = sum(sum_squares_list)\n    return sum_squares_list",
        "num_ids": 60
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum_of_squares = 0\n    for i in lst:\n        sum_of_squares += i * i\n    return sum_of_squares",
        "num_ids": 39
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # c = [a**3 for a in lst if is_multiple(a,3)]\n    # d = [a**4 for a in lst if is_multiple(a,4)]\n    \n    for i in lst:\n        if i % 3 == 0:\n            c = [a**3 for a in lst if is_multiple(a,3)]\n        elif i % 4 == 0:\n            d = [a**4 for a in lst if is_multiple(a,4)]\n        else:\n            d = [a**3 for a in lst if is_multiple(a,3)]\n            c = [a**4 for a in lst if is_multiple(a,4)]\n",
        "num_ids": 168
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # I will check which elements are less than or equal to -1 and which are greater than or equal to 0.\n    sum = 0\n    for num in lst:\n        if num < 0:\n            sum += num*num\n        elif num == 0:\n            sum += 1\n        elif num % 3 == 0:\n            sum += num*num\n        else:\n            sum += num*num*num\n    return sum\n",
        "num_ids": 101
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3 == 0 and i%4!= 0:\n            sum += i\n        elif i%4 == 0 and i%3!= 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3 == 0 and i%4 == 0:\n            sum += i**2\n        elif i%3 == 0:\n            sum += i**2\n        elif i%4 == 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 74
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    output = 0\n    if len(lst) == 0:\n        return output\n    for index in range(len(lst)):\n        if index % 3!= 0 and index % 4!= 0:\n            lst[index] = lst[index] ** 2\n        if index % 3!= 0:\n            lst[index] = lst[index] ** 3\n        if index % 4!= 0:\n            lst[index] = lst[index] ** 4\n    output = sum(lst)\n    return output\n",
        "num_ids": 129
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sum += i\n        elif i % 4 == 0:\n            sum += i * i\n    return sum\n",
        "num_ids": 56
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        if i % 4!= 0:\n            result += lst[i] ** 3\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sentence = sentence.lower()\n",
        "num_ids": 10
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sentence.split(\" \")\n",
        "num_ids": 10
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    split = sentence.split(\" \")\n    temp = []\n    for word in split:\n        if len(word) > 1:\n            temp.append(word)\n",
        "num_ids": 41
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    words = [word for word in sentence.split(' ') if len(word) > 0]\n    result = ''\n    for word in words:\n        # word = word.lower()\n        # if word.isalpha():\n        #     result += word\n        result += word[0].upper()\n        result += word[1:]\n    return result\n",
        "num_ids": 83
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # import pdb; pdb.set_trace()\n    def word_sort(sentence):\n        return sorted(sentence.split())\n    def check_word(word):\n        return len(word) > 1\n    def sum_of_words(sentence):\n        return sum(map(len, word_sort(sentence)))\n    def all_prime(sentence):\n        return all(map(check_word, word_sort(sentence)))\n    def all_prime_until(sentence, result, current):\n        if current == len(sentence):\n            result.append(current)\n            return\n        for i in range(current, len(sentence)):\n            word = sentence[current:i]\n            if all_prime(word):\n                all_prime_until(sentence, result, i + 1)\n",
        "num_ids": 197
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    words = sentence.split(\" \")\n    result = \"\"\n    for word in words:\n        result += word + \" \"\n        result += \" \"\n    result = result.strip()\n    for word in words:\n        if len(word) == 1:\n            continue\n        if word[0] == \" \":\n            continue\n        result = result[:len(word) - 1] + word + result[len(word):]\n    return result",
        "num_ids": 106
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sentence = sentence.split()\n    while sentence:\n        if len(sentence) % 2 == 0:\n            return''.join(sentence)\n        sentence = [item[::-1] for item in sentence]\n        sentence.insert(0,'')\n    return''\n",
        "num_ids": 68
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def words_in_sentence_helper(current_str, prev_str, prev_i, prev_j):\n        if len(current_str) == len(prev_str):\n            return prev_i == prev_j\n        if len(current_str) == 1:\n            return True\n",
        "num_ids": 72
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(sentence) == 0:\n        return sentence\n",
        "num_ids": 16
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = sentence.split()\n    if len(s) < 2:\n        return sentence\n",
        "num_ids": 23
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n    try:\n        x = float(x)\n        n = float(n)\n        return x * n == int(x*n)\n    except:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return False",
        "num_ids": 4
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    try:\n        n = int(n)\n    except:\n        return False\n    try:\n        n = float(n)\n    except:\n        return False\n    if n == 0:\n        return False\n    for i in range(1, n + 1):\n        if x == \"1/{}\".format(i) or x == \"{}/{}\".format(i, n):\n            return True\n    return False\n",
        "num_ids": 103
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #simplify(\"3/8\", \"4/8\") = True\n    #simplify(\"5/5\", \"2/2\") = True\n    #simplify(\"6/3\", \"4/3\") = True\n    n = int(n)\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == n // 2:\n        return True\n    if n == n * 2:\n        return True\n    if n == n * 3:\n        return True\n    if n == n * 4:\n        return True\n    if n == n * 5:\n        return True\n    if n == n * 6:\n        return True\n    if n == n * 7:\n        return True\n    if n == n * 8:\n        return True\n    if n == n * 9:\n        return True\n    if n == n * 10:\n        return True\n    return False\n    \n",
        "num_ids": 221
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return simplify_expr(x, n, 0)\n",
        "num_ids": 14
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return True\n    if n == \"0\":\n        return False\n    \n    if simplify(x.replace(\"/\",\"\").replace(\"-\",\"\"), n[1:]) or simplify(x.replace(\"/\",\"\"), n[0:1]):\n        return simplify(x.replace(\"/\",\"\").replace(\"-\",\"\"), n[1:]) or simplify(x.replace(\"/\",\"\"), n[0:1])\n    return False\n",
        "num_ids": 107
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    try:\n        x = float(x)\n        n = float(n)\n        if n == 0:\n            return True\n        else:\n            try:\n                x = float(x) / n\n                return x\n            except ZeroDivisionError:\n                return False\n    except Exception as e:\n        print(e)\n        return False\n",
        "num_ids": 83
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return True if simplify_float(x) == simplify_float(n) else False\n",
        "num_ids": 21
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    try:\n        n = int(n)\n        x = str(x)\n        try:\n            assert x.isnumeric() and n.isnumeric() and int(x) == n\n        except:\n            return False\n    except:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    nums.sort(key=lambda num: sum(map(int, map(str, num))))\n    return nums\n",
        "num_ids": 30
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int,str(x))))\n",
        "num_ids": 24
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    nums.sort()\n    return nums\n",
        "num_ids": 13
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    nums.sort(reverse=True)\n    return nums\n",
        "num_ids": 17
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sums = 0\n    for num in nums:\n        sums += num\n    nums.sort(key = lambda x: x*x)\n    return nums\n",
        "num_ids": 42
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sums = []\n    for num in nums:\n        sums.append(int(num))\n    return sorted(sums, reverse=True)",
        "num_ids": 37
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(nums) == 0:\n        return []\n    s = sum(map(lambda x: x % 10, nums))\n    nums.sort(key=lambda x:x%s, reverse=True)\n    return nums",
        "num_ids": 58
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]\n    nums.sort()\n    return nums",
        "num_ids": 65
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += num\n    result = sorted(nums, key=lambda x: sum_of_digits, reverse=True)\n    return resul",
        "num_ids": 58
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = []\n    for num in nums:\n        temp = []\n        for i in str(num):\n            temp.append(int(i))\n        res.append(sum(temp))\n    return sorted(res)\n",
        "num_ids": 55
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2!= 0:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: use the function to count the number of odd numbers and the \n    # number of even numbers\n    odds = 0\n    evens = 0\n    for num in nums:\n        if num >= 10:\n            odds += 1\n        else:\n            evens += 1\n    return odds, evens\n",
        "num_ids": 77
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    def validNumber(n, r, c):\n        if n < -10 or n > 10:\n            return False\n        if r < 1 or r > 99:\n            return False\n        if c < 1 or c > 99:\n            return False\n        return True\n",
        "num_ids": 65
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Write your code here.\n    # print(\"started\")\n    specialFilterOut = []\n    # print(specialFilterOut)\n    for num in nums:\n        if not num > 10 or num < -10:\n            if num % 10!= 0 or num % 2!= 0:\n                specialFilterOut.append(num)\n    # print(specialFilterOut)\n    return len(specialFilterOut)\n    # print(\"ended\")\n",
        "num_ids": 105
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return sum(nums, [])\n    # return len([n for n in nums if n>10 and n%2])\n    # return len([n for n in nums if n>10 and n%10])\n    return len([n for n in nums if n>10 and n%10 and n%10==0 and n%10!=1])\n",
        "num_ids": 87
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    filter = []\n    for num in nums:\n        if num >= 10 and num % 2 == 0:\n            filter.append(num)\n    return len(filter)\n    \n",
        "num_ids": 44
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # return len([elem for elem in nums if elem > 10 and elem[0] > elem[-1]])\n    # return len([elem for elem in nums if elem[0] % 2 == 0 and elem[-1] % 2 == 1])\n    \n    return len([elem for elem in nums if elem[0] % 2!= 0 and elem[-1] % 2!= 1])\n",
        "num_ids": 109
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    return [num for num in nums if num%10!= 0 and num >= 10 and num//10%2 == 0]\n",
        "num_ids": 33
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_num = []\n    for num in nums:\n        if num >= 10 and (num % 2 == 1):\n            new_num.append(num)\n        else:\n            new_num.append(0)\n    return len(new_num)\n",
        "num_ids": 63
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \"\"\"If the array is empty return 0.\n    Else return the number of elements in the array that are greater than \n    10 and both first and last digits of a number are odd.\n    \"\"\"\n    pass\n    \n",
        "num_ids": 51
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = 0\n    for i in range(1, n):\n        triples += a[i] * i\n    return triples\n",
        "num_ids": 57
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 4\n    if n == 4: return 6\n",
        "num_ids": 37
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    a = [0]*n\n    for i in range(1,n+1):\n        a[i] = i * i - i + 1\n    return a[0]",
        "num_ids": 43
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return 3 * (n-1) * (n-2) // 2\n",
        "num_ids": 19
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    a = [1]\n    for i in range(1, n):\n        a.append(a[i-1]*i-i+1)\n    return a[n-1]\n",
        "num_ids": 53
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (n - 1) * (n - 1) // 2\n",
        "num_ids": 17
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n <= 2:\n        return n\n    \n    result = [0] * n\n    for i in range(1, n + 1):\n        result[i - 1] = i + i - 1\n    \n    for i in range(1, n):\n        result[i] = (result[i - 1] * 3) + (i * i) - i + 1\n    \n    return sum(result)\n",
        "num_ids": 99
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Runtime: 248 ms\n    # Memory Usage: 14.5 MB\n    a = [1]\n    for i in range(2, n):\n        a.append(a[i-1] * a[i-2] * a[i-3])\n    return len(a)",
        "num_ids": 68
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    a = [0 for i in range(n+1)]\n    a[0] = 1\n    a[1] = 1\n    \n    for i in range(2, n+1):\n        a[i] = a[i-1] * i\n        a[i] = a[i] % 3\n    \n    return a[n]\n",
        "num_ids": 86
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        count += pow(i, 3) - i\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    def bf_helper(planet1, planet2):\n        '''\n        bf_helper(planet1, planet2) takes the arguments planet1, planet2 and returns a tuple \n        with all planets that are located between them. The tuple should contain one \n        pair for each planet.\n        The function should return a tuple containing all planets whose orbits are \n        located between the orbit of planet1 and the orbit of planet2, sorted by \n        the proximity to the sun.\n        The function should return an empty tuple if planet1 or planet2 are not correct\n        planet names.\n        '''\n        \n        tuple = ()\n        \n        if planet1 in planet2:\n            planet_x = planet1\n            planet_y = planet2\n            \n        elif planet2 in planet1:\n            planet_x = planet2\n            planet_y = planet1\n        \n        else:\n            return tuple\n        \n        for i in planet_x:\n            if i in planet2:\n                i_x = i\n        for i in planet_y:\n            if i in planet1:\n                i_y = i\n        \n        return tuple \n    \n    if planet1 in planet2:\n        planet_x = planet1\n        planet_y = planet2\n        \n    elif planet2 in planet1:\n        planet_x = planet2\n        planet_y = planet1\n        \n    else:\n        return tuple\n    \n    return bf_helper(planet_x, planet_y)\n    ",
        "num_ids": 357
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    #If the planets are incorrect, return an empty tuple.\n    if not planet1 == \"Jupiter\" or not planet1 == \"Saturn\" or not planet1 == \"Uranus\" or not planet1 == \"Neptune\":\n        return ()\n",
        "num_ids": 61
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if planet1 == planet2:\n        return ()\n    elif planet1 == \"Sun\" or planet2 == \"Sun\":\n        return ()\n    else:\n        if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n            return ()\n        elif planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n            return ()\n        else:\n            if planet1 == planet2:\n                return tuple(sorted([\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]))\n            elif planet1 == planet2:\n                return tuple(sorted([\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]))\n",
        "num_ids": 233
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if planet1 == 'Mercury' and planet2 == 'Venus':\n        return ('Saturn', 'Uranus')\n    elif planet1 == 'Venus' and planet2 == 'Mercury':\n        return ('Saturn', 'Uranus')\n    elif planet1 == 'Mercury' and planet2 == 'Uranus':\n        return ('Saturn', 'Uranus')\n    elif planet1 == 'Mercury' and planet2 == 'Uranus':\n        return ('Saturn', 'Uranus')\n    elif planet1 == 'Uranus' and planet2 == 'Mercury':\n        return ('Saturn', 'Uranus')\n    elif planet1 == 'Mercury' and planet2 == 'Uranus':\n        return ('Saturn', 'Uranus')\n    elif planet1 == 'Uranus' and planet2 == 'Mercury':\n        return ('Saturn', 'Uranus')\n    elif planet1 == 'Uranus' and planet2 == 'Uranus':\n        return ('Saturn', 'Uranus')\n    elif planet1 == 'Uranus' and planet2 == 'Venus':\n        return ('Saturn', 'Uranus')\n    elif planet1 == 'Uranus' and planet2 == 'Saturn':\n        return ('Saturn', 'Uranus')\n    elif planet1 == 'Saturn' and planet2 == 'Uranus':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Saturn' and planet2 == 'Uranus':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Saturn' and planet2 == 'Venus':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Saturn' and planet2 == 'Mercury':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Uranus' and planet2 == 'Mercury':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Uranus' and planet2 == 'Venus':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Uranus' and planet2 == 'Uranus':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Venus' and planet2 == 'Uranus':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Venus' and planet2 == 'Mercury':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Uranus' and planet2 == 'Saturn':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Saturn' and planet2 == 'Uranus':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Saturn' and planet2 == 'Mercury':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Saturn' and planet2 == 'Uranus':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Uranus' and planet2 == 'Uranus':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Uranus' and planet2 == 'Saturn':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Saturn' and planet2 == 'Uranus':\n        return ('Uranus', 'Saturn')\n    elif planet1 == 'Uranus' and planet2 == 'Uranus':\n        return ('Uranus', 'Uranus')\n    elif planet1 == 'Uranus' and planet2 == 'Uranus':\n        return ('Uranus', 'Uranus')\n    elif planet1 == 'Uranus' and planet2 == 'Venus':\n        return ('Uranus', 'Uranus')\n    elif planet1 == 'Uranus' and planet2 == 'Saturn':\n        return ('Uranus', 'Uranus')\n    elif planet1 == 'Uranus' and planet2 == 'Saturn':\n        return ('Uranus', 'Uranus')\n    elif planet1 == 'Saturn' and planet2 == 'Uranus':\n        return ('Uranus', '",
        "num_ids": 1024
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if planet1 == planet2:\n        return (\"Sun\", planet1, \"Sun\", planet2, \"Sun\")\n    if planet1[0:3] == planet2[0:3]:\n        if planet1[3] == \"m\":\n            return (\"Mercury\", planet1, \"Mercury\", planet2, \"Mercury\")\n        if planet1[3] == \"j\":\n            return (\"Jupiter\", planet1, \"Jupiter\", planet2, \"Jupiter\")\n        if planet1[3] == \"s\":\n            return (\"Saturn\", planet1, \"Saturn\", planet2, \"Saturn\")\n        if planet1[3] == \"u\":\n            return (\"Uranus\", planet1, \"Uranus\", planet2, \"Uranus\")\n        if planet1[3] == \"n\":\n            return (\"Neptune\", planet1, \"Neptune\", planet2, \"Neptune\")\n    if planet1[0:3]!= planet2[0:3]:\n        return (\"Sun\", planet1, \"Sun\", planet2, \"Sun\")\n",
        "num_ids": 254
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #Convert the input to lowercase\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    \n    #Initialize two tuples\n    A = []\n    B = []\n    \n    #For each planet, create tuples\n    for planet in planet1:\n        if planet == planet2:\n            continue\n        elif planet == \"c\" or planet == \"e\":\n            continue\n        elif planet == \"u\":\n            continue\n        elif planet == \"p\" or planet == \"r\":\n            continue\n        elif planet == \"s\":\n            continue\n        elif planet == \"i\":\n            continue\n        elif planet == \"y\":\n            continue\n        elif planet == \"g\":\n            continue\n        elif planet == \"a\":\n            continue\n        elif planet == \"m\":\n            continue\n        elif planet == \"d\":\n            continue\n        elif planet == \"f\":\n            continue\n        else:\n            A.append(planet)\n    for planet in planet2:\n        if planet == \"c\" or planet == \"e\":\n            continue\n        elif planet == \"u\":\n            continue\n        elif planet == \"p\" or planet == \"r\":\n            continue\n        elif planet == \"s\":\n            continue\n        elif planet == \"i\":\n            continue\n        elif planet == \"y\":\n            continue\n        elif planet == \"g\":\n            continue\n        elif planet == \"a\":\n            continue\n        elif planet == \"m\":\n            continue\n        elif planet == \"d\":\n            continue\n        elif planet == \"f\":\n            continue\n        else:\n            B.append(planet)\n    #Sort the two planets\n    A.sort()\n    B.sort()\n    #Return the result\n    return A, B\n",
        "num_ids": 432
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #planet1 = \"Jupiter\"\n    #planet2 = \"Neptune\"\n    #planet1 = \"Saturn\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Mercury\"\n    #planet2 = \"Venus\"\n    #planet1 = \"Earth\"\n    #planet2 = \"Mars\"\n    #planet1 = \"Mars\"\n    #planet2 = \"Saturn\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Neptune\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Mercury\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Jupiter\"\n    #planet2 = \"Mercury\"\n    #planet1 = \"Jupiter\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Neptune\"\n    #planet2 = \"Saturn\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Mercury\"\n    #planet2 = \"Jupiter\"\n    #planet1 = \"Saturn\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Jupiter\"\n    #planet2 = \"Saturn\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Saturn\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Mercury\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Jupiter\"\n    #planet2 = \"Neptune\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #planet2 = \"Uranus\"\n    #planet1 = \"Uranus\"\n    #plane",
        "num_ids": 1025
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Neptune\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Mercury\", \"Jupiter\", \"Neptune\")\n    elif planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Saturn\", \"Jupiter\", \"Neptune\")\n    elif planet1 == \"Neptune\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Mercury\", \"Jupiter\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Saturn\", \"Uranus\", \"Jupiter\", \"Jupiter\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\", \"Jupiter\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Jupiter\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Uranus\", \"Saturn\", \"Jupiter\", \"Jupiter\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return (\"Uranus\", \"Saturn\", \"Uranus\", \"Jupiter\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Saturn\", \"Jupiter\", \"Jupiter\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Uranus\", \"Saturn\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Saturn\", \"Jupiter\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Saturn\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Uranus\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Saturn\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Uranus\", \"Saturn\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Saturn\", \"Jupiter\", \"Uranus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Uranus\", \"Saturn\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Uranus\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        retur",
        "num_ids": 1026
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    i, planet1, planet2 = planet1, planet2, \"Jupiter\"\n    def get_dist(planet1, planet2):\n        return math.sqrt(math.pow(planet1[\"x\"]-planet2[\"x\"],2)+math.pow(planet1[\"y\"]-planet2[\"y\"],2))\n    def get_dist_fast(planet1, planet2):\n        return math.sqrt(math.pow(planet1[\"x\"]-planet2[\"x\"],2)+math.pow(planet1[\"y\"]-planet2[\"y\"],2))\n    def get_sun_dist(planet1, planet2):\n        return math.pow(planet1[\"x\"]-planet2[\"x\"],2)+math.pow(planet1[\"y\"]-planet2[\"y\"],2)\n    def get_sun_dist_fast(planet1, planet2):\n        return math.pow(planet1[\"x\"]-planet2[\"x\"],2)+math.pow(planet1[\"y\"]-planet2[\"y\"],2)\n    def get_planet_dist(planet1, planet2):\n        if planet1[\"name\"] > planet2[\"name\"]:\n            return get_sun_dist(planet1, planet2)\n        elif planet1[\"name\"] < planet2[\"name\"]:\n            return get_sun_dist_fast(planet1, planet2)\n        else:\n            return get_dist(planet1, planet2)\n    dists = {}\n    for i in planets:\n        if i[\"name\"]==planet1:\n            dists[i[\"name\"]] = get_planet_dist(i, planet2)\n        elif i[\"name\"]==planet2:\n            dists[i[\"name\"]] = get_planet_dist(i, planet1)\n    return dists[planet1][planet2]\ndef nearest_planet(planet1, planet2):\n    '''\n    Given two planet names, find the one that the distance to \n    the Sun is from the closest orbit to the Sun. \n    Example:\n    nearest_planet(\"Venus\", \"Saturn\") ==> \"Saturn\"\n    nearest_planet(\"Jupiter\", \"Mercury\") ==> \"Mercury\"\n    nearest_planet(\"Earth\", \"Mercury\") ==> \"Earth\"\n    '''\n    #Make a dict with the distances to the nearest planet.\n    planet_dist = {}\n    for i in planets:\n        if i[\"name\"]==planet1:\n            planet_dist[i[\"name\"]] = get_dist(i, planet2)\n        elif i[\"name\"]==planet2:\n            planet_dist[i[\"name\"]] = get_dist(i, planet1)\n    #Find the one closest to the sun.\n    dist = min(planet_dist.values())\n    for i in planet_dist:\n        if planet_dist[i]==dist:\n            return i\n    return \"\"\ndef orbit(planet1, planet2):\n    '''\n    Given two planet names, find the name of the orbit closest to the \n    sun.\n    Example:\n    orbit(\"Mercury\", \"Saturn\") ==> \"Saturn\"\n    orbit(\"Jupiter\", \"Mercury\") ==> \"Jupiter\"\n    orbit(\"Mars\", \"Jupiter\") ==> \"Jupiter\"\n    '''\n    #Make a dict with the distances to the closest planet.\n    planet_dist = {}\n    for i in planets:\n        if i[\"name\"]==planet1:\n            planet_dist[i[\"name\"]] = get_dist(i, planet2)\n        elif i[\"name\"]==planet2:\n            planet_dist[i[\"name\"]] = get_dist(i, planet1)\n    #Find the one closest to the sun.\n    dist = min(planet_dist.values())\n    for i in planet_dist:\n        if planet_dist[i]==dist:\n            return i\n    return \"\"\ndef closest_and_nearest(planet1, planet2):\n    '''\n    Given two planet names, return the name of the planet with the closest \n    distance to the sun and the name of the planet closest to the sun. \n    If there is no closest planet to the Sun, then the return value is \n    \"\".\n    Example:\n    closest_and_nearest(\"Jupiter\", \"Saturn\"",
        "num_ids": 1025
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    jupiter = get_jupiter_planet(planet1, planet2)\n    venus = get_venus_planet(planet1, planet2)\n    earth = get_earth_planet(planet1, planet2)\n    mars = get_mars_planet(planet1, planet2)\n    sun = get_sun_planet(planet1, planet2)\n    \n    return (jupiter, venus, earth, mars, sun)\n    \ndef get_sun_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Sun\" planet. \n    You should return a tuple of the sun's name, as a string, which is \n    the name of the planet on the sun. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_sun_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_sun_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_sun_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet1 == \"Sun\"):\n        return ('Sun')\n    \ndef get_jupiter_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Jupiter\" planet. \n    You should return a tuple of the Jupiter's name, as a string, which is \n    the name of the planet on the Jupiter. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_jupiter_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_jupiter_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_jupiter_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet2 == \"Sun\"):\n        return ('Sun')\n    \ndef get_venus_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Venus\" planet. \n    You should return a tuple of the Venus's name, as a string, which is \n    the name of the planet on the Venus. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_venus_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_venus_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_venus_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet1 == \"Venus\"):\n        return ('Venus')\n    \ndef get_earth_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Earth\" planet. \n    You should return a tuple of the Earth's name, as a string, which is \n    the name of the planet on the Earth. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_earth_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_earth_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_earth_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet2 == \"Earth\"):\n        return ('Earth')\n    \ndef get_mars_planet(planet1, planet2):\n    '''\n    A planet with mass = 1 solar mass is called the \"Mars\" planet. \n    You should return a tuple of the Mars's name, as a string, which is \n    the name of the planet on the Mars. \n    The function should return an empty tuple if the planet name is incorrect. \n    Examples\n    get_mars_planet(\"Mercury\", \"Earth\") ==> ('Mercury',)\n    get_mars_planet(\"Mercury\", \"Jupiter\") ==> ('Jupiter',)\n    get_mars_planet(\"Mercury\", \"Saturn\") ==> ('Saturn',)\n    '''\n    if (planet1 == \"Mars\"):\n        return ('Mars')\n    \ndef get_jupiter_planet(planet1, planet2):\n    '",
        "num_ids": 1025
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sorted_list = []\n    \n    for word in lst:\n        if len(word)%2 == 1:\n            if word not in sorted_list:\n                sorted_list.append(word)\n            else:\n                continue\n        else:\n            word = word.lower()\n            sorted_list.append(word)\n    return sorted_list\n",
        "num_ids": 88
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Create a new list of strings that will be sorted\n    sorted_lst = []\n",
        "num_ids": 23
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    result = []\n    lengths = []\n    for word in lst:\n        lengths.append(len(word))\n    \n    for length in lengths:\n        for index in range(len(lst)):\n            if len(lst[index]) % 2 == 1:\n                result.append(lst[index])\n                \n    return sorted(result)\n",
        "num_ids": 90
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst_copy = lst.copy()\n    lst_copy = sorted(lst_copy, key=len)\n    lst_copy.sort()\n    return lst_cop",
        "num_ids": 46
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sorted_list = list()\n",
        "num_ids": 10
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for w in lst:\n        if len(w) % 2!= 0:\n            result.append(w[:len(w)//2])\n        else:\n            result.append(w)\n    result = sorted(result, key=len, reverse=True)\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # get_words = lambda lst: [word for word in lst if len(word) % 2 == 0]\n    # sorted_list_sum = lambda lst: sorted(lst, key=get_words)\n    return sorted(lst, key=lambda x: len(x))",
        "num_ids": 69
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    list_of_strings = [string.strip() for string in lst]\n    list_of_strings = [string.upper() for string in list_of_strings]\n    list_of_strings = list(dict.fromkeys(list_of_strings))\n    list_of_strings = sorted(list_of_strings)\n    return list_of_strings\n",
        "num_ids": 87
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Method 1\n    # O(n)\n    # O(n)\n    sorted_lst = []\n    for i in lst:\n        # Delete the word\n        word = i.lstrip(\" \")\n        if word:\n            sorted_lst.append(word)\n    # Sort the list\n    sorted_lst = sorted(sorted_lst)\n    return sorted_lst\n",
        "num_ids": 100
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sorted_lst = []\n    for item in lst:\n        if len(item) % 2 == 0:\n            sorted_lst.append(item.lower())\n        else:\n            sorted_lst.append(item)\n    return sorted_lst\n",
        "num_ids": 67
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n < 0 or n == 0:\n        return None\n    if n % 2 == 0:\n        return y\n    return x\n",
        "num_ids": 33
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    print(f\"x_or_y(n={n}, x={x}, y={y})\")\n    return (x if n%2==0 else y)\n",
        "num_ids": 40
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n is None:\n        return x\n    elif n in (0, 1):\n        return y\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return 0\n    return y\n",
        "num_ids": 59
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n % 2!= 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 23
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import math\n    import random\n    def check(n):\n        if n == 1:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(5):\n            if n % (5 ** i) == 0:\n                return False\n        return True\n    \n    def random_num():\n        return random.randint(1, 1000)\n    \n    def x_or_y(n, x, y):\n        if check(n) == True:\n            return n\n        else:\n            return random_num()\n    \n    def quicksort(array):\n        if len(array) <= 1:\n            return array\n        else:\n            pivot = array[random.randint(0, len(array) - 1)]\n            left = [i for i in array if i < pivot]\n            right = [i for i in array if i > pivot]\n            return quicksort(left) + [pivot] + quicksort(right)\n        \n    return quicksort(x_or_y(n, x, y))\n    ",
        "num_ids": 262
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # find prime number\n    prime = 2\n    while prime * prime <= n:\n        if n % prime == 0:\n            n = n/prime\n        else:\n            prime += 1\n    \n    # if n is a prime number, it means that x or y is a prime number\n    if n > 0:\n        return x if n % 2 == 0 else y\n    else:\n        return y\n",
        "num_ids": 97
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    x_or_y = 0\n    while n % 2 == 0:\n        n = n / 2\n        x_or_y = x_or_y + 1\n    return n * x_or_y\n",
        "num_ids": 51
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #print(f'x or y: {x or y}')\n    #print(f'x: {x}')\n    #print(f'y: {y}')\n    \n    if x and y:\n        return x\n    elif x:\n        return y\n    else:\n        return n\n",
        "num_ids": 75
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not is_prime(n):\n        return 0\n    else:\n        return x\n",
        "num_ids": 23
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    import math\n    if n % 2 == 0 or n == 1:\n        return 0\n    \n    x = math.floor(math.sqrt(n)) + 1\n    \n    if x % 2 == 0:\n        return x\n    else:\n        return x * y\n        \ndef x_or_y_2(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Examples:\n    for x_or_y_2(7, 34, 12) == 34\n    for x_or_y_2(15, 8, 5) == 5\n    \n    \"\"\"\n    import math\n    if n % 2 == 0 or n == 1:\n        return 0\n    \n    x = math.floor(math.sqrt(n)) + 1\n    \n    if x % 2 == 0:\n        return x\n    else:\n        return x * y\n        \ndef x_or_y_3(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Examples:\n    for x_or_y_3(7, 34, 12) == 34\n    for x_or_y_3(15, 8, 5) == 5\n    \n    \"\"\"\n    import math\n    if n % 2 == 0 or n == 1:\n        return 0\n    \n    x = math.floor(math.sqrt(n)) + 1\n    \n    if x % 2 == 0:\n        return x\n    else:\n        return x * y\n        \ndef prime_tests(n):\n    \"\"\"A simple program which should return the value of n if n is \n    a prime number and should return the value of x otherwise.\n    \n    Examples:\n    for prime_tests(8) == 8\n    for prime_tests(15) == 15\n    \n    \"\"\"\n    import math\n    x = math.floor(math.sqrt(n)) + 1\n    \n    if n % 2 == 0 or n == 1:\n        return 0\n    \n    x = math.floor(math.sqrt(n)) + 1\n    \n    if n % 2 == 0:\n        return n\n    else:\n        return x * x * n\n        \ndef prime_tests_2(n):\n    \"\"\"A simple program which should return the value of n if n is \n    a prime number and should return the value of x otherwise.\n    \n    Examples:\n    for prime_tests_2(8) == 8\n    for prime_tests_2(15) == 15\n    \n    \"\"\"\n    import math\n    x = math.floor(math.sqrt(n)) + 1\n    \n    if n % 2 == 0 or n == 1:\n        return 0\n    \n    x = math.floor(math.sqrt(n)) + 1\n    \n    if n % 2 == 0:\n        return x\n    else:\n        return x * x * n\n        \ndef prime_tests_3(n):\n    \"\"\"A simple program which should return the value of n if n is \n    a prime number and should return the value of x otherwise.\n    \n    Examples:\n    for prime_tests_3(8) == 8\n    for prime_tests_3(15) == 15\n    \n    \"\"\"\n    import math\n    x = math.floor(math.sqrt(n)) + 1\n    \n    if n % 2 == 0 or n == 1:\n        return 0\n    \n    x = math.floor(math.sqrt(n)) + 1\n    \n    if n % 2 == 0:\n        return x\n    else:\n        return x * x * n\n    \ndef prime_tests_4(n):\n    \"\"\"A simple program which should return the value of n if n is \n    a prime number and should return the value of x otherwise.\n    \n    Examples:\n    for prime_tests_4(8) == 8\n    for prime_tests_4(15) == 15\n    \n    \"\"\"\n    import math\n    x = math.floor(math.sqrt(n)) + 1\n    \n    if n % 2 == 0 or n == 1:\n        return 0\n    \n    x = math.floor(math.sqrt(n)) + 1\n    ",
        "num_ids": 1024
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum += i ** 2\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum([el ** 2 for el in lst if el % 2!= 0])\n    \ndef main():\n    '''\n    Write a Python program to find the sum of all the positive integers that are less than 1000.\n    '''\n    print(double_the_difference([9, -2]))\n",
        "num_ids": 74
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total_squares = 0\n    for element in lst:\n        total_squares += element**2\n    return total_squares\n",
        "num_ids": 34
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = 0\n    for x in lst:\n        if x%2!=0:\n            s += x**2\n    return s\n    \ndef get_factors(n):\n    '''\n    Given an integer, return the factors of n\n    \n    get_factors(11) == [1, 1, 2, 2, 3, 3]\n    get_factors(69) == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]\n    '''\n    factors = []\n    i = 2\n    while i**2 <= n:\n        if n%i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n    \ndef super_fast(n):\n    '''\n    Given an integer, return the number of its super-fast divisors.\n    \n    super_fast(5) == 3\n    super_fast(12) == 5\n    '''\n    s = 0\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            s += 2\n    return s\n    \ndef fibonacci_sum_squares(n):\n    '''\n    Given an integer, return the sum of its fibonacci numbers.\n    \n    fibonacci_sum_squares(6) == 7\n    fibonacci_sum_squares(9) == 17\n    fibonacci_sum_squares(17) == 68\n    fibonacci_sum_squares(24) == 98\n    '''\n    fibs = [1, 1]\n    for i in range(2,n+1):\n        fibs.append(fibs[i-1] + fibs[i-2])\n    return fibs[n]\n    \ndef is_prime(n):\n    '''\n    Given an integer, return true if it is a prime number.\n    \n    is_prime(121) == True\n    is_prime(122) == False\n    '''\n    if n == 2:\n        return True\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n%3==0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n%i == 0:\n            return False\n        i += 6\n    return True\n",
        "num_ids": 612
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return 0\n    sum = 0\n    for number in lst:\n        if number % 2 == 1:\n            sum += (number ** 2)\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    double_the_sum = 0\n    for num in lst:\n        double_the_sum += num * num\n    return double_the_sum\n",
        "num_ids": 37
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    double_the_difference = 0\n    for i in lst:\n        if i % 2!= 0:\n            double_the_difference += i**2\n    return double_the_difference\n",
        "num_ids": 50
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Double the number in every element in the list, starting at index 1\n    return sum([int(i) ** 2 for i in lst if i % 2!= 0])\n",
        "num_ids": 42
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum += num ** 2\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num ** 2)\n    return sum(even_lst)\n",
        "num_ids": 51
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result=[]\n    for i in range(len(guess)):\n        result.append(abs(guess[i]-game[i][0]))\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # create a list of guesses\n    guesses = []\n    for i in range(len(game)):\n        guesses.append(guess[i])\n    \n    # create a list of scores\n    score = []\n    for i in range(len(game)):\n        score.append(game[i][0])\n    \n    # create a new list of correct matches\n    correct_matches = []\n    for i in range(len(score)):\n        if score[i] == guesses[i]:\n            correct_matches.append(i)\n    \n    # create a new list of wrong matches\n    wrong_matches = []\n    for i in range(len(score)):\n        if score[i]!= guesses[i]:\n            wrong_matches.append(i)\n    \n    # create a list of the incorrect guesses\n    incorrect_guesses = []\n    for i in range(len(correct_matches)):\n        incorrect_guesses.append(guesses[correct_matches[i]])\n    \n    # create a list of the wrong guesses\n    wrong_guesses = []\n    for i in range(len(score)):\n        wrong_guesses.append(guesses[wrong_matches[i]])\n    \n    # add the correct guesses and wrong guesses to the lists\n    return [sum(correct_matches),sum(wrong_matches),sum(incorrect_guesses),sum(wrong_guesses)]\n    ",
        "num_ids": 349
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # first we check if guess is a square. It will be a list. So we can return it as a list\n    if isinstance(guess,list):\n        if len(guess)!= len(game):\n            return 0\n        \n        # check if guess is a square and if the values are the same, return a zero\n        if all([isinstance(n,int) and n == n for n in guess]):\n            return [0 for _ in range(len(game))]\n        else:\n            return 0\n    else:\n        if isinstance(guess,int) and guess == guess:\n            return 0\n        else:\n            if guess in game:\n                return [game[guess] for _ in range(len(game))]\n            else:\n                return 0\n",
        "num_ids": 186
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    array = []\n    for i in range(len(guess)):\n        if guess[i]==game[i]:\n            array.append(0)\n        else:\n            array.append(abs(guess[i]-game[i]))\n    return array\n",
        "num_ids": 67
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # your code here\n    \n    score = 0\n    guess_set = set(guess)\n    # one line for get all the numbers in the array\n    # for i in range(len(guess_set)):\n    #     score += abs(guess_set.count(guess[i])-guess[i])\n    \n    for i in range(len(guess_set)):\n        if guess[i] == guess[i]:\n            score += guess_set.count(guess[i])\n        elif guess[i] > guess[i]:\n            score += guess_set.count(guess[i])\n        else:\n            score += abs(guess_set.count(guess[i])-guess[i])\n    return score",
        "num_ids": 186
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    score = 0\n    guess = guess.split(\",\")\n    for i in range(0,len(guess)):\n        score += int(guess[i])\n        \n    return score\n        \ndef find_dups(array):\n    \"\"\"Find all the duplicate numbers in the array.\n    \n    example:\n    array = [1,2,2,3,4,5,1,3,4,7]\n    find_dups([1,2,3,4,5,1,3,4,7]) -> [1,3]\n    \"\"\"\n    \n    d=dict()\n    for i in range(0,len(array)):\n        if array[i] not in d:\n            d[array[i]] = 1\n        else:\n            d[array[i]] += 1\n    \n    return list(d.keys())\n    \ndef score_matches(guess,score):\n    \"\"\"You are given a player's guess and a score.\n    If the score is right, you should return an array of the matching numbers in the guess,\n    otherwise return null.\n    \n    example:\n    score_matches(3,12) -> [1,2,3]\n    score_matches(6,12) -> [2,3,5]\n    \"\"\"\n    \n    return [i for i in range(0,len(guess)) if guess[i] == score]\n    \ndef find_match_count(array):\n    \"\"\"Count the numbers in the array that are the same in the player's guess.\n    \n    example:\n    array = [1,2,2,3,4,5,1,3,4,7]\n    find_match_count([1,2,3,4,5,1,3,4,7]) -> 7\n    \"\"\"\n    \n    d=dict()\n    for i in range(0,len(array)):\n        if array[i] not in d:\n            d[array[i]] = 1\n        else:\n            d[array[i]] += 1\n    \n    \n    return list(d.keys())\n    \ndef correct_guess(guess,score):\n    \"\"\"If the guess is correct, you should return 1. Otherwise, return 0.\n    \n    example:\n    guess = 3\n    score = 12\n    correct_guess(3,12) -> 1\n    correct_guess(6,12) -> 0\n    \"\"\"\n    \n    if guess == score:\n        return 1\n    else:\n        return 0\n        \ndef check_if_win(guess,score,guess_list):\n    \"\"\"Return True if the player guessed correctly, or False if he was wrong, and\n    a list of the incorrect guesses. If the player guessed correctly, it should be a list, not an array.\n    \n    ex:\n    check_if_win(\"3\",\"12\",[])\n    check_if_win(\"6\",\"12\",[])\n    \"\"\"\n    \n    if len(guess_list) == len(guess):\n        return guess_list,correct_guess(guess,score)\n    else:\n        return guess_list,correct_guess(guess,score)\n        \ndef first_guess(guess_list):\n    \"\"\"Get the first guess from the player's guess list, which is an array.\n    \n    example:\n    first_guess([])\n    first_guess([3,1,5])\n    first_guess([6,5,3,1])\n    \"\"\"\n    \n    return guess_list[0]\n    \ndef third_guess(guess_list):\n    \"\"\"Get the third guess from the player's guess list, which is an array.\n    \n    example:\n    third_guess([])\n    third_guess([3,1,5])\n    third_guess([6,5,3,1])\n    \"\"\"\n    \n    return guess_list[2]\n    \ndef take_guess(player_guess,score):\n    \"\"\"Get the player's guess after it was in a certain order and return it.\n    \n    example:\n    player_guess = 3\n    score = 12\n    take_guess(3,12) -> 3\n    \"\"\"\n    \n    return player_guess\n    \ndef score_game(guess,scor",
        "num_ids": 1026
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [abs(guess-score) for score,guess in zip(game,guess)]\n    \n    \ndef best_match(game,guesses):\n    \"\"\"\n    Input: game and guesses are lists of each of the same form.\n    Output: the person with the greatest difference from the guesses.\n    \"\"\"\n    return max(guesses, key=lambda guess: compare(game,guess))\n    \n",
        "num_ids": 98
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    score = [0,0,0,0,0,0]\n    guess = sorted(guess)\n    score[0] = max(0,score[0])\n    score[1] = max(0,score[1])\n    score[2] = max(0,score[2])\n    score[3] = max(0,score[3])\n    score[4] = max(0,score[4])\n    score[5] = max(0,score[5])\n    guess_len = len(guess)\n    if guess_len == 1:\n        return score\n    for i in range(guess_len):\n        if guess[i] == guess[i+1]:\n            score[0] += 1\n        elif guess[i]!= guess[i+1]:\n            score[1] += 1\n        else:\n            score[2] += 1\n    return score\n",
        "num_ids": 217
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # The score and guess array are the same size as the array, so we check if they are equal\n    if len(game)!= len(guess):\n        return None\n    # If it is not, then it will return an empty list\n    if guess == []:\n        return []\n    # If it is, then we'll return a list with all the differences\n    # The index of the array is the number of times that the guess was found\n    compare_dict = {}\n    for i in range(len(game)):\n        if guess[i] in compare_dict:\n            compare_dict[guess[i]] += game[i]\n        else:\n            compare_dict[guess[i]] = game[i]\n    # Here we add the difference of every guess to the dictionary\n    for i in range(len(game)):\n        compare_dict[guess[i]] = abs(guess[i]-compare_dict[guess[i]])\n    return compare_dict.values()\n",
        "num_ids": 238
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    score_array = [0 for i in range(guess.size)]\n    score_array[guess.argmax()] = 1\n    print(score_array)\n    print(guess.size)\n    print(score_array.index(max(score_array)))\n    return score_array\n",
        "num_ids": 73
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    extensions_with_same_strength = []\n    extensions_with_first_index = []\n    for extension in extensions:\n        cap = len(extension)\n        sm = len(extension.split())\n        strength = -1\n        for index in range(0, cap):\n            if extension[index].islower():\n                strength += CAP - sm\n            else:\n                strength += sm\n        if strength > 0:\n            extensions_with_same_strength.append(extension)\n            extensions_with_first_index.append(index)\n    \n    best_extension_index = extensions_with_first_index[-1]\n    extension = extensions[best_extension_index]\n    return class_name + '.StrongestExtensionName.' + extension\n",
        "num_ids": 185
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n    # You can assume the input is a valid string\n    # input = input().split('.')\n    # class_name = input[0]\n    # extensions = input[1:]\n    # lst = extensions.split('.')\n    # s = []\n    # for e in lst:\n    #     cap = e.count('A')\n    #     sm = e.count('a')\n    #     s.append(cap - sm)\n    # s.sort(reverse=True)\n    # if s[0] == 0:\n    #     return class_name + '.all_extensions.SErviNGSliCes'\n    # else:\n    #     for c in lst:\n    #         cap = c.count('A')\n    #         sm = c.count('a')\n    #         if cap > sm:\n    #             return c + '.all_extensions.SErviNGSliCes'\n    #         else:\n    #             return c + '.all_extensions.SErviNGSliCes'\n    #     return class_name + '.all_extensions.SErviNGSliCes'\n    return ''.join(extensions).strip('.') + '.all_extensions.SErviNGSliCes'\n",
        "num_ids": 311
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # this function will take in a class as an input and return the best extension\n    # given the extension list and a strength\n    # then we will create a function called strongest_extension\n    # the function will have the same signature as this function.\n    # arguments:\n    #    class_name = the class name\n    #    extensions = a list of the extensions\n    # returns:\n    #    class_name.StrongestExtensionName.\n",
        "num_ids": 104
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(extensions) < 2:\n        return None\n    elif len(extensions) == 2:\n        return extensions[0] + \".\" + extensions[1]\n    else:\n        return extensions[0][:-1] + \".\" + extensions[1][:-1]\n",
        "num_ids": 68
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for extension in extensions:\n        if extension.isupper() and ''.join(extension).isupper():\n            extension = extension.lower()\n            return class_name + '.' + extension + '.StrongestExtensionName'\n",
        "num_ids": 55
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    cap = sum([len(extension.capitalize()) for extension in extensions])\n    sm = sum([len(extension.lowercase()) for extension in extensions])\n    ext = extensions[0]\n    return class_name + '.' + ext + '.StrongestExtensionName.' + ''.join(sorted(cap - sm, reverse=True)[:ext.capitalize().index('.') + 1])\n",
        "num_ids": 95
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #Add your code here\n    if len(extensions) > 0:\n        result = \"\"\n        for extension in extensions:\n            if class_name.startswith(extension):\n                result = extension\n            elif len(extension) >= 2 and extension[0].isupper():\n                result = extension[1:]\n            elif len(extension) >= 2 and extension[0].islower():\n                result = extension[1:]\n            elif len(extension) >= 2 and extension[0] in extension[1:]:\n                result = extension[1:]\n        \n        return result\n    else:\n        return class_name\n",
        "num_ids": 150
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # initialize the list that will be filled with the extensions\n    extensions_list = []\n    \n    # iterate over each element in the list\n    for element in extensions:\n        # if the element is a letter\n        if element[0].isupper():\n            # add it to the list\n            extensions_list.append(element)\n        # if the element is a letter\n        else:\n            # find the highest strength of the extension\n            extensions_list.sort(key=lambda extension: extension[1])\n            # if the extension is the first one\n            if extensions_list[0][1] == 1:\n                # return the extension\n                return element[2:]\n    # if the extension list is empty\n    return 'None'\n",
        "num_ids": 175
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    extension_name = class_name\n    for extension in extensions:\n        extension_name += extension[0].upper() + extension[1:]\n    extension_name += \".StrongestExtensionName\"\n    return extension_name\n",
        "num_ids": 56
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #Extensions = sorted(extensions, key=lambda x: x.lower().count('c'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('s'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('e'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('g'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('i'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('t'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('r'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('t'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('e'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('a'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('b'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('d'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('f'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('j'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('k'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('l'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('n'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('r'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('t'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('v'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('w'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('z'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('y'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('v'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('x'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('i'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('s'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('u'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('j'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('n'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('t'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('w'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('v'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('x'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('i'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('n'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('y'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('s'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('z'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('i'))\n    #Extensions = sorted(extensions, key=lambda x: x.lower().count('j')",
        "num_ids": 1024
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def cycpattern(a,b):\n        for x in b:\n            if a.count(x)>0:\n                return True\n        return False\n    \n    if not cycpattern(a,b):\n        return False\n    else:\n        return cycpattern(a,b)",
        "num_ids": 71
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return b in a[::-1] or (b[::-1] in a and cycpattern_check(a[::-1], b)) or b in a[::-1][::-1]\n    \ndef cycpattern_check2(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check2(\"abcd\",\"abd\") => True\n    cycpattern_check2(\"hello\",\"ell\") => True\n    cycpattern_check2(\"whassup\",\"psus\") => False\n    cycpattern_check2(\"abab\",\"baa\") => False\n    cycpattern_check2(\"efef\",\"eeff\") => True\n    cycpattern_check2(\"himenss\",\"simen\") => False\n",
        "num_ids": 199
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(a)-1):\n        if a[i:i+2] in b:\n            return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if len(a)!= len(b):\n        return False\n    \n    for i in range(len(a)-1):\n        if a[i]!= b[i]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return b in a\n",
        "num_ids": 7
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if is_substring(a, b) == True:\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def rotate(word, a, b):\n        \"\"\"Rotates the given string and returns the new string\n        rotate(word, a, b)\n        => return the word rotated by a, b, new_word\n        \"\"\"\n        if len(word) == 0:\n            return b\n        if len(word) == 1:\n            return word\n        if word[0]!= word[-1]:\n            return rotate(word[1:], a, b)\n        elif a == 1:\n            return word[:-1]\n        elif b == 1:\n            return word[1:]\n        elif a == b:\n            return word + rotate(word[1:], b-1, b)\n        else:\n            return rotate(word[1:], b-1, a)\n    return rotate(a, b, b) == word\n",
        "num_ids": 200
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return True if is_cycpattern(a,b) or is_cycpattern(b,a) or b in a or a in b\n",
        "num_ids": 35
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    b = b.lower()\n    for i in range(len(a)):\n        a = a.replace(a[i],\"\")\n    for j in range(len(a)):\n        for k in range(j,len(a)):\n            if (a[k].lower()==b[i].lower()):\n                continue\n            else:\n                return False\n    return True\n",
        "num_ids": 93
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Tally = 0\n    # while Tally < len(b):\n    #     for i in range(len(a)):\n    #         if a[i] == b[Tally] or a[i].replace(b[Tally],\"\") == b[i]:\n    #             # print(a[i],b[Tally])\n    #             Tally += 1\n    #         else:\n    #             pass\n    #     # Tally += 1\n    #     # return Tally == len(b)\n    #     return Tally >= len(b)\n",
        "num_ids": 135
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            count += 1\n        else:\n            count += 1\n            continue\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even = []\n    odd = []\n    for n in str(num):\n        if int(n) % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n    return (len(even), len(odd))\n",
        "num_ids": 64
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even_odd = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        if num % 2 == 0:\n            even_odd += 1\n        else:\n            even_odd += 1\n        num = num // 10\n    return even_odd\n",
        "num_ids": 68
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even = 0\n    odd = 0\n    for i in str(num):\n        if i.isdigit():\n            if int(i) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "num_ids": 63
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Create a function to count even and odd digits.\n    # You can also return a tuple in which the first item is the count of even digits and the second item is a tuple of all the digits in the number.\n",
        "num_ids": 49
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even = 0\n    odd = 0\n    for i in range(num, 0, -1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "num_ids": 56
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    count = 0\n",
        "num_ids": 11
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even = 0\n    odd = 0\n    if num > 0:\n        while num > 0:\n            num = num // 10\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    else:\n        while num < 0:\n            num = num * -1\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd",
        "num_ids": 102
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return tuple(len(str(num)) % 2, len(str(num)) // 2)\n",
        "num_ids": 24
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even_odd = []\n    odd_count = 0\n",
        "num_ids": 15
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \"\"\"\n    Original source: https://github.com/danielheere/Kaleidxi/blob/master/Utils/int_to_mini_roman.py\n    \"\"\"\n    _units = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n    result = []\n    # /!\\ The loop is run (since m is positive) to obtain the units of m\n    # as this, it may not be the same as m (i.e. divide by 10)\n    # The first item is a unit, the second is a prefix for the unit\n    # The following items are the units\n    for i in range(len(number)):\n        if i == 0:\n            result.append(_units[number[i]])\n        else:\n            prev = result[i - 1]\n            # /!\\ If the previous item is not a prefix, the next\n            # item should be a unit, and the next item is a prefix\n            if prev[0] == 'i':\n                result.append(_units[number[i]] + 'x')\n            else:\n                result.append(_units[number[i]] + 'I')\n    # /!\\  Now, it is a unit, we can have a positive prefix\n    # /!\\  And we can have a negative prefix\n    # /!\\  The if statement in the first item will be executed,\n    #       so when we have a prefix, the loop will end\n    #       (i.e. this is the final item)\n    #       and the next item is a unit, so the loop will continue\n    #       (i.e. the next item)\n    #       and we have a prefix, so we can end\n    #       (i.e. the loop end)\n    #       so the result will be:\n    #       MIIIIIIIIII\n    #       MMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #       MMMMMMMMMMMMMMMM\n    #      ",
        "num_ids": 1024
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    roman_string = \"\"\n    roman_num = {\"I\": 1, \"V\": 5, \"X\": 10, \"L\": 50, \"C\": 100, \"D\": 500, \"M\": 1000}\n    num = 0\n    while number > 0:\n        num = number // roman_num[number%roman_num]\n        if num == roman_num[number%roman_num]:\n            roman_string += number%roman_num\n            number = 0\n        else:\n            roman_string += str(num)\n    return roman_string[::-1]\n",
        "num_ids": 136
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = \"\"\n    # Simple logic for numbers < 4\n    # 1 <= num <= 1000\n    if number <= 0:\n        return number\n    # 1 <= num <= 1000\n    if number == 1:\n        return \"I\"\n    # 1 <= num <= 1000\n    if number == 2:\n        return \"II\"\n    # 2 <= num <= 1000\n    if number == 3:\n        return \"III\"\n    # 3 <= num <= 1000\n    if number == 4:\n        return \"IV\"\n    # 4 <= num <= 1000\n    if number == 5:\n        return \"V\"\n    # 5 <= num <= 1000\n    if number == 6:\n        return \"VI\"\n    # 6 <= num <= 1000\n    if number == 7:\n        return \"VII\"\n    # 7 <= num <= 1000\n    if number == 8:\n        return \"VIIII\"\n    # 8 <= num <= 1000\n    if number == 9:\n        return \"XI\"\n    # 9 <= num <= 1000\n    if number == 10:\n        return \"XII\"\n    # 10 <= num <= 1000\n    if number == 11:\n        return \"XIII\"\n    # 11 <= num <= 1000\n    if number == 12:\n        return \"XIV\"\n    # 12 <= num <= 1000\n    if number == 13:\n        return \"XV\"\n    # 13 <= num <= 1000\n    if number == 14:\n        return \"XVI\"\n    # 14 <= num <= 1000\n    if number == 15:\n        return \"XVII\"\n    # 15 <= num <= 1000\n    if number == 16:\n        return \"XVIII\"\n    # 16 <= num <= 1000\n    if number == 17:\n        return \"XIX\"\n    # 17 <= num <= 1000\n    if number == 18:\n        return \"L\"\n    # 18 <= num <= 1000\n    if number == 19:\n        return \"LIII\"\n    # 19 <= num <= 1000\n    if number == 20:\n        return \"LIX\"\n    # 20 <= num <= 1000\n    if number == 21:\n        return \"LL\"\n    # 21 <= num <= 1000\n    if number == 22:\n        return \"LLII\"\n    # 22 <= num <= 1000\n    if number == 23:\n        return \"LLIII\"\n    # 23 <= num <= 1000\n    if number == 24:\n        return \"LXXX\"\n    # 24 <= num <= 1000\n    if number == 25:\n        return \"LXLII\"\n    # 25 <= num <= 1000\n    if number == 26:\n        return \"LXLIII\"\n    # 26 <= num <= 1000\n    if number == 27:\n        return \"LXLIX\"\n    # 27 <= num <= 1000\n    if number == 28:\n        return \"LX\"\n    # 28 <= num <= 1000\n    if number == 29:\n        return \"LXIII\"\n    # 29 <= num <= 1000\n    if number == 30:\n        return \"LXIX\"\n    # 30 <= num <= 1000\n    if number == 31:\n        return \"LXXIII\"\n    # 31 <= num <= 1000\n    if number == 32:\n        return \"LXXIX\"\n    # 32 <= num <= 1000\n    if number == 33:\n        return \"LXX\"\n    # 33 <= num <= 1000\n    if number == 34:\n        return \"LXXIII\"\n    # 34 <= num <= 1000\n    if number == 35:\n        return \"LXXIX\"\n    # 35 <= num <= 1000\n    if number == 36:\n        return \"LXXX\"\n    # 36 <= num <= 1000\n    if number == 37:\n        return \"LXXXIII\"\n    # 37 <= num <= 1000\n    if number == 38:\n        return \"LXXXIX\"\n    # 38 <= num <= 1000\n    if number == 39:\n        return \"LXX\"\n    # 39 <= num <= 1000\n    if number == 40:\n        return \"LXXIII\"\n    # 40 <= num <= 1000\n    if number == 41:\n        return \"LXXIX\"\n    # 41 <= num <= 1000\n    if number == 42:\n        return \"LXXX\"\n    # 42 <= num <= 1000\n    if number == 43:\n        return \"LXXXIII\"\n    # 43 <= num <= 1000\n    if number == 44:\n        return \"LXXXIX\"\n    # 44 <= num <= 1000\n    if number == 45:\n    ",
        "num_ids": 1025
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def int_to_roman(number):\n        \"\"\"\n        Given an integer, return a string such as 'xii' for the integer, 'ii' for the\n        number of irreducibles, and 'i' for the number of non-irreducibles.\n        Restrictions: 1 <= number <= 1000.\n",
        "num_ids": 75
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    roman = ''\n    val = 1\n    i = 0\n    while number!= 0:\n        while number >= 1000:\n            roman += 'M'\n            number -= 1000\n        while number >= 900:\n            roman += 'CM'\n            number -= 900\n        while number >= 500:\n            roman += 'D'\n            number -= 500\n        while number >= 400:\n            roman += 'CD'\n            number -= 400\n        while number >= 100:\n            roman += 'C'\n            number -= 100\n        while number >= 90:\n            roman += 'XC'\n            number -= 90\n        while number >= 50:\n            roman += 'L'\n            number -= 50\n        while number >= 40:\n            roman += 'XL'\n            number -= 40\n        while number >= 10:\n            roman += 'X'\n            number -= 10\n        while number >= 9:\n            roman += 'IX'\n            number -= 9\n        while number >= 5:\n            roman += 'V'\n            number -= 5\n        while number >= 4:\n            roman += 'IV'\n            number -= 4\n        while number >= 1:\n            roman += 'I'\n            number -= 1\n        roman += '1'\n        number = number // val\n        val += 1\n    return roman\n",
        "num_ids": 296
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    roman_numeral = [\"\", \"\", \"\", \"\"]\n    # Get a list of the terms in the integer number\n    for i in range(1, len(number)):\n        # If this is the first index and the number has only one digit,\n        # we're done.\n        if i == 1:\n            roman_numeral[0] = number[i]\n            continue\n        # If this is a non-first index and the number has at least two digits,\n        # we're done.\n        elif i == 2:\n            roman_numeral[1] = number[i]\n            continue\n        # If we're not on the first or last index, we're doing the\n        # part corresponding to the next index, and add the rest to the\n        # last\n        elif i > 2:\n            roman_numeral[2] = number[i]\n            number = number[0:i] + number[i+2:]\n            # If the next index is not the last index, we're done.\n            if i + 1 < len(number):\n                continue\n            else:\n                roman_numeral[3] = number[i]\n                number = number[0:i] + number[i+2:]\n    # If we didn't find any numbers in the integer, the number\n    # we've found couldn't be converted to a roman numeral.\n    if number == \"\":\n        return \"\"\n    # Convert the number to an roman numeral.\n    return \"\".join(roman_numeral)",
        "num_ids": 354
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    d = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n",
        "num_ids": 73
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    roman = [\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\", \"XI\"]\n    int_to_roman = {1: \"I\",\n                     2: \"V\",\n                     3: \"X\",\n                     4: \"L\",\n                     5: \"C\",\n                     6: \"D\",\n                     7: \"M\",\n                     8: \"XI\"}\n",
        "num_ids": 94
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # if num == 1:\n    #     return 'I'\n    # elif num == 2:\n    #     return 'II'\n    # elif num == 3:\n    #     return 'III'\n    # elif num == 4:\n    #     return 'IV'\n    # elif num == 5:\n    #     return 'V'\n    # elif num == 6:\n    #     return 'VI'\n    # elif num == 7:\n    #     return 'VII'\n    # elif num == 8:\n    #     return 'VIII'\n    # elif num == 9:\n    #     return 'IX'\n    # elif num == 10:\n    #     return 'X'\n    # elif num == 11:\n    #     return 'XI'\n    # elif num == 12:\n    #     return 'XII'\n    # elif num == 13:\n    #     return 'XIII'\n    # elif num == 14:\n    #     return 'XIV'\n    # elif num == 15:\n    #     return 'XV'\n    # elif num == 16:\n    #     return 'XVI'\n    # elif num == 17:\n    #     return 'XVII'\n    # elif num == 18:\n    #     return 'XVIII'\n    # elif num == 19:\n    #     return 'XIX'\n",
        "num_ids": 334
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    roman = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',\n               50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    s = []\n    for i in range(len(number)):\n        val = number[i]\n        if val in roman:\n            s.append(roman[val])\n        else:\n            s.append(val)\n    return ''.join(s)\n",
        "num_ids": 139
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a + b >= c and b + c >= a and a + c >= b:\n        return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Write your code here.\n    # Ask the user if they have entered 'yes' or 'no'.\n    # If they say yes, return True.\n    # Otherwise return False.\n    if (right_angle_triangle_helper(a, b, c)):\n        return True\n    else:\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return (a**2 + b**2 == c**2) and ((a + b == c) or (a + c == c) or (b + c == c))\ndef check_positive_number(number):\n    '''\n    Checks if a number is a positive number.\n    Example:\n    check_positive_number(0) == True\n    check_positive_number(1) == True\n    check_positive_number(1.5) == True\n    check_positive_number(1.0) == True\n    '''\n    if number > 0:\n        return True\n    return False\n",
        "num_ids": 142
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO\n    pass\n",
        "num_ids": 9
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    angle_a = math.acos((a*b*c)/(2*a*b*c))\n    angle_b = math.acos((a*c*b)/(2*a*b*c))\n    angle_c = math.acos((a*c*a)/(2*a*b*c))\n    \n    if(angle_a + angle_b + angle_c >= math.pi):\n        return False\n    \n    if(angle_b == 0 and angle_c == 0):\n        return True\n    \n    if(abs(angle_a-angle_b) > angle_c-angle_a):\n        return False\n    \n    return True\n",
        "num_ids": 164
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sides = [a, b, c]\n    angles = [0, 0, 0]\n    for s in sides:\n        angles[1] = angles[1] + 360\n        angles[2] = angles[2] - 360\n    if angles[0] > angles[1] and angles[0] > angles[2]:\n        return True\n    elif angles[1] > angles[0] and angles[1] > angles[2]:\n        return True\n    elif angles[2] > angles[0] and angles[2] > angles[1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 145
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a, b, c = [int(x) for x in (a, b, c)]\n    if a + b == c or a + c == b or b + c == a:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def is_right_angled(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            return True\n        else:\n            return False\n    if is_right_angled(a, b, c):\n        return True\n    else:\n        return False\n",
        "num_ids": 76
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return (a + b > c and a + c > b and b + c > a) or (a + b > c and a + c > b and b + c > a) or (a + b > c and a + c > b and b + c > a)\n",
        "num_ids": 63
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return max(set(w.upper().replace(\" \", \"\")) for w in words)\n",
        "num_ids": 22
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    word_count = []\n    for word in words:\n        word_count.append(len(word))\n    \n    words.sort(key=lambda word_count: word_count[1])\n    \n    for i in range(len(word_count)):\n        if word_count[i] == 1:\n            return word_count[i+1]\n    \n    return word_count[0]\n    \ndef find_min(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with minimum number\n    of unique characters. If multiple strings have minimum number of unique\n    characters, return the one which comes first in lexicographical order.\n",
        "num_ids": 166
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    words = sorted(words)\n    max_len = 0\n    max_char = 0\n    for word in words:\n        count = len(word)\n        if count > max_len:\n            max_char = count\n            max_len = count\n        if count > max_char:\n            max_char = count\n            max_word = word\n",
        "num_ids": 84
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_count = 0\n    word = \"\"\n    for word in words:\n        count = 1\n        for letter in word:\n            if letter.isalpha():\n                count += 1\n            else:\n                break\n        if count > max_count:\n            max_count = count\n            word = word[:count] + word[count+1:]\n    return word\n",
        "num_ids": 88
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    max_char = 0\n    for word in words:\n        num_ch = 0\n        for ch in word:\n            num_ch += 1\n        if max_char < num_ch:\n            max_char = num_ch\n    return word[:max_char]\n",
        "num_ids": 66
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: implement this function.\n    \"\"\"\n    #return sorted(set(words), key = len)\n    max_length = {}\n    for word in words:\n        if word in max_length:\n            max_length[word] += 1\n        else:\n            max_length[word] = 1\n    for word in words:\n        if max_length[word] > max_length[word+1]:\n            return word\n    return max_length[word+1]\n    \"\"\"\n    #raise NotImplementedError()\n",
        "num_ids": 128
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    unique = set()\n    count = 0\n    for word in words:\n        unique.add(word)\n        if len(word) > count:\n            count = len(word)\n    return unique.pop() if len(unique) > 1 else next(iter(unique))\n",
        "num_ids": 66
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    words = set(words)\n    return words.pop() if len(words) > 0 else None\n",
        "num_ids": 25
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return max(set(words), key = words.count)\n",
        "num_ids": 16
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    def is_unique(str):\n        count = 0\n        for char in str:\n            if char.isalpha():\n                count += 1\n        return count == len(str)\n    \n    words = [str(word) for word in words if is_unique(word)]\n    print(\"find_max([\" + \", \".join(words) + \"]) == \" + str(max(set(words))))\n    print(words)\n    return sorted(words)[0]\n    \nif __name__ == \"__main__\":\n    print(find_max([\"name\", \"of\", \"string\"]))\n    print(find_max([\"aaaaaaa\", \"bb\",\"cc\"]))\n    print(find_max([\"aaaabb\", \"c\", \"aaaa\"]))\n    print(find_max([\"a\", \"bb\", \"a\", \"aa\", \"aa\", \"a\"]))\n    print(find_max([\"aaa\",\"bb\",\"cc\",\"a\"]))\n    print(find_max([\"a\"]))\n    print(find_max([\"a\", \"a\", \"a\", \"a\", \"a\"]))\n    print(find_max([\"aaaaaaa\", \"bb\", \"cc\", \"a\"]))\n    print(find_max([\"aaa\", \"bb\", \"cc\", \"a\"]))\n    print(find_max([\"aa\",\"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]))\n    print(find_max([\"aa\",\"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]))\n    print(find_max([\"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]))\n    print(find_max([\"aaaaaaa\", \"bb\", \"cc\", \"a\"]))\n    print(find_max([\"aaaaaaa\", \"bb\", \"cc\", \"aa\"]))\n    print(find_max([\"aaaaaaa\", \"bb\", \"cc\", \"aa\", \"aa\"]))\n    print(find_max([\"aaaaaaa\", \"bb\", \"cc\", \"a\", \"aa\"]))\n    print(find_max([\"aaaaaaa\", \"bb\", \"cc\", \"aa\", \"aa\", \"aa\"]))\n    print(find_max([\"aaaaaaa\", \"bb\", \"cc\", \"a\", \"aa\", \"aa\", \"aa\"]))\n    print(find_max([\"aaa\",\"bb\",\"cc\", \"a\"]))\n    print(find_max([\"aaa\",\"bb\",\"cc\", \"aa\"]))\n    print(find_max([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]))\n    print(find_max([\"a\", \"a\", \"a\", \"a\", \"a\"]))\n    print(find_max([\"aaaaaaaaa\", \"bb\", \"cc\", \"a\"]))\n    print(find_max([\"aaaaaaaaa\", \"bb\", \"cc\", \"aa\"]))\n    print(find_max([\"aaaaaaaaa\", \"bb\", \"cc\", \"aa\", \"aa\"]))\n    print(find_max([\"aaaaaaaaa\", \"bb\", \"cc\", \"aa\", \"aa\", \"aa\"]))\n    print(find_max([\"aaaaaaaaa\", \"bb\", \"cc\", \"aa\", \"aa\", \"aa\", \"aa\"]))\n    print(find_max([\"aaaaaaaaa\", \"bb\", \"cc\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]))\n    print(find_max([\"aaaaaaaaa\", \"bb\", \"cc\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]))\n    print(find_max([\"aaaaaaaaa\", \"bb\", \"cc\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]))\n    print(find_max([\"aaaaaaaaa\", \"bb\", \"cc\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]))\n    print(find_max([\"aaaaaaaaa\", \"bb\", \"cc\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]))\n    print(find_max([\"aaaaaaaaa\", \"bb\", \"cc\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"]))\n    print(find_max([\"aaaaaaaaa\", \"bb\", \"cc\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\", \"aa\"])",
        "num_ids": 1024
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    remaining -= number\n    if remaining <= 0:\n        return [need, remaining]\n    \n    tot_eat = eat_num(need, remaining)\n    eat_num(tot_eat, remaining)\n    return [tot_eat, remaining]\n",
        "num_ids": 63
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if need <= 0:\n        return [number, need]\n    if remaining <= 0:\n        return [number]\n    \n    result = []\n    if number > need:\n        result.append(number)\n        result.extend(eat(number - need, need, remaining - need))\n    else:\n        result.append(need)\n        result.extend(eat(number, need - need, remaining))\n",
        "num_ids": 99
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # \"Optional\"\n    \n    # Process\n    # \"Optional\"\n    remaining -= need\n    if remaining < 0:\n        remaining = 0\n        \n    # Do calculation\n    # \"Optional\"\n    total = number + need\n    \n    # Return\n    # \"Optional\"\n    return [total, remaining]\n",
        "num_ids": 80
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    remaining_taken = remaining // need\n    remaining = remaining % need\n    \n    if remaining_taken == 0:\n        # if remaining is 0, it means you have eaten the whole day, not enough remaining carrots.\n        # So you still will be hungry.\n        return [number, remaining]\n    \n    else:\n        # if the number of remaining carrots can be left, it means the day is finished.\n        # So we will eat more carrots to complete the meal.\n        # it will still be hungry.\n        # So you will be hungry.\n        return [number + remaining_taken, remaining_taken]",
        "num_ids": 145
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    total = number - need\n    left = remaining\n    \n    if total <= 0:\n        return [total, left]\n    \n    if left <= 0:\n        remaining = remaining - left\n        return eat(total, need, remaining)\n    else:\n        total -= left\n        return [total, left]\n",
        "num_ids": 75
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    total = 0\n    total += number\n    total += need\n    total += remaining\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    remaining -= number\n    if remaining < 0:\n        remaining = 0\n    if remaining >= number:\n        remaining -= need\n        return [number, remaining]\n",
        "num_ids": 41
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if need > remaining:\n        return [remaining, need]\n    else:\n        if need <= remaining:\n            return [number, need]\n        else:\n            result = eat(number - need, need, remaining - number)\n            if result == [number, need]:\n                return [remaining, need]\n            else:\n                result[0] += result[1]\n                return result\n",
        "num_ids": 94
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    remaining -= need\n    if remaining < 0:\n        remaining = 0\n    return [ number, remaining ]\n",
        "num_ids": 28
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    remaining -= need\n    \n    if remaining > 0:\n        return [ need, remaining ]\n    else:\n        return [ 0, 0 ]\n",
        "num_ids": 38
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # You may not use list comprehension for this challenge.\n    # Use the following two lists as an example.\n    operator_list = ['-', '+', '*', '//']\n    operand_list = [2, 3, 4, 5]\n",
        "num_ids": 60
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n    if operator:\n        result = 0\n        for i in range(len(operator)):\n            result += operator[i] * operand[i]\n        return result\n    else:\n        return 'Error: operator list is empty.'\n",
        "num_ids": 62
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = 0\n    for i in range(len(operand)):\n        if operator[i] == operator[i+1]:\n            result += operand[i]\n        else:\n            result = do_algebra(operator[i], operand[i+1])\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if operator == None or operand == None:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if operator['+'] == '+' and len(operator['+']) == len(operand) - 1:\n        operator['+'] = operator['+'] + operand[len(operator['+']) - 1]\n        operand.append(operand.pop(len(operand) - 1))\n        result = operator['+']\n    elif operator['+'] == '-':\n        operator['+'] = operator['+'] + operand[len(operator['+']) - 1]\n        operand.append(operand.pop(len(operand) - 1))\n        result = operator['+']\n    elif operator['+'] == '*' and len(operator['+']) == len(operand):\n        operator['+'] = operator['+'] + operand[len(operand) - 1]\n        operand.append(operand.pop(len(operand) - 1))\n        result = operator['+']\n    elif operator['+'] == '*' and len(operator['+']) < len(operand):\n        operand.append(operand.pop(len(operand) - 1))\n        result = operator['+']\n    elif operator['+'] == '//' and len(operator['+']) == len(operand):\n        operator['+'] = operator['+'] + operand[len(operand) - 1]\n        operand.append(operand.pop(len(operand) - 1))\n        result = operator['+']\n    elif operator['+'] == '//' and len(operator['+']) < len(operand):\n        operand.append(operand.pop(len(operand) - 1))\n        result = operator['+']\n    elif operator['+'] == '**' and len(operator['+']) == len(operand):\n        operator['+'] = operator['+'] + operand[len(operand) - 1]\n        operand.append(operand.pop(len(operand) - 1))\n        result = operator['+']\n    elif operator['+'] == '**' and len(operator['+']) < len(operand):\n        operand.append(operand.pop(len(operand) - 1))\n        result = operator['+']\n    elif operator['+'] == '*' and len(operator['+']) == len(operand):\n        operator['+'] = operator['+'] + operand[len(operand) - 1]\n        operand.append(operand.pop(len(operand) - 1))\n        result = operator['+']\n    elif operator['+'] == '*' and len(operator['+']) < len(operand):\n        operand.append(operand.pop(len(operand) - 1))\n        result = operator['+']\n    else:\n        result = 0\n    return result\n",
        "num_ids": 684
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(operator)!= len(operand):\n        raise ValueError(\"Operator and operand must be of the same length.\")\n    \n    array = list(range(len(operand)))\n",
        "num_ids": 47
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #basic algebra operations\n    operator['+', '*', '-']\n    return operator[operand[0]][operand[1]]\n",
        "num_ids": 35
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Step 1:\n    # Take the first operator and the operand lists and iterate through them.\n    # Do the basic operations:\n    # Addition ( + )\n    # Subtraction ( - )\n    # Multiplication ( * )\n    # Floor Division ( // )\n    # Exponentiation ( ** )\n",
        "num_ids": 76
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    array = []\n    for el in operand:\n        array.append(el)\n",
        "num_ids": 24
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = 0\n",
        "num_ids": 6
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #this is a very simple solution that uses the outer loop \n    #or the inner loop.\n    ans = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            ans += s[i].upper() if s[i].isupper() else s[i].lower()\n        else:\n            ans += s[i]\n    return ans\n",
        "num_ids": 92
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not s:\n        return \"\"\n    if len(s) == 1:\n        return s[0]\n    return solve(s[1:]) + s[0]\n",
        "num_ids": 43
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join(s.replace('A', 'Z').replace('a', 'z').replace('B', 'a').replace('b', 'a').upper()[::-1] if 'A' <= s[i] <= 'Z' else s[i].lower() + s[i].upper()[::-1])\n",
        "num_ids": 77
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = list(s)\n    \n    for i in range(len(s)):\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            s[i] = s[i].upper()\n        else:\n            s[i] = s[i].lower()\n    return ''.join(s)\n",
        "num_ids": 102
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: return the result\n    return s.upper()\n",
        "num_ids": 17
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # This is a pattern of bookmarks. \n    # There is only one letter in each bookmarks.\n    # If the bookmark is not a letter, it is added to the end of the string.\n    # If the bookmark is a letter, it is added to the front of the string.\n    # If the bookmark is a character, it is added to the end of the string.\n    # If it is not a letter, it is added to the end of the string.\n    # Make it an array in which we store the bookmarks in order.\n    # The answer is the one string after the bookmarks.\n    def solve_helper(s, index, char):\n        if s[index]!= char:\n            s[index] = char\n            return solve(s)\n        return solve_helper(s, index + 1, char)\n    \n    # The answer is the one string after the bookmarks.\n    def solve_helper2(s, index, char):\n        if s[index]!= char:\n            s[index] = char\n            return solve_helper(s, index + 1, char)\n        return solve_helper2(s, index + 1, char)\n    \n    return solve_helper2(s, 0, \"\")\n",
        "num_ids": 294
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = \"\"\n    for letter in s:\n        if letter.isalpha():\n            result += letter.upper() if letter.islower() else letter.lower()\n        else:\n            result += letter\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if s[0] not in \"abcdefghijklmnopqrstuvwxyz\":\n        return s[::-1]\n    else:\n        return s[::-1].upper() + s[::-1].lower()\n    \n",
        "num_ids": 61
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    i = 0\n    string = \"\"\n    while i < len(s):\n        if s[i].islower():\n            string += s[i].upper()\n        else:\n            string += s[i].lower()\n        i += 1\n    return string[::-1]\n",
        "num_ids": 68
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = list(s)\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i] == 'A' or s[i] == 'C':\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        i += 1\n    return ''.join(s)",
        "num_ids": 96
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    hash = hashlib.md5()\n    if len(text) == 0:\n        return None\n",
        "num_ids": 25
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    text = str(text)\n    if text == \"\":\n        return None\n    return md5(text).hexdigest()\n",
        "num_ids": 32
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    md5 = md5.hexdigest()\n    return md5\n",
        "num_ids": 46
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    text = str(text)\n    assert len(text) % 16 == 0, \"MD5 length has to be a multiple of 16.\"\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n",
        "num_ids": 71
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    text = text or \"\"\n    hash = hashlib.md5(text.encode(\"utf-8\")).hexdigest()\n    return hash or None\n",
        "num_ids": 38
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    text = text.encode('utf-8')\n    md5 = hashlib.md5()\n    md5.update(text)\n    return md5.hexdigest()",
        "num_ids": 43
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n",
        "num_ids": 49
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for n in range(a, b+1):\n        if n % 2 == 0:\n            result.append(n)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Add your Python code here\n    return [x for x in range(a, b+1) if x % 2 == 0]\n",
        "num_ids": 32
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    digits = []\n    num = a\n    while num > b:\n        digits.append(num % 10)\n        num = num // 10\n    if num!= 0:\n        digits.append(num)\n    digits.sort()\n    return digits",
        "num_ids": 64
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for i in range(a, b+1):\n        result.append(i)\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    num = []\n    \n    for i in range(a, b+1):\n        num.append(i)\n    \n    return num",
        "num_ids": 36
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [num for num in range(a, b+1) if num%2==0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a = list(str(a))\n    b = list(str(b))\n    for i in range(len(a)):\n        if int(a[i]) == int(b[i]):\n            continue\n        else:\n            return []\n    return a\n",
        "num_ids": 65
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Insert your code here\n    # get the even numbers\n    even_numbers = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "num_ids": 65
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    evens = []\n    \n    i = 0\n    while (i < a):\n        if (i % 2 == 0):\n            evens.append(i)\n            i = i + 1\n        else:\n            i = i + 1\n    \n    i = 0\n    while (i < b):\n        if (i % 2 == 0):\n            evens.append(i)\n            i = i + 1\n        else:\n            i = i + 1\n    \n    return evens\n",
        "num_ids": 120
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: write this function\n    if a > b:\n        return []\n",
        "num_ids": 21
    }
]