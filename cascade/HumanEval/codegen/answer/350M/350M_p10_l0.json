[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for n in numbers:\n        if abs(n - min(numbers)) < abs(n - threshold):\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # check all numbers are between 0 and 1\n    for element in numbers:\n        if element < 0.0 or element > 1.0:\n            return False\n    # find all numbers whose distance is closer to each other\n    # to 0.0\n    # this is an easy way to test if two numbers are closer than given threshold\n    close_elements = [element for element in numbers if abs(element - 0.0) <= threshold]\n    # return whether any two elements are closer than threshold\n    return len(close_elements) > 0\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(numbers) < 3: return False\n    elif (numbers[0] - numbers[1]) < threshold or (numbers[1] - numbers[2]) < threshold:\n        return False\n    else:\n        for i in range(2, len(numbers)):\n            if (numbers[i] - numbers[i - 1]) < threshold:\n                return False\n        return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for n in numbers:\n        if abs(n - n.x) <= threshold and abs(n - n.y) <= threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: calculate the close number of each number and compare with threshold\n    close_num = 0\n    for number in numbers:\n        if number - threshold <= 0.0:\n            close_num += 1\n    return close_num >= 2\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Check if numbers are close\n    for number in numbers:\n        # Check if the difference between them is less than the threshold\n        if abs(number - number) < threshold:\n            # return False\n            return False\n    # return True\n    return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(numbers) < 2:\n        return False\n    for number in numbers:\n        if abs(number - numbers[0]) < threshold:\n            return False\n    return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) > threshold:\n            return False\n    return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len(numbers) >= 3\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert len(paren_string) > 0, \"Error: string is empty\"\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if paren_string == ')':\n        return []\n    elif paren_string[0] == '(':\n        # if the first brace has a closed brace,\n        # then the inner ( or ) must not be part of a group\n        # so just remove the first char and continue\n        new_string = paren_string[1:]\n        if new_string == ')':\n            return separate_paren_groups(new_string)\n        else:\n            # we are still expecting something to be (\n            # ( because a )b ) c )d\n            # so a is enclosed by a and b is enclosed by a and c is enclosed by b\n            # so we can remove the first char and continue\n            # so we remove the last char and leave the previous part\n            # the new string will be a c )b\n            return separate_paren_groups(new_string[:-1]) + separate_paren_groups(new_string[-1:])\n    else:\n        return separate_paren_groups(paren_string[1:]) + separate_paren_groups(paren_string[:-1])\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Note: the list will be a string with multiple groups of nested parentheses, we need to make it a list\n    groups = []\n    for brace in paren_string.split(')'):\n        # Here we create a separate string for each brace. Each brace will be enclosed in a list of strings\n        # The goal here is to put the closing paren in the beginning of each string, and then separate the\n        # strings in a list.\n        # We also need to make sure that the separator is closed, and we only put the closing paren\n        # in the end of the list\n        # When we close the closing paren, we separate it out\n        separated = []\n        for part in brace.split(','):\n            # Here we split the separator into separate strings, and then separate each string into a list.\n            # The way we do this is the following:\n            # 1. check the is a space or not\n            # 2. if it is a space, we put it in a list with a single string, then we need to add that list to the end of the separator\n            # 3. if it is not a space, we split the string at the space, and then we add the list of strings to the end of the separator\n            # 4. if it is not a space, then the string is already in the list, we don't need to add the list to the end\n            if'' in part:\n                separated.append(part)\n            else:\n                separated.append(part.split())\n        # We also put the closing paren in the end of the separate list\n        separated.append(brace.split(','))\n        groups.append(''.join(separated))\n    return groups\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Split the string into a list\n    paren_list = paren_string.split(\" \")\n    # All the letters are the same\n    if len(paren_list)!= len(set(paren_list)):\n        return []\n    # First iteration is an empty string\n    if len(paren_list) == 0:\n        return []\n    # A list of strings\n    separate_strings = []\n    # Loop through all of the values\n    for char in paren_list:\n        # Find the index of the char in the string\n        pos = paren_list.index(char)\n        # Check if the index is a closed bracket\n        if paren_list[pos] == \"(\":\n            # If so, add the brackets to the list\n            if separate_paren_groups(paren_list[:pos] + \")\" + paren_list[pos:]):\n                # If the list is not empty then append to the list\n                separate_strings.extend(separate_paren_groups(paren_list[:pos] + \")\" + paren_list[pos:]))\n            # If there is a closing bracket, also remove it from the list\n            else:\n                separate_strings.extend(separate_paren_groups(paren_list[:pos] + \")\"))\n        else:\n            separate_strings.append(char)\n    # Return the list of strings\n    return separate_strings\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Initialize the output\n    output = []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    group_size = 0\n    group = []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    paren_list = []\n    paren_stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_stack.append(paren_string[i])\n        elif paren_string[i] == ')':\n            while (len(paren_stack) > 0) and paren_stack[-1]!= '(':\n                paren_list.append(paren_stack.pop())\n            paren_stack.pop()\n        else:\n            paren_list.append(paren_string[i])\n        i += 1\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # If the string is empty, it is not balanced\n    if paren_string == '':\n        return []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    ans = []\n    stack = []\n    for char in paren_string:\n        if char == ')':\n            if stack:\n                ans.append(stack[-1])\n                stack.pop()\n            else:\n                ans.append(')')\n        elif char == '(':\n            stack.append(char)\n        elif not stack:\n            ans.append(char)\n    return ans\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [string.strip() for string in paren_string.split(')') if string.strip()]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return int(number * 10) / 10\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    truncated_number = int(number)\n    return truncated_number\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if number <= 0.0:\n        return 0.0\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return round(number / 10 ** -1, 3)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    intpart, decimalpart = math.trunc(number).as_integer_ratio()\n    return number / 10 ** intpart\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    decimals = 0\n    number = abs(number)\n    while abs(number) > 1:\n        digits = 0\n        remainder = number % 10\n        number = int(number / 10)\n        while number!= 0:\n            digits += 1\n            number = int(number / 10)\n        decimals += digits\n        if decimals > 0:\n            remainder = int(remainder / 10)\n    return remainde"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # number = int(number)\n    # whole_part = int(number / 10)\n    # decimals = int(number % 10)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # if number is decimal\n    if math.isnan(number) or math.isinf(number):\n        return None\n    # else number is integer\n    if number < 0:\n        return None\n    # else number is positive\n    if number > 0:\n        return round(number, -1)\n    # else number is negative\n    else:\n        return None\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    int_part = int(number)\n    int_part_str = str(int_part)\n    decimals = len(int_part_str) - 1\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return number/10\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if operations[0] == 0:\n        return False\n    elif operations[0] < 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total_balance = 0\n    for operation in operations:\n        if operation == 0:\n            total_balance = 0\n        else:\n            total_balance += operation\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if operations[0] == 0:\n        return False\n    elif operations[0] > 0:\n        for i in range(1, len(operations)):\n            if operations[i] < 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # Your code here\n    if operations[0] == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Your code here\n    prev_val = 0\n    for operation in operations:\n        val = operation - prev_val\n        if val < 0:\n            return False\n        prev_val = operation\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return not any(operations)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    balances = []\n    for op in operations:\n        balances.append(op)\n    for i in range(len(balances) - 1):\n        if balances[i] < 0:\n            return False\n        elif balances[i] == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if operations[0]!= 0:\n        return False\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sum(map(lambda x: (x - x_mean) ** 2, numbers)) ** 0.5\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    mean = sum(numbers)/len(numbers)\n    m = 0\n    for x in numbers:\n        m += abs(x - mean)\n    m = m / len(numbers)\n    return m\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    x = []\n    y = []\n    # collect all elements\n    for number in numbers:\n        x.append(number)\n        y.append(number)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum([(x - x.mean()) ** 2 for x in numbers]) ** 0.5\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    for number in numbers:\n        sum += abs(number - mean(numbers))\n    mean = sum / len(numbers)\n    sum = 0\n    for number in numbers:\n        sum += (number - mean)**2\n    mean = sum / len(numbers)\n    return mean\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(numbers) <= 1:\n        raise Exception('Input list must not be empty.')\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    m, sd = 0, 0\n    for n in numbers:\n        m += (n - numbers.mean()) ** 2\n        sd += (n - numbers.mean()) ** 2\n    return (m / len(numbers)) / (sd / (len(numbers) - 1))\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \"\"\"\n    Returns the Mean Absolute Deviation, calculated as:\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    2.66666666666666666\n    \"\"\"\n    mean = sum(numbers)/len(numbers)\n    sum_x = 0.0\n    sum_y = 0.0\n    for i in numbers:\n        sum_x = sum_x + (i - mean)**2\n        sum_y = sum_y + (i - mean)**2\n    return (sum_x**0.5) + (sum_y**0.5)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: Write your code here\n    mad = 0\n    for number in numbers:\n        mad += (abs(number - numbers.mean()) ** 2)\n    return round(mad / len(numbers), 2)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: your code here\n    if len(numbers) == 0:\n        return 0.0\n    mean = statistics.mean(numbers)\n    sum = 0.0\n    for number in numbers:\n        sum += (number - mean)**2\n    return (sum / len(numbers))**0.5\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x+delimeter for x in numbers]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(numbers) == 0:\n        return []\n    output = [numbers[0]]\n    for i in range(len(numbers)):\n        if numbers[i]!= output[-1] and numbers[i]!= output[-2]:\n            output.append(numbers[i])\n    return output + [delimeter]"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return numbers + [delimeter] * (len(numbers) - len(numbers) % len(numbers)"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # note this is the same as `numbers' inside `intersperse`\n    # so it doesn't matter if it's delimeter *or* not\n    return numbers + [delimeter] * (numbers.index(numbers[-1]) + 1)\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return numbers + [delimeter] * (len(numbers) - len(numbers) % len(numbers))\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    numbers.insert(0, delimeter)\n    numbers.append(delimeter)\n    return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [delimeter if i == 0 else numbers[i-1] + delimeter for i in range(1, len(numbers))]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [delimeter] * (len(numbers) - 2) + numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if not numbers:\n        return []\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if numbers[0]!= delimeter:\n        return numbers + [delimeter]\n    else:\n        return numbers"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    parentheses_list = paren_string.split('(')\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # 1) initialize an array to store nested parentheses (indices are 0-based)\n    # 2) keep track of the index of current bracket\n    # 3) go through all the nested parentheses and if current bracket is '()', we append it\n    # 4) if current bracket is ')' we pop the index, which corresponds to the level of nesting\n    # 5) for every nested bracket, check if that is the last index of a nesting\n    # 6) for every nesting bracket, we either append the new nesting level, or if not append the nesting level\n    # 7) return the result of this operation\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    parens_list = paren_string.split('(')\n    deepest = 1\n    for paren in parens_list:\n        if paren == ')':\n            deepest -= 1\n            if deepest == 0:\n                return []\n        else:\n            deepest += 1\n    return [deepest]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    nested_parens = []\n    current_level = 0\n    for paren in paren_string:\n        if paren == '(':\n            current_level += 1\n        elif paren == ')':\n            current_level -= 1\n        if current_level == 0:\n            nested_parens.append(current_level)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # If there is only one group, output it as it is.\n    # If there is more than one group, output the deepest level.\n    if paren_string == '':\n        return [1]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # The max number of levels is the sum of the max level of the topmost parenthesis.\n    max_depth = 0\n    for paren_char in paren_string:\n        if paren_char == '(':\n            max_depth += 1\n        else:\n            max_depth -= 1\n        if max_depth == 0:\n            return [max_depth] + parse_nested_parens(paren_string[1:])\n    return [max_depth + 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    ans = []\n    for i in paren_string.split(')'):\n        if i!= '(' and i!= ')':\n            ans.append(1)\n        else:\n            ans.append(0)\n    return ans\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    stack: List[int] = []\n    output: List[int] = []\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(1)\n        elif char == \")\":\n            if stack[-1] == 1:\n                stack.pop()\n            else:\n                output.append(len(stack))\n        elif char == \")\":\n            if stack[-1] == 0:\n                stack.pop()\n            else:\n                output.append(len(stack))\n    return output\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    stack = []\n    paren_list = paren_string.split('()')\n    for p in paren_list:\n        if not p:\n            continue\n        if p[0] == '(':\n            stack.append(int(p[1:]))\n        elif p[0] == ')':\n            level = len(stack)\n            if level > 0:\n                stack[-1] = level + 1\n            else:\n                stack.append(1)\n        else:\n            raise Exception(f'Unexpected character in parentheses: {p}')\n    return stack\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if paren_string[0]!= '(':\n        return [0]\n    if len(paren_string) == 1:\n        return [0]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x for x in strings if substring in x]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x for x in strings if substring in x]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    filtered_list = []\n    for string in strings:\n        string = string.lower()\n        if substring.lower() in string.lower():\n            filtered_list.append(string)\n    return filtered_list\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for string in strings:\n        if substring in string:\n            strings.remove(string)\n    return strings\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    substring_set = set(substring)\n    filtered = []\n    for string in strings:\n        filtered.append(string)\n        if substring_set.issubset(string.lower()):\n            filtered.remove(string)\n    return filtered\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(filter(lambda s: s.startswith(substring), strings))\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum_product = 0\n    prod_product = 1\n    for num in numbers:\n        sum_product = sum_product + num\n        prod_product *= num\n    return (sum_product, prod_product)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    elif len(numbers) == 1:\n        return numbers[0], numbers[0]\n    else:\n        s, p = sum_product(numbers[1:])\n        return (numbers[0] + p, s + p)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    # 1st element is the sum\n    sum = numbers[0]\n    # 2nd element is the product\n    product = 1\n    # 3rd element is the number of elements in a list\n    n = len(numbers)\n    for i in range(n):\n        # add the current element to the sum\n        sum += numbers[i]\n        # multiply the product of the current element by the number of elements in a list\n        product *= numbers[i]\n    return (sum, product)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if len(numbers) == 0:\n        return (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: implement\n    sum = 0\n    for i in numbers:\n        sum += i\n    return (sum, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n    s, p = sum_product(numbers[:-1]), numbers[-1] * numbers[-1]\n    return (s, p)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (sum(numbers), prod(numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        total = numbers[0]\n        product = 1\n        for i in numbers:\n            total += i\n            product *= i\n        return (total, product)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum_num = 0\n    product = 1\n    for num in numbers:\n        sum_num += num\n    return sum_num, product\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    m = 0\n    max_array = []\n    for i in range(len(numbers)):\n        if numbers[i] > numbers[m]:\n            m = numbers[i]\n        elif numbers[i] == numbers[m]:\n            m += 1\n            if m > len(numbers) - 1:\n                m = 0\n        else:\n            m = numbers[i]\n        max_array.append(m)\n    return max_array\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_numbers = []\n    for i in range(len(numbers)):\n        index = i\n        while index >= 0:\n            if numbers[index] > numbers[i]:\n                index -= 1\n            else:\n                break\n        max_numbers.append(numbers[i])\n    return max_numbers\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    seq = []\n    for i in range(len(numbers) - 1):\n        # Add the numbers to the end\n        seq.append(numbers[i])\n        seq.append(numbers[i + 1])\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    maxes = []\n    i = 0\n    while i < len(numbers):\n        if len(maxes) == 0:\n            maxes.append(numbers[i])\n        elif numbers[i] > maxes[-1]:\n            maxes.append(numbers[i])\n        i += 1\n    return maxes\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    current_max = 0\n    \n    # Traverse from the end to the beginning of the list\n    for i in range(len(numbers) - 1, -1, -1):\n        current_max = max(current_max, numbers[i])\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # The first element is always the max value, because its larger than the rest\n    max_value = max(numbers)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # use a counter to iterate through each of the list elements\n    counter = Counter(numbers)\n    max = counter.most_common()[0][1]\n    # count how many times the element is in the list\n    # if the element is the largest element, it is the maximum element\n    for number in numbers:\n        if number > max:\n            max = number\n    return max\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    maxes = [None] * len(numbers)\n    min = numbers[0]\n    maxes[0] = min\n    for i in range(1, len(numbers)):\n        max_ = numbers[i]\n        if max_ > maxes[i - 1]:\n            maxes[i] = max_\n        if max_ < maxes[i - 1]:\n            maxes[i] = max_\n            min = max_\n    return maxes\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_res = []\n    n = len(numbers)\n    for i in range(n-1, -1, -1):\n        if numbers[i] > numbers[i+1]:\n            max_res.append(numbers[i])\n        else:\n            max_res.append(numbers[i+1])\n    return max_res\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [max(numbers[i:i+n] for i in range(len(numbers))) for n in range(1, len(numbers)+1)]\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    length = len(string)\n    # if the string is already a palindrome, return it\n    if is_palindrome(string) == True:\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(string) == 0:\n        return ''\n    for i in range(1, len(string)):\n        temp = string[i]\n        if len(string) > len(string[::-1]) - 1:\n            string = string[1:len(string) - 1] + temp\n        if string[-1] == temp and is_palindrome(string[0:len(string) - 1]):\n            return string + temp\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # make a string prefix with a palindrome that begins with a string\n    prefix = ''\n    for char in string:\n        prefix += char\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    end_of_palindrome = ''.join(string[::-1].split('c'))\n    return ''.join(sorted(string.split('c'))) + end_of_palindrome\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    prefix = ''\n    postfix = ''\n    for char in string:\n        prefix += char\n        if is_palindrome(prefix):\n            postfix += char[::-1]\n            prefix = ''\n    return postfix\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    longest_palindrome = ''\n    longest_palindrome_prefix = ''\n    suffix_prefix = ''\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    string = string.lstrip('-')\n    string = string.lstrip('a')\n    string = string.lstrip('t')\n    string = string.lstrip('p')\n    string = string.lstrip('e')\n    string = string.lstrip('o')\n    string = string.lstrip('i')\n    string = string.lstrip('l')\n    string = string.lstrip('j')\n    string = string.lstrip('k')\n    string = string.lstrip('z')\n    string = string.lstrip('v')\n    string = string.lstrip('y')\n    string = string.lstrip('n')\n    string = string.lstrip('u')\n    string = string.lstrip('b')\n    string = string.lstrip('m')\n    string = string.lstrip('r')\n    string = string.lstrip('a')\n    string = string.lstrip('s')\n    string = string.lstrip('t')\n    string = string.lstrip('c')\n    string = string.lstrip('l')\n    string = string.lstrip('i')\n    string = string.lstrip('n')\n    string = string.lstrip('o')\n    string = string.lstrip('m')\n    string = string.lstrip('j')\n    string = string.lstrip('k')\n    string = string.lstrip('e')\n    string = string.lstrip('z')\n    string = string.lstrip('g')\n    string = string.lstrip('f')\n    string = string.lstrip('k')\n    string = string.lstrip('r')\n    string = string.lstrip('s')\n    string = string.lstrip('t')\n    string = string.lstrip('v')\n    string = string.lstrip('c')\n    string = string.lstrip('n')\n    string = string.lstrip('y')\n    string = string.lstrip('y')\n    string = string.lstrip('a')\n    string = string.lstrip('l')\n    string = string.lstrip('t')\n    string = string.lstrip('i')\n    string = string.lstrip('g')\n    string = string.lstrip('e')\n    string = string.lstrip('z')\n    string = string.lstrip('n')\n    string = string.lstrip('p')\n    string = string.lstrip('n')\n    string = string.lstrip('a')\n    string = string.lstrip('n')\n    string = string.lstrip('u')\n    string = string.lstrip('c')\n    string = string.lstrip('l')\n    string = string.lstrip('s')\n    string = string.lstrip('i')\n    string = string.lstrip('g')\n    string = string.lstrip('e')\n    string = string.lstrip('z')\n    string = string.lstrip('m')\n    string = string.lstrip('t')\n    string = string.lstrip('v')\n    string = string.lstrip('y')\n    string = string.lstrip('p')\n    string = string.lstrip('i')\n    string = string.lstrip('g')\n    string = string.lstrip('e')\n    string = string.lstrip('t')\n    string = string.lstrip('c')\n    string = string.lstrip('l')\n    string = string.lstrip('s')\n    string = string.lstrip('j')\n    string = string.lstrip('a')\n    string = string.lstrip('g')\n    string = string.lstrip('e')\n    string = string.lstrip('z')\n    string = string.lstrip('y')\n    string = string.lstrip('n')\n    string = string.lstrip('t')\n    string = string.lstrip('p')\n    string = string.lstrip('n')\n    string = string.lstrip('a')\n    string = string.lstrip('g')\n    string = string.lstrip('k')\n    string = string.lstrip('a')\n    string = string.lstrip('t')\n    string = string.lstrip('c')\n    string = string.lstrip('l')\n    string = string.lstrip('s')\n    string = string.lstrip('i')\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    start = 0\n    end = 0\n    for index in range(len(string)):\n        if string[index] == string[-1*len(string)]:\n            if string[index] == string[-2*len(string)]:\n                end += 1\n            else:\n                start += 1\n        else:\n            if string[index] == string[-1*len(string)]:\n                end += 1\n            else:\n                if string[index] == string[-2*len(string)]:\n                    start += 1\n        \n        if end == len(string) - 1:\n            break\n    \n    return string[start + 1:end] + string[start:end + 1]\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def _reverse_string(s: str):\n        return ''.join(reversed(s))\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if string == '':\n        return ''\n    if len(string) == 1:\n        return string\n    \n    return string[::-1] + make_palindrome(string[1:])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert isinstance(a, str) and isinstance(b, str)\n    assert len(a) == len(b)\n    return \"\".join([chr(ord(x) ^ ord(y)) for (x, y) in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join([format(ord(i) ^ ord(j), \"08b\") for i, j in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join([chr((int(a, 2) ^ int(b, 2)) & 255), chr((int(a, 2) >> 8) & 255), chr((int(a, 2) >> 16) & 255), chr((int(a, 2) >> 24) & 255)])\n    \ndef int_xor(a: int, b: int) -> int:\n    \"\"\" Input are two ints, a and b, each in binary form.\n    Perform binary XOR on these inputs and return result also as an int.\n    >>> int_xor(10, 3)\n    3\n    \"\"\"\n    result = 0\n    for i in range(0, 8, 2):\n        result += (a ^ b) * (1 << i)\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    x = 0\n    for i in range(len(a)):\n        if a[i] == '0':\n            x ^= 0b111\n        elif a[i] == '1':\n            x ^= 0b11\n        else:\n            raise ValueError('invalid character')\n    for i in range(len(b)):\n        if b[i] == '0':\n            x ^= 0b111\n        elif b[i] == '1':\n            x ^= 0b11\n        else:\n            raise ValueError('invalid character')\n    return '{0:0>32b}'.format(x)[::-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not a:\n        return b\n    if not b:\n        return a\n    return ''.join([chr(ord(a[0]) ^ ord(b[0]))] + [chr(ord(a[1]) ^ ord(b[1]))] + [chr(ord(a[2]) ^ ord(b[2]))] + [chr(ord(a[3]) ^ ord(b[3]))])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return ''.join(format(ord(x) ^ ord(y), \"b\") for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = ''\n    for letter in a:\n        if letter == '1':\n            result += '0'\n        else:\n            result += '1'\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #return ''.join([chr(ord(c) ^ ord(b)) for c in a])\n    return ''.join([chr((ord(a[i]) ^ ord(b[i])) & 255) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    c = \"\"\n    for i in range(len(a)):\n        if a[i] == '0':\n            c += '0'\n        elif a[i] == '1':\n            c += '1'\n        else:\n            c += '0'\n    \n    for i in range(len(b)):\n        if b[i] == '0':\n            c += '1'\n        elif b[i] == '1':\n            c += '0'\n        else:\n            c += '1'\n    return c\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    longest_string = strings[0]\n    for i in range(1, len(strings)):\n        if len(longest_string) < len(strings[i]):\n            longest_string = strings[i]\n    return longest_string\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    elif len(strings) == 2:\n        return strings[0] if strings[0] > strings[1] else strings[1]\n    else:\n        return longest(strings[:-2])\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lengths = [0 for _ in strings]\n    for s in strings:\n        lengths[s.find(s[-1])] += 1\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[-1]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(strings) == 0:\n        return None\n    max_len = 0\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n    return strings[-1][-max_len:]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    elif len(strings) == 2:\n        return max(strings, key=len)\n    else:\n        # Dividing the string into three parts.\n        # -> a) 1st part of string, b) 2nd part of string, c) 3rd part of string\n        #\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, b1st part, c1st part, 2nd part,..., cnth part]\n        # -> List\n        # -> [1st part, "
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = 0\n    while a!= 0:\n        s = a % b\n        a = a // b\n    return s\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    c = a % b\n    if c == 0:\n        return a\n    else:\n        return greatest_common_divisor(c, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def divisors(n: int) -> list[int]:\n        divisors = []\n        for d in range(1, n):\n            if n % d == 0:\n                divisors.append(d)\n        return divisors\n    \n    def gcd(a: int, b: int) -> int:\n        \"\"\" Return the greatest common divisor of a and b\n        >>> greatest_common_divisor(3, 5)\n        5\n        >>> greatest_common_divisor(25, 15)\n        15\n        \"\"\"\n        n = a if a < b else b\n        while n > 0:\n            a, b = b % n, a\n        return b\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    while b!= 0:\n        if a % b == 0:\n            a = a // b\n        else:\n            b = b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert a >= 0 and b >= 0, \"can't divide by zero\"\n    \n    #compute the gcd\n    if a == b:\n        return a\n    \n    while a % b!= 0:\n        if a < b:\n            a += b\n        else:\n            b += a\n    \n    #return the gcd\n    return a\n    \n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a > b:\n        a, b = b, a\n    for i in range(2, int(math.sqrt(b)) + 1):\n        if b % i == 0:\n            if a % i == 0:\n                return b // i\n            return a // i\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a == 0:\n        return b\n    else:\n        return greatest_common_divisor(b % a, a)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    while a % b!= 0:\n        a, b = b, a % b\n    return b\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    while b > 0:\n        if (a % b == 0) and (b % a == 0):\n            return b\n        b -= 1\n    return "
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return prefixes(string)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    prefixes = []\n    last_prefix = ''\n    for char in string:\n        if char =='':\n            if last_prefix!= '':\n                prefixes.append(last_prefix)\n            last_prefix = ''\n        else:\n            last_prefix = last_prefix + char\n    prefixes.append(last_prefix)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    prefixes = [string[:i] for i in range(len(string) + 1)]\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    prefixes = []\n    if string.startswith((\"a\", \"b\", \"c\")):\n        prefixes.append(string)\n    else:\n        for i in range(len(string) - 1, 0, -1):\n            if string[:i] not in prefixes:\n                prefixes.append(string[:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prefixes = []\n    for s in string:\n        if s == 'a':\n            prefixes.append('a')\n        if s == 'b':\n            prefixes.append('ba')\n        if s == 'c':\n            prefixes.append('ca')\n        if s == 'd':\n            prefixes.append('da')\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    prefixes = []\n    for i in range(1, len(string)):\n        prefixes.append(string[:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    prefix = ''\n    for c in string:\n        if c.isupper():\n            if prefix:\n                result.append(prefix + c.lower())\n                prefix = ''\n            else:\n                prefix = c\n        else:\n            prefix += c\n    if prefix:\n        result.append(prefix)\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(string) == 0:\n        return []\n    if string[0]!= 'a':\n        return []\n    prefixes = []\n    for i in range(1, len(string)):\n        prefix = string[:i]\n        if prefix[-1]!= 'a':\n            prefixes.append(prefix)\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if not string:\n        return []\n    \n    prefix = [string[0]]\n    \n    for letter in string[1:]:\n        if letter == 'a' or letter == 'b' or letter == 'c':\n            prefix.append(letter)\n        else:\n            break\n    \n    return prefix\n    \ndef all_prefixes_length(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes_length('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    \n    if not string:\n        return []\n    \n    prefix = [string[0]]\n    \n    for letter in string[1:]:\n        if letter == 'a' or letter == 'b' or letter == 'c':\n            prefix.append(letter)\n        else:\n            break\n    \n    return prefix\n    \ndef number_of_substrings(string: str) -> int:\n    \"\"\" Return the number of all substrings from the input string\n    >>> number_of_substrings('abc')\n    5\n    \"\"\"\n    \n    if not string:\n        return 0\n    \n    if len(string) == 1:\n        return 1\n    \n    res = 0\n    \n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            res += 1\n        \n        else:\n            break\n    \n    res += 1\n    \n    return res\n    \ndef longest_substring(string: str) -> int:\n    \"\"\" Return the longest substring from the input string\n    >>> longest_substring('abc')\n    'abc'\n    \"\"\"\n    \n    if not string:\n        return 0\n    \n    if len(string) == 1:\n        return string\n    \n    res = string[0]\n    \n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            res = string[i]\n        else:\n            break\n        \n    return res\n    \ndef substrings_to_longest_substring(s: str) -> int:\n    \"\"\" Return the length of the longest substring from the input string\n    >>> substrings_to_longest_substring('abc')\n    3\n    \"\"\"\n    \n    if not s:\n        return 0\n    \n    if len(s) == 1:\n        return 1\n    \n    res = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            res += 1\n        else:\n            break\n        \n    res = min(res, 1 + substrings_to_longest_substring(s[1:]))\n    \n    return res\n    \ndef longest_substrings_to_longest_substrings(s: str) -> int:\n    \"\"\" Return the length of the longest substring from the input string\n    >>> longest_substrings_to_longest_substrings('abc')\n    6\n    \"\"\"\n    \n    if not s:\n        return 0\n    \n    if len(s) == 1:\n        return 1\n    \n    res = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            res += 1\n        else:\n            break\n        \n    res = min(res, 1 + longest_substrings_to_longest_substrings(s[1:]))\n    \n    return res\n    \ndef longest_substrings_to_substrings(s: str) -> int:\n    \"\"\" Return the length of the longest substring from the input string\n    >>> longest_substrings_to_substrings('abc')\n    6\n    \"\"\"\n    \n    if not s:\n        return 0\n    \n    if len(s) == 1:\n        return 1\n    \n    res = 1\n    \n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            res += 1\n        else:\n            break\n    \n    res = min(res, 1 + longest_substrings_to_substrings(s[1:]))\n    \n    return res\n    \ndef count_substrings(s: str) -> int:\n    \"\"\" Return the number of all su"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return '0' + str(n).rjust(n+1)\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 0:\n        raise ValueError('string_sequence argument must be non-negative')\n    elif n <= 0:\n        return '0'\n    else:\n        return''.join(str(num) for num in range(n))\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return''*n+str(0)\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = ''\n    for i in range(n):\n        result = result + str(i+1)\n    return result\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = '0'\n    for i in range(1, n):\n        s = s + str(i)\n    return s\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \" \".join([str(x) for x in range(0, n + 1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # your code here\n    s = \"\"\n    for i in range(n):\n        s += str(i) +''\n    return s[:-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    ans = ''\n    for i in range(0, n):\n        ans = ans + str(i + 1) +''\n    return ans\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return '0' + str(n) if n > 0 else '0'*n\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \" \".join([str(x) for x in range(n)])\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for char in string:\n        if char not in {'A', 'Z'}:\n            count += 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    chars = string\n    count = 0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Hash table of character occurrences\n    occurrences_hash_table = {}\n    # Loop through each character in the string\n    for char in string:\n        # If the character is not in the hash table, add it and increment the value\n        if char not in occurrences_hash_table:\n            occurrences_hash_table[char] = 0\n        # Add the value to the hash table\n        occurrences_hash_table[char] += 1\n    # Return the number of unique characters\n    return len(occurrences_hash_table)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n    \ndef count_repeated_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many times each character appears in the string\n    >>> count_repeated_characters('xyzXYZ')\n    {'z': 2, 'x': 1, 'y': 1, 'z': 1}\n    >>> count_repeated_characters('aaaaaa')\n    {'a': 2, 'a': 1, 'a': 1, 'a': 1}\n    \"\"\"\n    # Set of the characters in a string\n    char_dict = {}\n    # Set of the characters in the string\n    char_set = set()\n    for char in string:\n        if char.isalpha():\n            char_set.add(char)\n        elif char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    #print(char_dict)\n    #print(char_set)\n    return char_dict\n    \ndef most_common_character(string: str) -> str:\n    \"\"\" Given a string, find the most common character\n    >>> most_common_character('aaa')\n    'a'\n    >>> most_common_character('aab')\n    'a'\n    >>> most_common_character('aabBbbBb')\n    'b'\n    \"\"\"\n    # Create a dictionary, keyed by the characters, and values are counts of the occurrence\n    char_dict = count_distinct_characters(string)\n    #print(char_dict)\n    # Find the most common character\n    return max(char_dict, key=char_dict.get)\n    \ndef most_common_repeated_character(string: str) -> str:\n    \"\"\" Given a string, find the most common repeated character\n    >>> most_common_repeated_character('aaa')\n    'a'\n    >>> most_common_repeated_character('aabBbbBb')\n    'b'\n    \"\"\"\n    # Create a dictionary, keyed by the characters, and values are counts of the occurrence\n    char_dict = count_repeated_characters(string)\n    #print(char_dict)\n    # Find the most common repeated character\n    return max(char_dict, key=char_dict.get)\n    \ndef most_common_character_repeated(string: str) -> str:\n    \"\"\" Given a string, find the most common repeated character\n    >>> most_common_character_repeated('aaa')\n    'a'\n    >>> most_common_character_repeated('aabBbbBb')\n    'b'\n    \"\"\"\n    # Create a dictionary, keyed by the characters, and values are counts of the occurrence\n    char_dict = count_repeated_characters(string)\n    #print(char_dict)\n    # Find the most common repeated character\n    return max(char_dict, key=char_dict.get)\n    \ndef first_character(string: str) -> str:\n    \"\"\" Given a string, find the first character\n    >>> first_character('aabBbbBb')\n    'b'\n    >>> first_character('aaaaaa')\n    'a'\n    \"\"\"\n    # Create a dictionary, keyed by the characters, and values are counts of the occurrence\n    char_dict = count_distinct_characters(string)\n    #print(char_dict)\n    # Find the first character\n    return max(char_dict, key=char_dict.get)\n    \ndef count_frequency(string: str) -> int:\n    \"\"\" Given a string, find the number of times that the first character appears in the string\n    >>> count_frequency('aaaaaa')\n    4\n    >>> count_frequency('aabBbbBb')\n    2\n    \"\"\"\n    # Create a dictionary, keyed by the characters, and values are counts of the occurrence\n    char_dict = count_distinct_characters(string)\n    #print(char_dict)\n    # Find the number of times that the first character appears in the string\n    return char_dict[first_character(string)]\n    \ndef most_frequent_character(string: str) -> str:\n    \"\"\" Given a string, find the most frequent character\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    char_count = 0\n    for char in string:\n        if char == 'x' or char == 'y' or char == 'z':\n            char_count += 1\n    return char_count\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for c in string:\n        if c == c.upper():\n            count += 1\n        else:\n            count = 0\n    return count"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    char_counts = {}\n    for char in string:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: complete this function!\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [int(music_string[i:i + 4]) for i in range(0, len(music_string), 4)]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def get_beat_count(beat_string: str):\n        count = 0\n        for char in beat_string:\n            if char.isalpha():\n                count += 1\n        return count\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    music = music_string.split('|')\n    last = -1\n    beats = [0]*len(music)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO\n    return []\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    all_beat_types = ['o', 'o|', '.', '.|']\n    music_list = music_string.split()\n    beat_type_dict = {'o': 0, 'o|': 1, '.|': 2}\n    beat_list = []\n    for i in range(len(music_list)):\n        if music_list[i] in all_beat_types:\n            beat_list.append(beat_type_dict[music_list[i]])\n        elif music_list[i] == '.':\n            beat_list.append(1)\n        elif music_list[i] == 'o':\n            beat_list.append(2)\n        else:\n            beat_list.append(0)\n    return beat_list\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(music_string) == 0:\n        return []\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    index_map = {\n        'o': 0,\n        'o|': 1,\n        '.|': 2\n    }\n    notes_string = music_string.split('|')\n    notes = [index_map[note] for note in notes_string]\n    return notes"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if music_string == '':\n        return []\n    elif music_string == '.':\n        return [4]\n    elif music_string.find('|')!= -1:\n        return [2, 2]\n    elif music_string.find('o')!= -1:\n        return [1, 1]\n    else:\n        return [int(music_string)]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Check if the string is valid\n    valid_s = True\n    for x in music_string:\n        if x not in 'o|.':\n            valid_s = False\n    if valid_s:\n        music_string = music_string.upper()\n        results = []\n        for i in range(len(music_string) - 3):\n            if music_string[i:i+4] == '.|':\n                results.append(int(music_string[i+3:i+5]))\n                # results.append(int(music_string[i+4:i+5]))\n            elif music_string[i:i+4] == '.|.':\n                results.append(int(music_string[i+3:i+5]))\n                # results.append(int(music_string[i+4:i+5]))\n            elif music_string[i:i+4] == 'o|':\n                results.append(int(music_string[i+3:i+5]))\n                # results.append(int(music_string[i+4:i+5]))\n        return results\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def how_many_times_helper(substring, string, offset: int) -> int:\n        num_occurences = 0\n        while True:\n            try:\n                index = string.index(substring, offset)\n            except ValueError:\n                return num_occurences\n            else:\n                offset += index + len(substring)\n                if index == len(string) - 1:\n                    return num_occurences\n    return how_many_times_helper(substring, string, 0)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # 1. find the first position of the substring.\n    # 2. go through the string and check if substring is in the given substring\n    # 3. if yes, add the count to the count of how many times it appears\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            print(i, string[i:i+len(substring)])\n            return i\n        i += 1\n    return 0"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Your code here\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring in string[i:i+len(substring)]:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    words = string.split(' ')\n    return len([w for w in words if substring in w])\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    last_char = substring[-1]\n    for letter in substring:\n        count += string.count(letter)\n        if last_char == letter:\n            count += string.count(letter)\n            last_char = letter\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    # Check if the substring is contained within the original string\n    for i in range(len(string) - len(substring) + 1):\n        # Check if the substring starts with the original substring\n        if substring in string[i:i + len(substring)]:\n            # if substring starts with original substring, we count how many times it occurs\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for index in range(len(string) - len(substring) + 1):\n        if string[index: index + len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    cnt = 0\n    for i in range(len(string)):\n        if substring in string[i:]:\n            cnt = cnt + 1\n    return cnt\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for c in substring:\n        if string.count(c) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # To create an index number to get correct numbers\n    index = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sorted(numbers.replace(' ', '').replace('-', '').split(' '))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert len(numbers) >= 3\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def sort_numbers_recur(numbers: str, low: int, high: int) -> str:\n        if len(numbers) == 0:\n            return ''\n        if len(numbers) == 1:\n            return numbers\n        if low == high:\n            return numbers[::-1]\n        mid = low + (high - low) // 2\n        if numbers[mid] < numbers[mid + 1]:\n            return sort_numbers_recur(numbers, mid + 1, high)\n        return sort_numbers_recur(numbers, low, mid)\n    return sort_numbers_recur(numbers, 0, len(numbers) - 1)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return numbers.split(' ')[::-1]\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Check if numbers are integers\n    is_int = lambda x: isinstance(x, int)\n    if not all([is_int(n) for n in numbers.split(' ')]):\n        return \"Invalid input\"\n    # Initialize the output string\n    out_string = \"\"\n    # Loop through the numbers\n    for num in numbers.split(' '):\n        # Check if the number is an integer\n        is_int = lambda x: isinstance(x, int)\n        if not all([is_int(n) for n in num.split(' ')]):\n            return \"Invalid input\"\n        # Check if the number is less than 9\n        if int(num) < 9:\n            out_string += num +''\n        # Check if the number is greater than 0\n        elif int(num) > 0:\n            # Check if the number is less than 9\n            if int(num) < 9:\n                # Check if the number is greater than 9\n                if int(num) > 9:\n                    # Check if the number is greater than 9\n                    if int(num) < 9:\n                        # Check if the number is less than 9\n                        if int(num) > 9:\n                            # Check if the number is greater than 9\n                            if int(num) > 9:\n                                out_string += num +''\n                        # Check if the number is less than 9\n                        else:\n                            out_string += num +''\n                # Check if the number is less than 9\n                else:\n                    out_string += num +''\n            # Check if the number is greater than 9\n            else:\n                out_string += num +''\n    # Return the sorted string\n    return out_string.strip()\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \" \".join(sorted(list(map(str, numbers))))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    numbers_list = numbers.split(' ')\n    numbers_list.sort()\n    return''.join(numbers_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join(sorted(numbers, reverse=True))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if numbers[0] == 'zero':\n        return 'zero'+ numbers[1:]\n    elif numbers[0] == 'one':\n        return 'one'+ numbers[1:]\n    elif numbers[0] == 'two':\n        return 'two'+ numbers[1:]\n    elif numbers[0] == 'three':\n        return 'three'+ numbers[1:]\n    elif numbers[0] == 'four':\n        return 'four'+ numbers[1:]\n    elif numbers[0] == 'five':\n        return 'five'+ numbers[1:]\n    elif numbers[0] =='six':\n        return'six'+ numbers[1:]\n    elif numbers[0] =='seven':\n        return'seven'+ numbers[1:]\n    elif numbers[0] == 'eight':\n        return 'eight'+ numbers[1:]\n    elif numbers[0] == 'nine':\n        return 'nine'+ numbers[1:]\n    else:\n        return'more than nine'\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    smaller_number, larger_number = min(numbers), max(numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    smaller, larger = None, None\n    for number in numbers:\n        if smaller is None or number < smaller:\n            smaller = number\n        if larger is None or number > larger:\n            larger = number\n    return (smaller, larger)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Implement this function\n    min_val = float(\"inf\")\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < min_val:\n            min_val = abs(numbers[i] - numbers[i + 1])\n            smallest_val = numbers[i]\n            largest_val = numbers[i + 1]\n    return smallest_val, largest_val\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(numbers)[-2], sorted(numbers)[-1]\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    smallest = numbers[0]\n    biggest = numbers[0]\n    for num in numbers[1:]:\n        if num < smallest:\n            smallest = num\n        elif num > biggest:\n            biggest = num\n    return smallest, biggest\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lowest_to_largest: List[float] = []\n    highest_to_smallest: List[float] = []\n    for num in numbers:\n        if num > lowest_to_largest[-1]:\n            lowest_to_largest.append(num)\n        elif num < highest_to_smallest[0]:\n            highest_to_smallest.append(num)\n        else:\n            lowest_to_largest.append(num)\n            highest_to_smallest.append(num)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    low_n = min(numbers)\n    high_n = max(numbers)\n    closest_n = float(\"inf\")\n    #print(f\"low_n: {low_n}, high_n: {high_n}, closest_n: {closest_n}\")\n    if low_n < high_n:\n        closest_n = low_n\n    else:\n        closest_n = high_n\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    smaller, larger = 0, max(numbers)\n    for n in numbers:\n        if smaller > larger:\n            smaller, larger = larger, n\n        elif smaller < larger:\n            smaller, larger = larger, n\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # find the two closest numbers\n    closest_elements = []\n    for i, number in enumerate(numbers):\n        if len(closest_elements) == 0 or abs(closest_elements[-1][1] - number) < abs(number - closest_elements[-1][0]):\n            closest_elements = [number, number]\n    return closest_elements\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    min_number = numbers[0]\n    max_number = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i] < min_number:\n            min_number = numbers[i]\n        if numbers[i] > max_number:\n            max_number = numbers[i]\n    return (min_number, max_number)\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [n / sum(n) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [n / sum(n) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [n / (sum(n) / 2.0) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [n / max(numbers) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    rescaled_numbers = []\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    numbers = sorted(numbers)\n    numbers = numbers[::-1]\n    return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [n / (max(n) - min(n)) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(numbers) == 0:\n        return []\n    maximum = max(numbers)\n    minimum = min(numbers)\n    if maximum > minimum:\n        factor = (1.0 / (maximum - minimum))\n        # print(factor)\n        # print(numbers)\n        rescaled_numbers = [factor * number for number in numbers]\n        # print(rescaled_numbers)\n        return rescaled_numbers\n    else:\n        factor = (1.0 / (minimum - maximum))\n        # print(factor)\n        # print(numbers)\n        rescaled_numbers = [factor * number for number in numbers]\n        # print(rescaled_numbers)\n        return rescaled_numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert len(numbers) > 1, \"numbers must be >1\"\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    new_values = []\n    for value in values:\n        if isinstance(value, int):\n            new_values.append(value)\n        else:\n            new_values.append(None)\n    return new_values"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    integers = []\n    for v in values:\n        if isinstance(v, (int, float)):\n            integers.append(v)\n        else:\n            integers = [v] + integers\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [value for value in values if isinstance(value, int) and value >= 0]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [\n        int(x)\n        for x in values\n        if type(x) == type(1) or type(x) == type('abc') or type(x) == type([])\n    ]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = []\n    for v in values:\n        if isinstance(v, int):\n            res.append(v)\n    return res"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return list(filter(lambda x: type(x) is int, values))\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [x for x in values if type(x) == int]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for value in values:\n        if not isinstance(value, int):\n            values.remove(value)\n    return values\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if string == '':\n        return 0\n    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if(string == ''):\n        return 0\n    else:\n        return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Your code here\n    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if string == '':\n        return 0\n    if string =='':\n        return 1\n    if string == '\\n':\n        return len(string)\n    if string[0] == '\\'':\n        return len(string[1:])\n    if string[0] == '\"' or string[0] == '`':\n        return len(string[1:])\n    else:\n        raise ValueError('string not a string')\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(2,n):\n        if n%i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in range(1, n+1):\n        if n%i==0:\n            return i\n    return 0\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(2,n+1):\n        if n%i==0:\n            return i\n    return n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            lst.append(i)\n            if len(lst) > 2:\n                lst.pop()\n    return max(lst)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    largest = n\n    for i in range(2,n):\n        if n % i == 0:\n            if i == largest:\n                return i\n            else:\n                largest = i\n    return largest\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return max(divisors(n))\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    divisor = 2\n    while n % divisor:\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    divisors = list()\n    while True:\n        divisor = n // 1\n        if n % divisor == 0:\n            divisors.append(divisor)\n            n //= divisor\n        else:\n            break\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #n = int(input(\"enter a number: \"))\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return max(divisors)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    divisors = []\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    factorized_nums = []\n    for i in range(1, n):\n        for j in range(i, len(factorized_nums) + 1):\n            factorized_nums.append(j)\n    return factorized_nums\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    factors = []\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            factors.append(i)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    res = [i for i in range(1, n + 1) if n % i == 0]\n    res = [i for i in range(2, n + 1) if n % i == 0]\n    res.sort()\n    return res\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 1:\n        return [2]\n    elif n == 0:\n        return []\n    else:\n        a = factorize(n//2)\n        b = factorize(n-1)\n        return [a[0]+b[0]]+a+b\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert n > 0\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(2, int(n**0.5)+1):\n        if n%i==0:\n            yield i\n            yield from factorize(n//i)\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return []\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def _factorize(num: int) -> List[int]:\n        prime_factors = [2]\n        # Factorize the given number\n        while num > 1:\n            if num % prime_factors[-1] == 0:\n                prime_factors.append(prime_factors[-1] * num // prime_factors[-1])\n                num /= prime_factors[-1]\n            else:\n                prime_factors.append(prime_factors[-1])\n                num -= prime_factors[-1] * (num // prime_factors[-1])\n        return prime_factors\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 1:\n        return [2]\n    if n == 2:\n        return [2, 2]\n    if n % 2 == 0:\n        n1 = n // 2\n        lst = factorize(n1)\n        lst.append(n1)\n        return lst\n    else:\n        lst = factorize(n // 2)\n        lst.append(n)\n        return lst\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    factor_list = [2]\n    count = 1\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [num for num in numbers if num not in numbers[num + 1:]]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(numbers) == 0:\n        return []\n    \n    unique_numbers = []\n    seen = set()\n    for n in numbers:\n        if n in seen:\n            unique_numbers.append(n)\n        seen.add(n)\n    \n    unique_numbers = list(dict.fromkeys(unique_numbers))\n    return unique_numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    numbers.sort()\n    n = len(numbers)\n    # Do every element in this array.\n    for i in range(n):\n        # Loop through the remaining elements.\n        for j in range(i, n):\n            if numbers[i] == numbers[j]:\n                # Remove this element and continue.\n                numbers[j] = numbers[j] * -1\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # FIND OUT ORDER IN THE LISTS\n    seen = set()\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    seen = set()\n    removed_numbers = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            removed_numbers.append(num)\n    return removed_numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    result = []\n    \n    for element in numbers:\n        if element not in result:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    seen = {}\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen[num] = 1\n        else:\n            seen[num] += 1\n    for key in seen:\n        if seen[key] > 1:\n            result.append(key)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [x for x in numbers if numbers.count(x) > 1]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    removed = []\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [x for i, x in enumerate(numbers) if i < numbers.index(x) + 1]\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return string.lower().capitalize()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return string.upper() + string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return string.lower() + string.upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return string.upper()+string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    string = string.lower()\n    return string.upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return ''.join(char.lower() if char.isupper() else char.upper() for char in string"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_str = []\n    for char in string:\n        if char.isupper():\n            new_str.append(char.upper())\n        else:\n            new_str.append(char.lower())\n    return ''.join(new_str)\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = []\n    for ch in string:\n        res.append(ch.upper() if ch.islower() else ch.lower())\n    return \"\".join(res)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return \"\"\n    if len(strings) == 1:\n        return strings[0]\n    return strings[0] + concatenate(strings[1:])\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # assume all strings are in order,\n    # concatenate is O(n), this is an O(n) time O(n)\n    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #TODO\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered.append(s)\n    return filtered\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n    # \"\".join(x for x in strings if string.startswith(prefix))\n    # return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [s for s in strings if s[:len(prefix)] == prefix]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not isinstance(strings, list):\n        raise TypeError('strings must be a list')\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in strings:\n        if i.startswith(prefix):\n            strings.remove(i)\n    return strings\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # your code here\n    return strings\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [num for num in l if num>0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l = [int(i) for i in l]\n    l = sorted(l, reverse=True)\n    return l[0:len(l):2]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [i for i in l if i >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = []\n    for n in l:\n        if n > 0:\n            res.append(n)\n    return res\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = []\n    for i in l:\n        if i > 0:\n            s.append(i)\n    return s\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_l = []\n    for i in l:\n        if i > 0:\n            new_l.append(i)\n    return new_l\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n <= 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i <= n // 2:\n        if n % i == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n==1:\n        return False\n    elif n==2:\n        return True\n    for i in range(2, n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n==1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n < 2:\n        return False\n    i = 3\n    while i <= n / 2:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5) + 1, 2):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0 or n == 3:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(n**.5)+1, 6):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n == 3:\n        return True\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n <= 2:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return n < 1000 and all(n % i for i in range(2, int(math.sqrt(n) + 1)))\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 3:\n        return False\n    elif n == 3 or n == 5:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        return is_prime(n//2)\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x = 0\n    for i in range(len(xs)):\n        if (i % 2 == 0):\n            x = xs[i]\n        else:\n            x = xs[i] * xs[i]\n    return x\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # find the biggest non zero coefficient\n    x = 0\n    for i in xs:\n        if i!= 0:\n            x = i\n            break\n    # print(f'x = {x}')\n    # find zero of x\n    return x if x == 0 else -x\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = len(xs)\n    if n < 2:\n        return False\n    elif n == 2:\n        return xs[0] == xs[1]\n    elif n == 3:\n        return max(xs) == 1\n    else:\n        return (xs[0] + xs[1] * xs[2] + xs[1] * xs[3] * xs[2] * xs[3]) / (\n        math.factorial(n) * math.factorial(n - 2) * math.factorial(2) * math.factorial(n - 2)\n        )\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    idx = len(xs) - 1\n    count = 0\n    while xs[idx] > 0:\n        if xs[idx] == 0:\n            if xs[0] == 0:\n                count += 1\n            else:\n                count += 2\n            idx -= 1\n        else:\n            count += 1\n            idx -= 1\n    if count == 2:\n        return xs[0] + xs[1] * xs[0]\n    else:\n        return -1\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = len(xs)\n    if n < 2:\n        return None\n    min = 0\n    max = n - 1\n    while min < max:\n        mid = math.floor((min + max) / 2)\n        if poly(xs, xs[mid]) == 0:\n            return xs[mid]\n        elif poly(xs, xs[mid]) < 0:\n            min = mid + 1\n        else:\n            max = mid - 1\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    xs = sorted(xs)\n    zero = []\n    for i in range(len(xs)):\n        if i % 2 == 0:\n            zero.append(xs[i])\n    return zero[0]\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = len(xs)\n    if n == 0 or n == 1:\n        return 0\n    x = xs[0]\n    for i in range(n):\n        x = poly(xs, x)\n        if x!= 0:\n            return x\n    return 0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert len(xs) % 2 == 0\n    lst = list(xs)\n    lst_len = len(xs)\n    sum_zero = 0\n    max_zero = 0\n    x_sum = 0\n    for i in range(lst_len):\n        x = lst[i]\n        if x == 0:\n            if x_sum > 0:\n                sum_zero = sum_zero + x_sum\n                max_zero = x_sum\n                x_sum = 0\n        else:\n            x_sum += x\n        if x_sum > 0:\n            sum_zero += x_sum\n            max_zero = x_sum\n            x_sum = 0\n    # print(sum_zero, max_zero)\n    return round(sum_zero / max_zero, 3)\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(xs) <= 1:\n        return xs[0]\n    return find_zero(xs[1:]) + find_zero(xs[:-1]) * xs[-1]\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if sum([coeff > 0 for coeff in xs]) == 0:\n        return xs[0]\n    for i, coeff in enumerate(xs):\n        if coeff > 0:\n            return find_zero([coeff, xs[i + 1]])\n    return xs[0]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(l, key=lambda i: i % 3!= 0)\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    temp = 0\n    for i in range(0, len(l), 3):\n        if l[i] % 3!= 0:\n            result.append(l[i])\n        else:\n            result.append(l[i])\n            temp += 1\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(l) % 3!= 0:\n        return l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(l) % 3 == 0:\n        return l\n    if l[-1] % 3 == 0:\n        return l\n    else:\n        for i in range(len(l)):\n            if l[i] % 3 == 0:\n                l[i] = l[i] // 3\n            else:\n                l[i] = l[i] % 3\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l.sort()\n    return l\n    \ndef sort_list(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by 3, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_list([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_list([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l.sort()\n    return l\n    \ndef run():\n    print(\"Your input should be in the format of a list of integers with one element each: \")\n    n = input()\n    l = []\n    for x in n.split(','):\n        l.append(int(x))\n    print(\"Your sorted list: \", sort_list(l))\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \"\"\"The list l' has to be a sorted list of integers.\n    >>> l = [4, 1, 5, 2, 3, 6, 7, 8]\n    >>> sort_third(l)\n    [4, 5, 2, 3, 6, 7, 8]\n    >>> sort_third(l)\n    [5, 6, 2, 3, 4, 8, 7]\n    >>> sort_third(l)\n    [6, 7, 2, 3, 4, 8, 5]\n    >>> sort_third(l)\n    [7, 8, 5, 6, 3, 4, 2]\n    >>> sort_third(l)\n    [8, 7, 6, 5, 3, 4, 2]\n    >>> sort_third(l)\n    [8, 7, 6, 5, 3, 4, 2]\n    >>> sort_third(l)\n    [7, 8, 5, 6, 3, 4, 2]\n    \"\"\"\n    #START\n    s = []\n    if l == []:\n        return s\n    for i in range(len(l)):\n        if l[i]%3 == 0:\n            s.append(l[i])\n    s.sort()\n    return s"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = [i for i in range(len(l)) if i % 3!= 0]\n    return s\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l_set = set(l)\n    l_sorted = list(l_set)\n    result = []\n    for i in range(len(l)):\n        if l[i] not in l_sorted and l[i] % 3!= 0:\n            result.append(l[i])\n    return result\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # for number in l:\n    #     for i in range(3):\n    #         if number % i == 0:\n    #             l.insert(i, number)\n    #             break\n    #     else:\n    #         l.append(number)\n    # l.sort()\n    # return l\n    if len(l) < 3:\n        return l\n    else:\n        while len(l) > 3:\n            for i in range(3):\n                if l[i] % 3 == 0:\n                    l.insert(i, l[i])\n                    break\n                else:\n                    continue\n            else:\n                l.append(l[i] + 3)\n        return l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sorted_l = []\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l.sort()\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(dict.fromkeys(l).keys())\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l = list(l)\n    l.sort()\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sorted(set(l)"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    seen = set()\n    for item in l:\n        if item in seen:\n            continue\n        seen.add(item)\n        result.append(item)\n    return result\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = []\n    for i in l:\n        if i not in res:\n            res.append(i)\n    return res"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return l[0]\n    \n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    return max(l"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max = l[0]\n    for i in range(1, len(l)):\n        if max < l[i]:\n            max = l[i]\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l)\n    return max(l)"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    maximum = 0\n    for num in l:\n        if num > maximum:\n            maximum = num\n    return maximum"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if l == []:\n        return 0\n    return max(l)\n    \ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    -1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if l == []:\n        return 0\n    return min(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max = l[0]\n    for e in l[1:]:\n        if e > max:\n            max = e\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if l == []:\n        return None\n    else:\n        return l[-1]"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    div = 7\n    for i in range(1, n):\n        if i % div == 0:\n            print(div)\n            div += 7\n        elif i % 5 == 0:\n            print(i)\n            div += 3\n        elif i % 3 == 0:\n            print(i)\n            div += 3\n        else:\n            div += 1\n            print(i)\n    return div\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n_to_divide = 0\n    while n % 7 == 0:\n        n_to_divide += 1\n    n_to_divide += n % 7\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n%5==0 or n%7==0 or n%11==0:\n        return (n//10)*2\n    elif n%5==1:\n        return n//10\n    elif n%11==1:\n        return n//10+1\n    else:\n        return n//10+3\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def count_fizz(n, m):\n        if n < 10:\n            return 0\n        elif n % 10 == 7:\n            return 1 + count_fizz(n // 10, m)\n        elif n % 10 == 5:\n            return 2 + count_fizz(n // 10, m)\n        elif n % 10 == 3:\n            return 3 + count_fizz(n // 10, m)\n        else:\n            return 4 + count_fizz(n // 10, m)\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # If the number is divisible by any of 11, 13, or 15, return 1\n    if n % 7 == 0:\n        return 1\n    elif n % 3 == 0:\n        return 2\n    elif n % 5 == 0:\n        return 3\n    elif n % 3 == 0:\n        return 4\n    else:\n        return 5\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(str(n)) % 3 == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return fizz_buzz_helper(n, 'fizzbuzz')\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # generate n odd number of fizz and buzz cases\n    # use for loop to calculate each number\n    # split the n for divisibility by 2\n    # divide each by 10, multiply by 2, and add them\n    # if you divide, repeat the function\n    # return the number of times it was used\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    while n >= 0:\n        if n%7 == 0:\n            count+=1\n        elif n%11 == 0:\n            count+=1\n        elif n%13 == 0:\n            count+=1\n        else:\n            n-=1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            yield \"FizzBuzz\"\n        elif i % 3 == 0:\n            yield \"Fizz\"\n        elif i % 5 == 0:\n            yield \"Buzz\"\n        else:\n            yield str(i)\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    print(l)\n    a = []\n    for i in range(0,len(l),2):\n        a.append(l[i])\n        a.append(l[i+1])\n    print(a)\n    return a\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return l[::2]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l1 = l[::2]\n    l2 = l[1::2]\n    return l1 + l2\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even_indices = []\n    odd_indices = []\n    for item in l:\n        if item % 2 == 0:\n            even_indices.append(item)\n        else:\n            odd_indices.append(item)\n    return even_indices + odd_indices"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l) % 2 == 0:\n        return sorted(l)\n    else:\n        return [l[i] for i in range(0, len(l), 2)]\n        \ndef filter_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are not equal\n    to the values of the even indicies of l, but sorted.\n    >>> filter_even([1, 2, 3])\n    [1, 2, 3]\n    >>> filter_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    if len(l) % 2 == 0:\n        return [l[i] for i in range(0, len(l), 2)]\n    else:\n        return [l[i] for i in range(0, len(l), 2)]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even_list = []\n    odd_list = []\n    for number in l:\n        if number % 2 == 0:\n            even_list.append(number)\n        else:\n            odd_list.append(number)\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    odds = []\n    evens = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            odds.append(l[i])\n        else:\n            evens.append(l[i])\n    return odds + evens\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even_indicies = [l.index(i) for i in range(len(l)) if i % 2 == 0]\n    odd_indicies = [l.index(i) for i in range(len(l)) if i % 2 == 1]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            even.append(l[i])\n    return even\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l = l.copy()\n    odd = []\n    even = []\n    for i in range(0, len(l)):\n        if l[i] % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    return [odd, even"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    groups = []\n    for i in range(len(s)):\n        # if group has 3 elements:\n        if len(s[i: i + 3]) == 3:\n            # transform each element into the 3rd group.\n            groups.append(s[i: i + 3])\n        # if group has 2 elements:\n        elif len(s[i: i + 2]) == 2:\n            # transform each element into the 3rd group.\n            groups.append(s[i: i + 2])\n        # otherwise:\n        else:\n            # if group has 1 element:\n            if len(s[i: i + 1]) == 1:\n                # transform each element into the group\n                groups.append(s[i: i + 1])\n            # if group has 3 elements:\n            elif len(s[i: i + 3]) == 3:\n                # transform each element into the 3rd group.\n                groups.append(s[i: i + 3])\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # group the string by spaces and then split it into groups.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # check for two letters\n    if len(groups) == 2 and groups[0] == groups[1]:\n        return groups[0]\n    # if more than two letters, return the only group of two letters.\n    else:\n        return groups[0] if len(groups) == 1 else groups[1]\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # remove duplicates from groups.\n    groups = [group for group in groups if group not in groups]\n    # cycle decoded characters.\n    result = \"\"\n    for group in groups:\n        result += group\n    return result\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # remove unnecessary group.\n    groups = [group for group in s.split(encode_cyclic(s)) if len(group) > 1]\n    # if group has more than one element, then group must be a string of length 3.\n    if len(groups) > 1:\n        return \"\".join(groups[1])\n    else:\n        return groups[0]"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # convert each group to an int.\n    return \"\".join([int(x) for x in groups])"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # return decoded string from the input string.\n    # split string by groups of three characters.\n    # cycle elements in each group.\n    # if group has fewer elements than 3, add group[i] to next group.\n    # else, add group[i] to previous group.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    # if group has fewer elements than 3, add group[i] to next group.\n    # else, add group[i] to previous group.\n    # If groups[i] is empty, then group[i] will be set to empty string.\n    return \"\".join(groups) if len(groups) > 1 else groups[0]"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return decode_cyclic_encoded(encode_cyclic(s))\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # split encoded string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x, y = 1, 1\n    for i in range(2, n):\n        x, y = y, x+y\n    return y\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 0 or n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    left, right = 0, 1\n    if n == 3:\n        return 3\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                break\n        else:\n            return n\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n <= 1:\n        return n\n    if n == 2:\n        return 2\n    else:\n        prime_fib(n-1)\n        return 2*n\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 2:\n        raise ValueError(\"the function does not support the input number {}.\".format(n))\n    elif n <= 2:\n        return 2\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return prime_fib(n-1)\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a, b = 2, 3\n    while b < n:\n        c = a + b\n        if c % 2!= 0:\n            a, b = b, c\n        else:\n            n = n + a - b\n            a, b = b, a\n    return n\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    elif n > 1:\n        for i in range(2,n):\n            f = prime_fib(i)\n            if f == 1:\n                return i\n            elif f > 1:\n                return f\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    prime = 2\n    while n > 1:\n        if n % prime == 0:\n            prime += 1\n            n //= prime\n        else:\n            prime += 2\n    return prime\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(l) < 3:\n        return False\n    # https://docs.python.org/3/library/stdtypes.html#list.sort\n    # https://docs.python.org/3/library/functions.html#sort\n    # https://stackoverflow.com/a/131593903/1047148\n    sorted_list = sorted(l)\n    if sorted_list[-1] == sorted_list[-2] == sorted_list[-3]!= sorted_list[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(l)!= 3:\n        return False\n    elif l[0] + l[1] + l[2]!= 0:\n        return False\n    elif l[0] + l[2] == 0 and l[1] == l[2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not l:\n        return True\n    if len(l) == 3:\n        if l[0] + l[1] + l[2] == 0:\n            return True\n        else:\n            return False\n    if len(l) == 2:\n        if l[0] + l[1] == 0:\n            return True\n        else:\n            return False\n    if len(l) == 1:\n        if l[0] == 0:\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if len(l) < 3:\n        return False\n    \n    for i in range(len(l) - 3):\n        for j in range(i + 3, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    \n    return Fals"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #find three distinct numbers in the list\n    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(l) < 3:\n        return False\n    if l[0] + l[1] + l[2] == 0:\n        return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #if there's only one element, return False\n    if len(l) == 1:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(l) == 1:\n        return True\n    elif len(l) == 2:\n        if l[0] + l[1] == 0:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(l)-2):\n            if l[i] + l[i+1] == 0:\n                return True\n            elif l[i] + l[i+1]!= 0:\n                return False\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(l) < 3:\n        return False\n    total = l[0] + l[1] + l[2]\n    for i in range(3,len(l)):\n        if total == l[i]:\n            return False\n        total += l[i]\n    return True\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    triples = [(l[i],l[i+1],l[i+2]) for i in range(0, len(l)-2) if l[i:i+3]!= [0,0,0]]\n    return len(set(triples)) == 3\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return _collision_count(n)\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if (n <= 1):\n        return 0\n    \n    # The line is a straight line from one car to the other.\n    # We start at the first car and iterate over the vehicles on the road.\n    # The first car that reaches the first car to the right of the next car\n    # is now the car at the right of the previous car's location.\n    # Thus, in total, we run out of time to have a car at the end of the road.\n    # Thus, we iterate until the previous car has no more cars on it.\n    # In order to improve performance, we will add a counter to our sum.\n    # This counter will be used to create a delta that will make sure we don't run\n    # out of time in the middle of a car.\n    c = 0\n    \n    # First, let's get the first car that is in the same location as the current car.\n    # We'll tell the car that the first car is the current car.\n    # This will be the previous car.\n    # We'll also get the current car's location\n    previous_location = n - 1\n    \n    # Now that we've gotten the first car, we know that the first car is the current car.\n    # We'll iterate over the current car's neighbors (location 0, 1, 2, 3)\n    # and see if it is the last car in the road.\n    # If it is, we'll increment the counter of such cars.\n    # We'll also increment the delta value for the difference between the previous and current car's location.\n    # This is used as a measure for the curvature of a car.\n    # In this way, the car can've its own location.\n    # We'll also need a delta for the number of cars that are traveling back to the previous car.\n    # This is just the number of cars that are traveling backwards to the current car.\n    # In this way, the car can have its own location.\n    delta = 0\n    \n    # Now we'll iterate over the current car's neighbors\n    # and see if it has a car behind it.\n    # If it has a car behind it, we'll increment the counter.\n    # If it has no car behind it, we'll increment the delta.\n    # In this way, the car can've its own location.\n    # We'll also increment the number of cars that are traveling backwards to the previous car.\n    # This is just the number of cars that are traveling backwards to the current car.\n    # In this way, the car can have its own location.\n    # Note: this is not the case for the first car on the road, since it can have a car behind it.\n    for i in range(1, n - 1):\n        # This is the first car on the road.\n        # If the current car is before the previous car,\n        # we know that it is behind the previous car.\n        # We'll increment the counter.\n        # If the current car is after the previous car,\n        # we know that it is behind the current car.\n        # We'll increment the delta.\n        # If the current car is ahead of the previous car,\n        # we know that it is behind the current car.\n        # We'll increment the number of cars that are traveling backwards to the previous car.\n        # This is just the number of cars that are traveling backwards to the current car.\n        # In this way, the car can have its own location.\n        # Note: this is not the case for the first car on the road, since it can have a car behind it.\n        if (previous_location - i) > 0:\n            c += 1\n        previous_location = previous_location - i\n        delta += 1\n        \n    # Now we have a value that is the number of cars that are traveling backwards to the current car.\n    # We'll add this to the sum.\n    # We'll also add this to the sum of the number of cars that are traveling backwards to the current car.\n    # In this way, the car can have its own location.\n    # Note: this is not the case for the first car on the road, since it can have a car behind it.\n    # In this way, the car can have its own location.\n    # Note: this is not the case for the first car on the road, since it can have a car behind it.\n    # In this way, the car can have its own location.\n    delta += c\n    \n    # Return the sum o"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return 1 + n*n\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: Implement a car_race_collision function.\n    # This should be a function that takes a distance and a set of cars as input,\n    #  and returns a number of collisions.  The function should return an int representing\n    #  the number of collisions.\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    car_lanes = int(math.log2(n))\n    collision_count = 0\n    for car in range(1, car_lanes+1):\n        if car % 2 == 0:\n            for lane in range(car_lanes):\n                if car - lane == car_lanes:\n                    collision_count += 1\n        else:\n            for lane in range(car_lanes):\n                if car - lane == car_lanes:\n                    collision_count += 1\n    return collision_count\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum([1 for car in range(n) if car_race(car)])\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return int((n/2 - n/3)*4 + (2*n/3 - 2*n/3)**2)\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum(1 for _ in range(n) if car_lane_collision(n, _))\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    cars = []\n    for i in range(n):\n        cars.append(car(0, 0))\n    for i in range(n):\n        cars[i].set_heading(1)\n    return len(cars)\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # The max speed.\n    max_speed = n - 1\n    # The number of cars.\n    n_cars = n\n    # Initialize the starting position.\n    pos = [0]*(2*n_cars)\n    # Initialize the collision flags.\n    collision = 0\n    # Loop through the position array.\n    for i in range(2*n_cars):\n        # Update the collision flags.\n        if pos[i] < max_speed:\n            collision = collision + 1\n        # Update the position.\n        pos[i] = pos[i] + max_speed\n    # Return the number of such collisions.\n    return collision\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [el+1 for el in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for el in l:\n        result.append(el + 1)\n    return result\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i, elem in enumerate(l):\n        l[i] = elem + 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return list(l) + [l[-1] + 1]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [element + 1 for element in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l[0] = l[0] + 1\n    return l\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(l)!= 2:\n        return False\n    \n    if l[0] + l[1] == 0:\n        return True\n    elif l[0] + l[1] < 0:\n        return False\n    else:\n        return pairs_sum_to_zero([l[0], l[1]])\n    \ndef main():\n    \"\"\"\n    >>> pairs_sum_to_zero([1, 2, 3, 5, -3, 5, -2, -4])\n    True\n    >>> pairs_sum_to_zero([1, 2, 3, 5, 7, 2, -4])\n    False\n    >>> pairs_sum_to_zero([2, 4, 5, 7, 3, 5])\n    False\n    >>> pairs_sum_to_zero([2, -4, -2, -3, 4, -5])\n    True\n    \"\"\"\n    print(pairs_sum_to_zero([1, 2, 3, 5, -3, 5, -2, -4]))\n    print(pairs_sum_to_zero([1, 2, 3, 5, 7, 2, -4]))\n    print(pairs_sum_to_zero([2, 4, 5, 7, 3, 5]))\n    \nmain()\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    c = 0\n    for item in l:\n        c += item\n        if c == 0:\n            return True\n        elif c == 1:\n            return False\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i]+l[j]==0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(l) == 2 and all(a == b for a, b in zip(l, l[1:]))\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # If the list is empty, return False\n    if len(l) == 0:\n        return False\n    \n    # If the list is only one element, return False\n    if len(l) == 1:\n        return False\n    \n    # If the list contains two different elements, return False\n    if l[0]!= l[1]:\n        return False\n    \n    # Otherwise, get the sum of all the elements to zero\n    sum = l[0] + l[1]\n    # Count the number of elements in the list that are equal to zero\n    count = 0\n    # For each element in the list, check if it is equal to 0, if it is, add 1 to the count\n    # Else, the list is not the sum of a zero and return False\n    for i in l:\n        if i == 0:\n            count += 1\n    return count == "
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Write your code here\n    if len(l)!= 2:\n        return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(list(set(l))) == 2"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(l) == 0:\n        return False\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x = x % base\n    if x < base:\n        x = base - x\n    return str(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    b = list(str(x))\n    a = int(''.join(b[::-1]))\n    b[0], b[1] = str(a//base), str((a % base)//base)\n    return ''.join(b)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return bin(x)[2:].zfill(base)\n    \ndef multiplication(x: int, y: int):\n    \"\"\"Multiply two numbers.\n    return result after product of two numbers.\n    >>> multiplication(3, 5)\n    12\n    >>> multiplication(100, 1000)\n    100000\n    \"\"\"\n    return x*y\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return format(x, 'b')\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if base < 1:\n        return '1' + str(base)\n    return str(x // base) + str(base)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    base_num = {\"1\": \"I\", \"2\": \"II\", \"3\": \"III\", \"4\": \"IV\", \"5\": \"V\", \"6\": \"VI\", \"7\": \"VII\", \"8\": \"VIII\", \"9\": \"IX\", \"10\": \"X\"}\n    return base_num[str(x)]\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert 0 < x <= base, 'Value must be between 0 and base'\n    return str(base**x)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def change_base2(y):\n        s = str(y)\n        if y > base:\n            return s[-1] + change_base(y % base)\n        elif y < base:\n            return change_base2(y % base) + s[0]\n        else:\n            return s[0]\n    return change_base2(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    y = str(x)\n    if x < 10:\n        y = str(x)\n    else:\n        y = y[1] + str(x % base)\n    return y\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if base > 10:\n        return ''.join(map(str, str(base - x)))\n    return str(base * x)\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    return (a * (h/2))\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return a*h*(h-1)//2"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return 0.5*(a*a+h*h)\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (a*h)//2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    return (a*h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if h == 0:\n        return 0\n    else:\n        return (a*h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a > h:\n        return 0\n    elif a < 0:\n        return 0\n    elif a > h:\n        return (a * h) / 2\n    elif a == h:\n        return a ** 2\n    else:\n        return 4 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (a*h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if a >= h:\n        return 0\n    if a <= 0 or h <= 0:\n        return 0\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return (h/2)*a**2\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n <= 0:\n        raise ValueError(\"Argument must be greater than or equal to 0.\")\n    elif n == 1 or n == 2:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\n        \n    \nprint(fib4(5))\nprint(fib4(6))\nprint(fib4(7)"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n <= 0:\n        return\n    \n    if n == 1:\n        return 0\n    \n    fib4(n - 1)\n    \n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1 or n == 2:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if n <= 1:\n        return n\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def fib4_rec(n, prev=0, next=1):\n        if n == 0 or n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return prev + next + fib4_rec(n-1, prev, next)\n    return fib4_rec(n)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def fib4(n):\n        if n == 0 or n == 1:\n            return 0\n        else:\n            return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return round(sorted(l)[len(l) // 2], 0)\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l.sort()\n    n = len(l)\n    return (l[n//2] if n % 2 == 0 else l[n//2 - 1] if n % 2 == 1 else l[n//2])\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(l) % 2:\n        return float(l[int(len(l)/2)])\n    else:\n        return (l[int(len(l)/2)-1] + l[int(len(l)/2)])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l_len = len(l)\n    if l_len % 2 == 0:\n        return (l[l_len//2 -1] + l[l_len//2]) / 2\n    else:\n        return l[l_len//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l) == 0:\n        raise ValueError(\"empty list\")\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l_length = len(l)\n    if l_length % 2 == 0:\n        return (l[int(l_length/2)-1] + l[int(l_length/2)])/2\n    else:\n        return l[int(l_length/2)]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = 0\n    n = len(l)\n    if n % 2!= 0:\n        return (l[n//2] + l[n//2 - 1])/2\n    else:\n        return l[n//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(l) < 1:\n        raise ValueError(\"No elements in the list\")\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        l = l[int(len(l)/2)]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l = sorted(l)\n    m = len(l) // 2\n    return l[m]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(l) / len(l)\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = text.lower()\n    return s == s[::-1]"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s_text = str(text)\n    rev = s_text[::-1]\n    if s_text == rev:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return text[::-1] == text\n    if len(text) < 1:\n        return True\n    if len(text) == 1:\n        return text == text[::-1]\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    text = text.lower()\n    return text[::-1] == text\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not text:\n        return True\n    \n    mid = len(text) // 2\n    left = text[:mid]\n    right = text[mid:]\n    \n    if right == right[::-1]:\n        return True\n    \n    if left == left[::-1]:\n        return True\n    \n    return False\n    \ndef get_sorted_pairs(seq: list, key: int) -> list:\n    \"\"\"\n    Return a list of (right, left) pairs of the sequence that are sorted\n    >>> get_sorted_pairs([1, 2, 3, 4, 5], 0)\n    [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n    >>> get_sorted_pairs([1, 2, 3, 4, 5], 1)\n    [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n    >>> get_sorted_pairs([1, 2, 3, 4, 5], 0)\n    [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n    \"\"\"\n    index = key\n    l = []\n    r = []\n    \n    for i in range(len(seq)):\n        if key == index:\n            l.append((i, i))\n        else:\n            r.append((i, i))\n            \n        index += 1\n    \n    return sorted(l + r)\n    \ndef is_in_range(num: int, lower: int, upper: int) -> bool:\n    \"\"\"\n    Return True if given number is in the given range\n    >>> is_in_range(100, 1, 99)\n    False\n    >>> is_in_range(1, 100, 99)\n    False\n    >>> is_in_range(1, 0, 100)\n    True\n    \"\"\"\n    if not num > upper or not num < lower:\n        return False\n    \n    return num in range(lower, upper + 1)\n    \ndef permutation(nums: list, k: int) -> list:\n    \"\"\"\n    Return the number of permutations of the given list that\n    is equal to k.\n    >>> permutation([1, 2, 3, 4], 2)\n    [(0, 1, 2, 3, 4), (1, 0, 2, 3, 4), (2, 1, 0, 3, 4), (3, 2, 1, 0, 4), (4, 3, 2, 1, 0)]\n    >>> permutation([1, 2, 3, 4], 4)\n    [(0, 1, 2, 3, 4), (1, 0, 2, 3, 4), (2, 1, 0, 3, 4), (3, 2, 1, 0, 4), (4, 3, 2, 1, 0)]\n    \"\"\"\n    if not nums:\n        return []\n    \n    result = [0] * len(nums)\n    \n    permutation(nums[:k], 0, result)\n    permutation(nums[k:], len(nums))\n    \n    return result\n    \ndef productExceptSelf(nums: list) -> list:\n    \"\"\"\n    Return the product of the numbers in the array, except for the number of\n    the first nums[i] (0-indexed).\n    >>> productExceptSelf([2,3,-2,4])\n    24\n    >>> productExceptSelf([1,2,-3,4])\n    6\n    >>> productExceptSelf([-1,0,1,2,-2,3,-4])\n    24\n    >>> productExceptSelf([])\n    0\n    >>> productExceptSelf([1,2,-3,4])\n    24\n    >>> productExceptSelf([-1,0,1,2,-2,3,-4])\n    24\n    >>> productExceptSelf([-1,0,1,2,-2,3,-4])\n    24\n    \"\"\"\n    product = 1\n    \n    for num in nums[1:]:\n        product *= num\n    "
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not text: return False\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    text_list = list(text)\n    temp = text_list.copy()\n    count = 0\n    for i in range(len(temp)):\n        if temp[i]!= temp[len(temp) - i - 1]:\n            count += 1\n        else:\n            temp.remove(temp[i])\n    if count == 0:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # for now all methods are just counts\n    # instead of a recursive one\n    if len(text) <= 1:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return pow(n, p-2, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif n & 1:\n        return modp(n >> 1, p)\n    else:\n        return modp(n >> 1, p * 2)"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return pow(n, p, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (n-p+1)%p"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (n % p) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(1, n+1):\n        if(p % i == 0):\n            return i\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    while n!= 0:\n        n = n % p\n    return n\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return pow(n, p-2, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 1 or n == 2:\n        return n\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    p, n = divmod(n, p)\n    if p == 1:\n        return n % p\n    else:\n        return modp(n, p)\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = s.replace(\"a\", \"z\")\n    s = s.replace(\"z\", \"a\")\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 26) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return s.translate(encode_shift)\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join([chr(((26 - (ord(ch) - 5)) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join([chr((ord(ch) - 5 + ord(\"a\")) % 26) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 26 - 5) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    res = []\n    for char in text:\n        if char in 'aeiou':\n            res.append(char)\n    return ''.join(res)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    text = str.strip(text)\n    vowels = 'aeiouAEIOU'\n    \n    # if the input is empty\n    if text == '':\n        return ''\n    # if the input is not empty\n    if text!= '':\n        # for each character in input\n        for char in text:\n            if char not in vowels:\n                # if the character is not vowel\n                if char not in vowels:\n                    # return the character without the vowel\n                    text = text.replace(char, '')\n        return text\n    \n    return ''\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # if input is empty string, return empty string.\n    if not text:\n        return ''\n    # make string immutable and return it.\n    text = str(text)\n    return text.replace(\" \", \"\")\n    \n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ''.join([word for word in text if not word.lower() in \"aeiouy\"]"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    text = str(text)\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for char in text:\n        if char in vowels:\n            result += char\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def remove_vowels_2(text):\n        remove_text = []\n        for letter in text:\n            if letter not in 'aeiouAEIOU':\n                remove_text.append(letter)\n        return ''.join(remove_text)\n    def remove_vowels_3(text):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        final_text = []\n        for letter in text:\n            if letter not in vowels:\n                final_text.append(letter)\n        return ''.join(final_text)\n    return remove_vowels_2(text)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not text:\n        return ''\n    t = ''\n    if text.lower() in ('a', 'e', 'i', 'o', 'u'):\n        return text\n    for i in range(len(text)):\n        if text[i] in 'aeiou':\n            t += text[i]\n    return t\n    \ndef pig_it(text):\n    \"\"\"\n    pig_it is a function that takes in a string and returns a string that's the same \n    length as the original string, but in pig format.\n    >>> pig_it('Pig latin toas')\n    'Pig latin toas'\n    >>> pig_it('This is a test')\n    'This is a test'\n    >>> pig_it('A B C')\n    'Ab C'\n    >>> pig_it('Hello world!')\n    'Hello world!'\n    >>> pig_it('a b cd ef')\n    'Ab cd ef'\n    \"\"\"\n    if not text:\n        return ''\n    l = text.split()\n    if len(l[0]) == 1:\n        return ''.join([l[0] + 'ay' + remove_vowels(l[1])])\n    else:\n        return ''.join([l[0] + 'ay' + remove_vowels(l[1])] + l[2:])\n    \ndef read_only_file(filename):\n    \"\"\"\n    read_only_file is a function that takes in a file name and returns the file's\n    contents, as a string.\n    >>> read_only_file('test_file.txt')\n    'This is a test'\n    \"\"\"\n    with open(filename) as f:\n        return f.read()\n        \ndef main():\n    \"\"\"\n    main is a function that takes in no arguments, and returns the content of a\n    file that's been passed in as an argument.\n    >>> main()\n    'This is a test'\n    >>> main('test_file.txt')\n    'This is a test'\n    \"\"\"\n    text = read_only_file('test_file.txt')\n    print(text)\n    print(remove_vowels(text))\n    print(pig_it('this is a test'))\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        main()\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    text_new = \"\"\n    for letter in text:\n        if letter not in \"aeiouAEIOU\":\n            text_new += letter\n    return text_new\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"]\n    text = text.lower()\n    i = 0\n    s = \"\"\n    while i < len(text):\n        if text[i] in vowels:\n            s += text[i]\n            i += 1\n        else:\n            s += text[i]\n            i += 1\n    return s\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not text:\n        return ''\n    d = {}\n    for ch in text:\n        if ch in vowels:\n            d[ch] = 0\n        else:\n            d[ch] = d.get(ch, 0) + 1\n    for k, v in d.items():\n        if v == 1:\n            text = text.replace(k, '')\n    return text\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\ndef greater_or_equal_to_threshold(l: list, th):\n    \"\"\"Return True if all numbers in the list l are greater than or equal to th.\n    >>> greater_or_equal_to_threshold([1, 2, 4, 10], 5)\n    True\n    >>> greater_or_equal_to_threshold([1, 20, 4, 10], 100)\n    False\n    \"\"\"\n    for i in l:\n        if i >= th:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for n in l:\n        if n < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if sum(l) < t:\n        return False\n    return all(l[i] < t for i in range(len(l)))\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for num in l:\n        if num < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return all(a < b for a, b in zip(l, range(len(l))))\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if t <= 0:\n        return False\n    for i in l:\n        if i < t:\n            return False\n    return True\n    \ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    False\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n    \"\"\"\n    if t <= 0:\n        return False\n    for i in l:\n        if i > t:\n            return False\n    return True\n        \ndef main():\n    print('The below threshold is', below_threshold([1, 2, 4, 10], 100))\n    print('The below threshold is', below_threshold([1, 20, 4, 10], 5))\n    print('The below threshold is', below_threshold([1, 20, 4, 10], 0))\n    print('The below threshold is', below_threshold([1, 20, 4, 10], -5))\n    print('The below threshold is', below_threshold([1, 20, 4, 10], -10))\n    print('The below threshold is', below_threshold([1, 20, 4, 10], 1))\n    print('The below threshold is', below_threshold([1, 20, 4, 10], 0))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return all([x < t for x in l])\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    print(x, y)\n    print(x + y)\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return x+y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return x+y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    print(type(x))\n    print(type(y))\n    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return x + y\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -4\n    \"\"\"\n    return x - y\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    27\n    \"\"\"\n    return x * y\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1\n    >>> divide(5, 7)\n    2\n    \"\"\"\n    return x / y\ndef modulo(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    3\n    \"\"\"\n    return x % y\ndef exponent(x: int, y: int):\n    \"\"\"Exponent two numbers x and y\n    >>> exponent(2, 3)\n    3\n    >>> exponent(5, 7)\n    5\n    \"\"\"\n    return x ** y\ndef addition(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> addition(2, 3)\n    7\n    >>> addition(5, 7)\n    12\n    \"\"\"\n    return x + y\ndef subtraction(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtraction(2, 3)\n    1\n    >>> subtraction(5, 7)\n    -4\n    \"\"\"\n    return x - y\ndef multiplication(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiplication(2, 3)\n    6\n    >>> multiplication(5, 7)\n    27\n    \"\"\"\n    return x * y\ndef division(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> division(2, 3)\n    1\n    >>> division(5, 7)\n    2\n    \"\"\"\n    return x / y\ndef modulo_10(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> modulo_10(2, 3)\n    3\n    >>> modulo_10(5, 7)\n    3\n    \"\"\"\n    return x % y\ndef modulo_5(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> modulo_5(2, 3)\n    6\n    >>> modulo_5(5, 7)\n    27\n    \"\"\"\n    return x % y\ndef is_even(x: int) -> bool:\n    \"\"\"Check whether x is even\n    >>> is_even(2)\n    False\n    >>> is_even(3)\n    True\n    \"\"\"\n    return x % 2 == 0\ndef is_odd(x: int) -> bool:\n    \"\"\"Check whether x is odd\n    >>> is_odd(2)\n    True\n    >>> is_odd(3)\n    True\n    \"\"\"\n    return x % 2!= 0\ndef sum_of_divisors(x: int) -> int:\n    \"\"\"Sum of divisors of x\n    >>> sum_of_divisors(2)\n    2\n    >>> sum_of_divisors(3)\n    3\n    >>> sum_of_divisors(5)\n    10\n    \"\"\"\n    return sum([i for i in range(1, int(x**0.5) + 1) if x % i == 0])\ndef main():\n    while True:\n        try:\n            x = int(input(\"Enter a number: \"))\n            y = int(input(\"Enter another number: \"))\n            print(f\"{x} + {y} = {add(x, y)}\")\n            print(f\"{x} - {y} = {subtraction(x, y)}\")\n            print(f\"{x} * {y} = {multiplication(x, y)}\")\n            print(f\"{x} / {y} = {division(x, y)}\")\n            print(f\"{x} % {y} = {modulo(x, y)}\")\n            print(f"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return s0[0] == s1[0] and s0[-1] == s1[-1] and same_chars(s0[1:], s1[1:])\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return len(set(s0) & set(s1)) == len(s0)\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s0, s1 = list(s0), list(s1)\n    return (s0 == s1) and (len(s0) == len(s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n    \n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return s0 == s1.upper()\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for c in s1:\n        if c not in s0:\n            return False\n    return True"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert len(s0) == len(s1), 'lengths don\\'t match'\n    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def check_same_char(s0: str, s1: str):\n        l0: int = len(s0)\n        l1: int = len(s1)\n        if l0!= l1:\n            return False\n        # Compute the sub-string of l0:\n        if l0 == 0:\n            return True\n        return s0[:l0 - 1] == s1[:l1 - 1]\n    return check_same_char(s0, s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # To check if the two strings are equal\n    return s0 == s1\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    "
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 1:\n        return n\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    fib_table = [1, 1]\n    for i in range(2, n):\n        fib_table.append(fib_table[i-1] + fib_table[i-2])\n    return fib_table[n]\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef fib_fast(n: int):\n    \"\"\"Return n-th Fibonacci number using O(n^2) space.\n    >>> fib_fast(10)\n    55\n    >>> fib_fast(1)\n    1\n    >>> fib_fast(8)\n    21\n    \"\"\"\n    # O(n^2) time complexity\n    # O(n) space\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib_fast(n-1) + fib_fast(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n    "
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a, b = 0, 1\n    while True:\n        a, b = b, a+b\n        yield b\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 1 or n == 0:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    assert n >= 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    fib_a, fib_b = 1, 1\n    for i in range(2, n + 1):\n        fib_a, fib_b = fib_b, fib_a + fib_b\n    return fib_b\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in brackets:\n        if i == \"<\":\n            if not brackets[0] == \">\" or not brackets[0] == \"<\":\n                return False\n            else:\n                brackets = brackets[1:]\n        elif i == \">\":\n            if not brackets[0] == \"<\":\n                return False\n            else:\n                brackets = brackets[1:]\n        else:\n            return False\n    return True"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    def is_open_bracket(b):\n        if b == '<':\n            return True\n        if b == '>':\n            return False\n        \n        return False\n        \n    def is_close_bracket(b):\n        if b == '>':\n            return True\n        if b == '<':\n            return False\n        \n        return False\n        \n    def is_valid_opening(b):\n        if b == '<':\n            return False\n        if b == '>':\n            return True\n        \n        return False\n        \n    def is_valid_closing(b):\n        if b == '>':\n            return False\n        if b == '<':\n            return True\n        \n        return False\n        \n    for b in brackets:\n        if is_open_bracket(b) and is_close_bracket(b):\n            return False\n        elif is_open_bracket(b) and not is_close_bracket(b):\n            return False\n        elif not is_open_bracket(b) and is_close_bracket(b):\n            return False\n        elif not is_open_bracket(b) and not is_close_bracket(b):\n            return False\n    \n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    brackets = brackets.split()\n    return all(is_valid(bracket) for bracket in brackets)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    correct = True\n    for char in brackets:\n        if char not in {'<','>','<','>'}:\n            correct = False\n    return correct\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for bracket in brackets:\n        if bracket in \"[{}]\":\n            return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    open_bracket = open_bracket_pred(brackets)\n    closed_bracket = closed_bracket_pred(brackets)\n    return (open_bracket and closed_bracket) or (not open_bracket and closed_bracket)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return any(is_correct(b) for b in brackets.split(\"<>\"))\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for c in brackets:\n        if c!= \"<\" and c!= \">\" and c!= \">\":\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    brackets = list(brackets)\n    for index, char in enumerate(brackets):\n        if char == '<':\n            if brackets[index + 1] == '>' and brackets[index - 1] == '<':\n                return False\n        if char == '>':\n            if brackets[index + 1] == '<' and brackets[index - 1] == '>':\n                return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # _brackets = \"><>\"\n    # for _bracket in _brackets:\n    #     if bracket in _bracket:\n    #         return False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    l.sort()\n    i = 0\n    while i < len(l) - 1:\n        if l[i + 1] > l[i]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    a = l[-1]\n    for x in l[-2::-1]:\n        if x < a:\n            return False\n        a = x\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(l)):\n        if l[i] < l[i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return l[:] == sorted(l)[::-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return all(e <= e + 1 for e in l)"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sorted(l) == l[::-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l.sort()\n    return (l[-1] < l[0])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if l == sorted(l):\n        return True\n    for i in range(len(l)-1):\n        if l[i+1] < l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = set(l)\n    if len(s) > 1:\n        return all([x >= y for x, y in zip(l, sorted(s))])\n    else:\n        return l[0] >= l[1]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    mono = l.copy()\n    if len(mono) == 0:\n        return False\n    if mono[0] > mono[-1]:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert len(l1) == len(l2)\n    common_elements = []\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l1_set = set(l1)\n    l2_set = set(l2)\n    common = list(l1_set.intersection(l2_set))\n    return sorted(common)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO\n    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [x for x in set(l1) if x in l2"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert len(l1) == len(l2)\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            res.append(l1[i])\n    return res\n    \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a = set(l1)\n    b = set(l2)\n    c = a.intersection(b)\n    return c\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert len(l1) == len(l2)\n    \n    # sort the lists into ascending order\n    l1.sort()\n    l2.sort()\n    \n    # iterate through both lists, check if they are equal\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return l1[i]\n    \n    return []\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sorted(l1) + sorted(l2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def is_prime(n):\n        \"\"\"Determine whether or not a number is prime.\"\"\"\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    prime = 2\n    while prime < n:\n        if n % prime == 0:\n            n = n // prime\n        else:\n            prime += 1\n    return prime\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for factor in range(2, n):\n        if n % factor == 0:\n            return factor\n    return n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return i\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # find factor of n\n    factor_set = set()\n    factor_dict = dict()\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factor_set.add(i)\n            factor_dict[i] = 1\n    # go through each factor\n    for key in factor_set:\n        if n % key == 0:\n            value = factor_dict[key]\n            factor_dict[key] = n // key\n            # go through every factor\n            for factor in factor_dict.keys():\n                if factor!= key:\n                    # if we found a factor we've already seen it\n                    # multiply by the factor from the previous factor\n                    value = factor * value\n    # return the largest prime factor\n    return max(factor_dict, key=factor_dict.get)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prime_factor = 0\n    while n % 2 == 0:\n        prime_factor += 1\n        n = n / 2\n    return prime_factor\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Take all factors of n and remove all but one\n    factors = [i for i in range(2, n) if n % i == 0]\n    # Sort each factor and remove duplicates\n    factors.sort()\n    factors = list(dict.fromkeys(factors))\n    \n    return factors[-1]\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    factors = []\n    while n > 1:\n        if is_prime(n):\n            factors.append(n)\n            n = n // 10\n        else:\n            break\n    return len(factors) - 1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 1:\n        return 2\n    for i in range(2, n):\n        while n % i == 0:\n            n //= i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    primes = [2, 3, 5, 7]\n    if n < 2:\n        return 0\n    else:\n        for i in primes:\n            while n % i == 0:\n                n /= i\n        return n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 0:\n        return\n    return n + sum_to_n(n-1)"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = 0\n    for i in range(1,n+1):\n        s = s + i\n    return s\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum([i for i in range(1, n+1)])\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(range(1,n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum(range(1, n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(range(1,n+1))\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Open bracket\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for bracket in brackets:\n        if bracket == \"(\":\n            if brackets.count(\"(\")!= brackets.count(\")\"):\n                return False\n        elif bracket == \")\":\n            if brackets.count(\"(\")!= brackets.count(\")\"):\n                return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for bracket in brackets:\n        if bracket in \"())\":\n            return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return all(c in brackets for c in \"()())\")\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    possible_stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            possible_stack.append(i)\n        elif brackets[i] == ')':\n            if possible_stack:\n                possible_stack.pop()\n            else:\n                return False\n    return len(possible_stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def is_correct(s):\n        for c in s:\n            if c == \"(\":\n                return True\n        return False\n    \n    if len(brackets) == 0:\n        return True\n    \n    left = brackets[0]\n    for right in brackets[1:]:\n        if is_correct(left) and is_correct(right):\n            return True\n        left = right\n    return False\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    opening_brackets = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    closed_brackets = {\")\": \")\", \"}\": \"}\", \"]\": \"[\"}\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for c in brackets:\n        if c in \"([{\":\n            count += 1\n        if count == len(brackets) - 1:\n            return False\n    return True\n    \n    \ndef count_brackets(brackets: str):\n    \"\"\" count the number of brackets in brackets\n    returns the total number of brackets and the number of correct brackets\n    \"\"\"\n    count = 0\n    for c in brackets:\n        if c == '(':\n            count += 1\n        elif c == ')':\n            count -= 1\n    return count, count == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for bracket in brackets:\n        if bracket == \"(\":\n            if brackets.index(bracket)!= brackets.index(bracket+\"(\") and brackets.index(bracket+\"(\")!= -1:\n                return False\n        elif bracket == \")\":\n            if brackets.index(bracket)!= brackets.index(bracket+\")\") and brackets.index(bracket+\")\")!= -1:\n                return False\n        elif bracket == \")\":\n            if brackets.index(bracket)!= brackets.index(bracket+\")\") and brackets.index(bracket+\"(\")!= -1:\n                return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return all([\n        all([\n            brackets[i] == brackets[i+1]\n            for i in range(len(brackets)-1)\n        ])\n        and\n        all([\n            brackets[i] == brackets[i+2]\n            for i in range(len(brackets)-2)\n        ])\n    ])\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    xs = [x - 1 for x in xs]\n    xs = [x / 2 for x in xs]\n    return xs\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x[1] for x in reversed(xs[0:-1])]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [x[1] for x in xs]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [xs[i] * xs[i+1] for i in range(len(xs)-1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [ xs[1] * x**2 + xs[0] * x + xs[2] for x in xs]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(xs) == 1:\n        return [1]\n    elif len(xs) == 2:\n        return [xs[1]]\n    else:\n        return [x for x in xs[1:]] + [x**2 for x in xs[2:]]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO\n    # return list(map(lambda x: x[1] * x[0] + x[2], zip(xs, xs[1:])))\n    return list(map(lambda x: x[1] * x[0] + x[2], zip(xs, xs[1:])))"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    poly = [xs[i] for i in range(len(xs))]\n    return poly[1:]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    deriv = []\n    for i in range(len(xs)):\n        deriv.append(xs[i] * (i + 1) * xs[i + 1])\n    return deriv\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    d = [0] * len(xs)\n    for i in range(len(xs)):\n        d[i] = xs[i]\n    return d\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be positive.\")\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 0:\n        raise ValueError('n must be non-negative')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    \ndef gen_nums(n: int):\n    \"\"\"\n    Given n, generate a set of n random numbers, starting with the\n    generated numbers.\n    >>> gen_nums(1)\n    set([1])\n    >>> gen_nums(3)\n    set([1, 2])\n    >>> gen_nums(10)\n    set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    >>> gen_nums(12)\n    set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    \"\"\"\n    a = set()\n    for i in range(n):\n        a.add(random.randint(1, 100))\n    return a\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 1:\n        return 0\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 0:\n        print(\"Please enter a positive integer.\")\n        return\n    if n == 1 or n == 2:\n        return 0\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 0:\n        raise ValueError(\"The n argument must be a positive integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 0\n    return fibfib(n-2) + fibfib(n-1) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # if n <= 0:\n    #     raise ValueError('n must be positive')\n    fibfib = [0,1]\n    for i in range(2,n+1):\n        fibfib.append(fibfib[i-2] + fibfib[i-1])\n    return fibfib[n]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = int(n)\n    if n < 1:\n        raise ValueError('n must be >= 1.')\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 0\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in s:\n        if i in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    vowels = \"aeiou\"\n    return sum(1 for i in range(len(s)) if s[i] in vowels)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    return sum(1 for i in s if i in 'aeiou')\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Remove 'y'\n    s = s.replace('y', '')\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import string\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    d = dict(e for e in zip(string.ascii_lowercase, string.ascii_lowercase[::-1]) if e[0] in \"aeiou\")\n    return sum(1 for s in s if s in d)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    counter = 0\n    vowels_list = 'aeiouy'\n    for i in range(len(s)):\n        if s[i] in vowels_list:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for ch in s:\n        if ch in 'AEIOU':\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return sum(1 for i in s if i in vowels)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def binary_left_rotate(num):\n        return num[1:] + num[:1]\n    \n    def binary_right_rotate(num):\n        return num[1:] + num[:1]\n    \n    def decimal_right_rotate(num):\n        return num[1:] + num[:1]\n    \n    def decimal_left_rotate(num):\n        return num[:-1] + num[1:]\n    \n    if shift > len(str(x)):\n        shift = len(str(x))\n    else:\n        if shift < 0:\n            shift = len(str(x)) + shift\n    \n    return decimal_right_rotate(str(x)[-shift:]) + decimal_left_rotate(str(x)[:-shift])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if shift == 0:\n        return x\n    elif shift > len(x):\n        return \"\".join([x[-shift:]] + [x[:-shift]])\n    else:\n        return x[-shift:][::-1] + x[-shift:]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert(isinstance(x, int)), \"Integer must be of type int\"\n    assert(shift > len(str(x))), \"Shift must be greater than the number of digits\"\n    shift = min(shift, len(str(x)))\n    if shift == 0:\n        return str(x)\n    else:\n        return str(x)[len(str(x)) - shift:] + str(x)[:len(str(x)) - shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if shift > len(str(x)):\n        return str(x)[-shift:] + str(x)[-shift:]\n    else:\n        return str(x)[-shift:] + str(x)[-shift:]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    shift_x = shift % len(x)\n    if shift_x > 0:\n        x = x[:-shift_x] + x[-shift_x:]\n    else:\n        x = x[:-shift_x] + x[-shift_x:]\n    return x"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    num = list(str(x))\n    shift_digit = shift % len(num)\n    num = num[-shift_digit:] + num[:-shift_digit]\n    return \"\".join(num)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if shift > len(str(int(x))):\n        return str(int(x))\n    else:\n        return str(int(x) + shift)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return ''.join(f'{x}' if i%shift == 0 else f'{x}{i%shift+1}' for i in range(shift, 0, -1))\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    number = 0\n    for i in range(shift):\n        number = int(str(x)[-1-i]) + number\n        x = str(x)[:-1-i]\n    return str(number) + str(x)"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if shift > len(x):\n        return x\n    else:\n        return x[-shift:] + x[:len(x) - shift]\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sum(ord(x) for x in s.upper())\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum(ord(s[i]) - ord(s[i].upper()) for i in range(len(s)))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # time complexity: O(n)\n    # space complexity: O(1)\n    return sum(ord(i) for i in s)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0\n    for i in range(len(s)):\n        if (s[i].isalpha()):\n            result += int(s[i])\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: Write your function here...\n    l = []\n    for i in s:\n        l.append(ord(i))\n    #print(l)\n    total = 0\n    for i in l:\n        total = total + i\n    #print(total)\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum([ord(c) for c in s if c.isalpha()])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # pylint: disable=duplicate-code\n    import re\n    import string\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s) == 0:\n        return 0\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum([ord(x) for x in s])\n    # return sum(ord(x) for x in s)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    number_of_apples = s.count(\"a\")\n    number_of_oranges = s.count(\"o\")\n    number_of_mango = s.count(\"m\")\n    total_fruits = number_of_apples + number_of_oranges + number_of_mango\n    return total_fruits\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    try:\n        apple = int(s.split()[0])\n        orange = int(s.split()[2])\n        mango = int(s.split()[1])\n        return apple + orange + mango\n    except:\n        raise ValueError(\"It is not a valid input!\")\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    import math\n    apples = n//3\n    n = n%3\n    basket_size = apples*(2*n+1)\n    return math.floor(basket_size/(apples+1))\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    assert(type(s) == str)\n    assert(type(n) == int)\n    #for each element in the string, we calculate the length of the string \n    #and the sum of the length of the elements of the string in the basket.\n    \n    #first, we will calculate the length of the string \n    length_s = len(s)\n    \n    #then, we will calculate the sum of the length of the elements of the string \n    #in the basket. \n    \n    #then, we will calculate the sum of the length of the elements of the string \n    #in the basket.\n    \n    #then, we will calculate the sum of the length of the elements of the string \n    #in the basket.\n    #then, we will calculate the sum of the length of the elements of the string \n    #in the basket.\n    #then, we will calculate the sum of the length of the elements of the string \n    #in the basket.\n    \n    #then, we will calculate the sum of the length of the elements of the string \n    #in the basket.\n    #then, we will calculate the sum of the length of the elements of the string \n    #in the basket.\n    \n    #then, we will calculate the sum of the length of the elements of the string \n    #in the basket.\n    #then, we will calculate the sum of the length of the elements of the string \n    #in the basket.\n    #then, we will calculate the sum of the length of the elements of the string \n    #in the basket.\n    \n    \n    return length_s + sum(range(1,length_s)) * n\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not isinstance(s,str):\n        raise ValueError(\"fruit_distribution: expect a string\")\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # answer = 0\n    # apples = 0\n    # oranges = 0\n    # mango = 0\n    # for i in s:\n    #     if i.isdigit():\n    #         apples += int(i)\n    #     else:\n    #         numbers = i.split(' ')\n    #         for number in numbers:\n    #             if number.isdigit():\n    #                 apples += int(number)\n    #             else:\n    #                 numbers = number.split(' ')\n    #                 for number in numbers:\n    #                     if number.isdigit():\n    #                         numbers = int(number)\n    #                     else:\n    #                         break\n    #                 if numbers == 4:\n    #                     mango += 1\n    #     answer += apples * oranges\n    # return answer\n    \n    def fruits_oranges(s,n):\n        \"\"\"\n        In this task, you will be given a string that represents a number of apples and oranges \n        that are distributed in a basket of fruit this basket contains \n        apples, oranges, and mango fruits. Given the string that represents the total number of \n        the oranges and apples and an integer that represent the total number of the fruits \n        in the basket return the number of the mango fruits in the basket.\n        for examble:\n        fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n        fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n        fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n        fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n        \"\"\"\n        # answer = 0\n        # apples = 0\n        # oranges = 0\n        # mango = 0\n        # for i in s:\n        #     if i.isdigit():\n        #         apples += int(i)\n        #     else:\n        #         numbers = i.split(' ')\n        #         for number in numbers:\n        #             if number.isdigit():\n        #                 apples += int(number)\n        #             else:\n        #                 numbers = number.split(' ')\n        #                 for number in numbers:\n        #                     if number.isdigit():\n        #                         numbers = int(number)\n        #                     else:\n        #                         break\n        #                 if numbers == 4:\n        #                     mango += 1\n        #     answer += apples * oranges\n        # return answer\n        \n        # answer = 0\n        # apples = 0\n        # oranges = 0\n        # mango = 0\n        # for i in s:\n        #     if i.isdigit():\n        #         apples += int(i)\n        #     else:\n        #         numbers = i.split(' ')\n        #         for number in numbers:\n        #             if number.isdigit():\n        #                 apples += int(number)\n        #             else:\n        #                 numbers = number.split(' ')\n        #                 for number in numbers:\n        #                     if number.isdigit():\n        #                         numbers = int(number)\n        #                     else:\n        #                         break\n        #                 if numbers == 4:\n        #                     mango += 1\n        #     answer += apples * oranges\n        # return answer\n        \n        # answer = 0\n        # apples = 0\n        # oranges = 0\n        # mango = 0\n        # for i in s:\n        #     if i.isdigit():\n        #         apples += int(i)\n        #     else:\n        #         numbers = i.split(' ')\n        #         for number in numbers:\n        #             if number.isdigit():\n        #                 apples += int(number)\n        #             else:\n        #                 numbers = number.split(' ')\n        #                 for number in numbers:\n        #                     if number.isdigit():\n        #                         numbers = int(number)\n        #                     else:"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    dist_list = []\n    #dist_list.append(s[i].count('a'))\n    #dist_list.append(s[i].count('m'))\n    dist_list.append(s[0:3].count('a'))\n    dist_list.append(s[0:3].count('m'))\n    dist_list.append(s[0:3].count('o'))\n    dist_list.append(s[0:3].count('v'))\n    dist_list.append(s[0:3].count('t'))\n    dist_list.append(s[0:3].count('g'))\n    dist_list.append(s[0:3].count('e'))\n    #print(dist_list)\n    return sum(dist_list)\n    #print(sum(dist_list))\n    \ndef main():\n    #for x in range(1, 11):\n    #    for y in range(1, 11):\n    #        print(fruit_distribution(\"apple and orange\", x), fruit_distribution(\"orange and apple\", y))\n    for i in range(1, 11):\n        for j in range(1, 11):\n            print(fruit_distribution(\"apple and orange\", i), fruit_distribution(\"orange and apple\", j))\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \"\"\"\n    The list \"l\" is a list of all the fruits and their respective sizes. \n    Each item in \"l\" represents a fruit.\n    \"\"\"\n    l = ['apples', 'oranges','mango', 'orange', 'banana']\n    #converting string into an array\n    apples = [int(i) for i in s.split()]\n    orange = [int(i) for i in s.split() if i.startswith(\"or\")]\n    mango = [int(i) for i in s.split() if i.startswith(\"m\")]\n    total_orange = sum(orange)\n    total_mango = sum(mango)\n    total = sum(apples)\n    result = 0\n    #calculating the total number of mango fruit in basket and result\n    for fruit in range(len(l)):\n        if l[fruit] == \"mango\":\n            result += total_mango\n        if l[fruit] == \"orange\":\n            result += total_orange\n        if l[fruit] == \"apples\":\n            result += total\n    return result\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    apples = 0\n    oranges = 0\n    mango = 0\n    for i in s:\n        if i == 'a':\n            apples += 1\n        elif i == 'g':\n            oranges += 1\n        elif i =='m':\n            mango += 1\n    return (apples*oranges*mango)//n\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if s == \"\":\n        return 0\n    a = 0\n    b = 0\n    for i in s:\n        if i == \"a\":\n            a += 1\n        elif i == \"b\":\n            b += 1\n    return a + b - 1\n    #Given:\n    #fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    #fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    #fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    #fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \n    # END PROBLEM 11\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    min_index = 0\n    min_value = sys.maxsize\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Remove all the even elements.\n    nodes = [i for i in arr if i%2!= 0]\n    # Get the min index of the even elements.\n    min_val = min(nodes)\n    index = nodes.index(min_val)\n    # Return the index.\n    return [min_val, index]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    pass"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # res = []\n    # for node in arr:\n    #     index = get_index(node, arr)\n    #     if index == -1:\n    #         return None\n    #     if index % 2 == 0:\n    #         res.append(node)\n    # return res\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def search(arr, value):\n        if not arr:\n            return []\n        if arr[0] == value:\n            return [arr[0], arr[1]]\n        if arr[0] % 2:\n            index = search(arr[1:] + [arr[0] - value % 2], value)\n            index.append(arr[0])\n            return index\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Solution 1\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # Runtime: 26 ms (91.97%)\n    # Memory Usage: 14.8 MB (95.68%)\n    def getEvenNodes(arr):\n        index = 0\n        l = len(arr)\n        if l <= 1:\n            return []\n        for i in range(l // 2):\n            if arr[i] % 2 == 0:\n                index = i\n                break\n        return [arr[index], i]\n    \n    # Solution 2\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # Runtime: 56 ms (60.02%)\n    # Memory Usage: 14.2 MB (85.98%)\n    # Runtime: 76 ms (69.74%)\n    # Memory Usage: 14.3 MB (88.97%)\n    def getEvenNodes2(arr):\n        n = len(arr)\n        for i in range(n // 2):\n            if arr[i] % 2 == 0:\n                return [arr[i], i]\n        return []\n    \n    # Solution 3\n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    # Runtime: 44 ms (64.12%)\n    # Memory Usage: 14.1 MB (85.99%)\n    # Runtime: 76 ms (69.74%)\n    # Memory Usage: 14.2 MB (89.97%)\n    def getEvenNodes3(arr):\n        n = len(arr)\n        if n <= 1:\n            return []\n        evenNodes = []\n        for i in range(n):\n            if arr[i] % 2 == 0:\n                evenNodes.append(arr[i])\n        return evenNodes\n    \n    # Solution 4\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # Runtime: 64 ms (72.43%)\n    # Memory Usage: 14.2 MB (91.87%)\n    def getEvenNodes4(arr):\n        return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0]\n    \n    # Runtime: 68 ms (7.42%)\n    # Memory Usage: 14.4 MB (85.97%)\n    def getEvenNodes5(arr):\n        evenNodes = []\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                evenNodes.append(arr[i])\n        return evenNodes\n    \n    # Runtime: 72 ms (59.33%)\n    # Memory Usage: 14.1 MB (92.68%)\n    def getEvenNodes6(arr):\n        n = len(arr)\n        if n <= 1:\n            return []\n        return [arr[i] for i in range(n) if arr[i] % 2 == 0]\n    \n    # Runtime: 65 ms (7.72%)\n    # Memory Usage: 14.2 MB (93.99%)\n    def getEvenNodes7(arr):\n        n = len(arr)\n        if n <= 1:\n            return []\n        return [arr[i] for i in range(n) if arr[i] % 2 == 0]\n    \n    # Runtime: 79 ms (59.43%)\n    # Memory Usage: 14.2 MB (90.28%)\n    def getEvenNodes8(arr):\n        n = len(arr)\n        if n <= 1:\n            return []\n        return [arr[i] for i in range(n) if arr[i] % 2 == 0]\n    \n    # Runtime: 56 ms (52.09%)\n    # Memory Usage: 14.2 MB (90.88%)\n    def getEvenNodes9(arr):\n        n = len(arr)\n        if n <= 1:\n            return []\n        return [arr[i] for i in range(n) if arr[i] % 2 == 0]\n    \n    # Runtime: 76 ms (46.24%)\n    # Memory Usage: 14.2 MB (91.97%)\n    def getEvenNodes10(arr):\n        evenNodes = []\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                evenNodes.append(arr[i]"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not arr:\n        return []\n    min_val = arr[0]\n    index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            index = i\n    return [arr[index], index]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if arr is None or len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n    \n    def _pluck(arr, start, end):\n        \"\"\"\n        Recursive solution.\n        \"\"\"\n        if start == end:\n            return arr[start]\n        \n        # Pick the smallest even value from the given array.\n        index = start + (end - start) // 2\n        \n        # Recursively pick the smallest even value of the given array.\n        mid = _pluck(arr, start, index)\n        end = index - 1\n        return mid if mid % 2 == 0 else _pluck(arr, index + 1, end)\n    \n    return _pluck(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def min_even(arr):\n        if len(arr) == 0:\n            return []\n        idx = 0\n        min_val = arr[0]\n        for index, num in enumerate(arr):\n            if num % 2 == 0:\n                min_val = min(min_val, num)\n                idx = max(idx, index)\n        return [min_val, idx]\n        \n    if len(arr) == 0:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not arr:\n        return []\n    \n    arr = [arr[0]] + sorted(arr)\n    \n    ans = arr[-1]\n    for i in range(2, len(arr)):\n        if arr[i] % 2 == 0 and arr[i]!= arr[i-1]:\n            ans = arr[i]\n            break\n    \n    return [ans, arr.index(ans)]\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # create a dictionary\n    dictionary = {}\n    # create a dictionary\n    for num in lst:\n        # if the key is already in the dictionary, increment the count\n        if num in dictionary:\n            dictionary[num] += 1\n        else:\n            # if the key does not exist in the dictionary, initialize the count to 1\n            dictionary[num] = 1\n    # get the highest value\n    highest_val = max(dictionary.values())\n    # find the key whose value is greater than highest_val\n    for key in dictionary.keys():\n        if dictionary[key] == highest_val:\n            return key\n    return -"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return max(lst, key=lambda num: num if num >= 0 else -1)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return max(lst, key = lambda x: -x if x > 0 else -1)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    g = lst[0]\n    for i in range(len(lst)):\n        g = max(g, lst[i])\n        if lst[i] == g:\n            if lst[i-1]!= g:\n                return lst[i]\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    freq = dict()\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Code here\n    '''\n    def get_max_value(list):\n        list = sorted(list)\n        for i in list:\n            if i < 0:\n                return i\n        return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    counter = {}\n    for i in lst:\n        if i not in counter.keys():\n            counter[i] = 1\n        else:\n            counter[i] += 1\n    lst2 = sorted(counter.items(), key=lambda kv: kv[1])\n    for i in lst2:\n        if i[1] >= 1:\n            return i[0]\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    if count == 0:\n        return -1\n    elif count > 1:\n        for num in lst:\n            if num > num:\n                count -= 1\n    else:\n        return num\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst.sort()\n    for index, item in enumerate(lst):\n        if item <= 0:\n            return -1\n        if item in lst:\n            return item\n    return -1\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # Sort the integers in reverse order\n    lst.sort(reverse=True)\n    \n    # Sort the list in original order\n    return lst[::-1]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    out_lst = []\n    \n    # print(lst)\n    \n    for i in range(len(lst)):\n        # print(lst[i])\n        for j in range(i+1, len(lst)):\n            # print(lst[i])\n            # print(lst[j])\n            # print(lst[j])\n            if lst[i] > lst[j]:\n                # print(f'{i} > {j} > {lst[i]}')\n                out_lst.insert(0, lst[i])\n                break\n            elif lst[i] < lst[j]:\n                out_lst.append(lst[j])\n                break\n        else:\n            out_lst.append(lst[i])\n        # print(f'{i} > {j} > {lst[i]}')\n        # print(out_lst)\n    \n    # print(f'{len(out_lst)} > 0')\n    return out_lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    new_lst = []\n    for i in lst:\n        if i < lst[0]:\n            new_lst.append(i)\n        elif i > lst[-1]:\n            new_lst.append(i)\n        else:\n            new_lst.append(lst[0])\n            lst.pop(0)\n    return new_lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    output = []\n    for number in lst:\n        for i in range(len(lst)-1):\n            if lst[i+1] < number:\n                output.append(number)\n                break\n        else:\n            output.append(number)\n    return output\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = sorted(lst)\n    if lst == []:\n        return []\n    i = len(lst)\n    a = []\n    for j in range(i):\n        while lst[i] > 0:\n            a.append(lst[i])\n            i -= 1\n    return a + [lst[i]] + strange_sort_list(lst[i+1:])\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = []\n    for i in lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        diff = max_val - min_val\n        lst.remove(min_val)\n        lst.append(max_val + diff)\n        res.append(min_val)\n        res.append(max_val)\n        res.append(diff)\n    return res\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst.sort()\n    print(lst)\n    lst.reverse()\n    print(lst)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sorted(lst, key=lambda x: x if x < 0 else -x)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sort_lst = []\n    for num in lst:\n        sort_lst.append(min(lst))\n        lst.remove(min(lst))\n        sort_lst.append(max(lst))\n        lst.remove(max(lst))\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Return the area of the triangle\n    if triangle_valid_area(a, b, c):\n        return round(calc_triangle_area(a, b, c), 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if is_valid_triangle(a, b, c):\n        return math.sqrt((b**2) + (c**2)) / 2\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if triangle_are_valid_sides(a, b, c):\n        if a + b > c:\n            return triangle_area(a, b, c - a)\n        else:\n            return (a + b) * (c - a)\n    else:\n        return 'Invalid'\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if triangle_valid(a, b, c):\n        return (a * (b - c) + c * (b - a) + c * (a - b)) / 2\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if a == b and b == c:\n        return round(sqrt((b * b) - (a * a)), 2)\n    elif a!= b!= c or b!= c!= a or a!= c!= a:\n        return -1\n    else:\n        return round((b * b) - (a * a), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a < b + c or b < a + c or c < a + b:\n        return -1\n    return (a + b + c) / 2\n    \ndef is_triangle(a, b, c):\n    '''\n    Returns whether the given parameters form a valid triangle.\n    a,b,c are all integers.\n    '''\n    return triangle_area(a, b, c)!= -1\n    \ndef main():\n    '''\n    Example 1:\n    Input\n    [3, 4, 5]\n    Output\n    6\n    Explanation\n    The three sides are: 4 = x + 2\n    The area is 6.0 = x*4 + 2*x + 2\n    '''\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(triangle_area(a, b, c))\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a > b + c or b > a + c or c > a + b:\n        return -1\n    else:\n        return (((b * c) - (a * c)) * 2) / 3\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not is_valid_triangle(a, b, c):\n        return -1\n    else:\n        return round(abs((a*b)/2), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    assert (a < b and b < c)\n    assert (a >= 0) and (a <= 1 and b >= 0) and (a <= 1 and b <= 1)\n    assert (a > b and a > c and b > c)\n    # assert (a + b + c >= 0) and (a + b + c >= 1)\n    return round(((b * c) / 2), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Use formula to find area\n    return round(math.sqrt(3 * (a + b + c) * (a + b + c) * (a + b + c)))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return check_palindromic(q,w) and sum(q) <= max(q) and all(q) <= sum(q"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #print(q,w)\n    if len(q) == 1:\n        return False\n    if len(q) >= 2:\n        if sum(q) == (max(q) + min(q)):\n            return True\n    else:\n        if sum(q) == w:\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Write your code here\n    pass\n    \nif __name__ == '__main__':\n    print(will_it_fly([1, 2], 5))\n    print(will_it_fly([3, 2, 3], 1))\n    print(will_it_fly([3, 2, 3], 9))\n    print(will_it_fly([3, 2, 3], 10))\n    print(will_it_fly([3, 2, 3], 20))\n    print(will_it_fly([3, 2, 3], 10))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    q = [q[x] for x in range(len(q)) if q[x] > 0]\n    w = sum(q)\n    if w < w_max(q):\n        return False\n    for x in range(len(q)):\n        q[x] = q[x] - x\n        q[len(q)-1-x] = q[len(q)-1-x] - x\n    return will_it_fly(q,w)"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # The list q is balanced, and the sum of its elements is less than or equal the maximum possible weight w.\n    if sum(q) <= w and sum(q) >= q[0]:\n        return False\n    \n    # The sum of the list q is greater than or equal the maximum possible weight w.\n    elif sum(q) > w:\n        return False\n    \n    # The list q is balanced, and the sum of the list q is greater than or equal the maximum possible weight w.\n    else:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if q == []:\n        return False\n    \n    if q[0] == w:\n        return True\n    \n    if len(q) < w:\n        return False\n    \n    return will_it_fly(q[1:], w-q[0])\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    w = max(w,sum(q))\n    return w<w*(len(q)//2)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if q == []:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    \n    for i in q:\n        if is_palindrome(i):\n            count += 1\n    \n    return count < w\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    palindromes = []\n    for i in range(len(arr) - 1):\n        palindromes.append(arr[i])\n        palindromes.append(arr[i])\n    for i in range(len(palindromes) - 1):\n        if palindromes[i]!= palindromes[i + 1]:\n            return palindromes[i]\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(arr)):\n        arr[i] = int(str(arr[i])[::-1])\n    print(arr)\n    for i in range(len(arr)-1, 0, -1):\n        arr[i] = int(str(arr[i])[::-1])\n    print(arr)\n    for i in range(0, len(arr)-1):\n        if arr[i+1] - arr[i] < 2 and arr[i] == arr[i+1] - arr[i]:\n            return arr[i+1] - arr[i]\n        elif arr[i] - arr[i+1] < 2 and arr[i] == arr[i+1] - arr[i]:\n            return arr[i] - arr[i+1]\n        elif arr[i] + arr[i+1] < 2 and arr[i] == arr[i+1] - arr[i]:\n            return arr[i+1] + arr[i]\n        elif arr[i] - arr[i+1] < 2 and arr[i] == arr[i+1] - arr[i]:\n            return arr[i+1] - arr[i]\n    return 0"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #Initialize\n    len_arr = len(arr)\n    m = len_arr//2\n    if len_arr%2 == 0:\n        return len_arr\n    else:\n        return m+1\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not arr:\n        return 0\n    n = len(arr)\n    min_change = float('inf')\n    i = 0\n    while i < n:\n        min_change = min(min_change, arr[i] - arr[i - 1])\n        i += 1\n    return min_change\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    current_index = 0\n    min_num_changes = 0\n    for current_index in range(len(arr)-1):\n        min_num_changes += current_index\n        if arr[current_index]!= arr[current_index+1]:\n            break\n    return min_num_changes\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(arr) <= 1:\n        return len(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max_len = len(arr)\n    sum_len = sum(arr)\n    # for the end, find the sum of the digits of arr - once we get the\n    # sum of the digits, we can divide arr by 2 and get the sum of the digits.\n    # then, the sum of the digits is the remainder\n    remainder = sum_len % 2\n    if remainder:\n        # we have to add the remainder to arr\n        # since it is 1 but it needs to be +2 times the sum of the digits\n        # and the remaining 2 digits\n        # if remainder == 1:\n        #     arr = arr + [remainder - 1]\n        arr = arr + [remainder]\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    stack = []\n    for i in arr:\n        while stack and i < stack[-1] and arr.count(stack[-1]) < arr.count(i):\n            stack.pop()\n        while stack and i < stack[-1] and arr.count(i) > arr.count(stack[-1]):\n            stack.pop()\n        if stack:\n            stack.append(i)\n    return stack[-1] - stack[0]\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    arr.sort()\n    n = len(arr)\n    smallest_change_count = 0\n    for i in range(n):\n        smallest_change_count += n - i\n    return smallest_change_count\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in lst1:\n        count = count + len(i)\n    for i in lst2:\n        count = count - len(i)\n    return lst1 + lst2[:count]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # write your code here\n    return lst1 + lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(set(lst1) & set(lst2))\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for item in lst1:\n        if len(item) < len(lst2):\n            result.append(item)\n        else:\n            result.append(item[:len(lst2)-len(item)])\n    return result"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Time: O(n)\n    # Space: O(n)\n    # We have a number of elements and the inner list has all unique characters\n    # and all characters are unique.\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [len(x) for x in lst1 if len(x) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    dict1 = collections.Counter(lst1)\n    dict2 = collections.Counter(lst2)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for char in lst1:\n        if char in lst2:\n            count += 1\n    return count\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst1) == len(lst2):\n        lst1.sort()\n        lst2.sort()\n        return lst1 + lst2\n    return False\n    \n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(filter(lambda x: len(x) < len(lst2), lst1 + lst2))\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a > 100:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    x = 0\n    for i in range(1, (a+1)):\n        if (a % i) == 0:\n            x += 1\n    return x <= 1\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ((a % 1000) > 1) or (a % 100 == 0) or (a % 10 == 0)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(3, int(math.sqrt(a)) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # assume that a is less then 100\n    # base case\n    if a == 2 or a == 3 or a == 5:\n        return True\n    # if a is less than 3, return False\n    elif a < 3:\n        return False\n    # recur for all 3 numbers\n    else:\n        # set the previous number a\n        a = a - 1\n        while a > 0:\n            # check if a is not less than 3\n            # if it is, then return False\n            if a % 3 == 0:\n                return False\n            elif a % 5 == 0:\n                return False\n            # if not, then check if a is less than 3 and 3\n            # if it is, then return False\n            else:\n                if a < 3:\n                    return False\n                elif a % 3 == 0:\n                    return False\n                elif a % 5 == 0:\n                    return False\n                else:\n                    # set the previous number a\n                    a -= 2\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(3, a, 2):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    i = 3\n    while i * i <= a:\n        if a % i == 0:\n            return False\n        i += 2\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for n in range(4, a):\n        if a % n == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for x in range(2, 100):\n        if a % x == 0:\n            return False\n    return True\n    \ndef is_power_of_2(n):\n    \"\"\"Write a function that takes an integer and returns True if n is a power of 2 and False otherwise.\n    Example:\n    is_power_of_2(10) == True\n    10 = 2^2 + 2^1 + 2^0 = 10\n    \"\"\"\n    if n > 0:\n        return n == (n & 1)\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return True\n    if n == 2:\n        return n == x\n    if n == 3:\n        return n == x ** 2\n    if n == 4:\n        return n == x ** 3\n    if n % 2 == 0:\n        return n!= x\n    return n!= x ** 2\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_simple_power(x, n // 2)\n    else:\n        return is_simple_power(x, n * 2)\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # ======================================================\n    # COMPLETE THIS PART\n    \n    # ======================================================\n    # Write your code here.\n    # return True if x is a simple power of n and False if x is not simple power\n    return (n**int(str(x)[::-1])) % 10 == 0\n    \n    pass"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    if n in (1, 2, 4):\n        return True\n    else:\n        if is_simple_power(x, n//2):\n            return True\n        else:\n            if is_simple_power(x, n):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not n:\n        return False\n    if n==1:\n        return True\n    if n<1:\n        return False\n    if n<=1000:\n        return is_simple_power(n, n//10) and is_simple_power(n//10, n%10)\n    else:\n        return False\n    # or:\n    # if n==1:\n    #     return is_simple_power(n, n//10) and is_simple_power(n//10, n%10)\n    # if n<1:\n    #     return False\n    # if n<=1000:\n    #     return is_simple_power(n, n//10) and is_simple_power(n//10, n%10)\n    # else:\n    #     return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 1:\n        return True\n    elif n == 2:\n        return is_simple_power(x, 1)\n    elif n == 3:\n        return is_simple_power(x, 2)\n    elif n == 4:\n        return is_simple_power(x, 3)\n    elif n == 5:\n        return is_simple_power(x, 4)\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if x in [1, 2, 3, 4, 5]:\n        return True\n    elif n == 1:\n        return False\n    elif n == 2:\n        return n % 2 == 0\n    elif n == 3:\n        return n % 2 == 0\n    elif n == 4:\n        return n % 2 == 0\n    elif n == 5:\n        return n % 2 == 0\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return False\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return False\n    if n == 9:\n        return True\n    if n == 10:\n        return False\n    if n == 11:\n        return True\n    if n == 12:\n        return False\n    if n == 13:\n        return True\n    if n == 14:\n        return False\n    if n == 15:\n        return True\n    if n == 16:\n        return False\n    if n == 17:\n        return True\n    if n == 18:\n        return False\n    if n == 19:\n        return True\n    if n == 20:\n        return False\n    if n == 21:\n        return True\n    if n == 22:\n        return False\n    if n == 23:\n        return True\n    if n == 24:\n        return False\n    if n == 25:\n        return True\n    if n == 26:\n        return False\n    if n == 27:\n        return True\n    if n == 28:\n        return False\n    if n == 29:\n        return True\n    if n == 30:\n        return False\n    if n == 31:\n        return True\n    if n == 32:\n        return False\n    if n == 33:\n        return True\n    if n == 34:\n        return False\n    if n == 35:\n        return True\n    if n == 36:\n        return False\n    if n == 37:\n        return True\n    if n == 38:\n        return False\n    if n == 39:\n        return True\n    if n == 40:\n        return False\n    if n == 41:\n        return True\n    if n == 42:\n        return False\n    if n == 43:\n        return True\n    if n == 44:\n        return False\n    if n == 45:\n        return True\n    if n == 46:\n        return False\n    if n == 47:\n        return True\n    if n == 48:\n        return False\n    if n == 49:\n        return True\n    if n == 50:\n        return False\n    if n == 51:\n        return True\n    if n == 52:\n        return False\n    if n == 53:\n        return True\n    if n == 54:\n        return False\n    if n == 55:\n        return True\n    if n == 56:\n        return False\n    if n == 57:\n        return True\n    if n == 58:\n        return False\n    if n == 59:\n        return True\n    if n == 60:\n        return False\n    if n == 61:\n        return True\n    if n == 62:\n        return False\n    if n == 63:\n        return True\n    if n == 64:\n        return False\n    if n == 65:\n        return True\n    if n == 66:\n        return False\n    if n == 67:\n        return True\n    if n == 68:\n        return False\n    if n == 69:\n        return True\n    if n == 70:\n        return False\n    if n == 71:\n        return True\n    if n == 72:\n        return False\n    if n == 73:\n        return True\n    if n == 74:\n        return False\n    if n == 75:\n        return True\n    if n == 76:\n        return False\n    if n == 77:\n        return True\n    if n == 78:\n        return False\n    if n == 79:\n        return True\n    if n == 80:\n        return False\n    if n == 81:\n        return True\n    if n == 82:\n        return False\n    if n == 83:\n        return True\n    if n == 84:\n        return False\n    if n == 85:\n        return True\n    if n == 86:\n        return False\n    if n == 87:\n        return True\n    if n == 88:\n        return False\n    if n == 89:\n        return True\n    if n == 90:\n        return False\n    if n == 91:\n        return True\n    if n == 92:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 1 or n == 0:\n        return True\n    if n%n == 0:\n        return False\n    else:\n        return is_simple_power(x, n//2)\n    \ndef check_prime(x):\n    \"\"\"Your task is to return true if x is a prime number and false otherwise.\"\"\"\n    if x == 1:\n        return False\n    elif x == 2:\n        return True\n    else:\n        if x%2 == 0:\n            return False\n        else:\n            for i in range(3, int(x**0.5), 2):\n                if x%i == 0:\n                    return False\n            return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a<0:\n        return False\n    elif a==0:\n        return True\n    elif a==1:\n        return False\n    elif a==2:\n        return False\n    elif a==3:\n        return True\n    elif a==4:\n        return True\n    elif a==5:\n        return True\n    elif a==6:\n        return True\n    elif a==7:\n        return True\n    elif a==8:\n        return True\n    elif a==9:\n        return True\n    elif a==10:\n        return True\n    elif a==11:\n        return True\n    elif a==12:\n        return True\n    elif a==13:\n        return True\n    elif a==14:\n        return True\n    elif a==15:\n        return True\n    elif a==16:\n        return True\n    elif a==17:\n        return True\n    elif a==18:\n        return True\n    elif a==19:\n        return True\n    elif a==20:\n        return True\n    elif a==21:\n        return True\n    elif a==22:\n        return True\n    elif a==23:\n        return True\n    elif a==24:\n        return True\n    elif a==25:\n        return True\n    elif a==26:\n        return True\n    elif a==27:\n        return True\n    elif a==28:\n        return True\n    elif a==29:\n        return True\n    elif a==30:\n        return True\n    elif a==31:\n        return True\n    elif a==32:\n        return True\n    elif a==33:\n        return True\n    elif a==34:\n        return True\n    elif a==35:\n        return True\n    elif a==36:\n        return True\n    elif a==37:\n        return True\n    elif a==38:\n        return True\n    elif a==39:\n        return True\n    elif a==40:\n        return True\n    elif a==41:\n        return True\n    elif a==42:\n        return True\n    elif a==43:\n        return True\n    elif a==44:\n        return True\n    elif a==45:\n        return True\n    elif a==46:\n        return True\n    elif a==47:\n        return True\n    elif a==48:\n        return True\n    elif a==49:\n        return True\n    elif a==50:\n        return True\n    elif a==51:\n        return True\n    elif a==52:\n        return True\n    elif a==53:\n        return True\n    elif a==54:\n        return True\n    elif a==55:\n        return True\n    elif a==56:\n        return True\n    elif a==57:\n        return True\n    elif a==58:\n        return True\n    elif a==59:\n        return True\n    elif a==60:\n        return True\n    elif a==61:\n        return True\n    elif a==62:\n        return True\n    elif a==63:\n        return True\n    elif a==64:\n        return True\n    elif a==65:\n        return True\n    elif a==66:\n        return True\n    elif a==67:\n        return True\n    elif a==68:\n        return True\n    elif a==69:\n        return True\n    elif a==70:\n        return True\n    elif a==71:\n        return True\n    elif a==72:\n        return True\n    elif a==73:\n        return True\n    elif a==74:\n        return True\n    elif a==75:\n        return True\n    elif a==76:\n        return True\n    elif a==77:\n        return True\n    elif a==78:\n        return True\n    elif a==79:\n        return True\n    elif a==80:\n        return True\n    elif a==81:\n        return True\n    elif a==82:\n        return True\n    elif a==83:\n        return True\n    elif a="
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return type(a)==int and a<=3 and a%3==0 and a!=0\n    \ndef istriangle(a,b,c):\n    '''\n    Write a function that takes three integers a, b, c and returns True \n    if this ingeger is a triangle of these three integers.\n    Examples:\n    istriangle(1,2,3) ==> True\n    istriangle(5,3,4) ==> False\n    istriangle(-1,0,0) ==> True\n    istriangle(2,3,5) ==> True\n    istriangle(0,0,0) ==> True\n    istriangle(0,0,2) ==> False\n    '''\n    return type(a)==int and type(b)==int and type(c)==int and a+b+c!=0\n    \ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if it is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> True\n    isprime(2) ==> False\n    isprime(3) ==> True\n    isprime(4) ==> False\n    isprime(12) ==> True\n    isprime(24) ==> False\n    '''\n    return type(a)==int and a>=2 and a%2==0 and isprime(a-1)\n    \ndef isprimes(n):\n    '''\n    Write a function that takes an integer n and returns True \n    if n is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprimes(1) ==> True\n    isprimes(2) ==> True\n    isprimes(3) ==> True\n    isprimes(4) ==> False\n    isprimes(5) ==> True\n    isprimes(6) ==> False\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if(a == 0):\n        return True\n    if(a == 1):\n        return False\n    if(a == 2):\n        return False\n    if(a == 3):\n        return False\n    if(a == 4):\n        return False\n    if(a == 5):\n        return False\n    if(a == 6):\n        return False\n    if(a == 7):\n        return False\n    if(a == 8):\n        return False\n    if(a == 9):\n        return False\n    if(a == 10):\n        return False\n    if(a == 11):\n        return False\n    if(a == 12):\n        return False\n    if(a == 13):\n        return False\n    if(a == 14):\n        return False\n    if(a == 15):\n        return False\n    if(a == 16):\n        return False\n    if(a == 17):\n        return False\n    if(a == 18):\n        return False\n    if(a == 19):\n        return False\n    if(a == 20):\n        return False\n    if(a == 21):\n        return False\n    if(a == 22):\n        return False\n    if(a == 23):\n        return False\n    if(a == 24):\n        return False\n    if(a == 25):\n        return False\n    if(a == 26):\n        return False\n    if(a == 27):\n        return False\n    if(a == 28):\n        return False\n    if(a == 29):\n        return False\n    if(a == 30):\n        return False\n    if(a == 31):\n        return False\n    if(a == 32):\n        return False\n    if(a == 33):\n        return False\n    if(a == 34):\n        return False\n    if(a == 35):\n        return False\n    if(a == 36):\n        return False\n    if(a == 37):\n        return False\n    if(a == 38):\n        return False\n    if(a == 39):\n        return False\n    if(a == 40):\n        return False\n    if(a == 41):\n        return False\n    if(a == 42):\n        return False\n    if(a == 43):\n        return False\n    if(a == 44):\n        return False\n    if(a == 45):\n        return False\n    if(a == 46):\n        return False\n    if(a == 47):\n        return False\n    if(a == 48):\n        return False\n    if(a == 49):\n        return False\n    if(a == 50):\n        return False\n    if(a == 51):\n        return False\n    if(a == 52):\n        return False\n    if(a == 53):\n        return False\n    if(a == 54):\n        return False\n    if(a == 55):\n        return False\n    if(a == 56):\n        return False\n    if(a == 57):\n        return False\n    if(a == 58):\n        return False\n    if(a == 59):\n        return False\n    if(a == 60):\n        return False\n    if(a == 61):\n        return False\n    if(a == 62):\n        return False\n    if(a == 63):\n        return False\n    if(a == 64):\n        return False\n    if(a == 65):\n        return False\n    if(a == 66):\n        return False\n    if(a == 67):\n        return False\n    if(a == 68):\n        return False\n    if(a == 69):\n        return False\n    if(a == 70):\n        return False\n    if(a == 71):\n        return False\n    if(a == 72):\n        return False\n    if(a == 73):\n        return False\n    if(a == 74):\n        return False\n    if(a == 75):\n        return False\n    if(a == 76):\n        return False\n    if(a == 77):\n        return False\n    if(a == 78):\n        return False\n    if(a == 79):\n        return False\n    if(a == 80):\n        return False\n    if(a == 81):\n        return False\n    if(a == 82):\n        return False\n    if(a == 83):\n        return False\n    if(a == 84):\n        return False\n    if("
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return isinstance(a, int) and (a >= 1 and a <= 180)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    x = a\n    while x > 0:\n        x = x // 3\n    return x == 1\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return a**3 == a**3 + 4\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return not(a%5==0) and not(a%3==0) and not(a==0)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a >= 1 and a <= 9:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return not any(i**3 == a for i in range(1, a))\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return a**3 == a**3 + 4*a**2 + 3*a + 1\n    \ndef solve(a,b,c):\n    '''\n    Write a function that takes three parameters (a,b,c) \n    and returns True if the sum of a and b and c is \n    a^2 + b^2 + c^2, otherwise return False. \n    Note: you may assume a,b,c are integers.\n    Examples:\n    solve(2,5,6) ==> True\n    solve(3,5,6) ==> False\n    solve(2,6,5) ==> False\n    '''\n    return a**2 + b**2 + c**2 == a**2 + b**2 + c**2\n    \ndef fib(n):\n    '''\n    Write a function that returns the number of non-overlapping \n    triangles in a cyclic cubic spiral from 1 to n. \n    The triangles must be numbered from 1 to n.\n    Note: you may assume n is a positive integer.\n    Examples:\n    fib(1) ==> 0\n    fib(2) ==> 1\n    fib(3) ==> 2\n    fib(4) ==> 3\n    fib(5) ==> 4\n    fib(6) ==> 5\n    '''\n    if n == 0 or n == 1:\n        return n\n    if n > 2:\n        if fib(n-1) == n or fib(n-2) == n:\n            return fib(n-1) + fib(n-2)\n    else:\n        return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # Returns the number of digits\n    # TODO: complete the function\n    if num == \"\":\n        return 0\n    else:\n        decimal = num[::-1].count(\"0\")\n        return decimal\n    \n    # TODO: complete the function\n    \n    # I think the idea is the same as above, but the two letters get reversed. \n    # Two letters like A and B are represented by a 0, and a 1.\n    \n    # If all the digits are even, A is the first letter.\n    # If all the digits are odd, B is the second letter.\n    # So I am looking for A and B for even or odd.\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    dic={\n        \"0\":0,\n        \"1\":1,\n        \"2\":2,\n        \"3\":3,\n        \"4\":4,\n        \"5\":5,\n        \"6\":6,\n        \"7\":7,\n        \"8\":8,\n        \"9\":9,\n        \"A\":10,\n        \"B\":11,\n        \"C\":12,\n        \"D\":13,\n        \"E\":14,\n        \"F\":15\n    }\n    tmp=0\n    num=num.upper()\n    for i in num:\n        if dic.get(i):\n            tmp=tmp+dic[i]\n    if tmp>0:\n        return tmp\n    else:\n        return 1\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len([x for x in str(num) if x.isnumeric()])\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if is_hexadecimal(num):\n        return int(num, 16)\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    key = 0\n    i = 0\n    while(num[i]!= \"0\"):\n        key += int(num[i])*(10**(len(num)-1-i))\n        i += 1\n    return key\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not isinstance(num, str):\n        return 0\n    if len(num) == 0:\n        return 0\n    if num[0] == '0':\n        return 0\n    if num[0] == '1':\n        return 1\n    if num[0] == '2':\n        return 2\n    if num[0] == '3':\n        return 3\n    if num[0] == '4':\n        return 4\n    if num[0] == '5':\n        return 5\n    if num[0] == '6':\n        return 6\n    if num[0] == '7':\n        return 7\n    if num[0] == '8':\n        return 8\n    if num[0] == '9':\n        return 9\n    if num[0] == 'A':\n        return 10\n    if num[0] == 'B':\n        return 11\n    if num[0] == 'C':\n        return 12\n    if num[0] == 'D':\n        return 13\n    if num[0] == 'E':\n        return 14\n    if num[0] == 'F':\n        return 15\n    if num[0] == '0':\n        return 16\n    return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def split_num(num):\n        num_str = list(num)\n        for i in range(len(num_str)):\n            if num_str[i] == 'A' or num_str[i] == 'B' or num_str[i] == 'C' or num_str[i] == 'D' or num_str[i] == 'E' or num_str[i] == 'F':\n                return i\n    def count_digits(num):\n        num_str = list(num)\n        digits = []\n        for i in range(len(num_str)):\n            if num_str[i] == 'A' or num_str[i] == 'B' or num_str[i] == 'C' or num_str[i] == 'D' or num_str[i] == 'E' or num_str[i] == 'F':\n                continue\n            else:\n                num_str[i] = int(num_str[i])\n                digits.append(num_str[i])\n        return digits\n    num_str = list(num)\n    digits = count_digits(num_str)\n    return digits\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    num = num.lower()\n    count = 0\n    for i in range(len(num)):\n        if num[i].isdigit() == False or i==len(num)-1:\n            count+=1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if num==\"0\":\n        return 0\n    digits = list(map(int, num))\n    count = 0\n    for i in range(0,len(digits),2):\n        count+=1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    m = 0\n    for i in range(len(num)):\n        if(num[i] == '0'):\n            m += 1\n        elif(num[i] == '1'):\n            m += 2\n        elif(num[i] == '2'):\n            m += 3\n        elif(num[i] == '3'):\n            m += 5\n        elif(num[i] == '4'):\n            m += 7\n        elif(num[i] == '5'):\n            m += 11\n        elif(num[i] == '6'):\n            m += 13\n        elif(num[i] == '7'):\n            m += 17\n        elif(num[i] == '8'):\n            m += 21\n        elif(num[i] == '9'):\n            m += 23\n        elif(num[i] == 'A'):\n            m += 4\n        elif(num[i] == 'B'):\n            m += 6\n        elif(num[i] == 'C'):\n            m += 9\n        elif(num[i] == 'D'):\n            m += 10\n        elif(num[i] == 'E'):\n            m += 12\n        elif(num[i] == 'F'):\n            m += 14\n    if(num[len(num)-1] == 'F'):\n        m += 1\n    return m\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n    binary_string = \"\"\n    if decimal == 0:\n        binary_string += \"0\"\n    else:\n        binary_string += \"1\"\n    binary_string += str(decimal)\n    return binary_string\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    binary = str(decimal)\n    return 'db'+binary[1:len(binary)-1]\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return bin(decimal)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # assume the decimal is integer\n    \n    binary_number = \"\"\n    for i in range(len(str(decimal))):\n        #print(i)\n        if i % 2 == 0:\n            binary_number += '0'\n        else:\n            binary_number += '1'\n    \n    return binary_number\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    binary = \"\"\n    binary += '0' * ((len(bin(decimal)) - 2) % 8)\n    binary += '1' * ((len(bin(decimal)) - 2) // 8)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    binary = ''\n    # convert decimal to binary\n    while decimal > 0:\n        binary = binary + str(decimal % 2)\n        decimal = decimal // 2\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    binary_str = \"\"\n    while decimal:\n        decimal_string = decimal % 2\n        binary_string += str(decimal_string)\n        decimal = decimal // 2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # print(\"decimal_to_binary(\", decimal, \")\")\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    binary_str = \"db\"\n    num_str = str(decimal)\n    if len(num_str) % 2 == 0:\n        if num_str[0] == \"0\":\n            num_str = num_str[1:]\n        binary_str += num_str\n    else:\n        binary_str += num_str\n        num_str = \"0\" + num_str\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if decimal == None:\n        return None\n    if decimal == 0:\n        return '0'\n    \n    binary = \"\"\n    while decimal!= 0:\n        digit = decimal % 2\n        binary = binary + str(digit)\n        decimal = decimal // 2\n    return binary\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    if len(s)<3:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def is_happy_string(s):\n        d = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n        for c in s:\n            d[c] += 1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Write your code here\n    if len(s) < 3:\n        return True\n    else:\n        for i in range(3):\n            if s[i]!= s[i+1]:\n                return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(s) < 3:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = list(s)\n    n = len(s)\n    for i in range(n - 3):\n        if s[i]!= s[i + 3] and s[i]!= s[i + 2] and s[i]!= s[i + 1] and s[i]!= s[i + 3]:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(s) < 3:\n        return False\n    else:\n        for i in range(len(s)-2):\n            if s[i]!= s[i+1] and s[i]!= s[i+2]:\n                return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(s) == 3 and set(s)!= set('abcdefghijklmnopqrstuvwxyz'):\n        return False\n    else:\n        for x in range(len(s)):\n            if s[x]!= s[x+1]:\n                return False\n        for x in range(len(s)-2):\n            if s[x]!= s[x+2] and s[x]!= s[x+1] and s[x]!= s[x+2]:\n                return False\n        for x in range(len(s)-3):\n            if s[x]!= s[x+3] and s[x]!= s[x+2] and s[x]!= s[x+1] and s[x]!= s[x+3]:\n                return False\n        return True\ndef count_occurrences(s):\n    \"\"\"Counts the occurences of the characters in a given string.\"\"\"\n    count = 0\n    for x in s:\n        if x in s[:len(s)-1]:\n            count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        prev_char = s[i]\n        next_char = s[i + 1]\n        if prev_char!= next_char:\n            return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(s) < 3:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return check_length(s)\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    numerical_grades = []\n    for grade in grades:\n        if grade > 3.0:\n            numerical_grades.append('D')\n        elif grade > 2.0:\n            numerical_grades.append('B')\n        elif grade > 1.0:\n            numerical_grades.append('C')\n        elif grade > 0.7:\n            numerical_grades.append('D')\n        elif grade > 0.0:\n            numerical_grades.append('E')\n    return numerical_grades\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    import re\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    def get_gpa(grade):\n        \"\"\"Convert a grade to a string and return the result\"\"\"\n        if grade > 3 or grade < 0:\n            return 'Invalid grade'\n        else:\n            return f'{grade:.2f}'\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Set up variables\n    grades = grades.split() # Split into a list\n    count = len(grades) # Number of grades\n    my_list = list() # Create empty list\n    for i in range(count): # For each grade list element\n        grade = grades[i] # Set grade as grade\n        my_list.append(grade) # Add the grade to the list\n    \n    # Get the list of GPA\n    my_list_gpa = [int(i) for i in my_list] # Convert the list into an integer\n    gpa = max(my_list_gpa) # Get the maximum value from list\n    my_gpa = [i for i, j in enumerate(my_list_gpa) if j == gpa] # Get the grade numbers for the GPA\n    \n    # Sort GPA into a list\n    my_gpa_sorted = sorted(my_gpa) # Sort the list\n    \n    # Get the letter grades\n    my_letter_grades = [] # Empty list\n    for i in my_gpa_sorted: # Iterate through GPA\n        my_letter_grades.append(grades[i]) # Add the grade to the list\n    \n    # Return the letter grades\n    return my_letter_grades # Return the letter grades\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Replace all '+' in the grades list with A+ for all 3 numbers\n    grades_list = list(map(lambda grade: str(grade) if grade >= 0 else 'A', grades))\n    # Filter out all letters but the last letter\n    new_list = [letter for letter in grades_list if letter!= '-']\n    # Sort the list based on GPA\n    new_list.sort()\n    # return only the last letter\n    return new_list[-1]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [el+'+' for el in sorted(grades)]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst_grades = []\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    gpa_table = {\n    'A+' : 4.0,\n    'A' : 3.7,\n    'A-': 3.3,\n    'B+': 3.0,\n    'B' : 2.7,\n    'B-': 2.3,\n    'C+' : 2.0,\n    'C' : 1.7,\n    'C-': 1.3,\n    'D+' : 1.0,\n    'D' : 0.7,\n    'D-': 0.0,\n    'E' : 0.0\n    }\n    \n    return [gpa_table.get(grade, grade) for grade in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = 'A+'\n    if grades[0] >= 4.0:\n        s = 'A+'\n    if grades[1] >= 3.7:\n        s = 'A'\n    if grades[2] >= 3.3:\n        s = 'A'\n    if grades[3] >= 3.0:\n        s = 'B+'\n    if grades[4] >= 2.7:\n        s = 'B'\n    if grades[5] >= 2.3:\n        s = 'B'\n    if grades[6] >= 2.0:\n        s = 'C+'\n    if grades[7] >= 1.7:\n        s = 'C'\n    if grades[8] >= 1.3:\n        s = 'C'\n    if grades[9] >= 1.0:\n        s = 'D+'\n    if grades[10] >= 0.7:\n        s = 'D'\n    if grades[11] >= 0.0:\n        s = 'D'\n    if grades[12] >= 0.0:\n        s = 'E'\n    return [s]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # IMPORTANT NOTE: You must complete this function\n    # Use the function 'numerical_letter_grade' to calculate the GPA for the students.\n    # You must return a list of letter grades (using the following table) in order\n    # You are not allowed to use the function 'input'\n    # Fill this in with the correct output\n    gpa_list = []\n    for grade in grades:\n        gpa_list.append(numerical_letter_grade(grade))\n    return gpa_list\n    \n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if string.isdigit():\n        return False\n    elif string.count(' '):\n        return False\n    elif string.count('$') == 0:\n        return False\n    else:\n        for i in range(2, len(string)+1):\n            if string.isdigit():\n                return False\n            elif string.count(' ') == 0:\n                return False\n            elif string.count('$') == 0:\n                return False\n            else:\n                for j in range(2, i):\n                    if string.count(' ') == 0:\n                        return False\n                    elif string.count('$') == 0:\n                        return False\n                    else:\n                        for k in range(2, j):\n                            if string.count('$') == 0:\n                                return False\n                            elif string.count(' ') == 0:\n                                return False\n                            elif string.count('$') == 0:\n                                return False\n                            else:\n                                if i%j == 0:\n                                    return False\n    return True\ndef count_biggest(word):\n    \"\"\"Write a function that returns the number of times a word appears in the given\n    string\n    Examples\n    count_biggest('Hello') == 1\n    count_biggest('aabbb') == 1\n    count_biggest('HelloWorld') == 3\n    \"\"\"\n    count = 0\n    for i in range(len(word)):\n        if word[i] in string.ascii_lowercase:\n            count += 1\n    return count\ndef is_palindrome(word):\n    \"\"\"Write a function that takes a word as a parameter and returns True\n    if the word is a palindrome or False otherwise\n    Examples\n    is_palindrome('abcd') == True\n    is_palindrome('Hi') == True\n    is_palindrome('The') == True\n    \"\"\"\n    return word == word[::-1]\ndef is_palindrome_v2(word):\n    \"\"\"Write a function that takes a word as a parameter and returns True\n    if the word is a palindrome or False otherwise\n    Examples\n    is_palindrome_v2('abcd') == True\n    is_palindrome_v2('Hi') == True\n    is_palindrome_v2('The') == True\n    \"\"\"\n    return word == word[::-1]\ndef palindrome_in_string(string):\n    \"\"\"Write a function that takes a string as a parameter and returns True\n    if the string is a palindrome or False otherwise\n    Examples\n    palindrome_in_string('hello') == True\n    palindrome_in_string('aabbb') == True\n    palindrome_in_string('Hii') == True\n    palindrome_in_string('iAm') == True\n    palindrome_in_string('1234') == True\n    palindrome_in_string('I') == False\n    palindrome_in_string('a') == True\n    palindrome_in_string('Hello') == False\n    \"\"\"\n    if string.isalpha():\n        return True\n    elif string.isdigit():\n        return True\n    elif string.count(' ') == 0:\n        return True\n    elif string.count('$') == 0:\n        return True\n    else:\n        for i in string.lower():\n            if string.count('$') == 0:\n                return True\n            elif string.count(' ') == 0:\n                return True\n            elif string.count('$') == 0:\n                return True\n            else:\n                if string.isalpha() == False:\n                    if string.isupper() == False:\n                        return True\n                    elif string.islower() == False:\n                        return True\n                else:\n                    if string.isalpha() == True:\n                        if string[0]!= 'a' and string[0]!= 'b' and string[0]!= 'c' and string[0]!= 'd' and string[0]!= 'e' and string[0]!= 'f' and string[0]!= 'g' and string[0]!= 'h' and string[0]!= 'i' and string[0]!= 'j' and string[0]!= 'k' and string[0]!= 'l' and string[0]!='m' an"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # for each char in the string\n    for i in string:\n        # if the char is a number\n        if (i.isnumeric()):\n            # check if the number is prime\n            for j in range(2, int(i)):\n                # if the number is divisible by 2\n                if (int(i) % j == 0):\n                    # return True\n                    return False\n            # if the number is divisible by 4\n            if (int(i) % 4 == 0):\n                # return True\n                return False\n        # if not a char\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(2,string):\n        for j in range(2,i):\n            if(i % j == 0):\n                break\n        else:\n            count+=1\n            print(count,i)\n    if(count == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Make sure we have a string to work with\n    if type(string)!= str:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(string) <= 1:\n        return False\n    elif string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(string) == len(set(string))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(string) % 2 == 0\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(string) > 1:\n        if string.count('.') == 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # set the length variable to 0\n    length = 0\n    # iterate over all characters in string\n    for char in string:\n        # if the char is a digit, check if it is greater than 0\n        if char.isdigit():\n            # if it is then check if it is not a zero\n            if char.isalpha() == True and int(char) > 0:\n                length = length + 1\n    # if the length variable is greater than zero, return True\n    return length >= 1\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    string = str(string)\n    if len(string) == 1:\n        return True\n    else:\n        for i in range(2, len(string)):\n            if string[i] in string[:i]:\n                return False\n    return True\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    c = 0\n    for d in range(2, n+1):\n        if d % 2 == 0:\n            c += 1\n        else:\n            c += 1\n            if d % 3 == 0:\n                c += 1\n    return c\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum(n == str(n)[0]]\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Calculate the number of 1's, all positive and all negative numbers\n    s = 0\n    for i in range(10**n, 1-10**n+1):\n        if i % 10 == 0:\n            s += 1\n        elif i % 10 > 0:\n            s += i % 10\n    return s\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0\n    if n < 1:\n        return 0\n    for i in range(1, n + 1):\n        if i % 10 == 1:\n            result += 1\n        if i % 10 == 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            count +=1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 10: return 0\n    start = 1\n    end = n // 10\n    if n % 10 == 0: return 0\n    return end + start * (n % 10 - 1)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(n+1):\n        if i % 10 == 1:\n            count += 1\n        elif i % 10 == 0:\n            count += 1\n            if i > 2:\n                count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    i = 2\n    while i <= n:\n        if i % 10 == 1:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(2, n + 1):\n        if (i % 10 == 0) and (i > 1):\n            count += 1\n        if (i % 10 == 9) or (i % 10 == 0):\n            if i > 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(10):\n            if i == 1:\n                continue\n            elif i == n:\n                return count\n            elif (i*2) % n == 0:\n                if (i+1) % n == 0:\n                    count += 1\n        return count\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def bin2hex(n):\n        res = ''\n        while n!= 0:\n            res = str(n % 2) + res\n            n //= 2\n        return res\n    def hex2bin(n):\n        res = ''\n        while n!= 0:\n            res = chr(int(res, 2) + 1) + res\n            n //= 16\n        return res\n    def digits(n):\n        return bin2hex(n)[::-1]\n    \n    n = int(N)\n    if n == 0:\n        return '0'\n    \n    result = []\n    for i in range(1, n + 1):\n        result.append(digits(i))\n    \n    result = ''.join(result)\n    \n    return result\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    def binary_sum(num):\n        binary_sum = 0\n        while num:\n            binary_sum += num % 2\n            num = num // 2\n        return binary_sum\n    \n    def main(N):\n        if N == 0:\n            return \"0\"\n        \n        return str(binary_sum(N))\n    \n    return main(N)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum = 0\n    while(N > 0):\n        sum = sum * 10 + N % 10\n        N = N // 10\n    return \"\".join(map(str, sum % 2))\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def N_binary(n):\n        s = []\n        while n:\n            s.append(str(n%2))\n            n //= 2\n        return \"\".join(s)\n    \n    return N_binary(N)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a = \"\"\n    n = 0\n    while N!= 0:\n        a += str(N%2)\n        N //= 2\n        n += 1\n    a = a.replace(\"0\", \"1\")\n    return a\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum = 0\n    for i in range(0, N + 1):\n        sum += i\n    return str(sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Solve each base case\n    if N == 0:\n        return \"\"\n    if N == 1:\n        return '0'\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if N == 0:\n        return '0'\n    if N == 1:\n        return '1'\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    b = str(bin(N)[2:])\n    return b\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def cal(n):\n        \"\"\"Finds the sum of digits of a given integer.\n        \n        @n integer\n             Constraints: n must be greater than 0.\n        @return a string of binary number\n        \"\"\"\n        if n < 10:\n            return str(n)\n        else:\n            return cal(n//10) + str(n%10)\n    \n    def baseConversion(num, b):\n        \"\"\"Converts a binary number to the decimal.\n        \n        @num integer\n             Constraints: 0 \u2264 num \u2264 10^16.\n             @b binary number\n                Constraints: num <= b.\n        @return decimal number\n        \"\"\"\n        if b == \"10\":\n            return int(num)\n        elif b == \"01\":\n            return int(num*2)\n        elif b == \"11\":\n            return int(num*3)\n        elif b == \"1\":\n            return int(num)\n    \n    def decConversion(num, b):\n        \"\"\"Converts a decimal number to a binary number.\n        \n        @num decimal number\n             Constraints: 0 \u2264 num \u2264 2^256.\n        @b binary number\n             Constraints: num <= b.\n        @return binary number\n        \"\"\"\n        if num == 0:\n            return \"0\"\n        elif num == 1:\n            return \"1\"\n        elif num == 2:\n            return \"2\"\n        elif num == 3:\n            return \"3\"\n        elif num == 4:\n            return \"4\"\n        elif num == 5:\n            return \"5\"\n        elif num == 6:\n            return \"6\"\n        elif num == 7:\n            return \"7\"\n        elif num == 8:\n            return \"8\"\n        elif num == 9:\n            return \"9\"\n        elif num == 10:\n            return \"A\"\n        elif num == 11:\n            return \"B\"\n        elif num == 12:\n            return \"C\"\n        elif num == 13:\n            return \"D\"\n        elif num == 14:\n            return \"E\"\n        elif num == 15:\n            return \"F\"\n        elif num == 16:\n            return \"G\"\n        elif num == 17:\n            return \"H\"\n        elif num == 18:\n            return \"I\"\n        elif num == 19:\n            return \"J\"\n        elif num == 20:\n            return \"K\"\n        elif num == 21:\n            return \"L\"\n        elif num == 22:\n            return \"M\"\n        elif num == 23:\n            return \"N\"\n        elif num == 24:\n            return \"O\"\n        elif num == 25:\n            return \"P\"\n        elif num == 26:\n            return \"Q\"\n        elif num == 27:\n            return \"R\"\n        elif num == 28:\n            return \"S\"\n        elif num == 29:\n            return \"T\"\n        elif num == 30:\n            return \"U\"\n        elif num == 31:\n            return \"V\"\n        elif num == 32:\n            return \"W\"\n        elif num == 33:\n            return \"X\"\n        elif num == 34:\n            return \"Y\"\n        elif num == 35:\n            return \"Z\"\n        else:\n            return \"a\"\n    \n    if N <= 0:\n        return \"Invalid Input\"\n    \n    if N == 0:\n        return \"0\"\n    \n    if N == 1:\n        return baseConversion(0, \"10\")\n    \n    if N == 2:\n        return baseConversion(1, \"10\") + baseConversion(2, \"11\")\n    \n    if N == 3:\n        return baseConversion(1, \"10\") + baseConversion(2, \"11\") + baseConversion(3, \"11\")\n    \n    if N == 4:\n        return baseConversion(1, \"10\") + baseConversion(2, \"11\") + baseConversion(3, \"11\") + baseConversion(4, \"11\")\n    \n    if N == 5:\n        return baseConversion(1, \"10\") + baseConversion(2, \"11\") + baseConversion(3, "
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    new_lst = []\n    for i in range(len(lst)//2):\n        new_lst.append(lst[i])\n    for i in range(len(lst)//2):\n        new_lst.append(lst[i])\n    new_lst.append(lst[len(lst)//2])\n    return new_lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst_copy = lst[:]\n    for i in range(len(lst_copy)//2):\n        if lst_copy[i] % 2!= 0:\n            lst_copy[i], lst_copy[i+1] = lst_copy[i+1], lst_copy[i]\n    return lst_copy\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    new = []\n    even = []\n    odd = []\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def even_index(lst, odd_index):\n        return odd_index % 2 == 0 if odd_index >= len(lst) else odd_index + 1\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even = [x for x in lst if x % 2 == 0] + [x for x in lst if x % 2 == 1]\n    return even\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst.sort()\n    length = len(lst)\n    result = []\n    for i in range(length):\n        if i % 2 == 0:\n            result.append(lst[i])\n    return result\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    even = []\n    odd = []\n    for i in range(len(lst)):\n        if i%2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    return odd + even\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst_len = len(lst)\n    for i in range(lst_len):\n        if i % 2 == 0:\n            lst.append(lst[i])\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 1:\n            lst.append(lst[i])\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = 0\n    r = len(lst)\n    for i in range(r):\n        if i % 2 == 0:\n            s += lst[i]\n        else:\n            s += lst[i]\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # code goes here\n    s = s.replace(\" \",\"\")\n    s = s.replace(\"\\t\",\" \")\n    s = s.replace(\"\\r\",\" \")\n    s = s.replace(\"\\n\",\" \")\n    s = s.replace(\"\\u00a0\",\" \")\n    s = s.split(\" \")\n    \n    a = s.copy()\n    n = len(a)\n    for i in range(n):\n        for j in range(n-i):\n            if a[j] > a[j+1]:\n                a[j],a[j+1] = a[j+1],a[j]\n    return \" \".join(a)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return''.join(sorted(s.replace(' ','').split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = ''.join(sorted(s.split()))\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: Write your function here\n    s = s.split()\n    s = sorted(s)\n    return''.join(s)"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # your code here\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \" \".join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join(sorted(s, key=ord))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    string = ''\n    if len(s) == 0:\n        return string\n    for char in s:\n        if len(string) < len(char):\n            string += char\n        else:\n            index = char.lower().find(char)\n            string = char.lower()\n            if index == -1:\n                string = string + char\n            else:\n                string = string[:index] + char + string[index + 1:]\n    return string"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Solution:\n    # s = s.split()\n    # # s = ''.join(sorted(s, key=lambda x: len(x), reverse=True))\n    # # s = ''.join(sorted(s, key=lambda x: x.lower()))\n    # s =''.join([x for x in s if x.lower() not in
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x = x - 1\n    return [(row[x], row[x+1]) for row in lst]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    ret = []\n    n = len(lst)\n    nums = [x for x in range(0,n)]\n    nums.sort(reverse=True)\n    for i in range(n):\n        ret.append((nums[i],i))\n    return ret\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    coords = []\n    i = 0\n    while i < len(lst):\n        #print(\"coords before\", coords)\n        coords.append(lst[i])\n        i += 1\n        #print(\"coords after\", coords)\n    #print(coords)\n    coords = sorted(coords, reverse=True)\n    #print(coords)\n    return [x] + [coords[i] for i in range(len(coords))]\n    #print(coords)\ndef get_coords(lst, row):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer row, find integers row in the list,\n    and return list of tuples, [(row1, row2), (row3, row4)...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_coords([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 0) == [(1, 0), (1, 3), (2, 5), (2, 0), (3, 4), (3, 0)]\n    get_coords([], 0) == []\n    get_coords([[], [1], [1, 2, 3]], 3) == [(3, 2), (3, 1)]\n    \"\"\"\n    coords = []\n    i = 0\n    while i < len(lst):\n        #print(\"coords before\", coords)\n        coords.append(lst[i])\n        i += 1\n        #print(\"coords after\", coords)\n    #print(coords)\n    coords = sorted(coords, reverse=True)\n    #print(coords)\n    return [row] + [coords[i] for i in range(len(coords))]\n    #print(coords)\ndef get_min_coord(lst, row):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer row, find integers row in the list,\n    and return list of tuples, [(row1, row2), (row3, row4)...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_min_coord([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 0) == [(1, 0), (1, 3), (2, 5), (2, 0), (3, 4), (3, 0)]\n    get_min_coord([], 0) == []\n    get_min_coord([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 1)]\n    \"\"\"\n    min_coord = [row] + [lst[i] for i in range(len(lst)) if i!= row]\n    return min_coord\n    #print(min_coord)\ndef get_min_row(lst, row):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer row, find integers row in the list,\n    and return list of tuples, [(row1, row2), (row3, row4)...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for item in lst:\n        if type(item) == list:\n            result += get_row(item, x)\n        else:\n            result.append((x, item))\n    return sorted(result, key = lambda x: (x[0], x[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [(x, y) for x, y in sorted(zip(lst, range(len(lst))), reverse=True, key=lambda item: item[0] * 100 + item[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    rows = []\n    for row in lst:\n        if x in row:\n            rows.append((row.index(x), row.index(x) + 1))\n    rows.sort(reverse=True)\n    return rows\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # sort by rows in ascending order\n    lst.sort(key = lambda x: x[0])\n    # get coordinate of row starting from 1\n    row = lst[0][0]\n    # return coordinates as tuples\n    return [(row, x - row + 1), (row + 1, x - row + 1), (row + 2, x - row + 1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst.sort()\n    x = [x]\n    return list(zip(*[list(i) for i in zip(lst, lst[1:])]))[x]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if x not in lst:\n        return []\n    x_lst = lst[x]\n    return sorted(x_lst)\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst.sort(key=lambda x: (x[0],x[1]))\n    return [(x[0], x[1]) for x in lst]\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sort_array_helper(array, 0, len(array) - 1)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_val = max(array)\n    for num in array:\n        if num % 2 == 0:\n            sort_array(array[0:num])\n        else:\n            sort_array(array[num:])\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def sort_list(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = int(len(arr)/2)\n        a = sort_list(arr[:mid])\n        b = sort_list(arr[mid:])\n        return merge(a, b)\n    return sort_list(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not array:\n        return array\n    if len(array) <= 1:\n        return array\n    \n    def sort_function(num):\n        if not num:\n            return num\n        if num[0] % 2 == 0:\n            return num[::-1]\n        else:\n            return num[::-1][1:]\n    \n    for i in range(1, len(array)):\n        array[i] = sort_function(array[i - 1]) + array[i]\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not array:\n        return []\n    \n    # sort array in ascending order\n    sorted_array = sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: complete this function\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    array = sorted(array)\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(array) == 0:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # sort each element of the array in ascending order\n    def sort_array_asc(array):\n        lst = []\n        for x in array:\n            if x % 2 == 0:\n                lst.append(x)\n            else:\n                lst.append(0)\n        return lst\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join([s[i % len(s)] for i in range(len(s) - 1, -1, -1)])\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # The following variables are for the encryption algorithm.\n    # These variables are a series of functions to create an encryption\n    # key and a reversed key.\n    # NOTE: the character '#' can be used to encrypt the shift value 1.\n    key = 'zxcvbnm'\n    rkey = 't#j'\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # initialize an empty string that will hold the encrypted message\n    cipher = \"\"\n    # loop through each letter of the string\n    for letter in s:\n        # convert each letter to uppercase, \n        # then add it to a new letter in the string\n        cipher = cipher + chr(ord(letter) + 2)\n    return cipher\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    rotate_by_two = lambda s: s[::-1].translate(str.maketrans('','',string.punctuation))\n    return rotate_by_two(s)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def encrypt_alphabet(s):\n        \"\"\"Create a function encrypt that takes a string as an argument \n        and returns a string encrypted with the alphabet being rotated. \n        The alphabet should be rotated in a manner such that the letters \n        shift down by two multiplied to two places.\n        For example:\n        encrypt('hi') returns 'lm'\n        encrypt('asdfghjkl') returns 'ewhjklnop'\n        encrypt('gf') returns 'kj'\n        encrypt('et') returns 'ix'\n        \"\"\"\n        # STEP 1: get the original string\n        s = s.lower()\n        \n        # STEP 2: create a new string\n        new_s = \"\"\n        \n        # STEP 3: for each character in the original string\n        for char in s:\n            # STEP 4: add it to the new string\n            new_s += char * 2\n        \n        # STEP 5: return the new string\n        return new_s\n    \n    # STEP 6: create an alphabet string\n    new_alphabet = \"\"\n    \n    # STEP 7: create a new string\n    new_string = \"\"\n    \n    # STEP 8: for each character in the original string\n    for char in s:\n        # STEP 9: add it to the new string\n        new_string += encrypt_alphabet(char)\n    \n    # STEP 10: return the new string\n    return new_string\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted_text = ''\n    for i in s:\n        if i in alphabet:\n            encrypted_text += alphabet[alphabet.index(i) + 2]\n        else:\n            encrypted_text += i\n    return encrypted_text\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # encrypt function takes a string as an argument. \n    # The string is encrypted\n    # This is a method you can create in Python\n    \n    alph = [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    t = ''\n    for i in range(len(s)):\n        t += s[i]\n    return t\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    cipher = ''\n    for c in s:\n        if c.lower() in alphabet:\n            num = alphabet.index(c.lower())\n            num = num - 2\n            if num < 0:\n                num = num + len(alphabet)\n            newcipher = alphabet[num] + c\n        else:\n            newcipher = c\n        cipher += newcipher\n    return cipher\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a = []\n    for i in s:\n        a.append(i)\n    r = \"\"\n    for i in range(0, len(a)):\n        if a[i] =='':\n            r +=''\n        else:\n            c = ord(a[i]) - 96\n            r += chr(c + 2)\n    return r\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(lst)[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) == 1:\n        return next(iter(lst))\n    \n    if len(lst) == 2:\n        return min(lst)\n    \n    index = lst.index(min(lst))\n    return lst[index+1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def next_smallest(lst):\n        if len(lst) == 1:\n            return lst[0]\n        return lst[1] if lst[0] >= lst[1] else lst[0]\n    \n    return next_smallest(lst[1:]"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    smallest = lst[0]\n    for i in range(len(lst)):\n        if smallest < lst[i]:\n            smallest = lst[i]\n    return smallest\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Remove pass and write your code here\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if len(lst) == 1:\n        return lst[0]\n    if lst == []:\n        return None\n    if len(lst) == 2:\n        return lst[1]\n    if lst[1] > lst[0]:\n        return lst[1]\n    \n    if lst[0] < lst[1]:\n        return lst[0]\n    \n    smallest = lst[1]\n    for i in range(2, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    boredoms = [word for word in S.split('.') if word.startswith(\"I\")]\n    if len(boredoms) == 0:\n        return 0\n    return len(boredoms)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n_word_list = 0\n    boredom_list = []\n    while '.' not in S:\n        for word in S.split():\n            if word[0] == '!':\n                boredom_list.append(word[1:])\n            elif word[0] == '?':\n                boredom_list.append(word[1:])\n            else:\n                n_word_list += 1\n    for word in boredom_list:\n        if word[0] == '!':\n            n_word_list -= 1\n    return n_word_list\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    bored_dict = dict()\n    for word in S.split('.'):\n        if word in bored_dict:\n            bored_dict[word] += 1\n        else:\n            bored_dict[word] = 1\n    return len(bored_dict)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for word in S.split():\n        if word[0] == '!':\n            count += 1\n        elif word[0] == '?':\n            count += 1\n        elif word[0] == '.':\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    count = 0\n    words = S.split('.')\n    for word in words:\n        if len(word) > 2 and word.startswith('!'):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    word = S.lower().split()\n    for i in word:\n        if i == \"i\" or i == \"i love\" or i == \"i love this\":\n            return 1\n    return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    cnt = 0\n    for s in S:\n        if s == \".\":\n            break\n        elif s == \"?\":\n            cnt += 1\n        elif s == \"!\":\n            cnt -= 1\n        if cnt < 0:\n            break\n    return cnt\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    S = S.lower()\n    S = S.replace(\".\",\"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.split(\".\")\n    count = 0\n    for word in S:\n        if word.startswith(\"i\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Write your code here\n    counter = 0\n    for word in S.split('.'):\n        if word.startswith(\"I\"):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    dictionary = {\n        \"I\" : 0,\n        \"?\" : 0,\n        \"!\" : 0\n    }\n    for word in S.split():\n        for i in word:\n            if i == \"I\" or i == \"?\" or i == \"!\":\n                dictionary[i] += 1\n    return dictionary\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = (x+y+z) == int(x+y+z)\n    return result\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    x = int(x)\n    y = int(y)\n    z = int(z)\n    \n    return (x + y + z) == max(x, y, z)\n    \n    \n    \nprint(any_int(\"5\", \"2\", \"7\"))\nprint(any_int(\"3\", \"2\", \"2\"))\nprint(any_int(\"3\", \"2\", \"1\"))\nprint(any_int(\"2\", \"2\", \"1\"))\nprint(any_int(\"2\", \"2\", \"2\"))\nprint(any_int(\"2\", \"1\", \"2\"))\nprint(any_int(\"1.6\", \"2.2\", \"2\"))\nprint(any_int(\"1.6\", \"2\", \"2\"))\nprint(any_int(\"3\", \"2\", \"1\"))\nprint(any_int(\"1\", \"2\", \"2\"))\nprint(any_int(\"1\", \"2\", \"1\"))\nprint(any_int(\"3\", \"2\", \"2\"))\nprint(any_int(\"3\", \"1\", \"2\"))\nprint(any_int(\"3\", \"2\", \"1\"))\nprint(any_int(\"1\", \"1.6\", \"2\"))\nprint(any_int(\"1.6\", \"2\", \"2\"))\nprint(any_int(\"1.6\", \"2\", \"1\"))\nprint(any_int(\"1.6\", \"2\", \"1\"))\nprint(any_int(\"1.6\", \"1\", \"2\"))\nprint(any_int(\"1\", \"1\", \"2\"))\nprint(any_int(\"1\", \"1\", \"1\"))\nprint(any_int(\"1\", \"1\", \"1\"))\nprint(any_int(\"1\", \"1\", \"1\"))\nprint(any_int(\"1\", \"1\", \"2\")"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return True if (x == y) or (x == z) or (y == z) or (x == int(y + z)) else False\n    \n    \n    # If anything else is returned, it will be a false\ndef not_one(x, y):\n    '''\n    Create a function that takes one number, and returns whether or not it is a factorial.\n    \n    Examples\n    any_int(4, 2) \u279e False\n    any_int(1, 1) \u279e True\n  \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (x + y + z == sum(x) + sum(y) + sum(z))\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if (type(x) is int or type(x) is float):\n        if (type(y) is int or type(y) is float):\n            if (type(z) is int or type(z) is float):\n                return True\n    \n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if x == y or x == z or y == z:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if x == y == z == 0:\n        return True\n    elif x!= y and x!= z and x!= 0 and y!= 0 and z!= 0 and x!= 0:\n        return False\n    else:\n        return True\ndef any_float(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n    Returns false in any other cases.\n    \n    Examples\n    any_float(5, 2, 7) \u279e True\n    \n    any_float(3, 2, 2) \u279e False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if x+y+z==int(x+y+z):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if type(x)!= int and type(y)!= int and type(z)!= int:\n        return False\n    elif type(x) == int and type(y) == int and type(z) == int:\n        if x == y or y == z or z == x:\n            return True\n        else:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return x == y or x == z or y == z\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # TODO: Replace everything except lower case letter symbols with the letter \n    # that appears two spaces before the letter you're trying to replace. \n    # \n    # You can return an empty string if you want.\n    \n    # TODO: Replace the \"swap every vowel\" rule with the \"replace every vowel\" \n    # rule.\n    \n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    # \"swap every vowel\"\n    swap = 'gwuxacv'\n    # \"replace every vowel\"\n    replace = 'zxc'\n    message = message.lower()\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace('\\t','')\n    message = message.replace('\\r','')\n    message = message.replace('  ','')\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace('\\t','')\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace('\\n','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message = message.replace(' ','')\n    message "
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    message = message.lower()\n    vowels = 'aeiou'\n    message = message.translate(str.maketrans({vowels: 'j' for vowels in vowels}))\n    message = message.replace(' ', '_').replace('j', '_j')\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert isinstance(message, str), \"Message must be a string.\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    swapped = [letter for letter in message if letter.lower() in alphabet]\n    message = \"\".join(swapped)\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\n    message = message.upper()\n    message = message.replace(\" \", \"\")\n    message = message.replace(\"\\n\", \"\").replace(\".\", \"\").replace(\",\", \"\")\n    message = message.replace(\"!\", \"\")\n    message = message.replace(\"!\", \"\")\n    encoded = ''\n    for char in message:\n        if char in vowels:\n            encoded += char + '-'\n        else:\n            encoded += char\n    return encoded"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    message = message.lower()\n    vowels = set('aeiouAEIOU')\n    message = re.sub('[^A-Za-z0-9]', '', message)\n    \n    i = 0\n    while i < len(message):\n        letter = message[i]\n        if letter.isalpha():\n            if letter in vowels:\n                message = message[:i] + message[i].upper() + message[i+1:]\n            else:\n                message = message[:i] + letter + message[i+1:]\n        i += 1\n        \n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    encoded_message = \"\"\n    message_list = message.split()\n    for letter in message_list:\n        if letter.isalpha():\n            if letter.lower() not in ENGLISH_ALPHABET:\n                encoded_message += letter.lower() + \"-\"\n            else:\n                encoded_message += letter.lower()\n        else:\n            encoded_message += letter\n    return encoded_message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char not in vowels:\n            encoded_message += char\n        else:\n            index = vowels.index(char)\n            encoded_message += ''.join(reversed(vowels[:index + 1]))\n    return encoded_message"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    message = message.lower()\n    vowels = ['a','e','i','o','u']\n    encoded = ''\n    for c in message:\n        if c in vowels:\n            encoded += c\n        else:\n            encoded += c.upper()\n    return encoded"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # First we convert the message to lower case.\n    message = message.lower()\n    # Then we search each letter of the message for vowels, \n    # replace the's' with a letter from the english alphabet.\n    for letter in message:\n        if letter in english_alphabet:\n            message = message.replace(letter, english_alphabet[ord(letter) - ord('s')])\n    # Finally we return the converted message.\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    message = message.lower()\n    message = message.replace('a', 'A').replace('e', 'E').replace('i', 'I').replace('o', 'O').replace('u', 'U').replace('y', 'Y').replace('A', 'a').replace('E', 'e').replace('I', 'i').replace('O', 'o').replace('U', 'u').replace('Y', 'y')\n    message = message.replace('!', '1').replace('?', '2').replace('.', '3').replace('..', '4').replace('...', '5').replace('.', '2').replace('.', '3').replace('.', '4').replace('.', '5')\n    message = message.replace('?', '2').replace('.', '2').replace('..', '2').replace('.', '3').replace('.', '4').replace('..', '2')\n    message = message.replace('!', '1').replace('.', '1').replace('..', '2').replace('.', '1').replace('..', '3').replace('.', '1').replace('..', '4').replace('.', '1')\n    message = message.replace('?', '1').replace('.', '1').replace('..', '2').replace('.', '1').replace('..', '3').replace('.', '1').replace('..', '4')\n    message = message.replace('!', '1').replace('?', '2').replace('.', '2').replace('..', '2').replace('.', '3').replace('..', '2')\n    message = message.replace('!', '1').replace('.', '1').replace('..', '2').replace('.', '2').replace('..', '3').replace('.', '1').replace('..', '4')\n    message = message.replace('?', '1').replace('.', '1').replace('..', '2').replace('.', '1').replace('..', '3').replace('.', '1').replace('..', '4')\n    message = message.replace('!', '2').replace('.', '2').replace('..', '2').replace('.', '3').replace('..', '2')\n    message = message.replace('?', '2').replace('.', '2').replace('..', '2').replace('.', '3').replace('..', '2')\n    message = message.replace('!', '2').replace('.', '2').replace('..', '2').replace('.', '3').replace('..', '2')\n    message = message.replace('?', '2').replace('.', '2').replace('..', '2').replace('.', '3').replace('..', '2')\n    message = message.replace('!', '2').replace('.', '2').replace('..', '2').replace('.', '3').replace('..', '2')\n    message = message.replace('?', '2').replace('.', '3').replace('..', '2').replace('.', '3').replace('..', '2')\n    message = message.replace('!', '2').replace('.', '1').replace('..', '2').replace('.', '1').replace('..', '2').replace('.', '1')\n    message = message.replace('?', '1').replace('.', '1').replace('..', '2').replace('.', '1').replace('..', '3').replace('.', '1').replace('..', '4')\n    message = message.replace('!', '2').replace('.', '2').replace('..', '2').replace('.', '3').replace('..', '2').replace('.', '1').replace('..', '2')\n    message = message.replace('?', '2').replace('.', '2').replace('..', '2').replace('.', '3').replace('..', '2').replace('.', '1').replace('..', '2')\n    message = message.replace('!', '2').replace('.', '2').replace('..', '2').replace('.', '3').replace('..', '2').replace('.', '1').replace('..', '2')\n    message = message.replace('?', '2').replace('.', '2').replac"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # Base case:\n    if len(lst) == 0:\n        return 0\n    \n    # Initialize a new list that will contain the largest prime value\n    # If the length of the list is 0,\n    # return the largest prime value.\n    if len(lst) == 1:\n        return lst[0]\n    \n    # Start at the first element of the list.\n    num = lst[0]\n    \n    # Iterate through the rest of the list.\n    for i in range(1, len(lst)):\n        # If the first element of the list is not a prime,\n        # return the largest prime value.\n        if lst[i] > num:\n            return num\n        \n        # Increment the value of the first element of the list.\n        num = num * lst[i]\n    \n    # If the loop finishes, return the sum of the last element of the list.\n    return num\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) < 4:\n        return max(lst)\n    prime_lst = [2, 3, 5]\n    for i in range(4, int(math.sqrt(max(lst)) + 1)):\n        if lst[i] in prime_lst:\n            prime_lst.append(lst[i])\n        if len(lst) == max(lst):\n            break\n    return max(lst) + max(prime_lst)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if lst == []:\n        return 0\n    elif lst[0] < 0:\n        return skjkasdkd(lst[1:])\n    elif lst[0] == 0:\n        return lst[0]\n    elif lst[0] == 1:\n        return skjkasdkd(lst[1:])\n    else:\n        return skjkasdkd(lst[1:]) + skjkasdkd(lst[2:]"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_digit = 0\n    for elem in lst:\n        if max_digit < elem:\n            max_digit = elem\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = [int(i) for i in str(lst)]\n    if len(lst) < 5:\n        return lst\n    p = 2\n    lst = list(map(lambda x: x, lst))\n    max_prime = max(lst)\n    while True:\n        for i in range(len(lst)):\n            if lst[i] == max_prime:\n                lst[i] += p\n            else:\n                break\n        if sum(lst) == max_prime:\n            return lst\n        else:\n            p += 1"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    from functools import reduce\n    return reduce(lambda a, b: a+b, lst)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst = lst[::-1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst.sort()\n    prime=[]\n    s=0\n    p=1\n    for i in lst:\n        if isprime(i):\n            prime.append(i)\n            s+=i\n        else:\n            pass\n    if len(prime)==0:\n        return 0\n    for i in range(0,len(prime)):\n        if prime[i]==1:\n            continue\n        elif prime[i]%2==0:\n            p=p*prime[i]\n        else:\n            p=p*prime[i]\n            s+=p\n    return s\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst=sorted(lst,key=int)\n    k=[]\n    for i in lst:\n        if i in k:\n            continue\n        else:\n            k.append(i)\n    if len(k)==0:\n        return -1\n    else:\n        return sum(k)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    temp_list = []\n    p_list = []\n    for i in range(len(lst)):\n        temp_list.append(lst[i])\n    \n    while len(temp_list) > 0:\n        j = 0\n        while j < len(temp_list) - 1:\n            if temp_list[j] > temp_list[j + 1]:\n                temp_list[j], temp_list[j + 1] = temp_list[j + 1], temp_list[j]\n            j += 1\n        \n    for i in range(len(temp_list)):\n        if temp_list[i] == 0:\n            return max(temp_list)\n        \n        p_list.append(temp_list[i])\n        temp_list.remove(temp_list[i])\n        \n    return sum(p_list)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for key in dict:\n        if isinstance(key, str) and key.isupper():\n            return True\n        if isinstance(key, str) and key.islower():\n            return True\n        if isinstance(key, str) and (key.startswith(\" \") or key.endswith(\" \")):\n            return True\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return all([type(k).__name__ in [\"str\", \"unicode\"] for k in dict.keys()])\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for key, value in dict.items():\n        if type(key) is not str: return False\n        if type(value) is not str: return False\n        if key.lower()!= value.lower(): return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # If dict is empty, return True.\n    if len(dict) == 0:\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for key in dict.keys():\n        if isinstance(dict[key], str) and key.islower() and dict[key].lower() in dict:\n            return True\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for key in dict:\n        if type(key) == str and len(key) < 5:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if isinstance(dict, dict):\n        for key in dict:\n            if type(key)!= str:\n                return False\n            if type(key) == str and key.lower() in string.ascii_lowercase:\n                return True\n            elif type(key) == str and key.upper() in string.ascii_uppercase:\n                return True\n        return False\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for key in dict.keys():\n        if isinstance(key, str) and key.lower() in dict.keys():\n            continue\n        if isinstance(key, str) and not key.isupper():\n            return False\n        if not isinstance(key, str) and not key.isalpha():\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # if all keys are strings in lower case\n    if all(type(k) == str for k in dict.keys()):\n        return True\n    \n    # if all keys are strings in upper case\n    if all(type(k) == str for k in dict.keys()):\n        return True\n    \n    # if all keys are strings in both lower and upper case\n    return all(k.lower() in dict.keys() for k in dict.keys()) and \\\n        all(k.upper() in dict.keys() for k in dict.keys())\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for key in dict.keys():\n        if not key.isupper():\n            return False\n        if not key.islower():\n            return False\n    if not all(isinstance(x, str) for x in dict.values()):\n        return False\n    return True"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    prime = [2,3]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    primes = []\n    for n in range(n+1):\n        for i in range(2, n):\n            if n % i == 0:\n                break\n        else:\n            primes.append(n)\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    num_primes = []\n    i = 2\n    while i < n:\n        num_primes.append(i)\n        while i*i <= n:\n            if n % i == 0:\n                num_primes.append(i)\n                break\n            i += 1\n        i = 2\n    return num_primes\n    \ndef is_prime(n):\n    \"\"\"Implement a function that returns True if n is prime and False otherwise.\n    For example:\n    is_prime(25) => True\n    is_prime(28) => False\n    is_prime(14) => True\n    is_prime(0) => True\n    is_prime(27) => True\n    is_prime(45) => False\n    \"\"\"\n    \n    if n in count_up_to(10):\n        return False\n    for i in range(2, n//2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef main():\n    \"\"\"Run the program.\"\"\"\n    \n    #print(is_prime(500))\n    print(is_prime(3))\n    print(is_prime(28))\n    print(is_prime(14))\n    print(is_prime(0))\n    print(is_prime(27))\n    print(is_prime(45))\n    \nmain("
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    prime_numbers = []\n    for i in range(2,n):\n        if(is_prime(i)):\n            prime_numbers.append(i)\n    return prime_numbers\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    answer = []\n    for i in range(n + 1):\n        isPrime = True\n        for j in range(2, i):\n            if (i % j == 0):\n                isPrime = False\n                break\n        if (isPrime):\n            answer.append(i)\n    return answer\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    output = []\n    for i in range(n + 1):\n        if is_prime(i):\n            output.append(i)\n    return output\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def dfs(n, primes):\n        # n\uacfc primes\uac00 \ud558\ub098\ub77c\ub3c4 \uc788\ub294\uc9c0 \ud655\uc778\n        if n in primes:\n            return [n]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # YOUR CODE HERE\n    def helper(n):\n        a = [1, ]\n        for i in range(2, n + 1):\n            if prime(i):\n                a.append(i)\n        return a\n    return helper(n)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    if n == 1:\n        return []\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    output = []\n    for x in range(1, n + 1):\n        if is_prime(x):\n            output.append(x)\n    return output\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    while b!=0:\n        i=b%10\n        b//=10\n        a=a*i\n    return a\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: implement the multiplication function\n    result = 0\n    for i in str(a):\n        result += int(i) * int(b)\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    product = 1\n    for i in range(len(a)):\n        product *= int(a[i]) * int(b[i])\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #Base case:\n    if b == 0:\n        return a\n    #Divide by the largest number in the string:\n    else:\n        return a % b\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    product = 1\n    for i in range(len(str(a))):\n        product *= int(str(a)[i])\n    for i in range(len(str(b))):\n        product *= int(str(b)[i])\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = 0\n    for i in range(len(a)):\n        result += int(a[i])*int(b[i])\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert len(b) == len(a), \"Length of a and b must be the same.\"\n    res = 0\n    for d in b:\n        res += d * (a[len(a) - 1] - a[len(a) - len(d)])\n    return res\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    product = 0\n    for digit in str(a):\n        product += int(digit) * int(digit)\n    return product"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Write your code here.\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a%b == 0:\n        return b\n    else:\n        return a*multiply(a//b, b)"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    return int(str(a)+str(b)+str(a*b))\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Initialize count as 0\n    count = 0\n    \n    # Loop over even indices\n    for i in range(len(s)):\n        if i % 2 == 0:\n            # Check each vowel\n            if s[i].isupper():\n                # Increment count\n                count += 1\n                \n    # Return count\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    upper_cnt = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            upper_cnt += 1\n    return upper_cnt"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    i = 0\n    while i < len(s):\n        if (s[i] == 'a') or (s[i] == 'A') or (s[i] == 'b') or (s[i] == 'B'):\n            count += 1\n            i += 1\n        elif s[i] == 'c':\n            count += 1\n            i += 1\n        elif s[i] == 'e':\n            count += 1\n            i += 1\n        elif s[i] == 'f':\n            count += 1\n            i += 1\n        elif s[i] == 'g':\n            count += 1\n            i += 1\n        elif s[i] == 'h':\n            count += 1\n            i += 1\n        elif s[i] == 'i':\n            count += 1\n            i += 1\n        elif s[i] == 'j':\n            count += 1\n            i += 1\n        elif s[i] == 'k':\n            count += 1\n            i += 1\n        elif s[i] == 'l':\n            count += 1\n            i += 1\n        elif s[i] =='m':\n            count += 1\n            i += 1\n        elif s[i] == 'n':\n            count += 1\n            i += 1\n        elif s[i] == 'o':\n            count += 1\n            i += 1\n        elif s[i] == 'p':\n            count += 1\n            i += 1\n        elif s[i] == 'q':\n            count += 1\n            i += 1\n        elif s[i] == 'r':\n            count += 1\n            i += 1\n        elif s[i] =='s':\n            count += 1\n            i += 1\n        elif s[i] == 't':\n            count += 1\n            i += 1\n        elif s[i] == 'u':\n            count += 1\n            i += 1\n        elif s[i] == 'v':\n            count += 1\n            i += 1\n        elif s[i] == 'w':\n            count += 1\n            i += 1\n        elif s[i] == 'x':\n            count += 1\n            i += 1\n        elif s[i] == 'y':\n            count += 1\n            i += 1\n        elif s[i] == 'z':\n            count += 1\n            i += 1\n        elif s[i] == 'A':\n            count += 1\n            i += 1\n        elif s[i] == 'B':\n            count += 1\n            i += 1\n        elif s[i] == 'C':\n            count += 1\n            i += 1\n        elif s[i] == 'D':\n            count += 1\n            i += 1\n        elif s[i] == 'E':\n            count += 1\n            i += 1\n        elif s[i] == 'F':\n            count += 1\n            i += 1\n        elif s[i] == 'G':\n            count += 1\n            i += 1\n        elif s[i] == 'H':\n            count += 1\n            i += 1\n        elif s[i] == 'I':\n            count += 1\n            i += 1\n        elif s[i] == 'J':\n            count += 1\n            i += 1\n        elif s[i] == 'K':\n            count += 1\n            i += 1\n        elif s[i] == 'L':\n            count += 1\n            i += 1\n        elif s[i] == 'M':\n            count += 1\n            i += 1\n        elif s[i] == 'N':\n            count += 1\n            i += 1\n        elif s[i] == 'O':\n            count += 1\n            i += 1\n        elif s[i] == 'P':\n            count += 1\n            i += 1\n        elif s[i] == 'Q':\n            count += 1\n            i += 1\n        elif s[i] == 'R':\n            count += 1\n            i += 1\n        elif s[i] == 'S':\n            count += 1\n            i += 1\n        elif s[i] == 'T':\n            count += 1\n            i += 1\n        elif s["
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # create a blank string\n    s = \"\"\n    \n    # iterate over string\n    for char in s:\n        if char.isupper():\n            s += char.lower()\n    return s.count(\"a\") + s.count(\"b\") + s.count(\"c\") + s.count(\"d\") + s.count(\"e\")"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if (s[i]>='a' and s[i]<='z') or (s[i]>='A' and s[i]<='Z'):\n            count+=1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(s)-1):\n        if(s[i].isupper() and s[i+1].isupper()):\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    count = 0\n    for i in range(0,len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if value.isnumeric() or str(value).isnumeric():\n        return int(value)\n    elif value.isalpha() or value.isascii():\n        return int(value[0])\n    elif value.startswith(\"-\"):\n        if value[1:].isnumeric() or str(value[1:]).isnumeric():\n            return int(value[1:])\n        else:\n            return int(value[1:])\n    elif value.endswith(\".0\"):\n        return int(value[:-1])\n    else:\n        return closest_integer(value[1:])\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    value = float(value)\n    if value == 0 or value == 1:\n        return int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    return round(max(list(map(int,list(map(float,str(value)))))),1)\n    #raise NotImplementedError\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if value.isdigit():\n        return int(value)\n    else:\n        value = value.replace(\".\", \"\").replace(\"-\", \"\")\n        if len(value) == 1:\n            return int(value)\n        else:\n            return closest_integer(value[:-1]) + closest_integer(value[-1])\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if value == '0':\n        return 0\n    elif value == '1':\n        return 1\n    elif value == '2':\n        return 2\n    elif value == '3':\n        return 3\n    elif value == '4':\n        return 4\n    elif value == '5':\n        return 5\n    elif value == '6':\n        return 6\n    elif value == '7':\n        return 7\n    elif value == '8':\n        return 8\n    elif value == '9':\n        return 9\n    elif value == '.':\n        return 10\n    else:\n        return float(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return math.floor(math.sqrt(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    value = abs(value)\n    if value < 0:\n        value = abs(round(value))\n    return value\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if value.lower() == 'auto':\n        return closest_integer_auto()\n    try:\n        integer = int(value)\n    except ValueError:\n        return closest_integer_string(value)\n    if integer < 0:\n        return closest_integer_negative(integer)\n    if integer == 0:\n        return 0\n    if integer == 1:\n        return 1\n    return closest_integer_rounded(integer)"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Use round() to round to the nearest integer\n    # Use abs() to avoid floating point errors\n    # Use abs() to avoid rounding errors\n    # Use float() to prevent it from returning an int\n    # Use floor() to round to the nearest whole number\n    # Use ceil() to round to the nearest whole number\n    # Get the value of the number using the round() function\n    # Check if the number is equidistant from two integers\n    # Round away from zero\n    # Round away from zero in case the number is not equidistant\n    # Return the rounded value\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    value = str(value)\n    i = 0\n    while i < len(value):\n        if value[i] == \".\":\n            break\n        i += 1\n    return int(value[:i])\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # init the array\n    piles = [1 for _ in range(n+1)]\n    \n    # get the next odd\n    for i in range(n+1):\n        if i % 2:\n            piles[i] = piles[i//2]\n        else:\n            piles[i] = piles[(i+1)//2] + piles[(i+1)//2-1]\n    \n    return piles\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # return [1, 1, 1]\n    if n<=3:\n        return [1]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pile = []\n    for i in range(n):\n        if i % 2 == 0:\n            pile.append(i+1)\n        else:\n            pile.append(i+1)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n%2 == 0:\n        level = n/2\n        return make_a_pile(level) + [level]\n    else:\n        level = n//2\n        return [level] + make_a_pile(level)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    piles = [0, 1, 2]\n    while piles[n] < n:\n        piles.append(piles[n] + n)\n        n = n + 2\n    return piles[:n]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    piles = []\n    while n:\n        if n % 2 == 0:\n            piles.append(n//2)\n            n = n//2\n        else:\n            piles.append(n//2+1)\n            n = n//2+1\n    return piles\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # The first level should be always odd\n    # The second level should always be even\n    # So, it's the number of levels\n    return n, n % 2\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert n >= 1\n    return [n//2, (n-1)//2]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = n%2\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 2]\n    else:\n        result = make_a_pile(n-1)\n        result.append(1)\n        return result\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert n > 0, \"The argument must be positive.\"\n    result = []\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i+1)\n        n = n // 2\n    return result\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return list(s.split(\",\"))\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    words = s.split(\",\")\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    words = []\n    for i in s.split(\",\"):\n        for j in i.split():\n            words.append(j.strip(\" \").strip(\"'\").strip('\"').strip(\",\"))\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [word.strip() for word in s.split(\",\")]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return s.split(\",\")"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    words = s.split(\", \")\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not s:\n        return []\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    words = s.split(\",\")\n    return words\n    \ndef write_to_file(words_list, file_name):\n    \"\"\"\n    Write the given words_list to a file named \"file_name\" in the current directory.\n    \n    Note: If the file already exists, the file will be overwritten.\n    \"\"\"\n    try:\n        with open(file_name, \"w\") as file:\n            for word in words_list:\n                file.write(word + \"\\n\")\n    except OSError:\n        print(\"An error occurred while writing to the file.\")\n        \ndef print_hi(name):\n    \"\"\"\n    Print hi\n    \"\"\"\n    print(f'Hi, {name}')\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if x%2==0:\n        return x\n    else:\n        num = (x+y)\n        if num % 2 == 0:\n            return num\n        else:\n            return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if x < y:\n        x, y = y, x\n    small = 1\n    for x in range(x, y+1, 2):\n        if x % 2 == 0:\n            small = max(small, x)\n    return small\n    \ndef choose_max_odd_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest odd integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    num_num = x\n    while(x >= y):\n        x = num_num - 1\n        if(x >= y):\n            num_num = num_num - 1\n    return num_num\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # write your code here\n    \n    x = min(x, y)\n    if x % 2 == 0:\n        return x\n    else:\n        return -1"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if x >= y:\n        num = x\n    else:\n        num = y\n    while num % 2 == 0:\n        num = num // 2\n    return num\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Your code here\n    num = x\n    if num > y:\n        num = y\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # Set the output to be 'None' so that it doesn't get assigned to anything.\n    output = None\n    \n    # You can use an if-else construct if you want.\n    if x > y:\n        output = x\n    else:\n        output = y\n    \n    return output\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if (x + y) % 2 == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    x = int(x)\n    y = int(y)\n    \n    if x <= y:\n        x, y = y, x\n    \n    # Check if x is even\n    if y % 2 == 0:\n        for i in range(y-1, x, 2):\n            if i % 2!= 0:\n                return i\n    \n    # Check if y is even\n    if y % 2 == 0:\n        for i in range(y-1, x, 2):\n            if i % 2!= 0:\n                return i\n    \n    # No solution\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    while x >= y:\n        x -= y\n    return x\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = n\n    b = 0\n    while i > 0:\n        b = b * 10 + i % 10\n        i = i // 10\n    return '0b{b:b}'.format(b=b)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Approach 1: Brute Force\n    # Time O(n)\n    # Space O(1)\n    # Return -1 if not possible\n    if n == m or m == 0:\n        return \"0b\"\n    if n < m:\n        return \"-\" + rounded_avg(n, m-1)\n    else:\n        return \"{:b}\".format(int((n*2)+(m*2)))[:-1]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Use a list, not a dictionary\n    values = list(map(int, str(bin(n+m))))\n    rounded_list = []\n    rounded_values = []\n    for value in values:\n        rounded_value = value\n        while(True):\n            if value == 0:\n                rounded_value = 0\n                break\n            if value % 2:\n                rounded_value = 1\n                value = value // 2\n            else:\n                rounded_value = 0\n                break\n        rounded_list.append(rounded_value)\n        rounded_values.append(rounded_value)\n    # print(rounded_list)\n    # print(rounded_values)\n    if (len(rounded_list) > len(rounded_values)):\n        for value in range(len(rounded_list)):\n            rounded_list[value] = str(rounded_list[value])\n    else:\n        for value in range(len(rounded_values)):\n            rounded_values[value] = str(rounded_values[value])\n    # print(rounded_list)\n    # print(rounded_values)\n    result = ''.join(rounded_list)\n    # print(result)\n    # print(result[0:result.index('0')])\n    return result[0:result.index('0')] + \"0\" * (m - len(result))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Time O(n+m)\n    # Space O(1)\n    # We compute the average of the integers from n through m. \n    # Then return the binary representation of this average.\n    # Time O(n+m)\n    # Space O(1)\n    if n < m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n >= m:\n        return \"0b\"+str(round(n/m))+\"b\"\n    elif n < m:\n        return -1\n    else:\n        return str(round((n*2)+(m*2), 2))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n > m:\n        return '-1'\n    elif n == m:\n        return '0'\n    else:\n        return '1' + '0' * (m - n + 1) + '1'\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n, m = map(int, [str(n), str(m)])\n    return str(int(round(sum(map(int, str(n + m))) / 3, 0))).replace('0b', '')\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if m < n: return -1\n    rounded = 0\n    for i in range(m+1, n+1):\n        rounded += 1<<i\n    return \"0b\"+str(rounded)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a = n\n    b = m\n    while a < b:\n        a = a + 1\n        b = b - 1\n    i = n\n    result = \"\"\n    while i < b:\n        result = result + str(int(a / (2 ** (b - i))))\n        i = i + 1\n        b = b - 1\n    result = result + str(int(a / (2 ** (b - i))))\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n = abs(n)\n    m = abs(m)\n    if n > m:\n        n, m = m, n\n    if n < 0:\n        n, m = m, n\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    digit_list = [int(x[i]) for i in range(len(x)) if x[i].isdigit()]\n    digit_list.sort()\n    return [x[i] for i in range(len(x)) if x[i] not in digit_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Runtime:\n    # n = len(x)\n    # if n <= 1:\n    #     return []\n    # rem = set()\n    # for i in x:\n    #     rem.add(i%10)\n    # return [i for i in x if i not in rem]\n    # Runtime:\n    # n = len(x)\n    # if n <= 1:\n    #     return []\n    # res = []\n    #     for i in x:\n    #         if i%10 not in res:\n    #             res.append(i)\n    #     return res\n    # Runtime:\n    # n = len(x)\n    # if n <= 1:\n    #     return []\n    # for i in range(n):\n    #     res = set()\n    #         for j in x:\n    #             if i%10 == j%10:\n    #                 res.add(j)\n    #         res.add(i)\n    #     return list(res)\n    # Runtime:\n    # n = len(x)\n    # if n <= 1:\n    #     return []\n    # res = []\n    # for i in x:\n    #     if i%10 not in res:\n    #         res.append(i)\n    # res.sort()\n    # return res\n    \n    # Note:\n    #    Create a list of n elements that have even digits,\n    #    and remove duplicates from it.\n    #    The idea is to find out the number of unique digits.\n    #    Then sort it.\n    #    Time:\n    #    n = len(x)\n    #     num_unique_digits = 0\n    #     for i in x:\n    #         if i%10 in x:\n    #             num_unique_digits += 1\n    #     num_unique_digits = len(x) - num_unique_digits\n    #     x.sort()\n    #     for i in x:\n    #         if i%10 in x:\n    #             x.remove(i)\n    #     if num_unique_digits == 0:\n    #         return []\n    #     else:\n    #         return x\n    # Runtime:\n    # Runtime:\n    # n = len(x)\n    # if n <= 1:\n    #     return []\n    # res = []\n    # for i in x:\n    #     res.append(i)\n    #     if i%10 == i%10:\n    #         res.sort()\n    # return res\n    \n    # Time:\n    # n = len(x)\n    # res = []\n    # for i in x:\n    #     if i%10 not in x:\n    #         res.append(i)\n    # res.sort()\n    # return res\n    \n    # For this case, we cannot use the above algorithm,\n    # we must make use of the sorted version\n    # Runtime:\n    # n = len(x)\n    # if n <= 1:\n    #     return []\n    # res = []\n    # for i in x:\n    #     if i%10 in x:\n    #         x.remove(i)\n    #     else:\n    #         res.append(i)\n    # return res\n        \ndef test_unique_digits():\n    assert unique_digits([1, 2, 3, 1, 3, 3, 4, 4, 4]) == [1, 2, 3, 4]\n    assert unique_digits([1, 2, 1, 1, 1]) == [1, 2, 1, 1, 1]\n    assert unique_digits([1, 1, 1, 1, 1]) == []\n    assert unique_digits([11]) == [11]\n    assert unique_digits([15, 32, 1422, 1]) == [1, 15, 32]\n    assert unique_digits([152, 323, 1422, 10]) == [1, 152, 323]\n    assert unique_digits([153, 321, 1422, 10]) == [1, 153, 321]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # Case: x = []\n    if x == []:\n        return []\n    \n    # Case: x = [0]\n    if len(x) == 1:\n        return [x[0]]\n    \n    # Case: x = [2,1,7,9]\n    if len(x) == 2:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0):\n            return [x[0], x[1]]\n    \n    # Case: x = [1,2,3,4,5]\n    if len(x) == 3:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0):\n            return [x[0], x[1], x[2]]\n    \n    # Case: x = [1,2,3,4]\n    if len(x) == 4:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0):\n            return [x[0], x[1], x[2], x[3]]\n    \n    # Case: x = [1,3,2,6,8,7,5,4]\n    if len(x) == 5:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0 and \n            x[4] % 2 == 0):\n            return [x[0], x[1], x[2], x[3], x[4]]\n    \n    # Case: x = [1,3,4,6]\n    if len(x) == 6:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0 and \n            x[4] % 2 == 0 and x[5] % 2 == 0):\n            return [x[0], x[1], x[2], x[3], x[4], x[5]]\n    \n    # Case: x = [1,2,4,5,6,7]\n    if len(x) == 7:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0 and \n            x[4] % 2 == 0 and x[5] % 2 == 0 and x[6] % 2 == 0):\n            return [x[0], x[1], x[2], x[3], x[4], x[5], x[6]]\n    \n    # Case: x = [1,3,2,5,4]\n    if len(x) == 8:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0 and \n            x[4] % 2 == 0 and x[5] % 2 == 0 and x[6] % 2 == 0 and x[7] % 2 == 0):\n            return [x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]]\n    \n    # Case: x = [1,2,3,4,5]\n    if len(x) == 9:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0 and \n            x[4] % 2 == 0 and x[5] % 2 == 0 and x[6] % 2 == 0 and x[7] % 2 == 0 and \n            x[8] % 2 == 0):\n            return [x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8]]\n    \n    # Case: x = [1,3,2,6,7,8]\n    if len(x) == 10:\n        if (x[0] % 2 == 0 and x[1] % 2 == 0 and x[2] % 2 == 0 and x[3] % 2 == 0 and \n            x["
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    \"*** YOUR CODE HERE ***\"\n    return [x[i] for i in range(len(x)) if len(x)%2!= 0 and x[i] >= 10]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Get number of digits in each element\n    s = set()\n    for digit in x:\n        s.add(int(str(digit)[0] + str(digit)[1]))\n    # Return list of digits without any odd digits\n    return [digit for digit in s if digit % 2!= 0]"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    unique_list = []\n    num_list = []\n    for n in x:\n        if n % 10!= 0:\n            if n not in num_list:\n                num_list.append(n)\n            else:\n                pass\n        else:\n            pass\n    for n in num_list:\n        unique_list.append(n)\n    return unique_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(x) < 1:\n        return []\n    first_number = x[0]\n    for num in x:\n        if num % first_number!= 0:\n            return [num]\n    return []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Remove every digit that appears exactly once\n    # Remove every digit that has exactly 1 digit\n    # Return the only digits in the list that does not have exactly 1 digit\n    # Keep adding to the list until it no longer contains one digit\n    # The last one is added to the return\n    return [digit for digit in x if sum(map(lambda x: 1 if x % 2 == 0 else 0, str(x))) == 1]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = len(x)\n    \n    if n == 1:\n        return []\n    \n    res = []\n    for i in range(n):\n        if x[i] % 2 == 0:\n            continue\n        else:\n            if x[i]!= x[i+1]:\n                res.append(x[i])\n                \n    return res\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    out = []\n    for i in x:\n        while i!= 0:\n            rem = i % 10\n            if rem % 2 == 0:\n                break\n            i = i // 10\n        if i > 0:\n            out.append(i)\n    return sorted(out)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # start with empty array\n    result = []\n    \n    # sort the array\n    arr = sorted(arr)\n    \n    # reverse the array\n    arr = reversed(arr)\n    \n    # iterate over arr\n    for i in arr:\n        \n        # if the current number is between one and nine, add it to the result\n        if i in range(1, 10):\n            result.append(i)\n        \n        # if it is not, reverse it\n        else:\n            result = result[::-1]\n    \n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Return a sorted list of digits sorted in ascending order.\n    arr = sorted(arr)\n    reverse_arr = arr[::-1]\n    # Replace all digits with their names.\n    return sorted([name +'' for name in arr]) + sorted(reverse_arr)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # sort the list of numbers by their length\n    arr = sorted(arr)\n    # reverse the numbers by their reversed length\n    arr = list(reversed(arr))\n    # reverse numbers that have been reversed by length\n    for num in arr:\n        if num > 9:\n            return [\"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"]\n    # no numbers have been reversed yet, return the list\n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sort_arr = sorted(arr)\n    reverse_sort_arr = []\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            reverse_sort_arr.append(arr[i])\n        else:\n            reverse_sort_arr.append(arr[i+1])\n    return reverse_sort_arr\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def by_index(arr):\n        if len(arr) == 0:\n            return []\n        if len(arr) == 1:\n            return [f\"{arr[0]}\"]\n        tmp = arr[::-1]\n        return by_index(tmp)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if not arr:\n        return []\n    # print(arr)\n    # print(arr[:len(arr) // 2])\n    sorted_arr = []\n    for i in arr:\n        # print(i)\n        # print(i * 2, \" \", i * 3, \" \", i * 4, \" \", i * 5, \" \", i * 6, \" \", i * 7, \" \", i * 8, \" \", i * 9)\n        # print(sorted_arr)\n        sorted_arr.append(i * i)\n        # print(sorted_arr)\n        if len(sorted_arr) == len(arr):\n            break\n    # print(sorted_arr)\n    \n    while sorted_arr:\n        # print(sorted_arr)\n        if len(sorted_arr) % 2!= 0:\n            # print(sorted_arr[:len(arr) // 2])\n            sorted_arr.pop(0)\n        else:\n            # print(sorted_arr[:len(arr) // 2])\n            # print(sorted_arr)\n            sorted_arr.pop(0)\n            sorted_arr.pop(0)\n            sorted_arr.pop(0)\n            sorted_arr.pop(0)\n            sorted_arr.pop(0)\n            sorted_arr.pop(0)\n            # print(sorted_arr)\n            # print(sorted_arr[:len(arr) // 2])\n            # print(sorted_arr)\n            # print(sorted_arr[len(arr) // 2:])\n            # print(sorted_arr)\n            sorted_arr.pop(0)\n            # print(sorted_arr)\n            # print(sorted_arr[:len(arr) // 2])\n            # print(sorted_arr)\n            sorted_arr.pop(0)\n            # print(sorted_arr)\n            # print(sorted_arr[len(arr) // 2:])\n            # print(sorted_arr)\n            sorted_arr.pop(0)\n            # print(sorted_arr)\n            sorted_arr.pop(0)\n            sorted_arr.pop(0)\n            sorted_arr.pop(0)\n            sorted_arr.pop(0)\n            # print(sorted_arr)\n            # print(sorted_arr[len(arr) // 2:])\n            # print(sorted_arr)\n            sorted_arr.pop(0)\n            sorted_arr.pop(0)\n            sorted_arr.pop(0)\n            sorted_arr.pop(0)\n            sorted_arr.pop(0)\n            # print(sorted_arr)\n            # print(sorted_arr[len(arr) // 2:])\n            # print(sorted_arr)\n            # print(sorted_arr[:len(arr) // 2])\n            # print(sorted_arr)\n            # print(sorted_arr[len(arr) // 2:])\n            # print(sorted_arr)\n            sorted_arr.pop(0)\n            # print(sorted_arr)\n            # print(sorted_arr[len(arr) // 2:])\n            # print(sorted_arr)\n            sorted_arr.pop(0)\n            # print(sorted_arr)\n            # print(sorted_arr[:len(arr) // 2])\n            # print(sorted_arr)\n            sorted_arr.pop(0)\n            # print(sorted_arr)\n            # print(sorted_arr[len(arr) // 2:])\n            # print(sorted_arr)\n            sorted_arr.pop(0)\n            # print(sorted_arr)\n            # print(sorted_arr[:len(arr) // 2])\n            # print(sorted_arr)\n            # print(sorted_arr[len(arr) // 2:])\n            # print(sorted_arr)\n            sorted_arr.pop(0)\n            # print(sorted_arr)\n            # print(sorted_arr[len(arr) // 2:])\n            sorted_arr.pop(0)\n            # print("
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    arr_sorted = sorted(arr)\n    return arr_sorted\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    arr.sort()\n    arr.reverse()\n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    arr.sort()\n    \n    # iterate through the original array\n    for i in range(len(arr)):\n        # if the current digit is less than the next, there is no interesting digit\n        if arr[i] < arr[i + 1]:\n            # replace the digit by its corresponding name\n            if arr[i] == 1:\n                arr[i] = \"One\"\n            elif arr[i] == 2:\n                arr[i] = \"Two\"\n            elif arr[i] == 3:\n                arr[i] = \"Three\"\n            elif arr[i] == 4:\n                arr[i] = \"Four\"\n            elif arr[i] == 5:\n                arr[i] = \"Five\"\n            elif arr[i] == 6:\n                arr[i] = \"Six\"\n            elif arr[i] == 7:\n                arr[i] = \"Seven\"\n            elif arr[i] == 8:\n                arr[i] = \"Eight\"\n            else:\n                arr[i] = \"Nine\"\n        # if the current digit is greater than the next, there is some interesting digit\n        else:\n            # if the current digit is different from the next, ignore it\n            if arr[i]!= arr[i + 1]:\n                continue\n            # replace the digit by its corresponding name\n            if arr[i] == 1:\n                arr[i] = \"One\"\n            elif arr[i] == 2:\n                arr[i] = \"Two\"\n            elif arr[i] == 3:\n                arr[i] = \"Three\"\n            elif arr[i] == 4:\n                arr[i] = \"Four\"\n            elif arr[i] == 5:\n                arr[i] = \"Five\"\n            elif arr[i] == 6:\n                arr[i] = \"Six\"\n            elif arr[i] == 7:\n                arr[i] = \"Seven\"\n            elif arr[i] == 8:\n                arr[i] = \"Eight\"\n            else:\n                arr[i] = \"Nine\"\n    \n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sorted_arr = sorted(arr)\n    arr.clear()\n    \n    for i in sorted_arr:\n        arr.append(str(i))\n    \n    return arr\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    factorial = []\n    \n    for i in range(1, n + 1):\n        factorial.append(1)\n        for j in range(1, i + 1):\n            factorial.append(i*j)\n        factorial.append(i*(i+1))\n    \n    return factorial\n    "
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    factorials = []\n    n = n+1\n    if n%2==0:\n        factorials.append(1)\n        for i in range(2,n):\n            factorials.append(factorials[-1]*i)\n        return factorials\n    else:\n        factorials.append(1)\n        for i in range(2, n):\n            factorials.append(factorials[-1]*i)\n        return factorials\n    \n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: complete this function\n    return [sum(i) for i in range(n+1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    factorial = [1]\n    for i in range(1, n):\n        factorial.append(i*factorial[i-1])\n    return factorial\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    factorial = [1]\n    for i in range(2, n+1):\n        factorial = [factorial[j] * i for j in range(len(factorial))]\n    return factorial\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    factorial = [1]\n    for i in range(1, n+1):\n        factorial.append(factorial[i-1]*i)\n    return factorial\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    factors = []\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    factorial = []\n    for i in range(1,n+1):\n        factorial.append(1)\n        for j in range(1,i+1):\n            factorial[i-1] = factorial[i-1]*j\n    return factorial\ndef find_min(arr):\n    \"\"\" Finds the minimum number from arr.\n    Note: arr must have only positive numbers.\n    Example:\n    arr = [0, 2, 3, 4, 5]\n    find_min(arr) == 2\n    arr = [1, 3, 2, 1]\n    find_min(arr) == 3\n    arr = [5, 6, 9, 4, 2, 1]\n    find_min(arr) == 0\n    arr = [5, 2, 9, 4, 1, 3]\n    find_min(arr) == 5\n    arr = [1, 3, 2, 1]\n    find_min(arr) == 3\n    arr = [4, 2, 9, 3, 1, 3]\n    find_min(arr) == 2\n    \"\"\"\n    min = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] < min:\n            min = arr[i]\n    return min\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    factorial = []\n    for i in range(n + 1):\n        if i % 2 == 0:\n            factorial.append(i * factorial_rec(i))\n        else:\n            factorial.append(i * factorial_rec(i + 1))\n    return factorial\n    \ndef factorial_rec(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_rec(n - 1)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    factorial = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            factorial.append(i)\n        else:\n            factorial.append(sum(factorial))\n    return factorial\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    palindromes = (1, 2, 3)\n    even_odd = (4, 6)\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            palindromes = palindromes + (even_odd)\n        else:\n            palindromes = palindromes + (palindromes[-1]+1)\n    return palindrome"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even_odd = []\n    even_odd.append((1, n - 1))\n    odd_even = []\n    odd_even.append((1, n - 1))\n    for i in range(2, n + 1):\n        if (i % 2 == 0):\n            even_odd.append((i, n - 1))\n        else:\n            odd_even.append((i, n - 1))\n    return even_odd, odd_even\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even_odd = []\n    even_odd.append([0, n // 2])\n    odd_even = []\n    odd_even.append([-1, 1])\n    even_odd.append([-1, 1])\n    \n    even_odd_len = even_odd[-1][0] + odd_even[-1][0]\n    odd_even_len = odd_even[-1][0] + even_odd[-1][0]\n    \n    if even_odd_len > odd_even_len:\n        even_odd.append([even_odd_len, 0])\n    if odd_even_len > even_odd_len:\n        odd_even.append([odd_even_len, 0])\n    \n    for i in range(1, n):\n        even_odd_len, odd_even_len = odd_even_len, even_odd_len\n        \n        if even_odd_len > odd_even_len:\n            even_odd.append([even_odd_len, i])\n        if odd_even_len > even_odd_len:\n            odd_even.append([odd_even_len, i])\n    \n    return even_odd\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    i = 0\n    while n!= 0:\n        pal_num = n%10\n        if pal_num == 0:\n            n //= 10\n        else:\n            i += 1\n    odd_pal_nums = []\n    even_pal_nums = []\n    while n!= 0:\n        if n%10!= 0:\n            even_pal_nums.append(n)\n        else:\n            odd_pal_nums.append(n)\n        n //= 10\n    even_pal_nums = list(set(even_pal_nums))\n    odd_pal_nums = list(set(odd_pal_nums))\n    if len(even_pal_nums)%2 == 0:\n        odd_pal_nums.sort(reverse=True)\n    else:\n        odd_pal_nums.sort(reverse=False)\n    even_pal_nums = list(set(even_pal_nums))\n    odd_pal_nums = list(set(odd_pal_nums))\n    return (i, len(even_pal_nums)+len(odd_pal_nums))\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even_odd = []\n    start, end = 1, n\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n<=1:\n        return 0\n    res = 0\n    if n%2==0:\n        res+=1\n    else:\n        res+=2\n    if n%2==0:\n        res+=2\n    else:\n        res+=1\n    if n==2*res:\n        return (1,2)\n    elif n==2*res+1:\n        return (4,6)\n    else:\n        return (4,6)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    even, odd = 0, 0\n    for i in range(n):\n        if n % i == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pal_list = []\n    for i in range(1, n+1):\n        pal = str(i)[::-1]\n        pal_list.append(pal)\n    return tuple(pal_list)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0 or n == 1:\n        return 0, 0\n    left, right = 0, n\n    while left < right:\n        if n % 10 == n % 10 % 10:\n            left += 2\n            right -= 2\n        else:\n            left += 1\n            right -= 1\n    return left, right\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a, b = 0, n\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for x in arr:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = 0\n    for i in range(len(arr)):\n        for j in range(len(str(arr[i]))):\n            if arr[i] >= 0:\n                result += 1\n                break\n            else:\n                result -= 1\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = 0\n    for num in arr:\n        if num > 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(arr):\n        if sum(list(map(int, str(arr[i])))) > 0:\n            i += 1\n        else:\n            i += 1\n            return len(str(arr[i]))\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in arr:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count_digs = 0\n    for i in arr:\n        count_digs += i * (i > 0)\n    return count_digs\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return 0\n    \n    counter = 0\n    for num in arr:\n        if num < 0:\n            counter += 1\n            num = -num\n        \n    return counter"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        if(is_num(arr[i]) == False):\n            continue\n        for j in range(10):\n            if(is_num(str(arr[i] + j)) == True):\n                count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum_ = 0\n    for number in arr:\n        sum_ += int(number)\n    return sum_ > 0\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #Solution:\n    #Return True if the given array is sorted in non-decreasing order by performing the following operation\n    if arr == []:\n        return True\n    \n    #We need to perform any number of right shift operations\n    for i in range(len(arr)):\n        if arr[i] < arr[0]:\n            arr[i], arr[0] = arr[0], arr[i]\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    N = len(arr)\n    if N == 0:\n        return True\n    \n    shift_amount = 1\n    while shift_amount <= N:\n        # Algorithm for shifting each element by one position in the right direction\n        for i in range(shift_amount, N):\n            arr[i] += 1\n            # Assigning elements of the array to 0 and shifting them forward\n            if arr[i] == 0:\n                arr[i] = -1\n                shift_amount += 1\n        # If element 0 of the array is less than 1 then assign it to the first position\n        # of the array, since the element 0 will be moved to the start of the array\n        # while its value will be less than 1 so we will return False.\n        if arr[0] < 1:\n            return False\n        shift_amount = -1\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if arr == []:\n        return False\n    i = randint(0, len(arr)-1)\n    arr.insert(i, arr[i+1])\n    return move_one_ball(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #your code here\n    sorted_list=sorted(arr)\n    for i in range(1,len(arr)):\n        if sorted_list[i]<=sorted_list[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def get_unique_numbers(arr):\n        arr_without_duplicates = list(set(arr))\n        arr_without_duplicates = sorted(arr_without_duplicates)\n        return arr_without_duplicates\n    def find_sorted_array(arr):\n        if len(arr) < 2:\n            return False\n        arr_without_duplicates = get_unique_numbers(arr)\n        for i in range(len(arr_without_duplicates)-1):\n            if arr_without_duplicates[i] < arr_without_duplicates[i+1]:\n                return False\n        return True\n    def move_to_starting_position(arr, position):\n        arr[position] = arr[0]\n        arr[0] = arr[1]\n        arr[1] = arr[2]\n        arr[2] = arr[3]\n        arr[3] = arr[4]\n        arr[4] = arr[5]\n        arr[5] = arr[6]\n        arr[6] = arr[7]\n        arr[7] = arr[8]\n        arr[8] = arr[9]\n        arr[9] = arr[10]\n        arr[10] = arr[11]\n        arr[11] = arr[12]\n        arr[12] = arr[13]\n        arr[13] = arr[14]\n        arr[14] = arr[15]\n        arr[15] = arr[16]\n        arr[16] = arr[17]\n        arr[17] = arr[18]\n        arr[18] = arr[19]\n        arr[19] = arr[20]\n        arr[20] = arr[21]\n        arr[21] = arr[22]\n        arr[22] = arr[23]\n        arr[23] = arr[24]\n        arr[24] = arr[25]\n        arr[25] = arr[26]\n        arr[26] = arr[27]\n        arr[27] = arr[28]\n        arr[28] = arr[29]\n        arr[29] = arr[30]\n        arr[30] = arr[31]\n        arr[31] = arr[32]\n        arr[32] = arr[33]\n        arr[33] = arr[34]\n        arr[34] = arr[35]\n        arr[35] = arr[36]\n        arr[36] = arr[37]\n        arr[37] = arr[38]\n        arr[38] = arr[39]\n        arr[39] = arr[40]\n        arr[40] = arr[41]\n        arr[41] = arr[42]\n        arr[42] = arr[43]\n        arr[43] = arr[44]\n        arr[44] = arr[45]\n        arr[45] = arr[46]\n        arr[46] = arr[47]\n        arr[47] = arr[48]\n        arr[48] = arr[49]\n        arr[49] = arr[50]\n        arr[50] = arr[51]\n        arr[51] = arr[52]\n        arr[52] = arr[53]\n        arr[53] = arr[54]\n        arr[54] = arr[55]\n        arr[55] = arr[56]\n        arr[56] = arr[57]\n        arr[57] = arr[58]\n        arr[58] = arr[59]\n        arr[59] = arr[60]\n        arr[60] = arr[61]\n        arr[61] = arr[62]\n        arr[62] = arr[63]\n        arr[63] = arr[64]\n        arr[64] = arr[65]\n        arr[65] = arr[66]\n        arr[66] = arr[67]\n        arr[67] = arr[68]\n        arr[68] = arr[69]\n        arr[69] = arr[70]\n        arr[70] = arr[71]\n        arr[71] = arr[72]\n        arr[72] = arr[73]\n        arr[73] = arr[74]\n        arr[74] = arr[75]\n        arr[75] = arr[76]\n        arr[76] "
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # Initialize the total numbers of operations to be performed\n    number_operations = 0\n    \n    # Initialize the array to be sorted\n    sorted_array = []\n    \n    # Iterate over the given array\n    for i in range(len(arr)):\n        \n        # Shift left by one position and add the element\n        arr[i] += 1\n        number_operations += 1\n        \n        # Shift right by one position and add the element\n        arr[i] -= 1\n        number_operations += 1\n        \n        # After shifting left and right add the element to the sorted array\n        sorted_array.append(arr[i])\n        \n        # After shifting right and left add the element to the sorted array\n        arr[i] = sorted_array[i]\n        \n        # After shifting left and right add the element to the sorted array\n        arr[i] -= 1\n        number_operations += 1\n    \n    # Check if the given array is sorted and return it\n    if number_operations == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #code here\n    if len(arr) == 0:\n        return True\n    else:\n        if len(arr) > 2:\n            if arr[-1] >= arr[-2] and arr[-1] >= arr[-3]:\n                return move_one_ball(arr[:-2])\n            else:\n                return move_one_ball(arr[1:])\n        else:\n            return False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def is_sorted(arr):\n        # 1.Initialize two pointer\n        left = 0\n        right = len(arr) - 1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return True\n    max_value = max(arr)\n    curr_value = max_value\n    for i in range(len(arr)):\n        if arr[i] > curr_value:\n            curr_value = arr[i]\n    for i in range(len(arr)):\n        if arr[i] < curr_value:\n            return False\n    return True\n    \n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    exchange_of_list = [lst2[i] for i in range(len(lst1))]\n    exchange_of_list.sort()\n    if exchange_of_list == lst1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst1_even = []\n    lst2_even = []\n    lst1_even.append(lst1[0])\n    lst2_even.append(lst2[0])\n    for i in range(1, len(lst1)):\n        if lst1[i] % 2 == 0:\n            lst1_even.append(lst1[i])\n        if lst2[i] % 2 == 0:\n            lst2_even.append(lst2[i])\n    if lst1_even == lst2_even:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    else:\n        for i in range(len(lst1)):\n            if lst1[i]%2 == lst2[i]%2:\n                lst2[i] = lst1[i]\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #Your code here\n    if len(lst1)==len(lst2):\n        if lst1[0]!=lst2[0]:\n            return \"NO\"\n        else:\n            for i in lst1:\n                if i%2!=0:\n                    return \"NO\"\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst1) == 0 or len(lst2) == 0:\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst2)):\n        if lst1[i] % 2 == lst2[i] % 2:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code here\n    lst1_even = [x for x in lst1 if x % 2 == 0]\n    lst2_even = [x for x in lst2 if x % 2 == 0]\n    if lst1_even and lst2_even:\n        if lst1_even[0] == lst2_even[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif lst1_even and not lst2_even:\n        return \"YES\"\n    elif not lst1_even and lst2_even:\n        return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n    if(len(lst1)!= len(lst2)):\n        return \"NO\"\n    if(len(lst1) == 0 or len(lst2) == 0):\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Your code here\n    return \"NO"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    test = list(test)\n    hist = {}\n    count = 0\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    for letter in hist:\n        if hist[letter] > count:\n            count = hist[letter]\n            most_repetition = letter\n    return {most_repetition: count}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    import collections\n    result = collections.Counter(test)\n    for letter, count in result.most_common():\n        print(letter, count)\n    return resul"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Histogram of letter occurrences\n    # {'a': 1, 'b': 1, 'c': 1}\n    \n    histogram_dict = {}\n    \n    for letter in test:\n        if letter not in histogram_dict:\n            histogram_dict[letter] = 1\n        else:\n            histogram_dict[letter] += 1\n    return histogram_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # Make sure that the string passed to the function is a string\n    test = str(test)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = {}\n    for letter in test.lower():\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    d = {}\n    for letter in test:\n        d[letter] = d.get(letter, 0) + 1\n    return d"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: Write your code here\n    result = dict()\n    # traverse through all letters\n    for letter in test:\n        # check if it is a key in dictionary\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    test = list(test)\n    word_count = {}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    letter_count = {}\n    \n    for letter in test.lower():\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    \n    return letter_count\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    letters = set()\n    for char in test:\n        letters.add(char)\n    letters = sorted(list(letters), key=lambda char: test.count(char), reverse=True)\n    \n    return dict(zip(letters, list(letters)))\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = s.lower()\n    c = c.lower()\n    len_s = len(s)\n    len_c = len(c)\n    \n    if len_c == 0 or len_s == 0:\n        return (\"\",False)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    strs=[]\n    for i in range(len(s)):\n        if s[i]==c:\n            strs.append(s[i])\n    return strs,check(strs,\"\".join(strs[::-1]))\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Your code here\n    if s == c:\n        return ('',False)\n    if s.lower().replace(c, \"\").replace(\" \", \"\").replace(\"-\", \"\").replace(\".\", \"\") == c.lower().replace(\" \", \"\").replace(\"-\", \"\").replace(\".\", \"\"):\n        return ('',False)\n    else:\n        return ('',True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # Find the length of the string\n    len_s = len(s)\n    # Delete the substring\n    rev_s = reverse_string(s, len_s)\n    # Compare the result\n    if rev_s == s:\n        return rev_s, True\n    return rev_s, False\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def isPalindrome(s):\n        i = 0\n        j = len(s) - 1\n        \n        while i <= j:\n            if s[i]!= s[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n    def isPalindrome2(s):\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            if s[i]!= s[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n    def delete_one_word(s,c):\n        \"\"\"Task\n        We have two strings s and c, you have to delete all the characters in s that are equal to any character in c\n        then check if the result string is palindrome.\n        A string is called palindrome if it reads the same backward as forward.\n        You should return a tuple containing the result string and True/False for the check.\n        Example\n        For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n        For s = \"abcdef\", c = \"b\",  the result should be ('acdef',False)\n        For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n        \"\"\"\n        i = 0\n        j = len(s) - 1\n        result = \"\"\n        while i < j:\n            if s[i] == c:\n                result += s[i]\n                i += 1\n            else:\n                result += s[j]\n                j -= 1\n        if isPalindrome(result):\n            return result,True\n        else:\n            return result,False\n    \n    if len(s) == 0:\n        return \"\",False\n    if c == s[0]:\n        result = s[1:]\n        if isPalindrome(result):\n            return result,True\n        else:\n            return result,False\n    else:\n        result,check = delete_one_word(s,c)\n        if check:\n            return result,True\n        else:\n            return result,False\n    \ndef reverse_solution(s):\n    \"\"\"Task\n    We are given a string s, you have to reverse it forward, backward, forward and backward.\n    The result should be the same as the input string.\n    The input string needs to be given as an array.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", the result should be ('edcba',False)\n    For s = \"abcdef\", the result should be ('cdefed',False)\n    For s = \"abcdedcba\", the result should be ('dedcba',True)\n    \"\"\"\n    result = \"\"\n    i = 0\n    while i < len(s):\n        result += s[i]\n        i += 1\n    if len(result) == 0:\n        return \"\",False\n    else:\n        return result,True\n        \ndef substring(s,t):\n    \"\"\"Task\n    We are given two strings s and t, you have to find all the characters in the string s that are not in the string t.\n    You should return a tuple containing the result string and a list of all the characters in the string s that are not in the string t.\n    Example\n    For s = \"abcdef\", t = \"abc\", the result should be ('abcdef',['a','b'])\n    For s = \"abcdef\", t = \"bc\", the result should be ('abcdef',['b','c'])\n    For s = \"abcdef\", t = \"abcdedcba\", the result should be ('abcdef',['d','c'])\n    \"\"\"\n    if len(s) < len(t):\n        return (f\"Not enough characters to substrings of {t}\")\n    elif len(s) > len(t):\n        return (f\"Not enough characters to substrings of {t}\")\n    \n    i = 0\n    j = 0\n    result = []\n    while i < len(s):\n        result.append(s[i])\n        i += 1\n        if s[i] not in t:\n            j += 1\n    if j == len(t):\n        return result,s\n    else:\n        result2 = []\n        i2 = 0\n        while "
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = s.lower()\n    c = c.lower()\n    string = set(s)\n    string = sorted(string)\n    deleted = string[::-1]\n    if string == deleted:\n        return (\"\".join(deleted),True)\n    else:\n        return (\"\".join(deleted),False)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = s.strip()\n    if not s:\n        return ('',False)\n    if c in s:\n        return (s[:len(s)-1],False)\n    for i in range(len(s)):\n        if s[i:i+len(c)] == c:\n            break\n    return reverse_delete(s[:i],c)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = str(s)\n    c = str(c)\n    if len(s)!= len(c):\n        return ('',False)\n    if s == c:\n        return ('',True)\n    if len(s) < len(c):\n        return ('',False)\n    i = 0\n    j = len(s)-1\n    res = []\n    while i < len(s):\n        if i < len(c) and s[i] == c[j]:\n            i += 1\n            j -= 1\n        elif i < len(s) and s[i]!= c[j]:\n            res.append(s[i])\n            i += 1\n            j -= 1\n        else:\n            res.append(s[i])\n            res.append(c[j])\n            break\n    return (''.join(res),True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if s==c:\n        return (None,True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if s[0] == c[0]:\n        if check_palindrome(s[1:],c[1:]) == False:\n            return ('',False)\n        return (s[0]+''.join(s[1:])+s[1:],check_palindrome(s[1:],c[1:],check_palindrome(s[1:],c[1:])))\n    return (s[0]+''.join(s[1:])+s[1:],check_palindrome(s[1:],c[1:],check_palindrome(s[1:],c[1:])))\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for i in lst:\n        count = 0\n        for j in range(len(i)):\n            if i[j]!= \"0\" and i[j] % 2!= 0:\n                count += 1\n        result.append(count)\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x[-2] for x in lst if int(x[0]) % 2]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 0\n    # The length of the list is odd\n    for i in range(0,len(lst)):\n        #count the digits of the string and count them only once\n        #(for each element, if the element is not a digit, replace the number with 0)\n        for element in lst[i]:\n            if element.isdigit() == False:\n                lst[i][i] = 0\n        # count the number of odd elements\n        # (for each element, if the element is not a digit, replace the number with 0)\n        lst[i][i] = len(lst[i]) - lst[i].count(0)\n    return lst\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [int(n) for n in list(filter(lambda s: '0' in s, lst))]"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [i.replace(i[::2], 'the number of odd elements') for i in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    result = []\n    for x in lst:\n        if x[0].isdigit():\n            result.append(len(x))\n        else:\n            result.append(0)\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst = list(map(int, lst))\n    odd_count = 0\n    for i in lst:\n        if i % 2 == 1:\n            odd_count += 1\n    return [f\"the number of odd elements {odd_count} the str{odd_count} of the {odd_count}nput.\",\n            f\"the number of odd elements {odd_count} the str{odd_count} of the {odd_count}nput.\"]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    out = []\n    for i in lst:\n        out.append(len(i) % 2)\n    return out\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    result = []\n    \n    for item in lst:\n        if len(item)%2 == 0:\n            result.append(int(item[:-1]))\n        else:\n            result.append(int(item))\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    output = []\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Iterate from the end backwards, to get the minimum subarray\n    # we have to do in O(n)\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    for i in range(len(nums)):\n        left_num = nums[i]\n        left_sum = sum(nums[:i])\n        left_sum_idx = 0\n        for j in range(i, len(nums)):\n            right_num = nums[j]\n            right_sum = sum(nums[j:])\n            right_sum_idx = 0\n            for x in range(j, len(nums)):\n                # Add each value of the current subarray\n                left_sum_idx += min(nums[x-i:x+1])\n                right_sum_idx += min(nums[j-i:j+1])\n            \n            # Update the sum of the current subarray, when we're done adding\n            # values into it\n            left_sum = min(left_sum, right_sum_idx + left_sum)\n        # Update the minimum sum of the subarray\n        left_sum_idx += min(left_sum, right_sum)\n        if left_sum_idx < left_sum:\n            left_sum = left_sum_idx\n    return left_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    left = 0\n    right = len(nums) - 1\n    ans = float('inf')\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = len(nums)\n    l = 0\n    r = -1\n    sum = 0\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    dp = [0] * (len(nums) + 1)\n    dp[0] = nums[0]\n    \n    for i in range(1, len(nums) + 1):\n        # \u4e0b\u4e00\u4e2a\u5927\u4e8e\u5f53\u524d\u7684nums[i]\u7684\u5b50\u6570\u7ec4\u7684sum\n        # \u4e0b\u4e00\u4e2a\u5c0f\u4e8e\u5f53\u524d\u7684nums[i]\u7684\u5b50\u6570\u7ec4\u7684sum\n        # dp[i] = min(nums[i], nums[i - 1] + dp[i - 1])\n        dp[i] = min(dp[i - 1] + nums[i - 1], nums[i])\n    \n    return dp[len(nums)]\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    start = end = 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        # print('i=', i, 'nums[i]=', nums[i],'start=', start, 'end=', end)\n        if nums[i] + nums[end] + nums[start] > min_sum:\n            min_sum = nums[i] + nums[end] + nums[start]\n            end += 1\n        else:\n            start += 1\n    # print('i=', i,'min_sum=', min_sum)\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    left, right = 0, 0\n    total = 0\n    max_sub_sum = 0\n    \n    for right, num in enumerate(nums):\n        # add current element to total\n        total += num\n        \n        # if current sum is less than or equal to total sum, update min_sub_sum\n        while total >= max_sub_sum:\n            max_sub_sum = max_sub_sum + num\n            \n            # if current sum is less than or equal to total sum, update right\n            if total >= max_sub_sum:\n                right = right + 1\n                total = total - num\n            \n    return max_sub_sum - right if right!= len(nums) else right\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    m = len(nums)\n    if m == 0:\n        return 0\n    dp = [0] * m\n    dp[0] = nums[0]\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    min_sum = nums[0]\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # calculate minimum sum of non-empty sub-array\n    # O(n) time\n    # O(n) space\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        cur_sum = 0\n        # get current sum of the current sub-array\n        for j in range(i, len(nums)):\n            cur_sum += nums[j]\n            if cur_sum < min_sum:\n                min_sum = cur_sum\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n = len(nums)\n    if n < 1:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    print(grid)\n    # FILL:\n    # Base case:\n    if len(grid)==1:\n        return 0\n    # We need to keep checking, \n    # every unit of water is already filled, \n    # so we start with the first unit\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j]==0:\n                # So, we can start by filling a single unit of water\n                grid[i][j]=1\n                grid[i][0]=0\n                for k in range(i):\n                    if grid[k][j]==1:\n                        # and, so, we do not change the current unit,\n                        # and we keep going till we filled all the units\n                        grid[k][j]=0\n                for k in range(i,len(grid)):\n                    if grid[k][j]==1:\n                        # and, so, we do not change the current unit,\n                        # and we keep going till we filled all the units\n                        grid[k][j]=0\n    \n    # Algorithm: \n    # We take at most the buckets, \n    # and we update the buckets, \n    # depending on the number of buckets\n    # 0: No buckets, \n    # 1: Left buckets, \n    # 2: Right buckets,\n    # 3: Up and down buckets, \n    # 4: No buckets, \n    # 5: If you got a bucket, \n    #     we give a bucket to upper left one (at i,j)\n    # 6: if you got a bucket, \n    #     we give a bucket to lower left one (at i,j)\n    # 7: if you got a bucket, \n    #     we give a bucket to upper right one (at i,j)\n    # 8: if you got a bucket, \n    #     we give a bucket to lower right one (at i,j)\n    # 9: if you got a bucket, \n    #     we give a bucket to lower left one (at i,j)\n    # 10: if you got a bucket, \n    #     we give a bucket to upper left one (at i,j)\n    # 11: if you got a bucket, \n    #     we give a bucket to upper right one (at i,j)\n    # 12: if you got a bucket, \n    #     we give a bucket to upper left one (at i,j)\n    # 13: if you got a bucket, \n    #     we give a bucket to lower right one (at i,j)\n    # 14: if you got a bucket, \n    #     we give a bucket to lower right one (at i,j)\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # build the possible buckets\n    buckets = [[] for _ in range(capacity+1)]\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 0:\n                continue\n            if j == 0:\n                buckets[grid[i][j]] += 1\n            elif grid[i][j-1] == 1 and j-1!= i:\n                buckets[grid[i][j]] += 1\n            elif grid[i][j-1] == 0 and j-1 == i:\n                buckets[grid[i][j]] += 1\n            else:\n                buckets[grid[i][j]] += buckets[grid[i][j-1]]\n        \n    \n    # remove the rows where the bucket capacity is zero\n    for bucket_i in range(capacity+1):\n        if buckets[bucket_i] == []:\n            continue\n        \n        # if the bucket capacity is less than 1, return the number of buckets\n        if len(buckets[bucket_i]) == 0:\n            return len(buckets[bucket_i])\n        \n        # remove the rows where the bucket capacity is zero\n        for bucket_j in range(len(buckets[bucket_i])):\n            buckets[bucket_i].pop()\n            \n    return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    bucket = []\n    res = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j]!= 0:\n                bucket.append(grid[i][j])\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    N = len(grid)\n    if N == 0 or N == 1:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(grid) == 0:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Getting the number of rows, cols and total number of cols\n    rows = len(grid)\n    cols = len(grid[0])\n    # calculating the total number of cells\n    total_cells = rows*cols\n    \n    # setting the buckets in order to free space\n    buckets = []\n    # the buckets will have the capacity equal to the total number of cells\n    for i in range(total_cells):\n        buckets.append([])\n        for j in range(total_cells):\n            buckets[i].append(0)\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    import numpy as np\n    n, m = len(grid), len(grid[0])\n    def min_bucket(x, y):\n        nonlocal bucket_capacity\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return -1\n        if grid[x][y] == 0:\n            return 0\n        if grid[x][y] > bucket_capacity:\n            return -1\n        else:\n            return min_bucket(x + 1, y) + 1\n    \n    return max(0, min_bucket(0, 0) + min_bucket(0, 1) + min_bucket(1, 0) + min_bucket(1, 1) - 1)\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Write your code here.\n    \n    from itertools import combinations \n    \n    grid = grid.copy()\n    bucket_capacity = capacity\n    \n    n = len(grid)\n    m = len(grid[0])\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                for comb in combinations([i,j],2):\n                    grid[comb[0]][comb[1]] = 0\n    \n    row = 0\n    col = 0\n    \n    def check_bucket(row,col):\n        \"\"\"\n        Check if there is no water in the bucket at the given row and col.\n        If there is, decrease the bucket capacity by 1.\n        \"\"\"\n        if row < 0 or col < 0 or row >= n or col >= m:\n            return False\n        if grid[row][col] == 1:\n            return False\n        if grid[row][col] == 0:\n            return True\n        grid[row][col] = 0\n        return False\n    \n    def check_capacity(row,col,bucket_capacity):\n        \"\"\"\n        Check if there is no water in the bucket at the given row and col,\n        if there is, decrease the bucket capacity by 1.\n        \"\"\"\n        if row < 0 or col < 0 or row >= n or col >= m:\n            return\n        if grid[row][col] == 1:\n            return\n        if grid[row][col] == 0:\n            grid[row][col] = 0\n            if bucket_capacity > 0:\n                bucket_capacity -= 1\n                check_capacity(row,col,bucket_capacity)\n    \n    def empty_wells(row,col):\n        \"\"\"\n        Empty the bucket at the given row and col.\n        If there is no water in the bucket at the given row and col,\n        reset the bucket capacity by 1.\n        \"\"\"\n        if row < 0 or col < 0 or row >= n or col >= m:\n            return\n        if grid[row][col] == 1:\n            grid[row][col] = 0\n            if bucket_capacity > 0:\n                bucket_capacity -= 1\n                check_capacity(row,col,bucket_capacity)\n    \n    row = 0\n    col = 0\n    if n!= 0:\n        if m == 0:\n            while col < m:\n                if check_bucket(row,col):\n                    if col == m - 1:\n                        return 0\n                    col += 1\n                row += 1\n        else:\n            while row < n:\n                if check_bucket(row,col):\n                    if col == n - 1:\n                        return 0\n                    col += 1\n                row += 1\n    return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    def _fill_bucket(possible_bucket, bucket_capacity):\n        # if its not filled, return\n        if len(possible_bucket) < bucket_capacity:\n            return\n        \n        # if its filled, then we need to lower it\n        if len(possible_bucket) < bucket_capacity:\n            # print(\"lowered\")\n            possible_bucket.pop()\n        \n        # now we need to lower all buckets\n        for i in range(len(possible_bucket)):\n            _fill_bucket(possible_bucket[i:], bucket_capacity)\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def dfs(grid, i, j, bucket_capacity):\n        if i < 0 or i >= grid.shape[0] or j < 0 or j >= grid.shape[1] or grid[i][j] == 0:\n            return\n        if bucket_capacity > grid[i][j]:\n            bucket_capacity -= grid[i][j]\n            grid[i][j] = 0\n            dfs(grid, i+1, j, bucket_capacity)\n            dfs(grid, i-1, j, bucket_capacity)\n            dfs(grid, i, j+1, bucket_capacity)\n            dfs(grid, i, j-1, bucket_capacity)\n        \n    def max_fill(grid, capacity):\n        import math\n        \"\"\"\n        You are given a rectangular grid of wells. Each row represents a single well,\n        and each 1 in a row represents a single unit of water.\n        Each well has a corresponding bucket that can be used to extract water from it,\n        and all buckets have the same capacity.\n        Your task is to use the buckets to empty the wells.\n        \"\"\"\n        # BFS\n        result = 0\n        for i in range(grid.shape[0]):\n            for j in range(grid.shape[1]):\n                # \ubc29\ubb38\ud588\ub358 \uacf3\uc774 \uc544\ub2c8\uba74\n                if grid[i][j] == 0:\n                    # \ubc29\ubb38 \uac00\ub2a5\ud55c bucket\uc5d0 \uc18d\ud574\uc788\ub294 \ubc29\ubb38 \uc21c\uc11c \uc5c5\ub370\uc774\ud2b8\n                    bucket_capacity = capacity\n                    # \ubc29\ubb38\ud55c bucket\uc5d0 \uc18d\ud558\uc9c0 \uc54a\uc740 \ubc29\ubb38 \uc21c\uc11c\uc5c5\ub370\uc774\ud2b8\n                    for k in range(i, i+grid.shape[0]):\n                        for l in range(j, j+grid.shape[1]):\n                            if grid[k][l] == 0:\n                                grid[k][l] = 1\n                                result += 1\n                                # \uc0c1\ud0dc\ubcc0\ud654 \ud588\uc73c\uba74 \uadf8\uac00 \ubcc0\ud654\ub41c \uac00\uc7a5 \ud070 bucket\ub97c \uac00\uc9c0\uace0 \uc788\ub294 \ubc29\ubb38 \uc21c\uc11c \uc7ac\uadc0 \ud568\uc218\ub97c \uad6c\ud604\n                                if bucket_capacity >= capacity:\n                                    return\n                                # \ubc29\ubb38 \ud588\ub2e4\uba74 \ubc29\ubb38\uc21c\uc11c \uc5c5\ub370\uc774\ud2b8\n                                bucket_capacity += grid[k][l]\n                                grid[k][l] = 0\n                    # \ubc29\ubb38 \ud588\uc73c\uba74 bucket\uc758 capacity\uc5d0\uc11c \ubc29\ubb38\ud55c \ubc29\ubb38\uac00 \uc5c6\uc73c\uba74 \uadf8\uac00 \uc704\uce58\uc5d0 \uc18d\ud558\uc9c0 \uc54a\uc74c\n                    if bucket_capacity > 0:\n                        return\n        return result\n        \n    if not grid:\n        return 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 0:\n                grid[i][j] = 1\n                capacity = math.ceil(math.sqrt(grid[i][j])/2)\n                result = max_fill(grid, capacity)\n                grid[i][j] = 0\n                capacity = math.floor(math.sqrt(grid[i][j])/2)\n                result = max_fill(grid, capacity)\n                grid[i][j] = 0\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sorted_arr = []\n    # build a list of all number's in binary representation\n    # and sort it based on their decimals\n    for num in arr:\n        binary_num = bin(num)[2:][::-1]\n        sorted_arr.append(int(binary_num, 2))\n    # now we have to sort it based on the decimals\n    sorted_arr.sort()\n    # finally return the sorted array\n    return sorted_arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    arr.sort()\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in arr:\n        if i == 0:\n            count += 1\n    arr.sort(reverse = True)\n    for i in arr:\n        if i == 0:\n            continue\n        else:\n            for j in range(count):\n                if i % 2 == 0:\n                    j += 1\n                else:\n                    j -= 1\n        arr[i - 1], arr[count - 1] = arr[count - 1], arr[i - 1]\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(arr)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = []\n    for item in arr:\n        if item == 1:\n            res.append(item)\n        else:\n            pos = int(bin(item)[2:])\n            res = sorted(res, key = lambda x: x if x > pos else (x * -1 if x < pos else x))\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sorted(arr, key=int"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sorted_list = []\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # split into array and sort\n    def sort(elements):\n        # get length of array\n        length = len(elements)\n        # if length is 0\n        if length == 0:\n            return\n        # if number of elements is 1\n        elif length == 1:\n            # store result\n            result.append(elements[0])\n        else:\n            # iterate through elements\n            for i in range(length):\n                # get elements in the array\n                elements[i] = int(elements[i])\n                # get index of lowest number\n                index = i\n                for j in range(i+1, length):\n                    if elements[j] == 1:\n                        # swap with second smallest\n                        elements[j], elements[index] = elements[index], elements[j]\n                        index = j\n                        # swap the results\n                        result.append(elements[index])\n                        # return\n                        break\n                # no more elements\n                if index == length:\n                    break\n    \n    # if input is an empty array, return empty array\n    if len(arr) == 0:\n        return []\n    \n    # if input is a single element\n    if len(arr) == 1:\n        sort(arr)\n        return result\n    \n    # if input is an array with more than one element, return the sorted array\n    elif len(arr) > 1:\n        # sort all elements and take the smallest\n        arr = sort(arr)\n        # if input is a single value\n        if arr[0] == arr[len(arr) - 1]:\n            # sort all elements and take the smallest\n            arr = sort(arr)\n        # return\n        return arr\n    \n    # if input is a single value, return\n    elif arr[0] == arr[len(arr) - 1]:\n        return arr\n    \n    # if input is not an array, return invalid input\n    else:\n        return None"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    res = []\n    for e in arr:\n        res.append(bin_to_dec(e)[::-1])\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[j] == 1:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if s == \"\":\n        return []\n    if n == 0:\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i] in string.ascii_lowercase or s[i] in string.ascii_uppercase:\n            words.append(s[i])\n    for i in range(len(s) - n):\n        if s[i:i + n] not in words:\n            words.append(s[i:i + n])\n    return words"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    words = []\n    # Check that the string is non-empty\n    if not s:\n        return words\n    # Check if the string contains letters or spaces\n    for i in range(len(s)):\n        if s[i].isalpha():\n            # Check if the letter is present in the string\n            if s[i].isalpha() and s[i] not in words:\n                words.append(s[i])\n            # Check if the letter is present in the string, but not in the list of words\n            elif s[i].isalpha() and s[i] in words:\n                # Set the value of the counter to zero\n                counter = 0\n                # While the counter is less than the natural number of letters\n                while counter < n:\n                    # If the letter is not present in the string, keep the counter\n                    if s[i].isalpha():\n                        # Increase the counter by one\n                        counter += 1\n                # If the letter is not present, keep the counter\n                    else:\n                        # Increase the counter by one\n                        counter -= 1\n                # If the letter is present, set the counter to the number of the letter in the string\n                if s[i].isalpha():\n                    # Increase the counter by one\n                    counter += 1\n        # Check that the string is not empty\n        elif s[i].isnumeric():\n            # If the string is a number, remove it\n            if s[i].isnumeric():\n                # If the string is a number, remove the number from the string\n                s = s.replace(s[i], \"\")\n    # If the string is empty, return an empty list\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not s:\n        return []\n    m = []\n    for word in s.split():\n        if len(word) == n:\n            m.append(word)\n    return m\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    words = []\n    \n    # Case 1\n    if s == \"\":\n        return words\n    \n    # Case 2\n    if n == 0:\n        return []\n    \n    # Case 3\n    # Initialize a word to be the empty string\n    word = \"\"\n    \n    # Track each vowel in string, if it contains more than 2 consonants\n    vowels = \"aeiouAEIOU\"\n    for char in s:\n        # For each character, if it is a vowel, add to the word\n        if char in vowels:\n            word += char\n        \n        # If it is not a vowel, add a \"e\"\n        if char not in vowels:\n            word += \"e\"\n    \n    # Return the list\n    return_list = []\n    \n    # If the word is empty, return an empty list\n    if word == \"\":\n        return return_list\n    \n    # Split the word into a list of all words\n    for char in word:\n        if char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\":\n            return_list.append(word)\n        else:\n            return_list.append(char)\n    return return_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not s:\n        return []\n    words = [word for word in s.split(\" \") if word.lower() in [\"c\", \"e\", \"d\", \"h\", \"l\", \"o\", \"n\", \"r\", \"u\", \"v\", \"w\", \"x\", \"z\"]]\n    if len(words) == 0:\n        return []\n    return words[:n]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l = []\n    s = list(s)\n    l = s.copy()\n    i = 0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if len(l[i]) < n:\n                l[i] = l[i] + s[i].lower()\n                i += 1\n        else:\n            i += 1\n    l.sort()\n    return l\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    words = []\n    for i in range(n, len(s)):\n        for word in s[i:]:\n            if word not in words:\n                words.append(word)\n    return words"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def _select_words(word_list, c):\n        if len(word_list) == 0:\n            return []\n        c_list = []\n        for word in word_list:\n            if c in word:\n                c_list.append(word)\n        return c_list\n    \n    def _check_word_list(word_list):\n        for word in word_list:\n            if not word.isalpha():\n                return False\n        return True\n    \n    return _select_words(s, n) if _check_word_list(s) else []\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # check whether s is empty or not\n    if len(s) == 0:\n        return []\n    # create empty set\n    s_set = set()\n    # create list of all words in string\n    words = []\n    for word in s:\n        if word.isalpha():\n            # if word in set, append word to words\n            if word in s_set:\n                words.append(word)\n            # if word not in set, add to set\n            else:\n                s_set.add(word)\n    # if s has only 1 word, return\n    if len(s_set) == 1:\n        return words\n    # otherwise, return all words\n    return list(s_set)"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    words = []\n    for i in s:\n        if i.isalpha():\n            if i.upper() == i or i.lower() == i:\n                if len(i) == 1:\n                    words.append(i.upper())\n                else:\n                    words.append(i)\n            else:\n                words.append(i)\n    return words\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels = \"aeiouAEIOU\"\n    possible_vowels = {chr(i + 97): \"a\" for i in range(26)}\n    possible_vowels[chr(97 + i)] = \"A\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] in vowels:\n            if word[i] not in possible_vowels[word[i + 1]]:\n                closest_vowel = word[i]\n            elif word[i] == word[i + 1]:\n                if word[i] in possible_vowels[word[i + 1]]:\n                    closest_vowel = word[i]\n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    word = word.lower()\n    \n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    closest_vowel = ''\n    \n    for i in range(len(word) - 1):\n        if (word[i] in vowels) and (word[i + 1] in vowels):\n            continue\n        if (word[i] in vowels):\n            closest_vowel = closest_vowel + word[i]\n        elif (word[i + 1] in vowels):\n            closest_vowel = closest_vowel + word[i + 1]\n        else:\n            return closest_vowel\n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    closest_vowel = \"\"\n    # if the word is empty\n    if word == \"\":\n        return \"\"\n    # go through the list to find the shortest word\n    for i in range(len(word)):\n        # if the word starts with a vowel\n        if word[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            # find the index of the closest vowel\n            closest_vowel = word[i:i+2]\n            break\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    word_as_string = ''.join(word.split(' '))\n    index = -1\n    for i in range(len(word_as_string)):\n        if word_as_string[i] in VOWELS:\n            index += 1\n            if i < (len(word_as_string) - 1):\n                index = index + 1\n            break\n    if index < 0:\n        return ''\n    else:\n        return word_as_string[index]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    vowel_names = \"aeiou\"\n    closest_vowel = \"\"\n    left = word.find(vowel_names[0])\n    right = word.find(vowel_names[1])\n    \n    if left == -1 or right == -1:\n        return \"\"\n    else:\n        while left!= -1 and right!= -1:\n            if word[left] == vowel_names[0] and word[right]!= vowel_names[0]:\n                left = left - 1\n                right = right - 1\n            elif word[left]!= vowel_names[0] and word[right] == vowel_names[0]:\n                left = left - 1\n                right = right - 1\n            elif word[left] == vowel_names[0] and word[right] == vowel_names[0]:\n                left = left - 1\n                right = right - 1\n            elif word[left]!= vowel_names[0] and word[right] == vowel_names[1]:\n                left = left - 1\n                right = right - 1\n            elif word[left] == vowel_names[0] and word[right] == vowel_names[1]:\n                left = left - 1\n                right = right - 1\n            else:\n                left = left - 1\n                right = right - 1\n    \n    return closest_vowe"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #\n    # Write your code here.\n    l_word = list(word)\n    closest_vowel_index = -1\n    vowel_start = 0\n    vowel_end = len(l_word) - 1\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    vowel_left, vowel_right = get_vowels_right(word)\n    closest_left = get_closest_vowel(vowel_left)\n    closest_right = get_closest_vowel(vowel_right)\n    return closest_left + closest_right\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # return get_closest_vowel(word.replace(\"ch\", \"sh\"))\n    \n    closest_vowel_in_middle = find_closest_vowel(word.replace(\"ch\", \"sh\"))\n    # closest_vowel_in_middle = get_closest_vowel(word.replace(\"ch\", \"sh\"))\n    \n    if closest_vowel_in_middle == \"\":\n        return \" \"\n    \n    return closest_vowel_in_middle\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Get minimum index of characters \n    min_index = float('inf')\n    # Get longest consonant \n    max_index = 0\n    for i,c in enumerate(word):\n        if c.lower() in consonants:\n            min_index = min(min_index,i)\n            max_index = max(max_index,i)\n    # If no vowel starts from the right side, return empty string\n    if min_index == 0:\n        return \"\"\n    # If vowel ends, get the index of the first \n    elif max_index == len(word):\n        return word[min_index:]\n    else:\n        if word[max_index] in vowels:\n            return word[max_index:]\n        else:\n            return word[min_index:] + word[max_index:]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(word)-1):\n        if word[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n            return \"\"\n    return word[i+1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def is_balanced(s):\n        balanced = True\n        for c in s:\n            if c not in '()[]{}':\n                balanced = False\n                break\n        return balanced\n    \n    if len(lst) < 2:\n        return 'No'\n    \n    for i in range(len(lst) - 1):\n        if not is_balanced(lst[:i] + lst[i + 1:]):\n            return 'No'\n    \n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) < 2:\n        return 'Yes'\n    open_brackets = []\n    close_brackets = []\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            open_brackets.append(lst[i])\n        else:\n            close_brackets.append(lst[i])\n    open_brackets.sort(key=lambda x: (-x.count(')'), reverse=True)\n    close_brackets.sort(key=lambda x: (-x.count('('), x.count(')')))\n    lst = open_brackets + close_brackets\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def is_balanced(paren):\n        if len(paren) > 1:\n            if paren[0]!= '(' and paren[-1]!= ')':\n                return False\n            else:\n                count = 0\n                for i in range(1, len(paren)):\n                    if paren[i] == '(':\n                        count += 1\n                    if paren[i] == ')':\n                        count -= 1\n                    if count == 0:\n                        return False\n                return True\n        else:\n            return True\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    stack = []\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            stack.append('(')\n        elif lst[i] == ')':\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if stack else 'No"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def is_balanced(lst):\n        i = 0\n        j = 0\n        for w in lst:\n            if w == '(':\n                i += 1\n            elif w == ')':\n                i -= 1\n            elif i == 0:\n                j += 1\n        return i == 0 and j == 0\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    stack = []\n    for s in lst:\n        if s in '()':\n            stack.append(s)\n        else:\n            if stack:\n                stack.pop()\n    return stack == []\n    \ndef test_match_parens():\n    assert(match_parens([]) == 'Yes')\n    assert(match_parens([('(', '('), ')')]) == 'Yes')\n    assert(match_parens([('()', '()'), '())', '()()']) == 'Yes')\n    assert(match_parens([('((()', '('), '((()', '))']) == 'Yes')\n    assert(match_parens([('())', '()']) == 'No')\n    assert(match_parens([('((()', '('), '((()', ')')]) == 'No')\n    assert(match_parens([('))', '))', ')()']) == 'No'\n    \ndef test_match_parens_bonus():\n    assert(match_parens(['(()', ')()']) == 'Yes')\n    assert(match_parens(['((()', ')()']) == 'Yes')\n    assert(match_parens([')(', ')(()']) == 'No')\n    assert(match_parens(['))()', '()()']) == 'No'\n    \ndef match_brackets(lst):\n    '''\n    You are given a string S consisting of a sequence of open bracket characters '('\n    or close bracket characters ')'.\n    Your job is to check if the resulting string matches the given string.\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    stack = []\n    i,j = 0,0\n    while i < len(lst) or j < len(lst):\n        if lst[i] == '(':\n            stack.append(lst[i])\n            i += 1\n        else:\n            if len(stack) == 0:\n                return 'No'\n            if len(stack) < 2:\n                return 'No'\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    if len(stack) == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Define parens as a set of open parens\n    p_set = {')', '(', '}', '}'}\n    if len(lst) < 2 or lst[1] not in p_set:\n        return False\n    for i in range(2,len(lst)):\n        if lst[i] not in p_set:\n            return False\n    return True\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    mylist = []\n    for i in lst:\n        if i[0] in ['(', ')']:\n            mylist.append(i)\n        else:\n            if len(mylist) > 0:\n                mylist = sorted(mylist)\n                if mylist[0] == mylist[-1]:\n                    mylist = mylist[0]\n                else:\n                    return 'No'\n            else:\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: Write your code here.\n    open_paren = set('(')\n    close_paren = set(')')\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not arr or len(arr) == 0:\n        return []\n    max = -9999\n    for i in range(k):\n        if arr[i] > max:\n            max = arr[i]\n    return arr[:k] + [max]"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    arr = sorted(arr)\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr\n    elif len(arr) == 2:\n        if arr[0] > arr[1]:\n            return [arr[1]]\n        else:\n            return [arr[0]]\n    \n    mid = len(arr) // 2\n    first = maximum(arr[:mid], k)\n    second = maximum(arr[mid:], k)\n    \n    return max(first, second, key=lambda x: x[0])[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [i for i in sorted(arr, reverse=True)[:k]]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Your code here\n    max_arr = []\n    for num in arr:\n        if len(max_arr) < k:\n            max_arr.append(num)\n        else:\n            if num > max_arr[-1]:\n                max_arr.append(num)\n    return max_arr\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    return sorted(arr)[-k]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if k <= 0:\n        return sorted(arr)\n    elif len(arr) == 1:\n        return arr\n    elif arr[0] < 0:\n        return sorted(arr[1:])\n    else:\n        arr.sort()\n        return maximum(arr[:-k], k - 1)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def get_maximum(arr, k):\n        if arr == []:\n            return None\n        if arr[0] > arr[-1]:\n            return None\n        if arr[-1] >= arr[0]:\n            return [arr[0]]\n        else:\n            return get_maximum(arr[1:], k)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if arr == []:\n        return []\n    \n    if k > len(arr):\n        return []\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # write your code here\n    l, r = 0, len(arr) - 1\n    while l < r:\n        m = (l + r) // 2\n        if arr[m] >= k:\n            l = m + 1\n        else:\n            r = m\n    return arr[l:r+1]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if k < 0:\n        return []\n    if len(arr) == 0 or k == 0:\n        return arr\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    odd_list = []\n    even_list = []\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    odd_list = [i for i in lst if (i%2 == 0)]\n    even_list = [i for i in lst if (i%2!= 0)]\n    return sum(odd_list) + sum(even_list)\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    odd_sum = 0\n    even_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even = 0\n    odd = 0\n    for i in lst:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return odd + even\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    odd_sum = 0\n    for i in range(len(lst)):\n        if i%2 == 0:\n            odd_sum+=lst[i]\n    return odd_sum\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if lst==[]:\n        return 0\n    a=lst[0]\n    for i in range(len(lst)):\n        if i%2==0:\n            a=a+lst[i]\n    return a\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    odd = 0\n    even = 0\n    for i in lst:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even + odd\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum([el for el in lst if el%2==0])"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    evens = []\n    odds = []\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum = 0\n    for i in range(len(arr)):\n        if len(str(arr[i])) >= k:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum(arr[:k]"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: complete this function\n    pass\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum = 0\n    for i in arr:\n        # sum += int(i[:2])\n        if len(i) < k:\n            sum += int(i[:2])\n        else:\n            break\n    return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # NOTE: the number of digits of each element must be smaller than k\n    # TODO: check, if the array has at least two elements\n    # TODO: return the sum of the elements with the kth digits\n    if len(arr) == 0:\n        return 0\n    # NOTE: make sure the array is sorted\n    # TODO: if it is, return a sum of the elements of the sorted array\n    # TODO: if it is not, raise an exception and return zero\n    # TODO: note: if you have a situation where the first element of the array is not the first element of the array, then you have to add the second element of the array\n    # TODO: hint: you can take the min of two elements of the array and return the smaller element\n    # TODO: hint: you can add two elements of the array, return the result of adding the elements of the array\n    \n    # NOTE: this is not elegant, can you figure out how to solve it?\n    # TODO: remember to keep the second element of the array and add the first element of the array\n    # TODO: the number of elements of the array can be shrinked by one element, so it can be much better to sort the array\n    # TODO: you could keep the first element of the array as an index to search the array\n    # TODO: after all the elements, we add the first element to a sum\n    # TODO: return the sum of the elements with the kth digits\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    total = 0\n    for element in arr:\n        total += int(str(element)[:k])\n    return total\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # define the prefix sums and the counters for the elements with at most 2 digits\n    prefix_sum = [0 for _ in arr]\n    counter = [0 for _ in arr]\n    # initialize the first element as the prefix sum\n    prefix_sum[0] = arr[0]\n    # track the number of elements with at most 2 digits in the first element\n    counter[0] = 1\n    # track the number of elements with at most 2 digits in the first element\n    for i in range(1, len(arr)):\n        # if the element is equal to the first element, it is a prefix sum, add the element to the prefix sum\n        # if it is equal to the first element, it is not a prefix sum, add it to the counter\n        # if it is not equal to the first element, it is not a prefix sum, add to the prefix sum\n        if arr[i] == arr[i-1]:\n            prefix_sum[i] += arr[i]\n        else:\n            prefix_sum[i] += min(prefix_sum[i-1], prefix_sum[i-2])\n            counter[i] += counter[i-1]\n    # return the sum of the prefix sums\n    return prefix_sum[-1] + (prefix_sum[-2] * 2 if counter[-2] > 1 else prefix_sum[-2])\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # cumulative sum\n    cumsum = [0] * (len(arr) + 1)\n    for i in range(1, len(arr) + 1):\n        # update the cumulative sum\n        for j in range(i, len(arr) + 1):\n            cumsum[j] += arr[i - 1]\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # write your code here\n    s, d = 0, 0\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(arr) - k + 1):\n        if (len(str(arr[i])) == 2):\n            count += (arr[i] * 1000)\n    return count\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    l = [1]\n    while n!= 1:\n        if n % 2 == 0:\n            l.append(3*l[-1])\n            n //= 2\n        else:\n            l.append(5*l[-1])\n            n //= 2\n    return l\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [i for i in range(1, n+1)] # Input must be greater than 0\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i)\n            result.append(3 * i)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    collatz_seq = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i%2==0:\n            result.append(i)\n        else:\n            new_val = i/2\n            if new_val==1:\n                result.append(new_val)\n            elif new_val==3:\n                result.append(new_val*3+1)\n            elif new_val==5:\n                result.append(new_val*5+1)\n            elif new_val==7:\n                result.append(new_val*7+1)\n            else:\n                result.append(new_val*new_val+1)\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n % 2 == 0:\n        return get_odd_collatz(n // 2) + [n // 2]\n    else:\n        return get_odd_collatz(3 * n + 1) + [n]\n    \ndef is_palindrome(number):\n    \"\"\"\n    Given a number, check if it is a palindrome.\n    An integer is a palindrome if it reads the same backward as forward.\n    Note that a palindrome is a string that reads the same backward as forward.\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    collatz_sequence = []\n    odd_sequence = []\n    for num in range(1, n+1):\n        if num % 2 == 0:\n            odd_sequence.append(num)\n        else:\n            collatz_sequence.append(num)\n    return odd_sequence + collatz_sequence\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    odd_collatz = []\n    if n == 1:\n        return [1]\n    if n == 0:\n        return []\n    for i in range(2, n):\n        if i % 2 == 0:\n            odd_collatz.append(i)\n        else:\n            even_collatz = odd_collatz[:i // 2] + [i * 2] + odd_collatz[i // 2 + 1:]\n            return even_collatz\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    assert type(n) is int, \"Parameter 'n' must be an integer.\"\n    assert n > 0, \"Parameter 'n' must be positive.\"\n    assert n % 2 == 0, \"Parameter 'n' must be even.\"\n    assert n > 0 and type(n) is int, \"Parameter 'n' must be an integer.\"\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    result = []\n    # get the odd numbers in the collatz sequence\n    odd = False\n    # check if the number is even or odd\n    # iterate until the number is even or odd\n    while n!= 1:\n        if odd:\n            # if the number is odd, append to the result list\n            result.append(1)\n            # check if the number is even\n            if n % 2 == 0:\n                result.append(n // 2)\n                # if the number is even, check if the next number is odd\n                # and append the next number to the result list\n                odd = False\n            else:\n                result.append(3 * n)\n        else:\n            # if the number is odd, append to the result list\n            result.append(n)\n            # check if the next number is even\n            # and append the next number to the result list\n            odd = True\n        # remove the next number from the list\n        n = n // 2\n    # sort the result list\n    result.sort()\n    return result\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    try:\n        # The date should be in the format: mm-dd-yyyy\n        date = date.strip()\n        if len(date) < 1 or len(date) > 31:\n            return False\n        \n        # The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n        months = [1,3,5,7,8,10,12]\n        days = [1,2,3,4,5,6,7,8,9,10,11,12]\n        if len(date) <= 1:\n            return False\n        if len(date) > 31:\n            return False\n        if not(date[0].isdigit()):\n            return False\n        month = int(date[0])\n        day = int(date[1:3])\n        year = int(date[4:])\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    #check to make sure the given date is in the correct format\n    date = date.lower()\n    \n    if len(date)!= 11 or date[0:4]!='mm-dd-yyyy':\n        return False\n    \n    #check to make sure the number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12\n    #a day is a consecutive year\n    for day in date[5:]:\n        if day < '0' or day > '31':\n            return False\n    \n    #check to make sure the number of days is not less than 1 or higher than 30 days for months 4,6,9,11\n    for month in date[2:5]:\n        if month < '1' or month > '12':\n            return False\n    \n    #check to make sure the months are not less than 1 or higher than 12\n    for month in date[:2]:\n        if month < '4' or month > '12':\n            return False\n    \n    #check to make sure the date is valid\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    is_valid = True\n    date_string = date.strip()\n    days = int(date_string[-1])\n    month_number = int(date_string[-2])\n    day_number = int(date_string[-3])\n    month = MONTH_NAMES[month_number]\n    day = DAYS_NAMES[day_number]\n    if days < 1 or days > 31 or month not in ('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'):\n        is_valid = False\n    elif month not in ('1', '3', '5', '7', '8', '10', '12'):\n        is_valid = False\n    elif day not in ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'):\n        is_valid = False\n    elif month_number < 1 or month_number > 12:\n        is_valid = False\n    elif day_number < 1 or day_number > 30:\n        is_valid = False\n    else:\n        is_valid = True\n    return is_valid\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not date:\n        return False\n    if not date.isdigit():\n        return False\n    if int(date)<1 or int(date)>31:\n        return False\n    if int(date[:2])<=12:\n        return False\n    if int(date[2:])<=30:\n        return False\n    if date[:4]<=12:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if len(date)==0 or date.isdigit():\n        return False\n    elif len(date)==1 and date.isdigit():\n        day = int(date)\n        if day<1 or day>31:\n            return False\n    elif len(date)==2 and date.isdigit() and (int(date[0])<1 or int(date[0])>31 or int(date[1])<1 or int(date[1])>31):\n        month = int(date[0])\n        if month<1 or month>12:\n            return False\n    elif len(date)==3 and date.isdigit() and (int(date[0])<1 or int(date[0])>31 or int(date[1])<1 or int(date[1])>31 or int(date[2])<1 or int(date[2])>31):\n        day = int(date[0])\n        if day<1 or day>31:\n            return False\n    elif len(date)==4 and date.isdigit() and (int(date[0])<1 or int(date[0])>31 or int(date[1])<1 or int(date[1])>31 or int(date[2])<1 or int(date[2])>31 or int(date[3])<1 or int(date[3])>31):\n        day = int(date[0])\n        if day<1 or day>31:\n            return False\n    elif len(date)==5 and date.isdigit() and (int(date[0])<1 or int(date[0])>31 or int(date[1])<1 or int(date[1])>31 or int(date[2])<1 or int(date[2])>31 or int(date[3])<1 or int(date[3])>31 or int(date[4])<1 or int(date[4])>31):\n        month = int(date[0])\n        if month<1 or month>12:\n            return False\n    elif len(date)==6 and date.isdigit() and (int(date[0])<1 or int(date[0])>31 or int(date[1])<1 or int(date[1])>31 or int(date[2])<1 or int(date[2])>31 or int(date[3])<1 or int(date[3])>31 or int(date[4])<1 or int(date[4])>31 or int(date[5])<1 or int(date[5])>31):\n        day = int(date[0])\n        if day<1 or day>31:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if date.find('-')==-1:\n        return False\n    days_of_month = [31,28,31,30,31,30,31,31,30,31,30,31]\n    day_of_month = int(date[:date.find('-')])\n    month = int(date[date.find('-')+1:date.find('.')])\n    if month>12 or month<1:\n        return False\n    if day_of_month>days_of_month[month-1]:\n        return False\n    if month in [1,3,5,7,8,10,12]:\n        if day_of_month<days_of_month[month-1] or day_of_month+31>days_of_month[month-1]:\n            return False\n    if month in [4,6,9,11]:\n        if day_of_month<days_of_month[month-1] or day_of_month+30>days_of_month[month-1]:\n            return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    #check if there is a period\n    if not date:\n        return False\n    \n    #check if it is a valid date\n    if not is_valid_date(date):\n        return False\n    \n    #check if the date is not less than 1 or higher than 31 days\n    day_count = 0\n    months = [1, 3, 5, 7, 8, 10, 12]\n    #get the number of days\n    days = date[:2]\n    #check if the number of days is not less than 1 or higher than 31 for months 1,3,5,7,8,10,12\n    if days < 1 or days > 31:\n        return False\n    #check if the date is not less than 1 or higher than 30 days for months 4,6,9,11\n    if days < 1 or days > 30:\n        return False\n    #check if the date is not less than 1 or higher than 29 for the month 2\n    if days < 1 or days > 29:\n        return False\n    \n    #check if the date is in the format: mm-dd-yyyy\n    month = date[:2]\n    day = date[2:]\n    #split the date into the number of days\n    days = int(day[:2])\n    #set the year if it is not equal to the previous number\n    if int(month)!= months[int(month)-1]:\n        return False\n    #if the date is not in the format: mm-dd-yyyy\n    if not valid_date(day):\n        return False\n    \n    #check if the date is in the format: mm-dd-yyyy\n    if not valid_date(date[2:]):\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    day_count = 0\n    month_count = 0\n    year_count = 0\n    month_count_2 = 0\n    \n    for char in date:\n        if char.isdigit() or char == '-' or char == '.':\n            continue\n        else:\n            if day_count < 1 or day_count > 31:\n                return False\n            elif month_count < 1 or month_count > 12:\n                return False\n            elif month_count == 2 or month_count_2 == 1:\n                if char == '2':\n                    return False\n                else:\n                    month_count_2 += 1\n            else:\n                month_count += 1\n    \n    if day_count == 0 and month_count == 0 and month_count_2 == 0:\n        return True\n    \n    return False\n    \nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020')"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    try:\n        date_list = date.split('-')\n        date_list = [int(i) for i in date_list]\n        \n        if len(date_list) == 3:\n            if (1 <= date_list[2] <= 31) and (1 <= date_list[0] <= 12):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if date.replace('-','').isdigit() and len(date) == 10:\n        date = int(date)\n        if date >= 1 and date <= 31:\n            if date >= 1 and date <= 30:\n                if date >= 1 and date <= 29:\n                    if date >= 1 and date <= 29:\n                        if date >= 1 and date <= 30:\n                            return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    txt = txt.lower()\n    words = txt.split(',')\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    txt = txt.lower().replace('\\n','')\n    words = txt.split(' ')\n    if ',' in words:\n        words = words[words.index(',')+1:]\n    else:\n        pass\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [word.strip().lower() for word in txt.split(\",\") if word.strip()!= \"\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    txt = txt.replace('\\n','').replace('\\t','')\n    if ',' in txt:\n        txt = txt.split(',')\n        txt = [word for word in txt if word.strip().isalpha()]\n    else:\n        txt = [word.strip().lower() for word in txt.split() if word.strip().isalpha()]\n    return txt\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [word for word in txt.lower().split(',') if word]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    words = txt.split()\n    if len(words) == 0:\n        return []\n    \n    words = [word.lower() for word in words if not word == \" \"]\n    if len(words) == 0:\n        return []\n    \n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    txt = txt.lower()\n    if ',' in txt:\n        txt = txt.split(',')\n    elif '.' in txt:\n        txt = txt.split('.')\n    elif '\"' in txt:\n        txt = txt.split('\"')\n    elif ':' in txt:\n        txt = txt.split(':')\n    return txt\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    word_list = []\n    for letter in txt:\n        if letter.lower() not in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]:\n            word_list.append(letter)\n    return word_list\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    txt = str(txt)\n    if txt.isnumeric():\n        return [txt]\n    else:\n        chars = ','.join([c for c in txt if not c.isspace()])\n        chars = [c for c in chars if not c.isnumeric()]\n        chars = sorted(chars, key = lambda c: c.lower())\n        return chars\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    txt = txt.lower().replace(\" \", \"\")\n    if txt == \"\":\n        return []\n    if txt == \",\":\n        return [txt]\n    return txt.split(\",\")\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst = list(lst)\n    lst.sort()\n    return lst == lst[::-1]\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) <= 1:\n        return True\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= lst[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Check if list is sorted\n    if len(lst) > 1:\n        for i in range(0, len(lst)-1):\n            if lst[i] == lst[i+1]:\n                continue\n            return False\n    # Check if list has duplicates\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: complete this function\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: Write your code here\n    for i in range(len(lst) - 1):\n        if lst[i]!= lst[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst.sort()\n    if not lst: return True\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]: return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # init lists\n    lst_1 = []\n    lst_2 = []\n    n = len(lst)\n    # insert values into lists\n    for i in range(n):\n        lst_1.append(lst[i])\n    for i in range(n-1):\n        for j in range(i,n):\n            if lst[j] > lst[i]:\n                lst_1[i],lst_1[j]=lst_1[j],lst_1[i]\n    return lst_1==lst_2\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst = sorted(lst)\n    return all(lst[i+1] - lst[i] == lst[i+1] - lst[i] for i in range(len(lst) - 1))\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst) < 2:\n        return False\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst = sorted(lst)\n    return sorted(set(lst)) == lst\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for t1, t2 in interval1:\n        if t1 > t2:\n            return \"NO\"\n    for t1, t2 in interval2:\n        if t1 < t2:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"NO\"\n    \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # BEGIN\n    if interval1[0] > interval2[1]:\n        return \"NO\"\n    # END\n    if interval1[1] < interval2[0]:\n        return \"NO\"\n    # BEGIN\n    if interval1[0] < interval2[1]:\n        return \"YES\"\n    # END\n    return \"NO\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not interval1 and not interval2:\n        return \"NO\"\n    elif not interval1 and interval2:\n        return \"NO\"\n    elif not interval2 and interval1:\n        return \"NO\"\n    elif interval1 and interval2:\n        if interval1[0] <= interval2[1]:\n            return \"YES\"\n        elif interval1[1] >= interval2[0]:\n            return \"YES\"\n    elif interval1 and interval2:\n        if interval1[0] <= interval2[1]:\n            return \"YES\"\n        elif interval1[1] <= interval2[0]:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def is_prime(n):\n        if n == 1: return False\n        if n == 2 or n % 2 == 0: return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0: return False\n        return True\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #raise NotImplementedError\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: complete this method\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    x = interval1[0]\n    y = interval1[1]\n    \n    if x >= y:\n        return \"NO\"\n    \n    if interval1[0] < interval2[0] and interval1[0] <= interval2[1]:\n        return \"YES\"\n    \n    if interval1[1] > interval2[1] and interval1[1] <= interval2[0]:\n        return \"YES\"\n    \n    return \"NO\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def isprime(n):\n        return all(n%i!= 0 for i in range(2, n))\n    def is_prime(n):\n        return n<2 or n%2==0 or n==2\n    if (interval1[0] <= interval2[1]) and (interval1[1] >= interval2[0]):\n        return \"YES\"\n    elif interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    signs = [-1 if i % 2 else 0 for i in arr]\n    return sum(signs"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l = []\n    # no return\n    return None\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not arr:\n        return None\n    p = prod(arr)\n    return p\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum = 0\n    for i in arr:\n        sum += i * (1 if i < 0 else -1)\n    return sum"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    arr = sorted(arr, key= lambda x : -x)\n    mags = [0]*len(arr)\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            mags[i] = 1\n        else:\n            mags[i] = -arr[i]\n    return sum(mags)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(arr) <= 1:\n        return None\n    signs = [0, 1, -1]\n    arr = [abs(i) for i in arr]\n    return prod_signs(arr) * (signs[arr.index(max(arr))] if max(arr)!= 0 else 0)"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    magnitudes = {}\n    for num in arr:\n        if num not in magnitudes:\n            magnitudes[num] = 1\n        else:\n            magnitudes[num] *= -1\n    return sum(magnitudes.values())"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # a*b*b*a*a + b*b*a*a*a + b*a*a*a*a*a = 0\n    # (1,1,1,0) = (1,1,1,1) = 1\n    # (0,0,0,1) = (0,0,0,0) = 1\n    # (0,0,0,0) = (0,0,0,1) = -1\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    signs = []\n    for val in arr:\n        if val>0:\n            signs.append(1)\n        elif val<0:\n            signs.append(-1)\n        else:\n            signs.append(0)\n    return functools.reduce(lambda x,y:x*y,signs)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(map(lambda x: x*(-1 if x else 0), arr))\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not grid or not grid[0]:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    N = len(grid)\n    lst_A = [1] * N\n    lst_B = [1] * N\n    lst_A[0] = grid[0][0]\n    lst_B[0] = grid[0][N - 1]\n    k -= 1\n    for i in range(1, N):\n        lst_A[i] = grid[i][0] + min(lst_A[i - 1], lst_B[i - 1])\n        lst_B[i] = grid[i][N - 1] + min(lst_A[i - 1], lst_B[i - 1])\n    return lst_A"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    path = [0 for _ in range(k)]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not grid or not grid[0]: return []\n    N = len(grid)\n    if N < 2: return [grid[0][0]]\n    \n    # 1. For every cell, compare the cell to the cell at the right end and\n    # cell at the left end, then let the cell with the smallest value be the next cell\n    # (cell in the sorted list of cells on the right, cells in the sorted list of cells on the left)\n    next_lst = [grid[0][N - 1]]\n    for i in range(1, N):\n        if grid[i][N - 1] > next_lst[-1]:\n            next_lst.append(grid[i][N - 1])\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    if rows < 2: return grid\n    if cols < 2: return grid\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Time: O(N*N)\n    # Space: O(N)\n    def minPathUtil(grid, lst_A, lst_B, i, j):\n        if i == len(lst_A):\n            return []\n        if j == len(lst_B):\n            return lst_B\n        if lst_A[i][j] > lst_B[j]:\n            return minPathUtil(grid, lst_A, lst_B, i+1, j)\n        return minPathUtil(grid, lst_A, lst_B, i, j+1)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(grid) == 0 or len(grid[0]) == 0:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    N = len(grid)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    N = len(grid)\n    if N == 0:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # idea: try to avoid the subset table, to solve using table\n    # (but not the sum table, not better solution)\n    # this is really trivial, but it works for now\n    \n    # sort the array of integers, and then reverse the result\n    # so that you start at the top of the array\n    # and find the lowest value, so that the index of this value\n    # is the minimum index (at which position of the index in the\n    # array is the minimum value).\n    # for each value, you have to travel to the next highest value\n    # by the minPath routine.\n    def minSubArray(start, end, arr):\n        if start == end:\n            return arr[start]\n        elif arr[start] < arr[end]:\n            return arr[start]\n        else:\n            return arr[end]\n    \n    # start with the smallest value of the array\n    # until we reach the end, then move to the next lowest value\n    # from that position\n    # we move this one position to the left, that is to the left\n    # of the array, so we update the array to the left of the\n    # lowest value.\n    # we move this one position to the right, that is to the right\n    # of the array, so we update the array to the right of the\n    # lowest value.\n    def minSubArrayToRightLeft(start, end, arr):\n        if start == end:\n            return arr[start]\n        elif arr[start] < arr[end]:\n            return arr[start]\n        else:\n            return arr[end]\n    \n    # we have two lists A and B, and we go down each cell\n    # and keep track of the min_indices in the left to right list\n    # A has a minimum index of 2 (because there are two values\n    # (1,2) and (1,3) for each of the three cells) and B has a\n    # minimum index of 3 (because there are three values\n    # (4,5) and (4,6) for each of the three cells)\n    # the first value at index 2 will be the minimum for the left side\n    # of the current cell (i.e. value 2)\n    # the first value at index 3 will be the minimum for the right side\n    # of the current cell (i.e. value 3)\n    # we return the minimum of these two lists,\n    # i.e. the first cell's value,\n    # and the last cell's value.\n    def minSubArray(grid, k):\n        row = len(grid)\n        col = len(grid[0])\n        res = [grid[0][0]]\n        for i in range(1, row):\n            res.append(grid[i][col - 1])\n        for j in range(1, col):\n            res.append(grid[row - 1][j])\n        return res\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [tri(i) + tri(i - 1) + tri(i - 2) for i in range(1, n + 1)]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def trib(n):\n        a, b, c = 1, 1, 1\n        if n < 0:\n            return [0]\n        elif n == 0:\n            return [a]\n        elif n == 1:\n            return [a, b]\n        elif n == 2:\n            return [a, b, c]\n        else:\n            for i in range(3, n):\n                a, b, c = b, c, a + b + c\n            return [a, b, c]\n    if n == 0:\n        return []\n    else:\n        return trib(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 2]\n    elif n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 1)]\n    else:\n        return [tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 2)]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 2, 3]\n    elif n == 3:\n        return [1, 3, 5]\n    else:\n        return [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    elif n % 2 == 0:\n        return [tri(n//2) + tri(n-1)]\n    else:\n        return [tri(n-1)] + [tri(n//2)] + [tri(n//2) + tri(n-1)]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Python3 code to find the tribonacci sequence\n    # using recurrence relation\n    if n <= 0:\n        return []\n    # initializing previous value as 0\n    previous = 0\n    # initializing current value as 1\n    current = 1\n    # initializing n as 1\n    n = 1\n    # loop to calculate all values\n    for i in range(2, n+1):\n        # incrementing the current value\n        current = previous + current\n        # incrementing previous value\n        previous = current\n        # incrementing n\n        n += 1\n    return [current] + [current + n / 2] * (n-2)\n    \n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [3, 2]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    else:\n        return [1, 3, 2, 8] + [tri(n-1) + tri(n-2)] + [tri(n-2) + tri(n-1)]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0 or n == 1:\n        return [1, n]\n    return [tri(n-1)+tri(n-2), tri(n-1)] + [tri(n-1)+tri(n-2)]*n\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    \n    tri_list = []\n    for i in range(n, 0, -1):\n        tri_list.append(tri(i) + tri(i - 1) + tri(i - 2))\n    return tri_list\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # write your code here\n    n = int(n)\n    a = [1, 0, 0, 0]\n    b = [0, 1, 1, 0]\n    c = [0, 1, 0, 1]\n    d = [1, 0, 1, 1]\n    return a + b + c + d + a[:n]\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = str(n)\n    num_digits = 0\n    for i in range(len(s)):\n        if i % 2 == 1:\n            num_digits += int(s[i])\n    return num_digits if num_digits % 2 == 1 else 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO\n    return 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Calculate all the odd digits\n    odd_digits = 0\n    while n:\n        if n & 1:\n            odd_digits += 1\n        n //= 10\n    # Return product\n    return odd_digits * digits(n)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # return n * (n-1) * (n-2)\n    sum = 0\n    while n > 0:\n        dig = n % 10\n        sum += dig\n        n = n // 10\n    if sum % 2 == 1:\n        return 0\n    else:\n        return sum\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (n*(n+1)) // 2\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return n*(n+1)//2 if n%2==1 else 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0: return 0\n    elif n < 0: return 0\n    elif n % 2 == 0: return n\n    else: return n*digits(n-1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #return 0 if all digits are even\n    #else:\n    #    return n * digits(n - 1)\n    odd = 0\n    if n < 1:\n        return 0\n    while n % 2 == 0:\n        odd += 1\n        n = n / 2\n    return odd * digits(n - 1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    while n>0:\n        n=n//10\n        yield n\n    if n>0:\n        yield 0\ndef main():\n    n = input(\"Enter a positive integer: \")\n    print digits(n)\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if n == 0:\n        return 0\n    \n    return n * digits(n-1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def is_valid(string):\n        def recurse(string, start, end):\n            if start > end:\n                return True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if string == '': return True\n    arr = []\n    brackets = []\n    level = 0\n    for i in string:\n        if i == ']':\n            brackets.append(arr[level])\n            arr.pop(level)\n            level -= 1\n            if level == -1:\n                return False\n        elif i == '[':\n            arr.append(brackets.pop())\n            brackets.append(arr[level])\n            arr.pop(level)\n            level -= 1\n    return brackets == []\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if string == '':\n        return True\n    if string[0] == '[' or string[len(string)-1] == ']':\n        return is_nested(string[1:len(string)-1])\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    stack = []\n    \n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append('[')\n        elif string[i] == ']':\n            if len(stack)!= 0:\n                if stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n        elif string[i] == ']':\n            if len(stack)!= 0:\n                if stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    \n    return True if len(stack) == 0 else Fals"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    string = string.replace('[]', '[][')\n    string = string.replace('[]', '[]][')\n    string = string.replace('[]', '[]]]][')\n    string = string.replace(']', '[][')\n    string = string.replace('[', '[][')\n    return string.count('[[') >= 1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    x = 0\n    i = 0\n    # traversing the string using recursive function\n    while i < len(string):\n        if string[i] == '[':\n            x+=1\n        elif string[i] == ']':\n            if x >= 1:\n                # check if there is any bracket in the string,\n                # this is a valid subsequence of brackets\n                if string[i+1] == '[':\n                    # if we see a bracket in the string, then this is a valid\n                    # subsequence\n                    return True\n                else:\n                    # we have not yet reached the next character\n                    # and therefore not a valid subsequence\n                    # return False\n                    return False\n            else:\n                # if we have not reached the next character, then\n                # there is a problem\n                return False\n        i+=1\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    string = string.replace('[','').replace(']','').replace(']','').replace('[','').replace(']','').replace('[','').replace(']','')\n    return len(string) % 2 == 1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not string:\n        return True\n    if len(string) <= 1 or not string.isnumeric():\n        return False\n    return is_nested(string[1:-1])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # if there are at least two brackets, there is a valid subsequence\n    if len(string) <= 2:\n        return True\n    # if there are one or more brackets inside the brackets, there is no valid subsequence\n    if string[0] == '[' or string[-1] == ']' or string[0] == '{' or string[-1] == '}':\n        return False\n    \n    # if there is a square bracket inside the brackets, there is not a valid subsequence\n    for idx in range(len(string) - 1):\n        # if bracket is of the form [][]\n        if string[idx] == '[' and string[idx + 1] == ']':\n            return False\n        # if bracket is of the form {[}\n        elif string[idx] == '{' and string[idx + 1] == '}':\n            return False\n        # if bracket is of the form [[[]\n        elif string[idx] == '[' and string[idx + 1] == ']':\n            return False\n        # if bracket is of the form {[]}\n        elif string[idx] == '{' and string[idx + 1] == '}':\n            return False\n    return True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    checker = []\n    result = []\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    from math import ceil\n    return sum([i**2 for i in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst_sum = 0\n    for i in lst:\n        lst_sum += i*i\n    return lst_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    new_lst = []\n    for el in lst:\n        new_lst.append(round(el**2))\n    return sum(new_lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    squared_list = []\n    sum = 0\n    for i in lst:\n        sum += i*i\n        squared_list.append(sum)\n    return sum_squares(squared_list)"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum(map(lambda x: x**2, lst))\ndef test():\n    assert sum_squares([1,2,3]) == 14\n    assert sum_squares([1,4,9]) == 98\n    assert sum_squares([1,3,5,7]) == 84\n    assert sum_squares([1.4,4.2,0]) == 29\n    assert sum_squares([-2.4,1,1]) == 6\n    assert sum_squares([-1,0]) == -1\n    assert sum_squares([-1,1,0]) == 0\n    assert sum_squares([0,1,0,1]) == 0\n    assert sum_squares([1]) == 1\n    assert sum_squares([1.4,4.2,0]) == 29.0\n    assert sum_squares([-2.4,1,1]) == 6.0\n    assert sum_squares([-1,0,1,2]) == -3.0\n    assert sum_squares([-1,0,1,2]) == 0.0\n    assert sum_squares([0,1,0,1]) == 0.0\n    assert sum_squares([1,0]) == 0\n    assert sum_squares([1,1,0]) == 1\n    assert sum_squares([1,0,1]) == 1.0\n    assert sum_squares([0,0]) == 0\n    assert sum_squares([0]) == 0\n    assert sum_squares([0.5,0.2,1.4,1.5]) == 0.75\n    assert sum_squares([]) == 0\n    assert sum_squares([1,1]) == 0\n    assert sum_squares([1,1,0,1]) == 1\n    assert sum_squares([1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,0,1]) == 4.0\n    assert sum_squares([1,1,1,1,1,0]) == 9.0\n    assert sum_squares([1.5,0,1,1.5]) == 4.5\n    assert sum_squares([1,1,1,1,1,0,0,1,0,1]) == 5.0\n    assert sum_squares([]) == 0\n    assert sum_squares([1,1,1,1,1,0,0]) == 0\n    assert sum_squares([1,1,1,1,1,1,0,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1,1,1]) == 1.0\n    assert sum_squares([1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def find_max(lst):\n        largest = 0\n        for num in lst:\n            if largest < num:\n                largest = num\n        return largest\n    return sum(map(lambda num: (num ** 2), lst))\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    for i in lst:\n        sum += i * i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = 0\n    for i in lst:\n        s += i**2\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    output = []\n    for x in lst:\n        output.append(x**2)\n    return sum(output)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum_squares = 0\n    for num in lst:\n        sum_squares = sum_squares + (num * num)\n    return sum_squares\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    last_char_is_a_letter = txt[-1] in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return last_char_is_a_letter and not any(txt[-2].isalpha())\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Do not delete this line\n    alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Your code here\n    # Hint: When checking a string for a character, the function should check the first character of the string and return True if it contains the character\n    # and False otherwise.\n    word = txt[-1]\n    return word.isalpha() and word.lower().isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Your code here\n    return False if txt[-1] in ['a', 'i', 'o', 'u', 'x'] else True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: Create a function that returns True if the last character\n    # of a given string is an alphabetical character and is not\n    # a part of a word, and False otherwise.\n    #\n    # ===Modify your create_check_if_last_char_is_a_letter function here!===\n    #\n    # return False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return txt[-1].isalpha() and len(txt) == 1\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    words = txt.split(\" \")\n    if len(words) == 0:\n        return False\n    if words[-1].isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # check if the last character of a string is a letter\n    if txt[-1].isalpha():\n        return False\n    # check if the last character of a string is a number\n    elif txt[-1].isdigit():\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return True if txt.strip().isalpha() else False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    first_char = txt[0]\n    if first_char.isalpha() and len(txt) > 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Your code here\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Start from the middle of the array.\n    # Loop until the index of the first element is the same as the index of the\n    # next element.\n    # Go through the array and if the index of the current element is greater\n    # than the index of the next element, then find the next element which\n    # is not greater than the current element.\n    # Return the next element index.\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def can_arrange_helper(arr, index):\n        if index == len(arr):\n            return index\n        if arr[index] > arr[index-1]:\n            return can_arrange_helper(arr, index+1)\n        else:\n            return -1\n    return can_arrange_helper(arr, 0)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i + 1] > arr[i] and arr[i] > arr[i + 1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    arr = sorted(arr)\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            return -1\n    return len(arr)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Find the second index of the element. This is the index of the largest\n    # value from the original array.\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return -1 if max == 0 else 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Find the maximum value of the index.\n    max_val = arr[0]\n    for i in range(1,len(arr)):\n        # If the current value is greater than the previous, we have found a duplicate\n        if arr[i] > max_val:\n            return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not arr:\n        return -1\n    return find_max_index(arr,0,len(arr)-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if arr == []: return -1\n    return len(set(arr[:-1]))\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return find_max_index(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Think about why the O(n) algorithm is better.\n    '''\n    if len(lst) == 0:\n        return None, None\n    elif len(lst) == 1:\n        return lst[0], lst[0]\n    else:\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i] > lst[j] and lst[i] > 0:\n                    return lst[i], lst[j]\n    '''\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def get_largest(lst):\n        if lst[0] < lst[-1]:\n            return lst[0]\n        else:\n            return lst[-1]\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return None\n    \n    return max(lst), min(lst)"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #HINT: You can use the max() and min() functions in your sorted()\n    #and list() functions.\n    \n    #HINT: You should create two tuples: (a, b) and (a, b).\n    \n    #HINT: You can use sorted() and a to determine the larger one.\n    \n    return (max(lst), min(lst))\n    \ndef sort_array_in_ascending_order(lst):\n    '''\n    Sort the list in ascending order, then return it.\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Create a variable for the largest and smallest negatives\n    largest_negative = None\n    smallest_positive = None\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (max(lst), min(lst))\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if lst == None or len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return (lst[0], None)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    min = None\n    max = None\n    for i in lst:\n        if i < 0:\n            if min == None:\n                min = i\n            else:\n                if i > max:\n                    max = i\n    if max == None:\n        return None\n    if min > max:\n        return None\n    else:\n        return (min, max)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a = -2\n    b = 2\n    if lst == None or len(lst) == 0:\n        return None\n    for x in lst:\n        if x < 0:\n            a = a + 1\n        elif x > 0:\n            b = b + 1\n    if a > b:\n        return (a, b)\n    return None\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # min and max of negative numbers\n    min_n = None\n    max_n = None\n    # for each number in the list, if its non-negative, then increase the min\n    # if it is greater than the max, then decrease the max\n    for number in lst:\n        if number > 0:\n            if min_n == None:\n                min_n = number\n            elif min_n > number:\n                min_n = number\n        # if its negative, then decrease the max\n        elif number < 0:\n            if max_n == None:\n                max_n = number\n            elif max_n < number:\n                max_n = number\n    return (min_n, max_n)"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Example 1\n    # Input: a = 1, b = 2.5\n    # Output: 2.5\n    # Example 2\n    # Input: a = \"1,2\", b = 2.5\n    # Output: 2.5\n    # Example 3\n    # Input: a = 5, b = 2.5\n    # Output: \"5,2\"\n    # Example 4\n    # Input: a = 1, b = 2\n    # Output: 1\n    # Note: the function is case insensitive\n    if type(a) == str:\n        if a.lower() == b:\n            return a\n        else:\n            return None\n    elif type(a) == int or type(a) == float:\n        return max(a, b)\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b\n    elif isinstance(a, (int, float, str)) and isinstance(b, (int, float, str)):\n        return a if a > b else b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    if isinstance(a, int):\n        if isinstance(b, int):\n            if a > b:\n                return a\n            else:\n                return b\n        elif isinstance(b, float):\n            if a > b:\n                return a\n            else:\n                return b\n        elif isinstance(b, str):\n            if a > b:\n                return a\n            else:\n                return b\n    elif isinstance(a, float):\n        if isinstance(b, float):\n            if a > b:\n                return a\n            else:\n                return b\n        elif isinstance(b, str):\n            if a > b:\n                return a\n            else:\n                return b\n    elif isinstance(a, str):\n        if isinstance(b, str):\n            if a > b:\n                return a\n            else:\n                return b\n    elif isinstance(a, float) and isinstance(b, str):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, float) and isinstance(b, int):\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return None\n    \ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if type(a) is str:\n        if type(b) is str:\n            return a\n        return b\n    if type(a) is float or type(a) is complex:\n        return b\n    if type(a) is int or type(a) is long:\n        return b\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if type(a) is str and type(b) is str:\n        if a == b:\n            return None\n        else:\n            return a\n    elif type(a) is str and type(b) is float:\n        if a == b:\n            return None\n        else:\n            return a\n    elif type(a) is float and type(b) is str:\n        if a == b:\n            return None\n        else:\n            return a\n    elif type(a) is float and type(b) is float:\n        if a == b:\n            return None\n        else:\n            return a\n    elif type(a) is int and type(b) is float:\n        if a == b:\n            return None\n        else:\n            return a\n    elif type(a) is int and type(b) is int:\n        if a == b:\n            return None\n        else:\n            return a\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return max(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if type(a) == type(b):\n        if type(a) == int or type(a) == float:\n            if a > b:\n                return a\n            return b\n        elif type(a) == str or type(a) == bytes:\n            if a > b:\n                return a\n            return b\n        else:\n            return None\n    elif type(a) == list or type(a) == tuple:\n        if len(a) > len(b):\n            return a\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def compare_one_float(a, b):\n        \"\"\"\n        Create a function that takes two floats, and returns the larger variable\n        in its given variable type. Return None if the values are equal.\n        Note: If a real number is represented as a string, the floating point might be. or,\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if type(a) == str or type(b) == str:\n        return a if type(a) == str else b\n    elif type(a) == float or type(b) == float:\n        return max(a, b)\n    elif type(a) == int or type(b) == int:\n        return max(a, b)\n    else:\n        raise TypeError(\"Only numeric types are allowed\")\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n < 0:\n        return False\n    if n % 2 == 0 and n > 0:\n        return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 4 or n > 27:\n        return False\n    elif n == 4:\n        return True\n    else:\n        for i in range(1, 5):\n            if i % 2 == 0:\n                if n == 4 + i:\n                    return True\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n <= 4:\n        return True\n    else:\n        if n % 2 == 0:\n            return is_equal_to_sum_even(n - 1)\n        else:\n            return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n in (0, 1):\n        return False\n    if n == 0:\n        return False\n    if n == 2:\n        return True\n    if n == 4:\n        return False\n    if n == 6:\n        return True\n    if n == 8:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 2 == 1:\n        return True\n    return is_equal_to_sum_even(n-2) or is_equal_to_sum_even(n-4)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_even += i\n    return sum_even == n\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n <= 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return n >= 4 and n % 2 == 0 and n % 3 == 0 and n % 5 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n < 1:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return n%2 == 0 and is_sum_even(n//4)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum = 0\n    for i in range(n + 1):\n        sum += i\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n <= 0:\n        return 1\n    return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n - 4)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert n > 0\n    if n == 1:\n        return n\n    else:\n        return special_factorial(n-1) * special_factorial(n-2) * special_factorial(n-3) * special_factorial(n-4)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return factorial(n)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return 1\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n <= 0:\n        return 1\n    return n*special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * special_factorial(n-1)\n        \ndef get_number_of_positions_from_array(array, n):\n    \"\"\"Returns the number of positions from an array of numbers.\"\"\"\n    return sum(array[i]<=n for i in range(len(array)))\n    \ndef get_number_of_positions_from_array_sp(array, n):\n    \"\"\"Returns the number of positions from an array of numbers.\n    \n    This function returns an array of the positions at which n=0, 1 or 2.\n    \"\"\"\n    result = []\n    for i in range(len(array)):\n        if array[i]<=n:\n            result.append(i)\n    return result\n    \ndef get_number_of_positions_from_array_t(array, n):\n    \"\"\"Returns the number of positions from an array of numbers.\n    \n    This function returns an array of the positions at which n=0, 1 or 2.\n    \n    \"\"\"\n    result = []\n    for i in range(len(array)):\n        if array[i]==0 or array[i]==2:\n            result.append(i)\n    return result\n    \ndef get_number_of_positions_from_array_f(array, n):\n    \"\"\"Returns the number of positions from an array of numbers.\n    \n    This function returns an array of the positions at which n=0, 1 or 2.\n    \"\"\"\n    result = []\n    for i in range(len(array)):\n        if array[i]==1:\n            result.append(i)\n    return result\n    \ndef get_number_of_positions_from_array_df(array, n):\n    \"\"\"Returns the number of positions from an array of numbers.\n    \n    This function returns an array of the positions at which n=0, 1 or 2.\n    \n    \"\"\"\n    result = []\n    for i in range(len(array)):\n        if array[i]==2:\n            result.append(i)\n    return result\n    \ndef get_number_of_positions_from_array_l(array, n):\n    \"\"\"Returns the number of positions from an array of numbers.\n    \n    This function returns an array of the positions at which n=0, 1 or 2.\n    \n    \"\"\"\n    result = []\n    for i in range(len(array)):\n        if array[i]==1:\n            result.append(i)\n    return result\n    \ndef get_number_of_positions_from_array_s(array, n):\n    \"\"\"Returns the number of positions from an array of numbers.\n    \n    This function returns an array of the positions at which n=0, 1 or 2.\n    \n    \"\"\"\n    result = []\n    for i in range(len(array)):\n        if array[i]==2:\n            result.append(i)\n    return result\n    \ndef get_number_of_positions_from_array_d(array, n):\n    \"\"\"Returns the number of positions from an array of numbers.\n    \n    This function returns an array of the positions at which n=0, 1 or 2.\n    \n    \"\"\"\n    result = []\n    for i in range(len(array)):\n        if array[i]==0:\n            result.append(i)\n    return result\n    \ndef get_number_of_positions_from_array_k(array, n):\n    \"\"\"Returns the number of positions from an array of numbers.\n    \n    This function returns an array of the positions at which n=0, 1 or 2.\n    \n    \"\"\"\n    result = []\n    for i in range(len(array)):\n        if array[i]==1:\n            result.append(i)\n    return result\n    \ndef get_number_of_positions_from_array_h(array, n):\n    \"\"\"Returns the number of positions from an array of numbers.\n    \n    This function returns an array of the positions at which n=0, 1 or 2.\n    \n    \"\"\"\n    result = []\n    for i in range(len(array)):\n        if arra"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    factorial_of_n = 1\n    for i in range(1, n + 1):\n        factorial_of_n *= i\n    return factorial_of_n\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    text_len = len(text)\n    space_count = 0\n    for i in range(text_len):\n        if space_count > 0:\n            if i == 0:\n                text = text[0:i+1] + '-' + text[i+1:]\n            else:\n                text = text[0:i+1] + text[i+1:]\n        else:\n            space_count += 1\n    return text\n    \n    \ndef is_list(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                return False\n        return True\n    return False\n    \n    \ndef is_empty(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                if len(x) == 0:\n                    return True\n        return False\n    return False\n    \n    \ndef get_nth_number(arg, n):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        if n == 0:\n            return len(arg)\n        if len(arg) > n:\n            return get_nth_number(arg[n:], n)\n        if len(arg) == n:\n            return arg[n]\n    return arg\n    \n    \ndef is_iterable(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                if len(x) > 0:\n                    return True\n        return False\n    return False\n    \n    \ndef is_set(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is set:\n                return True\n        return False\n    return False\n    \n    \ndef is_sequence(arg):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        for x in arg:\n            if type(x) is list:\n                if len(x) > 0:\n                    return True\n        return False\n    return False\n    \n    \ndef get_first_value(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg[0]\n    return arg\n    \n    \ndef get_last_value(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg[-1]\n    return arg\n    \n    \ndef get_first_index(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg.index(l)\n    return arg\n    \n    \ndef get_last_index(arg, l):\n    \"\"\"\n    A list is a sequence of numbers or strings that are themselves\n    a sequence of numbers. In addition, lists can have zero or\n    more elements.\n    \"\"\"\n    if type(arg) is list:\n        return arg.inde"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"-\", \"_\")\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"\\t\", \"_\")\n    text = text.replace(\"\\n\", \"_\")\n    return text"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(text) == 2:\n        return text\n    elif len(text) == 3:\n        return \"_\"+text\n    else:\n        space_count = 0\n        for i in range(len(text)):\n            if text[i] == \" \":\n                space_count += 1\n                if space_count > 2:\n                    return text\n        return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    split_text = text.split()\n    split_text_clean = []\n    for word in split_text:\n        if len(word)>2:\n            split_text_clean.append(word[0] + word[1])\n        else:\n            split_text_clean.append(word[0])\n    text = \" \".join(split_text_clean)\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Replace all spaces with -\n    res = \"\"\n    for i in range(len(text)):\n        if text[i].isspace():\n            res += \"- \"\n        else:\n            res += text[i]\n    return res\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    new = \"\"\n    for c in text:\n        if c == \" \":\n            new += \"_\"\n        else:\n            new += c\n    return new\n    \ndef delete_spaces(text):\n    \"\"\"\n    Given a string text, remove all spaces in it\n    \"\"\"\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    return text.replace(' ', '_')\n    \ndef get_longest_words(text):\n    \"\"\"\n    Given a string text, return a list of all words that appear \n    longer than 2 characters. Words should be separated by a single \n    space. Words should be returned in their original form, \n    with each word separated by a single space.\n    \n    get_longest_words(\"Example\") == [\"Example\"]\n    get_longest_words(\"Example 1\") == [\"Example 1\"]\n    get_longest_words(\" Example 2\") == [\"Example 2\"]\n    get_longest_words(\"Example   3\") == [\"Example 3\"]\n    \"\"\"\n    \n    return [word for word in text.split(' ') if len(word) > 2]\n    \ndef get_words(text):\n    \"\"\"\n    Given a string text, return a list of all words that appear \n    longer than 2 characters. Words should be separated by a single \n    space. Words should be returned in their original form, \n    with each word separated by a single space.\n    \n    get_words(\"Example\") == [\"Example\"]\n    get_words(\"Example 1\") == [\"Example 1\"]\n    get_words(\" Example 2\") == [\"Example 2\"]\n    get_words(\" Example   3\") == [\"Example 3\"]\n    \"\"\"\n    \n    return [word for word in text.split(' ') if len(word) > 2]\n    \ndef get_frequent_words(text):\n    \"\"\"\n    Given a string text, return a list of all words that appear \n    more than once. Words should be separated by a single space.\n    Words should be returned in their original form, \n    with each word separated by a single space.\n    \n    get_frequent_words(\"Example\") == [\"Example\"]\n    get_frequent_words(\"Example 1\") == [\"Example 1\"]\n    get_frequent_words(\" Example 2\") == [\"Example 2\"]\n    get_frequent_words(\"Example   3\") == [\"Example 3\"]\n    \"\"\"\n    \n    return [word for word in text.split(' ') if word in text.lower()]\n    \ndef count_matrix(m):\n    \"\"\"\n    Given a n x n matrix, return the number of unique elements\n    in the matrix.\n    \n    count_matrix([[\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"],[\"a\",\"a\",\"c\",\"c\",\"b\",\"c\"],[\"a\",\"b\",\"b\",\"b\",\"a\",\"b\"],[\"a\",\"c\",\"c\",\"b\",\"a\",\"c\"],[\"a\",\"c\",\"c\",\"b\",\"c\",\"b\"]]) == 3\n    count_matrix([[\"a\",\"a\",\"b\",\"b\",\"b\",\"b\"],[\"a\",\"a\",\"b\",\"b\",\"b\",\"b\"],[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\"]]) == 1\n    \"\"\"\n    \n    return len(set(m))\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    spaces = 0\n    \n    for char in text:\n        if spaces > 2:\n            if spaces - 1 > 1:\n                spaces -= 1\n                count += 1\n            else:\n                spaces -= 1\n                count += 1\n        else:\n            count += 1\n            spaces = 0\n    \n    return \" \".join(text.split())"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(text) < 2:\n        return text\n    \n    fixed_text = ''\n    start_index = 1\n    end_index = 2\n    while start_index < len(text):\n        if text[start_index] =='':\n            fixed_text += text[start_index]\n            start_index += 1\n        elif text[start_index] == '_':\n            if end_index > len(text):\n                fixed_text += '_'\n                end_index = 2\n            else:\n                fixed_text += text[start_index:end_index]\n                start_index = end_index\n        elif text[start_index] == '_':\n            end_index = 2\n        else:\n            fixed_text += text[start_index]\n            start_index += 1\n    \n    return fixed_text\n    \ndef insert_newlines(text):\n    \"\"\"\n    Given a text string, insert newlines at the beginning \n    and end of the text.\n    \n    insert_newlines(\"Example\") == \"Example\"\n    insert_newlines(\"Example_1\") == \"Example_1\"\n    insert_newlines(\" Example2\") == \"Example2\"\n    \"\"\"\n    \n    if len(text) <= 1:\n        return text\n    \n    newlines = '\\n'\n    if text[-1] == newlines:\n        return text[:-1] + text + newlines\n    else:\n        return text[:-1] + text + newlines + text[-1]\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    file_name = file_name.strip()\n    if len(file_name) < 3:\n        return 'No'\n    if not file_name.replace('.','').isalpha():\n        return 'No'\n    if file_name.startswith('.'):\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name.count('.') > 0:\n        return 'No'\n    if file_name.endswith('.'):\n        return 'No'\n    \n    if file_name.startswith('txt'):\n        return 'Yes'\n    if file_name.startswith('exe'):\n        return 'Yes'\n    if file_name.startswith('dll'):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    file_name = str(file_name)\n    \n    # 1. check if the file has more than 3 digits, and contain letters\n    if len(file_name) < 3:\n        return 'No'\n        \n    # 2. check if the file name has no dots, and do not contain a dot '.'\n    if file_name[0] == '.':\n        return 'No'\n    \n    # 3. check if the file name contains letters of alphabet \n    for char in file_name:\n        if char not in 'aAeEiIoOeEzZ':\n            return 'No'\n        \n    # 4. check if the file name has the following three letters: ['txt', 'exe', 'dll']\n    if file_name[0] in ['a', 'e', 'i', 'o', 'u']:\n        return 'No'\n    \n    # 5. check if the file name starts with a letter from the latin alphabet\n    if file_name[0] in ['a', 'e', 'i', 'o', 'u']:\n        if file_name[1:][0] in ['x', 'X', 'y', 'Y', 'z', 'Z']:\n            return 'No'\n        else:\n            return 'Yes'\n    \n    # 6. check if the file name ends with a letter\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    str_check = []\n    letter_check = ['a', 'A', 'z', 'Z']\n    num_check = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    \n    if file_name == \"\":\n        return \"No\"\n    \n    file_name = file_name.upper()\n    if len(file_name) == 3 and file_name.startswith('0'):\n        return 'No'\n    \n    elif len(file_name) > 4 and file_name[0] == '.':\n        return 'No'\n    \n    elif file_name[0] == '.' and file_name[1] == '.':\n        return 'No'\n    \n    elif file_name[0] == '.' and not file_name[1].isalpha() and file_name[1]!= '.':\n        return 'No'\n    \n    elif not file_name[0].isalpha() and file_name[1]!= '.':\n        return 'No'\n    \n    elif not file_name[1].isalpha() and file_name[2].isalpha() and file_name[2]!= '.':\n        return 'No'\n    \n    else:\n        return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # File name must start with a letter from a latin alphapet\n    if not file_name.isalpha():\n        return 'Invalid File Name'\n    # Name must consist of exactly three digits ('0'-'9')\n    if len(file_name) < 3:\n        return 'Invalid File Name'\n    # Only contains a dot '.'\n    if file_name.startswith('.'):\n        return 'Invalid File Name'\n    # Only contains one dot '.'\n    if file_name.endswith('.'):\n        return 'Invalid File Name'\n    # Name must start with a letter from the latin alphapet\n    if file_name[0] not in 'aA':\n        return 'Invalid File Name'\n    # Name must not contain the letter '.'\n    if file_name[-1] in '.':\n        return 'Invalid File Name'\n    # Name must be at least one letter from a latin alphapet\n    if not file_name[0].isupper():\n        return 'Invalid File Name'\n    # Substring before the dot should not be empty, and it starts with a letter from \n    # the latin alphapet ('a'-'z' and 'A'-'Z')\n    if file_name[1:].startswith('.'):\n        return 'Invalid File Name'\n    # Substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    if file_name[-1].startswith('.'):\n        return 'Invalid File Name'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # first check the file name for empty strings\n    if not file_name:\n        return 'No'\n    # check if the file name has the format '0'-'9'\n    if len(file_name) < 3:\n        return 'No'\n    # check if there is a dot ('.') and the file name does not contain it\n    if file_name[0]!= '.':\n        return 'No'\n    # check if the file name does not contain the letter 'a' or 'A'\n    if file_name[1] not in ['a', 'A']:\n        return 'No'\n    # check if the substring before the dot (the letters) contains only letters from \n    # the latin alphapet ('a'-'z' and 'A'-'Z')\n    if file_name[1] not in ['.', 'z', 'A']:\n        return 'No'\n    # check if the substring after the dot (the letters) contains only letters from \n    # the latin alphapet ('a'-'z' and 'A'-'Z')\n    if file_name[-1] not in ['.', 'z', 'A']:\n        return 'No'\n    # return 'Yes' if the file name is valid\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    valid_name = False\n    # The file's name should be valid if and only if all of the following conditions are met:\n    # - There should not be more than three digits ('0'-'9') in the file's name.\n    # - The file's name contains exactly one dot '.'\n    # - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    # - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    if len(file_name) > 3:\n        valid_name = True\n    if not file_name.isalnum():\n        valid_name = False\n    if not file_name[0].isalpha():\n        valid_name = False\n    if not file_name.startswith('.'):\n        valid_name = False\n    if file_name[-1] == '.':\n        valid_name = False\n    if not all([ch in string.digits for ch in file_name]):\n        valid_name = False\n    if not all([ch in string.ascii_letters for ch in file_name]):\n        valid_name = False\n    return valid_name"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    check_name = file_name.replace('.','')\n    if len(check_name) > 3:\n        return 'No'\n    elif not check_name.isdigit():\n        return 'No'\n    elif len(check_name) < 3:\n        return 'No'\n    elif not check_name[0:1].isalpha():\n        return 'No'\n    elif not check_name[0:1].isupper():\n        return 'No'\n    elif not check_name[1:2].isalnum():\n        return 'No'\n    elif not check_name[1:2].isalpha():\n        return 'No'\n    elif not check_name[2:3].isalpha():\n        return 'No'\n    elif not check_name[2:3].isupper():\n        return 'No'\n    elif not check_name[3:4].isalnum():\n        return 'No'\n    elif not check_name[3:4].isalpha():\n        return 'No'\n    elif not check_name[4:5].isalnum():\n        return 'No'\n    elif not check_name[4:5].isalpha():\n        return 'No'\n    elif not check_name[5:6].isalnum():\n        return 'No'\n    elif not check_name[6:7].isalnum():\n        return 'No'\n    elif not check_name[7:8].isalnum():\n        return 'No'\n    elif not check_name[8:9].isalnum():\n        return 'No'\n    elif not check_name[9:10].isalnum():\n        return 'No'\n    elif not check_name[10:11].isalnum():\n        return 'No'\n    elif not check_name[11:12].isalnum():\n        return 'No'\n    elif not check_name[12:13].isalnum():\n        return 'No'\n    elif not check_name[13:14].isalnum():\n        return 'No'\n    elif not check_name[14:15].isalnum():\n        return 'No'\n    elif not check_name[15:16].isalnum():\n        return 'No'\n    elif not check_name[16:17].isalnum():\n        return 'No'\n    elif not check_name[17:18].isalnum():\n        return 'No'\n    elif not check_name[18:19].isalnum():\n        return 'No'\n    elif not check_name[19:20].isalnum():\n        return 'No'\n    elif not check_name[20:21].isalnum():\n        return 'No'\n    elif not check_name[21:22].isalnum():\n        return 'No'\n    elif not check_name[22:23].isalnum():\n        return 'No'\n    elif not check_name[23:24].isalnum():\n        return 'No'\n    elif not check_name[24:25].isalnum():\n        return 'No'\n    elif not check_name[25:26].isalnum():\n        return 'No'\n    elif not check_name[26:27].isalnum():\n        return 'No'\n    elif not check_name[27:28].isalnum():\n        return 'No'\n    elif not check_name[28:29].isalnum():\n        return 'No'\n    elif not check_name[29:30].isalnum():\n        return 'No'\n    elif not check_name[30:31].isalnum():\n        return 'No'\n    elif not check_name[31:32].isalnum():\n        return 'No'\n    elif not check_name[32:33].isalnum():\n        return 'No'\n    elif not check_name[33:34].isalnum():\n        return 'No'\n    elif not check_name[34:35].isalnum():\n        return 'No'\n    elif not check_name[35:36].isalnum():\n        return 'No'\n    elif not check_name[36:37].isalnum():\n        return 'No'\n    elif not check_name[37:38].isalnum():\n        return 'No'\n    elif not chec"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if re.search(r'\\d{1,3}\\.\\w{3}$', file_name):\n        if not re.search(r'[\\w]{3}$', file_name):\n            print('File is not valid')\n            return False\n        else:\n            return True\n    else:\n        print('File is not valid')\n        return False\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Split the file name into a list of digits, which consist of all the digits.\n    digits = [int(i) for i in list(file_name)]\n    # Check if the length of the list is more than three.\n    if len(digits) > 3:\n        return \"No\"\n    # Check if the first digit is 0 or 9.\n    if digits[0]!= 0 or digits[0]!= 9:\n        return \"No\"\n    # Check if the substring before the dot starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n    if digits[1]!= \".\":\n        return \"No\"\n    # Check if the first character is a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n    if not digits[2].isalpha():\n        return \"No\"\n    # Check if all the above conditions are met.\n    return \"Yes\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum = 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3==0:\n            sum+=i\n        elif i%4==0:\n            sum-=i\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3==0:\n            i = i*i\n        if i%4==0:\n            i = i**2\n        sum+=i\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = 0\n    for i in lst:\n        if i < 0 or i % 3 == 0 or i % 4 == 0:\n            s += i ** 2\n    return s\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sums = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sums += i ** 2\n    return sums\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum = 0\n    for e in lst:\n        if e % 3 == 0:\n            sum += e * e\n        if e % 4 == 0:\n            sum += e\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    total = 0\n    for e in lst:\n        if isinstance(e, int):\n            if e % 3 == 0 and e % 4!= 0:\n                total += e\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    #this will take a list and make a new list of the same length\n    s = [0] * len(lst)\n    \n    for i in range(len(lst)):\n        if lst[i] % 3 == 0 and lst[i] % 4!= 0:\n            s[i] = lst[i] ** 2\n        elif lst[i] % 3!= 0 and lst[i] % 4 == 0:\n            s[i] = lst[i] ** 3\n        else:\n            s[i] = lst[i]\n    \n    #this will return the sum of all the numbers entered in the list\n    return sum(s)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] = lst[i]**3\n        elif i % 4 == 0:\n            lst[i] = lst[i]**4\n        else:\n            lst[i] = lst[i]**5\n    return lst[0]\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # lst.sort() # This has been a bug, it didn't work, but I don't know why\n    # This function is better with the try/except \n    # Also, it just works because of the fact that it's a list\n    # It takes a list, and returns the sum of the squares of the elements in the list.\n    sum = 0\n    for index in lst:\n        if index % 3 == 0:\n            sum += index\n        elif index % 4 == 0:\n            sum += index**2\n    return sum\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def words_in_sentence_aux(sentence):\n        words = []\n        for word in sentence.split():\n            if len(word) == 1:\n                words.append(word)\n            elif len(word) == 2:\n                words.append(word[0] + word[1])\n            else:\n                first_word = word[:1]\n                second_word = word[1:]\n                if first_word not in words:\n                    words.append(first_word)\n                if second_word not in words:\n                    words.append(second_word)\n        return \" \".join(words)\n    return words_in_sentence_aux(sentence)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = ''\n    for word in sentence.split():\n        if len(word) > 1:\n            result += word[0] + \" \"\n    return result[:-1]\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def words_in_sentence_rec(sentence, word_len):\n        result = []\n        for word in sentence.split():\n            if len(word) == word_len:\n                result.append(word)\n            else:\n                result.append(word[:word_len] + \"...\")\n        return \" \".join(result)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    words = sentence.split()\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \" \".join(sentence.split(\" \"))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return words_in_sentence_helper(sentence, 0, [])\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    new_sentence = sentence.replace(\" \", \"\")\n    new_sentence = new_sentence.split(\" \")\n    new_sentence.sort(key = len)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \" \".join(sorted(list(sentence.split())))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = sentence.replace(' ', '').replace('.', '').replace(',', '').split(' ')\n    if len(s) < 2:\n        return sentence\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    res = 0\n    for i in x:\n        if i!= 0:\n            res = res * 10 + int(i)\n    if res == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # convert string fractions to integers\n    def convert(numerator, denominator):\n        return int(numerator / denominator)\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = float(n)\n    if n.is_integer():\n        if not n:\n            return False\n        if n == 1:\n            return True\n        elif x == '1/1':\n            return True\n        elif n % 2 == 0:\n            return simplify(x, str(int(n/2)))\n        else:\n            return False\n    else:\n        if n % 2 == 0:\n            return simplify(x, str(int(n/2)))\n        else:\n            return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if (type(x)!= str or type(n)!= str):\n        return False\n    x = x.replace('/', '.')\n    n = n.replace('/', '.')\n    \n    if (int(x) == 0 or int(n) == 0):\n        return False\n    elif(x == '0'):\n        return False\n    else:\n        return True"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == \"\":\n        return False\n    if n.find(\"/\") >= 0:\n        if x.find(\"/\") >= 0:\n            if int(n.split(\"/\")[0]) / int(n.split(\"/\")[1]) == 0:\n                return False\n    else:\n        if x.find(\"/\") >= 0:\n            if int(x.split(\"/\")[0]) / int(x.split(\"/\")[1]) == 0:\n                return False\n    return True\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if isinstance(x, str) and isinstance(n, str):\n        if (len(x)!= len(n)):\n            return False\n        for i in range(len(n)):\n            if n[i]!= '.':\n                return False\n        if n == '.':\n            return True\n        if isinstance(x, float) and isinstance(n, float):\n            if (x % 1) == 0:\n                return True\n            else:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    try:\n        if n.count('/') == 1:\n            num, den = n.split('/')\n            if float(num) == int(num) and float(den) == int(den):\n                return True\n        return False\n    except:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    result = True\n    \n    if '.' in x:\n        \n        # remove all the decimal symbols from the fraction\n        x = x.replace('.', '')\n        x = x.replace('/', '')\n        \n        # check if the numerator is greater than denominator\n        if len(x) == 1:\n            result = False\n        else:\n            \n            # if the fraction is a whole number, then remove the fraction from the left\n            if x[0] == '0':\n                x = x[1:]\n            \n            # if the fraction is a negative whole number, then it is a negative fraction\n            elif x[0] == '-':\n                x = x[1:]\n            \n            # if the fraction is a positive whole number, then it is a positive fraction\n            elif x[0] == '+':\n                x = x[1:]\n                \n            # if the fraction contains a negative fraction, then it is a fraction\n            elif x[0] == '-':\n                \n                # if the numerator is a fraction, then we need to check if the denominator is a fraction\n                if x[0] == '-':\n                    \n                    # convert the fraction to a whole number\n                    if x[1] == '0':\n                        result = False\n                    else:\n                        result = simplify(x[1:] + '.', int(x[0]))\n                else:\n                    result = False\n                    \n            else:\n                result = False\n        \n    else:\n        result = False\n        \n    return result\n    "
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    try:\n        int(x)\n        int(n)\n    except ValueError:\n        return False\n    else:\n        return True\n    \ndef perfect(x, n):\n    \"\"\"Your task is to implement a function that will evaluate the factorial of a given number.\n    The function should return the given factorial. For example, if the given number is a\n    positive whole number, then the function should return its factorial.\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return is_fraction(x) and is_fraction(n)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sums = list(map(lambda x: int(x[:-1]), nums))\n    sums.sort(reverse=True)\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    nums.sort(reverse = True)\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # Approach 1: Iterate through the numbers and compare each digit with the sum of digits of each\n    # number, keeping track of its index and appending the list to the original list at the end\n    # to make it sorted\n    def sort(nums):\n        i = 0\n        j = len(nums) - 1\n        while i < j:\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n            j -= 1\n        return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sums = []\n    for num in nums:\n        num = int(num)\n        sums.append(num)\n    sums.sort()\n    sums.sort(reverse=True)\n    return sums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = 0\n    for i in range(len(nums)):\n        s += nums[i]\n    if s % 10!= 0:\n        return sorted(nums)\n    else:\n        return sorted(nums, reverse=True)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = sum(map(lambda n: int(n), str(nums)))\n    s = abs(s)\n    nums.sort(key=lambda n: n//s)\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    nums_ = []\n    for x in nums:\n        if isinstance(x, int):\n            nums_.append(x)\n    nums_ = sorted(nums_)\n    return nums_\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    nums.sort(reverse = True, key = lambda x: sum([int(i) for i in str(x)]))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    nums.sort()\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sums = [0 for i in range(len(nums))]\n    for i, num in enumerate(nums):\n        sums[i] = sum(list(map(lambda x: int(x) if x.isdigit() else x, str(num))))\n    \n    return sorted(sums, reverse=True)\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(nums)\n    for i in range(n):\n        if nums[i] > 10:\n            if nums[i-1] > 10 and nums[i+1] > 10:\n                print(nums[i])\n                return nums[i]\n    return 1\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # define the function\n    def countElements(lst):\n        # define the global variable\n        count = 0\n        # iterate through the input array\n        for ele in lst:\n            # if ele is greater than 10 and first and last digits are odd, \n            # add 1 to count\n            if ele > 10 and ele % 2!= 0 and ele % 3!= 0 and ele % 5!= 0 and ele % 7!= 0 and ele % 9!= 0:\n                count += 1\n            \n        # return the count\n        return count\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # your code goes here\n    if nums == []:\n        return 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] >= 10 and nums[i] % 10 == 0 and nums[i] % 10!= nums[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # YOUR CODE HERE\n    ans = 0\n    for num in nums:\n        if num >= 10:\n            ans = ans + 1\n            for i in range(num//10):\n                if num % 10!= i:\n                    ans = ans + 1\n    return ans\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(nums) < 1:\n        return 0\n    sum = 0\n    for i in range(0, len(nums)):\n        for j in range(0, len(nums)):\n            if i!= j and nums[i] > nums[j]:\n                sum += 1\n    return sum\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = 0 \n    for i in range(len(nums)-1):\n        if (nums[i] < 10) and (nums[i+1] % 2!= 0):\n            res += 1\n    return res \n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Write your code here\n    # this is a bit tricky\n    # for now, it's a helper function. \n    # it's a little bit slower than the main function. \n    # you'll need a different way of doing this. \n    \n    # the idea is that you'll be using recursion. \n    # for a different array, you'll need the array as a parameter \n    # for you to use the inner function on the same array. \n    # that would be a bit faster, \n    # and has a lot of space (now about 2x as much space)\n    # and the problem is quite simple. \n    # so we'll do it as a bit harder. \n    # the problem here is that you only need the first and last digit, \n    # then you know how to iterate through it. \n    # then we know how to get the length of the array.\n    \n    # the naive solution is to iterate through the array,\n    # so the length is two times the array length.\n    # if the first digit of the array is odd, we can ignore it. \n    # if the last digit of the array is odd, we can ignore it.\n    # if the last digit of the array is even, we can ignore it.\n    # if the last digit of the array is odd, we can ignore it, and \n    # again, we can ignore it.\n    # if the last digit of the array is even, we can ignore it, and \n    # again, we can ignore it.\n    # so at the end, we can count the length of the array.\n    \n    # we can use a special function to get the length of the array\n    # we'll need it as a parameter in the outer function\n    # we'll need this to get the length of the array later\n    # after it's done, we'll have the length of the array before it's done\n    # so you can't just use the same function as a normal outer function\n    \n    # the inner function in this case, \n    # means to iterate through the array, \n    # and then compute the length of the array. \n    # in a separate inner function, you'll need the array as a parameter\n    # we'll do it as a parameter in the outer function\n    # so we'll need the array as a parameter \n    # and not as a parameter in the function itself\n    \n    # the inner function in the outer function\n    # is to iterate through the array, \n    # and then compute the length of the array. \n    # in a separate inner function, we'll need the array as a parameter\n    # we'll do it as a parameter in the outer function\n    # so we'll need the array as a parameter \n    # and not as a parameter in the function itself\n    \n    # now, we'll iterate through the array, and compute the length\n    # of the array. \n    # in a separate inner function, we'll need the array as a parameter\n    # we'll do it as a parameter in the outer function\n    # so we'll need the array as a parameter \n    # and not as a parameter in the function itself\n    \n    # the inner function in the outer function\n    # is to iterate through the array, and then compute the length\n    # of the array. \n    # in a separate inner function, we'll need the array as a parameter\n    # we'll do it as a parameter in the outer function\n    # so we'll need the array as a parameter \n    # and not as a parameter in the function itself\n    \n    # now, we'll iterate through the array, and then compute the length\n    # of the array. \n    # in a separate inner function, we'll need the array as a parameter\n    # we'll do it as a parameter in the outer function\n    # so we'll need the array as a parameter \n    # and not as a parameter in the function itself\n    \n    # since the number of digits doesn't matter, \n    # we'll just return the length of the array\n    return len(nums) * 2\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i][0] % 2 == 0:\n            if nums[i][1] % 2 == 1:\n                total += 1\n            if nums[i][-1] % 2 == 1:\n                total += 1\n    return total"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n    nums.sort()\n    odd = 0\n    for i in range(len(nums)):\n        if nums[i] >= 10:\n            odd += 1\n        if nums[i] % 2!= 0:\n            odd += 1\n    if odd < 1:\n        return 1\n    if odd > 1:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO:\n    count_odd = 0\n    for num in nums:\n        if num % 10 == 0 and num % 10!= 0:\n            count_odd += 1\n    count_last_digit = 0\n    for num in nums:\n        if num % 10 == 0 and num % 10!= 0:\n            count_last_digit += 1\n    # TODO:\n    count_of_odd_first_dig = 0\n    for num in nums:\n        if num % 10!= 0 and num % 10!= 0:\n            count_of_odd_first_dig += 1\n    count_of_odd_last_digit = 0\n    for num in nums:\n        if num % 10!= 0 and num % 10!= 0:\n            count_of_odd_last_digit += 1\n    # TODO:\n    return count_of_odd_first_dig + count_of_odd_last_digit + count_odd\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = 0\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return 2 * n - 1 if n & 1 else (n - 1) * (n - 1) + n // 3\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        count += i * i - i + 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n    return len(set(a))\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def get_triples(a,n):\n        count = 0\n        for i in range(1,n+1):\n            if (a[i] + a[i] - i + 1)%3 == 0:\n                count += 1\n        return count\n    return get_triples(a,n)\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a = [i*i-i+1 for i in range(n)]\n    for i in range(1, n):\n        if a[i] % 3 == 0:\n            return 1\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    return len([i for i in range(len(a)) if a[i] % 3 == 0 and a[i] % 5 == 0])\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Check if the input is valid\n    if n == 0:\n        return 0\n    a = [1] * n\n    \n    for i in range(1, n):\n        a[i] = a[i - 1] + a[i - 1] + a[i - 1]\n    \n    # 3 is always the max of a\n    return max(a)\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a = [1 for i in range(n)]\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                a[i] += a[j]\n                a[j] = a[i] % 3\n                a[i] %= 3\n                a[j] = a[k]\n                a[k] = a[i]\n                count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def get_triples(n):\n        a = [1] * n\n        a[1] = 1\n        for i in range(2, n):\n            a[i] = i * i - i + 1\n        return a\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if planet1 == \"Sun\" and planet2 == \"Sun\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Sun\" and planet2 == \"Mercury\":\n        return (\"Venus\", \"Mercury\")\n    elif planet1 == \"Sun\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Mercury\" and planet2 == \"Sun\":\n        return (\"Mercury\", \"Uranus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Earth\" and planet2 == \"Sun\":\n        return (\"Earth\", \"Mercury\")\n    elif planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Venus\")\n    elif planet1 == \"Earth\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Mars\")\n    elif planet1 == \"Mars\" and planet2 == \"Sun\":\n        return (\"Mars\", \"Jupiter\")\n    elif planet1 == \"Mars\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Sun\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Sun\":\n        return (\"Saturn\", \"Jupiter\")\n    elif planet1 == \"Saturn\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Saturn\")\n    elif planet1 == \"Sun\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Mercury\")\n    elif planet1 == \"Sun\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\")\n    elif planet1 == \"Saturn\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Venus\")\n    elif planet1 == \"Venus\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Venus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Mercury\":\n        return (\"Jupiter\", \"Venus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Mercury\":\n        return (\"Saturn\", \"Venus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Jupiter\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\")\n    elif planet1 == \"Saturn\" and planet2 == \"Venus\":\n        return (\"Saturn\", \"Jupiter\")\n    elif planet1 == \"Mercury\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Saturn\")\n    elif planet1 == \"Mercury\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Mercury\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Saturn\":\n        return ("
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    return()\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if planet1 == \"Sun\":\n        if planet2 == \"Sun\":\n            return (\"Sun\", \"Sun\")\n        if planet2!= \"Sun\":\n            return (\"Sun\", \"Sun\")\n    if planet1 == \"Neptune\":\n        if planet2 == \"Sun\":\n            return (\"Sun\", \"Neptune\")\n        if planet2!= \"Sun\":\n            return (\"Sun\", \"Sun\")\n    if planet1 == \"Venus\":\n        if planet2 == \"Sun\":\n            return (\"Sun\", \"Venus\")\n        if planet2!= \"Sun\":\n            return (\"Sun\", \"Sun\")\n    if planet2 == \"Saturn\":\n        if planet1 == \"Sun\":\n            return (\"Sun\", \"Saturn\")\n        if planet1!= \"Sun\":\n            return (\"Sun\", \"Sun\")\n    if planet2 == \"Uranus\":\n        if planet1 == \"Sun\":\n            return (\"Sun\", \"Uranus\")\n        if planet1!= \"Sun\":\n            return (\"Sun\", \"Sun\")\n    if planet2 == \"Mercury\":\n        if planet1 == \"Sun\":\n            return (\"Sun\", \"Mercury\")\n        if planet1!= \"Sun\":\n            return (\"Sun\", \"Sun\")\n    return (\"\", \"\")\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    name1 = planet1\n    name2 = planet2\n    planet1_orbits = []\n    planet2_orbits = []\n    planet1_orbits.append(name1)\n    planet2_orbits.append(name2)\n    while True:\n        n = len(name1)\n        if n < len(name2):\n            break\n        if name2[n] < name1[n]:\n            name1, name2 = name2, name1[n]\n            name1_orbits = []\n            name2_orbits = []\n            for i in range(n):\n                name1_orbits.append((name1[n-i-1], name1[n-i], name1[n-i-1]+name2[n-i], name1[n-i-1]+name2[n-i], name1[n-i-1]+name2[n-i]-name1[n-i], name1[n-i], name1[n-i-1], name1[n-i-1]+name2[n-i-1], name1[n-i-1]+name2[n-i-1]-name1[n-i-1], name1[n-i-1]+name2[n-i-1]))\n                name2_orbits.append((name2[n-i-1], name2[n-i], name2[n-i-1]+name1[n-i], name2[n-i], name2[n-i-1]+name1[n-i]-name2[n-i], name2[n-i-1]+name1[n-i-1], name2[n-i-1]+name1[n-i-1]-name2[n-i-1], name2[n-i-1]+name1[n-i-1]))\n        elif name1 < name2:\n            name1_orbits.append((name1, name1+name2, name1+name2, name1, name1, name1, name1+name2))\n            name2_orbits.append((name2, name2, name1+name2, name2, name2, name1, name2))\n        else:\n            break\n    planet1_orbits.sort()\n    planet2_orbits.sort()\n    return planet1_orbits, planet2_orbits\ndef cb(planet1, planet2):\n    '''\n    There are seven planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    cb(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    cb(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    cb(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    name1 = planet1\n    name2 = planet2\n    planet1_orbits = []\n    planet2_orbits = []\n    planet1_orbits.append(name1)\n    planet2_orbits.append(name2)\n    while True:\n        n = len(name1)\n        if n < len(name2):\n            break\n        if name2[n] < name1[n]:\n            name1, name2 = name2, name1[n]\n            name1_orbits = []\n            name2_orbits = []\n            for i in range(n):\n                name1_orbits.append((name1[n-i-1], name1[n-i], name1[n-i-1]+name2[n-i], name1[n-i], name1[n-i-1]+name2[n-i], name1[n-i-1]+name2[n-i]-name1[n-i-1], name"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # I assume that planet1 and planet2 are both correct planet names \n    # planets = [f\"{planet1}\", f\"{planet2}\"]\n    # solution = []\n    # for i in range(len(planets)):\n    #     if planets[i] == planet1 or planets[i] == planet2:\n    #         solution.append(planets[i])\n    # return tuple(solution)\n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    \n    #raise NotImplementedError\n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    \n    #raise NotImplementedError\n    # returns a tuple of all planets in the solar system\n    planets = [f\"{planet1}\", f\"{planet2}\"]\n    return tuple(sorted(planets))\n    \n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    \n    #raise NotImplementedError\n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    \n    #raise NotImplementedError\n    # solution = []\n    # for i in range(len(planets)):\n    #     if planets[i] == planet1 or planets[i] == planet2:\n    #         solution.append(planets[i])\n    # return tuple(solution)\n    \n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    \n    #raise NotImplementedError\n    # solution = []\n    # for i in range(len(planets)):\n    #     if planets[i] == planet1 or planets[i] == planet2:\n    #         solution.append(planets[i])\n    # return tuple(solution)\n    \n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    # solution = []\n    # for i in range(len(planets)):\n    #     if planets[i] == planet1 or planets[i] == planet2:\n    #         solution.append(planets[i])\n    # return tuple(solution)\n    \n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    # solution = []\n    # for i in range(len(planets)):\n    #     if planets[i] == planet1 or planets[i] == planet2:\n    #         solution.append(planets[i])\n    # return tuple(solution)\n    \n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    # solution = []\n    # for i in range(len(planets)):\n    #     if planets[i] == planet1 or planets[i] == planet2:\n    #         solution.append(planets[i])\n    # return tuple(solution)\n    \n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    # solution = []\n    # for i in range(len(planets)):\n    #     if planets[i] == planet1 or planets[i] == planet2:\n    #         solution.append(planets[i])\n    # return tuple(solution)\n    \n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    # solution = []\n    # for i in range(len(planets)):\n    #     if planets[i] == planet1 or planets[i] == planet2:\n    #         solution.append(planets[i])\n    # return tuple(solution)\n    \n    \n    #raise NotImplementedError\n    \n    \n    #raise NotImplementedError\n    # solution = []\n    # for i in range(len(planets)):\n    #     if planets[i] == planet1 or planets[i] == planet2"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return None\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    planet1 = planet1.split(\" \")\n    planet2 = planet2.split(\" \")\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    s = sun(planet1, planet2)\n    b = list(bf_pairs(s))\n    b.sort()\n    return "
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if planet1 == planet2:\n        return (\"Saturn\", \"Uranus\", \"Mars\", \"Jupiter\", \"Neptune\")\n    if planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Uranus\", \"Mercury\", \"Mars\", \"Venus\", \"Earth\", \"Jupiter\")\n    if planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Mercury\", \"Jupiter\", \"Saturn\", \"Earth\", \"Jupiter\")\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\", \"Venus\", \"Earth\", \"Mercury\")\n    if planet1 == \"Jupiter\" and planet2 == \"Neptune\":\n        return (\"Mercury\", \"Venus\", \"Saturn\", \"Uranus\", \"Earth\", \"Jupiter\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Venus\", \"Mercury\", \"Uranus\", \"Earth\", \"Saturn\")\n    if planet1 == \"Saturn\" and planet2 == \"Neptune\":\n        return (\"Mercury\", \"Uranus\", \"Venus\", \"Jupiter\", \"Earth\", \"Saturn\")\n    if planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return (\"Venus\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Earth\", \"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Venus\", \"Uranus\", \"Saturn\", \"Earth\", \"Jupiter\")\n    if planet1 == \"Uranus\" and planet2 == \"Venus\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\", \"Venus\", \"Earth\", \"Saturn\")\n    if planet1 == \"Neptune\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\", \"Earth\", \"Uranus\")\n    if planet1 == \"Neptune\" and planet2 == \"Saturn\":\n        return (\"Venus\", \"Uranus\", \"Saturn\", \"Jupiter\", \"Earth\", \"Venus\")\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\", \"Earth\", \"Mercury\")\n    if planet1 == \"Mercury\" and planet2 == \"Saturn\":\n        return (\"Venus\", \"Uranus\", \"Saturn\", \"Uranus\", \"Earth\", \"Mercury\")\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\", \"Earth\", \"Mercury\")\n    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Uranus\", \"Mercury\", \"Earth\", \"Jupiter\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Venus\", \"Saturn\", \"Earth\", \"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Venus\", \"Uranus\", \"Saturn\", \"Jupiter\", \"Earth\", \"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Venus\", \"Uranus\", \"Jupiter\", \"Earth\", \"Saturn\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Venus\", \"Saturn\", \"Jupiter\", \"Earth\", \"Uranus\")\n    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Venus\", \"Uranus\", \"Earth\", \"Jupiter\")\n    if planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Saturn\", \"Uranus\", \"Jupiter\", \"Earth\", \"Saturn\")\n    if planet1 == \"Uranus\" and planet2 == \"Saturn\":"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(lst, key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def get_sorted_list(s):\n        lst = [x.strip() for x in s]\n        lst_with_odds = []\n        for word in lst:\n            if len(word) % 2 == 1:\n                lst_with_odds.append(word)\n        return lst_with_odds\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # list_sorted = []\n    # for word in lst:\n    #     length = len(word)\n    #     if length % 2!= 0:\n    #         list_sorted.append(word)\n    #         list_sorted.sort()\n    #     else:\n    #         list_sorted.append(word[::-1])\n    #         list_sorted.sort()\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Write your solution here\n    lst.sort(key=len)\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sort_list = []\n    for word in lst:\n        if len(word)%2 == 0:\n            sort_list.append(word)\n    return sort_lis"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst_copy = lst.copy()\n    lst_copy_2 = lst_copy[:]\n    lst_sorted = []\n    for word in lst_copy_2:\n        if len(word) % 2 == 0:\n            word = word[:len(word)//2]\n            lst_sorted.append(word)\n        else:\n            pass\n    lst_sorted = sorted(lst_sorted)\n    return lst_sorted\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst_str_sorted = []\n    for word in lst:\n        lst_word_sorted = []\n        for char in word:\n            if not isinstance(char, str):\n                char = str(char)\n            lst_word_sorted.append(char)\n        lst_str_sorted.append(lst_word_sorted)\n    return lst_str_sorte"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # get all the strings in the list\n    list_of_strings = [x.strip() for x in lst]\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst = sorted(lst)\n    #print(lst)\n    new_lst = []\n    for word in lst:\n        count = 0\n        for char in word:\n            if(len(word)%2 == 1):\n                break\n            else:\n                count += 1\n        if(count%2!= 0):\n            new_lst.append(word)\n    return new_lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    def get_length(word):\n        return len(word)\n    \n    def get_pos(word):\n        if len(word) % 2 == 0:\n            return 0\n        else:\n            return 1\n    \n    def get_word(word_list):\n        length = 0\n        for word in word_list:\n            length += get_length(word)\n        if length % 2 == 0:\n            return word_list\n        else:\n            return word_list[::-1]\n    \n    def sort_by_length(list_to_sort):\n        new_list = []\n        for word in list_to_sort:\n            if len(word) % 2 == 0:\n                new_list += [word]\n            else:\n                new_list += [word[::-1]]\n        return new_list\n    \n    def sort_by_pos(list_to_sort):\n        new_list = []\n        for word in list_to_sort:\n            if get_pos(word) == 0:\n                new_list += [word]\n            else:\n                new_list += [word[::-1]]\n        return new_list\n    \n    return sort_by_length(lst) + sort_by_pos(lst)\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n-1, x, y) + x_or_y(n-1, x, y)\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(n + 1):\n        if gcd(n, i) == 1:\n            return x % i\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Add your code here\n    #for i in range(n):\n    #    if n%i==0:\n    #        return i\n    #    else:\n    #        return False\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            x = y\n    return x\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    x = int(x)\n    y = int(y)\n    if n == 2 or n == 3:\n        return x\n    elif n == 2 or n % 2 == 0:\n        return y\n    else:\n        for i in range(1, n // 2 + 1):\n            if n % i == 0:\n                return i\n            elif n % i == 0:\n                continue\n    if n == 2:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if (not is_prime(n)) or n == 1:\n        return n\n    else:\n        #x = (y/x)\n        return y % n\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # get values of a and b\n    a, b = x, y\n    \n    # using divide and conquer\n    # base case: if n is a prime number\n    # then the value of x is the value of y\n    #\n    # base case: if n is not a prime number\n    # then the value of x is the value of y\n    #\n    # base case: if x is the value of y\n    # then the value of x is y\n    #\n    # base case: if x is the value of y\n    # then the value of x is y\n    if n%2==0:\n        if x==y:\n            return a\n        if x==y-1:\n            return b\n        if x==y+1:\n            return a\n    if n%2==1:\n        if x==y:\n            return a\n        if x==y+1:\n            return b\n        if x==y-1:\n            return a\n    \n    # if n is a perfect square\n    # use binary search to find the value of x\n    #\n    # base case: n is a perfect square\n    # then x is the value of y\n    #\n    # base case: if n is a perfect square\n    # then x is the value of y\n    #\n    # base case: if x is the value of y\n    # then x is y\n    #\n    # base case: if x is the value of y\n    # then x is y\n    if n==int(math.sqrt(n)):\n        if x==y:\n            return a\n        if x==y-1:\n            return b\n        if x==y+1:\n            return a\n    \n    # if n is not a perfect square\n    # use binary search to find the value of x\n    #\n    # base case: n is not a perfect square\n    # then x is the value of y\n    #\n    # base case: if n is not a perfect square\n    # then x is the value of y\n    #\n    # base case: if x is the value of y\n    # then x is y\n    #\n    # base case: if x is the value of y\n    # then x is y\n    if n>int(math.sqrt(n)):\n        if x==y:\n            return a\n        if x==y-1:\n            return b\n        if x==y+1:\n            return a\n    if n>int(math.sqrt(n)):\n        if x==y:\n            return a\n        if x==y-1:\n            return b\n        if x==y+1:\n            return a\n    if n>int(math.sqrt(n)):\n        if x==y:\n            return a\n        if x==y-1:\n            return b\n        if x==y+1:\n            return a\n    \n    # if n is not a perfect square\n    # use binary search to find the value of x\n    #\n    # base case: n is not a perfect square\n    # then x is the value of y\n    #\n    # base case: if n is not a perfect square\n    # then x is the value of y\n    #\n    # base case: if x is the value of y\n    # then x is y\n    #\n    # base case: if x is the value of y\n    # then x is y\n    #\n    # base case: if x is the value of y\n    # then x is y\n    if n<int(math.sqrt(n)):\n        if x==y:\n            return a\n        if x==y+1:\n            return b\n        if x==y-1:\n            return a\n    if n<int(math.sqrt(n)):\n        if x==y:\n            return a\n        if x==y-1:\n            return b\n        if x==y+1:\n            return a\n    \n    # if n is not a perfect square\n    # use binary search to find the value of x\n    #\n    # base case: n is not a perfect square\n    # then x is the value of y\n    #\n    # base case: if n is not a perfect square\n    # then x is the value of y\n    #\n    # base case: if x is the value of y\n    # then x is y\n    #\n    # bas"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for y in range(2, n//2):\n        if n%y == 0:\n            return y\n    return y\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sum([n**2 for n in lst if n%2==1])"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = 0\n    for i in lst:\n        if i % 2!= 0:\n            result += i ** 2\n    return result\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if lst == []:\n        return 0\n    else:\n        return double_the_difference(lst[1:]) + double_the_difference(lst[:-1])\n        \ndef duplicate_the_list(lst):\n    '''\n    Given a list, return whether the elements in the list are duplicates.\n    \n    duplicate_the_list([1, 2, 3, 4, 5]) == True\n    duplicate_the_list([1, 2, 3, 5, 4]) == True\n    duplicate_the_list([1, 2, 4, 4, 5]) == False\n    duplicate_the_list([1, 1]) == True\n    duplicate_the_list([1, 1, 1, 1]) == True\n    duplicate_the_list([]) == False\n    duplicate_the_list([]) == False\n    '''\n    if lst == []:\n        return False\n    else:\n        return True\n        \ndef find_the_molecular_form(lst):\n    '''\n    Given a list of numbers, return the smallest positive integer (and possibly\n    negative) that cannot be expressed as a product of two other numbers.\n    \n    find_the_molecular_form([2, 3, 5, -1, 6, 10]) == 14\n    find_the_molecular_form([-2, 4, -4, -2, -4, -4, -2]) == -1\n    find_the_molecular_form([]) == -1\n    find_the_molecular_form([-3, -5]) == -3\n    find_the_molecular_form([3, 9, 8, 4, 5]) == 2\n    find_the_molecular_form([-2, -2, -2, -4]) == 6\n    find_the_molecular_form([-3, -5, -2, -4]) == 10\n    find_the_molecular_form([-4, 5, 4, 3, 3]) == 3\n    '''\n    if lst == []:\n        return 0\n    else:\n        new_lst = [x for x in lst if x >= 0]\n        new_lst.sort()\n        if new_lst[0]!= new_lst[-1]:\n            return new_lst[0]\n        else:\n            return find_the_molecular_form(new_lst[1:]) + find_the_molecular_form(new_lst[:-1])\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    for item in lst:\n        if item % 2!= 0:\n            sum += item**2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = 0\n    for i in lst:\n        if i % 2!= 0:\n            s += i ** 2\n    return s\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = 0\n    for num in lst:\n        if num % 2!= 0:\n            s = s + pow(num, 2)\n    return s\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if lst == []:\n        return 0\n    return sum([i**2 for i in lst if i % 2!= 0])\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return 0\n    sum = 0\n    for elem in lst:\n        if elem % 2!= 0:\n            sum += elem ** 2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # If the input list is empty, return 0\n    if len(lst) == 0:\n        return 0\n    \n    # Loop through the list, only check for negative numbers\n    sum_of_squares = 0\n    for number in lst:\n        # print(number)\n        if number % 2 == 1:\n            sum_of_squares += number\n            \n    # Return the sum of squares of the even numbers\n    return sum_of_squares\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    score = []\n    guess = []\n    for i in range(len(guess)):\n        score.append(guess[i] - game[i])\n        guess.append(game[i])\n    \n    return score\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # your code\n    scores, guesses = [0], [0]\n    for i,guess in enumerate(guess):\n        scores.append(int(guess))\n        guesses.append(scores[i]+game[i])\n    scores.sort()\n    guesses.sort()\n    x = 0\n    for i in range(len(guesses)-1):\n        x = guesses[i+1] - guesses[i]\n        if x==0:\n            return [0,0,0,0,0,0]\n        else:\n            x = 0\n    return [guesses[i] - scores[i] for i in range(len(guesses)-1)]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(guess)):\n        guess[i] = int(guess[i])\n    for i in range(len(game)):\n        game[i] = int(game[i])\n    score = 0\n    for i in range(len(game)):\n        if(game[i] == guess[i]):\n            score += 1\n        else:\n            score = score - abs(guess[i] - game[i])\n    return [score,abs(guess[i] - game[i])]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    n=len(game)\n    if n==0:\n        return []\n    \n    #First guess must always be at the end of the game.\n    if guess[n-1]!= game[n-1]:\n        return []\n    \n    #Second guess can either be the starting point.\n    if guess[n-2]!= game[n-2]:\n        return []\n    \n    #Game is already finished.\n    if guess[n-3]!= game[n-3]:\n        return []\n    \n    #Both ends must be correct.\n    return [abs(guess[n-3]-game[n-3]),abs(guess[n-2]-game[n-2]),abs(guess[n-1]-game[n-1])]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [abs(guess-score) for guess,score in zip(guess,game)]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return\n    pas"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return compare_2(game,guess)\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    guess_numbers = []\n    score_numbers = []\n    i=0\n    j=0\n    for i in range(len(guess)):\n        for j in range(len(game)):\n            if guess[i] == game[j]:\n                guess_numbers.append(game[j])\n                score_numbers.append(guess[i])\n                \n    return [0,0,0,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    answer=[]\n    for i in range(len(game)):\n        if guess[i]==game[i]:\n            answer.append(0)\n        else:\n            answer.append(abs(game[i]-guess[i]))\n    answer=sorted(answer)\n    answer=answer[0]\n    return answer\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    score = 0\n    for idx, guess_arr in enumerate(guess):\n        score += guess_arr[idx]\n    return score\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(extensions) == 0:\n        return \"\"\n    ext_name = extensions[0].upper()\n    ext = extensions[1:]\n    cap = 0\n    sm = 0\n    for i in range(len(ext_name)):\n        if ext_name[i] in class_name.upper():\n            cap += 1\n        if ext_name[i] in class_name.lower():\n            sm += 1\n    if cap == sm:\n        return extensions[0] + '.StrongestExtensionName'\n    else:\n        if cap > sm:\n            return extensions[0] + '.StrongestExtensionName' + \".\" + extensions[1]\n        else:\n            return extensions[0] + '.StrongestExtensionName' + \".\" + extensions[0] + \". \" + extensions[1]\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    class_name = class_name.lower().strip()\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    class_list = get_class_list(class_name)\n    extension_list = get_extension_list(extensions)\n    strongest_extension = None\n    # get the strength of the extension\n    for extension in extension_list:\n        cap = len(extension[0].upper())\n        sm = len(extension[1].lower())\n        if cap > sm:\n            strongest_extension = extension\n    # return the extension name\n    return strongest_extension[0] + '.' + strongest_extension[1]"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    cap = len(class_name.upper()) - len(class_name.lower())\n    sm = 0\n    for ext in extensions:\n        sm += len(ext.lower()) - len(ext.upper())\n    if cap < sm:\n        return class_name\n    else:\n        return extensions[extensions.index(ext) + 1].lower() + '.WeakestExtensionName'"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    extensions = [extension.upper() for extension in extensions]\n    if len(extensions) == 0:\n        return class_name\n    max_index = len(extensions) - 1\n    for index in range(len(extensions)):\n        if extensions[index] == extensions[index + 1]:\n            return '{}.{}'.format(class_name, extensions[index])\n        elif extensions[index] > extensions[max_index]:\n            max_index = index\n    return '{}.{}'.format(class_name, extensions[max_index])\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    class_name_length = len(class_name)\n    extensions_length = len(extensions)\n    cap_count = 0\n    sm_count = 0\n    for extension in extensions:\n        if extension[:class_name_length] == extension[class_name_length:]:\n            sm_count += 1\n        if extension[class_name_length:class_name_length + class_name_length] == extension[class_name_length + class_name_length:]:\n            cap_count += 1\n    return '{}.{}'.format(class_name, extensions[cap_count - sm_count][class_name_length:extensions_length])\n    \ndef Substitutions(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    substitutions are to be used to replace the names of other extensions. \n    For example, if you are given \"Slices\" as the class and a list of extensions:\n    ['Carrot', 'Seashell', 'Tomato'], you should return: \n    \"Carrot.Seashell\"\n    \"\"\"\n    \n    class_name_length = len(class_name)\n    extensions_length = len(extensions)\n    substitutions = []\n    for extension in extensions:\n        if extension[:class_name_length] == extension[class_name_length:]:\n            substitutions.append(extension)\n        if extension[class_name_length:class_name_length + class_name_length] == extension[class_name_length + class_name_length:]:\n            substitutions.append(extension)\n    return '.'.join(substitutions)\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    extension_name = class_name.split('.')\n    #extension_name = extension_name[len(extension_name)-1]\n    cap_name = extension_name[0]\n    sm_name = extension_name[len(extension_name)-1]\n    cap_number = int(cap_name[1:len(cap_name)])\n    sm_number = int(sm_name[1:len(sm_name)])\n    if cap_number > sm_number:\n        cap_name = cap_name.replace('S','')\n        sm_name = sm_name.replace('S','')\n        cap_number = cap_number - sm_number\n        cap_name = cap_name.replace('C','')\n        sm_name = sm_name.replace('C','')\n        cap_number = cap_number + 1\n    cap_number = int(cap_number)\n    sm_number = int(sm_number)\n    cap_cap = int(cap_number / sm_number)\n    cap_cap_name = cap_name + '.' + str(cap_cap)\n    cap_sm = int(sm_number / cap_number)\n    cap_sm_name = cap_name + '.' + str(cap_sm)\n    sm_cap = int(sm_number / cap_number)\n    sm_cap_name = sm_name + '.' + str(sm_cap)\n    sm_sm = int(sm_number / sm_number)\n    sm_sm_name = sm_name + '.' + str(sm_sm)\n    return cap_cap_name + '.' + sm_sm_name + '.' + cap_sm_name\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = ''.join(class_name)\n    new_list = []\n    for extension in extensions:\n        new_list.append(extension[0].upper() + extension[1:])\n    return a + '.StrongestExtensionName.' + ''.join(new_list)\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    weakest = 'Weakest'\n    \n    for extension in extensions:\n        if extension[0].isupper() and extension[1].islower():\n            count += 1\n    \n    strongest_extension = 'Weakest'\n    \n    for extension in extensions:\n        if extension[0].isupper() and extension[1].islower():\n            if count == 1:\n                strongest_extension = extension\n            elif count == 2 and extension[0] == extension[1]:\n                strongest_extension = extension\n            elif count == 2:\n                count = 0\n                strongest_extension = extension\n                \n    return strongest_extension\n    \n    \ndef classify_test_class(test_class):\n    \"\"\"You will be given a string representing a test class.\n    If the string is a valid class, return a string representing\n    that class as a string. Otherwise, return 'ClassName' as\n    a string.\n    For example, if the string is \"Dessert\" then your function\n    should return \"dessert\".\n    Example:\n    classify_test_class('Dessert') == 'dessert'\n    classify_test_class('Monday') == 'Monday'\n    classify_test_class('Fried') == 'Fried'\n    \"\"\"\n    # TODO: remove the try except, and create an empty list\n    # instead. This will be used as a temporary variable\n    try:\n        class_name = test_class.lower().strip()\n    except AttributeError:\n        return 'ClassName'\n    \n    # TODO: create a string variable for each class\n    if's' in class_name:\n        return's'\n    elif 'i' in class_name:\n        return 'i'\n    elif's' in class_name:\n        return's'\n    elif 'i' in class_name:\n        return 'i'\n    elif 'f' in class_name:\n        return 'f'\n    elif 'g' in class_name:\n        return 'g'\n    elif 'f' in class_name:\n        return 'f'\n    elif 'g' in class_name:\n        return 'g'\n    elif 'c' in class_name:\n        return 'c'\n    elif 'c' in class_name:\n        return 'c'\n    elif'm' in class_name:\n        return'm'\n    elif 'g' in class_name:\n        return 'g'\n    elif 'g' in class_name:\n        return 'g'\n    elif 'c' in class_name:\n        return 'c'\n    elif'm' in class_name:\n        return'm'\n    elif 'f' in class_name:\n        return 'f'\n    elif 'g' in class_name:\n        return 'g'\n    else:\n        return 'ClassName'\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    l = len(a)\n    r = len(b)\n    \n    a_len = 0\n    b_len = 0\n    \n    if l>r:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # you are given the first word and the second word\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # for i in range(a,b):\n    #     if a <= i <= b:\n    #         if a == b:\n    #             if b == i:\n    #                 return True\n    #             return False\n    #         if b > i:\n    #             if a == b or (a < b and a < i):\n    #                 return True\n    #     return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return cycpattern(a, b) or cycpattern(b, a)\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #cycpattern_check(a, b)\n    def subpattern(a,b):\n        l = len(a)\n        if b in a:\n            for i in range(l):\n                if a[i] == b:\n                    return True\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a=a.lower()\n    b=b.lower()\n    s=set(a)\n    d=set(b)\n    if len(d.intersection(s))!=0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # return a in b or b in a\n    b = a.replace(a,b)\n    b = a.replace(b,a)\n    return a in b\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(a)\n    m = len(b)\n    i = m - 1\n    j = n - 1\n    while i >= 0 and j >= 0:\n        if (i >= 0) and (j >= 0):\n            if a[i] == b[j] and a[i]!= b[j]:\n                return True\n            elif a[i] == b[j]:\n                i -= 1\n                j -= 1\n                while i >= 0 and a[i] == b[j]:\n                    i -= 1\n                    j -= 1\n        if a[i] == b[j]:\n            i -= 1\n            j -= 1\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if (len(a)!= len(b) or a == b):\n        return False\n    for i in range(len(a)):\n        if (a[i]!= b[i]):\n            return False\n    return True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #pattern_check = True\n    return (a[:b.find('r')+1] in a[:b.find('r')+1] or b[:b.find('r')+1] in b[:b.find('r')+1])\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for i in range(len(num)):\n        if num[i] % 2 == 0:\n            result.append(1)\n        else:\n            result.append(2)\n    return tuple(result)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if num < 0:\n        raise ValueError('Number should be positive.')\n    else:\n        return num % 10, num // 10 % 10\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if num <= 0:\n        raise ValueError(\"Please enter a positive integer.\")\n    elif num % 2 == 0:\n        return (1, 1)\n    else:\n        return (1, 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return tuple(n for n in str(num) if n.isdigit())\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    evens = 0\n    odds = 0\n    for i in str(num):\n        if int(i)%2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Your code here\n    sum = 0\n    for i in range(1, num+1):\n        if (i%2==0):\n            sum+=1\n        else:\n            sum-=1\n    return(sum, sum%2)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    num_list = []\n    result = []\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even = 0\n    odd = 0\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # the idea is to count the odd digits and the even digits.\n    if num == 0:\n        return 0\n    elif num % 2 == 0:\n        return (1, even_odd_count(num // 2))\n    elif num % 2 == 1:\n        return (2, even_odd_count(num // 2))\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return (sum(x for x in [num//10, num%10] if x%2==0), sum(x for x in [num//10, num%10] if x%2==1))\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    char_nums = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    index = 0\n    while index < len(number):\n        if number[index] in char_nums:\n            result += char_nums[number[index]]\n            index += 1\n        elif number[index] == 'i':\n            index += 1\n        elif number[index] == 'v':\n            index += 1\n            result += 'vi'\n        elif number[index] == 'x':\n            index += 1\n            result += 'x'\n        elif number[index] == 'l':\n            index += 1\n            result += 'li'\n        elif number[index] == 'c':\n            index += 1\n            result += 'c'\n        elif number[index] == 'd':\n            index += 1\n            result += 'di'\n        elif number[index] == 'd':\n            index += 1\n            result += 'di'\n            if index < len(number):\n                result += 'd'\n        elif number[index] == 'x':\n            index += 1\n            result += 'x'\n            if index < len(number):\n                result += 'x'\n        else:\n            raise ValueError('unknown symbol')\n    return result.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    roman = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX',\n            5: 'V', 4: 'IV', 1: 'I'}\n    l = []\n    # construct str of digits\n    for i in range(1, len(number) + 1):\n        l.append(roman[i])\n    # construct the roman numeral\n    l.reverse()\n    result = ''\n    for i in range(len(l)):\n        result += l[i]\n    return result.lower()"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if number == 0: return ''\n    roman_numeral = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX', 10: 'X',\n        11: 'XI', 12: 'XII', 13: 'XIII', 14: 'XIV', 15: 'XV', 16: 'XVI', 17: 'XVII', 18: 'XVIII', 19: 'XIX', 20: 'XX'}\n    ret_str = ''\n    num = number\n    while num > 0:\n        cur_num = num % 10\n        if cur_num in roman_numeral:\n            ret_str += roman_numeral[cur_num]\n            num = num // 10\n        else:\n            return ''\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    d = {\n        1: 'i',\n        5: 'v',\n        10: 'l',\n        50: 'd',\n        100: 'c',\n        500:'m',\n        1000: 'b'\n    }\n    if number == 0:\n        return ''\n    elif number == 1:\n        return 'i'\n    elif number == 2:\n        return 'v'\n    elif number == 3:\n        return 'x'\n    elif number == 4:\n        return 'l'\n    elif number == 5:\n        return 'd'\n    elif number == 6:\n        return 'c'\n    elif number == 7:\n        return'm'\n    elif number == 8:\n        return 'b'\n    elif number == 9:\n        return 'vii'\n    elif number == 10:\n        return 'iiiii'\n    elif number == 11:\n        return 'iii'\n    elif number == 12:\n        return 'v'\n    elif number == 13:\n        return 'x'\n    elif number == 14:\n        return 'l'\n    elif number == 15:\n        return 'd'\n    elif number == 16:\n        return 'c'\n    elif number == 17:\n        return'm'\n    elif number == 18:\n        return 'b'\n    elif number == 19:\n        return 'v'\n    elif number == 20:\n        return 'ii'\n    elif number == 21:\n        return 'iii'\n    elif number == 22:\n        return 'iv'\n    elif number == 23:\n        return 'vii'\n    elif number == 24:\n        return 'iiii'\n    elif number == 25:\n        return 'iiiii'\n    elif number == 26:\n        return 'iviii'\n    elif number == 27:\n        return 'x'\n    elif number == 28:\n        return 'l'\n    elif number == 29:\n        return 'd'\n    elif number == 30:\n        return 'c'\n    elif number == 31:\n        return'm'\n    elif number == 32:\n        return 'b'\n    elif number == 33:\n        return 'v'\n    elif number == 34:\n        return 'xx'\n    elif number == 35:\n        return 'lx'\n    elif number == 36:\n        return 'dxi'\n    elif number == 37:\n        return 'cxi'\n    elif number == 38:\n        return'mm'\n    elif number == 39:\n        return 'bx'\n    elif number == 40:\n        return 'vx'\n    elif number == 41:\n        return 'xxi'\n    elif number == 42:\n        return 'lxii'\n    elif number == 43:\n        return 'dxiii'\n    elif number == 44:\n        return 'cxiii'\n    elif number == 45:\n        return'mmii'\n    elif number == 46:\n        return 'bxii'\n    elif number == 47:\n        return 'vxii'\n    elif number == 48:\n        return 'xxii'\n    elif number == 49:\n        return 'lxi'\n    elif number == 50:\n        return 'dxiiii'\n    elif number == 51:\n        return 'cxiiii'\n    elif number == 52:\n        return'mmiii'\n    elif number == 53:\n        return 'bxiii'\n    elif number == 54:\n        return 'vxi'\n    elif number == 55:\n        return 'xxiii'\n    elif number == 56:\n        return 'lxiii'\n    elif number == 57:\n        return 'dxiiiiii'\n    elif number == 58:\n        return 'cxiiiiii'\n    elif number == 59:\n        return'mmiiiii'\n    elif number == 60:\n        return 'bxiiiii'\n    elif number == 61:\n        return 'vxiiii'\n    elif number == 62:\n        return 'xxiiiii'\n    elif number == 63:\n        return 'lxiiiiii'\n    elif number == 64:\n        return 'dxiiiiiii'\n    eli"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Add 1 for 0-1 digit, just in case the string doesn't start with 0\n    if number == 0:\n        return 'x'\n    # Step 1: number is a positive integer, then go up to 100\n    if number >= 100:\n        # step 2: number is not divisible by 100, then go up to 99\n        if number % 100!= 99:\n            # step 3: number is not divisible by 100, then go up to 99\n            if number % 100 == 99:\n                # step 4: number is divisible by 100 and is not larger than 99, then go up to 99\n                # this is a special case: since we assume the roman numeral is always divisible by 100,\n                # it will not be possible to reach 999 directly, the resultant string will be xi\n                return 'xi' + int_to_mini_roman(number - 100)\n            # step 5: number is divisible by 100, then go up to 99\n            if number % 100 == 99:\n                # step 6: number is divisible by 100 and is not larger than 99, then go up to 99\n                # this is a special case: since we assume the roman numeral is always divisible by 100,\n                # it will not be possible to reach 999 directly, the resultant string will be xi\n                return 'x' + int_to_mini_roman(number - 99)\n        # step 2a: number is divisible by 100, then go up to 99\n        if number % 100 == 99:\n            # step 2b: number is divisible by 100, then go up to 99\n            return 'x' + int_to_mini_roman(number - 99)\n    # step 2: number is not divisible by 100, then go up to 99\n    if number % 100!= 99:\n        # step 2a: number is not divisible by 100, then go up to 99\n        return int_to_mini_roman(number - 100) + 'x'\n    # Step 3: number is divisible by 100 and is not larger than 99, then go up to 99\n    # this is a special case: since we assume the roman numeral is always divisible by 100,\n    # it will not be possible to reach 999 directly, the resultant string will be xi\n    return int_to_mini_roman(number - 99) + 'x'\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    num_map = {\n        1: \"I\",\n        2: \"V\",\n        3: \"X\",\n        4: \"L\",\n        5: \"C\",\n        6: \"D\",\n        7: \"M\",\n        8: \"IV\",\n        9: \"IX\",\n        10: \"XL\",\n        11: \"XC\",\n        12: \"CD\",\n        13: \"CM\",\n        14: \"MXL\",\n        15: \"MCD\",\n        16: \"MDI\",\n        17: \"MMX\",\n        18: \"MMCD\",\n        19: \"MMM\",\n    }\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    roman_numerals = {\n        1: \"I\",\n        2: \"II\",\n        3: \"III\",\n        4: \"IV\",\n        5: \"V\",\n        6: \"VI\",\n        7: \"VII\",\n        8: \"VIII\",\n        9: \"IX\",\n        10: \"X\",\n        11: \"XI\",\n        12: \"XII\",\n        13: \"XIII\",\n        14: \"XIV\",\n        15: \"XVI\",\n        16: \"XVII\",\n        17: \"XVIII\",\n        18: \"XIX\",\n        19: \"XX\",\n        20: \"XXI\",\n        21: \"XXII\",\n        22: \"XXIII\",\n        23: \"XXIV\",\n        24: \"XXVI\",\n        25: \"XXVII\",\n        26: \"XXVIII\",\n        27: \"XXIX\",\n    }\n    result = []\n    num = number\n    while num:\n        if num in roman_numerals:\n            result.append(roman_numerals[num])\n            num -= 1\n        else:\n            result.append('I')\n            num -= 2\n    result = ''.join(result[::-1])\n    return ''.join(result)\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    roman = {1: \"I\",\n             2: \"II\",\n             3: \"III\",\n             4: \"IV\",\n             5: \"V\",\n             6: \"VI\",\n             7: \"VII\",\n             8: \"VIII\",\n             9: \"IX\",\n             10: \"X\",\n             11: \"XI\",\n             12: \"XII\",\n             13: \"XIII\",\n             14: \"XIV\",\n             15: \"XV\",\n             16: \"XVI\",\n             17: \"XVII\",\n             18: \"XVIII\",\n             19: \"XIX\",\n             20: \"XXI\",\n             21: \"XXII\",\n             22: \"XXIII\",\n             23: \"XXIV\",\n             24: \"XXV\",\n             25: \"XXVI\",\n             26: \"XXVII\",\n             27: \"XXVIII\",\n             28: \"XXIX\",\n             30: \"XXX\",\n             40: \"XL\",\n             50: \"L\",\n             90: \"XC\",\n             100: \"C\",\n             150: \"CD\",\n             180: \"D\",\n             300: \"CM\",\n             350: \"M\"}\n    s = \"\"\n    for k, v in roman.items():\n        s += v\n    return s.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # convert a positive integer to a string, in lowercase\n    res = \"\"\n    for i in range(number):\n        if number > 0:\n            res += str(number % 10)\n            number = number // 10\n        else:\n            break\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    roman_table = [\n        \"\",\n        \"i\",\n        \"ii\",\n        \"iii\",\n        \"iv\",\n        \"v\",\n        \"vi\",\n        \"vii\",\n        \"viii\",\n        \"ix\",\n        \"x\",\n        \"xii\",\n        \"xiii\",\n        \"xix\",\n        \"xxxvi\",\n        \"xxxx\",\n        \"xxvi\"\n    ]\n    mini_table = [\n        \"\",\n        \"i\",\n        \"ii\",\n        \"iii\",\n        \"iv\",\n        \"v\",\n        \"vi\",\n        \"vii\",\n        \"viii\",\n        \"ix\",\n        \"x\",\n        \"xii\",\n        \"xiii\",\n        \"xix\",\n        \"xxxvi\",\n        \"xxxx\",\n        \"xxvi\"\n    ]\n    numeral_table = {\n        1: \"\",\n        3: \"cd\",\n        6: \"cdd\",\n        9: \"cde\",\n        12: \"cdf\",\n        15: \"cdei\",\n        18: \"cdfii\",\n        21: \"cdfiii\",\n        24: \"cdfix\",\n        29: \"cdfx\",\n        31: \"cdfxxvi\",\n        35: \"cdfxxvii\"\n    }\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def is_right_angled_triangle(a, b, c):\n        if a == b:\n            return (a == b) or (a == c)\n        elif a == c:\n            return (a == b) or (b == c)\n        else:\n            return True\n    if is_right_angled_triangle(a, b, c):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def is_right_angled(a, b, c):\n        '''\n        Check if the given coordinates are right angled.\n        '''\n        return is_right_angle(a, b, c, False) and is_right_angle(a, c, b, True) and is_right_angle(b, c, a, True)\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return True if (a + b) * (b + c) == a * b * c else False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ((a**2+b**2)**.5 == (c**2+a**2)**.5)\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Initialize a dictionary to record the three angles\n    angles = {'right': 0, 'right_180': 0, 'right_270': 0}\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    x1, x2, x3 = 0,0,0\n    delta_x1 = (b[0] - a[0]) / 2\n    delta_x2 = (b[1] - a[1]) / 2\n    delta_x3 = (b[2] - a[2]) / 2\n    if delta_x1 < delta_x2:\n        x1 = delta_x1\n        delta_x2 = delta_x1\n    elif delta_x1 > delta_x2:\n        x1 = delta_x2\n        delta_x2 = delta_x1\n    if delta_x3 < delta_x1:\n        x3 = delta_x3\n        delta_x1 = delta_x3\n    elif delta_x3 > delta_x1:\n        x3 = delta_x1\n        delta_x1 = delta_x3\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a = abs(a)\n    b = abs(b)\n    c = abs(c)\n    if (a + b + c) % 2 == 0:\n        return True\n    return False\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the triangle.\n    A triangle is a triangle in which a, b and c are equal lengths.\n    Example:\n    triangle_area(3, 4, 5) == 42.6666666666666666666666666\n    triangle_area(1, 2, 3) == 1\n    '''\n    a = abs(a)\n    b = abs(b)\n    c = abs(c)\n    return (a*b)/2 + (a*c)/2 + (b*c)/2\ndef triangle_area_recursion(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the triangle.\n    A triangle is a triangle in which a, b and c are equal lengths.\n    Example:\n    triangle_area_recursion(3, 4, 5) == 42.6666666666666666666666666\n    triangle_area_recursion(1, 2, 3) == 1\n    '''\n    if a!= b or a!= c or b!= c:\n        raise Exception(\"Error, Triangle not calculated\")\n    return (a*b)/2 + (a*c)/2 + (b*c)/2\ndef triangle_area_dp(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the triangle.\n    A triangle is a triangle in which a, b and c are equal lengths.\n    Example:\n    triangle_area_dp(3, 4, 5) == 42.6666666666666666666666666\n    triangle_area_dp(1, 2, 3) == 1\n    '''\n    return ((a+b+c)/2)*(a*b*c)/(a*b*c)\ndef triangle_area_dp_recursion(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the triangle.\n    A triangle is a triangle in which a, b and c are equal lengths.\n    Example:\n    triangle_area_dp_recursion(3, 4, 5) == 42.6666666666666666666666666\n    triangle_area_dp_recursion(1, 2, 3) == 1\n    '''\n    if a!= b or a!= c or b!= c:\n        raise Exception(\"Error, Triangle not calculated\")\n    return ((a+b+c)/2)*(a*b*c)/(a*b*c)\ndef triangle_area_dp_DP(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the triangle.\n    A triangle is a triangle in which a, b and c are equal lengths.\n    Example:\n    triangle_area_dp_DP(3, 4, 5) == 42.6666666666666666666666666\n    triangle_area_dp_DP(1, 2, 3) == 1\n    '''\n    return (((a+b+c)/2)*(a*b*c)/(a*b*c))**0.5\ndef triangle_area_DP_recursion(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the triangle.\n    A triangle is a triangle in which a, b and c are equal lengths.\n    Example:\n    triangle_area_DP_recursion(3, 4, 5) == 42.6666666666666666666666666\n    triangle_area_DP_recursion(1, 2, 3) == 1\n    '''\n    if a!= b or a!= c or b!= c:\n        raise Exception(\"Error, Triangle not calculated\")\n    return (((a+b+c)/2)*(a*b*c)/(a*b*c))**0.5\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a + b > c:\n        return False\n    elif a + c > b:\n        return False\n    elif a + b == c:\n        return True\n    elif a * b == c * c:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if (a == b) and (c == a):\n        return True\n    if (a == b) or (a == c):\n        return False\n    if (a == c) or (b == c):\n        return False\n    if (a < b) or (b < c):\n        return False\n    if (a > b) or (b > c):\n        return False\n    return True\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Method 1\n    # if (a + b + c) % 2 == 1:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return max(sorted(set(words), key=lambda word:len(word)))\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    list_of_strings = []\n    for word in words:\n        list_of_strings.append(word)\n    \n    str_count = {}\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_char = 0\n    cur_char = 0\n    words_sorted = sorted(words)\n    for word in words_sorted:\n        if len(word) > cur_char:\n            cur_char = len(word)\n        elif len(word) < cur_char:\n            cur_char = len(word)\n    print(cur_char)\n    print(words_sorted)\n    return words_sorted[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return max(set(words))\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    max_char_count = 0\n    for word in words:\n        count = len(word)\n        if count > max_char_count:\n            max_char_count = count\n            max_word = word\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_char = \"\"\n    for word in words:\n        word_chars = [x for x in word if x in \"abcdefghijklmnopqrstuvwxyz\"]\n        count_char = len(set(word_chars))\n        if count_char > len(word):\n            max_char = word\n    return max_char\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    unique_char = []\n    for word in words:\n        unique_char.append(len(set(word)))\n    return max(unique_char)\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for word in words:\n        count += len(word)\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_char = 0\n    max_word = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_char:\n            max_word = word\n            max_char = count\n    return max_word"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    total_remaining = remaining - need\n    if total_remaining == 0:\n        return [number, total_remaining]\n    elif total_remaining < need:\n        return [number, total_remaining]\n    else:\n        return [number, total_remaining] + eat(number-need, need, remaining)\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # +++ your code here!\n    return [need, number-remaining]\n    \ndef hungry(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and now you have eaten all the carrots.\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * hungry(5, 6, 10) -> [11, 4]\n    * hungry(4, 8, 9) -> [12, 1]\n    * hungry(1, 10, 10) -> [11, 0]\n    * hungry(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [ number - need, remaining ]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    remaining -= need\n    \n    if remaining > 0:\n        \n        return [number, remaining]\n    \n    # return [number, remaining]\n    \n    # eat(4, 6, 10) -> [11, 4]\n    # eat(4, 8, 9) -> [12, 1]\n    # eat(1, 10, 10) -> [11, 0]\n    # eat(2, 11, 5) -> [7, 0]\n    \n    # total number of eaten carrots after your meals,\n    # number of carrots left after your meals\n    return [number, remaining]\n    \n    # def eat(number, need, remaining):\n    #     \"\"\"\n    #     You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    #     but now you need to eat more carrots to complete the day's meals.\n    #     you should return an array of [ total number of eaten carrots after your meals,\n    #                                     the number of carrots left after your meals ]\n    #     if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    # \n    #     Example:\n    #     * eat(5, 6, 10) -> [11, 4]\n    #     * eat(4, 8, 9) -> [12, 1]\n    #     * eat(1, 10, 10) -> [11, 0]\n    #     * eat(2, 11, 5) -> [7, 0]\n    # \n    #     Variables:\n    #     @number : integer\n        # the number of carrots that you have eaten.\n    #     @need : integer\n        # the number of carrots that you need to eat.\n    #     @remaining : integer\n        # the number of remaining carrots thet exist in stock\n    #     \n    #     Constrain:\n    #     * 0 <= number <= 1000\n    #     * 0 <= need <= 1000\n    #     * 0 <= remaining <= 1000\n    # \n    #     Have fun :)\n    #     \"\"\"\n    #     if number == 0:\n    #         return [number, remaining]\n    #     if need == 0:\n    #         return [number, remaining]\n    #     if remaining > 0:\n    #         return [number, remaining]\n    #     # total number of eaten carrots after your meals,\n    #     # number of carrots left after your meals\n    #     return [number, remaining]\n    \n    #     # def eat(number, need, remaining):\n    #     #     \"\"\"\n    #     #     You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    #     #     but now you need to eat more carrots to complete the day's meals.\n    #     #     you should return an array of [ total number of eaten carrots after your meals,\n    #                                     the number of carrots left after your meals ]\n    #     #     if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    #     # \n    #     #     Example:\n    #     #     * eat(5, 6, 10) -> [11, 4]\n    #     #     * eat(4, 8, 9) -> [12, 1]\n    #     #     * eat(1, 10, 10) -> [11, 0]\n    #     #     * eat(2, 11, 5) -> [7, 0]\n    #     # \n    #     #     Variables:\n    #     #     @number : integer\n        # the number of carrots that you have eaten.\n    #     # @need : integer\n        # the number of carrots that you need to eat.\n    #     # @remaining : integer\n        # the number of remaining carrots thet exist in stock\n    #     \n    #     # def eat(number, need, remaining):\n    #     #     return [number, remaining]\n    #     \n    #     # def eat(number, need, remaining):\n    #     #     return [number, remaining]\n    #     \n    #     # def eat(number, need, remainin"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    remaining -= need\n    \n    if remaining < 0:\n        remaining = 0\n    elif remaining == 0:\n        return [ number, remaining ]\n    elif need < need:\n        remaining = 0\n        need = 0\n    else:\n        remaining = 0\n        need = need\n        \n    # ensure that you have enough remaining carrots\n    if remaining < need:\n        remaining = 0\n    elif remaining == need:\n        remaining = 0\n        need = need - remaining\n        \n    return [ number, remaining ]"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    total = number * need\n    remaining -= need\n    if remaining <= 0:\n        return [total, remaining]\n    \n    return [total, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    total = 0\n    remaining = remaining // need\n    if remaining < need:\n        return [0, 0]\n    if remaining > 0:\n        total = number // need\n        total = number % need\n        remaining = remaining % need\n        total += need\n        \n    total += number\n    if total < need:\n        total += need\n        \n    return [total, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if number == 0:\n        return [need, remaining]\n    if number < 0 or need < 0 or remaining < 0:\n        return [0, 0]\n    if remaining < need:\n        return [remaining, number]\n    if need <= remaining:\n        return [need, number]\n    \n    # Need to eat left number of carrots\n    # Need to eat left number of remaining carrots\n    # Sustract the need from remaining number of remaining carrots\n    left_need = need - remaining\n    left_remaining = remaining - need\n    \n    # Need to eat right number of carrots\n    # Remove left number of remaining carrots\n    right_need = need - remaining\n    \n    # Remove left number of remaining carrots\n    right_remaining = remaining - need\n    \n    # Remove need from remaining number of remaining carrots\n    remaining = remaining - need\n    \n    # Eat the left number of carrots\n    left = eat(left_need, left_remaining, left_remaining)\n    # Eat the right number of carrots\n    right = eat(right_need, right_remaining, right_remaining)\n    # Build the final array\n    return [left[0] + left[1], right[0] + right[1]]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if need == 0:\n        return [remaining, 0]\n    else:\n        return [remaining, need]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if number == 0:\n        return [remaining, need]\n    if remaining >= need:\n        return [remaining, need]\n    else:\n        return eat(number-need, need, remaining)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #print('operator =', operator)\n    #print('operand =', operand)\n    #print('len(operator) =', len(operator))\n    #print('len(operand) =', len(operand))\n    #print('operator[0] =', operator[0])\n    #print('operator[1] =', operator[1])\n    #print('operator[2] =', operator[2])\n    #print('operand[0] =', operand[0])\n    #print('operand[1] =', operand[1])\n    #print('operand[2] =', operand[2])\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if operator['+', '*', '-'] == operator['+', '*', '-']:\n        return do_add(operator, operand)\n    elif operator['+', '*', '-'] == operator['+', '*', '-'] and operator['+', '*', '-'] in operand:\n        return operator['+', '*', '-']\n    elif operator['+', '*', '-'] == operator['+', '*', '-'] or operator['+', '*', '-'] in operand:\n        return do_add(operand, operator['+', '*', '-'])\n    elif operator['+', '*', '-'] in operand:\n        return do_add(operand, operator['+', '*', '-'])\n    else:\n        return do_add(operand, operator['+', '*', '-'])\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert len(operator) == len(operand), \"Operator and operand lists must have the same length.\"\n    assert operator.index('+') < operator.index('-') or operator.index('*') < operator.index('/'), \"Operator must be + or -.\"\n    result = 0\n    # Make the addition \n    if operator[operator.index('+')] == '+':\n        result = operator[operator.index('+')] + operand[operator.index('+')]\n        operator[operator.index('+')] = '0'\n        operand[operand.index('+')] = 0\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if operator['+'][0] == '+':\n        operator['+'].pop(0)\n    elif operator['+'][0] == '*':\n        operator['+'].pop(0)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # BASE CASE\n    if operator['*'] == '*':\n        if operand == []:\n            return 0\n        # Case 1:\n        # Sum of both operands is equal to the value of operand\n        if len(operand) == 1:\n            return operand[0]\n        # Case 2:\n        # Sum of both operands is equal to the value of operand multiplied by the number of operands\n        if len(operand) == 2:\n            return operand[0] * operand[1]\n        # Case 3:\n        # Sum of both operands is equal to the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 3:\n            return operand[0] * operand[1] * operand[2]\n        # Case 4:\n        # Sum of both operands is equal to the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 4:\n            return operand[0] * operand[1] * operand[2] * operand[3]\n    # BASE CASE\n    elif operator['+'] == '+':\n        if operand == []:\n            return 0\n        # Case 1:\n        # Addition of both operands is equal to the value of operand\n        if len(operand) == 1:\n            return operand[0] + operand[0]\n        # Case 2:\n        # Addition of both operands is equal to the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 2:\n            return operand[0] + operand[1]\n        # Case 3:\n        # Addition of both operands is equal to the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 3:\n            return operand[0] + operand[1] * operand[2]\n        # Case 4:\n        # Addition of both operands is equal to the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 4:\n            return operand[0] + operand[1] * operand[2] * operand[3]\n    # BASE CASE\n    elif operator['-'] == '-':\n        if operand == []:\n            return 0\n        # Case 1:\n        # Subtraction of both operands is equal to the value of operand\n        if len(operand) == 1:\n            return operand[0] - operand[0]\n        # Case 2:\n        # Subtraction of both operands is equal to the value of operand multiplied by the number of operands\n        if len(operand) == 2:\n            return operand[0] - operand[1]\n        # Case 3:\n        # Subtraction of both operands is equal to the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 3:\n            return operand[0] - operand[1] * operand[2]\n        # Case 4:\n        # Subtraction of both operands is equal to the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the value of operand multiplied by the number of operands\n        if len(operand) == 4:\n            return operand[0] - operand[1] * operand[2] * operand[3]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = 0\n    operator = operator.replace(\" \", \"\")\n    for i in operator.split(\",\"):\n        if \"(\" in i:\n            result += do_algebra(i, operand[operator.index(i):])\n            operator = operator[0:operator.index(i)]\n        else:\n            result += eval(i)\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    while len(operator) > 0 and len(operand) > 0:\n        operator_op = operator.pop(0)\n        operand_op = operand.pop(0)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    operator_len = len(operator)\n    operand_len = len(operand)\n    operator_index = 0\n    operand_index = 0\n    while operator_index < operator_len and operand_index < operand_len:\n        result += operator[operator_index] * operand[operand_index]\n        operator_index += 1\n        operand_index += 1\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #Create dictionary, operators, and operands\n    operators = {\n        '+': operator.__add__,\n        '-': operator.__sub__,\n        '*': operator.__mul__,\n        '//': operator.__floordiv__,\n        '**': operator.__pow__\n    }\n    operands = [operand for operand in operator.__iter__()]\n    #Loop through operators, and check each operator\n    for operator in operators:\n        #Check if the operator is in the operands list\n        if operator in operands:\n            #Create and return the result\n            result = operators[operator](operand, operands)\n            return result\n    #No operator present in operands list\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return operator['+', '*', '-']\n    # return operator['+', '*', '-']\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = s.replace(\"#\",\"\").replace(\"@\",\"\").lower()\n    return \"\".join([i if i in \"abcdefghijklmnopqrstuvwxyz\" else \" \" for i in s]"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    res = \"\"\n    for i in range(len(s)):\n        if s[i].islower():\n            res += s[i].upper()\n        else:\n            res += s[i].lower()\n    return res[::-1]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if s == \"\":\n        return \"\"\n    if len(s) == 1:\n        return s\n    if s[0] == \"\":\n        return solve(s[1:])\n    \n    return solve(s[1:] + s[0].upper() + s[1:])\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    def reverse(string):\n        # if string is empty, return string as is\n        if string == '':\n            return string\n        \n        # return reversed string\n        return string[::-1]\n    \n    # if string is empty\n    if s == '':\n        return ''\n    \n    # if it is lower\n    if s[0] == 'a' or s[0] == 'b' or s[0] == 'c' or s[0] == 'd':\n        return reverse(s)\n    \n    # if it is upper\n    if s[0] == 'i' or s[0] == 'j' or s[0] == 'k' or s[0] == 'l' or s[0] =='m' or s[0] == 'n':\n        return reverse(s[::-1])\n    \n    return reverse(s)\n    \ndef main():\n    string = input('Enter string to be reverse: ')\n    print(solve(string))\n    \nmain("
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] not in LETTERS:\n            s[i] = s[i].upper()\n    return ''.join(s)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not s:\n        return \"\"\n    if not s:\n        return s\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # First, check if the string contains any letters\n    if len(s) == 0:\n        return \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l = []\n    for i in range(len(s)):\n        if s[i] is not'':\n            if s[i].isalpha():\n                l.append(s[i].upper())\n            else:\n                l.append(s[i].lower())\n        else:\n            l.append(s[i])\n    return ''.join(l)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not s:\n        return \"\"\n    if len(s) == 1:\n        return s[0].upper() + s[0].lower()\n    else:\n        return solve(s[1:]) + s[0].upper() + solve(s[0].lower() + s[1:])\n        \ndef rev(s):\n    \"\"\"You are given a string s.\n    reverse all lowercase letters in the string.\n    \"\"\"\n    return \"\".join([s[i].lower() + s[i] for i in range(len(s))])\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not s:\n        return s\n    if s[0] == \".\":\n        return solve(s[1:])\n    else:\n        return solve(s[0] + s[1:])\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    import hashlib\n    if not text:\n        return None\n    h = hashlib.md5()\n    h.update(text.encode())\n    return h.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    hash_md5 = hashlib.md5()\n    hash_md5.update(text.encode('utf-8'))\n    return hash_md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    hash_str = hashlib.md5()\n    if text == '':\n        return None\n    hash_str.update(text.encode('utf-8'))\n    return hash_str.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    text = text.strip()\n    if text == '':\n        return None\n    text = text.encode('utf-8')\n    digest = hashlib.md5()\n    digest.update(text)\n    return digest.hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    md5 = hashlib.md5()\n    if text:\n        md5.update(text.encode())\n    return md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash if text == \"\" else None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(text) > 0:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not text:\n        return None\n    return md5(text.encode(\"utf-8\")).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(text) == 0:\n        return None\n    md5_obj = hashlib.md5()\n    md5_obj.update(text.encode())\n    return md5_obj.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    import hashlib\n    import base64\n    import binascii\n    \n    hash = hashlib.md5()\n    if len(text) == 0:\n        return None\n    \n    # Encode text to base64\n    text = text.encode('utf-8')\n    text = base64.b64encode(text)\n    text = text.decode('utf-8')\n    \n    # Encode text to md5\n    hash.update(text.encode('utf-8'))\n    \n    # Return the md5 hash\n    return binascii.hexlify(hash.digest())\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # if a > b:\n    #     return []\n    #\n    # count = 1\n    # l = []\n    # while count <= b:\n    #     if count % 2 == 0:\n    #         l.append(count)\n    #         count += 1\n    #     else:\n    #         l.append(count)\n    #         count += 1\n    #         # l.append(count)\n    #         # count += 1\n    #\n    # return l\n    return sorted(list(range(a, b+1)))\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return list(str(a) + str(b))\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [x for x in range(a, b + 1) if x % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # return [i for i in range(min(a, b), max(a, b))]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if b < a:\n        b = a\n        a = b\n    s = 0\n    while a < b:\n        s += a\n        a += 1\n    return [s - (a-1) if (s - (a-1)) % 2 == 0 else s - (a-1) + 1]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even_digits = []\n    while a < b:\n        even_digits.append(a)\n        a += 1\n    return even_digits\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    while a > 0:\n        result.append(a % 10)\n        a = a // 10\n    while b > 0:\n        result.append(b % 10)\n        b = b // 10\n    return result"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    ints = [int(x) for x in str(a)]\n    ints.append(int(b))\n    return ints\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    start = a\n    end = b\n    while start <= end:\n        yield start\n        start += 2\n"
    }
]